void sub_1A23E8310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,md::MapTileData *a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  md::Triangulator<float>::~Triangulator((uint64_t)&a31);
  std::vector<std::unique_ptr<md::CoastlineGroup>>::~vector[abi:nn180100](&a45);
  std::unordered_map<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~unordered_map[abi:nn180100]((uint64_t)&a49);
  std::vector<geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](&a54);
  _Unwind_Resume(a1);
}

uint64_t md::Triangulator<float>::~Triangulator(uint64_t a1)
{
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  geo::Pool<geo::Triangulator<float,unsigned short>::Node>::disposeElements(a1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  return a1;
}

void sub_1A23E8C44(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<md::CoastlineGroup>>::~vector[abi:nn180100](void *a1)
{
  v2 = (void *)*a1;
  if (*a1)
  {
    v3 = (void *)a1[1];
    v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (md::CoastlineGroup *)*--v3;
        v5 = v6;
        void *v3 = 0;
        if (v6)
        {
          md::CoastlineGroup::~CoastlineGroup(v5);
          MEMORY[0x1A6239270]();
        }
      }
      while (v3 != v2);
      v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unordered_map<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(void **)v2;
      *((void *)v2 + 3) = &unk_1EF559598;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void **std::vector<geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](void **a1)
{
  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 24;
      v6 = v3 - 24;
      v7 = v3 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::PolygonTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::PolygonTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FFE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::PolygonTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FFE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::unordered_map<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::CoastlineGroup *>::~unordered_map[abi:nn180100](uint64_t a1)
{
  v2 = *(void **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (void *)*v2;
    v4 = (std::__shared_weak_count *)v3[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

char *std::vector<geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  BOOL v9 = &v7[24 * v6];
  *(void *)v8 = &unk_1EF559598;
  *((void *)v8 + 1) = 0;
  objc_storeStrong((id *)v8 + 1, *(id *)(a2 + 8));
  v10 = *(void **)(a2 + 8);
  *(void *)(a2 + 8) = 0;

  v11 = v8 + 24;
  v13 = (id *)*a1;
  v12 = (id *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v12) {
      return v11;
    }
    goto LABEL_19;
  }
  uint64_t v14 = (uint64_t)&v7[24 * v2 - 24];
  do
  {
    *((void *)v8 - 3) = &unk_1EF559598;
    v8 -= 24;
    *((void *)v8 + 1) = 0;
    objc_storeStrong((id *)v8 + 1, *(v12 - 2));
    v15 = *(v12 - 2);
    *(v12 - 2) = 0;

    v14 -= 24;
    v12 -= 3;
  }
  while (v12 != v13);
  v12 = (id *)*a1;
  v16 = (id *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v16 != v12)
  {
    v17 = v16 - 3;
    v18 = v16 - 3;
    v19 = v16 - 3;
    do
    {
      v20 = (void (**)(id *))*v19;
      v19 -= 3;
      (*v20)(v18);
      v17 -= 3;
      BOOL v21 = v18 == v12;
      v18 = v19;
    }
    while (!v21);
  }
  if (v12) {
LABEL_19:
  }
    operator delete(v12);
  return v11;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    BOOL v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (void *)(a1 + 16);
  v10 = operator new(0x30uLL);
  void *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = &unk_1EF559598;
  v10[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v7) {
LABEL_35:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v23 = *(void *)a1;
  v24 = *(void **)(*(void *)a1 + 8 * v5);
  if (v24)
  {
    void *v10 = *v24;
LABEL_58:
    void *v24 = v10;
    goto LABEL_59;
  }
  void *v10 = *v13;
  void *v13 = v10;
  *(void *)(v23 + 8 * v5) = v13;
  if (*v10)
  {
    unint64_t v25 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A23E942C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZNK2md22PolygonLayerDataSource11buildMeshesERKN3geo8QuadTileERNSt3__16vectorINS1_11_retain_ptrIU8__strongP14VKPolygonGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS5_9allocatorISF_EEEERNS5_13unordered_mapIySF_NS5_4hashIyEENS5_8equal_toIyEENSG_INS5_4pairIKySF_EEEEEERNS6_INS5_10shared_ptrINS_21GEOVectorTileResourceEEENSG_ISX_EEEERNS_12TriangulatorIfEERKNSV_IN3gss17StylesheetManagerINS14_10PropertyIDEEEEEf_block_invoke(uint64_t a1, ResourceAccessor *a2)
{
  uint64_t v2 = a1;
  unint64_t v3 = *(unsigned __int8 **)(a1 + 32);
  md::MeshSetStorage::prepareStorage(*(uint64_t **)(a1 + 40), a2);
  v4 = *(uint64_t **)(v2 + 56);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      id v7 = *(id *)(v5 + 8);
      [v7 willAddDataWithAccessor:a2];

      v5 += 24;
    }
    while (v5 != v6);
  }
  uint64_t v8 = *(void *)(v2 + 64);
  BOOL v9 = *(void **)v8;
  v73 = *(void **)(v8 + 8);
  if (*(void **)v8 != v73)
  {
    uint64_t v10 = 1;
    uint64_t v75 = v2;
    while (1)
    {
      unint64_t v11 = (std::__shared_weak_count *)v9[1];
      uint64_t v79 = *v9;
      uint64_t v91 = *v9;
      v92 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v77 = geo::codec::VectorTile::polygonsCount(*(geo::codec::VectorTile **)(v79 + 144));
      if (v77) {
        break;
      }
LABEL_116:
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v9 += 2;
      if (v9 == v73) {
        goto LABEL_119;
      }
    }
    v74 = v9;
    uint64_t v12 = 0;
    uint64_t v13 = v79;
    uint64_t v14 = v77;
LABEL_12:
    uint64_t v15 = geo::codec::VectorTile::polygons(*(geo::codec::VectorTile **)(v13 + 144));
    uint64_t v16 = v15;
    uint64_t v17 = v15 + (v12 << 7);
    int v18 = v3[752];
    if (v18 == 2)
    {
      if (*(unsigned char *)(v17 + 127) != 1) {
        goto LABEL_11;
      }
    }
    else if (v18 == 1 && *(unsigned char *)(v15 + (v12 << 7) + 127) == 1)
    {
      goto LABEL_11;
    }
    if ((*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)v3 + 152))(v3, v91, v17)) {
      goto LABEL_11;
    }
    uint64_t v19 = v16 + (v12 << 7);
    int v21 = *(unsigned __int8 *)(v19 + 127);
    unint64_t v20 = (unsigned char *)(v19 + 127);
    BOOL v22 = v21 == 1;
    if (v21 == 1) {
      uint64_t v23 = v10 + 1;
    }
    else {
      uint64_t v23 = v10;
    }
    if (!v22) {
      uint64_t v10 = 0;
    }
    if (!*(_DWORD *)(v17 + 100))
    {
      uint64_t v10 = v23;
      goto LABEL_11;
    }
    v78 = v20;
    uint64_t v80 = v23;
    md::createFeatureAttributeSet((gss::Allocator *)&v87, (uint64_t *)(v17 + 24));
    uint64_t v24 = **(void **)(v2 + 72);
    *(void *)((char *)&v81 + 7) = 0;
    *(void *)&long long v81 = 0;
    HIBYTE(v81) = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v85, v24, (gss::FeatureAttributeSet *)&v87, (gss::QueryOverrides *)&v81);
    unint64_t v25 = v87;
    int64_t v26 = (char *)v88 - (char *)v87;
    for (unint64_t i = ((char *)v88 - (char *)v87) >> 3; v25 != v88; v25 += 2)
    {
      unint64_t v28 = ((i << 6) - 0x61C8864680B583EBLL + (i >> 2) + *v25) ^ i;
      unint64_t i = (*((unsigned __int16 *)v25 + 2) - 0x61C8864680B583EBLL + (v28 << 6) + (v28 >> 2)) ^ v28;
    }
    int8x8_t v29 = *(int8x8_t *)(v2 + 88);
    if (!*(void *)&v29) {
      goto LABEL_63;
    }
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = i;
      if (i >= *(void *)&v29) {
        unint64_t v31 = i % *(void *)&v29;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v29 - 1) & i;
    }
    v32 = *(void **)(*(void *)(v2 + 80) + 8 * v31);
    if (!v32 || (v33 = (void *)*v32) == 0)
    {
LABEL_63:
      v35 = 0;
      goto LABEL_64;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v29 - 1;
      while (1)
      {
        uint64_t v41 = v33[1];
        if (i == v41)
        {
          uint64_t v42 = v33[2];
          uint64_t v43 = v33[3];
          if (v43 - v42 == v26)
          {
            if (v42 == v43) {
              goto LABEL_62;
            }
            v44 = v87;
            while (*(_DWORD *)v42 == *v44 && *(unsigned __int16 *)(v42 + 4) == *((unsigned __int16 *)v44 + 2))
            {
              v42 += 8;
              v44 += 2;
              if (v42 == v43) {
                goto LABEL_62;
              }
            }
          }
        }
        else if ((v41 & v34) != v31)
        {
          goto LABEL_63;
        }
        v35 = 0;
        v33 = (void *)*v33;
        if (!v33) {
          goto LABEL_64;
        }
      }
    }
    while (1)
    {
      unint64_t v36 = v33[1];
      if (i == v36)
      {
        uint64_t v37 = v33[2];
        uint64_t v38 = v33[3];
        if (v38 - v37 == v26)
        {
          if (v37 == v38)
          {
LABEL_62:
            v35 = v33;
LABEL_64:
            if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZNK2md22PolygonLayerDataSource11buildMeshesERKN3geo8QuadTileERNSt3__16vectorINS1_11_retain_ptrIU8__strongP14VKPolygonGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS5_9allocatorISF_EEEERNS5_13unordered_mapIySF_NS5_4hashIyEENS5_8equal_toIyEENSG_INS5_4pairIKySF_EEEEEERNS6_INS5_10shared_ptrINS_21GEOVectorTileResourceEEENSG_ISX_EEEERNS_12TriangulatorIfEERKNSV_IN3gss17StylesheetManagerINS14_10PropertyIDEEEEEfEUb_E16fallbackGroupMap, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZNK2md22PolygonLayerDataSource11buildMeshesERKN3geo8QuadTileERNSt3__16vectorINS1_11_retain_ptrIU8__strongP14VKPolygonGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS5_9allocatorISF_EEEERNS5_13unordered_mapIySF_NS5_4hashIyEENS5_8equal_toIyEENSG_INS5_4pairIKySF_EEEEEERNS6_INS5_10shared_ptrINS_21GEOVectorTileResourceEEENSG_ISX_EEEERNS_12TriangulatorIfEERKNSV_IN3gss17StylesheetManagerINS14_10PropertyIDEEEEEfEUb_E16fallbackGroupMap))
            {
              __cxa_guard_release(&_ZGVZZNK2md22PolygonLayerDataSource11buildMeshesERKN3geo8QuadTileERNSt3__16vectorINS1_11_retain_ptrIU8__strongP14VKPolygonGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS5_9allocatorISF_EEEERNS5_13unordered_mapIySF_NS5_4hashIyEENS5_8equal_toIyEENSG_INS5_4pairIKySF_EEEEEERNS6_INS5_10shared_ptrINS_21GEOVectorTileResourceEEENSG_ISX_EEEERNS_12TriangulatorIfEERKNSV_IN3gss17StylesheetManagerINS14_10PropertyIDEEEEEfEUb_E16fallbackGroupMap);
            }
            v46 = (unsigned __int8 **)(v35 + 6);
            if (!v35) {
              v46 = (unsigned __int8 **)&_ZZZNK2md22PolygonLayerDataSource11buildMeshesERKN3geo8QuadTileERNSt3__16vectorINS1_11_retain_ptrIU8__strongP14VKPolygonGroupNS1_16_retain_objc_arcENS1_17_release_objc_arcENS1_10_hash_objcENS1_11_equal_objcEEENS5_9allocatorISF_EEEERNS5_13unordered_mapIySF_NS5_4hashIyEENS5_8equal_toIyEENSG_INS5_4pairIKySF_EEEEEERNS6_INS5_10shared_ptrINS_21GEOVectorTileResourceEEENSG_ISX_EEEERNS_12TriangulatorIfEERKNSV_IN3gss17StylesheetManagerINS14_10PropertyIDEEEEEfEUb_E16fallbackGroupMap;
            }
            v47 = *v46;
            v48 = v46[1];
            if (*v46 == v48)
            {
              v49 = 0;
            }
            else
            {
              v49 = 0;
              uint64_t v50 = v16 + (v12 << 7);
              int v51 = *(unsigned __int8 *)(v50 + 126);
              float v52 = *(float *)(v50 + 104);
              float v53 = *(float *)(v50 + 108);
              do
              {
                if (*((void *)v47 + 2) == v10 && *v47 == v51)
                {
                  if (!v51
                    || ((float v55 = *((float *)v47 + 1),
                         float v56 = vabds_f32(v55, v52),
                         v56 > (float)(fabsf(v55 + v52) * 0.000011921))
                      ? (BOOL v57 = v56 <= 1.1755e-38)
                      : (BOOL v57 = 1),
                        v57
                     && ((float v58 = *((float *)v47 + 2),
                          float v59 = vabds_f32(v58, v53),
                          v59 > (float)(fabsf(v58 + v53) * 0.000011921))
                       ? (BOOL v60 = v59 <= 1.1755e-38)
                       : (BOOL v60 = 1),
                         v60)))
                  {
                    id v54 = *((id *)v47 + 4);

                    v49 = v54;
                  }
                }
                v47 += 48;
              }
              while (v47 != v48);
            }
            v61 = v85;
            v62 = v86;
            if (v86)
            {
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
              *((void *)&v81 + 1) = v62;
              atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            else
            {
              *((void *)&v81 + 1) = 0;
            }
            uint64_t v2 = v75;
            *(void *)&long long v81 = v61;
            uint64_t v82 = 0;
            v83 = 0;
            char v84 = 0;
            if (v61) {
              LOBYTE(v61) = (*(uint64_t (**)(uint64_t *, uint64_t *))(*v61 + 48))(v61, &v82);
            }
            char v84 = (char)v61;
            if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
              uint64_t v63 = *(void *)(v75 + 120);
              if (v63) {
                goto LABEL_93;
              }
LABEL_97:
              uint64_t v64 = 0;
              goto LABEL_98;
            }
            uint64_t v63 = *(void *)(v75 + 120);
            if (!v63) {
              goto LABEL_97;
            }
LABEL_93:
            if (*v78 == 1) {
              uint64_t v64 = v63;
            }
            else {
              uint64_t v64 = 0;
            }
LABEL_98:
            [v49 addPolygon:v17 accessor:a2 triangulator:*(void *)(v75 + 136) withRounder:v64];
            if (v84) {
              (*(void (**)(void))(*(void *)v81 + 56))(v81);
            }
            v65 = v83;
            if (v83 && !atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
              v66 = (std::__shared_weak_count *)*((void *)&v81 + 1);
              if (*((void *)&v81 + 1)) {
                goto LABEL_103;
              }
            }
            else
            {
              v66 = (std::__shared_weak_count *)*((void *)&v81 + 1);
              if (*((void *)&v81 + 1))
              {
LABEL_103:
                if (!atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
            }

            v67 = v86;
            if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
              v68 = v87;
              if (v87)
              {
LABEL_109:
                v88 = v68;
                (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)v90 + 40))(v90, v68, v89 - (void)v68);
              }
            }
            else
            {
              v68 = v87;
              if (v87) {
                goto LABEL_109;
              }
            }
            uint64_t v13 = v79;
            uint64_t v10 = v80;
            uint64_t v14 = v77;
LABEL_11:
            if (++v12 == v14)
            {
              unint64_t v11 = v92;
              BOOL v9 = v74;
              goto LABEL_116;
            }
            goto LABEL_12;
          }
          v39 = v87;
          while (*(_DWORD *)v37 == *v39 && *(unsigned __int16 *)(v37 + 4) == *((unsigned __int16 *)v39 + 2))
          {
            v37 += 8;
            v39 += 2;
            if (v37 == v38) {
              goto LABEL_62;
            }
          }
        }
      }
      else
      {
        if (v36 >= *(void *)&v29) {
          v36 %= *(void *)&v29;
        }
        if (v36 != v31) {
          goto LABEL_63;
        }
      }
      v35 = 0;
      v33 = (void *)*v33;
      if (!v33) {
        goto LABEL_64;
      }
    }
  }
LABEL_119:
  v69 = *(uint64_t **)(v2 + 56);
  uint64_t v70 = *v69;
  uint64_t v71 = v69[1];
  if (*v69 != v71)
  {
    do
    {
      id v72 = *(id *)(v70 + 8);
      [v72 didFinishAddingData];

      v70 += 24;
    }
    while (v70 != v71);
  }
  md::MeshSetStorage::finalize(*(md::MeshSetStorage **)(v2 + 40));
}

void sub_1A23E9BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23E9BE4(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 120);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<gss::FeatureAttributeSet,std::vector<std::pair<anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v46 = (uint64_t *)(v4 + 16);
    while (1)
    {
      uint64_t v6 = (unsigned int *)v5[2];
      id v7 = (unsigned int *)v5[3];
      uint64_t v8 = (char *)((char *)v7 - (char *)v6);
      unint64_t v9 = ((char *)v7 - (char *)v6) >> 3;
      if (v7 != v6)
      {
        uint64_t v10 = (unsigned int *)v5[2];
        do
        {
          unint64_t v11 = ((v9 << 6) - 0x61C8864680B583EBLL + (v9 >> 2) + *v10) ^ v9;
          unint64_t v9 = (*((unsigned __int16 *)v10 + 2) - 0x61C8864680B583EBLL + (v11 << 6) + (v11 >> 2)) ^ v11;
          v10 += 2;
        }
        while (v10 != v7);
      }
      unint64_t v12 = *(void *)(v4 + 8);
      if (v12)
      {
        uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v13.i16[0] = vaddlv_u8(v13);
        if (v13.u32[0] > 1uLL)
        {
          unint64_t v2 = v9;
          if (v9 >= v12) {
            unint64_t v2 = v9 % v12;
          }
        }
        else
        {
          unint64_t v2 = (v12 - 1) & v9;
        }
        uint64_t v14 = *(void **)(*(void *)v4 + 8 * v2);
        if (v14)
        {
          uint64_t v15 = (void *)*v14;
          if (v15)
          {
            if (v13.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v21 = v15[1];
                if (v21 == v9)
                {
                  uint64_t v22 = v15[2];
                  uint64_t v23 = v15[3];
                  if ((char *)(v23 - v22) == v8)
                  {
                    if (v22 == v23) {
                      goto LABEL_6;
                    }
                    uint64_t v24 = v5[2];
                    while (*(_DWORD *)v22 == *(_DWORD *)v24
                         && *(unsigned __int16 *)(v22 + 4) == *(unsigned __int16 *)(v24 + 4))
                    {
                      v22 += 8;
                      v24 += 8;
                      if (v22 == v23) {
                        goto LABEL_6;
                      }
                    }
                  }
                }
                else if ((v21 & (v12 - 1)) != v2)
                {
                  goto LABEL_47;
                }
                uint64_t v15 = (void *)*v15;
                if (!v15) {
                  goto LABEL_47;
                }
              }
            }
            do
            {
              unint64_t v16 = v15[1];
              if (v16 == v9)
              {
                uint64_t v17 = v15[2];
                uint64_t v18 = v15[3];
                if ((char *)(v18 - v17) == v8)
                {
                  if (v17 == v18) {
                    goto LABEL_6;
                  }
                  uint64_t v19 = v5[2];
                  while (*(_DWORD *)v17 == *(_DWORD *)v19
                       && *(unsigned __int16 *)(v17 + 4) == *(unsigned __int16 *)(v19 + 4))
                  {
                    v17 += 8;
                    v19 += 8;
                    if (v17 == v18) {
                      goto LABEL_6;
                    }
                  }
                }
              }
              else
              {
                if (v16 >= v12) {
                  v16 %= v12;
                }
                if (v16 != v2) {
                  break;
                }
              }
              uint64_t v15 = (void *)*v15;
            }
            while (v15);
          }
        }
      }
LABEL_47:
      int64_t v26 = (uint64_t *)operator new(0x48uLL);
      unint64_t v48 = v2;
      *int64_t v26 = 0;
      v26[1] = v9;
      v26[2] = 0;
      v26[3] = 0;
      v26[4] = 0;
      v26[5] = gss::Allocator::instance((gss::Allocator *)v26);
      if (v26 != v5) {
        std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(v26 + 2, v5[2], (void *)v5[3], (v5[3] - v5[2]) >> 3);
      }
      v26[6] = 0;
      v26[7] = 0;
      v26[8] = 0;
      unint64_t v2 = v5[6];
      uint64_t v27 = v5[7];
      int64_t v28 = v27 - v2;
      if (v27 != v2)
      {
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 4);
        if (v29 >= 0x555555555555556) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint8x8_t v30 = operator new(v28);
        v26[6] = (uint64_t)v30;
        v26[7] = (uint64_t)v30;
        v26[8] = (uint64_t)&v30[6 * v29];
        unint64_t v31 = (char *)(v30 + 3);
        do
        {
          uint64_t v32 = *(void *)(v2 + 16);
          *(_OWORD *)uint8x8_t v30 = *(_OWORD *)v2;
          v30[2] = v32;
          v30[3] = &unk_1EF559598;
          v30[4] = 0;
          id v33 = *(id *)(v2 + 32);
          uint64_t v34 = (void *)v30[4];
          v30[4] = v33;

          v30 += 6;
          v31 += 48;
          v2 += 48;
        }
        while (v2 != v27);
        v26[7] = (uint64_t)v30;
        uint64_t v4 = a1;
      }
      float v35 = (float)(unint64_t)(*(void *)(v4 + 24) + 1);
      float v36 = *(float *)(v4 + 32);
      unint64_t v37 = v48;
      if (!v12 || (float)(v36 * (float)v12) < v35)
      {
        BOOL v38 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3) {
          BOOL v38 = 1;
        }
        unint64_t v39 = v38 | (2 * v12);
        unint64_t v40 = vcvtps_u32_f32(v35 / v36);
        if (v39 <= v40) {
          size_t v41 = v40;
        }
        else {
          size_t v41 = v39;
        }
        unint64_t v12 = *(void *)(v4 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v9 >= v12) {
            unint64_t v37 = v9 % v12;
          }
          else {
            unint64_t v37 = v9;
          }
        }
        else
        {
          unint64_t v37 = (v12 - 1) & v9;
        }
      }
      uint64_t v42 = *(void *)v4;
      uint64_t v43 = *(uint64_t **)(*(void *)v4 + 8 * v37);
      if (v43) {
        break;
      }
      *int64_t v26 = *v46;
      uint64_t *v46 = (uint64_t)v26;
      *(void *)(v42 + 8 * v37) = v46;
      if (*v26)
      {
        unint64_t v44 = *(void *)(*v26 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v44 >= v12) {
            v44 %= v12;
          }
        }
        else
        {
          v44 &= v12 - 1;
        }
        uint64_t v43 = (uint64_t *)(*(void *)v4 + 8 * v44);
        goto LABEL_4;
      }
LABEL_5:
      ++*(void *)(v4 + 24);
LABEL_6:
      uint64_t v5 = (uint64_t *)*v5;
      if (!v5) {
        return v4;
      }
    }
    *int64_t v26 = *v43;
LABEL_4:
    *uint64_t v43 = (uint64_t)v26;
    goto LABEL_5;
  }
  return v4;
}

void sub_1A23EA168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::__hash_table<std::__hash_value_type<gss::FeatureAttributeSet,std::vector<std::pair<anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>,std::__unordered_map_hasher<gss::FeatureAttributeSet,std::__hash_value_type<gss::FeatureAttributeSet,std::vector<std::pair<anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,true>,std::__unordered_map_equal<gss::FeatureAttributeSet,std::__hash_value_type<gss::FeatureAttributeSet,std::vector<std::pair<anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>,std::equal_to<gss::FeatureAttributeSet>,std::hash<gss::FeatureAttributeSet>,true>,std::allocator<std::__hash_value_type<gss::FeatureAttributeSet,std::vector<std::pair<anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      uint64_t v6 = v2[6];
      if (v6)
      {
        id v7 = v2[7];
        uint64_t v8 = v2[6];
        if (v7 != v6)
        {
          unint64_t v9 = v7 - 3;
          do
          {
            uint64_t v10 = v7 - 6;
            *(v7 - 3) = &unk_1EF559598;

            v9 -= 6;
            id v7 = v10;
          }
          while (v10 != v6);
          uint64_t v8 = v2[6];
        }
        v2[7] = v6;
        operator delete(v8);
      }
      unint64_t v11 = v2[2];
      if (v11)
      {
        v2[3] = v11;
        (*(void (**)(void *, void *, int64_t))(*(void *)v2[5] + 40))(v2[5], v11, (unsigned char *)v2[4] - (unsigned char *)v11);
      }
      operator delete(v2);
      unint64_t v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void __destroy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrIN2md14MeshSetStorageEEE80c310_ZTSNSt3__113unordered_mapIN3gss19FeatureAttributeSetENS_6vectorINS_4pairIN12_GLOBAL__N_110PolygonKeyEN3geo11_retain_ptrIU8__strongP14VKPolygonGroupNS7_16_retain_objc_arcENS7_17_release_objc_arcENS7_10_hash_objcENS7_11_equal_objcEEEEENS_9allocatorISH_EEEENS_4hashIS2_EENS_8equal_toIS2_EENSI_INS4_IKS2_SK_EEEEEE120c45_ZTSNSt3__110shared_ptrIN2md12PolygonRoundEEE(uint64_t a1)
{
  uint64_t v2 = a1 + 80;
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t __copy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrIN2md14MeshSetStorageEEE80c310_ZTSNSt3__113unordered_mapIN3gss19FeatureAttributeSetENS_6vectorINS_4pairIN12_GLOBAL__N_110PolygonKeyEN3geo11_retain_ptrIU8__strongP14VKPolygonGroupNS7_16_retain_objc_arcENS7_17_release_objc_arcENS7_10_hash_objcENS7_11_equal_objcEEEEENS_9allocatorISH_EEEENS_4hashIS2_EENS_8equal_toIS2_EENSI_INS4_IKS2_SK_EEEEEE120c45_ZTSNSt3__110shared_ptrIN2md12PolygonRoundEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a2[16];
  a1[15] = a2[15];
  a1[16] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1A23EA490(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 24;
      do
      {
        uint64_t v6 = v3 - 48;
        *((void *)v3 - 3) = &unk_1EF559598;

        v5 -= 48;
        unint64_t v3 = v6;
      }
      while (v6 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      *(void *)(v2 + 24) = &unk_1EF559598;
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::MeshSetStorage>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 192))
  {
    unint64_t v3 = *(void *)(a1 + 168);
    unint64_t v2 = *(void *)(a1 + 176);
    if (v2 != v3)
    {
      uint64_t v4 = *(void *)(a1 + 152);
      uint64_t v5 = *(void *)(a1 + 160);
      int v6 = *(unsigned __int8 *)(a1 + 184);
      int v7 = *(unsigned __int8 *)(a1 + 185);
      if (v4 && *(unsigned char *)(v5 + 17) != 2) {
        (*(void (**)(uint64_t))(*(void *)v4 + 64))(v4);
      }
      if (v6 && !v7)
      {
        unint64_t v9 = *(void *)(v5 + 56);
        unint64_t v8 = *(void *)(v5 + 64);
        if (v8 == v9) {
          unint64_t v9 = *(void *)(v5 + 80) - *(void *)(v5 + 72);
        }
        if (v3 < v9) {
          unint64_t v9 = v3;
        }
        if (v8 <= v2) {
          unint64_t v8 = v2;
        }
        if (v8 == v9) {
          unint64_t v8 = v9 + *(void *)(v5 + 80) - *(void *)(v5 + 72);
        }
        *(void *)(v5 + 56) = v9;
        *(void *)(v5 + 64) = v8;
      }
    }
  }
  if (*(void *)(a1 + 144))
  {
    unint64_t v11 = *(void *)(a1 + 120);
    unint64_t v10 = *(void *)(a1 + 128);
    if (v10 != v11)
    {
      uint64_t v12 = *(void *)(a1 + 104);
      uint64_t v13 = *(void *)(a1 + 112);
      int v14 = *(unsigned __int8 *)(a1 + 136);
      int v15 = *(unsigned __int8 *)(a1 + 137);
      if (v12 && *(unsigned char *)(v13 + 17) != 2) {
        (*(void (**)(uint64_t))(*(void *)v12 + 64))(v12);
      }
      if (v14 && !v15)
      {
        unint64_t v17 = *(void *)(v13 + 56);
        unint64_t v16 = *(void *)(v13 + 64);
        if (v16 == v17) {
          unint64_t v17 = *(void *)(v13 + 80) - *(void *)(v13 + 72);
        }
        if (v11 < v17) {
          unint64_t v17 = v11;
        }
        if (v16 <= v10) {
          unint64_t v16 = v10;
        }
        if (v16 == v17) {
          unint64_t v16 = v17 + *(void *)(v13 + 80) - *(void *)(v13 + 72);
        }
        *(void *)(v13 + 56) = v17;
        *(void *)(v13 + 64) = v16;
      }
    }
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 96);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 80);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = *(void **)(a1 + 48);
  std::__tree<gdc::LayerDataWithWorld>::destroy(v20);
}

void std::__shared_ptr_emplace<md::MeshSetStorage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FCA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::MeshSetStorage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FCA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::PolygonLayerDataSource::~PolygonLayerDataSource(md::PolygonLayerDataSource *this)
{
  *(void *)this = &unk_1EF542090;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 99);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 95) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF542090;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 99);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 95) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void non-virtual thunk to'ggl::FlyoverMorphBorder::MorphBorderMesh::~MorphBorderMesh(ggl::FlyoverMorphBorder::MorphBorderMesh *this)
{
  ggl::Mesh::~Mesh((ggl::FlyoverMorphBorder::MorphBorderMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::FlyoverMorphBorder::MorphBorderMesh *)((char *)this - 16));
}

void ggl::FlyoverMorphBorder::MorphBorderMesh::~MorphBorderMesh(ggl::FlyoverMorphBorder::MorphBorderMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::FlyoverMorphBorder::MorphBorderPipelineState::~MorphBorderPipelineState(ggl::FlyoverMorphBorder::MorphBorderPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::FlyoverMorphBorder::MorphBorderPipelineState::MorphBorderPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    unint64_t v10 = a4;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    a2 = v12;
    a3 = v13;
    a4 = v10;
    if (v11)
    {
      {
        if (v11)
        {
          {
            {
              ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverMorphBorder::vertexReflection;
            }
            ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::attributesReflection(void)::r;
            unk_1E957D678 = 1;
          }
          ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorphBorder::Vertex>::typedReflection(void)::r;
          *(void *)algn_1E957D3B8 = &ggl::FlyoverMorphBorder::pipelineDataMorphBorderPipelineDeviceStructs(void)::ref;
          qword_1E957D3C0 = 0;
          {
            ggl::FlyoverMorphBorder::pipelineDataMorphBorderPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            unk_1E957D3F0 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1E957D3F8 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1E957D400 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1E957D408 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
            unk_1E957D410 = ggl::FlyoverMorph::Morph::reflection(void)::reflection;
          }
          qword_1E957D3C8 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineDataMorphBorderPipelineConstantStructs(void)::ref;
          unk_1E957D3D0 = xmmword_1A28FF160;
        }
      }
      ggl::FlyoverMorphBorder::MorphBorderPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverMorphBorderShader::typedReflection(v11);
      qword_1E9591540 = (uint64_t)&ggl::FlyoverMorphBorderShader::typedReflection(void)::ref;
      {
        ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E95915A0 = 0;
        qword_1E95915A8 = (uint64_t)"";
        dword_1E95915B0 = 0;
        qword_1E95915B8 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineAttributeBinding_0(void)::attr;
        unk_1E95915C0 = 5;
      }
      qword_1E9591548 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineAttributeStructBinding(void)::attr;
      unk_1E9591550 = 1;
      qword_1E9591558 = 0;
      unk_1E9591560 = 5;
      qword_1E9591568 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineDeviceStructBinding(void)::ref;
      unk_1E9591570 = 0;
      {
        ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantStructBinding(void)::ref = 0;
        unk_1E95915E0 = 0;
        qword_1E95915E8 = (uint64_t)"sharedConstants";
        dword_1E95915F0 = 3;
        qword_1E95915F8 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1E9591600 = xmmword_1A28FC940;
        qword_1E9591610 = 1;
        unk_1E9591618 = "transform";
        dword_1E9591620 = 3;
        qword_1E9591628 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantTransformBinding(void)::reflection;
        *(int64x2_t *)algn_1E9591630 = vdupq_n_s64(2uLL);
        qword_1E9591640 = 2;
        unk_1E9591648 = "clip";
        dword_1E9591650 = 3;
        qword_1E9591658 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantClipBinding(void)::reflection;
        unk_1E9591660 = xmmword_1A28FC950;
        qword_1E9591670 = 3;
        unk_1E9591678 = "material";
        dword_1E9591680 = 3;
        qword_1E9591688 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantMaterialBinding(void)::reflection;
        *(_OWORD *)algn_1E9591690 = xmmword_1A28FC960;
        qword_1E95916A0 = 4;
        unk_1E95916A8 = "texcoords";
        dword_1E95916B0 = 3;
        qword_1E95916B8 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantTexcoordsBinding(void)::reflection;
        unk_1E95916C0 = xmmword_1A28FE180;
        qword_1E95916D0 = 5;
        unk_1E95916D8 = "morph";
        dword_1E95916E0 = 3;
        qword_1E95916E8 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantMorphBinding(void)::reflection;
        unk_1E95916F0 = 3;
      }
      qword_1E9591578 = (uint64_t)&ggl::FlyoverMorphBorder::pipelineStateMorphBorderPipelineConstantStructBinding(void)::ref;
      unk_1E9591580 = 6;
      a4 = v10;
      a2 = v12;
      a3 = v13;
    }
  }
  uint64_t v5 = *a2;
  int v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)unint64_t v16 = *(_OWORD *)a3;
  *(_OWORD *)&v16[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v14 = *a4;
  long long v15 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FlyoverMorphBorder::MorphBorderPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 272) = v15;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v16;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v16[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_1EF55F268;
  return a1;
}

BOOL ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::textureIsEnabled(ggl::FlyoverMorphBorder::MorphBorderPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::constantDataIsEnabled(ggl::FlyoverMorphBorder::MorphBorderPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::FlyoverMorphBorder::MorphBorderPipelineSetup::~MorphBorderPipelineSetup(ggl::FlyoverMorphBorder::MorphBorderPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::FlyoverTrafficBatch::~FlyoverTrafficBatch(md::FlyoverTrafficBatch *this)
{
  md::FlyoverTrafficBatch::~FlyoverTrafficBatch(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF53B920;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 38);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 38);
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  md::Ribbons::RibbonBatch<md::FlyoverTrafficDrawables>::~RibbonBatch((uint64_t)this);
}

uint64_t md::Ribbons::RibbonBatch<md::FlyoverTrafficDrawables>::~RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553AD0;
  uint64_t v2 = *(uint64_t **)(a1 + 248);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 256);
    uint64_t v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
        std::unique_ptr<md::FlyoverTrafficSection>::reset[abi:nn180100](--v3);
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 248);
    }
    *(void *)(a1 + 256) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 224);
  do
  {
    if (v5[1])
    {
      unint64_t v6 = 0;
      long long v7 = v5 + 2;
      char v8 = v5 + 2;
      unint64_t v9 = (void (***)(void))(v5 + 2);
      do
      {
        unint64_t v10 = (void (**)(void *))*v9;
        v9 += 15;
        (*v10)(v8);
        ++v6;
        v7 += 15;
        char v8 = v9;
      }
      while (v6 < v5[1]);
    }
    v5[1] = 0;
    uint64_t v5 = (void *)*v5;
  }
  while (v5);
  unint64_t v11 = *(void ***)(a1 + 224);
  *(void *)(a1 + 232) = v11;
  uint64_t v12 = *v11;
  ggl::FlyoverMorphBorderShader *v11 = 0;
  if (v12)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      free(v12);
      uint64_t v12 = v13;
    }
    while (v13);
    unint64_t v11 = *(void ***)(a1 + 224);
  }
  free(v11);
  long long v14 = *(void **)(a1 + 200);
  if (v14)
  {
    *(void *)(a1 + 208) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 168);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 176);
    uint64_t v17 = *(void *)(a1 + 168);
    if (v16 != v15)
    {
      uint64_t v18 = *(void *)(a1 + 176);
      do
      {
        unint64_t v20 = *(void **)(v18 - 24);
        v18 -= 24;
        uint64_t v19 = v20;
        if (v20)
        {
          *(void *)(v16 - 16) = v19;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = *(void *)(a1 + 168);
    }
    *(void *)(a1 + 176) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 192) + 40))(*(void *)(a1 + 192), v17, *(void *)(a1 + 184) - v17);
  }
  uint64_t v21 = *(void **)(a1 + 144);
  if (v21)
  {
    *(void *)(a1 + 152) = v21;
    operator delete(v21);
  }
  *(void *)(a1 + 16) = &off_1EF55A458;
  *(void *)(a1 + 32) = 3131955885;
  return a1;
}

uint64_t *std::unique_ptr<md::FlyoverTrafficSection>::reset[abi:nn180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 176);
    if (v2)
    {
      uint64_t v3 = *(void **)(v1 + 184);
      uint64_t v4 = *(void *)(v1 + 176);
      if (v3 != v2)
      {
        do
        {
          uint64_t v5 = *--v3;
          void *v3 = 0;
          if (v5)
          {
            {
              operator new();
            }
            (*(void (**)(uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc);
          }
        }
        while (v3 != v2);
        uint64_t v4 = *(void *)(v1 + 176);
      }
      *(void *)(v1 + 184) = v2;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 200) + 40))(*(void *)(v1 + 200), v4, *(void *)(v1 + 192) - v4);
    }
    *(void *)(v1 + 56) = &off_1EF55A458;
    *(void *)(v1 + 72) = 3131955885;
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void md::Ribbons::RibbonBatch<md::FlyoverTrafficDrawables>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::FlyoverTrafficDrawables>::~RibbonBatch(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::FlyoverTrafficBatch::FlyoverTrafficBatch(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &unk_1EF553AD0;
  *(void *)(a1 + 8) = 0;
  long long v8 = 0uLL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = "";
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(int64x2_t *)(a1 + 112) = vdupq_n_s64(1uLL);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 16) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 136) = 1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  {
    long long v8 = 0uLL;
    if (v13) {
      operator new();
    }
  }
  *(_OWORD *)(a1 + 200) = v8;
  *(void *)(a1 + 192) = ggl::Allocator::instance(void)::alloc;
  *(_OWORD *)(a1 + 216) = v8;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 32;
  unint64_t v9 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *unint64_t v9 = 0;
  v9[1] = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 224) = v9;
  *(void *)(a1 + 232) = v9;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 272) = 1;
  if (a6) {
    operator new();
  }
  *(void *)a1 = &unk_1EF53B920;
  *(void *)(a1 + 280) = a4;
  *(void *)(a1 + 288) = a5;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 296) = *a2;
  *(void *)(a1 + 304) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = a3[1];
  *(void *)(a1 + 312) = *a3;
  *(void *)(a1 + 320) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1A23EC010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v19 = *a9;
  if (*a9)
  {
    *(void *)(a17 + 208) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void *)(a17 + 168);
  if (v20)
  {
    uint64_t v21 = *(void *)(a17 + 176);
    uint64_t v22 = *(void *)(a17 + 168);
    if (v21 != v20)
    {
      uint64_t v23 = *(void *)(a17 + 176);
      do
      {
        unint64_t v25 = *(void **)(v23 - 24);
        v23 -= 24;
        uint64_t v24 = v25;
        if (v25)
        {
          *(void *)(v21 - 16) = v24;
          operator delete(v24);
        }
        uint64_t v21 = v23;
      }
      while (v23 != v20);
      uint64_t v22 = *(void *)(a17 + 168);
    }
    *(void *)(a17 + 176) = v20;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a17 + 192) + 40))(*(void *)(a17 + 192), v22, *(void *)(a17 + 184) - v22);
  }
  int64_t v26 = *a10;
  if (*a10)
  {
    *(void *)(a17 + 152) = v26;
    operator delete(v26);
  }
  *(void *)(a17 + 16) = &off_1EF55A458;
  *(void *)(a17 + 32) = 3131955885;
  _Unwind_Resume(exception_object);
}

void ggl::ConstantDataTyped<ggl::FlyoverTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5860D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5860D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::FlyoverTraffic::Pattern>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverTraffic::Pattern>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Pattern>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Pattern>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Pattern>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::FlyoverTraffic::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverTraffic::Displacement>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Displacement>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverTraffic::Displacement>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::FlyoverTrafficLayer::~FlyoverTrafficLayer(md::FlyoverTrafficLayer *this)
{
  md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::~RibbonLayer(this);
  JUMPOUT(0x1A6239270);
}

void *md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553D10;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  long long v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5848F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverTraffic::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5848F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::FlyoverTrafficLayer::FlyoverTrafficLayer(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EF553D10;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 == *(void *)a2)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(void *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(unsigned char *)(a1 + 64) = 0;
    goto LABEL_44;
  }
  if (v5 < 0) {
    abort();
  }
  uint64_t v6 = operator new(v5);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = v5 >> 3;
  *(void *)(a1 + 24) = &v6[v7];
  memcpy(v6, v4, v5);
  v47 = &v6[v7];
  *(void *)(a1 + 16) = &v6[v7];
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v8 = a1 + 32;
  *(void *)(v8 + 40) = 0;
  *(unsigned char *)(v8 + 48) = 0;
  *(unsigned char *)(v8 + 72) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(unsigned char *)(v8 + 32) = 0;
  if (!(v7 * 8))
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    goto LABEL_44;
  }
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  do
  {
    unint64_t v48 = v6;
    uint64_t v12 = (void *)*v6;
    v12[1] = a1;
    long long v14 = (void **)v12[31];
    int v13 = (void **)v12[32];
    uint64_t v50 = v13;
    if (v14 != v13)
    {
      while (1)
      {
        uint64_t v16 = *v14;
        v16[1] = **v14;
        v16[3] = v16[2];
        v16[5] = v16[4];
        uint64_t v17 = (void **)v16[22];
        for (unint64_t i = (void **)v16[23]; v17 != i; v16[5] = v19[5] + v16[5] - v19[4])
        {
          uint64_t v19 = *v17++;
          uint64_t v20 = v19[6];
          uint64_t v21 = v19[2] + 6 * v20;
          uint64_t v22 = 4 * v20 - 4;
          v19[1] = v22 + *v19;
          v19[3] = v21 - 6;
          v16[1] += v22;
          v16[3] = v19[3] + v16[3] - v19[2];
        }
        if (v10 >= v11) {
          break;
        }
        *(void *)uint64_t v10 = v16;
        uint64_t v15 = v10 + 8;
LABEL_9:
        ++v14;
        uint64_t v10 = v15;
        if (v14 == v13) {
          goto LABEL_5;
        }
      }
      uint64_t v23 = (v10 - v9) >> 3;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61) {
        abort();
      }
      if ((v11 - v9) >> 2 > v24) {
        unint64_t v24 = (v11 - v9) >> 2;
      }
      if ((unint64_t)(v11 - v9) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25)
      {
        if (v25 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        int64_t v26 = operator new(8 * v25);
      }
      else
      {
        int64_t v26 = 0;
      }
      uint64_t v27 = &v26[8 * v23];
      *(void *)uint64_t v27 = v16;
      uint64_t v15 = v27 + 8;
      if (v10 != v9)
      {
        unint64_t v28 = v10 - 8 - v9;
        if (v28 >= 0x168)
        {
          if (&v26[v10 - v9 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v26[v10 - v9 - 8])
          {
            unint64_t v29 = v10;
          }
          else if (&v10[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] > v10 - 8)
          {
            unint64_t v29 = v10;
          }
          else if ((unint64_t)(v9 - v26) >= 0x20)
          {
            uint64_t v31 = (v28 >> 3) + 1;
            unint64_t v29 = &v10[-8 * (v31 & 0x3FFFFFFFFFFFFFFCLL)];
            uint64_t v32 = &v26[8 * v23 - 16];
            id v33 = v10 - 16;
            uint64_t v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              _OWORD *v32 = v35;
              v32 -= 2;
              v33 -= 32;
              v34 -= 4;
            }
            while (v34);
            v27 -= 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
            if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_27;
            }
          }
          else
          {
            unint64_t v29 = v10;
          }
        }
        else
        {
          unint64_t v29 = v10;
        }
        do
        {
          uint64_t v30 = *((void *)v29 - 1);
          v29 -= 8;
          *((void *)v27 - 1) = v30;
          v27 -= 8;
        }
        while (v29 != v9);
      }
LABEL_27:
      uint64_t v11 = &v26[8 * v25];
      if (v9) {
        operator delete(v9);
      }
      unint64_t v9 = v27;
      int v13 = v50;
      goto LABEL_9;
    }
LABEL_5:
    uint64_t v6 = v48 + 1;
  }
  while (v48 + 1 != v47);
  if (*(unsigned char *)(a1 + 64)) {
    operator new();
  }
LABEL_44:
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v39 = (v10 - v9) >> 3;
  do
  {
    if (v36 == v39
      || (unint64_t)(*(void *)(*(void *)&v9[8 * v36] + 8) + v38 - **(void **)&v9[8 * v36]) >= 0x10000)
    {
      unint64_t v40 = operator new(0xF8uLL);
      v40[1] = 0;
      v40[2] = 0;
      *unint64_t v40 = &unk_1EF5848F8;
      ggl::BufferData::BufferData((uint64_t)(v40 + 3), 128, 0, 0, 1, v38);
      v40[29] = "BatchType/VData";
      v40[30] = &ggl::FlyoverTraffic::defaultReflection;
      v40[3] = &unk_1EF55C4C8;
      v40[28] = &unk_1EF55C4E8;
      size_t v41 = operator new(0xF8uLL);
      v41[1] = 0;
      v41[2] = 0;
      *size_t v41 = &unk_1EF583D28;
      ggl::BufferData::BufferData((uint64_t)(v41 + 3), 2, 1, 0, 1, v37);
      *((_DWORD *)v41 + 60) = 0;
      v41[3] = &unk_1EF55B630;
      v41[4] = 2;
      v41[28] = &unk_1EF55B650;
      v41[29] = "BatchType/IData";
      operator new();
    }
    if (v36 < v39)
    {
      uint64_t v42 = *(void **)&v9[8 * v36];
      uint64_t v38 = v42[1] + v38 - *v42;
      uint64_t v37 = v42[3] + v37 + v42[5] - (v42[2] + v42[4]);
    }
    ++v36;
  }
  while (v36 <= v39);
  if (v9) {
    operator delete(v9);
  }
  uint64_t result = a1;
  *(void *)a1 = &unk_1EF53B940;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 112) = 0x3FF0000000000000;
  *(void *)(a1 + 152) = 0x3FF0000000000000;
  *(void *)(a1 + 192) = 0x3FF0000000000000;
  *(void *)(a1 + 232) = 0x3FF0000000000000;
  unint64_t v44 = *(uint64_t **)(a1 + 8);
  for (j = *(uint64_t **)(a1 + 16); v44 != j; *(void *)(v46 + 8) = a1)
    uint64_t v46 = *v44++;
  return result;
}

void sub_1A23EDB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  MEMORY[0x1A6239270](v18, 0x1020C4007FF0C4BLL);
  if (v19) {
    operator delete(v19);
  }
  uint64_t v21 = *a10;
  *a10 = 0;
  if (v21)
  {
    uint64_t v22 = *(void *)(v21 + 2584);
    if (v22) {
      MEMORY[0x1A6239250](v22, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v21, 0x1020C4007FF0C4BLL);
  }
  uint64_t v23 = *a11;
  if (*a11)
  {
    *(void *)(a18 + 40) = v23;
    operator delete(v23);
    unint64_t v24 = *a9;
    if (!*a9) {
LABEL_9:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    unint64_t v24 = *a9;
    if (!*a9) {
      goto LABEL_9;
    }
  }
  *(void *)(a18 + 16) = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void md::FlyoverTrafficLayer::willBeDrawn(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v7 = a1;
    while (1)
    {
      uint64_t v8 = *v7;
      double v9 = *(double *)(a3 + 80);
      double v10 = *(double *)(a3 + 88);
      double v11 = *(double *)(a3 + 96);
      double v13 = *(double *)(a3 + 64);
      double v12 = *(double *)(a3 + 72);
      double v15 = *(double *)(a3 + 48);
      double v14 = *(double *)(a3 + 56);
      double v16 = -(v13 * v9 - v14 * v10) - (v13 * v9 - v14 * v10);
      double v17 = -(v15 * v10 - v13 * v12) - (v15 * v10 - v13 * v12);
      double v18 = -(v14 * v12 - v15 * v9) - (v14 * v12 - v15 * v9);
      double v19 = -(v18 * v12 - (-(v14 - v16 * v10) - v17 * v11));
      double v20 = -(v15 + v16 * v11 + v17 * v10 - v18 * v9);
      double v21 = -(v13 + v16 * v9 + v18 * v11 - v17 * v12);
      double v22 = v9 * -2.0;
      double v23 = -(v9 * (v9 * -2.0));
      double v24 = 1.0 - (v23 - v10 * (v10 * -2.0));
      double v25 = v12 * -2.0;
      double v26 = -(v9 * (v12 * -2.0));
      double v27 = v10 * -2.0 * v11;
      double v28 = v26 - v27;
      double v29 = -(v10 * (v12 * -2.0));
      double v30 = v11 * v22;
      double v31 = v11 * v22 - v10 * (v12 * -2.0);
      double v32 = v27 + v26;
      double v33 = v12 * -2.0 * v12 + 1.0;
      double v34 = v33 - -(v10 * (v10 * -2.0));
      double v35 = -(v10 * v22);
      double v36 = v11 * v25;
      *(double *)v87 = v24;
      *(double *)&v87[1] = v32;
      double v88 = v28;
      double v89 = v34;
      double v92 = v31;
      double v93 = v35 - v36;
      *(double *)&v87[2] = v29 - v30;
      double v90 = v36 + v35;
      double v94 = v33 - v23;
      v87[3] = 0;
      uint64_t v91 = 0;
      uint64_t v95 = 0;
      double v96 = v20;
      double v97 = v19;
      double v98 = v21;
      uint64_t v99 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(v100[0].f64, (double *)v87, (double *)(*(void *)(v8 + 8) + 112));
      v37.i64[0] = 0;
      uint64_t v38 = *(void *)(v8 + 48);
      v39.i64[0] = *(void *)(v8 + 288) & 0xFFFFFFFELL;
      float32x4_t v40 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v39, v37).i64[0], 0), (int8x16_t)xmmword_1A28FF180, (int8x16_t)xmmword_1A28FF170);
      float v41 = 1.7143;
      if ((*(void *)(v8 + 288) & 0xFFFFFFFELL) == 0) {
        float v41 = 3.0;
      }
      float32x4_t v42 = v40;
      v42.f32[0] = v41;
      v42.i32[0] = vdivq_f32(v40, v42).u32[0];
      float32x4_t v43 = vmulq_f32(v40, v40);
      v42.i32[1] = v43.i32[1];
      unint64_t v44 = *(void **)(*(void *)(v38 + 64) + 32);
      unint64_t v45 = v44[1];
      uint64_t v46 = v44[9];
      *(float *)uint64_t v46 = v41;
      *(_DWORD *)(v46 + 12) = v43.i32[2];
      *(void *)(v46 + 4) = v42.i64[0];
      if (v44[8] > v45) {
        unint64_t v45 = v44[8];
      }
      v44[7] = 0;
      v44[8] = v45;
      uint64_t v47 = *(void *)(v8 + 296);
      if (v47) {
        break;
      }
      *(unsigned char *)(v8 + 272) = 0;
LABEL_4:
      if (++v7 == a2) {
        return;
      }
    }
    unsigned __int8 v48 = *(unsigned char *)(v8 + 288);
    float v49 = *(float *)(a3 + 1352);
    float v50 = *(float *)(a3 + 1376);
    int v51 = *(std::__shared_weak_count **)(v8 + 304);
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v87, v47, (uint64_t)v51);
    if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
      if (LOBYTE(v88)) {
        goto LABEL_15;
      }
    }
    else if (LOBYTE(v88))
    {
LABEL_15:
      float v52 = v50 + v49;
      switch(v48)
      {
        case 0u:
          float v53 = fminf(fmaxf(v52, 0.0), 23.0);
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v101, *(void *)(v87[0] + 24), 0x2Bu, 2u, v53);
          uint16x4_t v54 = v101[0];
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v101, *(void *)(v87[0] + 24), 0x2Cu, 2u, v53);
          goto LABEL_22;
        case 1u:
          float v55 = fminf(fmaxf(v52, 0.0), 23.0);
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v101, *(void *)(v87[0] + 24), 0x36u, 2u, v55);
          uint16x4_t v54 = v101[0];
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v101, *(void *)(v87[0] + 24), 0x37u, 2u, v55);
          goto LABEL_22;
        case 2u:
          float v56 = fminf(fmaxf(v52, 0.0), 23.0);
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v101, *(void *)(v87[0] + 24), 0x41u, 2u, v56);
          uint16x4_t v54 = v101[0];
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v101, *(void *)(v87[0] + 24), 0x42u, 2u, v56);
          goto LABEL_22;
        case 3u:
          float v57 = fminf(fmaxf(v52, 0.0), 23.0);
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v101, *(void *)(v87[0] + 24), 0x4Cu, 2u, v57);
          uint16x4_t v54 = v101[0];
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v101, *(void *)(v87[0] + 24), 0x4Du, 2u, v57);
LABEL_22:
          float32x4_t v58 = (float32x4_t)vdupq_n_s32(0x37800080u);
          float32x4_t v83 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v101[0])), v58);
          float32x4_t v84 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v54)), v58);
          break;
        default:
          break;
      }
      md::trafficWidthForSpeedAtZ((unint64_t)v87, v48, v52);
      float v60 = v59;
      md::trafficMinWidthForSpeedAtZ((unint64_t)v87, v48, v52);
      float v62 = v61;
      md::trafficMaxWidthForSpeedAtZ((unint64_t)v87, v48, v52);
      float v64 = v63;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v87);
      uint64_t v65 = *(void *)(v38 + 64);
      v66 = *(void **)(v65 + 48);
      unint64_t v67 = v66[1];
      v68 = (float32x4_t *)v66[9];
      float32x4_t *v68 = v84;
      v68[1] = v83;
      v68[2].i64[0] = 0x3E99999A40400000;
      if (v66[8] > v67) {
        unint64_t v67 = v66[8];
      }
      v66[7] = 0;
      v66[8] = v67;
      float v69 = fmaxf(*(float *)(a3 + 1352), 11.0);
      if (v69 <= 15.0) {
        float v70 = (float)(v69 * 0.25) + -2.75;
      }
      else {
        float v70 = 1.0;
      }
      if (*(unsigned char *)a4)
      {
        float v71 = fminf(fmaxf(*(float *)(a4 + 4) * v60, v62), v64) * 0.45;
LABEL_36:
        float32_t v74 = *(float *)(a3 + 1380) * v71;
        float v75 = log(v74 * 0.5);
        float v76 = trafficTextureMappingStepQuantizationScaler[*(void *)(v8 + 288)];
        float v77 = expf((float)-ceilf(v76 * v75) / v76);
        v78 = *(void **)(v65 + 16);
        unint64_t v79 = v78[1];
        uint64_t v80 = (float32x4_t *)v78[9];
        float32x4_t v81 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v100[2]), v100[3]);
        *uint64_t v80 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v100[0]), v100[1]);
        v80[1] = v81;
        float32x4_t v82 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v100[6]), v100[7]);
        v80[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v100[4]), v100[5]);
        v80[3] = v82;
        v80[5].i32[0] = 0;
        v80[5].f32[1] = v77 * 0.5;
        v80[5].f32[2] = v70;
        v80[4].f32[0] = v74;
        if (v78[8] > v79) {
          unint64_t v79 = v78[8];
        }
        v78[7] = 0;
        v78[8] = v79;
        goto LABEL_4;
      }
      uint64_t v72 = *(void *)(v8 + 312);
      v73 = *(std::__shared_weak_count **)(v8 + 320);
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v87, v72, (uint64_t)v73);
      if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
        if (LOBYTE(v88))
        {
LABEL_35:
          v101[0].i32[0] = 1065353216;
          int v86 = 0;
          md::getRoadWidths((uint64_t)v87, (float *)v101, (float *)&v86, &v85, *(float *)(a3 + 1352));
          float v71 = fminf(fmaxf(*(float *)v101[0].i32 * v60, v62), v64) * 0.8;
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v87);
          uint64_t v65 = *(void *)(v38 + 64);
          goto LABEL_36;
        }
      }
      else if (LOBYTE(v88))
      {
        goto LABEL_35;
      }
    }
    *(unsigned char *)(v8 + 272) = 0;
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v87);
    goto LABEL_4;
  }
}

void sub_1A23EE384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::FlyoverTrafficLayer::rewriteBoundsAttributes(uint64_t this, ResourceAccessor *a2)
{
  uint64_t v2 = *(void **)(this + 8);
  unint64_t v44 = *(void **)(this + 16);
  if (v2 != v44)
  {
    uint64_t v4 = this;
    do
    {
      unint64_t v45 = v2;
      uint64_t v5 = *v2;
      uint64_t v7 = *(void *)(v5 + 248);
      uint64_t v6 = *(void *)(v5 + 256);
      uint64_t v46 = v6;
      while (v7 != v6)
      {
        uint64_t v47 = v7;
        uint64_t v8 = *(uint64_t ***)(*(void *)v7 + 176);
        double v9 = *(uint64_t ***)(*(void *)v7 + 184);
        while (v8 != v9)
        {
          double v10 = *v8;
          uint64_t v11 = **(void **)(**(void **)(v4 + 32) + 64);
          uint64_t v12 = **v8;
          uint64_t v13 = (*v8)[1];
          uint64_t v14 = *(void *)(v11 + 8);
          uint64_t v15 = v14 * v12;
          uint64_t v16 = v14 * v13;
          if (v14 * v13 == v14 * v12)
          {
            uint64_t v17 = 0;
          }
          else if (a2 && *(unsigned char *)(v11 + 17) != 2)
          {
            this = (*((uint64_t (**)(ResourceAccessor *, void, uint64_t, uint64_t, uint64_t, uint64_t))a2->var0
                    + 7))(a2, **(void **)(**(void **)(v4 + 32) + 64), v15, v16, 1, 1);
            uint64_t v17 = this;
          }
          else
          {
            uint64_t v17 = *(void *)(v11 + 72) + v15;
          }
          uint64_t v18 = v10[6];
          if (v18 == 1) {
            goto LABEL_27;
          }
          int v19 = *((_DWORD *)v10 + 30);
          uint64_t v21 = v10[13];
          uint64_t v20 = v10[14];
          *(void *)(v17 + 112) = 0;
          *(void *)(v17 + 240) = 0;
          *(void *)(v17 + 368) = 0;
          *(void *)(v17 + 496) = 0;
          if ((v19 & 1) != 0 || (float v22 = 0.0, v20) && !*(unsigned char *)(v20 + 84))
          {
            *(_DWORD *)(v17 + 112) = -1056964608;
            *(_DWORD *)(v17 + 240) = -1056964608;
            float v22 = -8.0;
            if ((v19 & 2) != 0) {
              goto LABEL_25;
            }
          }
          else if ((v19 & 2) != 0)
          {
            goto LABEL_25;
          }
          if (v21 && !*(unsigned char *)(v21 + 84))
          {
LABEL_25:
            *(_DWORD *)(v17 + 372) = 1090519040;
            *(_DWORD *)(v17 + 500) = 1090519040;
          }
          *(_DWORD *)(v17 + 96) = -1082130432;
          *(_DWORD *)(v17 + 224) = -1082130432;
          int v23 = *((_DWORD *)v10 + 33);
          int v24 = *((_DWORD *)v10 + 31);
          *(_DWORD *)(v17 + 80) = 0;
          *(_DWORD *)(v17 + 84) = v24;
          *(_DWORD *)(v17 + 88) = v23;
          *(float *)(v17 + 112) = v22;
          *(_DWORD *)(v17 + 116) = 0;
          int v25 = *((_DWORD *)v10 + 31);
          int v26 = *((_DWORD *)v10 + 33);
          *(_DWORD *)(v17 + 208) = 0;
          *(_DWORD *)(v17 + 212) = v25;
          *(_DWORD *)(v17 + 216) = v26;
          *(float *)(v17 + 240) = v22;
          *(_DWORD *)(v17 + 244) = 0;
          int v27 = *((_DWORD *)v10 + 31);
          int v28 = *((_DWORD *)v10 + 33);
          *(_DWORD *)(v17 + 336) = 0;
          *(_DWORD *)(v17 + 340) = v27;
          *(_DWORD *)(v17 + 344) = v28;
          *(float *)(v17 + 368) = v22;
          *(_DWORD *)(v17 + 372) = 0;
          int v29 = *((_DWORD *)v10 + 31);
          int v30 = *((_DWORD *)v10 + 33);
          *(_DWORD *)(v17 + 464) = 0;
          *(_DWORD *)(v17 + 468) = v29;
          *(_DWORD *)(v17 + 472) = v30;
          *(float *)(v17 + 496) = v22;
          *(_DWORD *)(v17 + 500) = 0;
          if (v18 != 2)
          {
            uint64_t v32 = v18 - 2;
            double v33 = (void *)(v17 + 240);
            uint64_t v34 = v17 + 592;
            do
            {
              *(void *)(v34 + 32) = 0;
              *(void *)(v34 + 160) = 0;
              *(void *)(v34 + 288) = 0;
              *(void *)(v34 + 416) = 0;
              if ((v19 & 1) != 0 || v20 && !*(unsigned char *)(v20 + 84))
              {
                *(_DWORD *)(v34 + 32) = -1056964608;
                *(_DWORD *)(v34 + 160) = -1056964608;
              }
              if ((v19 & 2) != 0 || v21 && !*(unsigned char *)(v21 + 84))
              {
                *(_DWORD *)(v34 + 292) = 1090519040;
                *(_DWORD *)(v34 + 420) = 1090519040;
              }
              int v35 = *((_DWORD *)v10 + 33);
              int v36 = *((_DWORD *)v10 + 31);
              *(_DWORD *)uint64_t v34 = 0;
              *(_DWORD *)(v34 + 4) = v36;
              *(_DWORD *)(v34 + 8) = v35;
              *(void *)(v34 + 32) = *v33;
              int v37 = *((_DWORD *)v10 + 31);
              int v38 = *((_DWORD *)v10 + 33);
              *(_DWORD *)(v34 + 128) = 0;
              *(_DWORD *)(v34 + 132) = v37;
              *(_DWORD *)(v34 + 136) = v38;
              *(void *)(v34 + 160) = *v33;
              int v39 = *((_DWORD *)v10 + 31);
              int v40 = *((_DWORD *)v10 + 33);
              *(_DWORD *)(v34 + 256) = 0;
              *(_DWORD *)(v34 + 260) = v39;
              *(_DWORD *)(v34 + 264) = v40;
              *(void *)(v34 + 288) = *v33;
              int v41 = *((_DWORD *)v10 + 31);
              int v42 = *((_DWORD *)v10 + 33);
              *(_DWORD *)(v34 + 384) = 0;
              *(_DWORD *)(v34 + 388) = v41;
              *(_DWORD *)(v34 + 392) = v42;
              uint64_t v43 = *v33;
              v33 += 16;
              *(void *)(v34 + 416) = v43;
              v34 += 512;
              --v32;
            }
            while (v32);
          }
LABEL_27:
          if (v17)
          {
            BOOL v31 = v16 == v15 || a2 == 0;
            if (!v31 && *(unsigned char *)(v11 + 17) != 2) {
              this = (*((uint64_t (**)(ResourceAccessor *))a2->var0 + 8))(a2);
            }
          }
          ++v8;
        }
        uint64_t v6 = v46;
        uint64_t v7 = v47 + 8;
      }
      uint64_t v2 = v45 + 1;
    }
    while (v45 + 1 != v44);
  }
  return this;
}

void md::LabelSettings_Markers::labelMarkerForSelectionAtPoint(md::LabelSettings_Markers *this, CGPoint a2, uint64_t a3, uint64_t a4)
{
  double y = a2.y;
  double x = a2.x;
  uint64_t v8 = (std::recursive_mutex *)(a3 + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)(a3 + 24));
  double v9 = *(float *)(a3 + 480);
  float v10 = x * v9;
  *(float *)&double v9 = *(float *)(a3 + 1508) - y * v9;
  *(float *)uint64_t v11 = v10;
  v11[1] = LODWORD(v9);
  (*(void (**)(void, _DWORD *, uint64_t))(**(void **)(a3 + 240) + 160))(*(void *)(a3 + 240), v11, a4);
  std::recursive_mutex::unlock(v8);
}

void sub_1A23EE810(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ggl::ConstantDataTyped<ggl::PolygonFill::Fill>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::PolygonFill::Fill>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonFill::Fill>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonFill::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585B20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonFill::Fill>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonFill::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PolygonFill::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PolygonFill::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::function<void ()(ggl::VenueWall::MeshPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::VenueWall::MeshPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::VenueWall::WallTopMeshPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::VenueWall::WallTopMeshPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::VenueWall::WallEndCapMeshPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::VenueWall::WallEndCapMeshPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::VenueWallShadow::MeshPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::Building::Gradient> *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::Building::Gradient> * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::Building::Gradient>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::Building::Gradient>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::VenueWallShadow::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::VenueWallShadow::MeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::VenueWall::WallEndCapMeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::VenueWall::WallEndCapMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::VenueWall::WallTopMeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::VenueWall::WallTopMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::VenueWall::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::VenueWall::MeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_8Building8GradientEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B6B8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_8Building8GradientEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::ConstantDataTyped<ggl::Building::Gradient> * ()(void)>::operator()()
{
}

void *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::ConstantDataTyped<ggl::Building::Gradient> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF577328;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::ConstantDataTyped<ggl::Building::Gradient> * ()(void)>::~__func()
{
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::VenueWallShadow::WallShadow>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::VenueWallShadow::WallShadow>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWallShadow::WallShadow>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWallShadow::WallShadow>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5864F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWallShadow::WallShadow>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5864F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5772E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15VenueWallShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B088;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15VenueWallShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577298;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWallShadow::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VenueWallShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VenueWallShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke34VerticalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57ADB8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke34VerticalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::Venue3DStroke::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Venue3DStroke::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Venue3DStroke::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Venue3DStroke::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585F80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Venue3DStroke::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577250;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583BA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583BA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke36HorizontalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57AE00;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke36HorizontalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577208;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall27WallEndCapMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C948;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall27WallEndCapMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueWall::WallEndCapMeshPipelineSetup * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::VenueWall::WallEndCap>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::VenueWall::WallEndCap>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallEndCap>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallEndCap>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallEndCap>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueWall::WallEndCapMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5771C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueWall::WallEndCapMeshPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWall::WallEndCapMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VenueWall::WallEndCapMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VenueWall::WallEndCapMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall24WallTopMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C900;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall24WallTopMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueWall::WallTopMeshPipelineSetup * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::VenueWall::WallTop>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::VenueWall::WallTop>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallTop>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallTop>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::WallTop>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueWall::WallTopMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577178;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueWall::WallTopMeshPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWall::WallTopMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VenueWall::WallTopMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589F98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VenueWall::WallTopMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589F98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C8B8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::VenueWall::MeshPipelineSetup * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::VenueWall::Wall>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::VenueWall::Wall>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::Wall>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::Wall>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueWall::Wall>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::VenueWall::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577130;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::VenueWall::MeshPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWall::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VenueWall::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589F60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VenueWall::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::function<void ()(ggl::PolygonSolidFill::CompressedMeshPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::VenueOpenToBelowShadow::MeshPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::VenueOpenToBelowShadow::MeshPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::VenueOpenToBelowShadow::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::VenueOpenToBelowShadow::MeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::CompressedMeshPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::PolygonSolidFill::CompressedMeshPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_22VenueOpenToBelowShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57BB38;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_22VenueOpenToBelowShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueOpenToBelowShadow::MeshPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A23F1DDC(_Unwind_Exception *a1)
{
  if (!atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  MEMORY[0x1A6239270](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void ggl::ConstantDataTyped<ggl::VenueOpenToBelowShadow::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::VenueOpenToBelowShadow::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueOpenToBelowShadow::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueOpenToBelowShadow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586B18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::VenueOpenToBelowShadow::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586B18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueOpenToBelowShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF578690;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueOpenToBelowShadow::MeshPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadow::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadow::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_27VenueOpenToBelowShadowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57BDC0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_27VenueOpenToBelowShadowAlpha17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A23F2504(_Unwind_Exception *a1)
{
  if (!atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  MEMORY[0x1A6239270](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void *std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF578648;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16PolygonSolidFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B160;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16PolygonSolidFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF578600;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueOpenToBelowRenderResources::VenueOpenToBelowRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonSolidFill::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PolygonSolidFill::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5857D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PolygonSolidFill::CompressedMeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5857D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5782A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
}

void std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF578258;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
}

void std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF578210;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueFootprintRenderResources::VenueFootprintRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::CompressedMeshPipelineSetup * ()(void)>::~__func()
{
}

double md::MuninRoadLabelMarker::calloutAnchorPoint(md::MuninRoadLabelMarker *this)
{
  return *MEMORY[0x1E4F1DAD8];
}

double md::MuninRoadLabelMarker::coordinate@<D0>(md::MuninRoadLabelMarker *this@<X0>, double *a2@<X8>)
{
  uint64_t v3 = (double *)*((void *)this + 39);
  long double v4 = v3[27];
  long double v5 = v3[28];
  long double v6 = v3[29];
  double v7 = sqrt(v4 * v4 + v5 * v5);
  double v8 = atan2(v6, v7 * 0.996647189);
  double v9 = atan2(v5, v4);
  __double2 v10 = __sincos_stret(v8);
  double v11 = atan2(v6 + v10.__sinval * v10.__sinval * 42841.3115 * v10.__sinval, v7 + v10.__cosval * v10.__cosval * -42697.6727 * v10.__cosval);
  __double2 v12 = __sincos_stret(v11);
  double result = v7 / v12.__cosval + -6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
  *a2 = v11 * 57.2957795;
  a2[1] = v9 * 57.2957795;
  a2[2] = result;
  return result;
}

uint64_t md::MuninRoadLabelMarker::screenPixelBounds(md::MuninRoadLabelMarker *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 568))();
}

float md::MuninRoadLabelMarker::screenCollisionBounds(md::MuninRoadLabelMarker *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 30);
  if (!v2) {
    return 3.4028e38;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 3.4028e38;
  }
  long double v4 = v3;
  if (*((void *)this + 29)) {
    float v5 = *(float *)(*(void *)(*(void *)(*((void *)this + 39) + 64) + 24) + 392);
  }
  else {
    float v5 = 3.4028e38;
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

uint64_t md::MuninRoadLabelMarker::calloutAnchorRect(md::MuninRoadLabelMarker *this)
{
  uint64_t result = (*(uint64_t (**)(md::MuninRoadLabelMarker *))(*(void *)this + 464))(this);
  if (result) {
    return (*(uint64_t (**)(void, double, double, double, double))(**(void **)(*((void *)this + 39)
  }
                                                                                           + 64)
                                                                             + 256))(*(void *)(*((void *)this + 39) + 64), 0.0, 0.0, 0.0, 0.0);
  return result;
}

void md::MuninRoadLabelMarker::featureHandles(md::MuninRoadLabelMarker *this@<X0>, uint64_t *a2@<X8>)
{
  long double v4 = a2 + 3;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  {
    operator new();
  }
  uint64_t v5 = mdm::Allocator::instance(void)::alloc;
  void *v4 = mdm::Allocator::instance(void)::alloc;
  if (*((void *)this + 36))
  {
    uint64_t v6 = (a2[1] - *a2) >> 6;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 58) {
      abort();
    }
    uint64_t v8 = a2[2] - *a2;
    if (v8 >> 5 > v7) {
      unint64_t v7 = v8 >> 5;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
      uint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v9 = v7;
    }
    int v23 = v4;
    if (v9)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v9 << 6, 8);
      uint64_t v11 = v10 + (v6 << 6);
      uint64_t v9 = v10 + (v9 << 6);
      if (v10) {
        uint64_t v11 = md::MarkerFeatureHandle::MarkerFeatureHandle(v11, *((void *)this + 36), *((unsigned __int8 *)this + 225));
      }
    }
    else
    {
      uint64_t v11 = v6 << 6;
    }
    uint64_t v12 = v11 + 64;
    uint64_t v14 = *a2;
    uint64_t v13 = a2[1];
    if (v13 == *a2)
    {
      uint64_t v18 = a2[1];
    }
    else
    {
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = v11 + v15;
        uint64_t v17 = v13 + v15;
        *(_OWORD *)(v16 - 64) = *(_OWORD *)(v13 + v15 - 64);
        *(_WORD *)(v16 - 48) = *(_WORD *)(v13 + v15 - 48);
        *(void *)(v16 - 44) = *(void *)(v13 + v15 - 44);
        *(void *)(v16 - 24) = *(void *)(v13 + v15 - 24);
        *(_OWORD *)(v16 - 16) = *(_OWORD *)(v13 + v15 - 16);
        *(void *)(v17 - 16) = 0;
        *(void *)(v17 - 8) = 0;
        v15 -= 64;
      }
      while (v13 + v15 != v14);
      v11 += v15;
      uint64_t v18 = *a2;
      uint64_t v13 = a2[1];
    }
    *a2 = v11;
    a2[1] = v12;
    uint64_t v19 = a2[2];
    a2[2] = v9;
    uint64_t v22 = v19;
    if (v13 != v18)
    {
      do
      {
        uint64_t v21 = v13 - 64;
        uint64_t v20 = *(std::__shared_weak_count **)(v13 - 8);
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        uint64_t v13 = v21;
      }
      while (v21 != v18);
      uint64_t v13 = v18;
    }
    if (v13) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v23 + 40))(*v23, v13, v22 - v13);
    }
    a2[1] = v12;
  }
}

void sub_1A23F36DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<md::MarkerFeatureHandle,geo::StdAllocator<md::MarkerFeatureHandle,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  std::vector<md::MarkerFeatureHandle,geo::StdAllocator<md::MarkerFeatureHandle,mdm::Allocator>>::~vector[abi:nn180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<md::MarkerFeatureHandle,geo::StdAllocator<md::MarkerFeatureHandle,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    long double v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

uint64_t md::MuninRoadLabelMarker::featureTile@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 304);
  *a2 = *(void *)(this + 296);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

BOOL md::MuninRoadLabelMarker::isVisible(md::MuninRoadLabelMarker *this)
{
  return (*(unsigned char *)(*((void *)this + 39) + 538) & 0xFD) == 1;
}

uint64_t md::MuninRoadLabelMarker::isMuninRoadLabel(md::MuninRoadLabelMarker *this)
{
  return 1;
}

void md::MuninRoadLabelMarker::~MuninRoadLabelMarker(md::MuninRoadLabelMarker *this)
{
  *(void *)this = &unk_1EF53D9F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::LabelMarker::~LabelMarker(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF53D9F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::LabelMarker::~LabelMarker(this);
}

void sub_1A23F3B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t altitude::RootTileData::RootTileData(uint64_t a1, _OWORD *a2, int a3, long long *a4, long long *a5, char a6, char a7, long long *a8, long long *a9, int a10, int a11, char a12, char a13, char a14, int a15, int a16, int a17)
{
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 8) = *a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a3;
  *(void *)(a1 + 32) = 0;
  uint64_t v20 = (std::string *)(a1 + 40);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v21 = *a4;
    v20->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v22 = (std::string *)(a1 + 88);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v23 = *a5;
    *(void *)(a1 + 104) = *((void *)a5 + 2);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
  }
  int v24 = (std::string *)(a1 + 112);
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v25 = *a8;
    *(void *)(a1 + 128) = *((void *)a8 + 2);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
  }
  int v26 = (std::string *)(a1 + 136);
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a9, *((void *)a9 + 1));
  }
  else
  {
    long long v27 = *a9;
    *(void *)(a1 + 152) = *((void *)a9 + 2);
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
  }
  *(unsigned char *)(a1 + 160) = a12;
  *(unsigned char *)(a1 + 161) = a13;
  *(unsigned char *)(a1 + 162) = a14;
  *(unsigned char *)(a1 + 163) = a6;
  *(unsigned char *)(a1 + 164) = a7;
  *(_WORD *)(a1 + 165) = 256;
  *(_DWORD *)(a1 + 168) = a10;
  *(_DWORD *)(a1 + 172) = a11;
  *(_DWORD *)(a1 + 176) = a15;
  *(_DWORD *)(a1 + 180) = a16;
  *(_DWORD *)(a1 + 184) = a17;
  return a1;
}

void altitude::RootTileData::~RootTileData(altitude::RootTileData *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 159) < 0)
  {
    operator delete(*((void **)this + 17));
    if ((*((char *)this + 135) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*((char *)this + 111) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((*((char *)this + 135) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)this + 14));
  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*((char *)this + 87) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*((void **)this + 11));
  if ((*((char *)this + 87) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*((char *)this + 63) & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(*((void **)this + 5));
    return;
  }
LABEL_12:
  operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0) {
    goto LABEL_13;
  }
}

uint64_t altitude::HeightRequest::getAltBounds(altitude::HeightRequest *this, float *a2, float *a3)
{
  if (*((unsigned char *)this + 392))
  {
    uint64_t result = (*(uint64_t (**)(altitude::HeightRequest *))(*(void *)this + 40))(this);
    if (result)
    {
      *a2 = *((float *)this + 100);
      *a3 = *((float *)this + 101);
      return 1;
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unint64_t v7 = GEOGetVectorKitVKDefaultLog_log;
    uint64_t result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1A1780000, v7, OS_LOG_TYPE_ERROR, "Invalid use: This request was made for a mesh actor", v8, 2u);
      return 0;
    }
  }
  return result;
}

void altitude::HeightRequest::getOverlayElement(altitude::HeightRequest *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 392))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v3 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl(&dword_1A1780000, v3, OS_LOG_TYPE_ERROR, "Invalid use: This request was made for altitude bounds only", v7, 2u);
    }
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    if (((*(uint64_t (**)(altitude::HeightRequest *))(*(void *)this + 40))(this) & 1) == 0)
    {
      uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 44);
      *((void *)this + 43) = 0;
      *((void *)this + 44) = 0;
      if (v5)
      {
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    uint64_t v6 = *((void *)this + 44);
    *a2 = *((void *)this + 43);
    a2[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void altitude::HeightRequest::getHeightElement(altitude::HeightRequest *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 392))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v3 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1A1780000, v3, OS_LOG_TYPE_ERROR, "Invalid use: This request was made for altitude bounds only", v6, 2u);
    }
    goto LABEL_9;
  }
  if (((*(uint64_t (**)(altitude::HeightRequest *))(*(void *)this + 40))(this) & 1) == 0)
  {
LABEL_9:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  uint64_t v5 = *((void *)this + 42);
  *a2 = *((void *)this + 41);
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t altitude::HeightRequest::succeeded(altitude::HeightRequest *this)
{
  return *((unsigned __int8 *)this + 216);
}

void altitude::HeightRequest::jobStep(altitude::HeightRequest *this)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  if (*((double *)this + 52) < 0.0) {
    *((double *)this + 52) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  }
  uint64_t v2 = (_OWORD *)((char *)this + 328);
  if (*((unsigned char *)this + 392))
  {
    karo::util::Path::getNonDirectory((void **)__dst, (void **)this + 24);
    altitude::util::getTileIndexFromUrlString((void **)__dst, (uint64_t)this + 368);
    if (altitude::HeightRequest::loadHeightMap(this))
    {
      SubJob = karo::Job::getSubJob((pthread_mutex_t **)this, 1);
      uint64_t v4 = *(void *)SubJob;
      uint64_t v5 = (std::__shared_weak_count *)*((void *)SubJob + 1);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v4) {
        operator new();
      }
      uint64_t v6 = v5;
      pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 152));
      int v7 = *(_DWORD *)(v4 + 160);
      char v8 = v7 & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 152));
      if (v7)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 152));
        int v9 = *(_DWORD *)(v4 + 160);
        pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 152));
        if ((v9 & 2) != 0)
        {
          char v10 = 0;
        }
        else
        {
          *((void *)this + 50) = *(void *)(v4 + 220);
          char v10 = 1;
        }
        *((unsigned char *)this + 216) = v10;
      }
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if ((__dst[23] & 0x80000000) == 0)
        {
LABEL_25:
          if ((v8 & 1) == 0) {
            return;
          }
          goto LABEL_26;
        }
      }
      else if ((__dst[23] & 0x80000000) == 0)
      {
        goto LABEL_25;
      }
    }
    else
    {
      char v8 = 0;
      if ((__dst[23] & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    operator delete(*(void **)__dst);
    if ((v8 & 1) == 0) {
      return;
    }
LABEL_26:
    *((double *)this + 53) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    *((_DWORD *)this + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    return;
  }
  v118 = (char **)((char *)this + 192);
  karo::util::Path::getNonDirectory(&__p, (void **)this + 24);
  altitude::util::getTileIndexFromUrlString(&__p, (uint64_t)this + 368);
  altitude::HeightRequest::loadHeightMap(this);
  uint64_t v134 = 0;
  v135 = 0;
  uint64_t v132 = 0;
  v133 = 0;
  if (!*((unsigned char *)this + 393))
  {
    if (!*((void *)this + 37)) {
      operator new();
    }
    if (*((void *)this + 39))
    {
      uint64_t v11 = karo::Job::getSubJob((pthread_mutex_t **)this, 3);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = (std::__shared_weak_count *)*((void *)v11 + 1);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v132 = v12;
      v133 = v13;
      if (!v12)
      {
        uint64_t v14 = *((void *)this + 39);
        uint64_t v15 = *((void *)this + 1);
        uint64_t v16 = atomic_load((unsigned int *)this + 4);
        (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(*(void *)v14 + 16))(v14, v15, (char *)this + 312, (char *)this + 368, v16);
        operator new();
      }
    }
    uint64_t v17 = karo::Job::getSubJob((pthread_mutex_t **)this, 2);
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = (std::__shared_weak_count *)*((void *)v17 + 1);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v134 = v18;
    v135 = v19;
    if (!v18)
    {
      uint64_t v20 = *((void *)this + 37);
      uint64_t v21 = *((void *)this + 1);
      uint64_t v22 = atomic_load((unsigned int *)this + 4);
      (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t))(*(void *)v20 + 16))(v20, v21, (char *)this + 296, (char *)this + 368, v22);
      operator new();
    }
  }
  pthread_mutex_lock(*((pthread_mutex_t **)this + 11));
  uint64_t v23 = *((void *)this + 8);
  uint64_t v24 = *((void *)this + 9);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 11));
  if (v23 != v24
    || (pthread_mutex_lock(*((pthread_mutex_t **)this + 19)),
        int v25 = *((_DWORD *)this + 40),
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19)),
        (v25 & 2) != 0))
  {
    int v31 = 0;
    goto LABEL_49;
  }
  altitude::HeightRequest::loadHeightMap(this);
  int v26 = karo::Job::getSubJob((pthread_mutex_t **)this, 4);
  uint64_t v28 = *(void *)v26;
  long long v27 = (std::__shared_weak_count *)*((void *)v26 + 1);
  uint64_t v130 = *(void *)v26;
  v131 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v28)
  {
    v115 = (char *)this + 328;
    uint64_t v119 = *((void *)this + 1);
    v127 = 0;
    v128 = 0;
    uint64_t v129 = 0;
    v124 = 0;
    v125 = 0;
    uint64_t v126 = 0;
    if (*((void *)this + 37))
    {
      if (v134)
      {
        std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__assign_with_size[abi:nn180100]<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*,karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*>((uint64_t)&v127, *(uint64_t **)(v134 + 240), *(uint64_t **)(v134 + 248), (uint64_t)(*(void *)(v134 + 248) - *(void *)(v134 + 240)) >> 4);
        int v29 = (uint64_t *)v127;
        v116 = v128;
        if (v127 != v128)
        {
          int v30 = (void **)((char *)this + 432);
          do
          {
            uint64_t v34 = *v29;
            int v35 = (std::__shared_weak_count *)v29[1];
            if (v35) {
              atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v36 = *(void *)(v34 + 8);
            int v37 = *(std::__shared_weak_count **)(v34 + 16);
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v38 = *(unsigned __int8 *)(v36 + 25);
            int v39 = *(_DWORD *)(v36 + 28);
            unsigned int v40 = *(_DWORD *)(v36 + 32);
            *(_DWORD *)__dst = 7;
            memset(&__dst[4], 0, 28);
            GEOTileKedouble y = (void *)altitude::TileKey::getGEOTileKey((unsigned int *)__dst, v119);
            uint64_t v140 = v41;
            int v42 = objc_msgSend(MEMORY[0x1E4F64918], "modernManager", v115);
            int v43 = [v42 versionForTileKey:&GEOTileKey];

            LODWORD(buf) = 7;
            *(void *)((char *)&buf + 4) = 0;
            HIDWORD(buf) = v43;
            LODWORD(v143) = v38;
            DWORD1(v143) = ~(-1 << v38) - v39;
            *((void *)&v143 + 1) = v40;
            unint64_t v44 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 432, __dst, (unsigned int *)&buf);
            if (!*v44)
            {
              unint64_t v45 = v44;
              uint64_t v46 = (char *)operator new(0x40uLL);
              *(_OWORD *)(v46 + 28) = buf;
              *(_OWORD *)(v46 + 44) = v143;
              uint64_t v47 = *(void *)__dst;
              *(void *)uint64_t v46 = 0;
              *((void *)v46 + 1) = 0;
              *((void *)v46 + 2) = v47;
              *unint64_t v45 = (uint64_t)v46;
              unsigned __int8 v48 = (void *)**v30;
              if (v48)
              {
                *int v30 = v48;
                float v49 = (uint64_t *)*v45;
              }
              else
              {
                float v49 = (uint64_t *)v46;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 55), v49);
              ++*((void *)this + 56);
            }
            if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
            if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
            v29 += 2;
          }
          while (v29 != v116);
        }
      }
    }
    if (*((void *)this + 39))
    {
      if (v132)
      {
        std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__assign_with_size[abi:nn180100]<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*,karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*>((uint64_t)&v124, *(uint64_t **)(v132 + 240), *(uint64_t **)(v132 + 248), (uint64_t)(*(void *)(v132 + 248) - *(void *)(v132 + 240)) >> 4);
        float v50 = (uint64_t *)v124;
        v117 = v125;
        if (v124 != v125)
        {
          int v51 = (void **)((char *)this + 432);
          do
          {
            uint64_t v52 = *v50;
            float v53 = (std::__shared_weak_count *)v50[1];
            if (v53) {
              atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v54 = *(void *)(v52 + 8);
            float v55 = *(std::__shared_weak_count **)(v52 + 16);
            if (v55) {
              atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v56 = *(unsigned __int8 *)(v54 + 25);
            int v58 = *(_DWORD *)(v54 + 28);
            unsigned int v57 = *(_DWORD *)(v54 + 32);
            *(_DWORD *)__dst = 7;
            memset(&__dst[4], 0, 28);
            GEOTileKedouble y = (void *)altitude::TileKey::getGEOTileKey((unsigned int *)__dst, v119);
            uint64_t v140 = v59;
            float v60 = [MEMORY[0x1E4F64918] modernManager];
            int v61 = [v60 versionForTileKey:&GEOTileKey];

            LODWORD(buf) = 33;
            *(void *)((char *)&buf + 4) = 0;
            HIDWORD(buf) = v61;
            LODWORD(v143) = v56;
            DWORD1(v143) = ~(-1 << v56) - v58;
            *((void *)&v143 + 1) = v57;
            float v62 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 432, __dst, (unsigned int *)&buf);
            if (!*v62)
            {
              float v63 = v62;
              float v64 = (char *)operator new(0x40uLL);
              *(_OWORD *)(v64 + 28) = buf;
              *(_OWORD *)(v64 + 44) = v143;
              uint64_t v65 = *(void *)__dst;
              *(void *)float v64 = 0;
              *((void *)v64 + 1) = 0;
              *((void *)v64 + 2) = v65;
              *float v63 = (uint64_t)v64;
              v66 = (void *)**v51;
              if (v66)
              {
                *int v51 = v66;
                unint64_t v67 = (uint64_t *)*v63;
              }
              else
              {
                unint64_t v67 = (uint64_t *)v64;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 55), v67);
              ++*((void *)this + 56);
            }
            if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
            if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
            v50 += 2;
          }
          while (v50 != v117);
        }
      }
    }
    int v68 = *((unsigned __int8 *)this + 393);
    if (*((unsigned char *)this + 393) || (float v69 = (uint64_t *)v127, v127 != v128))
    {
      uint64_t v70 = *((void *)this + 35);
      if (v70)
      {
        uint64_t v71 = *(void *)(v70 + 136);
        uint64_t v72 = *(void *)(v70 + 144);
        memset(&__dst[4], 0, 28);
        *(_DWORD *)__dst = 17;
        *(void *)&long long buf = altitude::TileKey::getGEOTileKey((unsigned int *)__dst, v119);
        *((void *)&buf + 1) = v73;
        float32_t v74 = [MEMORY[0x1E4F64918] modernManager];
        int v75 = [v74 versionForTileKey:&buf];

        float v76 = (void **)((char *)this + 432);
        *(_DWORD *)__dst = 17;
        *(void *)&__dst[4] = 0;
        *(_DWORD *)&__dst[12] = v75;
        *(void *)&__dst[16] = v71;
        *(void *)&__dst[24] = v72;
        float v77 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>((uint64_t)this + 432, &buf, (unsigned int *)__dst);
        if (!*v77)
        {
          v78 = v77;
          unint64_t v79 = (char *)operator new(0x40uLL);
          *(_OWORD *)(v79 + 28) = *(_OWORD *)__dst;
          *(_OWORD *)(v79 + 44) = *(_OWORD *)&__dst[16];
          uint64_t v80 = buf;
          *(void *)unint64_t v79 = 0;
          *((void *)v79 + 1) = 0;
          *((void *)v79 + 2) = v80;
          uint64_t *v78 = (uint64_t)v79;
          float32x4_t v81 = (void *)**v76;
          if (v81)
          {
            *float v76 = v81;
            float32x4_t v82 = (uint64_t *)*v78;
          }
          else
          {
            float32x4_t v82 = (uint64_t *)v79;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 55), v82);
          ++*((void *)this + 56);
        }
        int v68 = *((unsigned __int8 *)this + 393);
      }
      int v86 = *((char *)this + 215);
      if (v86 >= 0) {
        size_t v87 = *((unsigned __int8 *)this + 215);
      }
      else {
        size_t v87 = *((void *)this + 25);
      }
      if (v68) {
        double v88 = "/BaseSurface/";
      }
      else {
        double v88 = "/HeightMesh/";
      }
      if (v68) {
        size_t v89 = 13;
      }
      else {
        size_t v89 = 12;
      }
      unint64_t v90 = v87 + v89;
      if (v87 + v89 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (v90 > 0x16)
      {
        uint64_t v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v90 | 7) != 0x17) {
          uint64_t v92 = v90 | 7;
        }
        uint64_t v93 = v92 + 1;
        uint64_t v91 = operator new(v92 + 1);
        *(void *)&__dst[8] = v87 + v89;
        *(void *)&__dst[16] = v93 | 0x8000000000000000;
        *(void *)__dst = v91;
      }
      else
      {
        memset(__dst, 0, 24);
        uint64_t v91 = __dst;
        __dst[23] = v87 + v89;
      }
      if (v87)
      {
        if (v86 >= 0) {
          double v94 = (char *)this + 192;
        }
        else {
          double v94 = *v118;
        }
        memmove(v91, v94, v87);
      }
      uint64_t v95 = &v91[v87];
      memcpy(v95, v88, v89);
      v95[v89] = 0;
      unsigned __int8 v96 = *((unsigned char *)this + 369);
      int v97 = *((_DWORD *)this + 93);
      v122[0] = v96;
      v122[1] = ~(-1 << v96) - v97;
      v122[2] = *((_DWORD *)this + 94);
      v122[3] = 0;
      char v141 = 0;
      LOBYTE(GEOTileKey) = 0;
      char v121 = 0;
      LOBYTE(v120) = 0;
      altitude::Tile::createTileName(&buf, v122, (uint64_t *)&GEOTileKey, (uint64_t *)&v120);
      if ((SBYTE7(v143) & 0x80u) == 0) {
        p_long long buf = (const std::string::value_type *)&buf;
      }
      else {
        p_long long buf = (const std::string::value_type *)buf;
      }
      if ((SBYTE7(v143) & 0x80u) == 0) {
        std::string::size_type v99 = BYTE7(v143);
      }
      else {
        std::string::size_type v99 = *((void *)&buf + 1);
      }
      v100 = std::string::append((std::string *)__dst, p_buf, v99);
      v123[0] = v100->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v123 + 3) = *(_DWORD *)((char *)&v100->__r_.__value_.__r.__words[2] + 3);
      v100->__r_.__value_.__l.__size_ = 0;
      v100->__r_.__value_.__r.__words[2] = 0;
      v100->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v143) < 0)
      {
        operator delete((void *)buf);
        if ((v121 & 0x80000000) == 0)
        {
LABEL_141:
          if ((v141 & 0x80000000) == 0) {
            goto LABEL_142;
          }
          goto LABEL_146;
        }
      }
      else if ((v121 & 0x80000000) == 0)
      {
        goto LABEL_141;
      }
      operator delete(v120);
      if ((v141 & 0x80000000) == 0)
      {
LABEL_142:
        if ((__dst[23] & 0x80000000) == 0) {
          goto LABEL_143;
        }
LABEL_147:
        operator delete(*(void **)__dst);
LABEL_143:
        operator new();
      }
LABEL_146:
      operator delete(GEOTileKey);
      if ((__dst[23] & 0x80000000) == 0) {
        goto LABEL_143;
      }
      goto LABEL_147;
    }
    (*(void (**)(altitude::HeightRequest *))(*(void *)this + 16))(this);
    float32x4_t v83 = (char *)v124;
    if (v124)
    {
      float32x4_t v84 = (char *)v125;
      if (v125 != v124)
      {
        do
        {
          char v85 = (std::__shared_weak_count *)*((void *)v84 - 1);
          if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
          v84 -= 16;
        }
        while (v84 != v83);
        float32x4_t v83 = (char *)v124;
        float v69 = (uint64_t *)v127;
      }
      operator delete(v83);
    }
    if (v69)
    {
      v110 = v128;
      v111 = v69;
      if (v128 != v69)
      {
        do
        {
          v112 = (std::__shared_weak_count *)*(v110 - 1);
          if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
          v110 -= 2;
        }
        while (v110 != v69);
        v111 = v127;
      }
      v128 = v69;
      operator delete(v111);
    }
LABEL_185:
    int v31 = 1;
    v109 = v131;
    if (!v131) {
      goto LABEL_49;
    }
    goto LABEL_186;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(v28 + 152));
  int v101 = *(_DWORD *)(v28 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v28 + 152));
  if (v101)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
    int v102 = *((_DWORD *)this + 40);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    if ((v102 & 2) == 0)
    {
      v103 = v131;
      if (v131) {
        atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v104 = *(void *)(v28 + 320);
      *(void *)&long long v105 = *(void *)(v28 + 312);
      *((void *)&v105 + 1) = v104;
      if (v104) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v104 + 8), 1uLL, memory_order_relaxed);
      }
      v106 = (std::__shared_weak_count *)*((void *)this + 42);
      _OWORD *v2 = v105;
      if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
      if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
      karo::Job::removeSubJob((pthread_mutex_t **)this, 4);
      if (!*((void *)this + 41))
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        v107 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)this + 215) < 0) {
            v108 = *v118;
          }
          else {
            v108 = (char *)this + 192;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v108;
          _os_log_impl(&dword_1A1780000, v107, OS_LOG_TYPE_ERROR, "Failed to create geometry %s", (uint8_t *)&buf, 0xCu);
        }
      }
      pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
      int v113 = *((_DWORD *)this + 40);
      pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
      BOOL v114 = (v113 & 2) == 0 && *(void *)v2 != 0;
      *((unsigned char *)this + 216) = v114;
      goto LABEL_185;
    }
  }
  int v31 = 0;
  v109 = v131;
  if (!v131) {
    goto LABEL_49;
  }
LABEL_186:
  if (!atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
  }
LABEL_49:
  uint64_t v32 = v133;
  if (v133 && !atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    double v33 = v135;
    if (!v135)
    {
LABEL_53:
      if ((v137 & 0x80000000) == 0) {
        goto LABEL_54;
      }
LABEL_75:
      operator delete(__p);
      if (v31) {
        goto LABEL_26;
      }
      return;
    }
  }
  else
  {
    double v33 = v135;
    if (!v135) {
      goto LABEL_53;
    }
  }
  if (atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (v137 < 0) {
    goto LABEL_75;
  }
LABEL_54:
  if (v31) {
    goto LABEL_26;
  }
}

void sub_1A23F5A54(_Unwind_Exception *a1)
{
  karo::Job::~Job(v1);
  _Unwind_Resume(a1);
}

void sub_1A23F5B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23F5B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t altitude::HeightRequest::loadHeightMap(altitude::HeightRequest *this)
{
  if (*((unsigned char *)this + 393) && *((unsigned char *)this + 394)) {
    return 1;
  }
  int v19 = 0;
  uint64_t v18 = 0;
  uint64_t v2 = *((unsigned int *)this + 94);
  unint64_t v20 = *((unsigned __int8 *)this + 369) | ((unint64_t)(~(-1 << *((unsigned char *)this + 369))
                                                                           - *((_DWORD *)this + 93)) << 32);
  uint64_t v21 = v2;
  int v17 = 17;
  if (!(*(unsigned int (**)(void, int *))(**((void **)this + 31) + 112))(*((void *)this + 31), &v17)) {
    return 1;
  }
  atomic_load((unsigned int *)this + 4);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 31) + 104))(&v12);
  uint64_t v3 = v12;
  if (v12)
  {
    uint64_t v4 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 36);
    *((void *)this + 35) = v3;
    *((void *)this + 36) = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    karo::Job::removeSubJob((pthread_mutex_t **)this, 0);
  }
  else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v14))
  {
    char v10 = v16;
    v11[0] = v15;
    v11[1] = v16;
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      karo::Job::addBlockingSubJob((uint64_t *)this, v11, 0, 0);
      uint64_t v6 = 0;
      if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_12;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    else
    {
      karo::Job::addBlockingSubJob((uint64_t *)this, v11, 0, 0);
    }
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = 1;
LABEL_12:
  uint64_t v14 = off_1EF5677B0;
  if (v15) {
    atomic_fetch_add((atomic_uint *volatile)(v15 + 128), 0xFFFFFFFF);
  }
  int v7 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  char v8 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v6;
}

uint64_t std::__shared_ptr_pointer<altitude::util::BuildHeightMeshJob *,std::shared_ptr<altitude::util::BuildHeightMeshJob>::__shared_ptr_default_delete<altitude::util::BuildHeightMeshJob,altitude::util::BuildHeightMeshJob>,std::allocator<altitude::util::BuildHeightMeshJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::util::BuildHeightMeshJob *,std::shared_ptr<altitude::util::BuildHeightMeshJob>::__shared_ptr_default_delete<altitude::util::BuildHeightMeshJob,altitude::util::BuildHeightMeshJob>,std::allocator<altitude::util::BuildHeightMeshJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<altitude::MapProvider::MapTransfer *,std::shared_ptr<karo::Job>::__shared_ptr_default_delete<karo::Job,altitude::MapProvider::MapTransfer>,std::allocator<altitude::MapProvider::MapTransfer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::MapProvider::MapTransfer *,std::shared_ptr<karo::Job>::__shared_ptr_default_delete<karo::Job,altitude::MapProvider::MapTransfer>,std::allocator<altitude::MapProvider::MapTransfer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<altitude::DigitalGlobeProvider *,std::shared_ptr<altitude::MapProvider>::__shared_ptr_default_delete<altitude::MapProvider,altitude::DigitalGlobeProvider>,std::allocator<altitude::DigitalGlobeProvider>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::DigitalGlobeProvider *,std::shared_ptr<altitude::MapProvider>::__shared_ptr_default_delete<altitude::MapProvider,altitude::DigitalGlobeProvider>,std::allocator<altitude::DigitalGlobeProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<altitude::util::ComputeAltBoundsJob *,std::shared_ptr<altitude::util::ComputeAltBoundsJob>::__shared_ptr_default_delete<altitude::util::ComputeAltBoundsJob,altitude::util::ComputeAltBoundsJob>,std::allocator<altitude::util::ComputeAltBoundsJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::util::ComputeAltBoundsJob *,std::shared_ptr<altitude::util::ComputeAltBoundsJob>::__shared_ptr_default_delete<altitude::util::ComputeAltBoundsJob,altitude::util::ComputeAltBoundsJob>,std::allocator<altitude::util::ComputeAltBoundsJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void altitude::HeightRequest::~HeightRequest(altitude::HeightRequest *this)
{
  altitude::HeightRequest::~HeightRequest(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EF568C10;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 55));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 42);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 42);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 38);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 38);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    int v7 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v7) {
      goto LABEL_19;
    }
  }
  else
  {
    int v7 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v7) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_19:
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  karo::Job::~Job(this);
}

void md::ARBuildingLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = 2147483646;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  uint64_t v13 = *(unsigned __int8 **)(a6 + 16);
  uint64_t v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

uint64_t md::ARBuildingLayerDataSource::updateRequest()
{
  return 1;
}

void md::ARBuildingLayerDataSource::createLayerData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (unsigned __int16 *)*a3;
  uint64_t v6 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v6)
  {
    while (*v5 != *(unsigned __int16 *)(a1 + 584))
    {
      v5 += 24;
      if (v5 == v6) {
        goto LABEL_10;
      }
    }
  }
  if (v5 == v6 || *((void *)v5 + 4) != 1)
  {
LABEL_10:
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 3);
    uint64_t v8 = *(void *)(v7 + 112);
    int v9 = *(std::__shared_weak_count **)(v7 + 120);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = v8;
      uint64_t v14 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
LABEL_12:
      memset(v12, 0, sizeof(v12));
      gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v12);
      sp_mut = std::__get_sp_mut((const void *)(a1 + 792));
      std::__sp_mut::lock(sp_mut);
      uint64_t v11 = *(void *)(a1 + 800);
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      std::__sp_mut::unlock(sp_mut);
      operator new();
    }
  }
  uint64_t v13 = v8;
  uint64_t v14 = 0;
  goto LABEL_12;
}

void sub_1A23F81CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v74 = LODWORD(STACK[0x4D0]);
  if (v74 != -1) {
    ((void (*)(uint64_t, unint64_t *))off_1EF5907F8[v74])(v72 - 208, &STACK[0x470]);
  }
  LODWORD(STACK[0x4D0]) = -1;
  if (STACK[0x2B0] != STACK[0x2C0]) {
    free((void *)STACK[0x2B0]);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a70);
  std::unique_ptr<gdc::Registry>::~unique_ptr[abi:nn180100](&a72);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x200]);
  if (STACK[0x210]) {
    operator delete((void *)STACK[0x210]);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::ARBuildingTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::ARBuildingTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ARBuildingTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::ARBuildingLayerDataSource::constructRequests(void **a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  if (a2 != a3)
  {
    uint64_t v21 = v3;
    uint64_t v22 = v4;
    uint64_t v6 = a2;
    do
    {
      uint64_t v8 = (int32x2_t *)*((void *)*v6 + 2);
      __int32 v9 = v8[1].i32[0];
      v19[24] = v8[1].i32[1];
      v19[25] = v9;
      int32x2_t v20 = vrev64_s32(*v8);
      (*(void (**)(uint64_t *__return_ptr))(*a1[3] + 16))(&v18);
      if ((_BYTE)v18)
      {
        uint64_t v10 = *v6;
        uint64_t v11 = **v6;
        uint64_t v12 = *((void *)*v6 + 14);
        v13[0] = 0;
        if (v10[96])
        {
          int v14 = *((_DWORD *)v10 + 25);
          v13[0] = 1;
        }
        ((void (*)(uint64_t *__return_ptr, void **, uint64_t, unsigned char *, uint64_t, char *))(*a1)[18])(&v15, a1, v11, v19, v12, v13);
        if (v13[0]) {
          v13[0] = 0;
        }
        gdc::LayerDataRequest::request(*v6, (uint64_t)&v15, 0);
        if (v16 != v17) {
          free(v16);
        }
      }
      v6 += 2;
    }
    while (v6 != a3);
  }
}

uint64_t md::ARBuildingLayerDataSource::isReadyToDecode(md::ARBuildingLayerDataSource *this)
{
  sp_mut = std::__get_sp_mut((char *)this + 776);
  std::__sp_mut::lock(sp_mut);
  uint64_t v3 = *((void *)this + 97);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  if (v3)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(*(void *)(v3 + 16) + 2786));
    uint64_t v6 = v5 & 1;
    if (!v4) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (!v4) {
      return v6;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void md::ARBuildingLayerDataSource::~ARBuildingLayerDataSource(md::ARBuildingLayerDataSource *this)
{
  *(void *)this = &unk_1EF546130;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 98);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 98);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  *((void *)this + 94) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF546130;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 98);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 98);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  *((void *)this + 94) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void md::DaVinciRoadTileDataRenderable::~DaVinciRoadTileDataRenderable(md::DaVinciRoadTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513D20;
  uint64_t v2 = (md::TrailJunctionsResource *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v2)
  {
    md::TrailJunctionsResource::~TrailJunctionsResource(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = &unk_1EF513688;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  md::TrailJunctionsResource *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF513D20;
  uint64_t v2 = (md::TrailJunctionsResource *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v2)
  {
    md::TrailJunctionsResource::~TrailJunctionsResource(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = &unk_1EF513688;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void md::TrailJunctionsResource::~TrailJunctionsResource(md::TrailJunctionsResource *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    uint64_t v4 = (std::__shared_weak_count *)v3[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    (*(void (**)(void, void *, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v3, 208);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 9) + 40))(*((void *)this + 9), v5, 8 * *((void *)this + 8));
  }
  uint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,0>((uint64_t)(v6 + 2));
      (*(void (**)(void, void *, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), v6, 64);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = *(void *)this;
  *(void *)this = 0;
  if (v8) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 40))(*((void *)this + 2), v8, 8 * *((void *)this + 1));
  }
}

void md::MapTileDataRenderable<md::DaVinciCenterLineRoadsTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513688;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513688;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void *)(a1 + 16);
    }
    *(void *)(a1 + 24) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 40))(*(void *)(a1 + 40), v4, *(void *)(a1 + 32) - v4);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t std::unordered_map<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,geo::StdAllocator<std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = (void *)(a1 + 32);
  *(void *)(a1 + 40) = 0;
  uint64_t v48 = a1 + 24;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    unint64_t v2 = *(void *)(a1 + 8);
    BOOL v9 = prime >= v2;
    if (prime > v2) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v2 = 0;
    BOOL v9 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v9)
  {
    unint64_t v10 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (v2 < 3 || (uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v2), v11.i16[0] = vaddlv_u8(v11), v11.u32[0] > 1uLL))
    {
      unint64_t v10 = std::__next_prime(v10);
    }
    else
    {
      uint64_t v12 = 1 << -(char)__clz(v10 - 1);
      if (v10 >= 2) {
        unint64_t v10 = v12;
      }
    }
    if (prime <= v10) {
      size_t prime = v10;
    }
    if (prime < v2) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 24); i; uint64_t i = (void *)*i)
  {
    unint64_t v14 = i[2];
    unint64_t v15 = 0x9DDFEA08EB382D69 * (((8 * v14) + 8) ^ HIDWORD(v14));
    unint64_t v16 = 0x9DDFEA08EB382D69 * (HIDWORD(v14) ^ (v15 >> 47) ^ v15);
    unint64_t v17 = v16 ^ (v16 >> 47);
    unint64_t v18 = 0x9DDFEA08EB382D69 * v17;
    unint64_t v19 = *(void *)(a1 + 8);
    if (v19)
    {
      uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        unint64_t v2 = 0x9DDFEA08EB382D69 * v17;
        if (v18 >= v19) {
          unint64_t v2 = v18 % v19;
        }
      }
      else
      {
        unint64_t v2 = v18 & (v19 - 1);
      }
      uint64_t v21 = *(void **)(*(void *)a1 + 8 * v2);
      if (v21)
      {
        uint64_t v22 = (void *)*v21;
        if (v22)
        {
          if (v20.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v24 = v22[1];
              if (v24 == v18)
              {
                if (v22[2] == v14) {
                  goto LABEL_86;
                }
              }
              else if ((v24 & (v19 - 1)) != v2)
              {
                goto LABEL_39;
              }
              uint64_t v22 = (void *)*v22;
              if (!v22) {
                goto LABEL_39;
              }
            }
          }
          do
          {
            unint64_t v23 = v22[1];
            if (v23 == v18)
            {
              if (v22[2] == v14) {
                goto LABEL_86;
              }
            }
            else
            {
              if (v23 >= v19) {
                v23 %= v19;
              }
              if (v23 != v2) {
                break;
              }
            }
            uint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
      }
    }
LABEL_39:
    int v25 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 16))(*v7, 64, 8);
    int v26 = v25;
    float v49 = v25;
    long long v27 = v7;
    *int v25 = 0;
    v25[1] = v18;
    v25[2] = i[2];
    uint64_t v28 = i[3];
    v25[3] = v28;
    if (v28) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
    }
    v25[4] = 0;
    v25[5] = 0;
    uint64_t v29 = i[7];
    v26[6] = 0;
    v26[7] = v29;
    int v31 = (char *)i[4];
    int v30 = (char *)i[5];
    uint64_t v32 = v30 - v31;
    if (v30 != v31)
    {
      if (v32 < 0) {
        abort();
      }
      double v33 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v29 + 16))(v29, v30 - v31, 8);
      v26[4] = v33;
      v26[5] = v33;
      v26[6] = &v33[2 * (v32 >> 4)];
      do
      {
        if (v33)
        {
          void *v33 = *(void *)v31;
          uint64_t v34 = *((void *)v31 + 1);
          v33[1] = v34;
          if (v34) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
          }
        }
        v31 += 16;
        v33 += 2;
      }
      while (v31 != v30);
      v26[5] = v33;
    }
    float v35 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
    float v36 = *(float *)(a1 + 48);
    uint64_t v7 = v27;
    if (!v19 || (float)(v36 * (float)v19) < v35)
    {
      BOOL v37 = (v19 & (v19 - 1)) != 0;
      if (v19 < 3) {
        BOOL v37 = 1;
      }
      unint64_t v38 = v37 | (2 * v19);
      unint64_t v39 = vcvtps_u32_f32(v35 / v36);
      if (v38 <= v39) {
        size_t v40 = v39;
      }
      else {
        size_t v40 = v38;
      }
      if (v40 == 1)
      {
        size_t v40 = 2;
      }
      else if ((v40 & (v40 - 1)) != 0)
      {
        size_t v40 = std::__next_prime(v40);
      }
      int8x8_t v41 = *(int8x8_t *)(a1 + 8);
      if (v40 > *(void *)&v41) {
        goto LABEL_61;
      }
      if (v40 < *(void *)&v41)
      {
        unint64_t v42 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
        if (*(void *)&v41 < 3uLL || (uint8x8_t v43 = (uint8x8_t)vcnt_s8(v41), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
        {
          unint64_t v42 = std::__next_prime(v42);
        }
        else
        {
          uint64_t v44 = 1 << -(char)__clz(v42 - 1);
          if (v42 >= 2) {
            unint64_t v42 = v44;
          }
        }
        if (v40 <= v42) {
          size_t v40 = v42;
        }
        if (v40 < *(void *)&v41) {
LABEL_61:
        }
          std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a1, v40);
      }
      unint64_t v19 = *(void *)(a1 + 8);
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v18 >= v19) {
          unint64_t v2 = v18 % v19;
        }
        else {
          unint64_t v2 = v18;
        }
      }
      else
      {
        unint64_t v2 = (v19 - 1) & v18;
      }
    }
    unint64_t v45 = *(void **)(*(void *)a1 + 8 * v2);
    if (v45)
    {
      void *v49 = *v45;
      *unint64_t v45 = v49;
    }
    else
    {
      void *v49 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v49;
      *(void *)(*(void *)a1 + 8 * v2) = v48;
      if (*v49)
      {
        unint64_t v46 = *(void *)(*v49 + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v46 >= v19) {
            v46 %= v19;
          }
        }
        else
        {
          v46 &= v19 - 1;
        }
        *(void *)(*(void *)a1 + 8 * v46) = v49;
      }
    }
    ++*(void *)(a1 + 40);
LABEL_86:
    ;
  }
  return a1;
}

void sub_1A23F9448(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void **a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  unint64_t v15 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), 64, 8);
  uint64_t v12 = v15;
  void *v15 = 0;
  v15[1] = v8;
  unint64_t v16 = *a3;
  v15[2] = **a3;
  uint64_t v17 = v16[1];
  v15[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  v15[4] = 0;
  v15[5] = 0;
  v15[6] = 0;
  {
    operator new();
  }
  v12[7] = mdm::Allocator::instance(void)::alloc;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v19 = *(float *)(a1 + 48);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v24) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v24)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
      if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < *(void *)&v24) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v3);
  if (v28)
  {
    void *v12 = *v28;
LABEL_61:
    *uint64_t v28 = v12;
    goto LABEL_62;
  }
  void *v12 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v12;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*v12)
  {
    unint64_t v29 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9) {
        v29 %= v9;
      }
    }
    else
    {
      v29 &= v9 - 1;
    }
    uint64_t v28 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 40);
  return v12;
}

void sub_1A23F9868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::TrailJunctionRenderable>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[18];
  a1[18] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[17];
  a1[17] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)a1[14];
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)a1[14];
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  unint64_t v6 = (std::__shared_weak_count *)a1[12];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unint64_t v7 = (std::__shared_weak_count *)a1[10];
    if (!v7) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v7 = (std::__shared_weak_count *)a1[10];
    if (!v7) {
      goto LABEL_17;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_17:
  unint64_t v8 = (std::__shared_weak_count *)a1[8];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    unint64_t v9 = (std::__shared_weak_count *)a1[6];
    if (!v9) {
      return;
    }
  }
  else
  {
    unint64_t v9 = (std::__shared_weak_count *)a1[6];
    if (!v9) {
      return;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void std::__shared_ptr_emplace<md::TrailJunctionRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5818A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TrailJunctionRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5818A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,0>(v2 + 16);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 64);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,0>((uint64_t)(v2 + 2));
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v2, 64);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v4, 8 * a1[1]);
  }
  return a1;
}

void md::HardwareFigDecoderInternal::~HardwareFigDecoderInternal(md::HardwareFigDecoderInternal *this)
{
  std::mutex::lock((std::mutex *)this);
  std::mutex::unlock((std::mutex *)this);
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)this);
}

void sub_1A23F9D44(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 72);
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<md::anonymous namespace'::Session>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    CMPhotoDecompressionSessionReleaseHardwareResources();
    CMPhotoDecompressionSessionFlushCachedBuffers();
    CFRelease(*(CFTypeRef *)(v2 + 8));
    CFRelease(*(CFTypeRef *)v2);

    JUMPOUT(0x1A6239270);
  }
  return result;
}

void sub_1A23F9E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN2md18HardwareFigDecoder8instanceEv_block_invoke()
{
}

void sub_1A23F9EE0(_Unwind_Exception *a1)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3)
  {
    md::HardwareFigDecoderInternal::~HardwareFigDecoderInternal(v3);
    MEMORY[0x1A6239270]();
  }
  MEMORY[0x1A6239270](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t md::HardwareFigDecoderInternal::createContainer(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, void *a5)
{
  unint64_t v8 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:a2 length:a3 freeWhenDone:0];
  if (![v8 length]) {
    goto LABEL_26;
  }
  int v18 = 0;
  if (!CMPhotoDecompressionDetectContainerFormat())
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    unint64_t v9 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_25;
    }
    __int16 v17 = 0;
    uint8x8_t v10 = "Failed to decode raster resource - CMPhoto unable to detect container format";
    uint8x8_t v11 = (uint8_t *)&v17;
    goto LABEL_24;
  }
  if (!*(void *)(md::HardwareFigDecoderInternal::getOrCreateSession(a1) + 8))
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    unint64_t v9 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_25;
    }
    __int16 v16 = 0;
    uint8x8_t v10 = "Failed to decode raster resource - missing decompression session";
    uint8x8_t v11 = (uint8_t *)&v16;
    goto LABEL_24;
  }
  if (CMPhotoDecompressionSessionCreateContainer())
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    unint64_t v9 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_25;
    }
    __int16 v15 = 0;
    uint8x8_t v10 = "Failed to decode raster resource - unable to create decompression container";
    uint8x8_t v11 = (uint8_t *)&v15;
LABEL_24:
    _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_ERROR, v10, v11, 2u);
LABEL_25:

LABEL_26:
    uint64_t v12 = 0;
    goto LABEL_27;
  }
  if (CMPhotoDecompressionContainerGetImageCount() || !*a5)
  {
    CFRelease(*a4);
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    unint64_t v9 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_25;
    }
    __int16 v14 = 0;
    uint8x8_t v10 = "Failed to decode raster resource - unable to get image count or 0 image count";
    uint8x8_t v11 = (uint8_t *)&v14;
    goto LABEL_24;
  }
  uint64_t v12 = 1;
LABEL_27:

  return v12;
}

void sub_1A23FA188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::HardwareFigDecoderInternal::getOrCreateSession(uint64_t a1)
{
  std::mutex::lock((std::mutex *)a1);
  uint64_t v2 = *(void *)(a1 + 112);
  if (!v2) {
    operator new();
  }
  std::mutex::unlock((std::mutex *)a1);
  return v2;
}

void sub_1A23FA2E4(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v2, 0xA0C40E93CF5C4);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t md::HardwareFigDecoder::decodeAsync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (void *)a4[3];
  if (v8)
  {
    if (v8 == a4)
    {
      float v69 = v68;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v68);
    }
    else
    {
      float v69 = (void *)(*(uint64_t (**)(void *))(*v8 + 16))(v8);
    }
  }
  else
  {
    float v69 = 0;
  }
  uint64_t v66 = 0;
  if (!md::HardwareFigDecoderInternal::createContainer(a1, a2, a3, cf, &v66))
  {
    unint64_t v9 = 0;
    goto LABEL_135;
  }
  std::mutex::lock((std::mutex *)a1);
  unint64_t v9 = *(void *)(a1 + 64);
  uint8x8_t v10 = (void **)(a1 + 72);
  *(void *)(a1 + 64) = v9 + 1;
  unint64_t v11 = *(void *)(a1 + 80);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v11 <= v9) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v13 = (void *)*((void *)*v10 + v4);
    if (v13)
    {
      __int16 v14 = (void *)*v13;
      if (v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v9)
            {
              if (v14[2] == v9) {
                goto LABEL_89;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_29;
            }
            __int16 v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_29;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (v14[2] == v9) {
              goto LABEL_89;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          __int16 v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_29:
  __int16 v17 = (char *)operator new(0x28uLL);
  *(void *)__int16 v17 = 0;
  *((void *)v17 + 1) = v9;
  *((void *)v17 + 2) = v9;
  *(_OWORD *)(v17 + 24) = *(_OWORD *)cf;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 96) + 1);
  float v19 = *(float *)(a1 + 104);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = (v11 & (v11 - 1)) == 0;
    if (v11 < 3) {
      BOOL v20 = 0;
    }
    unint64_t v21 = (2 * v11) | !v20;
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 80);
    }
    if (prime <= v11)
    {
      if (prime >= v11) {
        goto LABEL_66;
      }
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 96) / *(float *)(a1 + 104));
      if (v11 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime >= v11)
      {
        unint64_t v11 = *(void *)(a1 + 80);
LABEL_66:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v11 <= v9) {
            unint64_t v4 = v9 % v11;
          }
          else {
            unint64_t v4 = v9;
          }
        }
        else
        {
          unint64_t v4 = (v11 - 1) & v9;
        }
        goto LABEL_79;
      }
      if (!prime)
      {
        uint64_t v54 = *v10;
        const char *v10 = 0;
        if (v54) {
          operator delete(v54);
        }
        unint64_t v11 = 0;
        *(void *)(a1 + 80) = 0;
        goto LABEL_66;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v24 = operator new(8 * prime);
    unint64_t v25 = *v10;
    const char *v10 = v24;
    if (v25) {
      operator delete(v25);
    }
    uint64_t v26 = 0;
    *(void *)(a1 + 80) = prime;
    do
      *((void *)*v10 + v26++) = 0;
    while (prime != v26);
    uint64_t v28 = a1 + 88;
    uint64_t v27 = *(void **)(a1 + 88);
    if (!v27)
    {
LABEL_65:
      unint64_t v11 = prime;
      goto LABEL_66;
    }
    size_t v29 = v27[1];
    size_t v30 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v31 = v29 & v30;
      *((void *)*v10 + v31) = v28;
      for (uint64_t i = (void *)*v27; *v27; uint64_t i = (void *)*v27)
      {
        size_t v33 = i[1] & v30;
        if (v33 == v31)
        {
          uint64_t v27 = i;
        }
        else if (*((void *)*v10 + v33))
        {
          *uint64_t v27 = *i;
          uint64_t v34 = 8 * v33;
          *uint64_t i = **(void **)((char *)*v10 + v34);
          **(void **)((char *)*v10 + v34) = i;
        }
        else
        {
          *((void *)*v10 + v33) = v27;
          uint64_t v27 = i;
          size_t v31 = v33;
        }
      }
      goto LABEL_65;
    }
    if (v29 >= prime) {
      v29 %= prime;
    }
    *((void *)*v10 + v29) = v28;
    unint64_t v38 = (void *)*v27;
    if (!*v27) {
      goto LABEL_65;
    }
    while (1)
    {
      size_t v40 = v38[1];
      if (v40 >= prime) {
        v40 %= prime;
      }
      if (v40 != v29)
      {
        if (!*((void *)*v10 + v40))
        {
          *((void *)*v10 + v40) = v27;
          goto LABEL_70;
        }
        *uint64_t v27 = *v38;
        uint64_t v39 = 8 * v40;
        *unint64_t v38 = **(void **)((char *)*v10 + v39);
        **(void **)((char *)*v10 + v39) = v38;
        unint64_t v38 = v27;
      }
      size_t v40 = v29;
LABEL_70:
      uint64_t v27 = v38;
      unint64_t v38 = (void *)*v38;
      size_t v29 = v40;
      if (!v38) {
        goto LABEL_65;
      }
    }
  }
LABEL_79:
  int8x8_t v41 = *v10;
  unint64_t v42 = (void *)*((void *)*v10 + v4);
  if (v42)
  {
    *(void *)__int16 v17 = *v42;
LABEL_87:
    *unint64_t v42 = v17;
    goto LABEL_88;
  }
  *(void *)__int16 v17 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v17;
  v41[v4] = a1 + 88;
  if (*(void *)v17)
  {
    unint64_t v43 = *(void *)(*(void *)v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v43 >= v11) {
        v43 %= v11;
      }
    }
    else
    {
      v43 &= v11 - 1;
    }
    unint64_t v42 = (char *)*v10 + 8 * v43;
    goto LABEL_87;
  }
LABEL_88:
  ++*(void *)(a1 + 96);
LABEL_89:
  std::mutex::unlock((std::mutex *)a1);
  md::HardwareFigDecoderInternal::getOrCreateSession(a1);
  v70[0] = 0;
  v70[1] = v70;
  v70[2] = 0x5012000000;
  v70[3] = __Block_byref_object_copy__25659;
  v70[4] = __Block_byref_object_dispose__25660;
  v70[5] = "";
  uint64_t v44 = (uint64_t)v69;
  if (v69)
  {
    if (v69 == v68)
    {
      uint64_t v72 = v71;
      (*(void (**)(void *, void *))(v68[0] + 24))(v68, v71);
      goto LABEL_94;
    }
    uint64_t v44 = (*(uint64_t (**)(void))(*v69 + 16))();
  }
  uint64_t v72 = (void *)v44;
LABEL_94:
  v65[0] = 0;
  v65[1] = v65;
  v65[2] = 0x2020000000;
  v65[3] = v9;
  uint64_t v57 = MEMORY[0x1E4F143A8];
  uint64_t v58 = 3221225472;
  uint64_t v59 = &___ZN2md26HardwareFigDecoderInternal11decodeAsyncEPKhmNS_17HardwareFigOutputENSt3__18functionIFvmNS_23HardwareFigDecodeResultEP10__CVBufferEEE_block_invoke;
  float v60 = &unk_1E5A93320;
  float v62 = v65;
  uint64_t v63 = a1;
  int v61 = v70;
  long long v64 = *(_OWORD *)cf;
  if (CMPhotoDecompressionContainerDecodeImageForIndexAsync())
  {
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    unint64_t v45 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      __int16 v56 = 0;
      _os_log_impl(&dword_1A1780000, v45, OS_LOG_TYPE_ERROR, "Failed to decode raster resource - failed to decode image", (uint8_t *)&v56, 2u);
    }

    CFRelease(cf[0]);
    std::mutex::lock((std::mutex *)a1);
    int8x8_t v46 = *(int8x8_t *)(a1 + 80);
    if (v46)
    {
      uint8x8_t v47 = (uint8x8_t)vcnt_s8(v46);
      v47.i16[0] = vaddlv_u8(v47);
      if (v47.u32[0] > 1uLL)
      {
        unint64_t v48 = v9;
        if (*(void *)&v46 <= v9) {
          unint64_t v48 = v9 % *(void *)&v46;
        }
      }
      else
      {
        unint64_t v48 = (*(void *)&v46 - 1) & v9;
      }
      float v49 = (uint64_t **)*((void *)*v10 + v48);
      if (v49)
      {
        float v50 = *v49;
        if (*v49)
        {
          if (v47.u32[0] < 2uLL)
          {
            uint64_t v51 = *(void *)&v46 - 1;
            while (1)
            {
              uint64_t v53 = v50[1];
              if (v53 == v9)
              {
                if (v50[2] == v9) {
                  goto LABEL_129;
                }
              }
              else if ((v53 & v51) != v48)
              {
                goto LABEL_130;
              }
              float v50 = (uint64_t *)*v50;
              if (!v50) {
                goto LABEL_130;
              }
            }
          }
          do
          {
            unint64_t v52 = v50[1];
            if (v52 == v9)
            {
              if (v50[2] == v9)
              {
LABEL_129:
                break;
              }
            }
            else
            {
              if (v52 >= *(void *)&v46) {
                v52 %= *(void *)&v46;
              }
              if (v52 != v48) {
                break;
              }
            }
            float v50 = (uint64_t *)*v50;
          }
          while (v50);
        }
      }
    }
LABEL_130:
    std::mutex::unlock((std::mutex *)a1);
    unint64_t v9 = 0;
  }
  _Block_object_dispose(v65, 8);
  _Block_object_dispose(v70, 8);
  if (v72 == v71)
  {
    (*(void (**)(void *))(v71[0] + 32))(v71);
  }
  else if (v72)
  {
    (*(void (**)(void))(*v72 + 40))();
  }
LABEL_135:
  if (v69 == v68)
  {
    (*(void (**)(void *))(v68[0] + 32))(v68);
  }
  else if (v69)
  {
    (*(void (**)(void))(*v69 + 40))();
  }
  return v9;
}

void sub_1A23FAC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  operator delete(v27);
  std::mutex::unlock(v26);
  std::function<void ()(unsigned long,md::HardwareFigDecodeResult,__CVBuffer *)>::~function(&a26);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25659(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  if (v2)
  {
    if (v2 == a2 + 48)
    {
      *(void *)(result + 72) = result + 48;
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 72) + 24))(*(void *)(a2 + 72), result + 48);
    }
    else
    {
      *(void *)(result + 72) = v2;
      *(void *)(a2 + 72) = 0;
    }
  }
  else
  {
    *(void *)(result + 72) = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__25660(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  uint64_t result = *(void *)(a1 + 72);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long,md::anonymous namespace'::Request>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,md::anonymous namespace'::Request>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,md::anonymous namespace'::Request>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,md::anonymous namespace'::Request>>>::erase(void *a1, uint64_t *__p)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  uint64_t v3 = *__p;
  unint64_t v4 = __p[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v2) {
      v4 %= *(void *)&v2;
    }
  }
  else
  {
    v4 &= *(void *)&v2 - 1;
  }
  unint64_t v6 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    unint64_t v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 == a1 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
  }
  else
  {
    v8 &= *(void *)&v2 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (v3)
    {
      unint64_t v9 = *(void *)(v3 + 8);
      if (v5.u32[0] > 1uLL)
      {
        unint64_t v10 = *(void *)(v3 + 8);
        if (v9 >= *(void *)&v2) {
          unint64_t v10 = v9 % *(void *)&v2;
        }
      }
      else
      {
        unint64_t v10 = v9 & (*(void *)&v2 - 1);
      }
      if (v10 == v4) {
        goto LABEL_22;
      }
    }
    *(void *)(*a1 + 8 * v4) = 0;
    uint64_t v3 = *__p;
  }
  if (!v3) {
    goto LABEL_28;
  }
  unint64_t v9 = *(void *)(v3 + 8);
LABEL_22:
  if (v5.u32[0] > 1uLL)
  {
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
  }
  else
  {
    v9 &= *(void *)&v2 - 1;
  }
  if (v9 != v4)
  {
    *(void *)(*a1 + 8 * v9) = v7;
    uint64_t v3 = *__p;
  }
LABEL_28:
  uint64_t *v7 = v3;
  void *__p = 0;
  --a1[3];
  operator delete(__p);
}

void md::HardwareFigDecoder::discardCaches(std::mutex *this)
{
  std::mutex::lock(this);
  MEMORY[0x1A6237E70]();
  uint64_t v2 = *(void *)&this[1].__m_.__opaque[40];
  uint64_t v3 = *(void *)&this[1].__m_.__opaque[48];
  uint64_t sig = this[2].__m_.__sig;
  if (v2 && *(void *)(v2 + 8)) {
    CMPhotoDecompressionSessionFlushCachedBuffers();
  }
  if (v3 && *(void *)(v3 + 8)) {
    CMPhotoDecompressionSessionFlushCachedBuffers();
  }
  if (sig && *(void *)(sig + 8)) {
    CMPhotoDecompressionSessionFlushCachedBuffers();
  }
  std::mutex::unlock(this);
}

void sub_1A23FB13C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A23FB810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<gm::Box<double,2>,md::MultiRectSetCompare,std::allocator<gm::Box<double,2>>>::__assign_multi<std::__tree_const_iterator<gm::Box<double,2>,std::__tree_node<gm::Box<double,2>,void *> *,long>>(uint64_t **a1, double *a2, double *a3)
{
  unint64_t v4 = a2;
  if (a1[2])
  {
    unint64_t v6 = (uint64_t **)*a1;
    unint64_t v8 = (double **)(a1 + 1);
    unint64_t v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    unint64_t v9 = v6[1] ? (double *)v6[1] : (double *)v6;
    if (v9)
    {
      unint64_t v10 = (double *)*((void *)v9 + 2);
      if (v10)
      {
        unint64_t v11 = *(double **)v10;
        if (*(double **)v10 == v9)
        {
          double *v10 = 0.0;
          while (1)
          {
            uint64_t v32 = (double *)*((void *)v10 + 1);
            if (!v32) {
              break;
            }
            do
            {
              unint64_t v10 = v32;
              uint64_t v32 = *(double **)v32;
            }
            while (v32);
          }
        }
        else
        {
          for (v10[1] = 0.0; v11; unint64_t v11 = (double *)*((void *)v10 + 1))
          {
            do
            {
              unint64_t v10 = v11;
              unint64_t v11 = *(double **)v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        uint8x8_t v12 = v9;
        unint64_t v13 = a2;
        do
        {
          unint64_t v9 = v10;
          v12[4] = v13[4];
          v12[5] = v13[5];
          v12[6] = v13[6];
          v12[7] = v13[7];
          __int16 v14 = *v8;
          unint64_t v15 = (double **)(a1 + 1);
          uint64_t v16 = (double **)(a1 + 1);
          if (*v8)
          {
            do
            {
              while (1)
              {
                unint64_t v15 = (double **)v14;
                if (!md::MultiRectSetCompare::operator()(v12 + 4, v14 + 4)) {
                  break;
                }
                __int16 v14 = *v15;
                uint64_t v16 = v15;
                if (!*v15) {
                  goto LABEL_20;
                }
              }
              __int16 v14 = v15[1];
            }
            while (v14);
            uint64_t v16 = v15 + 1;
          }
LABEL_20:
          double *v12 = 0.0;
          v12[1] = 0.0;
          *((void *)v12 + 2) = v15;
          void *v16 = v12;
          __int16 v17 = (uint64_t *)**a1;
          if (v17)
          {
            *a1 = v17;
            uint8x8_t v12 = *v16;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v9)
          {
            unint64_t v10 = (double *)*((void *)v9 + 2);
            if (v10)
            {
              BOOL v20 = *(double **)v10;
              if (*(double **)v10 == v9)
              {
                double *v10 = 0.0;
                while (1)
                {
                  unint64_t v21 = (double *)*((void *)v10 + 1);
                  if (!v21) {
                    break;
                  }
                  do
                  {
                    unint64_t v10 = v21;
                    unint64_t v21 = *(double **)v21;
                  }
                  while (v21);
                }
              }
              else
              {
                for (v10[1] = 0.0; v20; BOOL v20 = (double *)*((void *)v10 + 1))
                {
                  do
                  {
                    unint64_t v10 = v20;
                    BOOL v20 = *(double **)v20;
                  }
                  while (v20);
                }
              }
            }
          }
          else
          {
            unint64_t v10 = 0;
          }
          float v18 = (double *)*((void *)v13 + 1);
          if (v18)
          {
            do
            {
              unint64_t v4 = v18;
              float v18 = *(double **)v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              unint64_t v4 = (double *)*((void *)v13 + 2);
              BOOL v19 = *(void *)v4 == (void)v13;
              unint64_t v13 = v4;
            }
            while (!v19);
          }
          if (!v9) {
            break;
          }
          uint8x8_t v12 = v9;
          unint64_t v13 = v4;
        }
        while (v4 != a3);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
      if (v10)
      {
        for (uint64_t i = (double *)*((void *)v10 + 2); i; uint64_t i = (double *)*((void *)i + 2))
          unint64_t v10 = i;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    unint64_t v23 = (void **)(a1 + 1);
    do
    {
      int8x8_t v24 = operator new(0x40uLL);
      long long v25 = *((_OWORD *)v4 + 3);
      *((_OWORD *)v24 + 2) = *((_OWORD *)v4 + 2);
      *((_OWORD *)v24 + 3) = v25;
      uint64_t v26 = *v23;
      uint64_t v27 = (void **)(a1 + 1);
      uint64_t v28 = (void **)(a1 + 1);
      if (*v23)
      {
        do
        {
          while (1)
          {
            uint64_t v27 = (void **)v26;
            if (!md::MultiRectSetCompare::operator()((double *)v24 + 4, (double *)v26 + 4)) {
              break;
            }
            uint64_t v26 = *v27;
            uint64_t v28 = v27;
            if (!*v27) {
              goto LABEL_56;
            }
          }
          uint64_t v26 = v27[1];
        }
        while (v26);
        uint64_t v28 = v27 + 1;
      }
LABEL_56:
      *(void *)int8x8_t v24 = 0;
      *((void *)v24 + 1) = 0;
      *((void *)v24 + 2) = v27;
      *uint64_t v28 = v24;
      size_t v29 = (uint64_t *)**a1;
      if (v29)
      {
        *a1 = v29;
        int8x8_t v24 = *v28;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      size_t v30 = (double *)*((void *)v4 + 1);
      if (v30)
      {
        do
        {
          size_t v31 = v30;
          size_t v30 = *(double **)v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          size_t v31 = (double *)*((void *)v4 + 2);
          BOOL v19 = *(void *)v31 == (void)v4;
          unint64_t v4 = v31;
        }
        while (!v19);
      }
      unint64_t v4 = v31;
    }
    while (v31 != a3);
  }
}

void sub_1A23FBDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23FC1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, gdc::DebugTreeNode *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
}

void sub_1A23FC278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23FD294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59)
{
  if (v59) {
    operator delete(v59);
  }

  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1A23FD5E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23FD838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A23FD968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A23FDC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23FDDF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23FDEB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23FDF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A23FE098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23FE118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A23FE1A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23FE240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  unint64_t v10 = v9;

  a9.super_class = (Class)VKPolylineOverlay;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A23FE39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23FE444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _unsnappedPaths(const float *a1, unsigned int a2, void *a3, void *a4, uint64_t a5)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  unint64_t v11 = v10;
  uint64_t v12 = 2 * a2;
  if (a2 >= 0x401)
  {
    unint64_t v13 = (float *)malloc_type_malloc(8 * a2, 0x100004000313F17uLL);
  }
  else
  {
    MEMORY[0x1F4188790](v10);
    unint64_t v13 = (float *)((char *)v29 - ((v12 * 4 + 15) & 0xFFFFFFFF0));
    bzero(v13, 8 * a2);
    if (!a2) {
      goto LABEL_18;
    }
    if (a2 <= 8) {
      goto LABEL_15;
    }
  }
  if (v13 >= &a1[3 * a2 - 1] || &v13[v12] <= a1)
  {
    uint64_t v15 = a2 & 7;
    if (!v15) {
      uint64_t v15 = 8;
    }
    uint64_t v16 = a2 - v15;
    __int16 v17 = v13 + 8;
    float v18 = a1;
    uint64_t v19 = v16;
    do
    {
      BOOL v20 = v18;
      float32x4x3_t v31 = vld3q_f32(v20);
      v20 += 12;
      float32x4x3_t v32 = vld3q_f32(v20);
      unint64_t v21 = v17 - 8;
      vst2q_f32(v21, *(float32x4x2_t *)v31.val[0].f32);
      vst2q_f32(v17, *(float32x4x2_t *)v32.val[0].f32);
      v17 += 16;
      v18 += 24;
      v19 -= 8;
    }
    while (v19);
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v16 = 0;
LABEL_16:
  unint64_t v22 = &a1[3 * v16];
  do
  {
    uint64_t v23 = *(void *)v22;
    v22 += 3;
    *(void *)&v13[2 * v16++] = v23;
  }
  while (a2 != v16);
LABEL_18:
  int8x8_t v24 = [VKTransitPolylinePath alloc];
  unsigned int v25 = [v11 startPointIndex];
  uint64_t v26 = -[VKTransitPolylinePath initWithOverlay:section:points:pointCount:reversePoints:transform:routeStartIndex:routeEndIndex:lineID:](v24, "initWithOverlay:section:points:pointCount:reversePoints:transform:routeStartIndex:routeEndIndex:lineID:", v9, v11, v13, a2, 0, 0, __PAIR64__([v11 endPointIndex], v25), a5);
  uint64_t v27 = [MEMORY[0x1E4F1C978] arrayWithObject:v26];
  if (a2 >= 0x401) {
    free(v13);
  }

  return v27;
}

void sub_1A23FE670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A23FF72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1A2400390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (v28) {
    operator delete(v28);
  }
  std::vector<std::unique_ptr<PathInfo>>::~vector[abi:nn180100](&a28);

  _Unwind_Resume(a1);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **,false>(unint64_t result, double **a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  id v10 = a2 - 1;
  unint64_t v11 = (double **)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    unint64_t v13 = a2 - v11;
    if (v5 || !v4) {
      break;
    }
    if (v12 <= 191)
    {
      v163 = v11 + 1;
      BOOL v165 = v11 == a2 || v163 == a2;
      if (a4)
      {
        if (!v165)
        {
          uint64_t v166 = 8;
          v167 = v11;
          do
          {
            v170 = *v167;
            v169 = v167[1];
            v167 = v163;
            double v171 = *v169;
            BOOL v172 = v169 < v170;
            if (*v169 != *v170) {
              BOOL v172 = v171 < *v170;
            }
            if (v172)
            {
              uint64_t v173 = v166;
              do
              {
                *(double **)((char *)v11 + v173) = v170;
                uint64_t v174 = v173 - 8;
                if (v173 == 8)
                {
                  v168 = v11;
                  goto LABEL_198;
                }
                v170 = *(double **)((char *)v11 + v173 - 16);
                BOOL v175 = v171 < *v170;
                if (v171 == *v170) {
                  BOOL v175 = v169 < v170;
                }
                v173 -= 8;
              }
              while (v175);
              v168 = (double **)((char *)v11 + v174);
LABEL_198:
              *v168 = v169;
            }
            v163 = v167 + 1;
            v166 += 8;
          }
          while (v167 + 1 != a2);
        }
      }
      else if (!v165)
      {
        do
        {
          v196 = *(double **)v9;
          v195 = *(double **)(v9 + 8);
          unint64_t v9 = (unint64_t)v163;
          double v197 = *v195;
          BOOL v198 = v195 < v196;
          if (*v195 != *v196) {
            BOOL v198 = v197 < *v196;
          }
          if (v198)
          {
            v199 = (void *)v9;
            do
            {
              void *v199 = v196;
              v196 = (double *)*(v199 - 2);
              BOOL v200 = v195 < v196;
              if (v197 != *v196) {
                BOOL v200 = v197 < *v196;
              }
              --v199;
            }
            while (v200);
            void *v199 = v195;
          }
          v163 = (double **)(v9 + 8);
        }
        while ((double **)(v9 + 8) != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v11 != a2)
      {
        int64_t v176 = (v13 - 2) >> 1;
        int64_t v177 = v176;
        do
        {
          int64_t v178 = v177;
          if (v176 >= v177)
          {
            uint64_t v179 = (2 * v177) | 1;
            v180 = &v11[v179];
            v181 = *v180;
            if (2 * v178 + 2 < (uint64_t)v13)
            {
              v182 = v180[1];
              double v184 = *v182;
              BOOL v183 = v181 < v182;
              if (*v181 != *v182) {
                BOOL v183 = *v181 < v184;
              }
              if (v183) {
                v181 = v180[1];
              }
              else {
                double v184 = *v181;
              }
              if (v183)
              {
                ++v180;
                uint64_t v179 = 2 * v178 + 2;
              }
            }
            else
            {
              double v184 = *v181;
            }
            v185 = &v11[v178];
            v186 = *v185;
            double v187 = **v185;
            BOOL v188 = v181 < *v185;
            uint64_t result = v184 < v187;
            if (v184 != v187) {
              BOOL v188 = v184 < v187;
            }
            if (!v188)
            {
              do
              {
                v192 = v180;
                *v185 = v181;
                if (v176 < v179) {
                  break;
                }
                uint64_t v193 = (2 * v179) | 1;
                v180 = &v11[v193];
                uint64_t v179 = 2 * v179 + 2;
                v181 = *v180;
                if (v179 < (uint64_t)v13)
                {
                  v189 = v180[1];
                  double v190 = *v181;
                  BOOL v191 = v181 < v189;
                  if (*v181 != *v189) {
                    BOOL v191 = v190 < *v189;
                  }
                  if (v191)
                  {
                    double v190 = *v189;
                    v181 = v180[1];
                    ++v180;
                  }
                  else
                  {
                    uint64_t v179 = v193;
                  }
                }
                else
                {
                  double v190 = *v181;
                  uint64_t v179 = v193;
                }
                uint64_t result = v190 == v187 ? v181 < v186 : v190 < v187;
                v185 = v192;
              }
              while (result != 1);
              *v192 = v186;
            }
          }
          int64_t v177 = v178 - 1;
        }
        while (v178);
        uint64_t v201 = (unint64_t)v12 >> 3;
        do
        {
          uint64_t v203 = 0;
          v204 = *v11;
          v205 = v11;
          do
          {
            v206 = &v205[v203];
            v209 = v206[1];
            v207 = v206 + 1;
            v208 = v209;
            uint64_t v210 = (2 * v203) | 1;
            uint64_t v211 = 2 * v203 + 2;
            if (v211 < v201)
            {
              v212 = v207[1];
              uint64_t result = *v208 == *v212 ? v208 < v212 : *v208 < *v212;
              if (result)
              {
                v208 = v207[1];
                ++v207;
                uint64_t v210 = v211;
              }
            }
            *v205 = v208;
            v205 = v207;
            uint64_t v203 = v210;
          }
          while (v210 <= (uint64_t)((unint64_t)(v201 - 2) >> 1));
          if (v207 == --a2)
          {
            *v207 = v204;
          }
          else
          {
            *v207 = *a2;
            *a2 = v204;
            uint64_t v213 = (char *)v207 - (char *)v11 + 8;
            if (v213 >= 9)
            {
              unint64_t v214 = (((unint64_t)v213 >> 3) - 2) >> 1;
              v215 = &v11[v214];
              v216 = *v215;
              unint64_t v217 = (unint64_t)*v207;
              double v218 = **v215;
              double v219 = **v207;
              BOOL v220 = *v215 < *v207;
              if (v218 != v219) {
                BOOL v220 = v218 < v219;
              }
              if (v220)
              {
                do
                {
                  v221 = v215;
                  *v207 = v216;
                  if (!v214) {
                    break;
                  }
                  unint64_t v214 = (v214 - 1) >> 1;
                  v215 = &v11[v214];
                  v216 = *v215;
                  double v222 = **v215;
                  BOOL v223 = v222 < v219;
                  if (v222 == v219) {
                    BOOL v223 = (unint64_t)*v215 < v217;
                  }
                  v207 = v221;
                }
                while (v223);
                *v221 = (double *)v217;
              }
            }
          }
        }
        while (v201-- > 2);
      }
      return result;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = &v11[v13 >> 1];
    uint64_t v16 = *v10;
    double v17 = **v10;
    if ((unint64_t)v12 >= 0x401)
    {
      float v18 = *v15;
      uint64_t v19 = *v11;
      double v20 = **v15;
      double v21 = **v11;
      BOOL v22 = v20 < v21;
      if (v20 == v21) {
        BOOL v22 = *v15 < *v11;
      }
      BOOL v23 = v16 < v18;
      if (v17 != v20) {
        BOOL v23 = v17 < v20;
      }
      if (v22)
      {
        if (v23)
        {
          void *v11 = v16;
          goto LABEL_36;
        }
        void *v11 = v18;
        void *v15 = v19;
        double v38 = **v10;
        BOOL v39 = *v10 < v19;
        if (v38 != v21) {
          BOOL v39 = v38 < v21;
        }
        if (v39)
        {
          void *v15 = *v10;
LABEL_36:
          void *v10 = v19;
        }
      }
      else if (v23)
      {
        void *v15 = v16;
        void *v10 = v18;
        size_t v30 = *v11;
        double v31 = **v15;
        double v32 = **v11;
        BOOL v33 = *v15 < *v11;
        if (v31 != v32) {
          BOOL v33 = v31 < v32;
        }
        if (v33)
        {
          void *v11 = *v15;
          void *v15 = v30;
        }
      }
      size_t v40 = &v11[v14];
      unint64_t v43 = *(v40 - 1);
      int8x8_t v41 = v40 - 1;
      unint64_t v42 = v43;
      uint64_t v44 = v11[1];
      double v45 = *v43;
      double v46 = *v44;
      BOOL v47 = v43 < v44;
      if (*v43 == *v44) {
        BOOL v48 = v47;
      }
      else {
        BOOL v48 = v45 < v46;
      }
      float v49 = *(a2 - 2);
      BOOL v50 = v49 < v42;
      if (*v49 != v45) {
        BOOL v50 = *v49 < v45;
      }
      if (v48)
      {
        if (v50)
        {
          v11[1] = v49;
          goto LABEL_59;
        }
        v11[1] = v42;
        *int8x8_t v41 = v44;
        __int16 v56 = *(a2 - 2);
        BOOL v57 = v56 < v44;
        if (*v56 != v46) {
          BOOL v57 = *v56 < v46;
        }
        if (v57)
        {
          *int8x8_t v41 = v56;
LABEL_59:
          *(a2 - 2) = v44;
        }
      }
      else if (v50)
      {
        *int8x8_t v41 = v49;
        *(a2 - 2) = v42;
        uint64_t v51 = v11[1];
        double v52 = **v41;
        BOOL v53 = *v41 < v51;
        if (v52 != *v51) {
          BOOL v53 = v52 < *v51;
        }
        if (v53)
        {
          v11[1] = *v41;
          *int8x8_t v41 = v51;
        }
      }
      uint64_t v58 = &v11[v14];
      int v61 = v58[1];
      uint64_t v59 = v58 + 1;
      float v60 = v61;
      float v62 = v11[2];
      double v63 = *v61;
      double v64 = *v62;
      BOOL v65 = v61 < v62;
      BOOL v66 = *v61 < *v62;
      if (*v61 == *v62) {
        BOOL v67 = v65;
      }
      else {
        BOOL v67 = v66;
      }
      int v68 = *(a2 - 3);
      BOOL v69 = v68 < v60;
      if (*v68 != v63) {
        BOOL v69 = *v68 < v63;
      }
      if (v67)
      {
        if (v69)
        {
          void v11[2] = v68;
          goto LABEL_77;
        }
        void v11[2] = v60;
        *uint64_t v59 = v62;
        uint64_t v73 = *(a2 - 3);
        BOOL v74 = v73 < v62;
        if (*v73 != v64) {
          BOOL v74 = *v73 < v64;
        }
        if (v74)
        {
          *uint64_t v59 = v73;
LABEL_77:
          *(a2 - 3) = v62;
        }
      }
      else if (v69)
      {
        *uint64_t v59 = v68;
        *(a2 - 3) = v60;
        uint64_t v70 = v11[2];
        double v71 = **v59;
        BOOL v72 = *v59 < v70;
        if (v71 != *v70) {
          BOOL v72 = v71 < *v70;
        }
        if (v72)
        {
          void v11[2] = *v59;
          *uint64_t v59 = v70;
        }
      }
      int v75 = *v15;
      float v76 = *v41;
      double v77 = **v15;
      double v78 = **v41;
      if (v77 == v78) {
        BOOL v79 = *v15 < *v41;
      }
      else {
        BOOL v79 = v77 < v78;
      }
      uint64_t v80 = *v59;
      double v81 = **v59;
      BOOL v82 = *v59 < v75;
      if (v81 != v77) {
        BOOL v82 = v81 < v77;
      }
      if (v79)
      {
        if (!v82)
        {
          *int8x8_t v41 = v75;
          void *v15 = v76;
          BOOL v83 = v81 == v78 ? v80 < v76 : v81 < v78;
          int8x8_t v41 = &v11[v13 >> 1];
          int v75 = v80;
          if (!v83)
          {
            int v75 = v76;
LABEL_96:
            char v85 = *v11;
            void *v11 = v75;
            void *v15 = v85;
            goto LABEL_97;
          }
        }
      }
      else
      {
        if (!v82) {
          goto LABEL_96;
        }
        void *v15 = v80;
        *uint64_t v59 = v75;
        if (v81 == v78) {
          BOOL v84 = v80 < v76;
        }
        else {
          BOOL v84 = v81 < v78;
        }
        uint64_t v59 = &v11[v13 >> 1];
        int v75 = v76;
        if (!v84)
        {
          int v75 = v80;
          goto LABEL_96;
        }
      }
      *int8x8_t v41 = v80;
      *uint64_t v59 = v76;
      goto LABEL_96;
    }
    int8x8_t v24 = *v11;
    unsigned int v25 = *v15;
    double v26 = **v11;
    double v27 = **v15;
    BOOL v28 = v26 < v27;
    if (v26 == v27) {
      BOOL v28 = *v11 < *v15;
    }
    BOOL v29 = v16 < v24;
    if (v17 != v26) {
      BOOL v29 = v17 < v26;
    }
    if (!v28)
    {
      if (v29)
      {
        void *v11 = v16;
        void *v10 = v24;
        uint64_t v34 = *v15;
        double v35 = **v11;
        double v36 = **v15;
        BOOL v37 = *v11 < *v15;
        if (v35 != v36) {
          BOOL v37 = v35 < v36;
        }
        if (v37)
        {
          void *v15 = *v11;
          void *v11 = v34;
        }
      }
      goto LABEL_97;
    }
    if (v29)
    {
      void *v15 = v16;
    }
    else
    {
      void *v15 = v24;
      void *v11 = v25;
      double v54 = **v10;
      BOOL v55 = *v10 < v25;
      if (v54 != v27) {
        BOOL v55 = v54 < v27;
      }
      if (!v55) {
        goto LABEL_97;
      }
      void *v11 = *v10;
    }
    void *v10 = v25;
LABEL_97:
    --a3;
    int v86 = *v11;
    double v87 = **v11;
    double v88 = v11;
    if (a4) {
      goto LABEL_103;
    }
    size_t v89 = *(v11 - 1);
    double v90 = *v89;
    BOOL v91 = v89 < v86;
    BOOL v92 = v90 < v87;
    if (v90 == v87) {
      BOOL v92 = v91;
    }
    double v88 = v11;
    if (v92)
    {
LABEL_103:
      do
      {
        uint64_t v93 = v88;
        uint64_t v95 = v88[1];
        ++v88;
        double v94 = v95;
        double v96 = *v95;
        BOOL v97 = v95 < v86;
        if (*v95 != v87) {
          BOOL v97 = v96 < v87;
        }
      }
      while (v97);
      double v98 = a2;
      if (v93 == v11)
      {
        double v98 = a2;
        do
        {
          if (v88 >= v98) {
            break;
          }
          int v102 = *--v98;
          double v103 = *v102;
          BOOL v104 = v102 < v86;
          if (*v102 != v87) {
            BOOL v104 = v103 < v87;
          }
        }
        while (!v104);
      }
      else
      {
        do
        {
          std::string::size_type v99 = *--v98;
          double v100 = *v99;
          BOOL v101 = v99 < v86;
          if (*v99 != v87) {
            BOOL v101 = v100 < v87;
          }
        }
        while (!v101);
      }
      if (v88 < v98)
      {
        long long v105 = *v98;
        v106 = v88;
        v107 = v98;
        do
        {
          std::__shared_weak_count *v106 = v105;
          NSObject *v107 = v94;
          do
          {
            uint64_t v93 = v106;
            v108 = v106[1];
            ++v106;
            double v94 = v108;
            double v109 = *v108;
            BOOL v110 = v108 < v86;
            if (*v108 != v87) {
              BOOL v110 = v109 < v87;
            }
          }
          while (v110);
          do
          {
            v111 = *--v107;
            long long v105 = v111;
            double v112 = *v111;
            BOOL v113 = v111 < v86;
            if (*v111 != v87) {
              BOOL v113 = v112 < v87;
            }
          }
          while (!v113);
        }
        while (v106 < v107);
      }
      if (v93 != v11) {
        void *v11 = *v93;
      }
      *uint64_t v93 = v86;
      if (v88 < v98) {
        goto LABEL_129;
      }
      BOOL v114 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(v11, v93);
      unint64_t v11 = v93 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(v93 + 1, a2);
      if (result)
      {
        a2 = v93;
        if (v114) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v114)
      {
LABEL_129:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **,false>(v9, v93, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v93 + 1;
      }
    }
    else
    {
      double v115 = **v10;
      BOOL v116 = v86 < *v10;
      if (v87 != v115) {
        BOOL v116 = v87 < v115;
      }
      if (v116)
      {
        do
        {
          v117 = v11[1];
          ++v11;
          double v118 = *v117;
          BOOL v119 = v86 < v117;
          if (v87 != *v117) {
            BOOL v119 = v87 < v118;
          }
        }
        while (!v119);
      }
      else
      {
        v120 = v11 + 1;
        do
        {
          unint64_t v11 = v120;
          if (v120 >= a2) {
            break;
          }
          ++v120;
          double v121 = **v11;
          BOOL v122 = v86 < *v11;
          if (v87 != v121) {
            BOOL v122 = v87 < v121;
          }
        }
        while (!v122);
      }
      v123 = a2;
      if (v11 < a2)
      {
        v123 = a2;
        do
        {
          v124 = *--v123;
          double v125 = *v124;
          BOOL v126 = v86 < v124;
          if (v87 != *v124) {
            BOOL v126 = v87 < v125;
          }
        }
        while (v126);
      }
      if (v11 < v123)
      {
        v127 = *v11;
        v128 = *v123;
        do
        {
          void *v11 = v128;
          *v123 = v127;
          do
          {
            uint64_t v129 = v11[1];
            ++v11;
            v127 = v129;
            double v130 = *v129;
            BOOL v131 = v86 < v129;
            if (v87 != *v129) {
              BOOL v131 = v87 < v130;
            }
          }
          while (!v131);
          do
          {
            uint64_t v132 = *--v123;
            v128 = v132;
            double v133 = *v132;
            BOOL v134 = v86 < v132;
            if (v87 != *v132) {
              BOOL v134 = v87 < v133;
            }
          }
          while (v134);
        }
        while (v11 < v123);
      }
      v135 = v11 - 1;
      BOOL v4 = (unint64_t)(v11 - 1) >= v9;
      BOOL v5 = v11 - 1 == (double **)v9;
      if (v11 - 1 != (double **)v9) {
        *(void *)unint64_t v9 = *v135;
      }
      a4 = 0;
      std::__shared_weak_count *v135 = v86;
    }
  }
  switch(v13)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v136 = *v11;
      double v137 = **v10;
      double v138 = **v11;
      BOOL v139 = *v10 < *v11;
      if (v137 != v138) {
        BOOL v139 = v137 < v138;
      }
      if (v139)
      {
        void *v11 = *v10;
        void *v10 = v136;
      }
      return result;
    case 3uLL:
      uint64_t v140 = *v11;
      char v141 = v11[1];
      double v142 = *v141;
      double v143 = **v11;
      if (*v141 == v143) {
        BOOL v144 = v141 < *v11;
      }
      else {
        BOOL v144 = *v141 < v143;
      }
      v145 = *v10;
      double v146 = **v10;
      BOOL v147 = *v10 < v141;
      if (v146 != v142) {
        BOOL v147 = v146 < v142;
      }
      if (v144)
      {
        if (v147)
        {
          void *v11 = v145;
        }
        else
        {
          void *v11 = v141;
          v11[1] = v140;
          double v224 = **v10;
          BOOL v225 = *v10 < v140;
          if (v224 != v143) {
            BOOL v225 = v224 < v143;
          }
          if (!v225) {
            return result;
          }
          v11[1] = *v10;
        }
        void *v10 = v140;
        return result;
      }
      if (v147)
      {
        v11[1] = v145;
        void *v10 = v141;
        v162 = *v11;
        v154 = v11[1];
        double v156 = *v154;
LABEL_242:
        BOOL v194 = v154 < v162;
        if (v156 != *v162) {
          BOOL v194 = v156 < *v162;
        }
        if (v194)
        {
          void *v11 = v154;
          v11[1] = v162;
        }
      }
      break;
    case 4uLL:
      return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(v11, v11 + 1, v11 + 2, a2 - 1);
    case 5uLL:
      v148 = v11 + 1;
      v149 = v11 + 2;
      v150 = v11 + 3;
      uint64_t result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(v11, v11 + 1, v11 + 2, v11 + 3);
      v151 = v11[3];
      double v152 = **v10;
      BOOL v153 = *v10 < v151;
      if (v152 != *v151) {
        BOOL v153 = v152 < *v151;
      }
      if (!v153) {
        return result;
      }
      *v150 = *v10;
      void *v10 = v151;
      v154 = *v150;
      v155 = *v149;
      double v156 = **v150;
      double v157 = **v149;
      BOOL v158 = *v150 < *v149;
      if (v156 != v157) {
        BOOL v158 = v156 < v157;
      }
      if (!v158) {
        return result;
      }
      *v149 = v154;
      *v150 = v155;
      v159 = *v148;
      double v160 = **v148;
      BOOL v161 = v154 < *v148;
      if (v156 != v160) {
        BOOL v161 = v156 < v160;
      }
      if (!v161) {
        return result;
      }
      v11[1] = v154;
      void v11[2] = v159;
      v162 = *v11;
      goto LABEL_242;
    default:
      JUMPOUT(0);
  }
  return result;
}

void *std::vector<std::unique_ptr<PathInfo>>::~vector[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    BOOL v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          MEMORY[0x1A6239270](v5, 0x1020C4005C7B374);
        }
      }
      while (v3 != v2);
      BOOL v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double **std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(double **result, double **a2, double **a3, double **a4)
{
  BOOL v4 = *a2;
  uint64_t v5 = *result;
  double v6 = **a2;
  double v7 = **result;
  if (v6 == v7) {
    BOOL v8 = *a2 < *result;
  }
  else {
    BOOL v8 = v6 < v7;
  }
  unint64_t v9 = *a3;
  double v10 = **a3;
  BOOL v11 = *a3 < v4;
  if (v10 != v6) {
    BOOL v11 = v10 < v6;
  }
  if (v8)
  {
    if (v11)
    {
      *uint64_t result = v9;
LABEL_18:
      *a3 = v5;
      BOOL v4 = v5;
      goto LABEL_20;
    }
    *uint64_t result = v4;
    *a2 = v5;
    BOOL v4 = *a3;
    double v16 = **a3;
    BOOL v17 = *a3 < v5;
    if (v16 != v7) {
      BOOL v17 = v16 < v7;
    }
    if (v17)
    {
      *a2 = v4;
      goto LABEL_18;
    }
  }
  else if (v11)
  {
    *a2 = v9;
    *a3 = v4;
    uint64_t v12 = *result;
    double v13 = **a2;
    double v14 = **result;
    BOOL v15 = *a2 < *result;
    if (v13 != v14) {
      BOOL v15 = v13 < v14;
    }
    if (v15)
    {
      *uint64_t result = *a2;
      *a2 = v12;
      BOOL v4 = *a3;
    }
  }
  else
  {
    BOOL v4 = *a3;
  }
LABEL_20:
  double v18 = **a4;
  BOOL v19 = *a4 < v4;
  if (v18 != *v4) {
    BOOL v19 = v18 < *v4;
  }
  if (v19)
  {
    *a3 = *a4;
    *a4 = v4;
    double v20 = *a2;
    double v21 = **a3;
    double v22 = **a2;
    BOOL v23 = *a3 < *a2;
    if (v21 != v22) {
      BOOL v23 = v21 < v22;
    }
    if (v23)
    {
      *a2 = *a3;
      *a3 = v20;
      int8x8_t v24 = *result;
      double v25 = **a2;
      double v26 = **result;
      BOOL v27 = *a2 < *result;
      if (v25 != v26) {
        BOOL v27 = v25 < v26;
      }
      if (v27)
      {
        *uint64_t result = *a2;
        *a2 = v24;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(double **a1, double **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(a2 - 1);
      double v7 = *a1;
      double v8 = **a1;
      BOOL v9 = v6 < *a1;
      if (*v6 != v8) {
        BOOL v9 = *v6 < v8;
      }
      if (v9)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      double v10 = *a1;
      BOOL v11 = a1[1];
      double v12 = *v11;
      double v13 = **a1;
      if (*v11 == v13) {
        BOOL v14 = v11 < *a1;
      }
      else {
        BOOL v14 = *v11 < v13;
      }
      BOOL v15 = *(a2 - 1);
      BOOL v16 = v15 < v11;
      if (*v15 != v12) {
        BOOL v16 = *v15 < v12;
      }
      if (v14)
      {
        if (v16)
        {
          *a1 = v15;
          *(a2 - 1) = v10;
        }
        else
        {
          *a1 = v11;
          a1[1] = v10;
          float v62 = *(a2 - 1);
          BOOL v63 = v62 < v10;
          if (*v62 != v13) {
            BOOL v63 = *v62 < v13;
          }
          if (v63)
          {
            a1[1] = v62;
            *(a2 - 1) = v10;
          }
        }
      }
      else if (v16)
      {
        a1[1] = v15;
        *(a2 - 1) = v11;
        BOOL v47 = *a1;
        double v46 = a1[1];
        double v48 = **a1;
        BOOL v49 = v46 < *a1;
        if (*v46 != v48) {
          BOOL v49 = *v46 < v48;
        }
        if (v49)
        {
          *a1 = v46;
          a1[1] = v47;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      BOOL v29 = a1 + 1;
      size_t v30 = a1 + 2;
      double v31 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,PointInfoSorterByX &,PointInfo **>(a1, a1 + 1, a1 + 2, a1 + 3);
      double v32 = *(a2 - 1);
      BOOL v33 = a1[3];
      BOOL v34 = v32 < v33;
      if (*v32 != *v33) {
        BOOL v34 = *v32 < *v33;
      }
      if (v34)
      {
        *double v31 = v32;
        *(a2 - 1) = v33;
        double v35 = *v31;
        double v36 = *v30;
        double v37 = **v31;
        double v38 = **v30;
        BOOL v39 = *v31 < *v30;
        if (v37 != v38) {
          BOOL v39 = v37 < v38;
        }
        if (v39)
        {
          *size_t v30 = v35;
          *double v31 = v36;
          size_t v40 = *v29;
          double v41 = **v29;
          BOOL v42 = v35 < *v29;
          if (v37 != v41) {
            BOOL v42 = v37 < v41;
          }
          if (v42)
          {
            a1[1] = v35;
            a1[2] = v40;
            unint64_t v43 = *a1;
            double v44 = **a1;
            BOOL v45 = v35 < *a1;
            if (v37 != v44) {
              BOOL v45 = v37 < v44;
            }
            if (v45)
            {
              *a1 = v35;
              a1[1] = v43;
            }
          }
        }
      }
      return 1;
    default:
      double v18 = a1 + 2;
      BOOL v17 = a1[2];
      BOOL v19 = a1[1];
      double v20 = *a1;
      double v21 = *v19;
      double v22 = **a1;
      BOOL v23 = v19 < *a1;
      if (*v19 != v22) {
        BOOL v23 = *v19 < v22;
      }
      double v24 = *v17;
      BOOL v25 = *v17 < v21;
      if (*v17 == v21) {
        BOOL v25 = v17 < v19;
      }
      if (v23)
      {
        double v26 = a1;
        BOOL v27 = a1 + 2;
        if (!v25)
        {
          *a1 = v19;
          a1[1] = v20;
          BOOL v28 = v17 < v20;
          if (v24 != v22) {
            BOOL v28 = v24 < v22;
          }
          double v26 = a1 + 1;
          BOOL v27 = a1 + 2;
          if (!v28) {
            goto LABEL_48;
          }
        }
LABEL_47:
        *double v26 = v17;
        *BOOL v27 = v20;
        goto LABEL_48;
      }
      if (v25)
      {
        a1[1] = v17;
        double *v18 = v19;
        BOOL v50 = v17 < v20;
        if (v24 != v22) {
          BOOL v50 = v24 < v22;
        }
        double v26 = a1;
        BOOL v27 = a1 + 1;
        if (v50) {
          goto LABEL_47;
        }
      }
LABEL_48:
      uint64_t v51 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v52 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        BOOL v55 = *v51;
        __int16 v56 = *v18;
        double v57 = **v51;
        BOOL v58 = *v51 < v56;
        if (v57 != *v56) {
          BOOL v58 = v57 < *v56;
        }
        if (v58)
        {
          uint64_t v59 = i;
          do
          {
            *(double **)((char *)a1 + v59) = v56;
            uint64_t v60 = v59 - 8;
            if (v59 == 8)
            {
              double v54 = a1;
              goto LABEL_51;
            }
            __int16 v56 = *(double **)((char *)a1 + v59 - 16);
            BOOL v61 = v57 < *v56;
            if (v57 == *v56) {
              BOOL v61 = v55 < v56;
            }
            v59 -= 8;
          }
          while (v61);
          double v54 = (double **)((char *)a1 + v60);
LABEL_51:
          *double v54 = v55;
          if (++v52 == 8) {
            break;
          }
        }
        double v18 = v51++;
        if (v51 == a2) {
          return 1;
        }
      }
      return v51 + 1 == a2;
  }
}

void sub_1A2401874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2401F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(float *a1, int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    BOOL v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      double v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            double v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          double v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  double v13 = operator new(0x18uLL);
  void *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_59;
      }
      unint64_t v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v3 = v6 % v7;
          }
          else {
            unint64_t v3 = v6;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        size_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    double v20 = operator new(8 * prime);
    double v21 = *(void **)a1;
    *(void *)a1 = v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    double v24 = (uint64_t *)(a1 + 4);
    BOOL v23 = (void *)*((void *)a1 + 2);
    if (!v23)
    {
LABEL_58:
      unint64_t v7 = prime;
      goto LABEL_59;
    }
    size_t v25 = v23[1];
    size_t v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v27 = v25 & v26;
      *(void *)(*(void *)a1 + 8 * v27) = v24;
      for (uint64_t i = (void *)*v23; *v23; uint64_t i = (void *)*v23)
      {
        size_t v29 = i[1] & v26;
        if (v29 == v27)
        {
          BOOL v23 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v29))
        {
          *BOOL v23 = *i;
          uint64_t v30 = 8 * v29;
          *uint64_t i = **(void **)(*(void *)a1 + v30);
          **(void **)(*(void *)a1 + v30) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v29) = v23;
          BOOL v23 = i;
          size_t v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime) {
      v25 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v25) = v24;
    BOOL v34 = (void *)*v23;
    if (!*v23) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v25)
      {
        if (!*(void *)(*(void *)a1 + 8 * v36))
        {
          *(void *)(*(void *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        *BOOL v23 = *v34;
        uint64_t v35 = 8 * v36;
        *BOOL v34 = **(void **)(*(void *)a1 + v35);
        **(void **)(*(void *)a1 + v35) = v34;
        BOOL v34 = v23;
      }
      size_t v36 = v25;
LABEL_63:
      BOOL v23 = v34;
      BOOL v34 = (void *)*v34;
      size_t v25 = v36;
      if (!v34) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  double v37 = *(void **)a1;
  double v38 = *(void **)(*(void *)a1 + 8 * v3);
  if (v38)
  {
    void *v13 = *v38;
LABEL_80:
    *double v38 = v13;
    goto LABEL_81;
  }
  void *v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v13;
  v37[v3] = a1 + 4;
  if (*v13)
  {
    unint64_t v39 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7) {
        v39 %= v7;
      }
    }
    else
    {
      v39 &= v7 - 1;
    }
    double v38 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
}

void sub_1A2402450(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::DaVinciAssetResourceFetcher::resourceKey(uint64_t a1, void *a2, uint64_t a3)
{
  return md::DaVinciAssetResourceFetcher::createResourceKey(a2, a3);
}

uint64_t md::DaVinciAssetResourceFetcher::createResourceKey(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = **(void **)(a2 + 8);
  [v3 style];
  LOBYTE(v6) = GEOTileKeyMakeEmpty();
  *(void *)((char *)&v6 + 1) = v4;

  return v6;
}

void sub_1A24025B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::DaVinciAssetResourceFetcher::~DaVinciAssetResourceFetcher(md::DaVinciAssetResourceFetcher *this)
{
  md::IdentifiedGEOResourceFetcher::~IdentifiedGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::DaVinciAssetOcclusionMeshResourceFetcher::resourceKey(uint64_t a1, void *a2, uint64_t a3)
{
  return md::DaVinciAssetResourceFetcher::createResourceKey(a2, a3);
}

void md::DaVinciAssetOcclusionMeshResourceFetcher::~DaVinciAssetOcclusionMeshResourceFetcher(md::DaVinciAssetOcclusionMeshResourceFetcher *this)
{
  md::IdentifiedGEOResourceFetcher::~IdentifiedGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciAssetResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::DaVinciAssetResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5820B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DaVinciAssetResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5820B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void altitude::MapProvider::MapTransfer::jobStep(altitude::MapProvider::MapTransfer *this)
{
  double v103 = 0;
  uint64_t v104 = 0;
  int v102 = &v103;
  uint64_t v1 = (char *)*((void *)this + 27);
  uint64_t v2 = (char *)this + 224;
  if (v1 != (char *)this + 224)
  {
    do
    {
      id v3 = v103;
      uint64_t v4 = &v103;
      if (v102 == &v103) {
        goto LABEL_10;
      }
      uint64_t v5 = v103;
      long long v6 = &v103;
      if (v103)
      {
        do
        {
          uint64_t v4 = (uint64_t **)v5;
          uint64_t v5 = (uint64_t *)v5[1];
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v4 = (uint64_t **)v6[2];
          BOOL v55 = *v4 == (uint64_t *)v6;
          long long v6 = v4;
        }
        while (v55);
      }
      unint64_t v7 = *((void *)v1 + 4);
      if ((unint64_t)v4[4] < v7)
      {
LABEL_10:
        if (v103) {
          uint8x8_t v8 = v4;
        }
        else {
          uint8x8_t v8 = &v103;
        }
        if (v103) {
          BOOL v9 = v4 + 1;
        }
        else {
          BOOL v9 = &v103;
        }
      }
      else
      {
        uint8x8_t v8 = &v103;
        BOOL v9 = &v103;
        if (v103)
        {
          BOOL v9 = &v103;
          while (1)
          {
            while (1)
            {
              uint8x8_t v8 = (uint64_t **)v3;
              unint64_t v11 = v3[4];
              if (v7 >= v11) {
                break;
              }
              id v3 = *v8;
              BOOL v9 = v8;
              if (!*v8) {
                goto LABEL_25;
              }
            }
            if (v11 >= v7) {
              break;
            }
            BOOL v9 = v8 + 1;
            id v3 = v8[1];
            if (!v3) {
              goto LABEL_25;
            }
          }
        }
      }
      if (*v9)
      {
        double v10 = (char *)*((void *)v1 + 1);
        if (v10) {
          goto LABEL_35;
        }
      }
      else
      {
LABEL_25:
        uint64_t v12 = (uint64_t *)operator new(0x48uLL);
        double v13 = v12;
        v12[4] = *((void *)v1 + 4);
        uint64_t v14 = *((void *)v1 + 5);
        v12[5] = v14;
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        }
        v12[6] = 0;
        v12[7] = 0;
        v12[8] = 0;
        uint64_t v15 = *((void *)v1 + 6);
        uint64_t v16 = *((void *)v1 + 7);
        int64_t v17 = v16 - v15;
        if (v16 != v15)
        {
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 3);
          if (v18 > 0xAAAAAAAAAAAAAAALL) {
LABEL_171:
          }
            abort();
          BOOL v19 = (char *)operator new(v17);
          v13[6] = (uint64_t)v19;
          v13[8] = (uint64_t)&v19[24 * v18];
          do
          {
            *(_WORD *)BOOL v19 = *(_WORD *)v15;
            *(void *)(v19 + 4) = *(void *)(v15 + 4);
            v15 += 24;
            v19 += 24;
          }
          while (v15 != v16);
          v13[7] = (uint64_t)v19;
        }
        uint64_t *v13 = 0;
        v13[1] = 0;
        v13[2] = (uint64_t)v8;
        *BOOL v9 = v13;
        if (*v102)
        {
          int v102 = (uint64_t **)*v102;
          double v13 = *v9;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v103, v13);
        ++v104;
        double v10 = (char *)*((void *)v1 + 1);
        if (v10)
        {
          do
          {
LABEL_35:
            double v20 = v10;
            double v10 = *(char **)v10;
          }
          while (v10);
          goto LABEL_3;
        }
      }
      do
      {
        double v20 = (char *)*((void *)v1 + 2);
        BOOL v55 = *(void *)v20 == (void)v1;
        uint64_t v1 = v20;
      }
      while (!v55);
LABEL_3:
      uint64_t v1 = v20;
    }
    while (v20 != v2);
  }
  double v21 = this;
  std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(*((void **)this + 28));
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 27) = v2;
  uint64_t v22 = (uint64_t *)v102;
  if (v102 == &v103) {
    goto LABEL_169;
  }
  do
  {
    uint64_t v24 = v22[4];
    BOOL v23 = (std::__shared_weak_count *)v22[5];
    double v98 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __p = 0;
    double v100 = 0;
    BOOL v101 = 0;
    uint64_t v25 = v22[6];
    uint64_t v26 = v22[7];
    int64_t v27 = v26 - v25;
    if (v26 != v25)
    {
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
      if (v28 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_171;
      }
      size_t v29 = operator new(v27);
      __p = v29;
      BOOL v101 = &v29[12 * v28];
      do
      {
        *size_t v29 = *(_WORD *)v25;
        *(void *)(v29 + 2) = *(void *)(v25 + 4);
        v25 += 24;
        v29 += 12;
      }
      while (v25 != v26);
      double v100 = v29;
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(v24 + 152));
    int v30 = *(_DWORD *)(v24 + 160);
    pthread_mutex_unlock(*(pthread_mutex_t **)(v24 + 152));
    if ((v30 & 2) != 0)
    {
      (*(void (**)(void, altitude::MapProvider::MapTransfer *, void **, uint64_t, void))(**((void **)v21 + 24) + 24))(*((void *)v21 + 24), v21, &__p, v24 + 248, *((unsigned int *)v21 + 52));
      goto LABEL_60;
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(v24 + 152));
    int v31 = *(_DWORD *)(v24 + 160);
    pthread_mutex_unlock(*(pthread_mutex_t **)(v24 + 152));
    if ((v31 & 1) == 0) {
      goto LABEL_60;
    }
    uint64_t v33 = *(void *)(v24 + 304);
    uint8x8_t v32 = *(std::__shared_weak_count **)(v24 + 312);
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v33) {
      goto LABEL_165;
    }
    uint64_t v34 = *(void *)(v33 + 8);
    uint64_t v35 = *(std::__shared_weak_count **)(v33 + 16);
    if (!v35)
    {
      if (!v34) {
        goto LABEL_165;
      }
      BOOL v92 = *(std::__shared_weak_count **)(v33 + 16);
      uint64_t v93 = (uint64_t)v32;
      uint64_t v91 = v33;
      uint64_t v38 = *(void *)(v33 + 8);
      BOOL v90 = 1;
      goto LABEL_76;
    }
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      if (!v34) {
        goto LABEL_165;
      }
LABEL_74:
      uint64_t v38 = *(void *)(v33 + 8);
      unint64_t v39 = *(std::__shared_weak_count **)(v33 + 16);
      BOOL v90 = v39 == 0;
      BOOL v92 = v39;
      uint64_t v93 = (uint64_t)v32;
      uint64_t v91 = v33;
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_76:
      size_t v40 = __p;
      uint64_t v95 = v100;
      if (__p == v100)
      {
LABEL_154:
        int v86 = (uint64_t *)*((void *)v21 + 31);
        if ((unint64_t)v86 >= *((void *)v21 + 32))
        {
          uint8x8_t v32 = (std::__shared_weak_count *)v93;
          size_t v89 = std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__push_back_slow_path<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference const&>((char **)this + 30, v91, v93);
          double v87 = v92;
        }
        else
        {
          uint64_t *v86 = 0;
          v86[1] = 0;
          uint8x8_t v32 = (std::__shared_weak_count *)v93;
          double v87 = v92;
          if (v93)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
            double v88 = (std::__shared_weak_count *)v86[1];
            uint64_t *v86 = v91;
            v86[1] = v93;
            if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          else
          {
            uint64_t *v86 = v91;
            v86[1] = 0;
          }
          size_t v89 = (char *)(v86 + 2);
        }
        *((void *)v21 + 31) = v89;
        if (!v90 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
        goto LABEL_165;
      }
      double v94 = (long long *)(v38 + 24);
LABEL_83:
      unsigned int v42 = *((unsigned __int8 *)v40 + 1);
      int v43 = v40[1];
      int v44 = v40[2];
      unsigned __int8 v45 = *(unsigned char *)v40;
      uint64_t v46 = *((void *)v21 + 23);
      int v47 = *(_DWORD *)(*((void *)v21 + 24) + 24);
      pthread_mutex_lock(*(pthread_mutex_t **)(v46 + 64));
      BOOL v49 = (unsigned __int8 **)(v46 + 48);
      double v48 = *(unsigned __int8 **)(v46 + 48);
      BOOL v50 = (unsigned __int8 **)(v46 + 48);
      uint64_t v51 = (unsigned __int8 *)(v46 + 48);
      if (!v48)
      {
LABEL_126:
        BOOL v97 = v40;
        uint64_t v69 = v46;
        uint64_t v70 = v51;
        uint64_t v51 = (unsigned __int8 *)operator new(0x58uLL);
        v51[32] = v45;
        v51[33] = v42;
        *((_DWORD *)v51 + 9) = v43;
        *((_DWORD *)v51 + 10) = v44;
        *((_DWORD *)v51 + 14) = v47;
        *((_WORD *)v51 + 32) = 255;
        *((_DWORD *)v51 + 17) = 0;
        *((_DWORD *)v51 + 18) = 0;
        *(void *)uint64_t v51 = 0;
        *((void *)v51 + 1) = 0;
        *((void *)v51 + 2) = v70;
        uint64_t v46 = v69;
        *BOOL v50 = v51;
        uint64_t v71 = **(void **)(v69 + 40);
        BOOL v72 = v51;
        if (v71)
        {
          *(void *)(v69 + 40) = v71;
          BOOL v72 = *v50;
        }
        uint64_t v73 = *v49;
        BOOL v55 = v72 == *v49;
        v72[24] = v55;
        size_t v40 = v97;
        if (!v55)
        {
          do
          {
            uint64_t v74 = *((void *)v72 + 2);
            if (*(unsigned char *)(v74 + 24)) {
              break;
            }
            int v75 = *(unsigned __int8 **)(v74 + 16);
            uint64_t v76 = *(void *)v75;
            if (*(void *)v75 == v74)
            {
              uint64_t v79 = *((void *)v75 + 1);
              if (!v79 || (v80 = *(unsigned __int8 *)(v79 + 24), double v77 = (unsigned char *)(v79 + 24), v80))
              {
                if (*(unsigned __int8 **)v74 == v72)
                {
                  double v81 = (uint64_t *)*((void *)v72 + 2);
                }
                else
                {
                  double v81 = *(uint64_t **)(v74 + 8);
                  uint64_t v82 = *v81;
                  *(void *)(v74 + 8) = *v81;
                  if (v82)
                  {
                    *(void *)(v82 + 16) = v74;
                    int v75 = *(unsigned __int8 **)(v74 + 16);
                  }
                  v81[2] = (uint64_t)v75;
                  *(void *)(*(void *)(v74 + 16) + 8 * (**(void **)(v74 + 16) != v74)) = v81;
                  *double v81 = v74;
                  *(void *)(v74 + 16) = v81;
                  int v75 = (unsigned __int8 *)v81[2];
                  uint64_t v74 = *(void *)v75;
                }
                *((unsigned char *)v81 + 24) = 1;
                v75[24] = 0;
                uint64_t v85 = *(void *)(v74 + 8);
                *(void *)int v75 = v85;
                if (v85) {
                  *(void *)(v85 + 16) = v75;
                }
                *(void *)(v74 + 16) = *((void *)v75 + 2);
                *(void *)(*((void *)v75 + 2) + 8 * (**((void **)v75 + 2) != (void)v75)) = v74;
                *(void *)(v74 + 8) = v75;
                goto LABEL_79;
              }
            }
            else if (!v76 || (v78 = *(unsigned __int8 *)(v76 + 24), double v77 = (unsigned char *)(v76 + 24), v78))
            {
              if (*(unsigned __int8 **)v74 == v72)
              {
                uint64_t v83 = *((void *)v72 + 1);
                *(void *)uint64_t v74 = v83;
                if (v83)
                {
                  *(void *)(v83 + 16) = v74;
                  int v75 = *(unsigned __int8 **)(v74 + 16);
                }
                *((void *)v72 + 2) = v75;
                *(void *)(*(void *)(v74 + 16) + 8 * (**(void **)(v74 + 16) != v74)) = v72;
                *((void *)v72 + 1) = v74;
                *(void *)(v74 + 16) = v72;
                int v75 = (unsigned __int8 *)*((void *)v72 + 2);
              }
              else
              {
                BOOL v72 = (unsigned __int8 *)*((void *)v72 + 2);
              }
              v72[24] = 1;
              v75[24] = 0;
              uint64_t v74 = *((void *)v75 + 1);
              BOOL v84 = *(unsigned __int8 **)v74;
              *((void *)v75 + 1) = *(void *)v74;
              if (v84) {
                *((void *)v84 + 2) = v75;
              }
              *(void *)(v74 + 16) = *((void *)v75 + 2);
              *(void *)(*((void *)v75 + 2) + 8 * (**((void **)v75 + 2) != (void)v75)) = v74;
              *(void *)uint64_t v74 = v75;
LABEL_79:
              *((void *)v75 + 2) = v74;
              break;
            }
            *(unsigned char *)(v74 + 24) = 1;
            BOOL v72 = v75;
            v75[24] = v75 == v73;
            *double v77 = 1;
          }
          while (v75 != v73);
        }
        ++*(void *)(v46 + 56);
LABEL_81:
        long long v41 = *v94;
        *((void *)v51 + 10) = *((void *)v94 + 2);
        *((_OWORD *)v51 + 4) = v41;
        goto LABEL_82;
      }
      uint64_t v52 = v46 + 48;
      uint64_t v53 = *(void *)(v46 + 48);
      while (1)
      {
        int v57 = *(_DWORD *)(v53 + 56);
        BOOL v58 = v57 < v47;
        if (v57 == v47)
        {
          unsigned int v59 = *(unsigned __int8 *)(v53 + 33);
          if (v59 != v42)
          {
            BOOL v54 = v59 < v42;
            goto LABEL_88;
          }
          int v60 = *(_DWORD *)(v53 + 36);
          BOOL v58 = v60 < v43;
          if (v60 == v43) {
            BOOL v58 = *(_DWORD *)(v53 + 40) < v44;
          }
        }
        BOOL v54 = v58;
LABEL_88:
        BOOL v55 = !v54;
        if (v54) {
          __int16 v56 = (uint64_t *)(v53 + 8);
        }
        else {
          __int16 v56 = (uint64_t *)v53;
        }
        if (v55) {
          uint64_t v52 = v53;
        }
        uint64_t v53 = *v56;
        if (!*v56)
        {
          if ((unsigned __int8 **)v52 == v49) {
            goto LABEL_110;
          }
          int v61 = *(_DWORD *)(v52 + 56);
          BOOL v62 = v47 < v61;
          if (v47 != v61) {
            goto LABEL_105;
          }
          unsigned int v63 = *(unsigned __int8 *)(v52 + 33);
          if (v42 != v63)
          {
            if (v42 >= v63) {
              goto LABEL_82;
            }
            while (1)
            {
LABEL_110:
              uint64_t v51 = v48;
              int v65 = *((_DWORD *)v48 + 14);
              if (v47 == v65)
              {
                unsigned int v66 = v51[33];
                if (v42 == v66)
                {
                  int v67 = *((_DWORD *)v51 + 9);
                  if (v43 == v67)
                  {
                    int v68 = *((_DWORD *)v51 + 10);
                    if (v44 < v68) {
                      goto LABEL_109;
                    }
                    if (v68 >= v44) {
                      goto LABEL_81;
                    }
                  }
                  else
                  {
                    if (v43 < v67)
                    {
LABEL_109:
                      double v48 = *(unsigned __int8 **)v51;
                      BOOL v50 = (unsigned __int8 **)v51;
                      if (!*(void *)v51) {
                        goto LABEL_126;
                      }
                      continue;
                    }
                    if (v67 >= v43) {
                      goto LABEL_81;
                    }
                  }
                }
                else
                {
                  if (v42 < v66) {
                    goto LABEL_109;
                  }
                  if (v66 >= v42) {
                    goto LABEL_81;
                  }
                }
              }
              else
              {
                if (v47 < v65) {
                  goto LABEL_109;
                }
                if (v65 >= v47) {
                  goto LABEL_81;
                }
              }
              double v48 = (unsigned __int8 *)*((void *)v51 + 1);
              if (!v48)
              {
                BOOL v50 = (unsigned __int8 **)(v51 + 8);
                goto LABEL_126;
              }
            }
          }
          int v64 = *(_DWORD *)(v52 + 36);
          BOOL v62 = v43 < v64;
          if (v43 == v64) {
            BOOL v62 = v44 < *(_DWORD *)(v52 + 40);
          }
LABEL_105:
          if (v62) {
            goto LABEL_110;
          }
LABEL_82:
          pthread_mutex_unlock(*(pthread_mutex_t **)(v46 + 64));
          v40 += 6;
          double v21 = this;
          if (v40 == v95) {
            goto LABEL_154;
          }
          goto LABEL_83;
        }
      }
    }
    if (v34) {
      goto LABEL_74;
    }
LABEL_165:
    if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_60:
    if (__p)
    {
      double v100 = __p;
      operator delete(__p);
    }
    if (v98 && !atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
      size_t v36 = (uint64_t *)v22[1];
      if (v36)
      {
        do
        {
LABEL_65:
          double v37 = (uint64_t **)v36;
          size_t v36 = (uint64_t *)*v36;
        }
        while (v36);
        goto LABEL_42;
      }
    }
    else
    {
      size_t v36 = (uint64_t *)v22[1];
      if (v36) {
        goto LABEL_65;
      }
    }
    do
    {
      double v37 = (uint64_t **)v22[2];
      BOOL v55 = *v37 == v22;
      uint64_t v22 = (uint64_t *)v37;
    }
    while (!v55);
LABEL_42:
    uint64_t v22 = (uint64_t *)v37;
  }
  while (v37 != &v103);
  if (!*((void *)v21 + 29))
  {
LABEL_169:
    pthread_mutex_lock(*((pthread_mutex_t **)v21 + 19));
    *((_DWORD *)v21 + 40) |= 1u;
    pthread_mutex_unlock(*((pthread_mutex_t **)v21 + 19));
  }
  std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(v103);
}

void std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    id v3 = (std::__shared_weak_count *)a1[5];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(a1);
  }
}

void altitude::MapProvider::MapTransfer::~MapTransfer(altitude::MapProvider::MapTransfer *this)
{
  altitude::MapProvider::MapTransfer::~MapTransfer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EF568698;
  uint64_t v2 = *((void *)this + 30);
  if (v2)
  {
    id v3 = *((void *)this + 31);
    uint64_t v4 = (void *)*((void *)this + 30);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 30);
    }
    *((void *)this + 31) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::__map_value_compare<std::shared_ptr<altitude::MapRequest>,std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>,std::less<std::shared_ptr<altitude::MapRequest>>,true>,std::allocator<std::__value_type<std::shared_ptr<altitude::MapRequest>,std::vector<geo::QuadTile>>>>::destroy(*((void **)this + 28));
  long long v6 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  karo::Job::~Job(this);
}

uint64_t altitude::MapProvider::cacheLookup(altitude::MapProvider *this, const QuadTile *a2, int a3, char *a4)
{
  unsigned int v8 = a4[1];
  int v10 = *((_DWORD *)a4 + 1);
  int v9 = *((_DWORD *)a4 + 2);
  pthread_mutex_lock((pthread_mutex_t *)a2[2]._hash);
  uint64_t v11 = *(void *)&a2[2]._type;
  if (!v11) {
    goto LABEL_25;
  }
  uint64_t v12 = a2 + 2;
  do
  {
    int v16 = *(_DWORD *)(v11 + 56);
    BOOL v17 = v16 < a3;
    if (v16 != a3) {
      goto LABEL_3;
    }
    unsigned int v18 = *(unsigned __int8 *)(v11 + 33);
    if (v18 == v8)
    {
      int v19 = *(_DWORD *)(v11 + 36);
      BOOL v17 = v19 < v10;
      if (v19 == v10) {
        BOOL v17 = *(_DWORD *)(v11 + 40) < v9;
      }
LABEL_3:
      BOOL v13 = v17;
      goto LABEL_6;
    }
    BOOL v13 = v18 < v8;
LABEL_6:
    BOOL v14 = !v13;
    if (v13) {
      uint64_t v15 = (uint64_t *)(v11 + 8);
    }
    else {
      uint64_t v15 = (uint64_t *)v11;
    }
    if (v14) {
      uint64_t v12 = (const QuadTile *)v11;
    }
    uint64_t v11 = *v15;
  }
  while (*v15);
  if (v12 == &a2[2]) {
    goto LABEL_25;
  }
  xIddouble x = v12[2]._xIdx;
  if (xIdx != a3)
  {
    if (xIdx <= a3) {
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  unsigned int v21 = BYTE1(v12[1]._xIdx);
  if (v8 != v21)
  {
    if (v8 >= v21) {
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  int v22 = *(&v12[1]._xIdx + 1);
  if (v10 == v22)
  {
    if (v9 >= SLODWORD(v12[1]._hash)) {
      goto LABEL_28;
    }
LABEL_25:
    uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)a2[2]._hash);
    char v24 = a4[1];
    uint64_t v25 = *(void *)(a4 + 4);
    char hash = *a4;
  }
  else
  {
    if (v10 < v22) {
      goto LABEL_25;
    }
LABEL_28:
    char v24 = BYTE1(v12[2]._hash);
    uint64_t v25 = *(unint64_t *)((char *)&v12[2]._hash + 4);
    char hash = v12[2]._hash;
    uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)a2[2]._hash);
  }
  *(unsigned char *)this = hash;
  *((unsigned char *)this + 1) = v24;
  *(void *)((char *)this + 4) = v25;
  return result;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::ExtendedVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::Debug::ExtendedMesh::~ExtendedMesh(ggl::Debug::ExtendedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Debug::ExtendedMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Debug::ExtendedMesh *)((char *)this - 16));
}

void ggl::Debug::ExtendedMesh::~ExtendedMesh(ggl::Debug::ExtendedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::Debug::ExtendedVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::Debug::ExtendedVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::Debug::LineVBO>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::Debug::LineVBO>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::Debug::LineVBO>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::LineVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::LineVBO>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::LineVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::LineVBO>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::LineVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::LineVBO>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Debug::LineVBO>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Debug::LineVBO>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::Debug::LineMesh::~LineMesh(ggl::Debug::LineMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Debug::LineMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Debug::LineMesh *)((char *)this - 16));
}

void ggl::Debug::LineMesh::~LineMesh(ggl::Debug::LineMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::Debug::LineVBO>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::Debug::LineVBO>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::PolygonSolidFill::MeshPipelineState::~MeshPipelineState(ggl::PolygonSolidFill::MeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::PolygonSolidFill::MeshPipelineSetup::textureIsEnabled(ggl::PolygonSolidFill::MeshPipelineSetup *this)
{
  return 0;
}

BOOL ggl::PolygonSolidFill::MeshPipelineSetup::constantDataIsEnabled(ggl::PolygonSolidFill::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::PolygonSolidFill::MeshPipelineSetup::~MeshPipelineSetup(ggl::PolygonSolidFill::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void *ggl::PolygonSolidFill::MeshPipelineSetup::MeshPipelineSetup(void *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &unk_1EF55D3C8;
  uint64_t v11 = (uint64_t *)a1[8];
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  uint64_t *v11 = *a4;
  v11[1] = 0;
  BOOL v14 = (void *)a1[20];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)v14[1];
  *BOOL v14 = v12;
  v14[1] = v13;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = a1[8];
  uint64_t v17 = *a5;
  uint64_t v18 = a5[1];
  *(void *)(v16 + 16) = *a5;
  *(void *)(v16 + 24) = 0;
  uint64_t v19 = a1[20];
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  double v20 = *(std::__shared_weak_count **)(v19 + 24);
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = a1[8];
  uint64_t v22 = *a6;
  uint64_t v23 = a6[1];
  *(void *)(v21 + 32) = *a6;
  *(void *)(v21 + 40) = 0;
  uint64_t v24 = a1[20];
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v24 + 40);
  *(void *)(v24 + 32) = v22;
  *(void *)(v24 + 40) = v23;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  return a1;
}

void ggl::PolygonSolidFill::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::PolygonSolidFill::CompressedMeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::PolygonSolidFill::CompressedMeshPipelineSetup::textureIsEnabled(ggl::PolygonSolidFill::CompressedMeshPipelineSetup *this)
{
  return 0;
}

BOOL ggl::PolygonSolidFill::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::PolygonSolidFill::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::PolygonSolidFill::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::PolygonSolidFill::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::PolygonSolidFill::S2MeshPipelineState::~S2MeshPipelineState(ggl::PolygonSolidFill::S2MeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::PolygonSolidFill::S2MeshPipelineSetup::textureIsEnabled(ggl::PolygonSolidFill::S2MeshPipelineSetup *this)
{
  return 0;
}

BOOL ggl::PolygonSolidFill::S2MeshPipelineSetup::constantDataIsEnabled(ggl::PolygonSolidFill::S2MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::PolygonSolidFill::S2MeshPipelineSetup::~S2MeshPipelineSetup(ggl::PolygonSolidFill::S2MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void *ggl::PolygonSolidFill::S2MeshPipelineSetup::S2MeshPipelineSetup(void *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &unk_1EF55D418;
  uint64_t v11 = (uint64_t *)a1[8];
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  uint64_t *v11 = *a4;
  v11[1] = 0;
  BOOL v14 = (void *)a1[20];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)v14[1];
  *BOOL v14 = v12;
  v14[1] = v13;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = a1[8];
  uint64_t v17 = *a5;
  uint64_t v18 = a5[1];
  *(void *)(v16 + 16) = *a5;
  *(void *)(v16 + 24) = 0;
  uint64_t v19 = a1[20];
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  double v20 = *(std::__shared_weak_count **)(v19 + 24);
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = a1[8];
  uint64_t v22 = *a6;
  uint64_t v23 = a6[1];
  *(void *)(v21 + 32) = *a6;
  *(void *)(v21 + 40) = 0;
  uint64_t v24 = a1[20];
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v24 + 40);
  *(void *)(v24 + 32) = v22;
  *(void *)(v24 + 40) = v23;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  return a1;
}

void md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::getResolverFromContext<md::FlyoverTileDataResolverContext>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v5 = *(unsigned __int16 **)(v4 + 168);
  long long v6 = *(unsigned __int16 **)(v4 + 176);
  if (v5 != v6)
  {
    uint64_t v9 = a2;
    int v61 = a4 + 2;
    unint64_t v11 = a3;
    do
    {
      int v12 = *v5;
      uint64_t v13 = *(void *)(a1 + 128);
      *(_OWORD *)BOOL v62 = 0u;
      *(_OWORD *)__p = 0u;
      int v64 = 1065353216;
      unint64_t v14 = *(void *)(v13 + 144);
      if (v14)
      {
        do
        {
          if (*(unsigned __int16 *)(v14 + 20) == v12 && *(unsigned char *)(v14 + 18) != 2) {
            std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short>((uint64_t)v62, *(_WORD *)(v14 + 16), *(_WORD *)(v14 + 16));
          }
          unint64_t v14 = *(void *)v14;
        }
        while (v14);
        if (v62[1])
        {
          uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v62[1]);
          v16.i16[0] = vaddlv_u8(v16);
          if (v16.u32[0] > 1uLL)
          {
            unint64_t v17 = v11;
            if (v62[1] <= (void *)v11) {
              unint64_t v17 = v11 % (unint64_t)v62[1];
            }
          }
          else
          {
            unint64_t v17 = (LODWORD(v62[1]) - 1) & v11;
          }
          uint64_t v18 = (uint64_t ***)*((void *)v62[0] + v17);
          if (v18)
          {
            uint64_t v19 = *v18;
            if (v19)
            {
              if (v16.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v21 = (unint64_t)v19[1];
                  if (v21 == v11)
                  {
                    if (*((unsigned __int16 *)v19 + 8) == a3) {
                      goto LABEL_33;
                    }
                  }
                  else if ((v21 & ((unint64_t)v62[1] - 1)) != v17)
                  {
                    goto LABEL_121;
                  }
                  uint64_t v19 = (uint64_t **)*v19;
                  if (!v19) {
                    goto LABEL_121;
                  }
                }
              }
              do
              {
                unint64_t v20 = (unint64_t)v19[1];
                if (v20 == v11)
                {
                  if (*((unsigned __int16 *)v19 + 8) == a3)
                  {
LABEL_33:
                    v68[0] = &unk_1EF57DDD0;
                    v68[1] = v9;
                    uint64_t v69 = v68;
                    unint64_t v22 = a4[1];
                    if (v22)
                    {
                      uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
                      v23.i16[0] = vaddlv_u8(v23);
                      if (v23.u32[0] > 1uLL)
                      {
                        unint64_t v14 = v11;
                        if (v22 <= v11) {
                          unint64_t v14 = v11 % v22;
                        }
                      }
                      else
                      {
                        unint64_t v14 = (v22 - 1) & v11;
                      }
                      uint64_t v24 = *(void ***)(*a4 + 8 * v14);
                      if (v24)
                      {
                        uint64_t v25 = *v24;
                        if (*v24)
                        {
                          if (v23.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              unint64_t v27 = v25[1];
                              if (v27 == v11)
                              {
                                if (*((unsigned __int16 *)v25 + 8) == a3) {
                                  goto LABEL_113;
                                }
                              }
                              else if ((v27 & (v22 - 1)) != v14)
                              {
                                goto LABEL_53;
                              }
                              uint64_t v25 = (void *)*v25;
                              if (!v25) {
                                goto LABEL_53;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v26 = v25[1];
                            if (v26 == v11)
                            {
                              if (*((unsigned __int16 *)v25 + 8) == a3) {
                                goto LABEL_113;
                              }
                            }
                            else
                            {
                              if (v26 >= v22) {
                                v26 %= v22;
                              }
                              if (v26 != v14) {
                                break;
                              }
                            }
                            uint64_t v25 = (void *)*v25;
                          }
                          while (v25);
                        }
                      }
                    }
LABEL_53:
                    uint64_t v25 = operator new(0x38uLL);
                    int v65 = v25;
                    unsigned int v66 = v61;
                    *uint64_t v25 = 0;
                    v25[1] = v11;
                    *((_WORD *)v25 + 8) = a3;
                    v25[6] = 0;
                    char v67 = 1;
                    float v28 = (float)(unint64_t)(a4[3] + 1);
                    float v29 = *((float *)a4 + 8);
                    if (!v22 || (float)(v29 * (float)v22) < v28)
                    {
                      BOOL v30 = (v22 & (v22 - 1)) != 0;
                      if (v22 < 3) {
                        BOOL v30 = 1;
                      }
                      unint64_t v31 = v30 | (2 * v22);
                      unint64_t v32 = vcvtps_u32_f32(v28 / v29);
                      if (v31 <= v32) {
                        size_t prime = v32;
                      }
                      else {
                        size_t prime = v31;
                      }
                      if (prime == 1)
                      {
                        size_t prime = 2;
                      }
                      else if ((prime & (prime - 1)) != 0)
                      {
                        size_t prime = std::__next_prime(prime);
                        unint64_t v22 = a4[1];
                      }
                      if (prime > v22)
                      {
LABEL_65:
                        if (prime >> 61) {
                          std::__throw_bad_array_new_length[abi:nn180100]();
                        }
                        uint64_t v34 = operator new(8 * prime);
                        uint64_t v35 = (void *)*a4;
                        *a4 = (uint64_t)v34;
                        if (v35) {
                          operator delete(v35);
                        }
                        uint64_t v36 = 0;
                        a4[1] = prime;
                        do
                          *(void *)(*a4 + 8 * v36++) = 0;
                        while (prime != v36);
                        double v37 = (void *)*v61;
                        if (!*v61) {
                          goto LABEL_89;
                        }
                        size_t v38 = v37[1];
                        size_t v39 = prime - 1;
                        if ((prime & (prime - 1)) == 0)
                        {
                          size_t v40 = v38 & v39;
                          *(void *)(*a4 + 8 * v40) = v61;
                          for (uint64_t i = (void *)*v37; *v37; uint64_t i = (void *)*v37)
                          {
                            size_t v42 = i[1] & v39;
                            if (v42 == v40)
                            {
                              double v37 = i;
                            }
                            else if (*(void *)(*a4 + 8 * v42))
                            {
                              *double v37 = *i;
                              uint64_t v43 = 8 * v42;
                              *uint64_t i = **(void **)(*a4 + v43);
                              **(void **)(*a4 + v43) = i;
                            }
                            else
                            {
                              *(void *)(*a4 + 8 * v42) = v37;
                              double v37 = i;
                              size_t v40 = v42;
                            }
                          }
                          goto LABEL_89;
                        }
                        if (v38 >= prime) {
                          v38 %= prime;
                        }
                        *(void *)(*a4 + 8 * v38) = v61;
                        int v47 = (void *)*v37;
                        if (!*v37)
                        {
LABEL_89:
                          unint64_t v22 = prime;
                          goto LABEL_90;
                        }
                        while (2)
                        {
                          size_t v49 = v47[1];
                          if (v49 >= prime) {
                            v49 %= prime;
                          }
                          if (v49 != v38)
                          {
                            if (!*(void *)(*a4 + 8 * v49))
                            {
                              *(void *)(*a4 + 8 * v49) = v37;
LABEL_94:
                              double v37 = v47;
                              int v47 = (void *)*v47;
                              size_t v38 = v49;
                              if (!v47) {
                                goto LABEL_89;
                              }
                              continue;
                            }
                            *double v37 = *v47;
                            uint64_t v48 = 8 * v49;
                            void *v47 = **(void **)(*a4 + v48);
                            **(void **)(*a4 + v48) = v47;
                            int v47 = v37;
                          }
                          break;
                        }
                        size_t v49 = v38;
                        goto LABEL_94;
                      }
                      if (prime < v22)
                      {
                        unint64_t v44 = vcvtps_u32_f32((float)(unint64_t)a4[3] / *((float *)a4 + 8));
                        if (v22 < 3
                          || (uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
                        {
                          unint64_t v44 = std::__next_prime(v44);
                        }
                        else
                        {
                          uint64_t v46 = 1 << -(char)__clz(v44 - 1);
                          if (v44 >= 2) {
                            unint64_t v44 = v46;
                          }
                        }
                        if (prime <= v44) {
                          size_t prime = v44;
                        }
                        if (prime >= v22)
                        {
                          unint64_t v22 = a4[1];
                        }
                        else
                        {
                          if (prime) {
                            goto LABEL_65;
                          }
                          unsigned int v59 = (void *)*a4;
                          *a4 = 0;
                          if (v59) {
                            operator delete(v59);
                          }
                          unint64_t v22 = 0;
                          a4[1] = 0;
                        }
                      }
LABEL_90:
                      if ((v22 & (v22 - 1)) != 0)
                      {
                        if (v22 <= v11) {
                          unint64_t v14 = v11 % v22;
                        }
                        else {
                          unint64_t v14 = v11;
                        }
                      }
                      else
                      {
                        unint64_t v14 = (v22 - 1) & v11;
                      }
                    }
                    uint64_t v50 = *a4;
                    uint64_t v51 = *(void **)(*a4 + 8 * v14);
                    if (v51)
                    {
                      *uint64_t v25 = *v51;
                      goto LABEL_111;
                    }
                    *uint64_t v25 = *v61;
                    void *v61 = v25;
                    *(void *)(v50 + 8 * v14) = v61;
                    if (*v25)
                    {
                      unint64_t v52 = *(void *)(*v25 + 8);
                      if ((v22 & (v22 - 1)) != 0)
                      {
                        if (v52 >= v22) {
                          v52 %= v22;
                        }
                      }
                      else
                      {
                        v52 &= v22 - 1;
                      }
                      uint64_t v51 = (void *)(*a4 + 8 * v52);
LABEL_111:
                      *uint64_t v51 = v25;
                    }
                    ++a4[3];
LABEL_113:
                    uint64_t v53 = (char *)(v25 + 3);
                    BOOL v54 = (void *)v25[6];
                    v25[6] = 0;
                    uint64_t v9 = a2;
                    if (v54 == v25 + 3)
                    {
                      (*(void (**)(void *))(*(void *)v53 + 32))(v25 + 3);
                      BOOL v55 = v69;
                      if (v69) {
                        goto LABEL_117;
                      }
                    }
                    else
                    {
                      if (v54) {
                        (*(void (**)(void *))(*v54 + 40))(v54);
                      }
                      BOOL v55 = v69;
                      if (v69)
                      {
LABEL_117:
                        if (v55 == v68)
                        {
                          v25[6] = v53;
                          (*(void (**)(void *, void *))(v68[0] + 24))(v68, v25 + 3);
                          if (v69 == v68)
                          {
                            (*(void (**)(void *))(v68[0] + 32))(v68);
                          }
                          else if (v69)
                          {
                            (*(void (**)(void))(*v69 + 40))();
                          }
                        }
                        else
                        {
                          v25[6] = v55;
                        }
                        break;
                      }
                    }
                    v25[6] = 0;
                    break;
                  }
                }
                else
                {
                  if ((void *)v20 >= v62[1]) {
                    v20 %= (unint64_t)v62[1];
                  }
                  if (v20 != v17) {
                    break;
                  }
                }
                uint64_t v19 = (uint64_t **)*v19;
              }
              while (v19);
            }
          }
        }
      }
LABEL_121:
      __int16 v56 = __p[0];
      if (__p[0])
      {
        do
        {
          int v57 = (void *)*v56;
          operator delete(v56);
          __int16 v56 = v57;
        }
        while (v57);
      }
      BOOL v58 = v62[0];
      v62[0] = 0;
      if (v58) {
        operator delete(v58);
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_1A2405048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::MapDataType,std::function<std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::MapDataType,std::function<std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va1);
  std::function<std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>::~function((uint64_t *)va2);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::function<std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::MapDataType,std::function<std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::MapDataType,std::function<std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[6];
      if (v3 == v2 + 3)
      {
        (*(void (**)(void *))(v2[3] + 32))(v2 + 3);
      }
      else if (v3)
      {
        (*(void (**)(void *))(*v3 + 40))(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>,md::ResolvedTileSelectionContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x8677AD8BA9352C1DLL && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::TileSelectionContext>,gdc::TypeList<md::FlyoverTileDataResolverContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

void md::ResolvedTileSelectionContext::~ResolvedTileSelectionContext(md::ResolvedTileSelectionContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  while (v2)
  {
    uint64_t v4 = v2;
    uint64_t v2 = (void *)*v2;
    uint64_t v5 = (void *)v4[6];
    if (v5 == v4 + 3)
    {
      (*(void (**)(void *))(v4[3] + 32))(v4 + 3);
    }
    else if (v5)
    {
      (*(void (**)(void *))(*v5 + 40))(v5);
    }
    operator delete(v4);
  }
  uint64_t v3 = *(void **)this;
  *(void *)this = 0;
  if (v3) {
    operator delete(v3);
  }
}

uint64_t gdc::ObjectHolder<md::ResolvedTileSelectionContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::ResolvedTileSelectionContext>::~ManagedObjectHolder(void *a1)
{
  gdc::ManagedObjectHolder<md::ResolvedTileSelectionContext>::~ManagedObjectHolder(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::ResolvedTileSelectionContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555C58;
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 16);
    while (v3)
    {
      uint64_t v6 = v3;
      uint64_t v3 = (void *)*v3;
      uint64_t v7 = (void *)v6[6];
      if (v7 == v6 + 3)
      {
        (*(void (**)(void *))(v6[3] + 32))(v6 + 3);
      }
      else if (v7)
      {
        (*(void (**)(void *))(*v7 + 40))(v7);
      }
      operator delete(v6);
    }
    uint64_t v4 = *(void **)v2;
    *(void *)uint64_t v2 = 0;
    if (v4) {
      operator delete(v4);
    }
    MEMORY[0x1A6239270](v2, 0x10A0C408EF24B1CLL);
  }
  return a1;
}

double md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::createDebugNode@<D0>(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "TileDependencyLogic");
  *(_WORD *)(a1 + 23) = 19;
  double result = 0.0;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(unsigned char *)(a1 + 95) = 0;
  return result;
}

void md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::~TileDependencyLogicImpl(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t md::TileDependencyLogicImpl<md::TileDependencies<>,md::TileDependencies<md::TileDependency<(md::MapDataType)75,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)76,md::FlyoverTileDataResolverContext>,md::TileDependency<(md::MapDataType)77,md::FlyoverTileDataResolverContext>>>::~TileDependencyLogicImpl(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void sub_1A2405630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24056C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2405910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2405B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2405CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2405CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2405D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2405DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2405E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2405EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2405F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2406020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24060A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2406170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2406210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t md::StyleLogic::debugConsoleString@<X0>(uint64_t a1@<X3>, unsigned char *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v20);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = (gss::Allocator *)(a1 + 120);
  if (v4 != v5)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"Client Style Attributes:[\n", 26);
    gss::attributesToString(v6, 1, "\t", 0, __p);
    if ((v19 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v8 = v19;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v7, v8);
    if ((char)v19 < 0) {
      operator delete(__p[0]);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"]\n", 2);
  }
  if ((v28 & 0x10) != 0)
  {
    unint64_t v10 = v27;
    if (v27 < v24)
    {
      unint64_t v27 = v24;
      unint64_t v10 = v24;
    }
    uint64_t v11 = (const void **)&v23;
  }
  else
  {
    if ((v28 & 8) == 0)
    {
      size_t v9 = 0;
      a2[23] = 0;
      goto LABEL_26;
    }
    uint64_t v11 = (const void **)v22;
    unint64_t v10 = v22[2];
  }
  int v12 = *v11;
  size_t v9 = v10 - (void)*v11;
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v15 = operator new(v13 + 1);
    *((void *)a2 + 1) = v9;
    *((void *)a2 + 2) = v14 | 0x8000000000000000;
    *(void *)a2 = v15;
    a2 = v15;
    goto LABEL_25;
  }
  a2[23] = v9;
  if (v9) {
LABEL_25:
  }
    memmove(a2, v12, v9);
LABEL_26:
  a2[v9] = 0;
  v20[0] = *MEMORY[0x1E4FBA408];
  uint64_t v16 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v21[0] = v16;
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v26 < 0) {
    operator delete(v25);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v29);
}

void sub_1A24064C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

unsigned int *_ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__0PNS_4pairIN3gss14StyleAttributeEtEEEEvT1_SO_SO_SO_T0_(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4 = *a2;
  unsigned int v5 = *result;
  unsigned int v6 = *a3;
  if (*a2 >= *result)
  {
    if (v6 >= v4)
    {
      unsigned int v4 = *a3;
    }
    else
    {
      *a2 = v6;
      *a3 = v4;
      __int16 v8 = *((_WORD *)a2 + 2);
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *((_WORD *)a3 + 2) = v8;
      unsigned int v9 = *result;
      if (*a2 < *result)
      {
        *double result = *a2;
        *a2 = v9;
        __int16 v10 = *((_WORD *)result + 2);
        *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
        *((_WORD *)a2 + 2) = v10;
        unsigned int v4 = *a3;
      }
    }
  }
  else
  {
    if (v6 < v4)
    {
      *double result = v6;
      *a3 = v5;
      __int16 v7 = *((_WORD *)result + 2);
      *((_WORD *)result + 2) = *((_WORD *)a3 + 2);
      *((_WORD *)a3 + 2) = v7;
LABEL_9:
      unsigned int v4 = v5;
      goto LABEL_11;
    }
    *double result = v4;
    *a2 = v5;
    __int16 v11 = *((_WORD *)result + 2);
    *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
    *((_WORD *)a2 + 2) = v11;
    unsigned int v4 = *a3;
    if (*a3 < v5)
    {
      *a2 = v4;
      *a3 = v5;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *((_WORD *)a3 + 2) = v11;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*a4 < v4)
  {
    *a3 = *a4;
    *a4 = v4;
    __int16 v12 = *((_WORD *)a3 + 2);
    *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
    *((_WORD *)a4 + 2) = v12;
    unsigned int v13 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v13;
      __int16 v14 = *((_WORD *)a2 + 2);
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *((_WORD *)a3 + 2) = v14;
      unsigned int v15 = *result;
      if (*a2 < *result)
      {
        *double result = *a2;
        *a2 = v15;
        __int16 v16 = *((_WORD *)result + 2);
        *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
        *((_WORD *)a2 + 2) = v16;
      }
    }
  }
  return result;
}

void *std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_1,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56D518;
}

void *std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_1,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EF56D518;
  return result;
}

void std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_1,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::~__func()
{
}

void std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_0,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56D4D0;
}

void *std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_0,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EF56D4D0;
  return result;
}

void std::__function::__func<md::StyleLogic::_finishStyleBlend(void)::$_0,std::allocator<md::StyleLogic::_finishStyleBlend(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::~__func()
{
}

void gss::ClientStyleState<gss::PropertyID>::removeTargetClientStyleAttribute(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = (pthread_rwlock_t *)(a1 + 16);
  unsigned int v5 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if (v5) {
    geo::read_write_lock::logFailure(v5, (uint64_t)"write lock", v6);
  }
  if (geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::erase(a1 + 232, a2))
  {
    float v7 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
    LOBYTE(v8) = 1;
    if (v7 <= 0.0)
    {
      unint64_t v8 = *(unsigned __int16 *)(a1 + 242);
      if (v8 != *(unsigned __int16 *)(a1 + 226))
      {
LABEL_14:
        LOBYTE(v8) = 1;
        goto LABEL_15;
      }
      if (*(_WORD *)(a1 + 242))
      {
        unsigned int v9 = *(_DWORD **)(a1 + 232);
        __int16 v10 = *(_DWORD **)(a1 + 216);
        if (*v9 == *v10)
        {
          uint64_t v11 = *(unsigned __int16 *)(a1 + 224);
          uint64_t v12 = *(unsigned __int16 *)(a1 + 240);
          if (*(unsigned __int16 *)((char *)v9 + v12) == *(unsigned __int16 *)((char *)v10 + v11))
          {
            unint64_t v13 = 0;
            __int16 v14 = v9 + 1;
            unsigned int v15 = v10 + 1;
            uint64_t v16 = (uint64_t)v9 + v12 + 2;
            uint64_t v17 = (uint64_t)v10 + v11 + 2;
            while (v8 - 1 != v13)
            {
              uint64_t v18 = v13++;
              if (v14[v18] != v15[v18]) {
                goto LABEL_22;
              }
              if (*(unsigned __int16 *)(v16 + 2 * v18) != *(unsigned __int16 *)(v17 + 2 * v18))
              {
                unint64_t v13 = v18 + 1;
                goto LABEL_22;
              }
            }
            unint64_t v13 = *(unsigned __int16 *)(a1 + 242);
LABEL_22:
            LOBYTE(v8) = v13 < v8;
            goto LABEL_15;
          }
        }
        goto LABEL_14;
      }
    }
LABEL_15:
    atomic_store(v8, (unsigned __int8 *)(a1 + 254));
    atomic_fetch_add((atomic_uint *volatile)(a1 + 248), 1u);
  }
  unsigned __int8 v19 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if (v19)
  {
    geo::read_write_lock::logFailure(v19, (uint64_t)"unlock", v20);
  }
}

uint64_t **md::StyleLogic::hybridContext(md::StyleLogic *this)
{
  uint64_t v2 = (uint64_t **)((char *)this + 592);
  if (*((void *)this + 74))
  {
    if (*((void *)this + 76)) {
      return v2;
    }
    goto LABEL_13;
  }
  char v14 = 6;
  strcpy((char *)__p, "hybrid");
  float v3 = *((float *)this + 30);
  unsigned int v4 = *((unsigned __int8 *)this + 161);
  id v5 = *((id *)this + 17);
  gss::StyleManagerExtension::initWithName<gss::PropertyID>(&v15, (uint64_t)__p, v4, v5, v3);
  long long v6 = v15;
  long long v15 = 0uLL;
  float v7 = (std::__shared_weak_count *)*((void *)this + 75);
  *((_OWORD *)this + 37) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

  if (v14 < 0) {
    operator delete(__p[0]);
  }
  md::StyleLogic::setupDecodingCallbacks(*((void *)this + 151), *((std::__shared_weak_count **)this + 152), v2);
  if (!*((void *)this + 76))
  {
LABEL_13:
    uint64_t v10 = *((void *)this + 30);
    uint64_t v9 = *((void *)this + 31);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)this + 76) = v10;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 77);
    *((void *)this + 77) = v9;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v2;
}

void sub_1A2406BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t **md::StyleLogic::globeContext(md::StyleLogic *this)
{
  uint64_t v2 = (uint64_t **)((char *)this + 928);
  if (!*((void *)this + 116))
  {
    char v12 = 13;
    strcpy((char *)__p, "globe-default");
    float v3 = *((float *)this + 30);
    unsigned int v4 = *((unsigned __int8 *)this + 161);
    id v5 = *((id *)this + 17);
    gss::StyleManagerExtension::initWithName<gss::PropertyID>(&v13, (uint64_t)__p, v4, v5, v3);
    long long v6 = v13;
    long long v13 = 0uLL;
    float v7 = (std::__shared_weak_count *)*((void *)this + 117);
    *((_OWORD *)this + 58) = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    unint64_t v8 = (std::__shared_weak_count *)*((void *)&v13 + 1);
    if (*((void *)&v13 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }

    if (v12 < 0) {
      operator delete(__p[0]);
    }
    md::StyleLogic::setupDecodingCallbacks(*((void *)this + 151), *((std::__shared_weak_count **)this + 152), v2);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 119);
  *((void *)this + 118) = 0;
  *((void *)this + 119) = 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v2;
}

void sub_1A2406D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::function<void ()(md::StyleLogic *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNKSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__1clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57F138;
}

void *_ZNKSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__1clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EE7__cloneEv()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EF57F138;
  return result;
}

void _ZNSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__1clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EED0Ev()
{
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF57E298;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::__clone(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = &unk_1EF57E298;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::~__func(void *a1)
{
  *a1 = &unk_1EF57E298;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::~__func(void *a1)
{
  *a1 = &unk_1EF57E298;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = &unk_1EF56D5A8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1EF56D5A8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1EF56D5A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t ___ZN3gss10StyleSheetINS_10PropertyIDEE27addFinishedDecodingCallbackENSt3__18functionIFvbEEE_block_invoke(uint64_t a1)
{
  BOOL v3 = *(void *)(*(void *)(a1 + 32) + 160) != 0;
  uint64_t v1 = *(void *)(a1 + 64);
  if (v1) {
    return (*(uint64_t (**)(uint64_t, BOOL *))(*(void *)v1 + 48))(v1, &v3);
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return ___ZN3gss10StyleSheetINS_10PropertyIDEE9loadQueueEb_block_invoke_2_26121();
}

void ___ZN3gss10StyleSheetINS_10PropertyIDEE9loadQueueEb_block_invoke_2_26121()
{
  BOOL v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_USER_INTERACTIVE, -3);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  uint64_t v2 = (void *)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;
}

void ___ZN3gss10StyleSheetINS_10PropertyIDEE9loadQueueEb_block_invoke_26125()
{
  BOOL v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = dispatch_queue_attr_make_with_qos_class(v3, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mapdisplay.stylesheetLoadQueue", v0);
  uint64_t v2 = (void *)gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue = (uint64_t)v1;
}

uint64_t std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result == v2)
  {
    long long v6 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 32);
    return v6(v2);
  }
  else if (result)
  {
    id v5 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v5();
  }
  return result;
}

uint64_t std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(void *a1, void *a2)
{
  *a2 = &unk_1EF57CDC8;
  uint64_t v4 = a2 + 1;
  uint64_t result = a1[4];
  if (result)
  {
    if ((void *)result == a1 + 1)
    {
      a2[4] = v4;
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a1[4] + 24))(a1[4]);
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 16))(result, v4);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  uint64_t v6 = a1[6];
  a2[5] = a1[5];
  a2[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1EF57CDC8;
  uint64_t v2 = a1 + 1;
  BOOL v3 = (std::__shared_weak_count *)a1[6];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1EF57CDC8;
  uint64_t v2 = a1 + 1;
  BOOL v3 = (std::__shared_weak_count *)a1[6];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

void _ZNKSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__0clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57F0F0;
}

void *_ZNKSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__0clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57F0F0;
  return result;
}

void _ZNSt3__110__function6__funcIZZZZN2md10StyleLogic22setupDecodingCallbacksERKNS_10shared_ptrIN3gss17StylesheetManagerINS5_10PropertyIDEEEEEENK3__0clES9_bENKUlPS3_E_clESD_EUb_EUlSD_E_NS_9allocatorISF_EEFvSD_EED0Ev()
{
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF57E250;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1EF57E250;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::~__func(void *a1)
{
  *a1 = &unk_1EF57E250;
  dispatch_queue_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1},std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0::operator() const(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)::{lambda(md::StyleLogic*)#1}>,void ()(md::StyleLogic*)>::~__func(void *a1)
{
  *a1 = &unk_1EF57E250;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1EF56D560;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1EF56D560;
  dispatch_queue_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::StyleLogic::setupDecodingCallbacks(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1EF56D560;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<gss::StylesheetManager<gss::ScenePropertyID> *,std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>>::__shared_ptr_default_delete<gss::StylesheetManager<gss::ScenePropertyID>,gss::StylesheetManager<gss::ScenePropertyID>>,std::allocator<gss::StylesheetManager<gss::ScenePropertyID>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode*>(int32x2_t *a1, int32x2_t *a2)
{
  uint64_t v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 2)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      if (a2[-1].u16[2] >= a1->u16[0]) {
        return 1;
      }
      __int32 v3 = a1->i32[0];
      goto LABEL_9;
    case 3:
      unsigned int v9 = a1->u16[2];
      unsigned int v10 = a2[-1].u16[2];
      if (v9 >= a1->u16[0])
      {
        if (v10 < v9)
        {
          __int32 v19 = a1->i32[1];
          a1->i32[1] = a2[-1].i32[1];
          a2[-1].i32[1] = v19;
          if (a1->u16[2] < a1->u16[0]) {
            *a1 = vrev64_s32(*a1);
          }
        }
      }
      else
      {
        __int32 v3 = a1->i32[0];
        if (v10 >= v9)
        {
          a1->i32[0] = a1->i32[1];
          a1->i32[1] = v3;
          if (a2[-1].u16[2] < (unsigned __int16)v3)
          {
            a1->i32[1] = a2[-1].i32[1];
            a2[-1].i32[1] = v3;
          }
        }
        else
        {
LABEL_9:
          a1->i32[0] = a2[-1].i32[1];
          a2[-1].i32[1] = v3;
        }
      }
      return 1;
    case 4:
      unsigned int v11 = a1->u16[2];
      unsigned int v12 = a1->u16[0];
      unsigned int v13 = a1[1].u16[0];
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          unsigned int v13 = a1->u32[1];
          __int32 v20 = a1[1].i32[0];
          a1->i32[1] = v20;
          a1[1].i32[0] = v13;
          unsigned int v13 = (unsigned __int16)v13;
          if (v12 > (unsigned __int16)v20)
          {
            __int32 v21 = a1->i32[0];
            a1->i32[0] = v20;
            a1->i32[1] = v21;
          }
        }
      }
      else
      {
        __int32 v14 = a1->i32[0];
        unsigned int v15 = (unsigned __int16)a1->i32[0];
        if (v13 >= v11)
        {
          a1->i32[0] = a1->i32[1];
          a1->i32[1] = v14;
          if (v13 >= v15) {
            goto LABEL_41;
          }
          a1->i32[1] = a1[1].i32[0];
        }
        else
        {
          a1->i32[0] = a1[1].i32[0];
        }
        a1[1].i32[0] = v14;
        unsigned int v13 = v15;
      }
LABEL_41:
      if (a2[-1].u16[2] < v13)
      {
        __int32 v29 = a1[1].i32[0];
        a1[1].i32[0] = a2[-1].i32[1];
        a2[-1].i32[1] = v29;
        if (a1[1].u16[0] < a1->u16[2])
        {
          __int32 v31 = a1->i32[1];
          __int32 v30 = a1[1].i32[0];
          a1->i32[1] = v30;
          a1[1].i32[0] = v31;
          if (a1->u16[0] > (unsigned __int16)v30)
          {
            __int32 v32 = a1->i32[0];
            a1->i32[0] = v30;
            a1->i32[1] = v32;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*>((unsigned __int16 *)a1, (unsigned __int16 *)a1 + 2, (unsigned int *)&a1[1], (unsigned int *)&a1[1] + 1, (unsigned int *)&a2[-1] + 1);
      return 1;
    default:
      uint64_t v4 = a1 + 1;
      unsigned int v5 = a1[1].u16[0];
      unsigned int v6 = a1->u16[2];
      unsigned int v7 = a1->u16[0];
      if (v6 >= v7)
      {
        if (v5 < v6)
        {
          __int32 v17 = a1->i32[1];
          __int32 v16 = a1[1].i32[0];
          a1->i32[1] = v16;
          a1[1].i32[0] = v17;
          if (v7 > (unsigned __int16)v16)
          {
            __int32 v18 = a1->i32[0];
            a1->i32[0] = v16;
            a1->i32[1] = v18;
          }
        }
      }
      else
      {
        __int32 v8 = a1->i32[0];
        if (v5 >= v6)
        {
          a1->i32[0] = a1->i32[1];
          a1->i32[1] = v8;
          if (v5 >= (unsigned __int16)v8) {
            goto LABEL_26;
          }
          a1->i32[1] = a1[1].i32[0];
        }
        else
        {
          a1->i32[0] = a1[1].i32[0];
        }
        a1[1].i32[0] = v8;
      }
LABEL_26:
      unint64_t v22 = (unsigned __int16 *)&a1[1] + 2;
      if (&a1[1].u8[4] == (unsigned __int8 *)a2) {
        return 1;
      }
      uint64_t v23 = 0;
      int v24 = 0;
      break;
  }
  while (1)
  {
    if (*v22 < v4->u16[0])
    {
      __int32 v26 = *(_DWORD *)v22;
      uint64_t v27 = v23;
      do
      {
        *(__int32 *)((char *)&a1[1].i32[1] + v27) = *(__int32 *)((char *)a1[1].i32 + v27);
        if (v27 == -8)
        {
          uint64_t v25 = a1;
          goto LABEL_29;
        }
        unsigned int v28 = *(unsigned __int16 *)((char *)&a1->u16[2] + v27);
        v27 -= 4;
      }
      while (v28 > (unsigned __int16)v26);
      uint64_t v25 = (int32x2_t *)((char *)a1 + v27 + 12);
LABEL_29:
      v25->i32[0] = v26;
      if (++v24 == 8) {
        return v22 + 2 == (unsigned __int16 *)a2;
      }
    }
    uint64_t v4 = (int32x2_t *)v22;
    v23 += 4;
    v22 += 2;
    if (v22 == (unsigned __int16 *)a2) {
      return 1;
    }
  }
}

uint64_t gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(uint64_t a1)
{
  *(void *)a1 = &unk_1EF567350;
  uint64_t v2 = *(gss::Allocator **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v2) {
    uint64_t v2 = (gss::Allocator *)MEMORY[0x1A6239250](v2, 0x1000C8077774924);
  }
  __int32 v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  unsigned int v5 = (void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 68) && *v5)
  {
    if (*(_WORD *)(a1 + 64))
    {
      uint64_t v6 = 16 * *(unsigned __int16 *)(a1 + 64);
      unsigned int v7 = (std::__shared_weak_count **)(*v5 + 8);
      do
      {
        __int32 v8 = *v7;
        if (*v7 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
    }
    uint64_t v9 = gss::Allocator::instance(v2);
    uint64_t v2 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 40))(v9, *(void *)(a1 + 56), 16 * *(unsigned __int16 *)(a1 + 66));
  }
  *(void *)(a1 + 61) = 0;
  void *v5 = 0;
  unsigned int v10 = (void *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 52) && *v10)
  {
    if (*(_WORD *)(a1 + 48))
    {
      uint64_t v11 = 24 * *(unsigned __int16 *)(a1 + 48);
      unsigned int v12 = (std::__shared_weak_count **)(*v10 + 16);
      do
      {
        unsigned int v13 = *v12;
        if (*v12 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        v12 += 3;
        v11 -= 24;
      }
      while (v11);
    }
    uint64_t v14 = gss::Allocator::instance(v2);
    uint64_t v2 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v14 + 40))(v14, *(void *)(a1 + 40), 24 * *(unsigned __int16 *)(a1 + 50));
  }
  *(void *)(a1 + 45) = 0;
  void *v10 = 0;
  unsigned int v15 = (void *)(a1 + 24);
  if (!*(unsigned char *)(a1 + 36) && *v15)
  {
    uint64_t v16 = gss::Allocator::instance(v2);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v16 + 40))(v16, *(void *)(a1 + 24), 4 * *(unsigned __int16 *)(a1 + 34));
  }
  *(void *)(a1 + 29) = 0;
  void *v15 = 0;
  __int32 v17 = *(std::__shared_weak_count **)(a1 + 16);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  return a1;
}

uint64_t gss::ConditionalStyle<gss::ScenePropertyID>::to_string@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v42);
  if (*(void *)(*(void *)(a1 + 144) + 104)) {
    __int32 v3 = *(const char **)(*(void *)(a1 + 144) + 104);
  }
  else {
    __int32 v3 = "";
  }
  size_t v4 = strlen(v3);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)"-condStyle-", 11);
  unsigned int v5 = (void *)std::ostream::operator<<();
  LOBYTE(__b.__locale_) = 45;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)&__b, 1);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"-{", 2);
  if (*(_WORD *)(a1 + 136))
  {
    uint64_t v7 = *(void *)(a1 + 128);
    uint64_t v40 = v7 + 24 * *(unsigned __int16 *)(a1 + 136);
    while (1)
    {
      LOBYTE(__b.__locale_) = 64;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)&__b, 1);
      __int32 v8 = (void *)std::ostream::operator<<();
      LOBYTE(__b.__locale_) = 61;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)&__b, 1);
      uint64_t v41 = v7;
      uint64_t v9 = *(unsigned __int16 *)(v7 + 16);
      if (v9)
      {
        uint64_t v10 = *(void *)(v41 + 8);
        std::ostream::operator<<();
        if (v9 != 1) {
          break;
        }
      }
LABEL_40:
      LOBYTE(__b.__locale_) = 59;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)&__b, 1);
      uint64_t v7 = v41 + 24;
      if (v41 + 24 == v40) {
        goto LABEL_41;
      }
    }
    uint64_t v11 = v10 + 4;
    uint64_t v12 = 4 * v9 - 4;
    while (1)
    {
      char v52 = 44;
      MEMORY[0x1A6238CF0](v53, v43);
      if (v53[0])
      {
        unsigned int v13 = (const std::ios_base *)((char *)v43 + *(void *)(v43[0] - 24));
        rdlong long buf = v13->__rdbuf_;
        std::ios_base::fmtflags fmtflags = v13->__fmtflags_;
        int v16 = v13[1].__fmtflags_;
        if (v16 == -1)
        {
          std::ios_base::getloc(v13);
          __int32 v17 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
          int v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 32);
          std::locale::~locale(&__b);
          v13[1].__fmtflags_ = v16;
        }
        if ((fmtflags & 0xB0) == 0x20) {
          __int32 v18 = v53;
        }
        else {
          __int32 v18 = &v52;
        }
        if (!rdbuf) {
          goto LABEL_38;
        }
        uint64_t width = v13->__width_;
        BOOL v20 = width <= 1;
        uint64_t v21 = width - 1;
        size_t v22 = v20 ? 0 : v21;
        if (v18 - &v52 >= 1
          && (*(uint64_t (**)(void *, char *, int64_t))(*(void *)rdbuf + 96))(rdbuf, &v52, v18 - &v52) != v18 - &v52)
        {
          goto LABEL_38;
        }
        if ((uint64_t)v22 >= 1)
        {
          if (v22 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          if (v22 >= 0x17)
          {
            uint64_t v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17) {
              uint64_t v24 = v22 | 7;
            }
            uint64_t v25 = v24 + 1;
            p_b = (std::locale::__imp *)operator new(v24 + 1);
            size_t v55 = v22;
            int64_t v56 = v25 | 0x8000000000000000;
            __b.__locale_ = p_b;
          }
          else
          {
            HIBYTE(v56) = v22;
            p_b = (std::locale::__imp *)&__b;
          }
          memset(p_b, v16, v22);
          *((unsigned char *)p_b + v22) = 0;
          if (v56 >= 0) {
            locale = &__b;
          }
          else {
            locale = __b.__locale_;
          }
          uint64_t v27 = (*(uint64_t (**)(void *, void *, size_t))(*(void *)rdbuf + 96))(rdbuf, locale, v22);
          uint64_t v28 = v27;
          if (SHIBYTE(v56) < 0)
          {
            operator delete(__b.__locale_);
            if (v28 != v22) {
              goto LABEL_38;
            }
          }
          else if (v27 != v22)
          {
            goto LABEL_38;
          }
        }
        if (v53 - v18 >= 1
          && (*(uint64_t (**)(void *, char *, int64_t))(*(void *)rdbuf + 96))(rdbuf, v18, v53 - v18) != v53 - v18)
        {
LABEL_38:
          std::ios_base::clear((std::ios_base *)((char *)v43 + *(void *)(v43[0] - 24)), *(_DWORD *)((char *)&v44[1] + *(void *)(v43[0] - 24)) | 5);
          goto LABEL_39;
        }
        v13->__width_ = 0;
      }
LABEL_39:
      MEMORY[0x1A6238D00](v53);
      std::ostream::operator<<();
      v11 += 4;
      v12 -= 4;
      if (!v12) {
        goto LABEL_40;
      }
    }
  }
LABEL_41:
  LOBYTE(__b.__locale_) = 125;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)&__b, 1);
  if ((v50 & 0x10) != 0)
  {
    unint64_t v31 = v49;
    if (v49 < v46)
    {
      unint64_t v49 = v46;
      unint64_t v31 = v46;
    }
    __int32 v32 = (const void **)&v45;
  }
  else
  {
    if ((v50 & 8) == 0)
    {
      size_t v29 = 0;
      __int32 v30 = a2;
      *((unsigned char *)a2 + 23) = 0;
      goto LABEL_56;
    }
    __int32 v32 = (const void **)v44;
    unint64_t v31 = v44[2];
  }
  __int32 v30 = a2;
  uint64_t v33 = *v32;
  size_t v29 = v31 - (void)*v32;
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  if (v29 >= 0x17)
  {
    uint64_t v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v34 = v29 | 7;
    }
    uint64_t v35 = v34 + 1;
    uint64_t v36 = operator new(v34 + 1);
    a2[1] = v29;
    a2[2] = v35 | 0x8000000000000000;
    *a2 = v36;
    __int32 v30 = v36;
    goto LABEL_55;
  }
  *((unsigned char *)a2 + 23) = v29;
  if (v29) {
LABEL_55:
  }
    memmove(v30, v33, v29);
LABEL_56:
  *((unsigned char *)v30 + v29) = 0;
  v42[0] = *MEMORY[0x1E4FBA408];
  uint64_t v37 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v42 + *(void *)(v42[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v43[0] = v37;
  v43[1] = MEMORY[0x1E4FBA470] + 16;
  if (v48 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v51);
}

void sub_1A2408670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void gss::ConditionalStyle<gss::ScenePropertyID>::~ConditionalStyle(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)a1 = &unk_1EF567450;
  uint64_t v2 = (void *)(a1 + 128);
  if (!*(unsigned char *)(a1 + 140) && *v2)
  {
    if (*(_WORD *)(a1 + 136))
    {
      uint64_t v3 = 24 * *(unsigned __int16 *)(a1 + 136);
      size_t v4 = (unsigned char *)(*v2 + 20);
      do
      {
        unsigned int v5 = v4 - 12;
        if (!*v4 && *v5)
        {
          uint64_t v6 = gss::Allocator::instance((gss::Allocator *)a1);
          a1 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v6 + 40))(v6, *(void *)(v4 - 12), 4 * *((unsigned __int16 *)v4 - 1));
        }
        *(void *)(v4 - 7) = 0;
        void *v5 = 0;
        v4 += 24;
        v3 -= 24;
      }
      while (v3);
    }
    uint64_t v7 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v7 + 40))(v7, *(void *)(v1 + 128), 24 * *(unsigned __int16 *)(v1 + 138));
  }
  *(void *)((char *)v2 + 5) = 0;
  void *v2 = 0;
  gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(v1);
  JUMPOUT(0x1A6239270);
}

uint64_t gss::ConditionalStyle<gss::ScenePropertyID>::~ConditionalStyle(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)a1 = &unk_1EF567450;
  uint64_t v2 = (void *)(a1 + 128);
  if (!*(unsigned char *)(a1 + 140) && *v2)
  {
    if (*(_WORD *)(a1 + 136))
    {
      uint64_t v3 = 24 * *(unsigned __int16 *)(a1 + 136);
      size_t v4 = (unsigned char *)(*v2 + 20);
      do
      {
        unsigned int v5 = v4 - 12;
        if (!*v4 && *v5)
        {
          uint64_t v6 = gss::Allocator::instance((gss::Allocator *)a1);
          a1 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v6 + 40))(v6, *(void *)(v4 - 12), 4 * *((unsigned __int16 *)v4 - 1));
        }
        *(void *)(v4 - 7) = 0;
        void *v5 = 0;
        v4 += 24;
        v3 -= 24;
      }
      while (v3);
    }
    uint64_t v7 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v7 + 40))(v7, *(void *)(v1 + 128), 24 * *(unsigned __int16 *)(v1 + 138));
  }
  *(void *)((char *)v2 + 5) = 0;
  void *v2 = 0;
  return gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(v1);
}

void gss::CartoStyle<gss::ScenePropertyID>::to_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(void *)(a1 + 104)) {
    uint64_t v3 = *(const char **)(a1 + 104);
  }
  else {
    uint64_t v3 = "";
  }
  size_t v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4) {
LABEL_11:
  }
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  uint64_t v9 = std::string::insert(&__dst, 0, "[", 1uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v13, "]", 1uLL);
  *a2 = *v11;
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_16:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_16;
  }
}

void sub_1A2408A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(uint64_t a1)
{
  gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<gss::ConditionalStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 192);
}

uint64_t std::__shared_ptr_emplace<gss::ConditionalStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<gss::ConditionalStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A660;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gss::ConditionalStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::ConditionalStyle<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 160);
}

uint64_t std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A4D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A4D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::function<BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::ScenePropertyID> &,unsigned long long,gss::SceneConfigPropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<gss::StylePropertySet<gss::ScenePropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 112);
}

uint64_t std::__shared_ptr_emplace<gss::StylePropertySet<gss::ScenePropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return gss::StylePropertySet<gss::PropertyID>::~StylePropertySet(a1 + 32);
}

void std::__shared_ptr_emplace<gss::StylePropertySet<gss::ScenePropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gss::StylePropertySet<gss::ScenePropertyID>,geo::StdAllocator<gss::StylePropertySet<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57EF88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF57EF88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#2}>,void ()(BOOL)>::~__func()
{
}

uint64_t std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57EFD0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF57EFD0;
  result[1] = v3;
  return result;
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
}

uint64_t std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 40;
  uint64_t result = *(void *)(a1 + 64);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57CD80;
  long long v3 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 17) = *(_OWORD *)(result + 17);
  *(_OWORD *)(a2 + 8) = v3;
  uint64_t v4 = *(void *)(result + 64);
  if (v4)
  {
    if (v4 == result + 40)
    {
      *(void *)(a2 + 64) = a2 + 40;
      std::string::size_type v5 = *(uint64_t (**)(void))(**(void **)(result + 64) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v4 + 16))(*(void *)(result + 64));
      *(void *)(a2 + 64) = result;
    }
  }
  else
  {
    *(void *)(a2 + 64) = 0;
  }
  return result;
}

void std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57CD80;
  uint64_t v1 = a1 + 5;
  uint64_t v2 = (void *)a1[8];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57CD80;
  uint64_t v2 = a1 + 5;
  long long v3 = (void *)a1[8];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57CEA0;
}

void *std::__function::__func<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57CEA0;
  return result;
}

void std::__function::__func<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> gss::StyleManagerExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
}

void std::__shared_ptr_emplace<gss::StyleSheet<gss::ScenePropertyID>>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 3023) < 0) {
    operator delete(*(void **)(a1 + 3000));
  }
  uint64_t v2 = *(void *)(a1 + 2984);
  *(void *)(a1 + 2984) = 0;
  if (v2)
  {
    long long v3 = *(void **)v2;
    if (*(void *)v2)
    {
      uint64_t v4 = *(void **)(v2 + 8);
      std::string::size_type v5 = *(void **)v2;
      if (v4 != v3)
      {
        uint64_t v6 = v4 - 4;
        uint64_t v7 = v4 - 4;
        do
        {
          uint64_t v9 = (void *)v7[3];
          if (v7 == v9)
          {
            (*(void (**)(void *))(*v7 + 32))(v7);
          }
          else if (v9)
          {
            (*(void (**)(void *, void *))(*v9 + 40))(v9, v5);
          }
          v6 -= 4;
          BOOL v8 = v7 == v3;
          v7 -= 4;
        }
        while (!v8);
        std::string::size_type v5 = *(void **)v2;
      }
      *(void *)(v2 + 8) = v3;
      (*(void (**)(void, void *, void))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), v5, *(void *)(v2 + 16) - (void)v5);
    }
    MEMORY[0x1A6239270](v2, 0x20C40DC1BFBCFLL);
  }
  uint64_t v10 = *(void *)(a1 + 2976);
  *(void *)(a1 + 2976) = 0;
  if (v10)
  {
    uint64_t v11 = *(void **)v10;
    if (*(void *)v10)
    {
      uint64_t v12 = *(void **)(v10 + 8);
      std::string v13 = *(void **)v10;
      if (v12 != v11)
      {
        uint64_t v14 = v12 - 4;
        unsigned int v15 = v12 - 4;
        do
        {
          int v16 = (void *)v15[3];
          if (v15 == v16)
          {
            (*(void (**)(void *))(*v15 + 32))(v15);
          }
          else if (v16)
          {
            (*(void (**)(void *, void *))(*v16 + 40))(v16, v13);
          }
          v14 -= 4;
          BOOL v8 = v15 == v11;
          v15 -= 4;
        }
        while (!v8);
        std::string v13 = *(void **)v10;
      }
      *(void *)(v10 + 8) = v11;
      (*(void (**)(void, void *, void))(**(void **)(v10 + 24) + 40))(*(void *)(v10 + 24), v13, *(void *)(v10 + 16) - (void)v13);
    }
    MEMORY[0x1A6239270](v10, 0x20C40DC1BFBCFLL);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 2912));
  std::mutex::~mutex((std::mutex *)(a1 + 2848));
  std::future<void>::~future((std::future<void> *)(a1 + 2840));
  std::future<void>::~future((std::future<void> *)(a1 + 2832));
  MEMORY[0x1A62390B0](a1 + 2824);
  MEMORY[0x1A62390B0](a1 + 2816);
  std::__hash_table<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::__unordered_map_hasher<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::hash<gss::StyleSheetResultCacheKey>,std::equal_to<gss::StyleSheetResultCacheKey>,true>,std::__unordered_map_equal<gss::StyleSheetResultCacheKey,std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,std::equal_to<gss::StyleSheetResultCacheKey>,std::hash<gss::StyleSheetResultCacheKey>,true>,geo::StdAllocator<std::__hash_value_type<gss::StyleSheetResultCacheKey,std::shared_ptr<gss::CartoStyle<gss::PropertyID>>>,gss::Allocator>>::__deallocate_node((gss::Allocator *)(a1 + 2752), *(void **)(a1 + 2776));
  uint64_t v17 = *(void *)(a1 + 2752);
  *(void *)(a1 + 2752) = 0;
  if (v17) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 2768) + 40))(*(void *)(a1 + 2768), v17, 8 * *(void *)(a1 + 2760));
  }
  __int32 v18 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 2552));
  if (v18) {
    geo::read_write_lock::logFailure(v18, (uint64_t)"destruction", v19);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 2488));
  std::mutex::~mutex((std::mutex *)(a1 + 2424));
  std::mutex::~mutex((std::mutex *)(a1 + 2360));
  std::mutex::~mutex((std::mutex *)(a1 + 2296));
  std::mutex::~mutex((std::mutex *)(a1 + 2232));
  std::mutex::~mutex((std::mutex *)(a1 + 2168));
  std::mutex::~mutex((std::mutex *)(a1 + 2104));
  std::mutex::~mutex((std::mutex *)(a1 + 2040));
  std::mutex::~mutex((std::mutex *)(a1 + 1976));
  std::mutex::~mutex((std::mutex *)(a1 + 1912));
  std::mutex::~mutex((std::mutex *)(a1 + 1848));
  std::mutex::~mutex((std::mutex *)(a1 + 1784));
  std::mutex::~mutex((std::mutex *)(a1 + 1720));
  std::mutex::~mutex((std::mutex *)(a1 + 1656));
  std::mutex::~mutex((std::mutex *)(a1 + 1592));
  std::mutex::~mutex((std::mutex *)(a1 + 1528));
  std::mutex::~mutex((std::mutex *)(a1 + 1464));
  std::mutex::~mutex((std::mutex *)(a1 + 1400));
  std::mutex::~mutex((std::mutex *)(a1 + 1336));
  std::mutex::~mutex((std::mutex *)(a1 + 1272));
  std::mutex::~mutex((std::mutex *)(a1 + 1208));
  std::mutex::~mutex((std::mutex *)(a1 + 1144));
  std::mutex::~mutex((std::mutex *)(a1 + 1080));
  std::mutex::~mutex((std::mutex *)(a1 + 1016));
  std::mutex::~mutex((std::mutex *)(a1 + 952));
  std::mutex::~mutex((std::mutex *)(a1 + 888));
  std::mutex::~mutex((std::mutex *)(a1 + 824));
  std::mutex::~mutex((std::mutex *)(a1 + 760));
  std::mutex::~mutex((std::mutex *)(a1 + 696));
  std::mutex::~mutex((std::mutex *)(a1 + 632));
  std::mutex::~mutex((std::mutex *)(a1 + 568));
  std::mutex::~mutex((std::mutex *)(a1 + 504));
  gss::InternAllocators<gss::PropertyID>::~InternAllocators(a1 + 256);
  std::mutex::~mutex((std::mutex *)(a1 + 192));
  BOOL v20 = *(gss::Allocator **)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v20)
  {
    uint64_t v21 = gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>::~StyleMatchingTree(v20);
    BOOL v20 = (gss::Allocator *)MEMORY[0x1A6239270](v21, 0x1020C40FE16DC66);
  }
  size_t v22 = (void *)(a1 + 168);
  if (!*(unsigned char *)(a1 + 180) && *v22)
  {
    if (*(_WORD *)(a1 + 176))
    {
      uint64_t v23 = 16 * *(unsigned __int16 *)(a1 + 176);
      uint64_t v24 = (std::__shared_weak_count **)(*v22 + 8);
      do
      {
        uint64_t v25 = *v24;
        if (*v24 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        v24 += 2;
        v23 -= 16;
      }
      while (v23);
    }
    uint64_t v26 = gss::Allocator::instance(v20);
    BOOL v20 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v26 + 40))(v26, *(void *)(a1 + 168), 16 * *(unsigned __int16 *)(a1 + 178));
  }
  *(void *)(a1 + 173) = 0;
  *size_t v22 = 0;
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 152);
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    uint64_t v28 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v28) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v28 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v28) {
      goto LABEL_48;
    }
  }
  if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_48:
  size_t v29 = *(std::__shared_weak_count **)(a1 + 120);
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  __int32 v30 = (void *)(a1 + 88);
  if (!*(unsigned char *)(a1 + 100) && *v30)
  {
    if (*(_WORD *)(a1 + 96))
    {
      uint64_t v31 = 16 * *(unsigned __int16 *)(a1 + 96);
      __int32 v32 = (std::__shared_weak_count **)(*v30 + 8);
      do
      {
        uint64_t v33 = *v32;
        if (*v32 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v32 += 2;
        v31 -= 16;
      }
      while (v31);
    }
    uint64_t v34 = gss::Allocator::instance(v20);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v34 + 40))(v34, *(void *)(a1 + 88), 16 * *(unsigned __int16 *)(a1 + 98));
  }
  *(void *)(a1 + 93) = 0;
  *__int32 v30 = 0;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v35 = *(std::__shared_weak_count **)(a1 + 48);
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    uint64_t v36 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v36) {
      return;
    }
  }
  else
  {
    uint64_t v36 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v36) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v36);
}

void std::__shared_ptr_emplace<gss::StyleSheet<gss::ScenePropertyID>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gss::StyleSheet<gss::ScenePropertyID>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t __Block_byref_object_copy__26338(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26339(uint64_t a1)
{
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  *(void *)(a1 + 8) = &unk_1EF559D98;
  uint64_t v2 = *(void **)(a1 + 16);
}

std::string *std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF574E98;
  return std::__compressed_pair_elem<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},0,false>::__compressed_pair_elem[abi:nn180100]<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1} const&,0ul>((std::string *)(a2 + 8), a1 + 8);
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF574E98;

  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  *(void *)(a1 + 8) = &unk_1EF559D98;

  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF574E98;

  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  *(void *)(a1 + 8) = &unk_1EF559D98;

  return a1;
}

uint64_t std::__shared_ptr_pointer<gss::ClientStyleState<gss::ScenePropertyID> *,std::shared_ptr<gss::ClientStyleState<gss::ScenePropertyID>>::__shared_ptr_default_delete<gss::ClientStyleState<gss::ScenePropertyID>,gss::ClientStyleState<gss::ScenePropertyID>>,std::allocator<gss::ClientStyleState<gss::ScenePropertyID>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    gss::ClientStyleState<gss::PropertyID>::~ClientStyleState(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<gss::ClientStyleState<gss::ScenePropertyID> *,std::shared_ptr<gss::ClientStyleState<gss::ScenePropertyID>>::__shared_ptr_default_delete<gss::ClientStyleState<gss::ScenePropertyID>,gss::ClientStyleState<gss::ScenePropertyID>>,std::allocator<gss::ClientStyleState<gss::ScenePropertyID>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__2NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D488;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__2NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56D488;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__2NS_9allocatorISH_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D440;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56D440;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md10StyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_17StyleLogicContextEE3__1NS_9allocatorISH_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::StyleLogic,md::StyleLogicContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xE42D19AFCA302E68 && *(void *)(a3 + 32)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 160))(result, a2, v4);
  }
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t gdc::ObjectHolder<md::StyleLogicContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::StyleLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5556E0;
  uint64_t v1 = (md::StyleLogicContext *)a1[4];
  if (v1)
  {
    md::StyleLogicContext::~StyleLogicContext(v1);
    MEMORY[0x1A6239270]();
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::StyleLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5556E0;
  uint64_t v2 = (md::StyleLogicContext *)a1[4];
  if (v2)
  {
    md::StyleLogicContext::~StyleLogicContext(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

void md::StyleLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  md::LogicBase::createDebugNode(a1, a2);
  *((unsigned char *)&v112.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v112, "StyleManager");
  ChildNode = gdc::DebugTreeNode::createChildNode(a2, (long long *)&v112);
  uint64_t v5 = *(void *)(a1 + 256);
  if (!v5) {
    return;
  }
  uint64_t v6 = (uint64_t)ChildNode;
  *((unsigned char *)&v112.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v112, "Stylesheet Name");
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v98 = 0;
  long long __p = 0uLL;
  int v99 = 4;
  if (v96 != (unsigned char *)v7)
  {
    if (*(char *)(v7 + 55) < 0)
    {
      std::string::__assign_no_alias<true>(&__p, *(void **)(v7 + 32), *(void *)(v7 + 40));
    }
    else
    {
      long long v8 = *(_OWORD *)(v7 + 32);
      uint64_t v98 = *(void *)(v7 + 48);
      long long __p = v8;
    }
  }
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v112, (uint64_t)v96);
  if (SHIBYTE(v98) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 256) + 16) + 80);
  strcpy((char *)&v112, "Is from a Dev Resource");
  *((unsigned char *)&v112.__r_.__value_.__s + 23) = 22;
  int v95 = 0;
  memset(&v94[4], 0, 24);
  v94[0] = v9;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v112, (uint64_t)v94);
  uint64_t v10 = *(void *)(*(void *)(a1 + 256) + 16);
  *((unsigned char *)&v112.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&v112, "Supports Night Mode");
  unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v10 + 2784));
  if ((v11 & 1) == 0) {
    std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v10 + 2808));
  }
  uint64_t v12 = *(unsigned __int8 *)(v10 + 136);
  int v93 = 0;
  memset(&v92[4], 0, 24);
  v92[0] = v12;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v112, (uint64_t)v92);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v112.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v112, "Is Finished Decoding");
  unsigned __int8 v13 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(a1 + 256) + 16) + 2786));
  int v91 = 0;
  memset(&v90[4], 0, 24);
  v90[0] = v13 & 1;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v112, (uint64_t)v90);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v112.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v112, "Is Valid");
  unsigned __int8 v14 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(a1 + 256) + 16) + 2787));
  int v89 = 0;
  memset(&v88[4], 0, 24);
  v88[0] = v14 & 1;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v112, (uint64_t)v88);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v112.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v112, "Target Display");
  unsigned int v15 = gss::to_string(*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 256) + 16) + 60));
  memset(&v86, 0, sizeof(v86));
  int v87 = 4;
  if (v15)
  {
    std::string::__assign_external(&v86, v15);
  }
  else
  {
    *((unsigned char *)&v86.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v86, "<null>");
  }
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v112, (uint64_t)v85);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = *(void *)(a1 + 208);
  *((unsigned char *)&v112.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v112, "Blending Factor");
  double v17 = *(float *)(v16 + 256);
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  int v84 = 2;
  double v80 = v17;
  gdc::DebugTreeNode::addProperty(v6, (uint64_t)&v112, (uint64_t)v79);
  unsigned __int8 v18 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(a1 + 256) + 16) + 2787));
  if ((v18 & 1) == 0)
  {
    HIBYTE(v78[2]) = 17;
    strcpy((char *)v78, "Stylesheet Detail");
    uint64_t v19 = *(void *)(a1 + 256);
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v103);
    BOOL v20 = (std::string::size_type *)MEMORY[0x1E4FBA418];
    if (!*(void *)(v19 + 16))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v103, (uint64_t)"  No stylesheet\n", 16);
      goto LABEL_83;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v103, (uint64_t)"  Stylesheet:\n", 14);
    uint64_t v21 = *(void *)(v19 + 16);
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v112);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)"    Name: ", 10);
    int v22 = *(char *)(v21 + 55);
    if (v22 >= 0) {
      uint64_t v23 = v21 + 32;
    }
    else {
      uint64_t v23 = *(void *)(v21 + 32);
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(v21 + 55);
    }
    else {
      uint64_t v24 = *(void *)(v21 + 40);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, v23, v24);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)"    Finished decoding: ", 23);
    unsigned __int8 v25 = atomic_load((unsigned __int8 *)(v21 + 2786));
    if (v25) {
      uint64_t v26 = "yes";
    }
    else {
      uint64_t v26 = "no";
    }
    if (v25) {
      uint64_t v27 = 3;
    }
    else {
      uint64_t v27 = 2;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)v26, v27);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)"    Valid: ", 11);
    unsigned __int8 v28 = atomic_load((unsigned __int8 *)(v21 + 2787));
    if (v28) {
      size_t v29 = "yes";
    }
    else {
      size_t v29 = "no";
    }
    if (v28) {
      uint64_t v30 = 3;
    }
    else {
      uint64_t v30 = 2;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)v29, v30);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)"    Loaded from dev resources: ", 31);
    if (*(unsigned char *)(v21 + 80)) {
      uint64_t v31 = "yes";
    }
    else {
      uint64_t v31 = "no";
    }
    if (*(unsigned char *)(v21 + 80)) {
      uint64_t v32 = 3;
    }
    else {
      uint64_t v32 = 2;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)v31, v32);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)"\n", 1);
    unsigned __int8 v33 = atomic_load((unsigned __int8 *)(v21 + 2787));
    if ((v33 & 1) == 0)
    {
      uint64_t v34 = *(unsigned __int8 *)(v21 + 2999);
      if ((v34 & 0x80u) != 0) {
        uint64_t v34 = *(void *)(v21 + 2984);
      }
      if (v34)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, (uint64_t)"    Decode errors:\n", 19);
        int v35 = *(char *)(v21 + 2999);
        if (v35 >= 0) {
          uint64_t v36 = v21 + 2976;
        }
        else {
          uint64_t v36 = *(void *)(v21 + 2976);
        }
        if (v35 >= 0) {
          uint64_t v37 = *(unsigned __int8 *)(v21 + 2999);
        }
        else {
          uint64_t v37 = *(void *)(v21 + 2984);
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v112, v36, v37);
      }
    }
    if ((v119 & 0x10) != 0)
    {
      unint64_t v40 = v118;
      if (v118 < v115)
      {
        unint64_t v118 = v115;
        unint64_t v40 = v115;
      }
      uint64_t v41 = (const void **)&v114;
    }
    else
    {
      if ((v119 & 8) == 0)
      {
        size_t v38 = 0;
        HIBYTE(v102) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_74;
      }
      uint64_t v41 = (const void **)v113;
      unint64_t v40 = v113[2];
    }
    size_t v42 = *v41;
    size_t v38 = v40 - (void)*v41;
    if (v38 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    if (v38 >= 0x17)
    {
      uint64_t v43 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17) {
        uint64_t v43 = v38 | 7;
      }
      uint64_t v44 = v43 + 1;
      p_dst = (void **)operator new(v43 + 1);
      int64_t v102 = v44 | 0x8000000000000000;
      std::string __dst = p_dst;
      BOOL v101 = (char *)v38;
    }
    else
    {
      HIBYTE(v102) = v40 - *(unsigned char *)v41;
      p_dst = (void **)&__dst;
      if (!v38)
      {
LABEL_74:
        *((unsigned char *)p_dst + v38) = 0;
        v112.__r_.__value_.__r.__words[0] = *v20;
        *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words
                                  + *(void *)(v112.__r_.__value_.__r.__words[0] - 24)) = v20[3];
        v112.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
        if (v117 < 0) {
          operator delete(v116);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A62391A0](&v120);
        if (v102 >= 0) {
          uint64_t v45 = (void **)&__dst;
        }
        else {
          uint64_t v45 = __dst;
        }
        if (v102 >= 0) {
          uint64_t v46 = HIBYTE(v102);
        }
        else {
          uint64_t v46 = (uint64_t)v101;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v103, (uint64_t)v45, v46);
        if (SHIBYTE(v102) < 0)
        {
          operator delete(__dst);
          char v47 = v110;
          if ((v110 & 0x10) == 0) {
            goto LABEL_84;
          }
          goto LABEL_88;
        }
LABEL_83:
        char v47 = v110;
        if ((v110 & 0x10) == 0)
        {
LABEL_84:
          if ((v47 & 8) == 0)
          {
            size_t v48 = 0;
            HIBYTE(v73) = 0;
            unint64_t v49 = v72;
            goto LABEL_99;
          }
          int v50 = (const void **)v104;
          unint64_t v51 = v104[2];
LABEL_91:
          char v52 = *v50;
          size_t v48 = v51 - (void)*v50;
          if (v48 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          if (v48 >= 0x17)
          {
            uint64_t v53 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v48 | 7) != 0x17) {
              uint64_t v53 = v48 | 7;
            }
            uint64_t v54 = v53 + 1;
            unint64_t v49 = operator new(v53 + 1);
            v72[1] = (void *)v48;
            unint64_t v73 = v54 | 0x8000000000000000;
            v72[0] = v49;
          }
          else
          {
            HIBYTE(v73) = v51 - *(unsigned char *)v50;
            unint64_t v49 = v72;
            if (!v48)
            {
LABEL_99:
              *((unsigned char *)v49 + v48) = 0;
              v103.__r_.__value_.__r.__words[0] = *v20;
              *(std::string::size_type *)((char *)v103.__r_.__value_.__r.__words
                                        + *(void *)(v103.__r_.__value_.__r.__words[0] - 24)) = v20[3];
              v103.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
              if (v108 < 0) {
                operator delete(v107);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x1A62391A0](&v111);
              unint64_t v76 = 0;
              long long v75 = 0uLL;
              int v77 = 4;
              int v55 = SHIBYTE(v73);
              if (SHIBYTE(v73) < 0)
              {
                std::string::__assign_no_alias<true>(&v75, v72[0], (size_t)v72[1]);
              }
              else
              {
                long long v75 = *(_OWORD *)v72;
                unint64_t v76 = v73;
              }
              gdc::DebugTreeNode::addProperty(v6, (uint64_t)v78, (uint64_t)v74);
              if (SHIBYTE(v76) < 0)
              {
                operator delete((void *)v75);
                if ((v55 & 0x80000000) == 0)
                {
LABEL_106:
                  if ((SHIBYTE(v78[2]) & 0x80000000) == 0) {
                    goto LABEL_107;
                  }
LABEL_134:
                  operator delete((void *)v78[0]);
                  goto LABEL_107;
                }
              }
              else if ((v55 & 0x80000000) == 0)
              {
                goto LABEL_106;
              }
              operator delete(v72[0]);
              if ((SHIBYTE(v78[2]) & 0x80000000) == 0) {
                goto LABEL_107;
              }
              goto LABEL_134;
            }
          }
          memmove(v49, v52, v48);
          goto LABEL_99;
        }
LABEL_88:
        unint64_t v51 = v109;
        if (v109 < v106)
        {
          unint64_t v109 = v106;
          unint64_t v51 = v106;
        }
        int v50 = (const void **)&v105;
        goto LABEL_91;
      }
    }
    memmove(p_dst, v42, v38);
    goto LABEL_74;
  }
LABEL_107:
  *((unsigned char *)&v112.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v112, "Client Attributes");
  int64_t v56 = gdc::DebugTreeNode::createChildNode(v6, (long long *)&v112);
  int v57 = *(unsigned __int16 **)(a1 + 208);
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)(v57 + 8);
  BOOL v58 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v57 + 8));
  if (v58) {
    geo::read_write_lock::logFailure(v58, (uint64_t)"read lock", v59);
  }
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map(v78, (uint64_t *)v57 + 27);
  int v60 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v57 + 8));
  if (v60) {
    geo::read_write_lock::logFailure(v60, (uint64_t)"unlock", v61);
  }
  int v62 = WORD1(v78[1]);
  if (WORD1(v78[1]))
  {
    unsigned int v63 = 0;
    unsigned int v64 = 0;
    int v65 = 1;
    unsigned int v66 = WORD1(v78[1]);
    do
    {
      if (v64 < v66)
      {
        unsigned int v63 = (unsigned int *)(v78[0] + 4 * v64);
        int v57 = (unsigned __int16 *)(v78[0] + LOWORD(v78[1]) + 2 * v64);
      }
      std::to_string(&v103, v65);
      char v67 = std::string::insert(&v103, 0, "Attribute: ", 0xBuLL);
      std::string v112 = *v67;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      uint64_t v68 = *v63;
      uint64_t v69 = *v57;
      BOOL v101 = 0;
      uint64_t v70 = (char *)operator new(0x80uLL);
      int64_t v102 = (int64_t)(v70 + 128);
      *((void *)v70 + 1) = v68;
      *((void *)v70 + 5) = 0;
      *((void *)v70 + 6) = 0;
      *((void *)v70 + 4) = 0;
      *((_DWORD *)v70 + 14) = 1;
      *((void *)v70 + 12) = 0;
      *((void *)v70 + 9) = v69;
      *((void *)v70 + 13) = 0;
      *((void *)v70 + 14) = 0;
      *((_DWORD *)v70 + 30) = 1;
      std::string __dst = (void **)v70;
      BOOL v101 = v70 + 128;
      gdc::DebugTreeNode::addProperty((uint64_t)v56, (uint64_t)&v112, (uint64_t *)&__dst);
      if (v70[119] < 0)
      {
        operator delete(*((void **)v70 + 12));
        if ((v70[55] & 0x80000000) == 0) {
          goto LABEL_121;
        }
      }
      else if ((v70[55] & 0x80000000) == 0)
      {
        goto LABEL_121;
      }
      operator delete(*((void **)v70 + 4));
LABEL_121:
      operator delete(v70);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v112.__r_.__value_.__l.__data_);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
LABEL_127:
        }
          operator delete(v103.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_127;
      }
      unsigned int v66 = WORD1(v78[1]);
      if (v64 + 1 < WORD1(v78[1])) {
        ++v64;
      }
      else {
        unsigned int v64 = WORD1(v78[1]);
      }
      ++v65;
    }
    while (v64 != v62);
  }
  if (!BYTE6(v78[1]))
  {
    if (v78[0])
    {
      uint64_t v71 = gss::Allocator::instance(v60);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v71 + 40))(v71, v78[0], WORD2(v78[1]));
    }
  }
}

void sub_1A240A9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, gdc::DebugTreeNode *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x258]);
  if (a26 < 0) {
    operator delete(a21);
  }
  gdc::DebugTreeNode::~DebugTreeNode(a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_1,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56D638;
}

void *std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_1,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF56D638;
  return result;
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_1,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_1>,void ()(std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> const&)>::~__func()
{
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_0,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56D5F0;
}

void *std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_0,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF56D5F0;
  return result;
}

void std::__function::__func<md::StyleLogic::prune(md::PruneLevel)::$_0,std::allocator<md::StyleLogic::prune(md::PruneLevel)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)>::~__func()
{
}

void gss::ClientStyleState<gss::ScenePropertyID>::setSourceMapDisplayStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = (pthread_rwlock_t *)(a1 + 16);
  uint64_t v20 = a2;
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  }
  gss::DisplayStyle::applyDisplayStyle((unsigned __int8 *)&v20, (uint64_t *)(a1 + 216));
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::sort(a1 + 216);
  float v5 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 256)));
  LOBYTE(v6) = 1;
  if (v5 <= 0.0)
  {
    unint64_t v6 = *(unsigned __int16 *)(a1 + 242);
    if (v6 != *(unsigned __int16 *)(a1 + 226)) {
      goto LABEL_13;
    }
    if (!*(_WORD *)(a1 + 242)) {
      goto LABEL_14;
    }
    uint64_t v7 = *(_DWORD **)(a1 + 232);
    long long v8 = *(_DWORD **)(a1 + 216);
    if (*v7 == *v8
      && (uint64_t v9 = *(unsigned __int16 *)(a1 + 224),
          uint64_t v10 = *(unsigned __int16 *)(a1 + 240),
          *(unsigned __int16 *)((char *)v7 + v10) == *(unsigned __int16 *)((char *)v8 + v9)))
    {
      unint64_t v11 = 0;
      uint64_t v12 = v7 + 1;
      unsigned __int8 v13 = v8 + 1;
      uint64_t v14 = (uint64_t)v7 + v10 + 2;
      uint64_t v15 = (uint64_t)v8 + v9 + 2;
      while (v6 - 1 != v11)
      {
        uint64_t v16 = v11++;
        if (v12[v16] != v13[v16]) {
          goto LABEL_20;
        }
        if (*(unsigned __int16 *)(v14 + 2 * v16) != *(unsigned __int16 *)(v15 + 2 * v16))
        {
          unint64_t v11 = v16 + 1;
          goto LABEL_20;
        }
      }
      unint64_t v11 = *(unsigned __int16 *)(a1 + 242);
LABEL_20:
      LOBYTE(v6) = v11 < v6;
    }
    else
    {
LABEL_13:
      LOBYTE(v6) = 1;
    }
  }
LABEL_14:
  atomic_store(v6, (unsigned __int8 *)(a1 + 254));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 248), 1u);
  double v17 = (geo::read_write_lock *)pthread_rwlock_unlock(v19);
  if (v17)
  {
    geo::read_write_lock::logFailure(v17, (uint64_t)"unlock", v18);
  }
}

void sub_1A240AD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9)
{
}

void md::StyleLogic::~StyleLogic(md::StyleLogic *this)
{
  md::StyleLogic::~StyleLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;

  *(void *)this = &unk_1EF530430;
  uint64_t v2 = (void *)*((void *)this + 148);
  if (v2)
  {
    [v2 stop];
    uint64_t v3 = (void *)*((void *)this + 148);
    if (v3)
    {
      *((void *)this + 148) = 0;
    }
  }
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 1272);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 158);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  float v5 = (std::__shared_weak_count *)*((void *)this + 156);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 154);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 152);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *((void *)this + 147) = &unk_1EF5596D8;

  *((void *)this + 144) = &unk_1EF559978;
  long long v8 = (void *)*((void *)this + 141);
  if (v8)
  {
    *((void *)this + 142) = v8;
    operator delete(v8);
  }
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogic *)((char *)this + 928));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogic *)((char *)this + 760));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogic *)((char *)this + 592));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogic *)((char *)this + 424));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogic *)((char *)this + 256));
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (*((unsigned char *)this + 179)) {
    *((unsigned char *)this + 179) = 0;
  }
  if (*((unsigned char *)this + 168)) {
    *((unsigned char *)this + 168) = 0;
  }

  *((void *)this + 16) = &unk_1EF559798;
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void sub_1A240B0D4(_Unwind_Exception *a1)
{
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v1 + 1272);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 1256);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 1240);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 1224);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 1208);
  *(void *)(v1 + 1176) = &unk_1EF5596D8;

  *(void *)(v1 + 1152) = &unk_1EF559978;
  uint64_t v3 = *(void **)(v1 + 1128);
  if (v3)
  {
    *(void *)(v1 + 1136) = v3;
    operator delete(v3);
  }
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)(v1 + 928));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)(v1 + 760));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)(v1 + 592));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)(v1 + 424));
  md::StyleLogicContext::~StyleLogicContext((md::StyleLogicContext *)(v1 + 256));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 240);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 224);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 208);
  if (*(unsigned char *)(v1 + 179)) {
    *(unsigned char *)(v1 + 179) = 0;
  }
  if (*(unsigned char *)(v1 + 168)) {
    *(unsigned char *)(v1 + 168) = 0;
  }

  *(void *)(v1 + 128) = &unk_1EF559798;
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

void geo::_retain_ptr<VKSceneConfiguration * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559978;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKSceneConfiguration * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559978;

  return a1;
}

void std::__function::__func<md::StyleLogic::StyleLogic(float,VKSharedResources *,objc_object  {objcproto14MDRenderTarget}*,md::MapEngine *,md::MapEngineSettings const*,md::World *,std::shared_ptr<md::TaskContext> const&,md::AnimationRunner const*,BOOL,md::World *<md::RunLoopController> const&,VKMapPurpose)::$_0,std::allocator<VKMapPurpose>,void ()(BOOL)>::operator()()
{
  id v0 = [MEMORY[0x1E4F64918] modernManager];
  [v0 devResourcesFolderDidChange];
}

void sub_1A240B2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__function::__func<md::StyleLogic::StyleLogic(float,VKSharedResources *,objc_object  {objcproto14MDRenderTarget}*,md::MapEngine *,md::MapEngineSettings const*,md::World *,std::shared_ptr<md::TaskContext> const&,md::AnimationRunner const*,BOOL,md::World *<md::RunLoopController> const&,VKMapPurpose)::$_0,std::allocator<VKMapPurpose>,void ()(BOOL)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF56D680;
  return result;
}

void std::__function::__func<md::StyleLogic::StyleLogic(float,VKSharedResources *,objc_object  {objcproto14MDRenderTarget}*,md::MapEngine *,md::MapEngineSettings const*,md::World *,std::shared_ptr<md::TaskContext> const&,md::AnimationRunner const*,BOOL,md::World *<md::RunLoopController> const&,VKMapPurpose)::$_0,std::allocator<VKMapPurpose>,void ()(BOOL)>::~__func()
{
}

void std::__shared_ptr_emplace<md::StyleStateController>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      float v5 = v3 - 4;
      unint64_t v6 = v3 - 4;
      do
      {
        long long v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 4;
        BOOL v7 = v6 == v1;
        v6 -= 4;
      }
      while (!v7);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<md::StyleStateController>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::StyleStateController>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__shared_ptr_pointer<md::CallbackHolder<md::StyleLogic> *,std::shared_ptr<md::CallbackHolder<md::StyleLogic>>::__shared_ptr_default_delete<md::CallbackHolder<md::StyleLogic>,md::CallbackHolder<md::StyleLogic>>,std::allocator<md::CallbackHolder<md::StyleLogic>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 24);
  if (result)
  {
    *uint64_t result = 0;
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::CallbackHolder<md::StyleLogic> *,std::shared_ptr<md::CallbackHolder<md::StyleLogic>>::__shared_ptr_default_delete<md::CallbackHolder<md::StyleLogic>,md::CallbackHolder<md::StyleLogic>>,std::allocator<md::CallbackHolder<md::StyleLogic>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::StyleLogic::setRouteTransportType(uint64_t a1, char a2, unsigned __int8 a3)
{
  if (*(unsigned char *)(a1 + 168)) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (*(unsigned __int8 *)(a1 + 169) == a3) {
      return;
    }
LABEL_11:
    *(unsigned char *)(a1 + 169) = a3;
    goto LABEL_12;
  }
  if ((*(unsigned char *)(a1 + 168) != 0) == (a2 != 0)) {
    return;
  }
  if (!a2)
  {
    if (*(unsigned char *)(a1 + 168)) {
      *(unsigned char *)(a1 + 168) = 0;
    }
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(void *)(a1 + 208), 0x10053u);
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(void *)(a1 + 224), 0x10053u);
    goto LABEL_13;
  }
  if (*(unsigned char *)(a1 + 168)) {
    goto LABEL_11;
  }
  *(unsigned char *)(a1 + 169) = a3;
  *(unsigned char *)(a1 + 168) = 1;
LABEL_12:
  gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x10053u, a3);
  gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(void *)(a1 + 224), 0x10053u, *(unsigned __int8 *)(a1 + 169));
LABEL_13:
  char v8 = 4;
  float v5 = *(char **)(a1 + 1128);
  unint64_t v6 = *(char **)(a1 + 1136);
  if (v5 != v6)
  {
    while (*v5 <= 3u)
    {
      if (++v5 == v6) {
        goto LABEL_19;
      }
    }
  }
  if (v5 == v6 || (unint64_t v6 = v5, *v5 != 4)) {
LABEL_19:
  }
    std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v6, &v8);
  uint64_t v7 = **(void **)(a1 + 1240);
  if (v7)
  {
    char v9 = 12;
    md::MapEngine::setNeedsTick(v7, &v9);
  }
}

void md::StyleLogic::setDisplayStyle(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = *(unsigned char *)(a1 + 164);
  *(unsigned char *)(a1 + 176) = BYTE2(a2);
  unint64_t v4 = a2 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v3 << 48);
  gss::ClientStyleState<gss::PropertyID>::setSourceMapDisplayStyle(*(void *)(a1 + 208), v4);
  gss::ClientStyleState<gss::PropertyID>::setTargetMapDisplayStyle(*(void *)(a1 + 208), v4);
  gss::ClientStyleState<gss::ScenePropertyID>::setSourceMapDisplayStyle(*(void *)(a1 + 224), v4);
  gss::ClientStyleState<gss::ScenePropertyID>::setTargetMapDisplayStyle(*(void *)(a1 + 224), v4);
  char v8 = 4;
  float v5 = *(char **)(a1 + 1128);
  unint64_t v6 = *(char **)(a1 + 1136);
  if (v5 != v6)
  {
    while (*v5 <= 3u)
    {
      if (++v5 == v6) {
        goto LABEL_7;
      }
    }
  }
  if (v5 == v6 || (unint64_t v6 = v5, *v5 != 4)) {
LABEL_7:
  }
    std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v6, &v8);
  uint64_t v7 = **(void **)(a1 + 1240);
  if (v7)
  {
    char v9 = 8;
    md::MapEngine::setNeedsTick(v7, &v9);
  }
}

void md::StyleLogic::setRouteSource(uint64_t a1, char a2, unsigned __int8 a3)
{
  if (*(unsigned char *)(a1 + 179)) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if (*(unsigned __int8 *)(a1 + 180) == a3) {
      return;
    }
LABEL_11:
    *(unsigned char *)(a1 + 180) = a3;
    goto LABEL_12;
  }
  if ((*(unsigned char *)(a1 + 179) != 0) == (a2 != 0)) {
    return;
  }
  if (!a2)
  {
    if (*(unsigned char *)(a1 + 179)) {
      *(unsigned char *)(a1 + 179) = 0;
    }
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(void *)(a1 + 208), 0x10085u);
    gss::ClientStyleState<gss::ScenePropertyID>::removeClientStyleAttribute(*(void *)(a1 + 224), 0x10085u);
    goto LABEL_13;
  }
  if (*(unsigned char *)(a1 + 179)) {
    goto LABEL_11;
  }
  *(unsigned char *)(a1 + 180) = a3;
  *(unsigned char *)(a1 + 179) = 1;
LABEL_12:
  gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 208), 0x10085u, a3);
  gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(void *)(a1 + 224), 0x10085u, *(unsigned __int8 *)(a1 + 180));
LABEL_13:
  char v8 = 4;
  float v5 = *(char **)(a1 + 1128);
  unint64_t v6 = *(char **)(a1 + 1136);
  if (v5 != v6)
  {
    while (*v5 <= 3u)
    {
      if (++v5 == v6) {
        goto LABEL_19;
      }
    }
  }
  if (v5 == v6 || (unint64_t v6 = v5, *v5 != 4)) {
LABEL_19:
  }
    std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v6, &v8);
  uint64_t v7 = **(void **)(a1 + 1240);
  if (v7)
  {
    char v9 = 12;
    md::MapEngine::setNeedsTick(v7, &v9);
  }
}

uint64_t std::__function::__func<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0,std::allocator<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0>,void ()(md::StyleLogic *)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF51E4A0;
  a2[1] = *(void *)(result + 8);
  return result;
}

void *std::__function::__func<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0,std::allocator<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0>,void ()(md::StyleLogic *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51E4A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0,std::allocator<md::StyleStateController::setHikingFeatureState(std::optional<gss::HikingFeatureState>,float)::$_0>,void ()(md::StyleLogic *)>::~__func()
{
}

void sub_1A240BA04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240BB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1A240BC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1A240BCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240BD94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240BF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1A240C078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240C0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A240C228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240C2D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240C394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240C504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1A240C5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240C658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A240C740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A240C808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::less<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::less<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>>>::destroy(*a1);
    std::__tree<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::__map_value_compare<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>,std::less<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__value_type<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::weak_ptr<altitude::RouteLineData>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[8];
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    a1[4] = off_1EF559738;

    operator delete(a1);
  }
}

void sub_1A240CC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240D440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36)
{
}

uint64_t std::pair<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const,std::weak_ptr<altitude::RouteLineData>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)a1 = off_1EF559738;

  return a1;
}

void **std::vector<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      float v5 = v3 - 24;
      unint64_t v6 = v3 - 24;
      uint64_t v7 = v3 - 24;
      do
      {
        char v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v2;
        unint64_t v6 = v7;
      }
      while (!v9);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1A240D8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A240DA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = *(id *)(a2 + 8);
  id v5 = v3;
  id v6 = v4;
  if (v6 == v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = [v5 isEqual:v6];
  }

  return v7;
}

void sub_1A240DB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240DC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A240DD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A240DDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A240DF54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240DF64(_Unwind_Exception *exception_object)
{
}

uint64_t geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, void **a2)
{
  id v3 = a1;
  id v4 = *a2;
  id v5 = v3;
  id v6 = v4;
  if (v6 == v5) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = [v5 isEqual:v6];
  }

  return v7;
}

void sub_1A240DFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240E174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240E184(_Unwind_Exception *exception_object)
{
}

void sub_1A240E328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240E338(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::pair<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const,std::weak_ptr<altitude::RouteLineData>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A240E4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A240E500(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::pair<geo::_retain_ptr<VKPolylineOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const,std::weak_ptr<altitude::RouteLineData>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A240E6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A240E6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A240FC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *a12, atomic_ullong *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (!atomic_fetch_add(v37, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  MEMORY[0x1A6239270](v41, 0xE1C40C3CBA79CLL);
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  if (!atomic_fetch_add(a13, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (a18 && !atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
    std::__shared_weak_count::__release_weak(a18);
  }
  uint64_t v43 = v36[7];
  v36[7] = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = (void *)v36[3];
  if (v44)
  {
    v36[4] = v44;
    operator delete(v44);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a19);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1A241019C(_Unwind_Exception *a1)
{
  altitude::RouteLineData::~RouteLineData(v1);
  MEMORY[0x1A6239270]();

  _Unwind_Resume(a1);
}

void sub_1A24101CC(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10A0C404B538C02);
  _Unwind_Resume(a1);
}

void sub_1A2410200()
{
}

uint64_t std::__shared_ptr_pointer<altitude::RouteLineData *,std::shared_ptr<altitude::RouteLineData>::__shared_ptr_default_delete<altitude::RouteLineData,altitude::RouteLineData>,std::allocator<altitude::RouteLineData>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 40);
    if (v2) {

    }
    id v3 = *(void **)(v1 + 32);
    if (v3) {

    }
    if (*(void *)v1) {
    id v4 = *(void **)(v1 + 8);
    }
    if (v4)
    {
      *(void *)(v1 + 16) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::RouteLineData *,std::shared_ptr<altitude::RouteLineData>::__shared_ptr_default_delete<altitude::RouteLineData,altitude::RouteLineData>,std::allocator<altitude::RouteLineData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void sub_1A24103E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24104F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2410858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2410994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2410A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2410D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A241102C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  a10.super_class = (Class)VKGlobeLineContainer;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A2411188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::VKGlobeRouteSplit::getPosition(id *this@<X0>, double *a2@<X8>)
{
  id v3 = this + 1;
  id WeakRetained = objc_loadWeakRetained(this + 1);

  if (WeakRetained)
  {
    id v5 = objc_loadWeakRetained(v3);
    [v5 presentationCoordinate];
    double v7 = v6;
    id v8 = objc_loadWeakRetained(v3);
    [v8 presentationCoordinate];
    double v10 = v9;

    *a2 = v7 * 0.0174532925;
    a2[1] = v10 * 0.0174532925;
  }
  else
  {
    *a2 = 0.0;
    a2[1] = 0.0;
  }
}

void sub_1A241123C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL md::VKGlobeRouteSplit::shouldSplit(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this + 1);
  BOOL v2 = WeakRetained != 0;

  return v2;
}

uint64_t md::VKGlobeRouteSplit::getIndex(id *this)
{
  uint64_t v1 = this + 1;
  id WeakRetained = objc_loadWeakRetained(this + 1);

  if (!WeakRetained) {
    return 0;
  }
  id v3 = objc_loadWeakRetained(v1);
  id v4 = [v3 routeMatch];
  uint64_t v5 = [v4 routeCoordinate];

  return v5;
}

void sub_1A24112FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::VKGlobeRouteSplit::~VKGlobeRouteSplit(id *this)
{
  objc_destroyWeak(this + 1);
  JUMPOUT(0x1A6239270);
}

{
  objc_destroyWeak(this + 1);
}

void md::MuninJunctionCrossStreet::createLabels(md::MuninJunctionCrossStreet *this, const md::MuninRoadLabelingContext *a2)
{
  uint64_t v4 = md::LabelSettingsStyleCache::muninRoadStyle(*(md::LabelSettingsStyleCache **)(*(void *)(*(void *)a2 + 336)
                                                                                   + 200));
  v93.f64[0] = md::MuninRoadEdge::direction(*((std::__shared_weak_count ****)this + 6), *(void *)(*((void *)this + 6) + 96) == **((void **)this + 1));
  v93.f64[1] = v5;
  float64_t v94 = v5;
  double v95 = -v93.f64[0];
  char v96 = 0;
  uint64_t v6 = *((void *)this + 1);
  _Q1 = *(float64x2_t *)(v6 + 8);
  double v8 = *(double *)(v6 + 24);
  *(float64x2_t *)((char *)this + 56) = _Q1;
  *((double *)this + 9) = v8;
  if (*(_OWORD *)&v93 == 0) {
    return;
  }
  float64x2_t v71 = vmlaq_n_f64(_Q1, v93, *(double *)(*((void *)a2 + 2) + 816) * 25.0);
  _D12 = 0x401921FB54442D18;
  long double v10 = 6.28318531 * _Q1.f64[0];
  __asm { FMLA            D0, D12, V1.D[1]; __x }
  long double v16 = exp(_D0);
  double v17 = atan(v16) * 2.0 + -1.57079633;
  long double v18 = fmod(v10, 6.28318531);
  double v19 = fmod(v18 + 6.28318531, 6.28318531) + -3.14159265;
  __double2 v20 = __sincos_stret(v17);
  double cosval = v20.__cosval;
  __double2 v21 = __sincos_stret(v19);
  _V1.D[1] = v71.f64[1];
  __asm { FMLA            D0, D12, V1.D[1]; __x }
  long double v24 = exp(_D0);
  double v25 = atan(v24) * 2.0 + -1.57079633;
  long double v26 = fmod(6.28318531 * v71.f64[0], 6.28318531);
  double v27 = fmod(v26 + 6.28318531, 6.28318531) + -3.14159265;
  __double2 v28 = __sincos_stret(v25);
  __double2 v29 = __sincos_stret(v27);
  int v90 = 0;
  __int16 v92 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  char v86 = 2;
  uint64_t v30 = (uint64_t *)**((void **)this + 6);
  unsigned __int8 v31 = atomic_load((unsigned __int8 *)(*(void *)a2 + 3392));
  uint64_t v32 = operator new(0x70uLL);
  v32[1] = 0;
  v32[2] = 0;
  void *v32 = &unk_1EF5802C0;
  uint64_t v33 = md::MuninRoadFeature::MuninRoadFeature((uint64_t)(v32 + 3), v30, v31 & 1);
  double v34 = 6378137.0 / sqrt(1.0 - v20.__sinval * v20.__sinval * 0.00669437999);
  double v35 = 6378137.0 / sqrt(1.0 - v28.__sinval * v28.__sinval * 0.00669437999);
  double v36 = -(v34 * cosval * v21.__cosval - v35 * v28.__cosval * v29.__cosval);
  double v37 = -(v34 * cosval * v21.__sinval - v35 * v28.__cosval * v29.__sinval);
  double v38 = -(v20.__sinval * 0.99330562 * v34 - v28.__sinval * 0.99330562 * v35);
  double v39 = 1.0 / sqrt(v36 * v36 + v37 * v37 + v38 * v38);
  double v40 = v39 * v36;
  double v41 = v39 * v37;
  double v42 = v39 * v38;
  double v43 = (v34 + v8) * cosval;
  double v44 = v43 * v21.__cosval;
  double v45 = v43 * v21.__sinval;
  uint64_t v46 = (std::__shared_weak_count *)*((void *)&v74 + 1);
  double v47 = (v8 + v34 * 0.99330562) * v20.__sinval;
  *(void *)&long long v74 = v33;
  *((void *)&v74 + 1) = v32;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  double v77 = v44;
  double v78 = v45;
  double v79 = v47;
  double v80 = *(float *)(v4 + 32);
  double v81 = v40;
  double v82 = v41;
  double v83 = v42;
  char v84 = v96;
  char v85 = 8;
  char v91 = *(unsigned char *)v4;
  __int16 v92 = *((_WORD *)this + 40);
  size_t v48 = (double *)*((void *)a2 + 6);
  double v49 = 1.0 / sqrt(v44 * v44 + v45 * v45 + v47 * v47);
  double v50 = v49 * v44;
  double v51 = v49 * v45;
  double v52 = v49 * v47;
  double v53 = -(v42 * v51 - v41 * v52);
  double v54 = -(v40 * v52 - v42 * v50);
  double v55 = -(v40 * v52);
  double v56 = -(v41 * v50 - v40 * v51);
  double v57 = -(v41 * v50);
  double v58 = -(v41 * v52 - v42 * v51);
  double v59 = -(v55 + v42 * v50);
  double v60 = -(v57 + v40 * v51);
  if ((v54 * (v48[18] - v45) + v56 * (v48[19] - v47) + v53 * (v48[17] - v44))
     / sqrt((v48[17] - v44) * (v48[17] - v44) + (v48[18] - v45) * (v48[18] - v45) + (v48[19] - v47) * (v48[19] - v47)) >= 0.0)
  {
    double v60 = v56;
    double v59 = v54;
    double v58 = v53;
  }
  float v61 = v58;
  float v62 = v59;
  float v63 = v60;
  float v87 = v61;
  float v88 = v62;
  float v89 = v63;
  md::MuninRoadLabelGenerator::createLabel((md::MuninRoadLabelGenerator *)&v73, *(md::MuninRoadLabelCreationParams **)(*((void *)a2 + 1) + 24), (uint64_t *)&v74);
  if (v73.n128_u64[0])
  {
    unsigned int v64 = (__n128 *)*((void *)this + 3);
    if ((unint64_t)v64 >= *((void *)this + 4))
    {
      unint64_t v72 = v73.n128_u64[1];
      unsigned int v66 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)this + 16, v73);
      int v65 = (std::__shared_weak_count *)v72;
    }
    else
    {
      v64->n128_u64[0] = v73.n128_u64[0];
      int v65 = (std::__shared_weak_count *)v73.n128_u64[1];
      v64->n128_u64[1] = v73.n128_u64[1];
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v66 = v64 + 1;
    }
    *((void *)this + 3) = v66;
    if (!v65) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  int v65 = (std::__shared_weak_count *)v73.n128_u64[1];
  if (v73.n128_u64[1])
  {
LABEL_16:
    if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_18:
  char v67 = (std::__shared_weak_count *)*((void *)&v76 + 1);
  if (*((void *)&v76 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v76 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
  }
  uint64_t v68 = (std::__shared_weak_count *)*((void *)&v75 + 1);
  if (*((void *)&v75 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v75 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
  uint64_t v69 = (std::__shared_weak_count *)*((void *)&v74 + 1);
  if (*((void *)&v74 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
}

void sub_1A2411910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  md::MuninRoadLabelCreationParams::~MuninRoadLabelCreationParams((md::MuninRoadLabelCreationParams *)va1);
  _Unwind_Resume(a1);
}

uint64_t md::MuninJunctionCrossStreet::mercatorPosition(md::MuninJunctionCrossStreet *this)
{
  return (uint64_t)this + 56;
}

void md::MuninJunctionCrossStreet::~MuninJunctionCrossStreet(md::MuninJunctionCrossStreet *this)
{
  *(void *)this = &unk_1EF53D9C8;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 3);
    uint64_t v4 = (void *)*((void *)this + 2);
    if (v3 != v2)
    {
      do
      {
        float64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_1EF53D9C8;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 3);
    uint64_t v4 = (void *)*((void *)this + 2);
    if (v3 != v2)
    {
      do
      {
        float64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v2;
    operator delete(v4);
  }
}

void sub_1A241314C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24131C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24132FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24133E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24134E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24137B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A2413840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24138B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24139A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2413FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24140AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A241419C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A241428C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24143FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24144F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24145EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A241467C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24149F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2414EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2415390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)&a33);
  _Unwind_Resume(a1);
}

void sub_1A2415588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2415BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A241704C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);

  md::RoadSignTextMetrics::~RoadSignTextMetrics((md::RoadSignTextMetrics *)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v16 - 208);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v16 - 184);

  _Unwind_Resume(a1);
}

uint64_t GetLabelNavStyleAttributes(void *a1, unsigned int a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  {
    operator new();
  }
  uint64_t v10 = mdm::Allocator::instance(void)::alloc;
  unint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
  uint64_t v12 = v11;
  if (v11) {
    void *v11 = 0x1000000005;
  }
  unsigned __int8 v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 16, 4);
  uint64_t v14 = v13;
  if (v13) {
    v13[1] = (a3 << 32) | 0x10007;
  }
  void *v13 = *v12;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v10 + 40))(v10, v12, 8);
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 32, 4);
  uint64_t v16 = v15;
  double v17 = v15 + 4;
  if (v15) {
    v15[2] = ((unint64_t)a2 << 32) | 0x10035;
  }
  v15[1] = v14[1];
  void *v15 = *v14;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v10 + 40))(v10, v14, 16);
  uint64_t v18 = v16 + 3;
  if (!*a4)
  {
    if (!*a5)
    {
LABEL_16:
      __double2 v21 = (char *)v16;
      goto LABEL_17;
    }
    unint64_t *v18 = ((unint64_t)a5[1] << 32) | 0x10054;
LABEL_15:
    uint64_t v18 = v17;
    goto LABEL_16;
  }
  unint64_t *v18 = ((unint64_t)a4[1] << 32) | 1;
  if (!*a5) {
    goto LABEL_15;
  }
  uint64_t v19 = a5[1];
  uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 64, 4);
  __double2 v21 = (char *)v20;
  double v17 = v20 + 8;
  if (v20) {
    v20[4] = (v19 << 32) | 0x10054;
  }
  uint64_t v18 = v20 + 5;
  v20[3] = v16[3];
  void v20[2] = v16[2];
  v20[1] = v16[1];
  *uint64_t v20 = *v16;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v10 + 40))(v10, v16, 32);
LABEL_17:
  _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a1);
  if ((((char *)v18 - v21) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v22 = 0;
    char v23 = 0;
    uint64_t v24 = *a1;
    uint64_t v25 = ((unint64_t)((char *)v18 - v21) >> 3);
    unsigned __int8 v26 = *(unsigned char *)(*a1 + 33);
    while (1)
    {
      size_t v27 = v26;
      __double2 v28 = *(void **)v24;
      if (v26) {
        break;
      }
LABEL_19:
      v28[v27] = *(void *)&v21[8 * v22];
      unsigned __int8 v26 = *(unsigned char *)(v24 + 33) + 1;
      *(unsigned char *)(v24 + 33) = v26;
      ++v22;
      char v23 = 1;
      if (v22 == v25)
      {
        __double2 v28 = *(void **)v24;
        size_t v27 = v26;
LABEL_36:
        qsort(v28, v27, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
        goto LABEL_37;
      }
    }
    if (v26 > 0x1Fu)
    {
      do
      {
        uint64_t v32 = 0;
        uint64_t v33 = (int *)v28;
        while (1)
        {
          int v34 = *v33;
          v33 += 2;
          if (v34 == *(_DWORD *)&v21[8 * v22]) {
            break;
          }
          if (v26 == ++v32) {
            goto LABEL_30;
          }
        }
        HIDWORD(v28[v32]) = *(_DWORD *)&v21[8 * v22 + 4];
LABEL_30:
        ++v22;
      }
      while (v22 != v25);
    }
    else
    {
      do
      {
        uint64_t v29 = 0;
        uint64_t v30 = (int *)v28;
        while (1)
        {
          int v31 = *v30;
          v30 += 2;
          if (v31 == *(_DWORD *)&v21[8 * v22]) {
            break;
          }
          if (v27 == ++v29) {
            goto LABEL_19;
          }
        }
        HIDWORD(v28[v29]) = *(_DWORD *)&v21[8 * v22++ + 4];
      }
      while (v22 != v25);
    }
    if (v23) {
      goto LABEL_36;
    }
  }
LABEL_37:
  double v35 = *(uint64_t (**)(uint64_t, char *, int64_t))(*(void *)v10 + 40);
  return v35(v10, v21, (char *)v17 - v21);
}

void sub_1A241782C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1 + 40))(v1, v2, v3 - v2);
  _Unwind_Resume(a1);
}

id VKLabelCopyShield(uint64_t *a1, int a2, void *a3)
{
  unint64_t v11 = 0;
  geo::codec::featureGetNativeShield((uint64_t)a1, 0, &v11, a3, 0);
  unint64_t v5 = v11;
  if (v11)
  {
    if (a2)
    {
      unint64_t v12 = 0;
      geo::codec::featureGetLocalizedLabelForNativeLabel(a1, v11, &v12, 0);
      unint64_t v6 = v12;
      id v7 = [NSString alloc];
      if (v6) {
        unint64_t v8 = v12;
      }
      else {
        unint64_t v8 = v5;
      }
    }
    else
    {
      id v7 = [NSString alloc];
      unint64_t v8 = v11;
    }
    double v9 = (void *)[v7 initWithUTF8String:v8];
  }
  else
  {
    double v9 = 0;
  }
  return v9;
}

id VKLabelCopyText(uint64_t *a1, int a2)
{
  unint64_t v10 = 0;
  geo::codec::featureGetNativeLabel((uint64_t)a1, 0, &v10, 0);
  unint64_t v4 = v10;
  if (v10)
  {
    if (a2)
    {
      unint64_t v11 = 0;
      geo::codec::featureGetLocalizedLabelForNativeLabel(a1, v10, &v11, 0);
      unint64_t v5 = v11;
      id v6 = [NSString alloc];
      if (v5) {
        unint64_t v7 = v11;
      }
      else {
        unint64_t v7 = v4;
      }
    }
    else
    {
      id v6 = [NSString alloc];
      unint64_t v7 = v10;
    }
    unint64_t v8 = (void *)[v6 initWithUTF8String:v7];
  }
  else
  {
    unint64_t v8 = 0;
  }
  return v8;
}

uint64_t GetRoadSignMetadataForStyleQuery(uint64_t a1, std::__shared_weak_count *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1 || !a4 && !a5 && !a6) {
    return 0;
  }
  __p.__r_.__value_.__r.__words[0] = a1;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)a2;
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v175, a1, (uint64_t)a2);
  if (a2 && !atomic_fetch_add(&a2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
    std::__shared_weak_count::__release_weak(a2);
    if (!v176) {
      goto LABEL_160;
    }
  }
  else if (!v176)
  {
LABEL_160:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v175);
    return 0;
  }
  if (!a5) {
    goto LABEL_151;
  }
  char v177 = 1;
  uint64_t v11 = *(void *)(v175[0] + 24);
  unsigned int v12 = *(unsigned __int8 *)(v11 + 12);
  if (v12 != 2)
  {
    float v14 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(void *)(v175[0] + 24), 0x130u, v12, &v177);
    if (!v177) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  __p.__r_.__value_.__s.__data_[0] = 1;
  unsigned __int8 v178 = 1;
  unsigned __int8 v13 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v11, 0x130u, 0, &__p);
  gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v11, 0x130u, 1u, &v178);
  float v14 = *v13;
  if (__p.__r_.__value_.__s.__data_[0] | v178) {
LABEL_17:
  }
    *(double *)(a5 + 8) = v14;
LABEL_18:
  uint64_t v15 = *(void *)(v175[0] + 24);
  uint64_t v16 = *(float **)v15;
  if (*(void *)v15)
  {
    float v17 = *v16;
    BOOL v18 = *v16 == 1.0;
    if (*(unsigned char *)(v15 + 10))
    {
      if (v17 != 0.0 && v17 != 1.0) {
        goto LABEL_28;
      }
    }
  }
  else
  {
    BOOL v18 = 0;
  }
  unsigned int v20 = *(unsigned __int8 *)(v15 + v18 + 11);
  if (v20 != 2) {
    goto LABEL_30;
  }
LABEL_28:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(v175[0] + 24), 0x131u, 0) & 1) == 0)
  {
    unsigned int v20 = 1;
LABEL_30:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x131u, v20)) {
      goto LABEL_35;
    }
  }
  unsigned int v21 = *(unsigned __int8 *)(v15 + 12);
  if (v21 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    uint64_t v22 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x131u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x131u, 1u, &v178);
    float v23 = *v22;
  }
  else
  {
    float v23 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x131u, v21, 0);
  }
  *(double *)(a5 + 24) = v23;
  uint64_t v15 = *(void *)(v175[0] + 24);
  uint64_t v16 = *(float **)v15;
LABEL_35:
  if (v16)
  {
    float v24 = *v16;
    BOOL v25 = *v16 == 1.0;
    if (*(unsigned char *)(v15 + 10))
    {
      if (v24 != 0.0 && v24 != 1.0) {
        goto LABEL_45;
      }
    }
  }
  else
  {
    BOOL v25 = 0;
  }
  unsigned int v27 = *(unsigned __int8 *)(v15 + v25 + 11);
  if (v27 != 2) {
    goto LABEL_47;
  }
LABEL_45:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x132u, 0) & 1) == 0)
  {
    unsigned int v27 = 1;
LABEL_47:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x132u, v27)) {
      goto LABEL_52;
    }
  }
  unsigned int v28 = *(unsigned __int8 *)(v15 + 12);
  if (v28 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    uint64_t v29 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x132u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x132u, 1u, &v178);
    float v30 = *v29;
  }
  else
  {
    float v30 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x132u, v28, 0);
  }
  *(double *)(a5 + 32) = v30;
  uint64_t v15 = *(void *)(v175[0] + 24);
  uint64_t v16 = *(float **)v15;
LABEL_52:
  if (v16)
  {
    float v31 = *v16;
    BOOL v32 = *v16 == 1.0;
    if (*(unsigned char *)(v15 + 10) && v31 != 0.0 && v31 != 1.0) {
      goto LABEL_59;
    }
  }
  else
  {
    BOOL v32 = 0;
  }
  unsigned int v33 = *(unsigned __int8 *)(v15 + v32 + 11);
  if (v33 != 2) {
    goto LABEL_61;
  }
LABEL_59:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x92u, 0) & 1) == 0)
  {
    unsigned int v33 = 1;
LABEL_61:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x92u, v33)) {
      goto LABEL_66;
    }
  }
  unsigned int v34 = *(unsigned __int8 *)(v15 + 12);
  if (v34 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    double v35 = (float32x2_t *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<gm::Matrix<float,2,1>>(v15, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<gm::Matrix<float,2,1>>(v15, 1u, &v178);
    float32x2_t v36 = *v35;
  }
  else
  {
    float32x2_t v36 = *(float32x2_t *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<gm::Matrix<float,2,1>>(v15, v34, 0);
  }
  *(float64x2_t *)(a5 + 56) = vcvtq_f64_f32(v36);
  uint64_t v15 = *(void *)(v175[0] + 24);
  uint64_t v16 = *(float **)v15;
LABEL_66:
  if (v16)
  {
    float v37 = *v16;
    BOOL v38 = *v16 == 1.0;
    if (*(unsigned char *)(v15 + 10) && v37 != 0.0 && v37 != 1.0) {
      goto LABEL_73;
    }
  }
  else
  {
    BOOL v38 = 0;
  }
  unsigned int v39 = *(unsigned __int8 *)(v15 + v38 + 11);
  if (v39 != 2) {
    goto LABEL_75;
  }
LABEL_73:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x133u, 0) & 1) == 0)
  {
    unsigned int v39 = 1;
LABEL_75:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x133u, v39)) {
      goto LABEL_80;
    }
  }
  unsigned int v40 = *(unsigned __int8 *)(v15 + 12);
  if (v40 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    double v41 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x133u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x133u, 1u, &v178);
    float v42 = *v41;
  }
  else
  {
    float v42 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x133u, v40, 0);
  }
  *(double *)(a5 + 72) = v42;
  uint64_t v15 = *(void *)(v175[0] + 24);
  uint64_t v16 = *(float **)v15;
LABEL_80:
  if (v16)
  {
    float v43 = *v16;
    BOOL v44 = *v16 == 1.0;
    if (*(unsigned char *)(v15 + 10) && v43 != 0.0 && v43 != 1.0) {
      goto LABEL_87;
    }
  }
  else
  {
    BOOL v44 = 0;
  }
  unsigned int v45 = *(unsigned __int8 *)(v15 + v44 + 11);
  if (v45 != 2) {
    goto LABEL_89;
  }
LABEL_87:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x6Du, 0) & 1) == 0)
  {
    unsigned int v45 = 1;
LABEL_89:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x6Du, v45)) {
      goto LABEL_94;
    }
  }
  unsigned int v46 = *(unsigned __int8 *)(v15 + 12);
  if (v46 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    double v47 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x6Du, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x6Du, 1u, &v178);
    float v48 = *v47;
  }
  else
  {
    float v48 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x6Du, v46, 0);
  }
  *(double *)(a5 + 80) = v48;
  uint64_t v15 = *(void *)(v175[0] + 24);
  uint64_t v16 = *(float **)v15;
LABEL_94:
  if (v16)
  {
    float v49 = *v16;
    BOOL v50 = *v16 == 1.0;
    if (*(unsigned char *)(v15 + 10) && v49 != 0.0 && v49 != 1.0) {
      goto LABEL_101;
    }
  }
  else
  {
    BOOL v50 = 0;
  }
  unsigned int v51 = *(unsigned __int8 *)(v15 + v50 + 11);
  if (v51 != 2) {
    goto LABEL_103;
  }
LABEL_101:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x64u, 0) & 1) == 0)
  {
    unsigned int v51 = 1;
LABEL_103:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x64u, v51)) {
      goto LABEL_108;
    }
  }
  unsigned int v52 = *(unsigned __int8 *)(v15 + 12);
  if (v52 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    double v53 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x64u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x64u, 1u, &v178);
    float v54 = *v53;
  }
  else
  {
    float v54 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x64u, v52, 0);
  }
  *(double *)(a5 + 96) = v54;
  uint64_t v15 = *(void *)(v175[0] + 24);
  uint64_t v16 = *(float **)v15;
LABEL_108:
  if (v16)
  {
    float v55 = *v16;
    BOOL v56 = *v16 == 1.0;
    if (*(unsigned char *)(v15 + 10) && v55 != 0.0 && v55 != 1.0) {
      goto LABEL_115;
    }
  }
  else
  {
    BOOL v56 = 0;
  }
  unsigned int v57 = *(unsigned __int8 *)(v15 + v56 + 11);
  if (v57 != 2) {
    goto LABEL_117;
  }
LABEL_115:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x134u, 0) & 1) == 0)
  {
    unsigned int v57 = 1;
LABEL_117:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x134u, v57)) {
      goto LABEL_122;
    }
  }
  unsigned int v58 = *(unsigned __int8 *)(v15 + 12);
  if (v58 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    double v59 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x134u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x134u, 1u, &v178);
    float v60 = *v59;
  }
  else
  {
    float v60 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x134u, v58, 0);
  }
  *(double *)(a5 + 128) = v60;
  uint64_t v15 = *(void *)(v175[0] + 24);
  uint64_t v16 = *(float **)v15;
LABEL_122:
  if (v16)
  {
    float v61 = *v16;
    BOOL v62 = *v16 == 1.0;
    if (*(unsigned char *)(v15 + 10) && v61 != 0.0 && v61 != 1.0) {
      goto LABEL_129;
    }
  }
  else
  {
    BOOL v62 = 0;
  }
  unsigned int v63 = *(unsigned __int8 *)(v15 + v62 + 11);
  if (v63 != 2) {
    goto LABEL_131;
  }
LABEL_129:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x183u, 0) & 1) == 0)
  {
    unsigned int v63 = 1;
LABEL_131:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x183u, v63)) {
      goto LABEL_136;
    }
  }
  unsigned int v64 = *(unsigned __int8 *)(v15 + 12);
  if (v64 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    int v65 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x183u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x183u, 1u, &v178);
    float v66 = *v65;
  }
  else
  {
    float v66 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x183u, v64, 0);
  }
  *(double *)(a5 + 40) = v66;
  uint64_t v15 = *(void *)(v175[0] + 24);
  uint64_t v16 = *(float **)v15;
LABEL_136:
  if (v16)
  {
    float v67 = *v16;
    BOOL v68 = *v16 == 1.0;
    if (*(unsigned char *)(v15 + 10) && v67 != 0.0 && v67 != 1.0) {
      goto LABEL_143;
    }
  }
  else
  {
    BOOL v68 = 0;
  }
  unsigned int v69 = *(unsigned __int8 *)(v15 + v68 + 11);
  if (v69 != 2) {
    goto LABEL_145;
  }
LABEL_143:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x184u, 0) & 1) == 0)
  {
    unsigned int v69 = 1;
LABEL_145:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v15, 0x184u, v69)) {
      goto LABEL_150;
    }
  }
  unsigned int v70 = *(unsigned __int8 *)(v15 + 12);
  if (v70 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    float64x2_t v71 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x184u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x184u, 1u, &v178);
    float v72 = *v71;
  }
  else
  {
    float v72 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v15, 0x184u, v70, 0);
  }
  *(double *)(a5 + 48) = v72;
LABEL_150:
  if (round(*(double *)(a5 + 8) * *(double *)(a5 + 96) * *(double *)(a5 + 16)) <= 0.0) {
    goto LABEL_160;
  }
LABEL_151:
  if (!a6) {
    goto LABEL_285;
  }
  unint64_t v73 = *(void *)(v175[0] + 24);
  long long v74 = *(float **)v73;
  if (*(void *)v73)
  {
    float v75 = *v74;
    BOOL v76 = *v74 == 1.0;
    if (*(unsigned char *)(v73 + 10))
    {
      if (v75 != 0.0 && v75 != 1.0) {
        goto LABEL_165;
      }
    }
  }
  else
  {
    BOOL v76 = 0;
  }
  unsigned int v80 = *(unsigned __int8 *)(v73 + v76 + 11);
  if (v80 != 2) {
    goto LABEL_167;
  }
LABEL_165:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(v175[0] + 24), 0x130u, 0) & 1) == 0)
  {
    unsigned int v80 = 1;
LABEL_167:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 0x130u, v80)) {
      goto LABEL_172;
    }
  }
  unsigned int v81 = *(unsigned __int8 *)(v73 + 12);
  if (v81 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    double v82 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x130u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x130u, 1u, &v178);
    float v83 = *v82;
  }
  else
  {
    float v83 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x130u, v81, 0);
  }
  *(double *)a6 = v83;
  unint64_t v73 = *(void *)(v175[0] + 24);
  long long v74 = *(float **)v73;
LABEL_172:
  if (v74)
  {
    float v84 = *v74;
    BOOL v85 = *v74 == 1.0;
    if (*(unsigned char *)(v73 + 10))
    {
      if (v84 != 0.0 && v84 != 1.0) {
        goto LABEL_182;
      }
    }
  }
  else
  {
    BOOL v85 = 0;
  }
  unsigned int v87 = *(unsigned __int8 *)(v73 + v85 + 11);
  if (v87 != 2) {
    goto LABEL_184;
  }
LABEL_182:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 0x135u, 0) & 1) == 0)
  {
    unsigned int v87 = 1;
LABEL_184:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 0x135u, v87)) {
      goto LABEL_189;
    }
  }
  unsigned int v88 = *(unsigned __int8 *)(v73 + 12);
  if (v88 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    float v89 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x135u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x135u, 1u, &v178);
    float v90 = *v89;
  }
  else
  {
    float v90 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x135u, v88, 0);
  }
  *(double *)(a6 + 16) = v90;
  unint64_t v73 = *(void *)(v175[0] + 24);
  long long v74 = *(float **)v73;
LABEL_189:
  if (v74)
  {
    float v91 = *v74;
    BOOL v92 = *v74 == 1.0;
    if (*(unsigned char *)(v73 + 10))
    {
      if (v91 != 0.0 && v91 != 1.0) {
        goto LABEL_199;
      }
    }
  }
  else
  {
    BOOL v92 = 0;
  }
  unsigned int v94 = *(unsigned __int8 *)(v73 + v92 + 11);
  if (v94 != 2) {
    goto LABEL_201;
  }
LABEL_199:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 0x151u, 0) & 1) == 0)
  {
    unsigned int v94 = 1;
LABEL_201:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 0x151u, v94)) {
      goto LABEL_206;
    }
  }
  unsigned int v95 = *(unsigned __int8 *)(v73 + 12);
  if (v95 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    char v96 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x151u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x151u, 1u, &v178);
    float v97 = *v96;
  }
  else
  {
    float v97 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x151u, v95, 0);
  }
  *(double *)(a6 + 24) = v97;
  unint64_t v73 = *(void *)(v175[0] + 24);
  long long v74 = *(float **)v73;
LABEL_206:
  if (v74)
  {
    float v98 = *v74;
    BOOL v99 = *v74 == 1.0;
    if (*(unsigned char *)(v73 + 10) && v98 != 0.0 && v98 != 1.0) {
      goto LABEL_213;
    }
  }
  else
  {
    BOOL v99 = 0;
  }
  unsigned int v100 = *(unsigned __int8 *)(v73 + v99 + 11);
  if (v100 != 2) {
    goto LABEL_215;
  }
LABEL_213:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 0x150u, 0) & 1) == 0)
  {
    unsigned int v100 = 1;
LABEL_215:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 0x150u, v100)) {
      goto LABEL_220;
    }
  }
  unsigned int v101 = *(unsigned __int8 *)(v73 + 12);
  if (v101 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    int64_t v102 = (unsigned int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v73, 0x150u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v73, 0x150u, 1u, &v178);
    unsigned int v103 = *v102;
  }
  else
  {
    unsigned int v103 = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v73, 0x150u, v101, 0);
  }
  *(double *)(a6 + 128) = (double)v103;
  unint64_t v73 = *(void *)(v175[0] + 24);
  long long v74 = *(float **)v73;
LABEL_220:
  if (v74)
  {
    float v104 = *v74;
    BOOL v105 = *v74 == 1.0;
    if (*(unsigned char *)(v73 + 10) && v104 != 0.0 && v104 != 1.0) {
      goto LABEL_227;
    }
  }
  else
  {
    BOOL v105 = 0;
  }
  unsigned int v106 = *(unsigned __int8 *)(v73 + v105 + 11);
  if (v106 != 2) {
    goto LABEL_229;
  }
LABEL_227:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 0x136u, 0) & 1) == 0)
  {
    unsigned int v106 = 1;
LABEL_229:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 0x136u, v106)) {
      goto LABEL_234;
    }
  }
  unsigned int v107 = *(unsigned __int8 *)(v73 + 12);
  if (v107 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    char v108 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x136u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x136u, 1u, &v178);
    float v109 = *v108;
  }
  else
  {
    float v109 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 0x136u, v107, 0);
  }
  *(double *)(a6 + 32) = v109;
  unint64_t v73 = *(void *)(v175[0] + 24);
  long long v74 = *(float **)v73;
LABEL_234:
  if (v74)
  {
    float v110 = *v74;
    BOOL v111 = *v74 == 1.0;
    if (*(unsigned char *)(v73 + 10) && v110 != 0.0 && v110 != 1.0) {
      goto LABEL_241;
    }
  }
  else
  {
    BOOL v111 = 0;
  }
  unsigned int v112 = *(unsigned __int8 *)(v73 + v111 + 11);
  if (v112 != 2) {
    goto LABEL_243;
  }
LABEL_241:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 9u, 0) & 1) == 0)
  {
    unsigned int v112 = 1;
LABEL_243:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 9u, v112)) {
      goto LABEL_248;
    }
  }
  unsigned int v113 = *(unsigned __int8 *)(v73 + 12);
  if (v113 == 2)
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v178 = 1;
    uint64_t v114 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 9u, 0, &__p);
    gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 9u, 1u, &v178);
    float v115 = *v114;
  }
  else
  {
    float v115 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v73, 9u, v113, 0);
  }
  double v116 = v115;
  double v117 = round(*(double *)a6 * *(double *)(a6 + 8) * v116);
  *(double *)(a6 + 40) = v116;
  *(double *)(a6 + 48) = v117;
  unint64_t v73 = *(void *)(v175[0] + 24);
  long long v74 = *(float **)v73;
LABEL_248:
  if (!v74)
  {
    BOOL v119 = 0;
    goto LABEL_254;
  }
  float v118 = *v74;
  BOOL v119 = *v74 == 1.0;
  if (!*(unsigned char *)(v73 + 10) || v118 == 0.0 || v118 == 1.0)
  {
LABEL_254:
    unsigned int v120 = *(unsigned __int8 *)(v73 + v119 + 11);
    if (v120 != 2) {
      goto LABEL_257;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 0x72u, 0)) {
    goto LABEL_258;
  }
  unsigned int v120 = 1;
LABEL_257:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v73, 0x72u, v120)) {
    goto LABEL_285;
  }
LABEL_258:
  gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&__p, 0x72u, 1, v73, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((void *)(a6 + 56), p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a6 + 79) >= 0) {
    v123 = (const char *)(a6 + 56);
  }
  else {
    v123 = *(const char **)(a6 + 56);
  }
  size_t v124 = strlen(v123);
  if (v124 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v125 = v124;
  if (v124 >= 0x17)
  {
    uint64_t v127 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v124 | 7) != 0x17) {
      uint64_t v127 = v124 | 7;
    }
    uint64_t v128 = v127 + 1;
    BOOL v126 = (std::string *)operator new(v127 + 1);
    __p.__r_.__value_.__l.__size_ = v125;
    __p.__r_.__value_.__r.__words[2] = v128 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v126;
    goto LABEL_276;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v124;
  BOOL v126 = &__p;
  if (v124) {
LABEL_276:
  }
    memmove(v126, v123, v125);
  v126->__r_.__value_.__s.__data_[v125] = 0;
  int v129 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  double v130 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v131 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v131 = __p.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v132 = &__p;
  }
  else {
    uint64_t v132 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((void *)(a6 + 88), v132, v131);
  if (v129 < 0) {
    operator delete(v130);
  }
LABEL_285:
  if (!a4) {
    goto LABEL_339;
  }
  unint64_t v133 = *(void *)(v175[0] + 24);
  BOOL v134 = *(float **)v133;
  if (*(void *)v133)
  {
    float v135 = *v134;
    BOOL v136 = *v134 == 1.0;
    if (*(unsigned char *)(v133 + 10))
    {
      if (v135 != 0.0 && v135 != 1.0) {
        goto LABEL_296;
      }
    }
  }
  else
  {
    BOOL v136 = 0;
  }
  unsigned int v138 = *(unsigned __int8 *)(v133 + v136 + 11);
  if (v138 != 2) {
    goto LABEL_298;
  }
LABEL_296:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(v175[0] + 24), 0x5Cu, 0) & 1) == 0)
  {
    unsigned int v138 = 1;
LABEL_298:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v133, 0x5Cu, v138)) {
      goto LABEL_300;
    }
  }
  gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x5Cu, 1, v133);
  float32x4_t v139 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
  *(unsigned char *)a4 = 1;
  *(float64x2_t *)(a4 + 8) = vcvtq_f64_f32(*(float32x2_t *)v139.f32);
  *(float64x2_t *)(a4 + 24) = vcvt_hight_f64_f32(v139);
  unint64_t v133 = *(void *)(v175[0] + 24);
  BOOL v134 = *(float **)v133;
LABEL_300:
  if (v134)
  {
    float v140 = *v134;
    BOOL v141 = *v134 == 1.0;
    if (*(unsigned char *)(v133 + 10))
    {
      if (v140 != 0.0 && v140 != 1.0) {
        goto LABEL_310;
      }
    }
  }
  else
  {
    BOOL v141 = 0;
  }
  unsigned int v143 = *(unsigned __int8 *)(v133 + v141 + 11);
  if (v143 != 2) {
    goto LABEL_312;
  }
LABEL_310:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v133, 0x74u, 0) & 1) == 0)
  {
    unsigned int v143 = 1;
LABEL_312:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v133, 0x74u, v143)) {
      goto LABEL_314;
    }
  }
  gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x74u, 1, v133);
  float32x4_t v144 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
  *(unsigned char *)(a4 + 3) = 1;
  *(float64x2_t *)(a4 + 104) = vcvtq_f64_f32(*(float32x2_t *)v144.f32);
  *(float64x2_t *)(a4 + 120) = vcvt_hight_f64_f32(v144);
  unint64_t v133 = *(void *)(v175[0] + 24);
  BOOL v134 = *(float **)v133;
LABEL_314:
  if (v134)
  {
    float v145 = *v134;
    BOOL v146 = *v134 == 1.0;
    if (*(unsigned char *)(v133 + 10))
    {
      if (v145 != 0.0 && v145 != 1.0) {
        goto LABEL_324;
      }
    }
  }
  else
  {
    BOOL v146 = 0;
  }
  unsigned int v148 = *(unsigned __int8 *)(v133 + v146 + 11);
  if (v148 != 2) {
    goto LABEL_326;
  }
LABEL_324:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v133, 0x93u, 0) & 1) == 0)
  {
    unsigned int v148 = 1;
LABEL_326:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v133, 0x93u, v148)) {
      goto LABEL_328;
    }
  }
  gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x93u, 1, v133);
  float32x4_t v149 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
  *(unsigned char *)(a4 + 5) = 1;
  *(float64x2_t *)(a4 + 168) = vcvtq_f64_f32(*(float32x2_t *)v149.f32);
  *(float64x2_t *)(a4 + 184) = vcvt_hight_f64_f32(v149);
  unint64_t v133 = *(void *)(v175[0] + 24);
  BOOL v134 = *(float **)v133;
LABEL_328:
  if (v134)
  {
    float v150 = *v134;
    BOOL v151 = *v134 == 1.0;
    if (*(unsigned char *)(v133 + 10) && v150 != 0.0 && v150 != 1.0) {
      goto LABEL_335;
    }
  }
  else
  {
    BOOL v151 = 0;
  }
  unsigned int v152 = *(unsigned __int8 *)(v133 + v151 + 11);
  if (v152 == 2)
  {
LABEL_335:
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v133, 0x73u, 0))
    {
LABEL_338:
      gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x73u, 1, v133);
      float32x4_t v173 = (float32x4_t)vdupq_n_s32(0x37800080u);
      float32x4_t v153 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), v173);
      *(unsigned char *)(a4 + 6) = 1;
      *(float64x2_t *)(a4 + 200) = vcvtq_f64_f32(*(float32x2_t *)v153.f32);
      *(float64x2_t *)(a4 + 216) = vcvt_hight_f64_f32(v153);
      gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x73u, 1, *(void *)(v175[0] + 24));
      float32x4_t v154 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), v173);
      *(unsigned char *)(a4 + 7) = 1;
      *(float64x2_t *)(a4 + 232) = vcvtq_f64_f32(*(float32x2_t *)v154.f32);
      *(float64x2_t *)(a4 + 248) = vcvt_hight_f64_f32(v154);
      goto LABEL_339;
    }
    unsigned int v152 = 1;
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v133, 0x73u, v152)) {
    goto LABEL_338;
  }
LABEL_339:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v175);
  uint64_t v155 = *a3;
  if (*a3)
  {
    double v156 = (std::__shared_weak_count *)a3[1];
    __p.__r_.__value_.__r.__words[0] = v155;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v156;
    if (v156) {
      atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v175, v155, (uint64_t)v156);
    if (v156 && !atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
    BOOL v78 = v176 != 0;
    if (!v176) {
      goto LABEL_390;
    }
    if (!a4)
    {
LABEL_359:
      if (!a6) {
        goto LABEL_390;
      }
      unint64_t v163 = *(void *)(v175[0] + 24);
      v164 = *(float **)v163;
      if (*(void *)v163)
      {
        float v165 = *v164;
        BOOL v166 = *v164 == 1.0;
        if (*(unsigned char *)(v163 + 10) && v165 != 0.0 && v165 != 1.0)
        {
LABEL_368:
          if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(v175[0] + 24), 9u, 0))
          {
LABEL_371:
            *(double *)(a6 + 48) = gss::QueryableLocker<gss::PropertyID>::targetValue<(gss::PropertyID)9>(v163);
            unint64_t v163 = *(void *)(v175[0] + 24);
            v164 = *(float **)v163;
LABEL_372:
            if (v164)
            {
              float v168 = *v164;
              BOOL v169 = *v164 == 1.0;
              if (*(unsigned char *)(v163 + 10) && v168 != 0.0 && v168 != 1.0) {
                goto LABEL_379;
              }
            }
            else
            {
              BOOL v169 = 0;
            }
            unsigned int v170 = *(unsigned __int8 *)(v163 + v169 + 11);
            if (v170 != 2)
            {
LABEL_381:
              if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v163, 0x72u, v170)) {
                goto LABEL_382;
              }
LABEL_390:
              gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v175);
              return v78;
            }
LABEL_379:
            if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v163, 0x72u, 0))
            {
LABEL_382:
              gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&__p, 0x72u, 1, v163, 0);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v171 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v171 = __p.__r_.__value_.__l.__size_;
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                BOOL v172 = &__p;
              }
              else {
                BOOL v172 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external((void *)(a6 + 88), v172, v171);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_390;
            }
            unsigned int v170 = 1;
            goto LABEL_381;
          }
          unsigned int v167 = 1;
LABEL_370:
          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v163, 9u, v167)) {
            goto LABEL_372;
          }
          goto LABEL_371;
        }
      }
      else
      {
        BOOL v166 = 0;
      }
      unsigned int v167 = *(unsigned __int8 *)(v163 + v166 + 11);
      if (v167 != 2) {
        goto LABEL_370;
      }
      goto LABEL_368;
    }
    unint64_t v157 = *(void *)(v175[0] + 24);
    BOOL v158 = *(float **)v157;
    if (*(void *)v157
      && (float v159 = *v158, LODWORD(v158) = *v158 == 1.0, *(unsigned char *)(v157 + 10))
      && (v159 != 0.0 ? (BOOL v160 = v159 == 1.0) : (BOOL v160 = 1), !v160)
      || (unsigned int v161 = *(unsigned __int8 *)(v157 + v158 + 11), v161 == 2))
    {
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(v175[0] + 24), 0x73u, 0))
      {
LABEL_358:
        gss::RenderStyleHelper<gss::PropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::valueForKey((unint64_t *)&__p, 0x73u, 1, v157);
        float32x4_t v162 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)__p.__r_.__value_.__l.__data_)), (float32x4_t)vdupq_n_s32(0x37800080u));
        *(unsigned char *)(a4 + 7) = 1;
        *(float64x2_t *)(a4 + 232) = vcvtq_f64_f32(*(float32x2_t *)v162.f32);
        *(float64x2_t *)(a4 + 248) = vcvt_hight_f64_f32(v162);
        goto LABEL_359;
      }
      unsigned int v161 = 1;
    }
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v157, 0x73u, v161)) {
      goto LABEL_359;
    }
    goto LABEL_358;
  }
  return 1;
}

void sub_1A2419030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<md::NavRoadSign *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavRoadSign>,std::allocator<md::NavRoadSign>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<md::NavRoadSign *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavRoadSign>,std::allocator<md::NavRoadSign>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gss::RenderStyle<gss::PropertyID>::styleValueForKey<gm::Matrix<float,2,1>>(uint64_t result, unsigned int a2, unsigned char *a3)
{
  uint64_t v3 = *(void *)(result + 16 * a2 + 16);
  if (!v3)
  {
    if (a3) {
      *a3 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::PropertyID,gm::Matrix<float,2,1>>();
  }
  uint64_t v4 = result + 16 * a2;
  uint64_t v5 = *(unsigned __int16 *)(v4 + 56);
  if (*(_WORD *)(v4 + 56))
  {
    uint64_t v6 = *(void *)(v4 + 48);
    uint64_t v7 = v6 + 8 * v5;
    while (1)
    {
      double v9 = *(uint64_t **)(*(void *)v6 + 72);
      if (!v9) {
        goto LABEL_6;
      }
      uint64_t v10 = *v9;
      uint64_t v11 = *(unsigned __int16 *)(v10 + 10);
      if (!*(_WORD *)(v10 + 10))
      {
        int v8 = 0;
        goto LABEL_5;
      }
      unsigned int v12 = *(unsigned __int16 **)v10;
      if (!*(unsigned char *)(v10 + 15)) {
        break;
      }
      unsigned __int8 v13 = *(unsigned __int16 **)v10;
      unint64_t v14 = *(unsigned __int16 *)(v10 + 10);
      if (v11 >= 0x1E)
      {
        do
        {
          unint64_t v17 = v14 >> 1;
          BOOL v18 = &v13[v14 >> 1];
          unsigned int v20 = *v18;
          uint64_t v19 = v18 + 1;
          uint64_t result = v20;
          v14 += ~(v14 >> 1);
          if (v20 < 0x92) {
            unsigned __int8 v13 = v19;
          }
          else {
            unint64_t v14 = v17;
          }
        }
        while (v14);
        if (v13 == &v12[v11] || *v13 != 146) {
          goto LABEL_6;
        }
        goto LABEL_26;
      }
      uint64_t v15 = 0;
      while (1)
      {
        unsigned int v16 = v12[v15];
        if (v16 >= 0x92) {
          break;
        }
        if (v11 == ++v15) {
          goto LABEL_6;
        }
      }
      int v8 = (unsigned __int16)v15;
      if (v16 != 146) {
        int v8 = *(unsigned __int16 *)(v10 + 10);
      }
LABEL_5:
      if (v8 != v11)
      {
        unint64_t v27 = *(unsigned __int16 *)(v10 + 58);
        if (!*(_WORD *)(v10 + 58)) {
          return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        }
        uint64_t v28 = *(void *)(v10 + 48);
        if (*(unsigned char *)(v10 + 63))
        {
          if (v27 < 0x1E)
          {
            uint64_t v29 = 0;
            uint64_t result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            while (1)
            {
              unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * (void)v29);
              if (v30 >= 0x92) {
                break;
              }
              uint64_t v29 = (unsigned __int16 *)((char *)v29 + 1);
              if ((unsigned __int16 *)v27 == v29) {
                return result;
              }
            }
            LODWORD(v29) = (unsigned __int16)v29;
            if (v30 != 146) {
              LODWORD(v29) = *(unsigned __int16 *)(v10 + 58);
            }
            if (v29 < v27) {
              return v28 + *(unsigned __int16 *)(v10 + 56) + 8 * v29;
            }
            return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          }
          uint64_t v29 = *(unsigned __int16 **)(v10 + 48);
          unint64_t v43 = *(unsigned __int16 *)(v10 + 58);
          do
          {
            unint64_t v44 = v43 >> 1;
            unsigned int v45 = &v29[v43 >> 1];
            unsigned int v47 = *v45;
            unsigned int v46 = v45 + 1;
            v43 += ~(v43 >> 1);
            if (v47 < 0x92) {
              uint64_t v29 = v46;
            }
            else {
              unint64_t v43 = v44;
            }
          }
          while (v43);
          if (v29 == (unsigned __int16 *)(v28 + 2 * v27) || *v29 != 146) {
            return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
          }
        }
        else
        {
          uint64_t v41 = 2 * v27;
          uint64_t v29 = *(unsigned __int16 **)(v10 + 48);
          while (*v29 != 146)
          {
            ++v29;
            v41 -= 2;
            if (!v41)
            {
              LODWORD(v29) = v28 + 2 * v27;
              break;
            }
          }
        }
        LODWORD(v29) = (unsigned __int16)((v29 - v28) >> 1);
        if (v29 < v27) {
          return v28 + *(unsigned __int16 *)(v10 + 56) + 8 * v29;
        }
        return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v6 += 8;
      if (v6 == v7) {
        goto LABEL_29;
      }
    }
    uint64_t v21 = 2 * v11;
    unsigned __int8 v13 = *(unsigned __int16 **)v10;
    while (*v13 != 146)
    {
      ++v13;
      v21 -= 2;
      if (!v21)
      {
        LODWORD(v13) = v12 + 2 * v11;
        break;
      }
    }
LABEL_26:
    int v8 = (unsigned __int16)((v13 - v12) >> 1);
    goto LABEL_5;
  }
LABEL_29:
  uint64_t v22 = *(uint64_t **)(v3 + 72);
  if (!v22) {
    goto LABEL_60;
  }
  uint64_t v10 = *v22;
  uint64_t v23 = *(unsigned __int16 *)(v10 + 10);
  if (!*(_WORD *)(v10 + 10)) {
    goto LABEL_60;
  }
  float v24 = *(unsigned __int16 **)v10;
  if (!*(unsigned char *)(v10 + 15))
  {
    uint64_t v31 = 2 * v23;
    BOOL v32 = *(unsigned __int16 **)v10;
    while (*v32 != 146)
    {
      ++v32;
      v31 -= 2;
      if (!v31)
      {
        LODWORD(v32) = v24 + 2 * v23;
        break;
      }
    }
LABEL_59:
    if ((unsigned __int16)((v32 - v24) >> 1) != v23) {
      goto LABEL_66;
    }
    goto LABEL_60;
  }
  if (v23 >= 0x1E)
  {
    BOOL v32 = *(unsigned __int16 **)v10;
    unint64_t v33 = *(unsigned __int16 *)(v10 + 10);
    do
    {
      unint64_t v34 = v33 >> 1;
      double v35 = &v32[v33 >> 1];
      unsigned int v37 = *v35;
      float32x2_t v36 = v35 + 1;
      v33 += ~(v33 >> 1);
      if (v37 < 0x92) {
        BOOL v32 = v36;
      }
      else {
        unint64_t v33 = v34;
      }
    }
    while (v33);
    if (v32 != &v24[v23] && *v32 == 146) {
      goto LABEL_59;
    }
LABEL_60:
    if (a3) {
      *a3 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::PropertyID,gm::Matrix<float,2,1>>();
  }
  uint64_t v25 = 0;
  while (1)
  {
    unsigned int v26 = v24[v25];
    if (v26 >= 0x92) {
      break;
    }
    if (v23 == ++v25) {
      goto LABEL_60;
    }
  }
  int v38 = (unsigned __int16)v25;
  if (v26 != 146) {
    int v38 = *(unsigned __int16 *)(v10 + 10);
  }
  if (v38 == v23) {
    goto LABEL_60;
  }
LABEL_66:
  unint64_t v39 = *(unsigned __int16 *)(v10 + 58);
  if (!*(_WORD *)(v10 + 58)) {
    return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  }
  uint64_t v28 = *(void *)(v10 + 48);
  if (*(unsigned char *)(v10 + 63))
  {
    if (v39 < 0x1E)
    {
      uint64_t v29 = 0;
      uint64_t result = (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v40 = *(unsigned __int16 *)(v28 + 2 * (void)v29);
        if (v40 >= 0x92) {
          break;
        }
        uint64_t v29 = (unsigned __int16 *)((char *)v29 + 1);
        if ((unsigned __int16 *)v39 == v29) {
          return result;
        }
      }
      LODWORD(v29) = (unsigned __int16)v29;
      if (v40 != 146) {
        LODWORD(v29) = *(unsigned __int16 *)(v10 + 58);
      }
      BOOL v53 = v29 >= v39;
      if (v29 == v39) {
        return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
      }
      goto LABEL_107;
    }
    uint64_t v29 = *(unsigned __int16 **)(v10 + 48);
    unint64_t v48 = *(unsigned __int16 *)(v10 + 58);
    do
    {
      unint64_t v49 = v48 >> 1;
      BOOL v50 = &v29[v48 >> 1];
      unsigned int v52 = *v50;
      unsigned int v51 = v50 + 1;
      v48 += ~(v48 >> 1);
      if (v52 < 0x92) {
        uint64_t v29 = v51;
      }
      else {
        unint64_t v48 = v49;
      }
    }
    while (v48);
    if (v29 == (unsigned __int16 *)(v28 + 2 * v39) || *v29 != 146) {
      return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    }
  }
  else
  {
    uint64_t v42 = 2 * v39;
    uint64_t v29 = *(unsigned __int16 **)(v10 + 48);
    while (*v29 != 146)
    {
      ++v29;
      v42 -= 2;
      if (!v42)
      {
        LODWORD(v29) = v28 + 2 * v39;
        break;
      }
    }
  }
  LODWORD(v29) = (unsigned __int16)((v29 - v28) >> 1);
  BOOL v53 = v29 >= v39;
  if (v29 == v39) {
    return (uint64_t)&gss::PropertySetValueHelper<gss::PropertyID,gm::Matrix<float,2,1>>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  }
LABEL_107:
  if (!v53) {
    return v28 + *(unsigned __int16 *)(v10 + 56) + 8 * v29;
  }
  return result;
}

float gss::QueryableLocker<gss::PropertyID>::targetValue<(gss::PropertyID)9>(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 12);
  if (v2 != 2) {
    return *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 9u, v2, 0);
  }
  char v6 = 1;
  char v5 = 1;
  uint64_t v3 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 9u, 0, &v6);
  gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 9u, 1u, &v5);
  return *(float *)v3;
}

uint64_t std::__shared_ptr_pointer<md::NavShield *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavShield>,std::allocator<md::NavShield>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<md::NavShield *,std::shared_ptr<md::NavLabel>::__shared_ptr_default_delete<md::NavLabel,md::NavShield>,std::allocator<md::NavShield>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void sub_1A2419810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A241A9C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 160);
  if (v3)
  {
    *(void *)(v1 - 152) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(v1 - 136);
  if (v4)
  {
    *(void *)(v1 - 128) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 - 112) + 40))(*(void *)(v1 - 112), v4, *(void *)(v1 - 120) - v4);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t geo::dpSimplifyViaIndexes<gm::Matrix<double,2,1>,unsigned long>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, double a6)
{
  uint64_t v6 = a2 + 1;
  if (a2 + 1 < a3)
  {
    uint64_t v11 = result;
    double v12 = a6 * a6;
    __asm { FMOV            V0.2D, #1.0 }
    float64x2_t v31 = _Q0;
    do
    {
      float64x2_t v18 = *(float64x2_t *)(v11 + 16 * a2);
      float64x2_t v19 = vsubq_f64(*(float64x2_t *)(v11 + 16 * a3), v18);
      float64x2_t v20 = vmulq_f64(v19, v19);
      uint64_t v21 = 0;
      if (vaddvq_f64(v20) <= 1.0e-15)
      {
        double v28 = 0.0;
        do
        {
          float64x2_t v29 = vsubq_f64(*(float64x2_t *)(v11 + 16 * v6), v18);
          v29.f64[0] = vaddvq_f64(vmulq_f64(v29, v29));
          double v27 = fmax(v29.f64[0], v28);
          if (v29.f64[0] > v28) {
            uint64_t v21 = v6;
          }
          ++v6;
          double v28 = v27;
        }
        while (a3 != v6);
      }
      else
      {
        float64x2_t v22 = vdivq_f64(v31, vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1), v20));
        double v23 = 0.0;
        do
        {
          float64x2_t v24 = *(float64x2_t *)(v11 + 16 * v6);
          float64x2_t v25 = vmulq_f64(vsubq_f64(v24, v18), v19);
          float64x2_t v26 = vsubq_f64(v24, vmlaq_n_f64(v18, v19, fmin(fmax(vmulq_f64(vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1), v25), v22).f64[0], 0.0), 1.0)));
          v25.f64[0] = vaddvq_f64(vmulq_f64(v26, v26));
          double v27 = fmax(v25.f64[0], v23);
          if (v25.f64[0] > v23) {
            uint64_t v21 = v6;
          }
          ++v6;
          double v23 = v27;
        }
        while (a3 != v6);
      }
      if (v27 <= v12) {
        break;
      }
      uint64_t result = geo::dpSimplifyViaIndexes<gm::Matrix<double,2,1>,unsigned long>(v11, a6);
      uint64_t v30 = (*a5)++;
      *(void *)(a4 + 8 * v30) = v21;
      uint64_t v6 = v21 + 1;
      a2 = v21;
    }
    while (v21 + 1 < a3);
  }
  return result;
}

void sub_1A241ACC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A241ADE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A241B1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A241B814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A241BAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a12 + 40))(a12, a9, a11 - a9);
  }

  _Unwind_Resume(a1);
}

void sub_1A241BC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A241BD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A241BEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A241C578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1A241C740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL DetermineJunctionVisibility(VKLabelNavJunction *a1, md::NavContext *a2, double a3)
{
  char v5 = a1;
  if (((*(uint64_t (**)(void))(**((void **)a2 + 2) + 408))(*((void *)a2 + 2)) & 1) != 0
    || (uint64_t v7 = [(VKLabelNavJunction *)v5 routeOffset],
        uint64_t v8 = *(void *)(*(void *)(*((void *)a2 + 1) + 168) + 32),
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8),
        *(_DWORD *)v9 <= v7)
    && (*(_DWORD *)v9 == v7 ? (BOOL v10 = *(float *)(v9 + 4) <= *((float *)&v7 + 1)) : (BOOL v10 = 1), v10))
  {
    BOOL v6 = 1;
  }
  else
  {
    uint64_t v11 = *((void *)a2 + 4);
    long double v12 = *(double *)(v11 + 96) * 6.28318531;
    long double v13 = exp(*(double *)(v11 + 104) * 6.28318531 + -3.14159265);
    atan(v13);
    long double v14 = fmod(v12, 6.28318531);
    fmod(v14 + 6.28318531, 6.28318531);
    uint64_t v15 = [(VKLabelNavJunction *)v5 mercatorCoordinate];
    uint64_t v16 = [(VKLabelNavJunction *)v5 mercatorCoordinate];
    long double v17 = *v15 * 6.28318531;
    long double v18 = exp(*(double *)(v16 + 8) * 6.28318531 + -3.14159265);
    atan(v18);
    long double v19 = fmod(v17, 6.28318531);
    fmod(v19 + 6.28318531, 6.28318531);
    GEOCalculateDistance();
    BOOL v6 = v20 <= a3;
  }

  return v6;
}

void sub_1A241C93C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A241CA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKLabelNavRoad;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A241CD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t karo::media::ZipLoader::saveArchiveToChunk()
{
  return 0;
}

uint64_t karo::media::ZipLoader::saveArchiveToFile()
{
  return 0;
}

uint64_t karo::media::ZipLoader::loadFromChunk(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3 >= 0x1E)
  {
    uint64_t v7 = (uint64_t **)a4;
    unint64_t v8 = a3;
    uint64_t v9 = a2;
    unint64_t v10 = 0;
    unsigned int v47 = (uint64_t **)(a4 + 32);
    while (1)
    {
      buf.avail_in = 0;
      buf.next_in = 0;
      memset(&buf.zalloc, 0, 24);
      if (inflateInit2_(&buf, -15, "1.2.12", 112)) {
        return 0;
      }
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v54 = 0;
      uint64_t v13 = v9 + v10;
      unint64_t v11 = v8;
      if (*(_DWORD *)(v9 + v10) != 67324752) {
        goto LABEL_10;
      }
      int v14 = *(unsigned __int16 *)(v13 + 8);
      uInt v52 = *(_DWORD *)(v13 + 18);
      size_t v15 = *(unsigned int *)(v13 + 22);
      size_t v16 = *(unsigned __int16 *)(v13 + 26);
      int v17 = *(unsigned __int16 *)(v13 + 28);
      if (v16 >= 0x17)
      {
        if ((v16 | 7) == 0x17) {
          uint64_t v19 = ((unsigned __int16)v16 & 0xFFF8) + 8;
        }
        else {
          uint64_t v19 = v16 | 7;
        }
        p_dst = (long long *)operator new(v19 + 1);
        *((void *)&__dst + 1) = v16;
        uint64_t v57 = v19 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v57) = *(_WORD *)(v13 + 26);
        p_dst = &__dst;
        if (!v16) {
          goto LABEL_25;
        }
      }
      memcpy(p_dst, (const void *)(v13 + 30), v16);
LABEL_25:
      *((unsigned char *)p_dst + v16) = 0;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = __dst;
      uint64_t v54 = v57;
      if (v15)
      {
        double v20 = (char *)operator new(v15);
        bzero(v20, v15);
        uint64_t v21 = (uint64_t *)&v20[v15];
      }
      else
      {
        double v20 = 0;
        uint64_t v21 = 0;
      }
      unsigned int v22 = v16 + v17 + 30;
      if (v14)
      {
        buf.avail_in = v52;
        buf.next_in = (Bytef *)(v13 + v22);
        buf.avail_out = v15;
        buf.next_out = (Bytef *)v20;
        unsigned int v23 = inflate(&buf, 0) + 4;
        if (v23 <= 6 && ((1 << v23) & 0x43) != 0)
        {
          inflateEnd(&buf);
          int v24 = 0;
          goto LABEL_71;
        }
      }
      else
      {
        memcpy(v20, (const void *)(v13 + v22), v15);
      }
      float64x2_t v25 = std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (const void **)__p, (uint64_t)__p);
      double v27 = v25 + 7;
      float64x2_t v26 = v25[7];
      if (v26)
      {
        v25[8] = v26;
        operator delete(v26);
      }
      *double v27 = 0;
      v27[1] = 0;
      v27[2] = 0;
      double v28 = std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a4, (const void **)__p, (uint64_t)__p);
      unint64_t v48 = v28[7];
      v28[7] = (uint64_t *)v20;
      v28[8] = v21;
      v28[9] = v21;
      float64x2_t v29 = *(uint64_t **)(a4 + 32);
      char v30 = HIBYTE(v54);
      float64x2_t v31 = v47;
      BOOL v32 = v47;
      if (!v29) {
        goto LABEL_64;
      }
      if (v54 >= 0) {
        unint64_t v33 = __p;
      }
      else {
        unint64_t v33 = (void **)__p[0];
      }
      if (v54 >= 0) {
        unint64_t v34 = (void *)HIBYTE(v54);
      }
      else {
        unint64_t v34 = __p[1];
      }
      do
      {
        while (1)
        {
          float64x2_t v31 = (uint64_t **)v29;
          uint64_t v37 = v29[4];
          double v35 = v29 + 4;
          float32x2_t v36 = (void *)v37;
          int v38 = *((char *)v35 + 23);
          unint64_t v39 = v38 >= 0 ? v35 : v36;
          unsigned int v40 = v38 >= 0 ? (void *)*((unsigned __int8 *)v35 + 23) : (void *)v35[1];
          size_t v41 = (size_t)(v40 >= v34 ? v34 : v40);
          int v42 = memcmp(v33, v39, v41);
          if (v42) {
            break;
          }
          if (v34 >= v40) {
            goto LABEL_58;
          }
LABEL_44:
          float64x2_t v29 = *v31;
          BOOL v32 = v31;
          if (!*v31) {
            goto LABEL_64;
          }
        }
        if (v42 < 0) {
          goto LABEL_44;
        }
LABEL_58:
        int v43 = memcmp(v39, v33, v41);
        if (v43)
        {
          if ((v43 & 0x80000000) == 0) {
            goto LABEL_70;
          }
        }
        else if (v40 >= v34)
        {
          goto LABEL_70;
        }
        float64x2_t v29 = v31[1];
      }
      while (v29);
      BOOL v32 = v31 + 1;
LABEL_64:
      unint64_t v44 = (uint64_t *)operator new(0x38uLL);
      unsigned int v45 = (std::string *)(v44 + 4);
      if (v30 < 0)
      {
        std::string::__init_copy_ctor_external(v45, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v44[6] = v54;
      }
      uint64_t *v44 = 0;
      v44[1] = 0;
      v44[2] = (uint64_t)v31;
      unsigned __int16 *v32 = v44;
      uint64_t v46 = **(void **)(a4 + 24);
      if (v46)
      {
        *(void *)(a4 + 24) = v46;
        unint64_t v44 = *v32;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a4 + 32), v44);
      ++*(void *)(a4 + 40);
LABEL_70:
      v10 += v22 + v52;
      int v24 = 1;
      double v20 = (char *)v48;
      uint64_t v7 = (uint64_t **)a4;
LABEL_71:
      if (v20) {
        operator delete(v20);
      }
      if (v24)
      {
        unint64_t v11 = v10;
        uint64_t v9 = a2;
        unint64_t v8 = a3;
LABEL_10:
        inflateEnd(&buf);
        uint64_t v5 = 1;
        unint64_t v10 = v11;
        if (SHIBYTE(v54) < 0) {
          goto LABEL_75;
        }
        goto LABEL_11;
      }
      uint64_t v5 = 0;
      uint64_t v9 = a2;
      unint64_t v8 = a3;
      if (SHIBYTE(v54) < 0) {
LABEL_75:
      }
        operator delete(__p[0]);
LABEL_11:
      if (v10 < v8) {
        char v12 = v5;
      }
      else {
        char v12 = 0;
      }
      if ((v12 & 1) == 0) {
        return v5;
      }
    }
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  uint64_t v4 = GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.next_in) = 0;
    _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_ERROR, "Zip file smaller than the zip header", (uint8_t *)&buf, 2u);
  }
  return 0;
}

uint64_t karo::media::ZipLoader::loadFromFile()
{
  return 1;
}

void karo::media::ZipLoader::~ZipLoader(karo::media::ZipLoader *this)
{
}

uint64_t md::HighPrecisionAltitudeRequest::resolveResults(md::HighPrecisionAltitudeRequest *this)
{
  if (*((unsigned char *)this + 80)) {
    return 1;
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    std::mutex::lock(*((std::mutex **)this + 2));
    int v4 = *(unsigned __int8 *)(v3 + 64);
    std::mutex::unlock((std::mutex *)v3);
    if (v4)
    {
      uint64_t v5 = *(void *)this;
      if (*(void *)this)
      {
        std::mutex::lock(*(std::mutex **)this);
        int v6 = *(unsigned __int8 *)(v5 + 64);
        std::mutex::unlock((std::mutex *)v5);
        if (v6)
        {
          *((unsigned char *)this + 80) = 1;
          id v7 = *(id *)(*(void *)this + 88);
          if (v7)
          {

            return 1;
          }
          id v8 = *(id *)(*((void *)this + 2) + 128);

          if (v8) {
            return 1;
          }
          geo::small_vector<geo::Unit<geo::MeterUnitDescription,double>,2ul>::small_vector(&v32, (uint64_t **)(*((void *)this + 2) + 72));
          double v9 = *(double *)(*(void *)this + 72);
          geo::small_vector_base<geo::Unit<geo::MeterUnitDescription,double>>::reserve((char **)this + 4, v33 - v32);
          unint64_t v10 = v32;
          unint64_t v11 = v33;
          if (v32 == v33)
          {
LABEL_32:
            if (v10 != v34) {
              free(v10);
            }
            return 1;
          }
          uint64_t v13 = (char *)*((void *)this + 4);
          char v12 = (double *)*((void *)this + 5);
          unint64_t v14 = *((void *)this + 7);
          while (1)
          {
            double v15 = *v10;
            uint64_t v16 = ((char *)v12 - v13) >> 3;
            if (v14 < v16 + 1) {
              break;
            }
LABEL_14:
            *v12++ = v15 - v9;
            *((void *)this + 5) = v12;
            if (++v10 == v11)
            {
              unint64_t v10 = v32;
              goto LABEL_32;
            }
          }
          int v17 = (char *)*((void *)this + 6);
          unint64_t v18 = (1 << -(char)__clz(v14 + 1));
          if (v14 >= 0xFFFFFFFFFFFFFFFELL) {
            unint64_t v18 = 1;
          }
          if (v18 <= v16 + 1) {
            unint64_t v14 = v16 + 1;
          }
          else {
            unint64_t v14 = v18;
          }
          uint64_t v19 = (char *)malloc_type_malloc(8 * v14, 0x100004000313F17uLL);
          double v20 = (char *)*((void *)this + 4);
          uint64_t v21 = (char *)*((void *)this + 5);
          if (v20 != v21)
          {
            unint64_t v22 = v21 - v20 - 8;
            unsigned int v23 = v19;
            int v24 = (char *)*((void *)this + 4);
            if (v22 >= 0x18)
            {
              unsigned int v23 = v19;
              int v24 = (char *)*((void *)this + 4);
              if ((unint64_t)(v19 - v20) >= 0x20)
              {
                uint64_t v25 = (v22 >> 3) + 1;
                uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
                unsigned int v23 = &v19[v26];
                double v27 = (long long *)(v20 + 16);
                double v28 = v19 + 16;
                uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v30 = *v27;
                  *(v28 - 1) = *(v27 - 1);
                  *double v28 = v30;
                  v27 += 2;
                  v28 += 2;
                  v29 -= 4;
                }
                while (v29);
                if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_29;
                }
                int v24 = &v20[v26];
              }
            }
            do
            {
              uint64_t v31 = *(void *)v24;
              v24 += 8;
              *(void *)unsigned int v23 = v31;
              v23 += 8;
            }
            while (v24 != v21);
          }
LABEL_29:
          if (v13 != v17) {
            free(v20);
          }
          *((void *)this + 4) = v19;
          char v12 = (double *)&v19[8 * v16];
          *((void *)this + 7) = v14;
          uint64_t v13 = v19;
          goto LABEL_14;
        }
      }
    }
  }
  return 0;
}

void sub_1A241D4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11)
{
  if (a9 != a11) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

void *geo::small_vector<geo::Unit<geo::MeterUnitDescription,double>,2ul>::small_vector(void *a1, uint64_t **a2)
{
  uint64_t v3 = (char *)(a1 + 4);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3;
  a1[3] = 2;
  int v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = (char *)v5 - (char *)*a2;
  unint64_t v7 = v6 >> 3;
  if ((unint64_t)v6 >= 0x11)
  {
    if (v7 <= 4) {
      uint64_t v8 = 4;
    }
    else {
      uint64_t v8 = v6 >> 3;
    }
    uint64_t v3 = (char *)malloc_type_malloc(8 * v8, 0x100004000313F17uLL);
    double v9 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    if ((char *)*a1 == v10) {
      goto LABEL_14;
    }
    unint64_t v11 = v10 - v9 - 8;
    if (v11 < 0x18)
    {
      char v12 = v3;
    }
    else
    {
      char v12 = v3;
      if ((unint64_t)(v3 - v9) >= 0x20)
      {
        uint64_t v13 = (v11 >> 3) + 1;
        uint64_t v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
        char v12 = &v3[v14];
        double v15 = (long long *)(v9 + 16);
        uint64_t v16 = v3 + 16;
        uint64_t v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          _OWORD *v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 4;
        }
        while (v17);
        if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_14;
        }
        v9 += v14;
      }
    }
    do
    {
      uint64_t v19 = *(void *)v9;
      v9 += 8;
      *(void *)char v12 = v19;
      v12 += 8;
    }
    while (v9 != v10);
LABEL_14:
    *a1 = v3;
    a1[3] = v8;
  }
  if (v4 == v5) {
    goto LABEL_24;
  }
  if ((unint64_t)(v6 - 8) < 0x18)
  {
    double v20 = v3;
    do
    {
LABEL_23:
      uint64_t v27 = *v4++;
      *(void *)double v20 = v27;
      v20 += 8;
    }
    while (v4 != v5);
    goto LABEL_24;
  }
  double v20 = v3;
  if ((unint64_t)(v3 - (char *)v4) < 0x20) {
    goto LABEL_23;
  }
  unint64_t v21 = ((unint64_t)(v6 - 8) >> 3) + 1;
  uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
  double v20 = &v3[v22];
  unsigned int v23 = (long long *)(v4 + 2);
  int v24 = v3 + 16;
  uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *v23;
    *(v24 - 1) = *(v23 - 1);
    _OWORD *v24 = v26;
    v23 += 2;
    v24 += 2;
    v25 -= 4;
  }
  while (v25);
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
  {
    int v4 = (uint64_t *)((char *)v4 + v22);
    goto LABEL_23;
  }
LABEL_24:
  a1[1] = &v3[8 * v7];
  return a1;
}

void geo::small_vector_base<geo::Unit<geo::MeterUnitDescription,double>>::reserve(char **a1, unint64_t a2)
{
  unint64_t v2 = (unint64_t)a1[3];
  if (v2 >= a2) {
    return;
  }
  int v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *a1;
  unint64_t v7 = (1 << -(char)__clz(v2 + 1));
  if (v2 >= 0xFFFFFFFFFFFFFFFELL) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 <= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v8;
  }
  unint64_t v10 = (char *)malloc_type_malloc(8 * v9, 0x100004000313F17uLL);
  unint64_t v11 = *a1;
  char v12 = a1[1];
  if (*a1 != v12)
  {
    unint64_t v13 = v12 - v11 - 8;
    uint64_t v14 = v10;
    double v15 = *a1;
    if (v13 < 0x18) {
      goto LABEL_15;
    }
    uint64_t v14 = v10;
    double v15 = *a1;
    if ((unint64_t)(v10 - v11) < 0x20) {
      goto LABEL_15;
    }
    uint64_t v16 = (v13 >> 3) + 1;
    uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v14 = &v10[v17];
    long long v18 = (long long *)(v11 + 16);
    uint64_t v19 = v10 + 16;
    uint64_t v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v21 = *v18;
      *(v19 - 1) = *(v18 - 1);
      _OWORD *v19 = v21;
      v18 += 2;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
    {
      double v15 = &v11[v17];
      do
      {
LABEL_15:
        uint64_t v22 = *(void *)v15;
        v15 += 8;
        *(void *)uint64_t v14 = v22;
        v14 += 8;
      }
      while (v15 != v12);
    }
  }
  if (v6 != v5) {
    free(v11);
  }
  *a1 = v10;
  a1[1] = &v10[v4 - v6];
  a1[3] = (char *)v9;
}

uint64_t md::HighPrecisionAltitudeRequest::to_string(md::HighPrecisionAltitudeRequest *this, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v55);
  *(void *)((char *)&v55[2] + *(void *)(v55[0] - 24)) = 8;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)"isResolved:", 11);
  int v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)"egm2008Altitudes:[", 18);
  uint64_t v5 = a2[4];
  for (uint64_t i = a2[5]; v5 != i; v5 += 8)
  {
    unint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)"]", 1);
  unint64_t v8 = (void *)MEMORY[0x1E4FBA408];
  if (!*a2)
  {
LABEL_30:
    if (!a2[2]) {
      goto LABEL_61;
    }
    goto LABEL_31;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)", undulationRequest:{", 21);
  uint64_t v9 = *a2;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v65);
  *(void *)((char *)&v65[2] + *(void *)(v65[0] - 24)) = 8;
  std::mutex::lock((std::mutex *)v9);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v66, (uint64_t)"undulation:", 11);
  std::ostream::operator<<();
  if (*(void *)(v9 + 88))
  {
    unint64_t v10 = [NSString stringWithFormat:@"%@", *(void *)(v9 + 88)];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v66, (uint64_t)", error:", 8);
    id v11 = v10;
    char v12 = (const char *)[v11 UTF8String];
    size_t v13 = strlen(v12);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v66, (uint64_t)v12, v13);
  }
  std::mutex::unlock((std::mutex *)v9);
  if ((v75 & 0x10) != 0)
  {
    unint64_t v16 = v74;
    if (v74 < v71)
    {
      unint64_t v74 = v71;
      unint64_t v16 = v71;
    }
    uint64_t v17 = (const void **)&v70;
  }
  else
  {
    if ((v75 & 8) == 0)
    {
      size_t v14 = 0;
      HIBYTE(v54) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_21;
    }
    uint64_t v17 = (const void **)v68;
    unint64_t v16 = v69;
  }
  long long v18 = *v17;
  size_t v14 = v16 - (void)*v17;
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  if (v14 >= 0x17)
  {
    uint64_t v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v19 = v14 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (void **)operator new(v19 + 1);
    size_t v53 = v14;
    int64_t v54 = v20 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_20;
  }
  HIBYTE(v54) = v16 - *(unsigned char *)v17;
  p_dst = (void **)&__dst;
  if (v14) {
LABEL_20:
  }
    memmove(p_dst, v18, v14);
LABEL_21:
  *((unsigned char *)p_dst + v14) = 0;
  v65[0] = *v8;
  uint64_t v21 = v8[9];
  *(void *)((char *)v65 + *(void *)(v65[0] - 24)) = v8[8];
  uint64_t v66 = v21;
  uint64_t v67 = MEMORY[0x1E4FBA470] + 16;
  if (v73 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A62391A0](v76);
  if (v54 >= 0) {
    uint64_t v22 = (void **)&__dst;
  }
  else {
    uint64_t v22 = __dst;
  }
  if (v54 >= 0) {
    uint64_t v23 = HIBYTE(v54);
  }
  else {
    uint64_t v23 = v53;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)v22, v23);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)"}", 1);
  if ((SHIBYTE(v54) & 0x80000000) == 0) {
    goto LABEL_30;
  }
  operator delete(__dst);
  if (!a2[2]) {
    goto LABEL_61;
  }
LABEL_31:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)", vlRequest:{", 13);
  uint64_t v24 = a2[2];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v65);
  *(void *)((char *)&v65[2] + *(void *)(v65[0] - 24)) = 8;
  std::mutex::lock((std::mutex *)v24);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v66, (uint64_t)"wgs84Altitudes:[", 16);
  uint64_t v25 = *(void *)(v24 + 72);
  for (uint64_t j = *(void *)(v24 + 80); v25 != j; v25 += 8)
  {
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)",", 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v66, (uint64_t)"],", 2);
  if (*(void *)(v24 + 128))
  {
    double v28 = [NSString stringWithFormat:@"%@", *(void *)(v24 + 128)];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v66, (uint64_t)", error:", 8);
    id v29 = v28;
    long long v30 = (const char *)[v29 UTF8String];
    size_t v31 = strlen(v30);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v66, (uint64_t)v30, v31);
  }
  std::mutex::unlock((std::mutex *)v24);
  if ((v75 & 0x10) != 0)
  {
    unint64_t v34 = v74;
    if (v74 < v71)
    {
      unint64_t v74 = v71;
      unint64_t v34 = v71;
    }
    double v35 = (const void **)&v70;
  }
  else
  {
    if ((v75 & 8) == 0)
    {
      size_t v32 = 0;
      HIBYTE(v54) = 0;
      unint64_t v33 = (void **)&__dst;
      goto LABEL_52;
    }
    double v35 = (const void **)v68;
    unint64_t v34 = v69;
  }
  float32x2_t v36 = *v35;
  size_t v32 = v34 - (void)*v35;
  if (v32 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  if (v32 >= 0x17)
  {
    uint64_t v37 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v37 = v32 | 7;
    }
    uint64_t v38 = v37 + 1;
    unint64_t v33 = (void **)operator new(v37 + 1);
    size_t v53 = v32;
    int64_t v54 = v38 | 0x8000000000000000;
    long long __dst = v33;
    goto LABEL_51;
  }
  HIBYTE(v54) = v34 - *(unsigned char *)v35;
  unint64_t v33 = (void **)&__dst;
  if (v32) {
LABEL_51:
  }
    memmove(v33, v36, v32);
LABEL_52:
  *((unsigned char *)v33 + v32) = 0;
  v65[0] = *v8;
  uint64_t v39 = v8[9];
  *(void *)((char *)v65 + *(void *)(v65[0] - 24)) = v8[8];
  uint64_t v66 = v39;
  uint64_t v67 = MEMORY[0x1E4FBA470] + 16;
  if (v73 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A62391A0](v76);
  if (v54 >= 0) {
    unsigned int v40 = (void **)&__dst;
  }
  else {
    unsigned int v40 = __dst;
  }
  if (v54 >= 0) {
    uint64_t v41 = HIBYTE(v54);
  }
  else {
    uint64_t v41 = v53;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)v40, v41);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)"}", 1);
  if (SHIBYTE(v54) < 0)
  {
    operator delete(__dst);
    char v42 = v63;
    if ((v63 & 0x10) == 0) {
      goto LABEL_62;
    }
LABEL_66:
    unint64_t v45 = v62;
    if (v62 < v59)
    {
      unint64_t v62 = v59;
      unint64_t v45 = v59;
    }
    unint64_t v44 = (const void **)&v58;
    goto LABEL_69;
  }
LABEL_61:
  char v42 = v63;
  if ((v63 & 0x10) != 0) {
    goto LABEL_66;
  }
LABEL_62:
  if ((v42 & 8) == 0)
  {
    size_t v43 = 0;
    *((unsigned char *)this + 23) = 0;
    goto LABEL_77;
  }
  unint64_t v44 = (const void **)v57;
  unint64_t v45 = v57[2];
LABEL_69:
  uint64_t v46 = *v44;
  size_t v43 = v45 - (void)*v44;
  if (v43 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  if (v43 >= 0x17)
  {
    uint64_t v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17) {
      uint64_t v47 = v43 | 7;
    }
    uint64_t v48 = v47 + 1;
    unint64_t v49 = (md::HighPrecisionAltitudeRequest *)operator new(v47 + 1);
    *((void *)this + 1) = v43;
    *((void *)this + 2) = v48 | 0x8000000000000000;
    *(void *)this = v49;
    this = v49;
    goto LABEL_76;
  }
  *((unsigned char *)this + 23) = v43;
  if (v43) {
LABEL_76:
  }
    memmove(this, v46, v43);
LABEL_77:
  *((unsigned char *)this + v43) = 0;
  v55[0] = *v8;
  uint64_t v50 = v8[9];
  *(void *)((char *)v55 + *(void *)(v55[0] - 24)) = v8[8];
  v56[0] = v50;
  v56[1] = MEMORY[0x1E4FBA470] + 16;
  if (v61 < 0) {
    operator delete(v60);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v64);
}

void sub_1A241E0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  std::mutex::unlock(v52);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a52);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void md::HighPrecisionAltitudeRequest::createDebugNode(md::HighPrecisionAltitudeRequest *this, uint64_t *a2)
{
  int v4 = (char *)operator new(0x20uLL);
  strcpy(v4, "HighPrecisionAltitudeRequest");
  std::string::__init_copy_ctor_external((std::string *)this, v4, 0x1CuLL);
  *((unsigned char *)this + 24) = 0;
  *(_OWORD *)((char *)this + 47) = 0u;
  *(_OWORD *)((char *)this + 63) = 0u;
  *(_OWORD *)((char *)this + 79) = 0u;
  *((unsigned char *)this + 95) = 0;
  operator delete(v4);
  v40[0] = 10;
  strcpy(v39, "isResolved");
  uint64_t v5 = *((unsigned __int8 *)a2 + 80);
  int v48 = 0;
  memset(&v47[4], 0, 24);
  v47[0] = v5;
  gdc::DebugTreeNode::addProperty((uint64_t)this, (uint64_t)v39, (uint64_t)v47);
  unint64_t v7 = (double *)a2[4];
  uint64_t v6 = (double *)a2[5];
  unint64_t v44 = 0;
  unint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v8 = (char *)v6 - (char *)v7;
  if (v6 != v7)
  {
    if ((unint64_t)v8 >= 0x1FFFFFFFFFFFFFF9) {
      abort();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
    unint64_t v44 = v9;
    unint64_t v45 = (void **)v9;
    uint64_t v46 = &v9[64 * (v8 >> 3)];
    do
    {
      double v10 = *v7;
      if (v9 < v46)
      {
        *((void *)v9 + 4) = 0;
        *((void *)v9 + 5) = 0;
        *((void *)v9 + 6) = 0;
        *((_DWORD *)v9 + 14) = 2;
        *((double *)v9 + 2) = v10;
        v9 += 64;
      }
      else
      {
        uint64_t v9 = std::vector<gdc::DebugTreeValue>::__emplace_back_slow_path<double &>(&v44, v10);
      }
      unint64_t v45 = (void **)v9;
      ++v7;
    }
    while (v7 != v6);
  }
  v40[0] = 16;
  strcpy(v39, "egm2008Altitudes");
  gdc::DebugTreeNode::addProperty((uint64_t)this, (uint64_t)v39, (uint64_t *)&v44);
  uint64_t v11 = *a2;
  if (*a2)
  {
    strcpy(v39, "UndulationRequest");
    *(_WORD *)unsigned int v40 = 17;
    long long v41 = 0u;
    memset(v42, 0, sizeof(v42));
    char v43 = 0;
    std::mutex::lock((std::mutex *)v11);
    HIBYTE(v54) = 9;
    strcpy(v53, "hasResult");
    uint64_t v12 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    int v63 = 0;
    uint64_t v60 = 0;
    v59[0] = v12;
    gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v53, (uint64_t)v59);
    uint64_t v13 = *(void *)(v11 + 72);
    HIBYTE(v50) = 10;
    strcpy((char *)v49, "undulation");
    memset(&v55, 0, sizeof(v55));
    int v56 = 2;
    uint64_t v54 = v13;
    gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v49, (uint64_t)v53);
    size_t v14 = NSString;
    double v15 = *(void **)(v11 + 88);
    char v58 = 5;
    strcpy(v57, "error");
    id v16 = v15;
    id v17 = [v14 stringWithFormat:@"%@", v16];
    long long v18 = (const std::string::value_type *)[v17 UTF8String];
    memset(&__p, 0, sizeof(__p));
    int v52 = 4;
    if (v18)
    {
      std::string::__assign_external(&__p, v18);
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v57, (uint64_t)v49);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }

    std::mutex::unlock((std::mutex *)v11);
    gdc::DebugTreeNode::addChildNode(this, (long long *)v39);
    uint64_t v19 = *(void **)((char *)&v42[1] + 1);
    if (*(void **)((char *)&v42[1] + 1))
    {
      uint64_t v20 = *(uint64_t *)((char *)&v42[2] + 1);
      uint64_t v21 = *(void **)((char *)&v42[1] + 1);
      if (*(void **)((char *)&v42[2] + 1) != *(void **)((char *)&v42[1] + 1))
      {
        do
        {
          v20 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v20);
        }
        while ((void *)v20 != v19);
        uint64_t v21 = *(void **)((char *)&v42[1] + 1);
      }
      *(void **)((char *)&v42[2] + 1) = v19;
      operator delete(v21);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v41 + 1));
    if (((char)v41 & 0x80000000) == 0)
    {
      if ((v40[0] & 0x80000000) == 0) {
        goto LABEL_21;
      }
LABEL_33:
      operator delete(*(void **)v39);
      uint64_t v22 = a2[2];
      if (!v22) {
        goto LABEL_52;
      }
      goto LABEL_22;
    }
    operator delete(*(void **)&v40[1]);
    if (v40[0] < 0) {
      goto LABEL_33;
    }
  }
LABEL_21:
  uint64_t v22 = a2[2];
  if (!v22) {
    goto LABEL_52;
  }
LABEL_22:
  strcpy(v39, "VLRequest");
  strcpy(v40, "\t");
  long long v41 = 0u;
  memset(v42, 0, sizeof(v42));
  char v43 = 0;
  std::mutex::lock((std::mutex *)v22);
  HIBYTE(v54) = 9;
  strcpy(v53, "hasResult");
  uint64_t v23 = *(unsigned __int8 *)(v22 + 64);
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  int v63 = 0;
  uint64_t v60 = 0;
  v59[0] = v23;
  gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v53, (uint64_t)v59);
  uint64_t v25 = *(double **)(v22 + 72);
  uint64_t v24 = *(double **)(v22 + 80);
  v49[0] = 0;
  v49[1] = 0;
  uint64_t v50 = 0;
  uint64_t v26 = (char *)v24 - (char *)v25;
  if (v24 == v25)
  {
    uint64_t v27 = 0;
  }
  else
  {
    if ((unint64_t)v26 >= 0x1FFFFFFFFFFFFFF9) {
      abort();
    }
    uint64_t v27 = (char *)operator new(8 * v26);
    v49[0] = v27;
    v49[1] = v27;
    uint64_t v50 = &v27[64 * (v26 >> 3)];
    do
    {
      double v28 = *v25;
      if (v27 < v50)
      {
        *((void *)v27 + 4) = 0;
        *((void *)v27 + 5) = 0;
        *((void *)v27 + 6) = 0;
        *((_DWORD *)v27 + 14) = 2;
        *((double *)v27 + 2) = v28;
        v27 += 64;
      }
      else
      {
        uint64_t v27 = std::vector<gdc::DebugTreeValue>::__emplace_back_slow_path<double &>(v49, v28);
      }
      v49[1] = v27;
      ++v25;
    }
    while (v25 != v24);
  }
  char v58 = 5;
  strcpy(v57, "error");
  id v29 = NSString;
  id v30 = *(id *)(v22 + 128);
  id v31 = [v29 stringWithFormat:@"%@", v30];
  size_t v32 = (const std::string::value_type *)[v31 UTF8String];
  memset(&v55, 0, sizeof(v55));
  int v56 = 4;
  if (v32)
  {
    std::string::__assign_external(&v55, v32);
  }
  else
  {
    *((unsigned char *)&v55.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v55, "<null>");
  }
  gdc::DebugTreeNode::addProperty((uint64_t)v39, (uint64_t)v57, (uint64_t)v53);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }

  unint64_t v33 = (char *)v49[0];
  if (v49[0])
  {
    while (v27 != v33)
    {
      if (*(v27 - 9) < 0) {
        operator delete(*((void **)v27 - 4));
      }
      v27 -= 64;
    }
    operator delete(v33);
  }
  std::mutex::unlock((std::mutex *)v22);
  gdc::DebugTreeNode::addChildNode(this, (long long *)v39);
  unint64_t v34 = *(void **)((char *)&v42[1] + 1);
  if (*(void **)((char *)&v42[1] + 1))
  {
    uint64_t v35 = *(uint64_t *)((char *)&v42[2] + 1);
    float32x2_t v36 = *(void **)((char *)&v42[1] + 1);
    if (*(void **)((char *)&v42[2] + 1) != *(void **)((char *)&v42[1] + 1))
    {
      do
      {
        v35 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v35);
      }
      while ((void *)v35 != v34);
      float32x2_t v36 = *(void **)((char *)&v42[1] + 1);
    }
    *(void **)((char *)&v42[2] + 1) = v34;
    operator delete(v36);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v41 + 1));
  if (((char)v41 & 0x80000000) == 0)
  {
    if ((v40[0] & 0x80000000) == 0) {
      goto LABEL_52;
    }
LABEL_61:
    operator delete(*(void **)v39);
    uint64_t v37 = (void **)v44;
    if (!v44) {
      return;
    }
    goto LABEL_53;
  }
  operator delete(*(void **)&v40[1]);
  if (v40[0] < 0) {
    goto LABEL_61;
  }
LABEL_52:
  uint64_t v37 = (void **)v44;
  if (!v44) {
    return;
  }
LABEL_53:
  for (uint64_t i = v45; i != v37; i -= 8)
  {
    if (*((char *)i - 9) < 0) {
      operator delete(*(i - 4));
    }
  }
  operator delete(v37);
}

void sub_1A241E7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  uint64_t v38 = v36;

  std::vector<gdc::DebugTreeValue>::~vector[abi:nn180100](&a34);
  std::mutex::unlock(v35);
  gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)&a11);
  std::vector<gdc::DebugTreeValue>::~vector[abi:nn180100](&a23);
  gdc::DebugTreeNode::~DebugTreeNode(v34);
  _Unwind_Resume(a1);
}

char *std::vector<gdc::DebugTreeValue>::__emplace_back_slow_path<double &>(void **a1, double a2)
{
  uint64_t v3 = (void **)*a1;
  unint64_t v2 = (void **)a1[1];
  uint64_t v4 = ((char *)v2 - (unsigned char *)*a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    abort();
  }
  uint64_t v7 = (unsigned char *)a1[2] - (unsigned char *)v3;
  if (v7 >> 5 > v5) {
    unint64_t v5 = v7 >> 5;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v5 = 0x3FFFFFFFFFFFFFFLL;
  }
  if (v5 >> 58) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v9 = v5 << 6;
  double v10 = (char *)operator new(v5 << 6);
  uint64_t v11 = &v10[64 * v4];
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  uint64_t v12 = &v10[v9];
  *((void *)v11 + 4) = 0;
  *((_DWORD *)v11 + 14) = 2;
  *((double *)v11 + 2) = a2;
  uint64_t v13 = v11 + 64;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      long long v14 = *((_OWORD *)v2 - 4);
      *(_OWORD *)(v11 - 55) = *(_OWORD *)((char *)v2 - 55);
      *((_OWORD *)v11 - 4) = v14;
      long long v15 = *((_OWORD *)v2 - 2);
      *((void *)v11 - 2) = *(v2 - 2);
      *((_OWORD *)v11 - 2) = v15;
      *(v2 - 3) = 0;
      *(v2 - 2) = 0;
      *(v2 - 4) = 0;
      *((_DWORD *)v11 - 2) = *((_DWORD *)v2 - 2);
      v11 -= 64;
      v2 -= 8;
    }
    while (v2 != v3);
    unint64_t v2 = (void **)*a1;
    id v16 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v16 != v2)
    {
      if (*((char *)v16 - 9) < 0) {
        operator delete(*(v16 - 4));
      }
      v16 -= 8;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

void geo::_retain_ptr<CLLocationManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559718;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<CLLocationManager * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559718;

  return a1;
}

void geo::_retain_ptr<VLLocalizer * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559458;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VLLocalizer * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559458;

  return a1;
}

void md::HighPrecisionAltitudeRequestor::~HighPrecisionAltitudeRequestor(md::HighPrecisionAltitudeRequestor *this)
{
  unint64_t v2 = (char *)this + 376;
  uint64_t v3 = (char *)*((void *)this + 50);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (md::HighPrecisionAltitudeRequestor *)*((void *)this + 46);
  if (v4 == (md::HighPrecisionAltitudeRequestor *)((char *)this + 344))
  {
    (*(void (**)(char *))(*((void *)this + 43) + 32))((char *)this + 344);
    if (!*((void *)this + 42)) {
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  if (v4) {
    (*(void (**)(md::HighPrecisionAltitudeRequestor *))(*(void *)v4 + 40))(v4);
  }
  if (*((void *)this + 42))
  {
LABEL_11:
    uint64_t v5 = *((void *)this + 40);
    uint64_t v6 = (md::HighPrecisionAltitudeRequestor *)*((void *)this + 41);
    uint64_t v7 = *(void *)v6;
    *(void *)(v7 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v7;
    *((void *)this + 42) = 0;
    if (v6 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 320))
    {
      do
      {
        uint64_t v8 = (md::HighPrecisionAltitudeRequestor *)*((void *)v6 + 1);
        unint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 5);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        operator delete(v6);
        uint64_t v6 = v8;
      }
      while (v8 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 320));
    }
  }
LABEL_17:
  double v10 = (void *)*((void *)this + 37);
  if (v10)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      operator delete(v10);
      double v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = (void *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v12) {
    operator delete(v12);
  }
  if (*((void *)this + 33))
  {
    uint64_t v13 = *((void *)this + 31);
    long long v14 = (md::HighPrecisionAltitudeRequestor *)*((void *)this + 32);
    uint64_t v15 = *(void *)v14;
    *(void *)(v15 + 8) = *(void *)(v13 + 8);
    **(void **)(v13 + 8) = v15;
    *((void *)this + 33) = 0;
    if (v14 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 248))
    {
      do
      {
        id v16 = (md::HighPrecisionAltitudeRequestor *)*((void *)v14 + 1);
        id v17 = (std::__shared_weak_count *)*((void *)v14 + 5);
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        operator delete(v14);
        long long v14 = v16;
      }
      while (v16 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 248));
    }
  }
  long long v18 = (void *)*((void *)this + 28);
  if (v18)
  {
    do
    {
      uint64_t v19 = (void *)*v18;
      operator delete(v18);
      long long v18 = v19;
    }
    while (v19);
  }
  uint64_t v20 = (void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v20) {
    operator delete(v20);
  }
  if (*((void *)this + 24))
  {
    uint64_t v21 = *((void *)this + 22);
    uint64_t v22 = (md::HighPrecisionAltitudeRequestor *)*((void *)this + 23);
    uint64_t v23 = *(void *)v22;
    *(void *)(v23 + 8) = *(void *)(v21 + 8);
    **(void **)(v21 + 8) = v23;
    *((void *)this + 24) = 0;
    if (v22 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 176))
    {
      do
      {
        uint64_t v24 = (md::HighPrecisionAltitudeRequestor *)*((void *)v22 + 1);
        uint64_t v25 = (std::__shared_weak_count *)*((void *)v22 + 5);
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        operator delete(v22);
        uint64_t v22 = v24;
      }
      while (v24 != (md::HighPrecisionAltitudeRequestor *)((char *)this + 176));
    }
  }
  uint64_t v26 = (void *)*((void *)this + 19);
  if (v26)
  {
    do
    {
      uint64_t v27 = (void *)*v26;
      operator delete(v26);
      uint64_t v26 = v27;
    }
    while (v27);
  }
  double v28 = (void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v28) {
    operator delete(v28);
  }
  *((void *)this + 13) = &unk_1EF559718;

  *((void *)this + 10) = &unk_1EF559458;
  id v29 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>()
{
  if (LoadCoreLocation(void)::loadPredicate != -1) {
    dispatch_once(&LoadCoreLocation(void)::loadPredicate, &__block_literal_global_27782);
  }
  if (LoadVisualLocalization(void)::loadPredicate != -1)
  {
    dispatch_once(&LoadVisualLocalization(void)::loadPredicate, &__block_literal_global_44);
  }
}

void ___ZL22LoadVisualLocalizationv_block_invoke()
{
  LoadVisualLocalization(void)::frameworkLibrardouble y = (uint64_t)dlopen("/System/Library/Frameworks/VisualLocalization.framework/VisualLocalization", 2);
  if (!LoadVisualLocalization(void)::frameworkLibrary) {
    NSLog((NSString *)@"### Failed to Soft Linked: /System/Library/Frameworks/VisualLocalization.framework/VisualLocalization");
  }
}

void ___ZL16LoadCoreLocationv_block_invoke()
{
  LoadCoreLocation(void)::frameworkLibrardouble y = (uint64_t)dlopen("/System/Library/Frameworks/CoreLocation.framework/CoreLocation", 2);
  if (!LoadCoreLocation(void)::frameworkLibrary) {
    NSLog((NSString *)@"### Failed to Soft Linked: /System/Library/Frameworks/CoreLocation.framework/CoreLocation");
  }
}

void geo::_retain_ptr<CLLocation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559378;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<CLLocation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559378;

  return a1;
}

Class initCLLocation(void)
{
  if (LoadCoreLocation(void)::loadPredicate != -1) {
    dispatch_once(&LoadCoreLocation(void)::loadPredicate, &__block_literal_global_27782);
  }
  Class result = objc_getClass("CLLocation");
  classCLLocation = (uint64_t)result;
  getCLLocationClass[0] = (uint64_t (*)(void))CLLocationFunction;
  return result;
}

id CLLocationFunction(void)
{
  return (id)classCLLocation;
}

id md::HighPrecisionAltitudeRequestor::vlLocalizer(md::HighPrecisionAltitudeRequestor *this)
{
  unint64_t v2 = (void *)*((void *)this + 11);
  if (!v2)
  {
    if (atomic_load_explicit((atomic_ullong *volatile)this + 55, memory_order_acquire) != -1)
    {
      uint64_t v8 = &v6;
      uint64_t v7 = &v8;
      std::__call_once((std::once_flag::_State_type *)this + 55, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>);
    }
    uint64_t v3 = [objc_alloc((Class)getVLLocalizerClass[0]()) initWithAuditToken:0];
    uint64_t v4 = (void *)*((void *)this + 11);
    *((void *)this + 11) = v3;

    unint64_t v2 = (void *)*((void *)this + 11);
  }
  return v2;
}

Class initVLLocalizer(void)
{
  if (LoadVisualLocalization(void)::loadPredicate != -1) {
    dispatch_once(&LoadVisualLocalization(void)::loadPredicate, &__block_literal_global_44);
  }
  Class result = objc_getClass("VLLocalizer");
  classVLLocalizer = (uint64_t)result;
  getVLLocalizerClass[0] = (uint64_t (*)(void))VLLocalizerFunction;
  return result;
}

id VLLocalizerFunction(void)
{
  return (id)classVLLocalizer;
}

Class initCLLocationManager(void)
{
  if (LoadCoreLocation(void)::loadPredicate != -1) {
    dispatch_once(&LoadCoreLocation(void)::loadPredicate, &__block_literal_global_27782);
  }
  Class result = objc_getClass("CLLocationManager");
  classCLLocationManager = (uint64_t)result;
  getCLLocationManagerClass[0] = (uint64_t (*)(void))CLLocationManagerFunction;
  return result;
}

id CLLocationManagerFunction(void)
{
  return (id)classCLLocationManager;
}

void *std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(void *a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  if (!*(void *)&v3) {
    return 0;
  }
  unint64_t v4 = (a3
      + ((a2 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (a2 - 0x61C8864680B583EBLL);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = (a3
        + ((a2 - 0x61C8864680B583EBLL) << 6)
        + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
        - 0x61C8864680B583EBLL) ^ (a2 - 0x61C8864680B583EBLL);
    if (v4 >= *(void *)&v3) {
      unint64_t v6 = v4 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v6 = v4 & (*(void *)&v3 - 1);
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  Class result = (void *)*v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      uint64_t v9 = *(void *)&v3 - 1;
      while (1)
      {
        uint64_t v13 = result[1];
        if (v13 == v4)
        {
          if (result[2] == a2 && result[3] == a3) {
            return result;
          }
        }
        else if ((v13 & v9) != v6)
        {
          return 0;
        }
        Class result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v11 = result[1];
      if (v11 == v4)
      {
        if (result[2] == a2 && result[3] == a3) {
          return result;
        }
      }
      else
      {
        if (v11 >= *(void *)&v3) {
          v11 %= *(void *)&v3;
        }
        if (v11 != v6) {
          return 0;
        }
      }
      Class result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *geo::Cache<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>,md::SpatialKeyHash,geo::LRUPolicy>::operator[](uint64_t a1, uint64_t *a2)
{
  uint8x8_t v5 = (uint64_t *)(a1 + 48);
  unint64_t v6 = (void **)(a1 + 8);
  uint64_t v7 = *a2;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>((void *)(a1 + 8), *a2, a2[1]);
  if (v8)
  {
    uint64_t v9 = *(uint64_t **)(a1 + 56);
    double v10 = (uint64_t *)v8[4];
    if (v9 != v10)
    {
      unint64_t v11 = (uint64_t *)v10[1];
      if (v11 != v9)
      {
        uint64_t v12 = *v10;
        *(void *)(v12 + 8) = v11;
        *(void *)v10[1] = v12;
        uint64_t v13 = *v9;
        *(void *)(v13 + 8) = v10;
        uint64_t *v10 = v13;
        *uint64_t v9 = (uint64_t)v10;
        v10[1] = (uint64_t)v9;
        uint64_t v9 = *(uint64_t **)(a1 + 56);
      }
    }
    if (v9 != v5) {
      return v9 + 4;
    }
  }
  long long v14 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(v6, v7, a2[1]);
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = (uint64_t *)v14[4];
    uint64_t v17 = *v16;
    *(void *)(v17 + 8) = v16[1];
    *(void *)v16[1] = v17;
    --*(void *)(a1 + 64);
    long long v18 = (std::__shared_weak_count *)v16[5];
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    operator delete(v16);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v6, v15);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  uint64_t v19 = operator new(0x30uLL);
  v19[1] = *(_OWORD *)a2;
  *((void *)v19 + 4) = 0;
  *((void *)v19 + 5) = 0;
  uint64_t v20 = *(void **)(a1 + 56);
  *(void *)uint64_t v19 = v5;
  *((void *)v19 + 1) = v20;
  *uint64_t v20 = v19;
  uint64_t v21 = *(void *)(a1 + 64) + 1;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v21;
  uint64_t v22 = *a2;
  uint64_t v23 = a2[1];
  unint64_t v24 = (v23
       + ((*a2 - 0x61C8864680B583EBLL) << 6)
       + ((unint64_t)(*a2 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (*a2 - 0x61C8864680B583EBLL);
  unint64_t v25 = *(void *)(a1 + 16);
  if (v25)
  {
    uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
    v26.i16[0] = vaddlv_u8(v26);
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v2 = (v23
          + ((*a2 - 0x61C8864680B583EBLL) << 6)
          + ((unint64_t)(*a2 - 0x61C8864680B583EBLL) >> 2)
          - 0x61C8864680B583EBLL) ^ (*a2 - 0x61C8864680B583EBLL);
      if (v24 >= v25) {
        unint64_t v2 = v24 % v25;
      }
    }
    else
    {
      unint64_t v2 = v24 & (v25 - 1);
    }
    uint64_t v27 = (void *)*((void *)*v6 + v2);
    if (v27)
    {
      double v28 = (void *)*v27;
      if (v28)
      {
        if (v26.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v32 = v28[1];
            if (v32 == v24)
            {
              if (v28[2] == v22 && v28[3] == v23) {
                goto LABEL_99;
              }
            }
            else if ((v32 & (v25 - 1)) != v2)
            {
              goto LABEL_39;
            }
            double v28 = (void *)*v28;
            if (!v28) {
              goto LABEL_39;
            }
          }
        }
        do
        {
          unint64_t v30 = v28[1];
          if (v30 == v24)
          {
            if (v28[2] == v22 && v28[3] == v23) {
              goto LABEL_99;
            }
          }
          else
          {
            if (v30 >= v25) {
              v30 %= v25;
            }
            if (v30 != v2) {
              break;
            }
          }
          double v28 = (void *)*v28;
        }
        while (v28);
      }
    }
  }
LABEL_39:
  unint64_t v33 = operator new(0x28uLL);
  void *v33 = 0;
  v33[1] = v24;
  *((_OWORD *)v33 + 1) = *(_OWORD *)a2;
  v33[4] = v19;
  float v34 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
  float v35 = *(float *)(a1 + 40);
  if (!v25 || (float)(v35 * (float)v25) < v34)
  {
    BOOL v36 = 1;
    if (v25 >= 3) {
      BOOL v36 = (v25 & (v25 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v25);
    unint64_t v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v25 = *(void *)(a1 + 16);
    }
    if (prime <= v25)
    {
      if (prime >= v25) {
        goto LABEL_76;
      }
      unint64_t v51 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v25 < 3 || (uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
      {
        unint64_t v51 = std::__next_prime(v51);
      }
      else
      {
        uint64_t v53 = 1 << -(char)__clz(v51 - 1);
        if (v51 >= 2) {
          unint64_t v51 = v53;
        }
      }
      if (prime <= v51) {
        size_t prime = v51;
      }
      if (prime >= v25)
      {
        unint64_t v25 = *(void *)(a1 + 16);
LABEL_76:
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v24 >= v25) {
            unint64_t v2 = v24 % v25;
          }
          else {
            unint64_t v2 = v24;
          }
        }
        else
        {
          unint64_t v2 = (v25 - 1) & v24;
        }
        goto LABEL_89;
      }
      if (!prime)
      {
        unint64_t v69 = *v6;
        md::HighPrecisionAltitudeRequestor *v6 = 0;
        if (v69) {
          operator delete(v69);
        }
        unint64_t v25 = 0;
        *(void *)(a1 + 16) = 0;
        goto LABEL_76;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unsigned int v40 = operator new(8 * prime);
    long long v41 = *v6;
    md::HighPrecisionAltitudeRequestor *v6 = v40;
    if (v41) {
      operator delete(v41);
    }
    uint64_t v42 = 0;
    *(void *)(a1 + 16) = prime;
    do
      *((void *)*v6 + v42++) = 0;
    while (prime != v42);
    uint64_t v44 = a1 + 24;
    char v43 = *(void **)(a1 + 24);
    if (!v43)
    {
LABEL_75:
      unint64_t v25 = prime;
      goto LABEL_76;
    }
    size_t v45 = v43[1];
    size_t v46 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v47 = v45 & v46;
      *((void *)*v6 + v47) = v44;
      for (uint64_t i = (void *)*v43; *v43; uint64_t i = (void *)*v43)
      {
        size_t v49 = i[1] & v46;
        if (v49 == v47)
        {
          char v43 = i;
        }
        else if (*((void *)*v6 + v49))
        {
          *char v43 = *i;
          uint64_t v50 = 8 * v49;
          *uint64_t i = **(void **)((char *)*v6 + v50);
          **(void **)((char *)*v6 + v50) = i;
        }
        else
        {
          *((void *)*v6 + v49) = v43;
          char v43 = i;
          size_t v47 = v49;
        }
      }
      goto LABEL_75;
    }
    if (v45 >= prime) {
      v45 %= prime;
    }
    *((void *)*v6 + v45) = v44;
    uint64_t v54 = (void *)*v43;
    if (!*v43) {
      goto LABEL_75;
    }
    while (1)
    {
      size_t v56 = v54[1];
      if (v56 >= prime) {
        v56 %= prime;
      }
      if (v56 != v45)
      {
        if (!*((void *)*v6 + v56))
        {
          *((void *)*v6 + v56) = v43;
          goto LABEL_80;
        }
        *char v43 = *v54;
        uint64_t v55 = 8 * v56;
        *uint64_t v54 = **(void **)((char *)*v6 + v55);
        **(void **)((char *)*v6 + v55) = v54;
        uint64_t v54 = v43;
      }
      size_t v56 = v45;
LABEL_80:
      char v43 = v54;
      uint64_t v54 = (void *)*v54;
      size_t v45 = v56;
      if (!v54) {
        goto LABEL_75;
      }
    }
  }
LABEL_89:
  uint64_t v57 = *v6;
  char v58 = (void *)*((void *)*v6 + v2);
  if (v58)
  {
    void *v33 = *v58;
  }
  else
  {
    void *v33 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v33;
    v57[v2] = a1 + 24;
    if (!*v33) {
      goto LABEL_98;
    }
    unint64_t v59 = *(void *)(*v33 + 8);
    if ((v25 & (v25 - 1)) != 0)
    {
      if (v59 >= v25) {
        v59 %= v25;
      }
    }
    else
    {
      v59 &= v25 - 1;
    }
    char v58 = (char *)*v6 + 8 * v59;
  }
  *char v58 = v33;
LABEL_98:
  ++*(void *)(a1 + 32);
LABEL_99:
  for (unint64_t j = *(void *)(a1 + 64); j > *(void *)a1; unint64_t j = *(void *)(a1 + 64))
  {
    uint64_t v61 = (uint64_t *)*v5;
    uint64_t v62 = *(void *)(*v5 + 16);
    uint64_t v63 = *(void *)(*v5 + 24);
    uint64_t v64 = *(std::__shared_weak_count **)(*v5 + 40);
    if (v64)
    {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v61 = *(uint64_t **)(a1 + 48);
      int v65 = (std::__shared_weak_count *)v61[5];
      unint64_t j = *(void *)(a1 + 64);
    }
    else
    {
      int v65 = 0;
    }
    uint64_t v66 = *v61;
    *(void *)(v66 + 8) = v61[1];
    *(void *)v61[1] = v66;
    *(void *)(a1 + 64) = j - 1;
    if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
    operator delete(v61);
    uint64_t v67 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(v6, v62, v63);
    if (v67)
    {
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v6, v67);
      if (__p[0]) {
        operator delete(__p[0]);
      }
    }
    if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  uint64_t v9 = *(uint64_t **)(a1 + 56);
  return v9 + 4;
}

void sub_1A241FB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  operator delete(v12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::HighPrecisionAltitudeRequest>::__on_zero_shared(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2 != (void *)a1[9]) {
    free(v2);
  }
  int8x8_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    unint64_t v4 = (std::__shared_weak_count *)a1[4];
    if (!v4) {
      return;
    }
  }
  else
  {
    unint64_t v4 = (std::__shared_weak_count *)a1[4];
    if (!v4) {
      return;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__shared_ptr_emplace<md::HighPrecisionAltitudeRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::HighPrecisionAltitudeRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZL48GEOGetVectorKitHighPrecisionAltitudeRequestorLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "HighPrecisionAltitudeRequestor");
  uint64_t v1 = (void *)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
  GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log = (uint64_t)v0;
}

void md::HighPrecisionAltitudeRequestor::requestAltitude(void *a1, uint64_t *a2, double *a3)
{
  int8x8_t v3 = a3;
  uint64_t v302 = *MEMORY[0x1E4F143B8];
  double v6 = *((double *)a2 + 8);
  double v7 = *a3;
  long double v8 = cos(*a3 * 0.034906585) * -559.82 + 111132.92;
  long double v9 = v8 + cos(v7 * 0.0698131701) * 1.175;
  long double v10 = v9 + cos(v7 * 0.104719755) * -0.0023;
  double v11 = v7 * 0.00872664626;
  long double v12 = tan(v7 * 0.00872664626 + 0.78103484);
  double v13 = log(v12);
  long double v14 = tan(v11 + 0.789761487);
  double v15 = fabs((log(v14) - v13) * 0.159154943);
  float64_t v270 = v3[1];
  long double v16 = tan(v11 + 0.785398163);
  long double v17 = log(v16);
  v18.f64[0] = v270;
  v18.f64[1] = v17;
  __asm { FMOV            V0.2D, #0.5 }
  float64x2_t v266 = _Q0;
  uint64x2_t v279 = vcvtq_u64_f64(vmulq_n_f64(vmlaq_f64(_Q0, (float64x2_t)xmmword_1A28FCBE0, v18), v10 / (v15 * v6)));
  uint64_t v23 = v279.i64[1];
  uint64_t v24 = v279.i64[0];
  unint64_t v25 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 35, v279.i64[0], v279.i64[1]);
  if (v25)
  {
    uint8x8_t v26 = (uint64_t *)a2[41];
    uint64_t v27 = (uint64_t *)v25[4];
    if (v26 != v27)
    {
      double v28 = (uint64_t *)v27[1];
      if (v28 != v26)
      {
        uint64_t v29 = *v27;
        *(void *)(v29 + 8) = v28;
        *(void *)v27[1] = v29;
        uint64_t v30 = *v26;
        *(void *)(v30 + 8) = v27;
        *uint64_t v27 = v30;
        *uint8x8_t v26 = (uint64_t)v27;
        v27[1] = (uint64_t)v26;
        uint8x8_t v26 = (uint64_t *)a2[41];
      }
    }
    if (v26 != a2 + 40)
    {
      ++*((_DWORD *)a2 + 106);
      id v31 = (void *)v26[4];
      if (!*v31 && !v31[2]) {
        ++*((_DWORD *)a2 + 108);
      }
      if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_51);
      }
      uint64_t v32 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
      {
        double v33 = *v3;
        uint64_t v34 = *((void *)v3 + 1);
        *(_DWORD *)z_stream buf = 134218752;
        *(double *)&buf[4] = v33;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v34;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&buf[24] = v24;
        LOWORD(v297) = 2048;
        *(void *)((char *)&v297 + 2) = v23;
        _os_log_impl(&dword_1A1780000, v32, OS_LOG_TYPE_DEBUG, "Found cached high precision altitude for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
      }
      *a1 = v26[4];
      uint64_t v35 = v26[5];
      a1[1] = v35;
      if (v35) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    }
  }
  ++*((_DWORD *)a2 + 107);
  int64x2_t v271 = *(int64x2_t *)v3;
  v289 = 0;
  v290 = &v289;
  uint64_t v291 = 0x4012000000;
  v292 = __Block_byref_object_copy__27823;
  v293 = __Block_byref_object_dispose__27824;
  v294 = "";
  long double v36 = cos(0.034906585 * *(double *)v271.i64) * -559.82 + 111132.92;
  long double v37 = v36 + cos(0.0698131701 * *(double *)v271.i64) * 1.175;
  long double v38 = v37 + cos(0.104719755 * *(double *)v271.i64) * -0.0023;
  long double v39 = tan(0.00872664626 * *(double *)v271.i64 + 0.78103484);
  double v40 = log(v39);
  long double v41 = tan(0.00872664626 * *(double *)v271.i64 + 0.789761487);
  double v42 = fabs((log(v41) - v40) * 0.159154943);
  long double v43 = tan(0.00872664626 * *(double *)v271.i64 + 0.785398163);
  long double v44 = log(v43);
  *(void *)&v45.f64[0] = vdupq_laneq_s64(v271, 1).u64[0];
  v45.f64[1] = v44;
  uint64x2_t v295 = vcvtq_u64_f64(vmulq_n_f64(vmlaq_f64(v266, (float64x2_t)xmmword_1A28FCBE0, v45), v38 / (v42 * v6)));
  v269 = a2 + 22;
  size_t v46 = a2 + 17;
  size_t v47 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 17, v295.i64[0], v295.i64[1]);
  v264 = a1;
  v265 = v3;
  if (!v47) {
    goto LABEL_26;
  }
  int v48 = (uint64_t *)a2[23];
  size_t v49 = (uint64_t *)v47[4];
  if (v48 != v49)
  {
    uint64_t v50 = (uint64_t *)v49[1];
    if (v50 != v48)
    {
      uint64_t v51 = *v49;
      *(void *)(v51 + 8) = v50;
      *(void *)v49[1] = v51;
      uint64_t v52 = *v48;
      *(void *)(v52 + 8) = v49;
      uint64_t *v49 = v52;
      uint64_t *v48 = (uint64_t)v49;
      v49[1] = (uint64_t)v48;
      int v48 = (uint64_t *)a2[23];
    }
  }
  if (v48 == v269)
  {
LABEL_26:
    ++*((_DWORD *)a2 + 105);
    uint64_t v57 = md::HighPrecisionAltitudeRequestor::vlLocalizer((md::HighPrecisionAltitudeRequestor *)a2);
    if (!v57)
    {
      v277 = 0;
      v278 = 0;
LABEL_173:

      int8x8_t v3 = v265;
      goto LABEL_174;
    }
    if (atomic_load_explicit(a2 + 55, memory_order_acquire) != -1)
    {
      *(void *)z_stream buf = &v286;
      __p[0] = buf;
      std::__call_once((std::once_flag::_State_type *)a2 + 55, __p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>);
    }
    v282 = &unk_1EF559378;
    id v283 = (id)objc_msgSend(objc_alloc((Class)getCLLocationClass[0]()), "initWithLatitude:longitude:", *(_OWORD *)&v271);
    if (!v283)
    {
      v277 = 0;
      v278 = 0;
LABEL_172:
      v282 = &unk_1EF559378;

      goto LABEL_173;
    }
    uint64_t v58 = (uint64_t)&unk_1EF559378;
    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_51);
    }
    unint64_t v59 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v61 = v290[6];
      uint64_t v60 = v290[7];
      *(_DWORD *)z_stream buf = 134218752;
      *(void *)&buf[4] = v271.i64[0];
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v271.i64[1];
      *(_WORD *)&buf[22] = 2048;
      *(void *)&buf[24] = v61;
      LOWORD(v297) = 2048;
      *(void *)((char *)&v297 + 2) = v60;
      _os_log_impl(&dword_1A1780000, v59, OS_LOG_TYPE_DEBUG, "Requesting vlAltitude for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
    }
    uint64_t v62 = (char *)operator new(0xA8uLL);
    *((void *)v62 + 1) = 0;
    *((void *)v62 + 2) = 0;
    *(void *)uint64_t v62 = &unk_1EF580640;
    *((void *)v62 + 3) = 850045863;
    *((_OWORD *)v62 + 2) = 0u;
    *((_OWORD *)v62 + 3) = 0u;
    *((_OWORD *)v62 + 4) = 0u;
    *(_OWORD *)(v62 + 73) = 0u;
    *((void *)v62 + 12) = v62 + 128;
    *((void *)v62 + 13) = v62 + 128;
    *((void *)v62 + 14) = v62 + 128;
    *((void *)v62 + 15) = 2;
    *((void *)v62 + 18) = &unk_1EF559E98;
    *((void *)v62 + 19) = 0;
    v277 = v62 + 24;
    v278 = (std::__shared_weak_count *)v62;
    uint64_t v63 = (void *)*a2;
    uint64_t v64 = (std::__shared_weak_count *)a2[1];
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    id v65 = v283;
    uint64_t v66 = a2[2];
    *(void *)z_stream buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3321888768;
    *(void *)&buf[16] = ___ZN2md30HighPrecisionAltitudeRequestor17requestVLAltitudeEN3geo12Coordinate2DINS1_7DegreesEdEE_block_invoke;
    *(void *)&buf[24] = &unk_1EF58EA60;
    *((void *)&v297 + 1) = v62 + 24;
    *(void *)v298 = v62;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v62 + 1, 1uLL, memory_order_relaxed);
    *(int64x2_t *)&v298[8] = v271;
    *(void *)&long long v297 = &v289;
    obunint64_t j = v63;
    v300 = v64;
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v263 = v64;
    objc_msgSend(v57, "determineAltitudesAtLocation:callbackQueue:callback:", v65, v66, buf, (char *)&v297 + 8);

    uint64_t v67 = v290;
    unint64_t v69 = v290 + 6;
    uint64_t v68 = (uint64_t)v290[6];
    uint64_t v70 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 17, v68, (uint64_t)v290[7]);
    if (v70)
    {
      unint64_t v71 = (uint64_t *)a2[23];
      float v72 = (uint64_t *)v70[4];
      if (v71 != v72)
      {
        char v73 = (uint64_t *)v72[1];
        if (v73 != v71)
        {
          uint64_t v74 = *v72;
          *(void *)(v74 + 8) = v73;
          *(void *)v72[1] = v74;
          uint64_t v75 = *v71;
          *(void *)(v75 + 8) = v72;
          *float v72 = v75;
          *unint64_t v71 = (uint64_t)v72;
          v72[1] = (uint64_t)v71;
          unint64_t v71 = (uint64_t *)a2[23];
        }
      }
      if (v71 != v269)
      {
LABEL_162:
        atomic_fetch_add_explicit((atomic_ullong *volatile)v62 + 1, 1uLL, memory_order_relaxed);
        BOOL v134 = (std::__shared_weak_count *)v71[5];
        v71[4] = (uint64_t)(v62 + 24);
        v71[5] = (uint64_t)v62;
        if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
        if (v300) {
          std::__shared_weak_count::__release_weak(v300);
        }
        float v135 = *(std::__shared_weak_count **)v298;
        if (*(void *)v298
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v298 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
        if (v263) {
          std::__shared_weak_count::__release_weak(v263);
        }
        goto LABEL_172;
      }
    }
    uint64_t v284 = 0;
    v285 = 0;
    uint64_t v286 = 0;
    v287 = 0;
    BOOL v76 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 17, v68, (uint64_t)v67[7]);
    if (v76)
    {
      double v77 = v76;
      BOOL v78 = (uint64_t *)v76[4];
      uint64_t v79 = *v78;
      *(void *)(v79 + 8) = v78[1];
      *(void *)v78[1] = v79;
      --a2[24];
      unsigned int v80 = (std::__shared_weak_count *)v78[5];
      if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
      operator delete(v78);
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a2 + 17, v77);
      if (__p[0]) {
        operator delete(__p[0]);
      }
    }
    unsigned int v81 = operator new(0x30uLL);
    double v82 = v81;
    v81[1] = *v69;
    float v83 = v287;
    *((void *)v81 + 4) = v286;
    *((void *)v81 + 5) = v83;
    if (v83) {
      atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v84 = (void *)a2[23];
    *(void *)unsigned int v81 = v269;
    *((void *)v81 + 1) = v84;
    *float v84 = v81;
    uint64_t v85 = a2[24] + 1;
    a2[23] = (uint64_t)v81;
    a2[24] = v85;
    char v86 = v67[6];
    unsigned int v87 = v67[7];
    unint64_t v88 = (unint64_t)&v87[64 * (void)(v86 - 0x61C8864680B583EBLL)
                               - 0x61C8864680B583EBLL
                               + ((unint64_t)(v86 - 0x61C8864680B583EBLL) >> 2)];
    unint64_t v89 = v88 ^ (unint64_t)(v86 - 0x61C8864680B583EBLL);
    unint64_t v90 = a2[18];
    v272 = v83;
    if (v90)
    {
      uint8x8_t v91 = (uint8x8_t)vcnt_s8((int8x8_t)v90);
      v91.i16[0] = vaddlv_u8(v91);
      if (v91.u32[0] > 1uLL)
      {
        uint64_t v58 = v88 ^ (unint64_t)(v86 - 0x61C8864680B583EBLL);
        unint64_t v92 = v58;
        if (v89 >= v90) {
          uint64_t v58 = v89 % v90;
        }
      }
      else
      {
        unint64_t v92 = v88 ^ (unint64_t)(v86 - 0x61C8864680B583EBLL);
        uint64_t v58 = v89 & (v90 - 1);
      }
      float64x2_t v93 = *(void **)(*v46 + 8 * v58);
      if (v93)
      {
        unsigned int v94 = (void *)*v93;
        if (v94)
        {
          if (v91.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v98 = v94[1];
              if (v98 == v92)
              {
                if ((unsigned char *)v94[2] == v86 && v94[3] == (void)v87) {
                  goto LABEL_140;
                }
              }
              else if ((v98 & (v90 - 1)) != v58)
              {
                goto LABEL_80;
              }
              unsigned int v94 = (void *)*v94;
              if (!v94) {
                goto LABEL_80;
              }
            }
          }
          do
          {
            unint64_t v96 = v94[1];
            if (v96 == v92)
            {
              if ((unsigned char *)v94[2] == v86 && v94[3] == (void)v87) {
                goto LABEL_140;
              }
            }
            else
            {
              if (v96 >= v90) {
                v96 %= v90;
              }
              if (v96 != v58) {
                break;
              }
            }
            unsigned int v94 = (void *)*v94;
          }
          while (v94);
        }
      }
    }
    else
    {
      unint64_t v92 = v88 ^ (unint64_t)(v86 - 0x61C8864680B583EBLL);
    }
LABEL_80:
    BOOL v99 = operator new(0x28uLL);
    *BOOL v99 = 0;
    v99[1] = v92;
    *((_OWORD *)v99 + 1) = *v69;
    v99[4] = v82;
    float v100 = (float)(unint64_t)(a2[20] + 1);
    float v101 = *((float *)a2 + 42);
    if (v90 && (float)(v101 * (float)v90) >= v100)
    {
LABEL_130:
      v123 = (void *)*v46;
      size_t v124 = *(void **)(*v46 + 8 * v58);
      if (v124)
      {
        *BOOL v99 = *v124;
      }
      else
      {
        *BOOL v99 = a2[19];
        a2[19] = (uint64_t)v99;
        v123[v58] = a2 + 19;
        if (!*v99) {
          goto LABEL_139;
        }
        unint64_t v125 = *(void *)(*v99 + 8);
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v125 >= v90) {
            v125 %= v90;
          }
        }
        else
        {
          v125 &= v90 - 1;
        }
        size_t v124 = (void *)(*v46 + 8 * v125);
      }
      void *v124 = v99;
LABEL_139:
      ++a2[20];
LABEL_140:
      if (v272 && !atomic_fetch_add(&v272->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
        std::__shared_weak_count::__release_weak(v272);
      }
      for (unint64_t i = a2[24]; i > a2[16]; unint64_t i = a2[24])
      {
        uint64_t v127 = (uint64_t *)*v269;
        uint64_t v128 = *(void *)(*v269 + 16);
        uint64_t v129 = *(void *)(*v269 + 24);
        double v130 = *(std::__shared_weak_count **)(*v269 + 40);
        if (v130)
        {
          atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v127 = (uint64_t *)a2[22];
          size_t v131 = (std::__shared_weak_count *)v127[5];
          unint64_t i = a2[24];
        }
        else
        {
          size_t v131 = 0;
        }
        uint64_t v132 = *v127;
        *(void *)(v132 + 8) = v127[1];
        *(void *)v127[1] = v132;
        a2[24] = i - 1;
        if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
        operator delete(v127);
        unint64_t v133 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 17, v128, v129);
        if (v133)
        {
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a2 + 17, v133);
          if (__p[0]) {
            operator delete(__p[0]);
          }
        }
        if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      if (v285 && !atomic_fetch_add(&v285->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
        std::__shared_weak_count::__release_weak(v285);
      }
      unint64_t v71 = (uint64_t *)a2[23];
      goto LABEL_162;
    }
    BOOL v102 = 1;
    if (v90 >= 3) {
      BOOL v102 = (v90 & (v90 - 1)) != 0;
    }
    unint64_t v103 = v102 | (2 * v90);
    unint64_t v104 = vcvtps_u32_f32(v100 / v101);
    if (v103 <= v104) {
      size_t prime = v104;
    }
    else {
      size_t prime = v103;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v90 = a2[18];
    }
    if (prime <= v90)
    {
      if (prime >= v90) {
        goto LABEL_117;
      }
      unint64_t v117 = vcvtps_u32_f32((float)(unint64_t)a2[20] / *((float *)a2 + 42));
      if (v90 < 3 || (uint8x8_t v118 = (uint8x8_t)vcnt_s8((int8x8_t)v90), v118.i16[0] = vaddlv_u8(v118), v118.u32[0] > 1uLL))
      {
        unint64_t v117 = std::__next_prime(v117);
      }
      else
      {
        uint64_t v119 = 1 << -(char)__clz(v117 - 1);
        if (v117 >= 2) {
          unint64_t v117 = v119;
        }
      }
      if (prime <= v117) {
        size_t prime = v117;
      }
      if (prime >= v90)
      {
        unint64_t v90 = a2[18];
LABEL_117:
        if ((v90 & (v90 - 1)) != 0)
        {
          if (v92 >= v90) {
            uint64_t v58 = v92 % v90;
          }
          else {
            uint64_t v58 = v92;
          }
        }
        else
        {
          uint64_t v58 = (v90 - 1) & v92;
        }
        goto LABEL_130;
      }
      if (!prime)
      {
        v261 = (void *)*v46;
        void *v46 = 0;
        if (v261) {
          operator delete(v261);
        }
        unint64_t v90 = 0;
        a2[18] = 0;
        goto LABEL_117;
      }
    }
    if (prime >> 61) {
      goto LABEL_384;
    }
    unsigned int v106 = operator new(8 * prime);
    unsigned int v107 = (void *)*v46;
    void *v46 = v106;
    if (v107) {
      operator delete(v107);
    }
    uint64_t v108 = 0;
    a2[18] = prime;
    do
      *(void *)(*v46 + 8 * v108++) = 0;
    while (prime != v108);
    float v110 = a2 + 19;
    float v109 = (void *)a2[19];
    if (!v109)
    {
LABEL_116:
      unint64_t v90 = prime;
      goto LABEL_117;
    }
    size_t v111 = v109[1];
    size_t v112 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v113 = v111 & v112;
      *(void *)(*v46 + 8 * v113) = v110;
      for (unint64_t j = (void *)*v109; *v109; unint64_t j = (void *)*v109)
      {
        size_t v115 = j[1] & v112;
        if (v115 == v113)
        {
          float v109 = j;
        }
        else if (*(void *)(*v46 + 8 * v115))
        {
          void *v109 = *j;
          uint64_t v116 = 8 * v115;
          void *j = **(void **)(*v46 + v116);
          **(void **)(*v46 + v116) = j;
        }
        else
        {
          *(void *)(*v46 + 8 * v115) = v109;
          float v109 = j;
          size_t v113 = v115;
        }
      }
      goto LABEL_116;
    }
    if (v111 >= prime) {
      v111 %= prime;
    }
    *(void *)(*v46 + 8 * v111) = v110;
    unsigned int v120 = (void *)*v109;
    if (!*v109) {
      goto LABEL_116;
    }
    while (1)
    {
      size_t v122 = v120[1];
      if (v122 >= prime) {
        v122 %= prime;
      }
      if (v122 != v111)
      {
        if (!*(void *)(*v46 + 8 * v122))
        {
          *(void *)(*v46 + 8 * v122) = v109;
          goto LABEL_121;
        }
        void *v109 = *v120;
        uint64_t v121 = 8 * v122;
        void *v120 = **(void **)(*v46 + v121);
        **(void **)(*v46 + v121) = v120;
        unsigned int v120 = v109;
      }
      size_t v122 = v111;
LABEL_121:
      float v109 = v120;
      unsigned int v120 = (void *)*v120;
      size_t v111 = v122;
      if (!v120) {
        goto LABEL_116;
      }
    }
  }
  ++*((_DWORD *)a2 + 104);
  if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_51);
  }
  uint64_t v53 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v55 = v290[6];
    uint64_t v54 = v290[7];
    *(_DWORD *)z_stream buf = 134218752;
    *(void *)&buf[4] = v271.i64[0];
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v271.i64[1];
    *(_WORD *)&buf[22] = 2048;
    *(void *)&buf[24] = v55;
    LOWORD(v297) = 2048;
    *(void *)((char *)&v297 + 2) = v54;
    _os_log_impl(&dword_1A1780000, v53, OS_LOG_TYPE_DEBUG, "Found cached vl request for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
  }
  size_t v56 = (std::__shared_weak_count *)v48[5];
  v277 = (char *)v48[4];
  v278 = v56;
  if (v56) {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_174:
  _Block_object_dispose(&v289, 8);
  double v136 = *((double *)a2 + 9);
  double v137 = *v3;
  long double v138 = cos(*v3 * 0.034906585) * -559.82 + 111132.92;
  long double v139 = v138 + cos(v137 * 0.0698131701) * 1.175;
  long double v140 = v139 + cos(v137 * 0.104719755) * -0.0023;
  double v141 = v137 * 0.00872664626;
  long double v142 = tan(v137 * 0.00872664626 + 0.78103484);
  double v143 = log(v142);
  long double v144 = tan(v141 + 0.789761487);
  double v145 = fabs((log(v144) - v143) * 0.159154943);
  float64_t v273 = v3[1];
  long double v146 = tan(v141 + 0.785398163);
  long double v147 = log(v146);
  v148.f64[0] = v273;
  v148.f64[1] = v147;
  uint64x2_t v149 = vcvtq_u64_f64(vmulq_n_f64(vmlaq_f64(v266, (float64x2_t)xmmword_1A28FCBE0, v148), v140 / (v145 * v136)));
  float v150 = a2 + 31;
  BOOL v151 = a2 + 26;
  uint64_t v152 = v149.i64[0];
  uint64x2_t v274 = v149;
  uint64_t v153 = v149.i64[1];
  float32x4_t v154 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 26, v149.i64[0], v149.i64[1]);
  if (v154)
  {
    uint64_t v155 = (uint64_t *)a2[32];
    double v156 = (uint64_t *)v154[4];
    if (v155 != v156)
    {
      unint64_t v157 = (uint64_t *)v156[1];
      if (v157 != v155)
      {
        uint64_t v158 = *v156;
        *(void *)(v158 + 8) = v157;
        *(void *)v156[1] = v158;
        uint64_t v159 = *v155;
        *(void *)(v159 + 8) = v156;
        *double v156 = v159;
        uint64_t *v155 = (uint64_t)v156;
        v156[1] = (uint64_t)v155;
        uint64_t v155 = (uint64_t *)a2[32];
      }
    }
    if (v155 != v150)
    {
      ++*((_DWORD *)a2 + 102);
      if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_51);
      }
      BOOL v160 = v264;
      unsigned int v161 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
      {
        double v162 = *v3;
        uint64_t v163 = *((void *)v3 + 1);
        *(_DWORD *)z_stream buf = 134218752;
        *(double *)&buf[4] = v162;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v163;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&buf[24] = v152;
        LOWORD(v297) = 2048;
        *(void *)((char *)&v297 + 2) = v153;
        _os_log_impl(&dword_1A1780000, v161, OS_LOG_TYPE_DEBUG, "Found cached undulation request for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
      }
      v164 = (char *)v155[4];
      float v165 = (std::__shared_weak_count *)v155[5];
      v275 = v164;
      v276 = v165;
      if (v165) {
        atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_345;
    }
  }
  ++*((_DWORD *)a2 + 103);
  BOOL v166 = (void *)a2[14];
  if (!v166)
  {
    if (atomic_load_explicit(a2 + 55, memory_order_acquire) != -1)
    {
      *(void *)z_stream buf = __p;
      v289 = buf;
      std::__call_once((std::once_flag::_State_type *)a2 + 55, &v289, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>);
    }
    id v167 = objc_alloc_init((Class)getCLLocationManagerClass[0]());
    float v168 = (void *)a2[14];
    a2[14] = (uint64_t)v167;

    [(id)a2[14] _setGroundAltitudeEnabled:1];
    int8x8_t v3 = v265;
    BOOL v166 = (void *)a2[14];
  }
  id v169 = v166;
  if (v169)
  {
    if (atomic_load_explicit(a2 + 55, memory_order_acquire) != -1)
    {
      *(void *)z_stream buf = __p;
      v289 = buf;
      std::__call_once((std::once_flag::_State_type *)a2 + 55, &v289, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>);
    }
    unsigned int v170 = (void *)[objc_alloc((Class)getCLLocationClass[0]()) initWithLatitude:*v3 longitude:v3[1]];
    v282 = &unk_1EF559378;
    id v283 = v170;
    if (!v170)
    {
      v275 = 0;
      v276 = 0;
LABEL_343:
      v282 = &unk_1EF559378;

      goto LABEL_344;
    }
    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_51);
    }
    size_t v171 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      double v172 = *v3;
      uint64_t v173 = *((void *)v3 + 1);
      *(_DWORD *)z_stream buf = 134218752;
      *(double *)&buf[4] = v172;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v173;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&buf[24] = v152;
      LOWORD(v297) = 2048;
      *(void *)((char *)&v297 + 2) = v153;
      _os_log_impl(&dword_1A1780000, v171, OS_LOG_TYPE_DEBUG, "Requesting undulation for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
    }
    uint64_t v174 = (char *)operator new(0x80uLL);
    *((void *)v174 + 1) = 0;
    *((void *)v174 + 2) = 0;
    *(void *)uint64_t v174 = &unk_1EF580608;
    *((void *)v174 + 3) = 850045863;
    *((_OWORD *)v174 + 2) = 0u;
    *((_OWORD *)v174 + 3) = 0u;
    *((_OWORD *)v174 + 4) = 0u;
    *(_OWORD *)(v174 + 73) = 0u;
    *((void *)v174 + 12) = 0;
    *((void *)v174 + 13) = &unk_1EF559E98;
    *((void *)v174 + 14) = 0;
    v275 = v174 + 24;
    v276 = (std::__shared_weak_count *)v174;
    double v175 = *(double *)a2;
    char v176 = (std::__shared_weak_count *)a2[1];
    v268 = v176;
    if (v176)
    {
      uint64_t v177 = a2[1];
      p_shared_weak_owners = &v176->__shared_weak_owners_;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      uint64_t v179 = a2[3];
      *(double *)z_stream buf = v175;
      *(void *)&buf[8] = v177;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v179 = a2[3];
      *(void *)z_stream buf = *a2;
      *(void *)&buf[8] = 0;
    }
    long long v180 = *(_OWORD *)v265;
    *(uint64x2_t *)&buf[16] = v274;
    long long v297 = v180;
    *(void *)v298 = v174 + 24;
    *(void *)&v298[8] = v174;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v174 + 1, 1uLL, memory_order_relaxed);
    *(void *)&v298[16] = &unk_1EF559378;
    obunint64_t j = 0;
    id v181 = v283;
    id v182 = obj;
    obunint64_t j = v181;

    id v301 = v169;
    v292 = 0;
    BOOL v183 = (char *)operator new(0x68uLL);
    *(_OWORD *)(v183 + 24) = *(_OWORD *)&buf[16];
    long long v184 = *(_OWORD *)v298;
    *(_OWORD *)(v183 + 40) = v297;
    uint64_t v185 = *(void *)buf;
    uint64_t v186 = *(void *)&buf[8];
    *(void *)BOOL v183 = &unk_1EF578408;
    *((void *)v183 + 1) = v185;
    *((void *)v183 + 2) = v186;
    *(void *)z_stream buf = 0;
    *(void *)&buf[8] = 0;
    *(_OWORD *)(v183 + 56) = v184;
    *(_OWORD *)v298 = 0uLL;
    *((void *)v183 + 9) = &unk_1EF559378;
    *((void *)v183 + 10) = 0;
    objc_storeStrong((id *)v183 + 10, obj);
    id v187 = obj;
    obunint64_t j = 0;

    id v188 = v301;
    id v301 = 0;
    *((void *)v183 + 12) = v188;
    v292 = (__n128 (*)(__n128 *, __n128 *))v183;
    geo::TaskQueue::async(&v280, v179, &v289);
    v189 = v281;
    if (v281 && !atomic_fetch_add(&v281->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
    if ((char *)v292 == (char *)&v289)
    {
      (*((void (**)(unsigned char **))v289 + 4))(&v289);
    }
    else if (v292)
    {
      (*(void (**)(void))(*(void *)v292 + 40))();
    }

    *(void *)&v298[16] = &unk_1EF559378;
    uint64_t v190 = *(void *)&v298[8];
    if (*(void *)&v298[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v298[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(uint64_t))(*(void *)v190 + 16))(v190);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v190);
    }
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
    BOOL v191 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 26, v152, v153);
    if (v191)
    {
      v192 = (uint64_t *)a2[32];
      uint64_t v193 = (uint64_t *)v191[4];
      if (v192 != v193)
      {
        BOOL v194 = (uint64_t *)v193[1];
        if (v194 != v192)
        {
          uint64_t v195 = *v193;
          *(void *)(v195 + 8) = v194;
          *(void *)v193[1] = v195;
          uint64_t v196 = *v192;
          *(void *)(v196 + 8) = v193;
          *uint64_t v193 = v196;
          uint64_t *v192 = (uint64_t)v193;
          v193[1] = (uint64_t)v192;
          v192 = (uint64_t *)a2[32];
        }
      }
      if (v192 != v150)
      {
LABEL_336:
        if (v276) {
          atomic_fetch_add_explicit(&v276->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v252 = (std::__shared_weak_count *)v192[5];
        v192[4] = (uint64_t)v275;
        v192[5] = (uint64_t)v276;
        if (v252 && !atomic_fetch_add(&v252->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
          std::__shared_weak_count::__release_weak(v252);
        }
        if (v268) {
          std::__shared_weak_count::__release_weak(v268);
        }
        goto LABEL_343;
      }
    }
    uint64_t v284 = 0;
    v285 = 0;
    uint64_t v286 = 0;
    v287 = 0;
    double v197 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 26, v152, v153);
    if (v197)
    {
      uint64_t v190 = (uint64_t)v197;
      BOOL v198 = (uint64_t *)v197[4];
      uint64_t v199 = *v198;
      *(void *)(v199 + 8) = v198[1];
      *(void *)v198[1] = v199;
      --a2[33];
      BOOL v200 = (std::__shared_weak_count *)v198[5];
      if (v200 && !atomic_fetch_add(&v200->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
      }
      operator delete(v198);
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a2 + 26, (void *)v190);
      if (__p[0]) {
        operator delete(__p[0]);
      }
    }
    uint64_t v201 = operator new(0x30uLL);
    v202 = v201;
    v201[1] = v274;
    uint64_t v203 = v287;
    *((void *)v201 + 4) = v286;
    *((void *)v201 + 5) = v203;
    if (v203) {
      atomic_fetch_add_explicit(&v203->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v204 = (void *)a2[32];
    *(void *)uint64_t v201 = v150;
    *((void *)v201 + 1) = v204;
    void *v204 = v201;
    uint64_t v205 = a2[33] + 1;
    a2[32] = (uint64_t)v201;
    a2[33] = v205;
    unint64_t v206 = v153 + ((v152 - 0x61C8864680B583EBLL) << 6) + ((unint64_t)(v152 - 0x61C8864680B583EBLL) >> 2);
    unint64_t v207 = (v206 - 0x61C8864680B583EBLL) ^ (v152 - 0x61C8864680B583EBLL);
    unint64_t v208 = a2[27];
    v267 = v203;
    if (v208)
    {
      uint8x8_t v209 = (uint8x8_t)vcnt_s8((int8x8_t)v208);
      v209.i16[0] = vaddlv_u8(v209);
      if (v209.u32[0] > 1uLL)
      {
        uint64_t v190 = (v206 - 0x61C8864680B583EBLL) ^ (v152 - 0x61C8864680B583EBLL);
        if (v207 >= v208) {
          uint64_t v190 = v207 % v208;
        }
      }
      else
      {
        uint64_t v190 = v207 & (v208 - 1);
      }
      uint64_t v210 = *(void **)(*v151 + 8 * v190);
      if (v210)
      {
        uint64_t v211 = (void *)*v210;
        if (v211)
        {
          if (v209.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v215 = v211[1];
              if (v215 == v207)
              {
                if (v211[2] == v152 && v211[3] == v153) {
                  goto LABEL_314;
                }
              }
              else if ((v215 & (v208 - 1)) != v190)
              {
                goto LABEL_254;
              }
              uint64_t v211 = (void *)*v211;
              if (!v211) {
                goto LABEL_254;
              }
            }
          }
          do
          {
            unint64_t v213 = v211[1];
            if (v213 == v207)
            {
              if (v211[2] == v152 && v211[3] == v153) {
                goto LABEL_314;
              }
            }
            else
            {
              if (v213 >= v208) {
                v213 %= v208;
              }
              if (v213 != v190) {
                break;
              }
            }
            uint64_t v211 = (void *)*v211;
          }
          while (v211);
        }
      }
    }
LABEL_254:
    v216 = (uint64x2_t *)operator new(0x28uLL);
    v216->i64[0] = 0;
    v216->i64[1] = v207;
    v216[1] = v274;
    v216[2].i64[0] = (uint64_t)v202;
    float v217 = (float)(unint64_t)(a2[29] + 1);
    float v218 = *((float *)a2 + 60);
    if (v208 && (float)(v218 * (float)v208) >= v217)
    {
LABEL_304:
      v240 = (void *)*v151;
      v241 = *(uint64x2_t ***)(*v151 + 8 * v190);
      if (v241)
      {
        v216->i64[0] = (uint64_t)*v241;
      }
      else
      {
        v216->i64[0] = a2[28];
        a2[28] = (uint64_t)v216;
        v240[v190] = a2 + 28;
        if (!v216->i64[0]) {
          goto LABEL_313;
        }
        unint64_t v242 = *(void *)(v216->i64[0] + 8);
        if ((v208 & (v208 - 1)) != 0)
        {
          if (v242 >= v208) {
            v242 %= v208;
          }
        }
        else
        {
          v242 &= v208 - 1;
        }
        v241 = (uint64x2_t **)(*v151 + 8 * v242);
      }
      *v241 = v216;
LABEL_313:
      ++a2[29];
LABEL_314:
      if (v267 && !atomic_fetch_add(&v267->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
        std::__shared_weak_count::__release_weak(v267);
      }
      for (unint64_t k = a2[33]; k > a2[25]; unint64_t k = a2[33])
      {
        v244 = (uint64_t *)*v150;
        uint64_t v245 = *(void *)(*v150 + 16);
        uint64_t v246 = *(void *)(*v150 + 24);
        v247 = *(std::__shared_weak_count **)(*v150 + 40);
        if (v247)
        {
          atomic_fetch_add_explicit(&v247->__shared_owners_, 1uLL, memory_order_relaxed);
          v244 = (uint64_t *)a2[31];
          v248 = (std::__shared_weak_count *)v244[5];
          unint64_t k = a2[33];
        }
        else
        {
          v248 = 0;
        }
        uint64_t v249 = *v244;
        *(void *)(v249 + 8) = v244[1];
        *(void *)v244[1] = v249;
        a2[33] = k - 1;
        if (v248 && !atomic_fetch_add(&v248->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
          std::__shared_weak_count::__release_weak(v248);
        }
        operator delete(v244);
        v250 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>(a2 + 26, v245, v246);
        if (v250)
        {
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a2 + 26, v250);
          if (__p[0]) {
            operator delete(__p[0]);
          }
        }
        if (v247 && !atomic_fetch_add(&v247->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
          std::__shared_weak_count::__release_weak(v247);
        }
      }
      v251 = v285;
      if (v285 && !atomic_fetch_add(&v285->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
        std::__shared_weak_count::__release_weak(v251);
      }
      v192 = (uint64_t *)a2[32];
      goto LABEL_336;
    }
    BOOL v219 = 1;
    if (v208 >= 3) {
      BOOL v219 = (v208 & (v208 - 1)) != 0;
    }
    unint64_t v220 = v219 | (2 * v208);
    unint64_t v221 = vcvtps_u32_f32(v217 / v218);
    if (v220 <= v221) {
      size_t v222 = v221;
    }
    else {
      size_t v222 = v220;
    }
    if (v222 == 1)
    {
      size_t v222 = 2;
    }
    else if ((v222 & (v222 - 1)) != 0)
    {
      size_t v222 = std::__next_prime(v222);
      unint64_t v208 = a2[27];
    }
    if (v222 <= v208)
    {
      if (v222 >= v208) {
        goto LABEL_291;
      }
      unint64_t v234 = vcvtps_u32_f32((float)(unint64_t)a2[29] / *((float *)a2 + 60));
      if (v208 < 3 || (uint8x8_t v235 = (uint8x8_t)vcnt_s8((int8x8_t)v208), v235.i16[0] = vaddlv_u8(v235), v235.u32[0] > 1uLL))
      {
        unint64_t v234 = std::__next_prime(v234);
      }
      else
      {
        uint64_t v236 = 1 << -(char)__clz(v234 - 1);
        if (v234 >= 2) {
          unint64_t v234 = v236;
        }
      }
      if (v222 <= v234) {
        size_t v222 = v234;
      }
      if (v222 >= v208)
      {
        unint64_t v208 = a2[27];
LABEL_291:
        if ((v208 & (v208 - 1)) != 0)
        {
          if (v207 >= v208) {
            uint64_t v190 = v207 % v208;
          }
          else {
            uint64_t v190 = v207;
          }
        }
        else
        {
          uint64_t v190 = (v208 - 1) & v207;
        }
        goto LABEL_304;
      }
      if (!v222)
      {
        v262 = (void *)*v151;
        void *v151 = 0;
        if (v262) {
          operator delete(v262);
        }
        unint64_t v208 = 0;
        a2[27] = 0;
        goto LABEL_291;
      }
    }
    if (!(v222 >> 61))
    {
      BOOL v223 = operator new(8 * v222);
      double v224 = (void *)*v151;
      void *v151 = v223;
      if (v224) {
        operator delete(v224);
      }
      uint64_t v225 = 0;
      a2[27] = v222;
      do
        *(void *)(*v151 + 8 * v225++) = 0;
      while (v222 != v225);
      v227 = a2 + 28;
      v226 = (void *)a2[28];
      if (!v226) {
        goto LABEL_290;
      }
      size_t v228 = v226[1];
      size_t v229 = v222 - 1;
      if ((v222 & (v222 - 1)) == 0)
      {
        size_t v230 = v228 & v229;
        *(void *)(*v151 + 8 * v230) = v227;
        for (m = (void *)*v226; *v226; m = (void *)*v226)
        {
          size_t v232 = m[1] & v229;
          if (v232 == v230)
          {
            v226 = m;
          }
          else if (*(void *)(*v151 + 8 * v232))
          {
            void *v226 = *m;
            uint64_t v233 = 8 * v232;
            void *m = **(void **)(*v151 + v233);
            **(void **)(*v151 + v233) = m;
          }
          else
          {
            *(void *)(*v151 + 8 * v232) = v226;
            v226 = m;
            size_t v230 = v232;
          }
        }
LABEL_290:
        unint64_t v208 = v222;
        goto LABEL_291;
      }
      if (v228 >= v222) {
        v228 %= v222;
      }
      *(void *)(*v151 + 8 * v228) = v227;
      v237 = (void *)*v226;
      if (!*v226) {
        goto LABEL_290;
      }
      while (1)
      {
        size_t v239 = v237[1];
        if (v239 >= v222) {
          v239 %= v222;
        }
        if (v239 != v228)
        {
          if (!*(void *)(*v151 + 8 * v239))
          {
            *(void *)(*v151 + 8 * v239) = v226;
            goto LABEL_295;
          }
          void *v226 = *v237;
          uint64_t v238 = 8 * v239;
          void *v237 = **(void **)(*v151 + v238);
          **(void **)(*v151 + v238) = v237;
          v237 = v226;
        }
        size_t v239 = v228;
LABEL_295:
        v226 = v237;
        v237 = (void *)*v237;
        size_t v228 = v239;
        if (!v237) {
          goto LABEL_290;
        }
      }
    }
LABEL_384:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v275 = 0;
  v276 = 0;
LABEL_344:

  v164 = v275;
  BOOL v160 = v264;
  int8x8_t v3 = v265;
LABEL_345:
  if (v277 && v164)
  {
    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_51);
    }
    v253 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      double v254 = *v3;
      uint64_t v255 = *((void *)v3 + 1);
      *(_DWORD *)z_stream buf = 134218752;
      *(double *)&buf[4] = v254;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v255;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&buf[24] = v279.i64[0];
      LOWORD(v297) = 2048;
      *(void *)((char *)&v297 + 2) = v279.i64[1];
      _os_log_impl(&dword_1A1780000, v253, OS_LOG_TYPE_DEBUG, "Requesting high precision altitude for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
    }
    v256 = operator new(0x70uLL);
    uint64_t v257 = (uint64_t)(a2 + 34);
    v256[1] = 0;
    v256[2] = 0;
    void *v256 = &unk_1EF582358;
    v256[3] = v275;
    v258 = (char *)(v256 + 3);
    v256[4] = v276;
    if (v276) {
      atomic_fetch_add_explicit(&v276->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v256[5] = v277;
    v256[6] = v278;
    if (v278) {
      atomic_fetch_add_explicit(&v278->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v256[7] = v256 + 11;
    v256[8] = v256 + 11;
    v256[9] = v256 + 11;
    v256[10] = 2;
    *((unsigned char *)v256 + 104) = 0;
    *BOOL v160 = v258;
    v160[1] = v256;
    v259 = geo::Cache<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>,md::SpatialKeyHash,geo::LRUPolicy>::operator[](v257, v279.i64);
    atomic_fetch_add_explicit(v256 + 1, 1uLL, memory_order_relaxed);
    v260 = (std::__shared_weak_count *)v259[1];
    uint64_t *v259 = (uint64_t)v258;
    v259[1] = (uint64_t)v256;
    if (v260 && !atomic_fetch_add(&v260->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  else
  {
    *BOOL v160 = 0;
    v160[1] = 0;
  }
  if (v276 && !atomic_fetch_add(&v276->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
    std::__shared_weak_count::__release_weak(v276);
  }
  if (v278 && !atomic_fetch_add(&v278->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
    std::__shared_weak_count::__release_weak(v278);
  }
}

void sub_1A2421D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44)
{
  operator delete(v45);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a44);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a42);
  if (a27) {
    std::__shared_weak_count::__release_weak(a27);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a31);
  a39 = a28;

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0::~$_0(uint64_t a1)
{
  *(void *)(a1 + 64) = &unk_1EF559378;
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int8x8_t v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  int8x8_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void **)(a1 + 96);
  id v3 = *(id *)(a1 + 80);
  unint64_t v4 = [v2 _groundAltitudeAtLocation:v3];

  if (v4)
  {
    [v4 undulation];
    double v6 = v5;
  }
  else
  {
    double v7 = softLinkARGetFallbackUndulationValue;
    id v8 = *(id *)(a1 + 80);
    double v6 = ((double (*)(uint64_t))v7)([v8 coordinate]);

    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_51);
    }
    long double v9 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 24);
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)z_stream buf = 134218752;
      uint64_t v21 = v10;
      __int16 v22 = 2048;
      uint64_t v23 = v11;
      __int16 v24 = 2048;
      uint64_t v25 = v12;
      __int16 v26 = 2048;
      uint64_t v27 = v13;
      _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_DEBUG, "Using fallback for failed undulation request for coordinate:%f,%f key:%llu,%llu", buf, 0x2Au);
    }
  }
  uint64_t v14 = *(void *)(a1 + 56);
  id v15 = 0;
  std::mutex::lock((std::mutex *)v14);
  id v16 = v15;
  long double v17 = v16;
  if (v16) {
    id v18 = v16;
  }
  uint64_t v19 = *(void **)(v14 + 88);
  *(void *)(v14 + 88) = v17;

  *(double *)(v14 + 72) = v6;
  *(unsigned char *)(v14 + 64) = 1;
  std::mutex::unlock((std::mutex *)v14);
}

void sub_1A2422254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  _Unwind_Resume(a1);
}

uint64_t initARGetFallbackUndulationValue(CLLocationCoordinate2D a1)
{
  CLLocationDegrees longitude = a1.longitude;
  CLLocationDegrees latitude = a1.latitude;
  if (LoadARKit(void)::loadPredicate != -1) {
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_71);
  }
  id v3 = (uint64_t (*)(CLLocationCoordinate2D))dlsym((void *)LoadARKit(void)::frameworkLibrary, "ARGetFallbackUndulationValue");
  softLinkARGetFallbackUndulationValue = v3;
  v4.n128_f64[0] = latitude;
  v5.n128_f64[0] = longitude;
  return ((uint64_t (*)(__n128, __n128))v3)(v4, v5);
}

void ___ZL9LoadARKitv_block_invoke_27818()
{
  LoadARKit(void)::frameworkLibrardouble y = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  if (!LoadARKit(void)::frameworkLibrary) {
    NSLog((NSString *)@"### Failed to Soft Linked: /System/Library/Frameworks/ARKit.framework/ARKit");
  }
}

void std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(void *)(a1 + 72) = &unk_1EF559378;
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    id v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  id v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_5:
  operator delete((void *)a1);
}

void std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 72) = &unk_1EF559378;
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    id v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      return;
    }
  }
  else
  {
    id v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578408;
  return std::__compressed_pair_elem<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = &unk_1EF559378;
  *(void *)(a1 + 72) = 0;
  id v6 = *(id *)(a2 + 72);
  double v7 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v6;

  *(void *)(a1 + 88) = *(id *)(a2 + 88);
  return a1;
}

void *std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x68uLL);
  void *v2 = &unk_1EF578408;
  std::__compressed_pair_elem<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF578408;

  *(void *)(a1 + 72) = &unk_1EF559378;
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    id v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3)
    {
LABEL_5:
      JUMPOUT(0x1A6239270);
    }
  }
  else
  {
    id v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
  goto LABEL_5;
}

uint64_t std::__function::__func<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0,std::allocator<md::HighPrecisionAltitudeRequestor::requestUndulation(geo::Coordinate2D<geo::Degrees,double> const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF578408;

  *(void *)(a1 + 72) = &unk_1EF559378;
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    id v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void geo::_retain_ptr<NSError * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559E98;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSError * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559E98;

  return a1;
}

void std::__shared_ptr_emplace<md::UndulationRequest>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (std::mutex *)(a1 + 24);
  *(void *)(a1 + 104) = &unk_1EF559E98;

  std::mutex::~mutex(v1);
}

void std::__shared_ptr_emplace<md::UndulationRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::UndulationRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 __Block_byref_object_copy__27823(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void ___ZN2md30HighPrecisionAltitudeRequestor17requestVLAltitudeEN3geo12Coordinate2DINS1_7DegreesEdEE_block_invoke(void *a1, void *a2, void *a3)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[5];
  id v77 = v5;
  id v8 = v6;
  std::mutex::lock((std::mutex *)v7);
  id v9 = v8;
  uint64_t v10 = v9;
  if (v9) {
    id v11 = v9;
  }
  uint64_t v12 = *(void **)(v7 + 128);
  *(void *)(v7 + 128) = v10;

  *(void *)(v7 + 80) = *(void *)(v7 + 72);
  unint64_t v13 = [v77 count];
  unint64_t v14 = *(void *)(v7 + 96);
  if (v14 >= v13) {
    goto LABEL_21;
  }
  uint64_t v15 = *(void *)(v7 + 80);
  uint64_t v16 = *(void *)(v7 + 88);
  uint64_t v17 = *(void *)(v7 + 72);
  unint64_t v18 = (1 << -(char)__clz(v14 + 1));
  if (v14 >= 0xFFFFFFFFFFFFFFFELL) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = v18;
  }
  if (v19 <= v13) {
    unint64_t v20 = v13;
  }
  else {
    unint64_t v20 = v19;
  }
  uint64_t v21 = (char *)malloc_type_malloc(8 * v20, 0x100004000313F17uLL);
  __int16 v22 = *(char **)(v7 + 72);
  uint64_t v23 = *(char **)(v7 + 80);
  if (v22 != v23)
  {
    unint64_t v24 = v23 - v22 - 8;
    uint64_t v25 = v21;
    __int16 v26 = *(char **)(v7 + 72);
    if (v24 >= 0x18)
    {
      uint64_t v25 = v21;
      __int16 v26 = *(char **)(v7 + 72);
      if ((unint64_t)(v21 - v22) >= 0x20)
      {
        uint64_t v27 = (v24 >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v25 = &v21[v28];
        uint64_t v29 = (long long *)(v22 + 16);
        uint64_t v30 = v21 + 16;
        uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v32 = *v29;
          *(v30 - 1) = *(v29 - 1);
          *uint64_t v30 = v32;
          v29 += 2;
          v30 += 2;
          v31 -= 4;
        }
        while (v31);
        if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_18;
        }
        __int16 v26 = &v22[v28];
      }
    }
    do
    {
      uint64_t v33 = *(void *)v26;
      v26 += 8;
      *(void *)uint64_t v25 = v33;
      v25 += 8;
    }
    while (v26 != v23);
  }
LABEL_18:
  if (v17 != v16) {
    free(v22);
  }
  *(void *)(v7 + 72) = v21;
  *(void *)(v7 + 80) = &v21[v15 - v17];
  *(void *)(v7 + 96) = v20;
LABEL_21:
  uint64_t v74 = a1 + 5;
  uint64_t v75 = a1;
  BOOL v76 = v10;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  obunint64_t j = v77;
  uint64_t v34 = [obj countByEnumeratingWithState:&v79 objects:buf count:16];
  if (!v34) {
    goto LABEL_45;
  }
  uint64_t v35 = *(void *)v80;
  do
  {
    for (uint64_t i = 0; i != v34; ++i)
    {
      if (*(void *)v80 != v35) {
        objc_enumerationMutation(obj);
      }
      id v38 = v8;
      [*(id *)(*((void *)&v79 + 1) + 8 * i) doubleValue];
      uint64_t v40 = v39;
      uint64_t v41 = *(void *)(v7 + 72);
      long double v37 = *(char **)(v7 + 80);
      uint64_t v42 = (uint64_t)&v37[-v41] >> 3;
      unint64_t v43 = *(void *)(v7 + 96);
      if (v43 < v42 + 1)
      {
        uint64_t v44 = *(void *)(v7 + 88);
        unint64_t v45 = (1 << -(char)__clz(v43 + 1));
        if (v43 >= 0xFFFFFFFFFFFFFFFELL) {
          unint64_t v45 = 1;
        }
        if (v45 <= v42 + 1) {
          unint64_t v46 = v42 + 1;
        }
        else {
          unint64_t v46 = v45;
        }
        size_t v47 = (char *)malloc_type_malloc(8 * v46, 0x100004000313F17uLL);
        int v48 = *(char **)(v7 + 72);
        size_t v49 = *(char **)(v7 + 80);
        if (v48 != v49)
        {
          unint64_t v50 = v49 - v48 - 8;
          uint64_t v51 = v47;
          uint64_t v52 = *(char **)(v7 + 72);
          if (v50 < 0x18 || (uint64_t v51 = v47, v52 = *(char **)(v7 + 72), (unint64_t)(v47 - v48) < 0x20))
          {
            do
            {
LABEL_41:
              uint64_t v59 = *(void *)v52;
              v52 += 8;
              *(void *)uint64_t v51 = v59;
              v51 += 8;
            }
            while (v52 != v49);
          }
          else
          {
            uint64_t v53 = (v50 >> 3) + 1;
            uint64_t v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v51 = &v47[v54];
            uint64_t v55 = (long long *)(v48 + 16);
            size_t v56 = v47 + 16;
            uint64_t v57 = v53 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v58 = *v55;
              *(v56 - 1) = *(v55 - 1);
              *size_t v56 = v58;
              v55 += 2;
              v56 += 2;
              v57 -= 4;
            }
            while (v57);
            if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
            {
              uint64_t v52 = &v48[v54];
              goto LABEL_41;
            }
          }
        }
        if (v41 != v44) {
          free(v48);
        }
        *(void *)(v7 + 72) = v47;
        long double v37 = &v47[8 * v42];
        *(void *)(v7 + 96) = v46;
      }
      *(void *)long double v37 = v40;
      *(void *)(v7 + 80) = v37 + 8;
      id v8 = v38;
    }
    uint64_t v34 = [obj countByEnumeratingWithState:&v79 objects:buf count:16];
  }
  while (v34);
LABEL_45:

  *(unsigned char *)(v7 + 64) = 1;
  std::mutex::unlock((std::mutex *)v7);

  if (v76)
  {
    uint64_t v60 = [v76 description];
    if (v60)
    {
      id v61 = [v76 description];
      uint64_t v62 = (const char *)[v61 UTF8String];
    }
    else
    {
      uint64_t v62 = "";
    }

    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_51);
    }
    uint64_t v63 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = v75[7];
      uint64_t v65 = v75[8];
      uint64_t v66 = *(void *)(v75[4] + 8);
      uint64_t v68 = *(void *)(v66 + 48);
      uint64_t v67 = *(void *)(v66 + 56);
      *(_DWORD *)z_stream buf = 134219010;
      *(void *)&uint8_t buf[4] = v64;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v65;
      __int16 v84 = 2048;
      uint64_t v85 = v68;
      __int16 v86 = 2048;
      uint64_t v87 = v67;
      __int16 v88 = 2080;
      unint64_t v89 = v62;
      _os_log_impl(&dword_1A1780000, v63, OS_LOG_TYPE_ERROR, "VLAltitude request failed for coordinate:%f,%f key:%llu,%llu error:\"%s\"", buf, 0x34u);
    }
    unint64_t v69 = (std::__shared_weak_count *)v75[10];
    if (v69)
    {
      uint64_t v70 = std::__shared_weak_count::lock(v69);
      *(void *)&buf[8] = v70;
      if (v70)
      {
        unint64_t v71 = v70;
        uint64_t v72 = v75[9];
        *(void *)z_stream buf = v72;
        if (v72)
        {
          uint64_t v73 = *(void *)(v72 + 368);
          if (v73) {
            (*(void (**)(uint64_t, void *))(*(void *)v73 + 48))(v73, v74);
          }
        }
        if (!atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
    }
  }
}

void sub_1A2422F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c50_ZTSNSt3__110shared_ptrIN2md17VLAltitudeRequestEEE5672c60_ZTSNSt3__18weak_ptrIN2md30HighPrecisionAltitudeRequestorEEE(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_ea8_40c50_ZTSNSt3__110shared_ptrIN2md17VLAltitudeRequestEEE56c39_ZTSN3geo12Coordinate2DINS_7DegreesEdEE72c60_ZTSNSt3__18weak_ptrIN2md30HighPrecisionAltitudeRequestorEEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  result[7] = a2[7];
  result[8] = a2[8];
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__shared_ptr_emplace<md::VLAltitudeRequest>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 144) = &unk_1EF559E98;

  uint64_t v2 = *(void **)(a1 + 96);
  if (v2 != *(void **)(a1 + 112)) {
    free(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void std::__shared_ptr_emplace<md::VLAltitudeRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::VLAltitudeRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::DiffuseBuildingTop::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::DiffuseBuildingTop::CompressedMeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup::textureIsEnabled(ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup *this)
{
  return 0;
}

BOOL ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

void ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::DiffuseBuildingTop::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  id v9 = (int8x16_t *)result;
  while (2)
  {
    uint64_t v87 = (unint64_t *)&a2[-1];
    unint64_t v89 = &a2[-1].u64[1];
    __int16 v86 = &a2[-2].u64[1];
    uint64_t v10 = (unint64_t *)v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          id v9 = (int8x16_t *)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v89, v9->i64[0]);
                if (result)
                {
                  unint64_t v39 = v9->i64[0];
                  v9->i64[0] = *v89;
                  *unint64_t v89 = v39;
                }
                break;
              case 3:
                __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)v9, &v9->u64[1], v89);
                break;
              case 4:
                uint64_t v40 = (unint64_t *)&v9[1];
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)v9, &v9->u64[1], (unint64_t *)&v9[1]);
                __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v89, v9[1].u64[0]);
                if (result)
                {
                  unint64_t v41 = *v40;
                  *uint64_t v40 = *v89;
                  *unint64_t v89 = v41;
                  __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v40, v9->u64[1]);
                  if (result)
                  {
                    uint64_t v43 = v9->i64[1];
                    unint64_t v42 = v9[1].u64[0];
                    unint64_t v44 = v9->i64[0];
                    v9->i64[1] = v42;
                    v9[1].i64[0] = v43;
                    __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v42, v44);
                    if (result) {
                      *id v9 = vextq_s8(*v9, *v9, 8uLL);
                    }
                  }
                }
                break;
              case 5:
                __n128 result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,0>((unint64_t *)v9, &v9->u64[1], (unint64_t *)&v9[1], &v9[1].u64[1], v89);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unint64_t v45 = (int8x16_t *)&v9->u64[1];
            BOOL v47 = v9 == a2 || v45 == a2;
            if (a4)
            {
              if (!v47)
              {
                uint64_t v48 = 0;
                size_t v49 = (unint64_t *)v9;
                do
                {
                  unint64_t v52 = *v49;
                  unint64_t v51 = v49[1];
                  size_t v49 = (unint64_t *)v45;
                  __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v51, v52);
                  if (result)
                  {
                    unint64_t v53 = *v49;
                    uint64_t v54 = v48;
                    do
                    {
                      *(uint64_t *)((char *)&v9->i64[1] + v54) = *(uint64_t *)((char *)v9->i64 + v54);
                      if (!v54)
                      {
                        i64 = v9->i64;
                        goto LABEL_75;
                      }
                      __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v53, *(unint64_t *)((char *)&v9->u64[-1] + v54));
                      v54 -= 8;
                    }
                    while ((result & 1) != 0);
                    i64 = (uint64_t *)((char *)&v9->i64[1] + v54);
LABEL_75:
                    void *i64 = v53;
                  }
                  unint64_t v45 = (int8x16_t *)(v49 + 1);
                  v48 += 8;
                }
                while (v49 + 1 != (unint64_t *)a2);
              }
            }
            else if (!v47)
            {
              do
              {
                unint64_t v81 = v9->i64[0];
                unint64_t v80 = v9->u64[1];
                id v9 = v45;
                __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v80, v81);
                if (result)
                {
                  unint64_t v82 = v9->i64[0];
                  float v83 = v9->i64;
                  do
                  {
                    __int16 v84 = v83;
                    uint64_t v85 = *--v83;
                    *__int16 v84 = v85;
                    __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v82, *(v84 - 2));
                  }
                  while ((result & 1) != 0);
                  void *v83 = v82;
                }
                unint64_t v45 = (int8x16_t *)&v9->u64[1];
              }
              while (&v9->u64[1] != (unint64_t *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              int64_t v55 = (unint64_t)(v12 - 2) >> 1;
              __int16 v88 = a2;
              int64_t v90 = v55;
              do
              {
                int64_t v56 = v55;
                if (v90 >= v55)
                {
                  uint64_t v57 = (2 * v55) | 1;
                  long long v58 = (unint64_t *)v9 + v57;
                  if (2 * v55 + 2 < v12
                    && md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v58, v58[1]))
                  {
                    ++v58;
                    uint64_t v57 = 2 * v56 + 2;
                  }
                  uint64_t v59 = (unint64_t *)v9 + v56;
                  __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v58, *v59);
                  if ((result & 1) == 0)
                  {
                    unint64_t v60 = *v59;
                    do
                    {
                      id v61 = v58;
                      *uint64_t v59 = *v58;
                      if (v90 < v57) {
                        break;
                      }
                      uint64_t v62 = (2 * v57) | 1;
                      long long v58 = (unint64_t *)v9 + v62;
                      uint64_t v63 = 2 * v57 + 2;
                      if (v63 < v12
                        && md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v58, v58[1]))
                      {
                        ++v58;
                        uint64_t v62 = v63;
                      }
                      __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v58, v60);
                      uint64_t v59 = v61;
                      uint64_t v57 = v62;
                    }
                    while (!result);
                    unint64_t *v61 = v60;
                  }
                }
                int64_t v55 = v56 - 1;
              }
              while (v56);
              uint64_t v64 = (unint64_t)v11 >> 3;
              uint64_t v65 = (unint64_t *)v88;
              do
              {
                uint64_t v67 = v65;
                uint64_t v68 = 0;
                unint64_t v69 = v9->i64[0];
                uint64_t v70 = v9->i64;
                do
                {
                  unint64_t v71 = &v70[v68 + 1];
                  uint64_t v72 = (2 * v68) | 1;
                  uint64_t v73 = 2 * v68 + 2;
                  if (v73 < v64)
                  {
                    __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v71, v70[v68 + 2]);
                    if (result)
                    {
                      ++v71;
                      uint64_t v72 = v73;
                    }
                  }
                  *uint64_t v70 = *v71;
                  uint64_t v70 = v71;
                  uint64_t v68 = v72;
                }
                while (v72 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
                uint64_t v74 = v67 - 1;
                if (v71 == v74)
                {
                  uint64_t v65 = v74;
                  *unint64_t v71 = v69;
                }
                else
                {
                  *unint64_t v71 = *v74;
                  uint64_t v65 = v74;
                  unint64_t *v74 = v69;
                  uint64_t v75 = (char *)v71 - (char *)v9 + 8;
                  if (v75 >= 9)
                  {
                    unint64_t v76 = (((unint64_t)v75 >> 3) - 2) >> 1;
                    id v77 = (unint64_t *)v9 + v76;
                    __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v77, *v71);
                    if (result)
                    {
                      unint64_t v78 = *v71;
                      do
                      {
                        long long v79 = v77;
                        *unint64_t v71 = *v77;
                        if (!v76) {
                          break;
                        }
                        unint64_t v76 = (v76 - 1) >> 1;
                        id v77 = (unint64_t *)v9 + v76;
                        __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v77, v78);
                        unint64_t v71 = v79;
                      }
                      while ((result & 1) != 0);
                      *long long v79 = v78;
                    }
                  }
                }
              }
              while (v64-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = (unint64_t *)v9 + ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 < 0x401) {
            break;
          }
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)v9, v14, v89);
          uint64_t v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(&v9->u64[1], &v9->u64[v15 - 1], v87);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)&v9[1], &v9->u64[v15 + 1], v86);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(&v9->u64[v15 - 1], v14, &v9->u64[v15 + 1]);
          uint64_t v16 = v9->i64[0];
          v9->i64[0] = v9->i64[v15];
          v9->i64[v15] = v16;
          --a3;
          if (a4) {
            goto LABEL_12;
          }
LABEL_11:
          if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v9[-1].u64[1], v9->i64[0]))
          {
            goto LABEL_12;
          }
          unint64_t v30 = v9->i64[0];
          __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v9->i64[0], *v89);
          if (result)
          {
            uint64_t v10 = (unint64_t *)v9;
            do
            {
              unint64_t v31 = v10[1];
              ++v10;
              __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v30, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            long long v32 = &v9->u64[1];
            do
            {
              uint64_t v10 = v32;
              if (v32 >= (unint64_t *)a2) {
                break;
              }
              ++v32;
              __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v30, *v10);
            }
            while (!result);
          }
          uint64_t v33 = (unint64_t *)a2;
          if (v10 < (unint64_t *)a2)
          {
            uint64_t v33 = (unint64_t *)a2;
            do
            {
              unint64_t v34 = *--v33;
              __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v30, v34);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v33)
          {
            unint64_t v35 = *v10;
            unint64_t *v10 = *v33;
            unint64_t *v33 = v35;
            do
            {
              unint64_t v36 = v10[1];
              ++v10;
            }
            while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v30, v36));
            do
            {
              unint64_t v37 = *--v33;
              __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v30, v37);
            }
            while ((result & 1) != 0);
          }
          id v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= (unint64_t *)v9;
          BOOL v5 = v10 - 1 == (unint64_t *)v9;
          if (v10 - 1 != (unint64_t *)v9) {
            v9->i64[0] = *v38;
          }
          a4 = 0;
          *id v38 = v30;
        }
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(v14, (unint64_t *)v9, v89);
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v17 = v9->i64[0];
        unint64_t v18 = v9;
        do
        {
          unint64_t v19 = v18;
          unint64_t v20 = v18->u64[1];
          unint64_t v18 = (int8x16_t *)((char *)v18 + 8);
        }
        while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v20, v17));
        uint64_t v21 = a2;
        if (v19 == v9)
        {
          do
          {
            if (v18 >= a2) {
              break;
            }
            unint64_t v23 = a2[-1].u64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v23, v17));
        }
        else
        {
          do
          {
            unint64_t v22 = a2[-1].u64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v22, v17));
        }
        if (v18 < a2)
        {
          unint64_t v24 = (uint64_t *)v18;
          uint64_t v25 = (uint64_t *)a2;
          do
          {
            uint64_t v26 = *v24;
            uint64_t *v24 = *v25;
            *uint64_t v25 = v26;
            do
            {
              unint64_t v19 = (int8x16_t *)v24;
              unint64_t v27 = v24[1];
              ++v24;
            }
            while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v27, v17));
            do
              unint64_t v28 = *--v25;
            while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v28, v17));
          }
          while (v24 < v25);
        }
        if (v19 != v9) {
          v9->i64[0] = v19->i64[0];
        }
        v19->i64[0] = v17;
        BOOL v4 = v18 >= a2;
        a2 = v21;
        if (v4) {
          break;
        }
LABEL_31:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,false>(v9, v19, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = &v19->u64[1];
      }
      BOOL v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(v9, v19);
      uint64_t v10 = &v19->u64[1];
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((int8x16_t *)&v19->u64[1], v21);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_31;
      }
    }
    a2 = v19;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  id v9 = (int8x16_t *)result;
  while (2)
  {
    uint64_t v87 = (unint64_t *)&a2[-1];
    unint64_t v89 = &a2[-1].u64[1];
    __int16 v86 = &a2[-2].u64[1];
    uint64_t v10 = (unint64_t *)v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          id v9 = (int8x16_t *)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v89, v9->i64[0]);
                if (result)
                {
                  unint64_t v39 = v9->i64[0];
                  v9->i64[0] = *v89;
                  *unint64_t v89 = v39;
                }
                break;
              case 3:
                __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)v9, &v9->u64[1], v89);
                break;
              case 4:
                uint64_t v40 = (unint64_t *)&v9[1];
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)v9, &v9->u64[1], (unint64_t *)&v9[1]);
                __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v89, v9[1].u64[0]);
                if (result)
                {
                  unint64_t v41 = *v40;
                  *uint64_t v40 = *v89;
                  *unint64_t v89 = v41;
                  __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v40, v9->u64[1]);
                  if (result)
                  {
                    uint64_t v43 = v9->i64[1];
                    unint64_t v42 = v9[1].u64[0];
                    unint64_t v44 = v9->i64[0];
                    v9->i64[1] = v42;
                    v9[1].i64[0] = v43;
                    __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v42, v44);
                    if (result) {
                      *id v9 = vextq_s8(*v9, *v9, 8uLL);
                    }
                  }
                }
                break;
              case 5:
                __n128 result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,0>((unint64_t *)v9, &v9->u64[1], (unint64_t *)&v9[1], &v9[1].u64[1], v89);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unint64_t v45 = (int8x16_t *)&v9->u64[1];
            BOOL v47 = v9 == a2 || v45 == a2;
            if (a4)
            {
              if (!v47)
              {
                uint64_t v48 = 0;
                size_t v49 = (unint64_t *)v9;
                do
                {
                  unint64_t v52 = *v49;
                  unint64_t v51 = v49[1];
                  size_t v49 = (unint64_t *)v45;
                  __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v51, v52);
                  if (result)
                  {
                    unint64_t v53 = *v49;
                    uint64_t v54 = v48;
                    do
                    {
                      *(uint64_t *)((char *)&v9->i64[1] + v54) = *(uint64_t *)((char *)v9->i64 + v54);
                      if (!v54)
                      {
                        i64 = v9->i64;
                        goto LABEL_75;
                      }
                      __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v53, *(unint64_t *)((char *)&v9->u64[-1] + v54));
                      v54 -= 8;
                    }
                    while ((result & 1) != 0);
                    i64 = (uint64_t *)((char *)&v9->i64[1] + v54);
LABEL_75:
                    void *i64 = v53;
                  }
                  unint64_t v45 = (int8x16_t *)(v49 + 1);
                  v48 += 8;
                }
                while (v49 + 1 != (unint64_t *)a2);
              }
            }
            else if (!v47)
            {
              do
              {
                unint64_t v81 = v9->i64[0];
                unint64_t v80 = v9->u64[1];
                id v9 = v45;
                __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v80, v81);
                if (result)
                {
                  unint64_t v82 = v9->i64[0];
                  float v83 = v9->i64;
                  do
                  {
                    __int16 v84 = v83;
                    uint64_t v85 = *--v83;
                    *__int16 v84 = v85;
                    __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v82, *(v84 - 2));
                  }
                  while ((result & 1) != 0);
                  void *v83 = v82;
                }
                unint64_t v45 = (int8x16_t *)&v9->u64[1];
              }
              while (&v9->u64[1] != (unint64_t *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != a2)
            {
              int64_t v55 = (unint64_t)(v12 - 2) >> 1;
              __int16 v88 = a2;
              int64_t v90 = v55;
              do
              {
                int64_t v56 = v55;
                if (v90 >= v55)
                {
                  uint64_t v57 = (2 * v55) | 1;
                  long long v58 = (unint64_t *)v9 + v57;
                  if (2 * v55 + 2 < v12
                    && md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v58, v58[1]))
                  {
                    ++v58;
                    uint64_t v57 = 2 * v56 + 2;
                  }
                  uint64_t v59 = (unint64_t *)v9 + v56;
                  __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v58, *v59);
                  if ((result & 1) == 0)
                  {
                    unint64_t v60 = *v59;
                    do
                    {
                      id v61 = v58;
                      *uint64_t v59 = *v58;
                      if (v90 < v57) {
                        break;
                      }
                      uint64_t v62 = (2 * v57) | 1;
                      long long v58 = (unint64_t *)v9 + v62;
                      uint64_t v63 = 2 * v57 + 2;
                      if (v63 < v12
                        && md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v58, v58[1]))
                      {
                        ++v58;
                        uint64_t v62 = v63;
                      }
                      __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v58, v60);
                      uint64_t v59 = v61;
                      uint64_t v57 = v62;
                    }
                    while (!result);
                    unint64_t *v61 = v60;
                  }
                }
                int64_t v55 = v56 - 1;
              }
              while (v56);
              uint64_t v64 = (unint64_t)v11 >> 3;
              uint64_t v65 = (unint64_t *)v88;
              do
              {
                uint64_t v67 = v65;
                uint64_t v68 = 0;
                unint64_t v69 = v9->i64[0];
                uint64_t v70 = v9->i64;
                do
                {
                  unint64_t v71 = &v70[v68 + 1];
                  uint64_t v72 = (2 * v68) | 1;
                  uint64_t v73 = 2 * v68 + 2;
                  if (v73 < v64)
                  {
                    __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v71, v70[v68 + 2]);
                    if (result)
                    {
                      ++v71;
                      uint64_t v72 = v73;
                    }
                  }
                  *uint64_t v70 = *v71;
                  uint64_t v70 = v71;
                  uint64_t v68 = v72;
                }
                while (v72 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
                uint64_t v74 = v67 - 1;
                if (v71 == v74)
                {
                  uint64_t v65 = v74;
                  *unint64_t v71 = v69;
                }
                else
                {
                  *unint64_t v71 = *v74;
                  uint64_t v65 = v74;
                  unint64_t *v74 = v69;
                  uint64_t v75 = (char *)v71 - (char *)v9 + 8;
                  if (v75 >= 9)
                  {
                    unint64_t v76 = (((unint64_t)v75 >> 3) - 2) >> 1;
                    id v77 = (unint64_t *)v9 + v76;
                    __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v77, *v71);
                    if (result)
                    {
                      unint64_t v78 = *v71;
                      do
                      {
                        long long v79 = v77;
                        *unint64_t v71 = *v77;
                        if (!v76) {
                          break;
                        }
                        unint64_t v76 = (v76 - 1) >> 1;
                        id v77 = (unint64_t *)v9 + v76;
                        __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v77, v78);
                        unint64_t v71 = v79;
                      }
                      while ((result & 1) != 0);
                      *long long v79 = v78;
                    }
                  }
                }
              }
              while (v64-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = (unint64_t *)v9 + ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 < 0x401) {
            break;
          }
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)v9, v14, v89);
          uint64_t v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(&v9->u64[1], &v9->u64[v15 - 1], v87);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)&v9[1], &v9->u64[v15 + 1], v86);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(&v9->u64[v15 - 1], v14, &v9->u64[v15 + 1]);
          uint64_t v16 = v9->i64[0];
          v9->i64[0] = v9->i64[v15];
          v9->i64[v15] = v16;
          --a3;
          if (a4) {
            goto LABEL_12;
          }
LABEL_11:
          if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v9[-1].u64[1], v9->i64[0]))
          {
            goto LABEL_12;
          }
          unint64_t v30 = v9->i64[0];
          __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v9->i64[0], *v89);
          if (result)
          {
            uint64_t v10 = (unint64_t *)v9;
            do
            {
              unint64_t v31 = v10[1];
              ++v10;
              __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v30, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            long long v32 = &v9->u64[1];
            do
            {
              uint64_t v10 = v32;
              if (v32 >= (unint64_t *)a2) {
                break;
              }
              ++v32;
              __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v30, *v10);
            }
            while (!result);
          }
          uint64_t v33 = (unint64_t *)a2;
          if (v10 < (unint64_t *)a2)
          {
            uint64_t v33 = (unint64_t *)a2;
            do
            {
              unint64_t v34 = *--v33;
              __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v30, v34);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v33)
          {
            unint64_t v35 = *v10;
            unint64_t *v10 = *v33;
            unint64_t *v33 = v35;
            do
            {
              unint64_t v36 = v10[1];
              ++v10;
            }
            while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v30, v36));
            do
            {
              unint64_t v37 = *--v33;
              __n128 result = md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v30, v37);
            }
            while ((result & 1) != 0);
          }
          id v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= (unint64_t *)v9;
          BOOL v5 = v10 - 1 == (unint64_t *)v9;
          if (v10 - 1 != (unint64_t *)v9) {
            v9->i64[0] = *v38;
          }
          a4 = 0;
          *id v38 = v30;
        }
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(v14, (unint64_t *)v9, v89);
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v17 = v9->i64[0];
        unint64_t v18 = v9;
        do
        {
          unint64_t v19 = v18;
          unint64_t v20 = v18->u64[1];
          unint64_t v18 = (int8x16_t *)((char *)v18 + 8);
        }
        while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v20, v17));
        uint64_t v21 = a2;
        if (v19 == v9)
        {
          do
          {
            if (v18 >= a2) {
              break;
            }
            unint64_t v23 = a2[-1].u64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v23, v17));
        }
        else
        {
          do
          {
            unint64_t v22 = a2[-1].u64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
          }
          while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v22, v17));
        }
        if (v18 < a2)
        {
          unint64_t v24 = (uint64_t *)v18;
          uint64_t v25 = (uint64_t *)a2;
          do
          {
            uint64_t v26 = *v24;
            uint64_t *v24 = *v25;
            *uint64_t v25 = v26;
            do
            {
              unint64_t v19 = (int8x16_t *)v24;
              unint64_t v27 = v24[1];
              ++v24;
            }
            while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v27, v17));
            do
              unint64_t v28 = *--v25;
            while (!md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v28, v17));
          }
          while (v24 < v25);
        }
        if (v19 != v9) {
          v9->i64[0] = v19->i64[0];
        }
        v19->i64[0] = v17;
        BOOL v4 = v18 >= a2;
        a2 = v21;
        if (v4) {
          break;
        }
LABEL_31:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,false>(v9, v19, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = &v19->u64[1];
      }
      BOOL v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(v9, v19);
      uint64_t v10 = &v19->u64[1];
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((int8x16_t *)&v19->u64[1], v21);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_31;
      }
    }
    a2 = v19;
    if (!v29) {
      continue;
    }
    return result;
  }
}

unint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **>(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *result;
  unint64_t v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      unint64_t v5 = *a3;
    }
    else
    {
      *a2 = v7;
      *a3 = v5;
      unint64_t v8 = *result;
      if (*a2 < *result)
      {
        *__n128 result = *a2;
        *a2 = v8;
        unint64_t v5 = *a3;
      }
    }
  }
  else
  {
    if (v7 < v5)
    {
      *__n128 result = v7;
LABEL_9:
      *a3 = v6;
      unint64_t v5 = v6;
      goto LABEL_11;
    }
    *__n128 result = v5;
    *a2 = v6;
    unint64_t v5 = *a3;
    if (*a3 < v6)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*a4 < v5)
  {
    *a3 = *a4;
    *a4 = v5;
    unint64_t v9 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v9;
      unint64_t v10 = *result;
      if (*a2 < *result)
      {
        *__n128 result = *a2;
        *a2 = v10;
      }
    }
  }
  unint64_t v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    unint64_t v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      unint64_t v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        unint64_t v14 = *result;
        if (*a2 < *result)
        {
          *__n128 result = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      unint64_t v3 = *(a2 - 1);
      unint64_t v4 = *a1;
      if (v3 < *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      unint64_t v11 = *a1;
      unint64_t v12 = a1[1];
      unint64_t v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 < v12)
        {
          a1[1] = v13;
          *(a2 - 1) = v12;
          unint64_t v31 = *a1;
          unint64_t v30 = a1[1];
          if (v30 < *a1)
          {
            *a1 = v30;
            a1[1] = v31;
          }
        }
      }
      else
      {
        if (v13 >= v12)
        {
          *a1 = v12;
          a1[1] = v11;
          unint64_t v36 = *(a2 - 1);
          if (v36 >= v11) {
            return 1;
          }
          a1[1] = v36;
        }
        else
        {
          *a1 = v13;
        }
        *(a2 - 1) = v11;
      }
      return 1;
    case 4:
      unint64_t v14 = a1 + 1;
      unint64_t v15 = a1[1];
      uint64_t v16 = a1 + 2;
      unint64_t v17 = a1[2];
      unint64_t v18 = *a1;
      if (v15 < *a1)
      {
        unint64_t v19 = a1;
        unint64_t v20 = a1 + 2;
        unint64_t v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          unint64_t v19 = a1 + 1;
          unint64_t v20 = a1 + 2;
          unint64_t v21 = v18;
          if (v17 >= v18) {
            goto LABEL_35;
          }
        }
LABEL_34:
        unint64_t *v19 = v17;
        *unint64_t v20 = v18;
        unint64_t v15 = v21;
        goto LABEL_36;
      }
      if (v17 < v15)
      {
        *unint64_t v14 = v17;
        unint64_t *v16 = v15;
        unint64_t v19 = a1;
        unint64_t v20 = a1 + 1;
        unint64_t v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_34;
      }
LABEL_35:
      unint64_t v15 = v17;
LABEL_36:
      unint64_t v32 = *(a2 - 1);
      if (v32 < v15)
      {
        unint64_t *v16 = v32;
        *(a2 - 1) = v15;
        unint64_t v33 = *v16;
        unint64_t v34 = *v14;
        if (v33 < v34)
        {
          a1[1] = v33;
          a1[2] = v34;
          unint64_t v35 = *a1;
          if (v33 < *a1)
          {
            *a1 = v33;
            a1[1] = v35;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,md::RoadPosition **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v6 = a1 + 2;
      unint64_t v5 = a1[2];
      unint64_t v7 = a1[1];
      unint64_t v8 = *a1;
      if (v7 >= *a1)
      {
        if (v5 >= v7) {
          goto LABEL_19;
        }
        a1[1] = v5;
        unint64_t *v6 = v7;
        unint64_t v9 = a1;
        unint64_t v10 = a1 + 1;
      }
      else
      {
        unint64_t v9 = a1;
        unint64_t v10 = a1 + 2;
        if (v5 < v7) {
          goto LABEL_18;
        }
        *a1 = v7;
        a1[1] = v8;
        unint64_t v9 = a1 + 1;
        unint64_t v10 = a1 + 2;
      }
      if (v5 >= v8) {
        goto LABEL_19;
      }
LABEL_18:
      *unint64_t v9 = v5;
      unint64_t *v10 = v8;
LABEL_19:
      unint64_t v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        unint64_t v26 = *v22;
        unint64_t v27 = *v6;
        if (*v22 < v27)
        {
          uint64_t v28 = i;
          do
          {
            *(unint64_t *)((char *)a1 + v28) = v27;
            uint64_t v29 = v28 - 8;
            if (v28 == 8)
            {
              uint64_t v25 = a1;
              goto LABEL_22;
            }
            unint64_t v27 = *(unint64_t *)((char *)a1 + v28 - 16);
            v28 -= 8;
          }
          while (v26 < v27);
          uint64_t v25 = (unint64_t *)((char *)a1 + v29);
LABEL_22:
          *uint64_t v25 = v26;
          if (++v23 == 8) {
            break;
          }
        }
        unint64_t v6 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      return v22 + 1 == a2;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      int v8 = *(_DWORD *)(v6 + 20);
      int v9 = *(_DWORD *)(*a1 + 20);
      if (v8 == v9)
      {
        double v10 = *(double *)(v6 + 32);
        double v11 = *(double *)(v7 + 32);
        if (v10 == v11)
        {
          if (v6 >= v7) {
            return result;
          }
        }
        else if (v10 <= v11)
        {
          return result;
        }
      }
      else if (v8 >= v9)
      {
        return result;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v12 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByPriority &,md::RoadPosition **>(a1, a1 + 1, a1 + 2);
      unint64_t v13 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (2)
  {
    unint64_t v17 = *v13;
    unint64_t v18 = *v12;
    int v19 = *(_DWORD *)(*v13 + 20);
    int v20 = *(_DWORD *)(*v12 + 20);
    if (v19 == v20)
    {
      double v21 = *(double *)(v17 + 32);
      double v22 = *(double *)(v18 + 32);
      if (v21 == v22)
      {
        if (v17 >= v18) {
          goto LABEL_10;
        }
      }
      else if (v21 <= v22)
      {
        goto LABEL_10;
      }
    }
    else if (v19 >= v20)
    {
      goto LABEL_10;
    }
    unint64_t *v13 = v18;
    uint64_t v16 = a1;
    if (v12 == a1) {
      goto LABEL_9;
    }
    uint64_t v23 = v14;
    while (1)
    {
      unint64_t v24 = *(unint64_t *)((char *)a1 + v23 + 8);
      int v25 = *(_DWORD *)(v24 + 20);
      if (v19 == v25) {
        break;
      }
      if (v19 >= v25) {
        goto LABEL_28;
      }
LABEL_21:
      --v12;
      *(unint64_t *)((char *)a1 + v23 + 16) = v24;
      v23 -= 8;
      if (v23 == -16)
      {
        uint64_t v16 = a1;
        goto LABEL_9;
      }
    }
    double v26 = *(double *)(v17 + 32);
    double v27 = *(double *)(v24 + 32);
    if (v26 == v27)
    {
      if (v17 >= v24)
      {
        uint64_t v16 = (unint64_t *)((char *)a1 + v23 + 16);
        goto LABEL_9;
      }
      goto LABEL_21;
    }
    if (v26 > v27) {
      goto LABEL_21;
    }
LABEL_28:
    uint64_t v16 = v12;
LABEL_9:
    unint64_t *v16 = v17;
    if (++v15 == 8) {
      return v13 + 1 == a2;
    }
LABEL_10:
    unint64_t v12 = v13;
    v14 += 8;
    if (++v13 != a2) {
      continue;
    }
    return 1;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(a2[-1].u64[1], a1->i64[0]))
      {
        unint64_t v6 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1]);
      return 1;
    case 4:
      int v15 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(a2[-1].u64[1], a1[1].u64[0]))
      {
        unint64_t v16 = *v15;
        unint64_t *v15 = a2[-1].u64[1];
        a2[-1].i64[1] = v16;
        if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v15, a1->u64[1]))
        {
          uint64_t v18 = a1->i64[1];
          unint64_t v17 = a1[1].u64[0];
          unint64_t v19 = a1->i64[0];
          a1->i64[1] = v17;
          a1[1].i64[0] = v18;
          if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v17, v19))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,0>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1]);
      return 1;
    default:
      unint64_t v7 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      int v8 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v8, *v7))
    {
      unint64_t v12 = *v8;
      uint64_t v13 = v9;
      do
      {
        uint64_t v14 = &a1->i8[v13];
        *(uint64_t *)((char *)&a1[1].i64[1] + v13) = *(uint64_t *)((char *)a1[1].i64 + v13);
        if (v13 == -16)
        {
          i64 = a1->i64;
          goto LABEL_7;
        }
        v13 -= 8;
      }
      while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v12, *((void *)v14 + 1)));
      i64 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
LABEL_7:
      void *i64 = v12;
      if (++v10 == 8) {
        return v8 + 1 == (unint64_t *)a2;
      }
    }
    unint64_t v7 = v8;
    v9 += 8;
    if (++v8 == (unint64_t *)a2) {
      return 1;
    }
  }
}

{
  uint64_t v4;
  BOOL result;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  int v10;
  void *i64;
  unint64_t v12;
  uint64_t v13;
  __int8 *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(a2[-1].u64[1], a1->i64[0]))
      {
        unint64_t v6 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1]);
      return 1;
    case 4:
      int v15 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(a2[-1].u64[1], a1[1].u64[0]))
      {
        unint64_t v16 = *v15;
        unint64_t *v15 = a2[-1].u64[1];
        a2[-1].i64[1] = v16;
        if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v15, a1->u64[1]))
        {
          uint64_t v18 = a1->i64[1];
          unint64_t v17 = a1[1].u64[0];
          unint64_t v19 = a1->i64[0];
          a1->i64[1] = v17;
          a1[1].i64[0] = v18;
          if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v17, v19))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,0>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1]);
      return 1;
    default:
      unint64_t v7 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      int v8 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(*v8, *v7))
    {
      unint64_t v12 = *v8;
      uint64_t v13 = v9;
      do
      {
        uint64_t v14 = &a1->i8[v13];
        *(uint64_t *)((char *)&a1[1].i64[1] + v13) = *(uint64_t *)((char *)a1[1].i64 + v13);
        if (v13 == -16)
        {
          i64 = a1->i64;
          goto LABEL_7;
        }
        v13 -= 8;
      }
      while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY::operator()(v12, *((void *)v14 + 1)));
      i64 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
LABEL_7:
      void *i64 = v12;
      if (++v10 == 8) {
        return v8 + 1 == (unint64_t *)a2;
      }
    }
    unint64_t v7 = v8;
    v9 += 8;
    if (++v8 == (unint64_t *)a2) {
      return 1;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(a2[-1].u64[1], a1->i64[0]))
      {
        unint64_t v6 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1]);
      return 1;
    case 4:
      int v15 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(a2[-1].u64[1], a1[1].u64[0]))
      {
        unint64_t v16 = *v15;
        unint64_t *v15 = a2[-1].u64[1];
        a2[-1].i64[1] = v16;
        if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v15, a1->u64[1]))
        {
          uint64_t v18 = a1->i64[1];
          unint64_t v17 = a1[1].u64[0];
          unint64_t v19 = a1->i64[0];
          a1->i64[1] = v17;
          a1[1].i64[0] = v18;
          if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v17, v19))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,0>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1]);
      return 1;
    default:
      unint64_t v7 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      int v8 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v8, *v7))
    {
      unint64_t v12 = *v8;
      uint64_t v13 = v9;
      do
      {
        uint64_t v14 = &a1->i8[v13];
        *(uint64_t *)((char *)&a1[1].i64[1] + v13) = *(uint64_t *)((char *)a1[1].i64 + v13);
        if (v13 == -16)
        {
          i64 = a1->i64;
          goto LABEL_7;
        }
        v13 -= 8;
      }
      while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v12, *((void *)v14 + 1)));
      i64 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
LABEL_7:
      void *i64 = v12;
      if (++v10 == 8) {
        return v8 + 1 == (unint64_t *)a2;
      }
    }
    unint64_t v7 = v8;
    v9 += 8;
    if (++v8 == (unint64_t *)a2) {
      return 1;
    }
  }
}

{
  uint64_t v4;
  BOOL result;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  int v10;
  void *i64;
  unint64_t v12;
  uint64_t v13;
  __int8 *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(a2[-1].u64[1], a1->i64[0]))
      {
        unint64_t v6 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1]);
      return 1;
    case 4:
      int v15 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(a2[-1].u64[1], a1[1].u64[0]))
      {
        unint64_t v16 = *v15;
        unint64_t *v15 = a2[-1].u64[1];
        a2[-1].i64[1] = v16;
        if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v15, a1->u64[1]))
        {
          uint64_t v18 = a1->i64[1];
          unint64_t v17 = a1[1].u64[0];
          unint64_t v19 = a1->i64[0];
          a1->i64[1] = v17;
          a1[1].i64[0] = v18;
          if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v17, v19))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **,0>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1]);
      return 1;
    default:
      unint64_t v7 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX &,md::RoadPosition **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1]);
      int v8 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(*v8, *v7))
    {
      unint64_t v12 = *v8;
      uint64_t v13 = v9;
      do
      {
        uint64_t v14 = &a1->i8[v13];
        *(uint64_t *)((char *)&a1[1].i64[1] + v13) = *(uint64_t *)((char *)a1[1].i64 + v13);
        if (v13 == -16)
        {
          i64 = a1->i64;
          goto LABEL_7;
        }
        v13 -= 8;
      }
      while (md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByX::operator()(v12, *((void *)v14 + 1)));
      i64 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
LABEL_7:
      void *i64 = v12;
      if (++v10 == 8) {
        return v8 + 1 == (unint64_t *)a2;
      }
    }
    unint64_t v7 = v8;
    v9 += 8;
    if (++v8 == (unint64_t *)a2) {
      return 1;
    }
  }
}

__n128 std::__function::__func<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0,std::allocator<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0>,BOOL ()(md::LabelLineResolvedPosition const&,double)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF51DCC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0,std::allocator<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0>,BOOL ()(md::LabelLineResolvedPosition const&,double)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF51DCC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0,std::allocator<md::LineLabelPlacer::createPlacements(unsigned char,md::RoadMetricsEntry const*,md::LabelManager *,BOOL,BOOL)::$_0>,BOOL ()(md::LabelLineResolvedPosition const&,double)>::~__func()
{
}

void ggl::HillshadeFillMask::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::HillshadeFillMask::CompressedMeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::HillshadeFillMask::CompressedMeshPipelineSetup::textureIsEnabled(ggl::HillshadeFillMask::CompressedMeshPipelineSetup *this)
{
  return 0;
}

BOOL ggl::HillshadeFillMask::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::HillshadeFillMask::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::HillshadeFillMask::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::HillshadeFillMask::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::MuninRoadGraphZData::MuninRoadGraphZData(uint64_t a1, void *a2, uint64_t **a3)
{
  uint64_t v4 = a1;
  uint64_t v749 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  v691 = (void *)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  v689 = (uint64_t *)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v688 = a1 + 120;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v695 = (float64x2_t **)(a1 + 176);
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  v697 = (char **)(a1 + 224);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  v694 = (float *)(a1 + 312);
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  v687 = (uint64_t *)(a1 + 392);
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  float64x2_t v5 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(float64x2_t *)(a1 + 8) = v5;
  float64x2_t v6 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(float64x2_t *)(a1 + 24) = v6;
  unint64_t v7 = *a3;
  int v8 = a3[1];
  if (*a3 != v8)
  {
    uint64_t v9 = *a3;
    do
    {
      uint64_t v10 = *v9;
      v9 += 2;
      int v11 = 1 << *(unsigned char *)(v10 + 297);
      double v12 = 1.0 / (double)v11;
      v13.i64[0] = vdup_lane_s32(*(int32x2_t *)(v10 + 300), 1).i32[0];
      v13.i64[1] = (int)(v11 + ~*(void *)(v10 + 300));
      float64x2_t v14 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12, 0);
      float64x2_t v15 = vmulq_n_f64(vcvtq_f64_s64(v13), v12);
      float64x2_t v5 = vminnmq_f64(v15, v5);
      float64x2_t v6 = vmaxnmq_f64(v6, vaddq_f64(v15, v14));
    }
    while (v9 != v8);
    *(float64x2_t *)(a1 + 8) = v5;
    *(float64x2_t *)(a1 + 24) = v6;
    double v16 = -1.79769313e308;
    double v17 = 1.79769313e308;
    while (1)
    {
      uint64_t v18 = *(void *)(*v7 + 168);
      uint64_t v19 = *(void *)(*v7 + 176);
      if (v18 != v19)
      {
        unint64_t v20 = v19 - v18 - 1864;
        if (v20 > 0x747)
        {
          unint64_t v21 = v20 / 0x748 + 1;
          uint64_t v22 = *(void *)(*v7 + 168);
          uint64_t v23 = v21 & 0x7FFFFFFFFFFFFELL;
          double v24 = v17;
          double v25 = v16;
          do
          {
            double v26 = *(double *)(v22 + 72);
            double v27 = *(double *)(v22 + 1936);
            double v17 = fmin(v26, v17);
            double v24 = fmin(v27, v24);
            double v16 = fmax(v16, v26);
            double v25 = fmax(v25, v27);
            v22 += 3728;
            v23 -= 2;
          }
          while (v23);
          double v16 = fmax(v16, v25);
          double v17 = fmin(v17, v24);
          if (v21 == (v21 & 0x7FFFFFFFFFFFFELL)) {
            goto LABEL_5;
          }
          v18 += 1864 * (v21 & 0x7FFFFFFFFFFFFELL);
        }
        do
        {
          double v28 = *(double *)(v18 + 72);
          double v17 = fmin(v28, v17);
          double v16 = fmax(v16, v28);
          v18 += 1864;
        }
        while (v18 != v19);
      }
LABEL_5:
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_15;
      }
    }
  }
  double v17 = 1.79769313e308;
  double v16 = -1.79769313e308;
LABEL_15:
  *(double *)(v4 + 160) = v17;
  *(double *)(v4 + 168) = v16;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 232) = 0;
  *(void *)(v4 + 256) = 0;
  uint64_t v29 = (void *)a2[10];
  v690 = (void *)a2[11];
  if (v29 != v690)
  {
    v684 = (void *)(v4 + 352);
    uint64_t v682 = v4 + 200;
    v696 = (double **)(v4 + 248);
    v720 = (float *)(v4 + 272);
    v683 = (float *)(v4 + 432);
    uint64_t v706 = v4;
    do
    {
      unint64_t v30 = (void *)*v29;
      v735 = 0;
      v736 = 0;
      v734 = 0;
      unint64_t v31 = (unsigned char *)v30[97];
      unint64_t v32 = (unsigned char *)v30[98];
      int64_t v33 = v32 - v31;
      if (v32 == v31)
      {
        unint64_t v34 = 0;
      }
      else
      {
        if (v33 < 0) {
          goto LABEL_831;
        }
        unint64_t v34 = (char *)operator new(v32 - v31);
        v734 = v34;
        v736 = &v34[8 * (v33 >> 3)];
        memcpy(v34, v31, v33);
        v735 = &v34[8 * (v33 >> 3)];
      }
      v737 = 0;
      v738 = 0;
      v739 = 0;
      unint64_t v35 = (unsigned char *)v30[100];
      unint64_t v36 = (unsigned char *)v30[101];
      int64_t v37 = v36 - v35;
      v698 = v34;
      v692 = v29;
      if (v36 == v35)
      {
        std::string __p = 0;
      }
      else
      {
        if (v37 < 0) {
          abort();
        }
        id v38 = (char *)operator new(v36 - v35);
        unint64_t v39 = &v38[8 * (v37 >> 3)];
        v737 = v38;
        v739 = v39;
        std::string __p = v38;
        memcpy(v38, v35, v37);
        v738 = v39;
      }
      char v40 = 0;
      uint64_t v41 = 0;
      while (2)
      {
        char v703 = v40;
        unint64_t v42 = (unint64_t **)&(&v734)[3 * v41];
        unint64_t v44 = *v42;
        uint64_t v43 = v42[1];
        while (v44 != v43)
        {
          unint64_t v45 = *v44;
          v729[0] = v45;
          if (*(unsigned char *)(v45 + 68))
          {
            if (*(unsigned char *)(v45 + 68) == 2 && *(unsigned char *)(v45 + 69) == 1)
            {
              *((unsigned char *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v720, v45, v729)+ 24) = 2;
              ++v44;
            }
            else
            {
              double v47 = *(double *)(v45 + 16);
              double v48 = 10.0;
              if (*(_DWORD *)(v45 + 64)) {
                goto LABEL_48;
              }
              size_t v49 = *(char **)(v45 + 40);
              unint64_t v50 = *(char **)(v45 + 48);
              if (v49 == v50)
              {
                double v48 = 0.0;
                goto LABEL_48;
              }
              unint64_t v51 = v50 - v49 - 8;
              if (v51 >= 8)
              {
                uint64_t v53 = (v51 >> 3) + 1;
                uint64_t v54 = v49 + 8;
                float v55 = 0.0;
                uint64_t v56 = v53 & 0x3FFFFFFFFFFFFFFELL;
                float v57 = 0.0;
                do
                {
                  float v55 = fmaxf(v55, *(float *)(*(v54 - 1) + 8));
                  float v57 = fmaxf(v57, *(float *)(*v54 + 8));
                  v54 += 2;
                  v56 -= 2;
                }
                while (v56);
                float v52 = fmaxf(v55, v57);
                if (v53 == (v53 & 0x3FFFFFFFFFFFFFFELL)) {
                  goto LABEL_47;
                }
                v49 += 8 * (v53 & 0x3FFFFFFFFFFFFFFELL);
              }
              else
              {
                float v52 = 0.0;
              }
              do
              {
                uint64_t v58 = *(void *)v49;
                v49 += 8;
                float v52 = fmaxf(v52, *(float *)(v58 + 8));
              }
              while (v49 != v50);
LABEL_47:
              double v48 = v52;
LABEL_48:
              double v59 = *(double *)(v45 + 24);
              long double v60 = exp(v59 * 6.28318531 + -3.14159265);
              long double v61 = atan(v60) * 114.591559 + -90.0;
              long double v62 = tan(v61 * 0.00872664626 + 0.789761487);
              double v63 = log(v62);
              long double v64 = tan(v61 * 0.00872664626 + 0.78103484);
              double v65 = fabs((v63 - log(v64)) * 0.159154943);
              long double v66 = cos(v61 * 0.034906585) * -559.82 + 111132.92;
              long double v67 = v66 + cos(v61 * 0.0698131701) * 1.175;
              double v68 = v65 * v48 / (v67 + cos(v61 * 0.104719755) * -0.0023);
              if (*(double *)(v4 + 24) <= v47 - v68
                || (double v69 = v68 + v68, *(double *)(v4 + 8) >= v68 + v68 + v47 - v68)
                || (double v70 = v59 - v68, *(double *)(v4 + 32) <= v70)
                || *(double *)(v4 + 16) >= v69 + v70)
              {
                *((unsigned char *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v720, v45, v729)+ 24) = 3;
                ++v44;
              }
              else
              {
                *(void *)(v4 + 232) = *(void *)(v4 + 224);
                *(void *)(v4 + 256) = *(void *)(v4 + 248);
                unint64_t v71 = *a3;
                uint64_t v72 = a3[1];
                if (*a3 == v72) {
                  goto LABEL_60;
                }
                do
                {
                  uint64_t v73 = *v71;
                  v71 += 2;
                  md::mun::MuninMetadata::neighborsWithinRadius(v73, (double *)(v45 + 16), (uint64_t)v697, (uint64_t)v696, 15.0);
                }
                while (v71 != v72);
                uint64_t v74 = *(void *)(v4 + 224);
                uint64_t v75 = *(void *)(v4 + 232) - v74;
                unint64_t v34 = v698;
                if (!v75)
                {
LABEL_60:
                  *((unsigned char *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v720, v45, v729)+ 24) = 4;
                  ++v44;
                }
                else
                {
                  unint64_t v76 = v75 >> 3;
                  if (v76 <= 1) {
                    unint64_t v76 = 1;
                  }
                  if (v76 > 1)
                  {
                    unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
                    uint64_t v80 = v74 + 8;
                    double v81 = 1.79769313e308;
                    double v82 = -1.79769313e308;
                    unint64_t v83 = v76 & 0xFFFFFFFFFFFFFFFELL;
                    double v84 = -1.79769313e308;
                    double v85 = 1.79769313e308;
                    do
                    {
                      double v86 = *(double *)(*(void *)(v80 - 8) + 72);
                      double v87 = *(double *)(*(void *)v80 + 72);
                      double v81 = fmin(v86, v81);
                      double v85 = fmin(v87, v85);
                      double v82 = fmax(v82, v86);
                      double v84 = fmax(v84, v87);
                      v80 += 16;
                      v83 -= 2;
                    }
                    while (v83);
                    double v78 = fmin(v81, v85);
                    double v79 = fmax(v82, v84);
                    if (v76 == v77) {
                      goto LABEL_66;
                    }
                  }
                  else
                  {
                    unint64_t v77 = 0;
                    double v78 = 1.79769313e308;
                    double v79 = -1.79769313e308;
                  }
                  unint64_t v88 = v76 - v77;
                  unint64_t v89 = (uint64_t *)(v74 + 8 * v77);
                  do
                  {
                    uint64_t v90 = *v89++;
                    double v91 = *(double *)(v90 + 72);
                    double v78 = fmin(v91, v78);
                    double v79 = fmax(v79, v91);
                    --v88;
                  }
                  while (v88);
LABEL_66:
                  if (vabdd_f64(v79, v78) <= 6.0)
                  {
                    unint64_t v92 = (double *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v694, v45, v729);
                    *(void *)(v4 + 184) = *(void *)(v4 + 176);
                    v731 = 0;
                    v732 = 0;
                    v730 = 0;
                    unsigned int v94 = *(unsigned char **)(v4 + 248);
                    float64x2_t v93 = *(unsigned char **)(v4 + 256);
                    int64_t v95 = v93 - v94;
                    if (v93 == v94)
                    {
                      unint64_t v96 = 0;
                    }
                    else
                    {
                      if (v95 < 0) {
                        abort();
                      }
                      unint64_t v96 = (void (**)(void **))operator new(v93 - v94);
                      v730 = v96;
                      v732 = (char *)&v96[v95 >> 3];
                      memcpy(v96, v94, v95);
                      v731 = (char *)&v96[v95 >> 3];
                    }
                    *(void *)&v747[0] = &unk_1EF574DC0;
                    v748 = v747;
                    md::MuninLabelingUtils::computeWeightsForWeightedAverage(&v730, (uint64_t)v747, v695);
                    if (v748 == v747)
                    {
                      (*(void (**)(double *))(*(void *)&v747[0] + 32))(v747);
                      if (v96) {
                        goto LABEL_76;
                      }
                    }
                    else
                    {
                      if (v748) {
                        (*(void (**)(void))(*(void *)v748 + 40))();
                      }
                      if (v96)
                      {
LABEL_76:
                        v731 = (char *)v96;
                        operator delete(v96);
                      }
                    }
                    float v97 = *(uint64_t **)(v4 + 224);
                    uint64_t v98 = *(void *)(v4 + 232) - (void)v97;
                    if (v98)
                    {
                      unint64_t v99 = v98 >> 3;
                      float v100 = *v695;
                      double v101 = v92[3];
                      if (v99 <= 1) {
                        unint64_t v99 = 1;
                      }
                      do
                      {
                        uint64_t v102 = *v97++;
                        double v103 = *(double *)(v102 + 72);
                        double v104 = v100->f64[0];
                        float v100 = (float64x2_t *)((char *)v100 + 8);
                        double v101 = v101 + v104 * v103;
                        v92[3] = v101;
                        --v99;
                      }
                      while (v99);
                    }
                    ++v44;
                  }
                  else
                  {
                    *((unsigned char *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v720, v45, v729)+ 24) = 5;
                    ++v44;
                  }
                }
              }
            }
          }
          else
          {
            *((unsigned char *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v720, v45, v729)+ 24) = 1;
            ++v44;
          }
        }
        char v40 = 1;
        uint64_t v41 = 1;
        if ((v703 & 1) == 0) {
          continue;
        }
        break;
      }
      if (__p) {
        operator delete(__p);
      }
      if (v34) {
        operator delete(v34);
      }
      uint64_t v29 = v692 + 2;
    }
    while (v692 + 2 != v690);
    if (*(void *)(v4 + 336))
    {
      unsigned int v106 = (unsigned char *)a2[7];
      BOOL v105 = (unsigned char *)a2[8];
      int64_t v107 = v105 - v106;
      if (v105 == v106)
      {
        uint64_t v108 = 0;
        float v109 = 0;
      }
      else
      {
        if (v107 < 0) {
LABEL_831:
        }
          abort();
        uint64_t v108 = (int64_t *)operator new(v105 - v106);
        float v109 = &v108[v107 >> 3];
        memcpy(v108, v106, v107);
      }
      *(void *)(v4 + 184) = *(void *)(v4 + 176);
      *(void *)(v4 + 208) = *(void *)(v4 + 200);
      *(void *)(v4 + 232) = *(void *)(v4 + 224);
      *(void *)(v4 + 256) = *(void *)(v4 + 248);
      if (v108 != v109)
      {
        float v110 = v109;
        size_t v111 = v108;
LABEL_95:
        while (1)
        {
          int64_t v107 = *v111;
          if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v694, *(void *)(*v111 + 88))&& !std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v694, *(void *)(v107 + 96)))
          {
            break;
          }
          if (++v111 == v110) {
            goto LABEL_104;
          }
        }
        size_t v112 = v110 - 1;
        while (v112 != v111)
        {
          float v110 = v112;
          int64_t v113 = *v112;
          if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v694, *(void *)(*v112 + 88)))
          {
            uint64_t v114 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v694, *(void *)(v113 + 96));
            size_t v112 = v110 - 1;
            if (!v114) {
              continue;
            }
          }
          *v111++ = v113;
          int64_t *v110 = v107;
          if (v111 != v110) {
            goto LABEL_95;
          }
          break;
        }
LABEL_104:
        if (v108 != v109)
        {
          double v115 = 15.0;
          uint64_t v116 = v108;
          while (1)
          {
            int64_t v107 = *v116;
            unint64_t v724 = v107;
            if (*(double *)(v4 + 24) <= *(double *)(v107 + 104)
              || *(double *)(v706 + 8) >= *(double *)(v107 + 120)
              || *(double *)(v706 + 32) <= *(double *)(v107 + 112)
              || *(double *)(v706 + 16) >= *(double *)(v107 + 128))
            {
              goto LABEL_107;
            }
            unint64_t v117 = *(void *)(v107 + 88);
            uint8x8_t v118 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v694, v117);
            unint64_t v119 = *(void *)(v107 + 96);
            unsigned int v120 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v694, v119);
            v704 = v120;
            if (v120)
            {
              uint64_t v121 = (double *)(v120 + 3);
            }
            else
            {
              if (!v118)
              {
                v289 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v720, v117);
                v290 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v720, v119);
                if (v289) {
                  int v291 = *((unsigned __int8 *)v289 + 24);
                }
                else {
                  int v291 = 0;
                }
                uint64_t v362 = v688;
                if (v290)
                {
                  if (*((unsigned char *)v290 + 24)) {
                    BOOL v363 = v291 == 0;
                  }
                  else {
                    BOOL v363 = 1;
                  }
                  if (v363) {
                    uint64_t v362 = v688;
                  }
                  else {
                    uint64_t v362 = (uint64_t)v684;
                  }
                }
                std::__hash_table<md::ComposedRoadEdge const*,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,std::allocator<md::ComposedRoadEdge const*>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,md::ComposedRoadEdge const*&>(v362, v107, v107);
                goto LABEL_107;
              }
              uint64_t v121 = 0;
            }
            size_t v122 = (double *)(v118 + 3);
            v123 = v118;
            BOOL v124 = v118 != 0;
            if (*(double *)(v107 + 144) <= v115)
            {
              std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,std::piecewise_construct_t const&,std::tuple<md::ComposedRoadEdge const* const&>,std::tuple<>>(v687, v107, &v724)[24] = v124;
              if (v123) {
                uint64_t v286 = v122;
              }
              else {
                uint64_t v286 = v121;
              }
              double v287 = *v286;
              if (v123)
              {
                v288 = v687;
                if (v121) {
                  double v287 = *v122 + (*v121 - *v122) * 0.5;
                }
              }
              else
              {
                v288 = v687;
              }
              v324 = std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,std::piecewise_construct_t const&,std::tuple<md::ComposedRoadEdge const* const&>,std::tuple<>>(v288, v107, &v724);
              v325 = v324;
              v327 = (double *)*((void *)v324 + 5);
              unint64_t v326 = *((void *)v324 + 6);
              if ((unint64_t)v327 < v326)
              {
                double *v327 = v287;
                v328 = v327 + 1;
                v329 = v687;
LABEL_338:
                *((void *)v325 + 5) = v328;
                v344 = std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,std::piecewise_construct_t const&,std::tuple<md::ComposedRoadEdge const* const&>,std::tuple<>>(v329, v724, &v724);
                int64_t v107 = (int64_t)v344;
                v346 = (char *)*((void *)v344 + 8);
                unint64_t v345 = *((void *)v344 + 9);
                if ((unint64_t)v346 < v345)
                {
                  *(void *)v346 = 0x3FE0000000000000;
                  *((void *)v344 + 8) = v346 + 8;
                  goto LABEL_107;
                }
                v347 = (char *)*((void *)v344 + 7);
                uint64_t v348 = (v346 - v347) >> 3;
                unint64_t v349 = v348 + 1;
                if (!((unint64_t)(v348 + 1) >> 61))
                {
                  uint64_t v350 = v345 - (void)v347;
                  if (v350 >> 2 > v349) {
                    unint64_t v349 = v350 >> 2;
                  }
                  if ((unint64_t)v350 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v351 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v351 = v349;
                  }
                  if (v351)
                  {
                    if (v351 >> 61) {
                      goto LABEL_827;
                    }
                    v352 = operator new(8 * v351);
                  }
                  else
                  {
                    v352 = 0;
                  }
                  v353 = &v352[8 * v348];
                  void *v353 = 0x3FE0000000000000;
                  v354 = v353 + 1;
                  if (v346 != v347)
                  {
                    unint64_t v355 = v346 - 8 - v347;
                    if (v355 < 0x58) {
                      goto LABEL_838;
                    }
                    if ((unint64_t)(v347 - v352) < 0x20) {
                      goto LABEL_838;
                    }
                    uint64_t v356 = (v355 >> 3) + 1;
                    v357 = &v352[v346 - v347 - 16];
                    v358 = v346 - 16;
                    uint64_t v359 = v356 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v360 = *(_OWORD *)v358;
                      *(v357 - 1) = *((_OWORD *)v358 - 1);
                      _OWORD *v357 = v360;
                      v357 -= 2;
                      v358 -= 32;
                      v359 -= 4;
                    }
                    while (v359);
                    v353 -= v356 & 0x3FFFFFFFFFFFFFFCLL;
                    v346 -= 8 * (v356 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v356 != (v356 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_838:
                      do
                      {
                        uint64_t v361 = *((void *)v346 - 1);
                        v346 -= 8;
                        *--v353 = v361;
                      }
                      while (v346 != v347);
                    }
                  }
                  *(void *)(v107 + 56) = v353;
                  *(void *)(v107 + 64) = v354;
                  *(void *)(v107 + 72) = &v352[8 * v351];
                  if (v347) {
                    operator delete(v347);
                  }
                  *(void *)(v107 + 64) = v354;
                  goto LABEL_107;
                }
LABEL_833:
                abort();
              }
              v330 = (double *)*((void *)v324 + 4);
              uint64_t v331 = v327 - v330;
              unint64_t v332 = v331 + 1;
              if ((unint64_t)(v331 + 1) >> 61) {
                goto LABEL_833;
              }
              uint64_t v333 = v326 - (void)v330;
              if (v333 >> 2 > v332) {
                unint64_t v332 = v333 >> 2;
              }
              if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v334 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v334 = v332;
              }
              if (v334)
              {
                if (v334 >> 61) {
                  goto LABEL_827;
                }
                v335 = operator new(8 * v334);
              }
              else
              {
                v335 = 0;
              }
              v336 = (double *)&v335[8 * v331];
              double *v336 = v287;
              v328 = v336 + 1;
              if (v327 == v330)
              {
                v329 = v687;
              }
              else
              {
                unint64_t v337 = (char *)(v327 - 1) - (char *)v330;
                if (v337 < 0x58)
                {
                  v329 = v687;
                  goto LABEL_335;
                }
                v329 = v687;
                if ((unint64_t)((char *)v330 - v335) < 0x20) {
                  goto LABEL_839;
                }
                uint64_t v338 = (v337 >> 3) + 1;
                v339 = &v335[(char *)v327 - (char *)v330 - 16];
                v340 = v327 - 2;
                uint64_t v341 = v338 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v342 = *(_OWORD *)v340;
                  *(v339 - 1) = *((_OWORD *)v340 - 1);
                  _OWORD *v339 = v342;
                  v339 -= 2;
                  v340 -= 4;
                  v341 -= 4;
                }
                while (v341);
                v336 -= v338 & 0x3FFFFFFFFFFFFFFCLL;
                v327 -= v338 & 0x3FFFFFFFFFFFFFFCLL;
                if (v338 != (v338 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_839:
                  do
                  {
LABEL_335:
                    uint64_t v343 = *((void *)v327-- - 1);
                    *((void *)v336-- - 1) = v343;
                  }
                  while (v327 != v330);
                }
              }
              *((void *)v325 + 4) = v336;
              *((void *)v325 + 5) = v328;
              *((void *)v325 + 6) = &v335[8 * v334];
              if (v330) {
                operator delete(v330);
              }
              goto LABEL_338;
            }
            unint64_t v125 = std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,std::piecewise_construct_t const&,std::tuple<md::ComposedRoadEdge const* const&>,std::tuple<>>(v687, v107, &v724);
            v125[24] = v124;
            md::ComposedRoadEdge::walker((md::ComposedRoadEdge *)&v734, v107, v123 != 0);
            BOOL v126 = v123;
            uint64_t v127 = v123 ? v122 : v121;
            double v128 = *v127;
            uint64_t v129 = v125;
            double v130 = (void *)v706;
            *(void *)(v706 + 184) = *(void *)(v706 + 176);
            *(void *)(v706 + 232) = *(void *)(v706 + 224);
            *(void *)(v706 + 256) = *(void *)(v706 + 248);
            *(void *)(v706 + 208) = *(void *)(v706 + 200);
            LOWORD(v729[0]) = 0;
            uint64_t v686 = (uint64_t)(v129 + 80);
            v679 = v129;
            v680 = v109;
            uint64_t v681 = (uint64_t)(v129 + 104);
            v729[1] = 0;
            v729[2] = 0;
            while (1)
            {
              double v131 = v742;
              double v132 = v742 + v115;
              if (v742 + v115 >= 0.0) {
                break;
              }
              unint64_t v133 = (double *)v739;
              uint64_t v134 = v741;
              uint64_t v135 = 56 * v741 - 8;
              double v136 = 15.0;
              do
              {
                if (!v134) {
                  goto LABEL_302;
                }
                double v136 = v131 + v136;
                uint64_t v741 = --v134;
                double v131 = *(double *)((char *)v739 + v135);
                double v742 = v131;
                double v132 = v131 + v136;
                v135 -= 56;
              }
              while (v131 + v136 < 0.0);
              double v137 = v131;
LABEL_134:
              double v742 = v132;
              BOOL v142 = v132 < 0.0 || v137 < v132;
              if (v142
                || (double v143 = (char *)&v133[7 * v134],
                    uint64_t v144 = *((void *)v143 + 3),
                    uint64_t v145 = *((void *)v143 + 4),
                    v145 == v144))
              {
LABEL_144:
                int v150 = 0;
                double v745 = v132;
                if (!v134) {
                  goto LABEL_153;
                }
LABEL_145:
                if (v134 == 1)
                {
                  unint64_t v151 = 0;
                  goto LABEL_150;
                }
                unint64_t v151 = v134 & 0xFFFFFFFFFFFFFFFELL;
                uint64_t v152 = v133 + 13;
                double v153 = 0.0;
                unint64_t v154 = v134 & 0xFFFFFFFFFFFFFFFELL;
                do
                {
                  double v155 = *(v152 - 7);
                  double v156 = *v152;
                  v152 += 14;
                  double v132 = v132 + v155;
                  double v153 = v153 + v156;
                  v154 -= 2;
                }
                while (v154);
                double v132 = v153 + v132;
                if (v134 != v151)
                {
LABEL_150:
                  unint64_t v157 = &v133[7 * v151 + 6];
                  uint64_t v158 = v134 - v151;
                  do
                  {
                    double v159 = *v157;
                    v157 += 7;
                    double v132 = v132 + v159;
                    --v158;
                  }
                  while (v158);
                }
                double v745 = v132;
                goto LABEL_153;
              }
              uint64_t v146 = 0;
              unint64_t v147 = (v145 - v144) >> 3;
              if (v147 <= 1) {
                unint64_t v147 = 1;
              }
              double v148 = 0.0;
              while (1)
              {
                double v149 = *(double *)(v144 + 8 * v146);
                if (v149 + v148 >= v132) {
                  break;
                }
                ++v146;
                double v148 = v149 + v148;
                if (v147 == v146) {
                  goto LABEL_144;
                }
              }
              uint64_t v186 = (float64x2_t *)(*(void *)&v133[7 * v134] + 16 * v146);
              float64x2_t v743 = vmlaq_n_f64(*v186, vsubq_f64(v186[1], *v186), (v132 - v148) / v149);
              float64x2_t v187 = vsubq_f64(v186[1], *v186);
              float64x2_t v744 = vmulq_n_f64(v187, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v187, v187))));
              int v150 = 1;
              double v745 = v132;
              if (v134) {
                goto LABEL_145;
              }
LABEL_153:
              if (!v150) {
                goto LABEL_302;
              }
              double v160 = v132 / v746;
              if (v746 <= 0.0) {
                double v161 = 0.0;
              }
              else {
                double v161 = v160;
              }
              long double v162 = v743.f64[0] * 6.28318531;
              long double v163 = exp(v743.f64[1] * 6.28318531 + -3.14159265);
              double v164 = atan(v163) * 2.0 + -1.57079633;
              long double v165 = fmod(v162, 6.28318531);
              double v699 = fmod(v165 + 6.28318531, 6.28318531) + -3.14159265;
              __double2 v166 = __sincos_stret(v164);
              double v167 = 6378137.0 / sqrt(v166.__sinval * v166.__sinval * -0.00669437999 + 1.0);
              double v168 = v128;
              double v169 = (v167 + v128) * v166.__cosval;
              __double2 v170 = __sincos_stret(v699);
              double v171 = v169 * v170.__cosval;
              double v172 = v169 * v170.__sinval;
              double v128 = v168;
              v728[0] = v171;
              v728[1] = v172;
              v728[2] = (v168 + v167 * 0.99330562) * v166.__sinval;
              v130[29] = v130[28];
              v130[32] = v130[31];
              uint64_t v173 = *a3;
              uint64_t v174 = a3[1];
              if (*a3 == v174) {
                goto LABEL_163;
              }
              int64_t v107 = (int64_t)v697;
              do
              {
                uint64_t v175 = *v173;
                v173 += 2;
                md::mun::MuninMetadata::neighborsWithinRadius(v175, v728, (uint64_t)v697, v696, 15.0);
              }
              while (v173 != v174);
              uint64_t v176 = v130[28];
              uint64_t v177 = v130[29];
              if (v176 == v177)
              {
LABEL_163:
                int v182 = 1;
LABEL_188:
                SampleDeterminablityTracker::trackSample((uint64_t)v729, v182, v686, v681, v161);
                goto LABEL_189;
              }
              unint64_t v178 = (v177 - v176) >> 3;
              long long v180 = (int64x2_t *)v130[25];
              uint64_t v179 = (int64x2_t *)v130[26];
              unint64_t v181 = ((char *)v179 - (char *)v180) >> 3;
              if (v178 <= v181)
              {
                if (v178 < v181)
                {
                  uint64_t v179 = (int64x2_t *)((char *)v180 + 8 * v178);
                  v130[26] = v179;
                }
              }
              else
              {
                std::vector<unsigned long>::__append(v682, v178 - v181);
                long long v180 = *(int64x2_t **)(v706 + 200);
                uint64_t v179 = *(int64x2_t **)(v706 + 208);
              }
              if (v180 == v179)
              {
LABEL_185:
                int64_t v107 = (int64_t)v179;
                goto LABEL_186;
              }
              unint64_t v183 = (char *)v179 - (char *)v180 - 8;
              if (v183 < 0x18)
              {
                uint64_t v184 = 0;
                uint64_t v185 = v180;
                goto LABEL_175;
              }
              uint64_t v188 = (v183 >> 3) + 1;
              uint64_t v184 = v188 & 0x3FFFFFFFFFFFFFFCLL;
              int64x2_t v189 = (int64x2_t)xmmword_1A28FC760;
              uint64_t v190 = v180 + 1;
              uint64_t v191 = v188 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v190[-1] = v189;
                *uint64_t v190 = vaddq_s64(v189, vdupq_n_s64(2uLL));
                int64x2_t v189 = vaddq_s64(v189, vdupq_n_s64(4uLL));
                v190 += 2;
                v191 -= 4;
              }
              while (v191);
              if (v188 != v184)
              {
                uint64_t v185 = (int64x2_t *)((char *)v180 + 8 * (v188 & 0x3FFFFFFFFFFFFFFCLL));
                do
                {
LABEL_175:
                  v185->i64[0] = v184;
                  uint64_t v185 = (int64x2_t *)((char *)v185 + 8);
                  ++v184;
                }
                while (v185 != v179);
              }
              v192 = *v697;
              int64_t v107 = (int64_t)v180;
LABEL_177:
              while (1)
              {
                int64_t v193 = *(void *)v107;
                if (vabdd_f64(v168, *(double *)(*(void *)&v192[8 * *(void *)v107] + 72)) > 6.0) {
                  break;
                }
                v107 += 8;
                if ((int64x2_t *)v107 == v179) {
                  goto LABEL_185;
                }
              }
              BOOL v194 = (int64x2_t *)((char *)v179 - 8);
              while (v194 != (int64x2_t *)v107)
              {
                uint64_t v179 = v194;
                uint64_t v196 = v194->i64[0];
                BOOL v194 = (int64x2_t *)((char *)v194 - 8);
                uint64_t v195 = v196;
                if (vabdd_f64(v168, *(double *)(*(void *)&v192[8 * v196] + 72)) <= 6.0)
                {
                  *(void *)int64_t v107 = v195;
                  v107 += 8;
                  v179->i64[0] = v193;
                  if ((int64x2_t *)v107 != v179) {
                    goto LABEL_177;
                  }
                  break;
                }
              }
LABEL_186:
              if (v107 - (uint64_t)v180 < 8)
              {
                int v182 = 2;
                goto LABEL_188;
              }
              SampleDeterminablityTracker::trackSample((uint64_t)v729, 0, v686, v681, v161);
              unint64_t v197 = 0;
              if (v180 == (int64x2_t *)v107)
              {
                uint8x8_t v209 = (void *)v706;
                unint64_t v206 = *(char **)(v706 + 224);
                unint64_t v208 = (uint64_t)(*(void *)(v706 + 232) - (void)v206) >> 3;
                goto LABEL_195;
              }
              do
              {
                uint64_t v198 = v180->i64[0];
                long long v180 = (int64x2_t *)((char *)v180 + 8);
                unint64_t v199 = v197;
                BOOL v200 = *v697;
                uint64_t v201 = v198;
                uint64_t v202 = v197;
                uint64_t v203 = *(void *)&(*v697)[8 * v198];
                *(void *)&v200[v201 * 8] = *(void *)&(*v697)[8 * v197];
                *(void *)&v200[v202 * 8] = v203;
                v204 = *v696;
                double v205 = (*v696)[v198];
                v204[v201] = (*v696)[v197];
                v204[v202] = v205;
                ++v197;
              }
              while (v180 != (int64x2_t *)v107);
              unint64_t v206 = *(char **)(v706 + 224);
              unint64_t v207 = *(char **)(v706 + 232);
              unint64_t v208 = (v207 - v206) >> 3;
              if (v208 > v199)
              {
                uint8x8_t v209 = (void *)v706;
LABEL_195:
                if (v208 > v197) {
                  v209[29] = &v206[8 * v197];
                }
LABEL_220:
                uint64_t v223 = (uint64_t)v696;
                goto LABEL_221;
              }
              unint64_t v210 = v197 - v208;
              uint64_t v211 = *(void *)(v706 + 240);
              if (v197 - v208 > (v211 - (uint64_t)v207) >> 3)
              {
                if (v199 >= 0x1FFFFFFFFFFFFFFFLL) {
                  goto LABEL_834;
                }
                unint64_t v212 = v211 - (void)v206;
                unint64_t v213 = (v211 - (uint64_t)v206) >> 2;
                if (v213 <= v197) {
                  unint64_t v213 = v197;
                }
                if (v212 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v214 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v214 = v213;
                }
                if (v214 >> 61) {
                  goto LABEL_827;
                }
                uint64_t v215 = (char *)operator new(8 * v214);
                size_t v216 = 8 * v210;
                float v217 = v215;
                float v218 = &v215[8 * v208];
                size_t v700 = v216;
                bzero(v218, v216);
                uint64_t v219 = v207 - v206;
                if (v207 == v206)
                {
                  unint64_t v206 = v207;
                  unint64_t v221 = v218;
                  size_t v222 = v217;
                }
                else
                {
                  unint64_t v220 = v219 - 8;
                  if ((unint64_t)(v219 - 8) >= 0x58)
                  {
                    size_t v222 = v217;
                    unint64_t v221 = v218;
                    if ((unint64_t)(v206 - v217) < 0x20) {
                      goto LABEL_216;
                    }
                    uint64_t v224 = (v220 >> 3) + 1;
                    uint64_t v225 = &v217[v207 - v206 - 16];
                    v226 = (long long *)(v207 - 16);
                    uint64_t v227 = v224 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v228 = *v226;
                      *((_OWORD *)v225 - 1) = *(v226 - 1);
                      *(_OWORD *)uint64_t v225 = v228;
                      v225 -= 32;
                      v226 -= 2;
                      v227 -= 4;
                    }
                    while (v227);
                    unint64_t v221 = &v218[-8 * (v224 & 0x3FFFFFFFFFFFFFFCLL)];
                    v207 -= 8 * (v224 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v224 != (v224 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_216;
                    }
                  }
                  else
                  {
                    unint64_t v221 = v218;
                    size_t v222 = v217;
                    do
                    {
LABEL_216:
                      uint64_t v229 = *((void *)v207 - 1);
                      v207 -= 8;
                      *((void *)v221 - 1) = v229;
                      v221 -= 8;
                    }
                    while (v207 != v206);
                    unint64_t v206 = *v697;
                  }
                }
                size_t v230 = &v222[8 * v214];
                uint8x8_t v209 = (void *)v706;
                *(void *)(v706 + 224) = v221;
                *(void *)(v706 + 232) = &v218[v700];
                *(void *)(v706 + 240) = v230;
                if (v206) {
                  operator delete(v206);
                }
                goto LABEL_220;
              }
              if (v197 != v208)
              {
                bzero(*(void **)(v706 + 232), 8 * v210);
                v207 += 8 * v210;
              }
              uint8x8_t v209 = (void *)v706;
              uint64_t v223 = (uint64_t)v696;
              *(void *)(v706 + 232) = v207;
LABEL_221:
              size_t v232 = (char *)v209[31];
              v231 = (char *)v209[32];
              unint64_t v233 = (v231 - v232) >> 3;
              if (v197 <= v233)
              {
                if (v197 < v233)
                {
                  v231 = &v232[8 * v197];
                  v209[32] = v231;
                }
              }
              else
              {
                std::vector<double>::__append(v223, v197 - v233);
                uint8x8_t v209 = (void *)v706;
                size_t v232 = *(char **)(v706 + 248);
                v231 = *(char **)(v706 + 256);
              }
              v209[23] = v209[22];
              int64_t v726 = 0;
              int64_t v727 = 0;
              int64_t v725 = 0;
              if (v231 == v232)
              {
                int64_t v107 = 0;
              }
              else
              {
                int64_t v234 = v231 - v232;
                if (v231 - v232 < 0) {
                  goto LABEL_834;
                }
                int64_t v107 = (int64_t)operator new(v231 - v232);
                int64_t v725 = v107;
                int64_t v727 = v107 + 8 * (v234 >> 3);
                memcpy((void *)v107, v232, v234);
                int64_t v726 = v107 + 8 * (v234 >> 3);
              }
              *(void *)&v747[0] = &unk_1EF574E08;
              v748 = v747;
              md::MuninLabelingUtils::computeWeightsForWeightedAverage(&v725, (uint64_t)v747, v695);
              if (v748 == v747)
              {
                (*(void (**)(double *))(*(void *)&v747[0] + 32))(v747);
                uint64_t v235 = v706;
                uint64_t v236 = v679;
              }
              else
              {
                uint64_t v235 = v706;
                uint64_t v236 = v679;
                if (v748) {
                  (*(void (**)(void))(*(void *)v748 + 40))();
                }
              }
              if (v107)
              {
                int64_t v726 = v107;
                operator delete((void *)v107);
              }
              uint64_t v237 = *(void *)(v235 + 224);
              uint64_t v238 = *(void *)(v235 + 232) - v237;
              if (!v238)
              {
                double v128 = 0.0;
                goto LABEL_246;
              }
              unint64_t v239 = v238 >> 3;
              v240 = *v695;
              if (v239 <= 1) {
                unint64_t v239 = 1;
              }
              if (v239 <= 1)
              {
                unint64_t v241 = 0;
                double v128 = 0.0;
LABEL_244:
                unint64_t v247 = v239 - v241;
                uint64_t v248 = v241;
                uint64_t v249 = &v240->f64[v248];
                v250 = (uint64_t *)(v237 + v248 * 8);
                do
                {
                  uint64_t v251 = *v250++;
                  double v252 = *(double *)(v251 + 72);
                  double v253 = *v249++;
                  double v128 = v128 + v253 * v252;
                  --v247;
                }
                while (v247);
                goto LABEL_246;
              }
              unint64_t v241 = v239 & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v242 = &v240->f64[1];
              uint64_t v243 = v237 + 8;
              double v244 = 0.0;
              unint64_t v245 = v239 & 0xFFFFFFFFFFFFFFFELL;
              double v246 = 0.0;
              do
              {
                double v244 = v244 + *(v242 - 1) * *(double *)(*(void *)(v243 - 8) + 72);
                double v246 = v246 + *v242 * *(double *)(*(void *)v243 + 72);
                v242 += 2;
                v243 += 16;
                v245 -= 2;
              }
              while (v245);
              double v128 = v246 + v244;
              if (v239 != v241) {
                goto LABEL_244;
              }
LABEL_246:
              uint64_t v255 = (double *)*((void *)v236 + 5);
              unint64_t v254 = *((void *)v236 + 6);
              if ((unint64_t)v255 < v254)
              {
                *uint64_t v255 = v128;
                v256 = v255 + 1;
                goto LABEL_269;
              }
              int64_t v107 = *((void *)v236 + 4);
              uint64_t v257 = ((uint64_t)v255 - v107) >> 3;
              unint64_t v258 = v257 + 1;
              if ((unint64_t)(v257 + 1) >> 61) {
                goto LABEL_834;
              }
              uint64_t v259 = v254 - v107;
              if (v259 >> 2 > v258) {
                unint64_t v258 = v259 >> 2;
              }
              if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v260 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v260 = v258;
              }
              if (v260)
              {
                if (v260 >> 61) {
                  goto LABEL_827;
                }
                v261 = (char *)operator new(8 * v260);
              }
              else
              {
                v261 = 0;
              }
              v262 = (double *)&v261[8 * v257];
              double *v262 = v128;
              v256 = v262 + 1;
              if (v255 == (double *)v107)
              {
                uint64_t v236 = v679;
                goto LABEL_267;
              }
              unint64_t v263 = (unint64_t)v255 - v107 - 8;
              if (v263 < 0x58)
              {
                uint64_t v236 = v679;
                do
                {
LABEL_266:
                  uint64_t v269 = *((void *)v255-- - 1);
                  *((void *)v262-- - 1) = v269;
                }
                while (v255 != (double *)v107);
                goto LABEL_267;
              }
              uint64_t v236 = v679;
              if ((unint64_t)(v107 - (void)v261) < 0x20) {
                goto LABEL_266;
              }
              uint64_t v264 = (v263 >> 3) + 1;
              v265 = (_OWORD *)((char *)v255 + (void)v261 - v107 - 16);
              float64x2_t v266 = v255 - 2;
              uint64_t v267 = v264 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v268 = *(_OWORD *)v266;
                *(v265 - 1) = *((_OWORD *)v266 - 1);
                _OWORD *v265 = v268;
                v265 -= 2;
                v266 -= 4;
                v267 -= 4;
              }
              while (v267);
              v262 -= v264 & 0x3FFFFFFFFFFFFFFCLL;
              v255 -= v264 & 0x3FFFFFFFFFFFFFFCLL;
              if (v264 != (v264 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_266;
              }
LABEL_267:
              *((void *)v236 + 4) = v262;
              *((void *)v236 + 5) = v256;
              *((void *)v236 + 6) = &v261[8 * v260];
              if (v107) {
                operator delete((void *)v107);
              }
LABEL_269:
              *((void *)v236 + 5) = v256;
              int64x2_t v271 = (double *)*((void *)v236 + 8);
              unint64_t v270 = *((void *)v236 + 9);
              if ((unint64_t)v271 >= v270)
              {
                int64_t v107 = *((void *)v236 + 7);
                uint64_t v273 = ((uint64_t)v271 - v107) >> 3;
                unint64_t v274 = v273 + 1;
                if ((unint64_t)(v273 + 1) >> 61) {
LABEL_834:
                }
                  abort();
                uint64_t v275 = v270 - v107;
                if (v275 >> 2 > v274) {
                  unint64_t v274 = v275 >> 2;
                }
                if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v276 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v276 = v274;
                }
                if (v276)
                {
                  if (v276 >> 61) {
                    goto LABEL_827;
                  }
                  v277 = (char *)operator new(8 * v276);
                }
                else
                {
                  v277 = 0;
                }
                v278 = (double *)&v277[8 * v273];
                double *v278 = v161;
                v272 = v278 + 1;
                if (v271 == (double *)v107)
                {
                  uint64_t v236 = v679;
                }
                else
                {
                  unint64_t v279 = (unint64_t)v271 - v107 - 8;
                  if (v279 < 0x58)
                  {
                    uint64_t v236 = v679;
                    goto LABEL_289;
                  }
                  uint64_t v236 = v679;
                  if ((unint64_t)(v107 - (void)v277) < 0x20) {
                    goto LABEL_840;
                  }
                  uint64_t v280 = (v279 >> 3) + 1;
                  v281 = (_OWORD *)((char *)v271 + (void)v277 - v107 - 16);
                  v282 = v271 - 2;
                  uint64_t v283 = v280 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v284 = *(_OWORD *)v282;
                    *(v281 - 1) = *((_OWORD *)v282 - 1);
                    _OWORD *v281 = v284;
                    v281 -= 2;
                    v282 -= 4;
                    v283 -= 4;
                  }
                  while (v283);
                  v278 -= v280 & 0x3FFFFFFFFFFFFFFCLL;
                  v271 -= v280 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v280 != (v280 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_840:
                    do
                    {
LABEL_289:
                      uint64_t v285 = *((void *)v271-- - 1);
                      *((void *)v278-- - 1) = v285;
                    }
                    while (v271 != (double *)v107);
                  }
                }
                *((void *)v236 + 7) = v278;
                *((void *)v236 + 8) = v272;
                *((void *)v236 + 9) = &v277[8 * v276];
                if (v107) {
                  operator delete((void *)v107);
                }
                goto LABEL_292;
              }
              *int64x2_t v271 = v161;
              v272 = v271 + 1;
LABEL_292:
              *((void *)v236 + 8) = v272;
LABEL_189:
              double v130 = (void *)v706;
              float v109 = v680;
              BOOL v126 = v123;
            }
            uint64_t v138 = v741;
            unint64_t v133 = (double *)v739;
            double v137 = *((double *)v739 + 7 * v741 + 6);
            if (v132 <= v137) {
              break;
            }
            uint64_t v139 = ((char *)v740 - (unsigned char *)v739) / 56;
            if (v741 == v139 - 1) {
              goto LABEL_302;
            }
            double v132 = v742 - v137 + v115;
            double v742 = 0.0;
            uint64_t v140 = 56 * v741 + 104;
            uint64_t v141 = v139 - 2;
            while (1)
            {
              uint64_t v134 = v138 + 1;
              double v137 = *(double *)((char *)v739 + v140);
              if (v132 <= v137)
              {
                uint64_t v741 = v138 + 1;
                goto LABEL_134;
              }
              if (v141 == v138) {
                break;
              }
              double v132 = v132 - v137;
              v140 += 56;
              ++v138;
            }
            uint64_t v741 = v138 + 1;
LABEL_302:
            if (v126 && v704) {
              goto LABEL_433;
            }
            uint64_t v292 = *((void *)v679 + 5);
            if (v292 == *((void *)v679 + 4)) {
              goto LABEL_433;
            }
            uint64_t v293 = 88;
            if (v126) {
              uint64_t v293 = 96;
            }
            unint64_t v294 = *(void *)(v724 + v293);
            v729[0] = v294;
            if (*(_OWORD *)&v743 == 0) {
              goto LABEL_432;
            }
            double v295 = v743.f64[1];
            long double v296 = exp(v743.f64[1] * 6.28318531 + -3.14159265);
            long double v297 = atan(v296) * 114.591559 + -90.0;
            long double v298 = tan(v297 * 0.00872664626 + 0.789761487);
            double v299 = log(v298);
            long double v300 = tan(v297 * 0.00872664626 + 0.78103484);
            double v301 = fabs((v299 - log(v300)) * 0.159154943);
            long double v302 = cos(v297 * 0.034906585) * -559.82 + 111132.92;
            long double v303 = v302 + cos(v297 * 0.0698131701) * 1.175;
            long double v304 = v301 / (v303 + cos(v297 * 0.104719755) * -0.0023);
            double v305 = *(double *)(v294 + 16);
            double v306 = *(double *)(v294 + 24);
            double v307 = ((v743.f64[0] - v305) * (v743.f64[0] - v305) + (v295 - v306) * (v295 - v306)) / (v304 * v304);
            if (v307 > 225.0) {
              goto LABEL_432;
            }
            double v308 = *(double *)(v292 - 8);
            long double v309 = v305 * 6.28318531;
            long double v310 = exp(v306 * 6.28318531 + -3.14159265);
            double v311 = atan(v310) * 2.0 + -1.57079633;
            long double v312 = fmod(v309, 6.28318531);
            double v313 = fmod(v312 + 6.28318531, 6.28318531) + -3.14159265;
            __double2 v314 = __sincos_stret(v311);
            double v315 = 6378137.0 / sqrt(v314.__sinval * v314.__sinval * -0.00669437999 + 1.0);
            double v316 = (v315 + v308) * v314.__cosval;
            __double2 v317 = __sincos_stret(v313);
            v747[0] = v316 * v317.__cosval;
            v747[1] = v316 * v317.__sinval;
            v747[2] = (v308 + v315 * 0.99330562) * v314.__sinval;
            v130[29] = v130[28];
            v318 = (double *)v130[31];
            v130[32] = v318;
            v319 = *a3;
            v320 = a3[1];
            if (*a3 != v320)
            {
              do
              {
                uint64_t v321 = *v319;
                v319 += 2;
                md::mun::MuninMetadata::neighborsWithinRadius(v321, v747, (uint64_t)v697, v696, 15.0);
              }
              while (v319 != v320);
              v318 = (double *)v130[32];
            }
            unint64_t v322 = v130[33];
            if ((unint64_t)v318 < v322)
            {
              double *v318 = v307;
              v323 = v318 + 1;
              goto LABEL_387;
            }
            v364 = *v696;
            uint64_t v365 = (char *)v318 - (char *)*v696;
            unint64_t v366 = (v365 >> 3) + 1;
            if (v366 >> 61) {
              goto LABEL_835;
            }
            uint64_t v367 = v322 - (void)v364;
            if (v367 >> 2 > v366) {
              unint64_t v366 = v367 >> 2;
            }
            if ((unint64_t)v367 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v368 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v368 = v366;
            }
            if (v368)
            {
              if (!(v368 >> 61))
              {
                v369 = operator new(8 * v368);
                goto LABEL_378;
              }
LABEL_827:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v369 = 0;
LABEL_378:
            v370 = (double *)&v369[8 * (v365 >> 3)];
            double *v370 = v307;
            v323 = v370 + 1;
            if (v318 == v364)
            {
              double v130 = (void *)v706;
            }
            else
            {
              unint64_t v371 = (char *)(v318 - 1) - (char *)v364;
              if (v371 < 0x58 || (unint64_t)((char *)v318 - &v369[v365]) < 0x20)
              {
                v372 = v318;
                double v130 = (void *)v706;
                goto LABEL_382;
              }
              uint64_t v414 = (v371 >> 3) + 1;
              v372 = &v318[-(v414 & 0x3FFFFFFFFFFFFFFCLL)];
              v415 = &v369[v365 - 16];
              v416 = v318 - 2;
              uint64_t v417 = v414 & 0x3FFFFFFFFFFFFFFCLL;
              double v130 = (void *)v706;
              do
              {
                long long v418 = *(_OWORD *)v416;
                *(v415 - 1) = *((_OWORD *)v416 - 1);
                _OWORD *v415 = v418;
                v415 -= 2;
                v416 -= 4;
                v417 -= 4;
              }
              while (v417);
              v370 -= v414 & 0x3FFFFFFFFFFFFFFCLL;
              if (v414 != (v414 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_382:
                  uint64_t v373 = *((void *)v372-- - 1);
                  *((void *)v370-- - 1) = v373;
                }
                while (v372 != v364);
              }
            }
            v130[31] = v370;
            v130[32] = v323;
            v130[33] = &v369[8 * v368];
            if (v364) {
              operator delete(v364);
            }
LABEL_387:
            v130[32] = v323;
            v130[23] = v130[22];
            int64_t v722 = 0;
            int64_t v723 = 0;
            int64_t v721 = 0;
            v374 = (double *)v130[31];
            uint64_t v375 = (char *)v323 - (char *)v374;
            if (v323 != v374)
            {
              if ((v375 & 0x8000000000000000) == 0)
              {
                int64_t v107 = (int64_t)operator new((char *)v323 - (char *)v374);
                int64_t v721 = v107;
                int64_t v723 = v107 + 8 * (v375 >> 3);
                memcpy((void *)v107, v374, (char *)v323 - (char *)v374);
                int64_t v722 = v107 + 8 * (v375 >> 3);
                double v130 = (void *)v706;
                goto LABEL_391;
              }
LABEL_835:
              abort();
            }
            int64_t v107 = 0;
LABEL_391:
            v730 = (void (**)(void **))&unk_1EF574D78;
            v733 = (void **)&v730;
            md::MuninLabelingUtils::computeWeightsForWeightedAverage(&v721, (uint64_t)&v730, v695);
            if (v733 == (void **)&v730)
            {
              v730[4]((void **)&v730);
            }
            else if (v733)
            {
              (*((void (**)(void))*v733 + 5))();
            }
            if (v107)
            {
              int64_t v722 = v107;
              operator delete((void *)v107);
            }
            uint64_t v376 = v130[28];
            uint64_t v377 = v130[29] - v376;
            if (v377)
            {
              unint64_t v378 = v377 >> 3;
              v379 = *v695;
              if (v378 <= 1) {
                unint64_t v378 = 1;
              }
              if (v378 <= 1)
              {
                unint64_t v380 = 0;
                double v381 = 0.0;
                goto LABEL_406;
              }
              unint64_t v380 = v378 & 0xFFFFFFFFFFFFFFFELL;
              v382 = &v379->f64[1];
              uint64_t v383 = v376 + 8;
              double v384 = 0.0;
              unint64_t v385 = v378 & 0xFFFFFFFFFFFFFFFELL;
              double v386 = 0.0;
              do
              {
                double v384 = v384 + *(v382 - 1) * *(double *)(*(void *)(v383 - 8) + 72);
                double v386 = v386 + *v382 * *(double *)(*(void *)v383 + 72);
                v382 += 2;
                v383 += 16;
                v385 -= 2;
              }
              while (v385);
              double v381 = v386 + v384;
              if (v378 != v380)
              {
LABEL_406:
                unint64_t v387 = v378 - v380;
                uint64_t v388 = v380;
                v389 = &v379->f64[v388];
                v390 = (uint64_t *)(v376 + v388 * 8);
                do
                {
                  uint64_t v391 = *v390++;
                  double v392 = *(double *)(v391 + 72);
                  double v393 = *v389++;
                  double v381 = v381 + v393 * v392;
                  --v387;
                }
                while (v387);
              }
            }
            else
            {
              double v381 = 0.0;
            }
            double v394 = *(double *)(*((void *)v679 + 5) - 8);
            double v395 = *(double *)(v130[23] - 8);
            *((double *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v694, v294, v729)+ 3) = v381 + v395 * v394;
            int8x8_t v396 = (int8x8_t)v130[35];
            if (!*(void *)&v396)
            {
              char v404 = 0;
              goto LABEL_412;
            }
            unint64_t v397 = 0x9DDFEA08EB382D69 * (((8 * v294) + 8) ^ HIDWORD(v294));
            unint64_t v398 = 0x9DDFEA08EB382D69 * (HIDWORD(v294) ^ (v397 >> 47) ^ v397);
            unint64_t v399 = 0x9DDFEA08EB382D69 * (v398 ^ (v398 >> 47));
            uint8x8_t v400 = (uint8x8_t)vcnt_s8(v396);
            v400.i16[0] = vaddlv_u8(v400);
            if (v400.u32[0] > 1uLL)
            {
              unint64_t v401 = v399;
              v402 = v683;
              v403 = v720;
              if (v399 >= *(void *)&v396) {
                unint64_t v401 = v399 % *(void *)&v396;
              }
            }
            else
            {
              unint64_t v401 = v399 & (*(void *)&v396 - 1);
              v402 = v683;
              v403 = v720;
            }
            v405 = *(void **)(*(void *)v403 + 8 * v401);
            if (!v405 || (v406 = (void *)*v405) == 0)
            {
LABEL_430:
              char v404 = 0;
              goto LABEL_431;
            }
            if (v400.u32[0] < 2uLL)
            {
              uint64_t v407 = *(void *)&v396 - 1;
              while (1)
              {
                uint64_t v409 = v406[1];
                if (v399 == v409)
                {
                  if (v406[2] == v294) {
                    goto LABEL_449;
                  }
                }
                else if ((v409 & v407) != v401)
                {
                  goto LABEL_430;
                }
                v406 = (void *)*v406;
                if (!v406) {
                  goto LABEL_430;
                }
              }
            }
            while (2)
            {
              unint64_t v408 = v406[1];
              if (v399 != v408)
              {
                if (v408 >= *(void *)&v396) {
                  v408 %= *(void *)&v396;
                }
                if (v408 != v401) {
                  goto LABEL_430;
                }
                goto LABEL_420;
              }
              if (v406[2] != v294)
              {
LABEL_420:
                v406 = (void *)*v406;
                if (!v406) {
                  goto LABEL_430;
                }
                continue;
              }
              break;
            }
LABEL_449:
            char v404 = *((unsigned char *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v403, v294, v729)+ 24);
LABEL_412:
            v402 = v683;
LABEL_431:
            *((unsigned char *)std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(v402, v294, v729)+ 24) = v404;
            unint64_t v133 = (double *)v739;
LABEL_432:
            double v115 = 15.0;
LABEL_433:
            if (v133)
            {
              v410 = v740;
              v411 = v133;
              if (v740 != v133)
              {
                do
                {
                  v412 = (void *)*((void *)v410 - 4);
                  if (v412)
                  {
                    *((void *)v410 - 3) = v412;
                    operator delete(v412);
                  }
                  v413 = (void *)*((void *)v410 - 7);
                  if (v413)
                  {
                    *((void *)v410 - 6) = v413;
                    operator delete(v413);
                  }
                  v410 -= 7;
                }
                while (v410 != v133);
                v411 = v739;
              }
              v740 = v133;
              operator delete(v411);
            }
            if (v736)
            {
              v737 = v736;
              operator delete(v736);
            }
LABEL_107:
            ++v116;
            uint64_t v4 = v706;
            if (v116 == v109) {
              goto LABEL_450;
            }
          }
          uint64_t v134 = v741;
          goto LABEL_134;
        }
      }
LABEL_450:
      if (v108) {
        operator delete(v108);
      }
      for (uint64_t i = *(void **)(v4 + 368); i; uint64_t i = (void *)*i)
        std::__hash_table<md::ComposedRoadEdge const*,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,std::allocator<md::ComposedRoadEdge const*>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,md::ComposedRoadEdge const* const&>(v688, i[2], i[2]);
      unint64_t prime = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 336) / *(float *)(v4 + 112));
      if (prime == 1)
      {
        unint64_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        unint64_t prime = std::__next_prime(prime);
      }
      int8x8_t v421 = *(int8x8_t *)(v4 + 88);
      if (prime > *(void *)&v421) {
        goto LABEL_459;
      }
      if (prime < *(void *)&v421)
      {
        unint64_t v422 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 104) / *(float *)(v4 + 112));
        if (*(void *)&v421 < 3uLL
          || (uint8x8_t v423 = (uint8x8_t)vcnt_s8(v421), v423.i16[0] = vaddlv_u8(v423), v423.u32[0] > 1uLL))
        {
          unint64_t v422 = std::__next_prime(v422);
        }
        else
        {
          uint64_t v424 = 1 << -(char)__clz(v422 - 1);
          if (v422 >= 2) {
            unint64_t v422 = v424;
          }
        }
        if (prime <= v422) {
          unint64_t prime = v422;
        }
        if (prime < *(void *)&v421) {
LABEL_459:
        }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v689, prime);
      }
      v425 = *(void **)(v4 + 328);
      if (v425)
      {
        v426 = (int64_t *)(v706 + 96);
        unint64_t v427 = *(void *)(v706 + 88);
        do
        {
          uint64_t v428 = v425[3];
          unint64_t v429 = v425[2];
          unint64_t v430 = 0x9DDFEA08EB382D69 * (((8 * v429) + 8) ^ HIDWORD(v429));
          unint64_t v431 = 0x9DDFEA08EB382D69 * (HIDWORD(v429) ^ (v430 >> 47) ^ v430);
          unint64_t v432 = 0x9DDFEA08EB382D69 * (v431 ^ (v431 >> 47));
          if (v427)
          {
            uint8x8_t v433 = (uint8x8_t)vcnt_s8((int8x8_t)v427);
            v433.i16[0] = vaddlv_u8(v433);
            if (v433.u32[0] > 1uLL)
            {
              unint64_t prime = 0x9DDFEA08EB382D69 * (v431 ^ (v431 >> 47));
              if (v432 >= v427) {
                unint64_t prime = v432 % v427;
              }
            }
            else
            {
              unint64_t prime = v432 & (v427 - 1);
            }
            v434 = *(int64_t **)(*v689 + 8 * prime);
            if (v434)
            {
              int64_t v107 = *v434;
              if (*v434)
              {
                if (v433.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v436 = *(void *)(v107 + 8);
                    if (v436 == v432)
                    {
                      if (*(void *)(v107 + 16) == v429) {
                        goto LABEL_530;
                      }
                    }
                    else if ((v436 & (v427 - 1)) != prime)
                    {
                      goto LABEL_492;
                    }
                    int64_t v107 = *(void *)v107;
                    if (!v107) {
                      goto LABEL_492;
                    }
                  }
                }
                do
                {
                  unint64_t v435 = *(void *)(v107 + 8);
                  if (v435 == v432)
                  {
                    if (*(void *)(v107 + 16) == v429) {
                      goto LABEL_530;
                    }
                  }
                  else
                  {
                    if (v435 >= v427) {
                      v435 %= v427;
                    }
                    if (v435 != prime) {
                      break;
                    }
                  }
                  int64_t v107 = *(void *)v107;
                }
                while (v107);
              }
            }
          }
LABEL_492:
          int64_t v107 = (int64_t)operator new(0x20uLL);
          *(void *)int64_t v107 = 0;
          *(void *)(v107 + 8) = v432;
          *(void *)(v107 + 16) = v425[2];
          *(void *)(v107 + 24) = 0;
          float v437 = (float)(unint64_t)(*(void *)(v706 + 104) + 1);
          float v438 = *(float *)(v706 + 112);
          if (!v427 || (float)(v438 * (float)v427) < v437)
          {
            BOOL v439 = (v427 & (v427 - 1)) != 0;
            if (v427 < 3) {
              BOOL v439 = 1;
            }
            unint64_t v440 = v439 | (2 * v427);
            unint64_t v441 = vcvtps_u32_f32(v437 / v438);
            if (v440 <= v441) {
              size_t v442 = v441;
            }
            else {
              size_t v442 = v440;
            }
            if (v442 == 1)
            {
              size_t v442 = 2;
            }
            else if ((v442 & (v442 - 1)) != 0)
            {
              size_t v442 = std::__next_prime(v442);
              unint64_t v427 = *(void *)(v706 + 88);
            }
            if (v442 > v427) {
              goto LABEL_504;
            }
            if (v442 < v427)
            {
              unint64_t v443 = vcvtps_u32_f32((float)*(unint64_t *)(v706 + 104) / *(float *)(v706 + 112));
              if (v427 < 3
                || (uint8x8_t v444 = (uint8x8_t)vcnt_s8((int8x8_t)v427), v444.i16[0] = vaddlv_u8(v444), v444.u32[0] > 1uLL))
              {
                unint64_t v443 = std::__next_prime(v443);
              }
              else
              {
                uint64_t v445 = 1 << -(char)__clz(v443 - 1);
                if (v443 >= 2) {
                  unint64_t v443 = v445;
                }
              }
              if (v442 <= v443) {
                size_t v442 = v443;
              }
              if (v442 < v427) {
LABEL_504:
              }
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v689, v442);
            }
            unint64_t v427 = *(void *)(v706 + 88);
            if ((v427 & (v427 - 1)) != 0)
            {
              if (v432 >= v427) {
                unint64_t prime = v432 % v427;
              }
              else {
                unint64_t prime = v432;
              }
            }
            else
            {
              unint64_t prime = (v427 - 1) & v432;
            }
          }
          uint64_t v446 = *v689;
          v447 = *(int64_t **)(*v689 + 8 * prime);
          if (v447)
          {
            *(void *)int64_t v107 = *v447;
          }
          else
          {
            *(void *)int64_t v107 = *v426;
            int64_t *v426 = v107;
            *(void *)(v446 + 8 * prime) = v426;
            if (!*(void *)v107) {
              goto LABEL_529;
            }
            unint64_t v448 = *(void *)(*(void *)v107 + 8);
            if ((v427 & (v427 - 1)) != 0)
            {
              if (v448 >= v427) {
                v448 %= v427;
              }
            }
            else
            {
              v448 &= v427 - 1;
            }
            v447 = (int64_t *)(*v689 + 8 * v448);
          }
          int64_t *v447 = v107;
LABEL_529:
          ++*(void *)(v706 + 104);
LABEL_530:
          *(void *)(v107 + 24) = v428;
          v425 = (void *)*v425;
        }
        while (v425);
      }
      uint64_t v449 = v706;
      v450 = *(uint64_t **)(v706 + 408);
      if (v450)
      {
        v451 = (char *)(v706 + 56);
        while (1)
        {
          unint64_t v452 = v450[2];
          if (v450[4] == v450[5] && v450[10] == v450[11] && v450[13] == v450[14]) {
            goto LABEL_534;
          }
          unint64_t v453 = 0x9DDFEA08EB382D69 * (((8 * v452) + 8) ^ HIDWORD(v452));
          unint64_t v454 = 0x9DDFEA08EB382D69 * (HIDWORD(v452) ^ (v453 >> 47) ^ v453);
          unint64_t v455 = 0x9DDFEA08EB382D69 * (v454 ^ (v454 >> 47));
          unint64_t v456 = *(void *)(v449 + 48);
          if (v456)
          {
            uint8x8_t v457 = (uint8x8_t)vcnt_s8((int8x8_t)v456);
            v457.i16[0] = vaddlv_u8(v457);
            if (v457.u32[0] > 1uLL)
            {
              int64_t v107 = 0x9DDFEA08EB382D69 * (v454 ^ (v454 >> 47));
              if (v455 >= v456) {
                int64_t v107 = v455 % v456;
              }
            }
            else
            {
              int64_t v107 = v455 & (v456 - 1);
            }
            v458 = *(uint64_t ***)(*v691 + 8 * v107);
            if (v458)
            {
              if (*v458)
              {
                v459 = *v458;
                v460 = *v458;
                if (v457.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v462 = v459[1];
                    if (v462 == v455)
                    {
                      if (v459[2] == v452)
                      {
                        v589 = v459;
                        goto LABEL_619;
                      }
                    }
                    else if ((v462 & (v456 - 1)) != v107)
                    {
                      goto LABEL_559;
                    }
                    v459 = (uint64_t *)*v459;
                    if (!v459) {
                      goto LABEL_559;
                    }
                  }
                }
                do
                {
                  unint64_t v461 = v460[1];
                  if (v461 == v455)
                  {
                    if (v460[2] == v452)
                    {
                      v589 = v460;
                      goto LABEL_619;
                    }
                  }
                  else
                  {
                    if (v461 >= v456) {
                      v461 %= v456;
                    }
                    if (v461 != v107) {
                      break;
                    }
                  }
                  v460 = (uint64_t *)*v460;
                }
                while (v460);
              }
            }
          }
LABEL_559:
          v463 = (char *)operator new(0x88uLL);
          v734 = v463;
          v735 = v451;
          *(void *)v463 = 0;
          *((void *)v463 + 1) = v455;
          *((void *)v463 + 2) = v452;
          *(_OWORD *)(v463 + 24) = 0u;
          *(_OWORD *)(v463 + 40) = 0u;
          *(_OWORD *)(v463 + 56) = 0u;
          *(_OWORD *)(v463 + 72) = 0u;
          *(_OWORD *)(v463 + 88) = 0u;
          *(_OWORD *)(v463 + 104) = 0u;
          *(_OWORD *)(v463 + 120) = 0u;
          LOBYTE(v736) = 1;
          float v464 = (float)(unint64_t)(*(void *)(v449 + 64) + 1);
          float v465 = *(float *)(v449 + 72);
          v589 = (uint64_t *)v463;
          if (!v456 || (float)(v465 * (float)v456) < v464) {
            break;
          }
LABEL_609:
          v486 = (void *)*v691;
          v487 = *(uint64_t **)(*v691 + 8 * v107);
          if (v487)
          {
            uint64_t *v589 = *v487;
LABEL_617:
            uint64_t *v487 = (uint64_t)v589;
            goto LABEL_618;
          }
          uint64_t *v589 = *(void *)v451;
          *(void *)v451 = v589;
          v486[v107] = v451;
          if (*v589)
          {
            unint64_t v488 = *(void *)(*v589 + 8);
            if ((v456 & (v456 - 1)) != 0)
            {
              if (v488 >= v456) {
                v488 %= v456;
              }
            }
            else
            {
              v488 &= v456 - 1;
            }
            v487 = (uint64_t *)(*v691 + 8 * v488);
            goto LABEL_617;
          }
LABEL_618:
          ++*(void *)(v449 + 64);
LABEL_619:
          *((unsigned char *)v589 + 24) = *((unsigned char *)v450 + 24);
          if (v589 != v450)
          {
            std::vector<gm::Range<double>>::__assign_with_size[abi:nn180100]<gm::Range<double>*,gm::Range<double>*>(v589 + 10, (char *)v450[10], (char *)v450[11], (v450[11] - v450[10]) >> 4);
            std::vector<gm::Range<double>>::__assign_with_size[abi:nn180100]<gm::Range<double>*,gm::Range<double>*>(v589 + 13, (char *)v450[13], (char *)v450[14], (v450[14] - v450[13]) >> 4);
          }
          v705 = v589;
          uint64_t v489 = v450[5] - v450[4];
          if (v489)
          {
            unint64_t v490 = 0;
            unint64_t v491 = v489 >> 3;
            unint64_t v702 = (unint64_t)(double)(((v489 >> 3) - 1) / 3uLL);
            float v492 = (float)(unint64_t)(v489 >> 3);
            uint64_t v711 = v489 >> 3;
            v712 = v450;
            while (1)
            {
              unint64_t v495 = 0;
              v589[8] = v589[7];
              v589[5] = v589[4];
              unint64_t v496 = vcvtms_u32_f32((float)(v492 / (float)((float)v490 + 1.0)) + 1.0);
              *(void *)&long long v3 = 0;
              unint64_t v497 = v496;
              unint64_t v713 = v496;
              unint64_t v714 = v490;
              do
              {
                if (v491 >= v497) {
                  unint64_t v498 = v497;
                }
                else {
                  unint64_t v498 = v491;
                }
                if (v495) {
                  uint64_t v499 = v495 * v496 - 1;
                }
                else {
                  uint64_t v499 = 0;
                }
                unint64_t v500 = v495 + 1;
                if (v491 >= (v495 + 1) * v496) {
                  uint64_t v501 = (v495 + 1) * v496;
                }
                else {
                  uint64_t v501 = v491;
                }
                uint64_t v502 = v450[7];
                uint64_t v503 = 8 * v499;
                v504 = (void *)(v502 + 8 * v499);
                uint64_t v505 = 8 * v501;
                unint64_t v506 = 8 * v501 - 8 * v499;
                if ((uint64_t)v506 < 8) {
                  goto LABEL_631;
                }
                unint64_t v715 = v498;
                unint64_t v716 = v495;
                uint64_t v507 = v450[4];
                uint64_t v508 = v501 - 1;
                v510 = (void *)v589[5];
                unint64_t v509 = v589[6];
                long long v719 = v3;
                uint64_t v717 = v501;
                uint64_t v718 = 8 * v499;
                if ((unint64_t)v510 >= v509)
                {
                  int64_t v107 = v589[4];
                  uint64_t v513 = ((uint64_t)v510 - v107) >> 4;
                  unint64_t v514 = v513 + 1;
                  if ((unint64_t)(v513 + 1) >> 60) {
                    abort();
                  }
                  uint64_t v515 = v509 - v107;
                  if (v515 >> 3 > v514) {
                    unint64_t v514 = v515 >> 3;
                  }
                  if ((unint64_t)v515 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v516 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v516 = v514;
                  }
                  if (v516 >> 60) {
                    goto LABEL_827;
                  }
                  uint64_t v707 = v499;
                  uint64_t v708 = v507;
                  uint64_t v517 = v502;
                  unint64_t v709 = v500;
                  v518 = (char *)operator new(16 * v516);
                  uint64_t v502 = v517;
                  uint64_t v519 = *(void *)(v517 + 8 * v508);
                  v520 = &v518[16 * v513];
                  *(void *)v520 = *v504;
                  *((void *)v520 + 1) = v519;
                  if (v510 == (void *)v107)
                  {
                    v522 = &v518[16 * v513];
                    v589 = v705;
                  }
                  else
                  {
                    v521 = &v518[16 * v513];
                    v589 = v705;
                    do
                    {
                      v522 = v521 - 16;
                      *((_OWORD *)v521 - 1) = *((_OWORD *)v510 - 1);
                      v510 -= 2;
                      v521 -= 16;
                    }
                    while (v510 != (void *)v107);
                  }
                  v512 = v520 + 16;
                  v589[4] = (uint64_t)v522;
                  v589[5] = (uint64_t)(v520 + 16);
                  v589[6] = (uint64_t)&v518[16 * v516];
                  if (v107)
                  {
                    operator delete((void *)v107);
                    uint64_t v502 = v517;
                  }
                  unint64_t v491 = v711;
                  v450 = v712;
                  unint64_t v496 = v713;
                  unint64_t v490 = v714;
                  uint64_t v507 = v708;
                  unint64_t v500 = v709;
                  long long v3 = v719;
                  uint64_t v501 = v717;
                  uint64_t v503 = v718;
                  uint64_t v499 = v707;
                }
                else
                {
                  uint64_t v511 = *(void *)(v502 + 8 * v508);
                  void *v510 = *v504;
                  v510[1] = v511;
                  v512 = v510 + 2;
                }
                v589[5] = (uint64_t)v512;
                unint64_t v523 = v506 >> 3;
                double v524 = 0.0;
                if (v501 >= v499) {
                  unint64_t v525 = v506 >> 3;
                }
                else {
                  unint64_t v525 = 0;
                }
                if (v501 >= v499 && (v505 - v503) >> 3 != v525)
                {
LABEL_664:
                  double v526 = 0.0;
                  goto LABEL_676;
                }
                if (v525 >= 2)
                {
                  if (v525 <= 3)
                  {
                    uint64_t v527 = 0;
                    double v528 = 0.0;
                    double v529 = 0.0;
                    double v530 = 0.0;
                    double v531 = 0.0;
                    goto LABEL_673;
                  }
                  uint64_t v527 = v525 & 0x1FFFFFFFFFFFFFFCLL;
                  float64x2_t v532 = 0uLL;
                  float64x2_t v533 = 0uLL;
                  v534 = (float64x2_t *)(v507 + v503 + 16);
                  v535 = (float64x2_t *)(v502 + v503 + 16);
                  uint64_t v536 = v525 & 0x1FFFFFFFFFFFFFFCLL;
                  float64x2_t v537 = 0uLL;
                  float64x2_t v538 = 0uLL;
                  float64x2_t v539 = 0uLL;
                  float64x2_t v540 = 0uLL;
                  float64x2_t v541 = 0uLL;
                  float64x2_t v542 = 0uLL;
                  do
                  {
                    float64x2_t v543 = v535[-1];
                    float64x2_t v541 = vaddq_f64(v543, v541);
                    float64x2_t v542 = vaddq_f64(*v535, v542);
                    float64x2_t v544 = v534[-1];
                    float64x2_t v539 = vaddq_f64(v544, v539);
                    float64x2_t v540 = vaddq_f64(*v534, v540);
                    float64x2_t v532 = vmlaq_f64(v532, v543, v544);
                    float64x2_t v533 = vmlaq_f64(v533, *v535, *v534);
                    float64x2_t v537 = vmlaq_f64(v537, v543, v543);
                    float64x2_t v538 = vmlaq_f64(v538, *v535, *v535);
                    v534 += 2;
                    v535 += 2;
                    v536 -= 4;
                  }
                  while (v536);
                  double v531 = vaddvq_f64(vaddq_f64(v542, v541));
                  double v530 = vaddvq_f64(vaddq_f64(v540, v539));
                  double v529 = vaddvq_f64(vaddq_f64(v538, v537));
                  double v528 = vaddvq_f64(vaddq_f64(v533, v532));
                  if (v525 != v527)
                  {
LABEL_673:
                    unint64_t v545 = v525 - v527;
                    uint64_t v546 = v503 + 8 * v527;
                    v547 = (double *)(v507 + v546);
                    v548 = (double *)(v502 + v546);
                    do
                    {
                      double v549 = *v548++;
                      double v550 = v549;
                      double v531 = v549 + v531;
                      double v551 = *v547++;
                      double v530 = v551 + v530;
                      double v528 = v528 + v551 * v550;
                      double v529 = v529 + v550 * v550;
                      --v545;
                    }
                    while (v545);
                  }
                  double v524 = -(v530 * v531 - v528 * (double)v525) / -(v531 * v531 - v529 * (double)v525);
                  double v526 = (v530 - v524 * v531) / (double)v525;
                  goto LABEL_676;
                }
                if (v501 < v499) {
                  goto LABEL_664;
                }
                double v526 = *(double *)(v507 + v503);
LABEL_676:
                v553 = (double *)v589[8];
                unint64_t v552 = v589[9];
                if ((unint64_t)v553 >= v552)
                {
                  int64_t v107 = v589[7];
                  uint64_t v555 = ((uint64_t)v553 - v107) >> 4;
                  unint64_t v556 = v555 + 1;
                  if ((unint64_t)(v555 + 1) >> 60) {
                    abort();
                  }
                  uint64_t v557 = v552 - v107;
                  if (v557 >> 3 > v556) {
                    unint64_t v556 = v557 >> 3;
                  }
                  if ((unint64_t)v557 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v558 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v558 = v556;
                  }
                  if (v558 >> 60) {
                    goto LABEL_827;
                  }
                  unint64_t v710 = v506 >> 3;
                  uint64_t v559 = v507;
                  uint64_t v560 = v502;
                  unint64_t v561 = v500;
                  v562 = (char *)operator new(16 * v558);
                  v563 = (double *)&v562[16 * v555];
                  double *v563 = v524;
                  v563[1] = v526;
                  if (v553 == (double *)v107)
                  {
                    v565 = &v562[16 * v555];
                  }
                  else
                  {
                    v564 = &v562[16 * v555];
                    do
                    {
                      v565 = v564 - 16;
                      *((_OWORD *)v564 - 1) = *((_OWORD *)v553 - 1);
                      v553 -= 2;
                      v564 -= 16;
                    }
                    while (v553 != (double *)v107);
                  }
                  v554 = v563 + 2;
                  v589[7] = (uint64_t)v565;
                  v589[8] = (uint64_t)(v563 + 2);
                  v589[9] = (uint64_t)&v562[16 * v558];
                  if (v107) {
                    operator delete((void *)v107);
                  }
                  uint64_t v449 = v706;
                  unint64_t v491 = v711;
                  v450 = v712;
                  unint64_t v496 = v713;
                  unint64_t v490 = v714;
                  unint64_t v500 = v561;
                  long long v3 = v719;
                  uint64_t v502 = v560;
                  uint64_t v507 = v559;
                  uint64_t v501 = v717;
                  uint64_t v503 = v718;
                  unint64_t v523 = v710;
                }
                else
                {
                  double *v553 = v524;
                  v553[1] = v526;
                  v554 = v553 + 2;
                  uint64_t v449 = v706;
                }
                v589[8] = (uint64_t)v554;
                if (v501 >= v499)
                {
                  uint64_t v566 = 8 * v715;
                  v567 = (double *)(v589[7] + 16 * v716);
                  uint64_t v568 = *(uint64_t *)v567;
                  uint64_t v569 = *((uint64_t *)v567 + 1);
                  if (v523 <= 1) {
                    unint64_t v570 = 1;
                  }
                  else {
                    unint64_t v570 = v523;
                  }
                  if (v570 <= 3)
                  {
                    uint64_t v571 = 0;
LABEL_704:
                    unint64_t v580 = (unint64_t)(v566 - v503) >> 3;
                    if (v580 <= 1) {
                      unint64_t v580 = 1;
                    }
                    unint64_t v581 = v571 - v580;
                    uint64_t v582 = v503 + 8 * v571;
                    v583 = (double *)(v507 + v582);
                    v584 = (double *)(v502 + v582);
                    do
                    {
                      double v585 = *v584++;
                      double v586 = *(double *)&v569 + *(double *)&v568 * v585;
                      double v587 = *v583++;
                      *(double *)&long long v3 = fmax(vabdd_f64(v586, v587), *(double *)&v3);
                      BOOL v494 = __CFADD__(v581++, 1);
                    }
                    while (!v494);
                    goto LABEL_631;
                  }
                  uint64_t v571 = v570 & 0x1FFFFFFFFFFFFFFCLL;
                  float64x2_t v572 = (float64x2_t)vdupq_lane_s64(v3, 0);
                  float64x2_t v573 = (float64x2_t)vdupq_lane_s64(v568, 0);
                  float64x2_t v574 = (float64x2_t)vdupq_lane_s64(v569, 0);
                  unint64_t v575 = (unint64_t)(v566 - v503) >> 3;
                  if (v575 <= 1) {
                    unint64_t v575 = 1;
                  }
                  uint64_t v576 = v575 & 0x1FFFFFFFFFFFFFFCLL;
                  v577 = (float64x2_t *)(v507 + v503 + 16);
                  v578 = (float64x2_t *)(v502 + v503 + 16);
                  float64x2_t v579 = v572;
                  do
                  {
                    float64x2_t v572 = vmaxnmq_f64(vabdq_f64(vmlaq_f64(v574, v578[-1], v573), v577[-1]), v572);
                    float64x2_t v579 = vmaxnmq_f64(vabdq_f64(vmlaq_f64(v574, *v578, v573), *v577), v579);
                    v577 += 2;
                    v578 += 2;
                    v576 -= 4;
                  }
                  while (v576);
                  *(double *)&long long v3 = vmaxnmvq_f64(vmaxnmq_f64(v572, v579));
                  if (v570 != v571) {
                    goto LABEL_704;
                  }
                }
LABEL_631:
                v497 += v496;
                unint64_t v495 = v500;
              }
              while (v500 <= v490);
              BOOL v494 = *(double *)&v3 <= 1.5 && *(double *)&v3 != -1.79769313e308 || v490++ >= v702;
              if (v494)
              {
                v589[16] = v3;
                v451 = (char *)(v706 + 56);
                break;
              }
            }
          }
LABEL_534:
          v450 = (uint64_t *)*v450;
          if (!v450) {
            goto LABEL_719;
          }
        }
        BOOL v466 = (v456 & (v456 - 1)) != 0;
        if (v456 < 3) {
          BOOL v466 = 1;
        }
        unint64_t v467 = v466 | (2 * v456);
        unint64_t v468 = vcvtps_u32_f32(v464 / v465);
        if (v467 <= v468) {
          size_t v469 = v468;
        }
        else {
          size_t v469 = v467;
        }
        if (v469 == 1)
        {
          size_t v469 = 2;
        }
        else if ((v469 & (v469 - 1)) != 0)
        {
          size_t v469 = std::__next_prime(v469);
          unint64_t v456 = *(void *)(v449 + 48);
        }
        if (v469 <= v456)
        {
          if (v469 >= v456) {
            goto LABEL_596;
          }
          unint64_t v480 = vcvtps_u32_f32((float)*(unint64_t *)(v449 + 64) / *(float *)(v449 + 72));
          if (v456 < 3
            || (uint8x8_t v481 = (uint8x8_t)vcnt_s8((int8x8_t)v456), v481.i16[0] = vaddlv_u8(v481), v481.u32[0] > 1uLL))
          {
            unint64_t v480 = std::__next_prime(v480);
          }
          else
          {
            uint64_t v482 = 1 << -(char)__clz(v480 - 1);
            if (v480 >= 2) {
              unint64_t v480 = v482;
            }
          }
          if (v469 <= v480) {
            size_t v469 = v480;
          }
          if (v469 >= v456)
          {
            unint64_t v456 = *(void *)(v449 + 48);
LABEL_596:
            if ((v456 & (v456 - 1)) != 0)
            {
              if (v455 >= v456) {
                int64_t v107 = v455 % v456;
              }
              else {
                int64_t v107 = v455;
              }
            }
            else
            {
              int64_t v107 = (v456 - 1) & v455;
            }
            goto LABEL_609;
          }
          if (!v469)
          {
            v588 = (void *)*v691;
            void *v691 = 0;
            if (v588) {
              operator delete(v588);
            }
            unint64_t v456 = 0;
            *(void *)(v449 + 48) = 0;
            goto LABEL_596;
          }
        }
        if (v469 >> 61) {
          goto LABEL_827;
        }
        v470 = operator new(8 * v469);
        v471 = (void *)*v691;
        void *v691 = v470;
        if (v471) {
          operator delete(v471);
        }
        uint64_t v472 = 0;
        *(void *)(v449 + 48) = v469;
        do
          *(void *)(*v691 + 8 * v472++) = 0;
        while (v469 != v472);
        v473 = *(void **)v451;
        if (!*(void *)v451)
        {
LABEL_595:
          unint64_t v456 = v469;
          goto LABEL_596;
        }
        size_t v474 = v473[1];
        size_t v475 = v469 - 1;
        if ((v469 & (v469 - 1)) == 0)
        {
          size_t v476 = v474 & v475;
          *(void *)(*v691 + 8 * v476) = v451;
          for (unint64_t j = (void *)*v473; *v473; unint64_t j = (void *)*v473)
          {
            size_t v478 = j[1] & v475;
            if (v478 == v476)
            {
              v473 = j;
            }
            else if (*(void *)(*v691 + 8 * v478))
            {
              void *v473 = *j;
              uint64_t v479 = 8 * v478;
              void *j = **(void **)(*v691 + v479);
              **(void **)(*v691 + v479) = j;
            }
            else
            {
              *(void *)(*v691 + 8 * v478) = v473;
              v473 = j;
              size_t v476 = v478;
            }
          }
          goto LABEL_595;
        }
        if (v474 >= v469) {
          v474 %= v469;
        }
        *(void *)(*v691 + 8 * v474) = v451;
        v483 = (void *)*v473;
        if (!*v473) {
          goto LABEL_595;
        }
        while (1)
        {
          size_t v485 = v483[1];
          if (v485 >= v469) {
            v485 %= v469;
          }
          if (v485 != v474)
          {
            if (!*(void *)(*v691 + 8 * v485))
            {
              *(void *)(*v691 + 8 * v485) = v473;
              goto LABEL_600;
            }
            void *v473 = *v483;
            uint64_t v484 = 8 * v485;
            void *v483 = **(void **)(*v691 + v484);
            **(void **)(*v691 + v484) = v483;
            v483 = v473;
          }
          size_t v485 = v474;
LABEL_600:
          v473 = v483;
          v483 = (void *)*v483;
          size_t v474 = v485;
          if (!v483) {
            goto LABEL_595;
          }
        }
      }
LABEL_719:
      v590 = (void *)v449;
      v591 = *(char **)(v449 + 184);
      v592 = (char *)v590[22];
      if (v591 != v592)
      {
        v590[23] = v592;
        v591 = v592;
      }
      v594 = (char *)v590[25];
      v593 = (char *)v590[26];
      if (v593 != v594)
      {
        v590[26] = v594;
        v593 = v594;
      }
      uint64_t v595 = v590[28];
      if (v590[29] != v595) {
        v590[29] = v595;
      }
      uint64_t v596 = v590[31];
      if (v590[32] != v596) {
        v590[32] = v596;
      }
      int64_t v597 = v591 - v592;
      unint64_t v598 = (v591 - v592) >> 3;
      if (v598 >= (uint64_t)(v590[24] - (void)v592) >> 3)
      {
        uint64_t v4 = v706;
        goto LABEL_739;
      }
      int64_t v599 = v591 - v592;
      if (v591 == v592)
      {
        uint64_t v601 = 8 * v598;
        uint64_t v603 = 8 * v598;
        uint64_t v4 = v706;
        goto LABEL_737;
      }
      if (v597 < 0) {
        goto LABEL_827;
      }
      v600 = operator new(v591 - v592);
      uint64_t v601 = (uint64_t)&v600[8 * v598];
      if ((unint64_t)(v599 - 8) > 0x57 && (unint64_t)(v592 - v600) >= 0x20)
      {
        unint64_t v613 = ((unint64_t)(v599 - 8) >> 3) + 1;
        v602 = &v591[-8 * (v613 & 0x3FFFFFFFFFFFFFFCLL)];
        v614 = &v600[v597 - 16];
        v615 = (long long *)(v591 - 16);
        uint64_t v616 = v613 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v617 = *v615;
          *(v614 - 1) = *(v615 - 1);
          _OWORD *v614 = v617;
          v614 -= 2;
          v615 -= 2;
          v616 -= 4;
        }
        while (v616);
        uint64_t v603 = v601 - 8 * (v613 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v4 = v706;
        if (v613 == (v613 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_737:
          *(void *)(v4 + 176) = v603;
          *(void *)(v4 + 184) = v601;
          *(void *)(v4 + 192) = v601;
          if (v592)
          {
            operator delete(v592);
            v594 = *(char **)(v4 + 200);
            v593 = *(char **)(v4 + 208);
          }
LABEL_739:
          int64_t v605 = v593 - v594;
          unint64_t v606 = (v593 - v594) >> 3;
          if (v606 >= (uint64_t)(*(void *)(v4 + 216) - (void)v594) >> 3) {
            goto LABEL_757;
          }
          int64_t v607 = v593 - v594;
          if (v593 == v594)
          {
            uint64_t v609 = 8 * v606;
            uint64_t v612 = 8 * v606;
            uint64_t v4 = v706;
            goto LABEL_755;
          }
          if (v605 < 0) {
            goto LABEL_827;
          }
          v608 = operator new(v593 - v594);
          uint64_t v609 = (uint64_t)&v608[8 * v606];
          unint64_t v610 = v607 - 8;
          if ((unint64_t)(v607 - 8) > 0x57)
          {
            uint64_t v4 = v706;
            if ((unint64_t)(v594 - v608) >= 0x20)
            {
              uint64_t v618 = (v610 >> 3) + 1;
              v611 = &v593[-8 * (v618 & 0x3FFFFFFFFFFFFFFCLL)];
              v619 = &v608[v605 - 16];
              v620 = (long long *)(v593 - 16);
              uint64_t v621 = v618 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v622 = *v620;
                *(v619 - 1) = *(v620 - 1);
                _OWORD *v619 = v622;
                v619 -= 2;
                v620 -= 2;
                v621 -= 4;
              }
              while (v621);
              uint64_t v612 = v609 - 8 * (v618 & 0x3FFFFFFFFFFFFFFCLL);
              if (v618 == (v618 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_755:
                *(void *)(v4 + 200) = v612;
                *(void *)(v4 + 208) = v609;
                *(void *)(v4 + 216) = v609;
                if (v594) {
                  operator delete(v594);
                }
LABEL_757:
                v624 = *(unsigned char **)(v4 + 232);
                v625 = *(unsigned char **)(v4 + 224);
                int64_t v626 = v624 - v625;
                unint64_t v627 = (v624 - v625) >> 3;
                if (v627 >= (uint64_t)(*(void *)(v4 + 240) - (void)v625) >> 3) {
                  goto LABEL_770;
                }
                int64_t v628 = v624 - v625;
                if (v624 == v625)
                {
                  uint64_t v630 = 8 * v627;
                  uint64_t v632 = 8 * v627;
                  uint64_t v4 = v706;
                  goto LABEL_768;
                }
                if (v626 < 0) {
                  goto LABEL_827;
                }
                v629 = operator new(v624 - v625);
                uint64_t v630 = (uint64_t)&v629[8 * v627];
                unint64_t v631 = v628 - 8;
                if ((unint64_t)(v628 - 8) >= 0x58)
                {
                  uint64_t v632 = (uint64_t)&v629[8 * v627];
                  uint64_t v4 = v706;
                  if ((unint64_t)(v625 - v629) >= 0x20)
                  {
                    uint64_t v633 = (v631 >> 3) + 1;
                    v634 = &v629[v626 - 16];
                    v635 = (long long *)(v624 - 16);
                    uint64_t v636 = v633 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v637 = *v635;
                      *(v634 - 1) = *(v635 - 1);
                      _OWORD *v634 = v637;
                      v634 -= 2;
                      v635 -= 2;
                      v636 -= 4;
                    }
                    while (v636);
                    uint64_t v632 = v630 - 8 * (v633 & 0x3FFFFFFFFFFFFFFCLL);
                    v624 -= 8 * (v633 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v633 == (v633 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_768:
                      *(void *)(v4 + 224) = v632;
                      *(void *)(v4 + 232) = v630;
                      *(void *)(v4 + 240) = v630;
                      if (v625) {
                        operator delete(v625);
                      }
LABEL_770:
                      v639 = *(unsigned char **)(v4 + 256);
                      v640 = *(unsigned char **)(v4 + 248);
                      int64_t v641 = v639 - v640;
                      unint64_t v642 = (v639 - v640) >> 3;
                      if (v642 >= (uint64_t)(*(void *)(v4 + 264) - (void)v640) >> 3)
                      {
LABEL_783:
                        if (*(void *)(v4 + 296))
                        {
                          v654 = *(void **)(v4 + 288);
                          if (v654)
                          {
                            do
                            {
                              v655 = (void *)*v654;
                              operator delete(v654);
                              v654 = v655;
                            }
                            while (v655);
                          }
                          *(void *)(v4 + 288) = 0;
                          uint64_t v656 = *(void *)(v4 + 280);
                          if (v656)
                          {
                            for (uint64_t k = 0; k != v656; ++k)
                              *(void *)(*(void *)v720 + 8 * k) = 0;
                          }
                          *(void *)(v4 + 296) = 0;
                        }
                        if (*(void *)(v4 + 336))
                        {
                          v658 = *(void **)(v4 + 328);
                          if (v658)
                          {
                            do
                            {
                              v659 = (void *)*v658;
                              operator delete(v658);
                              v658 = v659;
                            }
                            while (v659);
                          }
                          *(void *)(v4 + 328) = 0;
                          uint64_t v660 = *(void *)(v4 + 320);
                          if (v660)
                          {
                            for (uint64_t m = 0; m != v660; ++m)
                              *(void *)(*(void *)v694 + 8 * m) = 0;
                          }
                          *(void *)(v4 + 336) = 0;
                        }
                        if (*(void *)(v4 + 376))
                        {
                          v662 = *(void **)(v4 + 368);
                          if (v662)
                          {
                            do
                            {
                              v663 = (void *)*v662;
                              operator delete(v662);
                              v662 = v663;
                            }
                            while (v663);
                          }
                          *(void *)(v4 + 368) = 0;
                          uint64_t v664 = *(void *)(v4 + 360);
                          if (v664)
                          {
                            for (uint64_t n = 0; n != v664; ++n)
                              *(void *)(*v684 + 8 * n) = 0;
                          }
                          *(void *)(v4 + 376) = 0;
                        }
                        if (*(void *)(v4 + 416))
                        {
                          v666 = *(void **)(v4 + 408);
                          if (v666)
                          {
                            do
                            {
                              v674 = (void *)*v666;
                              v675 = (void *)v666[13];
                              if (v675)
                              {
                                v666[14] = v675;
                                operator delete(v675);
                              }
                              v676 = (void *)v666[10];
                              if (v676)
                              {
                                v666[11] = v676;
                                operator delete(v676);
                              }
                              v677 = (void *)v666[7];
                              if (v677)
                              {
                                v666[8] = v677;
                                operator delete(v677);
                              }
                              v678 = (void *)v666[4];
                              if (v678)
                              {
                                v666[5] = v678;
                                operator delete(v678);
                              }
                              operator delete(v666);
                              v666 = v674;
                            }
                            while (v674);
                          }
                          *(void *)(v4 + 408) = 0;
                          uint64_t v667 = *(void *)(v4 + 400);
                          if (v667)
                          {
                            for (iuint64_t i = 0; ii != v667; ++ii)
                              *(void *)(*v687 + 8 * ii) = 0;
                          }
                          *(void *)(v4 + 416) = 0;
                        }
                        if (*(void *)(v4 + 456))
                        {
                          v669 = *(void **)(v4 + 448);
                          if (v669)
                          {
                            do
                            {
                              v670 = (void *)*v669;
                              operator delete(v669);
                              v669 = v670;
                            }
                            while (v670);
                          }
                          *(void *)(v4 + 448) = 0;
                          uint64_t v671 = *(void *)(v4 + 440);
                          if (v671)
                          {
                            for (junint64_t j = 0; jj != v671; ++jj)
                              *(void *)(*(void *)v683 + 8 * jj) = 0;
                          }
                          *(void *)(v4 + 456) = 0;
                        }
                        return v4;
                      }
                      int64_t v643 = v639 - v640;
                      if (v639 == v640)
                      {
                        uint64_t v645 = 8 * v642;
                        uint64_t v647 = 8 * v642;
                        uint64_t v4 = v706;
                        goto LABEL_781;
                      }
                      if (v641 < 0) {
                        goto LABEL_827;
                      }
                      v644 = operator new(v639 - v640);
                      uint64_t v645 = (uint64_t)&v644[8 * v642];
                      unint64_t v646 = v643 - 8;
                      if ((unint64_t)(v643 - 8) > 0x57)
                      {
                        uint64_t v647 = (uint64_t)&v644[8 * v642];
                        uint64_t v4 = v706;
                        if ((unint64_t)(v640 - v644) >= 0x20)
                        {
                          uint64_t v648 = (v646 >> 3) + 1;
                          v649 = &v644[v641 - 16];
                          v650 = (long long *)(v639 - 16);
                          uint64_t v651 = v648 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            long long v652 = *v650;
                            *(v649 - 1) = *(v650 - 1);
                            _OWORD *v649 = v652;
                            v649 -= 2;
                            v650 -= 2;
                            v651 -= 4;
                          }
                          while (v651);
                          uint64_t v647 = v645 - 8 * (v648 & 0x3FFFFFFFFFFFFFFCLL);
                          v639 -= 8 * (v648 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v648 == (v648 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_781:
                            *(void *)(v4 + 248) = v647;
                            *(void *)(v4 + 256) = v645;
                            *(void *)(v4 + 264) = v645;
                            if (v640) {
                              operator delete(v640);
                            }
                            goto LABEL_783;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v647 = (uint64_t)&v644[8 * v642];
                        uint64_t v4 = v706;
                      }
                      do
                      {
                        uint64_t v653 = *((void *)v639 - 1);
                        v639 -= 8;
                        *(void *)(v647 - 8) = v653;
                        v647 -= 8;
                      }
                      while (v639 != v640);
                      goto LABEL_781;
                    }
                  }
                }
                else
                {
                  uint64_t v632 = (uint64_t)&v629[8 * v627];
                  uint64_t v4 = v706;
                }
                do
                {
                  uint64_t v638 = *((void *)v624 - 1);
                  v624 -= 8;
                  *(void *)(v632 - 8) = v638;
                  v632 -= 8;
                }
                while (v624 != v625);
                goto LABEL_768;
              }
            }
            else
            {
              v611 = v593;
              uint64_t v612 = (uint64_t)&v608[8 * v606];
            }
          }
          else
          {
            v611 = v593;
            uint64_t v612 = (uint64_t)&v608[8 * v606];
            uint64_t v4 = v706;
          }
          do
          {
            uint64_t v623 = *((void *)v611 - 1);
            v611 -= 8;
            *(void *)(v612 - 8) = v623;
            v612 -= 8;
          }
          while (v611 != v594);
          goto LABEL_755;
        }
      }
      else
      {
        v602 = v591;
        uint64_t v603 = (uint64_t)&v600[8 * v598];
        uint64_t v4 = v706;
      }
      do
      {
        uint64_t v604 = *((void *)v602 - 1);
        v602 -= 8;
        *(void *)(v603 - 8) = v604;
        v603 -= 8;
      }
      while (v602 != v592);
      goto LABEL_737;
    }
  }
  return v4;
}

void sub_1A242968C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, void **a16, uint64_t a17, uint64_t a18, void **a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void **a26,void **a27,void **a28,void **a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  md::ComposedRoadEdgeWalker::~ComposedRoadEdgeWalker((md::ComposedRoadEdgeWalker *)&a67);
  if (v67) {
    operator delete(v67);
  }
  double v69 = (void *)a33[56];
  if (v69)
  {
    do
    {
      double v70 = (void *)*v69;
      operator delete(v69);
      double v69 = v70;
    }
    while (v70);
  }
  unint64_t v71 = *a15;
  *a15 = 0;
  if (v71) {
    operator delete(v71);
  }
  std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::~__hash_table(a18);
  uint64_t v72 = (void *)a33[46];
  if (v72)
  {
    do
    {
      uint64_t v73 = (void *)*v72;
      operator delete(v72);
      uint64_t v72 = v73;
    }
    while (v73);
  }
  uint64_t v74 = *a16;
  *a16 = 0;
  if (v74) {
    operator delete(v74);
  }
  uint64_t v75 = (void *)a33[41];
  if (v75)
  {
    do
    {
      unint64_t v76 = (void *)*v75;
      operator delete(v75);
      uint64_t v75 = v76;
    }
    while (v76);
  }
  unint64_t v77 = *a26;
  *a26 = 0;
  if (v77) {
    operator delete(v77);
  }
  double v78 = (void *)a33[36];
  if (v78)
  {
    do
    {
      double v79 = (void *)*v78;
      operator delete(v78);
      double v78 = v79;
    }
    while (v79);
  }
  uint64_t v80 = *a47;
  *a47 = 0;
  if (v80) {
    operator delete(v80);
  }
  double v81 = *a28;
  if (*a28)
  {
    a33[32] = v81;
    operator delete(v81);
  }
  double v82 = *a29;
  if (*a29)
  {
    a33[29] = v82;
    operator delete(v82);
  }
  unint64_t v83 = *a14;
  if (*a14)
  {
    a33[26] = v83;
    operator delete(v83);
  }
  double v84 = *a27;
  if (*a27)
  {
    a33[23] = v84;
    operator delete(v84);
  }
  double v85 = (void *)a33[17];
  if (v85)
  {
    do
    {
      double v86 = (void *)*v85;
      operator delete(v85);
      double v85 = v86;
    }
    while (v86);
  }
  double v87 = *a19;
  *a19 = 0;
  if (v87) {
    operator delete(v87);
  }
  unint64_t v88 = (void *)a33[12];
  if (v88)
  {
    do
    {
      unint64_t v89 = (void *)*v88;
      operator delete(v88);
      unint64_t v88 = v89;
    }
    while (v89);
  }
  uint64_t v90 = *a20;
  *a20 = 0;
  if (v90) {
    operator delete(v90);
  }
  std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::~__hash_table(a23);
  _Unwind_Resume(a1);
}

void std::__hash_table<md::ComposedRoadEdge const*,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,std::allocator<md::ComposedRoadEdge const*>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,md::ComposedRoadEdge const* const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = v7 ^ (v7 >> 47);
  unint64_t v9 = 0x9DDFEA08EB382D69 * v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    double v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      int64x2_t v13 = (void *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2) {
                return;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            int64x2_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2) {
              return;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          int64x2_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  double v16 = operator new(0x18uLL);
  void *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_34;
    }
    if (prime < v10)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v10) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  double v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    void *v16 = *v27;
LABEL_58:
    *double v27 = v16;
    goto LABEL_59;
  }
  void *v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    unint64_t v28 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    double v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_1A2429C34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<gm::Range<double>>::__assign_with_size[abi:nn180100]<gm::Range<double>*,gm::Range<double>*>(void *result, char *__src, char *a3, size_t __sz)
{
  unint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_22:
    }
      abort();
    uint64_t v13 = 2 * v12;
    __n128 result = operator new(16 * v12);
    unint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  double v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    BOOL v19 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  float v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    BOOL v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t *v15 = &v9[v14];
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZInfo>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v2 = (void *)v1[13];
      if (v2)
      {
        v1[14] = v2;
        operator delete(v2);
      }
      unint64_t v3 = (void *)v1[10];
      if (v3)
      {
        v1[11] = v3;
        operator delete(v3);
      }
      uint64_t v4 = (void *)v1[7];
      if (v4)
      {
        v1[8] = v4;
        operator delete(v4);
      }
      float64x2_t v5 = (void *)v1[4];
      if (v5)
      {
        v1[5] = v5;
        operator delete(v5);
      }
    }
    operator delete(v1);
  }
}

void std::__hash_table<md::ComposedRoadEdge const*,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,std::allocator<md::ComposedRoadEdge const*>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,md::ComposedRoadEdge const*&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = v7 ^ (v7 >> 47);
  unint64_t v9 = 0x9DDFEA08EB382D69 * v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2) {
                return;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2) {
              return;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  double v16 = operator new(0x18uLL);
  void *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_34;
    }
    if (prime < v10)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v10) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  double v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    void *v16 = *v27;
LABEL_58:
    *double v27 = v16;
    goto LABEL_59;
  }
  void *v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    unint64_t v28 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    double v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_1A242A110(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::__unordered_map_hasher<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::hash<md::ComposedRoadEdge const*>,std::equal_to<md::ComposedRoadEdge const*>,true>,std::__unordered_map_equal<md::ComposedRoadEdge const*,std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>,std::equal_to<md::ComposedRoadEdge const*>,std::hash<md::ComposedRoadEdge const*>,true>,std::allocator<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZSamplingInfo>>>::__emplace_unique_key_args<md::ComposedRoadEdge const*,std::piecewise_construct_t const&,std::tuple<md::ComposedRoadEdge const* const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = *((void *)v12 + 1);
            if (v14 == v8)
            {
              if (*((void *)v12 + 2) == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v12 = *(char **)v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((void *)v12 + 2) == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  uint64_t v15 = a1 + 2;
  unint64_t v12 = (char *)operator new(0x80uLL);
  *(void *)unint64_t v12 = 0;
  *((void *)v12 + 1) = v8;
  *((void *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *((void *)v12 + 15) = 0;
  float v16 = (float)(unint64_t)(a1[3] + 1);
  float v17 = *((float *)a1 + 8);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = a1[1];
    }
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_59;
      }
      unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v9)
      {
        unint64_t v9 = a1[1];
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        unint64_t v42 = (void *)*a1;
        *a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v22 = operator new(8 * prime);
    unint64_t v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23) {
      operator delete(v23);
    }
    uint64_t v24 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    uint64_t v25 = (void *)*v15;
    if (!*v15)
    {
LABEL_58:
      unint64_t v9 = prime;
      goto LABEL_59;
    }
    size_t v26 = v25[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*a1 + 8 * v28) = v15;
      for (uint64_t i = (void *)*v25; *v25; uint64_t i = (void *)*v25)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          uint64_t v25 = i;
        }
        else if (*(void *)(*a1 + 8 * v30))
        {
          *uint64_t v25 = *i;
          uint64_t v31 = 8 * v30;
          *uint64_t i = **(void **)(*a1 + v31);
          **(void **)(*a1 + v31) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v30) = v25;
          uint64_t v25 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*a1 + 8 * v26) = v15;
    unint64_t v35 = (void *)*v25;
    if (!*v25) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 != v26)
      {
        if (!*(void *)(*a1 + 8 * v37))
        {
          *(void *)(*a1 + 8 * v37) = v25;
          goto LABEL_63;
        }
        *uint64_t v25 = *v35;
        uint64_t v36 = 8 * v37;
        void *v35 = **(void **)(*a1 + v36);
        **(void **)(*a1 + v36) = v35;
        unint64_t v35 = v25;
      }
      size_t v37 = v26;
LABEL_63:
      uint64_t v25 = v35;
      unint64_t v35 = (void *)*v35;
      size_t v26 = v37;
      if (!v35) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v38 = *a1;
  unint64_t v39 = *(void **)(*a1 + 8 * v3);
  if (v39)
  {
    *(void *)unint64_t v12 = *v39;
LABEL_80:
    void *v39 = v12;
    goto LABEL_81;
  }
  *(void *)unint64_t v12 = *v15;
  void *v15 = v12;
  *(void *)(v38 + 8 * v3) = v15;
  if (*(void *)v12)
  {
    unint64_t v40 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9) {
        v40 %= v9;
      }
    }
    else
    {
      v40 &= v9 - 1;
    }
    unint64_t v39 = (void *)(*a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v12;
}

void sub_1A242A5E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::ComposedRoadEdge const*,md::ComposedRoadEdgeZInfo>,void *>>>>::reset[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::MuninJunctionZInfo>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  unint64_t v12 = operator new(0x20uLL);
  void *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v12[3] = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_59;
      }
      unint64_t v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        unint64_t v42 = *(void **)a1;
        *(void *)a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v21 = operator new(8 * prime);
    uint64_t v22 = *(void **)a1;
    *(void *)a1 = v21;
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    uint64_t v25 = (uint64_t *)(a1 + 4);
    uint64_t v24 = (void *)*((void *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      unint64_t v9 = prime;
      goto LABEL_59;
    }
    size_t v26 = v24[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*(void *)a1 + 8 * v28) = v25;
      for (uint64_t i = (void *)*v24; *v24; uint64_t i = (void *)*v24)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          uint64_t v24 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v30))
        {
          void *v24 = *i;
          uint64_t v31 = 8 * v30;
          *uint64_t i = **(void **)(*(void *)a1 + v31);
          **(void **)(*(void *)a1 + v31) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v30) = v24;
          uint64_t v24 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v26) = v25;
    unint64_t v35 = (void *)*v24;
    if (!*v24) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 != v26)
      {
        if (!*(void *)(*(void *)a1 + 8 * v37))
        {
          *(void *)(*(void *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        void *v24 = *v35;
        uint64_t v36 = 8 * v37;
        void *v35 = **(void **)(*(void *)a1 + v36);
        **(void **)(*(void *)a1 + v36) = v35;
        unint64_t v35 = v24;
      }
      size_t v37 = v26;
LABEL_63:
      uint64_t v24 = v35;
      unint64_t v35 = (void *)*v35;
      size_t v26 = v37;
      if (!v35) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v38 = *(void **)a1;
  unint64_t v39 = *(void **)(*(void *)a1 + 8 * v3);
  if (v39)
  {
    void *v12 = *v39;
LABEL_80:
    void *v39 = v12;
    goto LABEL_81;
  }
  void *v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    unint64_t v40 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9) {
        v40 %= v9;
      }
    }
    else
    {
      v40 &= v9 - 1;
    }
    unint64_t v39 = (void *)(*(void *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v12;
}

void sub_1A242AA78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::JunctionOrphanReason>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  unint64_t v12 = operator new(0x20uLL);
  void *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  *((unsigned char *)v12 + 24) = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_59;
      }
      unint64_t v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        unint64_t v42 = *(void **)a1;
        *(void *)a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v21 = operator new(8 * prime);
    uint64_t v22 = *(void **)a1;
    *(void *)a1 = v21;
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    uint64_t v25 = (uint64_t *)(a1 + 4);
    uint64_t v24 = (void *)*((void *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      unint64_t v9 = prime;
      goto LABEL_59;
    }
    size_t v26 = v24[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*(void *)a1 + 8 * v28) = v25;
      for (uint64_t i = (void *)*v24; *v24; uint64_t i = (void *)*v24)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          uint64_t v24 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v30))
        {
          void *v24 = *i;
          uint64_t v31 = 8 * v30;
          *uint64_t i = **(void **)(*(void *)a1 + v31);
          **(void **)(*(void *)a1 + v31) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v30) = v24;
          uint64_t v24 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v26) = v25;
    unint64_t v35 = (void *)*v24;
    if (!*v24) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 != v26)
      {
        if (!*(void *)(*(void *)a1 + 8 * v37))
        {
          *(void *)(*(void *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        void *v24 = *v35;
        uint64_t v36 = 8 * v37;
        void *v35 = **(void **)(*(void *)a1 + v36);
        **(void **)(*(void *)a1 + v36) = v35;
        unint64_t v35 = v24;
      }
      size_t v37 = v26;
LABEL_63:
      uint64_t v24 = v35;
      unint64_t v35 = (void *)*v35;
      size_t v26 = v37;
      if (!v35) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v38 = *(void **)a1;
  unint64_t v39 = *(void **)(*(void *)a1 + 8 * v3);
  if (v39)
  {
    void *v12 = *v39;
LABEL_80:
    void *v39 = v12;
    goto LABEL_81;
  }
  void *v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    unint64_t v40 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9) {
        v40 %= v9;
      }
    }
    else
    {
      v40 &= v9 - 1;
    }
    unint64_t v39 = (void *)(*(void *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v12;
}

void sub_1A242AF14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::ComposedRoadEdgeWalker::~ComposedRoadEdgeWalker(md::ComposedRoadEdgeWalker *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        float64x2_t v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          operator delete(v5);
        }
        unint64_t v6 = *(void **)(v3 - 56);
        if (v6)
        {
          *(void *)(v3 - 48) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  unint64_t v7 = (void *)*((void *)this + 2);
  if (v7)
  {
    *((void *)this + 3) = v7;
    operator delete(v7);
  }
}

double std::__function::__func<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1,std::allocator<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1>,double ()(double const&)>::operator()(uint64_t a1, double *a2)
{
  double result = 10.0;
  if (*a2 >= 0.1) {
    return 1.0 / *a2;
  }
  return result;
}

void std::__function::__func<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1,std::allocator<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1>,double ()(double const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF574D78;
}

void *std::__function::__func<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1,std::allocator<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1>,double ()(double const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EF574D78;
  return result;
}

void std::__function::__func<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1,std::allocator<md::MuninRoadGraphZData::processEdges(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,std::vector<md::ComposedRoadEdge const*>)::$_1>,double ()(double const&)>::~__func()
{
}

void SampleDeterminablityTracker::trackSample(uint64_t a1, int a2, uint64_t a3, uint64_t a4, double a5)
{
  switch(a2)
  {
    case 2:
      if (*(unsigned char *)a1)
      {
        unint64_t v13 = *(double **)(a3 + 8);
        unint64_t v12 = *(void *)(a3 + 16);
        if ((unint64_t)v13 >= v12)
        {
          unint64_t v32 = *(double **)a3;
          uint64_t v33 = ((uint64_t)v13 - *(void *)a3) >> 4;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 60) {
            goto LABEL_74;
          }
          uint64_t v35 = v12 - (void)v32;
          if (v35 >> 3 > v34) {
            unint64_t v34 = v35 >> 3;
          }
          BOOL v25 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0;
          unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
          if (!v25) {
            unint64_t v36 = v34;
          }
          if (v36 >> 60) {
            goto LABEL_75;
          }
          uint64_t v37 = 16 * v36;
          uint64_t v38 = (char *)operator new(16 * v36);
          unint64_t v39 = (double *)&v38[16 * v33];
          unint64_t v40 = &v38[v37];
          double *v39 = *(double *)(a1 + 8);
          v39[1] = a5;
          uint64_t v14 = v39 + 2;
          if (v13 == v32)
          {
            uint64_t v41 = &v38[16 * v33];
          }
          else
          {
            do
            {
              uint64_t v41 = (char *)(v39 - 2);
              *((_OWORD *)v39 - 1) = *((_OWORD *)v13 - 1);
              v13 -= 2;
              v39 -= 2;
            }
            while (v13 != v32);
          }
          *(void *)a3 = v41;
          *(void *)(a3 + 8) = v14;
          *(void *)(a3 + 16) = v40;
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          double *v13 = *(double *)(a1 + 8);
          v13[1] = a5;
          uint64_t v14 = v13 + 2;
        }
        *(void *)(a3 + 8) = v14;
        *(unsigned char *)a1 = 0;
        *(void *)(a1 + 8) = 0;
      }
      if (!*(unsigned char *)(a1 + 1))
      {
        *(unsigned char *)(a1 + 1) = 1;
LABEL_72:
        *(double *)(a1 + 16) = a5;
      }
      break;
    case 1:
      if (*(unsigned char *)(a1 + 1))
      {
        float v16 = *(double **)(a4 + 8);
        unint64_t v15 = *(void *)(a4 + 16);
        if ((unint64_t)v16 >= v15)
        {
          unint64_t v42 = *(double **)a4;
          uint64_t v43 = ((uint64_t)v16 - *(void *)a4) >> 4;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 60) {
            goto LABEL_74;
          }
          uint64_t v45 = v15 - (void)v42;
          if (v45 >> 3 > v44) {
            unint64_t v44 = v45 >> 3;
          }
          BOOL v25 = (unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0;
          unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
          if (!v25) {
            unint64_t v46 = v44;
          }
          if (v46 >> 60) {
            goto LABEL_75;
          }
          uint64_t v47 = 16 * v46;
          double v48 = (char *)operator new(16 * v46);
          size_t v49 = (double *)&v48[16 * v43];
          unint64_t v50 = &v48[v47];
          double *v49 = *(double *)(a1 + 16);
          v49[1] = a5;
          BOOL v17 = v49 + 2;
          if (v16 == v42)
          {
            unint64_t v51 = &v48[16 * v43];
          }
          else
          {
            do
            {
              unint64_t v51 = (char *)(v49 - 2);
              *((_OWORD *)v49 - 1) = *((_OWORD *)v16 - 1);
              v16 -= 2;
              v49 -= 2;
            }
            while (v16 != v42);
          }
          *(void *)a4 = v51;
          *(void *)(a4 + 8) = v17;
          *(void *)(a4 + 16) = v50;
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          double *v16 = *(double *)(a1 + 16);
          v16[1] = a5;
          BOOL v17 = v16 + 2;
        }
        *(void *)(a4 + 8) = v17;
        *(unsigned char *)(a1 + 1) = 0;
        *(void *)(a1 + 16) = 0;
      }
      if (!*(unsigned char *)a1) {
        *(double *)(a1 + 8) = a5;
      }
      break;
    case 0:
      if (*(unsigned char *)a1)
      {
        uint8x8_t v10 = *(double **)(a3 + 8);
        unint64_t v9 = *(void *)(a3 + 16);
        if ((unint64_t)v10 < v9)
        {
          double *v10 = *(double *)(a1 + 8);
          v10[1] = a5;
          uint8x8_t v11 = (char *)(v10 + 2);
LABEL_55:
          *(void *)(a3 + 8) = v11;
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          return;
        }
        unint64_t v21 = *(double **)a3;
        uint64_t v22 = ((uint64_t)v10 - *(void *)a3) >> 4;
        unint64_t v23 = v22 + 1;
        if (!((unint64_t)(v22 + 1) >> 60))
        {
          uint64_t v24 = v9 - (void)v21;
          if (v24 >> 3 > v23) {
            unint64_t v23 = v24 >> 3;
          }
          BOOL v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0;
          unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
          if (!v25) {
            unint64_t v26 = v23;
          }
          if (!(v26 >> 60))
          {
            uint64_t v27 = 16 * v26;
            size_t v28 = (char *)operator new(16 * v26);
            uint64_t v29 = (double *)&v28[16 * v22];
            size_t v30 = &v28[v27];
            *uint64_t v29 = *(double *)(a1 + 8);
            v29[1] = a5;
            uint8x8_t v11 = (char *)(v29 + 2);
            if (v10 == v21)
            {
              uint64_t v31 = &v28[16 * v22];
            }
            else
            {
              do
              {
                uint64_t v31 = (char *)(v29 - 2);
                *((_OWORD *)v29 - 1) = *((_OWORD *)v10 - 1);
                v10 -= 2;
                v29 -= 2;
              }
              while (v10 != v21);
            }
            *(void *)a3 = v31;
            *(void *)(a3 + 8) = v11;
            *(void *)(a3 + 16) = v30;
            if (v21) {
              operator delete(v21);
            }
            goto LABEL_55;
          }
LABEL_75:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
LABEL_74:
        abort();
      }
      if (*(unsigned char *)(a1 + 1))
      {
        unint64_t v19 = *(double **)(a4 + 8);
        unint64_t v18 = *(void *)(a4 + 16);
        if ((unint64_t)v19 >= v18)
        {
          float v52 = *(double **)a4;
          uint64_t v53 = ((uint64_t)v19 - *(void *)a4) >> 4;
          unint64_t v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 60) {
            goto LABEL_74;
          }
          uint64_t v55 = v18 - (void)v52;
          if (v55 >> 3 > v54) {
            unint64_t v54 = v55 >> 3;
          }
          BOOL v25 = (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0;
          unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
          if (!v25) {
            unint64_t v56 = v54;
          }
          if (v56 >> 60) {
            goto LABEL_75;
          }
          uint64_t v57 = 16 * v56;
          uint64_t v58 = (char *)operator new(16 * v56);
          double v59 = (double *)&v58[16 * v53];
          long double v60 = &v58[v57];
          *double v59 = *(double *)(a1 + 16);
          v59[1] = a5;
          unint64_t v20 = v59 + 2;
          if (v19 == v52)
          {
            long double v61 = &v58[16 * v53];
          }
          else
          {
            do
            {
              long double v61 = (char *)(v59 - 2);
              *((_OWORD *)v59 - 1) = *((_OWORD *)v19 - 1);
              v19 -= 2;
              v59 -= 2;
            }
            while (v19 != v52);
          }
          *(void *)a4 = v61;
          *(void *)(a4 + 8) = v20;
          *(void *)(a4 + 16) = v60;
          if (v52) {
            operator delete(v52);
          }
        }
        else
        {
          double *v19 = *(double *)(a1 + 16);
          v19[1] = a5;
          unint64_t v20 = v19 + 2;
        }
        *(void *)(a4 + 8) = v20;
        *(unsigned char *)(a1 + 1) = 0;
        goto LABEL_72;
      }
      break;
  }
}

double std::__function::__func<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1,std::allocator<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1>,double ()(double const&)>::operator()(uint64_t a1, double *a2)
{
  double result = 10.0;
  if (*a2 >= 0.1) {
    return 1.0 / *a2;
  }
  return result;
}

void std::__function::__func<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1,std::allocator<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1>,double ()(double const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF574E08;
}

void *std::__function::__func<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1,std::allocator<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1>,double ()(double const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EF574E08;
  return result;
}

void std::__function::__func<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1,std::allocator<md::MuninRoadGraphZData::walkComposedEdge(std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&,md::ComposedRoadEdgeWalker &,double,md::ComposedRoadEdgeZSamplingInfo &)::$_1>,double ()(double const&)>::~__func()
{
}

double std::__function::__func<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0,std::allocator<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0>,double ()(double const&)>::operator()(uint64_t a1, double *a2)
{
  double result = 10.0;
  if (*a2 >= 0.1) {
    return 1.0 / *a2;
  }
  return result;
}

void std::__function::__func<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0,std::allocator<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0>,double ()(double const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF574DC0;
}

void *std::__function::__func<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0,std::allocator<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0>,double ()(double const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EF574DC0;
  return result;
}

void std::__function::__func<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0,std::allocator<md::MuninRoadGraphZData::processJunctions(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,std::vector<std::shared_ptr<md::mun::MuninMetadata>> const&)::$_0>,double ()(double const&)>::~__func()
{
}

uint64_t *md::FrameGraphPassBuilder::addAttachmentInput(uint64_t *result, unsigned __int8 *a2)
{
  uint64_t v3 = result;
  float64x2_t v5 = (uint64_t **)(result + 11);
  uint64_t v4 = (uint64_t *)result[11];
  if (v4)
  {
    unsigned int v6 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v4;
        unint64_t v8 = (unsigned __int8 *)v4[4];
        unsigned int v9 = *v8;
        if (v6 == v9) {
          break;
        }
        if (v6 >= v9)
        {
          if (v9 >= v6) {
            return result;
          }
          goto LABEL_10;
        }
LABEL_3:
        uint64_t v4 = *v7;
        float64x2_t v5 = v7;
        if (!*v7) {
          goto LABEL_13;
        }
      }
      if (*((void *)a2 + 3) + (unint64_t)*((unsigned int *)a2 + 5) < *((void *)v8 + 3)
                                                                             + (unint64_t)*((unsigned int *)v8 + 5))
        goto LABEL_3;
      if (*((void *)v8 + 3) + (unint64_t)*((unsigned int *)v8 + 5) >= *((void *)a2 + 3)
                                                                              + (unint64_t)*((unsigned int *)a2
                                                                                                  + 5))
        return result;
LABEL_10:
      float64x2_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
      if (!v4) {
        goto LABEL_13;
      }
    }
  }
  unint64_t v7 = (uint64_t **)(result + 11);
LABEL_13:
  uint8x8_t v10 = (uint64_t *)operator new(0x28uLL);
  v10[4] = (uint64_t)a2;
  uint64_t *v10 = 0;
  v10[1] = 0;
  v10[2] = (uint64_t)v7;
  void *v5 = v10;
  uint64_t v11 = *(void *)v3[10];
  if (v11)
  {
    v3[10] = v11;
    unint64_t v12 = *v5;
  }
  else
  {
    unint64_t v12 = v10;
  }
  double result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[11], v12);
  ++v3[12];
  return result;
}

uint64_t *md::FrameGraphPassBuilder::dependsOn(uint64_t *result, unsigned __int8 *a2)
{
  uint64_t v3 = result;
  float64x2_t v5 = (uint64_t **)(result + 8);
  uint64_t v4 = result[8];
  if (v4)
  {
    unsigned int v6 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (void *)v4;
        unsigned int v8 = **(unsigned __int8 **)(v4 + 32);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *v7;
        float64x2_t v5 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= v6) {
        break;
      }
      float64x2_t v5 = (uint64_t **)(v7 + 1);
      uint64_t v4 = v7[1];
      if (!v4) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = result + 8;
LABEL_9:
    unsigned int v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = (uint64_t)a2;
    *unsigned int v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    void *v5 = v9;
    uint64_t v10 = *(void *)v3[7];
    if (v10)
    {
      v3[7] = v10;
      uint64_t v11 = *v5;
    }
    else
    {
      uint64_t v11 = v9;
    }
    double result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[8], v11);
    ++v3[9];
  }
  return result;
}

void sub_1A242B7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A242B9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A242BC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A242BE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A242C98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A242C9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1A242CFA4(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1A242CFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A242CFC8(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 80);
  _Unwind_Resume(a1);
}

void sub_1A242D1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A242D604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A242D70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A242D9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A242DBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A242DC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A242E0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a31);

  _Unwind_Resume(a1);
}

void sub_1A242E420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A242E430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_72c39_ZTSN3geo12Coordinate3DINS_7RadiansEdEE(__n128 *a1, __n128 *a2)
{
  a1[4].n128_u64[1] = a2[4].n128_u64[1];
  __n128 result = a2[5];
  a1[5] = result;
  return result;
}

void sub_1A242E918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A242EAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A242F0A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A242F1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A242F750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1A24309D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A2430D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2430ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2430F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2431C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  objc_destroyWeak(v37);
  objc_destroyWeak((id *)(v38 - 160));

  _Unwind_Resume(a1);
}

void sub_1A2431FD0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A2432170(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A2432240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_40c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE96c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  double result = *(double *)(a2 + 144);
  *(double *)(a1 + 144) = result;
  return result;
}

void sub_1A243332C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A243392C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2433A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_88c39_ZTSN3geo12Coordinate2DINS_7RadiansEdEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  double result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  return result;
}

void sub_1A2433CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2433DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24340D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_1A24341FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24342A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A243452C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_1A2434660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2434708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2434A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2434A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A2434B80(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A2434C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2434F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2434F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A24350E0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A2435174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24354EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A243562C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A243583C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24359E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2435E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2435E88(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 48);
  _Unwind_Resume(a1);
}

void sub_1A2436A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a36)
  {
    a37 = a36;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a39 + 40))(a39, a36, a38 - a36);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__28391(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  a1[4].n128_u64[1] = a2[4].n128_u64[1];
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__28392(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (v1)
  {
    *(void *)(result + 56) = v1;
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 72) + 40))(*(void *)(result + 72), v1, *(void *)(result + 64) - v1);
  }
  return result;
}

__n128 __Block_byref_object_copy__17(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
void sub_1A2437DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t VectorTileMapper::mapNodeJunctionToTile(geo::MapNode **a1, uint64_t a2)
{
  uint64_t v4 = geo::MapNode::tile(*a1);
  BOOL v5 = v4;
  if (v4)
  {
    [v4 vectorTilePtr];
    uint64_t v6 = v9;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)())v10->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  if (!geo::codec::TileKeyEquals((void *)(a2 + 4), (void *)(v6 + 4)) || *(_DWORD *)a2 != *(_DWORD *)v6) {
    return 0;
  }
  uint64_t result = geo::MapNode::junction(*a1);
  if (!result) {
    return result;
  }
  unint64_t v8 = (result - *(void *)(v6 + 688)) >> 5;
  if (v8 < *(void *)(a2 + 696)) {
    return *(void *)(a2 + 688) + 32 * v8;
  }
  else {
    return 0;
  }
}

void sub_1A2437F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(uint64_t a1, int *a2, uint64_t a3, __n128 result)
{
  unsigned int v4 = *a2;
  BOOL v5 = *a2 >= *(_DWORD *)a1;
  if (*a2 != *(_DWORD *)a1)
  {
LABEL_4:
    if (!v5) {
      goto LABEL_5;
    }
LABEL_11:
    if (*(_DWORD *)a3 == v4)
    {
      result.n128_u32[0] = *(_DWORD *)(a3 + 4);
      float v10 = *((float *)a2 + 1);
      if (vabds_f32(result.n128_f32[0], v10) >= 0.00000011921)
      {
        if (result.n128_f32[0] >= v10) {
          return result;
        }
      }
      else if (*(void *)(a3 + 8) >= *((void *)a2 + 1))
      {
        return result;
      }
    }
    else if (*(_DWORD *)a3 >= v4)
    {
      return result;
    }
    uint64_t result = *(__n128 *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(__n128 *)a3 = result;
    if (*a2 == *(_DWORD *)a1)
    {
      result.n128_u32[0] = a2[1];
      float v12 = *(float *)(a1 + 4);
      if (vabds_f32(result.n128_f32[0], v12) >= 0.00000011921)
      {
        if (result.n128_f32[0] >= v12) {
          return result;
        }
      }
      else if (*((void *)a2 + 1) >= *(void *)(a1 + 8))
      {
        return result;
      }
    }
    else if (*a2 >= *(_DWORD *)a1)
    {
      return result;
    }
    uint64_t result = *(__n128 *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(__n128 *)a2 = result;
    return result;
  }
  result.n128_u32[0] = a2[1];
  float v6 = *(float *)(a1 + 4);
  if (vabds_f32(result.n128_f32[0], v6) < 0.00000011921)
  {
    BOOL v5 = *((void *)a2 + 1) >= *(void *)(a1 + 8);
    goto LABEL_4;
  }
  if (result.n128_f32[0] >= v6) {
    goto LABEL_11;
  }
LABEL_5:
  BOOL v7 = *(_DWORD *)a3 >= v4;
  if (*(_DWORD *)a3 == v4)
  {
    float v8 = *(float *)(a3 + 4);
    float v9 = *((float *)a2 + 1);
    if (vabds_f32(v8, v9) >= 0.00000011921)
    {
      if (v8 < v9) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
    BOOL v7 = *(void *)(a3 + 8) >= *((void *)a2 + 1);
  }
  if (!v7)
  {
LABEL_9:
    uint64_t result = *(__n128 *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a3;
LABEL_33:
    *(__n128 *)a3 = result;
    return result;
  }
LABEL_18:
  uint64_t result = *(__n128 *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  if (*(_DWORD *)a3 == *a2)
  {
    result.n128_u32[0] = *(_DWORD *)(a3 + 4);
    float v11 = *((float *)a2 + 1);
    if (vabds_f32(result.n128_f32[0], v11) >= 0.00000011921)
    {
      if (result.n128_f32[0] < v11)
      {
LABEL_32:
        uint64_t result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        goto LABEL_33;
      }
    }
    else if (*(void *)(a3 + 8) < *((void *)a2 + 1))
    {
      goto LABEL_32;
    }
  }
  else if (*(_DWORD *)a3 < *a2)
  {
    goto LABEL_32;
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, (int *)a2, a3, a5).n128_u64[0];
  BOOL v10 = *(_DWORD *)a4 >= *(_DWORD *)a3;
  if (*(_DWORD *)a4 != *(_DWORD *)a3)
  {
LABEL_4:
    if (v10) {
      return result;
    }
    goto LABEL_8;
  }
  result.n128_u32[0] = *(_DWORD *)(a4 + 4);
  float v11 = *(float *)(a3 + 4);
  if (vabds_f32(result.n128_f32[0], v11) < 0.00000011921)
  {
    BOOL v10 = *(void *)(a4 + 8) >= *(void *)(a3 + 8);
    goto LABEL_4;
  }
  if (result.n128_f32[0] >= v11) {
    return result;
  }
LABEL_8:
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(__n128 *)a4 = result;
  BOOL v12 = *(_DWORD *)a3 >= *(_DWORD *)a2;
  if (*(_DWORD *)a3 != *(_DWORD *)a2) {
    goto LABEL_11;
  }
  result.n128_u32[0] = *(_DWORD *)(a3 + 4);
  float v13 = *(float *)(a2 + 4);
  if (vabds_f32(result.n128_f32[0], v13) < 0.00000011921)
  {
    BOOL v12 = *(void *)(a3 + 8) >= *(void *)(a2 + 8);
LABEL_11:
    if (v12) {
      return result;
    }
    goto LABEL_15;
  }
  if (result.n128_f32[0] >= v13) {
    return result;
  }
LABEL_15:
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(__n128 *)a3 = result;
  BOOL v14 = *(_DWORD *)a2 >= *(_DWORD *)a1;
  if (*(_DWORD *)a2 != *(_DWORD *)a1) {
    goto LABEL_18;
  }
  result.n128_u32[0] = *(_DWORD *)(a2 + 4);
  float v15 = *(float *)(a1 + 4);
  if (vabds_f32(result.n128_f32[0], v15) < 0.00000011921)
  {
    BOOL v14 = *(void *)(a2 + 8) >= *(void *)(a1 + 8);
LABEL_18:
    if (v14) {
      return result;
    }
    goto LABEL_19;
  }
  if (result.n128_f32[0] >= v15) {
    return result;
  }
LABEL_19:
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, a2, a3, a4, a6).n128_u64[0];
  BOOL v12 = *(_DWORD *)a5 >= *(_DWORD *)a4;
  if (*(_DWORD *)a5 != *(_DWORD *)a4)
  {
LABEL_4:
    if (v12) {
      return result;
    }
    goto LABEL_8;
  }
  result.n128_u32[0] = *(_DWORD *)(a5 + 4);
  float v13 = *(float *)(a4 + 4);
  if (vabds_f32(result.n128_f32[0], v13) < 0.00000011921)
  {
    BOOL v12 = *(void *)(a5 + 8) >= *(void *)(a4 + 8);
    goto LABEL_4;
  }
  if (result.n128_f32[0] >= v13) {
    return result;
  }
LABEL_8:
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(__n128 *)a5 = result;
  BOOL v14 = *(_DWORD *)a4 >= *(_DWORD *)a3;
  if (*(_DWORD *)a4 != *(_DWORD *)a3) {
    goto LABEL_11;
  }
  result.n128_u32[0] = *(_DWORD *)(a4 + 4);
  float v15 = *(float *)(a3 + 4);
  if (vabds_f32(result.n128_f32[0], v15) < 0.00000011921)
  {
    BOOL v14 = *(void *)(a4 + 8) >= *(void *)(a3 + 8);
LABEL_11:
    if (v14) {
      return result;
    }
    goto LABEL_15;
  }
  if (result.n128_f32[0] >= v15) {
    return result;
  }
LABEL_15:
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(__n128 *)a4 = result;
  BOOL v16 = *(_DWORD *)a3 >= *(_DWORD *)a2;
  if (*(_DWORD *)a3 != *(_DWORD *)a2) {
    goto LABEL_18;
  }
  result.n128_u32[0] = *(_DWORD *)(a3 + 4);
  float v17 = *(float *)(a2 + 4);
  if (vabds_f32(result.n128_f32[0], v17) < 0.00000011921)
  {
    BOOL v16 = *(void *)(a3 + 8) >= *(void *)(a2 + 8);
LABEL_18:
    if (v16) {
      return result;
    }
    goto LABEL_22;
  }
  if (result.n128_f32[0] >= v17) {
    return result;
  }
LABEL_22:
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(__n128 *)a3 = result;
  BOOL v18 = *(_DWORD *)a2 >= *(_DWORD *)a1;
  if (*(_DWORD *)a2 != *(_DWORD *)a1) {
    goto LABEL_25;
  }
  result.n128_u32[0] = *(_DWORD *)(a2 + 4);
  float v19 = *(float *)(a1 + 4);
  if (vabds_f32(result.n128_f32[0], v19) < 0.00000011921)
  {
    BOOL v18 = *(void *)(a2 + 8) >= *(void *)(a1 + 8);
LABEL_25:
    if (v18) {
      return result;
    }
    goto LABEL_26;
  }
  if (result.n128_f32[0] >= v19) {
    return result;
  }
LABEL_26:
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v7 = (_OWORD *)(a2 - 16);
      unsigned int v8 = *(_DWORD *)(a2 - 16);
      if (v8 == *(_DWORD *)a1)
      {
        float v9 = *(float *)(a2 - 12);
        float v10 = *(float *)(a1 + 4);
        if (vabds_f32(v9, v10) >= 0.00000011921)
        {
          if (v9 >= v10) {
            return result;
          }
        }
        else if (*(void *)(a2 - 8) >= *(void *)(a1 + 8))
        {
          return result;
        }
      }
      else if (v8 >= *(_DWORD *)a1)
      {
        return result;
      }
      long long v23 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *v7;
      _OWORD *v7 = v23;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, (int *)(a1 + 16), a2 - 16, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      uint64_t v11 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, (int *)(a1 + 16), a1 + 32, a3);
      uint64_t v12 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (2)
  {
    unsigned int v16 = *(_DWORD *)v12;
    if (*(_DWORD *)v12 == *(_DWORD *)v11)
    {
      float v17 = *(float *)(v12 + 4);
      float v18 = *(float *)(v11 + 4);
      if (vabds_f32(v17, v18) >= 0.00000011921)
      {
        if (v17 >= v18) {
          goto LABEL_10;
        }
      }
      else if (*(void *)(v12 + 8) >= *(void *)(v11 + 8))
      {
        goto LABEL_10;
      }
    }
    else
    {
      if (v16 >= *(_DWORD *)v11) {
        goto LABEL_10;
      }
      float v17 = *(float *)(v12 + 4);
    }
    unint64_t v19 = *(void *)(v12 + 8);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
    uint64_t v15 = a1;
    if (v11 == a1) {
      goto LABEL_9;
    }
    uint64_t v20 = v13;
    while (1)
    {
      unsigned int v21 = *(_DWORD *)(a1 + v20 + 16);
      if (v16 != v21) {
        break;
      }
      float v22 = *(float *)(a1 + v20 + 20);
      if (vabds_f32(v17, v22) >= 0.00000011921)
      {
        if (v17 >= v22)
        {
LABEL_27:
          uint64_t v15 = v11;
          goto LABEL_9;
        }
      }
      else if (v19 >= *(void *)(a1 + v20 + 24))
      {
        goto LABEL_27;
      }
LABEL_21:
      v11 -= 16;
      *(_OWORD *)(a1 + v20 + 32) = *(_OWORD *)(a1 + v20 + 16);
      v20 -= 16;
      if (v20 == -32)
      {
        uint64_t v15 = a1;
        goto LABEL_9;
      }
    }
    if (v16 < v21) {
      goto LABEL_21;
    }
    uint64_t v15 = a1 + v20 + 32;
LABEL_9:
    *(_DWORD *)uint64_t v15 = v16;
    *(float *)(v15 + 4) = v17;
    *(void *)(v15 + 8) = v19;
    if (++v14 == 8) {
      return v12 + 16 == a2;
    }
LABEL_10:
    uint64_t v11 = v12;
    v13 += 16;
    v12 += 16;
    if (v12 != a2) {
      continue;
    }
    return 1;
  }
}

void sub_1A2438AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unordered_map<GeoCodecsConnectivityJunction *,long,std::hash<GeoCodecsConnectivityJunction *>,std::equal_to<GeoCodecsConnectivityJunction *>,geo::StdAllocator<std::pair<GeoCodecsConnectivityJunction * const,long>,mdm::Allocator>>::~unordered_map[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<GeoCodecsConnectivityJunction *,long>,std::__unordered_map_hasher<GeoCodecsConnectivityJunction *,std::__hash_value_type<GeoCodecsConnectivityJunction *,long>,std::hash<GeoCodecsConnectivityJunction *>,std::equal_to<GeoCodecsConnectivityJunction *>,true>,std::__unordered_map_equal<GeoCodecsConnectivityJunction *,std::__hash_value_type<GeoCodecsConnectivityJunction *,long>,std::equal_to<GeoCodecsConnectivityJunction *>,std::hash<GeoCodecsConnectivityJunction *>,true>,geo::StdAllocator<std::__hash_value_type<GeoCodecsConnectivityJunction *,long>,mdm::Allocator>>::__emplace_unique_key_args<GeoCodecsConnectivityJunction *,std::piecewise_construct_t const&,std::tuple<GeoCodecsConnectivityJunction * const&>,std::tuple<>>(float *a1, unint64_t a2, void **a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 4) + 16))(*((void *)a1 + 4), 32, 8);
  void *v12 = 0;
  v12[1] = v8;
  v12[2] = **a3;
  v12[3] = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 5) + 1);
  float v16 = a1[12];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v9 = *((void *)a1 + 1);
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_58;
      }
      unint64_t v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
LABEL_58:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_71;
      }
      if (!prime)
      {
        uint64_t v41 = *(void *)a1;
        *(void *)a1 = 0;
        if (v41) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 2) + 40))(*((void *)a1 + 2), v41, 8 * *((void *)a1 + 1));
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_58;
      }
    }
    uint64_t v21 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((void **)a1 + 2) + 16))(*((void *)a1 + 2), 8 * prime, 8);
    uint64_t v22 = *(void *)a1;
    *(void *)a1 = v21;
    if (v22) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 2) + 40))(*((void *)a1 + 2), v22, 8 * *((void *)a1 + 1));
    }
    uint64_t v23 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    unint64_t v25 = (uint64_t *)(a1 + 6);
    float v24 = (void *)*((void *)a1 + 3);
    if (!v24)
    {
LABEL_57:
      unint64_t v9 = prime;
      goto LABEL_58;
    }
    size_t v26 = v24[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*(void *)a1 + 8 * v28) = v25;
      for (unint64_t i = (void *)*v24; *v24; unint64_t i = (void *)*v24)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          float v24 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v30))
        {
          void *v24 = *i;
          uint64_t v31 = 8 * v30;
          *unint64_t i = **(void **)(*(void *)a1 + v31);
          **(void **)(*(void *)a1 + v31) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v30) = v24;
          float v24 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_57;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v26) = v25;
    unint64_t v35 = (void *)*v24;
    if (!*v24) {
      goto LABEL_57;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 != v26)
      {
        if (!*(void *)(*(void *)a1 + 8 * v37))
        {
          *(void *)(*(void *)a1 + 8 * v37) = v24;
          goto LABEL_62;
        }
        void *v24 = *v35;
        uint64_t v36 = 8 * v37;
        void *v35 = **(void **)(*(void *)a1 + v36);
        **(void **)(*(void *)a1 + v36) = v35;
        unint64_t v35 = v24;
      }
      size_t v37 = v26;
LABEL_62:
      float v24 = v35;
      unint64_t v35 = (void *)*v35;
      size_t v26 = v37;
      if (!v35) {
        goto LABEL_57;
      }
    }
  }
LABEL_71:
  float v38 = *(void **)(*(void *)a1 + 8 * v3);
  if (v38)
  {
    void *v12 = *v38;
LABEL_79:
    *float v38 = v12;
    goto LABEL_80;
  }
  void *v12 = *((void *)a1 + 3);
  *((void *)a1 + 3) = v12;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 6;
  if (*v12)
  {
    unint64_t v39 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9) {
        v39 %= v9;
      }
    }
    else
    {
      v39 &= v9 - 1;
    }
    float v38 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_79;
  }
LABEL_80:
  ++*((void *)a1 + 5);
  return v12;
}

void sub_1A2439030(_Unwind_Exception *a1)
{
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 32) + 40))(*(void *)(v1 + 32), v2, 32);
  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<GeoCodecsConnectivityJunction *,long,std::hash<GeoCodecsConnectivityJunction *>,std::equal_to<GeoCodecsConnectivityJunction *>,geo::StdAllocator<std::pair<GeoCodecsConnectivityJunction * const,long>,mdm::Allocator>>::~unordered_map[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      (*(void (**)(uint64_t))(*(void *)a1[4] + 40))(a1[4]);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v4, 8 * a1[1]);
  }
  return a1;
}

void sub_1A24392FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2439C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id *__p,id *a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (__p)
  {
    float v49 = a42;
    unint64_t v50 = __p;
    if (a42 != __p)
    {
      do
      {

        if (*((char *)v49 - 9) < 0) {
          operator delete(*(v49 - 4));
        }
        v49 -= 4;
      }
      while (v49 != __p);
      unint64_t v50 = __p;
    }
    operator delete(v50);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,VKLabelNavJunction * {__strong}>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<std::string,VKLabelNavJunction * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;

    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1A2439FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A243A27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A243A564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A243A710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A243AA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A243AAAC(_Unwind_Exception *exception_object)
{
}

void sub_1A243B2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,char a60)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_1A243B574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A243B9D0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 104) = v1;

  _Unwind_Resume(a1);
}

void sub_1A243BA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void geo::_retain_ptr<GEORoadEdge * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5593B8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<GEORoadEdge * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5593B8;

  return a1;
}

void sub_1A243C5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1A243CCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A243EB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A243EEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A243F1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A243F254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A243FD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  md::RoadSignTextMetrics::~RoadSignTextMetrics((md::RoadSignTextMetrics *)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v5 - 160);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v5 - 136);
  _Unwind_Resume(a1);
}

void sub_1A243FDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void std::make_shared[abi:nn180100]<md::NavCurrentRoadSign,NSString * {__strong},std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &,gm::Matrix<float,2,1> const&,float,VKRoadSignArtwork * {__strong}&,short &,void>(uint64_t a1, void *a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t *a5, float *a6, void **a7, __int16 *a8)
{
  float v15 = (char *)operator new(0x180uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)float v15 = &unk_1EF5808E0;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *a5;
  float v17 = *a6;
  unint64_t v18 = *a7;
  __int16 v40 = *a8;
  id v19 = a2;
  uint64_t v41 = v18;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v20 = v19;
  *((void *)v15 + 4) = 0;
  *((void *)v15 + 5) = 0;
  *((void *)v15 + 3) = &unk_1EF553DB0;
  v15[48] = 0;
  *(_WORD *)(v15 + 49) = 1;
  v15[51] = 0;
  id v42 = v20;
  uint64_t v21 = (const char *)[v42 UTF8String];
  {
    operator new();
  }
  uint64_t v22 = mdm::Allocator::instance(void)::alloc;
  *((void *)v15 + 10) = mdm::Allocator::instance(void)::alloc;
  size_t v23 = strlen(v21);
  if (v23 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v24 = v23;
  if (v23 >= 0x17)
  {
    uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v26 = v23 | 7;
    }
    uint64_t v27 = v26 + 1;
    unint64_t v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v26 + 1, 1);
    *((void *)v15 + 8) = v24;
    *((void *)v15 + 9) = v27 | 0x8000000000000000;
    *((void *)v15 + 7) = v25;
    goto LABEL_13;
  }
  unint64_t v25 = v15 + 56;
  v15[79] = v23;
  if (v23) {
LABEL_13:
  }
    memmove(v25, v21, v24);
  *((unsigned char *)v25 + v24) = 0;
  *((void *)v15 + 11) = 0;
  *((void *)v15 + 12) = 0;
  *((void *)v15 + 13) = a3;
  *((void *)v15 + 14) = a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v15[128] = 0;
  *((void *)v15 + 15) = 0;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 200) = 0u;
  *((_DWORD *)v15 + 54) = 0;
  *(void *)(v15 + 220) = 1065353216;
  *((_WORD *)v15 + 114) = 256;
  *(_OWORD *)(v15 + 232) = 0u;
  *(_OWORD *)(v15 + 248) = 0u;
  *((_DWORD *)v15 + 66) = 0;
  *(void *)(v15 + 268) = 1065353216;
  *(_DWORD *)(v15 + 275) = 0;
  *((_DWORD *)v15 + 73) = 0;
  *((_WORD *)v15 + 144) = 0;
  *((void *)v15 + 35) = 0;
  *((_DWORD *)v15 + 74) = 1065353216;
  v15[300] = 0;
  v15[304] = 0;
  *((_DWORD *)v15 + 77) = 1056964608;
  *((void *)v15 + 39) = 0;
  *(void *)(v15 + 322) = 0;
  *(void *)(v15 + 330) = 0;
  *(void *)(v15 + 338) = 0;
  *(_DWORD *)(v15 + 345) = 0;
  v15[349] = 1;
  *(void *)(v15 + 366) = 0;
  *(void *)(v15 + 350) = 0;
  *(void *)(v15 + 358) = 0;
  *((_WORD *)v15 + 187) = 0;
  *(void *)(v15 + 324) = v16;
  *((_WORD *)v15 + 160) = 257;

  if (a4 && !atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
    std::__shared_weak_count::__release_weak(a4);
  }
  *((void *)v15 + 3) = &unk_1EF5399D8;
  *((_DWORD *)v15 + 94) = 0;
  [(VKRoadSignArtwork *)v41 localRenderBounds];
  float v30 = v29 - v28;
  float v31 = v17 * (float)v40;
  *((_DWORD *)v15 + 70) = 0;
  *((float *)v15 + 71) = v31 + (float)(v30 * 0.5);
  *((float *)v15 + 94) = v30 + v31;
  unint64_t v32 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v32->__shared_owners_ = 0;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5804F0;
  __n128 v43 = md::RoadSignLabelIcon::RoadSignLabelIcon((md::RoadSignLabelIcon *)&v32[1], v41);
  unint64_t v44 = v32;
  {
    operator new();
  }
  uint8x8_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 848, 8);
  md::IconLabelPart::IconLabelPart((uint64_t)v33, &v43);
  *(unsigned char *)(v34 + 766) = 9;
  *(unsigned char *)(v34 + 768) = 0;
  *(_OWORD *)(v34 + 816) = 0u;
  *(_OWORD *)(v34 + 832) = 0u;
  *(_OWORD *)(v34 + 776) = 0u;
  *(_OWORD *)(v34 + 792) = 0u;
  *(unsigned char *)(v34 + 808) = 0;
  *(unsigned char *)(v34 + 557) = 3;
  *(unsigned char *)(v34 + 656) = 3;
  *(unsigned char *)(v34 + 664) = 0;
  unint64_t v35 = (void (**)(void *, uint64_t))&unk_1EF53DFB8;
  *(void *)uint64_t v34 = &unk_1EF53DFB8;
  uint64_t v36 = *((void *)v15 + 39);
  *((void *)v15 + 39) = v33;
  if (v36)
  {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    unint64_t v35 = (void (**)(void *, uint64_t))*v33;
  }
  v35[3](v33, (uint64_t)(v15 + 200));
  size_t v37 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }

  if (a4 && !atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
    std::__shared_weak_count::__release_weak(a4);
  }
  void *v39 = v15 + 24;
  v39[1] = v15;
}

void sub_1A2440400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14)
{
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  md::NavLabel::~NavLabel(v16);

  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::NavCurrentRoadSign>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::NavCurrentRoadSign>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5808E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::NavCurrentRoadSign>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5808E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

int *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKeyAtZ<int>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(a1 + 16 * a3 + 16);
  if (v4)
  {
    uint64_t v6 = a1 + 16 * a3;
    uint64_t v7 = *(unsigned __int16 *)(v6 + 56);
    if (!*(_WORD *)(v6 + 56)) {
      return gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(*(int **)(v4 + 72), 0x42u, a2, a4);
    }
    uint64_t v8 = *(void *)(v6 + 48);
    uint64_t v9 = v8 + 8 * v7;
    if (a2 >= 0x17) {
      uint64_t v10 = 23;
    }
    else {
      uint64_t v10 = a2;
    }
    while (1)
    {
      uint64_t v12 = *(uint64_t **)(*(void *)v8 + 72);
      if (!v12) {
        goto LABEL_8;
      }
      uint64_t v15 = *v12;
      uint64_t v14 = v12 + 2;
      uint64_t v13 = v15;
      uint64_t v16 = v15 + 80 * *((unsigned __int8 *)v14 + a2);
      unint64_t v17 = *(unsigned __int16 *)(v16 + 10);
      if (!*(_WORD *)(v16 + 10))
      {
        unsigned __int16 v11 = 0;
        goto LABEL_7;
      }
      unint64_t v18 = *(unsigned __int8 **)v16;
      if (!*(unsigned char *)(v16 + 15)) {
        break;
      }
      id v19 = *(unsigned __int8 **)v16;
      unint64_t v20 = v17;
      if (v17 >= 0x1E)
      {
        do
        {
          unint64_t v23 = v20 >> 1;
          size_t v24 = &v19[v20 >> 1];
          unsigned int v26 = *v24;
          unint64_t v25 = v24 + 1;
          v20 += ~(v20 >> 1);
          if (v26 < 0x42) {
            id v19 = v25;
          }
          else {
            unint64_t v20 = v23;
          }
        }
        while (v20);
        if (v19 == &v18[v17] || *v19 != 66) {
          goto LABEL_8;
        }
        goto LABEL_28;
      }
      uint64_t v21 = 0;
      while (1)
      {
        unsigned int v22 = v18[v21];
        if (v22 >= 0x42) {
          break;
        }
        if (v17 == ++v21) {
          goto LABEL_8;
        }
      }
      if (v22 == 66) {
        unsigned __int16 v11 = v21;
      }
      else {
        unsigned __int16 v11 = v17;
      }
LABEL_7:
      if (v17 != v11)
      {
        unsigned int v29 = *((unsigned __int8 *)v14 + v10);
        uint64_t v30 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        float v31 = (unsigned __int8 *)*(unsigned __int16 *)(v30 + 42);
        if (!*(_WORD *)(v30 + 42)) {
          return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        uint64_t v32 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        uint64_t v33 = *(void *)(v32 + 32);
        if (*(unsigned char *)(v32 + 47))
        {
          if (v31 < 0x1E)
          {
            uint64_t v34 = 0;
            BOOL result = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              unsigned int v35 = v34[v33];
              if (v35 >= 0x42) {
                break;
              }
              if (v31 == ++v34) {
                return result;
              }
            }
            if (v35 != 66) {
              LOWORD(v34) = (_WORD)v31;
            }
            if (v31 <= (unsigned __int16)v34) {
              return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            }
            return (int *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 40) + 4 * (unsigned __int16)v34);
          }
          uint64_t v34 = *(unsigned __int8 **)(v32 + 32);
          unint64_t v37 = (unint64_t)v31;
          do
          {
            float v38 = (unsigned char *)(v37 >> 1);
            unint64_t v39 = &v34[v37 >> 1];
            unsigned int v41 = *v39;
            __int16 v40 = v39 + 1;
            v37 += ~(v37 >> 1);
            if (v41 < 0x42) {
              uint64_t v34 = v40;
            }
            else {
              unint64_t v37 = (unint64_t)v38;
            }
          }
          while (v37);
          if (v34 == &v31[v33] || *v34 != 66) {
            return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
        }
        else
        {
          uint64_t v36 = v31;
          uint64_t v34 = *(unsigned __int8 **)(v32 + 32);
          while (*v34 != 66)
          {
            ++v34;
            if (!--v36)
            {
              LOWORD(v34) = v33 + (_WORD)v31;
              break;
            }
          }
        }
        LOWORD(v34) = (_WORD)v34 - v33;
        if (v31 <= (unsigned __int16)v34) {
          return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        return (int *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 40) + 4 * (unsigned __int16)v34);
      }
LABEL_8:
      v8 += 8;
      if (v8 == v9) {
        return gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(*(int **)(v4 + 72), 0x42u, a2, a4);
      }
    }
    uint64_t v27 = *(unsigned __int16 *)(v16 + 10);
    id v19 = *(unsigned __int8 **)v16;
    while (*v19 != 66)
    {
      ++v19;
      if (!--v27)
      {
        LOWORD(v19) = (_WORD)v18 + v17;
        break;
      }
    }
LABEL_28:
    unsigned __int16 v11 = (_WORD)v19 - (_WORD)v18;
    goto LABEL_7;
  }
  if (a4) {
    *a4 = 0;
  }
  return (int *)gss::defaultValueForKey<gss::ScenePropertyID,int>(66);
}

unsigned __int8 *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKeyAtZ<BOOL>(unsigned __int8 *result, unsigned int a2, int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)&result[16 * a3 + 16];
  if (!v4)
  {
    if (a4) {
      *a4 = 0;
    }
    return (unsigned __int8 *)gss::defaultValueForKey<gss::ScenePropertyID,BOOL>();
  }
  uint64_t v5 = (char *)&result[16 * a3];
  uint64_t v6 = *((unsigned __int16 *)v5 + 28);
  if (!*((_WORD *)v5 + 28))
  {
LABEL_32:
    size_t v24 = *(uint64_t **)(v4 + 72);
    if (v24)
    {
      uint64_t v25 = a2 >= 0x17 ? 23 : a2;
      unsigned int v26 = *((unsigned __int8 *)v24 + v25 + 16);
      uint64_t v27 = *v24;
      uint64_t v28 = v27 + 80 * v26;
      unint64_t v29 = *(unsigned __int16 *)(v28 + 10);
      if (*(_WORD *)(v28 + 10))
      {
        uint64_t v30 = *(unsigned __int8 **)v28;
        if (!*(unsigned char *)(v28 + 15))
        {
          uint64_t v40 = *(unsigned __int16 *)(v28 + 10);
          unsigned int v41 = *(unsigned __int8 **)v28;
          while (*v41 != 62)
          {
            ++v41;
            if (!--v40)
            {
              LOWORD(v41) = (_WORD)v30 + v29;
              break;
            }
          }
LABEL_65:
          if (v29 != (unsigned __int16)((_WORD)v41 - (_WORD)v30)) {
            goto LABEL_73;
          }
          goto LABEL_66;
        }
        if (v29 < 0x1E)
        {
          uint64_t v31 = 0;
          while (1)
          {
            unsigned int v32 = v30[v31];
            if (v32 >= 0x3E) {
              break;
            }
            if (v29 == ++v31) {
              goto LABEL_66;
            }
          }
          if (v32 == 62) {
            unsigned __int16 v47 = v31;
          }
          else {
            unsigned __int16 v47 = v29;
          }
          if (v29 != v47)
          {
LABEL_73:
            uint64_t v48 = v27 + 80 * v26;
            float v49 = (unsigned __int8 *)*(unsigned __int16 *)(v48 + 26);
            if (!*(_WORD *)(v48 + 26)) {
              return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            }
            uint64_t v50 = v27 + 80 * v26;
            uint64_t v37 = *(void *)(v50 + 16);
            if (*(unsigned char *)(v50 + 31))
            {
              if (v49 < 0x1E)
              {
                float v38 = 0;
                BOOL result = (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
                while (1)
                {
                  unsigned int v51 = v38[v37];
                  if (v51 >= 0x3E) {
                    break;
                  }
                  if (v49 == ++v38) {
                    return result;
                  }
                }
                if (v51 != 62) {
                  LOWORD(v38) = (_WORD)v49;
                }
                if (v49 == (unsigned __int16)v38) {
                  return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
                }
                goto LABEL_115;
              }
              float v38 = *(unsigned __int8 **)(v50 + 16);
              unint64_t v59 = (unint64_t)v49;
              do
              {
                float v60 = (unsigned char *)(v59 >> 1);
                long double v61 = &v38[v59 >> 1];
                unsigned int v63 = *v61;
                long double v62 = v61 + 1;
                v59 += ~(v59 >> 1);
                if (v63 < 0x3E) {
                  float v38 = v62;
                }
                else {
                  unint64_t v59 = (unint64_t)v60;
                }
              }
              while (v59);
              if (v38 == &v49[v37] || *v38 != 62) {
                return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
              }
            }
            else
            {
              unsigned int v53 = v49;
              float v38 = *(unsigned __int8 **)(v50 + 16);
              while (*v38 != 62)
              {
                ++v38;
                if (!--v53)
                {
                  LOWORD(v38) = v37 + (_WORD)v49;
                  break;
                }
              }
            }
            LOWORD(v38) = (_WORD)v38 - v37;
            if (v49 == (unsigned __int16)v38) {
              return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            }
LABEL_115:
            if (v49 > (unsigned __int16)v38)
            {
              uint64_t v64 = v27 + 80 * v26;
              return (unsigned __int8 *)(v37 + *(unsigned __int16 *)(v64 + 24) + (unsigned __int16)v38);
            }
            return result;
          }
          goto LABEL_66;
        }
        unsigned int v41 = *(unsigned __int8 **)v28;
        unint64_t v42 = v29;
        do
        {
          unint64_t v43 = v42 >> 1;
          unint64_t v44 = &v41[v42 >> 1];
          unsigned int v46 = *v44;
          unsigned int v45 = v44 + 1;
          v42 += ~(v42 >> 1);
          if (v46 < 0x3E) {
            unsigned int v41 = v45;
          }
          else {
            unint64_t v42 = v43;
          }
        }
        while (v42);
        if (v41 != &v30[v29] && *v41 == 62) {
          goto LABEL_65;
        }
      }
    }
LABEL_66:
    if (a4) {
      *a4 = 0;
    }
    return (unsigned __int8 *)gss::defaultValueForKey<gss::ScenePropertyID,BOOL>();
  }
  uint64_t v7 = *((void *)v5 + 6);
  uint64_t v8 = v7 + 8 * v6;
  if (a2 >= 0x17) {
    uint64_t v9 = 23;
  }
  else {
    uint64_t v9 = a2;
  }
  while (1)
  {
    unsigned __int16 v11 = *(uint64_t **)(*(void *)v7 + 72);
    if (!v11) {
      goto LABEL_8;
    }
    uint64_t v14 = *v11;
    uint64_t v13 = v11 + 2;
    uint64_t v12 = v14;
    BOOL result = (unsigned __int8 *)(v14 + 80 * *((unsigned __int8 *)v13 + a2));
    uint64_t v15 = (unsigned __int8 *)*((unsigned __int16 *)result + 5);
    if (!*((_WORD *)result + 5))
    {
      unsigned __int16 v10 = 0;
      goto LABEL_7;
    }
    uint64_t v16 = *(unsigned __int8 **)result;
    if (!result[15])
    {
      uint64_t v23 = *((unsigned __int16 *)result + 5);
      BOOL result = *(unsigned __int8 **)result;
      while (*result != 62)
      {
        ++result;
        if (!--v23)
        {
          BOOL result = &v15[(void)v16];
          break;
        }
      }
LABEL_28:
      unsigned __int16 v10 = (_WORD)result - (_WORD)v16;
      goto LABEL_7;
    }
    BOOL result = *(unsigned __int8 **)result;
    unint64_t v17 = (unint64_t)v15;
    if (v15 >= 0x1E)
    {
      do
      {
        id v19 = (char *)(v17 >> 1);
        unint64_t v20 = &result[v17 >> 1];
        unsigned int v22 = *v20;
        uint64_t v21 = v20 + 1;
        v17 += ~(v17 >> 1);
        if (v22 < 0x3E) {
          BOOL result = v21;
        }
        else {
          unint64_t v17 = (unint64_t)v19;
        }
      }
      while (v17);
      if (result == &v15[(void)v16] || *result != 62) {
        goto LABEL_8;
      }
      goto LABEL_28;
    }
    BOOL result = 0;
    while (1)
    {
      unsigned int v18 = result[(void)v16];
      if (v18 >= 0x3E) {
        break;
      }
      if (v15 == ++result) {
        goto LABEL_8;
      }
    }
    unsigned __int16 v10 = v18 == 62 ? (unsigned __int16)result : (unsigned __int16)v15;
LABEL_7:
    if (v15 != v10) {
      break;
    }
LABEL_8:
    v7 += 8;
    if (v7 == v8) {
      goto LABEL_32;
    }
  }
  unsigned int v33 = *((unsigned __int8 *)v13 + v9);
  uint64_t v34 = v12 + 80 * *((unsigned __int8 *)v13 + v9);
  unsigned int v35 = (unsigned __int8 *)*(unsigned __int16 *)(v34 + 26);
  if (!*(_WORD *)(v34 + 26)) {
    return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  uint64_t v36 = v12 + 80 * *((unsigned __int8 *)v13 + v9);
  uint64_t v37 = *(void *)(v36 + 16);
  if (!*(unsigned char *)(v36 + 31))
  {
    float v52 = v35;
    float v38 = *(unsigned __int8 **)(v36 + 16);
    while (*v38 != 62)
    {
      ++v38;
      if (!--v52)
      {
        LOWORD(v38) = v37 + (_WORD)v35;
        break;
      }
    }
LABEL_95:
    LOWORD(v38) = (_WORD)v38 - v37;
    if (v35 > (unsigned __int16)v38) {
      goto LABEL_109;
    }
    return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  if (v35 >= 0x1E)
  {
    float v38 = *(unsigned __int8 **)(v36 + 16);
    unint64_t v54 = (unint64_t)v35;
    do
    {
      float v55 = (unsigned char *)(v54 >> 1);
      BOOL v56 = &v38[v54 >> 1];
      unsigned int v58 = *v56;
      unsigned int v57 = v56 + 1;
      v54 += ~(v54 >> 1);
      if (v58 < 0x3E) {
        float v38 = v57;
      }
      else {
        unint64_t v54 = (unint64_t)v55;
      }
    }
    while (v54);
    if (v38 == &v35[v37] || *v38 != 62) {
      return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
    goto LABEL_95;
  }
  float v38 = 0;
  BOOL result = (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  while (1)
  {
    unsigned int v39 = v38[v37];
    if (v39 >= 0x3E) {
      break;
    }
    if (v35 == ++v38) {
      return result;
    }
  }
  if (v39 != 62) {
    LOWORD(v38) = (_WORD)v35;
  }
  if (v35 > (unsigned __int16)v38)
  {
LABEL_109:
    uint64_t v64 = v12 + 80 * v33;
    return (unsigned __int8 *)(v37 + *(unsigned __int16 *)(v64 + 24) + (unsigned __int16)v38);
  }
  return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
}

void sub_1A24411D4(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A2441CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

_OWORD *std::vector<std::shared_ptr<md::NavLabel>,geo::StdAllocator<std::shared_ptr<md::NavLabel>,mdm::Allocator>>::push_back[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  if ((unint64_t)v3 >= *(void *)(a1 + 16))
  {
    BOOL result = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a1, (long long *)a2);
  }
  else
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(a2 + 8);
      void *v3 = *(void *)a2;
      v3[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
    }
    BOOL result = v3 + 2;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1A2442648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24427F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24428E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2442EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  std::unordered_set<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::~unordered_set[abi:nn180100](v12);
  std::unordered_set<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::~unordered_set[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::shared_ptr<md::LabelTile>,std::hash<std::shared_ptr<md::LabelTile>>,std::equal_to<std::shared_ptr<md::LabelTile>>,geo::StdAllocator<std::shared_ptr<md::LabelTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelTile>,std::shared_ptr<md::LabelTile> const&>(unint64_t result, unint64_t a2, void *a3)
{
  uint64_t v5 = result;
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(result + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unsigned __int16 v11 = *(void **)(*(void *)result + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return result;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return result;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 32) + 16))(*(void *)(result + 32), 32, 8);
  unint64_t v15 = result;
  *(void *)BOOL result = 0;
  *(void *)(result + 8) = v8;
  *(void *)(result + 16) = *a3;
  uint64_t v16 = a3[1];
  *(void *)(result + 24) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  float v17 = (float)(unint64_t)(*(void *)(v5 + 40) + 1);
  float v18 = *(float *)(v5 + 48);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    if (v22 == 1)
    {
      size_t v22 = 2;
    }
    else if ((v22 & (v22 - 1)) != 0)
    {
      BOOL result = std::__next_prime(v22);
      size_t v22 = result;
    }
    int8x8_t v23 = *(int8x8_t *)(v5 + 8);
    if (v22 > *(void *)&v23) {
      goto LABEL_36;
    }
    if (v22 < *(void *)&v23)
    {
      BOOL result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (*(void *)&v23 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v23), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        BOOL result = std::__next_prime(result);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(result - 1);
        if (result >= 2) {
          BOOL result = v25;
        }
      }
      if (v22 <= result) {
        size_t v22 = result;
      }
      if (v22 < *(void *)&v23) {
LABEL_36:
      }
        BOOL result = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(v5, v22);
    }
    unint64_t v9 = *(void *)(v5 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unsigned int v26 = *(unint64_t **)(*(void *)v5 + 8 * v3);
  if (v26)
  {
    *(void *)unint64_t v15 = *v26;
LABEL_60:
    *unsigned int v26 = v15;
    goto LABEL_61;
  }
  *(void *)unint64_t v15 = *(void *)(v5 + 24);
  *(void *)(v5 + 24) = v15;
  *(void *)(*(void *)v5 + 8 * v3) = v5 + 24;
  if (*(void *)v15)
  {
    unint64_t v27 = *(void *)(*(void *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    unsigned int v26 = (unint64_t *)(*(void *)v5 + 8 * v27);
    goto LABEL_60;
  }
LABEL_61:
  ++*(void *)(v5 + 40);
  return result;
}

void sub_1A2443240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t std::unordered_set<std::shared_ptr<md::LabelTile>,std::hash<std::shared_ptr<md::LabelTile>>,std::equal_to<std::shared_ptr<md::LabelTile>>,geo::StdAllocator<std::shared_ptr<md::LabelTile>,mdm::Allocator>>::unordered_set(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v7 = *(int8x8_t *)(a1 + 8);
    BOOL v8 = prime >= *(void *)&v7;
    if (prime > *(void *)&v7) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v7 = 0;
    BOOL v8 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v8)
  {
    unint64_t v9 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (*(void *)&v7 < 3uLL || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(v7), v10.i16[0] = vaddlv_u8(v10), v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      size_t prime = v9;
    }
    if (prime < *(void *)&v7) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 24); i; uint64_t i = (void *)*i)
    std::__hash_table<std::shared_ptr<md::LabelTile>,std::hash<std::shared_ptr<md::LabelTile>>,std::equal_to<std::shared_ptr<md::LabelTile>>,geo::StdAllocator<std::shared_ptr<md::LabelTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelTile>,std::shared_ptr<md::LabelTile> const&>(a1, i[2], i + 2);
  return a1;
}

void sub_1A24433C0(_Unwind_Exception *a1)
{
  std::unordered_set<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::shared_ptr<md::LabelTile>,std::hash<std::shared_ptr<md::LabelTile>>,std::equal_to<std::shared_ptr<md::LabelTile>>,geo::StdAllocator<std::shared_ptr<md::LabelTile>,mdm::Allocator>>::__erase_unique<std::shared_ptr<md::LabelTile>>(void *result, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  if (v2)
  {
    unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
    unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v7 = v5;
      if (v5 >= *(void *)&v2) {
        unint64_t v7 = v5 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v7 = v5 & (*(void *)&v2 - 1);
    }
    BOOL v8 = *(void ***)(*result + 8 * v7);
    if (v8)
    {
      unint64_t v9 = *v8;
      if (*v8)
      {
        if (v6.u32[0] < 2uLL)
        {
          uint64_t v10 = *(void *)&v2 - 1;
          while (1)
          {
            uint64_t v12 = v9[1];
            if (v12 == v5)
            {
              if (v9[2] == a2) {
                goto LABEL_22;
              }
            }
            else if ((v12 & v10) != v7)
            {
              return result;
            }
            unint64_t v9 = (void *)*v9;
            if (!v9) {
              return result;
            }
          }
        }
        do
        {
          unint64_t v11 = v9[1];
          if (v11 == v5)
          {
            if (v9[2] == a2)
            {
LABEL_22:
              BOOL result = (void *)std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v15, result, v9);
              uint64_t v13 = v15;
              uint64_t v15 = 0;
              if (v13)
              {
                if (v17)
                {
                  uint64_t v14 = *(std::__shared_weak_count **)(v13 + 24);
                  if (v14)
                  {
                    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                      std::__shared_weak_count::__release_weak(v14);
                    }
                  }
                }
                return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v16 + 40))(*v16, v13, 32);
              }
              return result;
            }
          }
          else
          {
            if (v11 >= *(void *)&v2) {
              v11 %= *(void *)&v2;
            }
            if (v11 != v7) {
              return result;
            }
          }
          unint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
  return result;
}

void *std::__hash_table<std::shared_ptr<md::LabelTile>,std::hash<std::shared_ptr<md::LabelTile>>,std::equal_to<std::shared_ptr<md::LabelTile>>,geo::StdAllocator<std::shared_ptr<md::LabelTile>,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<md::LabelTile>,void *> *>>(void *result, void *a2)
{
  unint64_t v3 = (unint64_t)result;
  uint64_t v4 = result[1];
  if (!v4) {
    goto LABEL_13;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*result + 8 * i) = 0;
  result[5] = 0;
  uint8x8_t v6 = (void *)result[3];
  result[3] = 0;
  if (v6)
  {
    while (a2)
    {
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = (std::__shared_weak_count *)v6[3];
      v6[2] = v9;
      v6[3] = v8;
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      unint64_t v7 = (void *)*v6;
      BOOL result = (void *)std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__node_insert_multi(v3, v6);
      a2 = (void *)*a2;
      uint8x8_t v6 = v7;
      if (!v7) {
        goto LABEL_13;
      }
    }
    do
    {
      uint64_t v16 = v6;
      uint8x8_t v6 = (void *)*v6;
      char v17 = (std::__shared_weak_count *)v16[3];
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      BOOL result = (void *)(*(uint64_t (**)(void, void *, uint64_t))(**(void **)(v3 + 32) + 40))(*(void *)(v3 + 32), v16, 32);
    }
    while (v6);
  }
  else
  {
LABEL_13:
    while (a2)
    {
      unint64_t v11 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 32) + 16))(*(void *)(v3 + 32), 32, 8);
      void *v11 = 0;
      v11[1] = 0;
      unint64_t v12 = a2[2];
      uint64_t v13 = a2[3];
      void v11[2] = v12;
      v11[3] = v13;
      if (v13)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        unint64_t v12 = v11[2];
      }
      unint64_t v14 = HIDWORD(v12);
      unint64_t v15 = 0x9DDFEA08EB382D69 * (((8 * v12) + 8) ^ HIDWORD(v12));
      v11[1] = 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) ^ ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) >> 47));
      BOOL result = (void *)std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__node_insert_multi(v3, v11);
      a2 = (void *)*a2;
    }
  }
  return result;
}

void sub_1A24437C4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 32) + 40))(*(void *)(v1 + 32), v2, 32);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_32c135_ZTSNSt3__113unordered_setINS_10shared_ptrIN2md9LabelTileEEENS_4hashIS4_EENS_8equal_toIS4_EEN3geo12StdAllocatorIS4_N3mdm9AllocatorEEEEE(uint64_t result)
{
  uint64_t v1 = result;
  for (uint64_t i = *(void **)(result + 56);
        i;
        BOOL result = (*(uint64_t (**)(void, void *, uint64_t))(**(void **)(v1 + 64) + 40))(*(void *)(v1 + 64), v3, 32))
  {
    unint64_t v3 = i;
    uint64_t i = (void *)*i;
    uint64_t v4 = (std::__shared_weak_count *)v3[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  uint64_t v5 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v5)
  {
    uint8x8_t v6 = *(uint64_t (**)(void))(**(void **)(v1 + 48) + 40);
    return v6();
  }
  return result;
}

unint64_t __copy_helper_block_ea8_32c135_ZTSNSt3__113unordered_setINS_10shared_ptrIN2md9LabelTileEEENS_4hashIS4_EENS_8equal_toIS4_EEN3geo12StdAllocatorIS4_N3mdm9AllocatorEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_set<std::shared_ptr<md::LabelTile>,std::hash<std::shared_ptr<md::LabelTile>>,std::equal_to<std::shared_ptr<md::LabelTile>>,geo::StdAllocator<std::shared_ptr<md::LabelTile>,mdm::Allocator>>::unordered_set(a1 + 32, a2 + 32);
}

void sub_1A2443AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2443BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2443E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ggl::TransitNodeRGB::BasePipelineState::~BasePipelineState(ggl::TransitNodeRGB::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::TransitNodeRGB::BasePipelineSetup::textureIsEnabled(ggl::TransitNodeRGB::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::TransitNodeRGB::BasePipelineSetup::constantDataIsEnabled(ggl::TransitNodeRGB::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::TransitNodeRGB::BasePipelineSetup::~BasePipelineSetup(ggl::TransitNodeRGB::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A24443F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2444620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24449BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24449EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2444B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2444BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::PrefilteredLine::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::PrefilteredLine::PrefilteredLineMesh::~PrefilteredLineMesh(ggl::PrefilteredLine::PrefilteredLineMesh *this)
{
  ggl::Mesh::~Mesh((ggl::PrefilteredLine::PrefilteredLineMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::PrefilteredLine::PrefilteredLineMesh *)((char *)this - 16));
}

void ggl::PrefilteredLine::PrefilteredLineMesh::~PrefilteredLineMesh(ggl::PrefilteredLine::PrefilteredLineMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::PrefilteredLine::PrefilteredLinePipelineState::~PrefilteredLinePipelineState(ggl::PrefilteredLine::PrefilteredLinePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::PrefilteredLine::PrefilteredLinePipelineSetup::textureIsEnabled(ggl::PrefilteredLine::PrefilteredLinePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::PrefilteredLine::PrefilteredLinePipelineSetup::constantDataIsEnabled(ggl::PrefilteredLine::PrefilteredLinePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::PrefilteredLine::PrefilteredLinePipelineSetup::~PrefilteredLinePipelineSetup(ggl::PrefilteredLine::PrefilteredLinePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::SelectedTransitLayerDataSource::resourceKeyForType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  int32x2_t v12 = vrev64_s32(*(int32x2_t *)(a2 + 4));
  int v13 = *(unsigned __int8 *)(a2 + 1);
  uint64_t v14 = [*(id *)(a1 + 824) muid];
  uint64_t v15 = GEOTransitLineSelectionAdditionalInfoMake();
  uint64_t v16 = v9;
  if (*(unsigned char *)a4) {
    int v10 = *(_DWORD *)(a4 + 4);
  }
  else {
    int v10 = 2147483646;
  }
  return gdc::ResourceKey::ResourceKey(a5, *(_WORD *)(a1 + 584), (uint64_t)&v12, 0x28uLL, a3, v10);
}

void md::SelectedTransitLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (unsigned __int16 *)*a3;
  uint64_t v9 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v9)
  {
    while (*v8 != *(unsigned __int16 *)(a1 + 584))
    {
      v8 += 24;
      if (v8 == v9) {
        goto LABEL_11;
      }
    }
  }
  if (v8 == v9 || *((void *)v8 + 4) != 1)
  {
LABEL_11:
    uint64_t v11 = 0;
LABEL_12:
    uint64_t v31 = v11;
    unsigned int v32 = 0;
    if (!v11) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  uint64_t v10 = *((void *)v8 + 3);
  uint64_t v11 = *(void *)(v10 + 112);
  int32x2_t v12 = *(std::__shared_weak_count **)(v10 + 120);
  if (!v12) {
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v31 = v11;
  unsigned int v32 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v11 = v31;
    if (!v31)
    {
LABEL_10:
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v11 = v31;
    if (!v31) {
      goto LABEL_10;
    }
  }
LABEL_13:
  uint64_t v14 = *(void *)(v11 + 144);
  int v13 = *(std::__shared_weak_count **)(v11 + 152);
  uint64_t v29 = v14;
  uint64_t v30 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_15:
  sp_mut = std::__get_sp_mut((const void *)(a1 + 792));
  std::__sp_mut::lock(sp_mut);
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 800);
  uint64_t v27 = *(void *)(a1 + 792);
  uint64_t v28 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  memset(v26, 0, sizeof(v26));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v26);
  float v17 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 808)));
  id v18 = *(id *)(a1 + 760);
  uint64_t v19 = *(void *)(a1 + 776);
  unint64_t v20 = (char *)operator new(0x578uLL);
  *(_OWORD *)(v20 + 8) = 0u;
  *(void *)unint64_t v20 = &unk_1EF580100;
  long long v33 = 0u;
  uint64_t v21 = md::TransitTileData::TransitTileData((uint64_t)(v20 + 24), a2, &v29, &v27, v18, v19, &v33, (uint64_t)v26, v17);
  size_t v22 = v26[0];
  *a4 = v21;
  a4[1] = (uint64_t)v20;

  if (v22) {
    operator delete(v22);
  }
  int8x8_t v23 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    uint8x8_t v24 = v30;
    if (!v30) {
      goto LABEL_23;
    }
  }
  else
  {
    uint8x8_t v24 = v30;
    if (!v30) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    uint64_t v25 = v32;
    if (!v32) {
      return;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v25 = v32;
  if (!v32) {
    return;
  }
LABEL_24:
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
}

void sub_1A244574C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v20);

  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a15);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void md::SelectedTransitLayerDataSource::constructRequests(uint64_t a1, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    uint8x8_t v6 = a2;
    do
    {
      uint64_t v8 = (unsigned __int8 *)*v6;
      uint64_t v9 = (int32x2_t *)(*v6)[2];
      __int32 v10 = v9[1].i32[0];
      v18[0] = v9[1].i32[1];
      v18[1] = v10;
      int32x2_t v19 = vrev64_s32(*v9);
      if (*(void *)(a1 + 824) && *(_DWORD *)(a1 + 840) > v10)
      {
        uint64_t v11 = *v8;
        uint64_t v12 = *((void *)v8 + 14);
        v13[0] = 0;
        if (v8[96])
        {
          int v14 = *((_DWORD *)v8 + 25);
          v13[0] = 1;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unsigned char *, uint64_t, char *))(*(void *)a1 + 144))(&v15, a1, v11, v18, v12, v13);
        if (v13[0]) {
          v13[0] = 0;
        }
        gdc::LayerDataRequest::request(*v6, (uint64_t)&v15, 0);
        if (v16 != v17) {
          free(v16);
        }
      }
      v6 += 2;
    }
    while (v6 != a3);
  }
}

void md::SelectedTransitLayerDataSource::~SelectedTransitLayerDataSource(md::SelectedTransitLayerDataSource *this)
{
  md::SelectedTransitLayerDataSource::~SelectedTransitLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF54C4B8;
  *((void *)this + 102) = &unk_1EF5598B8;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 98);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 98);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  *((void *)this + 94) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void geo::_retain_ptr<GEOMapItemIdentifier * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5598B8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<GEOMapItemIdentifier * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5598B8;

  return a1;
}

void md::SelectedTransitLayerDataSource::setSelectedLine(md::SelectedTransitLayerDataSource *this, GEOMapItemIdentifier *a2, int a3)
{
  uint64_t v15 = a2;
  if (![(GEOMapItemIdentifier *)v15 isEqual:*((void *)this + 103)]
    || *((_DWORD *)this + 210) != a3)
  {
    uint64_t v5 = (void *)*((void *)this + 2);
    std::__list_imp<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>>::CacheEntry>>::clear(v5);
    if (v5[6])
    {
      uint8x8_t v6 = (unsigned char *)v5[5];
      if (v6)
      {
        do
        {
          if (v6[112]) {
            v6[112] = 0;
          }
          int v13 = *(unsigned char **)v6;
          int v14 = (void *)*((void *)v6 + 4);
          if (v14 != *((void **)v6 + 6)) {
            free(v14);
          }
          operator delete(v6);
          uint8x8_t v6 = v13;
        }
        while (v13);
      }
      v5[5] = 0;
      uint64_t v7 = v5[4];
      if (v7)
      {
        for (uint64_t i = 0; i != v7; ++i)
          *(void *)(v5[3] + 8 * i) = 0;
      }
      v5[6] = 0;
    }
    v5[8] = v5;
    v5[9] = 0;
    uint64_t v9 = v15;
    __int32 v10 = v9;
    if (v9) {
      uint64_t v11 = v9;
    }
    uint64_t v12 = (void *)*((void *)this + 103);
    *((void *)this + 103) = v10;

    *((_DWORD *)this + 210) = a3;
  }
}

void sub_1A2445BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2445DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id initAVCaptureSessionInterruptionReasonKey(void)
{
  if (LoadAVFoundation(void)::loadPredicate != -1) {
    dispatch_once(&LoadAVFoundation(void)::loadPredicate, &__block_literal_global_117);
  }
  os_log_t v0 = (id *)dlsym((void *)LoadAVFoundation(void)::frameworkLibrary, "AVCaptureSessionInterruptionReasonKey");
  objc_storeStrong((id *)&constantAVCaptureSessionInterruptionReasonKey, *v0);
  getAVCaptureSessionInterruptionReasonKedouble y = (uint64_t (*)(void))AVCaptureSessionInterruptionReasonKeyFunction;
  uint64_t v1 = (void *)constantAVCaptureSessionInterruptionReasonKey;
  return v1;
}

id AVCaptureSessionInterruptionReasonKeyFunction(void)
{
  return (id)constantAVCaptureSessionInterruptionReasonKey;
}

void ___ZL16LoadAVFoundationv_block_invoke()
{
  LoadAVFoundation(void)::frameworkLibrardouble y = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
  if (!LoadAVFoundation(void)::frameworkLibrary) {
    NSLog((NSString *)@"### Failed to Soft Linked: /System/Library/Frameworks/AVFoundation.framework/AVFoundation");
  }
}

void sub_1A2445F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A244608C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2446240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24463E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24464C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  __int32 v10 = v9;

  a9.super_class = (Class)MDARController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A2446664(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

id initAVCaptureSessionWasInterruptedNotification(void)
{
  if (LoadAVFoundation(void)::loadPredicate != -1) {
    dispatch_once(&LoadAVFoundation(void)::loadPredicate, &__block_literal_global_117);
  }
  os_log_t v0 = (id *)dlsym((void *)LoadAVFoundation(void)::frameworkLibrary, "AVCaptureSessionWasInterruptedNotification");
  objc_storeStrong((id *)&constantAVCaptureSessionWasInterruptedNotification, *v0);
  getAVCaptureSessionWasInterruptedNotificatiouint64_t n = (uint64_t (*)(void))AVCaptureSessionWasInterruptedNotificationFunction;
  uint64_t v1 = (void *)constantAVCaptureSessionWasInterruptedNotification;
  return v1;
}

id AVCaptureSessionWasInterruptedNotificationFunction(void)
{
  return (id)constantAVCaptureSessionWasInterruptedNotification;
}

Class initARPositionalTrackingConfiguration(void)
{
  if (LoadARKit(void)::loadPredicate != -1) {
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_28654);
  }
  Class result = objc_getClass("ARPositionalTrackingConfiguration");
  classARPositionalTrackingConfiguratiouint64_t n = (uint64_t)result;
  getARPositionalTrackingConfigurationClass = (uint64_t (*)(void))ARPositionalTrackingConfigurationFunction;
  return result;
}

id ARPositionalTrackingConfigurationFunction(void)
{
  return (id)classARPositionalTrackingConfiguration;
}

Class initARSession(void)
{
  if (LoadARKit(void)::loadPredicate != -1) {
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_28654);
  }
  Class result = objc_getClass("ARSession");
  classARSessiouint64_t n = (uint64_t)result;
  getARSessionClass = (uint64_t (*)(void))ARSessionFunction;
  return result;
}

id ARSessionFunction(void)
{
  return (id)classARSession;
}

void ___ZL9LoadARKitv_block_invoke_28661()
{
  LoadARKit(void)::frameworkLibrardouble y = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  if (!LoadARKit(void)::frameworkLibrary) {
    NSLog((NSString *)@"### Failed to Soft Linked: /System/Library/Frameworks/ARKit.framework/ARKit");
  }
}

void sub_1A24469D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2446A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2446B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2446C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2446CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

unint64_t md::TrafficSkeletonResourceFetcher::tileKey(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 size];
  [v3 scale];
  unsigned int v4 = *(_DWORD *)(a1 + 556);
  uint64_t v5 = GEOTileKeyMake();
  unint64_t v6 = 128;
  if (v4 > 0x19 || ((1 << v4) & 0x200101C) == 0) {
    unint64_t v6 = (unint64_t)(v4 == 26) << 7;
  }
  unint64_t v8 = v6 | v5 & 0xFFFFFFFFFFFFFF7FLL;

  return v8;
}

void sub_1A2446D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::TrafficSkeletonResourceFetcher::~TrafficSkeletonResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::TrafficSkeletonTileDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TrafficSkeletonTileDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TrafficSkeletonTileDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *md::MeshSetStorage::prepareStorage(uint64_t *this, ResourceAccessor *a2)
{
  if (!*((unsigned char *)this + 40))
  {
    uint64_t v2 = this;
    if (this[4])
    {
      if (*this && this[1])
      {
        unsigned int v4 = (uint64_t *)this[2];
        if (v4 == this + 3)
        {
          uint64_t v9 = 0;
          uint64_t v5 = 0;
        }
        else
        {
          uint64_t v5 = 0;
          uint64_t v6 = 0;
          do
          {
            uint64_t v7 = (void *)v4[4];
            unint64_t v8 = (unint64_t)(v5 + v7[1] - 1) / v7[1] * v7[1];
            uint64_t v5 = v8 + v7[2];
            v7[4] = v8;
            v7[5] = v5;
            uint64_t v9 = v7[3] + v6;
            v7[6] = v6;
            v7[7] = v9;
            __int32 v10 = (uint64_t *)v4[1];
            if (v10)
            {
              do
              {
                uint64_t v11 = v10;
                __int32 v10 = (uint64_t *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                uint64_t v11 = (uint64_t *)v4[2];
                BOOL v12 = *v11 == (void)v4;
                unsigned int v4 = v11;
              }
              while (!v12);
            }
            uint64_t v6 = v9;
            unsigned int v4 = v11;
          }
          while (v11 != this + 3);
        }
        int v13 = operator new(0xE0uLL);
        v13[1] = 0;
        v13[2] = 0;
        void *v13 = &unk_1EF583040;
        double v14 = ggl::BufferData::BufferData((uint64_t)(v13 + 3), 1, 0, v5);
        uint64_t v15 = (std::__shared_weak_count *)v2[7];
        v2[6] = v16;
        v2[7] = (uint64_t)v13;
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, double))v15->__on_zero_shared)(v15, v14);
          std::__shared_weak_count::__release_weak(v15);
        }
        float v17 = operator new(0xF8uLL);
        v17[1] = 0;
        v17[2] = 0;
        void *v17 = &unk_1EF589D68;
        uint64_t v18 = ggl::BufferData::BufferData((uint64_t)(v17 + 3), 2, 1, 0, 1, v9);
        v17[3] = &unk_1EF561BA0;
        v17[4] = 2;
        v17[28] = &unk_1EF561BC0;
        v17[29] = "MeshBufferStorage Index Data";
        *((_DWORD *)v17 + 60) = 0;
        uint64_t v20 = (std::__shared_weak_count *)v2[9];
        v2[8] = v18;
        v2[9] = (uint64_t)v17;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        uint64_t v21 = v2[6];
        long long v45 = 0uLL;
        v19.n128_u64[0] = (unint64_t)a2;
        *(void *)&long long v22 = a2;
        *((void *)&v22 + 1) = v21;
        __n128 v43 = v19;
        if (v5)
        {
          if (a2 && *(unsigned char *)(v21 + 17) != 2)
          {
            long long v42 = v22;
            uint64_t v23 = (*((uint64_t (**)(ResourceAccessor *))a2->var0 + 7))(a2);
            long long v22 = v42;
          }
          else
          {
            uint64_t v23 = *(void *)(v21 + 72);
          }
        }
        else
        {
          uint64_t v23 = 0;
        }
        long long v45 = v22;
        unint64_t v46 = 0;
        uint64_t v47 = v5;
        uint64_t v49 = v23;
        __int16 v48 = 257;
        ggl::BufferMemory::operator=(v2 + 10, (uint64_t)&v45);
        *(void *)&long long v24 = v43.n128_u64[0];
        if (v49)
        {
          unint64_t v26 = v46;
          unint64_t v25 = v47;
          if (v47 != v46)
          {
            uint64_t v27 = (void *)*((void *)&v45 + 1);
            int v28 = v48;
            int v29 = HIBYTE(v48);
            if ((void)v45 && *(unsigned char *)(*((void *)&v45 + 1) + 17) != 2)
            {
              (*(void (**)(__n128))(*(void *)v45 + 64))(v43);
              *(void *)&long long v24 = v43.n128_u64[0];
            }
            if (v28 && !v29)
            {
              unint64_t v31 = v27[7];
              unint64_t v30 = v27[8];
              if (v30 == v31) {
                unint64_t v31 = v27[10] - v27[9];
              }
              if (v26 < v31) {
                unint64_t v31 = v26;
              }
              if (v30 <= v25) {
                unint64_t v30 = v25;
              }
              if (v30 == v31) {
                unint64_t v30 = v31 + v27[10] - v27[9];
              }
              v27[7] = v31;
              v27[8] = v30;
            }
          }
        }
        uint64_t v32 = v2[8];
        long long v45 = 0uLL;
        uint64_t v33 = *(void *)(v32 + 8) * v9;
        *((void *)&v24 + 1) = v32;
        if (v33)
        {
          if (a2 && *(unsigned char *)(v32 + 17) != 2)
          {
            long long v44 = v24;
            uint64_t v34 = (*((uint64_t (**)(ResourceAccessor *))a2->var0 + 7))(a2);
            long long v24 = v44;
          }
          else
          {
            uint64_t v34 = *(void *)(v32 + 72);
          }
        }
        else
        {
          uint64_t v34 = 0;
        }
        long long v45 = v24;
        unint64_t v46 = 0;
        uint64_t v47 = v33;
        uint64_t v49 = v34;
        __int16 v48 = 257;
        this = ggl::BufferMemory::operator=(v2 + 16, (uint64_t)&v45);
        if (v49)
        {
          unint64_t v36 = v46;
          unint64_t v35 = v47;
          if (v47 != v46)
          {
            uint64_t v37 = (void *)*((void *)&v45 + 1);
            this = (uint64_t *)v45;
            int v38 = v48;
            int v39 = HIBYTE(v48);
            if ((void)v45 && *(unsigned char *)(*((void *)&v45 + 1) + 17) != 2) {
              this = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v45 + 64))();
            }
            if (v38 && !v39)
            {
              unint64_t v41 = v37[7];
              unint64_t v40 = v37[8];
              if (v40 == v41) {
                unint64_t v41 = v37[10] - v37[9];
              }
              if (v36 < v41) {
                unint64_t v41 = v36;
              }
              if (v40 <= v35) {
                unint64_t v40 = v35;
              }
              if (v40 == v41) {
                unint64_t v40 = v41 + v37[10] - v37[9];
              }
              v37[7] = v41;
              v37[8] = v40;
            }
          }
        }
        *((unsigned char *)v2 + 40) = 1;
      }
    }
  }
  return this;
}

uint64_t std::__shared_ptr_emplace<ggl::BufferData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::BufferData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::BufferData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::MeshSetStorage::buildSubIndexData(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a2 + 40) && a3 && *a3 == a2 && (uint64_t v6 = a3[9], v7 = a3[6], v6 + a5 <= (unint64_t)(a3[7] - v7)))
  {
    uint64_t v9 = v7 + v6;
    uint64_t v10 = v7 + v6 + a5;
    a3[9] = v6 + a5;
    uint64_t v11 = *(void **)(a2 + 64);
    BOOL v12 = operator new(0xF8uLL);
    int v13 = v12;
    v12[1] = 0;
    v12[2] = 0;
    void *v12 = &unk_1EF589D68;
    double v14 = v12 + 3;
    uint64_t v15 = v11[1];
    uint64_t v16 = (std::__shared_weak_count *)v11[4];
    v17[0] = v11[3];
    v17[1] = v16;
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      ggl::BufferData::BufferData((uint64_t)(v12 + 3), v15, v17, v9 * v11[1], v10 * v11[1], 1);
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    else
    {
      ggl::BufferData::BufferData((uint64_t)(v12 + 3), v15, v17, v9 * v15, v10 * v15, 1);
    }
    v13[3] = &unk_1EF561BA0;
    v13[28] = &unk_1EF561BC0;
    v13[29] = a4;
    *((_DWORD *)v13 + 60) = 0;
    char v13[4] = v11[1];
    *a1 = v14;
    a1[1] = v13;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void md::MeshSetStorage::finalize(md::MeshSetStorage *this)
{
  uint64_t v24 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  ggl::BufferMemory::operator=((uint64_t *)this + 10, (uint64_t)&v18);
  if (v24)
  {
    unint64_t v3 = v20;
    unint64_t v2 = v21;
    if (v21 != v20)
    {
      unsigned int v4 = (void *)v19;
      int v5 = v22;
      int v6 = v23;
      if (v18 && *(unsigned char *)(v19 + 17) != 2) {
        (*(void (**)(void))(*(void *)v18 + 64))();
      }
      if (v5 && !v6)
      {
        unint64_t v8 = v4[7];
        unint64_t v7 = v4[8];
        if (v7 == v8) {
          unint64_t v8 = v4[10] - v4[9];
        }
        if (v3 < v8) {
          unint64_t v8 = v3;
        }
        if (v7 <= v2) {
          unint64_t v7 = v2;
        }
        if (v7 == v8) {
          unint64_t v7 = v8 + v4[10] - v4[9];
        }
        v4[7] = v8;
        v4[8] = v7;
      }
    }
  }
  uint64_t v24 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  ggl::BufferMemory::operator=((uint64_t *)this + 16, (uint64_t)&v18);
  if (v24)
  {
    unint64_t v10 = v20;
    unint64_t v9 = v21;
    if (v21 != v20)
    {
      uint64_t v11 = (void *)v19;
      int v12 = v22;
      int v13 = v23;
      if (v18 && *(unsigned char *)(v19 + 17) != 2) {
        (*(void (**)(void))(*(void *)v18 + 64))();
      }
      if (v12 && !v13)
      {
        unint64_t v15 = v11[7];
        unint64_t v14 = v11[8];
        if (v14 == v15) {
          unint64_t v15 = v11[10] - v11[9];
        }
        if (v10 < v15) {
          unint64_t v15 = v10;
        }
        if (v14 <= v9) {
          unint64_t v14 = v9;
        }
        if (v14 == v15) {
          unint64_t v14 = v15 + v11[10] - v11[9];
        }
        v11[7] = v15;
        v11[8] = v14;
      }
    }
  }
  float v17 = (void *)*((void *)this + 3);
  uint64_t v16 = (void *)((char *)this + 24);
  std::__tree<gdc::LayerDataWithWorld>::destroy(v17);
  *(v16 - 1) = v16;
  void *v16 = 0;
  v16[1] = 0;
}

void md::mun::MuninViewData::~MuninViewData(md::mun::MuninViewData *this)
{
  *(void *)this = &unk_1EF5502F0;
  unint64_t v2 = (void *)*((void *)this + 65);
  if (v2)
  {
    *((void *)this + 66) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 60);
  if (v3 != *((void **)this + 62)) {
    free(v3);
  }
  int v5 = (void **)((char *)this + 176);
  std::vector<md::mun::MuninViewMesh>::__destroy_vector::operator()[abi:nn180100](&v5);
  *(void *)this = &unk_1EF558F70;
  if (*((unsigned char *)this + 112)) {
    *((unsigned char *)this + 112) = 0;
  }
  unsigned int v4 = (void *)*((void *)this + 4);
  if (v4 != *((void **)this + 6)) {
    free(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(void *)this = &unk_1EF5502F0;
  unint64_t v2 = (void *)*((void *)this + 65);
  if (v2)
  {
    *((void *)this + 66) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 60);
  if (v3 != *((void **)this + 62)) {
    free(v3);
  }
  int v5 = (void **)((char *)this + 176);
  std::vector<md::mun::MuninViewMesh>::__destroy_vector::operator()[abi:nn180100](&v5);
  *(void *)this = &unk_1EF558F70;
  if (*((unsigned char *)this + 112)) {
    *((unsigned char *)this + 112) = 0;
  }
  unsigned int v4 = (void *)*((void *)this + 4);
  if (v4 != *((void **)this + 6)) {
    free(v4);
  }
}

uint64_t md::stringFromLabelOutcome(uint64_t result, int a2)
{
  *(void *)Class result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  switch(a2)
  {
    case 0:
      *(unsigned char *)(result + 23) = 10;
      *(_WORD *)(result + 8) = 28271;
      unint64_t v2 = "NoPosition";
      goto LABEL_41;
    case 1:
      *(unsigned char *)(result + 23) = 7;
      *(_DWORD *)Class result = 1951625038;
      *(_DWORD *)(result + 3) = 1701607796;
      return result;
    case 2:
      *(unsigned char *)(result + 23) = 9;
      *(unsigned char *)(result + 8) = 110;
      unint64_t v2 = "OffScreen";
      goto LABEL_41;
    case 3:
      *(unsigned char *)(result + 23) = 7;
      *(_DWORD *)Class result = 1885957187;
      unsigned __int16 v3 = 28784;
      goto LABEL_24;
    case 4:
      *(unsigned char *)(result + 23) = 9;
      *(unsigned char *)(result + 8) = 118;
      unint64_t v2 = "HideInNav";
      goto LABEL_41;
    case 5:
      *(unsigned char *)(result + 23) = 9;
      *(unsigned char *)(result + 8) = 101;
      unint64_t v2 = "DebugHide";
      goto LABEL_41;
    case 6:
      *(unsigned char *)(result + 23) = 7;
      *(_DWORD *)Class result = 540811386;
      *(_DWORD *)(result + 3) = 1852402976;
      return result;
    case 7:
      *(unsigned char *)(result + 23) = 7;
      *(_DWORD *)Class result = 540942458;
      *(_DWORD *)(result + 3) = 2019650848;
      return result;
    case 8:
      *(unsigned char *)(result + 23) = 10;
      *(_WORD *)(result + 8) = 25964;
      unint64_t v2 = "NotVisible";
      goto LABEL_41;
    case 9:
      *(unsigned char *)(result + 23) = 12;
      *(_DWORD *)(result + 8) = 1684630625;
      unint64_t v2 = "HikerInvalid";
      goto LABEL_41;
    case 10:
      *(unsigned char *)(result + 23) = 13;
      unsigned int v4 = "MatrixInvalid";
      goto LABEL_39;
    case 11:
      *(unsigned char *)(result + 23) = 17;
      *(unsigned char *)(result + 16) = 115;
      int v5 = "LoadingGlyphInfos";
      goto LABEL_44;
    case 12:
      *(unsigned char *)(result + 23) = 12;
      *(_DWORD *)(result + 8) = 1936680558;
      unint64_t v2 = "NoGlyphInfos";
      goto LABEL_41;
    case 13:
      *(unsigned char *)(result + 23) = 7;
      *(_DWORD *)Class result = 1968271182;
      *(_DWORD *)(result + 3) = 1935958389;
      return result;
    case 14:
      *(unsigned char *)(result + 23) = 6;
      *(_DWORD *)Class result = 1700032334;
      *(_WORD *)(result + 4) = 29816;
      return result;
    case 15:
      *(unsigned char *)(result + 23) = 14;
      int v6 = "LoadingArtwork";
      goto LABEL_37;
    case 16:
      *(unsigned char *)(result + 23) = 9;
      *(unsigned char *)(result + 8) = 107;
      unint64_t v2 = "NoArtwork";
      goto LABEL_41;
    case 17:
      *(unsigned char *)(result + 23) = 16;
      int v5 = "DuplicateArtwork";
      goto LABEL_44;
    case 18:
      *(unsigned char *)(result + 23) = 6;
      *(_DWORD *)Class result = 1802398027;
      *(_WORD *)(result + 4) = 25701;
      return result;
    case 19:
      *(unsigned char *)(result + 23) = 12;
      *(_DWORD *)(result + 8) = 1684370529;
      unint64_t v2 = "Extrapolated";
      goto LABEL_41;
    case 20:
      *(unsigned char *)(result + 23) = 8;
      uint64_t v7 = 0x64696C6C6F43;
      goto LABEL_26;
    case 21:
      *(unsigned char *)(result + 23) = 7;
      *(_DWORD *)Class result = 1969513796;
      unsigned __int16 v3 = 28789;
LABEL_24:
      *(_DWORD *)(result + 3) = v3 | 0x64650000;
      return result;
    case 22:
      *(unsigned char *)(result + 23) = 8;
      uint64_t v7 = 0x64756C63634FLL;
LABEL_26:
      *(void *)Class result = v7 & 0xFFFFFFFFFFFFLL | 0x6465000000000000;
      return result;
    case 23:
      *(unsigned char *)(result + 23) = 16;
      int v5 = "BuildingOccluded";
      goto LABEL_44;
    case 24:
      *(unsigned char *)(result + 23) = 14;
      int v6 = "GroundOccluded";
      goto LABEL_37;
    case 25:
      *(unsigned char *)(result + 23) = 22;
      qmemcpy((void *)result, "RequestingExternalMesh", 22);
      return result;
    case 26:
      *(unsigned char *)(result + 23) = 18;
      *(_WORD *)(result + 16) = 26739;
      int v5 = "FailedExternalMesh";
      goto LABEL_44;
    case 27:
      *(unsigned char *)(result + 23) = 12;
      *(_DWORD *)(result + 8) = 1702521171;
      unint64_t v2 = "ZeroTextSize";
      goto LABEL_41;
    case 28:
      *(unsigned char *)(result + 23) = 10;
      *(_WORD *)(result + 8) = 28261;
      unint64_t v2 = "Overridden";
      goto LABEL_41;
    case 29:
      *(unsigned char *)(result + 23) = 9;
      *(unsigned char *)(result + 8) = 101;
      unint64_t v2 = "SceneHide";
      goto LABEL_41;
    case 30:
      *(unsigned char *)(result + 23) = 14;
      int v6 = "DeactivateHide";
      goto LABEL_37;
    case 31:
      *(unsigned char *)(result + 23) = 8;
      *(void *)Class result = 0x7973754268746150;
      return result;
    case 32:
      *(unsigned char *)(result + 23) = 14;
      int v6 = "NotDisplayable";
LABEL_37:
      *(void *)Class result = *(void *)v6;
      *(void *)(result + 6) = *(void *)(v6 + 6);
      return result;
    case 33:
      *(unsigned char *)(result + 23) = 13;
      unsigned int v4 = "FeatureHidden";
LABEL_39:
      *(void *)Class result = *(void *)v4;
      *(void *)(result + 5) = *(void *)(v4 + 5);
      return result;
    case 34:
      *(unsigned char *)(result + 23) = 9;
      *(unsigned char *)(result + 8) = 103;
      unint64_t v2 = "NotFacing";
LABEL_41:
      *(void *)Class result = *(void *)v2;
      return result;
    case 35:
      *(unsigned char *)(result + 23) = 16;
      int v5 = "CurvedUpsideDown";
      goto LABEL_44;
    case 36:
      *(unsigned char *)(result + 23) = 16;
      int v5 = "MaxLabelsReached";
LABEL_44:
      *(_OWORD *)Class result = *(_OWORD *)v5;
      break;
    case 37:
      *(unsigned char *)(result + 23) = 2;
      *(_WORD *)Class result = 19279;
      break;
    case 38:
      *(unsigned char *)(result + 23) = 4;
      *(_DWORD *)Class result = 1701736270;
      break;
    default:
      return result;
  }
  return result;
}

void mre::GGLResourceStore::~GGLResourceStore(mre::GGLResourceStore *this)
{
  mre::GGLResourceStore::~GGLResourceStore(this);
  JUMPOUT(0x1A6239270);
}

{
  unsigned char *v2;
  unsigned char *v3;
  unsigned char *v4;
  unsigned char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  std::__shared_weak_count *v27;

  *(void *)this = &unk_1EF567580;
  unint64_t v2 = (unsigned char *)*((void *)this + 90);
  unsigned __int16 v3 = (unsigned char *)*((void *)this + 91);
  while (v2 != v3)
  {
    if (!v2[24])
    {
      if (*(void *)v2) {
        (*(void (**)(void))(**(void **)v2 + 8))(*(void *)v2);
      }
    }
    v2 += 32;
  }
  unsigned int v4 = (unsigned char *)*((void *)this + 78);
  int v5 = (unsigned char *)*((void *)this + 79);
  while (v4 != v5)
  {
    if (!v4[32] && *(void *)v4) {
      (*(void (**)(void))(**(void **)v4 + 8))(*(void *)v4);
    }
    v4 += 40;
  }
  int v6 = (void *)*((void *)this + 93);
  if (v6)
  {
    *((void *)this + 94) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 90);
  if (v7)
  {
    *((void *)this + 91) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 87);
  if (v8)
  {
    *((void *)this + 88) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 84);
  if (v9)
  {
    *((void *)this + 85) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 81);
  if (v10)
  {
    *((void *)this + 82) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 78);
  if (v11)
  {
    *((void *)this + 79) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 75);
  if (v12)
  {
    *((void *)this + 76) = v12;
    operator delete(v12);
  }
  int v13 = (void *)*((void *)this + 72);
  if (v13)
  {
    *((void *)this + 73) = v13;
    operator delete(v13);
  }
  unint64_t v14 = (void *)*((void *)this + 69);
  if (v14)
  {
    *((void *)this + 70) = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)*((void *)this + 66);
  if (v15)
  {
    *((void *)this + 67) = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)*((void *)this + 63);
  if (v16)
  {
    *((void *)this + 64) = v16;
    operator delete(v16);
  }
  float v17 = (void *)*((void *)this + 60);
  if (v17)
  {
    *((void *)this + 61) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 57);
  if (v18)
  {
    do
    {
      uint64_t v19 = (void *)*v18;
      operator delete(v18);
      uint64_t v18 = v19;
    }
    while (v19);
  }
  unint64_t v20 = (void *)*((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v20) {
    operator delete(v20);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)this + 8);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 7);
  std::mutex::~mutex((std::mutex *)((char *)this + 272));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 216));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 168));
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  unint64_t v21 = (void *)*((void *)this + 10);
  if (v21)
  {
    do
    {
      unsigned __int8 v22 = (void *)*v21;
      operator delete(v21);
      unint64_t v21 = v22;
    }
    while (v22);
  }
  unsigned __int8 v23 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = (void *)*((void *)this + 5);
  if (v24)
  {
    do
    {
      unint64_t v25 = (void *)*v24;
      operator delete(v24);
      uint64_t v24 = v25;
    }
    while (v25);
  }
  unint64_t v26 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v26) {
    operator delete(v26);
  }
  uint64_t v27 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

uint64_t mre::GGLResourceStore::getBuffer(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (std::__shared_mutex_base *)(a1 + 272);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 272));
  uint64_t v5 = *(void *)(a1 + 696);
  if (a2 < (unint64_t)((*(void *)(a1 + 704) - v5) >> 3)
    && ((uint64_t v6 = *(void *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0), v7))
  {
    uint64_t v9 = *(void *)(a1 + 720) + 32 * *(void *)(v5 + 8 * a2);
    uint64_t v8 = *(void *)(a1 + 728);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 728);
    uint64_t v9 = v8;
  }
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  std::__shared_mutex_base::unlock_shared(v4);
  if (v10) {
    return v10 + 8;
  }
  else {
    return 0;
  }
}

uint64_t mre::GGLResourceStore::getTexture(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v17 = a2;
  uint64_t v6 = (std::__shared_mutex_base *)(a1 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 104));
  uint64_t v7 = 576;
  if (a3) {
    uint64_t v7 = 480;
  }
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = v8[3];
  if (a2 < (unint64_t)((v8[4] - v9) >> 3)
    && ((v10 = *(void *)(v9 + 8 * a2)) != 0 ? (BOOL v11 = HIDWORD(a2) == HIDWORD(v10)) : (BOOL v11 = 0), v11))
  {
    uint64_t v12 = v8[7];
    uint64_t v13 = v8[6] + 40 * v10;
  }
  else
  {
    uint64_t v12 = v8[7];
    uint64_t v13 = v12;
  }
  std::__shared_mutex_base::unlock_shared(v6);
  if (a3)
  {
    unint64_t v14 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(a1 + 440), a2, &v17);
    ++v14[3];
  }
  if (v13 == v12) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v13;
  }
  if (v15) {
    return v15 + 8;
  }
  else {
    return 0;
  }
}

uint64_t mre::GGLResourceStore::getBufferDescriptor(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (std::__shared_mutex_base *)(a1 + 272);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 272));
  uint64_t v5 = *(void *)(a1 + 696);
  if (a2 < (unint64_t)((*(void *)(a1 + 704) - v5) >> 3)
    && ((uint64_t v6 = *(void *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0), v7))
  {
    uint64_t v9 = *(void *)(a1 + 720) + 32 * *(void *)(v5 + 8 * a2);
    uint64_t v8 = *(void *)(a1 + 728);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 728);
    uint64_t v9 = v8;
  }
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  std::__shared_mutex_base::unlock_shared(v4);
  if (v10) {
    return v10 + 16;
  }
  else {
    return 0;
  }
}

void *mre::GGLResourceStore::updateUnmanagedTexture(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v15 = a2;
  uint64_t v6 = (std::__shared_mutex_base *)(a1 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 104));
  uint64_t v7 = *(void *)(a1 + 504);
  if (a2 < (unint64_t)((*(void *)(a1 + 512) - v7) >> 3)
    && ((v8 = *(void *)(v7 + 8 * a2)) != 0 ? (BOOL v9 = HIDWORD(a2) == HIDWORD(v8)) : (BOOL v9 = 0), v9))
  {
    BOOL v11 = (void *)(*(void *)(a1 + 528) + 40 * v8);
    uint64_t v10 = *(void **)(a1 + 536);
  }
  else
  {
    uint64_t v10 = *(void **)(a1 + 536);
    BOOL v11 = v10;
  }
  std::__shared_mutex_base::unlock_shared(v6);
  if (v11 != v10 && v11 != 0)
  {
    std::__shared_mutex_base::lock(v6);
    void *v11 = a3;
    v11[1] = a3;
    if (a3)
    {
      unint64_t v13 = *(unsigned int *)(a3 + 68) | ((unint64_t)*(unsigned int *)(a3 + 64) << 32);
      void v11[2] = *(void *)(a3 + 80);
      v11[3] = v13;
    }
    std::__shared_mutex_base::unlock(v6);
  }
  Class result = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(a1 + 440), a2, &v15);
  ++result[3];
  return result;
}

uint64_t md::LabelSettingsStyleCache::muninPointStyle(md::LabelSettingsStyleCache *this)
{
  uint64_t result = *((void *)this + 2);
  if (!result) {
    operator new();
  }
  return result;
}

void sub_1A2448A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a11);
  uint64_t v18 = a17;
  if (a17)
  {
    if (!atomic_fetch_add(&a17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t overrideValueWithStyle<(gss::PropertyID)346,unsigned int>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Au, *(unsigned __int8 *)(a1 + 12));
    if (!result) {
      return result;
    }
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(a1, 0x15Au, v4, 0);
    int v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Au, 0) & 1) != 0
    || (uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Au, 1u), (result & 1) != 0))
  {
    char v9 = 1;
    char v8 = 1;
    uint64_t v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(a1, 0x15Au, 0, &v9);
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(a1, 0x15Au, 1u, &v8);
    int v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

uint64_t overrideValueWithStyle<(gss::PropertyID)357,float>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x165u, *(unsigned __int8 *)(a1 + 12));
    if (!result) {
      return result;
    }
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x165u, v4, 0);
    int v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x165u, 0) & 1) != 0
    || (uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x165u, 1u), (result & 1) != 0))
  {
    char v9 = 1;
    char v8 = 1;
    uint64_t v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x165u, 0, &v9);
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x165u, 1u, &v8);
    int v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

uint64_t overrideValueWithStyle<(gss::PropertyID)359,float>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x167u, *(unsigned __int8 *)(a1 + 12));
    if (!result) {
      return result;
    }
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x167u, v4, 0);
    int v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x167u, 0) & 1) != 0
    || (uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x167u, 1u), (result & 1) != 0))
  {
    char v9 = 1;
    char v8 = 1;
    uint64_t v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x167u, 0, &v9);
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x167u, 1u, &v8);
    int v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

uint64_t overrideValueWithStyle<(gss::PropertyID)360,float>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x168u, *(unsigned __int8 *)(a1 + 12));
    if (!result) {
      return result;
    }
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x168u, v4, 0);
    int v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x168u, 0) & 1) != 0
    || (uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x168u, 1u), (result & 1) != 0))
  {
    char v9 = 1;
    char v8 = 1;
    uint64_t v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x168u, 0, &v9);
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x168u, 1u, &v8);
    int v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

uint64_t overrideValueWithStyle<(gss::PropertyID)361,float>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x169u, *(unsigned __int8 *)(a1 + 12));
    if (!result) {
      return result;
    }
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x169u, v4, 0);
    int v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x169u, 0) & 1) != 0
    || (uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x169u, 1u), (result & 1) != 0))
  {
    char v9 = 1;
    char v8 = 1;
    uint64_t v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x169u, 0, &v9);
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x169u, 1u, &v8);
    int v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

uint64_t md::LabelSettingsStyleCache::muninRoadStyle(md::LabelSettingsStyleCache *this)
{
  uint64_t result = *((void *)this + 3);
  if (!result) {
    operator new();
  }
  return result;
}

void sub_1A2449674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (a11 && !atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
    std::__shared_weak_count::__release_weak(a11);
  }
  if (a12) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a15 + 40))(a15, a12, a14 - a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t overrideValueWithStyle<(gss::PropertyID)347,float>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
  if (v4 != 2)
  {
    uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Bu, *(unsigned __int8 *)(a1 + 12));
    if (!result) {
      return result;
    }
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x15Bu, v4, 0);
    int v7 = *(_DWORD *)result;
    goto LABEL_7;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Bu, 0) & 1) != 0
    || (uint64_t result = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, 0x15Bu, 1u), (result & 1) != 0))
  {
    char v9 = 1;
    char v8 = 1;
    uint64_t v6 = (int *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x15Bu, 0, &v9);
    uint64_t result = gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x15Bu, 1u, &v8);
    int v7 = *v6;
LABEL_7:
    *a2 = v7;
  }
  return result;
}

void md::RoadTileData::~RoadTileData(md::RoadTileData *this)
{
  md::RoadTileData::~RoadTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t vars8;

  *(void *)this = &unk_1EF531D18;
  *((void *)this + 79) = &unk_1EF531D58;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 115);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unsigned __int16 v3 = (std::__shared_weak_count *)*((void *)this + 113);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned __int16 v3 = (std::__shared_weak_count *)*((void *)this + 113);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unsigned int v4 = *((void *)this + 109);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 110);
    uint64_t v6 = (void *)*((void *)this + 109);
    if (v5 != v4)
    {
      do
      {
        int v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      uint64_t v6 = (void *)*((void *)this + 109);
    }
    *((void *)this + 110) = v4;
    operator delete(v6);
  }
  char v8 = (std::__shared_weak_count *)*((void *)this + 108);
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v9 = *((void *)this + 103);
    if (!v9) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  char v9 = *((void *)this + 103);
  if (v9)
  {
LABEL_19:
    *((void *)this + 104) = v9;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 106) + 40))(*((void *)this + 106), v9, *((void *)this + 105) - v9);
  }
LABEL_20:
  std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<gm::Matrix<float,3,1>>>,mdm::Allocator>>::~__hash_table((uint64_t *)this + 96);
  uint64_t v10 = *((void *)this + 95);
  *((void *)this + 95) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  BOOL v11 = *((void *)this + 94);
  *((void *)this + 94) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  unint64_t v13 = *((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  unint64_t v14 = *((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  unint64_t v15 = *((void *)this + 90);
  *((void *)this + 90) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  md::MapTileData::~MapTileData(this);
}

void md::RoadTileData::updateWithContext(uint64_t a1, md::LayoutContext *this, int a3, uint64_t *a4)
{
  int v7 = (void *)*((void *)this + 1);
  int8x8_t v8 = (int8x8_t)v7[1];
  if (!*(void *)&v8) {
    goto LABEL_24;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    uint64_t v10 = 0x1AF456233693CD46;
    if (*(void *)&v8 <= 0x1AF456233693CD46uLL) {
      uint64_t v10 = 0x1AF456233693CD46uLL % *(void *)&v8;
    }
  }
  else
  {
    uint64_t v10 = (*(void *)&v8 - 1) & 0x1AF456233693CD46;
  }
  BOOL v11 = *(void **)(*v7 + 8 * v10);
  if (!v11) {
    goto LABEL_24;
  }
  uint64_t v12 = (void *)*v11;
  if (!v12) {
    goto LABEL_24;
  }
  if (v9.u32[0] < 2uLL)
  {
    uint64_t v13 = *(void *)&v8 - 1;
    while (1)
    {
      uint64_t v15 = v12[1];
      if (v15 == 0x1AF456233693CD46)
      {
        if (v12[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_24;
      }
      uint64_t v12 = (void *)*v12;
      if (!v12) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v14 = v12[1];
    if (v14 == 0x1AF456233693CD46) {
      break;
    }
    if (v14 >= *(void *)&v8) {
      v14 %= *(void *)&v8;
    }
    if (v14 != v10) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v12 = (void *)*v12;
    if (!v12) {
      goto LABEL_24;
    }
  }
  if (v12[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v16 = v12[5];
  if (*(void *)(v16 + 8) == 0x1AF456233693CD46)
  {
    unint64_t v17 = *(double **)(v16 + 32);
    goto LABEL_25;
  }
LABEL_24:
  unint64_t v17 = 0;
LABEL_25:
  int v18 = 1 << *(unsigned char *)(a1 + 169);
  double v19 = 1.0 / (double)v18;
  int v20 = *(_DWORD *)(a1 + 172);
  int v21 = *(_DWORD *)(a1 + 176);
  if (*(unsigned __int8 *)(md::LayoutContext::frameState(this) + 128) - 1 > 2)
  {
    double v38 = (double)a3;
    if (!a3) {
      double v38 = -0.0;
    }
    memset(&v76[8], 0, 32);
    *(double *)int64_t v76 = 1.0 / (double)v18;
    *(double *)&v76[40] = *(double *)v76;
    memset(&v76[48], 0, 32);
    *(double *)&long long v77 = *(double *)v76;
    *((void *)&v77 + 1) = 0;
    *(double *)&long long v78 = v38 + v19 * (double)v21;
    *((double *)&v78 + 1) = v19 * (double)(v18 + ~v20);
    long long v37 = xmmword_1A28FCCC0;
  }
  else
  {
    int v22 = 1 << *(unsigned char *)(a1 + 169);
    double v23 = 1.0 / (double)v22;
    uint64_t v24 = *(int *)(a1 + 176);
    int v25 = v22 + ~*(_DWORD *)(a1 + 172);
    *(double *)int64_t v76 = v23 * (double)v24;
    *(double *)&v76[8] = v23 * (double)v25;
    *(double *)&v76[16] = v23 + (double)v24 * v23;
    *(double *)&v76[24] = v23 + (double)v25 * v23;
    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v57, (double *)v76, 0.0, 0.0);
    *((void *)&v77 + 1) = 0;
    memset(&v76[8], 0, 72);
    long long v78 = v63;
    *(double *)&long long v79 = v64;
    *((void *)&v79 + 1) = 0x3FF0000000000000;
    *(double *)int64_t v76 = v65 - *(double *)&v63;
    *(double *)&v76[40] = v66 - *((double *)&v63 + 1);
    *(double *)&long long v77 = v67 - v64;
    double v26 = v60;
    double v27 = v61;
    double v28 = v26 + v26;
    double v29 = (v26 + v26) * v26;
    double v30 = (v27 + v27) * v27;
    double v31 = v59;
    double v32 = v31 + v31;
    double v33 = (v31 + v31) * v60;
    double v34 = (v27 + v27) * v62;
    double v35 = v61 * (v31 + v31);
    double v36 = 1.0 - (v31 + v31) * v31;
    v68.f64[0] = 1.0 - (v29 + v30);
    v68.f64[1] = v34 + v33;
    v70.f64[0] = v33 - v34;
    v70.f64[1] = v36 - v30;
    v72.f64[0] = v62 * v28 + v35;
    v72.f64[1] = v28 * v61 - v62 * v32;
    v69.f64[0] = v35 - v62 * v28;
    float64x2_t v71 = (float64x2_t)COERCE_UNSIGNED_INT64(v62 * v32 + v28 * v61);
    v73.f64[0] = v36 - v29;
    v69.f64[1] = 0.0;
    v73.f64[1] = 0.0;
    float64x2_t v74 = v57;
    v75.f64[0] = v58;
    v75.f64[1] = 1.0;
    gm::operator*<double,4,4,4>((double *)v56, v68.f64, (double *)v76);
    *(_OWORD *)int64_t v76 = v56[0];
    *(_OWORD *)&v76[16] = v56[1];
    *(_OWORD *)&v76[32] = v56[2];
    *(_OWORD *)&v76[48] = v56[3];
    *(_OWORD *)&v76[64] = v56[4];
    long long v77 = v56[5];
    long long v37 = v56[7];
    long long v78 = v56[6];
  }
  long long v79 = v37;
  gm::operator*<double,4,4,4>(v68.f64, v17 + 101, (double *)v76);
  float32x2_t v39 = vcvt_f32_f64(v69);
  float32x2_t v40 = vcvt_f32_f64(v70);
  float32x2_t v41 = vcvt_f32_f64(v71);
  float32x2_t v42 = vcvt_f32_f64(v72);
  float32x2_t v43 = vcvt_f32_f64(v73);
  float32x2_t v44 = vcvt_f32_f64(v74);
  float32x2_t v45 = vcvt_f32_f64(v75);
  unint64_t v46 = *(void **)(a1 + 896);
  unint64_t v47 = v46[1];
  __int16 v48 = (float32x2_t *)v46[9];
  float32x2_t *v48 = vcvt_f32_f64(v68);
  v48[1] = v39;
  v48[2] = v40;
  v48[3] = v41;
  v48[4] = v42;
  v48[5] = v43;
  v48[6] = v44;
  v48[7] = v45;
  float32_t v49 = v17[471] * v17[173] / (v17[171] * v19);
  v48[8].f32[0] = v49;
  if (v46[8] > v47) {
    unint64_t v47 = v46[8];
  }
  v46[7] = 0;
  v46[8] = v47;
  uint64_t v50 = *a4;
  uint64_t v51 = *(void *)(v50 + 8);
  if ((*(unsigned char *)(v50 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    *(void *)&v68.f64[0] = &v57;
    *(void *)&v56[0] = &v68;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v56, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  if (v51) {
    float v52 = *(_DWORD **)(v50 + 72);
  }
  else {
    float v52 = 0;
  }
  unsigned int v53 = *(void **)(a1 + 912);
  unint64_t v54 = v53[1];
  if (v54) {
    float v55 = (_DWORD *)v53[9];
  }
  else {
    float v55 = 0;
  }
  *float v55 = *v52;
  v55[1] = v52[1];
  void v55[2] = v52[2];
  v55[3] = v52[3];
  v55[4] = v52[4];
  v55[5] = v52[5];
  v55[6] = v52[6];
  v55[8] = v52[8];
  v55[9] = v52[9];
  v55[10] = v52[10];
  v55[11] = v52[11];
  v55[12] = v52[12];
  v55[13] = v52[13];
  v55[14] = v52[14];
  v55[15] = v52[15];
  v55[16] = v52[16];
  v55[17] = v52[17];
  v55[18] = v52[18];
  v55[19] = v52[19];
  v55[20] = v52[20];
  v55[21] = v52[21];
  v55[22] = v52[22];
  v55[23] = v52[23];
  v55[24] = v52[24];
  v55[25] = v52[25];
  v55[26] = v52[26];
  v55[27] = v52[27];
  v55[28] = v52[28];
  v55[29] = v52[29];
  v55[30] = v52[30];
  v55[31] = v52[31];
  v55[32] = v52[32];
  v55[33] = v52[33];
  v55[34] = v52[34];
  v55[35] = v52[35];
  v55[36] = v52[36];
  v55[37] = v52[37];
  v55[38] = v52[38];
  v55[39] = v52[39];
  v55[40] = v52[40];
  v55[41] = v52[41];
  v55[42] = v52[42];
  v55[43] = v52[43];
  v55[44] = v52[44];
  v55[45] = v52[45];
  v55[46] = v52[46];
  v55[47] = v52[47];
  v55[48] = v52[48];
  v55[49] = v52[49];
  v55[50] = v52[50];
  v55[51] = v52[51];
  v55[52] = v52[52];
  v55[53] = v52[53];
  v55[54] = v52[54];
  v55[55] = v52[55];
  v55[56] = v52[56];
  v55[57] = v52[57];
  v55[58] = v52[58];
  v55[59] = v52[59];
  v55[60] = v52[60];
  v55[61] = v52[61];
  v55[62] = v52[62];
  v55[63] = v52[63];
  v55[64] = v52[64];
  v55[65] = v52[65];
  v55[66] = v52[66];
  v55[67] = v52[67];
  v55[68] = v52[68];
  v55[69] = v52[69];
  v55[70] = v52[70];
  v55[71] = v52[71];
  if (v55 && v54)
  {
    if (v53[8] > v54) {
      unint64_t v54 = v53[8];
    }
    v53[7] = 0;
    v53[8] = v54;
  }
}

uint64_t md::ARAssetOcclusionMeshLayerDataSource::descriptionForKey@<X0>(const gdc::LayerDataRequestKey *a1@<X1>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"gdc::LayerDataRequestKey<Type:", 30);
  unint64_t v5 = *((unsigned __int16 *)a1 + 4);
  if (v5 > 0x51) {
    uint64_t v6 = "<Invalid>";
  }
  else {
    uint64_t v6 = off_1E5A95780[v5];
  }
  size_t v7 = strlen(v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)", Asset ID: ", 12);
  int8x8_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)", Type: ", 8);
  uint8x8_t v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)", UniqueId: ", 12);
  uint64_t v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)">", 1);
  if ((v26 & 0x10) != 0)
  {
    unint64_t v12 = v25;
    if (v25 < v22)
    {
      unint64_t v25 = v22;
      unint64_t v12 = v22;
    }
    uint64_t v13 = (const void **)&v21;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      size_t v11 = 0;
      a2[23] = 0;
      goto LABEL_19;
    }
    uint64_t v13 = (const void **)v20;
    unint64_t v12 = v20[2];
  }
  unint64_t v14 = *v13;
  size_t v11 = v12 - (void)*v13;
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v11 >= 0x17)
  {
    uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v15 = v11 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v17 = operator new(v15 + 1);
    *((void *)a2 + 1) = v11;
    *((void *)a2 + 2) = v16 | 0x8000000000000000;
    *(void *)a2 = v17;
    a2 = v17;
    goto LABEL_18;
  }
  a2[23] = v11;
  if (v11) {
LABEL_18:
  }
    memmove(a2, v14, v11);
LABEL_19:
  a2[v11] = 0;
  v19[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v27);
}

void sub_1A244A5CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::ARAssetOcclusionMeshLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    while (*(_WORD *)v6 != 28)
    {
      v6 += 48;
      if (v6 == v7) {
        goto LABEL_10;
      }
    }
  }
  if (v6 == v7 || *(void *)(v6 + 32) != 1)
  {
LABEL_10:
    uint64_t v9 = 0;
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = *(void *)(v8 + 112);
  uint64_t v10 = *(std::__shared_weak_count **)(v8 + 120);
  if (!v10)
  {
LABEL_11:
    uint64_t v51 = v9;
    float v52 = 0;
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v51 = v9;
  float v52 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_12:
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 != v12)
  {
    while (*(_WORD *)v11 != 42)
    {
      v11 += 48;
      if (v11 == v12) {
        goto LABEL_21;
      }
    }
  }
  if (v11 == v12 || *(void *)(v11 + 32) != 1)
  {
LABEL_21:
    uint64_t v14 = 0;
    goto LABEL_22;
  }
  uint64_t v13 = *(void *)(v11 + 24);
  uint64_t v14 = *(void *)(v13 + 112);
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 120);
  if (!v15)
  {
LABEL_22:
    uint64_t v49 = v14;
    uint64_t v50 = 0;
    goto LABEL_23;
  }
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v49 = v14;
  uint64_t v50 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_23:
  if (!(v51 | v49))
  {
    *a3 = 0;
    a3[1] = 0;
    double v30 = v50;
    if (!v50) {
      goto LABEL_72;
    }
    goto LABEL_70;
  }
  uint64_t v16 = (char *)operator new(0xE8uLL);
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)uint64_t v16 = &unk_1EF5819F0;
  *((void *)v16 + 3) = &unk_1EF558F70;
  *((_DWORD *)v16 + 8) = atomic_fetch_add(gdc::LayerData::nextId(void)::idGenerator, 1u) + 1;
  v16[40] = *(unsigned char *)a1;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v16 + 48), a1 + 8);
  v16[136] = 0;
  if (*(unsigned char *)(a1 + 96))
  {
    *((_DWORD *)v16 + 35) = *(_DWORD *)(a1 + 100);
    v16[136] = 1;
  }
  *((void *)v16 + 18) = *(void *)(a1 + 104);
  *((void *)v16 + 19) = 0;
  v16[184] = 1;
  *((void *)v16 + 21) = 0;
  *((void *)v16 + 22) = 0;
  *((void *)v16 + 20) = 0;
  *((void *)v16 + 3) = &unk_1EF544818;
  uint64_t v17 = **(void **)(a1 + 16);
  *((void *)v16 + 25) = 0;
  *((void *)v16 + 24) = v17;
  *((void *)v16 + 26) = 0;
  *((void *)v16 + 27) = 0;
  v16[224] = v49 != 0;
  if (!v49)
  {
    if (!v51) {
      goto LABEL_69;
    }
    if (!*(void *)(v51 + 152)) {
      goto LABEL_69;
    }
    uint64_t v31 = *(void *)(v51 + 152);
    double v32 = *(void ****)(v31 + 208);
    double v33 = *(void ****)(v31 + 216);
    if (v32 == v33) {
      goto LABEL_69;
    }
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v48 = _Q0;
    while (1)
    {
      long long v61 = xmmword_1A28FF1B0;
      long long v62 = xmmword_1A28FF1B0;
      long long v63 = xmmword_1A28FF1B0;
      long long v64 = xmmword_1A28FF1B0;
      long long v65 = xmmword_1A28FF1B0;
      long long v66 = xmmword_1A28FF1B0;
      unint64_t v67 = 0xFF7FFFFF7F7FFFFFLL;
      float64_t v58 = (void (**)(void **))&unk_1EF5768C0;
      double v59 = &v61;
      double v60 = (void **)&v58;
      float32x2_t v39 = *v32;
      float32x2_t v40 = v32[1];
      if (*v32 == v40)
      {
        float32x2_t v44 = (void (**)(void **))&unk_1EF5768C0;
      }
      else
      {
        float32x2_t v41 = (void **)&v58;
        do
        {
          __p[0] = *v39;
          LODWORD(__p[1]) = 1187205120;
          if (!v41
            || ((*((void (**)(void **, void **))*v41 + 6))(v41, __p),
                *(float *)&__p[1] = -*(float *)&__p[1],
                !v60))
          {
LABEL_76:
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
          }
          (*((void (**)(void **, void **))*v60 + 6))(v60, __p);
          float32x2_t v39 = (void **)((char *)v39 + 12);
          float32x2_t v41 = v60;
        }
        while (v39 != v40);
        if (v60 != (void **)&v58)
        {
          if (v60) {
            (*((void (**)(void))*v60 + 5))();
          }
          goto LABEL_66;
        }
        float32x2_t v44 = v58;
      }
      v44[4]((void **)&v58);
LABEL_66:
      v56[0] = 0;
      v56[1] = 0;
      uint64_t v57 = 0;
      __p[0] = 0;
      __p[1] = 0;
      unint64_t v54 = 0;
      float32x4_t v55 = v48;
      geo::DiscreteOrientedPolytope<arComponents::XY26DOPTraits<float>>::extractVertices((uint64_t)&v61, (char **)v56, (uint64_t)__p, v48, v42, v43);
      unint64_t v45 = *((void *)v16 + 26);
      if (v45 < *((void *)v16 + 27))
      {
        *(_OWORD *)unint64_t v45 = *(_OWORD *)v56;
        *(void *)(v45 + 16) = v57;
        *((void *)v16 + 26) = v45 + 24;
      }
      else
      {
        unint64_t v46 = std::vector<md::OcclusionMesh>::__emplace_back_slow_path<std::vector<gm::Matrix<float,3,1>>>((char **)v16 + 25, (uint64_t)v56);
        unint64_t v47 = v56[0];
        *((void *)v16 + 26) = v46;
        if (v47) {
          operator delete(v47);
        }
      }
      v32 += 19;
      if (v32 == v33) {
        goto LABEL_69;
      }
    }
  }
  int v18 = *(void ****)(v49 + 144);
  for (uint64_t i = *(void ****)(v49 + 152); v18 != i; v18 += 19)
  {
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v54 = 0;
    uint64_t v20 = (char *)v18[1] - (char *)*v18;
    if (v20)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 2);
      uint64_t v22 = 2 * v21;
      if (2 * v21 >= 0x1555555555555556) {
        abort();
      }
      __p[0] = operator new(24 * v21);
      __p[1] = __p[0];
      unint64_t v54 = (char *)__p[0] + 12 * v22;
    }
    double v23 = (void (**)(long long *))&unk_1EF576878;
    *(void *)&long long v61 = &unk_1EF576878;
    *((void *)&v61 + 1) = __p;
    *((void *)&v62 + 1) = &v61;
    unint64_t v25 = *v18;
    char v24 = v18[1];
    if (*v18 != v24)
    {
      int v26 = &v61;
      do
      {
        float64_t v58 = (void (**)(void **))*v25;
        LODWORD(v59) = 1187205120;
        if (!v26) {
          goto LABEL_76;
        }
        (*(void (**)(long long *, void (***)(void **)))(*(void *)v26 + 48))(v26, &v58);
        *(float *)&double v59 = -*(float *)&v59;
        if (!*((void *)&v62 + 1)) {
          goto LABEL_76;
        }
        (*(void (**)(void, void (***)(void **)))(**((void **)&v62 + 1) + 48))(*((void *)&v62 + 1), &v58);
        unint64_t v25 = (void **)((char *)v25 + 12);
        int v26 = (long long *)*((void *)&v62 + 1);
      }
      while (v25 != v24);
      if (*((long long **)&v62 + 1) != &v61)
      {
        if (*((void *)&v62 + 1)) {
          (*(void (**)(void))(**((void **)&v62 + 1) + 40))();
        }
        goto LABEL_44;
      }
      double v23 = (void (**)(long long *))v61;
    }
    v23[4](&v61);
LABEL_44:
    uint64_t v27 = (void *)*((void *)v16 + 26);
    if ((unint64_t)v27 < *((void *)v16 + 27))
    {
      *uint64_t v27 = 0;
      v27[1] = 0;
      v27[2] = 0;
      *(_OWORD *)uint64_t v27 = *(_OWORD *)__p;
      v27[2] = v54;
      *((void *)v16 + 26) = v27 + 3;
    }
    else
    {
      double v28 = std::vector<md::OcclusionMesh>::__emplace_back_slow_path<std::vector<gm::Matrix<float,3,1>>>((char **)v16 + 25, (uint64_t)__p);
      double v29 = __p[0];
      *((void *)v16 + 26) = v28;
      if (v29)
      {
        __p[1] = v29;
        operator delete(v29);
      }
    }
  }
LABEL_69:
  *a3 = v16 + 24;
  a3[1] = v16;
  double v30 = v50;
  if (!v50) {
    goto LABEL_72;
  }
LABEL_70:
  if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_72:
  if (v52)
  {
    if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_1A244AD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
}

uint64_t std::__shared_ptr_emplace<md::ARAssetOcclusionMeshData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::ARAssetOcclusionMeshData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5819F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ARAssetOcclusionMeshData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5819F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::ARAssetOcclusionMeshLayerDataSource::constructRequests(uint64_t a1, char **a2, char **a3)
{
  if (a2 != a3)
  {
    uint64_t v35 = v3;
    uint64_t v36 = v4;
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = *v6;
      char v26 = **v6;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v27, (uint64_t)(v7 + 8));
      char v30 = 0;
      if (v7[96])
      {
        int v31 = *((_DWORD *)v7 + 25);
        char v30 = 1;
      }
      uint64_t v32 = *((void *)v7 + 13);
      uint64_t v9 = *(void *)v28;
      uint64_t v8 = *((void *)v28 + 1);
      uint64_t v10 = *((void *)*v6 + 14);
      v16[0] = **v6;
      __int16 v17 = v8;
      unsigned int v18 = 0x80000000;
      double v19 = v23;
      uint64_t v20 = v23;
      unint64_t v21 = v23;
      uint64_t v22 = 32;
      unint64_t v24 = 0;
      uint64_t v33 = v9;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v19, v23, (char *)&v33, v34);
      uint64_t v33 = 0;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v19, v20, (char *)&v33, v34);
      uint64_t v11 = (unsigned __int8 *)v19;
      unint64_t v12 = v20 - (unsigned char *)v19;
      if (v20 == v19)
      {
        unint64_t v13 = 0;
      }
      else
      {
        unint64_t v13 = 0;
        if (v12 <= 1) {
          unint64_t v12 = 1;
        }
        do
        {
          unsigned int v14 = *v11++;
          v13 ^= (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL + v14;
          --v12;
        }
        while (v12);
      }
      unint64_t v24 = v13;
      uint64_t v25 = v10;
      uint64_t v15 = *v6;
      v6 += 2;
      gdc::LayerDataRequest::request(v15, (uint64_t)v16, 0);
      if (v19 != v21) {
        free(v19);
      }
      if (v30) {
        char v30 = 0;
      }
      if (v28 != v29) {
        free(v28);
      }
    }
    while (v6 != a3);
  }
}

void md::ARAssetOcclusionMeshLayerDataSource::~ARAssetOcclusionMeshLayerDataSource(md::ARAssetOcclusionMeshLayerDataSource *this)
{
  gdc::LayerDataSource::~LayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<md::DaVinciDecalBuilder::DecalDescription>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<md::DaVinciDecalBuilder::DecalDescription>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[4];
      if (v3)
      {
        v2[5] = v3;
        operator delete(v3);
      }
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void md::DaVinciDecalBuilder::buildBatch(int64x2_t *a1, uint64_t a2, uint64_t a3, float *a4, float *a5, geo::codec::VectorTile **a6, uint64_t a7)
{
  uint64_t v301 = *MEMORY[0x1E4F143B8];
  v278 = 0;
  unint64_t v276 = 0;
  v277 = 0;
  unint64_t v279 = 0;
  __src = 0;
  uint64_t v275 = 0;
  int64x2_t v271 = 0;
  v272 = 0;
  uint64_t v273 = 0;
  uint64_t v7 = (char *)a5 - (char *)a4;
  if (a5 == a4)
  {
    uint64_t v248 = 0;
    uint8x8_t v209 = 0;
    unint64_t v208 = 0;
    int64_t v133 = 0;
    int64x2_t v258 = 0u;
    goto LABEL_252;
  }
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 3);
  if (v8 > 0x2E8BA2E8BA2E8BALL
    || (unint64_t v10 = (unint64_t)a4,
        unint64_t v12 = (char *)operator new(0xB6DB6DB6DB6DB6E8 * (v7 >> 3)),
        int64x2_t v258 = vdupq_n_s64((unint64_t)v12),
        v7 < 0)
    || (v277 = operator new(0x2492492492492494 * (v7 >> 3)),
        v278 = v277,
        unint64_t v279 = (char *)v277 + 0x2492492492492494 * (v7 >> 3),
        ((v8 >> 59) & 7) != 0))
  {
    abort();
  }
  unint64_t v13 = &v12[0xB6DB6DB6DB6DB6E8 * (v7 >> 3)];
  __src = operator new(0xB6DB6DB6DB6DB6E0 * (v7 >> 3));
  uint64_t v275 = __src;
  unint64_t v276 = (char *)__src - 0x4924924924924920 * (v7 >> 3);
  __uint64_t n = (uint64_t *)(a2 + 80);
  *(void *)&long long v259 = &v299;
  uint64_t v14 = 12;
  unint64_t v245 = a6;
LABEL_7:
  uint64_t v16 = v278;
  __int16 v17 = v277;
  uint64_t v270 = 0;
  uint64_t v18 = geo::codec::VectorTile::daVinciVertices(*a6);
  double v253 = v17;
  *(void *)&long long v254 = v16;
  float v19 = *(float *)(v10 + 12);
  uint64_t v251 = (char *)(v10 + 12);
  uint64_t v270 = v18 + 12 * *(unsigned int *)(*(void *)v10 + 4);
  float v20 = *(float *)(v10 + 24);
  uint64_t v249 = (char *)(v10 + 24);
  float v21 = *(float *)(v10 + 28);
  float v22 = *(float *)(v10 + 32);
  float v23 = *(float *)(v10 + 36);
  float v25 = *(float *)(v10 + 16);
  float v24 = *(float *)(v10 + 20);
  float v26 = (float)-(float)((float)(v24 * v21) - (float)(v25 * v22)) - (float)((float)(v24 * v21) - (float)(v25 * v22));
  float v27 = (float)-(float)((float)(v19 * v22) - (float)(v24 * v20)) - (float)((float)(v19 * v22) - (float)(v24 * v20));
  float v28 = (float)-(float)((float)(v25 * v20) - (float)(v19 * v21)) - (float)((float)(v25 * v20) - (float)(v19 * v21));
  *(float *)&unsigned int v29 = -(float)((float)(v28 * v20) - (float)((float)-(float)(v25 - (float)(v26 * v22)) - (float)(v27 * v23)));
  *(float *)&unsigned int v30 = -(float)((float)((float)(v19 + (float)(v26 * v23)) + (float)(v27 * v22)) - (float)(v28 * v21));
  float v31 = -(float)((float)((float)(v24 + (float)(v26 * v21)) + (float)(v28 * v23)) - (float)(v27 * v20));
  float v32 = v21 * -2.0;
  float v33 = -(float)(v21 * (float)(v21 * -2.0));
  float v34 = 1.0 - (float)(v33 - (float)(v22 * (float)(v22 * -2.0)));
  float v35 = v20 * -2.0;
  float v36 = -(float)(v21 * (float)(v20 * -2.0));
  float v37 = (float)(v22 * -2.0) * v23;
  float v38 = -(float)(v22 * (float)(v20 * -2.0));
  float v39 = v23 * v32;
  float v40 = (float)(v23 * v32) - (float)(v22 * (float)(v20 * -2.0));
  float v41 = (float)((float)(v20 * -2.0) * v20) + 1.0;
  float v42 = v41 - (float)-(float)(v22 * (float)(v22 * -2.0));
  float v43 = -(float)(v22 * v32);
  float v44 = v23 * v35;
  float v45 = v44 + v43;
  *(float *)&long long v288 = v34;
  *((float *)&v288 + 1) = v37 + v36;
  *(float *)&unint64_t v289 = v36 - v37;
  *((float *)&v289 + 1) = v42;
  *(float *)&uint64_t v292 = v40;
  *((float *)&v292 + 1) = v43 - v44;
  *((float *)&v288 + 2) = v38 - v39;
  float v290 = v44 + v43;
  float v293 = v41 - v33;
  HIDWORD(v288) = 0;
  int v291 = 0;
  int v294 = 0;
  unint64_t v295 = __PAIR64__(v29, v30);
  float v296 = v31;
  int v297 = 1065353216;
  float v46 = *(float *)(v10 + 40);
  v250 = (char *)(v10 + 40);
  float v47 = *(float *)(v10 + 44);
  float v48 = *(float *)(v10 + 48);
  float32x4_t v49 = (float32x4_t)vzip1q_s32((int32x4_t)COERCE_UNSIGNED_INT(1.0 / v46), (int32x4_t)COERCE_UNSIGNED_INT(1.0 / v46));
  v50.i64[1] = 0x3F80000000000000;
  int8x16_t v51 = (int8x16_t)vmulq_f32(v49, (float32x4_t)xmmword_1A28FCDD0);
  float32x4_t v52 = vmlaq_f32((float32x4_t)vextq_s8(v51, v51, 8uLL), (float32x4_t)xmmword_1A28FCEA0, v49);
  v49.i32[0] = 0;
  v49.f32[1] = -1.0 / v47;
  float32x4_t v53 = (float32x4_t)vzip1q_s32((int32x4_t)v49.u64[0], (int32x4_t)v49.u64[0]);
  int8x16_t v54 = (int8x16_t)vmulq_f32(v53, (float32x4_t)xmmword_1A28FCDD0);
  *(float32x4_t *)v281 = v52;
  *(float32x4_t *)&v281[2] = vmlaq_f32((float32x4_t)vextq_s8(v54, v54, 8uLL), (float32x4_t)xmmword_1A28FCEA0, v53);
  float32x4_t v55 = vmulq_n_f32((float32x4_t)xmmword_1A28FCE90, 1.0 / v48);
  v50.i64[0] = v288;
  float32x4_t v56 = (float32x4_t)vzip1q_s32(v50, v50);
  int8x16_t v57 = (int8x16_t)vmulq_f32(v56, *(float32x4_t *)&v281[1]);
  v52.i64[1] = (uint64_t)v281[3];
  float32x4_t v58 = (float32x4_t)vzip1q_s32((int32x4_t)v289, (int32x4_t)v289);
  int8x16_t v59 = (int8x16_t)vmulq_f32(v58, *(float32x4_t *)&v281[1]);
  v269[0] = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v57, v57, 8uLL), v52, v56), v55, v38 - v39);
  v269[1] = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v59, v59, 8uLL), v52, v58), v55, v45);
  v60.i64[0] = v292;
  v58.i64[0] = v295;
  float32x4_t v61 = (float32x4_t)vzip1q_s32(v60, v60);
  int8x16_t v62 = (int8x16_t)vmulq_f32(v61, *(float32x4_t *)&v281[1]);
  float32x4_t v63 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v62, v62, 8uLL), v52, v61), v55, v293);
  float32x4_t v64 = (float32x4_t)vzip1q_s32((int32x4_t)v58, (int32x4_t)v58);
  int8x16_t v65 = (int8x16_t)vmulq_f32(v64, *(float32x4_t *)&v281[1]);
  v269[2] = v63;
  v269[3] = vaddq_f32(vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v65, v65, 8uLL), v52, v64), v55, v31), (float32x4_t)xmmword_1A28FD5D0);
  *(float *)&long long v267 = -(float)(v46 * 0.5);
  *((float *)&v267 + 1) = -(float)(v47 * 0.5);
  *((float *)&v267 + 2) = -(float)(v48 * 0.5);
  *((float *)&v267 + 3) = v46 * 0.5;
  *(float *)&uint64_t v268 = v47 * 0.5;
  *((float *)&v268 + 1) = v48 * 0.5;
  *(_OWORD *)uint64_t v264 = 0u;
  *(_OWORD *)v265 = 0u;
  int v266 = 1065353216;
  int v263 = 0;
  unint64_t v66 = *(void *)v10;
  uint64_t v67 = *(unsigned __int16 *)(v10 + 8);
  double v287 = 0;
  uint64_t v68 = operator new(0x60uLL);
  void *v68 = &unk_1EF5747D8;
  v68[1] = v10;
  double v252 = (float *)v10;
  v68[2] = a6;
  void v68[3] = &v270;
  v68[4] = &v288;
  v68[5] = &v267;
  v68[6] = &v263;
  v68[7] = v264;
  v68[8] = v269;
  v68[9] = &__src;
  v68[10] = &v271;
  v68[11] = &v277;
  double v287 = v68;
  *(void *)&long long v261 = v66;
  if (!std::__hash_table<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::__unordered_map_hasher<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::hash<GeoCodecsDaVinciMesh *>,std::equal_to<GeoCodecsDaVinciMesh *>,true>,std::__unordered_map_equal<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::equal_to<GeoCodecsDaVinciMesh *>,std::hash<GeoCodecsDaVinciMesh *>,true>,std::allocator<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>>>::__emplace_unique_key_args<GeoCodecsDaVinciMesh *,std::piecewise_construct_t const&,std::tuple<GeoCodecsDaVinciMesh * const&>,std::tuple<>>(__n, v66, (uint64_t *)&v261)[3])
  {
    uint64_t v69 = geo::codec::VectorTile::daVinciIndices(*a6);
    uint64_t v70 = *(unsigned int *)(v66 + 12);
    unint64_t v10 = (unint64_t)operator new(0x30uLL);
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)unint64_t v10 = &unk_1EF580138;
    unsigned int v71 = *(_DWORD *)(v66 + 16);
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    if (v71 <= 2)
    {
      memset(v281, 0, sizeof(v281));
      LODWORD(v282) = 1065353216;
      float64x2_t v72 = (char *)(v10 + 24);
      goto LABEL_102;
    }
    unsigned int v244 = v67;
    unint64_t v247 = v13;
    uint64_t v243 = v69 + 2 * v70;
    unint64_t v73 = v71 / 3uLL;
    float64x2_t v74 = (char *)operator new(12 * v73);
    size_t v75 = 12 * ((12 * v73 - 12) / 0xC) + 12;
    bzero(v74, v75);
    uint64_t v76 = 0;
    *(void *)(v10 + 24) = v74;
    *(void *)(v10 + 32) = &v74[v75];
    *(void *)(v10 + 40) = &v74[12 * v73];
    memset(v281, 0, sizeof(v281));
    LODWORD(v282) = 1065353216;
    if (v73 <= 1) {
      uint64_t v77 = 1;
    }
    else {
      uint64_t v77 = v73;
    }
    long long v78 = (__int16 *)(v69 + 2 * v70 + 4);
    do
    {
      __int16 v79 = *(v78 - 2);
      __int16 v80 = *(v78 - 1);
      __int16 v81 = *v78;
      v78 += 3;
      LOWORD(v280) = v79;
      HIWORD(v280) = v80;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::__unordered_map_hasher<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,md::HashEdges,std::equal_to<std::pair<unsigned short,unsigned short>>,true>,std::__unordered_map_equal<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::equal_to<std::pair<unsigned short,unsigned short>>,md::HashEdges,true>,std::allocator<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned short,unsigned short>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,unsigned short>&&>,std::tuple<>>((float *)v281, v280, &v280)+ 5) = v76;
      LOWORD(v280) = v80;
      HIWORD(v280) = v81;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::__unordered_map_hasher<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,md::HashEdges,std::equal_to<std::pair<unsigned short,unsigned short>>,true>,std::__unordered_map_equal<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::equal_to<std::pair<unsigned short,unsigned short>>,md::HashEdges,true>,std::allocator<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned short,unsigned short>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,unsigned short>&&>,std::tuple<>>((float *)v281, v280, &v280)+ 5) = v76;
      LOWORD(v280) = v81;
      HIWORD(v280) = v79;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::__unordered_map_hasher<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,md::HashEdges,std::equal_to<std::pair<unsigned short,unsigned short>>,true>,std::__unordered_map_equal<std::pair<unsigned short,unsigned short>,std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>,std::equal_to<std::pair<unsigned short,unsigned short>>,md::HashEdges,true>,std::allocator<std::__hash_value_type<std::pair<unsigned short,unsigned short>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned short,unsigned short>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,unsigned short>&&>,std::tuple<>>((float *)v281, v280, &v280)+ 5) = v76++;
    }
    while (v77 != v76);
    unint64_t v82 = (unint64_t)v281[1];
    float64x2_t v72 = (char *)(v10 + 24);
    uint64_t v83 = *(void *)(v10 + 24);
    if (!v281[1])
    {
      unint64_t v13 = v247;
      uint64_t v67 = v244;
      do
      {
        *(void *)uint64_t v83 = -1;
        *(_DWORD *)(v83 + 8) = -1;
        v83 += 12;
        --v77;
      }
      while (v77);
LABEL_102:
      unint64_t v119 = v281[2];
      if (v281[2])
      {
        do
        {
          float v120 = (void *)*v119;
          operator delete(v119);
          unint64_t v119 = v120;
        }
        while (v120);
      }
      unint64_t v121 = v281[0];
      v281[0] = 0;
      if (v121) {
        operator delete(v121);
      }
      *(void *)&long long v298 = v72;
      *((void *)&v298 + 1) = v10;
      unsigned int v122 = std::__hash_table<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::__unordered_map_hasher<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::hash<GeoCodecsDaVinciMesh *>,std::equal_to<GeoCodecsDaVinciMesh *>,true>,std::__unordered_map_equal<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::equal_to<GeoCodecsDaVinciMesh *>,std::hash<GeoCodecsDaVinciMesh *>,true>,std::allocator<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>>>::__emplace_unique_key_args<GeoCodecsDaVinciMesh *,std::piecewise_construct_t const&,std::tuple<GeoCodecsDaVinciMesh * const&>,std::tuple<>>(__n, v66, (uint64_t *)&v261);
      long long v298 = 0uLL;
      float v123 = (std::__shared_weak_count *)v122[4];
      v122[3] = v72;
      unsigned int v122[4] = v10;
      if (v123 && !atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
        float v124 = (std::__shared_weak_count *)*((void *)&v298 + 1);
        if (*((void *)&v298 + 1))
        {
LABEL_109:
          if (!atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
      }
      else
      {
        float v124 = (std::__shared_weak_count *)*((void *)&v298 + 1);
        if (*((void *)&v298 + 1)) {
          goto LABEL_109;
        }
      }
      unint64_t v66 = v261;
      goto LABEL_113;
    }
    uint64_t v84 = 0;
    uint8x8_t v85 = (uint8x8_t)vcnt_s8((int8x8_t)v281[1]);
    v85.i16[0] = vaddlv_u8(v85);
    unint64_t v86 = (unint64_t)v281[1] - 1;
    unint64_t v13 = v247;
    uint64_t v67 = v244;
LABEL_19:
    float v88 = (unsigned __int16 *)(v243 + 6 * v84);
    unint64_t v89 = *v88;
    unint64_t v90 = v88[1];
    unint64_t v91 = (v90 - 0x61C8864680B583EBLL + (v89 >> 2) + (v89 << 6)) ^ v89;
    if (v85.u32[0] > 1uLL)
    {
      uint64_t v92 = (v90 - 0x61C8864680B583EBLL + (v89 >> 2) + (v89 << 6)) ^ v89;
      if (v91 >= v82) {
        uint64_t v92 = v91 % v82;
      }
    }
    else
    {
      uint64_t v92 = v91 & v86;
    }
    BOOL v93 = v281[0];
    float v94 = (uint64_t **)*((void *)v281[0] + v92);
    if (!v94 || (float v95 = *v94) == 0)
    {
LABEL_44:
      int v100 = -1;
      goto LABEL_45;
    }
    if (v85.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v97 = v95[1];
        if (v97 == v91)
        {
          if (*((unsigned __int16 *)v95 + 8) == v90 && *((unsigned __int16 *)v95 + 9) == v89) {
            goto LABEL_97;
          }
        }
        else if ((v97 & v86) != v92)
        {
          goto LABEL_44;
        }
        float v95 = (uint64_t *)*v95;
        if (!v95) {
          goto LABEL_44;
        }
      }
    }
    while (1)
    {
      unint64_t v99 = v95[1];
      if (v99 == v91)
      {
        if (*((unsigned __int16 *)v95 + 8) == v90 && *((unsigned __int16 *)v95 + 9) == v89)
        {
LABEL_97:
          int v100 = *((_DWORD *)v95 + 5);
LABEL_45:
          unint64_t v101 = v88[2];
          *(_DWORD *)(v83 + 12 * v84) = v100;
          unint64_t v102 = (v101 - 0x61C8864680B583EBLL + (v90 >> 2) + (v90 << 6)) ^ v90;
          if (v85.u32[0] >= 2uLL)
          {
            uint64_t v103 = (v101 - 0x61C8864680B583EBLL + (v90 >> 2) + (v90 << 6)) ^ v90;
            if (v102 >= v82) {
              uint64_t v103 = v102 % v82;
            }
          }
          else
          {
            uint64_t v103 = v102 & v86;
          }
          uint64_t v104 = (uint64_t **)v93[v103];
          if (!v104 || (unsigned int v105 = *v104) == 0)
          {
LABEL_70:
            int v110 = -1;
            goto LABEL_71;
          }
          if (v85.u32[0] >= 2uLL)
          {
            while (1)
            {
              unint64_t v109 = v105[1];
              if (v109 == v102)
              {
                if (*((unsigned __int16 *)v105 + 8) == v101 && *((unsigned __int16 *)v105 + 9) == v90) {
                  goto LABEL_98;
                }
              }
              else
              {
                if (v109 >= v82) {
                  v109 %= v82;
                }
                if (v109 != v103) {
                  goto LABEL_70;
                }
              }
              unsigned int v105 = (uint64_t *)*v105;
              if (!v105) {
                goto LABEL_70;
              }
            }
          }
          while (2)
          {
            uint64_t v107 = v105[1];
            if (v107 != v102)
            {
              if ((v107 & v86) != v103) {
                goto LABEL_70;
              }
              goto LABEL_57;
            }
            if (*((unsigned __int16 *)v105 + 8) != v101 || *((unsigned __int16 *)v105 + 9) != v90)
            {
LABEL_57:
              unsigned int v105 = (uint64_t *)*v105;
              if (!v105) {
                goto LABEL_70;
              }
              continue;
            }
            break;
          }
LABEL_98:
          int v110 = *((_DWORD *)v105 + 5);
LABEL_71:
          *(_DWORD *)(v83 + 12 * v84 + 4) = v110;
          unint64_t v111 = (v89 - 0x61C8864680B583EBLL + (v101 >> 2) + (v101 << 6)) ^ v101;
          if (v85.u32[0] >= 2uLL)
          {
            uint64_t v112 = (v89 - 0x61C8864680B583EBLL + (v101 >> 2) + (v101 << 6)) ^ v101;
            if (v111 >= v82) {
              uint64_t v112 = v111 % v82;
            }
          }
          else
          {
            uint64_t v112 = v111 & v86;
          }
          int64_t v113 = (uint64_t **)v93[v112];
          if (!v113 || (unsigned int v114 = *v113) == 0)
          {
LABEL_17:
            int v87 = -1;
            goto LABEL_18;
          }
          if (v85.u32[0] >= 2uLL)
          {
            while (1)
            {
              unint64_t v118 = v114[1];
              if (v118 == v111)
              {
                if (*((unsigned __int16 *)v114 + 8) == v89 && *((unsigned __int16 *)v114 + 9) == v101) {
                  goto LABEL_99;
                }
              }
              else
              {
                if (v118 >= v82) {
                  v118 %= v82;
                }
                if (v118 != v112) {
                  goto LABEL_17;
                }
              }
              unsigned int v114 = (uint64_t *)*v114;
              if (!v114) {
                goto LABEL_17;
              }
            }
          }
          while (2)
          {
            uint64_t v116 = v114[1];
            if (v116 != v111)
            {
              if ((v116 & v86) != v112) {
                goto LABEL_17;
              }
              goto LABEL_83;
            }
            if (*((unsigned __int16 *)v114 + 8) != v89 || *((unsigned __int16 *)v114 + 9) != v101)
            {
LABEL_83:
              unsigned int v114 = (uint64_t *)*v114;
              if (!v114) {
                goto LABEL_17;
              }
              continue;
            }
            break;
          }
LABEL_99:
          int v87 = *((_DWORD *)v114 + 5);
LABEL_18:
          *(_DWORD *)(v83 + 12 * v84++ + 8) = v87;
          if (v84 == v77) {
            goto LABEL_102;
          }
          goto LABEL_19;
        }
      }
      else
      {
        if (v99 >= v82) {
          v99 %= v82;
        }
        if (v99 != v92) {
          goto LABEL_44;
        }
      }
      float v95 = (uint64_t *)*v95;
      if (!v95) {
        goto LABEL_44;
      }
    }
  }
LABEL_113:
  unint64_t v125 = (void *)std::__hash_table<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::__unordered_map_hasher<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::hash<GeoCodecsDaVinciMesh *>,std::equal_to<GeoCodecsDaVinciMesh *>,true>,std::__unordered_map_equal<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::equal_to<GeoCodecsDaVinciMesh *>,std::hash<GeoCodecsDaVinciMesh *>,true>,std::allocator<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>>>::__emplace_unique_key_args<GeoCodecsDaVinciMesh *,std::piecewise_construct_t const&,std::tuple<GeoCodecsDaVinciMesh * const&>,std::tuple<>>(__n, v66, (uint64_t *)&v261)[3];
  long long v298 = 0u;
  long long v299 = 0u;
  float v300 = 1.0;
  long long v282 = 0u;
  memset(v281, 0, sizeof(v281));
  std::deque<unsigned int>::__add_back_capacity((uint64_t)v281);
  uint64_t v126 = *((void *)&v282 + 1);
  int64_t v127 = v282;
  BOOL v128 = (void **)v281[2];
  float v129 = (void **)v281[1];
  *(_DWORD *)(*(void *)((char *)v281[1] + ((((void)v282 + *((void *)&v282 + 1)) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((v282 + *((void *)&v282 + 1)) & 0x3FF)) = v67;
  double v130 = (uint64_t *)(v126 + 1);
  if (v126 == -1) {
    goto LABEL_207;
  }
  uint64_t v248 = v13;
  while (1)
  {
    __n128 v131 = (char ***)v281[1];
    unsigned int v132 = *(_DWORD *)(*(void *)((char *)v281[1] + (((unint64_t)v127 >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * (v127 & 0x3FF));
    double v130 = (uint64_t *)((char *)v130 - 1);
    int64_t v133 = v127 + 1;
    *((void *)&v282 + 1) = v130;
    *(void *)&long long v282 = v127 + 1;
    if ((unint64_t)(v127 + 1) >= 0x800)
    {
      __n128 v131 = (char ***)((char *)v281[1] + 8);
      operator delete(*(void **)v281[1]);
      int64_t v133 = v127 - 1023;
      v281[1] = v131;
      *(void *)&long long v282 = v127 - 1023;
    }
    unsigned int v280 = v132;
    if (!v287) {
      break;
    }
    if ((*(unsigned int (**)(void *, unsigned int *))(*v287 + 48))(v287, &v280))
    {
      uint64_t v67 = 0;
      while (1)
      {
        unint64_t v134 = *(unsigned int *)(*v125 + 12 * v132 + 4 * v67);
        if (v134 != -1) {
          break;
        }
LABEL_122:
        if (++v67 == 3) {
          goto LABEL_115;
        }
      }
      unint64_t v135 = *((void *)&v298 + 1);
      if (*((void *)&v298 + 1))
      {
        uint8x8_t v136 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v298 + 8));
        v136.i16[0] = vaddlv_u8(v136);
        if (v136.u32[0] > 1uLL)
        {
          unint64_t v137 = *(unsigned int *)(*v125 + 12 * v132 + 4 * v67);
          if (*((void *)&v298 + 1) <= v134) {
            unint64_t v137 = v134 % *((void *)&v298 + 1);
          }
        }
        else
        {
          unint64_t v137 = (DWORD2(v298) - 1) & v134;
        }
        uint64_t v138 = *(uint64_t ***)(v298 + 8 * v137);
        if (v138)
        {
          uint64_t v139 = *v138;
          if (v139)
          {
            if (v136.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v141 = v139[1];
                if (v141 == v134)
                {
                  if (*((_DWORD *)v139 + 4) == v134) {
                    goto LABEL_122;
                  }
                }
                else if ((v141 & (*((void *)&v298 + 1) - 1)) != v137)
                {
                  goto LABEL_144;
                }
                uint64_t v139 = (uint64_t *)*v139;
                if (!v139) {
                  goto LABEL_144;
                }
              }
            }
            do
            {
              unint64_t v140 = v139[1];
              if (v140 == v134)
              {
                if (*((_DWORD *)v139 + 4) == v134) {
                  goto LABEL_122;
                }
              }
              else
              {
                if (v140 >= *((void *)&v298 + 1)) {
                  v140 %= *((void *)&v298 + 1);
                }
                if (v140 != v137) {
                  break;
                }
              }
              uint64_t v139 = (uint64_t *)*v139;
            }
            while (v139);
          }
        }
LABEL_144:
        if (v136.u32[0] > 1uLL)
        {
          unint64_t v10 = *(unsigned int *)(*v125 + 12 * v132 + 4 * v67);
          if (*((void *)&v298 + 1) <= v134) {
            unint64_t v10 = v134 % *((void *)&v298 + 1);
          }
        }
        else
        {
          unint64_t v10 = (DWORD2(v298) - 1) & v134;
        }
        BOOL v142 = *(uint64_t ***)(v298 + 8 * v10);
        if (v142)
        {
          double v143 = *v142;
          if (v143)
          {
            if (v136.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v145 = v143[1];
                if (v145 == v134)
                {
                  if (*((_DWORD *)v143 + 4) == v134) {
                    goto LABEL_201;
                  }
                }
                else if ((v145 & (*((void *)&v298 + 1) - 1)) != v10)
                {
                  goto LABEL_163;
                }
                double v143 = (uint64_t *)*v143;
                if (!v143) {
                  goto LABEL_163;
                }
              }
            }
            do
            {
              unint64_t v144 = v143[1];
              if (v144 == v134)
              {
                if (*((_DWORD *)v143 + 4) == v134) {
                  goto LABEL_201;
                }
              }
              else
              {
                if (v144 >= *((void *)&v298 + 1)) {
                  v144 %= *((void *)&v298 + 1);
                }
                if (v144 != v10) {
                  break;
                }
              }
              double v143 = (uint64_t *)*v143;
            }
            while (v143);
          }
        }
      }
LABEL_163:
      uint64_t v146 = operator new(0x18uLL);
      *uint64_t v146 = 0;
      v146[1] = v134;
      *((_DWORD *)v146 + 4) = v134;
      float v147 = (float)(unint64_t)(*((void *)&v299 + 1) + 1);
      if (!v135 || (float)(v300 * (float)v135) < v147)
      {
        BOOL v148 = (v135 & (v135 - 1)) != 0;
        if (v135 < 3) {
          BOOL v148 = 1;
        }
        unint64_t v149 = v148 | (2 * v135);
        unint64_t v150 = vcvtps_u32_f32(v147 / v300);
        if (v149 <= v150) {
          size_t prime = v150;
        }
        else {
          size_t prime = v149;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v135 = *((void *)&v298 + 1);
        }
        if (prime > v135) {
          goto LABEL_175;
        }
        if (prime < v135)
        {
          unint64_t v152 = vcvtps_u32_f32((float)*((unint64_t *)&v299 + 1) / v300);
          if (v135 < 3
            || (uint8x8_t v153 = (uint8x8_t)vcnt_s8((int8x8_t)v135), v153.i16[0] = vaddlv_u8(v153), v153.u32[0] > 1uLL))
          {
            unint64_t v152 = std::__next_prime(v152);
          }
          else
          {
            uint64_t v154 = 1 << -(char)__clz(v152 - 1);
            if (v152 >= 2) {
              unint64_t v152 = v154;
            }
          }
          if (prime <= v152) {
            size_t prime = v152;
          }
          if (prime < v135) {
LABEL_175:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)&v298, prime);
        }
        unint64_t v135 = *((void *)&v298 + 1);
        if ((v135 & (v135 - 1)) != 0)
        {
          if (*((void *)&v298 + 1) <= v134) {
            unint64_t v10 = v134 % *((void *)&v298 + 1);
          }
          else {
            unint64_t v10 = v134;
          }
        }
        else
        {
          unint64_t v10 = (DWORD2(v298) - 1) & v134;
        }
      }
      uint64_t v155 = v298;
      double v156 = *(void **)(v298 + 8 * v10);
      if (v156)
      {
        *uint64_t v146 = *v156;
        goto LABEL_199;
      }
      *uint64_t v146 = v299;
      *(void *)&long long v299 = v146;
      *(void *)(v155 + 8 * v10) = &v299;
      if (*v146)
      {
        unint64_t v157 = *(void *)(*v146 + 8);
        if ((v135 & (v135 - 1)) != 0)
        {
          if (v157 >= v135) {
            v157 %= v135;
          }
        }
        else
        {
          v157 &= v135 - 1;
        }
        double v156 = (void *)(v298 + 8 * v157);
LABEL_199:
        *double v156 = v146;
      }
      ++*((void *)&v299 + 1);
LABEL_201:
      BOOL v128 = (void **)v281[2];
      uint64_t v158 = (char *)v281[1];
      if (v281[2] == v281[1]) {
        int64_t v159 = 0;
      }
      else {
        int64_t v159 = (((char *)v281[2] - (char *)v281[1]) << 7) - 1;
      }
      unint64_t v160 = (unint64_t)v130 + v133;
      if ((uint64_t *)v159 == (uint64_t *)((char *)v130 + v133))
      {
        std::deque<unsigned int>::__add_back_capacity((uint64_t)v281);
        uint64_t v158 = (char *)v281[1];
        BOOL v128 = (void **)v281[2];
        double v130 = (uint64_t *)*((void *)&v282 + 1);
        int64_t v133 = v282;
        unint64_t v160 = v282 + *((void *)&v282 + 1);
      }
      *(_DWORD *)(*(void *)&v158[(v160 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v160 & 0x3FF)) = v134;
      double v130 = (uint64_t *)((char *)v130 + 1);
      *((void *)&v282 + 1) = v130;
      goto LABEL_122;
    }
LABEL_115:
    int64_t v127 = v133;
    if (!v130)
    {
      float v129 = (void **)v281[1];
      unint64_t v13 = v248;
LABEL_207:
      if ((unint64_t)((char *)v128 - (char *)v129) >= 0x11)
      {
        unint64_t v161 = (char *)v128 - (char *)v129;
        do
        {
          long double v162 = *v129++;
          operator delete(v162);
          v281[1] = v129;
          v161 -= 8;
        }
        while (v161 > 0x10);
      }
      while (v129 != v128)
      {
        long double v163 = *v129++;
        operator delete(v163);
      }
      if (v281[0]) {
        operator delete(v281[0]);
      }
      double v164 = (void *)v299;
      if ((void)v299)
      {
        do
        {
          long double v165 = (void *)*v164;
          operator delete(v164);
          double v164 = v165;
        }
        while (v165);
      }
      __double2 v166 = (void *)v298;
      *(void *)&long long v298 = 0;
      if (v166) {
        operator delete(v166);
      }
      if (v287 == v286)
      {
        (*(void (**)(void *))(v286[0] + 32))(v286);
        double v168 = v253;
        uint64_t v167 = v254;
      }
      else
      {
        double v168 = v253;
        uint64_t v167 = v254;
        if (v287) {
          (*(void (**)(void))(*v287 + 40))();
        }
      }
      float v169 = fmaxf(*((float *)&v267 + 3) - *(float *)&v267, *(float *)&v268 - *((float *)&v267 + 1));
      *((float *)&v267 + 2) = v169 * -0.5;
      *((float *)&v268 + 1) = v169 * 0.5;
      float v170 = v252[7];
      float v171 = v252[8];
      float v172 = v252[9];
      float v173 = v170 + v170;
      float v174 = (float)(v170 + v170) * v170;
      float v175 = (float)(v171 + v171) * v171;
      int v177 = *((_DWORD *)v252 + 5);
      float v176 = v252[6];
      float v178 = v176 + v176;
      float v179 = (float)(v176 + v176) * v170;
      float v180 = (float)(v171 + v171) * v172;
      float v181 = v171 * (float)(v176 + v176);
      float v182 = 1.0 - (float)((float)(v176 + v176) * v176);
      float v183 = v173 * v171;
      *(float *)v281 = 1.0 - (float)(v174 + v175);
      *((float *)v281 + 1) = v180 + v179;
      *(float *)&v281[2] = v179 - v180;
      *((float *)&v281[2] + 1) = v182 - v175;
      *(float *)&long long v282 = (float)(v172 * v173) + v181;
      *((float *)&v282 + 1) = v183 - (float)(v172 * v178);
      *(float *)&v281[1] = v181 - (float)(v172 * v173);
      v281[3] = (void *)COERCE_UNSIGNED_INT((float)(v172 * v178) + v183);
      *((float *)&v282 + 2) = v182 - v174;
      HIDWORD(v281[1]) = 0;
      HIDWORD(v282) = 0;
      uint64_t v184 = *(void *)(v252 + 3);
      int v284 = v177;
      uint64_t v283 = v184;
      int v285 = 1065353216;
      long long v261 = xmmword_1A28FC710;
      uint64_t v262 = 0x80000000800000;
      *(void *)&long long v298 = &unk_1EF57D5F0;
      *((void *)&v298 + 1) = &v261;
      *(void *)&long long v299 = v281;
      *((void *)&v299 + 1) = &v298;
      gm::Box<float,3>::forEachCorner((uint64_t *)&v267, (uint64_t)&v298);
      if (*((long long **)&v299 + 1) == &v298)
      {
        (*(void (**)(long long *))(v298 + 32))(&v298);
      }
      else if (*((void *)&v299 + 1))
      {
        (*(void (**)(void))(**((void **)&v299 + 1) + 40))();
      }
      uint64_t v185 = (v167 - (uint64_t)v168) >> 1;
      long long v267 = v261;
      uint64_t v268 = v262;
      uint64_t v186 = (v278 - (unsigned char *)v277) >> 1;
      uint64_t v187 = v258.i64[1];
      if (v258.i64[1] >= (unint64_t)v13)
      {
        unint64_t v193 = 0x2E8BA2E8BA2E8BA3 * ((v258.i64[1] - v258.i64[0]) >> 3) + 1;
        if (v193 > 0x2E8BA2E8BA2E8BALL) {
          abort();
        }
        if (0x5D1745D1745D1746 * ((uint64_t)&v13[-v258.i64[0]] >> 3) > v193) {
          unint64_t v193 = 0x5D1745D1745D1746 * ((uint64_t)&v13[-v258.i64[0]] >> 3);
        }
        if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v13[-v258.i64[0]] >> 3)) >= 0x1745D1745D1745DLL) {
          unint64_t v194 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          unint64_t v194 = v193;
        }
        if (v194)
        {
          if (v194 > 0x2E8BA2E8BA2E8BALL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v195 = (char *)operator new(88 * v194);
        }
        else
        {
          uint64_t v195 = 0;
        }
        int v196 = v263;
        unint64_t v197 = &v195[8 * ((v258.i64[1] - v258.i64[0]) >> 3)];
        *(void *)unint64_t v197 = *(void *)v251;
        *((_DWORD *)v197 + 2) = *((_DWORD *)v251 + 2);
        *(void *)(v197 + 12) = *(void *)v249;
        *((_DWORD *)v197 + 5) = *((_DWORD *)v249 + 2);
        *((float *)v197 + 6) = v252[9];
        *(void *)(v197 + 28) = *(void *)v250;
        *((_DWORD *)v197 + 9) = *((_DWORD *)v250 + 2);
        *((_DWORD *)v197 + 10) = v196;
        *((void *)v197 + 6) = v185;
        *((void *)v197 + 7) = v186;
        *((void *)v197 + 10) = v268;
        *((_OWORD *)v197 + 4) = v267;
        uint64_t v198 = (uint64_t)v197;
        if (v258.i64[1] == v258.i64[0])
        {
          a6 = v245;
        }
        else
        {
          a6 = v245;
          do
          {
            uint64_t v199 = *(void *)(v187 - 88);
            v187 -= 88;
            int v200 = *(_DWORD *)(v187 + 8);
            *(void *)(v198 - 88) = v199;
            v198 -= 88;
            *(_DWORD *)(v198 + 8) = v200;
            uint64_t v201 = *(void *)(v187 + 12);
            *(_DWORD *)(v198 + 20) = *(_DWORD *)(v187 + 20);
            *(void *)(v198 + 12) = v201;
            *(_DWORD *)(v198 + 24) = *(_DWORD *)(v187 + 24);
            long long v202 = *(_OWORD *)(v187 + 28);
            long long v203 = *(_OWORD *)(v187 + 44);
            long long v204 = *(_OWORD *)(v187 + 60);
            *(_OWORD *)(v198 + 72) = *(_OWORD *)(v187 + 72);
            *(_OWORD *)(v198 + 60) = v204;
            *(_OWORD *)(v198 + 44) = v203;
            *(_OWORD *)(v198 + 28) = v202;
          }
          while (v187 != v258.i64[0]);
          uint64_t v187 = v258.i64[0];
        }
        unint64_t v13 = &v195[88 * v194];
        uint64_t v192 = (uint64_t)(v197 + 88);
        v258.i64[0] = v198;
        if (v187) {
          operator delete((void *)v187);
        }
      }
      else
      {
        int v188 = v263;
        int v189 = *((_DWORD *)v251 + 2);
        *(void *)v258.i64[1] = *(void *)v251;
        *(_DWORD *)(v258.i64[1] + 8) = v189;
        int v190 = *((_DWORD *)v249 + 2);
        *(void *)(v258.i64[1] + 12) = *(void *)v249;
        *(_DWORD *)(v258.i64[1] + 20) = v190;
        *(float *)(v258.i64[1] + 24) = v252[9];
        int v191 = *((_DWORD *)v250 + 2);
        *(void *)(v258.i64[1] + 28) = *(void *)v250;
        *(_DWORD *)(v258.i64[1] + 36) = v191;
        *(_DWORD *)(v258.i64[1] + 40) = v188;
        *(void *)(v258.i64[1] + 48) = v185;
        *(void *)(v258.i64[1] + 56) = v186;
        *(_OWORD *)(v258.i64[1] + 64) = v267;
        *(void *)(v258.i64[1] + 80) = v268;
        uint64_t v192 = v258.i64[1] + 88;
        a6 = v245;
      }
      double v205 = v265[0];
      if (v265[0])
      {
        do
        {
          unint64_t v206 = (void *)*v205;
          operator delete(v205);
          double v205 = v206;
        }
        while (v206);
      }
      unint64_t v207 = v264[0];
      v264[0] = 0;
      if (v207) {
        operator delete(v207);
      }
      v15.i64[0] = v258.i64[0];
      v15.i64[1] = v192;
      int64x2_t v258 = v15;
      unint64_t v10 = (unint64_t)(v252 + 14);
      if (v252 + 14 == a5)
      {
        uint64_t v248 = v13;
        unint64_t v208 = v278;
        uint8x8_t v209 = v277;
        int64_t v133 = v275 - (unsigned char *)__src;
LABEL_252:
        unint64_t v210 = operator new(0xF8uLL);
        uint64_t v14 = v133 >> 3;
        v210[1] = 0;
        v210[2] = 0;
        *unint64_t v210 = &unk_1EF5851F0;
        uint64_t v211 = (void *)ggl::BufferData::BufferData((uint64_t)(v210 + 3), 8, 0, 0, 1, v133 >> 3);
        __n128 v131 = &ggl::DaVinci::texturedPositionCompressedVboReflection;
        v210[29] = "Decal Vertex Data";
        v210[30] = &ggl::DaVinci::texturedPositionCompressedVboReflection;
        v210[3] = &unk_1EF55CE88;
        v210[28] = &unk_1EF55CEA8;
        v281[0] = v211;
        v281[1] = v210;
        unint64_t v212 = operator new(0xF8uLL);
        unint64_t v213 = (uint64_t *)(v208 - v209);
        uint64_t v67 = (v208 - v209) >> 1;
        v212[1] = 0;
        v212[2] = 0;
        void *v212 = &unk_1EF589D68;
        uint64_t v214 = ggl::BufferData::BufferData((uint64_t)(v212 + 3), 2, 1, 0, 6, v67);
        v212[3] = &unk_1EF561BA0;
        v212[4] = 2;
        v212[28] = &unk_1EF561BC0;
        v212[29] = "Decal Index Data";
        *((_DWORD *)v212 + 60) = 0;
        *(void *)&long long v298 = v214;
        *((void *)&v298 + 1) = v212;
        int64_t v127 = (int64_t)operator new(0xA8uLL);
        __uint64_t n = v213;
        *(void *)(v127 + 8) = 0;
        *(void *)(v127 + 16) = 0;
        *(void *)int64_t v127 = &unk_1EF5897B8;
        unint64_t v125 = (void *)(v127 + 24);
        long long v215 = *(_OWORD *)v281;
        v281[0] = 0;
        v281[1] = 0;
        long long v259 = v298;
        long long v298 = 0uLL;
        double v130 = &ggl::MeshTyped<ggl::DaVinci::TexturedPositionCompressedVbo>::typedReflection(void)::r;
        {
          long long v254 = v215;
          long long v215 = v254;
          if (v237)
          {
            goto LABEL_334;
          }
        }
        goto LABEL_253;
      }
      goto LABEL_7;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
LABEL_340:
  {
    ggl::MeshTyped<ggl::DaVinci::TexturedPositionCompressedVbo>::attributesReflection(void)::r = (uint64_t)v131;
  }
LABEL_334:
  *double v130 = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedPositionCompressedVbo>::attributesReflection(void)::r;
  v130[1] = 1;
  long long v215 = v254;
LABEL_253:
  *(void *)(v127 + 88) = 0;
  *(void *)(v127 + 56) = 0;
  *(void *)(v127 + 64) = 0;
  *(_DWORD *)(v127 + 72) = 0;
  *(void *)(v127 + 24) = &unk_1EF5606B0;
  *(void *)(v127 + 32) = "Decal Mesh";
  *(void *)(v127 + 40) = &unk_1EF5606D0;
  *(void *)(v127 + 48) = 0;
  *(void *)(v127 + 80) = v130;
  *(void *)(v127 + 96) = 0;
  *(void *)(v127 + 104) = 0;
  {
    long long v255 = v215;
    long long v215 = v255;
    if (v238) {
      operator new();
    }
  }
  uint64_t v216 = ggl::Allocator::instance(void)::alloc;
  *(void *)(v127 + 144) = 0;
  *(void *)(v127 + 120) = 0;
  *(void *)(v127 + 128) = 0;
  *(void *)(v127 + 112) = v216;
  {
    long long v256 = v215;
    long long v215 = v256;
    if (v239) {
      operator new();
    }
  }
  *(void *)(v127 + 152) = ggl::Allocator::instance(void)::alloc;
  *(void *)(v127 + 160) = 0;
  *(void *)(v127 + 136) = v127 + 144;
  *(void *)(v127 + 24) = &unk_1EF562AE0;
  *(void *)(v127 + 40) = &unk_1EF562B00;
  long long v288 = v215;
  float v217 = (std::__shared_weak_count *)*((void *)&v215 + 1);
  if (*((void *)&v215 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v215 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v127 + 88, (uint64_t *)&v288, (uint64_t *)&v289, 1uLL);
  float v218 = (std::__shared_weak_count *)*((void *)&v288 + 1);
  if (*((void *)&v288 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v288 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
    std::__shared_weak_count::__release_weak(v218);
  }
  if (*((void *)&v259 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v259 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v219 = *(std::__shared_weak_count **)(v127 + 128);
  *(_OWORD *)(v127 + 120) = v259;
  if (v219 && !atomic_fetch_add(&v219->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
    std::__shared_weak_count::__release_weak(v219);
  }
  void *v125 = &unk_1EF561308;
  *(void *)(v127 + 40) = &unk_1EF561328;
  if (*((void *)&v259 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v259 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v259 + 1) + 16))(*((void *)&v259 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v259 + 1));
  }
  if (v217 && !atomic_fetch_add(&v217->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
    std::__shared_weak_count::__release_weak(v217);
  }
  *(void *)&v269[0] = v125;
  *((void *)&v269[0] + 1) = v127;
  unint64_t v220 = (std::__shared_weak_count *)*((void *)&v298 + 1);
  if (*((void *)&v298 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v298 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
    std::__shared_weak_count::__release_weak(v220);
  }
  unint64_t v221 = (std::__shared_weak_count *)v281[1];
  if (v281[1] && !atomic_fetch_add((atomic_ullong *volatile)v281[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
    std::__shared_weak_count::__release_weak(v221);
  }
  uint64_t v222 = *(void *)&v269[0];
  uint64_t v223 = **(void **)(*(void *)&v269[0] + 64);
  uint64_t v224 = *(void *)(v223 + 8) * v14;
  if (v224)
  {
    if (a7 && *(unsigned char *)(v223 + 17) != 2) {
      uint64_t v225 = (void *)(*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))(*(void *)a7 + 56))(a7, **(void **)(*(void *)&v269[0] + 64), 0, v224, 1, 1);
    }
    else {
      uint64_t v225 = *(void **)(v223 + 72);
    }
  }
  else
  {
    uint64_t v225 = 0;
  }
  memcpy(v225, __src, v133);
  if (v225 && a7 && v224 && *(unsigned char *)(v223 + 17) != 2) {
    (*(void (**)(uint64_t, void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)a7 + 64))(a7, v225, v223, 0, v224, 1, 1);
  }
  v226 = (char *)operator new(0xE0uLL);
  *((void *)v226 + 1) = 0;
  uint64_t v227 = (atomic_ullong *)(v226 + 8);
  *((void *)v226 + 2) = 0;
  *(void *)v226 = &unk_1EF583FC8;
  long long v228 = v226 + 24;
  ggl::BufferData::BufferData((uint64_t)(v226 + 24), qword_1E9558C10, 3, 0, 1, v14);
  *((void *)v226 + 3) = &unk_1EF55B9D0;
  uint64_t v229 = *((void *)v226 + 4) * v14;
  size_t v230 = v133 >> 1;
  if (v229)
  {
    if (!a7 || v226[41] == 2) {
      v231 = (void *)*((void *)v226 + 12);
    }
    else {
      v231 = (void *)(*(uint64_t (**)(uint64_t, char *, void, uint64_t, uint64_t, uint64_t))(*(void *)a7 + 56))(a7, v228, 0, v229, 1, 1);
    }
    memcpy(v231, v271, v230);
    if (v231 && a7 && v226[41] != 2) {
      (*(void (**)(uint64_t, void *, char *, void, uint64_t, uint64_t, uint64_t))(*(void *)a7 + 64))(a7, v231, v228, 0, v229, 1, 1);
    }
  }
  else
  {
    memcpy(0, v271, v230);
  }
  v260[0] = (uint64_t *)(v226 + 24);
  v260[1] = (uint64_t *)v226;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v226 + 1, 1uLL, memory_order_relaxed);
  ggl::Mesh::setCustomDeviceData(v222, v260, 0);
  if (atomic_fetch_add((atomic_ullong *volatile)v226 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(v227, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_300;
    }
LABEL_305:
    (*(void (**)(char *))(*(void *)v226 + 16))(v226);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v226);
  }
  else
  {
    (*(void (**)(char *))(*(void *)v226 + 16))(v226);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v226);
    if (!atomic_fetch_add(v227, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_305;
    }
  }
LABEL_300:
  uint64_t v232 = *(void *)&v269[0];
  uint64_t v233 = *(void *)(*(void *)&v269[0] + 96);
  uint64_t v234 = *(void *)(v233 + 8) * v67;
  if (v234)
  {
    if (a7 && *(unsigned char *)(v233 + 17) != 2) {
      uint64_t v235 = (void *)(*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))(*(void *)a7 + 56))(a7, *(void *)(*(void *)&v269[0] + 96), 0, v234, 1, 1);
    }
    else {
      uint64_t v235 = *(void **)(v233 + 72);
    }
    memcpy(v235, v277, (size_t)__n);
    if (v235 && a7 && *(unsigned char *)(v233 + 17) != 2) {
      (*(void (**)(uint64_t, void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)a7 + 64))(a7, v235, v233, 0, v234, 1, 1);
    }
  }
  else
  {
    memcpy(0, v277, (size_t)__n);
  }
  if (!a3)
  {
    a1->i8[0] = 0;
    uint64_t v236 = (std::__shared_weak_count *)*((void *)&v269[0] + 1);
    if (!*((void *)&v269[0] + 1)) {
      goto LABEL_320;
    }
    goto LABEL_318;
  }
  uint64_t v236 = (std::__shared_weak_count *)*((void *)&v269[0] + 1);
  if (*((void *)&v269[0] + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v269[0] + 1) + 8), 1uLL, memory_order_relaxed);
  }
  a1->i8[0] = 1;
  a1->i64[1] = v232;
  a1[1].i64[0] = (uint64_t)v236;
  a1[1].i64[1] = a3;
  a1[2] = v258;
  v258.i64[0] = 0;
  a1[3].i64[0] = (uint64_t)v248;
  if (v236)
  {
LABEL_318:
    if (!atomic_fetch_add(&v236->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
LABEL_320:
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (__src)
  {
    uint64_t v275 = __src;
    operator delete(__src);
  }
  if (v277)
  {
    v278 = v277;
    operator delete(v277);
  }
  if (v258.i64[0]) {
    operator delete((void *)v258.i64[0]);
  }
}

void sub_1A244D0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a57);
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
    float64x2_t v72 = a70;
    if (!a70)
    {
LABEL_3:
      unint64_t v73 = (void *)STACK[0x200];
      if (!STACK[0x200]) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    float64x2_t v72 = a70;
    if (!a70) {
      goto LABEL_3;
    }
  }
  a71 = (uint64_t)v72;
  operator delete(v72);
  unint64_t v73 = (void *)STACK[0x200];
  if (!STACK[0x200])
  {
LABEL_5:
    if (a37) {
      operator delete(a37);
    }
    _Unwind_Resume(a1);
  }
LABEL_4:
  STACK[0x208] = (unint64_t)v73;
  operator delete(v73);
  goto LABEL_5;
}

void *std::construct_at[abi:nn180100]<md::DaVinciDecalBatch,md::DaVinciDecalBatch const&,md::DaVinciDecalBatch*>(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = a2[2];
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v4 = (uint64_t *)a2[3];
  unint64_t v5 = (uint64_t *)a2[4];
  int64_t v6 = (char *)v5 - (char *)v4;
  if (v5 != v4)
  {
    unint64_t v7 = 0x2E8BA2E8BA2E8BA3 * (v6 >> 3);
    if (v7 >= 0x2E8BA2E8BA2E8BBLL) {
      abort();
    }
    unint64_t v8 = (char *)operator new(v6);
    a1[3] = v8;
    a1[4] = v8;
    a1[5] = &v8[88 * v7];
    do
    {
      uint64_t v9 = *v4;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v4 + 2);
      *(void *)unint64_t v8 = v9;
      uint64_t v10 = *(uint64_t *)((char *)v4 + 12);
      *((_DWORD *)v8 + 5) = *((_DWORD *)v4 + 5);
      *(void *)(v8 + 12) = v10;
      *((_DWORD *)v8 + 6) = *((_DWORD *)v4 + 6);
      long long v11 = *(_OWORD *)((char *)v4 + 28);
      long long v12 = *(_OWORD *)((char *)v4 + 44);
      long long v13 = *(_OWORD *)((char *)v4 + 60);
      *(_OWORD *)(v8 + 72) = *(_OWORD *)(v4 + 9);
      *(_OWORD *)(v8 + 60) = v13;
      *(_OWORD *)(v8 + 44) = v12;
      *(_OWORD *)(v8 + 28) = v11;
      v8 += 88;
      v4 += 11;
    }
    while (v4 != v5);
    a1[4] = v8;
  }
  return a1;
}

void sub_1A244D2DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<md::DaVinciDecalBatch>::__push_back_slow_path<md::DaVinciDecalBatch const&>(void **a1, void *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  float v19 = &v7[48 * v2];
  float v21 = &v7[48 * v6];
  std::construct_at[abi:nn180100]<md::DaVinciDecalBatch,md::DaVinciDecalBatch const&,md::DaVinciDecalBatch*>(v19, a2);
  unint64_t v8 = v19;
  uint64_t v9 = (char *)*a1;
  uint64_t v10 = (char *)a1[1];
  if (v10 == *a1)
  {
    int64x2_t v15 = (char *)a1[1];
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      long long v12 = &v19[v11];
      long long v13 = &v10[v11];
      *((_OWORD *)v12 - 3) = *(_OWORD *)&v10[v11 - 48];
      *((void *)v13 - 6) = 0;
      *((void *)v13 - 5) = 0;
      uint64_t v14 = *(void *)&v10[v11 - 32];
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      *((void *)v12 - 4) = v14;
      *((void *)v12 - 3) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)&v10[v11 - 24];
      *((void *)v12 - 1) = *(void *)&v10[v11 - 8];
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      v11 -= 48;
    }
    while (&v10[v11] != v9);
    unint64_t v8 = &v19[v11];
    int64x2_t v15 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
  }
  *a1 = v8;
  a1[1] = v19 + 48;
  a1[2] = v21;
  if (v10 != v15)
  {
    do
    {
      float v20 = v10 - 48;
      uint64_t v16 = (void *)*((void *)v10 - 3);
      if (v16)
      {
        *((void *)v10 - 2) = v16;
        operator delete(v16);
      }
      __int16 v17 = (std::__shared_weak_count *)*((void *)v10 - 5);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v10 -= 48;
    }
    while (v20 != v15);
    uint64_t v10 = v15;
  }
  if (v10) {
    operator delete(v10);
  }
  return v19 + 48;
}

void sub_1A244D52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<md::DaVinciDecalBatch>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::optional<md::DaVinciDecalBatch>::~optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    unint64_t v2 = *(void **)(a1 + 32);
    if (v2)
    {
      *(void *)(a1 + 40) = v2;
      operator delete(v2);
    }
    unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void **std::vector<md::DaVinciDecalBatch>::~vector[abi:nn180100](void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 - 5);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__split_buffer<md::DaVinciDecalBatch>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
    unint64_t v5 = *(std::__shared_weak_count **)(i - 40);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::function<BOOL ()(unsigned int)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::TexturedPositionCompressedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedPositionCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5897B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::TexturedPositionCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5897B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__hash_table<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::__unordered_map_hasher<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::hash<GeoCodecsDaVinciMesh *>,std::equal_to<GeoCodecsDaVinciMesh *>,true>,std::__unordered_map_equal<GeoCodecsDaVinciMesh *,std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>,std::equal_to<GeoCodecsDaVinciMesh *>,std::hash<GeoCodecsDaVinciMesh *>,true>,std::allocator<std::__hash_value_type<GeoCodecsDaVinciMesh *,std::shared_ptr<md::TriConnectivity>>>>::__emplace_unique_key_args<GeoCodecsDaVinciMesh *,std::piecewise_construct_t const&,std::tuple<GeoCodecsDaVinciMesh * const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      long long v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            long long v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  int64x2_t v15 = a1 + 2;
  long long v12 = operator new(0x28uLL);
  void *v12 = 0;
  v12[1] = v8;
  uint64_t v16 = *a3;
  v12[3] = 0;
  v12[4] = 0;
  v12[2] = v16;
  float v17 = (float)(unint64_t)(a1[3] + 1);
  float v18 = *((float *)a1 + 8);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = a1[1];
    }
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_59;
      }
      unint64_t v33 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime >= v9)
      {
        unint64_t v9 = a1[1];
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        float v43 = (void *)*a1;
        *a1 = 0;
        if (v43) {
          operator delete(v43);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    float v23 = operator new(8 * prime);
    float v24 = (void *)*a1;
    *a1 = (uint64_t)v23;
    if (v24) {
      operator delete(v24);
    }
    uint64_t v25 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v25++) = 0;
    while (prime != v25);
    float v26 = (void *)*v15;
    if (!*v15)
    {
LABEL_58:
      unint64_t v9 = prime;
      goto LABEL_59;
    }
    size_t v27 = v26[1];
    size_t v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v29 = v27 & v28;
      *(void *)(*a1 + 8 * v29) = v15;
      for (uint64_t i = (void *)*v26; *v26; uint64_t i = (void *)*v26)
      {
        size_t v31 = i[1] & v28;
        if (v31 == v29)
        {
          float v26 = i;
        }
        else if (*(void *)(*a1 + 8 * v31))
        {
          *float v26 = *i;
          uint64_t v32 = 8 * v31;
          *uint64_t i = **(void **)(*a1 + v32);
          **(void **)(*a1 + v32) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v31) = v26;
          float v26 = i;
          size_t v29 = v31;
        }
      }
      goto LABEL_58;
    }
    if (v27 >= prime) {
      v27 %= prime;
    }
    *(void *)(*a1 + 8 * v27) = v15;
    float v36 = (void *)*v26;
    if (!*v26) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v38 = v36[1];
      if (v38 >= prime) {
        v38 %= prime;
      }
      if (v38 != v27)
      {
        if (!*(void *)(*a1 + 8 * v38))
        {
          *(void *)(*a1 + 8 * v38) = v26;
          goto LABEL_63;
        }
        *float v26 = *v36;
        uint64_t v37 = 8 * v38;
        *float v36 = **(void **)(*a1 + v37);
        **(void **)(*a1 + v37) = v36;
        float v36 = v26;
      }
      size_t v38 = v27;
LABEL_63:
      float v26 = v36;
      float v36 = (void *)*v36;
      size_t v27 = v38;
      if (!v36) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v39 = *a1;
  float v40 = *(void **)(*a1 + 8 * v3);
  if (v40)
  {
    void *v12 = *v40;
LABEL_80:
    *float v40 = v12;
    goto LABEL_81;
  }
  void *v12 = *v15;
  void *v15 = v12;
  *(void *)(v39 + 8 * v3) = v15;
  if (*v12)
  {
    unint64_t v41 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v41 >= v9) {
        v41 %= v9;
      }
    }
    else
    {
      v41 &= v9 - 1;
    }
    float v40 = (void *)(*a1 + 8 * v41);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v12;
}

void sub_1A244DD04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::deque<unsigned int>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_88:
      *(void *)unint64_t v5 = v8;
      goto LABEL_89;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v33 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v33 = 1;
      }
      if (!(v33 >> 61))
      {
        unint64_t v34 = v33 >> 2;
        uint64_t v35 = 8 * v33;
        float v36 = (char *)operator new(8 * v33);
        uint64_t v37 = &v36[8 * v34];
        size_t v38 = &v36[v35];
        int64_t v40 = v5 - v7;
        BOOL v39 = v5 == v7;
        unint64_t v5 = v37;
        if (!v39)
        {
          unint64_t v5 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= 0x38)
          {
            uint64_t v83 = &v36[8 * v34];
            float v42 = v83;
            if ((unint64_t)(v83 - v7) >= 0x20)
            {
              uint64_t v84 = (v41 >> 3) + 1;
              uint64_t v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
              float v42 = &v37[v85];
              unint64_t v86 = (long long *)(v6 + 3);
              int v87 = v83 + 16;
              uint64_t v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v89 = *v86;
                *(v87 - 1) = *(v86 - 1);
                _OWORD *v87 = v89;
                v86 += 2;
                v87 += 2;
                v88 -= 4;
              }
              while (v88);
              if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_81;
              }
              v7 += v85;
            }
          }
          else
          {
            float v42 = &v36[8 * v34];
          }
          do
          {
            uint64_t v90 = *(void *)v7;
            v7 += 8;
            *(void *)float v42 = v90;
            v42 += 8;
          }
          while (v42 != v5);
        }
        goto LABEL_81;
      }
LABEL_105:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    int64x2_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_88;
  }
  float v18 = *(char **)(a1 + 16);
  float v17 = *(char **)(a1 + 24);
  unint64_t v20 = *(char **)a1;
  BOOL v19 = *(char **)(a1 + 8);
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*(void *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    float v24 = operator new(0x1000uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)float v18 = v24;
LABEL_89:
      *(void *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      float v43 = v19;
      goto LABEL_87;
    }
    unint64_t v68 = (v17 - v19) >> 2;
    if (v18 == v19) {
      unint64_t v68 = 1;
    }
    if (v68 >> 61) {
      goto LABEL_105;
    }
    unint64_t v69 = (v68 + 3) >> 2;
    uint64_t v70 = 8 * v68;
    unsigned int v71 = (char *)operator new(8 * v68);
    float v43 = &v71[8 * v69];
    float64x2_t v72 = &v71[v70];
    unint64_t v73 = v43;
    if (v18 != v19)
    {
      unint64_t v73 = &v43[8 * v22];
      float64x2_t v74 = &v71[8 * v69];
      size_t v75 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        uint64_t v76 = &v71[8 * v69];
        float64x2_t v74 = v76;
        size_t v75 = v19;
        if ((unint64_t)(v76 - v19) >= 0x20)
        {
          unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
          uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          float64x2_t v74 = &v43[v78];
          __int16 v79 = (long long *)(v19 + 16);
          __int16 v80 = v76 + 16;
          uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v82 = *v79;
            *(v80 - 1) = *(v79 - 1);
            *__int16 v80 = v82;
            v79 += 2;
            v80 += 2;
            v81 -= 4;
          }
          while (v81);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(void *)a1 = v71;
            *(void *)(a1 + 8) = v43;
            *(void *)(a1 + 16) = v73;
            *(void *)(a1 + 24) = v72;
LABEL_86:
            operator delete(v19);
            float v43 = *(char **)(a1 + 8);
LABEL_87:
            *((void *)v43 - 1) = v25;
            unint64_t v7 = *(char **)(a1 + 8);
            unint64_t v5 = *(char **)(a1 + 16);
            *(void *)(a1 + 8) = v7 - 8;
            uint64_t v8 = *((void *)v7 - 1);
            *(void *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24)) {
              goto LABEL_88;
            }
            unint64_t v9 = *(char **)a1;
            uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
            if ((unint64_t)v7 <= *(void *)a1)
            {
              unint64_t v92 = (v5 - v9) >> 2;
              if (v5 == v9) {
                unint64_t v92 = 1;
              }
              if (!(v92 >> 61))
              {
                unint64_t v93 = v92 >> 2;
                uint64_t v94 = 8 * v92;
                float v36 = (char *)operator new(8 * v92);
                uint64_t v37 = &v36[8 * v93];
                size_t v38 = &v36[v94];
                int64_t v95 = v5 - v7;
                BOOL v39 = v5 == v7;
                unint64_t v5 = v37;
                if (!v39)
                {
                  unint64_t v5 = &v37[v95 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v96 = v95 - 8;
                  if ((unint64_t)(v95 - 8) >= 0x38)
                  {
                    uint64_t v98 = &v36[8 * v93];
                    uint64_t v97 = v98;
                    if ((unint64_t)(v98 - v7) >= 0x20)
                    {
                      uint64_t v99 = (v96 >> 3) + 1;
                      uint64_t v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                      uint64_t v97 = &v37[v100];
                      unint64_t v101 = (long long *)(v7 + 16);
                      unint64_t v102 = v98 + 16;
                      uint64_t v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v104 = *v101;
                        *(v102 - 1) = *(v101 - 1);
                        *unint64_t v102 = v104;
                        v101 += 2;
                        v102 += 2;
                        v103 -= 4;
                      }
                      while (v103);
                      if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_81;
                      }
                      v7 += v100;
                    }
                  }
                  else
                  {
                    uint64_t v97 = &v36[8 * v93];
                  }
                  do
                  {
                    uint64_t v105 = *(void *)v7;
                    v7 += 8;
                    *(void *)uint64_t v97 = v105;
                    v97 += 8;
                  }
                  while (v97 != v5);
                }
LABEL_81:
                *(void *)a1 = v36;
                *(void *)(a1 + 8) = v37;
                *(void *)(a1 + 16) = v5;
                *(void *)(a1 + 24) = v38;
                if (v9)
                {
                  operator delete(v9);
                  unint64_t v5 = *(char **)(a1 + 16);
                }
                goto LABEL_88;
              }
              goto LABEL_105;
            }
            goto LABEL_5;
          }
          size_t v75 = &v19[v78];
        }
      }
      do
      {
        uint64_t v91 = *(void *)v75;
        v75 += 8;
        *(void *)float64x2_t v74 = v91;
        v74 += 8;
      }
      while (v74 != v73);
    }
    *(void *)a1 = v71;
    *(void *)(a1 + 8) = v43;
    *(void *)(a1 + 16) = v73;
    *(void *)(a1 + 24) = v72;
    if (!v19) {
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_105;
  }
  size_t v28 = (char *)operator new(8 * v27);
  size_t v29 = operator new(0x1000uLL);
  unsigned int v30 = &v28[8 * v22];
  size_t v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v44 = 1;
      }
      else {
        unint64_t v44 = v21 >> 2;
      }
      if (v44 >> 61) {
        goto LABEL_105;
      }
      unsigned int v30 = (char *)operator new(8 * v44);
      size_t v31 = &v30[8 * v44];
      operator delete(v28);
      BOOL v19 = *(char **)(a1 + 8);
      float v18 = *(char **)(a1 + 16);
      size_t v28 = v30;
    }
    else
    {
      unint64_t v32 = v22 + 2;
      if (v22 >= -1) {
        unint64_t v32 = v22 + 1;
      }
      v30 -= 8 * (v32 >> 1);
    }
  }
  *(void *)unsigned int v30 = v29;
  float v45 = v30 + 8;
  if (v18 != v19)
  {
    while (v30 != v28)
    {
      float32x4_t v49 = v30;
      float v47 = v45;
LABEL_43:
      uint64_t v50 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v49 - 1) = v50;
      float v46 = v49 - 8;
      float v45 = v47;
      unsigned int v30 = v46;
      if (v18 == *(char **)(a1 + 8)) {
        goto LABEL_38;
      }
    }
    if (v45 < v31)
    {
      uint64_t v51 = (v31 - v45) >> 3;
      if (v51 >= -1) {
        unint64_t v52 = v51 + 1;
      }
      else {
        unint64_t v52 = v51 + 2;
      }
      float v47 = &v45[8 * (v52 >> 1)];
      float32x4_t v49 = &v30[8 * (v52 >> 1)];
      if (v45 == v30)
      {
        size_t v28 = v45;
      }
      else
      {
        memmove(&v30[8 * (v52 >> 1)], v30, v45 - v30);
        size_t v28 = v30;
      }
      goto LABEL_43;
    }
    if (v31 == v30) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = (v31 - v30) >> 2;
    }
    if (v53 >> 61) {
      goto LABEL_105;
    }
    int8x16_t v54 = (char *)operator new(8 * v53);
    size_t v28 = v54;
    unint64_t v55 = (v53 + 3) >> 2;
    float32x4_t v49 = &v54[8 * v55];
    float v47 = v49;
    int64_t v56 = v45 - v30;
    if (v45 != v30)
    {
      float v47 = &v49[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      float32x4_t v58 = &v54[8 * v55];
      int8x16_t v59 = v30;
      if (v57 >= 0x38)
      {
        uint64_t v60 = 8 * v55;
        float32x4_t v58 = &v54[8 * v55];
        int8x16_t v59 = v30;
        if ((unint64_t)(v58 - v30) >= 0x20)
        {
          uint64_t v61 = (v57 >> 3) + 1;
          uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          float32x4_t v58 = &v49[v62];
          float32x4_t v63 = (long long *)(v30 + 16);
          float32x4_t v64 = &v54[v60 + 16];
          uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v66 = *v63;
            *((_OWORD *)v64 - 1) = *(v63 - 1);
            *(_OWORD *)float32x4_t v64 = v66;
            v63 += 2;
            v64 += 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_63;
          }
          int8x16_t v59 = &v30[v62];
        }
      }
      do
      {
        uint64_t v67 = *(void *)v59;
        v59 += 8;
        *(void *)float32x4_t v58 = v67;
        v58 += 8;
      }
      while (v58 != v47);
    }
LABEL_63:
    size_t v31 = &v54[8 * v53];
    operator delete(v30);
    goto LABEL_43;
  }
  float v46 = v30;
  float v47 = v30 + 8;
LABEL_38:
  float v48 = *(char **)a1;
  *(void *)a1 = v28;
  *(void *)(a1 + 8) = v46;
  *(void *)(a1 + 16) = v47;
  *(void *)(a1 + 24) = v31;
  if (v48)
  {
    operator delete(v48);
  }
}

void sub_1A244E32C(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned int>::~deque[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::TriConnectivity>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<md::TriConnectivity>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TriConnectivity>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__function::__func<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0,std::allocator<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0>,BOOL ()(unsigned int)>::operator()(uint64_t a1, _DWORD *a2)
{
  unsigned int v3 = *(_DWORD *)(**(void **)(a1 + 8) + 12) + 3 * *a2;
  unint64_t v4 = (float *)(**(void **)(a1 + 24)
               + 12
               * *(unsigned __int16 *)(geo::codec::VectorTile::daVinciIndices(**(geo::codec::VectorTile ***)(a1 + 16))
                                     + 2 * v3));
  float v6 = *v4;
  float v5 = v4[1];
  float v7 = v4[2];
  uint64_t v8 = *(float **)(a1 + 32);
  float v140 = v8[13];
  float v141 = v8[1];
  float v144 = v6;
  float v146 = v5;
  float v138 = v8[9];
  float v139 = v8[5];
  float v148 = v7;
  float v9 = (float)((float)(v8[12] + (float)(*v8 * v6)) + (float)(v8[4] * v5)) + (float)(v8[8] * v7);
  float v133 = v8[14];
  float v134 = v8[2];
  float v135 = v8[10];
  float v136 = v8[6];
  uint64_t v10 = (float *)(**(void **)(a1 + 24)
                + 12
                * *(unsigned __int16 *)(geo::codec::VectorTile::daVinciIndices(**(geo::codec::VectorTile ***)(a1 + 16))
                                      + 2 * (v3 + 1)));
  float v12 = *v10;
  float v11 = v10[1];
  float v13 = v10[2];
  uint64_t v14 = *(float **)(a1 + 32);
  float v137 = v14[1];
  float v15 = v14[13];
  float v16 = v14[5];
  float v17 = v14[9];
  float v18 = (float)((float)(v14[12] + (float)(*v14 * v12)) + (float)(v14[4] * v11)) + (float)(v14[8] * v13);
  float v129 = v14[14];
  float v130 = v14[2];
  float v131 = v14[10];
  float v132 = v14[6];
  uint64_t v19 = geo::codec::VectorTile::daVinciIndices(**(geo::codec::VectorTile ***)(a1 + 16));
  unsigned int v143 = v3;
  unint64_t v20 = *(float **)(a1 + 32);
  uint64_t v21 = (float *)(**(void **)(a1 + 24) + 12 * *(unsigned __int16 *)(v19 + 2 * (v3 + 2)));
  float v23 = *v21;
  float v22 = v21[1];
  float v24 = v21[2];
  float v25 = (float)((float)(v20[12] + (float)(*v20 * *v21)) + (float)(v20[4] * v22)) + (float)(v20[8] * v24);
  uint64_t v26 = *(float **)(a1 + 40);
  if (v26[3] > fminf(v25, fminf(v18, fminf(v9, 3.4028e38))) && *v26 < fmaxf(fmaxf(fmaxf(v9, -3.4028e38), v18), v25))
  {
    float v27 = (float)((float)(v140 + (float)(v141 * v144)) + (float)(v139 * v146)) + (float)(v138 * v148);
    float v28 = (float)((float)(v15 + (float)(v137 * v12)) + (float)(v16 * v11)) + (float)(v17 * v13);
    float v29 = (float)((float)(v20[13] + (float)(v20[1] * v23)) + (float)(v20[5] * v22)) + (float)(v20[9] * v24);
    if (v26[4] > fminf(v29, fminf(v28, fminf(v27, 3.4028e38)))
      && v26[1] < fmaxf(fmaxf(fmaxf(v27, -3.4028e38), v28), v29))
    {
      float v30 = (float)((float)(v133 + (float)(v134 * v144)) + (float)(v136 * v146)) + (float)(v135 * v148);
      float v31 = (float)((float)(v129 + (float)(v130 * v12)) + (float)(v132 * v11)) + (float)(v131 * v13);
      float v32 = (float)((float)(v20[14] + (float)(v20[2] * v23)) + (float)(v20[6] * v22)) + (float)(v20[10] * v24);
      if (v26[5] > fminf(v32, fminf(v31, fminf(v30, 3.4028e38)))
        && v26[2] < fmaxf(fmaxf(fmaxf(v30, -3.4028e38), v31), v32))
      {
        unsigned int v142 = 1;
LABEL_10:
        uint64_t v36 = 0;
        while (1)
        {
          uint64_t v38 = geo::codec::VectorTile::daVinciIndices(**(geo::codec::VectorTile ***)(a1 + 16));
          unint64_t v39 = *(unsigned __int16 *)(v38 + 2 * (v143 + v36));
          __int16 v150 = *(_WORD *)(v38 + 2 * (v143 + v36));
          uint64_t v40 = *(void *)(a1 + 56);
          int8x8_t v41 = *(int8x8_t *)(v40 + 8);
          if (v41)
          {
            uint8x8_t v42 = (uint8x8_t)vcnt_s8(v41);
            v42.i16[0] = vaddlv_u8(v42);
            if (v42.u32[0] > 1uLL)
            {
              unint64_t v43 = v39;
              if (*(void *)&v41 <= v39) {
                unint64_t v43 = v39 % *(void *)&v41;
              }
            }
            else
            {
              unint64_t v43 = (v41.i32[0] - 1) & v39;
            }
            unint64_t v44 = *(uint64_t ****)(*(void *)v40 + 8 * v43);
            if (v44)
            {
              float v45 = *v44;
              if (v45)
              {
                if (v42.u32[0] < 2uLL)
                {
                  uint64_t v46 = *(void *)&v41 - 1;
                  while (1)
                  {
                    float v48 = v45[1];
                    if (v48 == (uint64_t *)v39)
                    {
                      if (*((unsigned __int16 *)v45 + 8) == v39) {
                        goto LABEL_82;
                      }
                    }
                    else if (((unint64_t)v48 & v46) != v43)
                    {
                      goto LABEL_33;
                    }
                    float v45 = (uint64_t **)*v45;
                    if (!v45) {
                      goto LABEL_33;
                    }
                  }
                }
                do
                {
                  unint64_t v47 = (unint64_t)v45[1];
                  if (v47 == v39)
                  {
                    if (*((unsigned __int16 *)v45 + 8) == v39) {
                      goto LABEL_82;
                    }
                  }
                  else
                  {
                    if (v47 >= *(void *)&v41) {
                      v47 %= *(void *)&v41;
                    }
                    if (v47 != v43) {
                      break;
                    }
                  }
                  float v45 = (uint64_t **)*v45;
                }
                while (v45);
              }
            }
          }
LABEL_33:
          float32x4_t v49 = (float *)(**(void **)(a1 + 24) + 12 * v39);
          float v50 = *v49;
          float v51 = v49[1];
          float v52 = v49[2];
          unint64_t v53 = *(float **)(a1 + 64);
          float v54 = *v53;
          float v55 = v53[4];
          float v147 = v53[5];
          float v149 = v53[1];
          float v56 = v53[12];
          float v145 = v53[13];
          float v58 = v53[8];
          float v57 = v53[9];
          int v59 = (unsigned __int16)(int)(float)(v50 * 16804.0) | ((unsigned __int16)(int)(float)(v51 * 16804.0) << 16);
          unsigned int v60 = (*(_DWORD *)(*(void *)(a1 + 72) + 8) - **(_DWORD **)(a1 + 72)) >> 3;
          *((_WORD *)std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((float *)v40, v39, &v150)+ 9) = v60;
          uint64_t v61 = *(void ***)(a1 + 72);
          float32x4_t v63 = (float *)v61[1];
          unint64_t v62 = (unint64_t)v61[2];
          if ((unint64_t)v63 < v62)
          {
            *(_DWORD *)float32x4_t v63 = v59;
            v63[1] = v52;
            float32x4_t v64 = (char *)(v63 + 2);
            goto LABEL_57;
          }
          uint64_t v65 = (float *)*v61;
          uint64_t v66 = (char *)v63 - (unsigned char *)*v61;
          uint64_t v67 = v66 >> 3;
          unint64_t v68 = (v66 >> 3) + 1;
          if (v68 >> 61) {
            goto LABEL_105;
          }
          uint64_t v69 = v62 - (void)v65;
          if (v69 >> 2 > v68) {
            unint64_t v68 = v69 >> 2;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v68;
          }
          if (v70)
          {
            if (v70 >> 61) {
              goto LABEL_106;
            }
            unsigned int v71 = operator new(8 * v70);
          }
          else
          {
            unsigned int v71 = 0;
          }
          float64x2_t v72 = &v71[8 * v67];
          *(_DWORD *)float64x2_t v72 = v59;
          *((float *)v72 + 1) = v52;
          if (v63 == v65)
          {
            float64x2_t v74 = &v71[8 * v67];
            goto LABEL_55;
          }
          unint64_t v73 = (char *)(v63 - 2) - (char *)v65;
          if (v73 >= 0x58)
          {
            float64x2_t v74 = &v71[8 * v67];
            if ((unint64_t)((char *)v63 - &v71[v66]) >= 0x20)
            {
              uint64_t v75 = (v73 >> 3) + 1;
              uint64_t v76 = &v71[8 * v67 - 16];
              unint64_t v77 = v63 - 4;
              uint64_t v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *(_OWORD *)v77;
                *(v76 - 1) = *((_OWORD *)v77 - 1);
                *uint64_t v76 = v79;
                v76 -= 2;
                v77 -= 8;
                v78 -= 4;
              }
              while (v78);
              float64x2_t v74 = &v72[-8 * (v75 & 0x3FFFFFFFFFFFFFFCLL)];
              v63 -= 2 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            float64x2_t v74 = &v71[8 * v67];
          }
          do
          {
            uint64_t v80 = *((void *)v63 - 1);
            v63 -= 2;
            *((void *)v74 - 1) = v80;
            v74 -= 8;
          }
          while (v63 != v65);
LABEL_54:
          float32x4_t v63 = (float *)*v61;
LABEL_55:
          float32x4_t v64 = v72 + 8;
          unsigned __int8 *v61 = v74;
          v61[1] = v72 + 8;
          v61[2] = &v71[8 * v70];
          if (v63) {
            operator delete(v63);
          }
LABEL_57:
          _S0 = (float)((float)(v56 + (float)(v54 * v50)) + (float)(v55 * v51)) + (float)(v58 * v52);
          _S1 = (float)((float)(v145 + (float)(v149 * v50)) + (float)(v147 * v51)) + (float)(v57 * v52);
          __asm
          {
            FCVT            H9, S0
            FCVT            H8, S1
          }
          v61[1] = v64;
          long long v89 = *(char ***)(a1 + 80);
          uint64_t v91 = v89[1];
          unint64_t v90 = (unint64_t)v89[2];
          if ((unint64_t)v91 < v90)
          {
            *(_WORD *)uint64_t v91 = _H9;
            *((_WORD *)v91 + 1) = _H8;
            unint64_t v92 = v91 + 4;
            goto LABEL_81;
          }
          unint64_t v93 = *v89;
          uint64_t v94 = v91 - *v89;
          uint64_t v95 = v94 >> 2;
          unint64_t v96 = (v94 >> 2) + 1;
          if (v96 >> 62) {
            goto LABEL_105;
          }
          uint64_t v97 = v90 - (void)v93;
          if (v97 >> 1 > v96) {
            unint64_t v96 = v97 >> 1;
          }
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v98 = v96;
          }
          if (v98)
          {
            if (v98 >> 62) {
              goto LABEL_106;
            }
            uint64_t v99 = operator new(4 * v98);
          }
          else
          {
            uint64_t v99 = 0;
          }
          uint64_t v100 = &v99[4 * v95];
          _WORD *v100 = _H9;
          v100[1] = _H8;
          if (v91 == v93)
          {
            unint64_t v102 = &v99[4 * v95];
            goto LABEL_79;
          }
          unint64_t v101 = v91 - 4 - v93;
          if (v101 >= 0x2C)
          {
            unint64_t v102 = &v99[4 * v95];
            if ((unint64_t)(v91 - &v99[v94]) >= 0x20)
            {
              uint64_t v103 = (v101 >> 2) + 1;
              long long v104 = &v99[4 * v95 - 16];
              uint64_t v105 = v91 - 16;
              uint64_t v106 = v103 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v107 = *(_OWORD *)v105;
                *(v104 - 1) = *((_OWORD *)v105 - 1);
                *long long v104 = v107;
                v104 -= 2;
                v105 -= 32;
                v106 -= 8;
              }
              while (v106);
              unint64_t v102 = (char *)&v100[-2 * (v103 & 0x7FFFFFFFFFFFFFF8)];
              v91 -= 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
              if (v103 == (v103 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v102 = &v99[4 * v95];
          }
          do
          {
            int v108 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v102 - 1) = v108;
            v102 -= 4;
          }
          while (v91 != v93);
LABEL_78:
          uint64_t v91 = *v89;
LABEL_79:
          unint64_t v92 = (char *)(v100 + 2);
          *long long v89 = v102;
          v89[1] = (char *)(v100 + 2);
          v89[2] = &v99[4 * v98];
          if (v91) {
            operator delete(v91);
          }
LABEL_81:
          v89[1] = v92;
          uint64_t v40 = *(void *)(a1 + 56);
LABEL_82:
          uint64_t v109 = *(void *)(a1 + 88);
          int v110 = std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((float *)v40, v39, &v150);
          unint64_t v111 = v110;
          int64_t v113 = *(char **)(v109 + 8);
          unint64_t v112 = *(void *)(v109 + 16);
          if ((unint64_t)v113 < v112)
          {
            *(_WORD *)int64_t v113 = *((_WORD *)v110 + 9);
            uint64_t v37 = v113 + 2;
          }
          else
          {
            unsigned int v114 = *(char **)v109;
            uint64_t v115 = (uint64_t)&v113[-*(void *)v109];
            if (v115 <= -3) {
LABEL_105:
            }
              abort();
            uint64_t v116 = v115 >> 1;
            unint64_t v117 = v112 - (void)v114;
            if (v117 <= (v115 >> 1) + 1) {
              unint64_t v118 = v116 + 1;
            }
            else {
              unint64_t v118 = v117;
            }
            if (v117 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v119 = v118;
            }
            if (v119)
            {
              if (v119 < 0) {
LABEL_106:
              }
                std::__throw_bad_array_new_length[abi:nn180100]();
              float v120 = operator new(2 * v119);
            }
            else
            {
              float v120 = 0;
            }
            unint64_t v121 = &v120[2 * v116];
            *unint64_t v121 = *((_WORD *)v111 + 9);
            uint64_t v37 = v121 + 1;
            if (v113 != v114)
            {
              unint64_t v122 = v113 - 2 - v114;
              if (v122 < 0x1E) {
                goto LABEL_109;
              }
              if ((unint64_t)(v113 - &v120[v115 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
                goto LABEL_109;
              }
              uint64_t v123 = (v122 >> 1) + 1;
              float v124 = &v120[2 * v116 - 16];
              unint64_t v125 = v113 - 16;
              unint64_t v126 = v123 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                long long v127 = *(_OWORD *)v125;
                *(v124 - 1) = *((_OWORD *)v125 - 1);
                _OWORD *v124 = v127;
                v124 -= 2;
                v125 -= 32;
                v126 -= 16;
              }
              while (v126);
              v121 -= v123 & 0xFFFFFFFFFFFFFFF0;
              v113 -= 2 * (v123 & 0xFFFFFFFFFFFFFFF0);
              if (v123 != (v123 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_109:
                do
                {
                  __int16 v128 = *((_WORD *)v113 - 1);
                  v113 -= 2;
                  *--unint64_t v121 = v128;
                }
                while (v113 != v114);
              }
            }
            *(void *)uint64_t v109 = v121;
            *(void *)(v109 + 8) = v37;
            *(void *)(v109 + 16) = &v120[2 * v119];
            if (v114) {
              operator delete(v114);
            }
          }
          *(void *)(v109 + 8) = v37;
          if (++v36 == 3)
          {
            unint64_t v34 = *(int **)(a1 + 48);
            int v35 = *v34;
            uint64_t result = v142;
            goto LABEL_104;
          }
        }
      }
    }
  }
  uint64_t result = 0;
  unint64_t v34 = *(int **)(a1 + 48);
  int v35 = *v34;
  if (!*v34)
  {
    unsigned int v142 = 0;
    goto LABEL_10;
  }
LABEL_104:
  *unint64_t v34 = v35 + result;
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(float *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    float v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  *((_WORD *)v10 + 9) = 0;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_59;
      }
      unint64_t v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v3 = v6 % v7;
          }
          else {
            unint64_t v3 = v6;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        uint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v19 = operator new(8 * prime);
    unint64_t v20 = *(void **)a1;
    *(void *)a1 = v19;
    if (v20) {
      operator delete(v20);
    }
    uint64_t v21 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    float v23 = (uint64_t *)(a1 + 4);
    float v22 = (void *)*((void *)a1 + 2);
    if (!v22)
    {
LABEL_58:
      unint64_t v7 = prime;
      goto LABEL_59;
    }
    size_t v24 = v22[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*(void *)a1 + 8 * v26) = v23;
      for (uint64_t i = (void *)*v22; *v22; uint64_t i = (void *)*v22)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          float v22 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v28))
        {
          *float v22 = *i;
          uint64_t v29 = 8 * v28;
          *uint64_t i = **(void **)(*(void *)a1 + v29);
          **(void **)(*(void *)a1 + v29) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v28) = v22;
          float v22 = i;
          size_t v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v23;
    unint64_t v33 = (void *)*v22;
    if (!*v22) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v24)
      {
        if (!*(void *)(*(void *)a1 + 8 * v35))
        {
          *(void *)(*(void *)a1 + 8 * v35) = v22;
          goto LABEL_63;
        }
        *float v22 = *v33;
        uint64_t v34 = 8 * v35;
        void *v33 = **(void **)(*(void *)a1 + v34);
        **(void **)(*(void *)a1 + v34) = v33;
        unint64_t v33 = v22;
      }
      size_t v35 = v24;
LABEL_63:
      float v22 = v33;
      unint64_t v33 = (void *)*v33;
      size_t v24 = v35;
      if (!v33) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v36 = *(void **)a1;
  uint64_t v37 = *(void **)(*(void *)a1 + 8 * v3);
  if (v37)
  {
    void *v10 = *v37;
LABEL_80:
    *uint64_t v37 = v10;
    goto LABEL_81;
  }
  void *v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v36[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v38 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v7 - 1;
    }
    uint64_t v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_1A244F188(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0,std::allocator<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5747D8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(void *)(a2 + 88) = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0,std::allocator<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x60uLL);
  *(void *)long long v2 = &unk_1EF5747D8;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((void *)v2 + 11) = *(void *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0,std::allocator<md::DaVinciDecalBuilder::buildBatch(std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,unsigned long long,std::vector<md::DaVinciDecalBuilder::DecalDescription> const&,std::shared_ptr<geo::codec::VectorTile> const&,ggl::ResourceAccessor *)::$_0>,BOOL ()(unsigned int)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedPositionCompressedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedPositionCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5851F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::TexturedPositionCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5851F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::~__hash_table(uint64_t *a1)
{
  long long v2 = (void *)a1[3];
  while (v2)
  {
    unint64_t v3 = v2;
    long long v2 = (void *)*v2;
    long long v4 = (std::__shared_weak_count *)v3[5];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)v3[3];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v3, 64);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v6, 8 * a1[1]);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelImageLoader>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelImageLoader>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelImageLoader>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::LabelImageLoader::~LabelImageLoader(md::LabelImageLoader *this)
{
  long long v2 = (std::mutex *)*((void *)this + 15);
  if (v2)
  {
    std::mutex::lock(*((std::mutex **)this + 15));
    uint64_t sig = v2[1].__m_.__sig;
    std::mutex::unlock(v2);
    if (sig)
    {
      long long v4 = (std::mutex *)*((void *)this + 15);
      std::mutex::lock(v4);
      v4[1].__m_.__uint64_t sig = 0;
      std::mutex::unlock(v4);
    }
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::~__hash_table((uint64_t *)this + 4);
  std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear((uint64_t *)this);
}

void sub_1A244F564(_Unwind_Exception *a1)
{
  unint64_t v3 = (std::__shared_weak_count *)v1[16];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::~__hash_table(v1 + 4);
  std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear(v1);
  _Unwind_Resume(a1);
}

void *md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::~$_0(void *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)a1[6];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)a1[6];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  long long v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  long long v5 = (std::__shared_weak_count *)a1[1];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1EF57E568;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[4];
  a2[3] = result[3];
  a2[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = result[6];
  a2[5] = result[5];
  a2[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57E568;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57E568;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57E520;
}

void *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EF57E520;
  return result;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  os_log_t v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsRenderIcon", "", v1, 2u);
  }
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57E5B0;
}

void *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EF57E5B0;
  return result;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1EF572078;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  uint64_t v4 = *(void *)(result + 40);
  *(void *)(a2 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(result + 56);
  *(void *)(a2 + 48) = *(void *)(result + 48);
  *(void *)(a2 + 56) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(result + 72);
  *(void *)(a2 + 64) = *(void *)(result + 64);
  *(void *)(a2 + 72) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::~__func(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF572078;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[7];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[7];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::erase(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  uint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    if (v5 >= *(void *)&v4) {
      v5 %= *(void *)&v4;
    }
  }
  else
  {
    v5 &= *(void *)&v4 - 1;
  }
  uint8x8_t v8 = *(uint64_t **)(*(void *)a1 + 8 * v5);
  do
  {
    float v9 = v8;
    uint8x8_t v8 = (uint64_t *)*v8;
  }
  while (v8 != a2);
  if (v9 != (uint64_t *)(a1 + 24))
  {
    unint64_t v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v4) {
        v10 %= *(void *)&v4;
      }
    }
    else
    {
      v10 &= *(void *)&v4 - 1;
    }
    uint64_t v11 = *a2;
    if (v10 == v5)
    {
LABEL_20:
      if (!v11) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v6) {
    goto LABEL_19;
  }
  unint64_t v12 = *(void *)(v6 + 8);
  if (v7.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v4) {
      v12 %= *(void *)&v4;
    }
  }
  else
  {
    v12 &= *(void *)&v4 - 1;
  }
  uint64_t v11 = *a2;
  if (v12 != v5)
  {
LABEL_19:
    *(void *)(*(void *)a1 + 8 * v5) = 0;
    uint64_t v11 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v13 = *(void *)(v11 + 8);
  if (v7.u32[0] > 1uLL)
  {
    if (v13 >= *(void *)&v4) {
      v13 %= *(void *)&v4;
    }
  }
  else
  {
    v13 &= *(void *)&v4 - 1;
  }
  if (v13 != v5)
  {
    *(void *)(*(void *)a1 + 8 * v13) = v9;
    uint64_t v11 = *a2;
  }
LABEL_27:
  *float v9 = v11;
  *a2 = 0;
  --*(void *)(a1 + 40);
  float v14 = (std::__shared_weak_count *)a2[5];
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  BOOL v15 = (std::__shared_weak_count *)a2[3];
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), a2, 64);
  return v6;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
      if (v3) {
        std::__shared_weak_count::__release_weak(v3);
      }
      int8x8_t v4 = *(std::__shared_weak_count **)(v2 + 24);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 64);
  }
  return a1;
}

void md::LabelIcon::~LabelIcon(md::LabelIcon *this)
{
  *(void *)this = &unk_1EF554088;
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 15);
    int8x8_t v4 = (void *)*((void *)this + 14);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      int8x8_t v4 = (void *)*((void *)this + 14);
    }
    *((void *)this + 15) = v2;
    operator delete(v4);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *((void *)this + 1) = &unk_1EF559EB8;
}

{
  uint64_t vars8;

  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A6239270);
}

void md::LabelIcon::labelTextColor(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t md::LabelIcon::text(md::LabelIcon *this)
{
  return 0;
}

uint64_t md::LabelIcon::isIconRTL(md::LabelIcon *this)
{
  return 0;
}

uint64_t std::__shared_ptr_emplace<md::ShieldLabelIcon>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::ShieldLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ShieldLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::PointLabelIcon>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::PointLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FD80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::PointLabelIcon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FD80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void **std::vector<geo::_retain_ptr<VKImage * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int8x8_t v4 = *a1;
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 24;
      uint64_t v6 = v3 - 24;
      uint8x8_t v7 = v3 - 24;
      do
      {
        uint8x8_t v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      int8x8_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void md::HighlightHelper::debugTileToString(std::string *this, const QuadTile *a2)
{
  std::to_string(&v17, a2->_xIdx);
  int8x8_t v4 = std::string::append(&v17, ".", 1uLL);
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v16, a2->_yIdx);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v16;
  }
  else {
    uint64_t v6 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
  }
  uint8x8_t v8 = std::string::append(&v18, (const std::string::value_type *)v6, size);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  unint64_t v10 = std::string::append(&v19, ".", 1uLL);
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v15, a2->_level);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v12 = &v15;
  }
  else {
    unint64_t v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = v15.__r_.__value_.__l.__size_;
  }
  float v14 = std::string::append(&v20, (const std::string::value_type *)v12, v13);
  *this = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
LABEL_24:
  operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
}

void sub_1A2450518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if ((*(char *)(v30 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v30 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v30 - 96));
  if ((a18 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a30 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(__p);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a25);
  if ((a24 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void md::HighlightHelper::debugTileToString(std::string *a1, uint64_t a2)
{
  std::to_string(&v17, (*(void *)a2 >> 14) & 0x3FFFFFF);
  int8x8_t v4 = std::string::append(&v17, ".", 1uLL);
  std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v16, *(_DWORD *)(a2 + 5) & 0x3FFFFFF);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v16;
  }
  else {
    uint64_t v6 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
  }
  uint8x8_t v8 = std::string::append(&v18, (const std::string::value_type *)v6, size);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  unint64_t v10 = std::string::append(&v19, ".", 1uLL);
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v15, (*(_DWORD *)a2 >> 8) & 0x3F);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v12 = &v15;
  }
  else {
    unint64_t v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = v15.__r_.__value_.__l.__size_;
  }
  float v14 = std::string::append(&v20, (const std::string::value_type *)v12, v13);
  *a1 = *v14;
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
LABEL_24:
  operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
}

void sub_1A245076C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if ((*(char *)(v30 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v30 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v30 - 96));
  if ((a18 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a30 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(__p);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a25);
  if ((a24 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void md::HighlightHelper::mercatorToScreenPoints(uint64_t a1, double **a2, uint64_t a3)
{
  uint64_t v6 = *(float32x2_t **)a3;
  uint8x8_t v7 = *(float32x2_t **)(a3 + 8);
  uint64_t v8 = (uint64_t)v7 - *(void *)a3;
  uint64_t v9 = v8 >> 3;
  unint64_t v10 = (v8 >> 3) + (((char *)a2[1] - (char *)*a2) >> 4);
  if (v10 <= (uint64_t)(*(void *)(a3 + 16) - *(void *)a3) >> 3) {
    goto LABEL_13;
  }
  if (v10 >> 61) {
LABEL_43:
  }
    abort();
  uint64_t v11 = 8 * v10;
  unint64_t v12 = (char *)operator new(8 * v10);
  std::string::size_type v13 = &v12[8 * v9];
  float v14 = v13;
  if (v7 != v6)
  {
    unint64_t v15 = (char *)v7 - (char *)v6 - 8;
    if (v15 < 0x58)
    {
      float v14 = &v12[8 * v9];
      do
      {
LABEL_10:
        float32x2_t v21 = v7[-1];
        --v7;
        *((float32x2_t *)v14 - 1) = v21;
        v14 -= 8;
      }
      while (v7 != v6);
      goto LABEL_11;
    }
    float v14 = &v12[8 * v9];
    if ((unint64_t)((char *)v7 - v8 - v12) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v16 = (v15 >> 3) + 1;
    std::string v17 = &v12[8 * v9 - 16];
    std::string v18 = (long long *)&v7[-2];
    uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v20 = *v18;
      *((_OWORD *)v17 - 1) = *(v18 - 1);
      *(_OWORD *)std::string v17 = v20;
      v17 -= 32;
      v18 -= 2;
      v19 -= 4;
    }
    while (v19);
    float v14 = &v13[-8 * (v16 & 0x3FFFFFFFFFFFFFFCLL)];
    v7 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_10;
    }
  }
LABEL_11:
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v13;
  *(void *)(a3 + 16) = &v12[v11];
  if (v6) {
    operator delete(v6);
  }
LABEL_13:
  float v22 = *a2;
  float v23 = a2[1];
  if (*a2 != v23)
  {
    do
    {
      double v25 = *v22;
      if (*(unsigned char *)(a1 + 16))
      {
        size_t v26 = *(float64x2_t **)(a1 + 8);
        double v27 = v22[1];
        float64x2_t v28 = vmlaq_n_f64(vmlaq_n_f64(v26[6], *v26, v25), v26[2], v27);
        double v29 = v26[1].f64[1] * v25;
        double v30 = v26[3].f64[1] * v27;
      }
      else
      {
        long double v31 = v25 * 6.28318531;
        long double v32 = exp(v22[1] * 6.28318531 + -3.14159265);
        double v33 = atan(v32) * 2.0 + -1.57079633;
        long double v34 = fmod(v31, 6.28318531);
        double v35 = fmod(v34 + 6.28318531, 6.28318531) + -3.14159265;
        __double2 v36 = __sincos_stret(v33);
        double v37 = 6378137.0 / sqrt(v36.__sinval * v36.__sinval * -0.00669437999 + 1.0);
        __double2 v38 = __sincos_stret(v35);
        double v39 = v37 * v36.__cosval * v38.__cosval;
        double v40 = v37 * v36.__cosval * v38.__sinval;
        double v41 = v36.__sinval * 0.99330562 * v37;
        size_t v26 = *(float64x2_t **)(a1 + 8);
        float64x2_t v28 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v26[6], *v26, v39), v26[2], v40), v26[4], v41);
        double v30 = v39 * v26[1].f64[1] + v26[3].f64[1] * v40;
        double v29 = v26[5].f64[1] * v41;
      }
      float32x2_t v42 = vcvt_f32_f64(vmulq_n_f64(v28, 1.0 / (v30 + v29 + v26[7].f64[1])));
      unint64_t v44 = *(float32x2_t **)(a3 + 8);
      unint64_t v43 = *(void *)(a3 + 16);
      if ((unint64_t)v44 < v43)
      {
        float32x2_t *v44 = v42;
        size_t v24 = v44 + 1;
      }
      else
      {
        float v45 = *(float32x2_t **)a3;
        uint64_t v46 = (uint64_t)v44 - *(void *)a3;
        uint64_t v47 = v46 >> 3;
        unint64_t v48 = (v46 >> 3) + 1;
        if (v48 >> 61) {
          goto LABEL_43;
        }
        uint64_t v49 = v43 - (void)v45;
        if (v49 >> 2 > v48) {
          unint64_t v48 = v49 >> 2;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          if (v50 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          float v51 = operator new(8 * v50);
        }
        else
        {
          float v51 = 0;
        }
        float v52 = (float32x2_t *)&v51[8 * v47];
        *float v52 = v42;
        size_t v24 = v52 + 1;
        if (v44 == v45)
        {
          float v45 = v44;
        }
        else
        {
          unint64_t v53 = (char *)&v44[-1] - (char *)v45;
          if (v53 < 0x58) {
            goto LABEL_47;
          }
          if ((unint64_t)((char *)v44 - &v51[v46]) < 0x20) {
            goto LABEL_47;
          }
          uint64_t v54 = (v53 >> 3) + 1;
          float v55 = &v51[8 * v47 - 16];
          float v56 = v44 - 2;
          uint64_t v57 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v58 = *(_OWORD *)v56->f32;
            *(v55 - 1) = *(_OWORD *)v56[-2].f32;
            *float v55 = v58;
            v55 -= 2;
            v56 -= 4;
            v57 -= 4;
          }
          while (v57);
          v52 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
          v44 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
          if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_47:
            do
            {
              float32x2_t v59 = v44[-1];
              --v44;
              v52[-1] = v59;
              --v52;
            }
            while (v44 != v45);
            float v45 = *(float32x2_t **)a3;
          }
        }
        *(void *)a3 = v52;
        *(void *)(a3 + 8) = v24;
        *(void *)(a3 + 16) = &v51[8 * v50];
        if (v45) {
          operator delete(v45);
        }
      }
      *(void *)(a3 + 8) = v24;
      v22 += 2;
    }
    while (v22 != v23);
  }
}

void md::HighlightHelper::tileToMercatorPoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = *(unsigned char *)(a1 + 169);
  int v8 = *(_DWORD *)(a1 + 172);
  int v9 = *(_DWORD *)(a1 + 176);
  unint64_t v10 = *(float64x2_t **)a4;
  uint64_t v11 = *(float64x2_t **)(a4 + 8);
  uint64_t v12 = ((uint64_t)v11 - *(void *)a4) >> 4;
  unint64_t v13 = v12 + a3;
  if (v12 + a3 > (unint64_t)((uint64_t)(*(void *)(a4 + 16) - *(void *)a4) >> 4))
  {
    int v34 = *(_DWORD *)(a1 + 176);
    if (v13 >> 60) {
LABEL_29:
    }
      abort();
    uint64_t v14 = 16 * v13;
    unint64_t v15 = (char *)operator new(16 * v13);
    uint64_t v16 = &v15[16 * v12];
    if (v11 != v10)
    {
      std::string v17 = &v15[16 * v12];
      do
      {
        uint64_t v16 = v17 - 16;
        *((float64x2_t *)v17 - 1) = v11[-1];
        --v11;
        v17 -= 16;
      }
      while (v11 != v10);
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = &v15[16 * v12];
    *(void *)(a4 + 16) = &v15[v14];
    int v9 = v34;
    if (v10)
    {
      operator delete(v10);
      int v9 = v34;
    }
  }
  if (a3)
  {
    uint64_t v18 = 0;
    double v19 = 1.0 / (double)(1 << v7);
    v20.i64[0] = v9;
    v20.i64[1] = (1 << v7) + ~v8;
    float32x2_t v21 = *(float64x2_t **)(a4 + 8);
    float64x2_t v33 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(fmax(v19, 0.0)), 0);
    float64x2_t v35 = vmulq_n_f64(vcvtq_f64_s64(v20), v19);
    do
    {
      float64x2_t v23 = vmlaq_f64(v35, vcvtq_f64_f32(*(float32x2_t *)(a2 + 8 * v18)), v33);
      unint64_t v24 = *(void *)(a4 + 16);
      if ((unint64_t)v21 < v24)
      {
        *float32x2_t v21 = v23;
        float v22 = v21 + 1;
      }
      else
      {
        double v25 = *(float64x2_t **)a4;
        uint64_t v26 = ((uint64_t)v21 - *(void *)a4) >> 4;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60) {
          goto LABEL_29;
        }
        uint64_t v28 = v24 - (void)v25;
        if (v28 >> 3 > v27) {
          unint64_t v27 = v28 >> 3;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          float64x2_t v32 = v23;
          if (v29 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          double v30 = (char *)operator new(16 * v29);
          float64x2_t v23 = v32;
        }
        else
        {
          double v30 = 0;
        }
        long double v31 = (float64x2_t *)&v30[16 * v26];
        *long double v31 = v23;
        float v22 = v31 + 1;
        if (v21 != v25)
        {
          do
          {
            v31[-1] = v21[-1];
            --v31;
            --v21;
          }
          while (v21 != v25);
          float32x2_t v21 = *(float64x2_t **)a4;
        }
        *(void *)a4 = v31;
        *(void *)(a4 + 8) = v22;
        *(void *)(a4 + 16) = &v30[16 * v29];
        if (v21) {
          operator delete(v21);
        }
      }
      *(void *)(a4 + 8) = v22;
      ++v18;
      float32x2_t v21 = v22;
    }
    while (v18 != a3);
  }
}

uint64_t md::HighlightHelper::hitTest(float *a1, float *a2, float *a3, double a4, double a5, float a6)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v7 = (char *)a2 - (char *)a1;
  if ((char *)a2 - (char *)a1 == 8)
  {
    float v8 = (float)((float)(*(float *)&a4 - *a1) * (float)(*(float *)&a4 - *a1))
       + (float)((float)(*(float *)&a5 - a1[1]) * (float)(*(float *)&a5 - a1[1]));
    if (v8 >= a6) {
      return 0;
    }
    goto LABEL_11;
  }
  if ((unint64_t)v7 < 9)
  {
    float v8 = 3.4028e38;
    goto LABEL_10;
  }
  uint64_t v10 = v7 >> 3;
  float32x2_t v11 = *(float32x2_t *)a1;
  uint64_t v12 = v10 - 1;
  if ((unint64_t)(v10 - 1) >= 8)
  {
    unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFF8;
    v6.i64[1] = *(void *)a1;
    float32x4_t v15 = (float32x4_t)vdupq_lane_s32((int32x2_t)v11, 0);
    float32x4_t v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    float32x4_t v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    double v19 = (int32x4_t *)(a1 + 10);
    float64x2_t v20 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
    __asm { FMOV            V16.4S, #1.0 }
    unint64_t v26 = v12 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v27 = v18;
    do
    {
      i32 = (const float *)v19[-2].i32;
      float32x4x2_t v53 = vld2q_f32(i32);
      int32x4_t v30 = *v19;
      int32x4_t v29 = v19[1];
      v19 += 4;
      float32x4_t v31 = (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v53.val[0], 0xCuLL);
      float32x4_t v15 = (float32x4_t)vuzp1q_s32(v30, v29);
      float32x4_t v32 = (float32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v53.val[1], 0xCuLL);
      float32x4_t v6 = (float32x4_t)vuzp2q_s32(v30, v29);
      float32x4_t v33 = (float32x4_t)vextq_s8((int8x16_t)v53.val[0], (int8x16_t)v15, 0xCuLL);
      float32x4_t v34 = (float32x4_t)vextq_s8((int8x16_t)v53.val[1], (int8x16_t)v6, 0xCuLL);
      float32x4_t v35 = vsubq_f32(v53.val[0], v31);
      float32x4_t v36 = vsubq_f32(v15, v33);
      v53.val[0] = vsubq_f32(v53.val[1], v32);
      v53.val[1] = vsubq_f32(v6, v34);
      float32x4_t v37 = vmlaq_f32(vmulq_f32(v35, v35), v53.val[0], v53.val[0]);
      float32x4_t v38 = vmlaq_f32(vmulq_f32(v36, v36), v53.val[1], v53.val[1]);
      float32x4_t v39 = (float32x4_t)vbicq_s8((int8x16_t)vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v16, v31), v35), v53.val[0], vsubq_f32(v17, v32)), v37), (float32x4_t)0), _Q16), (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v20, vcvtq_f64_f32(*(float32x2_t *)v37.f32)), (int32x4_t)vcgeq_f64(v20, vcvt_hight_f64_f32(v37))));
      float32x4_t v40 = (float32x4_t)vbicq_s8((int8x16_t)vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v16, v33), v36), v53.val[1], vsubq_f32(v17, v34)), v38), (float32x4_t)0), _Q16), (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v20, vcvtq_f64_f32(*(float32x2_t *)v38.f32)), (int32x4_t)vcgeq_f64(v20, vcvt_hight_f64_f32(v38))));
      float32x4_t v41 = vsubq_f32(v16, vmlaq_f32(v31, v35, v39));
      float32x4_t v42 = vmlaq_f32(v32, v53.val[0], v39);
      float32x4_t v43 = vmlaq_f32(v34, v53.val[1], v40);
      v53.val[0] = vsubq_f32(v16, vmlaq_f32(v33, v36, v40));
      v53.val[1] = vsubq_f32(v17, v42);
      float32x4_t v44 = vsubq_f32(v17, v43);
      float32x4_t v18 = vminnmq_f32(vmlaq_f32(vmulq_f32(v41, v41), v53.val[1], v53.val[1]), v18);
      float32x4_t v27 = vminnmq_f32(vmlaq_f32(vmulq_f32(v53.val[0], v53.val[0]), v44, v44), v27);
      v26 -= 8;
    }
    while (v26);
    float v8 = vminnmvq_f32(vminnmq_f32(v18, v27));
    if (v12 == v14) {
      goto LABEL_10;
    }
    uint64_t v13 = v14 | 1;
    float32x2_t v11 = (float32x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  }
  else
  {
    float v8 = 3.4028e38;
    uint64_t v13 = 1;
  }
  HIDWORD(a4) = LODWORD(a5);
  uint64_t v45 = v10 - v13;
  uint64_t v46 = (float32x2_t *)&a1[2 * v13];
  do
  {
    float32x2_t v48 = *v46;
    float32x2_t v49 = vsub_f32(*v46, v11);
    float32x2_t v50 = vmul_f32(v49, v49);
    float v51 = 0.0;
    if (vaddv_f32(v50) > 1.0e-15)
    {
      float32x2_t v52 = vmul_f32(vsub_f32(*(float32x2_t *)&a4, v11), v49);
      float v51 = fminf(fmaxf(vdiv_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v52, 1), v52), vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v50, 1), v50)).f32[0], 0.0), 1.0);
    }
    float32x2_t v47 = vsub_f32(*(float32x2_t *)&a4, vmla_n_f32(v11, v49, v51));
    float v8 = fminf(vaddv_f32(vmul_f32(v47, v47)), v8);
    ++v46;
    float32x2_t v11 = v48;
    --v45;
  }
  while (v45);
LABEL_10:
  if (v8 >= a6) {
    return 0;
  }
LABEL_11:
  *a3 = v8;
  return 1;
}

id md::HighlightHelper::debugAttributesToString(md::HighlightHelper *this, const gss::FeatureAttributeSet *a2)
{
  gss::attributesToString((uint64_t *)this, 0, 0, 0x1000uLL, __p);
  if (v6 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  uint64_t v3 = [NSString stringWithUTF8String:v2];
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1A2451108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id md::HighlightHelper::debugAttributesToString(gss::Allocator *a1)
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)a1 + 33);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  uint64_t v3 = gss::Allocator::instance(a1);
  uint64_t v29 = v3;
  if (v2)
  {
    uint64_t v4 = 8 * v2;
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v4, 4);
    uint64_t v6 = 0;
    uint64_t v26 = v5;
    uint64_t v28 = v5 + v4;
    do
    {
      if (v5 + v6)
      {
        uint64_t v7 = v5 + v6;
        *(_DWORD *)uint64_t v7 = 0;
        *(_WORD *)(v7 + 4) = 0;
      }
      v6 += 8;
    }
    while (v4 != v6);
    uint64_t v27 = v5 + v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(*(void *)a1 + 33);
  if (*(unsigned char *)(*(void *)a1 + 33))
  {
    uint64_t v9 = **(void **)a1;
    if (v8 == 1)
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = v8 & 0xFE;
      uint64_t v11 = v5 + 8;
      uint64_t v12 = (int *)(v9 + 8);
      uint64_t v13 = v10;
      do
      {
        int v14 = *v12;
        *(_DWORD *)(v11 - 8) = *(v12 - 2);
        *(_DWORD *)uint64_t v11 = v14;
        int v15 = v12[1];
        *(_WORD *)(v11 - 4) = *(v12 - 1);
        *(_WORD *)(v11 + 4) = v15;
        v11 += 16;
        v12 += 4;
        v13 -= 2;
      }
      while (v13);
      if (v10 == v8) {
        goto LABEL_16;
      }
    }
    uint64_t v16 = v8 - v10;
    uint64_t v17 = (8 * v10) | 4;
    float32x4_t v18 = (_WORD *)(v5 + v17);
    double v19 = (int *)(v9 + v17);
    do
    {
      *((_DWORD *)v18 - 1) = *(v19 - 1);
      int v20 = *v19;
      v19 += 2;
      _WORD *v18 = v20;
      v18 += 4;
      --v16;
    }
    while (v16);
  }
LABEL_16:
  gss::attributesToString(&v26, 0, 0, 0x1000uLL, __p);
  if (v25 >= 0) {
    float32x2_t v21 = __p;
  }
  else {
    float32x2_t v21 = (void **)__p[0];
  }
  float v22 = [NSString stringWithUTF8String:v21];
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v29 + 40))(v29, v26, v28 - v26);
  }
  return v22;
}

void sub_1A245130C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a15 < 0)
  {
    operator delete(__p);
    uint64_t v20 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v20 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a19 + 40))(a19, v20, a18 - v20);
  _Unwind_Resume(exception_object);
}

id md::HighlightHelper::debugClientAttributesToString(uint64_t a1)
{
  if (a1)
  {
    gss::StylesheetQuery<gss::PropertyID>::debugClientAttributes(&v6, a1);
    uint64_t v1 = (gss::Allocator *)gss::attributesToString((unsigned __int16 *)&v6, 0, 0, 0x1000uLL, __p);
    if (!v8 && v6)
    {
      uint64_t v2 = gss::Allocator::instance(v1);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v2 + 40))(v2, v6, v7);
    }
    if (v10 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    uint64_t v4 = [NSString stringWithUTF8String:v3];
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4;
}

void sub_1A2451460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A245147C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  _Unwind_Resume(a1);
}

void md::HighlightHelper::appendLinesUsingPrefix(md::HighlightHelper *this, NSString *a2, NSString *a3, NSMutableString *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = this;
  unsigned __int16 v7 = a3;
  char v8 = [(NSString *)a2 componentsSeparatedByString:@"\n"];
  uint64_t v9 = [v8 lastObject];
  int v10 = [v9 isEqualToString:&stru_1EF593218];

  if (v10)
  {
    uint64_t v11 = objc_msgSend(v8, "subarrayWithRange:", 0, objc_msgSend(v8, "count") - 1);

    char v8 = (void *)v11;
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v12 = v8;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v17;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v17 != v14) {
          objc_enumerationMutation(v12);
        }
        [(NSString *)v7 appendFormat:@"%@%@\n", v6, *(void *)(*((void *)&v16 + 1) + 8 * v15++), (void)v16];
      }
      while (v13 != v15);
      uint64_t v13 = [v12 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v13);
  }
}

void sub_1A2451620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::HighlightHelper::to_string(md::HighlightHelper *this, const QuadTile *a2)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v13);
  uint64_t v3 = (void *)std::ostream::operator<<();
  char v22 = 46;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)&v22, 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  char v22 = 46;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)&v22, 1);
  std::ostream::operator<<();
  if ((v20 & 0x10) != 0)
  {
    unint64_t v6 = v19;
    if (v19 < v16)
    {
      unint64_t v19 = v16;
      unint64_t v6 = v16;
    }
    unsigned __int16 v7 = (const void **)&v15;
  }
  else
  {
    if ((v20 & 8) == 0)
    {
      size_t v5 = 0;
      *((unsigned char *)this + 23) = 0;
      goto LABEL_16;
    }
    unsigned __int16 v7 = (const void **)v14;
    unint64_t v6 = v14[2];
  }
  char v8 = *v7;
  size_t v5 = v6 - (void)*v7;
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v11 = (md::HighlightHelper *)operator new(v9 + 1);
    *((void *)this + 1) = v5;
    *((void *)this + 2) = v10 | 0x8000000000000000;
    *(void *)this = v11;
    this = v11;
    goto LABEL_15;
  }
  *((unsigned char *)this + 23) = v5;
  if (v5) {
LABEL_15:
  }
    memmove(this, v8, v5);
LABEL_16:
  *((unsigned char *)this + v5) = 0;
  v13[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v18 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v21);
}

void sub_1A2451888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__shared_ptr_emplace<md::DaVinciElevationRaster>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::DaVinciElevationRaster>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DaVinciElevationRaster>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::DaVinciElevationRasterLayerDataSource::~DaVinciElevationRasterLayerDataSource(md::DaVinciElevationRasterLayerDataSource *this)
{
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

void md::StandardLabeler::debugHighlightFeatureMarker(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 296);
    uint64_t v7 = *(void *)(v2 + 288);
    char v8 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v7 = 0;
    char v8 = 0;
  }
  v4[1] = 0;
  v5[0] = 0;
  v4[0] = 0;
  v5[3] = -1;
  *(void *)&v5[1] = -1;
  uint64_t v6 = 0;
  md::StandardLabeler::setDebugHighlight(a1, &v7, v4);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1A2451A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2 - 32);
  _Unwind_Resume(a1);
}

void ___ZL32GEOGetVectorKitLabelHighlightLogv_block_invoke_29022()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "LabelHighlight");
  uint64_t v1 = (void *)GEOGetVectorKitLabelHighlightLog(void)::log;
  GEOGetVectorKitLabelHighlightLog(void)::log = (uint64_t)v0;
}

BOOL md::StandardLabeler::debugHighlightLabelAtPixel(void *a1, float *a2)
{
  md::StandardLabeler::labelAtPixel(&v16, a1, a2, 0, 0);
  uint64_t v4 = v16;
  if (v16)
  {
    size_t v5 = *(std::__shared_weak_count **)(v16 + 16);
    uint64_t v10 = *(void *)(v16 + 8);
    uint64_t v11 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v12 = *(_DWORD *)(v4 + 48);
    int v14 = -1;
    uint64_t v13 = -1;
    uint64_t v15 = 0;
    md::StandardLabeler::setDebugHighlight((uint64_t)a1, &v16, &v10);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    BOOL v6 = 1;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    int v12 = 0;
    int v14 = -1;
    uint64_t v13 = -1;
    uint64_t v15 = 0;
    md::StandardLabeler::hitRoadFeatureAtPixel((uint64_t)a1, (uint64_t)a2, (uint64_t)&v16, (uint64_t)&v10, 1);
    BOOL v6 = v10 != 0;
    if (v10) {
      md::StandardLabeler::setDebugHighlight((uint64_t)a1, &v16, &v10);
    }
    else {
      (*(void (**)(void *))(*a1 + 272))(a1);
    }
    uint64_t v9 = v11;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  uint64_t v7 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v6;
}

void sub_1A2451CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2 - 32);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabeler::debugString@<X0>(md::StandardLabeler *this@<X0>, char a2@<W1>, unsigned char *a3@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v278);
  BOOL v6 = *(std::mutex **)(*((void *)this + 3) + 288);
  uint64_t v7 = MEMORY[0x1E4FBA418];
  if ((a2 & 1) == 0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"MapTiles: ", 10);
    char v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)" Labels: ", 9);
    float64x2_t v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)" Labels shown: ", 15);
    unint64_t v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"\nFeature Pool: ", 15);
    std::mutex::lock(v6);
    std::mutex::unlock(v6);
    char v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)" roads, ", 8);
    std::mutex::lock(v6);
    std::mutex::unlock(v6);
    uint64_t v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)" unnamed roads, ", 16);
    std::mutex::lock(v6);
    std::mutex::unlock(v6);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)" points ", 8);
    std::mutex::lock(v6);
    std::mutex::unlock(v6);
    uint64_t v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)" physical, ", 11);
    std::mutex::lock(v6);
    std::mutex::unlock(v6);
    uint64_t v29 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)" transit line", 13);
    if ((v286 & 0x10) != 0)
    {
      unint64_t v31 = v285;
      if (v285 < v282)
      {
        unint64_t v285 = v282;
        unint64_t v31 = v282;
      }
      float32x4_t v32 = (const void **)&v281;
    }
    else
    {
      if ((v286 & 8) == 0)
      {
        size_t v30 = 0;
        a3[23] = 0;
        goto LABEL_50;
      }
      float32x4_t v32 = (const void **)v279;
      unint64_t v31 = v280;
    }
    long long v79 = *v32;
    size_t v30 = v31 - (void)*v32;
    if (v30 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    if (v30 >= 0x17)
    {
      uint64_t v80 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v80 = v30 | 7;
      }
      uint64_t v81 = v80 + 1;
      long long v82 = operator new(v80 + 1);
      *((void *)a3 + 1) = v30;
      *((void *)a3 + 2) = v81 | 0x8000000000000000;
      *(void *)a3 = v82;
      a3 = v82;
    }
    else
    {
      a3[23] = v30;
      if (!v30) {
        goto LABEL_50;
      }
    }
    memmove(a3, v79, v30);
LABEL_50:
    a3[v30] = 0;
    goto LABEL_290;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"Feature Pool: tiles=", 20);
  std::mutex::lock(v6);
  std::mutex::unlock(v6);
  char v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)" points=", 8);
  std::mutex::lock(v6);
  std::mutex::unlock(v6);
  uint64_t v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)" roads=", 7);
  std::mutex::lock(v6);
  std::mutex::unlock(v6);
  uint64_t v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)" unnamed roads=", 15);
  std::mutex::lock(v6);
  std::mutex::unlock(v6);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)" physical=", 10);
  std::mutex::lock(v6);
  std::mutex::unlock(v6);
  int v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" transit lines=", 15);
  std::mutex::lock(v6);
  std::mutex::unlock(v6);
  uint64_t v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"Total TextDataStrings: ", 23);
  atomic_load((unsigned int *)md::TextDataString::_totalLabelTextData);
  int v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
  uint64_t v15 = *((void *)this + 6);
  long long v17 = *(char **)(v15 + 16);
  uint64_t v16 = *(char **)(v15 + 24);
  if (v17 == v16) {
    goto LABEL_16;
  }
  unint64_t v18 = v16 - v17 - 16;
  if (v18 < 0x10)
  {
    int v19 = 0;
    int32x2_t v20 = 0;
    uint64_t v21 = (int32x2_t **)v17;
    do
    {
LABEL_15:
      float32x4_t v42 = *v21;
      v21 += 2;
      int32x2_t v20 = vadd_s32(v20, v42[11]);
      v19 += v42[12].i32[0];
    }
    while (v21 != (int32x2_t **)v16);
    goto LABEL_16;
  }
  int v33 = 0;
  int v34 = 0;
  uint64_t v35 = (v18 >> 4) + 1;
  uint64_t v21 = (int32x2_t **)&v17[16 * (v35 & 0x1FFFFFFFFFFFFFFELL)];
  int32x2_t v36 = 0;
  float32x4_t v37 = (int32x2_t **)(v17 + 16);
  uint64_t v38 = v35 & 0x1FFFFFFFFFFFFFFELL;
  int32x2_t v39 = 0;
  do
  {
    float32x4_t v40 = *(v37 - 2);
    float32x4_t v41 = *v37;
    v37 += 4;
    int32x2_t v39 = vadd_s32(v39, v40[11]);
    int32x2_t v36 = vadd_s32(v36, v41[11]);
    v33 += v40[12].i32[0];
    v34 += v41[12].i32[0];
    v38 -= 2;
  }
  while (v38);
  int v19 = v34 + v33;
  int32x2_t v20 = vadd_s32(v36, v39);
  if (v35 != (v35 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_15;
  }
LABEL_16:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"MapTiles: tiles=", 16);
  float32x4_t v43 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)", label-fail(noFeature=", 23);
  float32x4_t v44 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)", noStyle=", 10);
  uint64_t v45 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)", zRange=", 9);
  uint64_t v46 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)")\n", 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"Labels: active=", 15);
  float32x2_t v47 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)"(", 1);
  float32x2_t v48 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)") cached=", 9);
  float32x2_t v49 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)" custom=", 8);
  float32x2_t v50 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)" overridden=", 12);
  float v51 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)" exist=", 7);
  atomic_load((unsigned int *)&md::Label::_totalLabels);
  float32x2_t v52 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"DisplayLabels: total=", 21);
  float32x4x2_t v53 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)" active=", 8);
  uint64_t v54 = (char *)*((void *)this + 13);
  float v55 = (char *)*((void *)this + 14);
  if (v54 != v55)
  {
    unint64_t v56 = v55 - v54 - 16;
    if (v56 >= 0x10)
    {
      int v58 = 0;
      int v59 = 0;
      uint64_t v60 = (v56 >> 4) + 1;
      uint64_t v61 = (uint64_t *)(v54 + 16);
      uint64_t v62 = v60 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v63 = *(v61 - 2);
        uint64_t v64 = *v61;
        v61 += 4;
        v58 += *(unsigned __int8 *)(v63 + 1252);
        v59 += *(unsigned __int8 *)(v64 + 1252);
        v62 -= 2;
      }
      while (v62);
      int v57 = v59 + v58;
      if (v60 == (v60 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_25;
      }
      v54 += 16 * (v60 & 0x1FFFFFFFFFFFFFFELL);
    }
    else
    {
      int v57 = 0;
    }
    do
    {
      uint64_t v65 = *(void *)v54;
      v54 += 16;
      v57 += *(unsigned __int8 *)(v65 + 1252);
    }
    while (v54 != v55);
  }
LABEL_25:
  uint64_t v66 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)"\n", 1);
  uint64_t v67 = *((void *)this + 4);
  unint64_t v68 = *(void **)(v67 + 72);
  uint64_t v69 = (void *)(v67 + 80);
  if (v68 != v69)
  {
    uint64_t v70 = 0;
    do
    {
      unsigned int v71 = (void *)v68[1];
      float64x2_t v72 = v68;
      if (v71)
      {
        do
        {
          unint64_t v73 = v71;
          unsigned int v71 = (void *)*v71;
        }
        while (v71);
      }
      else
      {
        do
        {
          unint64_t v73 = (void *)v72[2];
          BOOL v74 = *v73 == (void)v72;
          float64x2_t v72 = v73;
        }
        while (!v74);
      }
      v70 += v68[33];
      unint64_t v68 = v73;
    }
    while (v73 != v69);
    if (v70)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"Custom features: ", 17);
      uint64_t v75 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v75, (uint64_t)"\n", 1);
    }
  }
  if ((*(uint64_t (**)(md::StandardLabeler *))(*(void *)this + 344))(this))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"ExternalObjects: ", 17);
    uint64_t v76 = (*(uint64_t (**)(md::StandardLabeler *))(*(void *)this + 344))(this);
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v288);
    unint64_t v77 = *(void **)(v76 + 96);
    if (v77)
    {
      uint64_t v78 = 0;
      do
      {
        v78 += *(unsigned __int8 *)(v77[2] + 68);
        unint64_t v77 = (void *)*v77;
      }
      while (v77);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v288, (uint64_t)"Icon updateCount(active)=", 25);
    uint64_t v83 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v83, (uint64_t)"(", 1);
    uint64_t v84 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)")", 1);
    if ((v297 & 0x10) != 0)
    {
      unint64_t v87 = v296;
      if (v296 < v293)
      {
        unint64_t v296 = v293;
        unint64_t v87 = v293;
      }
      uint64_t v88 = (const void **)&v292;
    }
    else
    {
      if ((v297 & 8) == 0)
      {
        size_t v85 = 0;
        HIBYTE(v277) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_66;
      }
      uint64_t v88 = (const void **)v291;
      unint64_t v87 = v291[2];
    }
    long long v89 = *v88;
    size_t v85 = v87 - (void)*v88;
    if (v85 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    if (v85 >= 0x17)
    {
      uint64_t v90 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v85 | 7) != 0x17) {
        uint64_t v90 = v85 | 7;
      }
      uint64_t v91 = v90 + 1;
      p_dst = (void **)operator new(v90 + 1);
      size_t v276 = v85;
      int64_t v277 = v91 | 0x8000000000000000;
      long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v277) = v87 - *(unsigned char *)v88;
      p_dst = (void **)&__dst;
      if (!v85) {
        goto LABEL_66;
      }
    }
    memmove(p_dst, v89, v85);
LABEL_66:
    *((unsigned char *)p_dst + v85) = 0;
    long long v288 = *(void **)v7;
    *(void **)((char *)&v288 + *((void *)v288 - 3)) = *(void **)(v7 + 24);
    unint64_t v289 = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (v295 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A62391A0](&v298);
    if (v277 >= 0) {
      unint64_t v92 = (void **)&__dst;
    }
    else {
      unint64_t v92 = __dst;
    }
    if (v277 >= 0) {
      uint64_t v93 = HIBYTE(v277);
    }
    else {
      uint64_t v93 = v276;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)v92, v93);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"\n", 1);
    if (SHIBYTE(v277) < 0) {
      operator delete(__dst);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"Count Pushed Labels: ", 21);
  uint64_t v94 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v94, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"StagingState: ", 14);
  uint64_t v95 = (char *)*((void *)this + 9);
  unint64_t v96 = (char *)*((void *)this + 10);
  if (v95 == v96) {
    goto LABEL_91;
  }
  unint64_t v97 = v96 - v95 - 16;
  if (v97 < 0x10)
  {
    int v98 = 0;
    goto LABEL_88;
  }
  int v99 = 0;
  int v100 = 0;
  uint64_t v101 = (v97 >> 4) + 1;
  unint64_t v102 = (uint64_t *)(v95 + 16);
  uint64_t v103 = v101 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v104 = *(v102 - 2);
    uint64_t v105 = *v102;
    v102 += 4;
    int v106 = *(unsigned __int8 *)(v105 + 820);
    if (!*(unsigned char *)(v104 + 820)) {
      ++v99;
    }
    if (!v106) {
      ++v100;
    }
    v103 -= 2;
  }
  while (v103);
  int v98 = v100 + v99;
  if (v101 != (v101 & 0x1FFFFFFFFFFFFFFELL))
  {
    v95 += 16 * (v101 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_88:
      uint64_t v107 = *(void *)v95;
      v95 += 16;
      if (!*(unsigned char *)(v107 + 820)) {
        ++v98;
      }
    }
    while (v95 != v96);
  }
LABEL_91:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"Dead", 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"=", 1);
  int v108 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v108, (uint64_t)" ", 1);
  uint64_t v109 = (char *)*((void *)this + 9);
  int v110 = (char *)*((void *)this + 10);
  if (v109 == v110) {
    goto LABEL_106;
  }
  unint64_t v111 = v110 - v109 - 16;
  if (v111 < 0x10)
  {
    int v112 = 0;
    goto LABEL_103;
  }
  int v113 = 0;
  int v114 = 0;
  uint64_t v115 = (v111 >> 4) + 1;
  uint64_t v116 = (uint64_t *)(v109 + 16);
  uint64_t v117 = v115 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v118 = *(v116 - 2);
    uint64_t v119 = *v116;
    v116 += 4;
    int v120 = *(unsigned __int8 *)(v119 + 820);
    if (*(unsigned char *)(v118 + 820) == 1) {
      ++v113;
    }
    if (v120 == 1) {
      ++v114;
    }
    v117 -= 2;
  }
  while (v117);
  int v112 = v114 + v113;
  if (v115 != (v115 & 0x1FFFFFFFFFFFFFFELL))
  {
    v109 += 16 * (v115 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_103:
      uint64_t v121 = *(void *)v109;
      v109 += 16;
      if (*(unsigned char *)(v121 + 820) == 1) {
        ++v112;
      }
    }
    while (v109 != v110);
  }
LABEL_106:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"Prepare", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"=", 1);
  unint64_t v122 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v122, (uint64_t)" ", 1);
  uint64_t v123 = (char *)*((void *)this + 9);
  float v124 = (char *)*((void *)this + 10);
  if (v123 == v124) {
    goto LABEL_121;
  }
  unint64_t v125 = v124 - v123 - 16;
  if (v125 < 0x10)
  {
    int v126 = 0;
    goto LABEL_118;
  }
  int v127 = 0;
  int v128 = 0;
  uint64_t v129 = (v125 >> 4) + 1;
  float v130 = (uint64_t *)(v123 + 16);
  uint64_t v131 = v129 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v132 = *(v130 - 2);
    uint64_t v133 = *v130;
    v130 += 4;
    int v134 = *(unsigned __int8 *)(v133 + 820);
    if (*(unsigned char *)(v132 + 820) == 2) {
      ++v127;
    }
    if (v134 == 2) {
      ++v128;
    }
    v131 -= 2;
  }
  while (v131);
  int v126 = v128 + v127;
  if (v129 != (v129 & 0x1FFFFFFFFFFFFFFELL))
  {
    v123 += 16 * (v129 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_118:
      uint64_t v135 = *(void *)v123;
      v123 += 16;
      if (*(unsigned char *)(v135 + 820) == 2) {
        ++v126;
      }
    }
    while (v123 != v124);
  }
LABEL_121:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"Display", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"=", 1);
  float v136 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v136, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"LabelDisplayState: ", 19);
  float v137 = (char *)*((void *)this + 13);
  float v138 = (char *)*((void *)this + 14);
  if (v137 == v138) {
    goto LABEL_136;
  }
  unint64_t v139 = v138 - v137 - 16;
  if (v139 < 0x10)
  {
    int v140 = 0;
    goto LABEL_133;
  }
  int v141 = 0;
  int v142 = 0;
  uint64_t v143 = (v139 >> 4) + 1;
  float v144 = (uint64_t *)(v137 + 16);
  uint64_t v145 = v143 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v146 = *(v144 - 2);
    uint64_t v147 = *v144;
    v144 += 4;
    int v148 = *(unsigned __int8 *)(v147 + 1072);
    if (!*(unsigned char *)(v146 + 1072)) {
      ++v141;
    }
    if (!v148) {
      ++v142;
    }
    v145 -= 2;
  }
  while (v145);
  int v140 = v142 + v141;
  if (v143 != (v143 & 0x1FFFFFFFFFFFFFFELL))
  {
    v137 += 16 * (v143 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_133:
      uint64_t v149 = *(void *)v137;
      v137 += 16;
      if (!*(unsigned char *)(v149 + 1072)) {
        ++v140;
      }
    }
    while (v137 != v138);
  }
LABEL_136:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"Hidden", 6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"=", 1);
  __int16 v150 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v150, (uint64_t)" ", 1);
  unint64_t v151 = (char *)*((void *)this + 13);
  unint64_t v152 = (char *)*((void *)this + 14);
  if (v151 == v152) {
    goto LABEL_151;
  }
  unint64_t v153 = v152 - v151 - 16;
  if (v153 < 0x10)
  {
    int v154 = 0;
    goto LABEL_148;
  }
  int v155 = 0;
  int v156 = 0;
  uint64_t v157 = (v153 >> 4) + 1;
  uint64_t v158 = (uint64_t *)(v151 + 16);
  uint64_t v159 = v157 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v160 = *(v158 - 2);
    uint64_t v161 = *v158;
    v158 += 4;
    int v162 = *(unsigned __int8 *)(v161 + 1072);
    if (*(unsigned char *)(v160 + 1072) == 1) {
      ++v155;
    }
    if (v162 == 1) {
      ++v156;
    }
    v159 -= 2;
  }
  while (v159);
  int v154 = v156 + v155;
  if (v157 != (v157 & 0x1FFFFFFFFFFFFFFELL))
  {
    v151 += 16 * (v157 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_148:
      uint64_t v163 = *(void *)v151;
      v151 += 16;
      if (*(unsigned char *)(v163 + 1072) == 1) {
        ++v154;
      }
    }
    while (v151 != v152);
  }
LABEL_151:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"FadeIn", 6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"=", 1);
  double v164 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v164, (uint64_t)" ", 1);
  long double v165 = (char *)*((void *)this + 13);
  __double2 v166 = (char *)*((void *)this + 14);
  if (v165 == v166) {
    goto LABEL_166;
  }
  unint64_t v167 = v166 - v165 - 16;
  if (v167 < 0x10)
  {
    int v168 = 0;
    goto LABEL_163;
  }
  int v169 = 0;
  int v170 = 0;
  uint64_t v171 = (v167 >> 4) + 1;
  float v172 = (uint64_t *)(v165 + 16);
  uint64_t v173 = v171 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v174 = *(v172 - 2);
    uint64_t v175 = *v172;
    v172 += 4;
    int v176 = *(unsigned __int8 *)(v175 + 1072);
    if (*(unsigned char *)(v174 + 1072) == 2) {
      ++v169;
    }
    if (v176 == 2) {
      ++v170;
    }
    v173 -= 2;
  }
  while (v173);
  int v168 = v170 + v169;
  if (v171 != (v171 & 0x1FFFFFFFFFFFFFFELL))
  {
    v165 += 16 * (v171 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_163:
      uint64_t v177 = *(void *)v165;
      v165 += 16;
      if (*(unsigned char *)(v177 + 1072) == 2) {
        ++v168;
      }
    }
    while (v165 != v166);
  }
LABEL_166:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"FadeOut", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"=", 1);
  float v178 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v178, (uint64_t)" ", 1);
  float v179 = (char *)*((void *)this + 13);
  float v180 = (char *)*((void *)this + 14);
  if (v179 != v180)
  {
    unint64_t v181 = v180 - v179 - 16;
    if (v181 >= 0x10)
    {
      int v183 = 0;
      int v184 = 0;
      uint64_t v185 = (v181 >> 4) + 1;
      uint64_t v186 = (uint64_t *)(v179 + 16);
      uint64_t v187 = v185 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v188 = *(v186 - 2);
        uint64_t v189 = *v186;
        v186 += 4;
        int v190 = *(unsigned __int8 *)(v189 + 1072);
        if (*(unsigned char *)(v188 + 1072) == 3) {
          ++v183;
        }
        if (v190 == 3) {
          ++v184;
        }
        v187 -= 2;
      }
      while (v187);
      int v182 = v184 + v183;
      if (v185 == (v185 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_181;
      }
      v179 += 16 * (v185 & 0x1FFFFFFFFFFFFFFELL);
    }
    else
    {
      int v182 = 0;
    }
    do
    {
      uint64_t v191 = *(void *)v179;
      v179 += 16;
      if (*(unsigned char *)(v191 + 1072) == 3) {
        ++v182;
      }
    }
    while (v179 != v180);
  }
LABEL_181:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"Visible", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"=", 1);
  uint64_t v192 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v192, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"Collision Tested: Items=", 24);
  unint64_t v193 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v193, (uint64_t)" ReserveSpace=", 14);
  unint64_t v194 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v194, (uint64_t)" Lines=", 7);
  uint64_t v195 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v195, (uint64_t)"\n", 1);
  unint64_t v289 = 0;
  {
    operator new();
  }
  uint64_t v290 = mdm::Allocator::instance(void)::alloc;
  v291[0] = 0;
  long long v288 = &v289;
  uint64_t v196 = *((void *)this + 9);
  uint64_t v197 = *((void *)this + 10);
  unint64_t v274 = a3;
  if (v196 != v197)
  {
    do
    {
      uint64_t v198 = (*(uint64_t (**)(void))(**(void **)(*(void *)v196 + 8) + 560))(*(void *)(*(void *)v196 + 8));
      uint64_t v199 = *(unint64_t **)v198;
      int v200 = *(unint64_t **)(v198 + 8);
      while (v199 != v200)
      {
        unint64_t v201 = *v199;
        long long v202 = v289;
        long long v203 = &v289;
        long long v204 = &v289;
        if (v289)
        {
          while (1)
          {
            while (1)
            {
              long long v204 = (void **)v202;
              unint64_t v205 = v202[4];
              if (v201 >= v205) {
                break;
              }
              long long v202 = *v204;
              long long v203 = v204;
              if (!*v204) {
                goto LABEL_198;
              }
            }
            if (v205 >= v201) {
              break;
            }
            long long v202 = v204[1];
            if (!v202)
            {
              long long v203 = v204 + 1;
              goto LABEL_198;
            }
          }
        }
        else
        {
LABEL_198:
          unint64_t v206 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v290 + 16))(v290, 40, 8);
          v206[4] = v201;
          *unint64_t v206 = 0;
          v206[1] = 0;
          v206[2] = v204;
          *long long v203 = v206;
          if (*(void *)v288)
          {
            long long v288 = *(void **)v288;
            unint64_t v206 = (void *)*v203;
          }
          unint64_t v207 = v289;
          BOOL v74 = v206 == v289;
          *((unsigned char *)v206 + 24) = v206 == v289;
          if (!v74)
          {
            do
            {
              uint64_t v208 = v206[2];
              if (*(unsigned char *)(v208 + 24)) {
                break;
              }
              uint8x8_t v209 = *(void **)(v208 + 16);
              uint64_t v210 = *v209;
              if (*v209 == v208)
              {
                uint64_t v213 = v209[1];
                if (!v213 || (v214 = *(unsigned __int8 *)(v213 + 24), uint64_t v211 = (unsigned char *)(v213 + 24), v214))
                {
                  if (*(void **)v208 == v206)
                  {
                    long long v215 = (uint64_t *)v206[2];
                  }
                  else
                  {
                    long long v215 = *(uint64_t **)(v208 + 8);
                    uint64_t v216 = *v215;
                    *(void *)(v208 + 8) = *v215;
                    if (v216)
                    {
                      *(void *)(v216 + 16) = v208;
                      uint8x8_t v209 = *(void **)(v208 + 16);
                    }
                    v215[2] = (uint64_t)v209;
                    *(void *)(*(void *)(v208 + 16) + 8 * (**(void **)(v208 + 16) != v208)) = v215;
                    *long long v215 = v208;
                    *(void *)(v208 + 16) = v215;
                    uint8x8_t v209 = (void *)v215[2];
                    uint64_t v208 = *v209;
                  }
                  *((unsigned char *)v215 + 24) = 1;
                  *((unsigned char *)v209 + 24) = 0;
                  uint64_t v219 = *(void *)(v208 + 8);
                  void *v209 = v219;
                  if (v219) {
                    *(void *)(v219 + 16) = v209;
                  }
                  *(void *)(v208 + 16) = v209[2];
                  *(void *)(v209[2] + 8 * (*(void *)v209[2] != (void)v209)) = v208;
                  *(void *)(v208 + 8) = v209;
                  goto LABEL_187;
                }
              }
              else if (!v210 || (v212 = *(unsigned __int8 *)(v210 + 24), uint64_t v211 = (unsigned char *)(v210 + 24), v212))
              {
                if (*(void **)v208 == v206)
                {
                  uint64_t v217 = v206[1];
                  *(void *)uint64_t v208 = v217;
                  if (v217)
                  {
                    *(void *)(v217 + 16) = v208;
                    uint8x8_t v209 = *(void **)(v208 + 16);
                  }
                  v206[2] = v209;
                  *(void *)(*(void *)(v208 + 16) + 8 * (**(void **)(v208 + 16) != v208)) = v206;
                  v206[1] = v208;
                  *(void *)(v208 + 16) = v206;
                  uint8x8_t v209 = (void *)v206[2];
                }
                else
                {
                  unint64_t v206 = (void *)v206[2];
                }
                *((unsigned char *)v206 + 24) = 1;
                *((unsigned char *)v209 + 24) = 0;
                uint64_t v208 = v209[1];
                float v218 = *(void **)v208;
                v209[1] = *(void *)v208;
                if (v218) {
                  v218[2] = v209;
                }
                *(void *)(v208 + 16) = v209[2];
                *(void *)(v209[2] + 8 * (*(void *)v209[2] != (void)v209)) = v208;
                *(void *)uint64_t v208 = v209;
LABEL_187:
                v209[2] = v208;
                break;
              }
              *(unsigned char *)(v208 + 24) = 1;
              unint64_t v206 = v209;
              *((unsigned char *)v209 + 24) = v209 == v207;
              *uint64_t v211 = 1;
            }
            while (v209 != v207);
          }
          ++v291[0];
        }
        v199 += 2;
      }
      v196 += 16;
    }
    while (v196 != v197);
    uint64_t v7 = MEMORY[0x1E4FBA418];
  }
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v288, v289);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"LabelsPerStyle:", 15);
  uint64_t v220 = v278[0];
  *(_DWORD *)((char *)&v278[1] + *(void *)(v278[0] - 24)) = *(_DWORD *)((unsigned char *)&v278[1]
                                                                          + *(void *)(v278[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v278[2] + *(void *)(v220 - 24)) = 1;
  unint64_t v221 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v221, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"\nOutcome: (Staging, Display)\n", 29);
  uint64_t v222 = v7;
  for (int i = 0; i != 38; ++i)
  {
    md::stringFromLabelOutcome((uint64_t)&v288, i);
    uint64_t v224 = (char *)*((void *)this + 9);
    uint64_t v225 = (char *)*((void *)this + 10);
    if (v224 == v225) {
      goto LABEL_244;
    }
    unint64_t v226 = v225 - v224 - 16;
    if (v226 < 0x10)
    {
      int v227 = 0;
      goto LABEL_241;
    }
    int v228 = 0;
    int v229 = 0;
    uint64_t v230 = (v226 >> 4) + 1;
    v231 = (uint64_t *)(v224 + 16);
    uint64_t v232 = v230 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v233 = *(v231 - 2);
      uint64_t v234 = *v231;
      v231 += 4;
      int v235 = *(unsigned __int8 *)(v234 + 821);
      if (*(unsigned __int8 *)(v233 + 821) == i) {
        ++v228;
      }
      if (v235 == i) {
        ++v229;
      }
      v232 -= 2;
    }
    while (v232);
    int v227 = v229 + v228;
    if (v230 != (v230 & 0x1FFFFFFFFFFFFFFELL))
    {
      v224 += 16 * (v230 & 0x1FFFFFFFFFFFFFFELL);
      do
      {
LABEL_241:
        uint64_t v236 = *(void *)v224;
        v224 += 16;
        if (*(unsigned __int8 *)(v236 + 821) == i) {
          ++v227;
        }
      }
      while (v224 != v225);
    }
LABEL_244:
    int v237 = (char *)*((void *)this + 13);
    int v238 = (char *)*((void *)this + 14);
    if (v237 == v238) {
      goto LABEL_259;
    }
    unint64_t v239 = v238 - v237 - 16;
    if (v239 < 0x10)
    {
      int v240 = 0;
      goto LABEL_256;
    }
    int v241 = 0;
    int v242 = 0;
    uint64_t v243 = (v239 >> 4) + 1;
    unsigned int v244 = (uint64_t *)(v237 + 16);
    uint64_t v245 = v243 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v246 = *(v244 - 2);
      uint64_t v247 = *v244;
      v244 += 4;
      int v248 = *(unsigned __int8 *)(v247 + 1073);
      if (*(unsigned __int8 *)(v246 + 1073) == i) {
        ++v241;
      }
      if (v248 == i) {
        ++v242;
      }
      v245 -= 2;
    }
    while (v245);
    int v240 = v242 + v241;
    if (v243 != (v243 & 0x1FFFFFFFFFFFFFFELL))
    {
      v237 += 16 * (v243 & 0x1FFFFFFFFFFFFFFELL);
      do
      {
LABEL_256:
        uint64_t v249 = *(void *)v237;
        v237 += 16;
        if (*(unsigned __int8 *)(v249 + 1073) == i) {
          ++v240;
        }
      }
      while (v237 != v238);
    }
LABEL_259:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"   ", 3);
    if (v290 >= 0) {
      v250 = &v288;
    }
    else {
      v250 = v288;
    }
    if (v290 >= 0) {
      uint64_t v251 = HIBYTE(v290);
    }
    else {
      uint64_t v251 = (uint64_t)v289;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)v250, v251);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)":(", 2);
    double v252 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v252, (uint64_t)", ", 2);
    double v253 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)")\n", 2);
    if (SHIBYTE(v290) < 0) {
      operator delete(v288);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"\nFade:\n", 7);
  uint64_t v7 = v222;
  long long v254 = v274;
  uint64_t v255 = *((void *)this + 9);
  uint64_t v256 = *((void *)this + 10);
  if (v255 != v256)
  {
    int v257 = 0;
    int v258 = 0;
    int v259 = 0;
    do
    {
      uint64_t v260 = *(void *)(*(void *)v255 + 296);
      if (v260)
      {
        v258 += (*(uint64_t (**)(uint64_t))(*(void *)v260 + 688))(v260);
        uint64_t v261 = *(void *)(*(void *)v255 + 296);
        if (v261)
        {
          v259 += (*(uint64_t (**)(uint64_t))(*(void *)v261 + 680))(v261);
          uint64_t v262 = *(void *)(*(void *)v255 + 296);
          if (v262) {
            v257 += (*(uint64_t (**)(uint64_t))(*(void *)v262 + 696))(v262);
          }
        }
      }
      v255 += 16;
    }
    while (v255 != v256);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"   Cross Fade Parts: ", 21);
  int v263 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v263, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"   Style Fade Parts: ", 21);
  uint64_t v264 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"   Parts Cross Fading: ", 23);
  v265 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)"\n", 1);
  if ((v286 & 0x10) != 0)
  {
    unint64_t v267 = v285;
    if (v285 < v282)
    {
      unint64_t v285 = v282;
      unint64_t v267 = v282;
    }
    uint64_t v268 = (const void **)&v281;
  }
  else
  {
    if ((v286 & 8) == 0)
    {
      size_t v266 = 0;
      *((unsigned char *)v274 + 23) = 0;
      goto LABEL_289;
    }
    uint64_t v268 = (const void **)v279;
    unint64_t v267 = v280;
  }
  uint64_t v269 = *v268;
  size_t v266 = v267 - (void)*v268;
  if (v266 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  if (v266 >= 0x17)
  {
    uint64_t v270 = (v266 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v266 | 7) != 0x17) {
      uint64_t v270 = v266 | 7;
    }
    uint64_t v271 = v270 + 1;
    v272 = operator new(v270 + 1);
    v274[1] = v266;
    v274[2] = v271 | 0x8000000000000000;
    *unint64_t v274 = v272;
    long long v254 = v272;
    goto LABEL_288;
  }
  *((unsigned char *)v274 + 23) = v266;
  if (v266) {
LABEL_288:
  }
    memmove(v254, v269, v266);
LABEL_289:
  *((unsigned char *)v254 + v266) = 0;
LABEL_290:
  v278[0] = *(void *)v7;
  *(void *)((char *)v278 + *(void *)(v278[0] - 24)) = *(void *)(v7 + 24);
  v278[1] = MEMORY[0x1E4FBA470] + 16;
  if (v284 < 0) {
    operator delete(v283);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v287);
}

void sub_1A2453798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
}

void md::StandardLabeler::populateDebugNode(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (*(void *)(a1 + 200))
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&__p, "Selected Feature");
    gdc::DebugTreeNode::createChildNode(a2, (long long *)&__p);
    (*(void (**)(void))(**(void **)(a1 + 200) + 464))();
  }
  if (*(void *)(a1 + 184))
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&__p, "Selected Label");
    ChildNode = gdc::DebugTreeNode::createChildNode(a2, (long long *)&__p);
    md::Label::populateDebugNode(*(md::Label **)(a1 + 184), (gdc::DebugTreeNode *)ChildNode, v7);
  }
  if ((*a3 & 8) != 0)
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
    strcpy((char *)&__p, "All Labels");
    char v8 = gdc::DebugTreeNode::createChildNode(a2, (long long *)&__p);
    if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
    {
      uint64_t v9 = (uint64_t)v8;
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4; ++i)
      {
        std::to_string(&v15, i);
        int v12 = std::string::insert(&v15, 0, "Label ", 6uLL);
        std::string __p = *v12;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        int v14 = gdc::DebugTreeNode::createChildNode(v9, (long long *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
LABEL_13:
          }
            operator delete(v15.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_13;
        }
        md::Label::populateDebugNode(*(md::Label **)(*(void *)(a1 + 72) + v10), (gdc::DebugTreeNode *)v14, v13);
        v10 += 16;
      }
    }
  }
}

void sub_1A2453A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL md::StandardLabeler::needsDebugDraw(md::StandardLabeler *this)
{
  uint64_t v2 = *((void *)this + 23);
  if (v2)
  {
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 1242));
    if ((v3 & 1) == 0) {
      (*(void (**)(md::StandardLabeler *))(*(void *)this + 272))(this);
    }
  }
  uint64_t v4 = *((void *)this + 3);
  return *(unsigned char *)(v4 + 3616) || *(unsigned char *)(v4 + 3623) || *((void *)this + 23) || *((void *)this + 25) != 0;
}

void md::StandardLabeler::debugDraw(md::StandardLabeler *this, NSMutableString *a2, md::DebugConsole *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  BOOL v6 = a2;
  float32x2_t v52 = a3;
  uint64_t v7 = *((void *)this + 3);
  if (*(unsigned char *)(v7 + 3616))
  {
    uint64_t v8 = *((void *)this + 6);
    uint64_t v9 = *(uint64_t **)(v8 + 16);
    uint64_t v10 = *(uint64_t **)(v8 + 24);
    if (v9 != v10)
    {
      while (1)
      {
        uint64_t v11 = *((void *)this + 3);
        if (!*(unsigned char *)(v11 + 3637)) {
          break;
        }
        if (!*(unsigned char *)(v11 + 3639)) {
          goto LABEL_14;
        }
LABEL_5:
        v9 += 2;
        if (v9 == v10)
        {
          uint64_t v7 = *((void *)this + 3);
          goto LABEL_18;
        }
      }
      uint64_t v12 = *v9;
      std::string __p = &unk_1EF57D878;
      float v55 = this;
      unint64_t v56 = &v52;
      p_p = &__p;
      md::LabelMapTile::enumerateLineFeatures(v12, (uint64_t)&__p);
      if (p_p == &__p)
      {
        (*((void (**)(void **))__p + 4))(&__p);
      }
      else if (p_p)
      {
        (*((void (**)(void))*p_p + 5))();
      }
      if (*(unsigned char *)(*((void *)this + 3) + 3639)) {
        goto LABEL_5;
      }
LABEL_14:
      uint64_t v13 = *v9;
      std::string __p = &unk_1EF57D8C0;
      float v55 = this;
      unint64_t v56 = &v52;
      p_p = &__p;
      md::LabelMapTile::enumeratePhysicalLineFeatures(*(void *)(v13 + 184), (uint64_t)&__p);
      if (p_p == &__p)
      {
        (*((void (**)(void **))__p + 4))(&__p);
      }
      else if (p_p)
      {
        (*((void (**)(void))*p_p + 5))();
      }
      goto LABEL_5;
    }
  }
LABEL_18:
  if (*(unsigned char *)(v7 + 3623))
  {
    uint64_t v14 = *((void *)this + 6);
    std::string v15 = *(uint64_t **)(v14 + 16);
    uint64_t v16 = *(uint64_t **)(v14 + 24);
    while (1)
    {
      if (v15 == v16) {
        goto LABEL_42;
      }
      uint64_t v17 = *v15;
      uint64_t v18 = *(void *)(*v15 + 440);
      if (v18) {
        break;
      }
LABEL_31:
      uint64_t v26 = *(md::LabelManager **)(v17 + 456);
      if (!v26) {
        goto LABEL_38;
      }
      uint64_t v27 = v52;
      md::LabelMapTileCollisionInfo::pointsToScreen((md::LabelMapTileCollisionInfo *)&__p, v26, *(void *)(*((void *)this + 3) + 432), *(double *)(*(void *)(*((void *)this + 3) + 232) + 56));
      uint64_t v29 = *((void *)v26 + 23);
      uint64_t v30 = *((void *)v26 + 24);
      unint64_t v31 = (char *)__p;
      if (v29 != v30)
      {
        do
        {
          uint64_t v32 = *(unsigned int *)(v29 + 264);
          uint64_t v33 = *(void *)&v31[8 * v32];
          uint64_t v53 = *(void *)&v31[8 * (v32 + 1)];
          *((void *)v27 + 1) = v33;
          v28.n128_f32[0] = ggl::DebugConsole::drawLine((uint64_t)v27, (float *)&v53);
          v29 += 272;
        }
        while (v29 != v30);
LABEL_36:
        (*((void (**)(void **, char *, int64_t, __n128))*p_p + 5))(p_p, v31, (char *)v56 - v31, v28);
        goto LABEL_37;
      }
      if (__p) {
        goto LABEL_36;
      }
LABEL_37:
      uint64_t v17 = *v15;
LABEL_38:
      int v34 = *(md::LabelManager **)(v17 + 472);
      if (v34)
      {
        uint64_t v35 = v52;
        md::LabelMapTileCollisionInfo::pointsToScreen((md::LabelMapTileCollisionInfo *)&__p, v34, *(void *)(*((void *)this + 3) + 432), *(double *)(*(void *)(*((void *)this + 3) + 232) + 56));
        uint64_t v36 = *((void *)v34 + 23);
        uint64_t v37 = *((void *)v34 + 24);
        uint64_t v38 = (char *)__p;
        if (v36 == v37)
        {
          if (!__p) {
            goto LABEL_22;
          }
        }
        else
        {
          do
          {
            uint64_t v39 = *(unsigned int *)(v36 + 264);
            uint64_t v40 = *(void *)&v38[8 * v39];
            uint64_t v53 = *(void *)&v38[8 * (v39 + 1)];
            *((void *)v35 + 1) = v40;
            ggl::DebugConsole::drawLine((uint64_t)v35, (float *)&v53);
            v36 += 272;
          }
          while (v36 != v37);
        }
        (*((void (**)(void **, char *, int64_t))*p_p + 5))(p_p, v38, (char *)v56 - v38);
      }
LABEL_22:
      v15 += 2;
    }
    int v19 = v52;
    md::LabelMapTileCollisionInfo::pointsToScreen((md::LabelMapTileCollisionInfo *)&__p, *(md::LabelManager **)(*v15 + 440), *(void *)(*((void *)this + 3) + 432), *(double *)(*(void *)(*((void *)this + 3) + 232) + 56));
    uint64_t v21 = *(void *)(v18 + 184);
    uint64_t v22 = *(void *)(v18 + 192);
    float64x2_t v23 = (char *)__p;
    if (v21 == v22)
    {
      if (!__p)
      {
LABEL_30:
        uint64_t v17 = *v15;
        goto LABEL_31;
      }
    }
    else
    {
      do
      {
        uint64_t v24 = *(unsigned int *)(v21 + 264);
        uint64_t v25 = *(void *)&v23[8 * v24];
        uint64_t v53 = *(void *)&v23[8 * (v24 + 1)];
        *((void *)v19 + 1) = v25;
        v20.n128_f32[0] = ggl::DebugConsole::drawLine((uint64_t)v19, (float *)&v53);
        v21 += 272;
      }
      while (v21 != v22);
    }
    (*((void (**)(void **, char *, int64_t, __n128))*p_p + 5))(p_p, v23, (char *)v56 - v23, v20);
    goto LABEL_30;
  }
LABEL_42:
  float32x4_t v41 = (md::Label *)*((void *)this + 23);
  if (v41 || *((void *)this + 25))
  {
    uint64_t v42 = *((void *)this + 3);
    if (*(unsigned char *)(v42 + 3643))
    {
      uint64_t v43 = *((void *)this + 25);
      if (v43)
      {
        (*(void (**)(void))(*(void *)v43 + 456))(*((void *)this + 25));
        float32x4_t v41 = (md::Label *)*((void *)this + 23);
      }
      if (v41) {
        md::Label::debugDraw(v41, v52, v5);
      }
    }
    else
    {
      [(NSMutableString *)v6 appendFormat:@"LayoutZoom:%.2f\n", *(float *)(v42 + 472)];
      uint64_t v45 = *((void *)this + 25);
      if (!v45) {
        goto LABEL_56;
      }
      (*(void (**)(uint64_t))(*(void *)v45 + 456))(v45);
      (*(void (**)(void **__return_ptr))(**((void **)this + 25) + 448))(&__p);
      if (SHIBYTE(v56) >= 0) {
        uint64_t v46 = &__p;
      }
      else {
        uint64_t v46 = __p;
      }
      float32x2_t v47 = [NSString stringWithUTF8String:v46];
      if (v47) {
        [(NSMutableString *)v6 appendString:v47];
      }

      if (SHIBYTE(v56) < 0)
      {
        operator delete(__p);
        float32x2_t v48 = (md::Label *)*((void *)this + 23);
        if (!v48) {
          goto LABEL_63;
        }
      }
      else
      {
LABEL_56:
        float32x2_t v48 = (md::Label *)*((void *)this + 23);
        if (!v48) {
          goto LABEL_63;
        }
      }
      md::Label::debugDraw(v48, v52, v44);
      float32x2_t v49 = NSString;
      md::Label::debugString((md::Label *)&__p, *((md::LabelManager **)this + 23), *((void *)this + 3));
      if (SHIBYTE(v56) >= 0) {
        float32x2_t v50 = &__p;
      }
      else {
        float32x2_t v50 = __p;
      }
      float v51 = [v49 stringWithUTF8String:v50];
      [(NSMutableString *)v6 appendString:v51];

      if (SHIBYTE(v56) < 0) {
        operator delete(__p);
      }
    }
  }
LABEL_63:
}

void sub_1A24540C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *v3;
  long long v8 = xmmword_1A28FC740;
  uint64_t v9 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *, void))(*(void *)v4 + 456))(v4, v5, v6, &v8, 0);
}

__n128 std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57D8C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57D8C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_1>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
}

uint64_t std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *v3;
  long long v8 = xmmword_1A28FC740;
  uint64_t v9 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *, void))(*(void *)v4 + 456))(v4, v5, v6, &v8, 0);
}

__n128 std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57D878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57D878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0,std::allocator<md::StandardLabeler::debugDraw(NSMutableString *,md::DebugConsole *)::$_0>,void ()(std::shared_ptr<md::LabelFeature> const&)>::~__func()
{
}

void ggl::Sky::SkyPipelineState::~SkyPipelineState(ggl::Sky::SkyPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Sky::SkyPipelineSetup::textureIsEnabled(ggl::Sky::SkyPipelineSetup *this)
{
  return 0;
}

BOOL ggl::Sky::SkyPipelineSetup::constantDataIsEnabled(ggl::Sky::SkyPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::Sky::SkyPipelineSetup::~SkyPipelineSetup(ggl::Sky::SkyPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void *ggl::Sky::SkyPipelineSetup::SkyPipelineSetup(void *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &unk_1EF560298;
  uint64_t v7 = (uint64_t *)a1[8];
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t *v7 = *a4;
  v7[1] = 0;
  uint64_t v10 = (void *)a1[20];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)v10[1];
  void *v10 = v8;
  v10[1] = v9;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return a1;
}

void sub_1A2454898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2454A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2454E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2454F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2455094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)VKMapSnapshot;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A2455288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A245536C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2455400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2455C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void releaseIOSurface(void *a1, const void *a2)
{
  cf = a1;
  if (cf)
  {
    [cf unlockWithOptions:1 seed:0];
    [cf decrementUseCount];
    CFRelease(cf);
  }
}

void sub_1A2455DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2456008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::useNewRenderableCollector()
{
  return 0;
}

void md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A24561BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[34];
  uint64_t v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    uint64_t v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineEnteringRenderables(uint64_t a1@<X0>, md::LayoutContext *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)a2 + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    return;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    uint64_t v8 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v8 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v8 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v9 = *(void **)(*v3 + 8 * v8);
  if (!v9) {
    return;
  }
  uint64_t v10 = (void *)*v9;
  if (!v10) {
    return;
  }
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v11 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v13 = v10[1];
      if (v13 == 0x3070CB6B3C7F21D3)
      {
        if (v10[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_22;
        }
      }
      else if ((v13 & v11) != v8)
      {
        return;
      }
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        return;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v10[1];
    if (v12 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v12 >= *(void *)&v4) {
      v12 %= *(void *)&v4;
    }
    if (v12 != v8) {
      return;
    }
LABEL_11:
    uint64_t v10 = (void *)*v10;
    if (!v10) {
      return;
    }
  }
  if (v10[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v14 = v10[5];
  if (*(void *)(v14 + 8) == 0x3070CB6B3C7F21D3)
  {
    unint64_t v68 = *(uint64_t **)(v14 + 32);
    if (v68)
    {
      unint64_t v15 = *(void *)(a1 + 192);
      if (v15)
      {
        if (v15 >> 61) {
          abort();
        }
        uint64_t v16 = 8 * v15;
        uint64_t v17 = (char *)operator new(8 * v15);
        *a3 = v17;
        a3[1] = v17;
        a3[2] = &v17[v16];
      }
      uint64_t v18 = *(void **)(a1 + 176);
      if (v18 != (void *)(a1 + 184))
      {
        do
        {
          uint64_t v19 = v18[4];
          __n128 v20 = (std::__shared_weak_count *)v18[5];
          uint64_t v69 = v18;
          uint64_t v77 = v19;
          uint64_t v78 = v20;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v75[0] = *(_WORD *)(v19 + 168);
          uint64_t v76 = *(void *)(v19 + 172);
          double v21 = *(double *)(v19 + 600);
          double v22 = *(double *)(v19 + 608);
          int v23 = *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128);
          md::GeometryContext::transformConstantData((double *)&v73, v68, (unsigned __int8 *)v75, v23, v21, v22);
          char v24 = *((unsigned char *)v69 + 48);
          if (*(void *)(a1 + 264))
          {
            uint64_t v25 = *(void **)(a1 + 264);
          }
          else
          {
            uint64_t v26 = (char *)malloc_type_malloc(*(void *)(a1 + 256), 0x160B39uLL);
            uint64_t v27 = v26;
            __n128 v28 = (uint64_t **)(a1 + 232);
            while (1)
            {
              uint64_t v29 = *v28;
              uint64_t v30 = v28;
              if (!*v28) {
                break;
              }
              while (1)
              {
                __n128 v28 = (uint64_t **)v29;
                unint64_t v31 = v29[4];
                if ((unint64_t)v26 < v31) {
                  break;
                }
                if (v31 >= (unint64_t)v26) {
                  goto LABEL_43;
                }
                uint64_t v29 = v28[1];
                if (!v29)
                {
                  uint64_t v30 = v28 + 1;
                  goto LABEL_40;
                }
              }
            }
LABEL_40:
            uint64_t v32 = (uint64_t *)operator new(0x28uLL);
            v32[4] = (uint64_t)v27;
            uint64_t *v32 = 0;
            v32[1] = 0;
            v32[2] = (uint64_t)v28;
            *uint64_t v30 = v32;
            uint64_t v33 = **(void **)(a1 + 224);
            if (v33)
            {
              *(void *)(a1 + 224) = v33;
              uint64_t v32 = *v30;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 232), v32);
            ++*(void *)(a1 + 240);
LABEL_43:
            uint64_t v34 = 408 * *(void *)(a1 + 248) - 408;
            if (v34 < 0)
            {
              uint64_t v25 = *(void **)(a1 + 264);
            }
            else
            {
              uint64_t v35 = &v27[v34];
              uint64_t v36 = *(char **)(a1 + 264);
              do
              {
                *(void *)uint64_t v35 = v36;
                uint64_t v37 = v35 - 408;
                uint64_t v36 = v35;
                uint64_t v35 = v37;
              }
              while (v37 >= v27);
              uint64_t v25 = v37 + 408;
            }
            *(void *)(a1 + 264) = v25;
            uint64_t v19 = v77;
            __n128 v20 = v78;
          }
          unsigned int v71 = v25;
          *(void *)(a1 + 264) = *v25;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v25, v19, (uint64_t)v20, v24, (v23 - 1) < 3u, &v73);
          if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
          *unsigned int v71 = &unk_1EF513528;
          uint64_t v38 = v77;
          uint64_t v39 = v78;
          v71[48] = v77;
          v71[49] = v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *unsigned int v71 = &unk_1EF5136E8;
          v71[50] = 0;
          if (*(void *)(v38 + 808))
          {
            v79[0] = 0;
            v79[1] = 0;
            {
              operator new();
            }
            v79[2] = mdm::Allocator::instance(void)::alloc;
            v79[3] = 0;
            {
              operator new();
            }
            v79[4] = mdm::Allocator::instance(void)::alloc;
            v79[5] = 0;
            int v80 = 1065353216;
            uint64_t v40 = *(void **)(v77 + 792);
            if (v40)
            {
              do
              {
                unint64_t v44 = v40[2];
                uint64_t v81 = v40 + 2;
                std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>((uint64_t)v79, v44, &v81);
                float64x2_t v72 = v40;
                uint64_t v45 = (uint64_t *)v40[4];
                if (v45 != (uint64_t *)v40[5])
                {
                  uint64_t v46 = operator new(0x98uLL);
                  v46[1] = 0;
                  v46[2] = 0;
                  void *v46 = &unk_1EF5818A0;
                  md::TrailJunctionRenderable::TrailJunctionRenderable((uint64_t)(v46 + 3), v45);
                }
                uint64_t v40 = (void *)*v40;
              }
              while (*v72);
            }
            operator new();
          }
          uint64_t v42 = (void *)a3[1];
          unint64_t v41 = a3[2];
          if ((unint64_t)v42 >= v41)
          {
            float32x2_t v47 = (unsigned char *)*a3;
            uint64_t v48 = (uint64_t)v42 - *a3;
            uint64_t v49 = v48 >> 3;
            unint64_t v50 = (v48 >> 3) + 1;
            if (v50 >> 61) {
              abort();
            }
            uint64_t v51 = v41 - (void)v47;
            if (v51 >> 2 > v50) {
              unint64_t v50 = v51 >> 2;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              if (v52 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v53 = operator new(8 * v52);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v54 = &v53[8 * v49];
            *uint64_t v54 = v71;
            uint64_t v43 = v54 + 1;
            if (v42 == (void *)v47)
            {
              float32x2_t v47 = v42;
            }
            else
            {
              unint64_t v55 = (char *)(v42 - 1) - v47;
              if (v55 < 0x58) {
                goto LABEL_109;
              }
              if ((unint64_t)((char *)v42 - &v53[v48]) < 0x20) {
                goto LABEL_109;
              }
              uint64_t v56 = (v55 >> 3) + 1;
              int v57 = &v53[8 * v49 - 16];
              uint64_t v58 = (long long *)(v42 - 2);
              uint64_t v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v60 = *v58;
                *(v57 - 1) = *(v58 - 1);
                *int v57 = v60;
                v57 -= 2;
                v58 -= 2;
                v59 -= 4;
              }
              while (v59);
              v54 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
              v42 -= v56 & 0x3FFFFFFFFFFFFFFCLL;
              if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_109:
                do
                {
                  uint64_t v61 = *--v42;
                  *--uint64_t v54 = v61;
                }
                while (v42 != (void *)v47);
                float32x2_t v47 = (unsigned char *)*a3;
              }
            }
            *a3 = v54;
            a3[1] = v43;
            a3[2] = &v53[8 * v52];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *uint64_t v42 = v71;
            uint64_t v43 = v42 + 1;
          }
          a3[1] = v43;
          uint64_t v62 = v74;
          if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
          uint64_t v63 = v78;
          if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
          uint64_t v64 = v69;
          uint64_t v65 = (void *)v69[1];
          if (v65)
          {
            do
            {
              uint64_t v66 = v65;
              uint64_t v65 = (void *)*v65;
            }
            while (v65);
          }
          else
          {
            do
            {
              uint64_t v66 = (void *)v64[2];
              BOOL v67 = *v66 == (void)v64;
              uint64_t v64 = v66;
            }
            while (!v67);
          }
          uint64_t v18 = v66;
        }
        while (v66 != (void *)(a1 + 184));
      }
    }
  }
}

void sub_1A2456D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, md::BaseMapTileDataRenderable *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a21);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a26);
  uint64_t v34 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void **md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  uint8x8_t v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  uint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    uint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  unint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    unint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  uint64_t *v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (unint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    uint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    __n128 v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      unint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          uint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      unint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  double v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  double v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  int v23 = (void *)(a1 + 200);
  *double v22 = 0;
  v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  uint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  uint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  uint8x8_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  unint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      uint64_t v27 = (float32x2_t *)v25[9];
      *uint64_t v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        float32x2_t v21 = a2;
        uint64_t v22 = result;
        float32x2_t v20 = v2;
        float32x2_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        uint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        __n128 result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          __n128 result = v22;
          uint64_t v3 = v23;
          uint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      uint8x8_t v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          unint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              unint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  unint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  float32x2_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  unint64_t v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    uint64_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    uint64_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            uint64_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            uint64_t v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            uint64_t v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    unint64_t v44 = (char *)a1[34];
    uint64_t v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          unint64_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    uint64_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      void *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    uint64_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      unint64_t v52 = v51;
      uint64_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    *unint64_t v52 = v55;
    unint64_t *v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    int v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    uint64_t v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        uint64_t v59 = v58;
        uint64_t v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        uint64_t v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        unint64_t v26 = v59;
      }
      while (!v60);
    }
    unint64_t v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    uint64_t v61 = (void *)a1[34];
    for (unint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  uint64_t v84 = v63;
  size_t v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    uint64_t v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        uint64_t v66 = v63 - 8;
        while (v66 != v65)
        {
          uint64_t v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          uint64_t v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)uint64_t v65 = *(void *)v63;
            v65 += 8;
            *(void *)uint64_t v63 = v68;
            goto LABEL_131;
          }
        }
        uint64_t v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    uint64_t v84 = v63;
    size_t v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  uint64_t v69 = v84;
  if (v84 != v85)
  {
    uint64_t v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  uint64_t v73 = (void *)a1[37];
  float64x2_t v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      BOOL v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        std::__shared_weak_count *v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    float64x2_t v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  uint64_t v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  uint64_t v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A2458144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A24592B4);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

void *std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A245A664);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

void md::MapTileDataRenderable<md::PolygonTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF5135A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF5135A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::useNewRenderableCollector()
{
  return 0;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A245AB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::_determineExitingRenderables(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[34];
  uint64_t v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    int v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v5 = this;
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    uint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          uint64_t v66 = *(uint64_t **)(v15 + 32);
          if (v66)
          {
            unint64_t v16 = *(void *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61) {
                abort();
              }
              uint64_t v17 = v16;
              uint64_t v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            uint64_t v19 = *(void **)(v6 + 176);
            uint64_t v65 = (void *)(v6 + 184);
            if (v19 != (void *)(v6 + 184))
            {
              uint64_t v63 = (uint64_t **)(v6 + 232);
              uint64_t v64 = v6;
              do
              {
                uint64_t v21 = v19[4];
                uint64_t v20 = (std::__shared_weak_count *)v19[5];
                uint64_t v71 = v21;
                float64x2_t v72 = v20;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v69[0] = *(_WORD *)(v21 + 168);
                uint64_t v70 = *(void *)(v21 + 172);
                double v22 = *(double *)(v21 + 600);
                double v23 = *(double *)(v21 + 608);
                int v24 = *(unsigned __int8 *)(md::LayoutContext::frameState(v5) + 128);
                md::GeometryContext::transformConstantData((double *)&v67, v66, (unsigned __int8 *)v69, v24, v22, v23);
                char v25 = *((unsigned char *)v19 + 48);
                uint64_t v26 = *(char **)(v6 + 264);
                if (!v26)
                {
                  int8x8_t v27 = (char *)malloc_type_malloc(*(void *)(v6 + 256), 0x160B39uLL);
                  unint64_t v28 = v27;
                  unint64_t v29 = v63;
                  while (1)
                  {
                    uint8x8_t v30 = *v29;
                    unint64_t v31 = v29;
                    if (!*v29) {
                      break;
                    }
                    while (1)
                    {
                      unint64_t v29 = (uint64_t **)v30;
                      unint64_t v32 = v30[4];
                      if ((unint64_t)v27 < v32) {
                        break;
                      }
                      if (v32 >= (unint64_t)v27) {
                        goto LABEL_42;
                      }
                      uint8x8_t v30 = v29[1];
                      if (!v30)
                      {
                        unint64_t v31 = v29 + 1;
                        goto LABEL_39;
                      }
                    }
                  }
LABEL_39:
                  uint64_t v33 = (uint64_t *)operator new(0x28uLL);
                  v33[4] = (uint64_t)v28;
                  uint64_t *v33 = 0;
                  v33[1] = 0;
                  v33[2] = (uint64_t)v29;
                  *unint64_t v31 = v33;
                  uint64_t v34 = **(void **)(v6 + 224);
                  if (v34)
                  {
                    *(void *)(v6 + 224) = v34;
                    uint64_t v33 = *v31;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v33);
                  ++*(void *)(v6 + 240);
LABEL_42:
                  uint64_t v26 = *(char **)(v6 + 264);
                  uint64_t v35 = 400 * *(void *)(v6 + 248) - 400;
                  if ((v35 & 0x8000000000000000) == 0)
                  {
                    uint64_t v36 = &v28[v35];
                    do
                    {
                      *(void *)uint64_t v36 = v26;
                      size_t v37 = v36 - 400;
                      uint64_t v26 = v36;
                      uint64_t v36 = v37;
                    }
                    while (v37 >= v28);
                    uint64_t v26 = v37 + 400;
                  }
                  *(void *)(v6 + 264) = v26;
                  uint64_t v21 = v71;
                  uint64_t v20 = v72;
                }
                *(void *)(v6 + 264) = *(void *)v26;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v26, v21, (uint64_t)v20, v25, (v24 - 1) < 3u, &v67);
                if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
                *(void *)uint64_t v26 = &unk_1EF5135A8;
                uint64_t v38 = v72;
                *((void *)v26 + 48) = v71;
                *((void *)v26 + 49) = v38;
                if (v38) {
                  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v40 = a3[1];
                unint64_t v39 = (unint64_t)a3[2];
                if ((unint64_t)v40 >= v39)
                {
                  uint64_t v42 = v5;
                  uint64_t v43 = *a3;
                  uint64_t v44 = (char *)v40 - (char *)*a3;
                  uint64_t v45 = v44 >> 3;
                  unint64_t v46 = (v44 >> 3) + 1;
                  if (v46 >> 61) {
                    abort();
                  }
                  uint64_t v47 = v39 - (void)v43;
                  if (v47 >> 2 > v46) {
                    unint64_t v46 = v47 >> 2;
                  }
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v48 = v46;
                  }
                  if (v48)
                  {
                    if (v48 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint8x8_t v49 = operator new(8 * v48);
                  }
                  else
                  {
                    uint8x8_t v49 = 0;
                  }
                  unint64_t v50 = (char **)&v49[8 * v45];
                  *unint64_t v50 = v26;
                  size_t v41 = v50 + 1;
                  if (v40 == v43)
                  {
                    uint64_t v43 = v40;
                  }
                  else
                  {
                    unint64_t v51 = (char *)(v40 - 1) - (char *)v43;
                    if (v51 < 0x58) {
                      goto LABEL_97;
                    }
                    if ((unint64_t)((char *)v40 - &v49[v44]) < 0x20) {
                      goto LABEL_97;
                    }
                    uint64_t v52 = (v51 >> 3) + 1;
                    unint64_t v53 = &v49[8 * v45 - 16];
                    unint64_t v54 = (long long *)(v40 - 2);
                    uint64_t v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v56 = *v54;
                      *(v53 - 1) = *(v54 - 1);
                      *unint64_t v53 = v56;
                      v53 -= 2;
                      v54 -= 2;
                      v55 -= 4;
                    }
                    while (v55);
                    v50 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    v40 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_97:
                      do
                      {
                        int v57 = *--v40;
                        *--unint64_t v50 = v57;
                      }
                      while (v40 != v43);
                      uint64_t v43 = *a3;
                    }
                  }
                  *a3 = v50;
                  a3[1] = v41;
                  a3[2] = (char **)&v49[8 * v48];
                  if (v43) {
                    operator delete(v43);
                  }
                  uint64_t v5 = v42;
                  uint64_t v6 = v64;
                }
                else
                {
                  *uint64_t v40 = v26;
                  size_t v41 = v40 + 1;
                }
                a3[1] = v41;
                uint64_t v58 = v68;
                if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                  uint64_t v59 = v72;
                  if (!v72)
                  {
LABEL_82:
                    BOOL v60 = (void *)v19[1];
                    if (!v60) {
                      goto LABEL_88;
                    }
                    goto LABEL_83;
                  }
                }
                else
                {
                  uint64_t v59 = v72;
                  if (!v72) {
                    goto LABEL_82;
                  }
                }
                if (atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                  goto LABEL_82;
                }
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
                BOOL v60 = (void *)v19[1];
                if (!v60)
                {
                  do
                  {
LABEL_88:
                    uint64_t v61 = (void *)v19[2];
                    BOOL v62 = *v61 == (void)v19;
                    uint64_t v19 = v61;
                  }
                  while (!v62);
                  goto LABEL_29;
                }
                do
                {
LABEL_83:
                  uint64_t v61 = v60;
                  BOOL v60 = (void *)*v60;
                }
                while (v60);
LABEL_29:
                uint64_t v19 = v61;
              }
              while (v61 != v65);
            }
          }
        }
      }
    }
  }
}

void sub_1A245B1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  uint8x8_t v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unsigned __int8 v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  uint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    uint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  uint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    uint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  uint64_t *v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (unint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    uint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    uint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      uint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          uint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      uint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  double v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  double v23 = (void *)(a1 + 200);
  *double v22 = 0;
  v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  uint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  uint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  unsigned __int8 v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      uint64_t v27 = (float32x2_t *)v25[9];
      *uint64_t v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        float32x2_t v21 = a2;
        uint64_t v22 = result;
        float32x2_t v20 = v2;
        float32x2_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        uint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          uint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      unsigned __int8 v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  uint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  float32x2_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  unint64_t v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    unint64_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    uint64_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            uint64_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            uint64_t v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            uint64_t v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    uint64_t v44 = (char *)a1[34];
    uint64_t v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          uint64_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    unint64_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      void *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    unint64_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      uint64_t v52 = v51;
      unint64_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    *uint64_t v52 = v55;
    unint64_t *v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    int v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    uint64_t v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        uint64_t v59 = v58;
        uint64_t v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        uint64_t v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        unint64_t v26 = v59;
      }
      while (!v60);
    }
    unint64_t v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    uint64_t v61 = (void *)a1[34];
    for (unint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  uint64_t v84 = v63;
  size_t v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    uint64_t v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        uint64_t v66 = v63 - 8;
        while (v66 != v65)
        {
          uint64_t v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          uint64_t v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)uint64_t v65 = *(void *)v63;
            v65 += 8;
            *(void *)uint64_t v63 = v68;
            goto LABEL_131;
          }
        }
        uint64_t v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    uint64_t v84 = v63;
    size_t v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  uint64_t v69 = v84;
  if (v84 != v85)
  {
    uint64_t v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  uint64_t v73 = (void *)a1[37];
  float64x2_t v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      BOOL v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        std::__shared_weak_count *v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    float64x2_t v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  uint64_t v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  uint64_t v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A245C41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A245D58CLL);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::useNewRenderableCollector()
{
  return 0;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A245D968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::_determineExitingRenderables(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[34];
  uint64_t v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    int v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v5 = this;
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    uint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          uint64_t v66 = *(uint64_t **)(v15 + 32);
          if (v66)
          {
            unint64_t v16 = *(void *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61) {
                abort();
              }
              uint64_t v17 = v16;
              uint64_t v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            uint64_t v19 = *(void **)(v6 + 176);
            uint64_t v65 = (void *)(v6 + 184);
            if (v19 != (void *)(v6 + 184))
            {
              uint64_t v63 = (uint64_t **)(v6 + 232);
              uint64_t v64 = v6;
              do
              {
                uint64_t v21 = v19[4];
                uint64_t v20 = (std::__shared_weak_count *)v19[5];
                uint64_t v71 = v21;
                float64x2_t v72 = v20;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v69[0] = *(_WORD *)(v21 + 168);
                uint64_t v70 = *(void *)(v21 + 172);
                double v22 = *(double *)(v21 + 600);
                double v23 = *(double *)(v21 + 608);
                int v24 = *(unsigned __int8 *)(md::LayoutContext::frameState(v5) + 128);
                md::GeometryContext::transformConstantData((double *)&v67, v66, (unsigned __int8 *)v69, v24, v22, v23);
                char v25 = *((unsigned char *)v19 + 48);
                uint64_t v26 = *(char **)(v6 + 264);
                if (!v26)
                {
                  int8x8_t v27 = (char *)malloc_type_malloc(*(void *)(v6 + 256), 0x160B39uLL);
                  unint64_t v28 = v27;
                  unint64_t v29 = v63;
                  while (1)
                  {
                    uint8x8_t v30 = *v29;
                    unint64_t v31 = v29;
                    if (!*v29) {
                      break;
                    }
                    while (1)
                    {
                      unint64_t v29 = (uint64_t **)v30;
                      unint64_t v32 = v30[4];
                      if ((unint64_t)v27 < v32) {
                        break;
                      }
                      if (v32 >= (unint64_t)v27) {
                        goto LABEL_42;
                      }
                      uint8x8_t v30 = v29[1];
                      if (!v30)
                      {
                        unint64_t v31 = v29 + 1;
                        goto LABEL_39;
                      }
                    }
                  }
LABEL_39:
                  uint64_t v33 = (uint64_t *)operator new(0x28uLL);
                  v33[4] = (uint64_t)v28;
                  uint64_t *v33 = 0;
                  v33[1] = 0;
                  v33[2] = (uint64_t)v29;
                  *unint64_t v31 = v33;
                  uint64_t v34 = **(void **)(v6 + 224);
                  if (v34)
                  {
                    *(void *)(v6 + 224) = v34;
                    uint64_t v33 = *v31;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v33);
                  ++*(void *)(v6 + 240);
LABEL_42:
                  uint64_t v26 = *(char **)(v6 + 264);
                  uint64_t v35 = 400 * *(void *)(v6 + 248) - 400;
                  if ((v35 & 0x8000000000000000) == 0)
                  {
                    uint64_t v36 = &v28[v35];
                    do
                    {
                      *(void *)uint64_t v36 = v26;
                      size_t v37 = v36 - 400;
                      uint64_t v26 = v36;
                      uint64_t v36 = v37;
                    }
                    while (v37 >= v28);
                    uint64_t v26 = v37 + 400;
                  }
                  *(void *)(v6 + 264) = v26;
                  uint64_t v21 = v71;
                  uint64_t v20 = v72;
                }
                *(void *)(v6 + 264) = *(void *)v26;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v26, v21, (uint64_t)v20, v25, (v24 - 1) < 3u, &v67);
                if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
                *(void *)uint64_t v26 = &unk_1EF513568;
                uint64_t v38 = v72;
                *((void *)v26 + 48) = v71;
                *((void *)v26 + 49) = v38;
                if (v38) {
                  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v40 = a3[1];
                unint64_t v39 = (unint64_t)a3[2];
                if ((unint64_t)v40 >= v39)
                {
                  uint64_t v42 = v5;
                  uint64_t v43 = *a3;
                  uint64_t v44 = (char *)v40 - (char *)*a3;
                  uint64_t v45 = v44 >> 3;
                  unint64_t v46 = (v44 >> 3) + 1;
                  if (v46 >> 61) {
                    abort();
                  }
                  uint64_t v47 = v39 - (void)v43;
                  if (v47 >> 2 > v46) {
                    unint64_t v46 = v47 >> 2;
                  }
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v48 = v46;
                  }
                  if (v48)
                  {
                    if (v48 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint8x8_t v49 = operator new(8 * v48);
                  }
                  else
                  {
                    uint8x8_t v49 = 0;
                  }
                  unint64_t v50 = (char **)&v49[8 * v45];
                  *unint64_t v50 = v26;
                  size_t v41 = v50 + 1;
                  if (v40 == v43)
                  {
                    uint64_t v43 = v40;
                  }
                  else
                  {
                    unint64_t v51 = (char *)(v40 - 1) - (char *)v43;
                    if (v51 < 0x58) {
                      goto LABEL_97;
                    }
                    if ((unint64_t)((char *)v40 - &v49[v44]) < 0x20) {
                      goto LABEL_97;
                    }
                    uint64_t v52 = (v51 >> 3) + 1;
                    unint64_t v53 = &v49[8 * v45 - 16];
                    unint64_t v54 = (long long *)(v40 - 2);
                    uint64_t v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v56 = *v54;
                      *(v53 - 1) = *(v54 - 1);
                      *unint64_t v53 = v56;
                      v53 -= 2;
                      v54 -= 2;
                      v55 -= 4;
                    }
                    while (v55);
                    v50 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    v40 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_97:
                      do
                      {
                        int v57 = *--v40;
                        *--unint64_t v50 = v57;
                      }
                      while (v40 != v43);
                      uint64_t v43 = *a3;
                    }
                  }
                  *a3 = v50;
                  a3[1] = v41;
                  a3[2] = (char **)&v49[8 * v48];
                  if (v43) {
                    operator delete(v43);
                  }
                  uint64_t v5 = v42;
                  uint64_t v6 = v64;
                }
                else
                {
                  *uint64_t v40 = v26;
                  size_t v41 = v40 + 1;
                }
                a3[1] = v41;
                uint64_t v58 = v68;
                if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                  uint64_t v59 = v72;
                  if (!v72)
                  {
LABEL_82:
                    BOOL v60 = (void *)v19[1];
                    if (!v60) {
                      goto LABEL_88;
                    }
                    goto LABEL_83;
                  }
                }
                else
                {
                  uint64_t v59 = v72;
                  if (!v72) {
                    goto LABEL_82;
                  }
                }
                if (atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                  goto LABEL_82;
                }
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
                BOOL v60 = (void *)v19[1];
                if (!v60)
                {
                  do
                  {
LABEL_88:
                    uint64_t v61 = (void *)v19[2];
                    BOOL v62 = *v61 == (void)v19;
                    uint64_t v19 = v61;
                  }
                  while (!v62);
                  goto LABEL_29;
                }
                do
                {
LABEL_83:
                  uint64_t v61 = v60;
                  BOOL v60 = (void *)*v60;
                }
                while (v60);
LABEL_29:
                uint64_t v19 = v61;
              }
              while (v61 != v65);
            }
          }
        }
      }
    }
  }
}

void sub_1A245DFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  uint8x8_t v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void md::MapTileDataRenderable<md::RasterTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513568;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513568;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unsigned __int8 v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  uint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    uint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  uint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    uint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  uint64_t *v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (unint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    uint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    uint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      uint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          uint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      uint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  double v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  double v23 = (void *)(a1 + 200);
  *double v22 = 0;
  v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  uint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  uint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  unsigned __int8 v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      uint64_t v27 = (float32x2_t *)v25[9];
      *uint64_t v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        float32x2_t v21 = a2;
        uint64_t v22 = result;
        float32x2_t v20 = v2;
        float32x2_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        uint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          uint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      unsigned __int8 v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  uint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  float32x2_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  unint64_t v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    unint64_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    uint64_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            uint64_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            uint64_t v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            uint64_t v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    uint64_t v44 = (char *)a1[34];
    uint64_t v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          uint64_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    unint64_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      void *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    unint64_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      uint64_t v52 = v51;
      unint64_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    *uint64_t v52 = v55;
    unint64_t *v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    int v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    uint64_t v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        uint64_t v59 = v58;
        uint64_t v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        uint64_t v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        unint64_t v26 = v59;
      }
      while (!v60);
    }
    unint64_t v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    uint64_t v61 = (void *)a1[34];
    for (unint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  uint64_t v84 = v63;
  size_t v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    uint64_t v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        uint64_t v66 = v63 - 8;
        while (v66 != v65)
        {
          uint64_t v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          uint64_t v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)uint64_t v65 = *(void *)v63;
            v65 += 8;
            *(void *)uint64_t v63 = v68;
            goto LABEL_131;
          }
        }
        uint64_t v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    uint64_t v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    uint64_t v84 = v63;
    size_t v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  uint64_t v69 = v84;
  if (v84 != v85)
  {
    uint64_t v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  uint64_t v73 = (void *)a1[37];
  float64x2_t v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      BOOL v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        std::__shared_weak_count *v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    float64x2_t v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  uint64_t v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  uint64_t v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A245F370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::RasterTileData> *,md::MapTileDataRenderable<md::RasterTileData> *)> &,md::MapTileDataRenderable<md::RasterTileData> **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A24604E0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A24608B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::MapTileDataRenderable<md::VenueTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513548;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513548;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  unsigned __int8 v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      int8x8_t v27 = (float32x2_t *)v25[9];
      *int8x8_t v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::renderableDidChange()
{
  return 0;
}

void *std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A2461D28);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::useNewRenderableCollector()
{
  return 0;
}

void md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A24620FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::_determineExitingRenderables(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[34];
  uint64_t v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    int8x8_t v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, uint64_t **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v5 = this;
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    uint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          unint64_t v111 = *(uint64_t **)(v15 + 32);
          if (v111)
          {
            unint64_t v16 = *(void *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61) {
                abort();
              }
              uint64_t v17 = v16;
              uint64_t v18 = (uint64_t *)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            uint64_t v19 = *(void **)(v6 + 176);
            int v110 = (void *)(v6 + 184);
            if (v19 != (void *)(v6 + 184))
            {
              int v106 = (uint64_t **)(v6 + 232);
              __asm { FMOV            V0.4S, #1.0 }
              long long v109 = _Q0;
              uint64_t v107 = v5;
              uint64_t v108 = v6;
              do
              {
                uint64_t v26 = v19[4];
                uint64_t v25 = (std::__shared_weak_count *)v19[5];
                uint64_t v116 = (float *)v26;
                uint64_t v117 = v25;
                if (v25) {
                  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v114[0] = *(_WORD *)(v26 + 168);
                uint64_t v115 = *(void *)(v26 + 172);
                double v27 = *(double *)(v26 + 600);
                double v28 = *(double *)(v26 + 608);
                int v29 = *(unsigned __int8 *)(md::LayoutContext::frameState(v5) + 128);
                md::GeometryContext::transformConstantData((double *)&v112, v111, (unsigned __int8 *)v114, v29, v27, v28);
                char v30 = *((unsigned char *)v19 + 48);
                uint64_t v31 = *(void *)(v6 + 264);
                if (!v31)
                {
                  unint64_t v32 = (uint64_t *)malloc_type_malloc(*(void *)(v6 + 256), 0x160B39uLL);
                  uint64_t v33 = v32;
                  uint64_t v34 = v106;
                  while (1)
                  {
                    unint64_t v35 = *v34;
                    uint64_t v36 = v34;
                    if (!*v34) {
                      break;
                    }
                    while (1)
                    {
                      uint64_t v34 = (uint64_t **)v35;
                      unint64_t v37 = v35[4];
                      if ((unint64_t)v32 < v37) {
                        break;
                      }
                      if (v37 >= (unint64_t)v32) {
                        goto LABEL_42;
                      }
                      unint64_t v35 = v34[1];
                      if (!v35)
                      {
                        uint64_t v36 = v34 + 1;
                        goto LABEL_39;
                      }
                    }
                  }
LABEL_39:
                  uint64_t v38 = (uint64_t *)operator new(0x28uLL);
                  v38[4] = (uint64_t)v33;
                  *uint64_t v38 = 0;
                  v38[1] = 0;
                  v38[2] = (uint64_t)v34;
                  *uint64_t v36 = v38;
                  uint64_t v39 = **(void **)(v6 + 224);
                  if (v39)
                  {
                    *(void *)(v6 + 224) = v39;
                    uint64_t v38 = *v36;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v38);
                  ++*(void *)(v6 + 240);
LABEL_42:
                  uint64_t v31 = *(void *)(v6 + 264);
                  uint64_t v40 = 768 * *(void *)(v6 + 248) - 768;
                  if ((v40 & 0x8000000000000000) == 0)
                  {
                    size_t v41 = (uint64_t *)((char *)v33 + v40);
                    do
                    {
                      *size_t v41 = v31;
                      uint64_t v42 = v41 - 96;
                      uint64_t v31 = (uint64_t)v41;
                      size_t v41 = v42;
                    }
                    while (v42 >= v33);
                    uint64_t v31 = (uint64_t)(v42 + 96);
                  }
                  *(void *)(v6 + 264) = v31;
                  uint64_t v26 = (uint64_t)v116;
                  uint64_t v25 = v117;
                }
                *(void *)(v6 + 264) = *(void *)v31;
                if (v25) {
                  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable(v31, v26, (uint64_t)v25, v30, (v29 - 1) < 3u, &v112);
                if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                  std::__shared_weak_count::__release_weak(v25);
                }
                *(void *)uint64_t v31 = &unk_1EF513608;
                uint64_t v44 = v116;
                uint64_t v43 = v117;
                *(void *)(v31 + 384) = v116;
                *(void *)(v31 + 392) = v43;
                if (v43) {
                  atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                *(void *)uint64_t v31 = &unk_1EF513B20;
                *(_OWORD *)(v31 + 400) = v109;
                *(void *)(v31 + 416) = &unk_1EF5593D8;
                *(void *)(v31 + 424) = 0;
                *(void *)(v31 + 440) = &unk_1EF5593D8;
                *(void *)(v31 + 448) = 0;
                int64_t v45 = operator new(0xE8uLL);
                v45[1] = 0;
                v45[2] = 0;
                *int64_t v45 = &unk_1EF586DB8;
                uint64_t v46 = ggl::BufferData::BufferData((uint64_t)(v45 + 3), qword_1E9552208, 2, 1, 6, 1);
                v45[28] = ggl::Tile::View::reflection(void)::reflection;
                v45[3] = &unk_1EF55E258;
                *(void *)(v31 + 464) = v46;
                *(void *)(v31 + 472) = v45;
                int8x8_t v47 = operator new(0xE8uLL);
                v47[1] = 0;
                v47[2] = 0;
                void *v47 = &unk_1EF586DB8;
                uint64_t v48 = ggl::BufferData::BufferData((uint64_t)(v47 + 3), qword_1E9552208, 2, 1, 6, 1);
                v47[28] = ggl::Tile::View::reflection(void)::reflection;
                v47[3] = &unk_1EF55E258;
                *(void *)(v31 + 480) = v48;
                *(void *)(v31 + 488) = v47;
                *(void *)(v31 + 496) = 0;
                *(void *)(v31 + 504) = 0;
                gm::inverse<double>((double *)v137, (double *)(v31 + 88));
                long long v49 = *(_OWORD *)&v137[16];
                *(_OWORD *)(v31 + 512) = *(_OWORD *)v137;
                *(_OWORD *)(v31 + 528) = v49;
                long long v50 = *(_OWORD *)&v137[48];
                *(_OWORD *)(v31 + 544) = *(_OWORD *)&v137[32];
                *(_OWORD *)(v31 + 560) = v50;
                long long v51 = v138;
                *(_OWORD *)(v31 + 576) = *(_OWORD *)&v137[64];
                *(_OWORD *)(v31 + 592) = v51;
                long long v52 = v140;
                *(_OWORD *)(v31 + 608) = v139;
                *(_OWORD *)(v31 + 624) = v52;
                int v53 = 1 << *(unsigned char *)(v31 + 25);
                double v54 = 1.0 / (double)v53;
                if ((v29 - 1) > 2u)
                {
                  double v75 = (double)*(int *)(v31 + 32);
                  double v76 = (v44[230] + v75) * v54;
                  double v77 = (double)(v53 + ~*(_DWORD *)(v31 + 28));
                  double v78 = (v77 + v44[231]) * v54;
                  double v79 = v44[232] + v75;
                  double v80 = v44[233] + v77;
                  *((void *)&v119 + 1) = 0;
                  memset(&v118[8], 0, 72);
                  *(double *)uint64_t v118 = -(v76 - v79 * v54);
                  *(double *)&v118[40] = -(v78 - v80 * v54);
                  *(double *)&long long v119 = *(double *)v118;
                  *(double *)&long long v120 = v76;
                  *((double *)&v120 + 1) = v78;
                  long long v72 = 0uLL;
                  long long v74 = xmmword_1A28FCCC0;
                  long long v73 = 0uLL;
                  long long v71 = 0uLL;
                }
                else
                {
                  uint64_t v55 = *(int *)(v31 + 32);
                  int v56 = v53 + ~*(_DWORD *)(v31 + 28);
                  double v57 = ((double)v56 + v44[231]) * v54;
                  double v58 = (v44[232] + (double)v55) * v54;
                  double v59 = v44[233] + (double)v56;
                  *(double *)float v137 = (v44[230] + (double)v55) * v54;
                  *(double *)&v137[8] = v57;
                  *(double *)&v137[16] = v58;
                  *(double *)&v137[24] = v59 * v54;
                  gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v122, (double *)v137, 0.0, 0.0);
                  *((void *)&v138 + 1) = 0;
                  memset(&v137[8], 0, 72);
                  *((void *)&v140 + 1) = 0x3FF0000000000000;
                  long long v139 = v128;
                  *(double *)&long long v140 = v129;
                  *(double *)float v137 = v130 - *(double *)&v128;
                  *(double *)&v137[40] = v131 - *((double *)&v128 + 1);
                  *(double *)&long long v138 = v132 - v129;
                  double v60 = v125;
                  double v61 = v126;
                  double v62 = v60 + v60;
                  double v63 = (v60 + v60) * v60;
                  double v64 = (v61 + v61) * v61;
                  double v65 = v124;
                  double v66 = v65 + v65;
                  double v67 = (v65 + v65) * v125;
                  double v68 = (v61 + v61) * v127;
                  double v69 = v126 * (v65 + v65);
                  double v70 = 1.0 - (v65 + v65) * v65;
                  v133[0] = 1.0 - (v63 + v64);
                  v133[1] = v68 + v67;
                  v133[4] = v67 - v68;
                  v133[5] = v70 - v64;
                  v133[8] = v127 * v62 + v69;
                  v133[9] = v62 * v126 - v127 * v66;
                  v133[2] = v69 - v127 * v62;
                  v133[6] = v127 * v66 + v62 * v126;
                  v133[10] = v70 - v63;
                  v133[3] = 0.0;
                  v133[7] = 0.0;
                  v133[11] = 0.0;
                  long long v134 = v122;
                  uint64_t v135 = v123;
                  uint64_t v136 = 0x3FF0000000000000;
                  gm::operator*<double,4,4,4>((double *)v118, v133, (double *)v137);
                  long long v71 = *(_OWORD *)&v118[16];
                  long long v73 = *(_OWORD *)&v118[48];
                  long long v72 = *(_OWORD *)&v118[64];
                  long long v74 = v121;
                }
                uint64_t v6 = v108;
                long long v81 = *(_OWORD *)&v118[32];
                *(_OWORD *)(v31 + 640) = *(_OWORD *)v118;
                *(_OWORD *)(v31 + 656) = v71;
                *(_OWORD *)(v31 + 672) = v81;
                *(_OWORD *)(v31 + 688) = v73;
                long long v82 = v119;
                long long v83 = v120;
                *(_OWORD *)(v31 + 704) = v72;
                *(_OWORD *)(v31 + 720) = v82;
                *(_OWORD *)(v31 + 736) = v83;
                *(_OWORD *)(v31 + 752) = v74;
                size_t v85 = a3[1];
                unint64_t v84 = (unint64_t)a3[2];
                if ((unint64_t)v85 >= v84)
                {
                  unint64_t v87 = *a3;
                  uint64_t v88 = (char *)v85 - (char *)*a3;
                  uint64_t v89 = v88 >> 3;
                  unint64_t v90 = (v88 >> 3) + 1;
                  if (v90 >> 61) {
                    abort();
                  }
                  uint64_t v91 = v84 - (void)v87;
                  if (v91 >> 2 > v90) {
                    unint64_t v90 = v91 >> 2;
                  }
                  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v92 = v90;
                  }
                  if (v92)
                  {
                    if (v92 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint64_t v93 = operator new(8 * v92);
                  }
                  else
                  {
                    uint64_t v93 = 0;
                  }
                  uint64_t v94 = (uint64_t *)&v93[8 * v89];
                  *uint64_t v94 = v31;
                  unint64_t v86 = v94 + 1;
                  if (v85 == v87)
                  {
                    unint64_t v87 = v85;
                  }
                  else
                  {
                    unint64_t v95 = (char *)(v85 - 1) - (char *)v87;
                    if (v95 < 0x58) {
                      goto LABEL_98;
                    }
                    if ((unint64_t)((char *)v85 - &v93[v88]) < 0x20) {
                      goto LABEL_98;
                    }
                    uint64_t v96 = (v95 >> 3) + 1;
                    unint64_t v97 = &v93[8 * v89 - 16];
                    int v98 = v85 - 2;
                    uint64_t v99 = v96 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v100 = *(_OWORD *)v98;
                      *(v97 - 1) = *((_OWORD *)v98 - 1);
                      *unint64_t v97 = v100;
                      v97 -= 2;
                      v98 -= 4;
                      v99 -= 4;
                    }
                    while (v99);
                    v94 -= v96 & 0x3FFFFFFFFFFFFFFCLL;
                    v85 -= v96 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_98:
                      do
                      {
                        uint64_t v101 = *--v85;
                        *--uint64_t v94 = v101;
                      }
                      while (v85 != v87);
                      unint64_t v87 = *a3;
                    }
                  }
                  *a3 = v94;
                  a3[1] = v86;
                  a3[2] = (uint64_t *)&v93[8 * v92];
                  if (v87) {
                    operator delete(v87);
                  }
                }
                else
                {
                  uint64_t *v85 = v31;
                  unint64_t v86 = v85 + 1;
                }
                a3[1] = v86;
                unint64_t v102 = v113;
                if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                  std::__shared_weak_count::__release_weak(v102);
                }
                uint64_t v103 = v117;
                if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                  uint64_t v104 = (void *)v19[1];
                  if (!v104)
                  {
                    do
                    {
LABEL_89:
                      uint64_t v105 = (void *)v19[2];
                      _ZF = *v105 == (void)v19;
                      uint64_t v19 = v105;
                    }
                    while (!_ZF);
                    goto LABEL_29;
                  }
                }
                else
                {
                  uint64_t v104 = (void *)v19[1];
                  if (!v104) {
                    goto LABEL_89;
                  }
                }
                do
                {
                  uint64_t v105 = v104;
                  uint64_t v104 = (void *)*v104;
                }
                while (v104);
LABEL_29:
                uint64_t v19 = v105;
                uint64_t v5 = v107;
              }
              while (v105 != v110);
            }
          }
        }
      }
    }
  }
}

void sub_1A2462B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a24);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a29);
  uint64_t v31 = *(void **)v29;
  if (*(void *)v29)
  {
    *(void *)(v29 + 8) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void sub_1A2462CD0()
{
}

void sub_1A2462CD8()
{
}

void **md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unsigned __int8 v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  uint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    uint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  uint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    uint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  uint64_t *v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  unint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (unint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    uint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    uint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      uint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          uint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      uint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  uint64_t v23 = (void *)(a1 + 200);
  *uint64_t v22 = 0;
  v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  uint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  uint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  unsigned __int8 v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    unint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  unint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      uint64_t v27 = (float32x2_t *)v25[9];
      *uint64_t v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        float32x2_t v21 = a2;
        uint64_t v22 = result;
        float32x2_t v20 = v2;
        float32x2_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        uint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          uint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      unsigned __int8 v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_129;
  }
  uint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_129;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_129;
  }
  float32x2_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_129;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_129;
      }
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_129;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_129;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_129;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL || !*(void *)(v24 + 32)) {
    goto LABEL_129;
  }
  uint64_t v72 = *(void *)(v24 + 32);
  (*(void (**)(unint64_t *))(*a1 + 160))(a1);
  uint64_t v25 = (unint64_t *)a1[22];
  if (v25 == a1 + 23) {
    goto LABEL_102;
  }
  while (2)
  {
    int8x8_t v26 = (int8x8_t)a1[12];
    if (!*(void *)&v26) {
      goto LABEL_96;
    }
    unint64_t v27 = v25[4];
    unint64_t v28 = *(void *)(v27 + 120);
    uint8x8_t v29 = (uint8x8_t)vcnt_s8(v26);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      unint64_t v30 = *(void *)(v27 + 120);
      if (v28 >= *(void *)&v26) {
        unint64_t v30 = v28 % *(void *)&v26;
      }
    }
    else
    {
      unint64_t v30 = (*(void *)&v26 - 1) & v28;
    }
    uint64_t v31 = *(uint64_t ****)(a1[11] + 8 * v30);
    if (!v31) {
      goto LABEL_96;
    }
    unint64_t v32 = *v31;
    if (!*v31) {
      goto LABEL_96;
    }
    if (v29.u32[0] < 2uLL)
    {
      uint64_t v33 = *(void *)&v26 - 1;
      while (1)
      {
        uint64_t v38 = v32[1];
        if (v38 == (uint64_t *)v28)
        {
          if (*((unsigned __int8 *)v32 + 16) == *(unsigned __int8 *)(v27 + 16)
            && *((unsigned __int16 *)v32 + 12) == *(unsigned __int16 *)(v27 + 24)
            && v32[12] == *(uint64_t **)(v27 + 96))
          {
            uint64_t v39 = v32[4];
            size_t v40 = (char *)v32[5] - (char *)v39;
            size_t v41 = *(const void **)(v27 + 32);
            if (v40 == *(void *)(v27 + 40) - (void)v41 && !memcmp(v39, v41, v40)) {
              goto LABEL_80;
            }
          }
        }
        else if (((unint64_t)v38 & v33) != v30)
        {
          goto LABEL_96;
        }
        unint64_t v32 = (uint64_t **)*v32;
        if (!v32) {
          goto LABEL_96;
        }
      }
    }
    while (2)
    {
      unint64_t v34 = (unint64_t)v32[1];
      if (v34 != v28)
      {
        if (v34 >= *(void *)&v26) {
          v34 %= *(void *)&v26;
        }
        if (v34 != v30) {
          goto LABEL_96;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v32 + 16) != *(unsigned __int8 *)(v27 + 16)
        || *((unsigned __int16 *)v32 + 12) != *(unsigned __int16 *)(v27 + 24)
        || v32[12] != *(uint64_t **)(v27 + 96)
        || (uint64_t v35 = v32[4],
            size_t v36 = (char *)v32[5] - (char *)v35,
            uint64_t v37 = *(const void **)(v27 + 32),
            v36 != *(void *)(v27 + 40) - (void)v37)
        || memcmp(v35, v37, v36))
      {
LABEL_62:
        unint64_t v32 = (uint64_t **)*v32;
        if (!v32) {
          goto LABEL_96;
        }
        continue;
      }
      break;
    }
LABEL_80:
    uint64_t v43 = (char *)a1[34];
    uint64_t v42 = (char *)a1[35];
    if (v43 != v42)
    {
      while (*(uint64_t **)v43 != v32[16])
      {
        v43 += 8;
        if (v43 == v42)
        {
          uint64_t v43 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v44 = v42 - (v43 + 8);
    if (v42 != v43 + 8) {
      memmove(v43, v43 + 8, v42 - (v43 + 8));
    }
    a1[35] = (unint64_t)&v43[v44];
    int64_t v45 = (void (***)(uint64_t))v32[16];
    if (v45 && a1[30])
    {
      (**v45)((uint64_t)v32[16]);
      *int64_t v45 = (void (**)(uint64_t))a1[33];
      a1[33] = (unint64_t)v45;
    }
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, a1 + 11, v32);
    uint64_t v46 = __p[0];
    if (__p[0])
    {
      if (v78)
      {
        if (*((unsigned char *)__p[0] + 112)) {
          *((unsigned char *)__p[0] + 112) = 0;
        }
        int8x8_t v47 = (void *)v46[4];
        if (v47 != (void *)v46[6]) {
          free(v47);
        }
      }
      operator delete(v46);
    }
LABEL_96:
    uint64_t v48 = (unint64_t *)v25[1];
    if (v48)
    {
      do
      {
        long long v49 = v48;
        uint64_t v48 = (unint64_t *)*v48;
      }
      while (v48);
    }
    else
    {
      do
      {
        long long v49 = (unint64_t *)v25[2];
        BOOL v50 = *v49 == (void)v25;
        uint64_t v25 = v49;
      }
      while (!v50);
    }
    uint64_t v25 = v49;
    if (v49 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_102:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    long long v51 = (void *)a1[34];
    for (unint64_t i = (void *)a1[35]; v51 != i; ++v51)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v72, *v51);
  }
  int v53 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v72);
  double v54 = (char *)a1[35];
  double v75 = v53;
  double v76 = v54;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v74 = *(_OWORD *)__p;
    uint64_t v55 = (char *)a1[34];
LABEL_107:
    while (v55 != v53)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v55) & 1) == 0)
      {
        int v56 = v53 - 8;
        while (v56 != v55)
        {
          int v53 = v56;
          int v57 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v56);
          int v56 = v53 - 8;
          if (v57)
          {
            uint64_t v58 = *(void *)v55;
            *(void *)uint64_t v55 = *(void *)v53;
            v55 += 8;
            *(void *)int v53 = v58;
            goto LABEL_107;
          }
        }
        int v53 = v55;
        break;
      }
      v55 += 8;
    }
    v73[0] = a1[34];
    v73[1] = v53;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v75);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v74);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v73);
    int v53 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v72);
    double v54 = (char *)a1[35];
    double v75 = v53;
    double v76 = v54;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v53, v54, (v54 - v53) >> 3);
  double v59 = v75;
  if (v75 != v76)
  {
    double v60 = (unsigned char *)a1[35];
    int64_t v61 = v60 - v76;
    if (v60 != v76) {
      memmove(v75, v76, v60 - v76);
    }
    a1[35] = (unint64_t)&v59[v61];
  }
  double v63 = (void *)a1[37];
  double v62 = (void *)a1[38];
  if (v62 != v63)
  {
    do
    {
      double v64 = (void (***)(void))*v63;
      if (*v63 && a1[30])
      {
        (**v64)(*v63);
        *double v64 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v64;
      }
      ++v63;
    }
    while (v63 != v62);
    double v62 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v62;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_129:
  double v65 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  double v66 = (unint64_t *)a1[10];
  if (v66)
  {
    uint64_t v67 = *v65;
    uint64_t v68 = v65[1];
    if (v66 == a1 + 7)
    {
      double v80 = v79;
      (*(void (**)(unint64_t *, void *))(*v66 + 24))(v66, v79);
    }
    else
    {
      double v80 = (void *)(*(uint64_t (**)(unint64_t *))(*v66 + 16))(v66);
    }
    unint64_t v69 = 126 - 2 * __clz((v68 - v67) >> 3);
    if (v68 == v67) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v69;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **,false>)(v67, v68, v79, v70, 1);
    if (v80 == v79)
    {
      (*(void (**)(void *))(v79[0] + 32))(v79);
    }
    else if (v80)
    {
      (*(void (**)(void))(*v80 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v65, a2);
}

void sub_1A2463DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::BuildingTileDataRenderable *,md::BuildingTileDataRenderable *)> &,md::BuildingTileDataRenderable **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A2464F10);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::useNewRenderableCollector()
{
  return 0;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A24652EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::_determineExitingRenderables(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[34];
  uint64_t v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    int v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v5 = this;
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    uint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          double v66 = *(uint64_t **)(v15 + 32);
          if (v66)
          {
            unint64_t v16 = *(void *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61) {
                abort();
              }
              uint64_t v17 = v16;
              uint64_t v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            uint64_t v19 = *(void **)(v6 + 176);
            double v65 = (void *)(v6 + 184);
            if (v19 != (void *)(v6 + 184))
            {
              double v63 = (uint64_t **)(v6 + 232);
              uint64_t v64 = v6;
              do
              {
                uint64_t v21 = v19[4];
                uint64_t v20 = (std::__shared_weak_count *)v19[5];
                uint64_t v71 = v21;
                uint64_t v72 = v20;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v69[0] = *(_WORD *)(v21 + 168);
                uint64_t v70 = *(void *)(v21 + 172);
                double v22 = *(double *)(v21 + 600);
                double v23 = *(double *)(v21 + 608);
                int v24 = *(unsigned __int8 *)(md::LayoutContext::frameState(v5) + 128);
                md::GeometryContext::transformConstantData((double *)&v67, v66, (unsigned __int8 *)v69, v24, v22, v23);
                char v25 = *((unsigned char *)v19 + 48);
                uint64_t v26 = *(char **)(v6 + 264);
                if (!v26)
                {
                  unint64_t v27 = (char *)malloc_type_malloc(*(void *)(v6 + 256), 0x160B39uLL);
                  unint64_t v28 = v27;
                  uint8x8_t v29 = v63;
                  while (1)
                  {
                    unint64_t v30 = *v29;
                    uint64_t v31 = v29;
                    if (!*v29) {
                      break;
                    }
                    while (1)
                    {
                      uint8x8_t v29 = (uint64_t **)v30;
                      unint64_t v32 = v30[4];
                      if ((unint64_t)v27 < v32) {
                        break;
                      }
                      if (v32 >= (unint64_t)v27) {
                        goto LABEL_42;
                      }
                      unint64_t v30 = v29[1];
                      if (!v30)
                      {
                        uint64_t v31 = v29 + 1;
                        goto LABEL_39;
                      }
                    }
                  }
LABEL_39:
                  uint64_t v33 = (uint64_t *)operator new(0x28uLL);
                  v33[4] = (uint64_t)v28;
                  uint64_t *v33 = 0;
                  v33[1] = 0;
                  v33[2] = (uint64_t)v29;
                  *uint64_t v31 = v33;
                  uint64_t v34 = **(void **)(v6 + 224);
                  if (v34)
                  {
                    *(void *)(v6 + 224) = v34;
                    uint64_t v33 = *v31;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v33);
                  ++*(void *)(v6 + 240);
LABEL_42:
                  uint64_t v26 = *(char **)(v6 + 264);
                  uint64_t v35 = 400 * *(void *)(v6 + 248) - 400;
                  if ((v35 & 0x8000000000000000) == 0)
                  {
                    size_t v36 = &v28[v35];
                    do
                    {
                      *(void *)size_t v36 = v26;
                      uint64_t v37 = v36 - 400;
                      uint64_t v26 = v36;
                      size_t v36 = v37;
                    }
                    while (v37 >= v28);
                    uint64_t v26 = v37 + 400;
                  }
                  *(void *)(v6 + 264) = v26;
                  uint64_t v21 = v71;
                  uint64_t v20 = v72;
                }
                *(void *)(v6 + 264) = *(void *)v26;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v26, v21, (uint64_t)v20, v25, (v24 - 1) < 3u, &v67);
                if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
                *(void *)uint64_t v26 = &unk_1EF5135C8;
                uint64_t v38 = v72;
                *((void *)v26 + 48) = v71;
                *((void *)v26 + 49) = v38;
                if (v38) {
                  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                size_t v40 = a3[1];
                unint64_t v39 = (unint64_t)a3[2];
                if ((unint64_t)v40 >= v39)
                {
                  uint64_t v42 = v5;
                  uint64_t v43 = *a3;
                  uint64_t v44 = (char *)v40 - (char *)*a3;
                  uint64_t v45 = v44 >> 3;
                  unint64_t v46 = (v44 >> 3) + 1;
                  if (v46 >> 61) {
                    abort();
                  }
                  uint64_t v47 = v39 - (void)v43;
                  if (v47 >> 2 > v46) {
                    unint64_t v46 = v47 >> 2;
                  }
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v48 = v46;
                  }
                  if (v48)
                  {
                    if (v48 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    long long v49 = operator new(8 * v48);
                  }
                  else
                  {
                    long long v49 = 0;
                  }
                  BOOL v50 = (char **)&v49[8 * v45];
                  *BOOL v50 = v26;
                  size_t v41 = v50 + 1;
                  if (v40 == v43)
                  {
                    uint64_t v43 = v40;
                  }
                  else
                  {
                    unint64_t v51 = (char *)(v40 - 1) - (char *)v43;
                    if (v51 < 0x58) {
                      goto LABEL_97;
                    }
                    if ((unint64_t)((char *)v40 - &v49[v44]) < 0x20) {
                      goto LABEL_97;
                    }
                    uint64_t v52 = (v51 >> 3) + 1;
                    int v53 = &v49[8 * v45 - 16];
                    double v54 = (long long *)(v40 - 2);
                    uint64_t v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v56 = *v54;
                      *(v53 - 1) = *(v54 - 1);
                      *int v53 = v56;
                      v53 -= 2;
                      v54 -= 2;
                      v55 -= 4;
                    }
                    while (v55);
                    v50 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    v40 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_97:
                      do
                      {
                        int v57 = *--v40;
                        *--BOOL v50 = v57;
                      }
                      while (v40 != v43);
                      uint64_t v43 = *a3;
                    }
                  }
                  *a3 = v50;
                  a3[1] = v41;
                  a3[2] = (char **)&v49[8 * v48];
                  if (v43) {
                    operator delete(v43);
                  }
                  uint64_t v5 = v42;
                  uint64_t v6 = v64;
                }
                else
                {
                  *size_t v40 = v26;
                  size_t v41 = v40 + 1;
                }
                a3[1] = v41;
                uint64_t v58 = v68;
                if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                  double v59 = v72;
                  if (!v72)
                  {
LABEL_82:
                    double v60 = (void *)v19[1];
                    if (!v60) {
                      goto LABEL_88;
                    }
                    goto LABEL_83;
                  }
                }
                else
                {
                  double v59 = v72;
                  if (!v72) {
                    goto LABEL_82;
                  }
                }
                if (atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                  goto LABEL_82;
                }
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
                double v60 = (void *)v19[1];
                if (!v60)
                {
                  do
                  {
LABEL_88:
                    int64_t v61 = (void *)v19[2];
                    BOOL v62 = *v61 == (void)v19;
                    uint64_t v19 = v61;
                  }
                  while (!v62);
                  goto LABEL_29;
                }
                do
                {
LABEL_83:
                  int64_t v61 = v60;
                  double v60 = (void *)*v60;
                }
                while (v60);
LABEL_29:
                uint64_t v19 = v61;
              }
              while (v61 != v65);
            }
          }
        }
      }
    }
  }
}

void sub_1A2465960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  uint8x8_t v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void md::MapTileDataRenderable<md::TrafficTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF5135C8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF5135C8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unsigned __int8 v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  uint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    uint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  uint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    uint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  uint64_t *v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (unint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    uint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    uint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      uint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          uint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      uint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  double v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  double v23 = (void *)(a1 + 200);
  *double v22 = 0;
  v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  uint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  uint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  unsigned __int8 v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      uint64_t v27 = (float32x2_t *)v25[9];
      *uint64_t v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        float32x2_t v21 = a2;
        uint64_t v22 = result;
        float32x2_t v20 = v2;
        float32x2_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        uint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          uint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      unsigned __int8 v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  uint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  float32x2_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  unint64_t v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    unint64_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    uint64_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            size_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            uint64_t v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            uint64_t v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    uint64_t v44 = (char *)a1[34];
    uint64_t v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          uint64_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    unint64_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      void *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    unint64_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      uint64_t v52 = v51;
      unint64_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    *uint64_t v52 = v55;
    unint64_t *v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    int v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    uint64_t v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        double v59 = v58;
        uint64_t v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        double v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        unint64_t v26 = v59;
      }
      while (!v60);
    }
    unint64_t v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    int64_t v61 = (void *)a1[34];
    for (unint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  unint64_t v84 = v63;
  size_t v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    double v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        double v66 = v63 - 8;
        while (v66 != v65)
        {
          double v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          double v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)double v65 = *(void *)v63;
            v65 += 8;
            *(void *)double v63 = v68;
            goto LABEL_131;
          }
        }
        double v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    unint64_t v84 = v63;
    size_t v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  unint64_t v69 = v84;
  if (v84 != v85)
  {
    uint64_t v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  long long v73 = (void *)a1[37];
  uint64_t v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      long long v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        std::__shared_weak_count *v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    uint64_t v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  double v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  double v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A2466CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> *,md::MapTileDataRenderable<md::TrafficTileData> *)> &,md::MapTileDataRenderable<md::TrafficTileData> **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A2467E64);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::useNewRenderableCollector()
{
  return 0;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A2468240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::_determineExitingRenderables(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[34];
  uint64_t v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    int v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v5 = this;
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    uint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          double v66 = *(uint64_t **)(v15 + 32);
          if (v66)
          {
            unint64_t v16 = *(void *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61) {
                abort();
              }
              uint64_t v17 = v16;
              uint64_t v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            uint64_t v19 = *(void **)(v6 + 176);
            double v65 = (void *)(v6 + 184);
            if (v19 != (void *)(v6 + 184))
            {
              double v63 = (uint64_t **)(v6 + 232);
              uint64_t v64 = v6;
              do
              {
                uint64_t v21 = v19[4];
                uint64_t v20 = (std::__shared_weak_count *)v19[5];
                uint64_t v71 = v21;
                uint64_t v72 = v20;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v69[0] = *(_WORD *)(v21 + 168);
                uint64_t v70 = *(void *)(v21 + 172);
                double v22 = *(double *)(v21 + 600);
                double v23 = *(double *)(v21 + 608);
                int v24 = *(unsigned __int8 *)(md::LayoutContext::frameState(v5) + 128);
                md::GeometryContext::transformConstantData((double *)&v67, v66, (unsigned __int8 *)v69, v24, v22, v23);
                char v25 = *((unsigned char *)v19 + 48);
                uint64_t v26 = *(char **)(v6 + 264);
                if (!v26)
                {
                  int8x8_t v27 = (char *)malloc_type_malloc(*(void *)(v6 + 256), 0x160B39uLL);
                  unint64_t v28 = v27;
                  unint64_t v29 = v63;
                  while (1)
                  {
                    uint8x8_t v30 = *v29;
                    unint64_t v31 = v29;
                    if (!*v29) {
                      break;
                    }
                    while (1)
                    {
                      unint64_t v29 = (uint64_t **)v30;
                      unint64_t v32 = v30[4];
                      if ((unint64_t)v27 < v32) {
                        break;
                      }
                      if (v32 >= (unint64_t)v27) {
                        goto LABEL_42;
                      }
                      uint8x8_t v30 = v29[1];
                      if (!v30)
                      {
                        unint64_t v31 = v29 + 1;
                        goto LABEL_39;
                      }
                    }
                  }
LABEL_39:
                  uint64_t v33 = (uint64_t *)operator new(0x28uLL);
                  v33[4] = (uint64_t)v28;
                  uint64_t *v33 = 0;
                  v33[1] = 0;
                  v33[2] = (uint64_t)v29;
                  *unint64_t v31 = v33;
                  uint64_t v34 = **(void **)(v6 + 224);
                  if (v34)
                  {
                    *(void *)(v6 + 224) = v34;
                    uint64_t v33 = *v31;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v33);
                  ++*(void *)(v6 + 240);
LABEL_42:
                  uint64_t v26 = *(char **)(v6 + 264);
                  uint64_t v35 = 400 * *(void *)(v6 + 248) - 400;
                  if ((v35 & 0x8000000000000000) == 0)
                  {
                    uint64_t v36 = &v28[v35];
                    do
                    {
                      *(void *)uint64_t v36 = v26;
                      size_t v37 = v36 - 400;
                      uint64_t v26 = v36;
                      uint64_t v36 = v37;
                    }
                    while (v37 >= v28);
                    uint64_t v26 = v37 + 400;
                  }
                  *(void *)(v6 + 264) = v26;
                  uint64_t v21 = v71;
                  uint64_t v20 = v72;
                }
                *(void *)(v6 + 264) = *(void *)v26;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v26, v21, (uint64_t)v20, v25, (v24 - 1) < 3u, &v67);
                if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
                *(void *)uint64_t v26 = &unk_1EF513588;
                uint64_t v38 = v72;
                *((void *)v26 + 48) = v71;
                *((void *)v26 + 49) = v38;
                if (v38) {
                  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                size_t v40 = a3[1];
                unint64_t v39 = (unint64_t)a3[2];
                if ((unint64_t)v40 >= v39)
                {
                  uint64_t v42 = v5;
                  uint64_t v43 = *a3;
                  uint64_t v44 = (char *)v40 - (char *)*a3;
                  uint64_t v45 = v44 >> 3;
                  unint64_t v46 = (v44 >> 3) + 1;
                  if (v46 >> 61) {
                    abort();
                  }
                  uint64_t v47 = v39 - (void)v43;
                  if (v47 >> 2 > v46) {
                    unint64_t v46 = v47 >> 2;
                  }
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v48 = v46;
                  }
                  if (v48)
                  {
                    if (v48 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint8x8_t v49 = operator new(8 * v48);
                  }
                  else
                  {
                    uint8x8_t v49 = 0;
                  }
                  unint64_t v50 = (char **)&v49[8 * v45];
                  *unint64_t v50 = v26;
                  size_t v41 = v50 + 1;
                  if (v40 == v43)
                  {
                    uint64_t v43 = v40;
                  }
                  else
                  {
                    unint64_t v51 = (char *)(v40 - 1) - (char *)v43;
                    if (v51 < 0x58) {
                      goto LABEL_97;
                    }
                    if ((unint64_t)((char *)v40 - &v49[v44]) < 0x20) {
                      goto LABEL_97;
                    }
                    uint64_t v52 = (v51 >> 3) + 1;
                    unint64_t v53 = &v49[8 * v45 - 16];
                    unint64_t v54 = (long long *)(v40 - 2);
                    uint64_t v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v56 = *v54;
                      *(v53 - 1) = *(v54 - 1);
                      *unint64_t v53 = v56;
                      v53 -= 2;
                      v54 -= 2;
                      v55 -= 4;
                    }
                    while (v55);
                    v50 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    v40 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_97:
                      do
                      {
                        int v57 = *--v40;
                        *--unint64_t v50 = v57;
                      }
                      while (v40 != v43);
                      uint64_t v43 = *a3;
                    }
                  }
                  *a3 = v50;
                  a3[1] = v41;
                  a3[2] = (char **)&v49[8 * v48];
                  if (v43) {
                    operator delete(v43);
                  }
                  uint64_t v5 = v42;
                  uint64_t v6 = v64;
                }
                else
                {
                  *size_t v40 = v26;
                  size_t v41 = v40 + 1;
                }
                a3[1] = v41;
                uint64_t v58 = v68;
                if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                  double v59 = v72;
                  if (!v72)
                  {
LABEL_82:
                    BOOL v60 = (void *)v19[1];
                    if (!v60) {
                      goto LABEL_88;
                    }
                    goto LABEL_83;
                  }
                }
                else
                {
                  double v59 = v72;
                  if (!v72) {
                    goto LABEL_82;
                  }
                }
                if (atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                  goto LABEL_82;
                }
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
                BOOL v60 = (void *)v19[1];
                if (!v60)
                {
                  do
                  {
LABEL_88:
                    int64_t v61 = (void *)v19[2];
                    BOOL v62 = *v61 == (void)v19;
                    uint64_t v19 = v61;
                  }
                  while (!v62);
                  goto LABEL_29;
                }
                do
                {
LABEL_83:
                  int64_t v61 = v60;
                  BOOL v60 = (void *)*v60;
                }
                while (v60);
LABEL_29:
                uint64_t v19 = v61;
              }
              while (v61 != v65);
            }
          }
        }
      }
    }
  }
}

void sub_1A24688B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  uint8x8_t v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void md::MapTileDataRenderable<md::OverlayTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513588;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unsigned __int8 v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  uint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    uint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  uint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    uint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  uint64_t *v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (unint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    uint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    uint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      uint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          uint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      uint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  double v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  double v23 = (void *)(a1 + 200);
  *double v22 = 0;
  v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  uint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  uint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  unsigned __int8 v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      uint64_t v27 = (float32x2_t *)v25[9];
      *uint64_t v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        float32x2_t v21 = a2;
        uint64_t v22 = result;
        float32x2_t v20 = v2;
        float32x2_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        uint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          uint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      unsigned __int8 v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  uint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  float32x2_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  unint64_t v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    unint64_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    uint64_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            size_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            uint64_t v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            uint64_t v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    uint64_t v44 = (char *)a1[34];
    uint64_t v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          uint64_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    unint64_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      void *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    unint64_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      uint64_t v52 = v51;
      unint64_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    *uint64_t v52 = v55;
    unint64_t *v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    int v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    uint64_t v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        double v59 = v58;
        uint64_t v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        double v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        unint64_t v26 = v59;
      }
      while (!v60);
    }
    unint64_t v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    int64_t v61 = (void *)a1[34];
    for (unint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  unint64_t v84 = v63;
  size_t v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    double v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        double v66 = v63 - 8;
        while (v66 != v65)
        {
          double v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          double v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)double v65 = *(void *)v63;
            v65 += 8;
            *(void *)double v63 = v68;
            goto LABEL_131;
          }
        }
        double v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    unint64_t v84 = v63;
    size_t v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  unint64_t v69 = v84;
  if (v84 != v85)
  {
    uint64_t v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  long long v73 = (void *)a1[37];
  uint64_t v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      long long v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        std::__shared_weak_count *v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    uint64_t v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  double v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  double v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A2469C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::OverlayTileData> *,md::MapTileDataRenderable<md::OverlayTileData> *)> &,md::MapTileDataRenderable<md::OverlayTileData> **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A246ADB8);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::useNewRenderableCollector()
{
  return 0;
}

void md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A246B194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::_determineExitingRenderables(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[34];
  uint64_t v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    int v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v5 = this;
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    uint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          double v66 = *(uint64_t **)(v15 + 32);
          if (v66)
          {
            unint64_t v16 = *(void *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61) {
                abort();
              }
              uint64_t v17 = v16;
              uint64_t v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            uint64_t v19 = *(void **)(v6 + 176);
            double v65 = (void *)(v6 + 184);
            if (v19 != (void *)(v6 + 184))
            {
              double v63 = (uint64_t **)(v6 + 232);
              uint64_t v64 = v6;
              do
              {
                uint64_t v21 = v19[4];
                uint64_t v20 = (std::__shared_weak_count *)v19[5];
                uint64_t v71 = v21;
                uint64_t v72 = v20;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v69[0] = *(_WORD *)(v21 + 168);
                uint64_t v70 = *(void *)(v21 + 172);
                double v22 = *(double *)(v21 + 600);
                double v23 = *(double *)(v21 + 608);
                int v24 = *(unsigned __int8 *)(md::LayoutContext::frameState(v5) + 128);
                md::GeometryContext::transformConstantData((double *)&v67, v66, (unsigned __int8 *)v69, v24, v22, v23);
                char v25 = *((unsigned char *)v19 + 48);
                uint64_t v26 = *(char **)(v6 + 264);
                if (!v26)
                {
                  int8x8_t v27 = (char *)malloc_type_malloc(*(void *)(v6 + 256), 0x160B39uLL);
                  unint64_t v28 = v27;
                  unint64_t v29 = v63;
                  while (1)
                  {
                    uint8x8_t v30 = *v29;
                    unint64_t v31 = v29;
                    if (!*v29) {
                      break;
                    }
                    while (1)
                    {
                      unint64_t v29 = (uint64_t **)v30;
                      unint64_t v32 = v30[4];
                      if ((unint64_t)v27 < v32) {
                        break;
                      }
                      if (v32 >= (unint64_t)v27) {
                        goto LABEL_42;
                      }
                      uint8x8_t v30 = v29[1];
                      if (!v30)
                      {
                        unint64_t v31 = v29 + 1;
                        goto LABEL_39;
                      }
                    }
                  }
LABEL_39:
                  uint64_t v33 = (uint64_t *)operator new(0x28uLL);
                  v33[4] = (uint64_t)v28;
                  uint64_t *v33 = 0;
                  v33[1] = 0;
                  v33[2] = (uint64_t)v29;
                  *unint64_t v31 = v33;
                  uint64_t v34 = **(void **)(v6 + 224);
                  if (v34)
                  {
                    *(void *)(v6 + 224) = v34;
                    uint64_t v33 = *v31;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v33);
                  ++*(void *)(v6 + 240);
LABEL_42:
                  uint64_t v26 = *(char **)(v6 + 264);
                  uint64_t v35 = 424 * *(void *)(v6 + 248) - 424;
                  if ((v35 & 0x8000000000000000) == 0)
                  {
                    uint64_t v36 = &v28[v35];
                    do
                    {
                      *(void *)uint64_t v36 = v26;
                      size_t v37 = v36 - 424;
                      uint64_t v26 = v36;
                      uint64_t v36 = v37;
                    }
                    while (v37 >= v28);
                    uint64_t v26 = v37 + 424;
                  }
                  *(void *)(v6 + 264) = v26;
                  uint64_t v21 = v71;
                  uint64_t v20 = v72;
                }
                *(void *)(v6 + 264) = *(void *)v26;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v26, v21, (uint64_t)v20, v25, (v24 - 1) < 3u, &v67);
                if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
                *(void *)uint64_t v26 = &unk_1EF5135E8;
                uint64_t v38 = v72;
                *((void *)v26 + 48) = v71;
                *((void *)v26 + 49) = v38;
                if (v38) {
                  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                *(void *)uint64_t v26 = &unk_1EF513B00;
                *((void *)v26 + 50) = &unk_1EF5593D8;
                *((void *)v26 + 51) = 0;
                size_t v40 = a3[1];
                unint64_t v39 = (unint64_t)a3[2];
                if ((unint64_t)v40 >= v39)
                {
                  uint64_t v42 = v5;
                  uint64_t v43 = *a3;
                  uint64_t v44 = (char *)v40 - (char *)*a3;
                  uint64_t v45 = v44 >> 3;
                  unint64_t v46 = (v44 >> 3) + 1;
                  if (v46 >> 61) {
                    abort();
                  }
                  uint64_t v47 = v39 - (void)v43;
                  if (v47 >> 2 > v46) {
                    unint64_t v46 = v47 >> 2;
                  }
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v48 = v46;
                  }
                  if (v48)
                  {
                    if (v48 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint8x8_t v49 = operator new(8 * v48);
                  }
                  else
                  {
                    uint8x8_t v49 = 0;
                  }
                  unint64_t v50 = (char **)&v49[8 * v45];
                  *unint64_t v50 = v26;
                  size_t v41 = v50 + 1;
                  if (v40 == v43)
                  {
                    uint64_t v43 = v40;
                  }
                  else
                  {
                    unint64_t v51 = (char *)(v40 - 1) - (char *)v43;
                    if (v51 < 0x58) {
                      goto LABEL_97;
                    }
                    if ((unint64_t)((char *)v40 - &v49[v44]) < 0x20) {
                      goto LABEL_97;
                    }
                    uint64_t v52 = (v51 >> 3) + 1;
                    unint64_t v53 = &v49[8 * v45 - 16];
                    unint64_t v54 = (long long *)(v40 - 2);
                    uint64_t v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v56 = *v54;
                      *(v53 - 1) = *(v54 - 1);
                      *unint64_t v53 = v56;
                      v53 -= 2;
                      v54 -= 2;
                      v55 -= 4;
                    }
                    while (v55);
                    v50 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    v40 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_97:
                      do
                      {
                        int v57 = *--v40;
                        *--unint64_t v50 = v57;
                      }
                      while (v40 != v43);
                      uint64_t v43 = *a3;
                    }
                  }
                  *a3 = v50;
                  a3[1] = v41;
                  a3[2] = (char **)&v49[8 * v48];
                  if (v43) {
                    operator delete(v43);
                  }
                  uint64_t v5 = v42;
                  uint64_t v6 = v64;
                }
                else
                {
                  *size_t v40 = v26;
                  size_t v41 = v40 + 1;
                }
                a3[1] = v41;
                uint64_t v58 = v68;
                if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                  double v59 = v72;
                  if (!v72)
                  {
LABEL_82:
                    BOOL v60 = (void *)v19[1];
                    if (!v60) {
                      goto LABEL_88;
                    }
                    goto LABEL_83;
                  }
                }
                else
                {
                  double v59 = v72;
                  if (!v72) {
                    goto LABEL_82;
                  }
                }
                if (atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                  goto LABEL_82;
                }
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
                BOOL v60 = (void *)v19[1];
                if (!v60)
                {
                  do
                  {
LABEL_88:
                    int64_t v61 = (void *)v19[2];
                    BOOL v62 = *v61 == (void)v19;
                    uint64_t v19 = v61;
                  }
                  while (!v62);
                  goto LABEL_29;
                }
                do
                {
LABEL_83:
                  int64_t v61 = v60;
                  BOOL v60 = (void *)*v60;
                }
                while (v60);
LABEL_29:
                uint64_t v19 = v61;
              }
              while (v61 != v65);
            }
          }
        }
      }
    }
  }
}

void sub_1A246B844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  uint8x8_t v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void **md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unsigned __int8 v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  uint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    uint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  uint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    uint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  uint64_t *v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (unint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    uint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    uint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      uint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          uint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      uint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  double v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  double v23 = (void *)(a1 + 200);
  *double v22 = 0;
  v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  uint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  uint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  unsigned __int8 v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      uint64_t v27 = (float32x2_t *)v25[9];
      *uint64_t v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        float32x2_t v21 = a2;
        uint64_t v22 = result;
        float32x2_t v20 = v2;
        float32x2_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        uint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          uint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      unsigned __int8 v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  uint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  float32x2_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  unint64_t v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    unint64_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    uint64_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            size_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            uint64_t v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            uint64_t v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    uint64_t v44 = (char *)a1[34];
    uint64_t v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          uint64_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    unint64_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      void *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    unint64_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      uint64_t v52 = v51;
      unint64_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    *uint64_t v52 = v55;
    unint64_t *v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    int v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    uint64_t v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        double v59 = v58;
        uint64_t v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        double v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        unint64_t v26 = v59;
      }
      while (!v60);
    }
    unint64_t v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    int64_t v61 = (void *)a1[34];
    for (unint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  unint64_t v84 = v63;
  size_t v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    double v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        double v66 = v63 - 8;
        while (v66 != v65)
        {
          double v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          double v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)double v65 = *(void *)v63;
            v65 += 8;
            *(void *)double v63 = v68;
            goto LABEL_131;
          }
        }
        double v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    unint64_t v84 = v63;
    size_t v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  unint64_t v69 = v84;
  if (v84 != v85)
  {
    uint64_t v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  long long v73 = (void *)a1[37];
  uint64_t v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      long long v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        std::__shared_weak_count *v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    uint64_t v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  double v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  double v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A246CA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::TransitTileDataRenderable *,md::TransitTileDataRenderable *)> &,md::TransitTileDataRenderable **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A246DC04);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

unsigned char *md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::setActive(unsigned char *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::useNewRenderableCollector()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::renderableDidChange()
{
  return 0;
}

void *std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciGroundRenderable *,md::DaVinciGroundRenderable *)> &,md::DaVinciGroundRenderable **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A246EFF8);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::useNewRenderableCollector()
{
  return 0;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A246F3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::_determineExitingRenderables(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[34];
  uint64_t v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    int v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v5 = this;
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    uint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          double v66 = *(uint64_t **)(v15 + 32);
          if (v66)
          {
            unint64_t v16 = *(void *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61) {
                abort();
              }
              uint64_t v17 = v16;
              uint64_t v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            uint64_t v19 = *(void **)(v6 + 176);
            double v65 = (void *)(v6 + 184);
            if (v19 != (void *)(v6 + 184))
            {
              double v63 = (uint64_t **)(v6 + 232);
              uint64_t v64 = v6;
              do
              {
                uint64_t v21 = v19[4];
                uint64_t v20 = (std::__shared_weak_count *)v19[5];
                uint64_t v71 = v21;
                uint64_t v72 = v20;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v69[0] = *(_WORD *)(v21 + 168);
                uint64_t v70 = *(void *)(v21 + 172);
                double v22 = *(double *)(v21 + 600);
                double v23 = *(double *)(v21 + 608);
                int v24 = *(unsigned __int8 *)(md::LayoutContext::frameState(v5) + 128);
                md::GeometryContext::transformConstantData((double *)&v67, v66, (unsigned __int8 *)v69, v24, v22, v23);
                char v25 = *((unsigned char *)v19 + 48);
                uint64_t v26 = *(char **)(v6 + 264);
                if (!v26)
                {
                  int8x8_t v27 = (char *)malloc_type_malloc(*(void *)(v6 + 256), 0x160B39uLL);
                  unint64_t v28 = v27;
                  unint64_t v29 = v63;
                  while (1)
                  {
                    uint8x8_t v30 = *v29;
                    unint64_t v31 = v29;
                    if (!*v29) {
                      break;
                    }
                    while (1)
                    {
                      unint64_t v29 = (uint64_t **)v30;
                      unint64_t v32 = v30[4];
                      if ((unint64_t)v27 < v32) {
                        break;
                      }
                      if (v32 >= (unint64_t)v27) {
                        goto LABEL_42;
                      }
                      uint8x8_t v30 = v29[1];
                      if (!v30)
                      {
                        unint64_t v31 = v29 + 1;
                        goto LABEL_39;
                      }
                    }
                  }
LABEL_39:
                  uint64_t v33 = (uint64_t *)operator new(0x28uLL);
                  v33[4] = (uint64_t)v28;
                  uint64_t *v33 = 0;
                  v33[1] = 0;
                  v33[2] = (uint64_t)v29;
                  *unint64_t v31 = v33;
                  uint64_t v34 = **(void **)(v6 + 224);
                  if (v34)
                  {
                    *(void *)(v6 + 224) = v34;
                    uint64_t v33 = *v31;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v33);
                  ++*(void *)(v6 + 240);
LABEL_42:
                  uint64_t v26 = *(char **)(v6 + 264);
                  uint64_t v35 = 400 * *(void *)(v6 + 248) - 400;
                  if ((v35 & 0x8000000000000000) == 0)
                  {
                    uint64_t v36 = &v28[v35];
                    do
                    {
                      *(void *)uint64_t v36 = v26;
                      size_t v37 = v36 - 400;
                      uint64_t v26 = v36;
                      uint64_t v36 = v37;
                    }
                    while (v37 >= v28);
                    uint64_t v26 = v37 + 400;
                  }
                  *(void *)(v6 + 264) = v26;
                  uint64_t v21 = v71;
                  uint64_t v20 = v72;
                }
                *(void *)(v6 + 264) = *(void *)v26;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v26, v21, (uint64_t)v20, v25, (v24 - 1) < 3u, &v67);
                if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
                *(void *)uint64_t v26 = &unk_1EF513648;
                uint64_t v38 = v72;
                *((void *)v26 + 48) = v71;
                *((void *)v26 + 49) = v38;
                if (v38) {
                  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                size_t v40 = a3[1];
                unint64_t v39 = (unint64_t)a3[2];
                if ((unint64_t)v40 >= v39)
                {
                  uint64_t v42 = v5;
                  uint64_t v43 = *a3;
                  uint64_t v44 = (char *)v40 - (char *)*a3;
                  uint64_t v45 = v44 >> 3;
                  unint64_t v46 = (v44 >> 3) + 1;
                  if (v46 >> 61) {
                    abort();
                  }
                  uint64_t v47 = v39 - (void)v43;
                  if (v47 >> 2 > v46) {
                    unint64_t v46 = v47 >> 2;
                  }
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v48 = v46;
                  }
                  if (v48)
                  {
                    if (v48 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint8x8_t v49 = operator new(8 * v48);
                  }
                  else
                  {
                    uint8x8_t v49 = 0;
                  }
                  unint64_t v50 = (char **)&v49[8 * v45];
                  *unint64_t v50 = v26;
                  size_t v41 = v50 + 1;
                  if (v40 == v43)
                  {
                    uint64_t v43 = v40;
                  }
                  else
                  {
                    unint64_t v51 = (char *)(v40 - 1) - (char *)v43;
                    if (v51 < 0x58) {
                      goto LABEL_97;
                    }
                    if ((unint64_t)((char *)v40 - &v49[v44]) < 0x20) {
                      goto LABEL_97;
                    }
                    uint64_t v52 = (v51 >> 3) + 1;
                    unint64_t v53 = &v49[8 * v45 - 16];
                    unint64_t v54 = (long long *)(v40 - 2);
                    uint64_t v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v56 = *v54;
                      *(v53 - 1) = *(v54 - 1);
                      *unint64_t v53 = v56;
                      v53 -= 2;
                      v54 -= 2;
                      v55 -= 4;
                    }
                    while (v55);
                    v50 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    v40 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_97:
                      do
                      {
                        int v57 = *--v40;
                        *--unint64_t v50 = v57;
                      }
                      while (v40 != v43);
                      uint64_t v43 = *a3;
                    }
                  }
                  *a3 = v50;
                  a3[1] = v41;
                  a3[2] = (char **)&v49[8 * v48];
                  if (v43) {
                    operator delete(v43);
                  }
                  uint64_t v5 = v42;
                  uint64_t v6 = v64;
                }
                else
                {
                  *size_t v40 = v26;
                  size_t v41 = v40 + 1;
                }
                a3[1] = v41;
                uint64_t v58 = v68;
                if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                  double v59 = v72;
                  if (!v72)
                  {
LABEL_82:
                    BOOL v60 = (void *)v19[1];
                    if (!v60) {
                      goto LABEL_88;
                    }
                    goto LABEL_83;
                  }
                }
                else
                {
                  double v59 = v72;
                  if (!v72) {
                    goto LABEL_82;
                  }
                }
                if (atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                  goto LABEL_82;
                }
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
                BOOL v60 = (void *)v19[1];
                if (!v60)
                {
                  do
                  {
LABEL_88:
                    int64_t v61 = (void *)v19[2];
                    BOOL v62 = *v61 == (void)v19;
                    uint64_t v19 = v61;
                  }
                  while (!v62);
                  goto LABEL_29;
                }
                do
                {
LABEL_83:
                  int64_t v61 = v60;
                  BOOL v60 = (void *)*v60;
                }
                while (v60);
LABEL_29:
                uint64_t v19 = v61;
              }
              while (v61 != v65);
            }
          }
        }
      }
    }
  }
}

void sub_1A246FA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  uint8x8_t v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void md::MapTileDataRenderable<md::DaVinciTrafficTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513648;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513648;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unsigned __int8 v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  uint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    uint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  uint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    uint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  uint64_t *v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (unint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    uint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    uint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      uint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          uint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      uint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  double v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  double v23 = (void *)(a1 + 200);
  *double v22 = 0;
  v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  uint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  uint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  unsigned __int8 v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      uint64_t v27 = (float32x2_t *)v25[9];
      *uint64_t v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    uint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        float32x2_t v21 = a2;
        uint64_t v22 = result;
        float32x2_t v20 = v2;
        float32x2_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        uint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          uint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      unsigned __int8 v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  uint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  float32x2_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  unint64_t v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    unint64_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    uint64_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            size_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            uint64_t v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            uint64_t v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    uint64_t v44 = (char *)a1[34];
    uint64_t v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          uint64_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    unint64_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      void *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    unint64_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      uint64_t v52 = v51;
      unint64_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    *uint64_t v52 = v55;
    unint64_t *v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    int v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    uint64_t v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        double v59 = v58;
        uint64_t v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        double v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        unint64_t v26 = v59;
      }
      while (!v60);
    }
    unint64_t v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    int64_t v61 = (void *)a1[34];
    for (unint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  unint64_t v84 = v63;
  size_t v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    double v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        double v66 = v63 - 8;
        while (v66 != v65)
        {
          double v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          double v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)double v65 = *(void *)v63;
            v65 += 8;
            *(void *)double v63 = v68;
            goto LABEL_131;
          }
        }
        double v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    unint64_t v84 = v63;
    size_t v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  unint64_t v69 = v84;
  if (v84 != v85)
  {
    uint64_t v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  long long v73 = (void *)a1[37];
  uint64_t v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      long long v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        std::__shared_weak_count *v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    uint64_t v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  double v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  double v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A2470DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::DaVinciTrafficTileData> *,md::MapTileDataRenderable<md::DaVinciTrafficTileData> *)> &,md::MapTileDataRenderable<md::DaVinciTrafficTileData> **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A2471F4CLL);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

void md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A2472320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 272);
  uint64_t v1 = *(uint64_t **)(a1 + 280);
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    int v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

BOOL md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 384);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 392);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    int v4 = *(unsigned __int8 *)(a2 + 48);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = v3;
    uint64_t v6 = *(uint64_t ***)(a1 + 136);
    if (v6) {
      goto LABEL_8;
    }
LABEL_5:
    BOOL v7 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(a1 + 88), (unsigned __int8 *)(v2 + 16)) != 0;
    if (v5) {
      goto LABEL_17;
    }
    goto LABEL_19;
  }
  uint64_t v5 = 0;
  int v4 = *(unsigned __int8 *)(a2 + 48);
  uint64_t v6 = *(uint64_t ***)(a1 + 136);
  if (!v6) {
    goto LABEL_5;
  }
  while (1)
  {
LABEL_8:
    int v8 = *((unsigned __int8 *)v6 + 48);
    BOOL v9 = *((char *)v6 + 48) > (char)v4;
    unint64_t v10 = (unint64_t)v6[4];
    if (v4 == v8) {
      BOOL v9 = v2 < v10;
    }
    if (v9) {
      goto LABEL_7;
    }
    BOOL v11 = v10 < v2;
    int v12 = v4 == v8 ? v11 : (char)v8 < (char)v4;
    if (v12 != 1) {
      break;
    }
    ++v6;
LABEL_7:
    uint64_t v6 = (uint64_t **)*v6;
    if (!v6) {
      goto LABEL_5;
    }
  }
  BOOL v7 = 1;
  if (!v5) {
    goto LABEL_19;
  }
LABEL_17:
  p_shared_owners = &v5->__shared_owners_;
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_23;
    }
LABEL_19:
    if (!v3) {
      return v7;
    }
    goto LABEL_20;
  }
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_19;
  }
LABEL_23:
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (v3)
  {
LABEL_20:
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v7;
}

void md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    unint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      BOOL v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            BOOL v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          BOOL v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          uint64_t v16 = *(uint64_t **)(v15 + 32);
          if (v16)
          {
            unint64_t v17 = *(void *)(a2 + 192);
            unint64_t v53 = *(uint64_t **)(v15 + 32);
            if (v17)
            {
              if (v17 >> 61) {
                abort();
              }
              uint64_t v18 = 8 * v17;
              uint64_t v19 = (char *)operator new(8 * v17);
              *a3 = v19;
              a3[1] = v19;
              a3[2] = &v19[v18];
              uint64_t v16 = v53;
            }
            uint64_t v20 = *(void **)(v6 + 176);
            unint64_t v54 = (void *)(v6 + 184);
            if (v20 != (void *)(v6 + 184))
            {
              unint64_t v51 = (uint64_t **)(v6 + 224);
              uint64_t v52 = v6;
              do
              {
                uint64_t v21 = v20[4];
                uint64_t v22 = (std::__shared_weak_count *)v20[5];
                uint64_t v59 = v21;
                BOOL v60 = v22;
                if (v22) {
                  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v57[0] = *(_WORD *)(v21 + 168);
                uint64_t v58 = *(void *)(v21 + 172);
                double v23 = *(double *)(v21 + 600);
                double v24 = *(double *)(v21 + 608);
                int v25 = *(unsigned __int8 *)(md::LayoutContext::frameState(this) + 128);
                md::GeometryContext::transformConstantData((double *)&v55, v16, (unsigned __int8 *)v57, v25, v23, v24);
                char v26 = *((unsigned char *)v20 + 48);
                int8x8_t v27 = *(void **)(v6 + 264);
                if (!v27)
                {
                  geo::Pool<md::ElevatedPolygonRenderable>::allocateSlab(v51);
                  int8x8_t v27 = *(void **)(v6 + 264);
                }
                *(void *)(v6 + 264) = *v27;
                v61[0] = 0;
                v61[1] = 0;
                md::PairedMapTileDataRenderable<md::ElevatedStrokeTileData,md::DaVinciGroundTileData>::PairedMapTileDataRenderable((uint64_t)v27, &v59, v26, (v25 - 1) < 3u, &v55, v61);
                *int8x8_t v27 = &unk_1EF513AE0;
                unint64_t v29 = (void *)a3[1];
                unint64_t v28 = a3[2];
                if ((unint64_t)v29 >= v28)
                {
                  unint64_t v31 = (unsigned char *)*a3;
                  uint64_t v32 = (uint64_t)v29 - *a3;
                  uint64_t v33 = v32 >> 3;
                  unint64_t v34 = (v32 >> 3) + 1;
                  if (v34 >> 61) {
                    abort();
                  }
                  uint64_t v35 = v28 - (void)v31;
                  if (v35 >> 2 > v34) {
                    unint64_t v34 = v35 >> 2;
                  }
                  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v36 = v34;
                  }
                  if (v36)
                  {
                    if (v36 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    size_t v37 = operator new(8 * v36);
                  }
                  else
                  {
                    size_t v37 = 0;
                  }
                  uint64_t v38 = &v37[8 * v33];
                  *uint64_t v38 = v27;
                  uint8x8_t v30 = v38 + 1;
                  if (v29 == (void *)v31)
                  {
                    unint64_t v31 = v29;
                  }
                  else
                  {
                    unint64_t v39 = (char *)(v29 - 1) - v31;
                    if (v39 < 0x58) {
                      goto LABEL_76;
                    }
                    if ((unint64_t)((char *)v29 - &v37[v32]) < 0x20) {
                      goto LABEL_76;
                    }
                    uint64_t v40 = (v39 >> 3) + 1;
                    size_t v41 = &v37[8 * v33 - 16];
                    uint64_t v42 = (long long *)(v29 - 2);
                    uint64_t v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v44 = *v42;
                      *(v41 - 1) = *(v42 - 1);
                      *size_t v41 = v44;
                      v41 -= 2;
                      v42 -= 2;
                      v43 -= 4;
                    }
                    while (v43);
                    v38 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
                    v29 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_76:
                      do
                      {
                        uint64_t v45 = *--v29;
                        *--uint64_t v38 = v45;
                      }
                      while (v29 != (void *)v31);
                      unint64_t v31 = (unsigned char *)*a3;
                    }
                  }
                  *a3 = v38;
                  a3[1] = v30;
                  a3[2] = &v37[8 * v36];
                  if (v31) {
                    operator delete(v31);
                  }
                  uint64_t v6 = v52;
                  uint64_t v16 = v53;
                }
                else
                {
                  *unint64_t v29 = v27;
                  uint8x8_t v30 = v29 + 1;
                }
                a3[1] = v30;
                unint64_t v46 = v56;
                if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
                int8x8_t v47 = v60;
                if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                  unint64_t v48 = (void *)v20[1];
                  if (!v48)
                  {
                    do
                    {
LABEL_67:
                      uint8x8_t v49 = (void *)v20[2];
                      BOOL v50 = *v49 == (void)v20;
                      uint64_t v20 = v49;
                    }
                    while (!v50);
                    goto LABEL_29;
                  }
                }
                else
                {
                  unint64_t v48 = (void *)v20[1];
                  if (!v48) {
                    goto LABEL_67;
                  }
                }
                do
                {
                  uint8x8_t v49 = v48;
                  unint64_t v48 = (void *)*v48;
                }
                while (v48);
LABEL_29:
                uint64_t v20 = v49;
              }
              while (v49 != v54);
            }
          }
        }
      }
    }
  }
}

void sub_1A2472A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  uint8x8_t v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void md::ElevatedPolygonRenderable::~ElevatedPolygonRenderable(md::ElevatedPolygonRenderable *this)
{
  md::PairedMapTileDataRenderable<md::ElevatedStrokeTileData,md::DaVinciGroundTileData>::~PairedMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

void md::PairedMapTileDataRenderable<md::ElevatedStrokeTileData,md::DaVinciGroundTileData>::~PairedMapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513B70;
  unint64_t v2 = (void *)*((void *)this + 52);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *(void *)this = &unk_1EF513668;
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void md::MapTileDataRenderable<md::ElevatedStrokeTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513668;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513668;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513668;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void md::PairedMapTileDataRenderable<md::ElevatedStrokeTileData,md::DaVinciGroundTileData>::~PairedMapTileDataRenderable(md::BaseMapTileDataRenderable *a1)
{
  md::PairedMapTileDataRenderable<md::ElevatedStrokeTileData,md::DaVinciGroundTileData>::~PairedMapTileDataRenderable(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::renderableDidChange()
{
  return 0;
}

void *std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A2473EE8);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::useNewRenderableCollector()
{
  return 0;
}

void md::CartographicTiledRenderLayer<HillshadeRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint8x8_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint8x8_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A2474298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::CartographicTiledRenderLayer<HillshadeRenderable>::_determineExitingRenderables(void *a1)
{
  unint64_t v2 = (uint64_t *)a1[34];
  uint64_t v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    int8x8_t v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<HillshadeRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v5 = this;
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    uint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          double v66 = *(uint64_t **)(v15 + 32);
          if (v66)
          {
            unint64_t v16 = *(void *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61) {
                abort();
              }
              uint64_t v17 = v16;
              uint64_t v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            uint64_t v19 = *(void **)(v6 + 176);
            double v65 = (void *)(v6 + 184);
            if (v19 != (void *)(v6 + 184))
            {
              double v63 = (uint64_t **)(v6 + 232);
              uint64_t v64 = v6;
              do
              {
                uint64_t v21 = v19[4];
                uint64_t v20 = (std::__shared_weak_count *)v19[5];
                uint64_t v71 = v21;
                uint64_t v72 = v20;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v69[0] = *(_WORD *)(v21 + 168);
                uint64_t v70 = *(void *)(v21 + 172);
                double v22 = *(double *)(v21 + 600);
                double v23 = *(double *)(v21 + 608);
                int v24 = *(unsigned __int8 *)(md::LayoutContext::frameState(v5) + 128);
                md::GeometryContext::transformConstantData((double *)&v67, v66, (unsigned __int8 *)v69, v24, v22, v23);
                char v25 = *((unsigned char *)v19 + 48);
                uint64_t v26 = *(char **)(v6 + 264);
                if (!v26)
                {
                  int8x8_t v27 = (char *)malloc_type_malloc(*(void *)(v6 + 256), 0x160B39uLL);
                  unint64_t v28 = v27;
                  unint64_t v29 = v63;
                  while (1)
                  {
                    uint8x8_t v30 = *v29;
                    unint64_t v31 = v29;
                    if (!*v29) {
                      break;
                    }
                    while (1)
                    {
                      unint64_t v29 = (uint64_t **)v30;
                      unint64_t v32 = v30[4];
                      if ((unint64_t)v27 < v32) {
                        break;
                      }
                      if (v32 >= (unint64_t)v27) {
                        goto LABEL_42;
                      }
                      uint8x8_t v30 = v29[1];
                      if (!v30)
                      {
                        unint64_t v31 = v29 + 1;
                        goto LABEL_39;
                      }
                    }
                  }
LABEL_39:
                  uint64_t v33 = (uint64_t *)operator new(0x28uLL);
                  v33[4] = (uint64_t)v28;
                  uint64_t *v33 = 0;
                  v33[1] = 0;
                  v33[2] = (uint64_t)v29;
                  *unint64_t v31 = v33;
                  uint64_t v34 = **(void **)(v6 + 224);
                  if (v34)
                  {
                    *(void *)(v6 + 224) = v34;
                    uint64_t v33 = *v31;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 232), v33);
                  ++*(void *)(v6 + 240);
LABEL_42:
                  uint64_t v26 = *(char **)(v6 + 264);
                  uint64_t v35 = 400 * *(void *)(v6 + 248) - 400;
                  if ((v35 & 0x8000000000000000) == 0)
                  {
                    unint64_t v36 = &v28[v35];
                    do
                    {
                      *(void *)unint64_t v36 = v26;
                      size_t v37 = v36 - 400;
                      uint64_t v26 = v36;
                      unint64_t v36 = v37;
                    }
                    while (v37 >= v28);
                    uint64_t v26 = v37 + 400;
                  }
                  *(void *)(v6 + 264) = v26;
                  uint64_t v21 = v71;
                  uint64_t v20 = v72;
                }
                *(void *)(v6 + 264) = *(void *)v26;
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v26, v21, (uint64_t)v20, v25, (v24 - 1) < 3u, &v67);
                if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
                *(void *)uint64_t v26 = &unk_1EF513628;
                uint64_t v38 = v72;
                *((void *)v26 + 48) = v71;
                *((void *)v26 + 49) = v38;
                if (v38) {
                  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                *(void *)uint64_t v26 = &unk_1EF513068;
                uint64_t v40 = a3[1];
                unint64_t v39 = (unint64_t)a3[2];
                if ((unint64_t)v40 >= v39)
                {
                  uint64_t v42 = v5;
                  uint64_t v43 = *a3;
                  uint64_t v44 = (char *)v40 - (char *)*a3;
                  uint64_t v45 = v44 >> 3;
                  unint64_t v46 = (v44 >> 3) + 1;
                  if (v46 >> 61) {
                    abort();
                  }
                  uint64_t v47 = v39 - (void)v43;
                  if (v47 >> 2 > v46) {
                    unint64_t v46 = v47 >> 2;
                  }
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v48 = v46;
                  }
                  if (v48)
                  {
                    if (v48 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint8x8_t v49 = operator new(8 * v48);
                  }
                  else
                  {
                    uint8x8_t v49 = 0;
                  }
                  BOOL v50 = (char **)&v49[8 * v45];
                  *BOOL v50 = v26;
                  size_t v41 = v50 + 1;
                  if (v40 == v43)
                  {
                    uint64_t v43 = v40;
                  }
                  else
                  {
                    unint64_t v51 = (char *)(v40 - 1) - (char *)v43;
                    if (v51 < 0x58) {
                      goto LABEL_97;
                    }
                    if ((unint64_t)((char *)v40 - &v49[v44]) < 0x20) {
                      goto LABEL_97;
                    }
                    uint64_t v52 = (v51 >> 3) + 1;
                    unint64_t v53 = &v49[8 * v45 - 16];
                    unint64_t v54 = (long long *)(v40 - 2);
                    uint64_t v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v56 = *v54;
                      *(v53 - 1) = *(v54 - 1);
                      *unint64_t v53 = v56;
                      v53 -= 2;
                      v54 -= 2;
                      v55 -= 4;
                    }
                    while (v55);
                    v50 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    v40 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_97:
                      do
                      {
                        int v57 = *--v40;
                        *--BOOL v50 = v57;
                      }
                      while (v40 != v43);
                      uint64_t v43 = *a3;
                    }
                  }
                  *a3 = v50;
                  a3[1] = v41;
                  a3[2] = (char **)&v49[8 * v48];
                  if (v43) {
                    operator delete(v43);
                  }
                  uint64_t v5 = v42;
                  uint64_t v6 = v64;
                }
                else
                {
                  *uint64_t v40 = v26;
                  size_t v41 = v40 + 1;
                }
                a3[1] = v41;
                uint64_t v58 = v68;
                if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                  uint64_t v59 = v72;
                  if (!v72)
                  {
LABEL_82:
                    BOOL v60 = (void *)v19[1];
                    if (!v60) {
                      goto LABEL_88;
                    }
                    goto LABEL_83;
                  }
                }
                else
                {
                  uint64_t v59 = v72;
                  if (!v72) {
                    goto LABEL_82;
                  }
                }
                if (atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                  goto LABEL_82;
                }
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
                BOOL v60 = (void *)v19[1];
                if (!v60)
                {
                  do
                  {
LABEL_88:
                    int64_t v61 = (void *)v19[2];
                    BOOL v62 = *v61 == (void)v19;
                    uint64_t v19 = v61;
                  }
                  while (!v62);
                  goto LABEL_29;
                }
                do
                {
LABEL_83:
                  int64_t v61 = v60;
                  BOOL v60 = (void *)*v60;
                }
                while (v60);
LABEL_29:
                uint64_t v19 = v61;
              }
              while (v61 != v65);
            }
          }
        }
      }
    }
  }
}

void sub_1A2474928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  uint8x8_t v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void **md::CartographicTiledRenderLayer<HillshadeRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unsigned __int8 v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  uint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    uint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  uint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    uint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  uint64_t *v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (unint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    uint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    uint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      uint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          uint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      uint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  double v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  double v23 = (void *)(a1 + 200);
  *double v22 = 0;
  v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  uint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  uint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void md::CartographicTiledRenderLayer<HillshadeRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  unsigned __int8 v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      uint64_t v27 = (float32x2_t *)v25[9];
      *uint64_t v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    unint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        float32x2_t v21 = a2;
        uint64_t v22 = result;
        float32x2_t v20 = v2;
        float32x2_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        unint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          unint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      unsigned __int8 v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  uint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  float32x2_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  unint64_t v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    unint64_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    uint64_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            uint64_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            uint64_t v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            uint64_t v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        uint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    uint64_t v44 = (char *)a1[34];
    uint64_t v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          uint64_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    unint64_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      std::__shared_weak_count *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    unint64_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      uint64_t v52 = v51;
      unint64_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    *uint64_t v52 = v55;
    unint64_t *v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    int v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    uint64_t v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        uint64_t v59 = v58;
        uint64_t v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        uint64_t v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        unint64_t v26 = v59;
      }
      while (!v60);
    }
    unint64_t v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    int64_t v61 = (void *)a1[34];
    for (unint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  unint64_t v84 = v63;
  size_t v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    double v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        double v66 = v63 - 8;
        while (v66 != v65)
        {
          double v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          double v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)double v65 = *(void *)v63;
            v65 += 8;
            *(void *)double v63 = v68;
            goto LABEL_131;
          }
        }
        double v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    unint64_t v84 = v63;
    size_t v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  unint64_t v69 = v84;
  if (v84 != v85)
  {
    uint64_t v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  long long v73 = (void *)a1[37];
  uint64_t v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      long long v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        std::__shared_weak_count *v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    uint64_t v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  double v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  double v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A2475B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(HillshadeRenderable *,HillshadeRenderable *)> &,HillshadeRenderable **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A2476CE8);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::useNewRenderableCollector()
{
  return 0;
}

void md::CartographicTiledRenderLayer<md::FlyoverRenderable>::_updateSubTileMaskForRenderable(uint64_t a1, int8x8_t **a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a3 + 384);
  uint64_t v6 = *(std::__shared_weak_count **)(a3 + 392);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v7 = *(unsigned char *)(a3 + 48);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, v7);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = md::SceneContext::subtileClipMask(*a2, v5, *(unsigned char *)(a3 + 48));
  if (!v8) {
    goto LABEL_9;
  }
LABEL_5:
  if (v8[4] == v8[3] * v8[3]) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
LABEL_10:
  md::BaseMapTileDataRenderable::setSubtileClipMask(a3, v9);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A24770C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *md::CartographicTiledRenderLayer<md::FlyoverRenderable>::_determineExitingRenderables(void *a1)
{
  unint64_t v2 = (uint64_t *)a1[34];
  uint64_t v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1) {
        return v1;
      }
    }
    int v4 = v1 - 1;
    while (v4 != v2)
    {
      uint64_t v1 = v4;
      uint64_t v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        uint64_t v6 = *v2;
        *v2++ = *v1;
        *uint64_t v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::FlyoverRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = (void *)*((void *)this + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (v4)
  {
    uint64_t v6 = a2;
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v9 = 0x3070CB6B3C7F21D3;
      if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
        uint64_t v9 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
      }
    }
    else
    {
      uint64_t v9 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    uint64_t v10 = *(void **)(*v3 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          uint64_t v12 = *(void *)&v4 - 1;
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3) {
                goto LABEL_22;
              }
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              return;
            }
          }
        }
        while (1)
        {
          unint64_t v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3) {
            break;
          }
          if (v13 >= *(void *)&v4) {
            v13 %= *(void *)&v4;
          }
          if (v13 != v9) {
            return;
          }
LABEL_11:
          uint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
        if (v11[2] != 0x3070CB6B3C7F21D3) {
          goto LABEL_11;
        }
LABEL_22:
        uint64_t v15 = v11[5];
        if (*(void *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          unint64_t v53 = *(uint64_t **)(v15 + 32);
          if (v53)
          {
            unint64_t v16 = *(void *)(a2 + 192);
            if (v16)
            {
              if (v16 >> 61) {
                abort();
              }
              uint64_t v17 = 8 * v16;
              uint64_t v18 = (char *)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            uint64_t v19 = *(void **)(v6 + 176);
            uint64_t v52 = (void *)(v6 + 184);
            if (v19 != (void *)(v6 + 184))
            {
              unint64_t v50 = (uint64_t **)(v6 + 224);
              uint64_t v51 = v6;
              do
              {
                uint64_t v21 = v19[4];
                uint64_t v20 = v19[5];
                uint64_t v58 = v21;
                uint64_t v59 = (std::__shared_weak_count *)v20;
                if (v20) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
                }
                *(_WORD *)unint64_t v56 = *(_WORD *)(v21 + 168);
                uint64_t v57 = *(void *)(v21 + 172);
                double v22 = *(double *)(v21 + 600);
                double v23 = *(double *)(v21 + 608);
                int v24 = *(unsigned __int8 *)(md::LayoutContext::frameState(this) + 128);
                md::GeometryContext::transformConstantData((double *)&v54, v53, v56, v24, v22, v23);
                char v25 = *((unsigned char *)v19 + 48);
                uint64_t v26 = *(void **)(v6 + 264);
                if (!v26)
                {
                  geo::Pool<md::FlyoverRenderable>::allocateSlab(v50);
                  uint64_t v26 = *(void **)(v6 + 264);
                }
                *(void *)(v6 + 264) = *v26;
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v26, v21, v20, v25, (v24 - 1) < 3u, &v54);
                *uint64_t v26 = &unk_1EF513508;
                v26[48] = v21;
                v26[49] = v20;
                if (v20) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
                }
                *uint64_t v26 = &unk_1EF513110;
                unint64_t v28 = (void *)a3[1];
                unint64_t v27 = a3[2];
                if ((unint64_t)v28 >= v27)
                {
                  uint8x8_t v30 = (unsigned char *)*a3;
                  uint64_t v31 = (uint64_t)v28 - *a3;
                  uint64_t v32 = v31 >> 3;
                  unint64_t v33 = (v31 >> 3) + 1;
                  if (v33 >> 61) {
                    abort();
                  }
                  uint64_t v34 = v27 - (void)v30;
                  if (v34 >> 2 > v33) {
                    unint64_t v33 = v34 >> 2;
                  }
                  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v35 = v33;
                  }
                  if (v35)
                  {
                    if (v35 >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint64_t v36 = operator new(8 * v35);
                  }
                  else
                  {
                    uint64_t v36 = 0;
                  }
                  size_t v37 = &v36[8 * v32];
                  *size_t v37 = v26;
                  unint64_t v29 = v37 + 1;
                  if (v28 == (void *)v30)
                  {
                    uint8x8_t v30 = v28;
                  }
                  else
                  {
                    unint64_t v38 = (char *)(v28 - 1) - v30;
                    if (v38 < 0x58) {
                      goto LABEL_78;
                    }
                    if ((unint64_t)((char *)v28 - &v36[v31]) < 0x20) {
                      goto LABEL_78;
                    }
                    uint64_t v39 = (v38 >> 3) + 1;
                    uint64_t v40 = &v36[8 * v32 - 16];
                    size_t v41 = (long long *)(v28 - 2);
                    uint64_t v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v43 = *v41;
                      *(v40 - 1) = *(v41 - 1);
                      *uint64_t v40 = v43;
                      v40 -= 2;
                      v41 -= 2;
                      v42 -= 4;
                    }
                    while (v42);
                    v37 -= v39 & 0x3FFFFFFFFFFFFFFCLL;
                    v28 -= v39 & 0x3FFFFFFFFFFFFFFCLL;
                    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_78:
                      do
                      {
                        uint64_t v44 = *--v28;
                        *--size_t v37 = v44;
                      }
                      while (v28 != (void *)v30);
                      uint8x8_t v30 = (unsigned char *)*a3;
                    }
                  }
                  *a3 = v37;
                  a3[1] = v29;
                  a3[2] = &v36[8 * v35];
                  if (v30) {
                    operator delete(v30);
                  }
                  uint64_t v6 = v51;
                }
                else
                {
                  *unint64_t v28 = v26;
                  unint64_t v29 = v28 + 1;
                }
                a3[1] = v29;
                int64_t v45 = v55;
                if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
                unint64_t v46 = v59;
                if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                  int8x8_t v47 = (void *)v19[1];
                  if (!v47)
                  {
                    do
                    {
LABEL_69:
                      unint64_t v48 = (void *)v19[2];
                      BOOL v49 = *v48 == (void)v19;
                      uint64_t v19 = v48;
                    }
                    while (!v49);
                    goto LABEL_29;
                  }
                }
                else
                {
                  int8x8_t v47 = (void *)v19[1];
                  if (!v47) {
                    goto LABEL_69;
                  }
                }
                do
                {
                  unint64_t v48 = v47;
                  int8x8_t v47 = (void *)*v47;
                }
                while (v47);
LABEL_29:
                uint64_t v19 = v48;
              }
              while (v48 != v52);
            }
          }
        }
      }
    }
  }
}

void sub_1A2477620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  uint8x8_t v8 = *(void **)v6;
  if (*(void *)v6)
  {
    *(void *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void **md::CartographicTiledRenderLayer<md::FlyoverRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  int8x8_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unsigned __int8 v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  uint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    uint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  uint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    uint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  uint64_t *v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (unint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    uint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    uint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      uint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          uint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      uint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  double v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  double v23 = (void *)(a1 + 200);
  *double v22 = 0;
  v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  unint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  unint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void md::CartographicTiledRenderLayer<md::FlyoverRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  unsigned __int8 v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      uint64_t v27 = (float32x2_t *)v25[9];
      *uint64_t v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    unint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        float32x2_t v21 = a2;
        uint64_t v22 = result;
        float32x2_t v20 = v2;
        float32x2_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        unint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          unint64_t v2 = v20;
          a2 = v21;
        }
      }
      uint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      unsigned __int8 v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      uint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        uint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        uint64_t v9 = (uint64_t *)(v6 + 4);
      }
      uint64_t v12 = (uint64_t *)*v9;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::renderableDidChange()
{
  return 0;
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  uint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  float32x2_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      float32x2_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  unint64_t v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    uint64_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    unint64_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            uint64_t v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            uint64_t v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        unint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            uint64_t v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        unint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    uint64_t v44 = (char *)a1[34];
    long long v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          uint64_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    unint64_t v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      std::__shared_weak_count *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    uint64_t v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      uint64_t v52 = v51;
      uint64_t v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    *uint64_t v52 = v55;
    unint64_t *v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    uint64_t v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    uint64_t v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        uint64_t v59 = v58;
        uint64_t v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        uint64_t v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        unint64_t v26 = v59;
      }
      while (!v60);
    }
    unint64_t v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    int64_t v61 = (void *)a1[34];
    for (unint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  uint64_t v64 = (char *)a1[35];
  unint64_t v84 = v63;
  size_t v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    double v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        double v66 = v63 - 8;
        while (v66 != v65)
        {
          double v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          double v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)double v65 = *(void *)v63;
            v65 += 8;
            *(void *)double v63 = v68;
            goto LABEL_131;
          }
        }
        double v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    double v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    uint64_t v64 = (char *)a1[35];
    unint64_t v84 = v63;
    size_t v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  unint64_t v69 = v84;
  if (v84 != v85)
  {
    uint64_t v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  long long v73 = (void *)a1[37];
  uint64_t v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      long long v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        std::__shared_weak_count *v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    uint64_t v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  double v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  double v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A2478828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    goto LABEL_16;
  }
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v23, &v22);
  uint64_t v11 = *a3;
  if (v10)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    uint64_t v12 = *(void *)(a4 + 24);
    if (v12)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 48))(v12, &v23, &v22);
      uint64_t v14 = *a1;
      if (result)
      {
        *a1 = *a3;
LABEL_14:
        *a3 = v14;
        return result;
      }
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      uint64_t v21 = *(void *)(a4 + 24);
      if (v21)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v21 + 48))(v21, &v23, &v22);
        if (!result) {
          return result;
        }
        uint64_t v14 = *a2;
        *a2 = *a3;
        goto LABEL_14;
      }
    }
LABEL_16:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **>();
  }
  uint64_t v22 = *a2;
  uint64_t v23 = v11;
  uint64_t v15 = *(void *)(a4 + 24);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v23, &v22);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v17;
  uint64_t v18 = *(void *)(a4 + 24);
  if (!v18) {
    goto LABEL_16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v23, &v22);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v14 = *a3;
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v15 + 48))(v15, &v21, &v20);
  if (!result) {
    return result;
  }
  uint64_t v16 = *a2;
  *a2 = *a3;
  *a3 = v16;
  uint64_t v17 = *a2;
  uint64_t v20 = *a1;
  uint64_t v21 = v17;
  uint64_t v18 = *(void *)(a5 + 24);
  if (!v18)
  {
LABEL_9:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **>();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v21, &v20);
  if (result)
  {
    uint64_t v19 = *a1;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::FlyoverRenderable *,md::FlyoverRenderable *)> &,md::FlyoverRenderable **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  uint64_t v13 = *(void *)(a6 + 24);
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 48))(v13, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v15 = *a4;
  *a4 = *a5;
  *a5 = v15;
  uint64_t v16 = *a4;
  uint64_t v25 = *a3;
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v17 + 48))(v17, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v18 = *a3;
  *a3 = *a4;
  *a4 = v18;
  uint64_t v19 = *a3;
  uint64_t v25 = *a2;
  uint64_t v26 = v19;
  uint64_t v20 = *(void *)(a6 + 24);
  if (!v20) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 48))(v20, &v26, &v25);
  if (!result) {
    return result;
  }
  uint64_t v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v22 = *a2;
  uint64_t v25 = *a1;
  uint64_t v26 = v22;
  uint64_t v23 = *(void *)(a6 + 24);
  if (!v23)
  {
LABEL_11:
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A2479998);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 48))(v23, &v26, &v25);
  if (result)
  {
    uint64_t v24 = *a1;
    *a1 = *a2;
    *a2 = v24;
  }
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::prepare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF549B40;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::RoadTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A2479DB4(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF549FA0;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::DaVinciRoadTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A2479F50(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5498A0;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::PolygonTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247A0EC(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5496E0;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::RasterTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247A288(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF549600;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::VenueTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247A424(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF549EC0;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::BuildingTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247A5C0(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF549980;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::TrafficTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247A75C(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5497C0;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::OverlayTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247A8F8(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF549DE0;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::TransitTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247AA94(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF549C20;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::DaVinciGroundRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247AC30(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF549A60;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247ADCC(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF549D00;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::ElevatedPolygonRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247AF68(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<HillshadeRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF549440;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<HillshadeRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247B104(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::FlyoverRenderable>::~CartographicTiledRenderLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EF549520;
  unint64_t v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(void *)(a1 + 328) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(void *)(a1 + 304) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(void *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::FlyoverRenderable>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  uint64_t v5 = *(unsigned char **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112]) {
        v5[112] = 0;
      }
      uint64_t v8 = *(unsigned char **)v5;
      uint64_t v9 = (void *)*((void *)v5 + 4);
      if (v9 != *((void **)v5 + 6)) {
        free(v9);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == a1 + 56)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 56) + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  *(void *)a1 = &unk_1EF530C60;
  uint64_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_1A247B2A0(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 232));
  _Unwind_Resume(a1);
}

void md::ManeuverArrowCoordinates::update(void *a1, void *a2, void *a3, unsigned int a4, float a5, float a6)
{
  float v8 = a6;
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  float v10 = a6 * a5;
  float v11 = v10 * 0.56406;
  float v94 = v10;
  float v12 = v10 * 0.7125;
  id v13 = a2;
  uint64_t v14 = v13;
  id v98 = v13;
  long long v100 = a1;
  if (v13)
  {
    uint64_t v15 = [v13 maneuverDisplaySteps];
    uint64_t v16 = [v15 count];

    if (v16)
    {
      a1[1] = *a1;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      uint64_t v17 = [v14 maneuverDisplaySteps];
      float v91 = v8;
      unint64_t v92 = a3;
      uint64_t v18 = [v17 countByEnumeratingWithState:&v102 objects:v106 count:16];
      if (v18)
      {
        uint64_t v96 = a4;
        uint64_t v97 = *(void *)v103;
        double v19 = (float)(a5 * 10.0);
        unint64_t v95 = v17;
        do
        {
          uint64_t v99 = v18;
          for (uint64_t i = 0; i != v99; ++i)
          {
            if (*(void *)v103 != v97) {
              objc_enumerationMutation(v17);
            }
            uint64_t v22 = *(void **)(*((void *)&v102 + 1) + 8 * i);
            uint64_t v23 = [v22 stepIndex];
            BOOL v24 = v23 == v96;
            if (v23 == v96) {
              float v25 = v12;
            }
            else {
              float v25 = v11;
            }
            unint64_t v26 = objc_msgSend(v14, "routeCoordinateForDistance:beforeRouteCoordinate:", objc_msgSend(v22, "maneuverStartRouteCoordinate"), v19);
            unint64_t v27 = objc_msgSend(v14, "routeCoordinateForDistance:afterRouteCoordinate:", objc_msgSend(v22, "endRouteCoordinate"), v19);
            unint64_t v28 = HIDWORD(v26);
            if ([v22 maneuverType] == 88)
            {
              [v14 distanceFromPoint:v26 toPoint:v27];
              *(float *)&double v29 = v29;
              unint64_t v30 = [v14 routeCoordinateForDistance:v26 beforeRouteCoordinate:*(float *)&v29];
              LODWORD(v31) = v26;
              LODWORD(v26) = v30;
              unint64_t v101 = HIDWORD(v30);
            }
            else
            {
              unint64_t v101 = HIDWORD(v26);
              unint64_t v28 = HIDWORD(v27);
              LODWORD(v31) = v27;
            }
            unsigned int v32 = [v14 coordinateAtOffset:v31 | (v28 << 32) fromRouteCoordinate:v25];
            int v33 = [v14 pointCount];
            id v34 = v14;
            unint64_t v35 = v34;
            if (v32 && [v34 pointCount] - 1 > v32)
            {
              [v35 pointAt:v32 - 1];
              GEOMapPointForCoordinate();
              double v37 = v36;
              double v39 = v38;
              [v35 pointAt:v32];
              GEOMapPointForCoordinate();
              double v41 = v40;
              double v43 = v42;
              [v35 pointAt:v32 + 1];
              GEOMapPointForCoordinate();
              BOOL v46 = ((v44 - v41) * (v37 - v41) + (v45 - v43) * (v39 - v43))
                  / sqrt(((v37 - v41) * (v37 - v41) + (v39 - v43) * (v39 - v43))* ((v44 - v41) * (v44 - v41) + (v45 - v43) * (v45 - v43))) > -0.866025405;
            }
            else
            {
              BOOL v46 = 0;
            }

            BOOL v47 = v31 >= v33 - 1 || v31 == v32;
            if (!v47 && v46)
            {
              unint64_t v31 = [v35 coordinateAtOffset:v32 + 1 fromRoutePoint:(float)(v94 * 0.5)];
              unint64_t v28 = HIDWORD(v31);
              if ([v35 pointCount] > v31)
              {
                unint64_t v48 = objc_msgSend(v35, "stepAtIndex:", objc_msgSend(v35, "stepIndexForPointIndex:", v31));
                [v48 distance];
                if (v49 - *((float *)&v31 + 1) * v49 < (float)(v25 + v94)) {
                  LODWORD(v28) = 0;
                }
              }
            }
            unint64_t v50 = (char **)v100;
            uint64_t v52 = (char *)v100[1];
            unint64_t v51 = v100[2];
            if ((unint64_t)v52 < v51)
            {
              *(_DWORD *)uint64_t v52 = v26;
              *((_DWORD *)v52 + 1) = v101;
              *((_DWORD *)v52 + 2) = v31;
              *((_DWORD *)v52 + 3) = v28;
              v52[16] = 1;
              uint64_t v21 = v52 + 20;
              v52[17] = v24;
              uint64_t v14 = v98;
            }
            else
            {
              unint64_t v53 = (char *)*v100;
              unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v52[-*v100] >> 2);
              unint64_t v55 = v54 + 1;
              if (v54 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                abort();
              }
              unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - (void)v53) >> 2);
              if (2 * v56 > v55) {
                unint64_t v55 = 2 * v56;
              }
              if (v56 >= 0x666666666666666) {
                unint64_t v57 = 0xCCCCCCCCCCCCCCCLL;
              }
              else {
                unint64_t v57 = v55;
              }
              if (v57)
              {
                if (v57 > 0xCCCCCCCCCCCCCCCLL) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                uint64_t v58 = (char *)operator new(20 * v57);
              }
              else
              {
                uint64_t v58 = 0;
              }
              uint64_t v59 = &v58[20 * v54];
              *(_DWORD *)uint64_t v59 = v26;
              *((_DWORD *)v59 + 1) = v101;
              *((_DWORD *)v59 + 2) = v31;
              *((_DWORD *)v59 + 3) = v28;
              v59[16] = 1;
              v59[17] = v24;
              BOOL v60 = v59;
              if (v52 == v53)
              {
                uint64_t v14 = v98;
                unint64_t v50 = (char **)v100;
              }
              else
              {
                uint64_t v14 = v98;
                do
                {
                  long long v61 = *(_OWORD *)(v52 - 20);
                  *((_WORD *)v60 - 2) = *((_WORD *)v52 - 2);
                  *(_OWORD *)(v60 - 20) = v61;
                  v60 -= 20;
                  v52 -= 20;
                }
                while (v52 != v53);
                unint64_t v50 = (char **)v100;
                uint64_t v52 = (char *)*v100;
              }
              uint64_t v21 = v59 + 20;
              *unint64_t v50 = v60;
              v50[1] = v59 + 20;
              v50[2] = &v58[20 * v57];
              if (v52) {
                operator delete(v52);
              }
            }
            v50[1] = v21;
            uint64_t v17 = v95;
          }
          uint64_t v18 = [v95 countByEnumeratingWithState:&v102 objects:v106 count:16];
        }
        while (v18);
      }

      uint64_t v14 = v98;
      a3 = v92;
      a1 = v100;
      float v8 = v91;
    }
  }
  BOOL v62 = (int *)*a1;
  uint64_t v63 = a1[1];
  if (*a1 != v63)
  {
    *((unsigned char *)v62 + 16) = 0;
    *(unsigned char *)(v63 - 4) = 0;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v63 - (uint64_t)v62) >> 2) >= 3)
  {
    float v64 = *((unsigned char *)v62 + 17) ? v12 : v11;
    uint64_t v65 = [v14 coordinateAtOffset:*((void *)v62 + 1) fromRouteCoordinate:v64];
    double v66 = (int *)(v63 - 20);
    int v67 = v62 + 5;
    if (v62 + 5 != v66)
    {
      uint64_t v68 = v65;
      float v69 = *((float *)&v65 + 1);
      float v70 = -(float)(v8 * a5);
      do
      {
        int v73 = *((unsigned __int8 *)v67 + 17);
        if (*((unsigned char *)v67 + 17)) {
          float v74 = v12;
        }
        else {
          float v74 = v11;
        }
        uint64_t v75 = [v14 coordinateAtOffset:*((void *)v67 + 1) fromRouteCoordinate:v74];
        float v76 = 0.059375;
        if (v73) {
          float v76 = 0.075;
        }
        uint64_t v77 = [v14 coordinateAtOffset:*(void *)v67 fromRouteCoordinate:(float)(v70 * v76)];
        float v78 = *((float *)&v75 + 1);
        if (v68 > v75
          || (v69 > *((float *)&v75 + 1) ? (BOOL v79 = v68 == v75) : (BOOL v79 = 0),
              !v79 ? (BOOL v80 = v68 > v77) : (BOOL v80 = 1),
              v80))
        {
          BOOL v81 = 1;
          if (!v73) {
            goto LABEL_76;
          }
        }
        else
        {
          if (v68 != v77)
          {
            uint64_t v72 = v67;
            a1 = v100;
            goto LABEL_59;
          }
          BOOL v81 = v69 > *((float *)&v77 + 1);
          if (!v73) {
            goto LABEL_76;
          }
        }
        if (v81)
        {
          int64_t v71 = v62 + 4;
          BOOL v62 = v67;
          a1 = v100;
          goto LABEL_58;
        }
LABEL_76:
        uint64_t v72 = v67;
        a1 = v100;
        if (!v81) {
          goto LABEL_59;
        }
        int64_t v71 = v67 + 4;
        uint64_t v75 = v68;
        float v78 = v69;
LABEL_58:
        *int64_t v71 = 0;
        uint64_t v72 = v62;
LABEL_59:
        v67 += 5;
        BOOL v62 = v72;
        float v69 = v78;
        uint64_t v68 = v75;
      }
      while (v67 != v66);
    }
  }
  long long v82 = (unsigned int *)*a1;
  long long v83 = (int *)a1[1];
  if ((int *)*a1 != v83)
  {
    unint64_t v84 = (unsigned int *)*a3;
    size_t v85 = (int *)a3[1];
    if ((int *)*a3 != v85)
    {
      do
      {
        unsigned int v86 = *v82;
        unint64_t v87 = v84;
        while (1)
        {
          unsigned int v88 = *v87;
          float v89 = *((float *)v87 + 1);
          if (*v87 > v86 || v88 == v86 && v89 >= *((float *)v82 + 1))
          {
            unsigned int v90 = v82[2];
            if (v88 < v90 || v88 == v90 && v89 <= *((float *)v82 + 3)) {
              break;
            }
          }
          v87 += 2;
          if (v87 == (unsigned int *)v85) {
            goto LABEL_86;
          }
        }
        *((unsigned char *)v82 + 16) = 0;
LABEL_86:
        v82 += 5;
      }
      while (v82 != (unsigned int *)v83);
    }
  }
}

void sub_1A247B9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void karo::JobManager::~JobManager(karo::JobManager *this)
{
  karo::JobManager::~JobManager(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint8_t *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint8_t buf[2];
  __int16 v26;
  void *v27;

  *(void *)this = &unk_1EF567670;
  unint64_t v2 = (uint64_t *)*((void *)this + 4);
  uint64_t v3 = (uint64_t *)*((void *)this + 5);
  while (v2 != v3)
  {
    int v4 = *v2++;
    *(unsigned char *)(v4 + 48) = 0;
    atomic_store(1u, (unsigned __int8 *)(v4 + 80));
  }
  pthread_cond_broadcast(*((pthread_cond_t **)this + 3));
  for (uint64_t i = *((void *)this + 5); *((void *)this + 4) != i; *((void *)this + 5) = i)
  {
    uint64_t v6 = *(void *)(i - 8);
    *(unsigned char *)(v6 + 48) = 0;
    atomic_store(1u, (unsigned __int8 *)(v6 + 80));
    uint64_t v7 = *(void *)(*((void *)this + 5) - 8);
    unint64_t v27 = 0;
    float v8 = pthread_join(**(pthread_t **)(v7 + 16), &v27);
    switch(v8)
    {
      case 3:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        id v13 = GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_22;
        }
        BOOL v24 = 0;
        float v10 = (uint8_t *)&v24;
        float v11 = v13;
        float v12 = "Failed to join thread. No thread could be found corresponding to that specified by the given thread ID, thread.";
        break;
      case 22:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        uint64_t v14 = GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_22;
        }
        *(_WORD *)z_stream buf = 0;
        float v10 = buf;
        float v11 = v14;
        float v12 = "Failed to join thread. The implementation has detected that the value specified by thread does not refer t"
              "o a joinable thread.";
        break;
      case 11:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        uint64_t v9 = GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_22;
        }
        unint64_t v26 = 0;
        float v10 = (uint8_t *)&v26;
        float v11 = v9;
        float v12 = "Failed to join thread. A deadlock was detected or the value of thread specifies the calling thread.";
        break;
      default:
        goto LABEL_22;
    }
    _os_log_impl(&dword_1A1780000, v11, OS_LOG_TYPE_ERROR, v12, v10, 2u);
LABEL_22:
    uint64_t v15 = *((void *)this + 5);
    uint64_t v16 = *(void *)(v15 - 8);
    if (v16)
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      uint64_t v15 = *((void *)this + 5);
    }
    uint64_t i = v15 - 8;
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((void **)this + 14));
  uint64_t v17 = *((void *)this + 9);
  if (v17)
  {
    uint64_t v18 = *((void *)this + 10);
    double v19 = (void *)*((void *)this + 9);
    if (v18 != v17)
    {
      do
      {
        uint64_t v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        v18 -= 24;
      }
      while (v18 != v17);
      double v19 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v17;
    operator delete(v19);
  }
  uint64_t v21 = (void *)*((void *)this + 4);
  if (v21)
  {
    *((void *)this + 5) = v21;
    operator delete(v21);
  }
  pthread_cond_destroy(*((pthread_cond_t **)this + 3));
  uint64_t v22 = *((void *)this + 3);
  if (v22) {
    MEMORY[0x1A6239270](v22, 0x1000C40EED21634);
  }
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 2));
  uint64_t v23 = *((void *)this + 2);
  if (v23) {
    MEMORY[0x1A6239270](v23, 0x1000C40FA0F61DDLL);
  }
  *((void *)this + 2) = 0;
}

uint64_t karo::JobManager::queueJob(unint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 64)) {
    (*(void (**)(void))(*(void *)*a2 + 16))();
  }
  uint64_t v4 = *a2;
  pthread_mutex_lock(*(pthread_mutex_t **)(*a2 + 88));
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  uint64_t v5 = *a2;
  int v6 = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a1 + 60) = v6 + 1;
  atomic_store(a1, (unint64_t *)(v5 + 24));
  *(_DWORD *)(v5 + 20) = v6;
  uint64_t v7 = *a2;
  pthread_mutex_lock(*(pthread_mutex_t **)(*a2 + 88));
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v7 + 72);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 88));
  if (v8 != v9)
  {
    uint64_t v10 = *a2;
    float v12 = (uint64_t **)(a1 + 112);
    float v11 = *(uint64_t **)(a1 + 112);
    if (v11)
    {
      unsigned int v13 = *(_DWORD *)(v10 + 20);
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v11;
          unsigned int v15 = *(_DWORD *)(v11[4] + 20);
          if (v13 >= v15) {
            break;
          }
          float v11 = *v14;
          float v12 = v14;
          if (!*v14) {
            goto LABEL_16;
          }
        }
        if (v15 >= v13) {
          break;
        }
        float v11 = v14[1];
        if (!v11)
        {
          float v12 = v14 + 1;
          goto LABEL_16;
        }
      }
    }
    else
    {
      uint64_t v14 = (uint64_t **)(a1 + 112);
LABEL_16:
      uint64_t v20 = (uint64_t *)v14;
      uint64_t v14 = (uint64_t **)operator new(0x38uLL);
      v14[5] = 0;
      v14[6] = 0;
      v14[4] = (uint64_t *)v10;
      *uint64_t v14 = 0;
      v14[1] = 0;
      v14[2] = v20;
      uint64_t *v12 = (uint64_t *)v14;
      uint64_t v21 = **(void **)(a1 + 104);
      uint64_t v22 = (uint64_t *)v14;
      if (v21)
      {
        *(void *)(a1 + 104) = v21;
        uint64_t v22 = *v12;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 112), v22);
      ++*(void *)(a1 + 120);
      uint64_t v10 = *a2;
    }
    uint64_t v23 = (uint64_t *)a2[1];
    if (v23) {
      atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
    }
    BOOL v24 = (std::__shared_weak_count *)v14[6];
    v14[5] = (uint64_t *)v10;
    v14[6] = v23;
    if (!v24) {
      goto LABEL_26;
    }
LABEL_24:
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_26;
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 96));
  uint64_t v16 = (std::__shared_weak_count *)a2[1];
  unsigned int v17 = atomic_load((unsigned int *)(*a2 + 16));
  unsigned int v28 = v17;
  uint64_t v18 = *a2;
  uint64_t v29 = *a2;
  unint64_t v30 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = *(void *)(a1 + 80);
  if (v19 < *(void *)(a1 + 88))
  {
    *(_DWORD *)unint64_t v19 = v17;
    *(void *)(v19 + 8) = v18;
    *(void *)(v19 + 16) = v16;
    *(void *)(a1 + 80) = v19 + 24;
    goto LABEL_26;
  }
  float v25 = std::vector<karo::JobManager::QueueElement>::__push_back_slow_path<karo::JobManager::QueueElement>((char **)(a1 + 72), (uint64_t)&v28);
  BOOL v24 = v30;
  *(void *)(a1 + 80) = v25;
  if (v24) {
    goto LABEL_24;
  }
LABEL_26:
  pthread_cond_signal(*(pthread_cond_t **)(a1 + 24));
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  unint64_t v26 = *(pthread_mutex_t **)(v4 + 88);
  return pthread_mutex_unlock(v26);
}

char *std::vector<karo::JobManager::QueueElement>::__push_back_slow_path<karo::JobManager::QueueElement>(char **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v3;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v7 = 24 * v5;
  uint64_t v8 = (char *)operator new(24 * v5);
  uint64_t v9 = &v8[24 * v2];
  uint64_t v10 = &v8[v7];
  *(_DWORD *)uint64_t v9 = *(_DWORD *)a2;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  float v11 = v9 + 24;
  float v12 = *a1;
  unsigned int v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      int v14 = *((_DWORD *)v13 - 6);
      v13 -= 24;
      *((_DWORD *)v9 - 6) = v14;
      v9 -= 24;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v13 + 8);
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
    }
    while (v13 != v12);
    unsigned int v13 = *a1;
    unsigned int v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    for (a1[2] = v10; v15 != v13; v15 -= 24)
    {
      uint64_t v16 = (std::__shared_weak_count *)*((void *)v15 - 1);
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

uint64_t karo::JobManager::setWorkerCount(karo::JobManager *this, unsigned int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(*((pthread_mutex_t **)this + 2));
  uint64_t v4 = *((void *)this + 5);
  unint64_t v5 = (v4 - *((void *)this + 4)) >> 3;
  if (v5 < a2)
  {
    uint64_t v20 = MEMORY[0x1E4FBA488] + 24;
    uint64_t v19 = *(void *)(MEMORY[0x1E4FBA408] + 24);
    uint64_t v17 = *(void *)(MEMORY[0x1E4FBA408] + 32);
    uint64_t v18 = *(void *)(MEMORY[0x1E4FBA408] + 16);
    uint64_t v16 = *(void *)(MEMORY[0x1E4FBA408] + 40);
    uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 48);
    uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 8);
    uint64_t v6 = MEMORY[0x1E4FBA488] + 104;
    uint64_t v27 = MEMORY[0x1E4FBA488] + 104;
    uint64_t v7 = MEMORY[0x1E4FBA488] + 64;
    uint64_t v22 = MEMORY[0x1E4FBA488] + 64;
    v21[0] = v18;
    *(void *)((char *)v21 + *(void *)(v18 - 24)) = v19;
    v21[1] = 0;
    uint64_t v8 = (std::ios_base *)((char *)v21 + *(void *)(v21[0] - 24));
    std::ios_base::init(v8, v23);
    v8[1].__vftable = 0;
    v8[1].__fmtflags_ = -1;
    uint64_t v22 = v17;
    *(uint64_t *)((char *)&v23[-1] + *(void *)(v17 - 24)) = v16;
    v21[0] = v14;
    *(void *)((char *)v21 + *(void *)(v14 - 24)) = v15;
    uint64_t v27 = v6;
    v21[0] = v20;
    uint64_t v22 = v7;
    std::streambuf::basic_streambuf();
    v23[0] = MEMORY[0x1E4FBA470] + 16;
    long long __p = 0u;
    long long v25 = 0u;
    int v26 = 24;
    size_t v9 = strlen(*((const char **)this + 1));
    uint64_t v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v22, *((void *)this + 1), v9);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)"/workers/worker", 15);
    ++*((_DWORD *)this + 14);
    std::ostream::operator<<();
    operator new();
  }
  if (v5 > a2)
  {
    do
    {
      uint64_t v11 = *(void *)(v4 - 8);
      *(unsigned char *)(v11 + 48) = 1;
      atomic_store(1u, (unsigned __int8 *)(v11 + 80));
      uint64_t v12 = *((void *)this + 4);
      uint64_t v4 = *((void *)this + 5) - 8;
      *((void *)this + 5) = v4;
    }
    while (a2 < (unint64_t)((v4 - v12) >> 3));
  }
  pthread_cond_broadcast(*((pthread_cond_t **)this + 3));
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 2));
}

void karo::JobManager::cancelAll(karo::JobManager *this)
{
  char i = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = 1;
  unint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = &v53;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 2));
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *((void *)this + 10);
  int64_t v5 = v4 - v3;
  if (v4 == v3)
  {
    uint64_t v12 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v6 = (char *)operator new(v5);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = v3 + v8;
      uint64_t v10 = &v6[v8];
      *(_DWORD *)uint64_t v10 = *(_DWORD *)(v3 + v8);
      *((void *)v10 + 1) = *(void *)(v3 + v8 + 8);
      uint64_t v11 = *(void *)(v3 + v8 + 16);
      *((void *)v10 + 2) = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      v8 += 24;
    }
    while (v9 + 24 != v4);
    uint64_t v12 = &v6[v8];
  }
  if (&v52 == (uint64_t ***)((char *)this + 104)) {
    goto LABEL_84;
  }
  unsigned int v13 = (char *)*((void *)this + 13);
  uint64_t v14 = (char *)this + 112;
  if (!v54)
  {
    uint64_t v27 = (char *)*((void *)this + 13);
    if (v13 == v14) {
      goto LABEL_84;
    }
    goto LABEL_67;
  }
  char v51 = i;
  uint64_t v15 = v52;
  uint64_t v52 = &v53;
  v53[2] = 0;
  unint64_t v53 = 0;
  uint64_t v54 = 0;
  if (v15[1]) {
    uint64_t v16 = v15[1];
  }
  else {
    uint64_t v16 = (uint64_t *)v15;
  }
  if (!v16)
  {
    uint64_t v27 = v13;
    goto LABEL_64;
  }
  uint64_t v17 = (uint64_t *)v16[2];
  if (v17)
  {
    uint64_t v18 = (uint64_t *)*v17;
    if ((uint64_t *)*v17 == v16)
    {
      uint64_t *v17 = 0;
      while (1)
      {
        unint64_t v50 = (uint64_t *)v17[1];
        if (!v50) {
          break;
        }
        do
        {
          uint64_t v17 = v50;
          unint64_t v50 = (uint64_t *)*v50;
        }
        while (v50);
      }
    }
    else
    {
      for (v17[1] = 0; v18; uint64_t v18 = (uint64_t *)v17[1])
      {
        do
        {
          uint64_t v17 = v18;
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
  if (v13 == v14)
  {
    uint64_t v19 = v16;
    uint64_t v27 = v13;
  }
  else
  {
    do
    {
      uint64_t v19 = v17;
      v16[4] = *((void *)v13 + 4);
      uint64_t v21 = *((void *)v13 + 5);
      uint64_t v20 = *((void *)v13 + 6);
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v22 = (std::__shared_weak_count *)v16[6];
      v16[5] = v21;
      v16[6] = v20;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v23 = v53;
      BOOL v24 = &v53;
      long long v25 = &v53;
      if (v53)
      {
        do
        {
          while (1)
          {
            BOOL v24 = (uint64_t **)v23;
            if (*(_DWORD *)(v16[4] + 20) >= *(_DWORD *)(v23[4] + 20)) {
              break;
            }
            uint64_t v23 = (uint64_t *)*v23;
            long long v25 = v24;
            if (!*v24) {
              goto LABEL_33;
            }
          }
          uint64_t v23 = (uint64_t *)v23[1];
        }
        while (v23);
        long long v25 = v24 + 1;
      }
LABEL_33:
      uint64_t *v16 = 0;
      v16[1] = 0;
      unsigned char v16[2] = (uint64_t)v24;
      *long long v25 = v16;
      if (*v52)
      {
        uint64_t v52 = (uint64_t **)*v52;
        uint64_t v16 = *v25;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v53, v16);
      ++v54;
      if (v19)
      {
        uint64_t v17 = (uint64_t *)v19[2];
        if (v17)
        {
          uint64_t v29 = (uint64_t *)*v17;
          if ((uint64_t *)*v17 == v19)
          {
            uint64_t *v17 = 0;
            while (1)
            {
              unint64_t v30 = (uint64_t *)v17[1];
              if (!v30) {
                break;
              }
              do
              {
                uint64_t v17 = v30;
                unint64_t v30 = (uint64_t *)*v30;
              }
              while (v30);
            }
          }
          else
          {
            for (v17[1] = 0; v29; uint64_t v29 = (uint64_t *)v17[1])
            {
              do
              {
                uint64_t v17 = v29;
                uint64_t v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
          }
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
      int v26 = (char *)*((void *)v13 + 1);
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          int v26 = *(char **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (char *)*((void *)v13 + 2);
          BOOL v28 = *(void *)v27 == (void)v13;
          unsigned int v13 = v27;
        }
        while (!v28);
      }
      if (!v19) {
        break;
      }
      unsigned int v13 = v27;
      uint64_t v16 = v19;
    }
    while (v27 != v14);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v19);
  if (!v17)
  {
LABEL_64:
    char i = v51;
    if (v27 == v14) {
      goto LABEL_84;
    }
    goto LABEL_67;
  }
  unint64_t v31 = (uint64_t *)v17[2];
  for (char i = v51; v31; v31 = (uint64_t *)v31[2])
    uint64_t v17 = v31;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v17);
  if (v27 == v14) {
    goto LABEL_84;
  }
  do
  {
LABEL_67:
    unsigned int v32 = (uint64_t *)operator new(0x38uLL);
    int v33 = v32;
    long long v34 = *((_OWORD *)v27 + 2);
    *((_OWORD *)v32 + 2) = v34;
    uint64_t v35 = *((void *)v27 + 6);
    v32[6] = v35;
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
    }
    double v36 = v53;
    double v37 = &v53;
    double v38 = &v53;
    if (v53)
    {
      do
      {
        while (1)
        {
          double v37 = (uint64_t **)v36;
          if (*(_DWORD *)(v34 + 20) >= *(_DWORD *)(v36[4] + 20)) {
            break;
          }
          double v36 = (uint64_t *)*v36;
          double v38 = v37;
          if (!*v37) {
            goto LABEL_76;
          }
        }
        double v36 = (uint64_t *)v36[1];
      }
      while (v36);
      double v38 = v37 + 1;
    }
LABEL_76:
    uint64_t *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v37;
    *double v38 = v32;
    if (*v52)
    {
      uint64_t v52 = (uint64_t **)*v52;
      int v33 = *v38;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v53, v33);
    ++v54;
    double v39 = (char *)*((void *)v27 + 1);
    if (v39)
    {
      do
      {
        double v40 = v39;
        double v39 = *(char **)v39;
      }
      while (v39);
    }
    else
    {
      do
      {
        double v40 = (char *)*((void *)v27 + 2);
        BOOL v28 = *(void *)v40 == (void)v27;
        uint64_t v27 = v40;
      }
      while (!v28);
    }
    uint64_t v27 = v40;
  }
  while (v40 != v14);
LABEL_84:
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 2));
  if (v7 != v12)
  {
    double v41 = v7;
    do
    {
      (*(void (**)(void *))(**((void **)v41 + 1) + 16))(*((void **)v41 + 1));
      v41 += 24;
    }
    while (v41 != v12);
  }
  double v42 = v52;
  if (v52 != &v53)
  {
    do
    {
      (*(void (**)(uint64_t *))(*v42[5] + 16))(v42[5]);
      double v43 = v42[1];
      if (v43)
      {
        do
        {
          double v44 = (uint64_t **)v43;
          double v43 = (uint64_t *)*v43;
        }
        while (v43);
      }
      else
      {
        do
        {
          double v44 = (uint64_t **)v42[2];
          BOOL v28 = *v44 == (uint64_t *)v42;
          double v42 = v44;
        }
        while (!v28);
      }
      double v42 = v44;
    }
    while (v44 != &v53);
  }
  while (1)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 2));
    double v45 = (uint64_t *)*((void *)this + 4);
    BOOL v46 = (uint64_t *)*((void *)this + 5);
    if (v45 == v46) {
      break;
    }
    char v47 = 1;
    do
    {
      uint64_t v48 = *v45++;
      v47 &= *(void *)(v48 + 56) == 0;
    }
    while (v45 != v46);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 2));
    if (v47) {
      goto LABEL_103;
    }
    usleep(0x2710u);
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 2));
LABEL_103:
  *((unsigned char *)this + 64) = i;
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(v53);
  if (v7)
  {
    if (v7 != v12)
    {
      do
      {
        double v49 = (std::__shared_weak_count *)*((void *)v12 - 1);
        if (v49)
        {
          if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v12 -= 24;
      }
      while (v12 != v7);
      uint64_t v12 = v7;
    }
    operator delete(v12);
  }
}

void karo::util::replaceIndexWithLast<karo::JobManager::QueueElement>(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  int64_t v5 = (_DWORD *)(*a1 + 24 * a2);
  _DWORD *v5 = *(_DWORD *)(v4 - 24);
  uint64_t v6 = v5 + 2;
  uint64_t v8 = *(void *)(v4 - 16);
  uint64_t v7 = *(void *)(v4 - 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  void *v6 = v8;
  uint64_t v9 = v3 + 24 * a2;
  uint64_t v10 = *(std::__shared_weak_count **)(v9 + 16);
  *(void *)(v9 + 16) = v7;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = a1[1];
  if (v11 == *a1)
  {
    if (a1[2] - v11 == -24)
    {
      for (char i = (void *)(v11 + 8); ; i += 3)
      {
        *((_DWORD *)i - 2) = 0;
        *char i = 0;
        i[1] = 0;
      }
    }
    abort();
  }
  uint64_t v12 = v11 - 24;
  do
  {
    unsigned int v13 = *(std::__shared_weak_count **)(v11 - 8);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    v11 -= 24;
  }
  while (v11 != v12);
  a1[1] = v12;
}

void std::__introsort<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *,false>(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v6 = *a2;
  unsigned int v7 = *a1;
  unsigned int v8 = *a3;
  if (*a2 >= *a1)
  {
    if (v8 < v6)
    {
      uint64_t v14 = a2 + 2;
      long long v15 = *(_OWORD *)(a2 + 2);
      *((void *)a2 + 2) = 0;
      *((void *)a2 + 1) = 0;
      *a2 = *a3;
      long long v16 = *(_OWORD *)(a3 + 2);
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
      long long v17 = (std::__shared_weak_count *)*((void *)a2 + 2);
      *(_OWORD *)(a2 + 2) = v16;
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v31 = v15;
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        long long v15 = v31;
      }
      *a3 = v6;
      uint64_t v18 = (std::__shared_weak_count *)*((void *)a3 + 2);
      *(_OWORD *)(a3 + 2) = v15;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      unsigned int v19 = *a1;
      if (*a2 < *a1)
      {
        long long v20 = *(_OWORD *)(a1 + 2);
        *((void *)a1 + 1) = 0;
        *((void *)a1 + 2) = 0;
        *a1 = *a2;
        long long v21 = *(_OWORD *)(a2 + 2);
        *uint64_t v14 = 0;
        *((void *)a2 + 2) = 0;
        uint64_t v22 = (std::__shared_weak_count *)*((void *)a1 + 2);
        *(_OWORD *)(a1 + 2) = v21;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v32 = v20;
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
          long long v20 = v32;
        }
        *a2 = v19;
        unsigned int v13 = (std::__shared_weak_count *)*((void *)a2 + 2);
        *(_OWORD *)(a2 + 2) = v20;
        if (v13) {
          goto LABEL_32;
        }
      }
    }
  }
  else
  {
    uint64_t v9 = *((void *)a1 + 1);
    uint64_t v10 = *((void *)a1 + 2);
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    if (v8 < v6)
    {
      *a1 = *a3;
      long long v11 = *(_OWORD *)(a3 + 2);
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
      unint64_t v12 = (std::__shared_weak_count *)*((void *)a1 + 2);
      *(_OWORD *)(a1 + 2) = v11;
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      *a3 = v7;
      unsigned int v13 = (std::__shared_weak_count *)*((void *)a3 + 2);
      *((void *)a3 + 1) = v9;
      *((void *)a3 + 2) = v10;
      if (!v13) {
        return;
      }
LABEL_32:
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      return;
    }
    *a1 = *a2;
    unint64_t v23 = a2 + 2;
    long long v24 = *(_OWORD *)(a2 + 2);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 1) = 0;
    unint64_t v25 = (std::__shared_weak_count *)*((void *)a1 + 2);
    *(_OWORD *)(a1 + 2) = v24;
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    *a2 = v7;
    unint64_t v26 = (std::__shared_weak_count *)*((void *)a2 + 2);
    *((void *)a2 + 1) = v9;
    *((void *)a2 + 2) = v10;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    unsigned int v27 = *a2;
    if (*a3 < *a2)
    {
      long long v28 = *(_OWORD *)(a2 + 2);
      *unint64_t v23 = 0;
      *((void *)a2 + 2) = 0;
      *a2 = *a3;
      long long v29 = *(_OWORD *)(a3 + 2);
      *((void *)a3 + 1) = 0;
      *((void *)a3 + 2) = 0;
      unsigned int v30 = (std::__shared_weak_count *)*((void *)a2 + 2);
      *(_OWORD *)(a2 + 2) = v29;
      if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v33 = v28;
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
        long long v28 = v33;
      }
      *a3 = v27;
      unsigned int v13 = (std::__shared_weak_count *)*((void *)a3 + 2);
      *(_OWORD *)(a3 + 2) = v28;
      if (v13) {
        goto LABEL_32;
      }
    }
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  unsigned int v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    long long v9 = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    long long v10 = *(_OWORD *)(a4 + 8);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    long long v11 = *(std::__shared_weak_count **)(a3 + 16);
    *(_OWORD *)(a3 + 8) = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v23 = v9;
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      long long v9 = v23;
    }
    *(_DWORD *)a4 = v8;
    unint64_t v12 = *(std::__shared_weak_count **)(a4 + 16);
    *(_OWORD *)(a4 + 8) = v9;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    unsigned int v13 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      long long v14 = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      long long v15 = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      long long v16 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v15;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v24 = v14;
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        long long v14 = v24;
      }
      *(_DWORD *)a3 = v13;
      long long v17 = *(std::__shared_weak_count **)(a3 + 16);
      *(_OWORD *)(a3 + 8) = v14;
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      unsigned int v18 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        long long v19 = *(_OWORD *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        long long v20 = *(_OWORD *)(a2 + 8);
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        long long v21 = *(std::__shared_weak_count **)(a1 + 16);
        *(_OWORD *)(a1 + 8) = v20;
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v25 = v19;
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
          long long v19 = v25;
        }
        *(_DWORD *)a2 = v18;
        uint64_t v22 = *(std::__shared_weak_count **)(a2 + 16);
        *(_OWORD *)(a2 + 8) = v19;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(a1, a2, a3, a4);
  int v10 = *(_DWORD *)a4;
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    long long v11 = *(_OWORD *)(a4 + 8);
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    long long v12 = *(_OWORD *)(a5 + 8);
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    unsigned int v13 = *(std::__shared_weak_count **)(a4 + 16);
    *(_OWORD *)(a4 + 8) = v12;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v30 = v11;
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      long long v11 = v30;
    }
    *(_DWORD *)a5 = v10;
    long long v14 = *(std::__shared_weak_count **)(a5 + 16);
    *(_OWORD *)(a5 + 8) = v11;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    int v15 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      long long v16 = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      long long v17 = *(_OWORD *)(a4 + 8);
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      unsigned int v18 = *(std::__shared_weak_count **)(a3 + 16);
      *(_OWORD *)(a3 + 8) = v17;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v31 = v16;
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        long long v16 = v31;
      }
      *(_DWORD *)a4 = v15;
      long long v19 = *(std::__shared_weak_count **)(a4 + 16);
      *(_OWORD *)(a4 + 8) = v16;
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      int v20 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        long long v21 = *(_OWORD *)(a2 + 8);
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 8) = 0;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        long long v22 = *(_OWORD *)(a3 + 8);
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        long long v23 = *(std::__shared_weak_count **)(a2 + 16);
        *(_OWORD *)(a2 + 8) = v22;
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v32 = v21;
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
          long long v21 = v32;
        }
        *(_DWORD *)a3 = v20;
        long long v24 = *(std::__shared_weak_count **)(a3 + 16);
        *(_OWORD *)(a3 + 8) = v21;
        if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        int v25 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          long long v26 = *(_OWORD *)(a1 + 8);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          long long v27 = *(_OWORD *)(a2 + 8);
          *(void *)(a2 + 8) = 0;
          *(void *)(a2 + 16) = 0;
          long long v28 = *(std::__shared_weak_count **)(a1 + 16);
          *(_OWORD *)(a1 + 8) = v27;
          if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            long long v33 = v26;
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
            long long v26 = v33;
          }
          *(_DWORD *)a2 = v25;
          long long v29 = *(std::__shared_weak_count **)(a2 + 16);
          *(_OWORD *)(a2 + 8) = v26;
          if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v6 = *(_DWORD *)a1;
      if (*(_DWORD *)(a2 - 24) < *(_DWORD *)a1)
      {
        long long v7 = *(_OWORD *)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 24);
        long long v8 = *(_OWORD *)(a2 - 16);
        *(void *)(a2 - 16) = 0;
        *(void *)(a2 - 8) = 0;
        long long v9 = *(std::__shared_weak_count **)(a1 + 16);
        *(_OWORD *)(a1 + 8) = v8;
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v26 = v7;
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          long long v7 = v26;
        }
        *(_DWORD *)(a2 - 24) = v6;
        int v10 = *(std::__shared_weak_count **)(a2 - 8);
        *(_OWORD *)(a2 - 16) = v7;
        if (v10)
        {
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)a1, (unsigned int *)(a1 + 24), (unsigned int *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      long long v11 = (unsigned int *)(a1 + 48);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)a1, (unsigned int *)(a1 + 24), (unsigned int *)(a1 + 48));
      uint64_t v12 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned int v15 = *(_DWORD *)v12;
    if (*(_DWORD *)v12 < *v11)
    {
      uint64_t v16 = *(void *)(v12 + 16);
      uint64_t v27 = *(void *)(v12 + 8);
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      uint64_t v17 = v13;
      unsigned int v18 = *v11;
      while (1)
      {
        uint64_t v19 = a1 + v17;
        *(_DWORD *)(v19 + 72) = v18;
        long long v20 = *(_OWORD *)(a1 + v17 + 56);
        *(void *)(v19 + 56) = 0;
        *(void *)(v19 + 64) = 0;
        long long v21 = *(std::__shared_weak_count **)(a1 + v17 + 88);
        *(_OWORD *)(v19 + 80) = v20;
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        if (v17 == -48) {
          break;
        }
        uint64_t v22 = a1 + v17;
        unsigned int v18 = *(_DWORD *)(a1 + v17 + 24);
        v17 -= 24;
        if (v15 >= v18)
        {
          uint64_t v23 = a1 + v17 + 72;
          long long v24 = (void *)(v22 + 56);
          goto LABEL_22;
        }
      }
      long long v24 = (void *)(a1 + 8);
      uint64_t v23 = a1;
LABEL_22:
      *(_DWORD *)uint64_t v23 = v15;
      void *v24 = v27;
      int v25 = *(std::__shared_weak_count **)(v23 + 16);
      *(void *)(v23 + 16) = v16;
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      if (++v14 == 8) {
        return v12 + 24 == a2;
      }
    }
    long long v11 = (unsigned int *)v12;
    v13 += 24;
    v12 += 24;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<std::string,md::FontTrackingScaleInfo>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 176);
  }
  return a1;
}

void altitude::AnimationList::~AnimationList(altitude::AnimationList *this)
{
  *(void *)this = &unk_1EF568B30;
  uint64_t v3 = (void *)*((void *)this + 1);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v3 == v2)
  {
    if (!v3) {
      goto LABEL_4;
    }
  }
  else
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(void))(*(void *)*v3 + 24))(*v3);
        uint64_t v2 = (void *)*((void *)this + 2);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = (void *)*((void *)this + 1);
    if (!v3)
    {
LABEL_4:
      JUMPOUT(0x1A6239270);
    }
  }
  *((void *)this + 2) = v3;
  operator delete(v3);
  goto LABEL_4;
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1EF568B30;
  uint64_t v3 = (void *)*((void *)this + 1);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v3 == v2)
  {
    if (!v3) {
      return;
    }
    goto LABEL_3;
  }
  do
  {
    if (*v3)
    {
      (*(void (**)(void))(*(void *)*v3 + 24))(*v3);
      uint64_t v2 = (void *)*((void *)this + 2);
    }
    ++v3;
  }
  while (v3 != v2);
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
LABEL_3:
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

BOOL altitude::AnimationList::isDead(altitude::AnimationList *this)
{
  return *((void *)this + 1) == *((void *)this + 2);
}

void *altitude::AnimationList::update(void *this, double a2, __n128 a3)
{
  uint64_t v3 = (void (****)(double, __n128))*((void *)this + 1);
  if (v3 != *((void (*****)(double, __n128))this + 2))
  {
    uint64_t v4 = this;
    double v5 = *((double *)this + 4);
    if (v5 == -1.0)
    {
      *((double *)this + 4) = a2;
      double v5 = a2;
    }
    (***v3)(a2 - v5, a3);
    this = (void *)(*(uint64_t (**)(void))(***((void ***)v4 + 1) + 8))(**((void **)v4 + 1));
    if (this)
    {
      unsigned int v6 = (uint64_t *)*((void *)v4 + 1);
      this = (void *)*v6;
      if (*v6)
      {
        this = (void *)(*(uint64_t (**)(void *))(*(void *)this + 24))(this);
        unsigned int v6 = (uint64_t *)*((void *)v4 + 1);
      }
      long long v7 = (uint64_t *)*((void *)v4 + 2);
      int64_t v8 = (char *)v7 - (char *)(v6 + 1);
      if (v7 != v6 + 1) {
        this = memmove(v6, v6 + 1, (char *)v7 - (char *)(v6 + 1));
      }
      *((void *)v4 + 2) = (char *)v6 + v8;
      *((void *)v4 + 4) = 0xBFF0000000000000;
    }
  }
  return this;
}

void altitude::LinearAnimation::~LinearAnimation(altitude::LinearAnimation *this)
{
  *(void *)this = &unk_1EF569068;
  uint64_t v1 = (char *)this + 8;
  uint64_t v2 = (char *)*((void *)this + 4);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
  JUMPOUT(0x1A6239270);
}

{
  char *v1;
  char *v2;

  *(void *)this = &unk_1EF569068;
  uint64_t v1 = (char *)this + 8;
  uint64_t v2 = (char *)*((void *)this + 4);
  if (v2 == v1)
  {
    (*(void (**)(char *))(*(void *)v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 40))(v2);
  }
}

uint64_t altitude::LinearAnimation::isDead(altitude::LinearAnimation *this)
{
  return *((unsigned __int8 *)this + 80);
}

void altitude::LinearAnimation::update(altitude::LinearAnimation *this, double a2, double a3)
{
  if (a2 > 0.0 && *((double *)this + 8) < a3) {
    *((double *)this + 9) = *((double *)this + 9) + a3;
  }
  double v3 = a2 - *((double *)this + 9);
  double v4 = *((double *)this + 5);
  *((unsigned char *)this + 80) = v3 >= v4;
  if (v3 < v4) {
    double v5 = (*((double *)this + 7) - *((double *)this + 6)) * v3 / v4 + *((double *)this + 6);
  }
  else {
    double v5 = *((double *)this + 7);
  }
  double v9 = v5;
  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    (*(void (**)(uint64_t, double *))(*(void *)v6 + 48))(v6, &v9);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    altitude::AnimationList::addObject(v7, v8);
  }
}

void altitude::AnimationList::addObject(void *a1, uint64_t a2)
{
  double v5 = (char *)a1[2];
  unint64_t v4 = a1[3];
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (char *)a1[1];
    uint64_t v9 = (v5 - v8) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v14 = &v13[8 * v9];
    unsigned int v15 = &v13[8 * v12];
    *int v14 = a2;
    long long v7 = v14 + 1;
    if (v5 == v8)
    {
      uint64_t v8 = v5;
    }
    else
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_29;
      }
      if ((unint64_t)(v8 - v13) < 0x20) {
        goto LABEL_29;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v6 = &v5[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
      unsigned int v18 = &v13[8 * v9 - 16];
      uint64_t v19 = v5 - 16;
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        _OWORD *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          uint64_t v22 = *((void *)v6 - 1);
          v6 -= 8;
          *--int v14 = v22;
        }
        while (v6 != v8);
        uint64_t v8 = (char *)a1[1];
      }
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)double v5 = a2;
    long long v7 = v5 + 8;
  }
  a1[2] = v7;
}

void ggl::Fog::FogPipelineState::~FogPipelineState(ggl::Fog::FogPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Fog::FogPipelineSetup::textureIsEnabled(ggl::Fog::FogPipelineSetup *this)
{
  return 0;
}

BOOL ggl::Fog::FogPipelineSetup::constantDataIsEnabled(ggl::Fog::FogPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::Fog::FogPipelineSetup::~FogPipelineSetup(ggl::Fog::FogPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::LabelTileCollisionInfo::LabelTileCollisionInfo(uint64_t result, _OWORD *a2)
{
  *(void *)BOOL result = 850045863;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(void *)(result + 56) = 0;
  long long v2 = a2[1];
  *(_OWORD *)(result + 64) = *a2;
  *(_OWORD *)(result + 80) = v2;
  *(void *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  *(void *)(result + 96) = 0;
  uint64_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v12 = result;
    uint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    int v5 = v4;
    BOOL result = v12;
    if (v5) {
      operator new();
    }
  }
  *(void *)(result + 120) = *((void *)v3 + 91);
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  *(void *)(result + 144) = 0;
  {
    uint64_t v13 = result;
    uint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    int v7 = v6;
    BOOL result = v13;
    if (v7) {
      operator new();
    }
  }
  *(void *)(result + 152) = *((void *)v3 + 91);
  *(void *)(result + 160) = 0;
  *(void *)(result + 168) = 0;
  *(void *)(result + 176) = 0;
  {
    uint64_t v14 = result;
    uint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    int v9 = v8;
    BOOL result = v14;
    if (v9) {
      operator new();
    }
  }
  *(void *)(result + 184) = *((void *)v3 + 91);
  *(void *)(result + 192) = 0;
  *(void *)(result + 200) = 0;
  *(void *)(result + 208) = 0;
  {
    uint64_t v15 = result;
    uint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    int v11 = v10;
    BOOL result = v15;
    if (v11) {
      operator new();
    }
  }
  *(void *)(result + 216) = *((void *)v3 + 91);
  *(_WORD *)(result + 224) = 0;
  return result;
}

uint64_t md::LabelTileCollisionInfo::simplifyPaths(md::LabelTileCollisionInfo *this, double a2)
{
  uint64_t v5 = *((void *)this + 12);
  uint64_t v4 = *((void *)this + 13);
  unsigned int v68 = 0;
  uint64_t v69 = 0;
  uint64_t v67 = 0;
  {
    operator new();
  }
  uint64_t v70 = mdm::Allocator::instance(void)::alloc;
  if (v4 == v5)
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t v6 = v4 - v5;
    if (v4 - v5 < 0) {
      abort();
    }
    uint64_t v7 = v6 >> 3;
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                           + 16))(mdm::Allocator::instance(void)::alloc, (unint64_t)v6 >> 1, 4);
    uint64_t v9 = 0;
    uint64_t v10 = result + 4 * v7;
    uint64_t v67 = result;
    uint64_t v69 = v10;
    do
    {
      if (result + v9) {
        *(_DWORD *)(result + v9) = 0;
      }
      v9 += 4;
    }
    while (4 * v7 != v9);
    unsigned int v68 = (unsigned int *)(result + 4 * v7);
  }
  int v11 = (unsigned int *)*((void *)this + 24);
  uint64_t v12 = (unsigned int *)*((void *)this + 25);
  if (v11 == v12)
  {
    unint64_t v13 = 0;
    unint64_t v29 = (v10 - result) >> 2;
    goto LABEL_31;
  }
  LODWORD(v13) = 0;
  do
  {
    uint64_t v15 = *v11;
    unsigned int v14 = v11[1];
    unint64_t v16 = (_DWORD *)(result + 4 * v13);
    if (v14 > 2)
    {
      uint64_t v17 = *((void *)this + 12) + 8 * v15;
      LODWORD(__b[0]) = 1;
      _DWORD *v16 = 0;
      unsigned int v18 = v14 - 1;
      geo::dpSimplifyViaIndexes<gm::Matrix<float,2,1>,unsigned int>(v17, 0, v14 - 1, (uint64_t)v16, __b, a2);
      uint64_t v19 = LODWORD(__b[0]);
      ++LODWORD(__b[0]);
      v16[v19] = v18;
      uint64_t result = v67;
      unsigned int v14 = __b[0];
      if (!LODWORD(__b[0])) {
        goto LABEL_12;
      }
    }
    else if (v14 && (_DWORD *v16 = 0, v14 != 1))
    {
      v16[1] = 1;
      LODWORD(__b[0]) = v14;
    }
    else
    {
      LODWORD(__b[0]) = v14;
      if (!v14) {
        goto LABEL_12;
      }
    }
    uint64_t v20 = v14 + v13;
    uint64_t v21 = 4 * v13;
    uint64_t v22 = (int32x4_t *)(result + v21);
    unint64_t v23 = 4 * v20 - v21 - 4;
    if (v23 >= 0x1C)
    {
      uint64_t v24 = (v23 >> 2) + 1;
      int32x4_t v25 = vdupq_n_s32(v15);
      long long v26 = v22 + 1;
      uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        int32x4_t v28 = vaddq_s32(*v26, v25);
        v26[-1] = vaddq_s32(v26[-1], v25);
        *long long v26 = v28;
        v26 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_12;
      }
      uint64_t v22 = (int32x4_t *)((char *)v22 + 4 * (v24 & 0x7FFFFFFFFFFFFFF8));
    }
    do
    {
      v22->i32[0] += v15;
      uint64_t v22 = (int32x4_t *)((char *)v22 + 4);
    }
    while (v22 != (int32x4_t *)(result + 4 * v20));
    unsigned int v14 = __b[0];
LABEL_12:
    unsigned int *v11 = v13;
    v11[1] = v14;
    v11 += 2;
    unint64_t v13 = v14 + v13;
  }
  while (v11 != v12);
  unint64_t v29 = ((uint64_t)v68 - result) >> 2;
  if (v13 > v29)
  {
    uint64_t result = std::vector<unsigned int,geo::StdAllocator<unsigned int,mdm::Allocator>>::__append((uint64_t)&v67, v13 - v29);
    goto LABEL_33;
  }
LABEL_31:
  if (v29 > v13) {
    unsigned int v68 = (unsigned int *)(result + 4 * v13);
  }
LABEL_33:
  long long v30 = (unsigned int *)v67;
  long long v31 = v68;
  unint64_t v32 = ((uint64_t)v68 - v67) >> 2;
  uint64_t v34 = *((void *)this + 20);
  long long v33 = (void *)*((void *)this + 21);
  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v33 - v34) >> 3);
  unint64_t v36 = v32 - v35;
  if (v32 <= v35)
  {
    if (v32 < v35) {
      *((void *)this + 21) = v34 + 24 * v32;
    }
  }
  else
  {
    uint64_t v37 = *((void *)this + 22);
    if (0xAAAAAAAAAAAAAAABLL * ((v37 - (uint64_t)v33) >> 3) >= v36)
    {
      unint64_t v44 = &v33[3 * v36];
      uint64_t v45 = 24 * v32 - 24 * v35;
      do
      {
        if (v33)
        {
          void *v33 = 0;
          v33[1] = 0;
          v33[2] = 0;
        }
        v33 += 3;
        v45 -= 24;
      }
      while (v45);
      *((void *)this + 21) = v44;
    }
    else
    {
      if ((unint64_t)v68 - v67 >= 0x2AAAAAAAAAAAAAACLL) {
        abort();
      }
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v34) >> 3);
      unint64_t v39 = 0x5555555555555556 * ((v37 - v34) >> 3);
      if (v39 <= v32) {
        unint64_t v39 = ((uint64_t)v68 - v67) >> 2;
      }
      if (v38 >= 0x555555555555555) {
        uint64_t v40 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        uint64_t v40 = v39;
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 23) + 16))(*((void *)this + 23), 24 * v40, 8);
      double v41 = (void *)(result + 24 * v35);
      uint64_t v42 = 24 * v32 - 24 * v35;
      unsigned int v43 = v41;
      do
      {
        if (v43)
        {
          *unsigned int v43 = 0;
          v43[1] = 0;
          v43[2] = 0;
        }
        v43 += 3;
        v42 -= 24;
      }
      while (v42);
      uint64_t v47 = *((void *)this + 20);
      uint64_t v46 = *((void *)this + 21);
      if (v46 != v47)
      {
        do
        {
          long long v48 = *(_OWORD *)(v46 - 24);
          *(v41 - 1) = *(void *)(v46 - 8);
          *(_OWORD *)(v41 - 3) = v48;
          v41 -= 3;
          v46 -= 24;
        }
        while (v46 != v47);
        uint64_t v46 = *((void *)this + 20);
      }
      *((void *)this + 20) = v41;
      *((void *)this + 21) = result + 24 * v32;
      uint64_t v49 = *((void *)this + 22);
      *((void *)this + 22) = result + 24 * v40;
      if (v46) {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 23) + 40))(*((void *)this + 23), v46, v49 - v46);
      }
    }
  }
  uint64_t v50 = *((void *)this + 12);
  if (v31 == v30)
  {
    uint64_t v65 = *((void *)this + 16);
    *((void *)this + 13) = v50;
    *((void *)this + 17) = v65;
    if (v30) {
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v51 = *((void *)this + 16);
    if (v32 <= 1) {
      uint64_t v52 = 1;
    }
    else {
      uint64_t v52 = v32;
    }
    unsigned int v53 = (double *)(*((void *)this + 20) + 16);
    long long v54 = v30;
    do
    {
      unsigned int v59 = *v54++;
      uint64_t v58 = v59;
      double v60 = *((double *)this + 10);
      double v61 = *((double *)this + 8);
      if (v60 < v61 || (v62 = *((double *)this + 11), double v63 = *((double *)this + 9), v62 < v63))
      {
        memset_pattern16(__b, &unk_1A28FFCE0, 0x10uLL);
        double v55 = *(double *)__b;
        double v56 = *(double *)&__b[1];
      }
      else
      {
        BOOL v64 = (float *)(v50 + 8 * v58);
        double v55 = v61 + (v60 - v61) * *v64;
        double v56 = v63 + (v62 - v63) * v64[1];
      }
      double v57 = *(float *)(v51 + 4 * v58);
      *(v53 - 2) = v55;
      *(v53 - 1) = v56;
      *unsigned int v53 = v57;
      v53 += 3;
      --v52;
    }
    while (v52);
    *((void *)this + 13) = v50;
    *((void *)this + 17) = v51;
LABEL_69:
    unint64_t v66 = *(uint64_t (**)(void))(*(void *)v70 + 40);
    return v66();
  }
  return result;
}

void sub_1A2480118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a12 + 40))(a12, a9, a11 - a9);
  }
  _Unwind_Resume(exception_object);
}

float std::vector<gm::Matrix<float,2,1>,geo::StdAllocator<gm::Matrix<float,2,1>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<gm::Matrix<float,2,1> const*,gm::Matrix<float,2,1> const*>(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  if (a5 < 1) {
    return *(float *)&v18;
  }
  unint64_t v6 = a3;
  uint64_t v9 = *a1;
  unint64_t v8 = a1[1];
  uint64_t v10 = a2 - *a1;
  uint64_t v11 = v10 >> 3;
  unint64_t v12 = *a1 + (v10 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = a1[2];
  if (a5 > (uint64_t)(v13 - v8) >> 3)
  {
    unint64_t v14 = a5 + ((uint64_t)(v8 - v9) >> 3);
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = v13 - v9;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v16 = v14;
    }
    if (v16) {
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 8 * v16, 4);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v23 = (void *)(v17 + 8 * v11);
    uint64_t v24 = 8 * a5;
    int32x4_t v25 = &v23[a5];
    uint64_t v26 = 8 * a5;
    uint64_t v27 = v23;
    do
    {
      if (v27) {
        *uint64_t v27 = *(void *)v6;
      }
      ++v27;
      v6 += 8;
      v26 -= 8;
    }
    while (v26);
    uint64_t v28 = *a1;
    if (*a1 == v12) {
      goto LABEL_31;
    }
    uint64_t v29 = (v10 & 0xFFFFFFFFFFFFFFF8) + v9;
    unint64_t v30 = v29 - v28 - 8;
    if (v30 >= 0x68)
    {
      unint64_t v31 = v12;
      if (v29 - ((v10 & 0xFFFFFFFFFFFFFFF8) + v17) >= 0x20)
      {
        uint64_t v32 = (v30 >> 3) + 1;
        unint64_t v31 = v12 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v33 = 8 * v11 - 16;
        uint64_t v34 = (long long *)(v9 + v33);
        unint64_t v35 = (_OWORD *)(v17 + v33);
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v18 = *v34;
          *(v35 - 1) = *(v34 - 1);
          _OWORD *v35 = v18;
          v34 -= 2;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v23 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      unint64_t v31 = v12;
    }
    do
    {
      uint64_t v37 = *(void *)(v31 - 8);
      v31 -= 8;
      *--unint64_t v23 = v37;
    }
    while (v31 != v28);
LABEL_31:
    uint64_t v38 = a1[1];
    if (v38 != v12)
    {
      uint64_t v39 = (v10 & 0xFFFFFFFFFFFFFFF8) + v9;
      unint64_t v40 = v38 - v39 - 8;
      if (v40 < 0x68) {
        goto LABEL_74;
      }
      if ((v10 & 0xFFFFFFFFFFFFFFF8) + v17 + v24 - v39 < 0x20) {
        goto LABEL_74;
      }
      uint64_t v41 = (v40 >> 3) + 1;
      uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
      v12 += v42;
      unsigned int v43 = (_OWORD *)(8 * v11 + v24 + v17 + 16);
      unint64_t v44 = (long long *)(8 * v11 + v9 + 16);
      uint64_t v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v18 = *(v44 - 1);
        long long v46 = *v44;
        *(v43 - 1) = v18;
        *unsigned int v43 = v46;
        v43 += 2;
        v44 += 2;
        v45 -= 4;
      }
      while (v45);
      int32x4_t v25 = (void *)((char *)v25 + v42);
      if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_74:
        do
        {
          uint64_t v47 = *(void *)v12;
          v12 += 8;
          *v25++ = v47;
        }
        while (v12 != v38);
      }
    }
    uint64_t v48 = *a1;
    *a1 = (uint64_t)v23;
    a1[1] = (uint64_t)v25;
    a1[2] = v17 + 8 * v16;
    if (v48)
    {
      uint64_t v49 = *(void (**)(void))(*(void *)a1[3] + 40);
      v49();
    }
    return *(float *)&v18;
  }
  uint64_t v19 = (uint64_t)(v8 - v12) >> 3;
  if (v19 >= a5)
  {
    uint64_t v20 = (void *)(a3 + 8 * a5);
    uint64_t v22 = (char *)a1[1];
    goto LABEL_44;
  }
  uint64_t v20 = (void *)(a3 + 8 * v19);
  if (v20 == a4)
  {
    uint64_t v22 = (char *)a1[1];
  }
  else
  {
    uint64_t v21 = v20;
    uint64_t v22 = (char *)a1[1];
    do
    {
      if (v22) {
        *(void *)uint64_t v22 = *v21;
      }
      ++v21;
      v22 += 8;
    }
    while (v21 != a4);
  }
  a1[1] = (uint64_t)v22;
  if ((uint64_t)(v8 - v12) >= 1)
  {
LABEL_44:
    uint64_t v50 = (char *)(v12 + 8 * a5);
    uint64_t v51 = &v22[-8 * a5];
    uint64_t v52 = v22;
    if ((unint64_t)v51 < v8)
    {
      unsigned int v53 = &v22[-8 * a5];
      uint64_t v52 = v22;
      do
      {
        if (v52) {
          *(void *)uint64_t v52 = *(void *)v53;
        }
        v53 += 8;
        v52 += 8;
      }
      while ((unint64_t)v53 < v8);
    }
    a1[1] = (uint64_t)v52;
    if (v22 != v50)
    {
      int64_t v54 = v22 - v50;
      if ((unint64_t)(v54 - 8) < 0x78
        || &v22[-(v54 & 0xFFFFFFFFFFFFFFF8)] < v51
        && v9 + v54 + (v10 & 0xFFFFFFFFFFFFFFF8) - (v54 & 0xFFFFFFFFFFFFFFF8) < (unint64_t)v22)
      {
        double v55 = v22;
        goto LABEL_54;
      }
      unint64_t v67 = ((unint64_t)(v54 - 8) >> 3) + 1;
      double v55 = &v22[-8 * (v67 & 0x3FFFFFFFFFFFFFFCLL)];
      unsigned int v68 = (const float *)(v51 - 32);
      uint64_t v69 = (float *)(v22 - 32);
      uint64_t v70 = v67 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        *(float32x4x2_t *)&long long v18 = vld2q_f32(v68);
        v68 -= 8;
        vst2q_f32(v69, *(float32x4x2_t *)&v18);
        v69 -= 8;
        v70 -= 4;
      }
      while (v70);
      if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v51 -= 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
LABEL_54:
        double v56 = v55 - 4;
        do
        {
          int v57 = *((_DWORD *)v51 - 2);
          v51 -= 8;
          *((_DWORD *)v56 - 1) = v57;
          LODWORD(v18) = *((_DWORD *)v51 + 1);
          *(_DWORD *)double v56 = v18;
          v56 -= 8;
        }
        while (v51 != (char *)v12);
      }
    }
    if (v20 == (void *)a3) {
      return *(float *)&v18;
    }
    unint64_t v58 = (unint64_t)v20 - a3 - 8;
    if (v58 >= 0x78
      && (v12 >= (v58 & 0xFFFFFFFFFFFFFFF8) + a3 + 8
       || (v10 & 0xFFFFFFFFFFFFFFF8) + v9 + (v58 & 0xFFFFFFFFFFFFFFF8) + 8 <= a3))
    {
      uint64_t v59 = (v58 >> 3) + 1;
      uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFF8);
      v12 += v60;
      double v61 = (long long *)(a3 + 32);
      double v62 = (_OWORD *)(v9 + 8 * v11 + 32);
      uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        long long v64 = *(v61 - 2);
        long long v18 = *(v61 - 1);
        long long v66 = *v61;
        long long v65 = v61[1];
        v61 += 4;
        *(v62 - 2) = v64;
        *(v62 - 1) = v18;
        _OWORD *v62 = v66;
        v62[1] = v65;
        v62 += 4;
        v63 -= 8;
      }
      while (v63);
      if (v59 == (v59 & 0x3FFFFFFFFFFFFFF8)) {
        return *(float *)&v18;
      }
      unint64_t v6 = a3 + v60;
    }
    do
    {
      *(_DWORD *)unint64_t v12 = *(_DWORD *)v6;
      LODWORD(v18) = *(_DWORD *)(v6 + 4);
      *(_DWORD *)(v12 + 4) = v18;
      v6 += 8;
      v12 += 8;
    }
    while ((void *)v6 != v20);
  }
  return *(float *)&v18;
}

float **std::vector<float,geo::StdAllocator<float,mdm::Allocator>>::insert(float **result, uint64_t a2, unint64_t a3, const float *a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = a4;
  unint64_t v6 = result;
  unint64_t v8 = *result;
  uint64_t v7 = result[1];
  uint64_t v9 = a2 - (void)*result;
  uint64_t v10 = v9 >> 2;
  uint64_t v11 = (float *)((char *)*result + (v9 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v12 = result[2];
  if (a3 > v12 - v7)
  {
    unint64_t v13 = a3 + v7 - v8;
    if (v13 >> 62) {
      abort();
    }
    uint64_t v14 = (char *)v12 - (char *)v8;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      uint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v15 = v13;
    }
    if (v15) {
      uint64_t result = (float **)(*(uint64_t (**)(float *, uint64_t, uint64_t))(*(void *)result[3] + 16))(result[3], 4 * v15, 4);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v28 = (_DWORD *)result + v10;
    uint64_t v29 = 4 * a3;
    unint64_t v30 = (float *)&v28[a3];
    uint64_t v31 = 4 * a3;
    uint64_t v32 = v28;
    do
    {
      if (v32) {
        _DWORD *v32 = *(_DWORD *)v4;
      }
      ++v32;
      v31 -= 4;
    }
    while (v31);
    uint64_t v33 = *v6;
    if (*v6 == v11) {
      goto LABEL_52;
    }
    uint64_t v34 = (uint64_t)v8 + (v9 & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v35 = v34 - (void)v33 - 4;
    if (v35 >= 0x3C)
    {
      uint64_t v36 = v11;
      if (v34 - ((unint64_t)result + (v9 & 0xFFFFFFFFFFFFFFFCLL)) >= 0x20)
      {
        uint64_t v37 = (v35 >> 2) + 1;
        uint64_t v36 = &v11[-(v37 & 0x7FFFFFFFFFFFFFF8)];
        uint64_t v38 = 4 * v10 - 16;
        uint64_t v39 = (long long *)((char *)v8 + v38);
        unint64_t v40 = (_OWORD *)((char *)result + v38);
        uint64_t v41 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *unint64_t v40 = v42;
          v39 -= 2;
          v40 -= 2;
          v41 -= 8;
        }
        while (v41);
        v28 -= v37 & 0x7FFFFFFFFFFFFFF8;
        if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_52;
        }
      }
    }
    else
    {
      uint64_t v36 = v11;
    }
    do
    {
      int v43 = *((_DWORD *)v36-- - 1);
      *--uint64_t v28 = v43;
    }
    while (v36 != v33);
LABEL_52:
    unint64_t v44 = v6[1];
    if (v44 != v11)
    {
      uint64_t v45 = (uint64_t)v8 + (v9 & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v46 = (unint64_t)v44 - v45 - 4;
      if (v46 < 0x3C) {
        goto LABEL_67;
      }
      if ((unint64_t)result + (v9 & 0xFFFFFFFFFFFFFFFCLL) + v29 - v45 < 0x20) {
        goto LABEL_67;
      }
      uint64_t v47 = (v46 >> 2) + 1;
      uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v11 = (float *)((char *)v11 + v48);
      uint64_t v49 = (_OWORD *)((char *)result + 4 * v10 + v29 + 16);
      uint64_t v50 = (long long *)&v8[v10 + 4];
      uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v52 = *v50;
        *(v49 - 1) = *(v50 - 1);
        _OWORD *v49 = v52;
        v49 += 2;
        v50 += 2;
        v51 -= 8;
      }
      while (v51);
      unint64_t v30 = (float *)((char *)v30 + v48);
      if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_67:
        do
        {
          int v53 = *(_DWORD *)v11++;
          *(_DWORD *)v30++ = v53;
        }
        while (v11 != v44);
      }
    }
    char *v6 = (float *)v28;
    v6[1] = v30;
    v6[2] = (float *)result + v15;
    if (v33)
    {
      int64_t v54 = *(uint64_t (**)(void))(*(void *)v6[3] + 40);
      return (float **)v54();
    }
    return result;
  }
  unint64_t v16 = v7 - v11;
  uint64_t v17 = 4 * a3;
  long long v18 = (char *)result[1];
  unint64_t v19 = a3;
  if (a3 <= v16)
  {
LABEL_18:
    uint64_t v21 = (char *)&v11[(unint64_t)v17 / 4];
    uint64_t v22 = (float *)&v18[-v17];
    unint64_t v23 = (float *)v18;
    if (v22 < v7)
    {
      unint64_t v23 = (float *)v18;
      do
      {
        if (v23) {
          *unint64_t v23 = *v22;
        }
        ++v22;
        ++v23;
      }
      while (v22 < v7);
    }
    result[1] = v23;
    if (v18 != v21) {
      uint64_t result = (float **)memmove(&v18[-4 * ((v18 - v21) >> 2)], v11, v18 - v21);
    }
    if (v11 <= v4)
    {
      if (v6[1] <= v4) {
        unint64_t v24 = 0;
      }
      else {
        unint64_t v24 = a3;
      }
      v4 += v24;
    }
    if (v19 >= 0xC && (v11 >= v4 + 1 || v4 >= (float *)((char *)&v8[v19] + (v9 & 0xFFFFFFFFFFFFFFFCLL))))
    {
      v11 += v19 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v25 = vld1q_dup_f32(v4);
      uint64_t v26 = (float32x4_t *)&v8[v10 + 4];
      unint64_t v27 = v19 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v26[-1] = v25;
        *uint64_t v26 = v25;
        v26 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8)) {
        return result;
      }
      v19 &= 7u;
    }
    do
    {
      *v11++ = *v4;
      --v19;
    }
    while (v19);
    return result;
  }
  unint64_t v20 = 0;
  long long v18 = (char *)&v7[a3 - v16];
  do
  {
    if (&v7[v20 / 4]) {
      v7[v20 / 4] = *a4;
    }
    v20 += 4;
  }
  while (v17 - 4 * v16 != v20);
  result[1] = (float *)v18;
  if (v7 != v11)
  {
    unint64_t v19 = v7 - v11;
    goto LABEL_18;
  }
  return result;
}

uint64_t geo::dpSimplifyViaIndexes<gm::Matrix<float,2,1>,unsigned int>(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5, double a6)
{
  uint64_t v10 = result;
  double v11 = a6 * a6;
  __asm { FMOV            V11.2S, #1.0 }
  uint64_t v17 = a3;
  while (1)
  {
    uint64_t v18 = a2 + 1;
    if (v18 >= a3)
    {
      unsigned int v22 = 0;
      float v29 = 0.0;
    }
    else
    {
      float32x2_t v19 = *(float32x2_t *)(v10 + 8 * a2);
      float32x2_t v20 = vsub_f32(*(float32x2_t *)(v10 + 8 * v17), v19);
      float32x2_t v21 = vmul_f32(v20, v20);
      unsigned int v22 = 0;
      if (vaddv_f32(v21) <= 1.0e-15)
      {
        unint64_t v30 = (float32x2_t *)(v10 + 8 * v18);
        float v31 = 0.0;
        do
        {
          float32x2_t v32 = *v30++;
          float32x2_t v33 = vsub_f32(v32, v19);
          v33.f32[0] = vaddv_f32(vmul_f32(v33, v33));
          float v29 = fmaxf(v33.f32[0], v31);
          if (v33.f32[0] > v31) {
            unsigned int v22 = v18;
          }
          LODWORD(v18) = v18 + 1;
          float v31 = v29;
        }
        while (a3 != v18);
      }
      else
      {
        float32x2_t v23 = vdiv_f32(_D11, vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v21, 1), v21));
        unint64_t v24 = (float32x2_t *)(v10 + 8 * v18);
        float v25 = 0.0;
        do
        {
          float32x2_t v26 = *v24++;
          float32x2_t v27 = vmul_f32(vsub_f32(v26, v19), v20);
          float32x2_t v28 = vsub_f32(v26, vmla_n_f32(v19, v20, fminf(fmaxf(vmul_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v27, 1), v27), v23).f32[0], 0.0), 1.0)));
          v27.f32[0] = vaddv_f32(vmul_f32(v28, v28));
          float v29 = fmaxf(v27.f32[0], v25);
          if (v27.f32[0] > v25) {
            unsigned int v22 = v18;
          }
          LODWORD(v18) = v18 + 1;
          float v25 = v29;
        }
        while (a3 != v18);
      }
    }
    if (v11 >= v29) {
      break;
    }
    uint64_t result = geo::dpSimplifyViaIndexes<gm::Matrix<float,2,1>,unsigned int>(v10, a6);
    uint64_t v34 = *a5;
    *a5 = v34 + 1;
    *(_DWORD *)(a4 + 4 * v34) = v22;
    a2 = v22;
  }
  return result;
}

void sub_1A2480C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SHIBYTE(a11) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A2480D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SHIBYTE(a11) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a12 + 40))(a12, a9, a11 & 0x7FFFFFFFFFFFFFFFLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A2480E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24813C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (*(unsigned char *)(v11 + 208))
  {
    if (*(char *)(v11 + 239) < 0) {
      operator delete(*v16);
    }
    *(unsigned char *)(v11 + 208) = 0;
    if (*(char *)(v11 + 207) < 0)
    {
LABEL_3:
      operator delete(*v15);
      if (*(char *)(v11 + 183) < 0)
      {
LABEL_9:
        operator delete(*v14);
        uint64_t v18 = *v13;
        if (*v13)
        {
LABEL_14:
          *(void *)(v11 + 128) = v18;
          operator delete(v18);
          float32x2_t v19 = *v10;
          if (!*v10) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
LABEL_12:
        float32x2_t v19 = *v10;
        if (!*v10)
        {
LABEL_16:
          std::vector<md::VenueBuilding>::~vector[abi:nn180100](v12);
          float32x2_t v20 = *(std::__shared_weak_count **)(v11 + 40);
          if (v20) {
            std::__shared_weak_count::__release_weak(v20);
          }
          std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v11);
          operator delete(v21);

          _Unwind_Resume(a1);
        }
LABEL_15:
        *(void *)(v11 + 104) = v19;
        operator delete(v19);
        goto LABEL_16;
      }
LABEL_11:
      uint64_t v18 = *v13;
      if (*v13) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }
  }
  else if (*(char *)(v11 + 207) < 0)
  {
    goto LABEL_3;
  }
  if (*(char *)(v11 + 183) < 0) {
    goto LABEL_9;
  }
  goto LABEL_11;
}

uint64_t std::__shared_ptr_emplace<md::VenueFeatureMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::VenueFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5809F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::VenueFeatureMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5809F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'altitude::CompleteGlobeTileSetCullingGraph::onChildTileRemoved(altitude::CompleteGlobeTileSetCullingGraph *this, altitude::Tile *a2, altitude::Tile *a3)
{
  uint64_t v3 = *((void *)this + 5);
  uint64_t v4 = *((void *)this + 6) - v3;
  unint64_t v5 = v4 >> 3;
  unint64_t v6 = (v4 >> 3);
  if ((v4 & 0x7FFFFFFF8) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = 0;
  while (*(altitude::Tile **)(v3 + 8 * v7) != a3)
  {
    if (v6 == ++v7) {
      goto LABEL_8;
    }
  }
  unint64_t v6 = (v5 - 1);
  *(void *)(v3 + 8 * v7) = *(void *)(v3 + 8 * v6);
  uint64_t v3 = *((void *)this + 5);
  unint64_t v5 = (*((void *)this + 6) - v3) >> 3;
  if (v6 > v5)
  {
    std::vector<altitude::TextureMap *>::__append((uint64_t)this + 40, v6 - v5);
  }
  else
  {
LABEL_8:
    if (v5 > v6) {
      *((void *)this + 6) = v3 + 8 * v6;
    }
  }
}

void non-virtual thunk to'altitude::CompleteGlobeTileSetCullingGraph::~CompleteGlobeTileSetCullingGraph(altitude::CompleteGlobeTileSetCullingGraph *this)
{
  *((void *)this - 5) = &unk_1EF56B210;
  *(void *)this = &unk_1EF56B268;
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  *((void *)this - 5) = &unk_1EF569718;
  *(void *)this = &unk_1EF569768;
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    altitude::TileManager::unregisterTileListener(v3, (uint64_t)this);
  }
  uint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
  *((void *)this - 5) = &unk_1EF567F78;
  if (*((char *)this - 9) < 0) {
    operator delete(*((void **)this - 4));
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t v3;
  void *v4;

  *((void *)this - 5) = &unk_1EF56B210;
  *(void *)this = &unk_1EF56B268;
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  *((void *)this - 5) = &unk_1EF569718;
  *(void *)this = &unk_1EF569768;
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    altitude::TileManager::unregisterTileListener(v3, (uint64_t)this);
  }
  uint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
  *((void *)this - 5) = &unk_1EF567F78;
  if (*((char *)this - 9) < 0) {
    operator delete(*((void **)this - 4));
  }
}

void altitude::CompleteGlobeTileSetCullingGraph::onChildTileRemoved(altitude::CompleteGlobeTileSetCullingGraph *this, altitude::Tile *a2, altitude::Tile *a3)
{
  uint64_t v3 = *((void *)this + 10);
  uint64_t v4 = *((void *)this + 11) - v3;
  unint64_t v5 = v4 >> 3;
  unint64_t v6 = (v4 >> 3);
  if ((v4 & 0x7FFFFFFF8) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = 0;
  while (*(altitude::Tile **)(v3 + 8 * v7) != a3)
  {
    if (v6 == ++v7) {
      goto LABEL_8;
    }
  }
  unint64_t v6 = (v5 - 1);
  *(void *)(v3 + 8 * v7) = *(void *)(v3 + 8 * v6);
  uint64_t v3 = *((void *)this + 10);
  unint64_t v5 = (*((void *)this + 11) - v3) >> 3;
  if (v6 > v5)
  {
    std::vector<altitude::TextureMap *>::__append((uint64_t)this + 80, v6 - v5);
  }
  else
  {
LABEL_8:
    if (v5 > v6) {
      *((void *)this + 11) = v3 + 8 * v6;
    }
  }
}

uint64_t altitude::CompleteGlobeTileSetCullingGraph::getAcceptedTilesCache(altitude::CompleteGlobeTileSetCullingGraph *this)
{
  return (uint64_t)this + 80;
}

uint64_t altitude::CompleteGlobeTileSetCullingGraph::cull(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

void altitude::CompleteGlobeTileSetCullingGraph::cull(altitude::CompleteGlobeTileSetCullingGraph *this, karo::graphics::View *a2, karo::graphics::Viewport *a3)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)long long v93 = 0u;
  *(_OWORD *)float v94 = 0u;
  int v95 = 1065353216;
  *(_OWORD *)unsigned int v90 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v92 = 1065353216;
  unint64_t v5 = (unint64_t *)*((void *)this + 10);
  unint64_t v6 = (unint64_t *)*((void *)this + 11);
  if (v5 != v6)
  {
    do
    {
      unint64_t v7 = *v5++;
      std::__hash_table<altitude::Tile *,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,std::allocator<altitude::Tile *>>::__emplace_unique_key_args<altitude::Tile *,altitude::Tile * const&>((float *)v93, v7, v7);
    }
    while (v5 != v6);
    unint64_t v5 = (unint64_t *)*((void *)this + 10);
  }
  *((void *)this + 11) = v5;
  uint64_t v8 = *((void *)this + 13);
  if (!v8)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unint64_t v40 = GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_144;
    }
    uint64_t v41 = (void *)((char *)this + 8);
    if (*((char *)this + 31) < 0) {
      uint64_t v41 = (void *)*v41;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v41;
    long long v42 = "No tile set attached to %s. Culling disabled!";
LABEL_110:
    _os_log_impl(&dword_1A1780000, v40, OS_LOG_TYPE_ERROR, v42, (uint8_t *)&buf, 0xCu);
    goto LABEL_144;
  }
  uint64_t v9 = *((void *)this + 6);
  if (!v9)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unint64_t v40 = GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_144;
    }
    uint64_t v63 = (void *)((char *)this + 8);
    if (*((char *)this + 31) < 0) {
      uint64_t v63 = (void *)*v63;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v63;
    long long v42 = "No tile manager attached to %s. Culling disabled!";
    goto LABEL_110;
  }
  *((unsigned char *)a2 + 1291) = *(unsigned char *)(v9 + 205);
  uint64_t v11 = *(unint64_t **)(v8 + 40);
  uint64_t v10 = *(unint64_t **)(v8 + 48);
  if (v11 == v10)
  {
    *((void *)this + 16) = 0;
    goto LABEL_112;
  }
  uint64_t v12 = *(unsigned int *)(*((void *)this + 4) + 88);
  unsigned int v88 = *(unint64_t **)(v8 + 48);
  uint64_t v89 = v12;
  do
  {
    unint64_t v14 = *v11;
    if (!*(unsigned char *)(*(void *)(*v11 + 288) + 166)) {
      goto LABEL_10;
    }
    unint64_t v15 = *(void *)(v14 + 160);
    if (!v15) {
      goto LABEL_21;
    }
    if (v15 >= 3)
    {
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(v14 + 264);
      uint64_t v18 = (karo::graphics::View **)(v17 + 16);
      while (*v18 != a2)
      {
        ++v16;
        v18 += 6;
        if (v15 == v16) {
          goto LABEL_21;
        }
      }
      float32x2_t v21 = (altitude::TileView *)(v17 + 48 * v16);
      goto LABEL_29;
    }
    if (*(karo::graphics::View **)(v14 + 184) == a2)
    {
      unsigned int v23 = 0;
LABEL_27:
      unint64_t v22 = v14 + 48 * v23;
      goto LABEL_28;
    }
    if (v15 != 1 && *(karo::graphics::View **)(v14 + 232) == a2)
    {
      unsigned int v23 = 1;
      goto LABEL_27;
    }
LABEL_21:
    *(void *)&long long buf = &unk_1EF56B5B8;
    *((void *)&buf + 1) = v14;
    uint64_t v97 = a2;
    uint64_t v98 = 1065353216;
    char v99 = 1;
    int v100 = 0;
    char v101 = 0;
    int v102 = 0;
    karo::SizedArray<altitude::TileView,2>::push_back((char *)(v14 + 160), (uint64_t)&buf);
    unint64_t v19 = *(void *)(v14 + 160);
    unint64_t v20 = v19 - 1;
    if (v19 >= 3)
    {
      float32x2_t v21 = (altitude::TileView *)(*(void *)(v14 + 264) + 48 * v20);
      goto LABEL_29;
    }
    unint64_t v22 = v14 + 48 * v20;
LABEL_28:
    float32x2_t v21 = (altitude::TileView *)(v22 + 168);
LABEL_29:
    if ((altitude::TileView::isCulled(v21, v12) & 1) == 0)
    {
      float v25 = (unint64_t *)*((void *)this + 11);
      unint64_t v24 = *((void *)this + 12);
      if ((unint64_t)v25 < v24)
      {
        *float v25 = v14;
        unint64_t v13 = v25 + 1;
      }
      else
      {
        float32x2_t v26 = (unint64_t *)*((void *)this + 10);
        uint64_t v27 = v25 - v26;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61) {
          abort();
        }
        uint64_t v29 = v24 - (void)v26;
        if (v29 >> 2 > v28) {
          unint64_t v28 = v29 >> 2;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          if (v30 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          float v31 = operator new(8 * v30);
        }
        else
        {
          float v31 = 0;
        }
        float32x2_t v32 = (unint64_t *)&v31[8 * v27];
        unint64_t *v32 = v14;
        unint64_t v13 = v32 + 1;
        if (v25 == v26)
        {
          float32x2_t v26 = v25;
        }
        else
        {
          unint64_t v33 = (char *)(v25 - 1) - (char *)v26;
          if (v33 < 0x58) {
            goto LABEL_157;
          }
          if ((unint64_t)((char *)v26 - v31) < 0x20) {
            goto LABEL_157;
          }
          uint64_t v34 = (v33 >> 3) + 1;
          unint64_t v35 = &v31[8 * v27 - 16];
          uint64_t v36 = v25 - 2;
          uint64_t v37 = v34 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v38 = *(_OWORD *)v36;
            *(v35 - 1) = *((_OWORD *)v36 - 1);
            _OWORD *v35 = v38;
            v35 -= 2;
            v36 -= 4;
            v37 -= 4;
          }
          while (v37);
          v32 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
          v25 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
          if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_157:
            do
            {
              unint64_t v39 = *--v25;
              *--float32x2_t v32 = v39;
            }
            while (v25 != v26);
            float32x2_t v26 = (unint64_t *)*((void *)this + 10);
          }
        }
        *((void *)this + 10) = v32;
        *((void *)this + 11) = v13;
        *((void *)this + 12) = &v31[8 * v30];
        if (v26) {
          operator delete(v26);
        }
        uint64_t v10 = v88;
        uint64_t v12 = v89;
      }
      *((void *)this + 11) = v13;
      std::__hash_table<altitude::Tile *,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,std::allocator<altitude::Tile *>>::__emplace_unique_key_args<altitude::Tile *,altitude::Tile * const&>((float *)v90, v14, v14);
      *(void *)(v14 + 368) = v12;
    }
LABEL_10:
    ++v11;
  }
  while (v11 != v10);
  unint64_t v44 = (unint64_t *)*((void *)this + 10);
  int v43 = (unint64_t *)*((void *)this + 11);
  *((void *)this + 16) = v43 - v44;
  if (v43 != v44)
  {
    while (1)
    {
      unint64_t v45 = *v44;
      if (v93[1])
      {
        unint64_t v46 = 0x9DDFEA08EB382D69 * (((8 * v45) + 8) ^ HIDWORD(v45));
        unint64_t v47 = 0x9DDFEA08EB382D69 * (HIDWORD(v45) ^ (v46 >> 47) ^ v46);
        unint64_t v48 = 0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47));
        uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v93[1]);
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.u32[0] > 1uLL)
        {
          unint64_t v50 = v48;
          if ((void *)v48 >= v93[1]) {
            unint64_t v50 = v48 % (unint64_t)v93[1];
          }
        }
        else
        {
          unint64_t v50 = v48 & ((unint64_t)v93[1] - 1);
        }
        uint64_t v51 = (void *)*((void *)v93[0] + v50);
        if (v51)
        {
          long long v52 = (void *)*v51;
          if (v52)
          {
            if (v49.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v54 = v52[1];
                if (v54 == v48)
                {
                  if (v52[2] == v45) {
                    goto LABEL_62;
                  }
                }
                else if ((v54 & ((uint64_t)v93[1] - 1)) != v50)
                {
                  goto LABEL_83;
                }
                long long v52 = (void *)*v52;
                if (!v52) {
                  goto LABEL_83;
                }
              }
            }
            do
            {
              unint64_t v53 = v52[1];
              if (v53 == v48)
              {
                if (v52[2] == v45) {
                  goto LABEL_62;
                }
              }
              else
              {
                if ((void *)v53 >= v93[1]) {
                  v53 %= (unint64_t)v93[1];
                }
                if (v53 != v50) {
                  break;
                }
              }
              long long v52 = (void *)*v52;
            }
            while (v52);
          }
        }
      }
LABEL_83:
      unint64_t v55 = *(void *)(v45 + 160);
      if (!v55) {
        goto LABEL_95;
      }
      if (v55 >= 3) {
        break;
      }
      if (*(karo::graphics::View **)(v45 + 184) == a2)
      {
        unsigned int v62 = 0;
        goto LABEL_102;
      }
      if (v55 != 1 && *(karo::graphics::View **)(v45 + 232) == a2)
      {
        unsigned int v62 = 1;
LABEL_102:
        unint64_t v55 = v45 + 48 * v62 + 168;
        if (*(unsigned char *)(v55 + 40)) {
          goto LABEL_97;
        }
LABEL_96:
        *(_DWORD *)(v55 + 44) = v89;
        goto LABEL_97;
      }
LABEL_92:
      unint64_t v55 = 0;
      if (!MEMORY[0x28]) {
        goto LABEL_96;
      }
LABEL_97:
      *(unsigned char *)(v55 + 40) = 1;
      uint64_t v59 = (uint64_t *)*((void *)this + 7);
      uint64_t v60 = (uint64_t *)*((void *)this + 8);
      while (v59 != v60)
      {
        uint64_t v61 = *v59++;
        (*(void (**)(uint64_t, unint64_t, karo::graphics::View *))(*(void *)v61 + 16))(v61, v45, a2);
      }
LABEL_62:
      if (++v44 == v43) {
        goto LABEL_112;
      }
    }
    uint64_t v56 = 0;
    uint64_t v57 = *(void *)(v45 + 264);
    unint64_t v58 = (karo::graphics::View **)(v57 + 16);
    while (*v58 != a2)
    {
      ++v56;
      v58 += 6;
      if (v55 == v56) {
        goto LABEL_92;
      }
    }
    unint64_t v55 = v57 + 48 * v56;
LABEL_95:
    if (!*(unsigned char *)(v55 + 40)) {
      goto LABEL_96;
    }
    goto LABEL_97;
  }
LABEL_112:
  long long v64 = v94[0];
  if (v94[0])
  {
    do
    {
      unint64_t v65 = v64[2];
      if (v90[1])
      {
        unint64_t v66 = 0x9DDFEA08EB382D69 * (((8 * v65) + 8) ^ HIDWORD(v65));
        unint64_t v67 = 0x9DDFEA08EB382D69 * (HIDWORD(v65) ^ (v66 >> 47) ^ v66);
        unint64_t v68 = 0x9DDFEA08EB382D69 * (v67 ^ (v67 >> 47));
        uint8x8_t v69 = (uint8x8_t)vcnt_s8((int8x8_t)v90[1]);
        v69.i16[0] = vaddlv_u8(v69);
        if (v69.u32[0] > 1uLL)
        {
          unint64_t v70 = v68;
          if ((void *)v68 >= v90[1]) {
            unint64_t v70 = v68 % (unint64_t)v90[1];
          }
        }
        else
        {
          unint64_t v70 = v68 & ((unint64_t)v90[1] - 1);
        }
        uint64_t v71 = (void *)*((void *)v90[0] + v70);
        if (v71)
        {
          uint64_t v72 = (void *)*v71;
          if (v72)
          {
            if (v69.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v74 = v72[1];
                if (v74 == v68)
                {
                  if (v72[2] == v65) {
                    goto LABEL_114;
                  }
                }
                else if ((v74 & ((uint64_t)v90[1] - 1)) != v70)
                {
                  goto LABEL_135;
                }
                uint64_t v72 = (void *)*v72;
                if (!v72) {
                  goto LABEL_135;
                }
              }
            }
            do
            {
              unint64_t v73 = v72[1];
              if (v73 == v68)
              {
                if (v72[2] == v65) {
                  goto LABEL_114;
                }
              }
              else
              {
                if ((void *)v73 >= v90[1]) {
                  v73 %= (unint64_t)v90[1];
                }
                if (v73 != v70) {
                  break;
                }
              }
              uint64_t v72 = (void *)*v72;
            }
            while (v72);
          }
        }
      }
LABEL_135:
      if (*(void *)(v65 + 160) < 3uLL)
      {
        uint64_t v78 = v65 + 48 * (*(void *)(v65 + 184) != (void)a2) + 168;
      }
      else
      {
        uint64_t v75 = 0;
        uint64_t v76 = *(void *)(v65 + 264);
        for (char i = (karo::graphics::View **)(v76 + 16); *i != a2; i += 6)
          ++v75;
        uint64_t v78 = v76 + 48 * v75;
      }
      *(unsigned char *)(v78 + 40) = 0;
      BOOL v79 = (uint64_t *)*((void *)this + 7);
      int64_t v80 = (uint64_t *)*((void *)this + 8);
      while (v79 != v80)
      {
        uint64_t v81 = *v79++;
        (*(void (**)(uint64_t, unint64_t, karo::graphics::View *))(*(void *)v81 + 24))(v81, v65, a2);
      }
LABEL_114:
      long long v64 = (void *)*v64;
    }
    while (v64);
  }
LABEL_144:
  int64_t v82 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v83 = (void *)*v82;
      operator delete(v82);
      int64_t v82 = v83;
    }
    while (v83);
  }
  unint64_t v84 = v90[0];
  v90[0] = 0;
  if (v84) {
    operator delete(v84);
  }
  unsigned int v85 = v94[0];
  if (v94[0])
  {
    do
    {
      unsigned int v86 = (void *)*v85;
      operator delete(v85);
      unsigned int v85 = v86;
    }
    while (v86);
  }
  unint64_t v87 = v93[0];
  v93[0] = 0;
  if (v87) {
    operator delete(v87);
  }
}

void altitude::CompleteGlobeTileSetCullingGraph::~CompleteGlobeTileSetCullingGraph(altitude::CompleteGlobeTileSetCullingGraph *this)
{
  *(void *)this = &unk_1EF56B210;
  long long v2 = (char *)this + 40;
  *((void *)this + 5) = &unk_1EF56B268;
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  *(void *)this = &unk_1EF569718;
  *((void *)this + 5) = &unk_1EF569768;
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    altitude::TileManager::unregisterTileListener(v4, (uint64_t)v2);
  }
  unint64_t v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  *(void *)this = &unk_1EF56B210;
  long long v2 = (char *)this + 40;
  *((void *)this + 5) = &unk_1EF56B268;
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  *(void *)this = &unk_1EF569718;
  *((void *)this + 5) = &unk_1EF569768;
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    altitude::TileManager::unregisterTileListener(v4, (uint64_t)v2);
  }
  unint64_t v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void non-virtual thunk to'md::LabelCustomFeatureSupport::venueStateDidChange(md::LabelCustomFeatureSupport *this)
{
  uint64_t v1 = (void *)*((void *)this + 8);
  long long v2 = (char *)this + 72;
  if (v1 != (void *)((char *)this + 72))
  {
    do
    {
      md::LabelCustomFeatureProvider::refreshFeatures((md::LabelCustomFeatureProvider *)(v1 + 5));
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != (void *)v2);
  }
}

void md::LabelCustomFeatureSupport::styleManagerDidChange(md::LabelCustomFeatureSupport *this)
{
  uint64_t v1 = (void *)*((void *)this + 9);
  long long v2 = (char *)this + 80;
  if (v1 != (void *)((char *)this + 80))
  {
    do
    {
      md::LabelCustomFeatureProvider::refreshFeatures((md::LabelCustomFeatureProvider *)(v1 + 5));
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != (void *)v2);
  }
}

void md::LabelCustomFeatureSupport::venueStateDidChange(md::LabelCustomFeatureSupport *this)
{
  uint64_t v1 = (void *)*((void *)this + 9);
  long long v2 = (char *)this + 80;
  if (v1 != (void *)((char *)this + 80))
  {
    do
    {
      md::LabelCustomFeatureProvider::refreshFeatures((md::LabelCustomFeatureProvider *)(v1 + 5));
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != (void *)v2);
  }
}

void *md::LabelCustomFeatureSupport::mapTileWasDestroyed(void *this, md::LabelMapTile *a2)
{
  uint64_t v3 = (md::LabelMapTile **)this[13];
  long long v2 = (md::LabelMapTile **)this[14];
  if (v3 != v2)
  {
    while (*v3 != a2)
    {
      if (++v3 == v2)
      {
        uint64_t v3 = (md::LabelMapTile **)this[14];
        break;
      }
    }
  }
  if (v3 != v2) {
    return md::LabelCustomFeatureSupport::removeTile(this, a2);
  }
  return this;
}

void *md::LabelCustomFeatureSupport::removeTile(void *this, md::LabelMapTile *a2)
{
  uint64_t v3 = (md::LabelMapTile **)this[14];
  uint64_t v4 = (md::LabelMapTile **)this[13];
  if (v4 != v3)
  {
    while (*v4 != a2)
    {
      if (++v4 == v3)
      {
        uint64_t v4 = (md::LabelMapTile **)this[14];
        break;
      }
    }
  }
  BOOL v5 = v4 + 1;
  BOOL v6 = v4 == v3 || v5 == v3;
  if (v6)
  {
    if (v4 != v3) {
LABEL_16:
    }
      this[14] = v4;
  }
  else
  {
    do
    {
      if (*v5 != a2) {
        *v4++ = *v5;
      }
      ++v5;
    }
    while (v5 != v3);
    if (v4 != (md::LabelMapTile **)this[14]) {
      goto LABEL_16;
    }
  }
  unint64_t v7 = (void *)this[9];
  uint64_t v8 = this + 10;
  if (v7 != this + 10)
  {
    while (1)
    {
      uint64_t v9 = v7[14];
      if (!v9) {
        break;
      }
      unsigned int v10 = *((unsigned __int8 *)a2 + 9);
      uint64_t v11 = v7 + 14;
      int v12 = *((_DWORD *)a2 + 3);
      int v13 = *((_DWORD *)a2 + 4);
      do
      {
        unsigned int v17 = *(unsigned __int8 *)(v9 + 33);
        if (v17 == v10)
        {
          int v18 = *(_DWORD *)(v9 + 40);
          BOOL v19 = v18 < v13;
          if (v18 == v13) {
            BOOL v19 = *(_DWORD *)(v9 + 36) < v12;
          }
          BOOL v14 = v19;
        }
        else
        {
          BOOL v14 = v17 < v10;
        }
        BOOL v15 = !v14;
        if (v14) {
          uint64_t v16 = (uint64_t *)(v9 + 8);
        }
        else {
          uint64_t v16 = (uint64_t *)v9;
        }
        if (v15) {
          uint64_t v11 = (void *)v9;
        }
        uint64_t v9 = *v16;
      }
      while (*v16);
      if (v11 == v7 + 14) {
        break;
      }
      unsigned int v20 = *((unsigned __int8 *)v11 + 33);
      if (v10 == v20)
      {
        int v21 = *((_DWORD *)v11 + 10);
        if (v13 == v21)
        {
          if (v12 < *((_DWORD *)v11 + 9)) {
            break;
          }
        }
        else if (v13 < v21)
        {
          break;
        }
      }
      else if (v10 < v20)
      {
        break;
      }
      unsigned int v23 = (md::LabelMapTile **)v11[15];
      unint64_t v22 = (md::LabelMapTile **)v11[16];
      unint64_t v24 = v23;
      if (v23 != v22)
      {
        while (*v24 != a2)
        {
          if (++v24 == v22)
          {
            unint64_t v24 = (md::LabelMapTile **)v11[16];
            break;
          }
        }
      }
      if (v24 != v22)
      {
        float v25 = v24 + 1;
        if (v24 + 1 != v22)
        {
          do
          {
            if (*v25 != a2) {
              *v24++ = *v25;
            }
            ++v25;
          }
          while (v25 != v22);
          unsigned int v23 = (md::LabelMapTile **)v11[15];
          unint64_t v22 = (md::LabelMapTile **)v11[16];
        }
      }
      if (v24 != v22)
      {
        unint64_t v22 = v24;
        v11[16] = v24;
      }
      if (v23 != v22) {
        break;
      }
      md::LabelCustomFeatureProvider::removeAnnotationsFromFeatureMap((md::LabelCustomFeatureProvider *)(v7 + 5), (NSArray *)v11[20], 0);
      unint64_t v28 = (void *)v11[1];
      uint64_t v29 = v11;
      if (v28)
      {
        do
        {
          unint64_t v30 = v28;
          unint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          unint64_t v30 = (void *)v29[2];
          BOOL v6 = *v30 == (void)v29;
          uint64_t v29 = v30;
        }
        while (!v6);
      }
      if ((void *)v7[13] == v11) {
        v7[13] = v30;
      }
      --v7[16];
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[14], v11);
      v11[19] = &unk_1EF559E78;

      uint64_t v31 = v11[15];
      if (v31)
      {
        v11[16] = v31;
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)v11[18] + 40))(v11[18], v31, v11[17] - v31);
      }
      this = (void *)(*(uint64_t (**)(void, void *, uint64_t))(*(void *)v7[15] + 40))(v7[15], v11, 184);
      float32x2_t v26 = (void *)v7[1];
      if (!v26)
      {
        do
        {
LABEL_71:
          uint64_t v27 = (void *)v7[2];
          BOOL v6 = *v27 == (void)v7;
          unint64_t v7 = v27;
        }
        while (!v6);
        goto LABEL_19;
      }
      do
      {
LABEL_59:
        uint64_t v27 = v26;
        float32x2_t v26 = (void *)*v26;
      }
      while (v26);
LABEL_19:
      unint64_t v7 = v27;
      if (v27 == v8) {
        return this;
      }
    }
    float32x2_t v26 = (void *)v7[1];
    if (!v26) {
      goto LABEL_71;
    }
    goto LABEL_59;
  }
  return this;
}

void std::__shared_ptr_emplace<md::LabelFeatureSupportCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelFeatureSupportCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5777A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF5777A8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0,std::allocator<md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelMapTile *)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF5777A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    md::LabelCustomFeatureProvider::~LabelCustomFeatureProvider((md::LabelCustomFeatureProvider *)(a2 + 40));

    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v4();
  }
  return result;
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelMapTileObserver>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelMapTileObserver>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelMapTileObserver>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::LabelCustomFeatureSupport::removeDataSourceInternal(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    BOOL v5 = (void *)(a1 + 80);
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= (unint64_t)v3;
      if (v6 >= (unint64_t)v3) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = v4 + 1;
      }
      if (v7) {
        BOOL v5 = v4;
      }
      uint64_t v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 != (void *)(a1 + 80) && v5[4] <= (unint64_t)v3)
    {
      uint64_t v9 = v5[24];
      if (v9)
      {
        int v10 = *(unsigned __int8 *)(v9 + 52);
        if ((v10 - 1) <= 1)
        {
          int v10 = 3;
          *(unsigned char *)(v9 + 52) = 3;
          if (*(unsigned char *)(v9 + 80) == 1)
          {
            float v11 = *(float *)(*(void *)v9 + 1504);
            float v12 = *(float *)(*(void *)v9 + 1508);
            *(_DWORD *)(v9 + 84) = 0;
            float v13 = 1.0 / sqrtf((float)(v11 * v11) + (float)(v12 * v12));
            *(float *)(v9 + 88) = v12;
            *(float *)(v9 + 92) = v13 * v11;
            *(float *)(v9 + 96) = -(float)(v12 * v13);
            *(float *)(v9 + 100) = v13;
            int v10 = 3;
          }
        }
        atomic_store((v10 - 1) < 2, (unsigned __int8 *)(v9 + 55));
      }
      id v19 = v3;
      [(id)v5[8] clearObserver];
      BOOL v14 = (void *)v5[8];
      if (v14)
      {
        v5[8] = 0;
      }
      md::LabelCustomFeatureProvider::refreshTilesWithFeatures((md::LabelCustomFeatureProvider *)(v5 + 5));
      md::LabelCustomFeatureProvider::clearFeatures((md::LabelCustomFeatureProvider *)(v5 + 5), 0);
      BOOL v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          BOOL v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        unsigned int v17 = v5;
        do
        {
          uint64_t v16 = (void *)v17[2];
          BOOL v18 = *v16 == (void)v17;
          unsigned int v17 = v16;
        }
        while (!v18);
      }
      if (*(void **)(a1 + 72) == v5) {
        *(void *)(a1 + 72) = v16;
      }
      --*(void *)(a1 + 96);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v5);
      md::LabelCustomFeatureProvider::~LabelCustomFeatureProvider((md::LabelCustomFeatureProvider *)(v5 + 5));

      (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 88) + 40))(*(void *)(a1 + 88), v5, 288);
      *(unsigned char *)(a1 + 232) = 1;
      id v3 = v19;
    }
  }
}

void sub_1A2482DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::LabelCustomFeatureSupport::~LabelCustomFeatureSupport(md::LabelCustomFeatureSupport *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 168);
  id v3 = (char *)this + 8;
  uint64_t v4 = *(void **)(v2 + 8);
  BOOL v5 = *(void **)v2;
  if (*(void **)v2 != v4)
  {
    while ((char *)*v5 != v3)
    {
      if (++v5 == v4)
      {
        BOOL v5 = *(void **)(v2 + 8);
        break;
      }
    }
  }
  unint64_t v6 = v5 + 1;
  if (v5 == v4 || v6 == v4)
  {
    if (v5 != v4) {
      goto LABEL_17;
    }
  }
  else
  {
    do
    {
      if ((char *)*v6 != v3) {
        *v5++ = *v6;
      }
      ++v6;
    }
    while (v6 != v4);
    if (v5 != *(void **)(v2 + 8))
    {
LABEL_17:
      *(void *)(v2 + 8) = v5;
      uint64_t v8 = (std::mutex *)*((void *)this + 3);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  uint64_t v8 = (std::mutex *)*((void *)this + 3);
  if (v8)
  {
LABEL_18:
    std::mutex::lock(v8);
    v8[1].__m_.__uint64_t sig = 0;
    std::mutex::unlock(v8);
  }
LABEL_19:
  while (*((void *)this + 12))
    md::LabelCustomFeatureSupport::removeDataSourceInternal((uint64_t)this, *(void **)(*((void *)this + 9) + 32));
  uint64_t v9 = (void *)*((void *)this + 24);
  if (v9)
  {
    do
    {
      int v10 = (void *)*v9;
      (*(void (**)(void))(**((void **)this + 25) + 40))(*((void *)this + 25));
      uint64_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v11) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 23) + 40))(*((void *)this + 23), v11, 8 * *((void *)this + 22));
  }
  uint64_t v12 = *((void *)this + 17);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 18);
    uint64_t v14 = *((void *)this + 17);
    if (v13 != v12)
    {
      do
      {
        BOOL v15 = *(std::__shared_weak_count **)(v13 - 8);
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v15->__on_zero_shared)(v15, v14);
          std::__shared_weak_count::__release_weak(v15);
        }
        v13 -= 16;
      }
      while (v13 != v12);
      uint64_t v14 = *((void *)this + 17);
    }
    *((void *)this + 18) = v12;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 20) + 40))(*((void *)this + 20), v14, *((void *)this + 19) - v14);
  }
  uint64_t v16 = *((void *)this + 13);
  if (v16)
  {
    *((void *)this + 14) = v16;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 40))(*((void *)this + 16), v16, *((void *)this + 15) - v16);
  }
  std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy((uint64_t)this + 72, *((void *)this + 10));
  uint64_t v17 = *((void *)this + 5);
  if (v17)
  {
    uint64_t v18 = *((void *)this + 6);
    uint64_t v19 = *((void *)this + 5);
    if (v18 != v17)
    {
      do
      {
        unsigned int v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v20->__on_zero_shared)(v20, v19);
          std::__shared_weak_count::__release_weak(v20);
        }
        v18 -= 16;
      }
      while (v18 != v17);
      uint64_t v19 = *((void *)this + 5);
    }
    *((void *)this + 6) = v17;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), v19, *((void *)this + 7) - v19);
  }
  int v21 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1A2483160(_Unwind_Exception *a1)
{
  id v3 = *(void **)(v1 + 192);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      (*(void (**)(void))(**(void **)(v1 + 200) + 40))(*(void *)(v1 + 200));
      id v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = *(void *)(v1 + 168);
  *(void *)(v1 + 168) = 0;
  if (v5)
  {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 184) + 40))(*(void *)(v1 + 184), v5, 8 * *(void *)(v1 + 176));
    uint64_t v6 = *(void *)(v1 + 136);
    if (!v6)
    {
LABEL_5:
      uint64_t v7 = *(void *)(v1 + 104);
      if (!v7) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(v1 + 136);
    if (!v6) {
      goto LABEL_5;
    }
  }
  uint64_t v12 = *(void *)(v1 + 144);
  uint64_t v13 = v6;
  if (v12 != v6)
  {
    do
    {
      uint64_t v14 = *(std::__shared_weak_count **)(v12 - 8);
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v14->__on_zero_shared)(v14, v13);
        std::__shared_weak_count::__release_weak(v14);
      }
      v12 -= 16;
    }
    while (v12 != v6);
    uint64_t v13 = *(void *)(v1 + 136);
  }
  *(void *)(v1 + 144) = v6;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 160) + 40))(*(void *)(v1 + 160), v13, *(void *)(v1 + 152) - v13);
  uint64_t v7 = *(void *)(v1 + 104);
  if (!v7)
  {
LABEL_7:
    std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy(v1 + 72, *(void *)(v1 + 80));
    uint64_t v8 = *(void *)(v1 + 40);
    if (v8)
    {
      uint64_t v9 = *(void *)(v1 + 48);
      uint64_t v10 = *(void *)(v1 + 40);
      if (v9 != v8)
      {
        do
        {
          uint64_t v11 = *(std::__shared_weak_count **)(v9 - 8);
          if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
          v9 -= 16;
        }
        while (v9 != v8);
        uint64_t v10 = *(void *)(v1 + 40);
      }
      *(void *)(v1 + 48) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 64) + 40))(*(void *)(v1 + 64), v10, *(void *)(v1 + 56) - v10);
    }
    BOOL v15 = *(std::__shared_weak_count **)(v1 + 32);
    if (v15)
    {
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  *(void *)(v1 + 112) = v7;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 128) + 40))(*(void *)(v1 + 128), v7, *(void *)(v1 + 120) - v7);
  goto LABEL_7;
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,void *>,std::__tree_node_destructor<geo::StdAllocator<void *,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      md::LabelCustomFeatureProvider::~LabelCustomFeatureProvider((md::LabelCustomFeatureProvider *)(v2 + 40));
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 288);
  }
  return a1;
}

void std::__function::__func<md::LabelCustomFeatureSupport::addDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void *std::__function::__func<md::LabelCustomFeatureSupport::addDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  void *v2 = &unk_1EF5776D0;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

void std::__function::__func<md::LabelCustomFeatureSupport::addDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<md::LabelCustomFeatureSupport::addDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::operator()(uint64_t a1)
{
}

void std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::destroy(uint64_t a1)
{
}

id std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  *a2 = &unk_1EF577718;
  a2[1] = v3;
  id result = v4;
  a2[2] = result;
  return result;
}

void *std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  void *v2 = &unk_1EF577718;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

void std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<md::LabelCustomFeatureSupport::removeDataSource(objc_object  {objcproto25VKCustomFeatureDataSource}*)::$_0,std::allocator<objc_object  {objcproto25VKCustomFeatureDataSource}*>,void ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void md::LabelCustomFeatureSupport::featureForAnnotation(void *a1, uint64_t a2, void *a3, void *a4)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  id v34 = a3;
  id v7 = a4;
  uint64_t v10 = *(void **)(a2 + 80);
  uint64_t v9 = (void *)(a2 + 80);
  uint64_t v8 = v10;
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = v9;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= (unint64_t)v34;
    if (v12 >= (unint64_t)v34) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = v8 + 1;
    }
    if (v13) {
      uint64_t v11 = v8;
    }
    uint64_t v8 = (void *)*v14;
  }
  while (*v14);
  if (v11 != v9 && v11[4] <= (unint64_t)v34)
  {
    id v15 = v7;
    id v35 = v15;
    uint64_t v16 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v35 count:1];
    md::LabelCustomFeatureProvider::addAnnotationsToFeatureMap((md::LabelCustomFeatureProvider *)(v11 + 5), v16, 1);

    uint64_t v17 = (void *)v11[22];
    if (v17)
    {
      id v18 = v17;
      v36[0] = v18;
      uint64_t v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v36 count:1];
      md::LabelCustomFeatureProvider::removeAnnotationsFromFeatureMap((md::LabelCustomFeatureProvider *)(v11 + 5), v19, 1);

      unsigned int v20 = (void *)v11[22];
      if (v20)
      {
        v11[22] = 0;
      }
    }
    id v21 = v15;
    unint64_t v22 = v21;
    if (v21) {
      id v23 = v21;
    }
    unint64_t v24 = (void *)v11[22];
    v11[22] = v22;

    uint64_t v27 = (void *)v11[31];
    float32x2_t v26 = v11 + 31;
    float v25 = v27;
    if (!v27) {
      goto LABEL_35;
    }
    unint64_t v28 = v26;
    do
    {
      unint64_t v29 = v25[4];
      BOOL v30 = v29 >= (unint64_t)v22;
      if (v29 >= (unint64_t)v22) {
        uint64_t v31 = v25;
      }
      else {
        uint64_t v31 = v25 + 1;
      }
      if (v30) {
        unint64_t v28 = v25;
      }
      float v25 = (void *)*v31;
    }
    while (*v31);
    if (v28 != v26 && v28[4] <= (unint64_t)v22 && (uint64_t v32 = v28[5]) != 0)
    {
      *a1 = v32;
      uint64_t v33 = v28[6];
      a1[1] = v33;
      if (v33) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
LABEL_35:
      *a1 = 0;
      a1[1] = 0;
    }
  }
  else
  {
LABEL_12:
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1A24838CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v38 = v1 + 136;
  uint64_t v39 = v1;
  for (uint64_t i = *(void *)(v1 + 144); i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(void *)(v39 + 144) = v2;
  uint64_t v5 = *(void **)(v39 + 72);
  if (v5 != (void *)(v39 + 80))
  {
    while (1)
    {
      if (!*((unsigned char *)v5 + 160))
      {
        id v6 = (id)v5[11];
        id v7 = [v6 globalAnnotations];

        md::LabelCustomFeatureProvider::addAnnotationsToFeatureMap((md::LabelCustomFeatureProvider *)(v5 + 5), v7, 0);
        md::LabelCustomFeatureProvider::removeAnnotationsFromFeatureMap((md::LabelCustomFeatureProvider *)(v5 + 5), (NSArray *)v5[18], 0);
        uint64_t v8 = [(NSArray *)v7 copy];
        uint64_t v9 = (void *)v5[18];
        v5[18] = v8;

        *((unsigned char *)v5 + 160) = 1;
      }
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      id v10 = (id)v5[18];
      uint64_t v11 = [v10 countByEnumeratingWithState:&v44 objects:v48 count:16];
      if (v11) {
        break;
      }
LABEL_60:

      id v35 = (void *)v5[1];
      if (v35)
      {
        do
        {
          uint64_t v36 = v35;
          id v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v36 = (void *)v5[2];
          BOOL v37 = *v36 == (void)v5;
          uint64_t v5 = v36;
        }
        while (!v37);
      }
      uint64_t v5 = v36;
      if (v36 == (void *)(v39 + 80)) {
        goto LABEL_8;
      }
    }
    uint64_t v12 = *(void *)v45;
    BOOL v13 = v5 + 31;
LABEL_14:
    uint64_t v14 = 0;
    while (1)
    {
      if (*(void *)v45 != v12) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v44 + 1) + 8 * v14);
      uint64_t v16 = v15;
      uint64_t v17 = (void *)*v13;
      if (!*v13) {
        goto LABEL_55;
      }
      id v18 = v5 + 31;
      do
      {
        unint64_t v19 = v17[4];
        BOOL v20 = v19 >= (unint64_t)v15;
        if (v19 >= (unint64_t)v15) {
          id v21 = v17;
        }
        else {
          id v21 = v17 + 1;
        }
        if (v20) {
          id v18 = v17;
        }
        uint64_t v17 = (void *)*v21;
      }
      while (*v21);
      if (v18 == v13) {
        goto LABEL_55;
      }
      if ((unint64_t)v15 < v18[4]) {
        goto LABEL_55;
      }
      id v23 = v18 + 5;
      uint64_t v22 = v18[5];
      if (!v22) {
        goto LABEL_55;
      }
      unint64_t v24 = *(void **)(v39 + 144);
      if ((unint64_t)v24 >= *(void *)(v39 + 152))
      {
        float32x2_t v26 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(v38, (long long *)(v18 + 5));
      }
      else
      {
        if (v24)
        {
          void *v24 = v22;
          uint64_t v25 = v18[6];
          v24[1] = v25;
          if (v25) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
          }
        }
        float32x2_t v26 = v24 + 2;
      }
      *(void *)(v39 + 144) = v26;
      uint64_t v27 = *v23;
      if (*(_DWORD *)(*v23 + 128)) {
        goto LABEL_55;
      }
      unint64_t v28 = (std::__shared_weak_count *)v18[6];
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v40 = 0;
      uint64_t v41 = 0;
      long long v42 = 0;
      {
        operator new();
      }
      uint64_t v43 = mdm::Allocator::instance(void)::alloc;
      unint64_t v29 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                            + 16))(mdm::Allocator::instance(void)::alloc, 16, 8);
      unint64_t v40 = v29;
      long long v42 = v29 + 2;
      if (v29)
      {
        *unint64_t v29 = v27;
        v29[1] = (uint64_t)v28;
        if (v28)
        {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v41 = (uint64_t)(v29 + 2);
          BOOL v30 = v5;
LABEL_43:
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          goto LABEL_46;
        }
        uint64_t v41 = (uint64_t)(v29 + 2);
        BOOL v30 = v5;
      }
      else
      {
        uint64_t v41 = 16;
        BOOL v30 = v5;
        if (v28) {
          goto LABEL_43;
        }
      }
LABEL_46:
      md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(v30[6] + 296), &v40);
      uint64_t v31 = v40;
      if (v40)
      {
        uint64_t v32 = (uint64_t *)v41;
        if ((uint64_t *)v41 != v40)
        {
          do
          {
            uint64_t v33 = (std::__shared_weak_count *)*(v32 - 1);
            if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
            v32 -= 2;
          }
          while (v32 != v31);
          uint64_t v31 = v40;
        }
        (*(void (**)(uint64_t, uint64_t *, int64_t))(*(void *)v43 + 40))(v43, v31, (char *)v42 - (char *)v31);
      }
LABEL_55:

      if (++v14 == v11)
      {
        uint64_t v34 = [v10 countByEnumeratingWithState:&v44 objects:v48 count:16];
        uint64_t v11 = v34;
        if (!v34) {
          goto LABEL_60;
        }
        goto LABEL_14;
      }
    }
  }
LABEL_8:
  ++*(_DWORD *)(v39 + 228);
}

void sub_1A2483E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2483E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577760;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &unk_1EF577760;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureSupport::globalFeaturesDidChange(void)::$_0>,void ()(void)>::~__func()
{
}

void md::GraphTraversalPath::~GraphTraversalPath(md::GraphTraversalPath *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void geo::_retain_ptr<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A038;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A038;

  return a1;
}

void sub_1A2484210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::LabelFeatureProviderCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelFeatureProviderCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned __int8 *)(v1 + 241) != v2)
  {
    *(unsigned char *)(v1 + 241) = v2;
    uint64_t v3 = *(void *)(v1 + 152);
    if (v3)
    {
      float v4 = md::LabelScene::setSceneID(v3, v2, 0);
      uint64_t v5 = *(void *)(v1 + 8);
      *(unsigned char *)(*(void *)v1 + 232) = 1;
      *(unsigned char *)(v5 + 3045) = 1;
      *(unsigned char *)(v5 + 3047) = 1;
      unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 3058));
      if (v6)
      {
        uint64_t v7 = *(void *)(v5 + 136);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 56);
          if (v8)
          {
            uint64_t v10 = v5;
            char v9 = 9;
            (*(void (**)(uint64_t, uint64_t *, char *, float))(*(void *)v8 + 48))(v8, &v10, &v9, v4);
          }
        }
      }
    }
  }
}

__n128 std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF577A30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_1EF577A30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneID(VKLabelSceneID)::$_0>,void ()(void)>::~__func()
{
}

void sub_1A24844F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 8);
  int v2 = *(unsigned __int8 *)(result + 16);
  if (*((unsigned __int8 *)v1 + 242) != v2)
  {
    *((unsigned char *)v1 + 242) = v2;
    uint64_t v3 = v1[19];
    if (v3)
    {
      if (v2)
      {
        if (v2 == 1)
        {
          int v4 = *(unsigned __int8 *)(v3 + 52);
          if (v4 == 3 || v4 == 0)
          {
            int v4 = 1;
            *(unsigned char *)(v3 + 52) = 1;
            if (*(unsigned char *)(v3 + 80) == 1)
            {
              float v6 = *(float *)(*(void *)v3 + 1504);
              float v7 = *(float *)(*(void *)v3 + 1508);
              *(_DWORD *)(v3 + 84) = 0;
              float v8 = 1.0 / sqrtf((float)(v6 * v6) + (float)(v7 * v7));
              *(float *)(v3 + 88) = v7;
              *(float *)(v3 + 92) = v8 * v6;
              *(float *)(v3 + 96) = -(float)(v7 * v8);
              *(float *)(v3 + 100) = v8;
              int v4 = 1;
            }
          }
        }
        else
        {
          int v4 = *(unsigned __int8 *)(v3 + 52);
        }
      }
      else
      {
        int v4 = *(unsigned __int8 *)(v3 + 52);
        if ((v4 - 1) <= 1)
        {
          int v4 = 3;
          *(unsigned char *)(v3 + 52) = 3;
          if (*(unsigned char *)(v3 + 80) == 1)
          {
            float v9 = *(float *)(*(void *)v3 + 1504);
            float v10 = *(float *)(*(void *)v3 + 1508);
            *(_DWORD *)(v3 + 84) = 0;
            float v11 = 1.0 / sqrtf((float)(v9 * v9) + (float)(v10 * v10));
            *(float *)(v3 + 88) = v10;
            *(float *)(v3 + 92) = v11 * v9;
            *(float *)(v3 + 96) = -(float)(v10 * v11);
            *(float *)(v3 + 100) = v11;
            int v4 = 3;
          }
        }
      }
      atomic_store((v4 - 1) < 2, (unsigned __int8 *)(v3 + 55));
      uint64_t v13 = *v1;
      uint64_t v12 = v1[1];
      *(unsigned char *)(v13 + 232) = 1;
      *(unsigned char *)(v12 + 3045) = 1;
      *(unsigned char *)(v12 + 3047) = 1;
      unsigned __int8 v14 = atomic_load((unsigned __int8 *)(v12 + 3058));
      if (v14)
      {
        uint64_t v15 = *(void *)(v12 + 136);
        if (v15)
        {
          __n128 result = *(void *)(v15 + 56);
          if (result)
          {
            uint64_t v17 = v12;
            char v16 = 9;
            return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(void *)result + 48))(result, &v17, &v16);
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF577A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_1EF577A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceDidChangeSceneState(VKLabelSceneState)::$_0>,void ()(void)>::~__func()
{
}

void sub_1A2484830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  *(unsigned char *)(v1 + 120) = 0;
  uint64_t v2 = *(void *)v1;
  v4[0] = &unk_1EF577760;
  v4[1] = v2;
  uint64_t v5 = v4;
  md::LabelCustomFeatureSupport::queueCommand(v2, 3, v4);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_1A2484940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577AC0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577AC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceGlobalFeaturesDidChange(void)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF577B08;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0,std::allocator<md::LabelCustomFeatureProvider::dataSourceFeaturesDidChangeForRect(GEOMapRect)::$_0>,void ()(void)>::~__func()
{
}

void sub_1A2484B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  float v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKCustomFeatureDataSourceObserverThunk;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,std::__map_value_compare<geo::QuadTile,std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,md::LabelCustomFeatureProvider::TileKeyLess,true>,geo::StdAllocator<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,std::__map_value_compare<geo::QuadTile,std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,md::LabelCustomFeatureProvider::TileKeyLess,true>,geo::StdAllocator<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,mdm::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,std::__map_value_compare<geo::QuadTile,std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,md::LabelCustomFeatureProvider::TileKeyLess,true>,geo::StdAllocator<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,mdm::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    *(void *)(a2 + 152) = &unk_1EF559E78;

    uint64_t v4 = *(void *)(a2 + 120);
    if (v4)
    {
      *(void *)(a2 + 128) = v4;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 144) + 40))(*(void *)(a2 + 144), v4, *(void *)(a2 + 136) - v4);
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

void std::__shared_ptr_emplace<md::LabelScene>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<md::LabelScene>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelScene>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void geo::_retain_ptr<NSArray<objc_object  {objcproto25VKCustomFeatureAnnotation}*> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559E58;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSArray<objc_object  {objcproto25VKCustomFeatureAnnotation}*> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559E58;

  return a1;
}

void geo::_retain_ptr<VKCustomFeatureDataSourceObserverThunk * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559D38;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKCustomFeatureDataSourceObserverThunk * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559D38;

  return a1;
}

void md::LabelCustomFeatureProvider::refreshTilesWithFeatures(md::LabelCustomFeatureProvider *this)
{
  uint64_t v1 = (char *)*((void *)this + 8);
  uint64_t v2 = (char *)this + 72;
  if (v1 != (char *)this + 72)
  {
    char v4 = 0;
    do
    {
      if (v1[176])
      {
        id v5 = *((id *)v1 + 20);
        uint64_t v6 = [v5 count];

        if (v6)
        {
          float v7 = (uint64_t *)*((void *)v1 + 15);
          float v8 = (uint64_t *)*((void *)v1 + 16);
          while (v7 != v8)
          {
            uint64_t v9 = *v7++;
            v4 |= *(unsigned char *)(v9 + 120) != 0;
            md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(*(md::LabelCustomFeatureSupport **)this, *(md::LabelMapTile **)(v9 + 72), *(std::__shared_weak_count **)(v9 + 80));
          }
        }
      }
      float v10 = (char *)*((void *)v1 + 1);
      if (v10)
      {
        do
        {
          float v11 = v10;
          float v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          float v11 = (char *)*((void *)v1 + 2);
          BOOL v12 = *(void *)v11 == (void)v1;
          uint64_t v1 = v11;
        }
        while (!v12);
      }
      uint64_t v1 = v11;
    }
    while (v11 != v2);
    if (v4)
    {
      uint64_t v13 = *((void *)this + 1);
      *(unsigned char *)(v13 + 3045) = 1;
      *(unsigned char *)(v13 + 3047) = 1;
      unsigned __int8 v14 = atomic_load((unsigned __int8 *)(v13 + 3058));
      if (v14)
      {
        uint64_t v15 = *(void *)(v13 + 136);
        if (v15)
        {
          uint64_t v16 = *(void *)(v15 + 56);
          if (v16)
          {
            uint64_t v18 = v13;
            char v17 = 9;
            (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v16 + 48))(v16, &v18, &v17);
          }
        }
      }
    }
  }
}

void sub_1A2484F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::LabelCustomFeatureProvider::~LabelCustomFeatureProvider(md::LabelCustomFeatureProvider *this)
{
  uint64_t v2 = *((void *)this + 19);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(v2 + 52);
    if ((v3 - 1) <= 1)
    {
      int v3 = 3;
      *(unsigned char *)(v2 + 52) = 3;
      if (*(unsigned char *)(v2 + 80) == 1)
      {
        float v4 = *(float *)(*(void *)v2 + 1504);
        float v5 = *(float *)(*(void *)v2 + 1508);
        *(_DWORD *)(v2 + 84) = 0;
        float v6 = 1.0 / sqrtf((float)(v4 * v4) + (float)(v5 * v5));
        *(float *)(v2 + 88) = v5;
        *(float *)(v2 + 92) = v6 * v4;
        *(float *)(v2 + 96) = -(float)(v5 * v6);
        *(float *)(v2 + 100) = v6;
        int v3 = 3;
      }
    }
    atomic_store((v3 - 1) < 2, (unsigned __int8 *)(v2 + 55));
  }
  [*((id *)this + 3) clearObserver];
  float v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 3) = 0;
  }
  md::LabelCustomFeatureProvider::refreshTilesWithFeatures(this);
  md::LabelCustomFeatureProvider::clearFeatures(this, 0);
  float v8 = (md::LabelClusterProvider *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v8)
  {
    md::LabelClusterProvider::~LabelClusterProvider(v8);
    MEMORY[0x1A6239270]();
  }
  std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::destroy((uint64_t)this + 200, *((void *)this + 26));
  uint64_t v9 = *((void *)this + 21);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 22);
    uint64_t v11 = *((void *)this + 21);
    if (v10 != v9)
    {
      do
      {
        BOOL v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v12->__on_zero_shared)(v12, v11);
          std::__shared_weak_count::__release_weak(v12);
        }
        v10 -= 16;
      }
      while (v10 != v9);
      uint64_t v11 = *((void *)this + 21);
    }
    *((void *)this + 22) = v9;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 24) + 40))(*((void *)this + 24), v11, *((void *)this + 23) - v11);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *((void *)this + 16) = &unk_1EF55A018;

  *((void *)this + 12) = &unk_1EF559E58;
  std::__tree<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,std::__map_value_compare<geo::QuadTile,std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,md::LabelCustomFeatureProvider::TileKeyLess,true>,geo::StdAllocator<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,mdm::Allocator>>::destroy((uint64_t)this + 64, *((void *)this + 9));
  *((void *)this + 5) = &unk_1EF55A038;

  *((void *)this + 2) = &unk_1EF559D38;
}

void sub_1A248521C(_Unwind_Exception *a1)
{
  int v3 = *(md::LabelClusterProvider **)(v1 + 232);
  *(void *)(v1 + 232) = 0;
  if (v3)
  {
    md::LabelClusterProvider::~LabelClusterProvider(v3);
    MEMORY[0x1A6239270]();
  }
  std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::destroy(v1 + 200, *(void *)(v1 + 208));
  uint64_t v4 = *(void *)(v1 + 168);
  if (v4)
  {
    uint64_t v5 = *(void *)(v1 + 176);
    uint64_t v6 = *(void *)(v1 + 168);
    if (v5 != v4)
    {
      do
      {
        float v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v6);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      uint64_t v6 = *(void *)(v1 + 168);
    }
    *(void *)(v1 + 176) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 192) + 40))(*(void *)(v1 + 192), v6, *(void *)(v1 + 184) - v6);
  }
  float v8 = *(std::__shared_weak_count **)(v1 + 160);
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(void *)(v1 + 128) = &unk_1EF55A018;

  *(void *)(v1 + 96) = &unk_1EF559E58;
  std::__tree<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,std::__map_value_compare<geo::QuadTile,std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,md::LabelCustomFeatureProvider::TileKeyLess,true>,geo::StdAllocator<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,mdm::Allocator>>::destroy(v1 + 64, *(void *)(v1 + 72));
  *(void *)(v1 + 40) = &unk_1EF55A038;

  *(void *)(v1 + 16) = &unk_1EF559D38;
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::PhysicalLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::PhysicalLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::PhysicalLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  int v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    BOOL v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::ARLabelIconDataRequestLogic::runBeforeLayout(int8x8_t **a1, unint64_t a2)
{
  uint64_t v3 = 0;
  unint64_t v4 = 0xCBF29CE484222325;
  unint64_t v193 = v197;
  unint64_t v194 = v197;
  uint64_t v195 = v197;
  unint64_t v196 = 4;
  uint64_t v188 = v192;
  uint64_t v189 = (unint64_t *)v192;
  int v190 = v192;
  uint64_t v191 = 4;
  unint64_t v5 = 0xCBF29CE484222325;
  uint64_t v6 = a1[15];
  do
    unint64_t v5 = 0x100000001B3 * (v5 ^ aStdStringViewG_781[v3++ + 38]);
  while (v3 != 120);
  uint64_t v185 = a1;
  char v7 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(v6, v5);
  float v8 = v7;
  uint64_t v10 = (uint64_t *)v7[7];
  char v9 = (uint64_t *)v7[8];
  uint64_t v11 = (char *)v9 - (char *)v10;
  if (v9 != v10)
  {
    if ((v12 = *((unsigned int *)v10 + 1), v13 = v7[4], unint64_t v14 = (v7[5] - v13) >> 3, v12 >> 7 >= v14)
      || (uint64_t v15 = *(void *)(v13 + 8 * (v12 >> 7))) == 0
      || (unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * (v12 & 0x7F)), v16 >= v11 >> 3)
      || ((char v17 = &v10[v16], v17 != v9) ? (_ZF = *((_DWORD *)v17 + 1) == v12) : (_ZF = 0), !_ZF))
    {
      unint64_t v19 = v10 + 1;
      if (v10 + 1 == v9)
      {
LABEL_57:
        float32x2_t v26 = v194;
        goto LABEL_58;
      }
      unint64_t v20 = v11 >> 3;
      while (1)
      {
        unint64_t v21 = *((unsigned int *)v19 + 1);
        if (v21 >> 7 < v14)
        {
          uint64_t v22 = *(void *)(v13 + 8 * (v21 >> 7));
          if (v22)
          {
            unint64_t v23 = *(unsigned __int16 *)(v22 + 2 * (v21 & 0x7F));
            if (v20 > v23)
            {
              unint64_t v24 = &v10[v23];
              if (v24 != v9 && *((_DWORD *)v24 + 1) == v21) {
                break;
              }
            }
          }
        }
        if (++v19 == v9) {
          goto LABEL_57;
        }
      }
      uint64_t v10 = v19;
    }
  }
  float32x2_t v26 = v194;
  if (v9 != v10)
  {
    while (1)
    {
      uint64_t v27 = *v10;
      unint64_t v28 = v193;
      uint64_t v29 = (v26 - (unsigned char *)v193) >> 3;
      if (v196 < v29 + 1) {
        break;
      }
LABEL_45:
      *(void *)float32x2_t v26 = v27;
      float32x2_t v26 = v194 + 8;
      v194 += 8;
      long long v47 = (uint64_t *)v8[8];
      unint64_t v48 = v10 + 1;
      if (v10 + 1 != v47)
      {
        uint64_t v49 = v8[4];
        uint64_t v50 = v8[7];
        while (1)
        {
          unint64_t v51 = *((unsigned int *)v48 + 1);
          if (v51 >> 7 < (v8[5] - v49) >> 3)
          {
            uint64_t v52 = *(void *)(v49 + 8 * (v51 >> 7));
            if (v52)
            {
              unint64_t v53 = *(unsigned __int16 *)(v52 + 2 * (v51 & 0x7F));
              if (((uint64_t)v47 - v50) >> 3 > v53)
              {
                uint64_t v54 = v50 + 8 * v53;
                if ((uint64_t *)v54 != v47 && *(_DWORD *)(v54 + 4) == v51) {
                  break;
                }
              }
            }
          }
          if (++v48 == v47) {
            goto LABEL_25;
          }
        }
        long long v47 = v48;
      }
LABEL_25:
      uint64_t v10 = v47;
      if (v9 == v47) {
        goto LABEL_58;
      }
    }
    BOOL v30 = v195;
    unint64_t v31 = (1 << -(char)__clz(v196 + 1));
    if (v196 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v32 = 1;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32 <= v29 + 1) {
      uint64_t v33 = v29 + 1;
    }
    else {
      uint64_t v33 = v32;
    }
    uint64_t v34 = malloc_type_malloc(8 * v33, 0x100004000313F17uLL);
    id v35 = (char *)v34;
    uint64_t v36 = (uint64_t *)v193;
    BOOL v37 = v194;
    if (v193 != v194)
    {
      unint64_t v38 = v194 - (unsigned char *)v193 - 8;
      if (v38 < 0x18)
      {
        uint64_t v39 = v34;
      }
      else
      {
        uint64_t v39 = v34;
        if ((unint64_t)((char *)v34 - (unsigned char *)v193) >= 0x20)
        {
          uint64_t v40 = (v38 >> 3) + 1;
          uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v39 = (void *)((char *)v34 + v41);
          long long v42 = (long long *)((char *)v193 + 16);
          uint64_t v43 = v34 + 1;
          uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *v42;
            *(v43 - 1) = *(v42 - 1);
            *uint64_t v43 = v45;
            v42 += 2;
            v43 += 2;
            v44 -= 4;
          }
          while (v44);
          if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_42;
          }
          uint64_t v36 = (uint64_t *)((char *)v36 + v41);
        }
      }
      do
      {
        uint64_t v46 = *v36++;
        *v39++ = v46;
      }
      while (v36 != (uint64_t *)v37);
    }
LABEL_42:
    if (v28 != v30) {
      free(v193);
    }
    float32x2_t v26 = &v35[8 * v29];
    unint64_t v193 = v35;
    unint64_t v194 = v26;
    unint64_t v196 = v33;
    goto LABEL_45;
  }
LABEL_58:
  uint64_t v56 = (unint64_t *)v193;
  if (v193 != v26)
  {
    do
      gdc::component::DataRequest<arComponents::LabelIconRequestData>::updateRequestStatus(v185[15], *v56++, 3);
    while (v56 != (unint64_t *)v26);
  }
  __asm { FMOV            V0.2S, #1.0 }
  float32x2_t v187 = _D0;
  int v184 = +[VKDebugSettings sharedSettings];
  [v184 arDebugStylingPOIIconScaleFactor];
  float32x2_t v187 = vmul_n_f32(v187, 1.0 / v61);
  unint64_t v194 = (char *)v193;
  unsigned int v62 = v185[15];
  uint64_t v63 = (void *)gdc::Registry::storage<arComponents::LabelIconRequestData>(v62);
  for (uint64_t i = 0; i != 118; ++i)
    unint64_t v4 = 0x100000001B3 * (v4 ^ aStdStringViewG_749[i + 38]);
  uint64_t v65 = gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(v62, v4);
  unint64_t v66 = (void *)v65;
  uint64_t v67 = v65 + 32;
  uint64_t v69 = v63[7];
  uint64_t v68 = v63[8];
  if (*(void *)(v65 + 64) - *(void *)(v65 + 56) >= (unint64_t)(v68 - v69)) {
    unint64_t v70 = v63 + 4;
  }
  else {
    unint64_t v70 = (void *)(v65 + 32);
  }
  if (v63 + 4 == v70)
  {
    uint64_t v198 = v185;
    uint64_t v199 = &v187;
    int v200 = &v188;
    unint64_t v201 = a2;
    v202[0] = &v193;
    if (v69 != v68)
    {
      int v114 = (void *)v63[10];
      do
      {
        unint64_t v115 = *(unsigned int *)(v69 + 4);
        uint64_t v116 = v66[4];
        if (v115 >> 7 < (v66[5] - v116) >> 3)
        {
          uint64_t v117 = *(void *)(v116 + 8 * (v115 >> 7));
          if (v117)
          {
            unint64_t v118 = *(unsigned __int16 *)(v117 + 2 * (v115 & 0x7F));
            uint64_t v120 = v66[7];
            uint64_t v119 = v66[8];
            if (v118 < (v119 - v120) >> 3)
            {
              uint64_t v121 = v120 + 8 * v118;
              if (v121 != v119 && *(_DWORD *)(v121 + 4) == v115) {
                _ZZN2md27ARLabelIconDataRequestLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_29ARLabelIconDataRequestContextEENK3__0clENS5_6EntityERN12arComponents20LabelIconRequestDataE((uint64_t *)&v198, *(void *)v69, v114);
              }
            }
          }
        }
        v114 += 2;
        v69 += 8;
      }
      while (v69 != v68);
    }
  }
  if ((void *)v67 == v70)
  {
    uint64_t v198 = v185;
    uint64_t v199 = &v187;
    int v200 = &v188;
    unint64_t v201 = a2;
    v202[0] = &v193;
    uint64_t v123 = v66[7];
    uint64_t v124 = v66[8];
    while (v123 != v124)
    {
      unint64_t v126 = *(unsigned int *)(v123 + 4);
      uint64_t v127 = v63[4];
      unint64_t v128 = (v63[5] - v127) >> 3;
      if (v126 >> 7 < v128)
      {
        uint64_t v129 = *(void *)(v127 + 8 * (v126 >> 7));
        if (v129)
        {
          unint64_t v130 = *(unsigned __int16 *)(v129 + 2 * (v126 & 0x7F));
          uint64_t v132 = v63[7];
          uint64_t v131 = v63[8];
          unint64_t v133 = (v131 - v132) >> 3;
          if (v133 > v130)
          {
            uint64_t v134 = v132 + 8 * v130;
            if (v134 != v131 && *(_DWORD *)(v134 + 4) == v126)
            {
              unint64_t v136 = *(void *)v123;
              unint64_t v137 = *(void *)v123 >> 39;
              if (v137 < v128
                && (uint64_t v138 = *(void *)(v127 + 8 * v137)) != 0
                && (unint64_t v139 = *(unsigned __int16 *)(v138 + 2 * (HIDWORD(v136) & 0x7F)), v133 > v139)
                && ((uint64_t v140 = v132 + 8 * v139, v140 != v131)
                  ? (BOOL v141 = *(_DWORD *)(v140 + 4) == HIDWORD(v136))
                  : (BOOL v141 = 0),
                    v141))
              {
                double v125 = (void *)(v63[10] + 16 * v139);
              }
              else
              {
                double v125 = (void *)v63[11];
              }
              _ZZN2md27ARLabelIconDataRequestLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_29ARLabelIconDataRequestContextEENK3__0clENS5_6EntityERN12arComponents20LabelIconRequestDataE((uint64_t *)&v198, v136, v125);
            }
          }
        }
      }
      v123 += 8;
    }
  }
  uint64_t v71 = (unint64_t *)v188;
  uint64_t v72 = v189;
  if (v188 != v189)
  {
    do
      gdc::component::DataRequest<arComponents::LabelIconRequestData>::updateRequestStatus(v185[15], *v71++, 4);
    while (v71 != v72);
  }
  unint64_t v73 = (unint64_t *)v193;
  uint64_t v74 = (unint64_t *)v194;
  if (v193 != v194)
  {
    do
      gdc::component::DataRequest<arComponents::LabelIconRequestData>::updateRequestStatus(v185[15], *v73++, 3);
    while (v73 != v74);
  }
  uint64_t v75 = v185[15];
  uint64_t v198 = (int8x8_t **)v202;
  uint64_t v199 = (float32x2_t *)v202;
  int v200 = (void **)v202;
  unint64_t v201 = 4;
  uint64_t v76 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(v75);
  uint64_t v77 = gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>(v75);
  uint64_t v78 = (void *)v77;
  uint64_t v80 = v76[7];
  uint64_t v79 = v76[8];
  uint64_t v186 = v77 + 32;
  if (*(void *)(v77 + 64) - *(void *)(v77 + 56) >= (unint64_t)(v79 - v80)) {
    uint64_t v81 = v76 + 4;
  }
  else {
    uint64_t v81 = (void *)(v77 + 32);
  }
  int v183 = v81;
  if (v76 + 4 == v81 && v80 != v79)
  {
    unsigned int v86 = (unsigned __int8 *)v76[10];
    while (1)
    {
      unint64_t v88 = *(unsigned int *)(v80 + 4);
      uint64_t v89 = v78[4];
      if (v88 >> 7 >= (v78[5] - v89) >> 3) {
        goto LABEL_92;
      }
      uint64_t v90 = *(void *)(v89 + 8 * (v88 >> 7));
      if (!v90) {
        goto LABEL_92;
      }
      unint64_t v91 = *(unsigned __int16 *)(v90 + 2 * (v88 & 0x7F));
      uint64_t v93 = v78[7];
      uint64_t v92 = v78[8];
      if (v91 >= (v92 - v93) >> 3) {
        goto LABEL_92;
      }
      uint64_t v94 = v93 + 8 * v91;
      if (v94 == v92 || *(_DWORD *)(v94 + 4) != v88) {
        goto LABEL_92;
      }
      size_t v96 = *(void *)v80;
      gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(v75, *(void *)v80, *v86);
      uint64_t v97 = (void **)v198;
      unint64_t v87 = v199;
      unint64_t v98 = (((char *)v199 - (char *)v198) >> 3) + 1;
      if (v201 < v98) {
        break;
      }
LABEL_91:
      float32x2_t *v87 = (float32x2_t)v96;
      ++v199;
LABEL_92:
      ++v86;
      v80 += 8;
      if (v80 == v79) {
        goto LABEL_79;
      }
    }
    float v180 = v200;
    uint64_t v181 = ((char *)v199 - (char *)v198) >> 3;
    unint64_t v99 = (1 << -(char)__clz(v201 + 1));
    if (v201 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v99 = 1;
    }
    if (v99 <= v98) {
      uint64_t v100 = (((char *)v199 - (char *)v198) >> 3) + 1;
    }
    else {
      uint64_t v100 = v99;
    }
    char v101 = malloc_type_malloc(8 * v100, 0x100004000313F17uLL);
    int v102 = (int8x8_t **)v101;
    uint64_t v103 = v198;
    long long v104 = v199;
    if (v198 != (int8x8_t **)v199)
    {
      unint64_t v105 = (char *)v199 - (char *)v198 - 8;
      if (v105 < 0x18)
      {
        int v106 = v101;
      }
      else
      {
        int v106 = v101;
        if ((unint64_t)((char *)v101 - (char *)v198) >= 0x20)
        {
          uint64_t v107 = (v105 >> 3) + 1;
          uint64_t v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
          int v106 = (void *)((char *)v101 + v108);
          long long v109 = (long long *)(v198 + 2);
          uint64_t v110 = v101 + 1;
          uint64_t v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v112 = *v109;
            *(v110 - 1) = *(v109 - 1);
            _OWORD *v110 = v112;
            v109 += 2;
            v110 += 2;
            v111 -= 4;
          }
          while (v111);
          if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_116;
          }
          uint64_t v103 = (int8x8_t **)((char *)v103 + v108);
        }
      }
      do
      {
        uint64_t v113 = (uint64_t)*v103++;
        *v106++ = v113;
      }
      while (v103 != (int8x8_t **)v104);
    }
LABEL_116:
    if (v97 != v180) {
      free(v198);
    }
    unint64_t v87 = (float32x2_t *)&v102[v181];
    uint64_t v198 = v102;
    uint64_t v199 = v87;
    unint64_t v201 = v100;
    goto LABEL_91;
  }
LABEL_79:
  if ((void *)v186 == v183)
  {
    uint64_t v142 = v78[7];
    uint64_t v143 = v78[8];
    while (1)
    {
      if (v142 == v143) {
        goto LABEL_80;
      }
      unint64_t v145 = *(unsigned int *)(v142 + 4);
      uint64_t v146 = v76[4];
      unint64_t v147 = (v76[5] - v146) >> 3;
      if (v145 >> 7 < v147)
      {
        uint64_t v148 = *(void *)(v146 + 8 * (v145 >> 7));
        if (v148)
        {
          unint64_t v149 = *(unsigned __int16 *)(v148 + 2 * (v145 & 0x7F));
          uint64_t v151 = v76[7];
          uint64_t v150 = v76[8];
          unint64_t v152 = (v150 - v151) >> 3;
          if (v152 > v149)
          {
            uint64_t v153 = v151 + 8 * v149;
            if (v153 != v150 && *(_DWORD *)(v153 + 4) == v145) {
              break;
            }
          }
        }
      }
LABEL_155:
      v142 += 8;
    }
    size_t v155 = *(void *)v142;
    unint64_t v156 = *(void *)v142 >> 39;
    if (v156 < v147
      && (uint64_t v157 = *(void *)(v146 + 8 * v156)) != 0
      && (unint64_t v158 = *(unsigned __int16 *)(v157 + 2 * (HIDWORD(v155) & 0x7F)), v152 > v158)
      && ((v159 = v151 + 8 * v158, v159 != v150) ? (BOOL v160 = *(_DWORD *)(v159 + 4) == HIDWORD(v155)) : (BOOL v160 = 0), v160))
    {
      uint64_t v161 = (unsigned __int8 *)(v76[10] + v158);
    }
    else
    {
      uint64_t v161 = (unsigned __int8 *)v76[11];
    }
    gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(v75, *(void *)v142, *v161);
    int v162 = (void **)v198;
    float v144 = v199;
    uint64_t v163 = ((char *)v199 - (char *)v198) >> 3;
    if (v201 >= v163 + 1)
    {
LABEL_154:
      *float v144 = (float32x2_t)v155;
      ++v199;
      goto LABEL_155;
    }
    double v164 = v200;
    unint64_t v165 = (1 << -(char)__clz(v201 + 1));
    if (v201 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v165 = 1;
    }
    if (v165 <= v163 + 1) {
      uint64_t v166 = v163 + 1;
    }
    else {
      uint64_t v166 = v165;
    }
    unint64_t v167 = malloc_type_malloc(8 * v166, 0x100004000313F17uLL);
    int v168 = (int8x8_t **)v167;
    int v169 = v198;
    int v170 = v199;
    if (v198 != (int8x8_t **)v199)
    {
      unint64_t v171 = (char *)v199 - (char *)v198 - 8;
      if (v171 < 0x18)
      {
        float v172 = v167;
      }
      else
      {
        float v172 = v167;
        if ((unint64_t)((char *)v167 - (char *)v198) >= 0x20)
        {
          uint64_t v173 = (v171 >> 3) + 1;
          uint64_t v174 = 8 * (v173 & 0x3FFFFFFFFFFFFFFCLL);
          float v172 = (void *)((char *)v167 + v174);
          uint64_t v175 = (long long *)(v198 + 2);
          int v176 = v167 + 1;
          uint64_t v177 = v173 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v178 = *v175;
            *(v176 - 1) = *(v175 - 1);
            *int v176 = v178;
            v175 += 2;
            v176 += 2;
            v177 -= 4;
          }
          while (v177);
          if (v173 == (v173 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_189;
          }
          int v169 = (int8x8_t **)((char *)v169 + v174);
        }
      }
      do
      {
        uint64_t v179 = (uint64_t)*v169++;
        *v172++ = v179;
      }
      while (v169 != (int8x8_t **)v170);
    }
LABEL_189:
    if (v162 != v164) {
      free(v198);
    }
    float v144 = (float32x2_t *)&v168[v163];
    uint64_t v198 = v168;
    uint64_t v199 = v144;
    unint64_t v201 = v166;
    goto LABEL_154;
  }
LABEL_80:
  unint64_t v84 = (unint64_t *)v198;
  uint64_t v83 = (unint64_t *)v199;
  if (v198 != (int8x8_t **)v199)
  {
    do
    {
      unsigned int v85 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>(v75);
      gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>::remove(v85, *v84++);
    }
    while (v84 != v83);
    unint64_t v84 = (unint64_t *)v198;
  }
  if (v84 != (unint64_t *)v200) {
    free(v84);
  }

  if (v188 != v190) {
    free(v188);
  }
  if (v193 != v195) {
    free(v193);
  }
}

void sub_1A2485FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26)
{
  if (a16 != a18) {
    free(a16);
  }
  if (a24 != a26) {
    free(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(int8x8_t *a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int8x8_t v2 = a1[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*(void *)&a1[15] + 8 * v4);
  if (!v5 || (uint64_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6[3];
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6[3];
}

void sub_1A24862D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::component::DataRequest<arComponents::LabelIconRequestData>::updateRequestStatus(int8x8_t *a1, unint64_t a2, int a3)
{
  uint64_t v6 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(a1);
  uint64_t v7 = v6[4];
  if (a2 >> 39 < (v6[5] - v7) >> 3)
  {
    uint64_t v8 = *(void *)(v7 + 8 * (a2 >> 39));
    if (v8)
    {
      unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v11 = v6[7];
      uint64_t v10 = v6[8];
      if (v9 < (v10 - v11) >> 3)
      {
        uint64_t v12 = v11 + 8 * v9;
        if (v12 != v10 && *(_DWORD *)(v12 + 4) == HIDWORD(a2))
        {
          uint64_t v14 = v6[10];
          uint64_t v15 = (unsigned char *)(v14 + v9);
          if (v14 + v9 != v6[11] && v14 != 0)
          {
            int v17 = *v15;
            if (v17 != a3)
            {
              gdc::component::DataRequest<arComponents::LabelIconRequestData>::_removeStatusTag(a1, a2, v17);
              if (a3 == 4)
              {
                uint64_t v26 = 0;
                unint64_t v27 = 0xCBF29CE484222325;
                do
                  unint64_t v27 = 0x100000001B3 * (v27 ^ aStdStringViewG_751[v26++ + 38]);
                while (v26 != 120);
                unint64_t v28 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(a1, v27);
                unint64_t v61 = a2;
                uint64_t v29 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v28 + 4, (uint64_t)&v61);
                if (v30)
                {
                  unint64_t v38 = (unsigned char *)v28[11];
                  unint64_t v37 = v28[12];
                  if ((unint64_t)v38 >= v37)
                  {
                    uint64_t v46 = (char *)v28[10];
                    uint64_t v47 = v38 - v46;
                    uint64_t v48 = v38 - v46 + 1;
                    if (v48 < 0) {
                      goto LABEL_74;
                    }
                    unint64_t v49 = v37 - (void)v46;
                    if (2 * v49 > v48) {
                      uint64_t v48 = 2 * v49;
                    }
                    if (v49 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v50 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v50 = v48;
                    }
                    if (v50) {
                      unint64_t v51 = (char *)operator new(v50);
                    }
                    else {
                      unint64_t v51 = 0;
                    }
                    uint64_t v56 = &v51[v50];
                    uint64_t v39 = (uint64_t)&v51[v47 + 1];
                    uint64_t v57 = (char *)(v46 - v38);
                    if (v46 == v38) {
                      uint64_t v57 = 0;
                    }
                    v28[10] = &v51[v47 + (void)v57];
                    v28[11] = v39;
                    v28[12] = v56;
                    if (v46) {
                      operator delete(v46);
                    }
                  }
                  else
                  {
                    uint64_t v39 = (uint64_t)(v38 + 1);
                  }
                  v28[11] = v39;
                  uint64_t v31 = v28[31];
                }
                else
                {
                  uint64_t v31 = v28[31];
                  if (v28[10] + (((uint64_t)v29 - v28[7]) >> 3) != v28[11])
                  {
                    unint64_t v32 = (void *)v28[16];
                    if (v32)
                    {
                      while (1)
                      {
                        uint64_t v63 = &v61;
                        uint64_t v64 = 1;
                        uint64_t v62 = v31;
                        uint64_t v33 = v32[6];
                        if (!v33) {
                          goto LABEL_73;
                        }
                        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v33 + 48))(v33, &v62, &v63);
                        unint64_t v32 = (void *)*v32;
                        if (!v32) {
                          goto LABEL_71;
                        }
                      }
                    }
                    goto LABEL_71;
                  }
                }
                for (uint64_t i = (void *)v28[22]; i; uint64_t i = (void *)*i)
                {
                  uint64_t v63 = &v61;
                  uint64_t v64 = 1;
                  uint64_t v62 = v31;
                  uint64_t v59 = i[6];
                  if (!v59) {
                    goto LABEL_73;
                  }
                  (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v59 + 48))(v59, &v62, &v63);
                }
              }
              else if (a3 == 3)
              {
                uint64_t v18 = 0;
                unint64_t v19 = 0xCBF29CE484222325;
                do
                  unint64_t v19 = 0x100000001B3 * (v19 ^ aStdStringViewG_749[v18++ + 38]);
                while (v18 != 118);
                unint64_t v20 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(a1, v19);
                unint64_t v61 = a2;
                unint64_t v21 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v20 + 4, (uint64_t)&v61);
                if (v22)
                {
                  id v35 = (unsigned char *)v20[11];
                  unint64_t v34 = v20[12];
                  if ((unint64_t)v35 >= v34)
                  {
                    uint64_t v40 = (char *)v20[10];
                    uint64_t v41 = v35 - v40;
                    uint64_t v42 = v35 - v40 + 1;
                    if (v42 < 0) {
                      goto LABEL_74;
                    }
                    unint64_t v43 = v34 - (void)v40;
                    if (2 * v43 > v42) {
                      uint64_t v42 = 2 * v43;
                    }
                    if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v44 = v42;
                    }
                    if (v44) {
                      long long v45 = (char *)operator new(v44);
                    }
                    else {
                      long long v45 = 0;
                    }
                    uint64_t v52 = &v45[v44];
                    uint64_t v36 = (uint64_t)&v45[v41 + 1];
                    unint64_t v53 = (char *)(v40 - v35);
                    if (v40 == v35) {
                      unint64_t v53 = 0;
                    }
                    v20[10] = &v45[v41 + (void)v53];
                    v20[11] = v36;
                    v20[12] = v52;
                    if (v40) {
                      operator delete(v40);
                    }
                  }
                  else
                  {
                    uint64_t v36 = (uint64_t)(v35 + 1);
                  }
                  v20[11] = v36;
                  uint64_t v23 = v20[31];
                }
                else
                {
                  uint64_t v23 = v20[31];
                  if (v20[10] + (((uint64_t)v21 - v20[7]) >> 3) != v20[11])
                  {
                    unint64_t v24 = (void *)v20[16];
                    if (v24)
                    {
                      while (1)
                      {
                        uint64_t v63 = &v61;
                        uint64_t v64 = 1;
                        uint64_t v62 = v23;
                        uint64_t v25 = v24[6];
                        if (!v25) {
                          break;
                        }
                        (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v25 + 48))(v25, &v62, &v63);
                        unint64_t v24 = (void *)*v24;
                        if (!v24) {
                          goto LABEL_71;
                        }
                      }
LABEL_73:
                      std::__throw_bad_function_call[abi:nn180100]();
LABEL_74:
                      abort();
                    }
                    goto LABEL_71;
                  }
                }
                for (unint64_t j = (void *)v20[22]; j; unint64_t j = (void *)*j)
                {
                  uint64_t v63 = &v61;
                  uint64_t v64 = 1;
                  uint64_t v62 = v23;
                  uint64_t v55 = j[6];
                  if (!v55) {
                    goto LABEL_73;
                  }
                  (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v55 + 48))(v55, &v62, &v63);
                }
              }
LABEL_71:
              unsigned char *v15 = a3;
              uint64_t v60 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>(a1);
              gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v60, a2);
            }
          }
        }
      }
    }
  }
}

uint64_t gdc::Registry::storage<arComponents::LabelIconRequestData>(int8x8_t *a1)
{
  uint64_t v10 = 0x7EF75512B090372ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7EF75512B090372ELL;
    if (*(void *)&v1 <= 0x7EF75512B090372EuLL) {
      uint64_t v3 = 0x7EF75512B090372EuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7EF75512B090372ELL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7EF75512B090372ELL)
      {
        if (v5[2] == 0x7EF75512B090372ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7EF75512B090372ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7EF75512B090372ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A24869AC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(int8x8_t *a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int8x8_t v2 = a1[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*(void *)&a1[15] + 8 * v4);
  if (!v5 || (uint64_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6[3];
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6[3];
}

void sub_1A2486C5C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void _ZZN2md27ARLabelIconDataRequestLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJEEES7_EE20ResolvedDependenciesERNS_29ARLabelIconDataRequestContextEENK3__0clENS5_6EntityERN12arComponents20LabelIconRequestDataE(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *a3;
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v93 = *a3;
  uint64_t v94 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)(*a3 + 142));
    if ((v8 & 1) == 0)
    {
      uint64_t v9 = a1[4];
      unint64_t v11 = *(char **)v9;
      uint64_t v10 = *(uint64_t **)(v9 + 8);
      uint64_t v12 = ((uint64_t)v10 - *(void *)v9) >> 3;
      unint64_t v13 = *(void *)(v9 + 24);
      if (v13 >= v12 + 1) {
        goto LABEL_79;
      }
      uint64_t v14 = *(char **)(v9 + 16);
      unint64_t v15 = (1 << -(char)__clz(v13 + 1));
      if (v13 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v15 = 1;
      }
      if (v15 <= v12 + 1) {
        unint64_t v16 = v12 + 1;
      }
      else {
        unint64_t v16 = v15;
      }
      int v17 = (char *)malloc_type_malloc(8 * v16, 0x100004000313F17uLL);
      uint64_t v18 = v17;
      unint64_t v19 = *(uint64_t **)v9;
      unint64_t v20 = *(char **)(v9 + 8);
      if (*(char **)v9 == v20) {
        goto LABEL_76;
      }
      unint64_t v21 = v20 - (char *)v19 - 8;
      if (v21 < 0x18)
      {
        char v22 = v17;
      }
      else
      {
        char v22 = v17;
        if ((unint64_t)(v17 - (char *)v19) >= 0x20)
        {
          uint64_t v23 = (v21 >> 3) + 1;
          uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          char v22 = &v17[v24];
          uint64_t v25 = (long long *)(v19 + 2);
          uint64_t v26 = v17 + 16;
          uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v28 = *v25;
            *(v26 - 1) = *(v25 - 1);
            *uint64_t v26 = v28;
            v25 += 2;
            v26 += 2;
            v27 -= 4;
          }
          while (v27);
          if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_76;
          }
          unint64_t v19 = (uint64_t *)((char *)v19 + v24);
        }
      }
      do
      {
        uint64_t v85 = *v19++;
        *(void *)char v22 = v85;
        v22 += 8;
      }
      while (v19 != (uint64_t *)v20);
LABEL_76:
      if (v11 != v14) {
        free(*(void **)v9);
      }
      uint64_t v10 = (uint64_t *)&v18[8 * v12];
      *(void *)uint64_t v9 = v18;
      *(void *)(v9 + 8) = v10;
      *(void *)(v9 + 24) = v16;
      goto LABEL_79;
    }
    uint64_t v51 = *(void *)(a1[3] + 16);
    uint64_t v52 = *(void **)v51;
    unint64_t v53 = *(void **)(v51 + 8);
    if (v52 != v53)
    {
      while (*v52 != 0x6F66BE14E10A8F81)
      {
        v52 += 5;
        if (v52 == v53) {
          goto LABEL_42;
        }
      }
    }
    if (v52 == v53)
    {
LABEL_42:
      uint64_t v54 = 0;
    }
    else
    {
      uint64_t v54 = v52[3];
      uint64_t v55 = (std::__shared_weak_count *)v52[4];
      if (v55)
      {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
    unsigned __int8 v56 = atomic_load((unsigned __int8 *)(v93 + 143));
    if (v56) {
      id v57 = *(id *)(v93 + 16);
    }
    else {
      id v57 = 0;
    }
    unint64_t v58 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v54 + 40))(v54, [v57 texture], 0);

    if (v58) {
      unint64_t v59 = *v58;
    }
    else {
      unint64_t v59 = 0;
    }
    unsigned __int8 v60 = atomic_load((unsigned __int8 *)(v93 + 143));
    if (v60) {
      id v61 = *(id *)(v93 + 16);
    }
    else {
      id v61 = 0;
    }
    long long v88 = *(_OWORD *)[v61 textureCoordinates];

    uint64_t v62 = *(int8x8_t **)(v5 + 120);
    uint64_t v90 = 0;
    long long v89 = v59;
    unint64_t v91 = &unk_1EF559EB8;
    id v92 = 0;
    uint64_t v63 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>(v62);
    gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::emplace(v63, a2, (uint64_t)&v89);
    unint64_t v91 = &unk_1EF559EB8;

    uint64_t v64 = v90;
    if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }

    uint64_t v65 = *(int8x8_t **)(v5 + 120);
    long long v89 = v88;
    unint64_t v66 = (void *)gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(v65);
    gdc::ComponentStorageWrapper<arComponents::StyleColor>::emplace(v66, a2, (uint64_t)&v89);
    uint64_t v67 = *(int8x8_t **)(v5 + 120);
    *(void *)&long long v89 = *(void *)a1[1];
    uint64_t v68 = (void *)gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(v67);
    gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::emplace(v68, a2, (uint64_t)&v89);
    uint64_t v69 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>(*(int8x8_t **)(v5 + 120));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v69, a2);
    unint64_t v70 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>(*(int8x8_t **)(v5 + 120));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v70, a2);
    uint64_t v9 = a1[2];
    unint64_t v11 = *(char **)v9;
    uint64_t v10 = *(uint64_t **)(v9 + 8);
    uint64_t v12 = ((uint64_t)v10 - *(void *)v9) >> 3;
    unint64_t v71 = *(void *)(v9 + 24);
    if (v71 < v12 + 1)
    {
      uint64_t v14 = *(char **)(v9 + 16);
      unint64_t v72 = (1 << -(char)__clz(v71 + 1));
      if (v71 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v72 = 1;
      }
      if (v72 <= v12 + 1) {
        unint64_t v16 = v12 + 1;
      }
      else {
        unint64_t v16 = v72;
      }
      unint64_t v73 = (char *)malloc_type_malloc(8 * v16, 0x100004000313F17uLL);
      uint64_t v18 = v73;
      uint64_t v74 = *(uint64_t **)v9;
      uint64_t v75 = *(char **)(v9 + 8);
      if (*(char **)v9 == v75) {
        goto LABEL_76;
      }
      unint64_t v76 = v75 - (char *)v74 - 8;
      if (v76 < 0x18)
      {
        uint64_t v77 = v73;
      }
      else
      {
        uint64_t v77 = v73;
        if ((unint64_t)(v73 - (char *)v74) >= 0x20)
        {
          uint64_t v78 = (v76 >> 3) + 1;
          uint64_t v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v77 = &v73[v79];
          uint64_t v80 = (long long *)(v74 + 2);
          uint64_t v81 = v73 + 16;
          uint64_t v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *uint64_t v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 4;
          }
          while (v82);
          if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_76;
          }
          uint64_t v74 = (uint64_t *)((char *)v74 + v79);
        }
      }
      do
      {
        uint64_t v86 = *v74++;
        *(void *)uint64_t v77 = v86;
        v77 += 8;
      }
      while (v74 != (uint64_t *)v75);
      goto LABEL_76;
    }
  }
  else
  {
    uint64_t v29 = *(int8x8_t **)(v5 + 120);
    long long v89 = 0uLL;
    uint64_t v90 = 0;
    unint64_t v91 = &unk_1EF559EB8;
    id v92 = 0;
    uint64_t v30 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>(v29);
    gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::emplace(v30, a2, (uint64_t)&v89);
    unint64_t v91 = &unk_1EF559EB8;

    uint64_t v31 = v90;
    if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }

    unint64_t v32 = *(int8x8_t **)(v5 + 120);
    long long v89 = xmmword_1A28FCDA0;
    uint64_t v33 = (void *)gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(v32);
    gdc::ComponentStorageWrapper<arComponents::StyleColor>::emplace(v33, a2, (uint64_t)&v89);
    unint64_t v34 = *(int8x8_t **)(v5 + 120);
    *(void *)&long long v89 = *(void *)a1[1];
    id v35 = (void *)gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(v34);
    gdc::ComponentStorageWrapper<arComponents::AlbedoTextureUVScale>::emplace(v35, a2, (uint64_t)&v89);
    uint64_t v36 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>(*(int8x8_t **)(v5 + 120));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v36, a2);
    unint64_t v37 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>(*(int8x8_t **)(v5 + 120));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v37, a2);
    uint64_t v9 = a1[2];
    unint64_t v11 = *(char **)v9;
    uint64_t v10 = *(uint64_t **)(v9 + 8);
    uint64_t v12 = ((uint64_t)v10 - *(void *)v9) >> 3;
    unint64_t v38 = *(void *)(v9 + 24);
    if (v38 < v12 + 1)
    {
      uint64_t v14 = *(char **)(v9 + 16);
      unint64_t v39 = (1 << -(char)__clz(v38 + 1));
      if (v38 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v39 = 1;
      }
      if (v39 <= v12 + 1) {
        unint64_t v16 = v12 + 1;
      }
      else {
        unint64_t v16 = v39;
      }
      uint64_t v40 = (char *)malloc_type_malloc(8 * v16, 0x100004000313F17uLL);
      uint64_t v18 = v40;
      uint64_t v41 = *(uint64_t **)v9;
      uint64_t v42 = *(char **)(v9 + 8);
      if (*(char **)v9 == v42) {
        goto LABEL_76;
      }
      unint64_t v43 = v42 - (char *)v41 - 8;
      if (v43 < 0x18)
      {
        size_t v44 = v40;
      }
      else
      {
        size_t v44 = v40;
        if ((unint64_t)(v40 - (char *)v41) >= 0x20)
        {
          uint64_t v45 = (v43 >> 3) + 1;
          uint64_t v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          size_t v44 = &v40[v46];
          uint64_t v47 = (long long *)(v41 + 2);
          uint64_t v48 = v40 + 16;
          uint64_t v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v50 = *v47;
            *(v48 - 1) = *(v47 - 1);
            _OWORD *v48 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_76;
          }
          uint64_t v41 = (uint64_t *)((char *)v41 + v46);
        }
      }
      do
      {
        uint64_t v84 = *v41++;
        *(void *)size_t v44 = v84;
        v44 += 8;
      }
      while (v41 != (uint64_t *)v42);
      goto LABEL_76;
    }
  }
LABEL_79:
  uint64_t *v10 = a2;
  *(void *)(v9 + 8) += 8;
  unint64_t v87 = v94;
  if (v94)
  {
    if (!atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
}

void sub_1A24873E4(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 80);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(int8x8_t *a1)
{
  unint64_t v10 = 0xD4A6D7DC1E5120F8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD4A6D7DC1E5120F8;
    if (*(void *)&v1 <= 0xD4A6D7DC1E5120F8) {
      unint64_t v3 = 0xD4A6D7DC1E5120F8 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD4A6D7DC1E5120F8;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD4A6D7DC1E5120F8)
      {
        if (v5[2] == 0xD4A6D7DC1E5120F8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD4A6D7DC1E5120F8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD4A6D7DC1E5120F8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A24876D0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>(int8x8_t *a1)
{
  unint64_t v10 = 0xB0AB5653F88B7825;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB0AB5653F88B7825;
    if (*(void *)&v1 <= 0xB0AB5653F88B7825) {
      unint64_t v3 = 0xB0AB5653F88B7825 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB0AB5653F88B7825;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB0AB5653F88B7825)
      {
        if (v5[2] == 0xB0AB5653F88B7825) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB0AB5653F88B7825) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB0AB5653F88B7825) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A2487940(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::LabelIconRequestData>>();
}

void gdc::component::DataRequestObserver::notifyObservers<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(int8x8_t *a1, size_t a2, unsigned int a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0xCBF29CE484222325;
  unint64_t v8 = 0xCBF29CE484222325;
  do
    unint64_t v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_785[v6++ + 38]);
  while (v6 != 114);
  uint64_t v9 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v8);
  uint64_t v10 = v9[4];
  if (a2 >> 39 < (v9[5] - v10) >> 3)
  {
    uint64_t v11 = *(void *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v14 = v9[7];
      uint64_t v13 = v9[8];
      if (v12 < (v13 - v14) >> 3)
      {
        size_t v15 = HIDWORD(a2);
        uint64_t v16 = v14 + 8 * v12;
        if (v16 != v13 && *(_DWORD *)(v16 + 4) == HIDWORD(a2))
        {
          uint64_t v18 = v9[10];
          unint64_t v19 = (unint64_t **)(v18 + 24 * v12);
          if (v19 != (unint64_t **)v9[11] && v18 != 0)
          {
            unint64_t v21 = *v19;
            char v22 = v19[1];
            if (*v19 != v22)
            {
LABEL_16:
              int v23 = a1[5].u16[0];
              int8x8_t v24 = a1[6];
              unint64_t v25 = (uint64_t)(*(void *)&a1[7] - *(void *)&v24) >> 3;
              while (1)
              {
                unint64_t v26 = *v21;
                unint64_t v27 = HIDWORD(*v21);
                if (v23 != (unsigned __int16)*v21 || v25 <= v27) {
                  break;
                }
                uint64_t v29 = (unsigned __int16 *)(*(void *)&v24 + 8 * v27);
                if (*v29 != v23 || v29[1] != WORD1(v26) || *((_DWORD *)v29 + 1) != v27) {
                  break;
                }
                if (++v21 == v22) {
                  goto LABEL_39;
                }
              }
              while (--v22 != v21)
              {
                unint64_t v30 = *v22;
                unint64_t v31 = HIDWORD(*v22);
                if (v23 == (unsigned __int16)*v22 && v25 > v31)
                {
                  uint64_t v33 = (unsigned __int16 *)(*(void *)&v24 + 8 * v31);
                  if (*v33 == v23 && v33[1] == WORD1(v30) && *((_DWORD *)v33 + 1) == v31)
                  {
                    *v21++ = v30;
                    *char v22 = v26;
                    if (v21 != v22) {
                      goto LABEL_16;
                    }
                    goto LABEL_39;
                  }
                }
              }
            }
            char v22 = v21;
LABEL_39:
            unint64_t v34 = *v19;
            id v35 = v22;
            if (*v19 != v22)
            {
              do
              {
                uint64_t v36 = 0;
                unint64_t v37 = *v34;
                unint64_t v38 = 0xCBF29CE484222325;
                do
                  unint64_t v38 = 0x100000001B3 * (v38 ^ aStdStringViewG_786[v36++ + 38]);
                while (v36 != 110);
                unint64_t v39 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v38);
                uint64_t v40 = v39[4];
                if (v37 >> 39 < (v39[5] - v40) >> 3
                  && (uint64_t v41 = *(void *)(v40 + 8 * (v37 >> 39))) != 0
                  && (unint64_t v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v37) & 0x7F)),
                      uint64_t v44 = v39[7],
                      uint64_t v43 = v39[8],
                      v42 < (v43 - v44) >> 3)
                  && ((v45 = v44 + 8 * v42, v45 != v43) ? (BOOL v46 = *(_DWORD *)(v45 + 4) == HIDWORD(v37)) : (BOOL v46 = 0), v46))
                {
                  uint64_t v47 = v39[11];
                  uint64_t v48 = v39[10] + 12 * v42;
                }
                else
                {
                  uint64_t v47 = v39[11];
                  uint64_t v48 = v47;
                }
                if (v48 == v47) {
                  uint64_t v48 = 0;
                }
                unsigned int v49 = *(unsigned __int8 *)(v48 + 8);
                *(unsigned char *)(v48 + 8) = a3;
                gdc::component::DataRequestObserver::updateStatusCounts(a1, v37, a2, v49, a3);
                ++v34;
              }
              while (v34 != v22);
              size_t v15 = HIDWORD(a2);
              id v35 = *v19;
            }
            if (v22 == v35)
            {
              for (uint64_t i = 0; i != 114; ++i)
                unint64_t v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_785[i + 38]);
              uint64_t v51 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v7);
              size_t v57 = a2;
              if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v51 + 4, v15))
              {
                uint64_t v52 = (void *)v51[28];
                if (v52)
                {
                  uint64_t v53 = v51[31];
                  while (1)
                  {
                    v59[0] = &v57;
                    v59[1] = 1;
                    uint64_t v58 = v53;
                    uint64_t v54 = v52[6];
                    if (!v54) {
                      break;
                    }
                    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v54 + 48))(v54, &v58, v59);
                    uint64_t v52 = (void *)*v52;
                    if (!v52) {
                      return;
                    }
                  }
                  std::__throw_bad_function_call[abi:nn180100]();
                  gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(v55, v56);
                }
              }
            }
            else if (v22 != v19[1])
            {
              v19[1] = v22;
            }
          }
        }
      }
    }
  }
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(int8x8_t *a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int8x8_t v2 = a1[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  uint64_t v5 = *(void **)(*(void *)&a1[15] + 8 * v4);
  if (!v5 || (uint64_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6[3];
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6[3];
}

void sub_1A2488090(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(int8x8_t *a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int8x8_t v2 = a1[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  uint64_t v5 = *(void **)(*(void *)&a1[15] + 8 * v4);
  if (!v5 || (uint64_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6[3];
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6[3];
}

void sub_1A2488340(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10] + 12 * v7;
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          char v15 = *(unsigned char *)(v14 - 4);
          *(void *)uint64_t v13 = *(void *)(v14 - 12);
          *(unsigned char *)(v13 + 8) = v15;
          a1[11] -= 12;
          uint64_t v16 = (void *)a1[28];
          if (v16)
          {
            uint64_t v17 = a1[31];
            while (1)
            {
              v22[0] = &v20;
              v22[1] = 1;
              uint64_t v21 = v17;
              uint64_t v18 = v16[6];
              if (!v18) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v21, v22);
              uint64_t v16 = (void *)*v16;
              if (!v16) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::~ComponentStorageWrapper(v19);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v3 = geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(a1 + 4, HIDWORD(a2));
  if (!v3) {
    return v3;
  }
  unint64_t v4 = (void *)a1[28];
  if (!v4) {
    return v3;
  }
  uint64_t v5 = a1[31];
  while (1)
  {
    v10[0] = &v8;
    v10[1] = 1;
    uint64_t v9 = v5;
    uint64_t v6 = v4[6];
    if (!v6) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v6 + 48))(v6, &v9, v10);
    unint64_t v4 = (void *)*v4;
    if (!v4) {
      return v3;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<std::vector<gdc::Registry *>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::DidChange>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>(int8x8_t *a1)
{
  uint64_t v10 = 0x2A5EF61A9E93F8AFLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2A5EF61A9E93F8AFLL;
    if (*(void *)&v1 <= 0x2A5EF61A9E93F8AFuLL) {
      uint64_t v3 = 0x2A5EF61A9E93F8AFuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2A5EF61A9E93F8AFLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2A5EF61A9E93F8AFLL)
      {
        if (v5[2] == 0x2A5EF61A9E93F8AFLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2A5EF61A9E93F8AFLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2A5EF61A9E93F8AFLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A2488AE8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>(int8x8_t *a1)
{
  unint64_t v10 = 0xA77C230BE749DC3FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA77C230BE749DC3FLL;
    if (*(void *)&v1 <= 0xA77C230BE749DC3FLL) {
      unint64_t v3 = 0xA77C230BE749DC3FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA77C230BE749DC3FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA77C230BE749DC3FLL)
      {
        if (v5[2] == 0xA77C230BE749DC3FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA77C230BE749DC3FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA77C230BE749DC3FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A2488D58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureUVMapping>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::AlbedoTextureComponent>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::LabelIconRequestData>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::LabelIconRequestData>::remove(void *a1, unint64_t a2)
{
  unint64_t v24 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = (void *)(a1[10] + 16 * v7);
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          uint64_t v16 = *(void *)(v14 - 16);
          uint64_t v15 = *(void *)(v14 - 8);
          if (v15) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v17 = (std::__shared_weak_count *)v13[1];
          void *v13 = v16;
          v13[1] = v15;
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          uint64_t v18 = a1[11];
          unint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          a1[11] = v18 - 16;
          uint64_t v20 = (void *)a1[28];
          if (v20)
          {
            uint64_t v21 = a1[31];
            while (1)
            {
              v26[0] = &v24;
              v26[1] = 1;
              uint64_t v25 = v21;
              uint64_t v22 = v20[6];
              if (!v22) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v22 + 48))(v22, &v25, v26);
              uint64_t v20 = (void *)*v20;
              if (!v20) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::LabelIconRequestData>::~ComponentStorageWrapper(v23);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::LabelIconRequestData>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::LabelIconRequestData>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

int8x8_t *gdc::component::DataRequest<arComponents::LabelIconRequestData>::_removeStatusTag(int8x8_t *result, unint64_t a2, int a3)
{
  switch(a3)
  {
    case 1:
      uint64_t v4 = 0;
      unint64_t v5 = 0xCBF29CE484222325;
      do
        unint64_t v5 = 0x100000001B3 * (v5 ^ aStdStringViewG_750[v4++ + 38]);
      while (v4 != 117);
      int8x8_t v6 = result[16];
      if (!*(void *)&v6) {
        goto LABEL_39;
      }
      uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
      v7.i16[0] = vaddlv_u8(v7);
      if (v7.u32[0] > 1uLL)
      {
        unint64_t v8 = v5;
        if (*(void *)&v6 <= v5) {
          unint64_t v8 = v5 % *(void *)&v6;
        }
      }
      else
      {
        unint64_t v8 = (*(void *)&v6 - 1) & v5;
      }
      uint64_t v18 = *(void **)(*(void *)&result[15] + 8 * v8);
      if (!v18) {
        goto LABEL_39;
      }
      unint64_t v19 = (void *)*v18;
      if (!v19) {
        goto LABEL_39;
      }
      if (v7.u32[0] < 2uLL)
      {
        uint64_t v20 = *(void *)&v6 - 1;
        while (1)
        {
          uint64_t v22 = v19[1];
          if (v22 == v5)
          {
            if (v19[2] == v5) {
              goto LABEL_43;
            }
          }
          else if ((v22 & v20) != v8)
          {
            goto LABEL_39;
          }
          unint64_t v19 = (void *)*v19;
          if (!v19) {
            goto LABEL_39;
          }
        }
      }
      break;
    case 2:
      uint64_t v9 = 0;
      unint64_t v10 = 0xCBF29CE484222325;
      do
        unint64_t v10 = 0x100000001B3 * (v10 ^ aStdStringViewG_781[v9++ + 38]);
      while (v9 != 120);
      uint64_t v11 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(result, v10);
      return (int8x8_t *)gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::remove(v11, a2);
    case 3:
      uint64_t v12 = 0;
      unint64_t v13 = 0xCBF29CE484222325;
      do
        unint64_t v13 = 0x100000001B3 * (v13 ^ aStdStringViewG_749[v12++ + 38]);
      while (v12 != 118);
      uint64_t v14 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>(result, v13);
      return (int8x8_t *)gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)3>>::remove(v14, a2);
    case 4:
      uint64_t v15 = 0;
      unint64_t v16 = 0xCBF29CE484222325;
      do
        unint64_t v16 = 0x100000001B3 * (v16 ^ aStdStringViewG_751[v15++ + 38]);
      while (v15 != 120);
      unint64_t v17 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(result, v16);
      return (int8x8_t *)gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::remove(v17, a2);
    default:
      return result;
  }
  while (1)
  {
    unint64_t v21 = v19[1];
    if (v21 == v5) {
      break;
    }
    if (v21 >= *(void *)&v6) {
      v21 %= *(void *)&v6;
    }
    if (v21 != v8) {
LABEL_39:
    }
      operator new();
LABEL_29:
    unint64_t v19 = (void *)*v19;
    if (!v19) {
      goto LABEL_39;
    }
  }
  if (v19[2] != v5) {
    goto LABEL_29;
  }
LABEL_43:
  uint64_t v23 = (void *)v19[3];
  return (int8x8_t *)gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::remove(v23, a2);
}

void sub_1A2489964(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(int8x8_t *a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int8x8_t v2 = a1[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*(void *)&a1[15] + 8 * v4);
  if (!v5 || (int8x8_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2) {
          return v6[3];
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      int8x8_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    int8x8_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_11;
  }
  return v6[3];
}

void sub_1A2489C24(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)1>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v20, v21);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::LabelIconRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x30B26197B2C0D9CELL && *(void *)(a3 + 32)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 160))(result, a2, v4);
  }
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x30B26197B2C0D9CELL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 152))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x30B26197B2C0D9CELL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 144))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x30B26197B2C0D9CELL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 136))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x30B26197B2C0D9CELL)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 128))(result, a2, v3);
    }
  }
  return result;
}

void md::Logic<md::ARLabelIconDataRequestLogic,md::ARLabelIconDataRequestContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A248A404(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::ARLabelIconDataRequestContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::ARLabelIconDataRequestContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555C80;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::ARLabelIconDataRequestContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555C80;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::ARLabelIconDataRequestLogic::~ARLabelIconDataRequestLogic(md::ARLabelIconDataRequestLogic *this)
{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

uint64_t md::StandardLabelMarker::elementCount(md::StandardLabelMarker *this)
{
  return *((unsigned int *)this + 83);
}

void md::StandardLabelMarker::iconImageInfosForLabel(md::StandardLabelMarker *this@<X0>, void *a2@<X8>)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v8, (uint64_t)this);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    unint64_t v4 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v7) {
      operator new();
    }
  }
  a2[3] = *((void *)v4 + 91);
  uint64_t v5 = *(void **)(*((void *)this + 36) + 272);
  if (v5)
  {
    if (((*(uint64_t (**)(void *))(*v5 + 680))(v5) & 1) == 0
      && !(*(unsigned int (**)(void *))(*v5 + 688))(v5)
      || (uint64_t v5 = *(void **)(v5[72] + 8)) != 0)
    {
      (*(void (**)(void *, void *))(*v5 + 720))(v5, a2);
    }
  }
  if (v11) {
    std::recursive_mutex::unlock(v10);
  }
  uint64_t v6 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A248A7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<md::LabelImageInfo,geo::StdAllocator<md::LabelImageInfo,mdm::Allocator>>::~vector[abi:nn180100](v9);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::dataIconImageKeys(md::StandardLabelMarker *this@<X0>, uint64_t *a2@<X8>)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  {
    operator new();
  }
  uint64_t v4 = mdm::Allocator::instance(void)::alloc;
  a2[3] = mdm::Allocator::instance(void)::alloc;
  if (*((unsigned char *)this + 225) != 8) {
    return;
  }
  uint64_t v5 = *(void **)(*((void *)this + 36) + 8);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[89] - v5[88]) >> 2);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[2] - *a2;
  if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) < v6)
  {
    if (v6 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v9 = a2[1];
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 8 * ((uint64_t)(v5[89] - v5[88]) >> 2), 8);
    uint64_t v11 = (v9 - v7) / 24;
    uint64_t v12 = v10 + 24 * v11;
    if (v9 == v7)
    {
      *a2 = v12;
      a2[1] = v12;
      a2[2] = v10 + 24 * v6;
      if (v7) {
LABEL_12:
      }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 40))(a2[3], v7, v8);
    }
    else
    {
      unint64_t v41 = v10 + 24 * v6;
      uint64_t v13 = v10 + 24 * v11 - 24;
      uint64_t v14 = (void **)v9;
      uint64_t v15 = v10 + 24 * v11;
      do
      {
        *(void *)(v15 - 24) = off_1EF559698;
        v15 -= 24;
        *(void *)(v15 + 8) = 0;
        unint64_t v17 = *(v14 - 2);
        uint64_t v16 = v14 - 2;
        objc_storeStrong((id *)(v15 + 8), v17);
        unint64_t v18 = *v16;
        void *v16 = 0;

        v13 -= 24;
        uint64_t v14 = v16 - 1;
      }
      while (v14 != (void **)v7);
      *a2 = v15;
      a2[1] = v12;
      a2[2] = v41;
      unint64_t v19 = (void (***)(void))(v9 - 24);
      uint64_t v20 = v19;
      unint64_t v21 = v19;
      do
      {
        uint64_t v22 = *v21;
        v21 -= 3;
        (*v22)(v20);
        v19 -= 3;
        BOOL v23 = v20 == (void (***)(void))v7;
        uint64_t v20 = v21;
      }
      while (!v23);
      if (v7) {
        goto LABEL_12;
      }
    }
  }
  unint64_t v24 = (unsigned int *)v5[88];
  unint64_t v42 = (unsigned int *)v5[89];
  if (v24 != v42)
  {
    while (1)
    {
      uint64_t v25 = [[VKImageSourceKey alloc] initWithIconAttributeKey:49 attributeValue:*v24];
      uint64_t v44 = v25;
      [(VKImageSourceKey *)v25 setDataType:6];
      [(VKImageSourceKey *)v25 setDataValue:*v24];
      uint64_t v26 = *((unsigned __int8 *)v24 + 9);
      if (*((unsigned char *)v24 + 9))
      {
        unint64_t v27 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v26];
        [(VKImageSourceKey *)v25 setFallbackImageKeys:v27];
        uint64_t v28 = 0;
        do
        {
          uint64_t v29 = *(unsigned int *)(v5[92] + 4 * (v28 + *((unsigned __int8 *)v24 + 8)));
          unint64_t v30 = [[VKImageSourceKey alloc] initWithIconAttributeKey:37 attributeValue:v29];
          [(VKImageSourceKey *)v30 setDataType:7];
          [(VKImageSourceKey *)v30 setDataValue:v29];
          [v27 addObject:v30];

          ++v28;
        }
        while (v26 != v28);
      }
      if (!*((_WORD *)v24 + 3))
      {
        unint64_t v32 = (void *)a2[1];
        if ((unint64_t)v32 >= a2[2])
        {
          uint64_t v34 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>(a2, (id *)&v44);
        }
        else
        {
          if (v32)
          {
            uint64_t v33 = v25;
            void *v32 = off_1EF559698;
            v32[1] = v33;
          }
          uint64_t v34 = (uint64_t)(v32 + 3);
        }
        a2[1] = v34;
        goto LABEL_37;
      }
      if (!v25) {
        break;
      }
      v45[0] = v25;
      unint64_t v31 = [MEMORY[0x1E4F1C978] arrayWithObjects:v45 count:1];
      if (*((_WORD *)v24 + 3)) {
        goto LABEL_27;
      }
LABEL_34:

      uint64_t v25 = v44;
LABEL_37:

      v24 += 3;
      if (v24 == v42) {
        return;
      }
    }
    unint64_t v31 = 0;
LABEL_27:
    unint64_t v35 = 0;
    do
    {
      uint64_t v36 = *(unsigned int *)(v5[96] + 4 * (v35 + *((unsigned __int16 *)v24 + 2)));
      unint64_t v37 = [[VKImageSourceKey alloc] initWithIconAttributeKey:50 attributeValue:v36];
      uint64_t v43 = v37;
      [(VKImageSourceKey *)v37 setDataType:8];
      [(VKImageSourceKey *)v37 setDataValue:v36];
      [(VKImageSourceKey *)v37 setFallbackImageKeys:v31];
      unint64_t v38 = (void *)a2[1];
      if ((unint64_t)v38 >= a2[2])
      {
        uint64_t v40 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>(a2, (id *)&v43);
      }
      else
      {
        if (v38)
        {
          unint64_t v39 = v37;
          *unint64_t v38 = off_1EF559698;
          v38[1] = v39;
        }
        uint64_t v40 = (uint64_t)(v38 + 3);
      }
      a2[1] = v40;

      ++v35;
    }
    while (v35 < *((unsigned __int16 *)v24 + 3));
    goto LABEL_34;
  }
}

void sub_1A248ACB8(_Unwind_Exception *a1)
{
  std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::~vector[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::externalFeatureCategory(md::StandardLabelMarker *this)
{
  return *(unsigned __int8 *)(*((void *)this + 36) + 1213);
}

double md::StandardLabelMarker::calloutAnchorPoint(md::StandardLabelMarker *this, int a2)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v9, (uint64_t)this);
  if (!v9)
  {
    double v6 = *MEMORY[0x1E4F1DAD8];
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  float v4 = *(float *)(*((void *)this + 36) + 432);
  float v5 = roundf(v4);
  if (a2) {
    float v4 = v5;
  }
  double v6 = (float)(v4 / *(float *)(v9 + 480));
  if (v12) {
LABEL_5:
  }
    std::recursive_mutex::unlock(v11);
LABEL_6:
  uint64_t v7 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v6;
}

uint64_t md::StandardLabelMarker::pickedLabelBalloonBehavior(md::StandardLabelMarker *this)
{
  return *(unsigned __int8 *)(*((void *)this + 36) + 1074);
}

uint64_t md::StandardLabelMarker::selectionBehavior(md::StandardLabelMarker *this)
{
  return *(unsigned __int8 *)(*((void *)this + 36) + 1212);
}

BOOL md::StandardLabelMarker::positionOfInterest(uint64_t a1, uint64_t a2, float *a3)
{
  float v6 = (*(float (**)(void))(**(void **)(*(void *)(a1 + 288) + 8) + 248))(*(void *)(*(void *)(a1 + 288) + 8));
  if (v6 >= 0.00000011921)
  {
    md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v11, a1);
    uint64_t v7 = *(void *)(a1 + 288);
    long long v8 = *(_OWORD *)(v7 + 128);
    *(void *)(a2 + 16) = *(void *)(v7 + 144);
    *(_OWORD *)a2 = v8;
    *a3 = v6;
    if (v14) {
      std::recursive_mutex::unlock(v13);
    }
    uint64_t v9 = v12;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v6 >= 0.00000011921;
}

uint64_t md::StandardLabelMarker::facingDirection(md::StandardLabelMarker *this)
{
  uint64_t v1 = *((void *)this + 36);
  if (!*(unsigned char *)(v1 + 164)) {
    return 0;
  }
  float v2 = *(float *)(v1 + 152);
  float v3 = *(float *)(v1 + 156);
  float v4 = 1.0 / sqrtf((float)(v2 * v2) + (float)(v3 * v3));
  float v5 = v4 * v2;
  float v6 = v4 * v3;
  *(float *)&uint64_t v13 = v5;
  *((float *)&v13 + 1) = v4 * v3;
  float v7 = 0.0;
  if (v13)
  {
    float v8 = atan2f(v6, v5);
    float v9 = fmodf(4.7124 - v8, 6.2832);
    float v7 = fmodf(v9 + 6.2832, 6.2832) + -3.1416;
  }
  if (v7 >= -0.0001)
  {
    float v11 = v7;
  }
  else
  {
    float v10 = v7 + 6.28318531;
    float v11 = v10;
  }
  return COERCE_UNSIGNED_INT(fminf(fmaxf(v11 * 57.296, 0.0), 360.0)) | 0x100000000;
}

float md::StandardLabelMarker::elevationOffset(md::StandardLabelMarker *this)
{
  return *(float *)(*((void *)this + 36) + 240);
}

uint64_t md::StandardLabelMarker::buildingFaceAzimuth(md::StandardLabelMarker *this)
{
  return *(void *)(*((void *)this + 36) + 248);
}

float md::StandardLabelMarker::buildingHeight(md::StandardLabelMarker *this)
{
  return *(float *)(*((void *)this + 36) + 244);
}

uint64_t md::StandardLabelMarker::coordinateNoFallbackElevation@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 288);
  if (*(unsigned char *)(v2 + 192)) {
    double v3 = *(float *)(v2 + 188);
  }
  else {
    double v3 = 1.79769313e308;
  }
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 128);
  *(double *)(a2 + 16) = v3;
  return this;
}

double md::StandardLabelMarker::coordinate@<D0>(md::StandardLabelMarker *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 36);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 128);
  double result = *(double *)(v2 + 144);
  *(double *)(a2 + 16) = result;
  return result;
}

float md::StandardLabelMarker::screenPixelBounds(md::StandardLabelMarker *this)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v6, (uint64_t)this);
  if (v6)
  {
    uint64_t v2 = *(void *)(*((void *)this + 36) + 272);
    if (v2)
    {
      float v3 = (*(float (**)(uint64_t))(*(void *)v2 + 256))(v2);
      if (!v9) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  float v3 = 3.4028e38;
  if (v9) {
LABEL_6:
  }
    std::recursive_mutex::unlock(v8);
LABEL_7:
  float v4 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void sub_1A248B1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float md::StandardLabelMarker::screenCollisionBounds(md::StandardLabelMarker *this)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v6, (uint64_t)this);
  if (v6)
  {
    uint64_t v2 = *(void *)(*((void *)this + 36) + 272);
    if (v2)
    {
      float v3 = *(float *)(*(void *)(v2 + 24) + 392);
      if (!v9) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    float v3 = 3.4028e38;
  }
  else
  {
    float v3 = 3.4028e38;
  }
  if (v9) {
LABEL_8:
  }
    std::recursive_mutex::unlock(v8);
LABEL_9:
  float v4 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

float md::StandardLabelMarker::calloutAnchorRect(md::StandardLabelMarker *this, uint64_t a2)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v22, (uint64_t)this);
  uint64_t v5 = *((void *)this + 36);
  float v6 = 0.0;
  if ((*(unsigned char *)(v5 + 1072) & 0xFD) == 1)
  {
    uint64_t v7 = *(void *)(v5 + 272);
    if (!v7
      || ((float v6 = (*(float (**)(uint64_t, uint64_t))(*(void *)v7 + 664))(v7, a2),
           float v10 = v8,
           float v12 = v11,
           float v13 = v9,
           v11 >= v6)
        ? (BOOL v14 = v9 < v8)
        : (BOOL v14 = 1),
          v14))
    {
      float v10 = 0.0;
      float v6 = 0.0;
      float v12 = 0.0;
      float v13 = 0.0;
    }
    v4.n128_f32[0] = v12 - v6;
    if ((float)(v12 - v6) == 0.0 || (v4.n128_f32[0] = v13 - v10, (float)(v13 - v10) == 0.0))
    {
      uint64_t v15 = *(void *)(*((void *)this + 36) + 272);
      if (v15)
      {
        (*(void (**)(uint64_t, __n128))(*(void *)v15 + 256))(v15, v4);
      }
      else
      {
        float v17 = -3.4028e38;
        float v16 = 3.4028e38;
      }
      float v18 = v17 - v16;
      if (v18 >= 0.0) {
        float v19 = v18 * 0.5;
      }
      else {
        float v19 = 0.0;
      }
      float v6 = -v19;
    }
  }
  if (v25) {
    std::recursive_mutex::unlock(v24);
  }
  uint64_t v20 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return v6;
}

void sub_1A248B4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::StandardLabelMarker::featureHandles(md::StandardLabelMarker *this@<X0>, void *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  __n128 v4 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    float v10 = v5;
    if (v5 && *((void *)this + 29))
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      {
        operator new();
      }
      a2[3] = mdm::Allocator::instance(void)::alloc;
      uint64_t v6 = *((void *)this + 36);
      uint64_t v8 = *(void *)(v6 + 8);
      uint64_t v7 = *(std::__shared_weak_count **)(v6 + 16);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8)
      {
        v11[0] = &unk_1EF52DEA8;
        v11[1] = a2;
        void v11[2] = this;
        float v12 = v11;
        std::mutex::lock((std::mutex *)(v8 + 8));
        uint64_t v9 = *(void *)(v8 + 152);
        if (v9) {
          (*(void (**)(uint64_t, void *))(*(void *)v9 + 24))(v9, v11);
        }
        std::mutex::unlock((std::mutex *)(v8 + 8));
        if (v12 == v11)
        {
          (*(void (**)(void *))(v11[0] + 32))(v11);
          if (!v7) {
            goto LABEL_21;
          }
          goto LABEL_14;
        }
        if (v12) {
          (*(void (**)(void))(*v12 + 40))();
        }
      }
      if (!v7) {
        goto LABEL_21;
      }
LABEL_14:
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_21:
      uint64_t v5 = v10;
      if (!v10) {
        return;
      }
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  {
    operator new();
  }
  a2[3] = mdm::Allocator::instance(void)::alloc;
  if (v5)
  {
LABEL_22:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1A248B7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  std::mutex::unlock(v15);
  std::function<void ()(GeoCodecsFeature const*)>::~function(&a14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a10);
  std::vector<md::MarkerFeatureHandle,geo::StdAllocator<md::MarkerFeatureHandle,mdm::Allocator>>::~vector[abi:nn180100](v14);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void *std::function<void ()(GeoCodecsFeature const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<md::StandardLabelMarker::featureHandles(void)::$_0,std::allocator<md::StandardLabelMarker::featureHandles(void)::$_0>,void ()(GeoCodecsFeature const*)>::operator()(uint64_t a1, unint64_t *a2)
{
  md::MarkerFeatureHandle::MarkerFeatureHandle((uint64_t)&v25, *a2, *(unsigned __int8 *)(*(void *)(a1 + 16) + 225));
  float v3 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = v3[1];
  unint64_t v5 = v3[2];
  if (v4 >= v5)
  {
    uint64_t v8 = (uint64_t)(v4 - *v3) >> 6;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 58) {
      abort();
    }
    uint64_t v10 = v5 - *v3;
    if (v10 >> 5 > v9) {
      unint64_t v9 = v10 >> 5;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      uint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[3] + 16))(v3[3], v11 << 6, 8);
      uint64_t v13 = v12 + (v8 << 6);
      uint64_t v14 = v12 + (v11 << 6);
      if (v12)
      {
        *(_OWORD *)uint64_t v13 = v25;
        *(_WORD *)(v13 + 16) = v26;
        *(void *)(v13 + 20) = v27;
        *(void *)(v13 + 40) = v28;
        *(void *)(v13 + 48) = v29;
        uint64_t v15 = v30;
        *(void *)(v13 + 56) = v30;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v13 = v8 << 6;
    }
    uint64_t v7 = v13 + 64;
    uint64_t v16 = *v3;
    uint64_t v17 = v3[1];
    if (v17 == *v3)
    {
      uint64_t *v3 = v13;
      v3[1] = v7;
      uint64_t v22 = v3[2];
      unsigned char v3[2] = v14;
    }
    else
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = v13 + v18;
        uint64_t v20 = v17 + v18;
        *(_OWORD *)(v19 - 64) = *(_OWORD *)(v17 + v18 - 64);
        *(_WORD *)(v19 - 48) = *(_WORD *)(v17 + v18 - 48);
        *(void *)(v19 - 44) = *(void *)(v17 + v18 - 44);
        *(void *)(v19 - 24) = *(void *)(v17 + v18 - 24);
        *(_OWORD *)(v19 - 16) = *(_OWORD *)(v17 + v18 - 16);
        *(void *)(v20 - 16) = 0;
        *(void *)(v20 - 8) = 0;
        v18 -= 64;
      }
      while (v17 + v18 != v16);
      uint64_t v17 = *v3;
      uint64_t v21 = v3[1];
      uint64_t *v3 = v13 + v18;
      v3[1] = v7;
      uint64_t v22 = v3[2];
      for (unsigned char v3[2] = v14; v21 != v17; v21 -= 64)
      {
        BOOL v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    if (v17) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[3] + 40))(v3[3], v17, v22 - v17);
    }
  }
  else
  {
    if (v4)
    {
      *(_OWORD *)unint64_t v4 = v25;
      *(_WORD *)(v4 + 16) = v26;
      *(void *)(v4 + 20) = v27;
      *(void *)(v4 + 40) = v28;
      *(void *)(v4 + 48) = v29;
      uint64_t v6 = v30;
      *(void *)(v4 + 56) = v30;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    uint64_t v7 = v4 + 64;
  }
  v3[1] = v7;
  unint64_t v24 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1A248BB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16)
  {
    if (!atomic_fetch_add(&a16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::StandardLabelMarker::featureHandles(void)::$_0,std::allocator<md::StandardLabelMarker::featureHandles(void)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF52DEA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::StandardLabelMarker::featureHandles(void)::$_0,std::allocator<md::StandardLabelMarker::featureHandles(void)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF52DEA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::StandardLabelMarker::featureHandles(void)::$_0,std::allocator<md::StandardLabelMarker::featureHandles(void)::$_0>,void ()(GeoCodecsFeature const*)>::~__func()
{
}

uint64_t md::StandardLabelMarker::transitSystems@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v3 = *(unsigned __int8 *)(this + 225);
  BOOL v4 = v3 > 0xD;
  int v5 = (1 << v3) & 0x2600;
  if (v4 || v5 == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    {
      if (this) {
        operator new();
      }
    }
    a2[3] = mdm::Allocator::instance(void)::alloc;
  }
  else
  {
    uint64_t v7 = this;
    *a2 = 0;
    a2[1] = 0;
    this = *(void *)(this + 184);
    a2[2] = 0;
    a2[3] = this;
    uint64_t v8 = *(void *)(v7 + 160);
    uint64_t v9 = *(void *)(v7 + 168);
    uint64_t v10 = v9 - v8;
    if (v9 != v8)
    {
      if (v10 < 0) {
        abort();
      }
      uint64_t v11 = v10 >> 5;
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)this + 16))(this);
      uint64_t v13 = 0;
      *a2 = v12;
      a2[1] = v12;
      a2[2] = v12 + 32 * v11;
      do
      {
        this = v12 + v13;
        if (v12 + v13)
        {
          uint64_t v15 = (long long *)(v8 + v13);
          *(void *)(v12 + v13 + 24) = *(void *)(v8 + v13 + 24);
          if (*(char *)(v8 + v13 + 23) < 0)
          {
            this = (uint64_t)std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)this, *(void **)(v8 + v13), *(void *)(v8 + v13 + 8));
          }
          else
          {
            long long v14 = *v15;
            *(void *)(this + 16) = *((void *)v15 + 2);
            *(_OWORD *)this = v14;
          }
        }
        v13 += 32;
      }
      while (v8 + v13 != v9);
      a2[1] = v12 + v13;
    }
  }
  return this;
}

void sub_1A248BDF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::setUseVKSelectionBalloon(md::StandardLabelMarker *this, char a2)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v5, (uint64_t)this);
  *(unsigned char *)(*((void *)this + 36) + 1245) = a2;
  if (v8) {
    std::recursive_mutex::unlock(v7);
  }
  BOOL v4 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t md::StandardLabelMarker::useVKSelectionBalloon(md::StandardLabelMarker *this)
{
  return *(unsigned __int8 *)(*((void *)this + 36) + 1245);
}

uint64_t md::StandardLabelMarker::featureTile@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 320);
  *a2 = *(void *)(this + 312);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void md::StandardLabelMarker::setLabelPressed(md::StandardLabelMarker *this, int a2)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v10, (uint64_t)this);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v5 = *((void *)this + 36);
    if ((*(unsigned char *)(v5 + 1079) != 0) != a2)
    {
      *(unsigned char *)(v5 + 1079) = a2;
      unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v4 + 3058));
      if (v6)
      {
        uint64_t v7 = *(void *)(v4 + 136);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 56);
          if (v8)
          {
            uint64_t v15 = v4;
            char v14 = 9;
            (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v8 + 48))(v8, &v15, &v14);
          }
        }
      }
    }
  }
  if (v13) {
    std::recursive_mutex::unlock(v12);
  }
  uint64_t v9 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1A248BFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::StandardLabelMarker::setIsDragged(md::StandardLabelMarker *this, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v9, (uint64_t)this);
  uint64_t v4 = v9;
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v5 = *((void *)this + 36);
  if ((*(unsigned char *)(v5 + 488) != 0) == a2) {
    goto LABEL_15;
  }
  *(unsigned char *)(v5 + 488) = a2;
  char v13 = v4;
  uint64_t v14 = v5;
  unsigned __int8 v6 = (std::__shared_weak_count *)*((void *)this + 37);
  uint64_t v15 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = 0;
  uint64_t v7 = operator new(0x20uLL);
  void *v7 = &unk_1EF56E4D8;
  v7[1] = v4;
  v7[2] = v5;
  v7[3] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = v7;
  md::LabelManager::queueCommand(v4, 41, 0, v16);
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
    if (!v6) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v17) {
    (*(void (**)(void))(*v17 + 40))();
  }
  if (v6)
  {
LABEL_13:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_15:
  if (v12) {
    std::recursive_mutex::unlock(v11);
  }
  uint64_t v8 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1A248C200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

uint64_t md::StandardLabelMarker::isDragged(md::StandardLabelMarker *this)
{
  return *(unsigned __int8 *)(*((void *)this + 36) + 488);
}

uint64_t md::StandardLabelMarker::isAlongSelectedTransitLine(std::__shared_weak_count **this)
{
  uint64_t v1 = this;
  int v2 = *((unsigned __int8 *)this + 225);
  if (v2 == 10)
  {
    uint64_t shared_owners = this[36]->__shared_owners_;
    uint64_t v9 = *(void *)(shared_owners + 504);
    uint64_t v8 = *(void *)(shared_owners + 512);
    if (v9 != v8)
    {
      uint64_t v10 = v9 + 8;
      do
      {
        uint64_t v11 = *(void *)(v10 - 8);
        if (v11) {
          uint64_t v12 = v11 + 8;
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = *(unsigned __int16 *)(v12 + 42);
        LOBYTE(v1) = v13 != 0xFFFF;
        BOOL v14 = v13 != 0xFFFF || v10 == v8;
        v10 += 8;
      }
      while (!v14);
      return v1 & 1;
    }
    goto LABEL_21;
  }
  if (v2 != 8) {
    goto LABEL_21;
  }
  unsigned int v3 = this[30];
  if (!v3) {
    goto LABEL_21;
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = v4;
  unsigned __int8 v6 = v1[29];
  if (v6)
  {
    LOBYTE(v1) = (*(uint64_t (**)(const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *), std::__shared_weak_count *))(*(void *)v6[7].__vftable[1].__get_deleter + 72))(v6[7].__vftable[1].__get_deleter, v1[38]);
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v1 & 1;
    }
    goto LABEL_20;
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_21:
    LOBYTE(v1) = 0;
    return v1 & 1;
  }
LABEL_20:
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6) {
    goto LABEL_21;
  }
  return v1 & 1;
}

void sub_1A248C380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t md::StandardLabelMarker::isTextVisible(md::StandardLabelMarker *this)
{
  uint64_t v1 = *((void *)this + 36);
  if ((*(unsigned char *)(v1 + 1072) & 0xFD) == 1 && (uint64_t v2 = *(void *)(v1 + 272)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 744))();
  }
  else {
    return 0;
  }
}

BOOL md::StandardLabelMarker::isVisible(md::StandardLabelMarker *this)
{
  return (*(unsigned char *)(*((void *)this + 36) + 1072) & 0xFD) == 1;
}

BOOL md::StandardLabelMarker::hasLaidOutForDisplay(md::StandardLabelMarker *this)
{
  return *(unsigned char *)(*((void *)this + 36) + 1073) == 37;
}

uint64_t md::StandardLabelMarker::isInPickedState(md::StandardLabelMarker *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*((void *)this + 36) + 1243));
  return v1 & 1;
}

uint64_t md::StandardLabelMarker::isSelected(md::StandardLabelMarker *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*((void *)this + 36) + 1240));
  return v1 & 1;
}

uint64_t md::StandardLabelMarker::isSelectable(md::StandardLabelMarker *this)
{
  uint64_t v1 = *((void *)this + 36);
  if (*(unsigned char *)(v1 + 1076)) {
    return 1;
  }
  uint64_t result = *(void *)(v1 + 272);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 640))();
  }
  return result;
}

id md::StandardLabelMarker::externalFeatureAnnotation(md::StandardLabelMarker *this)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v9, (uint64_t)this);
  uint64_t v2 = (*(void (**)(void))(**(void **)(*((void *)this + 36) + 8) + 232))(*(void *)(*((void *)this + 36) + 8));
  unsigned int v3 = v2;
  if (v2
    && ([v2 feature],
        uint64_t v4 = objc_claimAutoreleasedReturnValue(),
        int v5 = [v4 isInjectedFeature],
        v4,
        v5))
  {
    id v6 = v3;
  }
  else
  {
    id v6 = 0;
  }

  if (v12) {
    std::recursive_mutex::unlock(v11);
  }
  uint64_t v7 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v6;
}

void sub_1A248C598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = v10;

  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::routeAnnotations(md::StandardLabelMarker *this)
{
  if ((*(unsigned int (**)(md::StandardLabelMarker *))(*(void *)this + 192))(this)
    && (uint64_t v2 = *(void *)(*((void *)this + 36) + 8)) != 0)
  {
    return v2 + 296;
  }
  else
  {
    return (uint64_t)this + 256;
  }
}

id md::StandardLabelMarker::arWalkingFeature(md::StandardLabelMarker *this)
{
  uint64_t v1 = *(void **)(*((void *)this + 36) + 8);
  if (v1)
  {
    uint64_t v1 = (*(void (**)(void *))(*(void *)v1 + 208))(v1);
  }
  return v1;
}

id md::StandardLabelMarker::waypointInfo(md::StandardLabelMarker *this)
{
  if ((*(unsigned int (**)(md::StandardLabelMarker *))(*(void *)this + 184))(this)
    && (uint64_t v2 = *(void *)(*((void *)this + 36) + 8)) != 0)
  {
    id v3 = *(id *)(v2 + 680);
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

uint64_t md::StandardLabelMarker::incident(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 36) + 32))();
}

BOOL md::StandardLabelMarker::isVenueButton(md::StandardLabelMarker *this)
{
  return *(unsigned char *)(*((void *)this + 36) + 1220) == 1;
}

void md::StandardLabelMarker::populateClusterWaypointInfos(void *a1, char **a2)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)v48, (uint64_t)a1);
  if ((*(unsigned int (**)(void *))(*a1 + 320))(a1))
  {
    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1[36] + 8) + 72))(*(void *)(a1[36] + 8));
    uint64_t v5 = v4;
    if (v4)
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      id v6 = *(std::__shared_weak_count **)(v4 + 304);
      if (v6)
      {
        if (v6->__shared_owners_ != -1)
        {
          uint64_t v7 = std::__shared_weak_count::lock(v6);
          uint64_t v8 = v7;
          uint64_t v9 = *(void *)(v5 + 296);
          if (!v7) {
            uint64_t v9 = 0;
          }
          uint64_t v52 = v9;
          uint64_t v53 = v7;
          if (v9)
          {
            uint64_t v10 = *(void *)(v5 + 288);
            uint64_t v54 = v10;
            if (v10)
            {
              if ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 80))(v10))
              {
                uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 80))(v10);
                uint64_t v55 = 0;
                unint64_t v56 = 0;
                uint64_t v57 = 0;
                {
                  operator new();
                }
                uint64_t v58 = mdm::Allocator::instance(void)::alloc;
                (*(void (**)(uint64_t, uint64_t **, uint64_t, void))(*(void *)v11 + 16))(v11, &v55, 1, 0);
                unint64_t v12 = 126 - 2 * __clz(v56 - v55);
                if (v56 == v55) {
                  uint64_t v13 = 0;
                }
                else {
                  uint64_t v13 = v12;
                }
                std::__introsort<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,false>((uint64_t)v55, v56, v13, 1);
                uint64_t v15 = v55;
                BOOL v14 = v56;
                if (v56 != v55)
                {
                  unint64_t v16 = 0;
                  BOOL v14 = v55;
                  while (1)
                  {
                    uint64_t v18 = v14[v16];
                    uint64_t v19 = (*(void (**)(uint64_t))(*(void *)v18 + 88))(v18);

                    if (!v19) {
                      goto LABEL_18;
                    }
                    uint64_t v20 = (*(void (**)(uint64_t))(*(void *)v18 + 88))(v18);
                    uint64_t v21 = (void *)v20;
                    uint64_t v22 = (uint64_t *)a2[1];
                    unint64_t v23 = (unint64_t)a2[2];
                    if ((unint64_t)v22 < v23)
                    {
                      if (v22)
                      {
                        *uint64_t v22 = v20;
                        uint64_t v21 = 0;
                      }
                      uint64_t v17 = (char *)(v22 + 1);
                      goto LABEL_17;
                    }
                    uint64_t v24 = ((char *)v22 - *a2) >> 3;
                    unint64_t v25 = v24 + 1;
                    long long v26 = 0uLL;
                    if ((unint64_t)(v24 + 1) >> 61) {
                      abort();
                    }
                    uint64_t v27 = v23 - (void)*a2;
                    if (v27 >> 2 > v25) {
                      unint64_t v25 = v27 >> 2;
                    }
                    uint64_t v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v25;
                    if (v28)
                    {
                      uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 8 * v28, 8);
                      unint64_t v30 = (char *)(v29 + 8 * v24);
                      uint64_t v31 = v29 + 8 * v28;
                      long long v26 = 0uLL;
                      if (v29)
                      {
                        *(void *)unint64_t v30 = v21;
                        uint64_t v21 = 0;
                      }
                    }
                    else
                    {
                      uint64_t v31 = 0;
                      unint64_t v30 = (char *)(8 * v24);
                    }
                    uint64_t v17 = v30 + 8;
                    unint64_t v32 = *a2;
                    uint64_t v33 = a2[1];
                    if (v33 != *a2) {
                      break;
                    }
                    *a2 = v30;
                    a2[1] = v17;
                    unint64_t v39 = a2[2];
                    a2[2] = (char *)v31;
                    if (v33) {
                      goto LABEL_44;
                    }
LABEL_17:
                    a2[1] = v17;

LABEL_18:
                    ++v16;
                    BOOL v14 = v55;
                    if (v16 >= v56 - v55)
                    {
                      uint64_t v15 = v55;
                      goto LABEL_50;
                    }
                  }
                  unint64_t v34 = v33 - *a2 - 8;
                  if (v34 > 0x57
                    && ((unint64_t v35 = (v32 - v33 + 7) & 0xFFFFFFFFFFFFFFF8, &v33[v35] >= v30) || &v30[v35] >= v33))
                  {
                    uint64_t v41 = (v34 >> 3) + 1;
                    uint64_t v36 = &v33[-8 * (v41 & 0x3FFFFFFFFFFFFFFCLL)];
                    unint64_t v42 = v30 - 16;
                    uint64_t v43 = (long long *)(v33 - 32);
                    uint64_t v44 = v41 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v46 = *v43;
                      long long v45 = v43[1];
                      *uint64_t v43 = v26;
                      v43[1] = v26;
                      v43 -= 2;
                      *((_OWORD *)v42 - 1) = v46;
                      *(_OWORD *)unint64_t v42 = v45;
                      v42 -= 32;
                      v44 -= 4;
                    }
                    while (v44);
                    v30 -= 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_39:
                      uint64_t v33 = *a2;
                      unint64_t v38 = a2[1];
                      *a2 = v30;
                      a2[1] = v17;
                      unint64_t v39 = a2[2];
                      a2[2] = (char *)v31;
                      while (v38 != v33)
                      {
                        uint64_t v40 = (void *)*((void *)v38 - 1);
                        v38 -= 8;
                      }
                      if (!v33) {
                        goto LABEL_17;
                      }
LABEL_44:
                      (*(void (**)(char *, char *, int64_t))(*(void *)a2[3] + 40))(a2[3], v33, v39 - v33);
                      goto LABEL_17;
                    }
                  }
                  else
                  {
                    uint64_t v36 = a2[1];
                  }
                  do
                  {
                    uint64_t v37 = *((void *)v36 - 1);
                    v36 -= 8;
                    *(void *)uint64_t v36 = 0;
                    *((void *)v30 - 1) = v37;
                    v30 -= 8;
                  }
                  while (v36 != v32);
                  goto LABEL_39;
                }
LABEL_50:
                if (v14)
                {
                  unint64_t v56 = v14;
                  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v58 + 40))(v58, v14, v57 - (void)v15);
                }
              }
            }
          }
          if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
  if (v51) {
    std::recursive_mutex::unlock(v50);
  }
  uint64_t v47 = v49;
  if (v49)
  {
    if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_1A248CCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a17)
  {
    a18 = a17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a20 + 40))(a20, a17, a19 - a17);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a14);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::populateClusterFeatureAnnotations(void *a1, uint64_t a2)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)v67, (uint64_t)a1);
  if (!(*(unsigned int (**)(void *))(*a1 + 320))(a1)) {
    goto LABEL_69;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1[36] + 8) + 72))(*(void *)(a1[36] + 8));
  uint64_t v5 = v4;
  if (!v4) {
    goto LABEL_69;
  }
  uint64_t v71 = 0;
  unint64_t v72 = 0;
  uint64_t v73 = 0;
  id v6 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v6 || v6->__shared_owners_ == -1) {
    goto LABEL_69;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v5 + 296);
  if (!v7) {
    uint64_t v9 = 0;
  }
  uint64_t v71 = v9;
  unint64_t v72 = v7;
  if (v9)
  {
    uint64_t v10 = *(void *)(v5 + 288);
    uint64_t v73 = v10;
    if (v10)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 72))(v10))
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 72))(v10);
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
        {
          operator new();
        }
        uint64_t v77 = mdm::Allocator::instance(void)::alloc;
        (*(void (**)(uint64_t, uint64_t **, uint64_t, void))(*(void *)v11 + 16))(v11, &v74, 1, 0);
        unint64_t v12 = 126 - 2 * __clz(v75 - v74);
        if (v75 == v74) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = v12;
        }
        std::__introsort<std::_ClassicAlgPolicy,md::ClusterTreeClusterNode::populateClusterFeatureAnnotations(std::vector<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},geo::StdAllocator<objc_object  {objcproto25VKCustomFeatureAnnotation}*,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,false>((uint64_t)v74, v75, v13, 1);
        unint64_t v14 = v75 - v74;
        uint64_t v15 = *(char **)a2;
        if (v14 <= (uint64_t)(*(void *)(a2 + 16) - *(void *)a2) >> 3) {
          goto LABEL_30;
        }
        if ((char *)v75 - (char *)v74 < 0) {
          abort();
        }
        uint64_t v16 = *(void *)(a2 + 8);
        uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
        uint64_t v18 = v16 - (void)v15;
        unint64_t v19 = v17 + ((v16 - (void)v15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v20 = v17 + 8 * v14;
        uint64_t v21 = *(char **)a2;
        uint64_t v22 = *(char **)(a2 + 8);
        if (v22 == *(char **)a2)
        {
          *(void *)a2 = v19;
          *(void *)(a2 + 8) = v19;
          uint64_t v25 = *(void *)(a2 + 16);
          *(void *)(a2 + 16) = v20;
LABEL_28:
          if (v22) {
            (*(void (**)(void, char *, uint64_t))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24), v22, v25 - (void)v22);
          }
LABEL_30:
          uint64_t v36 = v74;
          uint64_t v37 = v75;
          if (v74 != v75)
          {
            while (1)
            {
              uint64_t v39 = (*(void (**)(void))(*(void *)*v36 + 88))();
              uint64_t v40 = (void *)v39;
              uint64_t v41 = *(uint64_t **)(a2 + 8);
              unint64_t v42 = *(void *)(a2 + 16);
              if ((unint64_t)v41 < v42)
              {
                if (v41)
                {
                  *uint64_t v41 = v39;
                  uint64_t v40 = 0;
                }
                unint64_t v38 = v41 + 1;
                goto LABEL_33;
              }
              uint64_t v43 = ((uint64_t)v41 - *(void *)a2) >> 3;
              unint64_t v44 = v43 + 1;
              long long v45 = 0uLL;
              if ((unint64_t)(v43 + 1) >> 61) {
                abort();
              }
              uint64_t v46 = v42 - *(void *)a2;
              if (v46 >> 2 > v44) {
                unint64_t v44 = v46 >> 2;
              }
              uint64_t v47 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v44;
              if (v47)
              {
                uint64_t v48 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24), 8 * v47, 8);
                unsigned int v49 = (void *)(v48 + 8 * v43);
                uint64_t v50 = v48 + 8 * v47;
                long long v45 = 0uLL;
                if (v48)
                {
                  void *v49 = v40;
                  uint64_t v40 = 0;
                }
              }
              else
              {
                uint64_t v50 = 0;
                unsigned int v49 = (void *)(8 * v43);
              }
              unint64_t v38 = v49 + 1;
              char v51 = *(char **)a2;
              uint64_t v52 = *(char **)(a2 + 8);
              if (v52 != *(char **)a2) {
                break;
              }
              *(void *)a2 = v49;
              *(void *)(a2 + 8) = v38;
              uint64_t v58 = *(void *)(a2 + 16);
              *(void *)(a2 + 16) = v50;
              if (v52) {
                goto LABEL_58;
              }
LABEL_33:
              *(void *)(a2 + 8) = v38;

              if (++v36 == v37)
              {
                uint64_t v36 = v74;
                goto LABEL_64;
              }
            }
            unint64_t v53 = (unint64_t)&v52[-*(void *)a2 - 8];
            if (v53 > 0x57
              && ((unint64_t v54 = (v51 - v52 + 7) & 0xFFFFFFFFFFFFFFF8, &v52[v54] >= (char *)v49) || (char *)v49 + v54 >= v52))
            {
              uint64_t v60 = (v53 >> 3) + 1;
              uint64_t v55 = &v52[-8 * (v60 & 0x3FFFFFFFFFFFFFFCLL)];
              id v61 = v49 - 2;
              uint64_t v62 = (long long *)(v52 - 32);
              uint64_t v63 = v60 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v65 = *v62;
                long long v64 = v62[1];
                long long *v62 = v45;
                v62[1] = v45;
                v62 -= 2;
                *(v61 - 1) = v65;
                _OWORD *v61 = v64;
                v61 -= 2;
                v63 -= 4;
              }
              while (v63);
              v49 -= v60 & 0x3FFFFFFFFFFFFFFCLL;
              if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_53:
                uint64_t v52 = *(char **)a2;
                uint64_t v57 = *(char **)(a2 + 8);
                *(void *)a2 = v49;
                *(void *)(a2 + 8) = v38;
                uint64_t v58 = *(void *)(a2 + 16);
                *(void *)(a2 + 16) = v50;
                while (v57 != v52)
                {
                  unint64_t v59 = (void *)*((void *)v57 - 1);
                  v57 -= 8;
                }
                if (!v52) {
                  goto LABEL_33;
                }
LABEL_58:
                (*(void (**)(void, char *, uint64_t))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24), v52, v58 - (void)v52);
                goto LABEL_33;
              }
            }
            else
            {
              uint64_t v55 = *(char **)(a2 + 8);
            }
            do
            {
              uint64_t v56 = *((void *)v55 - 1);
              v55 -= 8;
              *(void *)uint64_t v55 = 0;
              *--unsigned int v49 = v56;
            }
            while (v55 != v51);
            goto LABEL_53;
          }
LABEL_64:
          if (v36)
          {
            uint64_t v75 = v36;
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v77 + 40))(v77, v36, v76 - (void)v36);
          }
          goto LABEL_66;
        }
        unint64_t v23 = (unint64_t)&v22[-*(void *)a2 - 8];
        if (v23 > 0x77)
        {
          if ((unint64_t)&v22[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] >= v19
            || (unint64_t v24 = v17 + ((v16 - (void)v15) & 0xFFFFFFFFFFFFFFF8),
                (v18 & 0xFFFFFFFFFFFFFFF8) - (v23 & 0xFFFFFFFFFFFFFFF8) + v17 - 8 >= (unint64_t)v22))
          {
            uint64_t v26 = v18 >> 3;
            uint64_t v27 = (v23 >> 3) + 1;
            uint64_t v28 = (_OWORD *)(v17 + 8 * v26 - 16);
            uint64_t v29 = (long long *)(v22 - 32);
            uint64_t v30 = v27 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v32 = *v29;
              long long v31 = v29[1];
              *uint64_t v29 = 0uLL;
              v29[1] = 0uLL;
              v29 -= 2;
              *(v28 - 1) = v32;
              *uint64_t v28 = v31;
              v28 -= 2;
              v30 -= 4;
            }
            while (v30);
            unint64_t v24 = v19 - 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
            v22 -= 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
            if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_26:
              uint64_t v22 = *(char **)a2;
              unint64_t v34 = *(char **)(a2 + 8);
              *(void *)a2 = v24;
              *(void *)(a2 + 8) = v19;
              uint64_t v25 = *(void *)(a2 + 16);
              *(void *)(a2 + 16) = v20;
              while (v34 != v22)
              {
                unint64_t v35 = (void *)*((void *)v34 - 1);
                v34 -= 8;
              }
              goto LABEL_28;
            }
          }
        }
        else
        {
          unint64_t v24 = v17 + ((v16 - (void)v15) & 0xFFFFFFFFFFFFFFF8);
        }
        do
        {
          uint64_t v33 = *((void *)v22 - 1);
          v22 -= 8;
          *(void *)uint64_t v22 = 0;
          *(void *)(v24 - 8) = v33;
          v24 -= 8;
        }
        while (v22 != v21);
        goto LABEL_26;
      }
    }
  }
LABEL_66:
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_69:
  if (v70) {
    std::recursive_mutex::unlock(v69);
  }
  unint64_t v66 = v68;
  if (v68)
  {
    if (!atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_1A248D3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a17)
  {
    a18 = a17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a20 + 40))(a20, a17, a19 - a17);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a14);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::parentClusterLabelMarker(md::StandardLabelMarker *this@<X0>, void *a2@<X8>)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)v17, (uint64_t)this);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 72))(*(void *)(*((void *)this + 36) + 8));
  uint64_t v5 = (void *)v4;
  if (!v4) {
    goto LABEL_26;
  }
  id v6 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v6 || v6->__shared_owners_ == -1) {
    goto LABEL_26;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  uint64_t v8 = v7;
  if (v7) {
    BOOL v9 = v5[37] == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (!v7) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v10 = v5[36];
    if (v10)
    {
      BOOL v11 = *(void *)(v10 + 72) != 0;
      goto LABEL_14;
    }
  }
  BOOL v11 = 0;
LABEL_14:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
    if (v11) {
      goto LABEL_16;
    }
LABEL_26:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_27;
  }
  if (!v11) {
    goto LABEL_26;
  }
LABEL_16:
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v12 = (std::__shared_weak_count *)v5[38];
  if (!v12 || v12->__shared_owners_ == -1)
  {
    uint64_t v13 = 0;
LABEL_36:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_37;
  }
  uint64_t v13 = std::__shared_weak_count::lock(v12);
  if (v13) {
    uint64_t v14 = v5[37];
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v21 = v14;
  uint64_t v22 = v13;
  if (!v14) {
    goto LABEL_36;
  }
  uint64_t v15 = v5[36];
  uint64_t v23 = v15;
  if (!v15 || !*(void *)(v15 + 72)) {
    goto LABEL_36;
  }
  (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
LABEL_37:
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_27:
  if (v20) {
    std::recursive_mutex::unlock(v19);
  }
  uint64_t v16 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
}

void sub_1A248D6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::pair<std::shared_ptr<md::LabelManager>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::isClusterChild(md::StandardLabelMarker *this)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v11, (uint64_t)this);
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 72))(*(void *)(*((void *)this + 36) + 8));
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 304);
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v3 = 0;
      goto LABEL_17;
    }
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    uint64_t v6 = v5;
    if (v5) {
      BOOL v7 = *(void *)(v3 + 296) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v3 = 0;
      if (!v5) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v8 = *(void *)(v3 + 288);
      if (v8) {
        uint64_t v3 = *(void *)(v8 + 72) != 0;
      }
      else {
        uint64_t v3 = 0;
      }
    }
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_17:
  if (v14) {
    std::recursive_mutex::unlock(v13);
  }
  BOOL v9 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v3;
}

void sub_1A248D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

VKObjectBoundsContext *md::StandardLabelMarker::clusterContentBounds(md::StandardLabelMarker *this)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)v30, (uint64_t)this);
  if (!(*(unsigned int (**)(md::StandardLabelMarker *))(*(void *)this + 320))(this)) {
    goto LABEL_14;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 72))(*(void *)(*((void *)this + 36) + 8));
  isa = (VKObjectBoundsContext *)v2;
  if (!v2) {
    goto LABEL_15;
  }
  unint64_t v34 = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 304);
  if (!v4 || v4->__shared_owners_ == -1)
  {
LABEL_14:
    isa = 0;
    goto LABEL_15;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  uint64_t v6 = v5;
  begiuint64_t n = isa[6]._points.__begin_;
  if (!v5) {
    begiuint64_t n = 0;
  }
  unint64_t v34 = begin;
  unint64_t v35 = v5;
  if (!begin) {
    goto LABEL_42;
  }
  isa = (VKObjectBoundsContext *)isa[6].super.isa;
  uint64_t v36 = isa;
  if (!isa) {
    goto LABEL_43;
  }
  if (!(*((uint64_t (**)(VKObjectBoundsContext *))isa->super.isa + 9))(isa))
  {
LABEL_42:
    isa = 0;
LABEL_43:
    if (!v6) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
  uint64_t v8 = (*((uint64_t (**)(VKObjectBoundsContext *))isa->super.isa + 9))(isa);
  BOOL v9 = objc_alloc_init(VKObjectBoundsContext);
  long long __p = 0;
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  {
    operator new();
  }
  uint64_t v40 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v8 + 16))(v8, &v37, 5, 16);
  uint64_t v15 = v37;
  uint64_t v14 = v38;
  uint64_t v16 = v38 - v37;
  if (v38 != v37)
  {
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF9) {
      abort();
    }
    uint64_t v17 = (char *)operator new(2 * v16);
    long long __p = v17;
    unint64_t v42 = v17;
    uint64_t v43 = &v17[16 * (v16 >> 3)];
    do
    {
      uint64_t v21 = (_OWORD *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(*(void *)v15 + 16));
      uint64_t v22 = v21;
      if (v17 < v43)
      {
        long long v10 = *v21;
        *(_OWORD *)uint64_t v17 = *v21;
        char v20 = v17 + 16;
      }
      else
      {
        uint64_t v23 = (char *)__p;
        uint64_t v24 = (v17 - (unsigned char *)__p) >> 4;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60) {
          abort();
        }
        uint64_t v26 = v43 - (unsigned char *)__p;
        if ((v43 - (unsigned char *)__p) >> 3 > v25) {
          unint64_t v25 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          if (v27 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v28 = (char *)operator new(16 * v27);
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = &v28[16 * v24];
        *(_OWORD *)uint64_t v29 = *v22;
        char v20 = v29 + 16;
        if (v17 == v23)
        {
          long long __p = &v28[16 * v24];
          unint64_t v42 = v29 + 16;
          uint64_t v43 = &v28[16 * v27];
        }
        else
        {
          do
          {
            long long v10 = *((_OWORD *)v17 - 1);
            *((_OWORD *)v29 - 1) = v10;
            v29 -= 16;
            v17 -= 16;
          }
          while (v17 != v23);
          uint64_t v17 = (char *)__p;
          long long __p = v29;
          unint64_t v42 = v20;
          uint64_t v43 = &v28[16 * v27];
          if (!v17) {
            goto LABEL_24;
          }
        }
        operator delete(v17);
      }
LABEL_24:
      unint64_t v42 = v20;
      v15 += 8;
      uint64_t v17 = (char *)v20;
    }
    while (v15 != v14);
  }
  LODWORD(v10) = 15.0;
  LODWORD(v11) = 30.0;
  LODWORD(v12) = 25.0;
  LODWORD(v13) = 30.0;
  -[VKObjectBoundsContext setEdgePadding:](v9, "setEdgePadding:", *(double *)&v10, v11, v12, v13);
  [(VKObjectBoundsContext *)v9 addPoints:&__p];
  isa = v9;
  if (v37)
  {
    uint64_t v38 = v37;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v40 + 40))(v40, v37, v39 - v37);
  }
  if (__p)
  {
    unint64_t v42 = __p;
    operator delete(__p);
  }

  if (v6)
  {
LABEL_44:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_15:
  if (v33) {
    std::recursive_mutex::unlock(v32);
  }
  uint64_t v18 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return isa;
}

void sub_1A248DCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
}

uint64_t md::StandardLabelMarker::isLeafCluster(md::StandardLabelMarker *this)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v6, (uint64_t)this);
  uint64_t v2 = (md::LabelExternalPointFeature *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8)
                                                                          + 72))(*(void *)(*((void *)this + 36)
                                                                                             + 8));
  if (!v2)
  {
    uint64_t isLeafCluster = 0;
    if (!v9) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t isLeafCluster = md::LabelExternalPointFeature::isLeafCluster(v2);
  if (v9) {
LABEL_3:
  }
    std::recursive_mutex::unlock(v8);
LABEL_4:
  uint64_t v4 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return isLeafCluster;
}

void sub_1A248DE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t md::StandardLabelMarker::isCluster(md::StandardLabelMarker *this)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v6, (uint64_t)this);
  uint64_t v2 = (md::LabelExternalPointFeature *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8)
                                                                          + 72))(*(void *)(*((void *)this + 36)
                                                                                             + 8));
  if (!v2)
  {
    uint64_t isCluster = 0;
    if (!v9) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t isCluster = md::LabelExternalPointFeature::isCluster(v2);
  if (v9) {
LABEL_3:
  }
    std::recursive_mutex::unlock(v8);
LABEL_4:
  uint64_t v4 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return isCluster;
}

void sub_1A248DF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t md::StandardLabelMarker::clientFeatureID(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 168))();
}

uint64_t md::StandardLabelMarker::featureID(md::StandardLabelMarker *this)
{
  return *((void *)this + 38);
}

uint64_t md::StandardLabelMarker::businessID(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 176))();
}

uint64_t md::StandardLabelMarker::isTrail(md::StandardLabelMarker *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 96))(&v10);
  if (v10)
  {
    unint64_t v1 = *(unsigned __int8 *)(v10 + 33);
    if (*(unsigned char *)(v10 + 33))
    {
      uint64_t v2 = *(_DWORD **)v10;
      if (**(_DWORD **)v10 == 185)
      {
        unint64_t v3 = 0;
        LODWORD(v1) = 1;
LABEL_11:
        BOOL v8 = (v2[2 * v3 + 1] & 0xFFFFFFFD) == 0;
LABEL_14:
        uint64_t v4 = v1 & v8;
        uint64_t v5 = v11;
        if (!v11) {
          return v4;
        }
        goto LABEL_15;
      }
      unint64_t v3 = 0;
      uint64_t v6 = v2 + 2;
      while (v1 - 1 != v3)
      {
        int v7 = *v6;
        v6 += 2;
        ++v3;
        if (v7 == 185)
        {
          LODWORD(v1) = v3 < v1;
          goto LABEL_11;
        }
      }
      LODWORD(v1) = 0;
    }
    BOOL v8 = 1;
    goto LABEL_14;
  }
  uint64_t v4 = 0;
  uint64_t v5 = v11;
  if (!v11) {
    return v4;
  }
LABEL_15:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v4;
}

uint64_t md::StandardLabelMarker::isPoint(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 341);
}

uint64_t md::StandardLabelMarker::isTransitNode(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 339);
}

uint64_t md::StandardLabelMarker::isOnRoute(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 340);
}

uint64_t md::StandardLabelMarker::isTransitAccessPoint(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 338);
}

uint64_t md::StandardLabelMarker::isTransitLine(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 337);
}

uint64_t md::StandardLabelMarker::isTransit(md::StandardLabelMarker *this)
{
  return *((unsigned __int8 *)this + 336);
}

uint64_t md::StandardLabelMarker::sortKey(md::StandardLabelMarker *this)
{
  return *((unsigned int *)this + 82);
}

uint64_t md::StandardLabelMarker::animationID(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 192))();
}

BOOL md::StandardLabelMarker::isFlyoverTour(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(md::StandardLabelMarker *))(*(void *)this + 224))(this) != 0;
}

uint64_t md::StandardLabelMarker::featureLabelIdentifier(md::StandardLabelMarker *this)
{
  return *(unsigned int *)(*((void *)this + 36) + 48);
}

BOOL md::StandardLabelMarker::isARWalkingFeature(md::StandardLabelMarker *this)
{
  return (*((unsigned char *)this + 225) & 0xFC) == 24;
}

BOOL md::StandardLabelMarker::isRouteAnnotation(md::StandardLabelMarker *this)
{
  return *((unsigned char *)this + 225) == 23;
}

BOOL md::StandardLabelMarker::isRouteWaypoint(md::StandardLabelMarker *this)
{
  return (*((unsigned char *)this + 225) & 0xFD) == 20;
}

BOOL md::StandardLabelMarker::isTrafficIncident(md::StandardLabelMarker *this)
{
  return *(unsigned char *)(*((void *)this + 36) + 1210) == 10;
}

BOOL md::StandardLabelMarker::isOneWayArrow(md::StandardLabelMarker *this)
{
  return *(unsigned char *)(*((void *)this + 36) + 1210) == 8;
}

void md::StandardLabelMarker::locale(md::StandardLabelMarker *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void, void))(**(void **)(*((void *)this + 36) + 8) + 480))(*(void *)(*((void *)this + 36) + 8), 0);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = v3;
  if (*(char *)(v3 + 23) < 0) {
    uint64_t v4 = *(void *)v3;
  }
  uint64_t v5 = [NSString stringWithUTF8String:v4];
  if (v5)
  {
    id v13 = v5;
    uint64_t v6 = (const char *)[v13 UTF8String];
  }
  else
  {
LABEL_6:
    id v13 = 0;
    uint64_t v6 = "";
  }
  {
    operator new();
  }
  uint64_t v7 = mdm::Allocator::instance(void)::alloc;
  a2[3] = mdm::Allocator::instance(void)::alloc;
  size_t v8 = strlen(v6);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v10 + 1, 1);
    a2[1] = v9;
    a2[2] = v11 | 0x8000000000000000;
    *a2 = v12;
    a2 = (void *)v12;
    goto LABEL_15;
  }
  *((unsigned char *)a2 + 23) = v8;
  if (v8) {
LABEL_15:
  }
    memmove(a2, v6, v9);
  *((unsigned char *)a2 + v9) = 0;
}

void sub_1A248E3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::subtext(md::StandardLabelMarker *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 36);
  uint64_t v4 = (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);

  if (v4
    && ((*(void (**)(uint64_t))(*(void *)v3 + 32))(v3),
        id v14 = (id)objc_claimAutoreleasedReturnValue(),
        [v14 subtitle],
        uint64_t v5 = objc_claimAutoreleasedReturnValue(),
        v14,
        v5))
  {
    id v15 = v5;
    uint64_t v6 = (const char *)[v15 UTF8String];
    id v7 = v15;
  }
  else
  {
    id v7 = 0;
    uint64_t v6 = "";
  }
  id v16 = v7;
  {
    operator new();
  }
  uint64_t v8 = mdm::Allocator::instance(void)::alloc;
  a2[3] = mdm::Allocator::instance(void)::alloc;
  size_t v9 = strlen(v6);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v11 = v9 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v11 + 1, 1);
    a2[1] = v10;
    a2[2] = v12 | 0x8000000000000000;
    *a2 = v13;
    a2 = (void *)v13;
    goto LABEL_13;
  }
  *((unsigned char *)a2 + 23) = v9;
  if (v9) {
LABEL_13:
  }
    memmove(a2, v6, v10);
  *((unsigned char *)a2 + v10) = 0;
}

void sub_1A248E5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::text(md::StandardLabelMarker *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 36);
  uint64_t v4 = (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);

  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = [v17 title];

    if (!v6)
    {
LABEL_17:
      id v18 = 0;
      size_t v10 = "";
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v3 + 272);
    if (!v7 || (uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 832))(v7)) == 0)
    {
      int v8 = *(unsigned __int8 *)(v3 + 1210);
      BOOL v9 = v8 == 7 || v8 == 4;
      if (!v9 || (uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(v3 + 8) + 496))(*(void *)(v3 + 8))) == 0)
      {
        uint64_t v5 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(v3 + 8) + 472))(*(void *)(v3 + 8), 0, v5);
        if (!v5) {
          goto LABEL_17;
        }
      }
    }
    if (*(char *)(v5 + 23) < 0) {
      uint64_t v5 = *(void *)v5;
    }
    uint64_t v6 = [NSString stringWithUTF8String:v5];
    if (!v6) {
      goto LABEL_17;
    }
  }
  id v18 = v6;
  size_t v10 = (const char *)[v18 UTF8String];
LABEL_18:
  {
    operator new();
  }
  uint64_t v11 = mdm::Allocator::instance(void)::alloc;
  a2[3] = mdm::Allocator::instance(void)::alloc;
  size_t v12 = strlen(v10);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v14 + 1, 1);
    a2[1] = v13;
    a2[2] = v15 | 0x8000000000000000;
    *a2 = v16;
    a2 = (void *)v16;
    goto LABEL_26;
  }
  *((unsigned char *)a2 + 23) = v12;
  if (v12) {
LABEL_26:
  }
    memmove(a2, v10, v13);
  *((unsigned char *)a2 + v13) = 0;
}

void sub_1A248E8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::debugString(uint64_t a1@<X8>)
{
  uint64_t v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v4 = a1;
    uint64_t v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    a1 = v4;
    if (v3) {
      operator new();
    }
  }
  *(void *)(a1 + 24) = *((void *)v2 + 91);
  *(unsigned char *)(a1 + 23) = 19;
  strcpy((char *)a1, "StandardLabelMarker");
}

uint64_t md::StandardLabelMarker::maxZoomRank(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 248))();
}

uint64_t md::StandardLabelMarker::minZoomRank(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 240))();
}

void md::StandardLabelMarker::styleAttributes(md::StandardLabelMarker *this)
{
  md::LabelMarker::acquireDisplayLock((md::LabelMarker *)&v3, (uint64_t)this);
  (*(void (**)(void))(**(void **)(*((void *)this + 36) + 8) + 584))();
  if (v6) {
    std::recursive_mutex::unlock(v5);
  }
  uint64_t v2 = v4;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1A248EB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t md::StandardLabelMarker::venueComponentType(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 416))();
}

uint64_t md::StandardLabelMarker::venueLookInsideFloorOrdinal(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 408))();
}

uint64_t md::StandardLabelMarker::venueFloorOrdinal(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 400))();
}

uint64_t md::StandardLabelMarker::venueComponentId(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 392))();
}

uint64_t md::StandardLabelMarker::venueLevelId(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 384))();
}

uint64_t md::StandardLabelMarker::venueBuildingId(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 376))();
}

uint64_t md::StandardLabelMarker::venueId(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 36) + 8) + 368))();
}

uint64_t md::StandardLabelMarker::featureId(md::StandardLabelMarker *this)
{
  return *((void *)this + 38);
}

uint64_t md::StandardLabelMarker::name(md::StandardLabelMarker *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 128))();
}

void md::StandardLabelMarker::~StandardLabelMarker(md::StandardLabelMarker *this)
{
  md::StandardLabelMarker::~StandardLabelMarker(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF53C6A8;
  atomic_fetch_add((atomic_uchar *volatile)(*((void *)this + 36) + 1297), 0xFFu);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 37);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 37);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::LabelMarker::~LabelMarker(this);
}

uint64_t md::StandardLabelMarker::StandardLabelMarker(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t a5, float a6)
{
  char v10 = *(unsigned char *)(a5 + 8);
  v18[0] = a2;
  v18[1] = a3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    md::LabelMarker::LabelMarker(a1, 0, v10, v18, a6);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    md::LabelMarker::LabelMarker(a1, 0, v10, v18, a6);
  }
  *(void *)a1 = &unk_1EF53C6A8;
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  *(void *)(a1 + 288) = *a4;
  *(void *)(a1 + 296) = v12;
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = *(void *)(a1 + 288);
  }
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  atomic_fetch_add((atomic_uchar *volatile)(v11 + 1297), 1u);
  *(void *)(a1 + 304) = *(void *)a5;
  if (a1 != a5) {
    std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>((void **)(a1 + 32), *(char **)(a5 + 32), *(char **)(a5 + 40), (uint64_t)(*(void *)(a5 + 40) - *(void *)(a5 + 32)) >> 3);
  }
  uint64_t v14 = *(void *)(a5 + 16);
  uint64_t v13 = *(void *)(a5 + 24);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 320);
  *(void *)(a1 + 312) = v14;
  *(void *)(a1 + 320) = v13;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a5 + 64);
  uint64_t v16 = *(unsigned __int8 *)(a1 + 225);
  *(unsigned char *)(a1 + 341) = v16 == 1;
  *(unsigned char *)(a1 + 336) = (v16 - 8) < 6;
  *(unsigned char *)(a1 + 337) = (v16 < 0xE) & (0x2600u >> v16);
  *(unsigned char *)(a1 + 340) = (v16 & 0xFE) == 12;
  *(unsigned char *)(a1 + 339) = (v16 & 0xFFFFFFFB) == 8;
  *(unsigned char *)(a1 + 338) = v16 == 11;
  md::StandardLabelMarker::populateFromFeature((md::StandardLabelMarker *)a1, (const md::LabelFeatureInfo *)a5);
  return a1;
}

void sub_1A248EFFC(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  md::LabelMarker::~LabelMarker(v1);
  _Unwind_Resume(a1);
}

void **std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__assign_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(void **result, char *__src, char *a3, unint64_t a4)
{
  char v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = (uint64_t)result[2];
  BOOL v9 = *result;
  if (a4 <= (v8 - (uint64_t)*result) >> 3)
  {
    uint64_t v16 = result + 1;
    uint64_t v15 = result[1];
    unint64_t v17 = (v15 - (unsigned char *)v9) >> 3;
    if (v17 >= a4)
    {
      size_t v20 = a3 - __src;
      if (a3 != __src) {
        uint64_t result = (void **)memmove(*result, __src, v20);
      }
    }
    else
    {
      id v18 = &__src[8 * v17];
      if (v15 != (unsigned char *)v9)
      {
        uint64_t result = (void **)memmove(*result, __src, v15 - (unsigned char *)v9);
        BOOL v9 = (void *)*v16;
      }
      unint64_t v19 = (char *)v9;
      if (v18 != a3)
      {
        unint64_t v19 = (char *)v9;
        do
        {
          if (v19) {
            *(void *)unint64_t v19 = *(void *)v18;
          }
          v18 += 8;
          v19 += 8;
        }
        while (v18 != a3);
      }
      size_t v20 = v19 - (char *)v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      (*(void (**)(void *, void *))(*(void *)result[3] + 40))(result[3], v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      goto LABEL_28;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_28:
    }
      abort();
    uint64_t v13 = v12;
    uint64_t result = (void **)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v7[3] + 16))(v7[3], 8 * v12, 8);
    BOOL v9 = result;
    void *v7 = result;
    v7[2] = &result[v13];
    uint64_t v14 = (char *)result;
    if (v6 != a3)
    {
      uint64_t v14 = (char *)result;
      do
      {
        if (v14) {
          *(void *)uint64_t v14 = *(void *)v6;
        }
        v6 += 8;
        v14 += 8;
      }
      while (v6 != a3);
    }
    size_t v20 = v14 - (char *)result;
    uint64_t v16 = v7 + 1;
  }
  void *v16 = (char *)v9 + v20;
  return result;
}

void md::StandardLabelMarker::populateFromFeature(md::StandardLabelMarker *this, const md::LabelFeatureInfo *a2)
{
  switch(*((unsigned char *)this + 225))
  {
    case 8:
      char v6 = (geo::codec::VectorTile *)*((void *)this + 39);
      if (v6)
      {
        uint64_t v7 = geo::codec::VectorTile::transitNodeForFeatureID(v6, *((void *)this + 38));
        if (v7)
        {
          uint64_t v8 = v7;
          long long __dst = 0uLL;
          BOOL v9 = *(std::__shared_weak_count **)(v7 + 8);
          if (v9)
          {
            uint64_t v10 = std::__shared_weak_count::lock(v9);
            *((void *)&__dst + 1) = v10;
            if (v10) {
              *(void *)&long long __dst = *(void *)v8;
            }
          }
          else
          {
            uint64_t v10 = 0;
          }
          if (*(unsigned char *)(v8 + 274))
          {
            unsigned __int8 v78 = 0;
            do
            {
              uint64_t v80 = geo::codec::vectorTransitLineForTransitNodeSubtitleIndex(v8, v78);
              uint64_t v81 = v80;
              if (v80)
              {
                if (geo::codec::featureGetNativeShieldCount(v80))
                {
                  unint64_t v193 = 0;
                  uint64_t v189 = 0;
                  uint64_t v179 = 0;
                  geo::codec::featureGetNativeShield(v81, 0, &v193, &v179, &v189);
                  if (v179)
                  {
                    int v83 = *(unsigned __int8 *)(v81 + 83);
                    LOBYTE(v82) = *(unsigned char *)(v81 + 80);
                    float v84 = (float)v82;
                    LOBYTE(v3) = *(unsigned char *)(v81 + 81);
                    LOBYTE(v4) = *(unsigned char *)(v81 + 82);
                    if ((float)(v84 * 0.0039216) >= 0.04045) {
                      float v85 = powf((float)(v84 * 0.0037171) + 0.052133, 2.4);
                    }
                    else {
                      float v85 = v84 * 0.00030353;
                    }
                    float v86 = (float)LODWORD(v3);
                    if ((float)((float)LODWORD(v3) * 0.0039216) >= 0.04045) {
                      float v3 = powf((float)(v86 * 0.0037171) + 0.052133, 2.4);
                    }
                    else {
                      float v3 = v86 * 0.00030353;
                    }
                    float v87 = (float)LODWORD(v4);
                    if ((float)((float)LODWORD(v4) * 0.0039216) >= 0.04045) {
                      float v4 = powf((float)(v87 * 0.0037171) + 0.052133, 2.4);
                    }
                    else {
                      float v4 = v87 * 0.00030353;
                    }
                    long long v88 = [VKImageSourceKey alloc];
                    v198[0] = (v83 << 24) | ((int)(float)(v4 * 255.0) << 16) | ((int)(float)(v3 * 255.0) << 8) | (int)(float)(v85 * 255.0);
                    long long v89 = [(VKImageSourceKey *)v88 initWithShieldText:v193 locale:v189 type:v179 color:v198];
                    uint64_t v191 = v89;
                    [(VKImageSourceKey *)v89 setDataType:2];
                    uint64_t v182 = 0;
                    geo::codec::transitLineGetSubtitleNativeLabel(v81, &v182, 0);
                    uint64_t v90 = v182;
                    if (v182)
                    {
                      uint64_t v91 = [NSString stringWithUTF8String:v182];
                      uint64_t v10 = (std::__shared_weak_count *)v91;
                    }
                    else
                    {
                      uint64_t v91 = [(VKImageSourceKey *)v89 shieldText];
                      uint64_t v2 = (std::__shared_weak_count *)v91;
                    }
                    [(VKImageSourceKey *)v89 setText:v91];
                    if (v90) {
                      id v92 = v10;
                    }
                    else {
                      id v92 = v2;
                    }

                    uint64_t v93 = geo::codec::VectorTile::transitSystems((geo::codec::VectorTile *)__dst)
                        + 72 * *(unsigned int *)(v81 + 84);
                    uint64_t v197 = 0;
                    geo::codec::transitSystemInfoGetNativeLabel((uint64_t *)&__dst, v93, 0, &v197, 0);
                    if (v197)
                    {
                      uint64_t v94 = objc_msgSend(NSString, "stringWithUTF8String:");
                      [(VKImageSourceKey *)v191 setRelatedText:v94];
                    }
                    int v95 = (void *)*((void *)this + 9);
                    if ((unint64_t)v95 >= *((void *)this + 10))
                    {
                      uint64_t v79 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 8, (id *)&v191);
                    }
                    else
                    {
                      if (v95)
                      {
                        size_t v96 = v191;
                        *int v95 = off_1EF559698;
                        v95[1] = v96;
                      }
                      uint64_t v79 = (uint64_t)(v95 + 3);
                    }
                    *((void *)this + 9) = v79;
                  }
                }
              }
              ++v78;
            }
            while (*(unsigned __int8 *)(v8 + 274) > v78);
            uint64_t v10 = (std::__shared_weak_count *)*((void *)&__dst + 1);
          }
          if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            uint64_t v97 = v10;
            goto LABEL_283;
          }
        }
      }
      return;
    case 9:
      if (*((void *)this + 39))
      {
        md::StandardLabelMarker::populateRelatedTextFromTransitLines(this);
        md::StandardLabelMarker::populateRelatedSubTextFromTransitLines(this);
        uint64_t v46 = geo::codec::VectorTile::transitLineForFeatureID(*((geo::codec::VectorTile **)this + 39), *((void *)this + 38));
        if (v46)
        {
          uint64_t v47 = v46;
          uint64_t NativeShieldCount = geo::codec::featureGetNativeShieldCount(v46);
          unsigned int v49 = (std::__shared_weak_count *)*((void *)this + 30);
          if (v49)
          {
            uint64_t v50 = std::__shared_weak_count::lock(v49);
            *((void *)&__dst + 1) = v50;
            if (v50)
            {
              uint64_t v28 = (atomic_ullong *)v50;
              uint64_t v51 = *((void *)this + 29);
              *(void *)&long long __dst = v51;
              if (NativeShieldCount)
              {
                if (v51)
                {
                  unint64_t v193 = 0;
                  uint64_t v189 = 0;
                  uint64_t v179 = 0;
                  geo::codec::featureGetNativeShield(v47, 0, &v193, &v179, &v189);
                  if (v179)
                  {
                    (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(v51 + 168) + 56) + 16))(&v182);
                    uint64_t v52 = [VKImageSourceKey alloc];
                    LODWORD(v197) = v182;
                    unint64_t v53 = [(VKImageSourceKey *)v52 initWithShieldText:v193 locale:v189 type:v179 color:&v197];
                    unint64_t v54 = v53;
                    uint64_t v191 = v53;
                    uint64_t v55 = (void *)*((void *)this + 9);
                    if ((unint64_t)v55 >= *((void *)this + 10))
                    {
                      uint64_t v57 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 8, (id *)&v191);
                    }
                    else
                    {
                      if (v55)
                      {
                        uint64_t v56 = v53;
                        *uint64_t v55 = off_1EF559698;
                        v55[1] = v56;
                      }
                      uint64_t v57 = (uint64_t)(v55 + 3);
                    }
                    *((void *)this + 9) = v57;
                    unint64_t v118 = (void *)*((void *)this + 17);
                    if ((unint64_t)v118 >= *((void *)this + 18))
                    {
                      uint64_t v120 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 16, (id *)&v191);
                    }
                    else
                    {
                      if (v118)
                      {
                        uint64_t v119 = v54;
                        *unint64_t v118 = off_1EF559698;
                        v118[1] = v119;
                      }
                      uint64_t v120 = (uint64_t)(v118 + 3);
                    }
                    *((void *)this + 17) = v120;
                  }
                }
              }
              goto LABEL_281;
            }
          }
        }
      }
      return;
    case 0xA:
      if (*((void *)this + 39))
      {
        md::StandardLabelMarker::populateRelatedTextFromTransitLines(this);
        md::StandardLabelMarker::populateRelatedSubTextFromTransitLines(this);
      }
      uint64_t v25 = *(void *)(*((void *)this + 36) + 8);
      if (!v25) {
        return;
      }
      uint64_t v26 = (std::__shared_weak_count *)*((void *)this + 30);
      if (!v26) {
        return;
      }
      unint64_t v27 = std::__shared_weak_count::lock(v26);
      int v183 = (atomic_ullong *)v27;
      if (!v27) {
        return;
      }
      uint64_t v28 = (atomic_ullong *)v27;
      uint64_t v182 = *((void *)this + 29);
      uint64_t v174 = v182;
      if (!v182) {
        goto LABEL_281;
      }
      uint64_t v179 = 0;
      long long v180 = 0uLL;
      {
        operator new();
      }
      uint64_t v181 = mdm::Allocator::instance(void)::alloc;
      uint64_t v191 = 0;
      uint64_t v192 = 0;
      std::mutex::lock((std::mutex *)(v25 + 8));
      uint64_t v29 = *(void *)(v25 + 152);
      int v170 = v28;
      if (!v29)
      {
        std::mutex::unlock((std::mutex *)(v25 + 8));
        goto LABEL_245;
      }
      long long v178 = (void *)(*(uint64_t (**)(uint64_t, VKImageSourceKey **))(*(void *)v29 + 16))(v29, &v191);
      std::mutex::unlock((std::mutex *)(v25 + 8));
      if (!v191 || !v178) {
        goto LABEL_245;
      }
      std::mutex::lock((std::mutex *)(v25 + 440));
      {
        operator new();
      }
      int v169 = (std::mutex *)(v25 + 440);
      uint64_t v172 = mdm::Allocator::instance(void)::alloc;
      uint64_t v30 = *(void *)(v25 + 544) - *(void *)(v25 + 536);
      if (v30)
      {
        uint64_t v31 = 0;
        long long v32 = 0;
        unint64_t v33 = 0;
        unint64_t v34 = 0;
        unint64_t v35 = v30 >> 5;
        if (v35 <= 1) {
          uint64_t v36 = 1;
        }
        else {
          uint64_t v36 = v35;
        }
        while (1)
        {
          if (*(_WORD *)(*(void *)(v25 + 536) + 32 * v31 + 12))
          {
            if ((unint64_t)v34 >= v33)
            {
              uint64_t v64 = v34 - v32;
              unint64_t v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 61) {
                abort();
              }
              unint64_t v66 = v33 - (void)v32;
              if ((uint64_t)(v33 - (void)v32) >> 2 > v65) {
                unint64_t v65 = (uint64_t)(v33 - (void)v32) >> 2;
              }
              if (v66 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v65;
              }
              if (v33)
              {
                uint64_t v67 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v172 + 16))(v172, 8 * v33, 8);
                uint64_t v68 = (uint64_t *)(v67 + 8 * v64);
                unint64_t v33 = v67 + 8 * v33;
                if (v67) {
                  uint64_t *v68 = v31;
                }
              }
              else
              {
                uint64_t v68 = (uint64_t *)(8 * v64);
              }
              uint64_t v69 = v68;
              if (v34 == v32) {
                goto LABEL_91;
              }
              unint64_t v70 = (char *)v34 - (char *)v32 - 8;
              if (v70 < 0x138
                || (uint64_t *)((char *)v68 - (v70 & 0xFFFFFFFFFFFFFFF8) - 8) > v68 - 1
                || (uint64_t *)((char *)v34 - (v70 & 0xFFFFFFFFFFFFFFF8) - 8) > v34 - 1
                || (unint64_t)((char *)v34 - (char *)v68) < 0x20)
              {
                uint64_t v71 = v34;
                uint64_t v69 = v68;
              }
              else
              {
                uint64_t v73 = (v70 >> 3) + 1;
                uint64_t v71 = &v34[-(v73 & 0x3FFFFFFFFFFFFFFCLL)];
                uint64_t v74 = v68 - 2;
                uint64_t v75 = v34 - 2;
                uint64_t v76 = v73 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v77 = *(_OWORD *)v75;
                  *((_OWORD *)v74 - 1) = *((_OWORD *)v75 - 1);
                  *(_OWORD *)uint64_t v74 = v77;
                  v74 -= 4;
                  v75 -= 4;
                  v76 -= 4;
                }
                while (v76);
                uint64_t v69 = &v68[-(v73 & 0x3FFFFFFFFFFFFFFCLL)];
                if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_91;
                }
              }
              do
              {
                uint64_t v72 = *--v71;
                *--uint64_t v69 = v72;
              }
              while (v71 != v32);
LABEL_91:
              unint64_t v34 = v68 + 1;
              if (v32) {
                (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v172 + 40))(v172, v32, v66);
              }
              long long v32 = v69;
              goto LABEL_72;
            }
            if (v34) {
              *unint64_t v34 = v31;
            }
            ++v34;
          }
LABEL_72:
          if (++v31 == v36) {
            goto LABEL_190;
          }
        }
      }
      unint64_t v34 = 0;
      unint64_t v33 = 0;
      long long v32 = 0;
LABEL_190:
      unint64_t v121 = v34 - v32;
      unint64_t v122 = 126 - 2 * __clz(v121);
      *(void *)&long long __dst = v25;
      if (v34 == v32) {
        uint64_t v123 = 0;
      }
      else {
        uint64_t v123 = v122;
      }
      std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::shieldsForLabelMarker(md::LabelManager *,std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>> &)::$_0 &,unsigned long *,false>(v32, v34, (uint64_t)&__dst, v123, 1);
      v190[0] = 0;
      {
        operator new();
      }
      v190[2] = 0;
      v190[1] = mdm::Allocator::instance(void)::alloc;
      uint64_t v189 = v190;
      if (v34 == v32)
      {
        std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&v189, v190[0]);
        if (!v34) {
          goto LABEL_244;
        }
      }
      else
      {
        unint64_t v171 = v33;
        uint64_t v124 = 0;
        if (v121 <= 1) {
          uint64_t v125 = 1;
        }
        else {
          uint64_t v125 = v34 - v32;
        }
        uint64_t v176 = v125;
        do
        {
          uint64_t v127 = v32[v124];
          unsigned int v128 = *(unsigned __int16 *)(*(void *)(v25 + 536) + 32 * v127 + 10);
          uint64_t v129 = *(void *)(v25 + 352);
          uint64_t v130 = v129 + 48 * *(unsigned __int16 *)(*(void *)(v25 + 536) + 32 * v127 + 10);
          *((void *)&v185 + 1) = *(void *)(v130 + 24);
          if (*(char *)(v130 + 23) < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&__dst, *(void **)v130, *(void *)(v130 + 8));
          }
          else
          {
            long long __dst = *(_OWORD *)v130;
            *(void *)&long long v185 = *(void *)(v130 + 16);
          }
          uint64_t v131 = v129 + 48 * v128;
          uint64_t v132 = *(void *)(v131 + 32);
          uint64_t v186 = v132;
          char v133 = *(unsigned char *)(v131 + 44);
          char v188 = v133;
          if (geo::codec::vectorTransitLineAlongLink(v178, v127))
          {
            uint64_t v134 = v25;
            (*(void (**)(const char **__return_ptr))(**(void **)(*(void *)(v174 + 168) + 56) + 16))(&v193);
            v135.i32[0] = (int)v193;
            int v136 = (int)v193;
            uint8x8_t v173 = v135;
            int v187 = (int)v193;
            if (std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::__emplace_unique_key_args<md::LabelShieldEntry,md::LabelShieldEntry const&>(&v189, (void **)&__dst, &__dst))
            {
              uint64_t v137 = v180;
              if ((unint64_t)v180 >= *((void *)&v180 + 1))
              {
                unint64_t v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v180 - (void)v179) >> 4);
                unint64_t v139 = v138 + 1;
                if (v138 + 1 > 0x555555555555555) {
                  abort();
                }
                if (0x5555555555555556 * ((uint64_t)(*((void *)&v180 + 1) - (void)v179) >> 4) > v139) {
                  unint64_t v139 = 0x5555555555555556 * ((uint64_t)(*((void *)&v180 + 1) - (void)v179) >> 4);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v180 + 1) - (void)v179) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                  uint64_t v140 = 0x555555555555555;
                }
                else {
                  uint64_t v140 = v139;
                }
                unint64_t v196 = &v181;
                if (v140) {
                  BOOL v141 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v181 + 16))(v181, 48 * v140, 8);
                }
                else {
                  BOOL v141 = 0;
                }
                uint64_t v142 = (char *)&v141[16 * ((uint64_t)(v180 - (void)v179) >> 4)];
                unint64_t v193 = v141;
                unint64_t v194 = v142;
                *(void *)&long long v195 = v142;
                *((void *)&v195 + 1) = &v141[48 * v140];
                if (v141)
                {
                  *((void *)v142 + 3) = *((void *)&v185 + 1);
                  uint64_t v25 = v134;
                  if (SBYTE7(v185) < 0)
                  {
                    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v142, (void *)__dst, *((unint64_t *)&__dst + 1));
                    uint64_t v142 = v194;
                    uint64_t v143 = (char *)v195;
                    uint64_t v132 = v186;
                    int v136 = v187;
                    char v133 = v188;
                  }
                  else
                  {
                    *(_OWORD *)uint64_t v142 = __dst;
                    *((void *)v142 + 2) = v185;
                    uint64_t v143 = (char *)&v141[48 * v138];
                  }
                  float v144 = (char *)&v141[48 * v138];
                  *((void *)v144 + 4) = v132;
                  *((_DWORD *)v144 + 10) = v136;
                  v144[44] = v133;
                }
                else
                {
                  uint64_t v143 = v142;
                  uint64_t v25 = v134;
                }
                unint64_t v126 = v143 + 48;
                *(void *)&long long v195 = v143 + 48;
                unint64_t v145 = v179;
                uint64_t v146 = (char *)v180;
                if ((char *)v180 == v179)
                {
                  uint64_t v179 = v142;
                  *(void *)&long long v180 = v126;
                  uint64_t v152 = *((void *)&v180 + 1);
                  *((void *)&v180 + 1) = *((void *)&v195 + 1);
                }
                else
                {
                  uint64_t v147 = 0;
                  do
                  {
                    uint64_t v148 = &v142[v147];
                    unint64_t v149 = &v146[v147];
                    long long v150 = *(_OWORD *)&v146[v147 - 32];
                    *((_OWORD *)v148 - 3) = *(_OWORD *)&v146[v147 - 48];
                    *((_OWORD *)v148 - 2) = v150;
                    *((void *)v149 - 5) = 0;
                    *((void *)v149 - 4) = 0;
                    *((void *)v149 - 6) = 0;
                    *((void *)v148 - 2) = *(void *)&v146[v147 - 16];
                    *((_DWORD *)v148 - 2) = *(_DWORD *)&v146[v147 - 8];
                    *(v148 - 4) = v146[v147 - 4];
                    v147 -= 48;
                  }
                  while (&v146[v147] != v145);
                  uint64_t v146 = v179;
                  uint64_t v151 = (char *)v180;
                  uint64_t v179 = &v142[v147];
                  uint64_t v152 = *((void *)&v180 + 1);
                  long long v180 = v195;
                  unint64_t v126 = (char *)v195;
                  while (v151 != v146)
                  {
                    if (*(v151 - 25) < 0) {
                      (*(void (**)(void, void, uint64_t))(**((void **)v151 - 3) + 40))(*((void *)v151 - 3), *((void *)v151 - 6), *((void *)v151 - 4) & 0x7FFFFFFFFFFFFFFFLL);
                    }
                    v151 -= 48;
                  }
                }
                if (v146) {
                  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)*v196 + 40))(*v196, v146, v152 - (void)v146);
                }
              }
              else
              {
                if ((void)v180)
                {
                  *(void *)(v180 + 24) = *((void *)&v185 + 1);
                  if (SBYTE7(v185) < 0)
                  {
                    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v137, (void *)__dst, *((unint64_t *)&__dst + 1));
                  }
                  else
                  {
                    *(_OWORD *)uint64_t v137 = __dst;
                    *(void *)(v137 + 16) = v185;
                  }
                  *(void *)(v137 + 32) = v132;
                  *(_DWORD *)(v137 + 40) = vmovn_s16((int16x8_t)vmovl_u8(v173)).u32[0];
                  *(unsigned char *)(v137 + 44) = v133;
                }
                unint64_t v126 = (char *)(v137 + 48);
              }
              *(void *)&long long v180 = v126;
            }
          }
          if (SBYTE7(v185) < 0) {
            (*(void (**)(void, void, uint64_t))(**((void **)&v185 + 1) + 40))(*((void *)&v185 + 1), __dst, v185 & 0x7FFFFFFFFFFFFFFFLL);
          }
          ++v124;
        }
        while (v124 != v176);
        std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&v189, v190[0]);
        unint64_t v33 = v171;
      }
      (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v172 + 40))(v172, v32, v33 - (void)v32);
LABEL_244:
      std::mutex::unlock(v169);
      uint64_t v28 = v170;
LABEL_245:
      uint64_t v153 = v192;
      if (v192 && !atomic_fetch_add(&v192->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
      int v154 = v179;
      size_t v155 = (char *)v180;
      if (v179 != (char *)v180)
      {
        do
        {
          *((void *)&v185 + 1) = *((void *)v154 + 3);
          if (v154[23] < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&__dst, *(void **)v154, *((void *)v154 + 1));
          }
          else
          {
            long long v156 = *(_OWORD *)v154;
            *(void *)&long long v185 = *((void *)v154 + 2);
            long long __dst = v156;
          }
          uint64_t v186 = *((void *)v154 + 4);
          int v187 = *((_DWORD *)v154 + 10);
          char v188 = v154[44];
          if (v186)
          {
            uint64_t v157 = [VKImageSourceKey alloc];
            if ((SBYTE7(v185) & 0x80u) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (long long *)__dst;
            }
            LODWORD(v189) = v187;
            uint64_t v159 = [(VKImageSourceKey *)v157 initWithShieldText:p_dst locale:0 type:v186 color:&v189];
            BOOL v160 = v159;
            unint64_t v193 = (const char *)v159;
            uint64_t v161 = (void *)*((void *)this + 9);
            if ((unint64_t)v161 >= *((void *)this + 10))
            {
              uint64_t v163 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 8, (id *)&v193);
            }
            else
            {
              if (v161)
              {
                int v162 = v159;
                *uint64_t v161 = off_1EF559698;
                v161[1] = v162;
              }
              uint64_t v163 = (uint64_t)(v161 + 3);
            }
            *((void *)this + 9) = v163;
            double v164 = (void *)*((void *)this + 17);
            if ((unint64_t)v164 >= *((void *)this + 18))
            {
              uint64_t v166 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 16, (id *)&v193);
            }
            else
            {
              if (v164)
              {
                unint64_t v165 = v160;
                void *v164 = off_1EF559698;
                v164[1] = v165;
              }
              uint64_t v166 = (uint64_t)(v164 + 3);
            }
            *((void *)this + 17) = v166;
          }
          if (SBYTE7(v185) < 0) {
            (*(void (**)(void, void, uint64_t))(**((void **)&v185 + 1) + 40))(*((void *)&v185 + 1), __dst, v185 & 0x7FFFFFFFFFFFFFFFLL);
          }
          v154 += 48;
        }
        while (v154 != v155);
        int v154 = v179;
        uint64_t v28 = v170;
      }
      if (v154)
      {
        unint64_t v167 = (char *)v180;
        int v168 = v154;
        if ((char *)v180 != v154)
        {
          do
          {
            if (*(v167 - 25) < 0) {
              (*(void (**)(void, void, uint64_t))(**((void **)v167 - 3) + 40))(*((void *)v167 - 3), *((void *)v167 - 6), *((void *)v167 - 4) & 0x7FFFFFFFFFFFFFFFLL);
            }
            v167 -= 48;
          }
          while (v167 != v154);
          int v168 = v179;
        }
        *(void *)&long long v180 = v154;
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v181 + 40))(v181, v168, *((void *)&v180 + 1) - (void)v168);
        uint64_t v28 = v183;
      }
      if (v28)
      {
LABEL_281:
        if (!atomic_fetch_add(v28 + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(atomic_ullong *))(*v28 + 16))(v28);
          uint64_t v97 = (std::__shared_weak_count *)v28;
LABEL_283:
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      return;
    case 0xB:
      uint64_t v37 = (geo::codec::VectorTile *)*((void *)this + 39);
      if (!v37) {
        return;
      }
      uint64_t v38 = geo::codec::VectorTile::transitAccessPointForFeatureID(v37, *((void *)this + 38));
      if (!v38) {
        return;
      }
      uint64_t v39 = v38;
      if (*(unsigned char *)(v38 + 72))
      {
        *(void *)&long long __dst = 0;
        unint64_t v193 = 0;
        geo::codec::featureGetNativeShield(v38, 0, &__dst, &v193, 0);
        if (v193)
        {
          uint64_t v40 = [VKImageSourceKey alloc];
          LODWORD(v179) = 0;
          uint64_t v41 = [(VKImageSourceKey *)v40 initWithShieldText:(void)__dst locale:0 type:v193 color:&v179];
          uint64_t v189 = v41;
          unint64_t v42 = [v41 shieldText];
          [v41 setText:v42];

          [v41 setDataType:5];
          uint64_t v43 = (void *)*((void *)this + 13);
          if ((unint64_t)v43 >= *((void *)this + 14))
          {
            uint64_t v45 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 12, (id *)&v189);
          }
          else
          {
            if (v43)
            {
              unint64_t v44 = v41;
              *uint64_t v43 = off_1EF559698;
              v43[1] = v44;
            }
            uint64_t v45 = (uint64_t)(v43 + 3);
          }
          *((void *)this + 13) = v45;
        }
      }
      uint64_t v98 = *(void *)(v39 + 224);
      if (!v98) {
        goto LABEL_171;
      }
      uint64_t v99 = geo::codec::VectorTile::transitNodeForFeatureID(*((geo::codec::VectorTile **)this + 39), v98);
      if (!v99) {
        goto LABEL_171;
      }
      unint64_t v193 = 0;
      geo::codec::featureGetLocalizedLabel(v99, 0, (unint64_t *)&v193, 0);
      uint64_t v100 = v193;
      if (!v193 || !*v193) {
        goto LABEL_171;
      }
      {
        operator new();
      }
      *((void *)&v185 + 1) = mdm::Allocator::instance(void)::alloc;
      size_t v101 = strlen(v100);
      if (v101 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      size_t v102 = v101;
      if (v101 >= 0x17)
      {
        uint64_t v107 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v101 | 7) != 0x17) {
          uint64_t v107 = v101 | 7;
        }
        uint64_t v108 = v107 + 1;
        uint64_t v103 = (long long *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, v107 + 1, 1);
        *((void *)&__dst + 1) = v102;
        *(void *)&long long v185 = v108 | 0x8000000000000000;
        *(void *)&long long __dst = v103;
      }
      else
      {
        BYTE7(v185) = v101;
        uint64_t v103 = &__dst;
        if (!v101) {
          goto LABEL_164;
        }
      }
      memmove(v103, v100, v102);
LABEL_164:
      *((unsigned char *)v103 + v102) = 0;
      long long v109 = (_OWORD *)*((void *)this + 21);
      if ((unint64_t)v109 >= *((void *)this + 22))
      {
        uint64_t v110 = std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__push_back_slow_path<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>((uint64_t *)this + 20, (uint64_t)&__dst);
      }
      else
      {
        if (v109)
        {
          _OWORD *v109 = __dst;
          v109[1] = v185;
          *(void *)&long long v185 = 0;
          long long __dst = 0uLL;
        }
        uint64_t v110 = v109 + 2;
      }
      *((void *)this + 21) = v110;
      if (SBYTE7(v185) < 0) {
        (*(void (**)(void, void, uint64_t))(**((void **)&v185 + 1) + 40))(*((void *)&v185 + 1), __dst, v185 & 0x7FFFFFFFFFFFFFFFLL);
      }
LABEL_171:
      uint64_t v111 = 0;
      if (*(unsigned __int16 *)(v39 + 240) <= 1u) {
        unsigned __int16 v112 = 1;
      }
      else {
        unsigned __int16 v112 = *(_WORD *)(v39 + 240);
      }
      do
      {
        if (v112)
        {
          unint64_t v115 = [[VKImageSourceKey alloc] initWithIconAttributeKey:45 attributeValue:v111];
          *(void *)&long long __dst = v115;
          [(VKImageSourceKey *)v115 setDataType:1];
          [(VKImageSourceKey *)v115 setDataValue:v111];
          uint64_t v116 = (void *)*((void *)this + 9);
          if ((unint64_t)v116 >= *((void *)this + 10))
          {
            uint64_t v113 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 8, (id *)&__dst);
          }
          else
          {
            if (v116)
            {
              uint64_t v117 = v115;
              void *v116 = off_1EF559698;
              v116[1] = v117;
            }
            uint64_t v113 = (uint64_t)(v116 + 3);
          }
          *((void *)this + 9) = v113;
        }
        uint64_t v111 = (v111 + 1);
        unsigned int v114 = v112;
        v112 >>= 1;
      }
      while (v114 > 1);
      return;
    case 0xC:
      uint64_t v11 = (*(uint64_t (**)(void, const md::LabelFeatureInfo *))(**(void **)(*((void *)this + 36) + 8)
                                                                            + 72))(*(void *)(*((void *)this + 36) + 8), a2);
      if (!v11) {
        return;
      }
      unint64_t v12 = *(unsigned __int8 *****)(v11 + 424);
      uint64_t v175 = v11;
      uint64_t v177 = *(unsigned __int8 *****)(v11 + 432);
      if (v12 == v177) {
        goto LABEL_69;
      }
      while (2)
      {
        uint64_t v13 = **v12;
        uint64_t v14 = (*v12)[1];
        while (2)
        {
          if (v13 != v14)
          {
            int v16 = **v13;
            if (v16 == 1)
            {
              uint64_t v17 = 3;
            }
            else
            {
              if (v16 != 2)
              {
LABEL_14:
                v13 += 2;
                continue;
              }
              uint64_t v17 = 4;
            }
            id v18 = [[VKImageSourceKey alloc] initWithDataType:v17];
            *(void *)&long long __dst = v18;
            unint64_t v19 = *v13 + 8;
            if ((char)(*v13)[31] < 0) {
              unint64_t v19 = (void *)*v19;
            }
            size_t v20 = [NSString stringWithUTF8String:v19];
            [(VKImageSourceKey *)v18 setText:v20];

            uint64_t v21 = *v13 + 32;
            if ((char)(*v13)[55] < 0) {
              uint64_t v21 = (void *)*v21;
            }
            uint64_t v22 = [NSString stringWithUTF8String:v21];
            [(VKImageSourceKey *)v18 setRelatedText:v22];

            uint64_t v23 = (void *)*((void *)this + 9);
            if ((unint64_t)v23 >= *((void *)this + 10))
            {
              uint64_t v15 = std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>((uint64_t *)this + 8, (id *)&__dst);
            }
            else
            {
              if (v23)
              {
                uint64_t v24 = v18;
                *uint64_t v23 = off_1EF559698;
                v23[1] = v24;
              }
              uint64_t v15 = (uint64_t)(v23 + 3);
            }
            *((void *)this + 9) = v15;

            goto LABEL_14;
          }
          break;
        }
        v12 += 2;
        if (v12 != v177) {
          continue;
        }
        break;
      }
LABEL_69:
      *((_DWORD *)this + 82) = *(_DWORD *)(v175 + 84);
      return;
    case 0xD:
      unint64_t v59 = (long long *)((char *)a2 + 72);
      uint64_t v60 = *((unsigned __int8 *)a2 + 95);
      if ((v60 & 0x80u) != 0) {
        uint64_t v60 = *((void *)a2 + 10);
      }
      if (v60)
      {
        unint64_t v61 = *((void *)this + 21);
        if (v61 >= *((void *)this + 22))
        {
          uint64_t v63 = std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&>((uint64_t *)this + 20, (long long *)((char *)a2 + 72));
        }
        else
        {
          if (v61)
          {
            *(void *)(v61 + 24) = *((void *)a2 + 12);
            if (*((char *)a2 + 95) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v61, *((void **)a2 + 9), *((void *)a2 + 10));
            }
            else
            {
              long long v62 = *v59;
              *(void *)(v61 + 16) = *((void *)a2 + 11);
              *(_OWORD *)unint64_t v61 = v62;
            }
          }
          uint64_t v63 = v61 + 32;
          *((void *)this + 21) = v61 + 32;
        }
        *((void *)this + 21) = v63;
      }
      uint64_t v104 = *((unsigned __int8 *)a2 + 127);
      if ((v104 & 0x80u) != 0) {
        uint64_t v104 = *((void *)a2 + 14);
      }
      if (v104)
      {
        unint64_t v105 = *((void *)this + 25);
        if (v105 >= *((void *)this + 26))
        {
          *((void *)this + 25) = std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&>((uint64_t *)this + 24, v59);
        }
        else
        {
          if (v105)
          {
            *(void *)(v105 + 24) = *((void *)a2 + 12);
            if (*((char *)a2 + 95) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v105, *((void **)a2 + 9), *((void *)a2 + 10));
            }
            else
            {
              long long v106 = *v59;
              *(void *)(v105 + 16) = *((void *)v59 + 2);
              *(_OWORD *)unint64_t v105 = v106;
            }
          }
          *((void *)this + 25) = v105 + 32;
          *((void *)this + 25) = v105 + 32;
        }
      }
      return;
    default:
      return;
  }
}

void sub_1A2490910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  if (SHIBYTE(a29) < 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a30 + 40))(a30, a27, a29 & 0x7FFFFFFFFFFFFFFFLL);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A24909FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  if (SHIBYTE(a29) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a30 + 40))(a30, a27, a29 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&a34, a35);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a14 + 40))(a14, v35, a13 - v35);
  std::mutex::unlock(a10);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v36 - 200);
  std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::~vector[abi:nn180100](&a21);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_1A2490A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](va1);
  _Unwind_Resume(a1);
}

void sub_1A2490A90()
{
  JUMPOUT(0x1A2490B40);
}

void sub_1A2490AA0()
{
  JUMPOUT(0x1A2490B54);
}

void sub_1A2490AB0()
{
  if (v1) {

  }
  else {
  JUMPOUT(0x1A2490B40);
  }
}

void sub_1A2490ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (SHIBYTE(a29) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a30 + 40))(a30, a27, a29 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::vector<md::LabelShieldEntry,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::~vector[abi:nn180100](&a21);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_1A2490B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_1A2490B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::StandardLabelMarker::populateRelatedTextFromTransitLines(md::StandardLabelMarker *this)
{
  uint64_t v2 = &v51;
  uint64_t v51 = 0;
  float v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    operator new();
  }
  uint64_t v52 = mdm::Allocator::instance(void)::alloc;
  uint64_t v53 = 0;
  uint64_t v50 = &v51;
  float v4 = (uint64_t *)*((void *)this + 4);
  uint64_t v47 = (uint64_t *)*((void *)this + 5);
  if (v4 == v47)
  {
    uint64_t v41 = 0;
    return std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy((uint64_t)&v50, (uint64_t)v41);
  }
  uint64_t v5 = (geo::codec::VectorTile **)((char *)this + 312);
  uint64_t v43 = (uint64_t *)((char *)this + 160);
  uint64_t v45 = this;
  uint64_t v46 = (geo::codec::VectorTile **)((char *)this + 312);
  while (2)
  {
    uint64_t v7 = geo::codec::VectorTile::transitSystemInfoForFeatureID(*v5, *v4);
    unint64_t v48 = 0;
    __s = 0;
    geo::codec::transitSystemInfoGetLocalizedLabel((void **)v5, v7, 0, (unint64_t *)&__s, &v48);
    if (!__s || !*__s)
    {
      geo::codec::transitSystemInfoGetNativeLabel((uint64_t *)v5, v7, 0, &__s, &v48);
      if (!__s) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52 + 16))(v52, 64, 8);
    uint64_t v54 = v8;
    uint64_t v55 = &v52;
    char v56 = 0;
    BOOL v9 = __s;
    {
      operator new();
    }
    uint64_t v10 = *((void *)v3 + 91);
    *(void *)(v8 + 56) = v10;
    size_t v11 = strlen(v9);
    if (v11 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    size_t v12 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v14 = v11 | 7;
      }
      uint64_t v15 = v14 + 1;
      uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v14 + 1, 1);
      *(void *)(v8 + 40) = v12;
      *(void *)(v8 + 48) = v15 | 0x8000000000000000;
      *(void *)(v8 + 32) = v13;
      goto LABEL_18;
    }
    uint64_t v13 = (void *)(v8 + 32);
    *(unsigned char *)(v8 + 55) = v11;
    if (v11) {
LABEL_18:
    }
      memmove(v13, v9, v12);
    *((unsigned char *)v13 + v12) = 0;
    uint64_t v16 = v54;
    uint64_t v17 = v51;
    uint64_t v18 = v2;
    unint64_t v19 = v2;
    if (!v51)
    {
LABEL_46:
      *(void *)uint64_t v16 = 0;
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = v2;
      VKImageSourceKey *v18 = (uint64_t *)v16;
      if (*v50)
      {
        uint64_t v50 = (uint64_t **)*v50;
        uint64_t v16 = (uint64_t)*v18;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v51, (uint64_t *)v16);
      ++v53;
      unint64_t v33 = (char *)*((void *)v45 + 21);
      uint64_t v2 = v19;
      float v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      if ((unint64_t)v33 >= *((void *)v45 + 22))
      {
        char v6 = std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<char const*&>(v43, (const char **)&__s);
        uint64_t v5 = v46;
LABEL_5:
        *((void *)v45 + 21) = v6;
        goto LABEL_6;
      }
      if (!v33)
      {
LABEL_64:
        char v6 = v33 + 32;
        *((void *)v45 + 21) = v33 + 32;
        uint64_t v5 = v46;
        goto LABEL_5;
      }
      unint64_t v34 = __s;
      {
        operator new();
      }
      uint64_t v35 = mdm::Allocator::instance(void)::alloc;
      *((void *)v33 + 3) = mdm::Allocator::instance(void)::alloc;
      size_t v36 = strlen(v34);
      if (v36 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      size_t v37 = v36;
      if (v36 >= 0x17)
      {
        uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17) {
          uint64_t v39 = v36 | 7;
        }
        uint64_t v40 = v39 + 1;
        uint64_t v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v39 + 1, 1);
        *((void *)v33 + 1) = v37;
        *((void *)v33 + 2) = v40 | 0x8000000000000000;
        *(void *)unint64_t v33 = v38;
      }
      else
      {
        v33[23] = v36;
        uint64_t v38 = v33;
        if (!v36) {
          goto LABEL_63;
        }
      }
      memmove(v38, v34, v37);
LABEL_63:
      *((unsigned char *)v38 + v37) = 0;
      goto LABEL_64;
    }
    char v20 = *(unsigned char *)(v54 + 55);
    int v21 = v20;
    uint64_t v44 = *(void *)(v54 + 32);
    if (v20 < 0) {
      uint64_t v22 = *(const void **)(v54 + 32);
    }
    else {
      uint64_t v22 = (const void *)(v54 + 32);
    }
    if (v20 < 0) {
      unint64_t v23 = *(void *)(v54 + 40);
    }
    else {
      unint64_t v23 = *(unsigned __int8 *)(v54 + 55);
    }
    while (1)
    {
      while (1)
      {
        uint64_t v2 = (uint64_t **)v17;
        uint64_t v26 = v17[4];
        uint64_t v24 = v17 + 4;
        uint64_t v25 = (uint64_t *)v26;
        int v27 = *((char *)v24 + 23);
        uint64_t v28 = v27 >= 0 ? v24 : v25;
        unint64_t v29 = v27 >= 0 ? *((unsigned __int8 *)v24 + 23) : v24[1];
        size_t v30 = v29 >= v23 ? v23 : v29;
        int v31 = memcmp(v22, v28, v30);
        if (v31) {
          break;
        }
        if (v23 >= v29) {
          goto LABEL_40;
        }
LABEL_26:
        uint64_t v17 = *v2;
        uint64_t v18 = v2;
        if (!*v2) {
          goto LABEL_46;
        }
      }
      if (v31 < 0) {
        goto LABEL_26;
      }
LABEL_40:
      int v32 = memcmp(v28, v22, v30);
      if (!v32) {
        break;
      }
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_55;
      }
LABEL_44:
      uint64_t v17 = v2[1];
      if (!v17)
      {
        uint64_t v18 = v2 + 1;
        goto LABEL_46;
      }
    }
    if (v29 < v23) {
      goto LABEL_44;
    }
LABEL_55:
    uint64_t v2 = v19;
    float v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    uint64_t v5 = v46;
    if (v16)
    {
      if (v21 < 0) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v16 + 56) + 40))(*(void *)(v16 + 56), v44, *(void *)(v16 + 48) & 0x7FFFFFFFFFFFFFFFLL);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)*v55 + 40))(*v55, v16, 64);
    }
LABEL_6:
    if (++v4 != v47) {
      continue;
    }
    break;
  }
  uint64_t v41 = v51;
  return std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy((uint64_t)&v50, (uint64_t)v41);
}

void sub_1A249113C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  *(void *)(v19 + 168) = v20;
  std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void md::StandardLabelMarker::populateRelatedSubTextFromTransitLines(md::StandardLabelMarker *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 4);
  uint64_t v2 = (uint64_t *)*((void *)this + 5);
  if (v1 != v2)
  {
    float v4 = (uint64_t *)((char *)this + 192);
    char v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    uint64_t v20 = (uint64_t *)*((void *)this + 5);
    while (1)
    {
      uint64_t v8 = geo::codec::VectorTile::transitLineForFeatureID(*((geo::codec::VectorTile **)this + 39), *v1);
      unint64_t v21 = 0;
      __s = 0;
      geo::codec::featureGetLocalizedLabel(v8, 0, (unint64_t *)&__s, &v21);
      BOOL v9 = __s;
      if (!__s || !*__s)
      {
        geo::codec::featureGetNativeLabel(v8, 0, &__s, &v21);
        BOOL v9 = __s;
        if (!__s) {
          goto LABEL_5;
        }
      }
      uint64_t v10 = (char *)*((void *)this + 25);
      if ((unint64_t)v10 < *((void *)this + 26)) {
        break;
      }
      uint64_t v7 = std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<char const*&>(v4, (const char **)&__s);
LABEL_4:
      *((void *)this + 25) = v7;
LABEL_5:
      if (++v1 == v2) {
        return;
      }
    }
    if (!v10)
    {
LABEL_21:
      uint64_t v7 = v10 + 32;
      *((void *)this + 25) = v10 + 32;
      goto LABEL_4;
    }
    if ((atomic_load_explicit(v5, memory_order_acquire) & 1) == 0 && __cxa_guard_acquire((__guard *)v5)) {
      operator new();
    }
    uint64_t v11 = *((void *)v6 + 91);
    *((void *)v10 + 3) = v11;
    size_t v12 = strlen(v9);
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    size_t v13 = v12;
    if (v12 >= 0x17)
    {
      uint64_t v15 = v4;
      uint64_t v16 = v6;
      uint64_t v17 = v5;
      uint64_t v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v18 = v12 | 7;
      }
      uint64_t v19 = v18 + 1;
      uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v18 + 1, 1);
      *((void *)v10 + 1) = v13;
      *((void *)v10 + 2) = v19 | 0x8000000000000000;
      *(void *)uint64_t v10 = v14;
      uint64_t v5 = v17;
      char v6 = v16;
      float v4 = v15;
      uint64_t v2 = v20;
    }
    else
    {
      v10[23] = v12;
      uint64_t v14 = v10;
      if (!v12) {
        goto LABEL_20;
      }
    }
    memmove(v14, v9, v13);
LABEL_20:
    *((unsigned char *)v14 + v13) = 0;
    goto LABEL_21;
  }
}

void sub_1A249139C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 200) = v2;
  _Unwind_Resume(a1);
}

void sub_1A24913A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 200) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> const&>(uint64_t *a1, long long *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    abort();
  }
  uint64_t v5 = a1 + 3;
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  BOOL v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
  uint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  if (!v7) {
    uint64_t v8 = v3;
  }
  if (v8)
  {
    uint64_t v10 = 32 * v8;
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 16))(*v5, 32 * v8, 8);
    uint64_t v12 = v11 + 32 * v2;
    uint64_t v13 = v11 + v10;
    if (v11)
    {
      *(void *)(v12 + 24) = *((void *)a2 + 3);
      if (*((char *)a2 + 23) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v12, *(void **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v14 = *a2;
        *(void *)(v12 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v12 = v14;
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 32 * v2;
  }
  uint64_t v15 = v12 + 32;
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  if (v16 == *a1)
  {
    uint64_t v19 = a1[1];
  }
  else
  {
    do
    {
      long long v18 = *(_OWORD *)(v16 - 16);
      *(_OWORD *)(v12 - 32) = *(_OWORD *)(v16 - 32);
      *(_OWORD *)(v12 - 16) = v18;
      v12 -= 32;
      *(void *)(v16 - 24) = 0;
      *(void *)(v16 - 16) = 0;
      *(void *)(v16 - 32) = 0;
      v16 -= 32;
    }
    while (v16 != v17);
    uint64_t v19 = *a1;
    uint64_t v16 = a1[1];
  }
  *a1 = v12;
  a1[1] = v15;
  uint64_t v20 = a1[2];
  a1[2] = v13;
  if (v16 != v19)
  {
    uint64_t v21 = v16 - 32;
    do
    {
      if (*(char *)(v21 + 23) < 0) {
        (*(void (**)(void, void, uint64_t))(**(void **)(v21 + 24) + 40))(*(void *)(v21 + 24), *(void *)v21, *(void *)(v21 + 16) & 0x7FFFFFFFFFFFFFFFLL);
      }
      BOOL v22 = v21 == v19;
      v21 -= 32;
    }
    while (!v22);
    uint64_t v16 = v19;
  }
  if (v16) {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 40))(*v5, v16, v20 - v16);
  }
  return v15;
}

void sub_1A24915A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKImageSourceKey * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::__emplace_back_slow_path<VKImageSourceKey * {__strong}&,geo::memory_management_mode const&>(uint64_t *a1, id *a2)
{
  uint64_t v2 = 0xAAAAAAAAAAAAAAALL;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < 0x555555555555555) {
    uint64_t v2 = v4;
  }
  if (v2)
  {
    uint64_t v7 = 24 * v2;
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 24 * v2, 8);
    uint64_t v9 = v8 + 24 * v3;
    uint64_t v10 = v8 + v7;
    if (v8)
    {
      uint64_t v11 = v8;
      id v12 = *a2;
      *(void *)uint64_t v9 = off_1EF559698;
      *(void *)(v11 + 24 * v3 + 8) = v12;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 8 * ((a1[1] - *a1) >> 3);
  }
  uint64_t v13 = v9 + 24;
  uint64_t v15 = (char *)*a1;
  long long v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v13;
    uint64_t v19 = (char *)a1[2];
    a1[2] = v10;
    if (!v14) {
      return v13;
    }
    goto LABEL_18;
  }
  uint64_t v16 = v9 - 24;
  do
  {
    *(void *)(v9 - 24) = off_1EF559698;
    v9 -= 24;
    *(void *)(v9 + 8) = 0;
    objc_storeStrong((id *)(v9 + 8), *((id *)v14 - 2));
    uint64_t v17 = (void *)*((void *)v14 - 2);
    *((void *)v14 - 2) = 0;

    v16 -= 24;
    v14 -= 24;
  }
  while (v14 != v15);
  long long v14 = (char *)*a1;
  long long v18 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v13;
  uint64_t v19 = (char *)a1[2];
  a1[2] = v10;
  if (v18 != v14)
  {
    uint64_t v20 = v18 - 24;
    uint64_t v21 = v18 - 24;
    BOOL v22 = v18 - 24;
    do
    {
      unint64_t v23 = *(void (***)(char *))v22;
      v22 -= 24;
      (*v23)(v21);
      v20 -= 24;
      BOOL v24 = v21 == v14;
      uint64_t v21 = v22;
    }
    while (!v24);
  }
  if (v14) {
LABEL_18:
  }
    (*(void (**)(uint64_t, char *, int64_t))(*(void *)a1[3] + 40))(a1[3], v14, v19 - v14);
  return v13;
}

_OWORD *std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__push_back_slow_path<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    abort();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 4 > v3) {
    unint64_t v3 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  uint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    uint64_t v7 = v3;
  }
  if (v7)
  {
    uint64_t v9 = 32 * v7;
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 32 * v7, 8);
    uint64_t v11 = (_OWORD *)(v10 + 32 * v2);
    uint64_t v7 = v10 + v9;
    if (v10)
    {
      long long v12 = *(_OWORD *)(a2 + 16);
      _OWORD *v11 = *(_OWORD *)a2;
      v11[1] = v12;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = 0;
    }
  }
  else
  {
    uint64_t v11 = (_OWORD *)(32 * v2);
  }
  uint64_t v13 = v11 + 2;
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = (uint64_t)v11;
    a1[1] = (uint64_t)v13;
    uint64_t v18 = a1[2];
    a1[2] = v7;
  }
  else
  {
    do
    {
      long long v16 = *(_OWORD *)(v15 - 16);
      *(v11 - 2) = *(_OWORD *)(v15 - 32);
      *(v11 - 1) = v16;
      v11 -= 2;
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 32) = 0;
      v15 -= 32;
    }
    while (v15 != v14);
    uint64_t v15 = *a1;
    uint64_t v17 = a1[1];
    *a1 = (uint64_t)v11;
    a1[1] = (uint64_t)v13;
    uint64_t v18 = a1[2];
    a1[2] = v7;
    while (v17 != v15)
    {
      if (*(char *)(v17 - 9) < 0) {
        (*(void (**)(void, void, uint64_t))(**(void **)(v17 - 8) + 40))(*(void *)(v17 - 8), *(void *)(v17 - 32), *(void *)(v17 - 16) & 0x7FFFFFFFFFFFFFFFLL);
      }
      v17 -= 32;
    }
  }
  if (v15) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v15, v18 - v15);
  }
  return v13;
}

uint64_t std::__split_buffer<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 9) < 0)
      {
        (*(void (**)(void, void, uint64_t))(**(void **)(v2 - 8) + 40))(*(void *)(v2 - 8), *(void *)(v2 - 32), *(void *)(v2 - 16) & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

char *std::vector<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::__emplace_back_slow_path<char const*&>(uint64_t *a1, const char **a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    abort();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 4 > v3) {
    unint64_t v3 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  uint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    uint64_t v7 = v3;
  }
  int v32 = a1 + 3;
  if (!v7)
  {
    uint64_t v11 = (char *)(32 * v2);
    uint64_t v31 = 0;
    goto LABEL_14;
  }
  uint64_t v9 = 32 * v7;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 32 * v7, 8);
  uint64_t v11 = (char *)(v10 + 32 * v2);
  unint64_t v29 = v11;
  size_t v30 = v11;
  uint64_t v31 = v10 + v9;
  if (!v10)
  {
LABEL_14:
    long long v16 = v11;
    goto LABEL_20;
  }
  long long v12 = *a2;
  {
    operator new();
  }
  uint64_t v13 = mdm::Allocator::instance(void)::alloc;
  *((void *)v11 + 3) = mdm::Allocator::instance(void)::alloc;
  size_t v14 = strlen(v12);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v17 + 1, 1);
    *((void *)v11 + 1) = v15;
    *((void *)v11 + 2) = v18 | 0x8000000000000000;
    *(void *)uint64_t v11 = v19;
    uint64_t v11 = (char *)v19;
  }
  else
  {
    v11[23] = v14;
    if (!v14) {
      goto LABEL_19;
    }
  }
  memmove(v11, v12, v15);
LABEL_19:
  v11[v15] = 0;
  uint64_t v11 = v29;
  long long v16 = v30;
LABEL_20:
  uint64_t v20 = v16 + 32;
  uint64_t v22 = *a1;
  uint64_t v21 = a1[1];
  if (v21 == *a1)
  {
    uint64_t v24 = a1[1];
  }
  else
  {
    do
    {
      long long v23 = *(_OWORD *)(v21 - 16);
      *((_OWORD *)v11 - 2) = *(_OWORD *)(v21 - 32);
      *((_OWORD *)v11 - 1) = v23;
      v11 -= 32;
      *(void *)(v21 - 24) = 0;
      *(void *)(v21 - 16) = 0;
      *(void *)(v21 - 32) = 0;
      v21 -= 32;
    }
    while (v21 != v22);
    uint64_t v24 = *a1;
    uint64_t v21 = a1[1];
  }
  *a1 = (uint64_t)v11;
  a1[1] = (uint64_t)v20;
  uint64_t v25 = a1[2];
  a1[2] = v31;
  if (v21 != v24)
  {
    uint64_t v26 = v21 - 32;
    do
    {
      if (*(char *)(v26 + 23) < 0) {
        (*(void (**)(void, void, uint64_t))(**(void **)(v26 + 24) + 40))(*(void *)(v26 + 24), *(void *)v26, *(void *)(v26 + 16) & 0x7FFFFFFFFFFFFFFFLL);
      }
      BOOL v27 = v26 == v24;
      v26 -= 32;
    }
    while (!v27);
    uint64_t v21 = v24;
  }
  if (v21) {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v32 + 40))(*v32, v21, v25 - v21);
  }
  return v20;
}