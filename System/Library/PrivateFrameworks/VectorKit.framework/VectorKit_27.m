uint64_t altitude::SkyLoadJob::succeeded(altitude::SkyLoadJob *this)
{
  return *((unsigned __int8 *)this + 249);
}

uint64_t altitude::SkyLoadJob::jobStep(altitude::SkyLoadJob *this)
{
  v2 = (char *)this + 192;
  unsigned int v59 = 0;
  uint64_t MemFile = karo::Loader::getMemFile(*(void *)(*((void *)this + 1) + 80), (uint64_t)this + 192, &v59);
  uint64_t v4 = MemFile;
  if (!MemFile)
  {
    v5 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.VectorKit"];
    if (*((char *)this + 215) >= 0) {
      v6 = v2;
    }
    else {
      v6 = (char *)*((void *)this + 24);
    }
    v7 = [NSString stringWithUTF8String:v6];
    v8 = [v7 lastPathComponent];
    v9 = [v8 stringByDeletingPathExtension];

    v10 = [v7 pathExtension];
    v11 = [v7 stringByDeletingLastPathComponent];
    v12 = [v5 pathForResource:v9 ofType:v10 inDirectory:v11];
    if (v12
      || ([MEMORY[0x1E4F28B50] mainBundle],
          v13 = objc_claimAutoreleasedReturnValue(),
          [v13 pathForResource:v9 ofType:v10 inDirectory:v11],
          v12 = objc_claimAutoreleasedReturnValue(),
          v13,
          v12))
    {
      id v14 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v12];
      uint64_t v4 = [v14 bytes];
      unsigned int v59 = [v14 length];
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  karo::media::SkyLoader::loadFromChunk(MemFile, v4, v59, (char **)this + 27);
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  int v15 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  v16 = (pthread_mutex_t *)*((void *)this + 19);
  if ((v15 & 2) == 0)
  {
    pthread_mutex_lock(v16);
    int v17 = *((_DWORD *)this + 40);
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
    if ((v17 & 2) == 0)
    {
      uint64_t v18 = **(void **)(*(void *)(*((void *)this + 1) + 8) + 40);
      v19 = (char *)operator new(0xA8uLL);
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *(void *)v19 = &unk_1EF589208;
      v20 = v19 + 24;
      {
        {
          ggl::MeshTyped<ggl::Stars::StarVertex>::attributesReflection(void)::r = (uint64_t)&ggl::Stars::starVertexReflection;
        }
        ggl::MeshTyped<ggl::Stars::StarVertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Stars::StarVertex>::attributesReflection(void)::r;
        unk_1E957D698 = 1;
        v20 = v19 + 24;
      }
      *((void *)v19 + 11) = 0;
      v21 = (uint64_t **)(v19 + 88);
      *((void *)v19 + 7) = 0;
      *((void *)v19 + 8) = 0;
      *((_DWORD *)v19 + 18) = 0;
      *((void *)v19 + 3) = &unk_1EF5606B0;
      *((void *)v19 + 4) = "/Stars/Mesh";
      *((void *)v19 + 5) = &unk_1EF5606D0;
      *((void *)v19 + 6) = 0;
      *((void *)v19 + 10) = &ggl::MeshTyped<ggl::Stars::StarVertex>::typedReflection(void)::r;
      *((void *)v19 + 12) = 0;
      *((void *)v19 + 13) = 0;
      {
        operator new();
      }
      uint64_t v22 = ggl::Allocator::instance(void)::alloc;
      *((void *)v19 + 18) = 0;
      *((void *)v19 + 15) = 0;
      *((void *)v19 + 16) = 0;
      *((void *)v19 + 14) = v22;
      {
        operator new();
      }
      *((void *)v19 + 19) = ggl::Allocator::instance(void)::alloc;
      *((void *)v19 + 20) = 0;
      *((void *)v19 + 17) = v19 + 144;
      *((void *)v19 + 3) = &unk_1EF562860;
      *((void *)v19 + 5) = &unk_1EF562880;
      uint64_t v23 = *((void *)v19 + 11);
      unint64_t v24 = *(void *)(*((void *)v19 + 10) + 8);
      uint64_t v25 = *((void *)v19 + 12);
      unint64_t v26 = (v25 - v23) >> 4;
      unint64_t v27 = v24 - v26;
      if (v24 <= v26)
      {
        if (v24 < v26)
        {
          uint64_t v58 = v18;
          for (uint64_t i = v23 + 16 * v24; v25 != i; v25 -= 16)
          {
            v29 = *(std::__shared_weak_count **)(v25 - 8);
            if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v29->__on_zero_shared)(v29, v27);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          *((void *)v19 + 12) = i;
          uint64_t v18 = v58;
          v20 = v19 + 24;
        }
      }
      else
      {
        std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append((uint64_t)(v19 + 88), v27);
      }
      void *v20 = &unk_1EF560AB0;
      *((void *)v19 + 5) = &unk_1EF560AD0;
      {
        operator new();
      }
      uint64_t v30 = ggl::Allocator::instance(void)::alloc;
      uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ggl::Allocator::instance(void)::alloc
                                                                 + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
      *(void *)uint64_t v31 = &unk_1EF584FC0;
      *(void *)(v31 + 8) = 0;
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = v30;
      *(void *)(v31 + 32) = &unk_1EF55A1F0;
      *(void *)(v31 + 40) = 32;
      *(_DWORD *)(v31 + 48) = 6;
      long long v32 = 0uLL;
      *(_OWORD *)(v31 + 56) = 0u;
      *(_OWORD *)(v31 + 72) = 0u;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      *(void *)(v31 + 120) = 0;
      {
        long long v32 = 0uLL;
        if (v57) {
          operator new();
        }
      }
      *(void *)(v31 + 128) = ggl::Allocator::instance(void)::alloc;
      *(void *)(v31 + 136) = 0;
      *(_OWORD *)(v31 + 200) = v32;
      *(_OWORD *)(v31 + 184) = v32;
      *(_OWORD *)(v31 + 168) = v32;
      *(void *)(v31 + 216) = 0;
      *(void *)(v31 + 224) = -1;
      *(_OWORD *)(v31 + 152) = xmmword_1A28FCCA0;
      *(_DWORD *)(v31 + 144) = 0;
      *(void *)(v31 + 240) = "/Stars/Mesh";
      *(void *)(v31 + 248) = &ggl::Stars::starVertexReflection;
      *(void *)(v31 + 32) = &unk_1EF55CC08;
      *(void *)(v31 + 232) = &unk_1EF55CC28;
      v33 = *v21;
      v34 = (std::__shared_weak_count *)(*v21)[1];
      uint64_t *v33 = v31 + 32;
      v33[1] = v31;
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      uint64_t v35 = **v21;
      uint64_t v36 = *((void *)this + 27);
      uint64_t v37 = *((void *)this + 28);
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v36) >> 2);
      unint64_t v39 = *(void *)(v35 + 8) * v38;
      uint64_t v40 = *(void *)(v35 + 72);
      unint64_t v41 = *(void *)(v35 + 80) - v40;
      if (v39 != v41)
      {
        if (v39 <= v41)
        {
          if (v39 < v41) {
            *(void *)(v35 + 80) = v40 + v39;
          }
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v35 + 72, v39 - v41);
        }
        v42 = *(std::__shared_weak_count **)(v35 + 32);
        *(void *)(v35 + 24) = 0;
        *(void *)(v35 + 32) = 0;
        if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
        *(void *)(v35 + 120) = 0;
        *(_DWORD *)(v35 + 112) = 0;
        uint64_t v43 = *(void *)(v35 + 80) - *(void *)(v35 + 72);
        *(void *)(v35 + 40) = 0;
        *(void *)(v35 + 48) = v43;
        *(void *)(v35 + 56) = 0;
        *(void *)(v35 + 64) = v43;
        uint64_t v35 = **v21;
        uint64_t v36 = *((void *)this + 27);
        uint64_t v37 = *((void *)this + 28);
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v36) >> 2);
        unint64_t v39 = *(void *)(v35 + 8) * v38;
      }
      if (v39)
      {
        uint64_t v44 = *(void *)(v35 + 72);
        if (v37 == v36)
        {
LABEL_45:
          uint64_t v53 = *(void *)(v18 + 112);
          if (v53) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
          }
          operator new();
        }
      }
      else
      {
        uint64_t v44 = 0;
        if (v37 == v36) {
          goto LABEL_45;
        }
      }
      float v45 = *(float *)(v36 + 12 * v38 - 4);
      v46 = (float *)(v36 + 4);
      v47 = (float *)(v44 + 8);
      unsigned int v48 = 1;
      float v49 = (float)(1.0 / (float)(v45 - *(float *)(v36 + 8))) + (float)(1.0 / (float)(v45 - *(float *)(v36 + 8)));
      do
      {
        __float2 v50 = __sincosf_stret(*(v46 - 1));
        __float2 v51 = __sincosf_stret(*v46);
        *(v47 - 2) = (float)(v51.__cosval * 10000000.0) * v50.__cosval;
        *(v47 - 1) = (float)(v51.__cosval * 10000000.0) * v50.__sinval;
        float *v47 = v51.__sinval * 10000000.0;
        v47[2] = (float)(v45 - v46[1]) * v49;
        BOOL v52 = v38 > v48++;
        v46 += 3;
        v47 += 8;
      }
      while (v52);
      goto LABEL_45;
    }
    *((void *)this + 30) = 0;
    v16 = (pthread_mutex_t *)*((void *)this + 19);
  }
  pthread_mutex_lock(v16);
  int v54 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  BOOL v55 = (v54 & 2) == 0 && *((void *)this + 30) != 0;
  *((unsigned char *)this + 249) = v55;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void sub_1A25B67FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ggl::ConstantDataTyped<ggl::Stars::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Stars::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Stars::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Stars::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5870C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Stars::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5870C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::Stars::StarsMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Stars::StarsMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Stars::StarsMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void altitude::SkyLoadJob::~SkyLoadJob(altitude::SkyLoadJob *this)
{
  altitude::SkyLoadJob::~SkyLoadJob(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EF5684D0;
  if (!*((unsigned char *)this + 248))
  {
    uint64_t v2 = (uint64_t *)*((void *)this + 30);
    if (v2)
    {
      v3 = (std::__shared_weak_count *)v2[3];
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      uint64_t v4 = v2[1];
      v2[1] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      v5 = *v2;
      void *v2 = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      MEMORY[0x1A6239270](v2, 0x20C40DC1BFBCFLL);
    }
  }
  *((void *)this + 30) = 0;
  v6 = (void *)*((void *)this + 27);
  if (v6)
  {
    *((void *)this + 28) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  karo::Job::~Job(this);
}

void ggl::Debug::BasePipelineState::~BasePipelineState(ggl::Debug::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Debug::BasePipelineSetup::textureIsEnabled(ggl::Debug::BasePipelineSetup *this)
{
  return 0;
}

BOOL ggl::Debug::BasePipelineSetup::constantDataIsEnabled(ggl::Debug::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::Debug::BasePipelineSetup::~BasePipelineSetup(ggl::Debug::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void *ggl::Debug::BasePipelineSetup::BasePipelineSetup(void *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &unk_1EF5607C0;
  v11 = (uint64_t *)a1[8];
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  uint64_t *v11 = *a4;
  v11[1] = 0;
  id v14 = (void *)a1[20];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  int v15 = (std::__shared_weak_count *)v14[1];
  *id v14 = v12;
  v14[1] = v13;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = a1[8];
  uint64_t v17 = *a5;
  uint64_t v18 = a5[1];
  *(void *)(v16 + 16) = *a5;
  *(void *)(v16 + 24) = 0;
  uint64_t v19 = a1[20];
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  v20 = *(std::__shared_weak_count **)(v19 + 24);
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = a1[8];
  uint64_t v22 = *a6;
  uint64_t v23 = a6[1];
  *(void *)(v21 + 32) = *a6;
  *(void *)(v21 + 40) = 0;
  uint64_t v24 = a1[20];
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v24 + 40);
  *(void *)(v24 + 32) = v22;
  *(void *)(v24 + 40) = v23;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  return a1;
}

void ggl::Debug::BasePipelineSetup::setTransformConstantData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = 0;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 40);
  *(void *)(a2 + 32) = a3;
  *(void *)(a2 + 40) = a4;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ggl::Debug::ExtendedPipelineState::~ExtendedPipelineState(ggl::Debug::ExtendedPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Debug::ExtendedPipelineState::ExtendedPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    v82 = a4;
    v84 = a2;
    uint64_t v85 = a3;
    a2 = v84;
    a3 = v85;
    a4 = v82;
    if (v83)
    {
      {
        if (v83)
        {
          {
            {
              ggl::MeshTyped<ggl::Debug::ExtendedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Debug::extendedVboReflection;
            }
            ggl::MeshTyped<ggl::Debug::ExtendedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Debug::ExtendedVbo>::attributesReflection(void)::r;
            unk_1E95931B0 = 1;
          }
          ggl::Debug::ExtendedPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Debug::ExtendedVbo>::typedReflection(void)::r;
          unk_1E9593000 = &ggl::Debug::pipelineDataExtendedPipelineDeviceStructs(void)::ref;
          qword_1E9593008 = 0;
          {
            ggl::Debug::pipelineDataExtendedPipelineConstantStructs(void)::ref = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
            *(void *)algn_1E9593168 = ggl::Debug::View::reflection(void)::reflection;
            qword_1E9593170 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
          }
          qword_1E9593010 = (uint64_t)&ggl::Debug::pipelineDataExtendedPipelineConstantStructs(void)::ref;
          unk_1E9593018 = xmmword_1A28FCD30;
        }
      }
      ggl::Debug::ExtendedPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Debug::ExtendedPipelineSetup::typedReflection(void)::ref;
      ggl::DebugExtendedShader::typedReflection(v83);
      qword_1E9592FA8 = (uint64_t)&ggl::DebugExtendedShader::typedReflection(void)::ref;
      {
        ggl::Debug::pipelineStateExtendedPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9593088 = 0;
        qword_1E9593090 = (uint64_t)"";
        dword_1E9593098 = 0;
        qword_1E95930A0 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineAttributeBinding_0(void)::attr;
        unk_1E95930A8 = 2;
      }
      qword_1E9592FB0 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E9592FB8 = 1;
      qword_1E9592FC0 = 0;
      unk_1E9592FC8 = 0;
      qword_1E9592FD0 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineDeviceStructBinding(void)::ref;
      unk_1E9592FD8 = 0;
      {
        ggl::Debug::pipelineStateExtendedPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E95930C8 = 0;
        qword_1E95930D0 = (uint64_t)"style";
        dword_1E95930D8 = 3;
        qword_1E95930E0 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineConstantStyleBinding(void)::reflection;
        unk_1E95930E8 = xmmword_1A28FCEF0;
        qword_1E95930F8 = 1;
        unk_1E9593100 = "view";
        dword_1E9593108 = 3;
        qword_1E9593110 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineConstantViewBinding(void)::reflection;
        unk_1E9593118 = xmmword_1A28FC6E0;
        qword_1E9593128 = 2;
        unk_1E9593130 = "transform";
        dword_1E9593138 = 3;
        qword_1E9593140 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineConstantTransformBinding(void)::reflection;
        unk_1E9593148 = 10;
      }
      qword_1E9592FE0 = (uint64_t)&ggl::Debug::pipelineStateExtendedPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1E9592FE8 = 3;
      a4 = v82;
      a2 = v84;
      a3 = v85;
    }
  }
  uint64_t v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)v88 = *(_OWORD *)a3;
  *(_OWORD *)&v88[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v86 = *a4;
  long long v87 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::Debug::ExtendedPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v86;
  *(_OWORD *)(a1 + 272) = v87;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v88;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v88[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 320);
  int8x16_t v10 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v11 = vmovl_high_s8(v10);
  int32x4_t v12 = vmovl_s16(*(int16x4_t *)v11.i8);
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  int8x16_t v14 = v13;
  int16x8_t v15 = vmovl_s8(*(int8x8_t *)v10.i8);
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v15.i8);
  *(void *)a1 = &unk_1EF560890;
  v13.i64[0] = v16.u32[0];
  v13.i64[1] = v16.u32[1];
  int8x16_t v17 = v13;
  int32x4_t v18 = vmovl_high_s16(v11);
  v13.i64[0] = v18.u32[0];
  v13.i64[1] = v18.u32[1];
  int8x16_t v19 = v13;
  int32x4_t v20 = vmovl_high_s16(v15);
  v13.i64[0] = v20.u32[0];
  v13.i64[1] = v20.u32[1];
  int8x16_t v21 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v22 = v13;
  v13.i64[0] = v16.u32[2];
  v13.i64[1] = v16.u32[3];
  int8x16_t v23 = v13;
  v13.i64[0] = v18.u32[2];
  v13.i64[1] = v18.u32[3];
  int8x16_t v24 = v13;
  v13.i64[0] = v20.u32[2];
  v13.i64[1] = v20.u32[3];
  int8x16_t v25 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v13);
  int8x16_t v26 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v24);
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v23);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v19);
  int8x16_t v29 = vceqzq_s8(v9);
  int16x8_t v30 = vmovl_high_s8(v29);
  int32x4_t v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v13.i64[0] = v31.u32[0];
  v13.i64[1] = v31.u32[1];
  int8x16_t v32 = v13;
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v29.i8);
  int32x4_t v34 = vmovl_s16(*(int16x4_t *)v33.i8);
  v13.i64[0] = v34.u32[0];
  v13.i64[1] = v34.u32[1];
  int8x16_t v35 = v13;
  int32x4_t v36 = vmovl_high_s16(v30);
  v13.i64[0] = v36.u32[0];
  v13.i64[1] = v36.u32[1];
  int8x16_t v37 = v13;
  int32x4_t v38 = vmovl_high_s16(v33);
  v13.i64[0] = v38.u32[0];
  v13.i64[1] = v38.u32[1];
  int8x16_t v39 = v13;
  v13.i64[0] = v31.u32[2];
  v13.i64[1] = v31.u32[3];
  int8x16_t v40 = v13;
  v13.i64[0] = v34.u32[2];
  v13.i64[1] = v34.u32[3];
  int8x16_t v41 = v13;
  v13.i64[0] = v36.u32[2];
  v13.i64[1] = v36.u32[3];
  int8x16_t v42 = v13;
  v13.i64[0] = v38.u32[2];
  v13.i64[1] = v38.u32[3];
  int8x16_t v43 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v42);
  int8x16_t v44 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v32), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v14));
  int8x16_t v45 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v35), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v17));
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v37), v28);
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v39), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v21));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v40), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v22));
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v41), v27);
  int8x16_t v50 = vorrq_s8(v43, v26);
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v13), v25);
  int8x16_t v52 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v53 = vmovl_s8(*(int8x8_t *)v52.i8);
  int32x4_t v54 = vmovl_high_s16(v53);
  v13.i64[0] = v54.i32[2];
  v13.i64[1] = v54.i32[3];
  int8x16_t v55 = v13;
  int16x8_t v56 = vmovl_high_s8(v52);
  int32x4_t v57 = vmovl_high_s16(v56);
  v13.i64[0] = v57.i32[2];
  v13.i64[1] = v57.i32[3];
  int8x16_t v58 = v13;
  int32x4_t v59 = vmovl_s16(*(int16x4_t *)v53.i8);
  v13.i64[0] = v59.i32[2];
  v13.i64[1] = v59.i32[3];
  int8x16_t v60 = v13;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v56.i8);
  v13.i64[0] = v61.i32[2];
  v13.i64[1] = v61.i32[3];
  int8x16_t v62 = v13;
  v13.i64[0] = v54.i32[0];
  v13.i64[1] = v54.i32[1];
  int8x16_t v63 = v13;
  v13.i64[0] = v57.i32[0];
  v13.i64[1] = v57.i32[1];
  int8x16_t v64 = v13;
  v13.i64[0] = v59.i32[0];
  v13.i64[1] = v59.i32[1];
  int8x16_t v65 = v13;
  v13.i64[0] = v61.i32[0];
  v13.i64[1] = v61.i32[1];
  int8x16_t v66 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v13);
  int8x16_t v67 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v68 = vmovl_high_s8(v67);
  int32x4_t v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v13.i64[0] = v69.i32[0];
  v13.i64[1] = v69.i32[1];
  int8x16_t v70 = v13;
  int16x8_t v71 = vmovl_s8(*(int8x8_t *)v67.i8);
  int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
  v13.i64[0] = v72.i32[0];
  v13.i64[1] = v72.i32[1];
  int8x16_t v73 = v13;
  int32x4_t v74 = vmovl_high_s16(v68);
  v13.i64[0] = v74.i32[0];
  v13.i64[1] = v74.i32[1];
  int8x16_t v75 = v13;
  int32x4_t v76 = vmovl_high_s16(v71);
  v13.i64[0] = v76.i32[0];
  v13.i64[1] = v76.i32[1];
  int8x16_t v77 = v13;
  v13.i64[0] = v69.i32[2];
  v13.i64[1] = v69.i32[3];
  int8x16_t v78 = v13;
  v13.i64[0] = v72.i32[2];
  v13.i64[1] = v72.i32[3];
  int8x16_t v79 = v13;
  v13.i64[0] = v74.i32[2];
  v13.i64[1] = v74.i32[3];
  int8x16_t v80 = v13;
  v13.i64[0] = v76.i32[2];
  v13.i64[1] = v76.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v73), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v65)), v45), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v70), v66), v44)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v77), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v63)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v64)),
                                               v46))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v60)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v78), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v62)), v48)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v13), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v55)), v51), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v80),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v58)),
                                               v50)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::Debug::ExtendedPipelineSetup::textureIsEnabled(ggl::Debug::ExtendedPipelineSetup *this)
{
  return 0;
}

BOOL ggl::Debug::ExtendedPipelineSetup::constantDataIsEnabled(ggl::Debug::ExtendedPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::Debug::ExtendedPipelineSetup::~ExtendedPipelineSetup(ggl::Debug::ExtendedPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void *ggl::Debug::ExtendedPipelineSetup::ExtendedPipelineSetup(void *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &unk_1EF560860;
  int16x8_t v11 = (uint64_t *)a1[8];
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  uint64_t *v11 = *a4;
  v11[1] = 0;
  int8x16_t v14 = (void *)a1[20];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  int16x8_t v15 = (std::__shared_weak_count *)v14[1];
  *int8x16_t v14 = v12;
  v14[1] = v13;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = a1[8];
  uint64_t v17 = *a5;
  uint64_t v18 = a5[1];
  *(void *)(v16 + 16) = *a5;
  *(void *)(v16 + 24) = 0;
  uint64_t v19 = a1[20];
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  int32x4_t v20 = *(std::__shared_weak_count **)(v19 + 24);
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = a1[8];
  uint64_t v22 = *a6;
  uint64_t v23 = a6[1];
  *(void *)(v21 + 32) = *a6;
  *(void *)(v21 + 40) = 0;
  uint64_t v24 = a1[20];
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  int8x16_t v25 = *(std::__shared_weak_count **)(v24 + 40);
  *(void *)(v24 + 32) = v22;
  *(void *)(v24 + 40) = v23;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  return a1;
}

void ggl::Debug::LinePipelineState::~LinePipelineState(ggl::Debug::LinePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Debug::LinePipelineSetup::textureIsEnabled(ggl::Debug::LinePipelineSetup *this)
{
  return 0;
}

BOOL ggl::Debug::LinePipelineSetup::constantDataIsEnabled(ggl::Debug::LinePipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

void ggl::Debug::LinePipelineSetup::~LinePipelineSetup(ggl::Debug::LinePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::BalloonLabelPart::debugCompositeClassName(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "Balloon");
}

BOOL md::BalloonLabelPart::needsCrossfade(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 631)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(v1 + 1240));
  return (v2 & 1) == 0;
}

uint64_t md::BalloonLabelPart::partType(md::BalloonLabelPart *this)
{
  return 7;
}

uint64_t md::BalloonLabelPart::pushToRenderModel(uint64_t result, uint64_t a2, float a3)
{
  if (*(unsigned char *)(result + 608)) {
    a3 = *(float *)(result + 612);
  }
  uint64_t v5 = *(uint64_t **)(result + 576);
  for (uint64_t i = *(uint64_t **)(result + 584);
        v5 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)v7 + 128))(v7, a2, a3))
  {
    uint64_t v7 = *v5++;
  }
  return result;
}

void md::BalloonLabelPart::~BalloonLabelPart(md::BalloonLabelPart *this)
{
  md::CompositeLabelPart::~CompositeLabelPart(this);
  uint64_t v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  unsigned __int8 v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

md::BalloonLabelPart *md::BalloonLabelPart::BalloonLabelPart(md::BalloonLabelPart *this, md::IconLabelPart *a2, md::IconLabelPart *a3, md::IconLabelPart *a4, md::IconLabelPart *a5, md::LabelManager *a6, md::Label *a7, md::LabelStyle *a8)
{
  *((_DWORD *)this + 2) = 1065353216;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = this;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *(_OWORD *)((char *)this + 72) = xmmword_1A28FC750;
  *((void *)this + 11) = 1065353216;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 136) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 152) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 168) = xmmword_1A28FCDA0;
  *((unsigned char *)this + 224) = 0;
  *((unsigned char *)this + 200) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 257) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 280) = xmmword_1A28FCE90;
  *(_OWORD *)((char *)this + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)((char *)this + 312) = xmmword_1A28FC750;
  *((void *)this + 41) = 1065353216;
  *((_DWORD *)this + 84) = 1065353216;
  *((_DWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 360) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 376) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 392) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 408) = xmmword_1A28FCDA0;
  *((unsigned char *)this + 464) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((unsigned char *)this + 440) = 0;
  *(_OWORD *)((char *)this + 497) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 520) = xmmword_1A28FCE90;
  *((_DWORD *)this + 134) = 1065353216;
  *(_OWORD *)((char *)this + 540) = 0u;
  *((_WORD *)this + 278) = 512;
  *((unsigned char *)this + 562) = 0;
  *(_DWORD *)((char *)this + 558) = 0;
  *(_WORD *)((char *)this + 563) = -1;
  *(_DWORD *)((char *)this + 565) = 0;
  *(void *)this = &unk_1EF538820;
  *((_OWORD *)this + 36) = 0u;
  *((void *)this + 74) = 0;
  uint64_t v13 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v13 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v17) {
      operator new();
    }
  }
  *((void *)this + 75) = *((void *)v13 + 91);
  *((unsigned char *)this + 608) = 0;
  *((unsigned char *)this + 616) = 0;
  *(void *)this = &unk_1EF535C18;
  *((_DWORD *)this + 157) = 1;
  *((unsigned char *)this + 632) = 1;
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a2);
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a3);
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a4);
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a5);
  (*(void (**)(md::IconLabelPart *, uint64_t))(*(void *)a2 + 176))(a2, 1);
  (*(void (**)(md::IconLabelPart *, uint64_t))(*(void *)a3 + 176))(a3, 1);
  (*(void (**)(md::IconLabelPart *, uint64_t))(*(void *)a4 + 176))(a4, 1);
  (*(void (**)(md::IconLabelPart *, uint64_t))(*(void *)a5 + 176))(a5, 1);
  *((unsigned char *)a2 + 659) = 2;
  *((unsigned char *)a3 + 659) = 1;
  *((unsigned char *)a4 + 659) = 1;
  *((void *)this + 3) = a2;
  uint64_t v14 = *((void *)this + 2);
  if (v14)
  {
    unsigned __int8 v15 = atomic_load((unsigned __int8 *)(v14 + 1240));
    LOBYTE(v14) = v15 & 1;
  }
  *((unsigned char *)this + 631) = v14;
  return this;
}

void sub_1A25B8764(_Unwind_Exception *a1)
{
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

double md::ARWalkingManeuverArrowLabelPart::debugCompositeClassName@<D0>(uint64_t a1@<X8>)
{
  int v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1A28FD670;
  strcpy(v3, "ARWalkingManeuverArrowLabelPart");
  return *(double *)"erArrowLabelPart";
}

BOOL md::ARWalkingManeuverArrowLabelPart::isAnimating(md::ARWalkingManeuverArrowLabelPart *this)
{
  uint64_t v2 = *((void *)this + 72);
  uint64_t v3 = *((void *)this + 73);
  if (v2 == v3) {
    return *((unsigned char *)this + 720) == 0;
  }
  uint64_t v4 = v2 + 8;
  do
  {
    char v5 = (*(uint64_t (**)(void))(**(void **)(v4 - 8) + 704))(*(void *)(v4 - 8));
    if (v5) {
      break;
    }
    BOOL v6 = v4 == v3;
    v4 += 8;
  }
  while (!v6);
  return (v5 & 1) != 0 || *((unsigned char *)this + 720) == 0;
}

void md::ARWalkingManeuverArrowLabelPart::animate(md::ARWalkingManeuverArrowLabelPart *this, __n128 a2)
{
  float v2 = a2.n128_f32[0];
  uint64_t v4 = (uint64_t *)*((void *)this + 72);
  char v5 = (uint64_t *)*((void *)this + 73);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    (*(void (**)(uint64_t, float))(*(void *)v6 + 616))(v6, v2);
  }
  if (!*((unsigned char *)this + 720))
  {
    if (*((unsigned char *)this + 722))
    {
      if (v2 < 100.0 && *(unsigned char *)(*(void *)(*((void *)this + 80) + 1192) + 52) != 2) {
        return;
      }
      *((unsigned char *)this + 722) = 0;
    }
    *((float *)this + 163) = *((float *)this + 163) + v2;
    uint64_t v7 = (md::LabelAnimationTrack **)*((void *)this + 86);
    char v8 = (md::LabelAnimationTrack **)*((void *)this + 87);
    if (v7 == v8) {
      goto LABEL_12;
    }
    char v9 = 0;
    do
    {
      a2.n128_u32[0] = *((_DWORD *)this + 163);
      md::LabelAnimationTrack::runAnimation(*v7, a2);
      int8x16_t v10 = *v7++;
      v9 |= *((unsigned char *)v10 + 40) == 0;
    }
    while (v7 != v8);
    if ((v9 & 1) == 0) {
LABEL_12:
    }
      *((unsigned char *)this + 720) = 1;
  }
}

uint64_t md::ARWalkingManeuverArrowLabelPart::modelMatrix(md::ARWalkingManeuverArrowLabelPart *this)
{
  return *((void *)this + 6);
}

uint64_t md::ARWalkingManeuverArrowLabelPart::stagingModelMatrix(md::ARWalkingManeuverArrowLabelPart *this)
{
  return *((void *)this + 5);
}

_DWORD *md::ARWalkingManeuverArrowLabelPart::pushToRenderModel(uint64_t a1, float a2)
{
  result = (_DWORD *)(*(uint64_t (**)(void))(***(void ***)(a1 + 576) + 128))(**(void **)(a1 + 576));
  if (*(unsigned char *)(a1 + 631))
  {
    uint64_t v6 = *(void **)(a1 + 576);
    result = (_DWORD *)v6[1];
    if (result)
    {
      result[196] = *(_DWORD *)(*v6 + 760);
      uint64_t v7 = *(uint64_t (**)(__n128))(*(void *)result + 128);
      v5.n128_f32[0] = a2;
      return (_DWORD *)v7(v5);
    }
  }
  return result;
}

uint64_t md::ARWalkingManeuverArrowLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5)
{
  int8x16_t v10 = **(unsigned __int8 ***)(a1 + 576);
  uint64_t v11 = *(void *)(a1 + 664);
  uint64_t v12 = *(void *)(a1 + 656);
  if (0x8E38E38E38E38E39 * ((v11 - v12) >> 4) <= v10[563])
  {
    float32x2_t v13 = 0;
    if (v12 == v11 || *(unsigned char *)(a1 + 721) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    v12 += 144 * v10[563];
  }
  float32x2_t v13 = 0;
  if (v12)
  {
    uint64_t v15 = *(void *)(v12 + 88);
    if (v15)
    {
      v13.i32[1] = 0;
      v13.f32[0] = *(float *)(a1 + 728) * *(float *)(*(void *)v15 + 32 * *(unsigned int *)(v15 + 32) + 8);
      if (*(unsigned char *)(a1 + 508)) {
        float32x2_t v13 = vmul_n_f32(*(float32x2_t *)(a1 + 328), v13.f32[0]);
      }
    }
  }
LABEL_11:
  float32x2_t v28 = vadd_f32(*a5, v13);
  uint64_t v16 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t, float32x2_t *))(*(void *)v10 + 120))(v10, a2, a3, a4, &v28);
  if (v16 != 37) {
    return v16;
  }
  int v17 = *(void **)(a1 + 576);
  float32x4_t v18 = *(float32x4_t *)(*(void *)(*v17 + 24) + 312);
  v19.i32[0] = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FC750, v18)).u32[0];
  v19.i32[1] = vmovn_s32(vcgtq_f32(v18, (float32x4_t)xmmword_1A28FC750)).i32[1];
  int8x16_t v27 = vbslq_s8((int8x16_t)vmovl_s16(v19), (int8x16_t)v18, (int8x16_t)xmmword_1A28FC750);
  if (*(unsigned char *)(a1 + 631))
  {
    uint64_t v20 = v17[1];
    if (v20)
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *))(*(void *)v20 + 120))(v20, a2, a3, a4, a5);
      uint64_t v21 = (int8x16_t *)(*(void *)(*(void *)(*(void *)(a1 + 576) + 8) + 24) + 312);
      v22.i64[0] = v21->i64[0];
      v22.i64[1] = v27.i64[1];
      v23.i64[0] = v27.i64[0];
      v23.i64[1] = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 576) + 8) + 24) + 320);
      int8x16_t v27 = vbslq_s8((int8x16_t)vcgtq_f32(v23, v22), *v21, v27);
      uint64_t v24 = *(void **)(a1 + 472);
      if (!v24) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  uint64_t v16 = 37;
  uint64_t v24 = *(void **)(a1 + 472);
  if (v24)
  {
LABEL_17:
    free(v24);
    *(void *)(a1 + 472) = 0;
  }
LABEL_18:
  int8x16_t v25 = *(void **)(a1 + 480);
  if (v25)
  {
    free(v25);
    *(void *)(a1 + 480) = 0;
  }
  *(int8x16_t *)(a1 + 312) = v27;
  *(void *)(a1 + 424) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  return v16;
}

float md::ARWalkingManeuverArrowLabelPart::updateForDisplay(md::ARWalkingManeuverArrowLabelPart *this)
{
  float v2 = (uint64_t *)*((void *)this + 72);
  uint64_t v3 = (uint64_t *)*((void *)this + 73);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2++;
      (*(void (**)(uint64_t))(*(void *)v4 + 112))(v4);
    }
    while (v2 != v3);
    float v2 = (uint64_t *)*((void *)this + 72);
  }
  float result = (float)(*(float *)(*(void *)(*v2 + 24) + 80) - *(float *)(*(void *)(*v2 + 24) + 72)) * 0.15625;
  *((float *)this + 182) = result;
  return result;
}

uint64_t md::ARWalkingManeuverArrowLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 576) + 80))(**(void **)(a1 + 576));
  if (result != 37) {
    return result;
  }
  uint64_t v12 = *(void **)(a1 + 576);
  float32x2_t v13 = *(float **)(*v12 + 24);
  float v14 = v13[20];
  float v15 = v13[18];
  if (v14 < v15) {
    return 14;
  }
  float v16 = v13[21];
  float v17 = v13[19];
  if (v16 < v17) {
    return 14;
  }
  if (!*(unsigned char *)(a1 + 631)) {
    goto LABEL_11;
  }
  uint64_t v18 = v12[1];
  if (!v18) {
    goto LABEL_11;
  }
  float v19 = v16 - v17;
  float v20 = 0.0;
  float v21 = fmaxf(v14 - v15, 0.0);
  if ((float)(v16 - v17) >= 0.0) {
    float v20 = (float)(v16 - v17) * 0.3;
  }
  float v22 = v17 + (float)(v19 * 0.5);
  float v23 = v15 + (float)((float)(v14 - v15) * 0.5);
  v28[0] = v23 - v21;
  v28[1] = v22 - v20;
  v28[2] = v21 + v23;
  v28[3] = v20 + v22;
  float v24 = v19 * 0.85;
  md::AnimatedTextureLabelPart::setMeshRectForStaging(v18, (uint64_t)v28);
  *(float *)(v18 + 648) = v24;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t))(*(void *)v18 + 80))(v18, a2, a3, a4);
  if (result == 37)
  {
    uint64_t v25 = *(void *)(v18 + 24);
    LODWORD(v10) = *(_DWORD *)(v25 + 76);
    float v15 = fminf(*(float *)(v25 + 72), v15);
    LODWORD(v11) = *(_DWORD *)(v25 + 84);
    float v14 = fmaxf(v14, *(float *)(v25 + 80));
    float v17 = fminf(*(float *)&v10, v17);
    float v16 = fmaxf(v16, *(float *)&v11);
LABEL_11:
    int8x16_t v26 = *(void **)(a1 + 232);
    if (v26)
    {
      free(v26);
      *(void *)(a1 + 232) = 0;
    }
    int8x16_t v27 = *(void **)(a1 + 240);
    if (v27)
    {
      free(v27);
      *(void *)(a1 + 240) = 0;
    }
    *(float *)(a1 + 72) = v15;
    *(float *)(a1 + 76) = v17;
    *(float *)(a1 + 80) = v14;
    *(float *)(a1 + 84) = v16;
    *(_DWORD *)(a1 + 280) = *a3;
    *(_DWORD *)(a1 + 284) = a3[1];
    *(_DWORD *)(a1 + 104) = *a3;
    LODWORD(v9) = a3[1];
    *(_DWORD *)(a1 + 108) = LODWORD(v9);
    md::CollisionObject::setupShapeData(a1 + 72, v9, v10, v11);
    *(void *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
    return 37;
  }
  return result;
}

void md::ARWalkingManeuverArrowLabelPart::~ARWalkingManeuverArrowLabelPart(md::ARWalkingManeuverArrowLabelPart *this)
{
  *(void *)this = &unk_1EF54CA60;
  md::LabelAnimator::~LabelAnimator((md::ARWalkingManeuverArrowLabelPart *)((char *)this + 632));
  md::CompositeLabelPart::~CompositeLabelPart(this);
  float v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    float v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v4) {
      operator new();
    }
  }
  uint64_t v3 = *(void (**)(void))(**((void **)v2 + 91) + 40);
  v3();
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF54CA60;
  md::LabelAnimator::~LabelAnimator((md::ARWalkingManeuverArrowLabelPart *)((char *)this + 632));
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

uint64_t md::ARWalkingManeuverArrowLabelPart::ARWalkingManeuverArrowLabelPart(uint64_t a1, md::LabelManager *a2, md::Label *a3, void *a4, md::LabelPart *a5, char a6)
{
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_1A28FC750;
  *(void *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 136) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 152) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 168) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_1A28FCE90;
  *(_OWORD *)(a1 + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)(a1 + 312) = xmmword_1A28FC750;
  *(void *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 360) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 376) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 392) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 408) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(unsigned char *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_1A28FCE90;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_WORD *)(a1 + 556) = 512;
  *(unsigned char *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  *(void *)a1 = &unk_1EF538820;
  *(_OWORD *)(a1 + 576) = 0u;
  *(void *)(a1 + 592) = 0;
  {
    float32x2_t v13 = a2;
    a2 = v13;
    if (v14) {
      operator new();
    }
  }
  *(void *)(a1 + 600) = mdm::Allocator::instance(void)::alloc;
  *(unsigned char *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 616) = 0;
  *(void *)a1 = &unk_1EF54CA60;
  *(_DWORD *)(a1 + 628) = 1;
  md::LabelAnimator::LabelAnimator(a1 + 632, a2, a3);
  *(_DWORD *)(a1 + 728) = 0;
  {
    operator new();
  }
  double v11 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 1184, 8);
  v15[0] = 0;
  v15[10] = 0;
  md::HorizontalTextLabelPart::HorizontalTextLabelPart((uint64_t)v11, a4, (uint64_t)v15, 1);
  *(void *)double v11 = &unk_1EF54B980;
  *((unsigned char *)v11 + 1168) = a6;
  md::CompositeLabelPart::addLabelPart(a1, v11);
  (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v11 + 824))(v11, 1);
  if (a5)
  {
    *(unsigned char *)(a1 + 631) = 1;
    md::CompositeLabelPart::addLabelPart(a1, a5);
    (*(void (**)(md::LabelPart *, void))(*(void *)a5 + 824))(a5, 0);
  }
  md::LabelAnimator::setupAnimations(a1 + 632, 18, v11);
  return a1;
}

void sub_1A25B9418(_Unwind_Exception *a1)
{
  if ((atomic_load_explicit(v5, memory_order_acquire) & 1) == 0)
  {
      operator new();
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v4 + 728) + 40))(*(void *)(v4 + 728), v3, 1184);
  md::LabelAnimator::~LabelAnimator(v2);
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

void md::ElevationRaster::texture(md::ElevationRaster *this, uint64_t a2, float a3)
{
  uint64_t v5 = *(void *)(a2 + 88);
  if (!v5)
  {
    uint64_t v6 = *(unsigned __int8 **)a2;
    uint64_t v7 = *(unsigned __int8 **)(a2 + 8);
    if (*(unsigned __int8 **)a2 == v7)
    {
      uint64_t v5 = 0;
    }
    else
    {
      if (*(unsigned char *)(a2 + 24) == 8)
      {
        char v8 = v6 + 1;
        if (v6 + 1 != v7)
        {
          unsigned __int8 v9 = *v6;
          double v10 = v6 + 1;
          do
          {
            unsigned int v12 = *v10++;
            unsigned __int8 v11 = v12;
            BOOL v13 = v9 >= v12;
            if (v9 <= v12) {
              unsigned __int8 v9 = v11;
            }
            if (!v13) {
              uint64_t v6 = v8;
            }
            char v8 = v10;
          }
          while (v10 != v7);
        }
        LOBYTE(a3) = *v6;
      }
      else
      {
        uint64_t v14 = v7 - v6 - 2;
        if (v14)
        {
          float v15 = v6 + 2;
          unsigned __int16 v16 = *(_WORD *)v6;
          float v17 = v6 + 2;
          do
          {
            unsigned int v19 = *(unsigned __int16 *)v17;
            v17 += 2;
            unsigned __int16 v18 = v19;
            BOOL v20 = v16 >= v19;
            if (v16 <= v19) {
              unsigned __int16 v16 = v18;
            }
            if (!v20) {
              uint64_t v6 = v15;
            }
            float v15 = v17;
            v14 -= 2;
          }
          while (v14);
        }
        LOWORD(a3) = *(_WORD *)v6;
      }
      float v21 = (float)LODWORD(a3);
      float v22 = *(float *)(a2 + 48);
      __int16 v23 = *(_WORD *)(a2 + 52);
      unint64_t v24 = *(void *)(a2 + 32);
      unint64_t v25 = *(void *)(a2 + 40);
      int v26 = (int)(float)v24;
      int v27 = (int)(float)v25;
      float32x2_t v28 = (std::__shared_weak_count *)operator new(0x60uLL);
      v28->__shared_owners_ = 0;
      p_shared_owners = &v28->__shared_owners_;
      int16x8_t v53 = v28;
      v28->__shared_weak_owners_ = 0;
      v28->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583AF8;
      uint64_t v29 = (uint64_t)&v28[1];
      ggl::TextureData2D::TextureData2D((uint64_t)&v28[1], v26, v27, 1u, 2, 0);
      if (v27 >= 1 && v26 >= 1)
      {
        uint64_t v37 = 0;
        int v38 = 0;
        float v39 = (float)(v24 - 1);
        *(float *)&double v30 = (float)(v26 - 1);
        LODWORD(v31) = 1.0;
        float v40 = 1.0 / *(float *)&v30;
        float v41 = 1.0 / truncf((float)v23 + (float)(v22 * v21));
        do
        {
          uint64_t v42 = 0;
          do
          {
            unint64_t v43 = md::ElevationRaster::bilinearSample((uint64_t *)a2, (float)((float)(int)v42 * v39) * v40, (float)(v25 - 1) - (float)((float)((float)v38 * (float)(1.0 / (float)(v27 - 1))) * (float)(v25 - 1)), v30, v31, v32, v33, v34, v35);
            float v44 = *(float *)&v43;
            if (!HIDWORD(v43)) {
              float v44 = 0.0;
            }
            *(unsigned char *)((*(uint64_t (**)(uint64_t, void))(*(void *)v29 + 16))(v29, 0) + v37 + v42++) = (int)(float)(sqrtf(sqrtf(v44 * v41)) * 255.0);
          }
          while (v26 != v42);
          v37 += v42;
          ++v38;
        }
        while (v38 != v27);
      }
      int8x16_t v45 = (char *)operator new(0x58uLL);
      *((void *)v45 + 1) = 0;
      *((void *)v45 + 2) = 0;
      *(void *)int8x16_t v45 = &unk_1EF583858;
      *((void *)v45 + 5) = 0;
      *((void *)v45 + 6) = 0;
      *((_DWORD *)v45 + 14) = 0;
      *((void *)v45 + 3) = &unk_1EF55AE58;
      *((void *)v45 + 4) = 0;
      *(void *)&long long v46 = 0x100000001;
      *((void *)&v46 + 1) = 0x100000001;
      *(_OWORD *)(v45 + 60) = v46;
      *(void *)(v45 + 76) = 0x100000000;
      *((_DWORD *)v45 + 21) = 0;
      int32x4_t v54 = v45 + 24;
      int8x16_t v55 = (std::__shared_weak_count *)v45;
      int8x16_t v47 = operator new(0xB0uLL);
      v47[1] = 0;
      v47[2] = 0;
      void *v47 = &unk_1EF589EF0;
      uint64_t v48 = std::construct_at[abi:nn180100]<ggl::Texture2D,std::shared_ptr<ggl::TextureData2D> &,std::shared_ptr<ggl::SamplerState> &,ggl::Texture2D*>((uint64_t)(v47 + 3), v29, v53, &v54);
      int8x16_t v49 = *(std::__shared_weak_count **)(a2 + 96);
      *(void *)(a2 + 88) = v48;
      *(void *)(a2 + 96) = v47;
      if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      int8x16_t v50 = v55;
      if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      uint64_t v5 = *(void *)(a2 + 88);
    }
  }
  uint64_t v51 = *(void *)(a2 + 96);
  *(void *)this = v5;
  *((void *)this + 1) = v51;
  if (v51) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
  }
}

double md::MuninLabelMapTile::assignWorldPointToLabel(md::MuninLabelMapTile *this, md::Label *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, char *))(**((void **)a2 + 1) + 112))(*((void *)a2 + 1), (char *)a2 + 48);
  uint64_t v4 = v3;
  if (*(unsigned char *)(v3 + 44))
  {
    double v5 = *(double *)v3;
    double v6 = *(double *)(v3 + 8);
    double v7 = *(double *)(v3 + 16);
  }
  else
  {
    long double v8 = *(double *)(v3 + 24) * 6.28318531;
    long double v9 = exp(*(double *)(v3 + 32) * 6.28318531 + -3.14159265);
    double v10 = atan(v9) * 2.0 + -1.57079633;
    long double v11 = fmod(v8, 6.28318531);
    double v12 = fmod(v11 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v13 = __sincos_stret(v10);
    double v14 = 6378137.0 / sqrt(v13.__sinval * v13.__sinval * -0.00669437999 + 1.0);
    __double2 v15 = __sincos_stret(v12);
    double v5 = v14 * v13.__cosval * v15.__cosval;
    double v6 = v14 * v13.__cosval * v15.__sinval;
    double v7 = v13.__sinval * 0.99330562 * v14;
    *(double *)uint64_t v4 = v5;
    *(double *)(v4 + 8) = v6;
    *(double *)(v4 + 16) = v7;
    *(unsigned char *)(v4 + 44) = 1;
  }
  *((_DWORD *)a2 + 47) = 0;
  double v16 = 1.0 / sqrt(v5 * v5 + v6 * v6 + v7 * v7);
  *((unsigned char *)a2 + 192) = 1;
  *((unsigned char *)a2 + 835) = 1;
  *((double *)a2 + 62) = v5;
  *((double *)a2 + 63) = v6;
  *((double *)a2 + 64) = v7;
  *((void *)a2 + 82) = 0;
  *((void *)a2 + 68) = 0;
  *((void *)a2 + 70) = 0;
  *((void *)a2 + 69) = 0;
  *((double *)a2 + 65) = v16 * v5;
  double result = v16 * v7;
  *((double *)a2 + 66) = v16 * v6;
  *((double *)a2 + 67) = result;
  return result;
}

double md::MuninLabelMapTile::worldPointFromMercatorPoint(uint64_t a1, double *a2)
{
  long double v2 = *a2 * 6.28318531;
  long double v3 = exp(a2[1] * 6.28318531 + -3.14159265);
  double v4 = atan(v3) * 2.0 + -1.57079633;
  long double v5 = fmod(v2, 6.28318531);
  double v6 = fmod(v5 + 6.28318531, 6.28318531) + -3.14159265;
  __double2 v7 = __sincos_stret(v4);
  return 6378137.0 / sqrt(v7.__sinval * v7.__sinval * -0.00669437999 + 1.0) * v7.__cosval * __sincos_stret(v6).__cosval;
}

void md::MuninLabelMapTile::~MuninLabelMapTile(md::MuninLabelMapTile *this)
{
  md::LabelMapTile::~LabelMapTile(this);
  JUMPOUT(0x1A6239270);
}

uint64_t altitude::EarthAdjustedViewNode::computeView(altitude::EarthAdjustedViewNode *this, const karo::Item *a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 5);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = a3;
  if (a3 == -1) {
    uint64_t v5 = *((unsigned int *)this + 14);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, altitude::EarthAdjustedViewNode *, uint64_t))(*(void *)v4 + 24))(v4, this, v5);
  uint64_t v7 = v6;
  if (*(_DWORD *)(*((void *)this + 4) + 88) != *((_DWORD *)this + 15) || *(_DWORD *)(v6 + 112) != v5)
  {
    long double v8 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)(v6 + 40) + 24))(v6 + 40);
    double v9 = fmax(*(double *)(v7 + 1448) - fmax(*(double *)(v7 + 1448) * 0.8 + -1600.0, 2000.0), 1.0);
    double v10 = v9 * 0.5;
    int v11 = *((_DWORD *)this + 16);
    if (v11 == 1)
    {
      long double v13 = *v8;
      long double v14 = v8[1];
      long double v15 = v8[2];
      double v16 = v14 * v14 + v13 * v13;
      double v61 = v16 + v15 * v15;
      double v62 = v9 * 0.5;
      float v17 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)(v7 + 40) + 24))(v7 + 40);
      double v19 = v17[3];
      double v18 = v17[4];
      double v20 = v17[5];
      double v21 = v17[6];
      double v22 = v18 * -2.0 * v20;
      double v23 = -((v19 + v19) * v20 - v21 * (v18 * -2.0));
      double v24 = v22 + (v19 + v19) * v21;
      double v25 = -(v18 * -2.0 * v18 + 1.0 - (v19 + v19) * v19);
      double v26 = 1.0 / sqrt(v23 * v23 + v24 * v24 + v25 * v25);
      double v58 = v26 * v24;
      double v59 = v26 * v23;
      double v60 = v26 * v25;
      double v27 = sqrt(v16);
      double v28 = atan2(v15, v27 * 0.996647189);
      double v29 = atan2(v14, v13);
      __double2 v30 = __sincos_stret(v28);
      double v31 = atan2(v15 + v30.__sinval * v30.__sinval * 42841.3115 * v30.__sinval, v27 + v30.__cosval * v30.__cosval * -42697.6727 * v30.__cosval);
      __double2 v32 = __sincos_stret(v31);
      double v33 = 6378137.0 / sqrt(v32.__sinval * v32.__sinval * -0.00669437999 + 1.0);
      double v34 = v27 / v32.__cosval - (*(double *)(v7 + 1448) + v33);
      double v35 = (v34 + v33) * v32.__cosval;
      __double2 v36 = __sincos_stret(v29);
      double v37 = v59 * v59 + v58 * v58 + v60 * v60;
      long double v38 = v58 * v14 + v59 * v13 + v60 * v15;
      double v39 = v38 + v38;
      double v40 = ((v34 + v33 * 0.99330562) * v32.__sinval * ((v34 + v33 * 0.99330562) * v32.__sinval)
           + v35 * v36.__cosval * (v35 * v36.__cosval)
           + v35 * v36.__sinval * (v35 * v36.__sinval)
           - v13 * v13
           - v14 * v14
           - v15 * v15)
          * (4.0
           * v37)
          + v39 * v39;
      if (v40 >= 0.0 && (double v41 = (sqrt(v40) + v39) * -0.5 / v37, v41 >= 0.0))
      {
        long double v42 = v60 * v15 + v58 * v14 + v59 * v13;
        double v12 = v41
            + 20000.0
            + v41 / fmin(*(double *)(v7 + 416), *(double *)(v7 + 376))
            + fmax(fmin(v41 * 5.0, 6378137.0), 20000.0) * (1.0 - v42 * v42 / v61);
      }
      else
      {
        double v12 = sqrt(v61) + 100000.0;
      }
      double v10 = v62;
    }
    else
    {
      double v12 = 0.0;
      if (!v11) {
        double v12 = sqrt((v9 + 12756274.0) * v9) + 357299.23;
      }
    }
    double v43 = fmax(v10, 1.0);
    if (v12 < v43 + -0.000001)
    {
      if ((altitude::EarthAdjustedViewNode::computeView(karo::Item const*,unsigned int)::seenBefore & 1) == 0)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        float v44 = GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          double v64 = v43;
          __int16 v65 = 2048;
          double v66 = v12;
          _os_log_impl(&dword_1A1780000, v44, OS_LOG_TYPE_ERROR, "Adjustment not applied, invalid depth range, znear = %f zfar = %f", buf, 0x16u);
        }
        altitude::EarthAdjustedViewNode::computeView(karo::Item const*,unsigned int)::seenBefore = 1;
      }
      return v7;
    }
    double v45 = (v12 + v43) * 0.5;
    double v46 = v45 + -0.000001;
    double v47 = v45 + 0.000001;
    if (v12 >= v43 + 0.000001)
    {
      double v46 = v43;
      double v47 = v12;
    }
    if (*(unsigned char *)(v7 + 1016))
    {
      double v48 = fmax((v47 - v46) * 0.02, 1.0);
      double v49 = v46 - v48;
      double v50 = v48 + v47;
    }
    else
    {
      double v51 = v46 * 0.98;
      double v50 = v47 * 1.02;
      double v49 = fmax(v51, *((double *)this + 6) * v47);
    }
    uint64_t v52 = *(void *)(*((void *)this + 4) + 8);
    if (!v52)
    {
      BOOL v56 = 0;
      double v54 = 0.0;
      goto LABEL_34;
    }
    uint64_t v53 = *(void *)(v52 + 112);
    if (v53)
    {
      double v54 = *(double *)(*(void *)(v53 + 8) + 64);
      uint64_t v55 = *(void *)(v52 + 112);
      if (v55)
      {
LABEL_30:
        BOOL v56 = *(unsigned __int8 *)(*(void *)(v55 + 8) + 72) != 0;
LABEL_34:
        karo::graphics::View::setFar((karo::graphics::View *)v7, v50, v54, v56);
        karo::graphics::View::setNear((karo::graphics::View *)v7, v49, v54, v56);
        *((_DWORD *)this + 14) = *(_DWORD *)(v7 + 112);
        *((_DWORD *)this + 15) = *(_DWORD *)(*((void *)this + 4) + 88);
        return v7;
      }
    }
    else
    {
      double v54 = 0.0;
      uint64_t v55 = *(void *)(v52 + 112);
      if (v55) {
        goto LABEL_30;
      }
    }
    BOOL v56 = 0;
    goto LABEL_34;
  }
  return v7;
}

void altitude::EarthAdjustedViewNode::~EarthAdjustedViewNode(void **this)
{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1A6239270);
}

{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void md::TransitRenderLayer::updateWithContext(uint64_t a1, uint64_t **a2, md::LayoutContext *a3)
{
  uint64_t v4 = (uint64_t *)*((void *)a3 + 1);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5)
  {
    long double v8 = 0;
    double v9 = 0;
    goto LABEL_72;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x1AF456233693CD46;
    if (*(void *)&v5 <= 0x1AF456233693CD46uLL) {
      uint64_t v7 = 0x1AF456233693CD46uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v5 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v10 = *v4;
  int v11 = *(void **)(v10 + 8 * v7);
  if (!v11) {
    goto LABEL_25;
  }
  double v12 = (void *)*v11;
  if (!v12) {
    goto LABEL_25;
  }
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v14 = v12[1];
      if (v14 == 0x1AF456233693CD46)
      {
        if (v12[2] == 0x1AF456233693CD46) {
          goto LABEL_23;
        }
      }
      else if ((v14 & (*(void *)&v5 - 1)) != v7)
      {
        goto LABEL_25;
      }
      double v12 = (void *)*v12;
      if (!v12) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v13 = v12[1];
    if (v13 == 0x1AF456233693CD46) {
      break;
    }
    if (v13 >= *(void *)&v5) {
      v13 %= *(void *)&v5;
    }
    if (v13 != v7) {
      goto LABEL_25;
    }
LABEL_12:
    double v12 = (void *)*v12;
    if (!v12) {
      goto LABEL_25;
    }
  }
  if (v12[2] != 0x1AF456233693CD46) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v15 = v12[5];
  if (*(void *)(v15 + 8) == 0x1AF456233693CD46)
  {
    double v9 = *(double **)(v15 + 32);
    goto LABEL_26;
  }
LABEL_25:
  double v9 = 0;
LABEL_26:
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v16 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v5 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v16 = 0x3070CB6B3C7F21D3uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v16 = (*(void *)&v5 - 1) & 0x3070CB6B3C7F21D3;
  }
  float v17 = *(void **)(v10 + 8 * v16);
  if (!v17) {
    goto LABEL_48;
  }
  double v18 = (void *)*v17;
  if (!v18) {
    goto LABEL_48;
  }
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v20 = v18[1];
      if (v20 == 0x3070CB6B3C7F21D3)
      {
        if (v18[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_46;
        }
      }
      else if ((v20 & (*(void *)&v5 - 1)) != v16)
      {
        goto LABEL_48;
      }
      double v18 = (void *)*v18;
      if (!v18) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v19 = v18[1];
    if (v19 != 0x3070CB6B3C7F21D3)
    {
      if (v19 >= *(void *)&v5) {
        v19 %= *(void *)&v5;
      }
      if (v19 != v16) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v18[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_35:
      double v18 = (void *)*v18;
      if (!v18) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v21 = v18[5];
  if (*(void *)(v21 + 8) == 0x3070CB6B3C7F21D3)
  {
    long double v8 = *(uint64_t **)(v21 + 32);
    goto LABEL_49;
  }
LABEL_48:
  long double v8 = 0;
LABEL_49:
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v22 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v5 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v22 = 0x8BD499FBD96FBB9ELL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v22 = (*(void *)&v5 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  double v23 = *(void **)(v10 + 8 * v22);
  if (!v23) {
    goto LABEL_71;
  }
  double v24 = (void *)*v23;
  if (!v24) {
    goto LABEL_71;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v25 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v27 = v24[1];
      if (v27 == 0x8BD499FBD96FBB9ELL)
      {
        if (v24[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_69;
        }
      }
      else if ((v27 & v25) != v22)
      {
        goto LABEL_71;
      }
      double v24 = (void *)*v24;
      if (!v24) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v26 = v24[1];
    if (v26 != 0x8BD499FBD96FBB9ELL)
    {
      if (v26 >= *(void *)&v5) {
        v26 %= *(void *)&v5;
      }
      if (v26 != v22) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v24[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_58:
      double v24 = (void *)*v24;
      if (!v24) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  double v28 = (int8x8_t *)v24[5];
  if (*(void *)&v28[1] == 0x8BD499FBD96FBB9ELL)
  {
    int8x8_t v5 = v28[4];
    goto LABEL_72;
  }
LABEL_71:
  int8x8_t v5 = 0;
LABEL_72:
  float v29 = 0.0;
  float v30 = 0.0;
  if (*(unsigned char *)(a1 + 417)) {
    float v30 = *(float *)(*(void *)&v5 + 16);
  }
  float v31 = *(float *)(*(void *)&v5 + 20);
  float32x2_t v32 = 0;
  float v33 = 0.0;
  if (*(unsigned __int8 *)(md::LayoutContext::frameState(a3) + 128) - 4 >= 0xFFFFFFFD)
  {
    double v34 = v9[536];
    double v35 = v9[537];
    double v62 = v9[538];
    double v36 = sqrt(v34 * v34 + v35 * v35 + v62 * v62);
    long double v37 = asin(194259.118 / v36);
    long double v38 = cos(1.3962634 - v37);
    v39.f64[0] = 1.0 / v36;
    float v29 = 1.0 / v36 * v34;
    float v33 = 1.0 / v36 * v35;
    v39.f64[1] = v38;
    double v40 = (const double *)&qword_1A28FB420;
    float64x2_t v41 = vld1q_dup_f64(v40);
    v41.f64[0] = v62;
    float32x2_t v32 = vcvt_f32_f64(vmulq_f64(v39, v41));
  }
  long double v42 = *a2;
  double v43 = a2[1];
  if (*a2 != v43)
  {
    do
    {
      uint64_t v44 = *v42;
      float v45 = v9[471] * v9[173] / (v9[171] * (*(double *)(*v42 + 72) - *(double *)(*v42 + 56)));
      *(float *)(v44 + 368) = v45;
      md::BaseMapTileDataRenderable::adjustZScale(v44, v30, v31);
      uint64_t v46 = *(void *)(v44 + 384);
      *(_DWORD *)(v46 + 1352) = *(_DWORD *)(v44 + 368);
      double v47 = *(void **)(v46 + 816);
      unint64_t v48 = v47[1];
      double v49 = (float32x4_t *)v47[9];
      gm::operator*<double,4,4,4>(v64[0].f64, v9 + 101, (double *)(v44 + 88));
      *double v49 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v64[0]), v64[1]);
      v49[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v64[2]), v64[3]);
      v49[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v64[4]), v64[5]);
      v49[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v64[6]), v64[7]);
      v49[4].i32[0] = *(_DWORD *)(v44 + 368);
      unint64_t v50 = v47[8];
      if (v50 <= v48) {
        unint64_t v50 = v48;
      }
      v47[7] = 0;
      v47[8] = v50;
      double v51 = *(void **)(v46 + 848);
      unint64_t v52 = v51[1];
      uint64_t v53 = (float32x4_t *)v51[9];
      *uint64_t v53 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v44 + 88)), *(float64x2_t *)(v44 + 104));
      v53[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v44 + 120)), *(float64x2_t *)(v44 + 136));
      v53[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v44 + 152)), *(float64x2_t *)(v44 + 168));
      v53[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v44 + 184)), *(float64x2_t *)(v44 + 200));
      v53[4].f32[0] = v29;
      v53[4].f32[1] = v33;
      *(float32x2_t *)&v53[4].u32[2] = v32;
      if (v51[8] > v52) {
        unint64_t v52 = v51[8];
      }
      v51[7] = 0;
      v51[8] = v52;
      uint64_t v54 = md::LayoutContext::frameState(a3);
      md::GeometryContext::transformConstantData(v64[0].f64, v8, (unsigned __int8 *)(v44 + 24), *(unsigned __int8 *)(v54 + 128), 0.0, 0.0);
      float64_t v55 = v64[0].f64[0];
      uint64_t v56 = *(void *)(*(void *)&v64[0].f64[0] + 8);
      if ((*(unsigned char *)(*(void *)&v64[0].f64[0] + 16) & 2) == 0
        && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
      {
        uint64_t v67 = &v65;
        double v66 = &v67;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v66, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
      if (v56) {
        int32x4_t v57 = *(_DWORD **)(*(void *)&v55 + 72);
      }
      else {
        int32x4_t v57 = 0;
      }
      double v58 = *(void **)(v46 + 832);
      unint64_t v59 = v58[1];
      if (v59) {
        double v60 = (_DWORD *)v58[9];
      }
      else {
        double v60 = 0;
      }
      *double v60 = *v57;
      v60[1] = v57[1];
      v60[2] = v57[2];
      v60[3] = v57[3];
      v60[4] = v57[4];
      v60[5] = v57[5];
      v60[6] = v57[6];
      v60[8] = v57[8];
      v60[9] = v57[9];
      v60[10] = v57[10];
      v60[11] = v57[11];
      v60[12] = v57[12];
      v60[13] = v57[13];
      v60[14] = v57[14];
      v60[15] = v57[15];
      v60[16] = v57[16];
      v60[17] = v57[17];
      v60[18] = v57[18];
      v60[19] = v57[19];
      v60[20] = v57[20];
      v60[21] = v57[21];
      v60[22] = v57[22];
      v60[23] = v57[23];
      v60[24] = v57[24];
      v60[25] = v57[25];
      v60[26] = v57[26];
      v60[27] = v57[27];
      v60[28] = v57[28];
      v60[29] = v57[29];
      v60[30] = v57[30];
      v60[31] = v57[31];
      v60[32] = v57[32];
      v60[33] = v57[33];
      v60[34] = v57[34];
      v60[35] = v57[35];
      v60[36] = v57[36];
      v60[37] = v57[37];
      v60[38] = v57[38];
      v60[39] = v57[39];
      v60[40] = v57[40];
      v60[41] = v57[41];
      v60[42] = v57[42];
      v60[43] = v57[43];
      v60[44] = v57[44];
      v60[45] = v57[45];
      v60[46] = v57[46];
      v60[47] = v57[47];
      v60[48] = v57[48];
      v60[49] = v57[49];
      v60[50] = v57[50];
      v60[51] = v57[51];
      v60[52] = v57[52];
      v60[53] = v57[53];
      v60[54] = v57[54];
      v60[55] = v57[55];
      v60[56] = v57[56];
      v60[57] = v57[57];
      v60[58] = v57[58];
      v60[59] = v57[59];
      v60[60] = v57[60];
      v60[61] = v57[61];
      v60[62] = v57[62];
      v60[63] = v57[63];
      v60[64] = v57[64];
      v60[65] = v57[65];
      v60[66] = v57[66];
      v60[67] = v57[67];
      v60[68] = v57[68];
      v60[69] = v57[69];
      v60[70] = v57[70];
      v60[71] = v57[71];
      v60[72] = v57[72];
      v60[73] = v57[73];
      v60[74] = v57[74];
      v60[75] = v57[75];
      v60[85] = v57[85];
      if (v60 && v59)
      {
        if (v58[8] > v59) {
          unint64_t v59 = v58[8];
        }
        v58[7] = 0;
        v58[8] = v59;
      }
      float64_t v61 = v64[0].f64[1];
      if (*(void *)&v64[0].f64[1])
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v64[0].f64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(float64_t))(**(void **)&v61 + 16))(COERCE_FLOAT64_T(*(void *)&v61));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v61);
        }
      }
      ++v42;
    }
    while (v42 != v43);
  }
}

uint64_t *std::__tree<std::shared_ptr<md::TransitTileData>,md::TransitTileSetCompare,std::allocator<std::shared_ptr<md::TransitTileData>>>::__emplace_unique_key_args<std::shared_ptr<md::TransitTileData>,std::shared_ptr<md::TransitTileData> const&>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long double v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v7;
        uint64_t v11 = v7[4];
        if (!md::TransitTileSetCompare::operator()(a2, v11)) {
          break;
        }
        uint64_t v7 = *v10;
        long double v8 = v10;
        if (!*v10) {
          goto LABEL_9;
        }
      }
      double result = (uint64_t *)md::TransitTileSetCompare::operator()(v11, a2);
      if (!result) {
        break;
      }
      long double v8 = v10 + 1;
      uint64_t v7 = v10[1];
      if (!v7) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v10 = a1 + 1;
LABEL_9:
    unint64_t v13 = (uint64_t *)operator new(0x30uLL);
    uint64_t v14 = v13;
    v13[4] = a3;
    v13[5] = a4;
    if (a4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v10;
    uint64_t *v8 = v13;
    uint64_t v15 = (uint64_t *)**a1;
    if (v15)
    {
      *a1 = v15;
      uint64_t v14 = *v8;
    }
    double result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

BOOL md::TransitTileSetCompare::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != v5)
  {
    unsigned int v6 = *(unsigned __int16 *)(a1 + 24);
    int v7 = *(unsigned __int16 *)(a2 + 24);
LABEL_8:
    uint64_t v11 = (unsigned __int16 *)(a2 + 24);
    if (v6 != v7) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unsigned int v6 = *(unsigned __int16 *)(a1 + 24);
  int v7 = *(unsigned __int16 *)(a2 + 24);
  if (v6 != v7) {
    goto LABEL_8;
  }
  if (*(void *)(a1 + 96) == *(void *)(a2 + 96))
  {
    long double v8 = *(const void **)(a1 + 32);
    size_t v9 = *(void *)(a1 + 40) - (void)v8;
    uint64_t v10 = *(const void **)(a2 + 32);
    if (v9 == *(void *)(a2 + 40) - (void)v10 && !memcmp(v8, v10, v9)) {
      return *(void *)(a1 + 136) < *(void *)(a2 + 136);
    }
  }
  uint64_t v11 = (unsigned __int16 *)(a2 + 24);
LABEL_9:
  if (*(void *)(a1 + 96) == *(void *)(a2 + 96))
  {
    double v12 = *(const void **)(a1 + 32);
    size_t v13 = *(void *)(a1 + 40) - (void)v12;
    uint64_t v14 = *(const void **)(a2 + 32);
    if (v13 == *(void *)(a2 + 40) - (void)v14 && !memcmp(v12, v14, v13))
    {
      BOOL v16 = v4 >= v5;
      return !v16;
    }
  }
LABEL_12:
  unsigned int v15 = *v11;
  BOOL v16 = v6 >= v15;
  if (v6 != v15) {
    return !v16;
  }
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a2 + 32);
  uint64_t v20 = *(void *)(a2 + 40);
  return gdc::GenericKey::operator<(v17, v18, v19, v20);
}

void md::TransitRenderLayer::renderablesWillEnterView(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *(void *)(a1 + 376);
  int v4 = *(unsigned __int8 *)(v3 + 76);
  *(unsigned char *)(v3 + 76) = 0;
  unsigned int v5 = *a3;
  unsigned int v6 = a3[1];
  if (*a3 != v6)
  {
    int v7 = (uint64_t **)(a1 + 424);
    double v35 = v39;
    double v36 = v42;
    do
    {
      uint64_t v9 = *v5;
      std::__tree<std::shared_ptr<md::TransitTileData>,md::TransitTileSetCompare,std::allocator<std::shared_ptr<md::TransitTileData>>>::__emplace_unique_key_args<std::shared_ptr<md::TransitTileData>,std::shared_ptr<md::TransitTileData> const&>(v7, *(void *)(*v5 + 384), *(void *)(*v5 + 384), *(void *)(*v5 + 392));
      if (!v4)
      {
        double v24 = *(void **)(v9 + 408);
        if (v24)
        {
          objc_msgSend(v24, "stop", v35, v36);
          uint64_t v25 = *(void **)(v9 + 408);
          if (v25)
          {
            *(void *)(v9 + 408) = 0;
          }
        }
        uint64_t v26 = *(void *)(v9 + 384);
        *(_DWORD *)(v26 + 1344) = 1065353216;
        *(unsigned char *)(v26 + 1368) = 1;
        uint64_t v27 = *(void *)(v26 + 864);
        uint64_t v28 = *(void *)(v26 + 872);
        while (2)
        {
          if (v27 == v28) {
            goto LABEL_4;
          }
          if (*(float *)(v27 + 52) != 1.0)
          {
            *(_DWORD *)(v27 + 52) = 1065353216;
            uint64_t v29 = *(void *)(v27 + 64);
            uint64_t v30 = *(void *)(v27 + 72);
            if (v29 != v30)
            {
              unint64_t v31 = v30 - v29 - 184;
              if (v31 < 0xB8)
              {
                do
                {
LABEL_33:
                  *(unsigned char *)(v29 + 177) = 1;
                  v29 += 184;
                }
                while (v29 != v30);
              }
              else
              {
                unint64_t v32 = v31 / 0xB8 + 1;
                float v33 = (unsigned char *)(v29 + 361);
                uint64_t v34 = v32 & 0x3FFFFFFFFFFFFFELL;
                do
                {
                  *(v33 - 184) = 1;
                  unsigned char *v33 = 1;
                  v33 += 368;
                  v34 -= 2;
                }
                while (v34);
                if (v32 != (v32 & 0x3FFFFFFFFFFFFFELL))
                {
                  v29 += 184 * (v32 & 0x3FFFFFFFFFFFFFELL);
                  goto LABEL_33;
                }
              }
            }
          }
          v27 += 104;
          continue;
        }
      }
      uint64_t v10 = [[VKTimedAnimation alloc] initWithDuration:0.5];
      LODWORD(v11) = 30.0;
      [(VKAnimation *)v10 setFrequency:v11];
      uint64_t v12 = *(void *)(v9 + 384);
      *(_DWORD *)(v12 + 1344) = 0;
      *(unsigned char *)(v12 + 1368) = 1;
      uint64_t v13 = *(void *)(v12 + 864);
      uint64_t v14 = *(void *)(v12 + 872);
      while (v13 != v14)
      {
        if (*(float *)(v13 + 52) != 0.0)
        {
          *(_DWORD *)(v13 + 52) = 0;
          uint64_t v15 = *(void *)(v13 + 64);
          uint64_t v16 = *(void *)(v13 + 72);
          if (v15 != v16)
          {
            unint64_t v17 = v16 - v15 - 184;
            if (v17 < 0xB8) {
              goto LABEL_16;
            }
            unint64_t v18 = v17 / 0xB8 + 1;
            uint64_t v19 = (unsigned char *)(v15 + 361);
            uint64_t v20 = v18 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              *(v19 - 184) = 1;
              unsigned char *v19 = 1;
              v19 += 368;
              v20 -= 2;
            }
            while (v20);
            if (v18 != (v18 & 0x3FFFFFFFFFFFFFELL))
            {
              v15 += 184 * (v18 & 0x3FFFFFFFFFFFFFELL);
              do
              {
LABEL_16:
                *(unsigned char *)(v15 + 177) = 1;
                v15 += 184;
              }
              while (v15 != v16);
            }
          }
        }
        v13 += 104;
      }
      [*(id *)(v9 + 408) stop];
      [(VKTimedAnimation *)v10 setTimingFunction:VKAnimationCurveLinear];
      v41[0] = MEMORY[0x1E4F143A8];
      v41[1] = 3221225472;
      v42[0] = ___ZN2md18TransitRenderLayer20transitionRenderableEPNS_25TransitTileDataRenderableEffb_block_invoke;
      v42[1] = &__block_descriptor_48_e8_v12__0f8l;
      v42[2] = v9;
      v42[3] = 0x3F80000000000000;
      [(VKTimedAnimation *)v10 setStepHandler:v41];
      v38[0] = MEMORY[0x1E4F143A8];
      v38[1] = 3221225472;
      v39[0] = ___ZN2md18TransitRenderLayer20transitionRenderableEPNS_25TransitTileDataRenderableEffb_block_invoke_2;
      v39[1] = &__block_descriptor_44_e8_v12__0B8l;
      v39[2] = v9;
      int v40 = 1065353216;
      [(VKAnimation *)v10 setCompletionHandler:v38];
      uint64_t v21 = v10;
      p_super = &v21->super;
      if (v21) {
        double v23 = v21;
      }
      long double v8 = *(void **)(v9 + 408);
      *(void *)(v9 + 408) = p_super;

      md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 400), p_super);
LABEL_4:
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_1A25BB004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN2md18TransitRenderLayer20transitionRenderableEPNS_25TransitTileDataRenderableEffb_block_invoke(uint64_t result, float a2)
{
  float v2 = *(float *)(result + 40) + (float)((float)(*(float *)(result + 44) - *(float *)(result + 40)) * a2);
  uint64_t v3 = *(void *)(*(void *)(result + 32) + 384);
  *(float *)(v3 + 1344) = v2;
  *(unsigned char *)(v3 + 1368) = 1;
  uint64_t v4 = *(void *)(v3 + 864);
  for (uint64_t i = *(void *)(v3 + 872); v4 != i; v4 += 104)
  {
    if (*(float *)(v4 + 52) == v2) {
      continue;
    }
    *(float *)(v4 + 52) = v2;
    uint64_t v6 = *(void *)(v4 + 64);
    uint64_t v7 = *(void *)(v4 + 72);
    if (v6 == v7) {
      continue;
    }
    unint64_t v8 = v7 - v6 - 184;
    if (v8 >= 0xB8)
    {
      unint64_t v9 = v8 / 0xB8 + 1;
      double result = v6 + 361;
      uint64_t v10 = v9 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        *(unsigned char *)(result - 184) = 1;
        *(unsigned char *)double result = 1;
        result += 368;
        v10 -= 2;
      }
      while (v10);
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFELL)) {
        continue;
      }
      v6 += 184 * (v9 & 0x3FFFFFFFFFFFFFELL);
    }
    do
    {
      *(unsigned char *)(v6 + 177) = 1;
      v6 += 184;
    }
    while (v6 != v7);
  }
  return result;
}

void ___ZN2md18TransitRenderLayer20transitionRenderableEPNS_25TransitTileDataRenderableEffb_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  float v2 = *(float *)(a1 + 40);
  uint64_t v3 = *(void *)(v1 + 384);
  *(float *)(v3 + 1344) = v2;
  *(unsigned char *)(v3 + 1368) = 1;
  uint64_t v4 = *(void *)(v3 + 864);
  for (uint64_t i = *(void *)(v3 + 872); v4 != i; v4 += 104)
  {
    if (*(float *)(v4 + 52) == v2) {
      continue;
    }
    *(float *)(v4 + 52) = v2;
    uint64_t v6 = *(void *)(v4 + 64);
    uint64_t v7 = *(void *)(v4 + 72);
    if (v6 == v7) {
      continue;
    }
    unint64_t v8 = v7 - v6 - 184;
    if (v8 >= 0xB8)
    {
      unint64_t v9 = v8 / 0xB8 + 1;
      uint64_t v10 = (unsigned char *)(v6 + 361);
      uint64_t v11 = v9 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        *(v10 - 184) = 1;
        unsigned char *v10 = 1;
        v10 += 368;
        v11 -= 2;
      }
      while (v11);
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFELL)) {
        continue;
      }
      v6 += 184 * (v9 & 0x3FFFFFFFFFFFFFELL);
    }
    do
    {
      *(unsigned char *)(v6 + 177) = 1;
      v6 += 184;
    }
    while (v6 != v7);
  }
  uint64_t v12 = *(void **)(v1 + 408);
  *(void *)(v1 + 408) = 0;
}

uint64_t ___ZN2md18TransitRenderLayer19beginFadeOutTransitENSt3__18functionIFvvEEE_block_invoke(uint64_t result, float a2)
{
  float v2 = *(void **)(*(void *)(result + 32) + 104);
  if (v2)
  {
    float v3 = 1.0 - a2;
    do
    {
      uint64_t v4 = *(void *)(v2[16] + 384);
      *(float *)(v4 + 1344) = v3;
      *(unsigned char *)(v4 + 1368) = 1;
      uint64_t v5 = *(void *)(v4 + 864);
      uint64_t v6 = *(void *)(v4 + 872);
      while (v5 != v6)
      {
        if (*(float *)(v5 + 52) != v3)
        {
          *(float *)(v5 + 52) = v3;
          uint64_t v7 = *(void *)(v5 + 64);
          uint64_t v8 = *(void *)(v5 + 72);
          if (v7 != v8)
          {
            unint64_t v9 = v8 - v7 - 184;
            if (v9 < 0xB8) {
              goto LABEL_14;
            }
            unint64_t v10 = v9 / 0xB8 + 1;
            double result = v10 & 0x3FFFFFFFFFFFFFELL;
            uint64_t v11 = (unsigned char *)(v7 + 361);
            uint64_t v12 = v10 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              *(v11 - 184) = 1;
              unsigned char *v11 = 1;
              v11 += 368;
              v12 -= 2;
            }
            while (v12);
            if (v10 != result)
            {
              v7 += 184 * (v10 & 0x3FFFFFFFFFFFFFELL);
              do
              {
LABEL_14:
                *(unsigned char *)(v7 + 177) = 1;
                v7 += 184;
              }
              while (v7 != v8);
            }
          }
        }
        v5 += 104;
      }
      float v2 = (void *)*v2;
    }
    while (v2);
  }
  return result;
}

void ___ZN2md18TransitRenderLayer19beginFadeOutTransitENSt3__18functionIFvvEEE_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    goto LABEL_17;
  }
  float v3 = *(void **)(v2 + 104);
  if (!v3) {
    goto LABEL_17;
  }
  while (2)
  {
    uint64_t v4 = *(void *)(v3[16] + 384);
    *(_DWORD *)(v4 + 1344) = 0;
    *(unsigned char *)(v4 + 1368) = 1;
    uint64_t v5 = *(void *)(v4 + 864);
    uint64_t v6 = *(void *)(v4 + 872);
    while (v5 != v6)
    {
      if (*(float *)(v5 + 52) != 0.0)
      {
        *(_DWORD *)(v5 + 52) = 0;
        uint64_t v7 = *(void *)(v5 + 64);
        uint64_t v8 = *(void *)(v5 + 72);
        if (v7 != v8)
        {
          unint64_t v9 = v8 - v7 - 184;
          if (v9 < 0xB8) {
            goto LABEL_15;
          }
          unint64_t v10 = v9 / 0xB8 + 1;
          uint64_t v11 = (unsigned char *)(v7 + 361);
          uint64_t v12 = v10 & 0x3FFFFFFFFFFFFFELL;
          do
          {
            *(v11 - 184) = 1;
            unsigned char *v11 = 1;
            v11 += 368;
            v12 -= 2;
          }
          while (v12);
          if (v10 != (v10 & 0x3FFFFFFFFFFFFFELL))
          {
            v7 += 184 * (v10 & 0x3FFFFFFFFFFFFFELL);
            do
            {
LABEL_15:
              *(unsigned char *)(v7 + 177) = 1;
              v7 += 184;
            }
            while (v7 != v8);
          }
        }
      }
      v5 += 104;
    }
    float v3 = (void *)*v3;
    if (v3) {
      continue;
    }
    break;
  }
LABEL_17:
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
    uint64_t v14 = *(void *)(v2 + 376);
    uint64_t v15 = *(void **)(v14 + 112);
    *(void *)(v14 + 112) = 0;
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __destroy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvvEEE(v16);
  }
}

uint64_t __destroy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  uint64_t v1 = a1 + 40;
  uint64_t result = *(void *)(a1 + 64);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__function::__func<md::TransitRenderLayer::deactivate(BOOL)::$_0,std::allocator<md::TransitRenderLayer::deactivate(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  v1[32] = 0;
  return (*(uint64_t (**)(void))(*(void *)v1 + 48))();
}

__n128 std::__function::__func<md::TransitRenderLayer::deactivate(BOOL)::$_0,std::allocator<md::TransitRenderLayer::deactivate(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF574238;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::TransitRenderLayer::deactivate(BOOL)::$_0,std::allocator<md::TransitRenderLayer::deactivate(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF574238;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::TransitRenderLayer::deactivate(BOOL)::$_0,std::allocator<md::TransitRenderLayer::deactivate(BOOL)::$_0>,void ()(void)>::~__func()
{
}

uint64_t md::TransitRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a3 + 1);
  uint64_t v4 = *(unsigned __int8 **)(*(void *)(result + 384) + 32);
  if (v4[20] == v3 || v4[19] == v3)
  {
    unsigned __int8 v5 = *(unsigned char *)(result + 49) - *(unsigned char *)(result + 48) + 1;
    uint64_t v6 = *(unsigned __int8 **)(a2 + 24);
    int v7 = *v6;
    unsigned int v8 = v7 + v5;
    unsigned int v9 = v6[1];
    BOOL v10 = v8 > v9;
    if (v8 <= v9) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v6 + 4;
    }
    *(void *)(*(void *)(result + 376) + 152) = v11;
    if (v10)
    {
      v6[1] = v6[2];
      int v7 = 1;
    }
    unsigned __int8 *v6 = v7 + v5;
    *(_DWORD *)(*(void *)(result + 376) + 72) = v7 - *(unsigned __int8 *)(result + 48);
  }
  else if (v4[95] == v3 || v4[94] == v3)
  {
    unsigned __int8 v12 = *(unsigned char *)(result + 49) - *(unsigned char *)(result + 48) + 1;
    uint64_t v13 = *(unsigned __int8 **)(a2 + 24);
    int v14 = *v13;
    unsigned int v15 = v14 + v12;
    unsigned int v16 = v13[1];
    BOOL v17 = v15 > v16;
    if (v15 <= v16) {
      unint64_t v18 = 0;
    }
    else {
      unint64_t v18 = v13 + 4;
    }
    *(void *)(*(void *)(result + 376) + 144) = v18;
    if (v17)
    {
      v13[1] = v13[2];
      int v14 = 1;
    }
    unsigned __int8 *v13 = v14 + v12;
    *(_DWORD *)(*(void *)(result + 376) + 68) = v14 - *(unsigned __int8 *)(result + 48);
  }
  else if (v4[78] == v3 || v4[77] == v3)
  {
    unsigned __int8 v19 = *(unsigned char *)(result + 49) - *(unsigned char *)(result + 48) + 1;
    uint64_t v20 = *(unsigned __int8 **)(a2 + 24);
    int v21 = *v20;
    unsigned int v22 = v21 + v19;
    unsigned int v23 = v20[1];
    BOOL v24 = v22 > v23;
    if (v22 <= v23) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v20 + 4;
    }
    *(void *)(*(void *)(result + 376) + 136) = v25;
    if (v24)
    {
      v20[1] = v20[2];
      int v21 = 1;
    }
    unsigned __int8 *v20 = v21 + v19;
    *(_DWORD *)(*(void *)(result + 376) + 64) = v21 - *(unsigned __int8 *)(result + 48);
  }
  return result;
}

void *md::TransitRenderLayer::layout(md::TransitRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  v209[0] = &unk_1EF5742C8;
  v209[1] = a2;
  v207[0] = &unk_1EF574310;
  v207[1] = a2;
  v208 = v207;
  v212 = v211;
  v210 = v209;
  v211[0] = &unk_1EF574310;
  v211[1] = a2;
  std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v209);
  if (v208 == v207)
  {
    (*(void (**)(void *))(v207[0] + 32))(v207);
  }
  else if (v208)
  {
    (*(void (**)(void *))(*v208 + 40))(v208);
  }
  if (v210 == v209)
  {
    (*(void (**)(void *))(v209[0] + 32))(v209);
  }
  else if (v210)
  {
    (*(void (**)(void *))(*v210 + 40))(v210);
  }
  uint64_t v4 = mach_absolute_time();
  md::TransitRenderLayer::updateActiveTileDatas(this);
  unsigned __int8 v5 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v6 = (int8x8_t)v5[1];
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = 0xC97B9E962ADF4AD4 % *(void *)&v6;
    if (*(void *)&v6 > 0xC97B9E962ADF4AD4) {
      unint64_t v8 = 0xC97B9E962ADF4AD4;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 - 1) & 0xC97B9E962ADF4AD4;
  }
  uint64_t v9 = *v5;
  BOOL v10 = *(void **)(v9 + 8 * v8);
  if (!v10) {
    goto LABEL_36;
  }
  uint64_t v11 = (void *)*v10;
  if (!v11) {
    goto LABEL_36;
  }
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v13 = v11[1];
      if (v13 == 0xC97B9E962ADF4AD4)
      {
        if (v11[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_29;
        }
      }
      else if ((v13 & (*(void *)&v6 - 1)) != v8)
      {
        goto LABEL_36;
      }
      uint64_t v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_36;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v11[1];
    if (v12 == 0xC97B9E962ADF4AD4) {
      break;
    }
    if (v12 >= *(void *)&v6) {
      v12 %= *(void *)&v6;
    }
    if (v12 != v8) {
      goto LABEL_36;
    }
LABEL_18:
    uint64_t v11 = (void *)*v11;
    if (!v11) {
      goto LABEL_36;
    }
  }
  if (v11[2] != 0xC97B9E962ADF4AD4) {
    goto LABEL_18;
  }
LABEL_29:
  uint64_t v14 = v11[5];
  if (*(void *)(v14 + 8) != 0xC97B9E962ADF4AD4 || (unsigned int v15 = *(uint64_t **)(v14 + 32)) == 0)
  {
LABEL_36:
    BOOL v19 = 0;
    goto LABEL_37;
  }
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = v16;
  if (v16 != v17)
  {
    uint64_t v18 = v16;
    while (*(unsigned char *)v18 != 21)
    {
      v18 += 16;
      if (v18 == v17) {
        goto LABEL_90;
      }
    }
  }
  if (v18 == v17 || !*(void *)(v18 + 8))
  {
LABEL_90:
    if (v16 != v17)
    {
      while (*(unsigned char *)v16 != 25)
      {
        v16 += 16;
        if (v16 == v17) {
          goto LABEL_96;
        }
      }
    }
    if (v16 == v17) {
LABEL_96:
    }
      uint64_t v46 = 0;
    else {
      uint64_t v46 = *(void *)(v16 + 8);
    }
    BOOL v19 = v46 != 0;
  }
  else
  {
    BOOL v19 = 1;
  }
LABEL_37:
  if (v7.u32[0] >= 2uLL)
  {
    unint64_t v21 = 0xE42D19AFCA302E68;
    if (*(void *)&v6 <= 0xE42D19AFCA302E68) {
      unint64_t v21 = 0xE42D19AFCA302E68 % *(void *)&v6;
    }
    uint64_t v20 = *(void **)(v9 + 8 * v21);
    do
    {
      do
        uint64_t v20 = (void *)*v20;
      while (v20[1] != 0xE42D19AFCA302E68);
    }
    while (v20[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    uint64_t v20 = *(void **)(v9 + 8 * ((*(void *)&v6 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        uint64_t v20 = (void *)*v20;
      while (v20[1] != 0xE42D19AFCA302E68);
    }
    while (v20[2] != 0xE42D19AFCA302E68);
  }
  uint64_t v22 = *(void *)(v20[5] + 32);
  v205[0] = &unk_1EF574358;
  v205[1] = this;
  v206 = v205;
  unsigned int v23 = *(unsigned char **)(v22 + 48);
  BOOL v24 = *(unsigned char **)(v22 + 56);
  if (v23 == v24) {
    goto LABEL_53;
  }
  do
  {
    LOBYTE(v197) = *v23;
    if (!v206) {
      goto LABEL_376;
    }
    (*(void (**)(void *, long long *))(*v206 + 48))(v206, &v197);
    ++v23;
  }
  while (v23 != v24);
  if (v206 == v205)
  {
LABEL_53:
    (*(void (**)(void *))(v205[0] + 32))(v205);
  }
  else if (v206)
  {
    (*(void (**)(void))(*v206 + 40))();
  }
  uint64_t v25 = (void *)*((void *)a2 + 1);
  int8x8_t v26 = (int8x8_t)v25[1];
  if (v26)
  {
    uint8x8_t v27 = (uint8x8_t)vcnt_s8(v26);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v28 = 0xFD5D5EC7C4E1E43ELL;
      if (*(void *)&v26 <= 0xFD5D5EC7C4E1E43ELL) {
        unint64_t v28 = 0xFD5D5EC7C4E1E43ELL % *(void *)&v26;
      }
    }
    else
    {
      unint64_t v28 = (*(void *)&v26 - 1) & 0xFD5D5EC7C4E1E43ELL;
    }
    uint64_t v29 = *(void **)(*v25 + 8 * v28);
    if (v29)
    {
      uint64_t v30 = (void *)*v29;
      if (v30)
      {
        if (v27.u32[0] < 2uLL)
        {
          uint64_t v31 = *(void *)&v26 - 1;
          while (1)
          {
            uint64_t v33 = v30[1];
            if (v33 == 0xFD5D5EC7C4E1E43ELL)
            {
              if (v30[2] == 0xFD5D5EC7C4E1E43ELL) {
                goto LABEL_75;
              }
            }
            else if ((v33 & v31) != v28)
            {
              goto LABEL_368;
            }
            uint64_t v30 = (void *)*v30;
            if (!v30) {
              goto LABEL_368;
            }
          }
        }
        while (1)
        {
          unint64_t v32 = v30[1];
          if (v32 == 0xFD5D5EC7C4E1E43ELL) {
            break;
          }
          if (v32 >= *(void *)&v26) {
            v32 %= *(void *)&v26;
          }
          if (v32 != v28) {
            goto LABEL_368;
          }
LABEL_64:
          uint64_t v30 = (void *)*v30;
          if (!v30) {
            goto LABEL_368;
          }
        }
        if (v30[2] != 0xFD5D5EC7C4E1E43ELL) {
          goto LABEL_64;
        }
LABEL_75:
        uint64_t v34 = v30[5];
        if (*(void *)(v34 + 8) == 0xFD5D5EC7C4E1E43ELL)
        {
          uint64_t v35 = *(void *)(v34 + 32);
          if (v35)
          {
            uint64_t v36 = *((void *)this + 44);
            *(void *)(v36 + 112) = 0;
            *(void *)(v36 + 120) = 0;
            uint64_t v188 = v4;
            md::TransitRenderLayer::updateDebugSettings(this);
            long double v38 = *(float **)(*((void *)this + 47) + 96);
            v192 = this;
            if (v38)
            {
              id v39 = *(id *)(*((void *)this + 5) + 104);
              [v39 contentScale];
              float v41 = v40;
              if (v38[66] != v41)
              {
                v38[66] = v41;
                md::TransitNodeFeaturePool::resetCache((md::TransitNodeFeaturePool *)v38);
              }
            }
            if (*(unsigned char *)(v35 + 224))
            {
              uint64_t v42 = *((void *)this + 47);
              if (*(unsigned char *)(v42 + 104)) {
                md::LabelExternalObjectsModerator::setSelectedTransitNodes(*(void *)(v42 + 56), v35 + 168);
              }
            }
            BOOL v187 = v19;
            double v43 = (void *)*((void *)a2 + 1);
            int8x8_t v44 = (int8x8_t)v43[1];
            if (!*(void *)&v44) {
              goto LABEL_118;
            }
            uint8x8_t v37 = (uint8x8_t)vcnt_s8(v44);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              uint64_t v45 = 0x1AF456233693CD46;
              if (*(void *)&v44 <= 0x1AF456233693CD46uLL) {
                uint64_t v45 = 0x1AF456233693CD46uLL % *(void *)&v44;
              }
            }
            else
            {
              uint64_t v45 = (*(void *)&v44 - 1) & 0x1AF456233693CD46;
            }
            double v47 = *(void **)(*v43 + 8 * v45);
            if (!v47) {
              goto LABEL_118;
            }
            unint64_t v48 = (void *)*v47;
            if (!v48) {
              goto LABEL_118;
            }
            if (v37.u32[0] < 2uLL)
            {
              uint64_t v49 = *(void *)&v44 - 1;
              while (1)
              {
                uint64_t v51 = v48[1];
                if (v51 == 0x1AF456233693CD46)
                {
                  if (v48[2] == 0x1AF456233693CD46) {
                    goto LABEL_116;
                  }
                }
                else if ((v51 & v49) != v45)
                {
                  goto LABEL_118;
                }
                unint64_t v48 = (void *)*v48;
                if (!v48) {
                  goto LABEL_118;
                }
              }
            }
            while (2)
            {
              unint64_t v50 = v48[1];
              if (v50 != 0x1AF456233693CD46)
              {
                if (v50 >= *(void *)&v44) {
                  v50 %= *(void *)&v44;
                }
                if (v50 != v45) {
                  goto LABEL_118;
                }
                goto LABEL_105;
              }
              if (v48[2] != 0x1AF456233693CD46)
              {
LABEL_105:
                unint64_t v48 = (void *)*v48;
                if (!v48) {
                  goto LABEL_118;
                }
                continue;
              }
              break;
            }
LABEL_116:
            uint64_t v52 = v48[5];
            if (*(void *)(v52 + 8) == 0x1AF456233693CD46)
            {
              uint64_t v53 = *(float **)(v52 + 32);
              goto LABEL_119;
            }
LABEL_118:
            uint64_t v53 = 0;
LABEL_119:
            if (v53[1308] >= 1.0) {
              *(float *)v37.i32 = fmaxf(v53[770] + v53[768], 1.0);
            }
            else {
              v37.i32[0] = *(_DWORD *)(md::LayoutContext::frameState(a2) + 112);
            }
            if (vabds_f32(*(float *)v37.i32, *((float *)this + 103)) > 0.01) {
              *((_DWORD *)this + 103) = v37.i32[0];
            }
            uint64_t v54 = (uint64_t *)*((void *)this + 34);
            v189 = (uint64_t *)*((void *)this + 35);
            if (v54 != v189)
            {
              uint64_t v191 = 0;
              while (1)
              {
                uint64_t v195 = *v54;
                uint64_t v56 = *(void *)(*v54 + 384);
                unsigned int v57 = vcvtms_s32_f32(fmaxf(v53[770] + v53[768], 1.0));
                if (v57 >= 0x17) {
                  unsigned int v57 = 23;
                }
                v190 = v54;
                BOOL v58 = *(unsigned char *)(v56 + 1368) || *(unsigned char *)(v56 + 1369) != 0;
                int v59 = *((_DWORD *)this + 102);
                float v60 = *((float *)this + 103);
                *(unsigned char *)(v56 + 1368) = 0;
                if (*(_DWORD *)(v56 + 1360) != v59) {
                  break;
                }
LABEL_142:
                char v67 = *(_DWORD *)(v56 + 1364) != v57 || v58;
                uint64_t v68 = *(void *)(v56 + 888);
                uint64_t v69 = *(void *)(v56 + 896);
                while (v68 != v69)
                {
                  int8x16_t v70 = *(void **)(v68 + 80);
                  int16x8_t v71 = *(void **)(v68 + 88);
                  while (v70 != v71)
                  {
                    if (*v70) {
                      uint64_t v72 = *v70 + 8;
                    }
                    else {
                      uint64_t v72 = 0;
                    }
                    int v73 = *(float *)(v72 + 16) <= v60 || *(unsigned char *)(*(void *)v72 + 88) != 0;
                    if (*(unsigned __int8 *)(v72 + 56) != v73)
                    {
                      *(unsigned char *)(v72 + 56) = v73;
                      char v67 = 1;
                    }
                    ++v70;
                  }
                  v68 += 248;
                }
                uint64_t v74 = v56 + 912;
                uint64_t v75 = *(void *)(v56 + 920);
                if (v75 != v56 + 912)
                {
                  if ((int)v60 >= 0x17) {
                    unsigned int v76 = 23;
                  }
                  else {
                    unsigned int v76 = (int)v60;
                  }
                  do
                  {
                    if (*(float *)(v75 + 40) > v60 || *(float *)(v75 + 44) <= v60)
                    {
                      int v86 = 0;
                    }
                    else
                    {
                      uint64_t v77 = *(void *)(v75 + 24);
                      if (v77)
                      {
                        int8x16_t v78 = *(std::__shared_weak_count **)(v75 + 32);
                        v202[0] = *(void *)(v75 + 24);
                        v202[1] = (uint64_t)v78;
                        if (v78) {
                          atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)&v197, v77, (uint64_t)v78);
                        if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                          std::__shared_weak_count::__release_weak(v78);
                          if ((_BYTE)v200) {
                            goto LABEL_172;
                          }
                        }
                        else if ((_BYTE)v200)
                        {
LABEL_172:
                          uint64_t v79 = *(void *)(v197 + 24);
                          int8x16_t v80 = *(float **)v79;
                          if (*(void *)v79
                            && (float v81 = *v80, LODWORD(v80) = *v80 == 1.0, *(unsigned char *)(v79 + 10))
                            && (v81 != 0.0 ? (BOOL v82 = v81 == 1.0) : (BOOL v82 = 1), !v82)
                            || (v83 = *(unsigned __int8 *)(v79 + v80 + 11), float v81 = 0.0, v83 == 2))
                          {
                            LOBYTE(v202[0]) = 1;
                            v204.i8[0] = 1;
                            char v84 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v79, 0x5Bu, v76, 0, v202);
                            char v85 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v79, 0x5Bu, v76, 1, &v204);
                            if (v81 < 1.0) {
                              char v85 = v84;
                            }
                          }
                          else
                          {
                            char v85 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v197 + 24), 0x5Bu, v76, v83, 0);
                          }
                          int v86 = v85 != 0;
                          goto LABEL_191;
                        }
                        int v86 = 0;
LABEL_191:
                        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v197);
                        goto LABEL_184;
                      }
                      int v86 = 1;
                    }
LABEL_184:
                    if (*(unsigned __int8 *)(v75 + 48) != v86)
                    {
                      *(unsigned char *)(v75 + 48) = v86;
                      char v67 = 1;
                    }
                    uint64_t v75 = *(void *)(v75 + 8);
                  }
                  while (v75 != v74);
                }
                int v87 = *((unsigned __int8 *)v192 + 416);
                if (v67) {
                  goto LABEL_197;
                }
                if (*((unsigned char *)v192 + 416))
                {
                  int v87 = 1;
LABEL_197:
                  v90 = (void *)*((void *)a2 + 1);
                  unint64_t v91 = v90[1];
                  if ((v91 & (v91 - 1)) != 0)
                  {
                    unint64_t v93 = 0x1AF456233693CD46;
                    if (v91 <= 0x1AF456233693CD46) {
                      unint64_t v93 = 0x1AF456233693CD46 % v91;
                    }
                    v92 = *(void **)(*v90 + 8 * v93);
                    do
                    {
                      do
                        v92 = (void *)*v92;
                      while (v92[1] != 0x1AF456233693CD46);
                    }
                    while (v92[2] != 0x1AF456233693CD46);
                  }
                  else
                  {
                    v92 = *(void **)(*v90 + 8 * ((v91 - 1) & 0x1AF456233693CD46));
                    do
                    {
                      do
                        v92 = (void *)*v92;
                      while (v92[1] != 0x1AF456233693CD46);
                    }
                    while (v92[2] != 0x1AF456233693CD46);
                  }
                  uint64_t v94 = *((void *)v192 + 47);
                  char v95 = *(unsigned char *)(v94 + 323);
                  char v96 = v87 != 0;
                  *(float *)v37.i32 = fmaxf(*(float *)(*(void *)(v92[5] + 32) + 3080)+ *(float *)(*(void *)(v92[5] + 32) + 3072), 1.0);
                  unsigned int v97 = vcvtms_s32_f32(*(float *)v37.i32);
                  if (v97 >= 0x17) {
                    unsigned int v97 = 23;
                  }
                  *(_DWORD *)(v56 + 1364) = v97;
                  md::TransitTileData::updateLineStyles(v56, (uint64_t)a2, v95, v96, v94 + 328, v37);
                  uint64_t v98 = *(void *)(v56 + 920);
                  if (v98 == v74)
                  {
LABEL_271:
                    v139 = *(void **)(v56 + 944);
                    for (uint64_t i = *(void **)(v56 + 952); v139 != i; v139 += 2)
                      (*(void (**)(void, void))(*(void *)*v139 + 48))(*v139, *(unsigned __int8 *)(v56 + 1370));
                    v141 = *(int8x8_t **)(v56 + 1224);
                    if (v141 && *(unsigned char *)(v56 + 1370))
                    {
                      uint64_t v142 = *(void *)(v56 + 944);
                      uint64_t v143 = *(void *)(v56 + 952);
                      while (v142 != v143)
                      {
                        int8x8_t v145 = v141[5];
                        if (v145)
                        {
                          unint64_t v146 = *(void *)(*(void *)(*(void *)v142 + 8) + 40);
                          uint8x8_t v37 = (uint8x8_t)vcnt_s8(v145);
                          v37.i16[0] = vaddlv_u8(v37);
                          if (v37.u32[0] > 1uLL)
                          {
                            unint64_t v147 = *(void *)(*(void *)(*(void *)v142 + 8) + 40);
                            if (v146 >= *(void *)&v145) {
                              unint64_t v147 = v146 % *(void *)&v145;
                            }
                          }
                          else
                          {
                            unint64_t v147 = (*(void *)&v145 - 1) & v146;
                          }
                          v148 = *(void **)(*(void *)&v141[4] + 8 * v147);
                          if (v148)
                          {
                            v149 = (void *)*v148;
                            if (v149)
                            {
                              if (v37.u32[0] < 2uLL)
                              {
                                uint64_t v150 = *(void *)&v145 - 1;
                                while (1)
                                {
                                  uint64_t v152 = v149[1];
                                  if (v152 == v146)
                                  {
                                    if (v149[2] == v146) {
                                      goto LABEL_301;
                                    }
                                  }
                                  else if ((v152 & v150) != v147)
                                  {
                                    goto LABEL_278;
                                  }
                                  v149 = (void *)*v149;
                                  if (!v149) {
                                    goto LABEL_278;
                                  }
                                }
                              }
                              do
                              {
                                unint64_t v151 = v149[1];
                                if (v151 == v146)
                                {
                                  if (v149[2] == v146)
                                  {
LABEL_301:
                                    v153 = (void *)v149[3];
                                    uint64_t v154 = v153[5];
                                    if (v153[4] == v154) {
                                      unsigned __int8 v144 = 5;
                                    }
                                    else {
                                      unsigned __int8 v144 = *(unsigned char *)(*(void *)(v154 - 16) + 61);
                                    }
                                    atomic_store(v144, (unsigned __int8 *)(v153[2] + 25));
                                    atomic_store(v153[4] != v153[5], (unsigned __int8 *)(v153[2] + 24));
                                    break;
                                  }
                                }
                                else
                                {
                                  if (v151 >= *(void *)&v145) {
                                    v151 %= *(void *)&v145;
                                  }
                                  if (v151 != v147) {
                                    break;
                                  }
                                }
                                v149 = (void *)*v149;
                              }
                              while (v149);
                            }
                          }
                        }
LABEL_278:
                        v142 += 16;
                      }
                    }
                    *(unsigned char *)(v56 + 1370) = 0;
                    goto LABEL_304;
                  }
                  while (2)
                  {
                    while (2)
                    {
                      if (*(unsigned char *)(v98 + 48))
                      {
                        int v105 = *(_DWORD *)(v56 + 1364);
                        float v106 = *(float *)(v56 + 1340);
                        float v107 = *(float *)(v56 + 1344);
                        uint64_t v108 = *(void *)(v98 + 24);
                        v109 = *(std::__shared_weak_count **)(v98 + 32);
                        *(void *)&long long v197 = v108;
                        *((void *)&v197 + 1) = v109;
                        if (v109) {
                          atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v202, v108, (uint64_t)v109);
                        if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                          std::__shared_weak_count::__release_weak(v109);
                          if (v203)
                          {
LABEL_223:
                            unsigned int v110 = v105;
                            uint64_t v111 = *(void *)(v202[0] + 24);
                            if (v110 >= 0x17) {
                              unsigned int v112 = 23;
                            }
                            else {
                              unsigned int v112 = v110;
                            }
                            v113 = *(float **)v111;
                            if (*(void *)v111
                              && (float v114 = *v113, LODWORD(v113) = *v113 == 1.0, *(unsigned char *)(v111 + 10))
                              && (v114 != 0.0 ? (BOOL v115 = v114 == 1.0) : (BOOL v115 = 1), !v115)
                              || (v116 = *(unsigned __int8 *)(v111 + v113 + 11), float v114 = 0.0, v116 == 2))
                            {
                              LOBYTE(v197) = 1;
                              v204.i8[0] = 1;
                              float v117 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v111, 0x5Eu, v112, 0, &v197);
                              float v118 = v117
                                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v111, 0x5Eu, v112, 1u, &v204)- v117)* v114);
                            }
                            else
                            {
                              float v118 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v202[0] + 24), 0x5Eu, v112, v116, 0);
                            }
                            uint64_t v119 = *(void *)(v202[0] + 24);
                            v120 = *(float **)v119;
                            if (*(void *)v119
                              && (float v121 = *v120, LODWORD(v120) = *v120 == 1.0, *(unsigned char *)(v119 + 10))
                              && (v121 != 0.0 ? (BOOL v122 = v121 == 1.0) : (BOOL v122 = 1), !v122)
                              || (v123 = *(unsigned __int8 *)(v119 + v120 + 11), float v121 = 0.0, v123 == 2))
                            {
                              LOBYTE(v197) = 1;
                              v204.i8[0] = 1;
                              float v124 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v119, 0x61u, v112, 0, &v197);
                              float v125 = v124
                                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v119, 0x61u, v112, 1u, &v204)- v124)* v121);
                            }
                            else
                            {
                              float v125 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v202[0] + 24), 0x61u, v112, v123, 0);
                            }
                            float v126 = v118 * 0.5;
                            if (v126 > 0.0 || v125 > 0.0)
                            {
                              uint64_t v127 = *(void *)(*(void *)(*(void *)(*(void *)(v98 + 72) + 48) + 64) + 32);
                              long long v197 = 0uLL;
                              unint64_t v128 = *(void *)(v127 + 8);
                              if (v128) {
                                v129 = *(float32x4_t **)(v127 + 72);
                              }
                              else {
                                v129 = 0;
                              }
                              *(void *)&long long v130 = 0;
                              *((void *)&v130 + 1) = v127;
                              long long v193 = v130;
                              long long v197 = v130;
                              uint64_t v198 = 0;
                              unint64_t v199 = v128;
                              v201 = v129;
                              __int16 v200 = 1;
                              gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v204, *(void *)(v202[0] + 24), 0x5Du, v112, 2u, 0);
                              v131.i32[0] = 931135616;
                              float32x4_t v132 = (float32x4_t)vdupq_lane_s32(v131, 0);
                              v132.f32[3] = v107 * 0.000015259;
                              float32x4_t v196 = v132;
                              float32x4_t *v129 = vmulq_f32(v132, vcvtq_f32_u32(vmovl_u16(v204)));
                              v129[1].f32[2] = (float)(v125 + v126) * v106;
                              v129[1].i64[0] = 0;
                              v129[1].f32[3] = (float)*(unsigned int *)(**(void **)(*(void *)(v98 + 56) + 96)
                                                                      + 80);
                              if (v128)
                              {
                                if ((void)v193 && *(unsigned char *)(*((void *)&v193 + 1) + 17) != 2) {
                                  (*(void (**)(void))(*(void *)v193 + 64))();
                                }
                                unint64_t v133 = *(void *)(*((void *)&v193 + 1) + 64);
                                if (v133 <= v128) {
                                  unint64_t v133 = v128;
                                }
                                *(void *)(*((void *)&v193 + 1) + 56) = 0;
                                *(void *)(*((void *)&v193 + 1) + 64) = v133;
                              }
                              uint64_t v134 = *(void *)(*(void *)(*(void *)(*(void *)(v98 + 72) + 176) + 64) + 32);
                              long long v197 = 0uLL;
                              unint64_t v135 = *(void *)(v134 + 8);
                              if (v135) {
                                v136 = *(float32x4_t **)(v134 + 72);
                              }
                              else {
                                v136 = 0;
                              }
                              *(void *)&long long v137 = 0;
                              *((void *)&v137 + 1) = v134;
                              long long v194 = v137;
                              long long v197 = v137;
                              uint64_t v198 = 0;
                              unint64_t v199 = v135;
                              v201 = v136;
                              __int16 v200 = 1;
                              gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v204, *(void *)(v202[0] + 24), 0x5Cu, v112, 2u, 0);
                              float32x4_t *v136 = vmulq_f32(v196, vcvtq_f32_u32(vmovl_u16(v204)));
                              v136[1].f32[2] = v126 * v106;
                              v136[1].i64[0] = 0;
                              v136[1].f32[3] = (float)*(unsigned int *)(**(void **)(*(void *)(v98 + 64) + 96)
                                                                      + 80);
                              if (v135)
                              {
                                if ((void)v194 && *(unsigned char *)(*((void *)&v194 + 1) + 17) != 2) {
                                  (*(void (**)(void))(*(void *)v194 + 64))();
                                }
                                unint64_t v138 = *(void *)(*((void *)&v194 + 1) + 64);
                                if (v138 <= v135) {
                                  unint64_t v138 = v135;
                                }
                                *(void *)(*((void *)&v194 + 1) + 56) = 0;
                                *(void *)(*((void *)&v194 + 1) + 64) = v138;
                              }
                              gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v202);
                              uint64_t v98 = *(void *)(v98 + 8);
                              if (v98 == v74) {
                                goto LABEL_271;
                              }
                              continue;
                            }
                          }
                        }
                        else if (v203)
                        {
                          goto LABEL_223;
                        }
                        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v202);
                      }
                      break;
                    }
                    v99 = *(void **)(*(void *)(*(void *)(*(void *)(v98 + 72) + 48) + 64) + 32);
                    unint64_t v100 = v99[1];
                    uint64_t v101 = v99[9];
                    *(void *)uint64_t v101 = 0;
                    *(void *)(v101 + 8) = 0;
                    *(_DWORD *)(v101 + 24) = 0;
                    *(void *)(v101 + 16) = 0;
                    if (v99[8] > v100) {
                      unint64_t v100 = v99[8];
                    }
                    v99[7] = 0;
                    v99[8] = v100;
                    v102 = *(void **)(*(void *)(*(void *)(*(void *)(v98 + 72) + 176) + 64) + 32);
                    unint64_t v103 = v102[1];
                    uint64_t v104 = v102[9];
                    *(void *)uint64_t v104 = 0;
                    *(void *)(v104 + 8) = 0;
                    *(_DWORD *)(v104 + 24) = 0;
                    *(void *)(v104 + 16) = 0;
                    if (v102[8] > v103) {
                      unint64_t v103 = v102[8];
                    }
                    v102[7] = 0;
                    v102[8] = v103;
                    uint64_t v98 = *(void *)(v98 + 8);
                    if (v98 == v74) {
                      goto LABEL_271;
                    }
                    continue;
                  }
                }
                id v88 = *(id *)(v195 + 408);
                BOOL v89 = v88 == 0;

                if (!v89)
                {
                  int v87 = *((unsigned __int8 *)v192 + 416);
                  goto LABEL_197;
                }
LABEL_304:
                BOOL v155 = (v191 & 0x100000000) != 0 || *(void *)(v56 + 1072) != 0;
                HIDWORD(v191) = v155;
                this = v192;
                BOOL v55 = (v191 & 1) != 0 || *(void *)(v56 + 1064) || *(void *)(v56 + 1216) != 0;
                LODWORD(v191) = v55;
                uint64_t v54 = v190 + 1;
                if (v190 + 1 == v189) {
                  goto LABEL_311;
                }
              }
              uint64_t v61 = *(void *)(v56 + 864);
              uint64_t v62 = *(void *)(v56 + 872);
              if (v61 != v62)
              {
                unint64_t v63 = v62 - v61 - 104;
                if (v63 > 0x67)
                {
                  unint64_t v64 = v63 / 0x68 + 1;
                  char v65 = (_DWORD *)(v61 + 164);
                  uint64_t v66 = v64 & 0x7FFFFFFFFFFFFFELL;
                  do
                  {
                    *(v65 - 26) = -1;
                    *char v65 = -1;
                    v65 += 52;
                    v66 -= 2;
                  }
                  while (v66);
                  if (v64 == (v64 & 0x7FFFFFFFFFFFFFELL)) {
                    goto LABEL_141;
                  }
                  v61 += 104 * (v64 & 0x7FFFFFFFFFFFFFELL);
                }
                do
                {
                  *(_DWORD *)(v61 + 60) = -1;
                  v61 += 104;
                }
                while (v61 != v62);
              }
LABEL_141:
              *(_DWORD *)(v56 + 1360) = v59;
              BOOL v58 = 1;
              goto LABEL_142;
            }
            uint64_t v191 = 0;
LABEL_311:
            *((unsigned char *)this + 416) = 0;
            v156 = (void *)*((void *)a2 + 1);
            unint64_t v157 = v156[1];
            if ((v157 & (v157 - 1)) != 0)
            {
              unint64_t v160 = 0x1AF456233693CD46;
              v159 = v53;
              if (v157 <= 0x1AF456233693CD46) {
                unint64_t v160 = 0x1AF456233693CD46 % v157;
              }
              v158 = *(void **)(*v156 + 8 * v160);
              do
              {
                do
                  v158 = (void *)*v158;
                while (v158[1] != 0x1AF456233693CD46);
              }
              while (v158[2] != 0x1AF456233693CD46);
            }
            else
            {
              v158 = **(void ***)(*v156 + 8 * ((v157 - 1) & 0x1AF456233693CD46));
              v159 = v53;
              while (v158[1] != 0x1AF456233693CD46 || v158[2] != 0x1AF456233693CD46)
                v158 = (void *)*v158;
            }
            double v161 = *(double *)(*(void *)(v158[5] + 32) + 40);
            BOOL v162 = !v187;
            *((unsigned char *)this + 420) = !v187;
            if (v161 <= 0.0)
            {
              int v164 = 0;
              *((unsigned char *)this + 419) = 0;
              uint64_t v4 = v188;
            }
            else
            {
              uint64_t v4 = v188;
              if (*((unsigned char *)this + 417))
              {
                unsigned int v163 = vcvtms_s32_f32(fmaxf(v159[770] + v159[768], 1.0));
                if (v163 >= 0x17) {
                  unsigned int v163 = 23;
                }
                int v164 = v163 > 0xD;
              }
              else
              {
                int v164 = **((unsigned __int8 **)a2 + 92);
              }
              *((unsigned char *)this + 419) = v164;
            }
            if (!v164) {
              BOOL v162 = 0;
            }
            *((unsigned char *)this + 421) = v162;
            if (*(unsigned char *)(*((void *)this + 47) + 4))
            {
              v165 = +[VKDebugSettings sharedSettings];
              int v166 = [v165 disableTransitLineDrawing];

              int v167 = v166 ^ 1;
              uint64_t v4 = v188;
              this = v192;
            }
            else
            {
              int v167 = 1;
            }
            if (!v167 || !v191) {
              goto LABEL_367;
            }
            uint64_t v168 = 38;
            if (*((void *)this + 46) == 1) {
              uint64_t v168 = 40;
            }
            uint64_t v169 = *(void *)(*((void *)this + 48) + 8);
            v170 = *(void **)(*(void *)(*((void *)this + 5) + 24) + 8);
            if (*((void *)this + 46) == 1) {
              uint64_t v171 = 190;
            }
            else {
              uint64_t v171 = 188;
            }
            if (*((void *)this + 46) == 1) {
              uint64_t v172 = 156;
            }
            else {
              uint64_t v172 = 154;
            }
            uint64_t v173 = md::PassList::commandBufferForId(*(void **)(*(void *)(*((void *)this + 5) + 24) + 8), *(_WORD *)(v169 + v168), HIBYTE(*(_WORD *)(v169 + v168)));
            uint64_t v174 = md::PassList::commandBufferForId(v170, *(_WORD *)(v169 + v171), HIBYTE(*(_WORD *)(v169 + v171)));
            uint64_t v175 = md::PassList::commandBufferForId(v170, *(_WORD *)(v169 + v172), HIBYTE(*(_WORD *)(v169 + v172)));
            int v176 = *((unsigned __int8 *)this + 421);
            *((unsigned char *)this + 418) = v176;
            if (v176) {
              uint64_t v177 = v175;
            }
            else {
              uint64_t v177 = v174;
            }
            if (*((unsigned char *)this + 420)) {
              v178 = (ggl::CommandBuffer *)v173;
            }
            else {
              v178 = 0;
            }
            if ((v191 & 0x100000000) != 0)
            {
              if (*((unsigned char *)this + 420))
              {
                int v179 = *(_DWORD *)(*((void *)this + 47) + 72);
                LOBYTE(v197) = 0;
                md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles((uint64_t)this, a2, v173, v179, &v197);
                uint64_t v180 = *(void *)(*((void *)this + 47) + 152);
                if (v180) {
                  *(void *)(v173 + 32) = v180;
                }
              }
              if ((v191 & 1) == 0 && *((unsigned char *)this + 420)) {
                goto LABEL_365;
              }
            }
            else if ((v191 & 1) == 0)
            {
LABEL_365:
              if (*((void *)this + 34) != *((void *)this + 35))
              {
                md::TransitRenderLayer::appendTransitLineCommandsToBuffer(this, (ggl::CommandBuffer *)v177, v178, *((const md::LayoutContext **)a2 + 1));
                ggl::CommandBuffer::sortRenderItems(*(ggl::CommandBuffer **)(v177 + 72), *(ggl::CommandBuffer **)(v177 + 80));
              }
LABEL_367:
              md::TransitRenderLayer::debugLayoutWithContext(this, a2);
              goto LABEL_368;
            }
            uint64_t v181 = 64;
            if (!*((unsigned char *)this + 418)) {
              uint64_t v181 = 68;
            }
            int v182 = *(_DWORD *)(*((void *)this + 47) + v181);
            LOBYTE(v197) = 0;
            md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles((uint64_t)this, a2, v177, v182, &v197);
            uint64_t v183 = 136;
            if (!*((unsigned char *)this + 418)) {
              uint64_t v183 = 144;
            }
            uint64_t v184 = *(void *)(*((void *)this + 47) + v183);
            if (v184) {
              *(void *)(v177 + 32) = v184;
            }
            goto LABEL_365;
          }
        }
      }
    }
  }
LABEL_368:
  unint64_t v185 = mach_absolute_time() - v4;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
  }
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 128), v185);
  if (!v212)
  {
LABEL_376:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v212 + 48))(v212);
  __n128 result = v212;
  if (v212 == v211) {
    return (void *)(*(uint64_t (**)(void *))(v211[0] + 32))(v211);
  }
  if (v212) {
    return (void *)(*(uint64_t (**)(void))(*v212 + 40))();
  }
  return result;
}

void sub_1A25BCD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13 = mach_absolute_time() - a11;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
  }
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 128), v13);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v11 - 192));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned __int8 v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "TransitLayout", "", v5, 2u);
  }
}

void md::TransitRenderLayer::updateActiveTileDatas(md::TransitRenderLayer *this)
{
  uint64_t v2 = (uint64_t **)((char *)this + 472);
  int v3 = (void *)((char *)this + 496);
  os_signpost_id_t v4 = (char *)this + 480;
  long long v5 = *(_OWORD *)((char *)this + 472);
  uint64_t v6 = *((void *)this + 61);
  uint64_t v7 = *((void *)this + 63);
  uint64_t v8 = *((void *)this + 64);
  *((void *)this + 59) = *((void *)this + 62);
  *((void *)this + 60) = v7;
  *((_OWORD *)this + 31) = v5;
  *((void *)this + 61) = v8;
  *((void *)this + 64) = v6;
  uint64_t v9 = (void *)(v7 + 16);
  if (!v8) {
    uint64_t v9 = (void *)((char *)this + 472);
  }
  void *v9 = v4;
  if (v6) {
    int v3 = (void *)(*((void *)this + 63) + 16);
  }
  v281 = (void *)((char *)this + 504);
  void *v3 = (char *)this + 504;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)this + 60));
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  v282 = v4;
  *((void *)this + 59) = v4;
  v286 = this;
  BOOL v10 = (uint64_t *)*((void *)this + 34);
  uint64_t v11 = (uint64_t *)*((void *)this + 35);
  while (v10 != v11)
  {
    uint64_t v12 = *v10++;
    std::__tree<std::shared_ptr<md::TransitTileData>,md::TransitTileSetCompare,std::allocator<std::shared_ptr<md::TransitTileData>>>::__emplace_unique_key_args<std::shared_ptr<md::TransitTileData>,std::shared_ptr<md::TransitTileData> const&>(v2, *(void *)(v12 + 384), *(void *)(v12 + 384), *(void *)(v12 + 392));
  }
  unint64_t v13 = (void *)*((void *)v286 + 53);
  v283 = (void *)((char *)v286 + 432);
  if (v13 == (void *)((char *)v286 + 432)) {
    goto LABEL_321;
  }
  while (2)
  {
    uint64_t v14 = (void *)*v281;
    v284 = v13;
    uint64_t v15 = v13[4];
    if (*v281)
    {
      unsigned int v16 = *(unsigned __int8 *)(v15 + 16);
      unsigned int v17 = *(unsigned __int16 *)(v15 + 24);
      while (1)
      {
        uint64_t v18 = v14[4];
        unsigned int v19 = *(unsigned __int8 *)(v18 + 16);
        unsigned int v20 = *(unsigned __int16 *)(v18 + 24);
        BOOL v21 = v16 == v19 && v17 == v20;
        if (!v21) {
          break;
        }
        if (*(void *)(v15 + 96) != *(void *)(v18 + 96)) {
          goto LABEL_25;
        }
        uint64_t v22 = *(const void **)(v15 + 32);
        size_t v23 = *(void *)(v15 + 40) - (void)v22;
        BOOL v24 = *(const void **)(v18 + 32);
        if (v23 != *(void *)(v18 + 40) - (void)v24 || memcmp(v22, v24, v23)) {
          goto LABEL_25;
        }
        unsigned int v20 = v17;
        if (*(void *)(v15 + 136) >= *(void *)(v18 + 136))
        {
LABEL_29:
          if (v19 == *(unsigned __int8 *)(v15 + 16)
            && v20 == *(unsigned __int16 *)(v15 + 24)
            && *(void *)(v18 + 96) == *(void *)(v15 + 96)
            && (unint64_t v28 = *(const void **)(v18 + 32),
                size_t v29 = *(void *)(v18 + 40) - (void)v28,
                uint64_t v30 = *(const void **)(v15 + 32),
                v29 == *(void *)(v15 + 40) - (void)v30)
            && !memcmp(v28, v30, v29))
          {
            if (*(void *)(v18 + 136) >= *(void *)(v15 + 136)) {
              goto LABEL_315;
            }
          }
          else
          {
            unsigned int v31 = *(unsigned __int16 *)(v15 + 24);
            if (v20 == v31)
            {
              if (*(void *)(v18 + 96) == *(void *)(v15 + 96)
                && (unint64_t v32 = *(const void **)(v18 + 32),
                    size_t v33 = *(void *)(v18 + 40) - (void)v32,
                    uint64_t v34 = *(const void **)(v15 + 32),
                    v33 == *(void *)(v15 + 40) - (void)v34)
                && !memcmp(v32, v34, v33))
              {
                if (v19 >= *(unsigned __int8 *)(v15 + 16)) {
                  goto LABEL_315;
                }
              }
              else if (!gdc::GenericKey::operator<(*(void *)(v18 + 32), *(void *)(v18 + 40), *(void *)(v15 + 32), *(void *)(v15 + 40)))
              {
                goto LABEL_315;
              }
            }
            else if (v20 >= v31)
            {
              goto LABEL_315;
            }
          }
          ++v14;
        }
LABEL_14:
        uint64_t v14 = (void *)*v14;
        if (!v14) {
          goto LABEL_48;
        }
      }
      if (v17 != v20)
      {
        if (v17 >= v20) {
          goto LABEL_29;
        }
        goto LABEL_14;
      }
LABEL_25:
      if (*(void *)(v15 + 96) == *(void *)(v18 + 96)
        && (uint64_t v25 = *(const void **)(v15 + 32),
            size_t v26 = *(void *)(v15 + 40) - (void)v25,
            uint8x8_t v27 = *(const void **)(v18 + 32),
            v26 == *(void *)(v18 + 40) - (void)v27)
        && !memcmp(v25, v27, v26))
      {
        unsigned int v20 = v17;
        if (v16 >= v19) {
          goto LABEL_29;
        }
      }
      else
      {
        unsigned int v20 = v17;
        if (!gdc::GenericKey::operator<(*(void *)(v15 + 32), *(void *)(v15 + 40), *(void *)(v18 + 32), *(void *)(v18 + 40)))goto LABEL_29; {
      }
        }
      goto LABEL_14;
    }
LABEL_48:
    uint64_t v35 = *(void *)(*((void *)v286 + 47) + 80);
    signed int v36 = *(_DWORD *)(v15 + 172);
    signed int v37 = *(_DWORD *)(v15 + 176);
    __p = (void *)__PAIR64__(v36, v37);
    unsigned int v38 = *(unsigned __int8 *)(v15 + 169);
    LODWORD(v294) = v38;
    int v39 = 1 << v38;
    if (v37 < 0)
    {
      v37 += v39;
    }
    else
    {
      BOOL v40 = __OFSUB__(v37, v39);
      int v41 = v37 - v39;
      if (v41 < 0 != v40) {
        goto LABEL_53;
      }
      signed int v37 = v41;
    }
    LODWORD(__p) = v37;
LABEL_53:
    double v43 = (uint64_t **)(v35 + 8);
    uint64_t v42 = *(_DWORD **)(v35 + 8);
    if (v42)
    {
      while (1)
      {
        while (1)
        {
          int8x8_t v44 = v42;
          int v45 = v42[8];
          if (v37 == v45) {
            break;
          }
          if (v37 < v45) {
            goto LABEL_55;
          }
          if (v45 >= v37) {
            goto LABEL_71;
          }
LABEL_66:
          uint64_t v42 = (_DWORD *)v44[1];
          if (!v42)
          {
            double v43 = (uint64_t **)(v44 + 1);
            goto LABEL_68;
          }
        }
        int v46 = *((_DWORD *)v44 + 9);
        if (v36 != v46)
        {
          if (v36 < v46) {
            goto LABEL_55;
          }
          if (v46 >= v36)
          {
LABEL_71:
            char v51 = 1;
            goto LABEL_72;
          }
          goto LABEL_66;
        }
        unsigned int v47 = *((_DWORD *)v44 + 10);
        if (v47 <= v38)
        {
          if (v47 >= v38) {
            goto LABEL_71;
          }
          goto LABEL_66;
        }
LABEL_55:
        uint64_t v42 = (_DWORD *)*v44;
        double v43 = (uint64_t **)v44;
        if (!*v44) {
          goto LABEL_68;
        }
      }
    }
    int8x8_t v44 = (void *)(v35 + 8);
LABEL_68:
    unint64_t v48 = v44;
    int8x8_t v44 = operator new(0x50uLL);
    *((_DWORD *)v44 + 8) = v37;
    *((_DWORD *)v44 + 9) = v36;
    *((_DWORD *)v44 + 10) = v38;
    *((_DWORD *)v44 + 12) = 0;
    *int8x8_t v44 = 0;
    v44[1] = 0;
    v44[8] = 0;
    v44[9] = 0;
    v44[7] = 0;
    v44[2] = v48;
    *double v43 = v44;
    uint64_t v49 = **(void **)v35;
    unint64_t v50 = v44;
    if (v49)
    {
      *(void *)uint64_t v35 = v49;
      unint64_t v50 = *v43;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v35 + 8), v50);
    char v51 = 0;
    ++*(void *)(v35 + 16);
LABEL_72:
    uint64_t v53 = (char *)v44[8];
    unint64_t v52 = v44[9];
    if ((unint64_t)v53 >= v52)
    {
      BOOL v55 = (char *)v44[7];
      uint64_t v56 = (v53 - v55) >> 3;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61) {
        abort();
      }
      uint64_t v58 = v52 - (void)v55;
      if (v58 >> 2 > v57) {
        unint64_t v57 = v58 >> 2;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59)
      {
        if (v59 >> 61) {
LABEL_503:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        float v60 = (char *)operator new(8 * v59);
      }
      else
      {
        float v60 = 0;
      }
      uint64_t v61 = &v60[8 * v56];
      *(void *)uint64_t v61 = v15;
      uint64_t v54 = v61 + 8;
      if (v53 != v55)
      {
        unint64_t v62 = v53 - v55 - 8;
        if (v62 < 0x58) {
          goto LABEL_508;
        }
        if ((unint64_t)(v55 - v60) < 0x20) {
          goto LABEL_508;
        }
        uint64_t v63 = (v62 >> 3) + 1;
        unint64_t v64 = &v60[8 * v56 - 16];
        char v65 = (long long *)(v53 - 16);
        uint64_t v66 = v63 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v65;
          *((_OWORD *)v64 - 1) = *(v65 - 1);
          *(_OWORD *)unint64_t v64 = v67;
          v64 -= 32;
          v65 -= 2;
          v66 -= 4;
        }
        while (v66);
        v61 -= 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
        v53 -= 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
        if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_508:
          do
          {
            uint64_t v68 = *((void *)v53 - 1);
            v53 -= 8;
            *((void *)v61 - 1) = v68;
            v61 -= 8;
          }
          while (v53 != v55);
        }
        uint64_t v53 = (char *)v44[7];
      }
      v44[7] = v61;
      v44[8] = v54;
      v44[9] = &v60[8 * v59];
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      *(void *)uint64_t v53 = v15;
      uint64_t v54 = v53 + 8;
    }
    v44[8] = v54;
    if ((v51 & 1) == 0) {
      md::TransitInterTileMediator::updateTileInfos(v35, (int *)&__p, (uint64_t)(v44 + 6));
    }
    uint64_t v69 = *((void *)v286 + 47);
    uint64_t v71 = *(void *)(v69 + 80);
    uint64_t v70 = *(void *)(v69 + 88);
    if (v70) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v15 + 1232) = v71;
    uint64_t v72 = *(std::__shared_weak_count **)(v15 + 1240);
    *(void *)(v15 + 1240) = v70;
    if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
    *(unsigned char *)(v15 + 1371) = 1;
    *(unsigned char *)(v15 + 1369) = 1;
    if (!*(void *)(v15 + 784)) {
      goto LABEL_216;
    }
    int v73 = *(unint64_t **)(v15 + 888);
    uint64_t v74 = *(unint64_t **)(v15 + 896);
    if (v73 == v74) {
      goto LABEL_216;
    }
    v285 = *(unint64_t **)(v15 + 896);
    while (2)
    {
      unint64_t v75 = v73[3];
      if (v75) {
        goto LABEL_107;
      }
      uint64_t v76 = *(void *)(v15 + 784);
      unint64_t v77 = *v73;
      int8x16_t v78 = (std::mutex *)(v76 + 304);
      std::mutex::lock((std::mutex *)(v76 + 304));
      uint64_t v79 = (uint64_t *)(v76 + 192);
      int8x16_t v80 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((void *)(v76 + 192), v77);
      if (v80
        && (float v81 = v80, (v82 = (std::__shared_weak_count *)v80[4]) != 0)
        && (int v83 = std::__shared_weak_count::lock(v82), (*((void *)&v84 + 1) = v83) != 0))
      {
        char v85 = v83;
        uint64_t v86 = v81[3];
        *(void *)&long long v84 = v86;
        long long v291 = v84;
        std::mutex::unlock((std::mutex *)(v76 + 304));
        if (v86) {
          goto LABEL_203;
        }
        int8x16_t v78 = (std::mutex *)(v76 + 304);
      }
      else
      {
        std::mutex::unlock((std::mutex *)(v76 + 304));
        char v85 = 0;
      }
      int v87 = (char *)operator new(0x88uLL);
      id v88 = (atomic_ullong *)v87;
      *((void *)v87 + 1) = 0;
      *((void *)v87 + 2) = 0;
      *(void *)int v87 = &unk_1EF581B08;
      *((void *)v87 + 3) = v77;
      BOOL v89 = v87 + 24;
      *((void *)v87 + 4) = *(void *)(v76 + 16);
      uint64_t v90 = *(void *)(v76 + 24);
      *((void *)v87 + 5) = v90;
      if (v90) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v90 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v87 + 6) = 0;
      *((void *)v87 + 7) = 0;
      *((void *)v87 + 8) = 850045863;
      *(_OWORD *)(v87 + 72) = 0u;
      *(_OWORD *)(v87 + 88) = 0u;
      *(_OWORD *)(v87 + 104) = 0u;
      *(_OWORD *)(v87 + 114) = 0u;
      if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        unint64_t v91 = v87 + 24;
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
        BOOL v89 = v91;
      }
      v287 = v89;
      v289 = v78;
      *(void *)&long long v92 = v89;
      *((void *)&v92 + 1) = v88;
      long long v291 = v92;
      std::mutex::lock(v78);
      unint64_t v93 = 0x9DDFEA08EB382D69 * (((8 * v77) + 8) ^ HIDWORD(v77));
      unint64_t v94 = 0x9DDFEA08EB382D69 * (HIDWORD(v77) ^ (v93 >> 47) ^ v93);
      unint64_t v95 = 0x9DDFEA08EB382D69 * (v94 ^ (v94 >> 47));
      unint64_t v96 = *(void *)(v76 + 200);
      if (!v96) {
        goto LABEL_140;
      }
      uint8x8_t v97 = (uint8x8_t)vcnt_s8((int8x8_t)v96);
      v97.i16[0] = vaddlv_u8(v97);
      if (v97.u32[0] > 1uLL)
      {
        int8x16_t v78 = (std::mutex *)(0x9DDFEA08EB382D69 * (v94 ^ (v94 >> 47)));
        if (v95 >= v96) {
          int8x16_t v78 = (std::mutex *)(v95 % v96);
        }
      }
      else
      {
        int8x16_t v78 = (std::mutex *)(v95 & (v96 - 1));
      }
      uint64_t v98 = *(void ***)(*v79 + 8 * (void)v78);
      if (!v98 || (v99 = *v98) == 0)
      {
LABEL_140:
        v99 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v76 + 224) + 16))(*(void *)(v76 + 224), 40, 8);
        void *v99 = 0;
        v99[1] = v95;
        v99[3] = 0;
        v99[4] = 0;
        v99[2] = v77;
        float v102 = (float)(unint64_t)(*(void *)(v76 + 232) + 1);
        float v103 = *(float *)(v76 + 240);
        if (v96 && (float)(v103 * (float)v96) >= v102)
        {
LABEL_190:
          float v125 = *(void **)(*v79 + 8 * (void)v78);
          if (v125)
          {
            void *v99 = *v125;
            float v126 = v289;
          }
          else
          {
            void *v99 = *(void *)(v76 + 216);
            *(void *)(v76 + 216) = v99;
            *(void *)(*(void *)(v76 + 192) + 8 * (void)v78) = v76 + 216;
            float v126 = v289;
            if (!*v99)
            {
LABEL_199:
              ++*(void *)(v76 + 232);
              goto LABEL_200;
            }
            unint64_t v127 = *(void *)(*v99 + 8);
            if ((v96 & (v96 - 1)) != 0)
            {
              if (v127 >= v96) {
                v127 %= v96;
              }
            }
            else
            {
              v127 &= v96 - 1;
            }
            float v125 = (void *)(*v79 + 8 * v127);
          }
          *float v125 = v99;
          goto LABEL_199;
        }
        BOOL v104 = (v96 & (v96 - 1)) != 0;
        if (v96 < 3) {
          BOOL v104 = 1;
        }
        unint64_t v105 = v104 | (2 * v96);
        unint64_t v106 = vcvtps_u32_f32(v102 / v103);
        if (v105 <= v106) {
          size_t prime = v106;
        }
        else {
          size_t prime = v105;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
        }
        unint64_t v96 = *(void *)(v76 + 200);
        if (prime <= v96)
        {
          if (prime >= v96) {
            goto LABEL_177;
          }
          unint64_t v119 = vcvtps_u32_f32((float)*(unint64_t *)(v76 + 232) / *(float *)(v76 + 240));
          if (v96 < 3 || (uint8x8_t v120 = (uint8x8_t)vcnt_s8((int8x8_t)v96), v120.i16[0] = vaddlv_u8(v120), v120.u32[0] > 1uLL))
          {
            unint64_t v119 = std::__next_prime(v119);
          }
          else
          {
            uint64_t v121 = 1 << -(char)__clz(v119 - 1);
            if (v119 >= 2) {
              unint64_t v119 = v121;
            }
          }
          if (prime <= v119) {
            size_t prime = v119;
          }
          if (prime >= v96)
          {
            unint64_t v96 = *(void *)(v76 + 200);
LABEL_177:
            if ((v96 & (v96 - 1)) != 0)
            {
              if (v95 >= v96) {
                int8x16_t v78 = (std::mutex *)(v95 % v96);
              }
              else {
                int8x16_t v78 = (std::mutex *)v95;
              }
            }
            else
            {
              int8x16_t v78 = (std::mutex *)((v96 - 1) & v95);
            }
            goto LABEL_190;
          }
          if (!prime)
          {
            uint64_t v130 = *v79;
            *uint64_t v79 = 0;
            if (v130) {
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v76 + 208) + 40))(*(void *)(v76 + 208), v130, 8 * *(void *)(v76 + 200));
            }
            unint64_t v96 = 0;
            *(void *)(v76 + 200) = 0;
            goto LABEL_177;
          }
        }
        uint64_t v108 = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(v76 + 208) + 16))(*(void *)(v76 + 208), 8 * prime, 8);
        uint64_t v109 = *v79;
        *uint64_t v79 = v108;
        if (v109) {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v76 + 208) + 40))(*(void *)(v76 + 208), v109, 8 * *(void *)(v76 + 200));
        }
        uint64_t v110 = 0;
        *(void *)(v76 + 200) = prime;
        do
          *(void *)(*v79 + 8 * v110++) = 0;
        while (prime != v110);
        uint64_t v112 = v76 + 216;
        uint64_t v111 = *(void **)(v76 + 216);
        if (!v111)
        {
LABEL_176:
          unint64_t v96 = prime;
          goto LABEL_177;
        }
        size_t v113 = v111[1];
        size_t v114 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v115 = v113 & v114;
          *(void *)(*v79 + 8 * v115) = v112;
          for (uint64_t i = (void *)*v111; *v111; uint64_t i = (void *)*v111)
          {
            size_t v117 = i[1] & v114;
            if (v117 == v115)
            {
              uint64_t v111 = i;
            }
            else if (*(void *)(*v79 + 8 * v117))
            {
              *uint64_t v111 = *i;
              uint64_t v118 = 8 * v117;
              *uint64_t i = **(void **)(*v79 + v118);
              **(void **)(*v79 + v118) = i;
            }
            else
            {
              *(void *)(*v79 + 8 * v117) = v111;
              uint64_t v111 = i;
              size_t v115 = v117;
            }
          }
          goto LABEL_176;
        }
        if (v113 >= prime) {
          v113 %= prime;
        }
        *(void *)(*v79 + 8 * v113) = v112;
        BOOL v122 = (void *)*v111;
        if (!*v111) {
          goto LABEL_176;
        }
        while (1)
        {
          size_t v124 = v122[1];
          if (v124 >= prime) {
            v124 %= prime;
          }
          if (v124 != v113)
          {
            if (!*(void *)(*v79 + 8 * v124))
            {
              *(void *)(*v79 + 8 * v124) = v111;
              goto LABEL_181;
            }
            *uint64_t v111 = *v122;
            uint64_t v123 = 8 * v124;
            *BOOL v122 = **(void **)(*v79 + v123);
            **(void **)(*v79 + v123) = v122;
            BOOL v122 = v111;
          }
          size_t v124 = v113;
LABEL_181:
          uint64_t v111 = v122;
          BOOL v122 = (void *)*v122;
          size_t v113 = v124;
          if (!v122) {
            goto LABEL_176;
          }
        }
      }
      if (v97.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v101 = v99[1];
          if (v101 == v95)
          {
            if (v99[2] == v77) {
              goto LABEL_206;
            }
          }
          else if ((std::mutex *)(v101 & (v96 - 1)) != v78)
          {
            goto LABEL_140;
          }
          v99 = (void *)*v99;
          if (!v99) {
            goto LABEL_140;
          }
        }
      }
      while (1)
      {
        unint64_t v100 = v99[1];
        if (v100 == v95) {
          break;
        }
        if (v100 >= v96) {
          v100 %= v96;
        }
        if ((std::mutex *)v100 != v78) {
          goto LABEL_140;
        }
LABEL_130:
        v99 = (void *)*v99;
        if (!v99) {
          goto LABEL_140;
        }
      }
      if (v99[2] != v77) {
        goto LABEL_130;
      }
LABEL_206:
      float v126 = v289;
LABEL_200:
      atomic_fetch_add_explicit(v88 + 2, 1uLL, memory_order_relaxed);
      unint64_t v128 = (std::__shared_weak_count *)v99[4];
      v99[3] = v287;
      v99[4] = v88;
      uint64_t v74 = v285;
      if (v128) {
        std::__shared_weak_count::__release_weak(v128);
      }
      std::mutex::unlock(v126);
LABEL_203:
      v129 = (std::__shared_weak_count *)v73[4];
      *(_OWORD *)(v73 + 3) = v291;
      if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
      unint64_t v75 = v73[3];
LABEL_107:
      atomic_store(1u, (unsigned __int8 *)(v75 + 104));
      v73 += 31;
      if (v73 != v74) {
        continue;
      }
      break;
    }
LABEL_216:
    uint64_t v131 = *(void *)(*((void *)v286 + 47) + 96);
    if (v131)
    {
      *(void *)(v15 + 1224) = v131;
      float32x4_t v132 = *(void **)(v15 + 944);
      unint64_t v133 = *(void **)(v15 + 952);
      if (v132 != v133)
      {
LABEL_220:
        uint64_t v134 = *v132;
        *(unsigned char *)(v134 + 64) = 1;
        uint64_t v135 = *(void *)(v134 + 8);
        unint64_t v136 = *(void *)(v135 + 40);
        int8x8_t v137 = *(int8x8_t *)(v131 + 40);
        if (!*(void *)&v137) {
          goto LABEL_240;
        }
        uint8x8_t v138 = (uint8x8_t)vcnt_s8(v137);
        v138.i16[0] = vaddlv_u8(v138);
        if (v138.u32[0] > 1uLL)
        {
          unint64_t v139 = *(void *)(v135 + 40);
          if (v136 >= *(void *)&v137) {
            unint64_t v139 = v136 % *(void *)&v137;
          }
        }
        else
        {
          unint64_t v139 = (*(void *)&v137 - 1) & v136;
        }
        v140 = *(void **)(*(void *)(v131 + 32) + 8 * v139);
        if (!v140 || (v141 = (void *)*v140) == 0)
        {
LABEL_240:
          v300 = 0;
          v301 = 0;
          int8x8_t v145 = *(int8x8_t *)(v131 + 80);
          if (!*(void *)&v145) {
            goto LABEL_260;
          }
          uint8x8_t v146 = (uint8x8_t)vcnt_s8(v145);
          v146.i16[0] = vaddlv_u8(v146);
          if (v146.u32[0] > 1uLL)
          {
            unint64_t v147 = v136;
            if (v136 >= *(void *)&v145) {
              unint64_t v147 = v136 % *(void *)&v145;
            }
          }
          else
          {
            unint64_t v147 = (*(void *)&v145 - 1) & v136;
          }
          v148 = *(void ***)(*(void *)(v131 + 72) + 8 * v147);
          if (!v148 || (v149 = *v148) == 0)
          {
LABEL_260:
            v153 = (std::__shared_weak_count *)operator new(0x50uLL);
            v153->__shared_owners_ = 0;
            v153->__shared_weak_owners_ = 0;
            v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5809C0;
            md::TransitNodeFeature::TransitNodeFeature((md::TransitNodeFeature *)&v153[1], v136, *(md::LabelExternalObjectsModerator **)(v131 + 24));
            v300 = &v153[1].__vftable;
            v301 = v153;
            __p = *(void **)(*(void *)(*v132 + 8) + 40);
            uint64_t v154 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v131 + 32, (unint64_t)__p, (uint64_t *)&__p);
            atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
            BOOL v155 = (std::__shared_weak_count *)v154[4];
            v154[3] = v153 + 1;
            v154[4] = v153;
            if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
            goto LABEL_279;
          }
          if (v146.u32[0] < 2uLL)
          {
            uint64_t v150 = *(void *)&v145 - 1;
            while (1)
            {
              uint64_t v152 = v149[1];
              if (v152 == v136)
              {
                if (v149[2] == v136) {
                  goto LABEL_266;
                }
              }
              else if ((v152 & v150) != v147)
              {
                goto LABEL_260;
              }
              v149 = (void *)*v149;
              if (!v149) {
                goto LABEL_260;
              }
            }
          }
          while (1)
          {
            unint64_t v151 = v149[1];
            if (v151 == v136)
            {
              if (v149[2] == v136)
              {
LABEL_266:
                v159 = (void *)v149[3];
                v158 = (std::__shared_weak_count *)v149[4];
                if (v158)
                {
                  atomic_fetch_add_explicit(&v158->__shared_owners_, 1uLL, memory_order_relaxed);
                  unint64_t v136 = *(void *)(*(void *)(*v132 + 8) + 40);
                }
                v300 = v159;
                v301 = v158;
                __p = (void *)v136;
                unint64_t v160 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v131 + 32, v136, (uint64_t *)&__p);
                if (v158) {
                  atomic_fetch_add_explicit(&v158->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                double v161 = (std::__shared_weak_count *)v160[4];
                v160[3] = v159;
                v160[4] = v158;
                if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                  std::__shared_weak_count::__release_weak(v161);
                }
                std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (void *)(v131 + 72), v149);
                BOOL v162 = __p;
                __p = 0;
                if (v162)
                {
                  if ((_BYTE)v295)
                  {
                    unsigned int v163 = (std::__shared_weak_count *)v162[4];
                    if (v163)
                    {
                      if (!atomic_fetch_add(&v163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                        std::__shared_weak_count::__release_weak(v163);
                      }
                    }
                  }
                  operator delete(v162);
                }
                goto LABEL_279;
              }
            }
            else
            {
              if (v151 >= *(void *)&v145) {
                v151 %= *(void *)&v145;
              }
              if (v151 != v147) {
                goto LABEL_260;
              }
            }
            v149 = (void *)*v149;
            if (!v149) {
              goto LABEL_260;
            }
          }
        }
        if (v138.u32[0] < 2uLL)
        {
          uint64_t v142 = *(void *)&v137 - 1;
          while (1)
          {
            uint64_t v144 = v141[1];
            if (v144 == v136)
            {
              if (v141[2] == v136) {
                goto LABEL_263;
              }
            }
            else if ((v144 & v142) != v139)
            {
              goto LABEL_240;
            }
            v141 = (void *)*v141;
            if (!v141) {
              goto LABEL_240;
            }
          }
        }
        while (1)
        {
          unint64_t v143 = v141[1];
          if (v143 == v136)
          {
            if (v141[2] == v136)
            {
LABEL_263:
              unint64_t v157 = (void *)v141[3];
              v156 = (std::__shared_weak_count *)v141[4];
              if (v156) {
                atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v300 = v157;
              v301 = v156;
LABEL_279:
              int v164 = v300;
              int v166 = (char *)v300[5];
              unint64_t v165 = v300[6];
              if ((unint64_t)v166 < v165)
              {
                *(void *)int v166 = *v132;
                uint64_t v167 = v132[1];
                *((void *)v166 + 1) = v167;
                if (v167) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v167 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v168 = (uint64_t *)(v166 + 16);
                goto LABEL_303;
              }
              uint64_t v169 = (char *)v300[4];
              uint64_t v170 = (v166 - v169) >> 4;
              unint64_t v171 = v170 + 1;
              if ((unint64_t)(v170 + 1) >> 60) {
                abort();
              }
              uint64_t v172 = v165 - (void)v169;
              if (v172 >> 3 > v171) {
                unint64_t v171 = v172 >> 3;
              }
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v173 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v173 = v171;
              }
              if (v173 >> 60) {
                goto LABEL_503;
              }
              uint64_t v174 = (char *)operator new(16 * v173);
              uint64_t v175 = &v174[16 * v170];
              long long v176 = *(_OWORD *)v132;
              *(_OWORD *)uint64_t v175 = *(_OWORD *)v132;
              if (*((void *)&v176 + 1))
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v176 + 1) + 8), 1uLL, memory_order_relaxed);
                uint64_t v169 = (char *)v164[4];
                int v166 = (char *)v164[5];
              }
              uint64_t v177 = &v174[16 * v173];
              uint64_t v168 = (uint64_t *)(v175 + 16);
              if (v166 == v169)
              {
                v164[4] = v175;
                v164[5] = v168;
                v164[6] = v177;
              }
              else
              {
                do
                {
                  long long v178 = *((_OWORD *)v166 - 1);
                  v166 -= 16;
                  *((_OWORD *)v175 - 1) = v178;
                  v175 -= 16;
                  *(void *)int v166 = 0;
                  *((void *)v166 + 1) = 0;
                }
                while (v166 != v169);
                uint64_t v169 = (char *)v164[4];
                int v179 = (char *)v164[5];
                v164[4] = v175;
                v164[5] = v168;
                v164[6] = v177;
                while (v179 != v169)
                {
                  uint64_t v180 = (std::__shared_weak_count *)*((void *)v179 - 1);
                  if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
                  v179 -= 16;
                }
              }
              if (v169) {
                operator delete(v169);
              }
LABEL_303:
              uint64_t v181 = (uint64_t *)v164[4];
              unint64_t v182 = 126 - 2 * __clz(((char *)v168 - (char *)v181) >> 4);
              v164[5] = v168;
              if (v168 == v181) {
                uint64_t v183 = 0;
              }
              else {
                uint64_t v183 = v182;
              }
              std::__introsort<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*,false>(v181, v168, v183, 1);
              uint64_t v184 = v164[5];
              uint64_t v185 = *(void *)(v184 - 16);
              if (v185 == *v132)
              {
                if (v164[4] == v184) {
                  unsigned __int8 v187 = 5;
                }
                else {
                  unsigned __int8 v187 = *(unsigned char *)(v185 + 61);
                }
                atomic_store(v187, (unsigned __int8 *)(v164[2] + 25));
                atomic_store(v164[4] != v164[5], (unsigned __int8 *)(v164[2] + 24));
                v186 = v301;
                if (v301) {
                  goto LABEL_313;
                }
              }
              else
              {
                v186 = v301;
                if (!v301) {
                  goto LABEL_219;
                }
LABEL_313:
                if (!atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                  std::__shared_weak_count::__release_weak(v186);
                }
              }
LABEL_219:
              v132 += 2;
              if (v132 == v133) {
                break;
              }
              goto LABEL_220;
            }
          }
          else
          {
            if (v143 >= *(void *)&v137) {
              v143 %= *(void *)&v137;
            }
            if (v143 != v139) {
              goto LABEL_240;
            }
          }
          v141 = (void *)*v141;
          if (!v141) {
            goto LABEL_240;
          }
        }
      }
    }
LABEL_315:
    uint64_t v188 = v284;
    v189 = (void *)v284[1];
    if (v189)
    {
      do
      {
        v190 = v189;
        v189 = (void *)*v189;
      }
      while (v189);
    }
    else
    {
      do
      {
        v190 = (void *)v188[2];
        BOOL v21 = *v190 == (void)v188;
        uint64_t v188 = v190;
      }
      while (!v21);
    }
    unint64_t v13 = v190;
    if (v190 != v283) {
      continue;
    }
    break;
  }
LABEL_321:
  uint64_t v191 = (void *)*((void *)v286 + 56);
  v288 = (void *)((char *)v286 + 456);
  if (v191 != (void *)((char *)v286 + 456))
  {
    while (1)
    {
      v192 = (void *)*v282;
      uint64_t v193 = v191[4];
      if (*v282)
      {
        unsigned int v194 = *(unsigned __int8 *)(v193 + 16);
        unsigned int v195 = *(unsigned __int16 *)(v193 + 24);
        while (1)
        {
          uint64_t v196 = v192[4];
          unsigned int v197 = *(unsigned __int8 *)(v196 + 16);
          unsigned int v198 = *(unsigned __int16 *)(v196 + 24);
          if (v194 != v197 || v195 != v198) {
            break;
          }
          if (*(void *)(v193 + 96) != *(void *)(v196 + 96)) {
            goto LABEL_339;
          }
          __int16 v200 = *(const void **)(v193 + 32);
          size_t v201 = *(void *)(v193 + 40) - (void)v200;
          v202 = *(const void **)(v196 + 32);
          if (v201 != *(void *)(v196 + 40) - (void)v202 || memcmp(v200, v202, v201)) {
            goto LABEL_339;
          }
          unsigned int v198 = v195;
          if (*(void *)(v193 + 136) >= *(void *)(v196 + 136))
          {
LABEL_343:
            if (v197 == *(unsigned __int8 *)(v193 + 16)
              && v198 == *(unsigned __int16 *)(v193 + 24)
              && *(void *)(v196 + 96) == *(void *)(v193 + 96)
              && (v206 = *(const void **)(v196 + 32),
                  size_t v207 = *(void *)(v196 + 40) - (void)v206,
                  v208 = *(const void **)(v193 + 32),
                  v207 == *(void *)(v193 + 40) - (void)v208)
              && !memcmp(v206, v208, v207))
            {
              if (*(void *)(v196 + 136) >= *(void *)(v193 + 136)) {
                goto LABEL_489;
              }
            }
            else
            {
              unsigned int v209 = *(unsigned __int16 *)(v193 + 24);
              if (v198 == v209)
              {
                if (*(void *)(v196 + 96) == *(void *)(v193 + 96)
                  && (v210 = *(const void **)(v196 + 32),
                      size_t v211 = *(void *)(v196 + 40) - (void)v210,
                      v212 = *(const void **)(v193 + 32),
                      v211 == *(void *)(v193 + 40) - (void)v212)
                  && !memcmp(v210, v212, v211))
                {
                  if (v197 >= *(unsigned __int8 *)(v193 + 16)) {
                    goto LABEL_489;
                  }
                }
                else if (!gdc::GenericKey::operator<(*(void *)(v196 + 32), *(void *)(v196 + 40), *(void *)(v193 + 32), *(void *)(v193 + 40)))
                {
                  goto LABEL_489;
                }
              }
              else if (v198 >= v209)
              {
                goto LABEL_489;
              }
            }
            ++v192;
          }
LABEL_328:
          v192 = (void *)*v192;
          if (!v192) {
            goto LABEL_362;
          }
        }
        if (v195 != v198)
        {
          if (v195 >= v198) {
            goto LABEL_343;
          }
          goto LABEL_328;
        }
LABEL_339:
        if (*(void *)(v193 + 96) == *(void *)(v196 + 96)
          && (char v203 = *(const void **)(v193 + 32),
              size_t v204 = *(void *)(v193 + 40) - (void)v203,
              v205 = *(const void **)(v196 + 32),
              v204 == *(void *)(v196 + 40) - (void)v205)
          && !memcmp(v203, v205, v204))
        {
          unsigned int v198 = v195;
          if (v194 >= v197) {
            goto LABEL_343;
          }
        }
        else
        {
          unsigned int v198 = v195;
          if (!gdc::GenericKey::operator<(*(void *)(v193 + 32), *(void *)(v193 + 40), *(void *)(v196 + 32), *(void *)(v196 + 40)))goto LABEL_343; {
        }
          }
        goto LABEL_328;
      }
LABEL_362:
      __p = 0;
      uint64_t v294 = 0;
      {
        operator new();
      }
      uint64_t v295 = mdm::Allocator::instance(void)::alloc;
      v296 = 0;
      {
        operator new();
      }
      uint64_t v213 = mdm::Allocator::instance(void)::alloc;
      uint64_t v297 = mdm::Allocator::instance(void)::alloc;
      uint64_t v298 = 0;
      int v299 = 1065353216;
      md::TransitTileData::setSelectedLines(v193, &__p);
      v214 = v296;
      if (v296)
      {
        do
        {
          v215 = (void *)*v214;
          (*(void (**)(uint64_t))(*(void *)v213 + 40))(v213);
          v214 = v215;
        }
        while (v215);
      }
      if (__p) {
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v295 + 40))(v295, __p, 8 * v294);
      }
      {
        operator new();
      }
      {
        operator new();
      }
      md::TransitTileData::setSelectedNodes(*(uint64_t **)(v193 + 968), *(uint64_t **)(v193 + 976), 0, 0);
      uint64_t v216 = *(void *)(v193 + 784);
      *(unsigned char *)(v193 + 1371) = 0;
      if (v216)
      {
        uint64_t v217 = *(void *)(v193 + 888);
        for (uint64_t j = *(void *)(v193 + 896); v217 != j; v217 += 248)
        {
          uint64_t v219 = *(void *)(v217 + 24);
          atomic_store(0, (unsigned __int8 *)(v219 + 104));
          atomic_store(0, (unsigned __int8 *)(v219 + 105));
        }
      }
      v220 = *(void **)(*((void *)v286 + 47) + 80);
      signed int v221 = *(_DWORD *)(v193 + 172);
      signed int v222 = *(_DWORD *)(v193 + 176);
      __p = (void *)__PAIR64__(v221, v222);
      unsigned int v223 = *(unsigned __int8 *)(v193 + 169);
      LODWORD(v294) = v223;
      int v224 = 1 << v223;
      if (v222 < 0) {
        break;
      }
      BOOL v40 = __OFSUB__(v222, v224);
      int v225 = v222 - v224;
      if (v225 < 0 == v40)
      {
        signed int v222 = v225;
LABEL_377:
        LODWORD(__p) = v222;
      }
      v226 = (_DWORD *)v220[1];
      if (v226)
      {
        v227 = v220 + 1;
        do
        {
          int v231 = v226[8];
          BOOL v232 = v231 < v222;
          if (v231 == v222 && (v233 = v226[9], BOOL v232 = v233 < v221, v233 == v221)) {
            BOOL v228 = v226[10] < v223;
          }
          else {
            BOOL v228 = v232;
          }
          BOOL v229 = !v228;
          if (v228) {
            v230 = v226 + 2;
          }
          else {
            v230 = v226;
          }
          if (v229) {
            v227 = v226;
          }
          v226 = (_DWORD *)*v230;
        }
        while (*v230);
        if (v227 != v220 + 1)
        {
          int v234 = *((_DWORD *)v227 + 8);
          BOOL v235 = v222 < v234;
          if (v222 == v234 && (v236 = *((_DWORD *)v227 + 9), BOOL v235 = v221 < v236, v221 == v236))
          {
            if (*((_DWORD *)v227 + 10) <= v223) {
              goto LABEL_399;
            }
          }
          else if (!v235)
          {
LABEL_399:
            v238 = (char *)v227[7];
            v237 = (char *)v227[8];
            v239 = v238;
            if (v238 != v237)
            {
              while (*(void *)v239 != v193)
              {
                v239 += 8;
                if (v239 == v237)
                {
                  v239 = (char *)v227[8];
                  break;
                }
              }
            }
            if (v239 != v237)
            {
              v240 = v239 + 8;
              if (v239 + 8 != v237)
              {
                do
                {
                  if (*(void *)v240 != v193)
                  {
                    *(void *)v239 = *(void *)v240;
                    v239 += 8;
                  }
                  v240 += 8;
                }
                while (v240 != v237);
                v238 = (char *)v227[7];
                v237 = (char *)v227[8];
              }
            }
            v241 = v239;
            int64_t v242 = v237 - (v239 + 8);
            if (v237 != v239 + 8)
            {
              memmove(v239, v239 + 8, v237 - (v239 + 8));
              v238 = (char *)v227[7];
            }
            v227[8] = (char *)v241 + v242;
            if (v238 == (char *)v241 + v242)
            {
              md::TransitInterTileMediator::updateTileInfos((uint64_t)v220, (int *)&__p, (uint64_t)(v227 + 6));
              v243 = (void *)v227[1];
              v244 = v227;
              if (v243)
              {
                do
                {
                  v245 = v243;
                  v243 = (void *)*v243;
                }
                while (v243);
              }
              else
              {
                do
                {
                  v245 = (void *)v244[2];
                  BOOL v21 = *v245 == (void)v244;
                  v244 = v245;
                }
                while (!v21);
              }
              if ((void *)*v220 == v227) {
                void *v220 = v245;
              }
              v246 = (uint64_t *)v220[1];
              --v220[2];
              std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v246, v227);
              v247 = (void *)v227[7];
              if (v247)
              {
                v227[8] = v247;
                operator delete(v247);
              }
              operator delete(v227);
            }
          }
        }
      }
      v248 = *(int8x8_t **)(*((void *)v286 + 47) + 96);
      if (!v248) {
        goto LABEL_489;
      }
      *(void *)(v193 + 1224) = 0;
      v249 = *(uint64_t **)(v193 + 944);
      v250 = *(uint64_t **)(v193 + 952);
      if (v249 == v250) {
        goto LABEL_489;
      }
      k = v248 + 4;
      while (2)
      {
        uint64_t v252 = *v249;
        *(unsigned char *)(*v249 + 64) = 0;
        int8x8_t v253 = v248[5];
        if (!*(void *)&v253) {
          goto LABEL_427;
        }
        unint64_t v254 = *(void *)(*(void *)(v252 + 8) + 40);
        uint8x8_t v255 = (uint8x8_t)vcnt_s8(v253);
        v255.i16[0] = vaddlv_u8(v255);
        if (v255.u32[0] > 1uLL)
        {
          unint64_t v256 = *(void *)(*(void *)(v252 + 8) + 40);
          if (v254 >= *(void *)&v253) {
            unint64_t v256 = v254 % *(void *)&v253;
          }
        }
        else
        {
          unint64_t v256 = (*(void *)&v253 - 1) & v254;
        }
        v257 = *(void ***)(*(void *)k + 8 * v256);
        if (!v257) {
          goto LABEL_427;
        }
        v258 = *v257;
        if (!*v257) {
          goto LABEL_427;
        }
        if (v255.u32[0] < 2uLL)
        {
          uint64_t v259 = *(void *)&v253 - 1;
          while (1)
          {
            uint64_t v261 = v258[1];
            if (v261 == v254)
            {
              if (v258[2] == v254) {
                goto LABEL_449;
              }
            }
            else if ((v261 & v259) != v256)
            {
              goto LABEL_427;
            }
            v258 = (void *)*v258;
            if (!v258) {
              goto LABEL_427;
            }
          }
        }
        while (1)
        {
          unint64_t v260 = v258[1];
          if (v260 == v254) {
            break;
          }
          if (v260 >= *(void *)&v253) {
            v260 %= *(void *)&v253;
          }
          if (v260 != v256) {
            goto LABEL_427;
          }
LABEL_438:
          v258 = (void *)*v258;
          if (!v258) {
            goto LABEL_427;
          }
        }
        if (v258[2] != v254) {
          goto LABEL_438;
        }
LABEL_449:
        v292 = (void *)v258[3];
        v262 = (uint64_t *)v292[5];
        v263 = v262;
        if ((uint64_t *)v292[4] != v262)
        {
          v263 = (uint64_t *)v292[4];
          while (*v263 != v252)
          {
            v263 += 2;
            if (v263 == v262)
            {
              v263 = (uint64_t *)v292[5];
              break;
            }
          }
        }
        v290 = (std::mutex *)*(v262 - 2);
        if (v263 == v262 || (v264 = v263 + 2, v263 + 2 == v262))
        {
          if (v263 != v262) {
            goto LABEL_457;
          }
LABEL_465:
          k = v248 + 4;
        }
        else
        {
          do
          {
            uint64_t v266 = *v264;
            if (*v264 != *v249)
            {
              uint64_t v267 = v264[1];
              uint64_t *v264 = 0;
              v264[1] = 0;
              v268 = (std::__shared_weak_count *)v263[1];
              uint64_t *v263 = v266;
              v263[1] = v267;
              if (v268 && !atomic_fetch_add(&v268->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                std::__shared_weak_count::__release_weak(v268);
              }
              v263 += 2;
            }
            v264 += 2;
          }
          while (v264 != v262);
          v262 = (uint64_t *)v292[5];
          if (v263 == v262) {
            goto LABEL_465;
          }
LABEL_457:
          v265 = v263;
          for (k = v248 + 4; v262 != v265; v262 -= 2)
          {
            v270 = (std::__shared_weak_count *)*(v262 - 1);
            if (v270 && !atomic_fetch_add(&v270->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
              std::__shared_weak_count::__release_weak(v270);
            }
          }
          v292[5] = v265;
          v262 = v265;
        }
        if (v290 == (std::mutex *)v252)
        {
          if ((uint64_t *)v292[4] == v262) {
            unsigned __int8 v269 = 5;
          }
          else {
            unsigned __int8 v269 = *(unsigned char *)(*(v262 - 2) + 61);
          }
          v271 = v292;
          atomic_store(v269, (unsigned __int8 *)(v292[2] + 25));
          atomic_store(v271[4] != v271[5], (unsigned __int8 *)(v271[2] + 24));
        }
        v272 = (void *)v258[3];
        if (v272[5] == v272[4])
        {
          if ((*(unsigned int (**)(void *))(*v272 + 16))(v272))
          {
            __p = *(void **)(*(void *)(*v249 + 8) + 40);
            v273 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)&v248[9], (unint64_t)__p, (uint64_t *)&__p);
            uint64_t v275 = v258[3];
            uint64_t v274 = v258[4];
            if (v274) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v274 + 8), 1uLL, memory_order_relaxed);
            }
            v276 = (std::__shared_weak_count *)v273[4];
            v273[3] = v275;
            v273[4] = v274;
            if (v276 && !atomic_fetch_add(&v276->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
              std::__shared_weak_count::__release_weak(v276);
            }
          }
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, k, v258);
          v277 = __p;
          __p = 0;
          if (v277)
          {
            if ((_BYTE)v295)
            {
              v278 = (std::__shared_weak_count *)v277[4];
              if (v278)
              {
                if (!atomic_fetch_add(&v278->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                  std::__shared_weak_count::__release_weak(v278);
                }
              }
            }
            operator delete(v277);
          }
        }
LABEL_427:
        v249 += 2;
        if (v249 != v250) {
          continue;
        }
        break;
      }
LABEL_489:
      v279 = (void *)v191[1];
      if (v279)
      {
        do
        {
          v280 = v279;
          v279 = (void *)*v279;
        }
        while (v279);
      }
      else
      {
        do
        {
          v280 = (void *)v191[2];
          BOOL v21 = *v280 == (void)v191;
          uint64_t v191 = v280;
        }
        while (!v21);
      }
      uint64_t v191 = v280;
      if (v280 == v288) {
        goto LABEL_322;
      }
    }
    v222 += v224;
    goto LABEL_377;
  }
LABEL_322:
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)v286 + 54));
  *((void *)v286 + 54) = 0;
  *((void *)v286 + 55) = 0;
  *((void *)v286 + 53) = v283;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)v286 + 57));
  *((void *)v286 + 57) = 0;
  *((void *)v286 + 58) = 0;
  *((void *)v286 + 56) = v288;
}

void sub_1A25BEDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16, long long a17, char a18)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v18 - 104);
  _Unwind_Resume(a1);
}

void md::TransitRenderLayer::appendTransitLineCommandsToBuffer(md::TransitRenderLayer *this, ggl::CommandBuffer *a2, ggl::CommandBuffer *a3, const md::LayoutContext *a4)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  long long v5 = (void *)*((void *)this + 47);
  if (*((unsigned char *)this + 419))
  {
    if (*((unsigned char *)this + 360))
    {
      uint64_t v150 = v5[6];
      if (!*((unsigned char *)this + 421))
      {
        uint64_t v149 = v5[5];
        goto LABEL_11;
      }
      goto LABEL_8;
    }
    uint64_t v150 = v5[2];
    if (*((unsigned char *)this + 421))
    {
LABEL_8:
      uint64_t v149 = 0;
      goto LABEL_11;
    }
    uint64_t v149 = v5[3];
  }
  else
  {
    uint64_t v149 = 0;
    if (*((unsigned char *)this + 360)) {
      uint64_t v6 = v5[4];
    }
    else {
      uint64_t v6 = v5[1];
    }
    uint64_t v150 = v6;
  }
LABEL_11:
  unint64_t v7 = *((void *)a4 + 1);
  if ((v7 & (v7 - 1)) != 0)
  {
    unint64_t v9 = 0xA60DDA5A69582425;
    if (v7 <= 0xA60DDA5A69582425) {
      unint64_t v9 = 0xA60DDA5A69582425 % v7;
    }
    uint64_t v8 = *(void **)(*(void *)a4 + 8 * v9);
    do
    {
      do
        uint64_t v8 = (void *)*v8;
      while (v8[1] != 0xA60DDA5A69582425);
    }
    while (v8[2] != 0xA60DDA5A69582425);
  }
  else
  {
    uint64_t v8 = *(void **)(*(void *)a4 + 8 * ((v7 - 1) & 0xA60DDA5A69582425));
    do
    {
      do
        uint64_t v8 = (void *)*v8;
      while (v8[1] != 0xA60DDA5A69582425);
    }
    while (v8[2] != 0xA60DDA5A69582425);
  }
  id v10 = **(id **)(v8[5] + 32);
  unsigned int v11 = *(_DWORD *)[v10 highInflationAlphaAtlas];
  uint64_t v12 = +[VKDebugSettings sharedSettings];
  [v12 ribbonCrispness];
  float v14 = v13;

  uint64_t v16 = *((void *)this + 34);
  uint64_t v148 = *((void *)this + 35);
  if (v16 != v148)
  {
    v15.n128_f32[0] = (float)v11;
    float v17 = v14 * (float)v11;
    while (1)
    {
      uint64_t v152 = v16;
      uint64_t v19 = *(void *)(*(void *)v16 + 384);
      uint64_t v20 = 64;
      if (!*((unsigned char *)this + 418)) {
        uint64_t v20 = 68;
      }
      int v153 = *(unsigned __int8 *)(v19 + 169);
      uint64_t v21 = (*(_DWORD *)(*((void *)this + 47) + v20) + v153);
      uint64_t v22 = *(void **)(v19 + 1064);
      uint64_t v155 = v21;
      if (v22 || *(void *)(v19 + 1072))
      {
        size_t v23 = *(void **)(v19 + 1128);
        unint64_t v24 = v23[1];
        *(float *)(v23[9] + 16) = v17;
        if (v23[8] > v24) {
          unint64_t v24 = v23[8];
        }
        v23[7] = 0;
        v23[8] = v24;
        uint64_t v25 = *(void **)(v19 + 1144);
        unint64_t v26 = v25[1];
        *(float *)(v25[9] + 16) = v17;
        if (v25[8] > v26) {
          unint64_t v26 = v25[8];
        }
        v25[7] = 0;
        v25[8] = v26;
        if (v22)
        {
          uint8x8_t v27 = (void *)v22[1];
          unint64_t v28 = (void *)v22[2];
          if (v27 == v28)
          {
            size_t v29 = (void *)v22[1];
          }
          else
          {
            do
            {
              unsigned int v31 = (void *)*v27;
              uint64_t v32 = *(void *)(*v27 + 560);
              uint64_t v33 = *(void *)(*v27 + 552);
              if (v32 != v33)
              {
                uint64_t v34 = *(void *)(*v27 + 560);
                do
                {
                  signed int v36 = *(void **)(v34 - 24);
                  v34 -= 24;
                  uint64_t v35 = v36;
                  if (v36)
                  {
                    *(void *)(v32 - 16) = v35;
                    operator delete(v35);
                  }
                  uint64_t v32 = v34;
                }
                while (v34 != v33);
              }
              v31[70] = v33;
              v31[67] = v31[66];
              signed int v37 = (void *)v31[76];
              if (v37)
              {
                do
                {
                  if (v37[1])
                  {
                    unint64_t v38 = 0;
                    int v39 = v37 + 2;
                    BOOL v40 = v37 + 2;
                    int v41 = (void (***)(void))(v37 + 2);
                    do
                    {
                      uint64_t v42 = (void (**)(void *))*v41;
                      v41 += 15;
                      (*v42)(v40);
                      ++v38;
                      v39 += 15;
                      BOOL v40 = v41;
                    }
                    while (v38 < v37[1]);
                  }
                  v37[1] = 0;
                  signed int v37 = (void *)*v37;
                }
                while (v37);
                uint64_t v30 = v31[76];
              }
              else
              {
                uint64_t v30 = 0;
              }
              v31[77] = v30;
              ++v27;
            }
            while (v27 != v28);
            size_t v29 = (void *)v22[1];
            uint8x8_t v27 = (void *)v22[2];
            uint64_t v21 = v155;
          }
          v22[7] = v150;
          v22[8] = v150;
          v22[9] = v149;
          v22[10] = v149;
          md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator()((uint64_t)a2, 3, v29, v27, v21, v15);
          if (v149) {
            md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator()((uint64_t)a2, 12, (void *)v22[1], (void *)v22[2], v21, v15);
          }
        }
      }
      double v43 = *(void **)(v19 + 1072);
      if (v43)
      {
        uint64_t v44 = v43[1];
        uint64_t v45 = v43[2];
        while (v44 != v45)
        {
          unsigned int v47 = *(void **)v44;
          uint64_t v48 = *(void *)(*(void *)v44 + 560);
          uint64_t v49 = *(void *)(*(void *)v44 + 552);
          if (v48 != v49)
          {
            uint64_t v50 = *(void *)(*(void *)v44 + 560);
            do
            {
              unint64_t v52 = *(void **)(v50 - 24);
              v50 -= 24;
              char v51 = v52;
              if (v52)
              {
                *(void *)(v48 - 16) = v51;
                operator delete(v51);
              }
              uint64_t v48 = v50;
            }
            while (v50 != v49);
          }
          v47[70] = v49;
          v47[67] = v47[66];
          uint64_t v53 = (void *)v47[76];
          if (v53)
          {
            do
            {
              if (v53[1])
              {
                unint64_t v54 = 0;
                BOOL v55 = v53 + 2;
                uint64_t v56 = v53 + 2;
                unint64_t v57 = (void (***)(void))(v53 + 2);
                do
                {
                  uint64_t v58 = (void (**)(void *))*v57;
                  v57 += 15;
                  (*v58)(v56);
                  ++v54;
                  v55 += 15;
                  uint64_t v56 = v57;
                }
                while (v54 < v53[1]);
              }
              v53[1] = 0;
              uint64_t v53 = (void *)*v53;
            }
            while (v53);
            uint64_t v46 = v47[76];
          }
          else
          {
            uint64_t v46 = 0;
          }
          v47[77] = v46;
          v44 += 8;
        }
        v43[7] = v150;
        v43[8] = v150;
        v43[9] = v149;
        v43[10] = v149;
        if (a3)
        {
          unsigned int v59 = *(_DWORD *)(*((void *)this + 47) + 72) + v153;
          md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator()((uint64_t)a3, 3, (void *)v43[1], (void *)v43[2], v59, v15);
          uint64_t v21 = v155;
          if (v149) {
            md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator()((uint64_t)a3, 12, (void *)v43[1], (void *)v43[2], v59, v15);
          }
        }
        else
        {
          uint64_t v21 = v155;
          md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator()((uint64_t)a2, 3, (void *)v43[1], (void *)v43[2], v155, v15);
          if (v149) {
            md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator()((uint64_t)a2, 12, (void *)v43[1], (void *)v43[2], v155, v15);
          }
        }
      }
      float v60 = *(void **)(v19 + 1216);
      if (v60) {
        break;
      }
LABEL_25:
      uint64_t v16 = v152 + 8;
      if (v152 + 8 == v148) {
        return;
      }
    }
    v60[7] = v150;
    v60[8] = v150;
    uint64_t v18 = (void (**)(void *))&unk_1EF574280;
    v166[0] = &unk_1EF574280;
    v166[1] = v21;
    v166[2] = a2;
    uint64_t v167 = v166;
    uint64_t v61 = (void *)v60[1];
    uint64_t v154 = (void *)v60[2];
    if (v61 == v154) {
      goto LABEL_24;
    }
    while (1)
    {
      uint64_t v62 = *v61;
      uint64_t v63 = (uint64_t)v167;
      if (!v167) {
        goto LABEL_84;
      }
      if (v167 != v166) {
        break;
      }
      uint64_t v169 = v168;
      (*(void (**)(void *, void *))(v166[0] + 24))(v166, v168);
LABEL_86:
      if (*(unsigned char *)(v62 + 400))
      {
        v156 = v61;
        uint64_t v65 = *(void *)(v62 + 296);
        uint64_t v64 = *(void *)(v62 + 304);
        if (v64 != v65)
        {
          uint64_t v66 = *(void *)(v62 + 304);
          do
          {
            uint64_t v68 = *(void **)(v66 - 24);
            v66 -= 24;
            long long v67 = v68;
            if (v68)
            {
              *(void *)(v64 - 16) = v67;
              operator delete(v67);
            }
            uint64_t v64 = v66;
          }
          while (v66 != v65);
        }
        *(void *)(v62 + 304) = v65;
        *(void *)(v62 + 280) = *(void *)(v62 + 272);
        uint64_t v69 = *(void **)(v62 + 352);
        if (v69)
        {
          do
          {
            if (v69[1])
            {
              unint64_t v71 = 0;
              uint64_t v72 = v69 + 2;
              int v73 = v69 + 2;
              uint64_t v74 = (void (***)(void))(v69 + 2);
              do
              {
                unint64_t v75 = (void (**)(void *))*v74;
                v74 += 15;
                (*v75)(v73);
                ++v71;
                v72 += 15;
                int v73 = v74;
              }
              while (v71 < v69[1]);
            }
            v69[1] = 0;
            uint64_t v69 = (void *)*v69;
          }
          while (v69);
          uint64_t v70 = *(void *)(v62 + 352);
        }
        else
        {
          uint64_t v70 = 0;
        }
        *(void *)(v62 + 360) = v70;
        uint64_t v76 = (uint64_t)v169;
        if (v169)
        {
          if (v169 != v168)
          {
            uint64_t v76 = (*(uint64_t (**)(void))(*v169 + 16))();
            goto LABEL_103;
          }
          unint64_t v171 = v170;
          (*(void (**)(void *, void *))(v168[0] + 24))(v168, v170);
        }
        else
        {
LABEL_103:
          unint64_t v171 = (void *)v76;
        }
        if (*(unsigned char *)(v62 + 400))
        {
          if (*(unsigned char *)(v62 + 136))
          {
            uint64_t v77 = *(void *)(*(void *)(v62 + 8) + 56);
            *(void *)(v62 + 40) = v77;
            BOOL v78 = *(unsigned __int8 *)(v77 + 58) == 1;
            if (*(unsigned char *)(v62 + 264))
            {
LABEL_108:
              uint64_t v79 = *(void *)(*(void *)(v62 + 8) + 64);
              *(void *)(v62 + 168) = v79;
              if (*(unsigned char *)(v79 + 58) == 1) {
                BOOL v78 = 1;
              }
            }
          }
          else
          {
            BOOL v78 = 0;
            if (*(unsigned char *)(v62 + 264)) {
              goto LABEL_108;
            }
          }
          float v81 = *(uint64_t **)(v62 + 376);
          int8x16_t v80 = *(uint64_t **)(v62 + 384);
          if (v81 != v80)
          {
            uint64_t v82 = 0;
            while (1)
            {
              uint64_t v83 = *v81;
              if (*(unsigned char *)(*v81 + 48))
              {
                if (*(void *)(v83 + 88) != v82)
                {
                  if (v82)
                  {
                    long long v84 = ggl::Batcher::commit((long long **)(v62 + 272), 0xC8u, v15);
                    if (v84[1] != *v84)
                    {
                      char v85 = v84;
                      if (*(unsigned char *)(v62 + 136))
                      {
                        long long v87 = *(_OWORD *)(v62 + 24);
                        long long v86 = *(_OWORD *)(v62 + 40);
                        long long v88 = *(_OWORD *)(v62 + 56);
                        long long v89 = *(_OWORD *)(v62 + 72);
                        long long v90 = *(_OWORD *)(v62 + 88);
                        long long v91 = *(_OWORD *)(v62 + 120);
                        long long v164 = *(_OWORD *)(v62 + 104);
                        long long v165 = v91;
                        v158 = &off_1EF55A458;
                        long long v159 = v87;
                        long long v160 = v86;
                        long long v162 = v89;
                        long long v163 = v90;
                        long long v161 = v88;
                        long long v92 = *(void **)(v62 + 360);
                        uint64_t v93 = v92[1];
                        if (v93 == *(void *)(v62 + 368))
                        {
                          long long v92 = (void *)*v92;
                          if (!v92)
                          {
                            long long v92 = malloc_type_malloc(120 * v93 + 16, 0xB644C221uLL);
                            void *v92 = 0;
                            v92[1] = 0;
                            **(void **)(v62 + 360) = v92;
                          }
                          *(void *)(v62 + 360) = v92;
                          uint64_t v93 = v92[1];
                        }
                        unint64_t v94 = &v92[15 * v93];
                        v92[1] = v93 + 1;
                        v94[2] = &off_1EF55A458;
                        long long v95 = v164;
                        long long v96 = v165;
                        long long v97 = v163;
                        *(_OWORD *)(v94 + 9) = v162;
                        long long v98 = v159;
                        long long v99 = v160;
                        *(_OWORD *)(v94 + 7) = v161;
                        *(_OWORD *)(v94 + 5) = v99;
                        *(_OWORD *)(v94 + 3) = v98;
                        *(_OWORD *)(v94 + 15) = v96;
                        *(_OWORD *)(v94 + 13) = v95;
                        *(_OWORD *)(v94 + 11) = v97;
                        v94[10] = v82;
                        unint64_t v100 = *v85;
                        v94[13] = *v85;
                        v94[14] = (v85[1] - v100) >> 4;
                        int v157 = 0;
                        v158 = (void (**)(ggl::RenderItem *__hidden))(v94 + 2);
                        if (!v171) {
                          goto LABEL_167;
                        }
                        (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v171 + 48))(v171, &v157, &v158);
                      }
                      if (*(unsigned char *)(v62 + 264))
                      {
                        v158 = &off_1EF55A458;
                        long long v101 = *(_OWORD *)(v62 + 168);
                        long long v159 = *(_OWORD *)(v62 + 152);
                        long long v160 = v101;
                        long long v102 = *(_OWORD *)(v62 + 248);
                        long long v103 = *(_OWORD *)(v62 + 216);
                        long long v164 = *(_OWORD *)(v62 + 232);
                        long long v165 = v102;
                        long long v104 = *(_OWORD *)(v62 + 200);
                        long long v161 = *(_OWORD *)(v62 + 184);
                        long long v162 = v104;
                        long long v163 = v103;
                        unint64_t v105 = *(void **)(v62 + 360);
                        uint64_t v106 = v105[1];
                        if (v106 == *(void *)(v62 + 368))
                        {
                          unint64_t v105 = (void *)*v105;
                          if (!v105)
                          {
                            unint64_t v105 = malloc_type_malloc(120 * v106 + 16, 0xB644C221uLL);
                            *unint64_t v105 = 0;
                            v105[1] = 0;
                            **(void **)(v62 + 360) = v105;
                          }
                          *(void *)(v62 + 360) = v105;
                          uint64_t v106 = v105[1];
                        }
                        float v107 = &v105[15 * v106];
                        v105[1] = v106 + 1;
                        v107[2] = &off_1EF55A458;
                        long long v108 = v164;
                        long long v109 = v165;
                        long long v110 = v163;
                        *(_OWORD *)(v107 + 9) = v162;
                        long long v111 = v159;
                        long long v112 = v160;
                        *(_OWORD *)(v107 + 7) = v161;
                        *(_OWORD *)(v107 + 5) = v112;
                        *(_OWORD *)(v107 + 3) = v111;
                        *(_OWORD *)(v107 + 15) = v109;
                        *(_OWORD *)(v107 + 13) = v108;
                        *(_OWORD *)(v107 + 11) = v110;
                        v107[10] = v82;
                        size_t v113 = *v85;
                        v107[13] = *v85;
                        v107[14] = (v85[1] - v113) >> 4;
                        int v157 = 1;
                        v158 = (void (**)(ggl::RenderItem *__hidden))(v107 + 2);
                        if (!v171) {
                          goto LABEL_167;
                        }
                        (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v171 + 48))(v171, &v157, &v158);
                      }
                    }
                  }
                  uint64_t v83 = *v81;
                  uint64_t v82 = *(void *)(*v81 + 88);
                }
                uint64_t v114 = 16;
                if (v78)
                {
                  uint64_t v114 = 32;
                  uint64_t v115 = v83 + 32;
                }
                else
                {
                  uint64_t v115 = v83 + 16;
                }
                if (*(void *)(v115 + 8) != *(void *)(v83 + v114)) {
                  gm::MultiRange<unsigned long>::push_back((char **)(v62 + 272), (_OWORD *)v115);
                }
              }
              if (++v81 == v80) {
                goto LABEL_140;
              }
            }
          }
          uint64_t v82 = 0;
LABEL_140:
          unsigned int v116 = ggl::Batcher::commit((long long **)(v62 + 272), 0xC8u, v15);
          if (v116[1] != *v116)
          {
            size_t v117 = v116;
            if (*(unsigned char *)(v62 + 136))
            {
              long long v118 = *(_OWORD *)(v62 + 40);
              long long v119 = *(_OWORD *)(v62 + 24);
              long long v120 = *(_OWORD *)(v62 + 56);
              long long v121 = *(_OWORD *)(v62 + 72);
              long long v122 = *(_OWORD *)(v62 + 88);
              long long v123 = *(_OWORD *)(v62 + 120);
              long long v164 = *(_OWORD *)(v62 + 104);
              long long v165 = v123;
              v158 = &off_1EF55A458;
              long long v159 = v119;
              long long v160 = v118;
              long long v162 = v121;
              long long v163 = v122;
              long long v161 = v120;
              size_t v124 = *(void **)(v62 + 360);
              uint64_t v125 = v124[1];
              if (v125 == *(void *)(v62 + 368))
              {
                size_t v124 = (void *)*v124;
                if (!v124)
                {
                  size_t v124 = malloc_type_malloc(120 * v125 + 16, 0xB644C221uLL);
                  *size_t v124 = 0;
                  v124[1] = 0;
                  **(void **)(v62 + 360) = v124;
                }
                *(void *)(v62 + 360) = v124;
                uint64_t v125 = v124[1];
              }
              float v126 = &v124[15 * v125];
              v124[1] = v125 + 1;
              v126[2] = &off_1EF55A458;
              long long v127 = v164;
              long long v128 = v165;
              long long v129 = v163;
              *(_OWORD *)(v126 + 9) = v162;
              long long v130 = v159;
              long long v131 = v160;
              *(_OWORD *)(v126 + 7) = v161;
              *(_OWORD *)(v126 + 5) = v131;
              *(_OWORD *)(v126 + 3) = v130;
              *(_OWORD *)(v126 + 15) = v128;
              *(_OWORD *)(v126 + 13) = v127;
              *(_OWORD *)(v126 + 11) = v129;
              v126[10] = v82;
              float32x4_t v132 = *v117;
              v126[13] = *v117;
              v126[14] = (v117[1] - v132) >> 4;
              int v157 = 0;
              v158 = (void (**)(ggl::RenderItem *__hidden))(v126 + 2);
              if (!v171)
              {
LABEL_167:
                std::__throw_bad_function_call[abi:nn180100]();
                __break(1u);
              }
              (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v171 + 48))(v171, &v157, &v158);
            }
            if (*(unsigned char *)(v62 + 264))
            {
              v158 = &off_1EF55A458;
              long long v133 = *(_OWORD *)(v62 + 168);
              long long v159 = *(_OWORD *)(v62 + 152);
              long long v160 = v133;
              long long v134 = *(_OWORD *)(v62 + 184);
              long long v135 = *(_OWORD *)(v62 + 248);
              long long v136 = *(_OWORD *)(v62 + 216);
              long long v164 = *(_OWORD *)(v62 + 232);
              long long v165 = v135;
              long long v137 = *(_OWORD *)(v62 + 200);
              long long v161 = v134;
              long long v162 = v137;
              long long v163 = v136;
              uint8x8_t v138 = *(void **)(v62 + 360);
              uint64_t v139 = v138[1];
              if (v139 == *(void *)(v62 + 368))
              {
                uint8x8_t v138 = (void *)*v138;
                if (!v138)
                {
                  uint8x8_t v138 = malloc_type_malloc(120 * v139 + 16, 0xB644C221uLL);
                  *uint8x8_t v138 = 0;
                  v138[1] = 0;
                  **(void **)(v62 + 360) = v138;
                }
                *(void *)(v62 + 360) = v138;
                uint64_t v139 = v138[1];
              }
              v140 = &v138[15 * v139];
              v138[1] = v139 + 1;
              v140[2] = &off_1EF55A458;
              long long v141 = v164;
              long long v142 = v165;
              long long v143 = v163;
              *(_OWORD *)(v140 + 9) = v162;
              long long v144 = v159;
              long long v145 = v160;
              *(_OWORD *)(v140 + 7) = v161;
              *(_OWORD *)(v140 + 5) = v145;
              *(_OWORD *)(v140 + 3) = v144;
              *(_OWORD *)(v140 + 15) = v142;
              *(_OWORD *)(v140 + 13) = v141;
              *(_OWORD *)(v140 + 11) = v143;
              v140[10] = v82;
              uint8x8_t v146 = *v117;
              v140[13] = *v117;
              v140[14] = (v117[1] - v146) >> 4;
              int v157 = 1;
              v158 = (void (**)(ggl::RenderItem *__hidden))(v140 + 2);
              if (!v171) {
                goto LABEL_167;
              }
              (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v171 + 48))(v171, &v157, &v158);
            }
          }
        }
        if (v171 == v170)
        {
          (*(void (**)(void *))(v170[0] + 32))(v170);
          uint64_t v61 = v156;
        }
        else
        {
          uint64_t v61 = v156;
          if (v171) {
            (*(void (**)(void))(*v171 + 40))();
          }
        }
      }
      if (v169 == v168)
      {
        (*(void (**)(void *))(v168[0] + 32))(v168);
      }
      else if (v169)
      {
        (*(void (**)(void))(*v169 + 40))();
      }
      if (++v61 == v154)
      {
        if (v167 != v166)
        {
          if (v167) {
            (*(void (**)(void))(*v167 + 40))();
          }
          goto LABEL_25;
        }
        uint64_t v18 = (void (**)(void *))v166[0];
LABEL_24:
        v18[4](v166);
        goto LABEL_25;
      }
    }
    uint64_t v63 = (*(uint64_t (**)(void))(*v167 + 16))();
LABEL_84:
    uint64_t v169 = (void *)v63;
    goto LABEL_86;
  }
}

void sub_1A25BFD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A25BFDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  std::function<void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::~function((void *)(v35 - 144));
  std::function<void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::~function((void *)(v35 - 176));
  std::function<void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::~function(&a35);
  _Unwind_Resume(a1);
}

uint64_t md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator()(uint64_t a1, char a2, void *a3, void *a4, unsigned int a5, __n128 a6)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t (**)(void *))&unk_1EF57E718;
  v150[0] = &unk_1EF57E718;
  v150[1] = a5;
  v150[2] = a1;
  unint64_t v151 = v150;
  if (a3 == a4) {
    return v6[4](v150);
  }
  unint64_t v7 = a3;
  do
  {
    uint64_t v10 = *v7;
    uint64_t v11 = (uint64_t)v151;
    if (!v151) {
      goto LABEL_8;
    }
    if (v151 != v150)
    {
      uint64_t v11 = (*(uint64_t (**)(void *))(*v151 + 16))(v151);
LABEL_8:
      int v153 = (void *)v11;
      goto LABEL_10;
    }
    int v153 = v152;
    (*(void (**)(void *, void *))(v150[0] + 24))(v150, v152);
LABEL_10:
    v140 = v7;
    if (!*(unsigned char *)(v10 + 656)) {
      goto LABEL_106;
    }
    if ((a2 & 1) != 0 && *(unsigned char *)(v10 + 136))
    {
      uint64_t v12 = *(void *)(*(void *)(v10 + 8) + 56);
      *(void *)(v10 + 40) = v12;
      BOOL v13 = *(unsigned __int8 *)(v12 + 58) == 1;
      if ((a2 & 2) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      BOOL v13 = 0;
      if ((a2 & 2) == 0) {
        goto LABEL_19;
      }
    }
    if (*(unsigned char *)(v10 + 264))
    {
      uint64_t v14 = *(void *)(*(void *)(v10 + 8) + 64);
      *(void *)(v10 + 168) = v14;
      if (*(unsigned char *)(v14 + 58) == 1) {
        BOOL v13 = 1;
      }
    }
LABEL_19:
    if ((a2 & 4) != 0)
    {
      if (*(unsigned char *)(v10 + 392))
      {
        uint64_t v15 = *(void *)(*(void *)(v10 + 8) + 72);
        *(void *)(v10 + 296) = v15;
        if (*(unsigned char *)(v15 + 58) == 1) {
          BOOL v13 = 1;
        }
      }
    }
    if ((a2 & 8) != 0)
    {
      if (*(unsigned char *)(v10 + 520))
      {
        uint64_t v16 = *(void *)(*(void *)(v10 + 8) + 80);
        *(void *)(v10 + 424) = v16;
        if (*(unsigned char *)(v16 + 58) == 1) {
          BOOL v13 = 1;
        }
      }
    }
    float v17 = *(uint64_t **)(v10 + 632);
    uint64_t v18 = *(uint64_t **)(v10 + 640);
    if (v17 != v18)
    {
      uint64_t v19 = 0;
      while (1)
      {
        uint64_t v20 = *v17;
        if (*(unsigned char *)(*v17 + 48))
        {
          if (*(void *)(v20 + 88) != v19)
          {
            if (v19)
            {
              uint64_t v21 = ggl::Batcher::commit((long long **)(v10 + 528), 0xC8u, a6);
              if (v21[1] != *v21)
              {
                uint64_t v22 = v21;
                if ((a2 & 1) != 0 && *(unsigned char *)(v10 + 136))
                {
                  long long v24 = *(_OWORD *)(v10 + 24);
                  long long v23 = *(_OWORD *)(v10 + 40);
                  long long v25 = *(_OWORD *)(v10 + 56);
                  long long v26 = *(_OWORD *)(v10 + 72);
                  long long v27 = *(_OWORD *)(v10 + 88);
                  long long v28 = *(_OWORD *)(v10 + 120);
                  long long v148 = *(_OWORD *)(v10 + 104);
                  long long v149 = v28;
                  long long v142 = &off_1EF55A458;
                  long long v143 = v24;
                  long long v144 = v23;
                  long long v146 = v26;
                  long long v147 = v27;
                  long long v145 = v25;
                  size_t v29 = *(void **)(v10 + 616);
                  uint64_t v30 = v29[1];
                  if (v30 == *(void *)(v10 + 624))
                  {
                    size_t v29 = (void *)*v29;
                    if (!v29)
                    {
                      size_t v29 = malloc_type_malloc(120 * v30 + 16, 0xB644C221uLL);
                      void *v29 = 0;
                      v29[1] = 0;
                      **(void **)(v10 + 616) = v29;
                    }
                    *(void *)(v10 + 616) = v29;
                    uint64_t v30 = v29[1];
                  }
                  unsigned int v31 = &v29[15 * v30];
                  v29[1] = v30 + 1;
                  v31[2] = &off_1EF55A458;
                  long long v32 = v148;
                  long long v33 = v149;
                  long long v34 = v147;
                  *(_OWORD *)(v31 + 9) = v146;
                  long long v35 = v143;
                  long long v36 = v144;
                  *(_OWORD *)(v31 + 7) = v145;
                  *(_OWORD *)(v31 + 5) = v36;
                  *(_OWORD *)(v31 + 3) = v35;
                  *(_OWORD *)(v31 + 15) = v33;
                  *(_OWORD *)(v31 + 13) = v32;
                  *(_OWORD *)(v31 + 11) = v34;
                  v31[10] = v19;
                  signed int v37 = *v22;
                  v31[13] = *v22;
                  v31[14] = (v22[1] - v37) >> 4;
                  int v141 = 0;
                  long long v142 = (void (**)(ggl::RenderItem *__hidden))(v31 + 2);
                  if (!v153) {
                    goto LABEL_115;
                  }
                  (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v153 + 48))(v153, &v141, &v142);
                }
                if ((a2 & 2) != 0 && *(unsigned char *)(v10 + 264))
                {
                  long long v142 = &off_1EF55A458;
                  long long v38 = *(_OWORD *)(v10 + 168);
                  long long v143 = *(_OWORD *)(v10 + 152);
                  long long v144 = v38;
                  long long v39 = *(_OWORD *)(v10 + 248);
                  long long v40 = *(_OWORD *)(v10 + 216);
                  long long v148 = *(_OWORD *)(v10 + 232);
                  long long v149 = v39;
                  long long v41 = *(_OWORD *)(v10 + 200);
                  long long v145 = *(_OWORD *)(v10 + 184);
                  long long v146 = v41;
                  long long v147 = v40;
                  uint64_t v42 = *(void **)(v10 + 616);
                  uint64_t v43 = v42[1];
                  if (v43 == *(void *)(v10 + 624))
                  {
                    uint64_t v42 = (void *)*v42;
                    if (!v42)
                    {
                      uint64_t v42 = malloc_type_malloc(120 * v43 + 16, 0xB644C221uLL);
                      void *v42 = 0;
                      v42[1] = 0;
                      **(void **)(v10 + 616) = v42;
                    }
                    *(void *)(v10 + 616) = v42;
                    uint64_t v43 = v42[1];
                  }
                  uint64_t v44 = &v42[15 * v43];
                  v42[1] = v43 + 1;
                  v44[2] = &off_1EF55A458;
                  long long v45 = v148;
                  long long v46 = v149;
                  long long v47 = v147;
                  *(_OWORD *)(v44 + 9) = v146;
                  long long v48 = v143;
                  long long v49 = v144;
                  *(_OWORD *)(v44 + 7) = v145;
                  *(_OWORD *)(v44 + 5) = v49;
                  *(_OWORD *)(v44 + 3) = v48;
                  *(_OWORD *)(v44 + 15) = v46;
                  *(_OWORD *)(v44 + 13) = v45;
                  *(_OWORD *)(v44 + 11) = v47;
                  v44[10] = v19;
                  uint64_t v50 = *v22;
                  v44[13] = *v22;
                  v44[14] = (v22[1] - v50) >> 4;
                  int v141 = 1;
                  long long v142 = (void (**)(ggl::RenderItem *__hidden))(v44 + 2);
                  if (!v153) {
                    goto LABEL_115;
                  }
                  (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v153 + 48))(v153, &v141, &v142);
                }
                if ((a2 & 4) != 0 && *(unsigned char *)(v10 + 392))
                {
                  long long v142 = &off_1EF55A458;
                  long long v51 = *(_OWORD *)(v10 + 296);
                  long long v143 = *(_OWORD *)(v10 + 280);
                  long long v144 = v51;
                  long long v52 = *(_OWORD *)(v10 + 376);
                  long long v53 = *(_OWORD *)(v10 + 344);
                  long long v148 = *(_OWORD *)(v10 + 360);
                  long long v149 = v52;
                  long long v54 = *(_OWORD *)(v10 + 328);
                  long long v145 = *(_OWORD *)(v10 + 312);
                  long long v146 = v54;
                  long long v147 = v53;
                  BOOL v55 = *(void **)(v10 + 616);
                  uint64_t v56 = v55[1];
                  if (v56 == *(void *)(v10 + 624))
                  {
                    BOOL v55 = (void *)*v55;
                    if (!v55)
                    {
                      BOOL v55 = malloc_type_malloc(120 * v56 + 16, 0xB644C221uLL);
                      *BOOL v55 = 0;
                      v55[1] = 0;
                      **(void **)(v10 + 616) = v55;
                    }
                    *(void *)(v10 + 616) = v55;
                    uint64_t v56 = v55[1];
                  }
                  unint64_t v57 = &v55[15 * v56];
                  v55[1] = v56 + 1;
                  v57[2] = &off_1EF55A458;
                  long long v58 = v148;
                  long long v59 = v149;
                  long long v60 = v147;
                  *(_OWORD *)(v57 + 9) = v146;
                  long long v61 = v143;
                  long long v62 = v144;
                  *(_OWORD *)(v57 + 7) = v145;
                  *(_OWORD *)(v57 + 5) = v62;
                  *(_OWORD *)(v57 + 3) = v61;
                  *(_OWORD *)(v57 + 15) = v59;
                  *(_OWORD *)(v57 + 13) = v58;
                  *(_OWORD *)(v57 + 11) = v60;
                  v57[10] = v19;
                  uint64_t v63 = *v22;
                  v57[13] = *v22;
                  v57[14] = (v22[1] - v63) >> 4;
                  int v141 = 2;
                  long long v142 = (void (**)(ggl::RenderItem *__hidden))(v57 + 2);
                  if (!v153) {
                    goto LABEL_115;
                  }
                  (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v153 + 48))(v153, &v141, &v142);
                }
                if ((a2 & 8) != 0 && *(unsigned char *)(v10 + 520))
                {
                  long long v142 = &off_1EF55A458;
                  long long v64 = *(_OWORD *)(v10 + 424);
                  long long v143 = *(_OWORD *)(v10 + 408);
                  long long v144 = v64;
                  long long v65 = *(_OWORD *)(v10 + 504);
                  long long v66 = *(_OWORD *)(v10 + 472);
                  long long v148 = *(_OWORD *)(v10 + 488);
                  long long v149 = v65;
                  long long v67 = *(_OWORD *)(v10 + 456);
                  long long v145 = *(_OWORD *)(v10 + 440);
                  long long v146 = v67;
                  long long v147 = v66;
                  uint64_t v68 = *(void **)(v10 + 616);
                  uint64_t v69 = v68[1];
                  if (v69 == *(void *)(v10 + 624))
                  {
                    uint64_t v68 = (void *)*v68;
                    if (!v68)
                    {
                      uint64_t v68 = malloc_type_malloc(120 * v69 + 16, 0xB644C221uLL);
                      *uint64_t v68 = 0;
                      v68[1] = 0;
                      **(void **)(v10 + 616) = v68;
                    }
                    *(void *)(v10 + 616) = v68;
                    uint64_t v69 = v68[1];
                  }
                  uint64_t v70 = &v68[15 * v69];
                  v68[1] = v69 + 1;
                  v70[2] = &off_1EF55A458;
                  long long v71 = v148;
                  long long v72 = v149;
                  long long v73 = v147;
                  *(_OWORD *)(v70 + 9) = v146;
                  long long v74 = v143;
                  long long v75 = v144;
                  *(_OWORD *)(v70 + 7) = v145;
                  *(_OWORD *)(v70 + 5) = v75;
                  *(_OWORD *)(v70 + 3) = v74;
                  *(_OWORD *)(v70 + 15) = v72;
                  *(_OWORD *)(v70 + 13) = v71;
                  *(_OWORD *)(v70 + 11) = v73;
                  v70[10] = v19;
                  uint64_t v76 = *v22;
                  v70[13] = *v22;
                  v70[14] = (v22[1] - v76) >> 4;
                  int v141 = 3;
                  long long v142 = (void (**)(ggl::RenderItem *__hidden))(v70 + 2);
                  if (!v153) {
                    goto LABEL_115;
                  }
                  (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v153 + 48))(v153, &v141, &v142);
                }
              }
            }
            uint64_t v20 = *v17;
            uint64_t v19 = *(void *)(*v17 + 88);
          }
          uint64_t v77 = 16;
          if (v13)
          {
            uint64_t v77 = 32;
            uint64_t v78 = v20 + 32;
          }
          else
          {
            uint64_t v78 = v20 + 16;
          }
          if (*(void *)(v78 + 8) != *(void *)(v20 + v77)) {
            gm::MultiRange<unsigned long>::push_back((char **)(v10 + 528), (_OWORD *)v78);
          }
        }
        if (++v17 == v18) {
          goto LABEL_73;
        }
      }
    }
    uint64_t v19 = 0;
LABEL_73:
    uint64_t v79 = ggl::Batcher::commit((long long **)(v10 + 528), 0xC8u, a6);
    if (v79[1] != *v79)
    {
      int8x16_t v80 = v79;
      if ((a2 & 1) != 0 && *(unsigned char *)(v10 + 136))
      {
        long long v81 = *(_OWORD *)(v10 + 40);
        long long v82 = *(_OWORD *)(v10 + 24);
        long long v83 = *(_OWORD *)(v10 + 56);
        long long v84 = *(_OWORD *)(v10 + 72);
        long long v85 = *(_OWORD *)(v10 + 88);
        long long v86 = *(_OWORD *)(v10 + 120);
        long long v148 = *(_OWORD *)(v10 + 104);
        long long v149 = v86;
        long long v142 = &off_1EF55A458;
        long long v143 = v82;
        long long v144 = v81;
        long long v146 = v84;
        long long v147 = v85;
        long long v145 = v83;
        long long v87 = *(void **)(v10 + 616);
        uint64_t v88 = v87[1];
        if (v88 == *(void *)(v10 + 624))
        {
          long long v87 = (void *)*v87;
          if (!v87)
          {
            long long v87 = malloc_type_malloc(120 * v88 + 16, 0xB644C221uLL);
            *long long v87 = 0;
            v87[1] = 0;
            **(void **)(v10 + 616) = v87;
          }
          *(void *)(v10 + 616) = v87;
          uint64_t v88 = v87[1];
        }
        long long v89 = &v87[15 * v88];
        v87[1] = v88 + 1;
        v89[2] = &off_1EF55A458;
        long long v90 = v148;
        long long v91 = v149;
        long long v92 = v147;
        *(_OWORD *)(v89 + 9) = v146;
        long long v93 = v143;
        long long v94 = v144;
        *(_OWORD *)(v89 + 7) = v145;
        *(_OWORD *)(v89 + 5) = v94;
        *(_OWORD *)(v89 + 3) = v93;
        *(_OWORD *)(v89 + 15) = v91;
        *(_OWORD *)(v89 + 13) = v90;
        *(_OWORD *)(v89 + 11) = v92;
        v89[10] = v19;
        long long v95 = *v80;
        v89[13] = *v80;
        v89[14] = (v80[1] - v95) >> 4;
        int v141 = 0;
        long long v142 = (void (**)(ggl::RenderItem *__hidden))(v89 + 2);
        if (!v153)
        {
LABEL_115:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
        }
        (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v153 + 48))(v153, &v141, &v142);
      }
      if ((a2 & 2) != 0 && *(unsigned char *)(v10 + 264))
      {
        long long v142 = &off_1EF55A458;
        long long v96 = *(_OWORD *)(v10 + 168);
        long long v143 = *(_OWORD *)(v10 + 152);
        long long v144 = v96;
        long long v97 = *(_OWORD *)(v10 + 184);
        long long v98 = *(_OWORD *)(v10 + 248);
        long long v99 = *(_OWORD *)(v10 + 216);
        long long v148 = *(_OWORD *)(v10 + 232);
        long long v149 = v98;
        long long v100 = *(_OWORD *)(v10 + 200);
        long long v145 = v97;
        long long v146 = v100;
        long long v147 = v99;
        long long v101 = *(void **)(v10 + 616);
        uint64_t v102 = v101[1];
        if (v102 == *(void *)(v10 + 624))
        {
          long long v101 = (void *)*v101;
          if (!v101)
          {
            long long v101 = malloc_type_malloc(120 * v102 + 16, 0xB644C221uLL);
            *long long v101 = 0;
            v101[1] = 0;
            **(void **)(v10 + 616) = v101;
          }
          *(void *)(v10 + 616) = v101;
          uint64_t v102 = v101[1];
        }
        long long v103 = &v101[15 * v102];
        v101[1] = v102 + 1;
        v103[2] = &off_1EF55A458;
        long long v104 = v148;
        long long v105 = v149;
        long long v106 = v147;
        *(_OWORD *)(v103 + 9) = v146;
        long long v107 = v143;
        long long v108 = v144;
        *(_OWORD *)(v103 + 7) = v145;
        *(_OWORD *)(v103 + 5) = v108;
        *(_OWORD *)(v103 + 3) = v107;
        *(_OWORD *)(v103 + 15) = v105;
        *(_OWORD *)(v103 + 13) = v104;
        *(_OWORD *)(v103 + 11) = v106;
        v103[10] = v19;
        long long v109 = *v80;
        v103[13] = *v80;
        v103[14] = (v80[1] - v109) >> 4;
        int v141 = 1;
        long long v142 = (void (**)(ggl::RenderItem *__hidden))(v103 + 2);
        if (!v153) {
          goto LABEL_115;
        }
        (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v153 + 48))(v153, &v141, &v142);
      }
      if ((a2 & 4) != 0 && *(unsigned char *)(v10 + 392))
      {
        long long v142 = &off_1EF55A458;
        long long v110 = *(_OWORD *)(v10 + 296);
        long long v143 = *(_OWORD *)(v10 + 280);
        long long v144 = v110;
        long long v111 = *(_OWORD *)(v10 + 312);
        long long v112 = *(_OWORD *)(v10 + 376);
        long long v113 = *(_OWORD *)(v10 + 344);
        long long v148 = *(_OWORD *)(v10 + 360);
        long long v149 = v112;
        long long v114 = *(_OWORD *)(v10 + 328);
        long long v145 = v111;
        long long v146 = v114;
        long long v147 = v113;
        uint64_t v115 = *(void **)(v10 + 616);
        uint64_t v116 = v115[1];
        if (v116 == *(void *)(v10 + 624))
        {
          uint64_t v115 = (void *)*v115;
          if (!v115)
          {
            uint64_t v115 = malloc_type_malloc(120 * v116 + 16, 0xB644C221uLL);
            *uint64_t v115 = 0;
            v115[1] = 0;
            **(void **)(v10 + 616) = v115;
          }
          *(void *)(v10 + 616) = v115;
          uint64_t v116 = v115[1];
        }
        size_t v117 = &v115[15 * v116];
        v115[1] = v116 + 1;
        v117[2] = &off_1EF55A458;
        long long v118 = v148;
        long long v119 = v149;
        long long v120 = v147;
        *(_OWORD *)(v117 + 9) = v146;
        long long v121 = v143;
        long long v122 = v144;
        *(_OWORD *)(v117 + 7) = v145;
        *(_OWORD *)(v117 + 5) = v122;
        *(_OWORD *)(v117 + 3) = v121;
        *(_OWORD *)(v117 + 15) = v119;
        *(_OWORD *)(v117 + 13) = v118;
        *(_OWORD *)(v117 + 11) = v120;
        v117[10] = v19;
        long long v123 = *v80;
        v117[13] = *v80;
        v117[14] = (v80[1] - v123) >> 4;
        int v141 = 2;
        long long v142 = (void (**)(ggl::RenderItem *__hidden))(v117 + 2);
        if (!v153) {
          goto LABEL_115;
        }
        (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v153 + 48))(v153, &v141, &v142);
      }
      if ((a2 & 8) != 0 && *(unsigned char *)(v10 + 520))
      {
        long long v142 = &off_1EF55A458;
        long long v124 = *(_OWORD *)(v10 + 424);
        long long v143 = *(_OWORD *)(v10 + 408);
        long long v144 = v124;
        long long v125 = *(_OWORD *)(v10 + 440);
        long long v126 = *(_OWORD *)(v10 + 504);
        long long v127 = *(_OWORD *)(v10 + 472);
        long long v148 = *(_OWORD *)(v10 + 488);
        long long v149 = v126;
        long long v128 = *(_OWORD *)(v10 + 456);
        long long v145 = v125;
        long long v146 = v128;
        long long v147 = v127;
        long long v129 = *(void **)(v10 + 616);
        uint64_t v130 = v129[1];
        if (v130 == *(void *)(v10 + 624))
        {
          long long v129 = (void *)*v129;
          if (!v129)
          {
            long long v129 = malloc_type_malloc(120 * v130 + 16, 0xB644C221uLL);
            void *v129 = 0;
            v129[1] = 0;
            **(void **)(v10 + 616) = v129;
          }
          *(void *)(v10 + 616) = v129;
          uint64_t v130 = v129[1];
        }
        long long v131 = &v129[15 * v130];
        v129[1] = v130 + 1;
        v131[2] = &off_1EF55A458;
        long long v132 = v148;
        long long v133 = v149;
        long long v134 = v147;
        *(_OWORD *)(v131 + 9) = v146;
        long long v135 = v143;
        long long v136 = v144;
        *(_OWORD *)(v131 + 7) = v145;
        *(_OWORD *)(v131 + 5) = v136;
        *(_OWORD *)(v131 + 3) = v135;
        *(_OWORD *)(v131 + 15) = v133;
        *(_OWORD *)(v131 + 13) = v132;
        *(_OWORD *)(v131 + 11) = v134;
        v131[10] = v19;
        long long v137 = *v80;
        v131[13] = *v80;
        v131[14] = (v80[1] - v137) >> 4;
        int v141 = 3;
        long long v142 = (void (**)(ggl::RenderItem *__hidden))(v131 + 2);
        if (!v153) {
          goto LABEL_115;
        }
        (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v153 + 48))(v153, &v141, &v142);
      }
    }
LABEL_106:
    if (v153 == v152)
    {
      (*(void (**)(void *))(v152[0] + 32))(v152);
      unint64_t v9 = v140;
    }
    else
    {
      unint64_t v9 = v140;
      if (v153) {
        (*(void (**)(void))(*v153 + 40))();
      }
    }
    unint64_t v7 = v9 + 1;
  }
  while (v7 != a4);
  uint64_t result = (uint64_t)v151;
  if (v151 == v150)
  {
    uint64_t v6 = (uint64_t (**)(void *))v150[0];
    return v6[4](v150);
  }
  if (v151) {
    return (*(uint64_t (**)(void))(*v151 + 40))();
  }
  return result;
}

void sub_1A25C0C38(_Unwind_Exception *a1)
{
  std::function<void ()(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)>::~function((void *)(v1 - 128));
  std::function<void ()(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)>::~function((void *)(v1 - 160));
  _Unwind_Resume(a1);
}

void *std::function<void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1>,void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, int *a2, uint64_t *a3)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *a2;
  uint64_t v6 = *a3;
  BOOL v7 = v5 == 0;
  uint64_t v8 = -3;
  if (!v7) {
    uint64_t v8 = -2;
  }
  *(void *)(v6 + 48) = v8;
  *(_DWORD *)(v6 + 40) = v3;
  return ggl::CommandBuffer::pushRenderItem(v4, v6);
}

__n128 std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1>,void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF574280;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1>,void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF574280;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_1>,void ()(md::TransitDisplayConnectionRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void *std::function<void ()(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *a3;
  *(_DWORD *)(*a3 + 40) = v3;
  return ggl::CommandBuffer::pushRenderItem(v4, v5);
}

__n128 std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57E718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57E718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::TransitRenderLayer::appendTransitLineCommandsToBuffer(ggl::CommandBuffer *,ggl::CommandBuffer *,md::LayoutContext const&)::$_0::operator() const(ggl::CommandBuffer *,unsigned int,md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor> *,unsigned int)::{lambda(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::TransitRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

uint64_t std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::operator()(uint64_t result, unsigned __int8 *a2)
{
  if (*a2 <= 4u)
  {
    uint64_t v2 = *(void *)(result + 8);
    int v3 = *(_DWORD *)(v2 + 408);
    if ((v3 + 1) > 1) {
      int v4 = v3 + 1;
    }
    else {
      int v4 = 1;
    }
    *(_DWORD *)(v2 + 408) = v4;
  }
  return result;
}

uint64_t std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF574358;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF574358;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(md::StyleManagerEvent)>::~__func()
{
}

void std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "TransitLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF574310;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF574310;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5742C8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5742C8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::TransitRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::TransitRenderLayer::~TransitRenderLayer(md::TransitRenderLayer *this)
{
  md::TransitRenderLayer::~TransitRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  md::CTransitRenderResources *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF53AE78;
  *((unsigned char *)this + 32) = 0;
  md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::clearScene((uint64_t)this);
  *((unsigned char *)this + 32) = 0;
  (*(void (**)(md::TransitRenderLayer *))(*(void *)this + 48))(this);
  md::TransitRenderLayer::updateActiveTileDatas(this);
  [*(id *)(*((void *)this + 47) + 112) stop];
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)this + 63));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)this + 60));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)this + 57));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)this + 54));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (md::CTransitRenderResources *)*((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v3)
  {
    md::CTransitRenderResources::~CTransitRenderResources(v3);
    MEMORY[0x1A6239270]();
  }
  md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledVectorRenderLayer(this);
}

void sub_1A25C12B4(_Unwind_Exception *a1)
{
  md::TransitRenderLayer::{unnamed type#1}::~TransitRenderLayer((void **)(v1 + 424));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 384);
  std::unique_ptr<md::CTransitRenderResources>::~unique_ptr[abi:nn180100]((md::CTransitRenderResources **)(v1 + 376));
  md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledVectorRenderLayer((void *)v1);
  _Unwind_Resume(a1);
}

void **md::TransitRenderLayer::{unnamed type#1}::~TransitRenderLayer(void **a1)
{
  return a1;
}

md::CTransitRenderResources **std::unique_ptr<md::CTransitRenderResources>::~unique_ptr[abi:nn180100](md::CTransitRenderResources **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::CTransitRenderResources::~CTransitRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

void altitude::RoadTileDataPrivate::operator()(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = (geo::codec::VectorTile *)(***(uint64_t (****)(void))(a2 + 88))(*(void *)(a2 + 88));
  if (v8)
  {
    [(geo::codec::VectorTile *)v8 vectorTilePtr];
    uint64_t v8 = v10;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  if (geo::codec::VectorTile::linesCount(v8) <= a3
    || *(_DWORD *)(geo::codec::VectorTile::lines(v10) + 168 * a3 + 100) <= a4)
  {
    *(void *)a1 = *(void *)(a2 + 64);
    *(void *)(a1 + 8) = *(void *)(a2 + 72);
    unint64_t v9 = v11;
    if (!v11) {
      return;
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = geo::codec::VectorTile::lines(v10) + 168 * a3;
    *(_DWORD *)(a1 + 8) = a4;
    *(_DWORD *)(a1 + 12) = a3;
    unint64_t v9 = v11;
    if (!v11) {
      return;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1A25C14A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float altitude::RoadTileDataPrivate::evaluate(altitude::RoadTileDataPrivate *this, unsigned int a2, unsigned int a3, float a4)
{
  BOOL v7 = (void *)(**(uint64_t (***)(altitude::RoadTileDataPrivate *))this)(this);
  if (v7)
  {
    [v7 vectorTilePtr];
    BOOL v7 = v11;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v8 = geo::codec::VectorTile::lines((geo::codec::VectorTile *)v7);
  float v9 = geo::codec::roadFeatureMapOriginalToEvaluatedIndex((std::__shared_weak_count **)(v8 + 168 * a2), (const GeoCodecsRoadFeature *)a3, a4);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v9;
}

void sub_1A25C1590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::mutex *std::__shared_ptr_pointer<altitude::RoadSuperTile *,std::shared_ptr<altitude::RoadSuperTile>::__shared_ptr_default_delete<altitude::RoadSuperTile,altitude::RoadSuperTile>,std::allocator<altitude::RoadSuperTile>>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    altitude::RoadSuperTile::~RoadSuperTile(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::RoadSuperTile *,std::shared_ptr<altitude::RoadSuperTile>::__shared_ptr_default_delete<altitude::RoadSuperTile,altitude::RoadSuperTile>,std::allocator<altitude::RoadSuperTile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t altitude::SgNode::update(uint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = result;
  uint64_t v10 = *(uint64_t **)(result + 32);
  for (uint64_t i = *(uint64_t **)(result + 40); v10 != i; *(void *)(v12 + 248) = a4[2])
  {
    uint64_t v12 = *v10++;
    *(unsigned char *)(v12 + 180) = a5;
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, a3);
    *(void *)(v12 + 232) = *a4;
    *(void *)(v12 + 240) = a4[1];
  }
  uint64_t v14 = *(uint64_t **)(v9 + 8);
  for (uint64_t j = *(uint64_t **)(v9 + 16);
        v14 != j;
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(void *)v15 + 16))(v15, a2, a3, a4, a5))
  {
    uint64_t v15 = *v14;
    v14 += 2;
  }
  return result;
}

void altitude::SgNode::~SgNode(altitude::SgNode *this)
{
  *(void *)this = &unk_1EF56B530;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 2);
    uint64_t v5 = (void *)*((void *)this + 1);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 16;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_1EF56B530;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 2);
    uint64_t v5 = (void *)*((void *)this + 1);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v3;
    operator delete(v5);
  }
}

float *altitude::SgStaticTransform::update(uint64_t a1, uint64_t a2, double *a3, float64x2_t *a4, uint64_t a5)
{
  *(_DWORD *)long long v48 = *(_DWORD *)(a1 + 56);
  __int32 v44 = *(_DWORD *)v48;
  int32x2_t v10 = *(int32x2_t *)(a1 + 72);
  double v49 = *(double *)(a1 + 88);
  float32x2_t v11 = *(float32x2_t *)&v49;
  *(void *)&long long v12 = *(void *)(a1 + 60);
  int32x2_t v41 = v10;
  int32x2_t v42 = (int32x2_t)v12;
  *((int32x2_t *)&v12 + 1) = v10;
  *(_OWORD *)&v48[4] = v12;
  *(_DWORD *)&v48[20] = *(_DWORD *)(a1 + 80);
  __int32 v43 = *(_DWORD *)&v48[20];
  LODWORD(v50) = *(_DWORD *)(a1 + 96);
  float v13 = *(float *)&v50;
  float v14 = *(float *)(a1 + 104);
  float v15 = *(float *)(a1 + 108);
  float v16 = *(float *)(a1 + 112);
  __n128 result = gm::quaternionFromRotationMatrix<float>((float *)&v46, (float *)v48);
  v18.i32[0] = *(_DWORD *)(a1 + 68);
  v18.i32[1] = *(_DWORD *)(a1 + 84);
  double v19 = sqrtf((float)(vaddv_f32(vmul_f32(v11, v11)) + (float)(v13 * v13))+ (float)(*(float *)(a1 + 100) * *(float *)(a1 + 100)));
  double v21 = a3[5];
  double v20 = a3[6];
  double v23 = a3[3];
  double v22 = a3[4];
  double v24 = -(v23 * v16 - v21 * v14);
  double v25 = a3[2];
  double v26 = -(v22 * v14 - v23 * v15);
  double v27 = -(v21 * v15 - v22 * v16);
  *(double *)&float32x2_t v28 = v27 + v27;
  double v29 = v24 + v24;
  double v30 = v26 + v26;
  double v31 = a3[1] + v15 - v30 * v23 + *(double *)&v28 * v21 + v29 * v20;
  *(double *)long long v48 = *a3 + v14 + v30 * v22 + *(double *)&v28 * v20 - v29 * v21;
  *(double *)&v48[8] = v31;
  *(double *)&v48[16] = v25 + v16 + v30 * v20 + v29 * v23 - *(double *)&v28 * v22;
  double v49 = v20 * *(float *)v46.f64
      + v23 * *((float *)&v46.f64[1] + 1)
      + v22 * *(float *)&v46.f64[1]
      - v21 * *((float *)v46.f64 + 1);
  double v50 = v22 * *((float *)&v46.f64[1] + 1)
      - (v23 * *(float *)&v46.f64[1]
       - v20 * *((float *)v46.f64 + 1))
      + v21 * *(float *)v46.f64;
  double v51 = v20 * *(float *)&v46.f64[1]
      + v23 * *((float *)v46.f64 + 1)
      - v22 * *(float *)v46.f64
      + v21 * *((float *)&v46.f64[1] + 1);
  double v52 = -(v23 * *(float *)v46.f64
        + v22 * *((float *)v46.f64 + 1)
        + v21 * *(float *)&v46.f64[1]
        - v20 * *((float *)&v46.f64[1] + 1));
  float32x2_t v32 = (float32x2_t)vdup_lane_s32(v41, 0);
  v32.i32[0] = v44;
  v28.i32[0] = vdup_lane_s32(v42, 1).u32[0];
  v28.i32[1] = v43;
  float64x2_t v33 = vmulq_f64(*a4, vcvtq_f64_f32(vsqrt_f32(vmla_f32(vmla_f32(vmla_f32(vmul_f32(v32, v32), (float32x2_t)__PAIR64__(v41.u32[1], v42.u32[0]), (float32x2_t)__PAIR64__(v41.u32[1], v42.u32[0])), v28, v28), v18, v18))));
  double v34 = a4[1].f64[0] * v19;
  float64x2_t v46 = v33;
  double v47 = v34;
  long long v35 = *(uint64_t **)(a1 + 32);
  long long v36 = *(uint64_t **)(a1 + 40);
  if (v35 != v36)
  {
    float64x2_t v45 = v33;
    do
    {
      uint64_t v37 = *v35++;
      *(unsigned char *)(v37 + 180) = a5;
      __n128 result = (float *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v37 + 16))(v37, v48);
      *(float64x2_t *)(v37 + 232) = v45;
      *(double *)(v37 + 248) = v34;
    }
    while (v35 != v36);
  }
  long long v39 = *(uint64_t **)(a1 + 8);
  for (uint64_t i = *(uint64_t **)(a1 + 16);
        v39 != i;
        __n128 result = (float *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, float64x2_t *, uint64_t))(*(void *)v40 + 16))(v40, a2, v48, &v46, a5))
  {
    uint64_t v40 = *v39;
    v39 += 2;
  }
  return result;
}

float *gm::quaternionFromRotationMatrix<float>(float *result, float *a2)
{
  float v2 = *a2;
  float v3 = a2[4];
  float v4 = a2[8];
  float v5 = v4 + *a2;
  if ((float)(v5 + v3) <= 0.0)
  {
    if (v2 > v3)
    {
      BOOL v11 = v2 == v4;
      BOOL v12 = v2 < v4;
    }
    else
    {
      BOOL v11 = 1;
      BOOL v12 = 0;
    }
    if (v12 || v11)
    {
      if (v3 > v4)
      {
        float v13 = sqrtf((float)(v3 + 1.0) - v5);
        float v14 = 1.0 / (float)(v13 + v13);
        float v8 = v13 * 0.5;
        float v7 = (float)(a2[1] + a2[3]) * v14;
        float v9 = (float)(a2[5] + a2[7]) * v14;
        float v10 = (float)(a2[6] - a2[2]) * v14;
        goto LABEL_12;
      }
      double v19 = sqrt(1.0 - (v2 + v3) + v4);
      float v20 = v19 + v19;
      float v17 = 1.0 / v20;
      float v7 = (float)(a2[2] + a2[6]) * (float)(1.0 / v20);
      float v8 = (float)(a2[5] + a2[7]) * (float)(1.0 / v20);
      float v9 = v20 * 0.25;
      float v18 = a2[1] - a2[3];
    }
    else
    {
      double v15 = sqrt(v2 + 1.0 - (v3 + v4));
      float v16 = v15 + v15;
      float v7 = v16 * 0.25;
      float v17 = 1.0 / v16;
      float v8 = (float)(a2[1] + a2[3]) * (float)(1.0 / v16);
      float v9 = (float)(a2[2] + a2[6]) * v17;
      float v18 = a2[5] - a2[7];
    }
    float v10 = v18 * v17;
    goto LABEL_12;
  }
  float v6 = 0.5 / sqrtf((float)(v5 + v3) + 1.0);
  float v7 = (float)(a2[5] - a2[7]) * v6;
  float v8 = (float)(a2[6] - a2[2]) * v6;
  float v9 = (float)(a2[1] - a2[3]) * v6;
  float v10 = 0.25 / v6;
LABEL_12:
  float *result = v7;
  result[1] = v8;
  result[2] = v9;
  result[3] = v10;
  return result;
}

void altitude::SgStaticTransform::~SgStaticTransform(altitude::SgStaticTransform *this)
{
  *(void *)this = &unk_1EF56B530;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 2);
    float v5 = (void *)*((void *)this + 1);
    if (v4 != v3)
    {
      do
      {
        float v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 16;
      }
      while (v4 != v3);
      float v5 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_1EF56B530;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 2);
    float v5 = (void *)*((void *)this + 1);
    if (v4 != v3)
    {
      do
      {
        float v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      float v5 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v3;
    operator delete(v5);
  }
}

float *altitude::SgFixedAxisRotationAnimation::update(uint64_t a1, void *a2, double *a3, void *a4, uint64_t a5, double a6, float32x4_t a7, double a8, float32x4_t a9)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  double v14 = *(double *)(a1 + 64) + *(double *)(*(void *)(*a2 + 16 * *(unsigned int *)(a1 + 72)) + 8);
  int v15 = *(unsigned __int8 *)(a1 + 76);
  if (v15 == 2)
  {
    double v14 = fmin(*(double *)(a1 + 56), v14);
  }
  else if (v15 == 1)
  {
    double v16 = *(double *)(a1 + 56);
    double v14 = fmod(v14, v16 + v16);
    if (v14 > v16) {
      double v14 = v16 - v14;
    }
  }
  else if (!*(unsigned char *)(a1 + 76))
  {
    double v14 = fmod(v14, *(long double *)(a1 + 56));
  }
  float v17 = *(double **)(a1 + 80);
  float v18 = *(double **)(a1 + 88);
  if (*v17 <= v14)
  {
    unint64_t v20 = 0;
    int v21 = 0;
    while (((char *)v18 - (char *)v17) >> 4 > v20)
    {
      unint64_t v20 = (v21 + 1);
      int v21 = v20;
      int v19 = v20;
      if (v17[2 * v20] > v14) {
        goto LABEL_16;
      }
    }
    int v19 = v21;
  }
  else
  {
    int v19 = 0;
    unint64_t v20 = 0;
  }
LABEL_16:
  uint64_t v22 = (v19 - 1);
  if (v17 == v18) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = ((char *)v18 - (char *)v17) >> 4;
  }
  unint64_t v24 = v20 % v23;
  uint64_t v26 = v24;
  BOOL v25 = v24 == 0;
  double v27 = &v17[2 * v24];
  if (v25) {
    double v27 = (double *)(a1 + 56);
  }
  double v28 = *v27;
  double v29 = &v17[2 * v22];
  float v30 = (v14 - *v29) / (v28 - *v29);
  int v31 = *((unsigned __int8 *)v29 + 8);
  float v32 = ceilf(v30);
  float v33 = floorf(v30);
  float v34 = roundf(v30);
  if (v31 == 1) {
    float v30 = v34;
  }
  if (v31 == 2) {
    float v30 = v33;
  }
  if (v31 == 3) {
    float v30 = v32;
  }
  float v35 = *((float *)&v17[2 * v22 + 1] + 1)
      + (float)(v30 * (float)(*((float *)&v17[2 * v26 + 1] + 1) - *((float *)&v17[2 * v22 + 1] + 1)));
  *(void *)&v121[20] = 1065353216;
  *(_OWORD *)&v121[4] = 0uLL;
  *(_DWORD *)long long v121 = 1065353216;
  *(_DWORD *)&v121[28] = 0;
  a7.i64[0] = *(void *)(a1 + 104);
  int32x4_t v108 = (int32x4_t)a7;
  float v109 = *(float *)(a1 + 112);
  a7.f32[2] = v109;
  int32x4_t v36 = (int32x4_t)vnegq_f32(a7);
  a9.i64[0] = *(void *)v121;
  int8x16_t v37 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v121[8], (float32x4_t)xmmword_1A28FD160);
  int8x16_t v38 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v121[8], (float32x4_t)xmmword_1A28FCDA0);
  float32x4_t v39 = (float32x4_t)vzip1q_s32(v36, v36);
  int8x16_t v40 = (int8x16_t)vmulq_f32(v39, *(float32x4_t *)&v121[8]);
  float32x4_t v110 = vaddq_f32(vmlsq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v40, v40, 8uLL), a9, v39), (float32x4_t)xmmword_1A28FCE90, a7, 2), (float32x4_t)xmmword_1A28FCDD0);
  *(float32x4_t *)long long v121 = vmlaq_f32((float32x4_t)vextq_s8(v37, v37, 8uLL), (float32x4_t)xmmword_1A28FD160, a9);
  *(float32x4_t *)&v121[16] = vmlaq_f32((float32x4_t)vextq_s8(v38, v38, 8uLL), (float32x4_t)xmmword_1A28FCDA0, a9);
  __float2 v41 = __sincosf_stret(v35 * 0.5);
  float v42 = *(float *)(a1 + 116) * v41.__sinval;
  float v43 = *(float *)(a1 + 120) * v41.__sinval;
  float v44 = *(float *)(a1 + 124) * v41.__sinval;
  float v45 = v43 + v43;
  float v46 = (float)(v43 + v43) * v43;
  float v47 = (float)(v44 + v44) * v44;
  *(float *)v48.i32 = 1.0 - (float)(v46 + v47);
  float v49 = (float)(v42 + v42) * v43;
  float v50 = (float)(v44 + v44) * v41.__cosval;
  *(float *)v51.i32 = v49 - v50;
  float v52 = v44 * (float)(v42 + v42);
  float v53 = (float)(v43 + v43) * v41.__cosval;
  *(float *)v54.i32 = v53 + v52;
  *(float *)&__int32 v55 = v50 + v49;
  float v56 = 1.0 - (float)((float)(v42 + v42) * v42);
  *(float *)&__int32 v57 = v56 - v47;
  float v58 = v45 * v44;
  float v59 = (float)(v42 + v42) * v41.__cosval;
  *(float *)&__int32 v60 = v58 - v59;
  float v61 = v52 - v53;
  float v62 = v58 + v59;
  float v63 = v56 - v46;
  *(_DWORD *)&v120[20] = 1065353216;
  *(_OWORD *)&v120[4] = 0uLL;
  *(_DWORD *)long long v120 = 1065353216;
  v64.i64[0] = *(void *)v120;
  int8x16_t v65 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v120[8], (float32x4_t)xmmword_1A28FD160);
  float32x4_t v66 = vmlaq_f32((float32x4_t)vextq_s8(v65, v65, 8uLL), (float32x4_t)xmmword_1A28FD160, v64);
  int8x16_t v67 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v120[8], (float32x4_t)xmmword_1A28FCDA0);
  float32x4_t v68 = vmlaq_f32((float32x4_t)vextq_s8(v67, v67, 8uLL), (float32x4_t)xmmword_1A28FCDA0, v64);
  float32x4_t v69 = (float32x4_t)vzip1q_s32(v108, v108);
  int8x16_t v70 = (int8x16_t)vmulq_f32(v69, *(float32x4_t *)&v120[8]);
  float32x4_t v71 = vaddq_f32(vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v70, v70, 8uLL), v64, v69), (float32x4_t)xmmword_1A28FCE90, v109), (float32x4_t)xmmword_1A28FCDD0);
  *(float32x4_t *)long long v120 = v66;
  *(float32x4_t *)&v120[16] = v68;
  v48.i32[1] = v55;
  float32x4_t v72 = (float32x4_t)vzip1q_s32(v48, v48);
  int8x16_t v73 = (int8x16_t)vmulq_f32(v72, *(float32x4_t *)&v120[8]);
  v66.i64[1] = v68.i64[1];
  float32x4_t v74 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v73, v73, 8uLL), v66, v72), (float32x4_t)xmmword_1A28FCE90, v61);
  v51.i32[1] = v57;
  float32x4_t v75 = (float32x4_t)vzip1q_s32(v51, v51);
  int8x16_t v76 = (int8x16_t)vmulq_f32(v75, *(float32x4_t *)&v120[8]);
  float32x4_t v77 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v76, v76, 8uLL), v66, v75), (float32x4_t)xmmword_1A28FCE90, v62);
  *(void *)&v116[8] = v74.i64[1];
  *(void *)&v116[16] = v77.i64[0];
  v54.i32[1] = v60;
  float32x4_t v78 = (float32x4_t)vzip1q_s32(v54, v54);
  int8x16_t v79 = (int8x16_t)vmulq_f32(v78, *(float32x4_t *)&v120[8]);
  float32x4_t v80 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v79, v79, 8uLL), v66, v78), (float32x4_t)xmmword_1A28FCE90, v63);
  v78.i64[1] = *(void *)&v121[20];
  v72.i64[0] = *(void *)v121;
  float32x4_t v81 = (float32x4_t)vzip1q_s32((int32x4_t)v72, (int32x4_t)v72);
  int8x16_t v82 = (int8x16_t)vmulq_f32(v81, *(float32x4_t *)&v116[8]);
  v74.i64[1] = v77.i64[1];
  float32x4_t v83 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v82, v82, 8uLL), v74, v81), v80, *(float *)&v121[8]), v71, *(float *)&v121[12]);
  v78.i64[0] = *(void *)&v121[16];
  float32x4_t v84 = (float32x4_t)vzip1q_s32((int32x4_t)v78, (int32x4_t)v78);
  int8x16_t v85 = (int8x16_t)vmulq_f32(v84, *(float32x4_t *)&v116[8]);
  int8x16_t v86 = (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v85, v85, 8uLL), v74, v84), v80, *(float *)&v121[24]), v71, *(float *)&v121[28]);
  float32x4_t v87 = (float32x4_t)vzip1q_s32((int32x4_t)v110, (int32x4_t)v110);
  int8x16_t v88 = (int8x16_t)vmulq_f32(v87, *(float32x4_t *)&v116[8]);
  float32x4_t v111 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v88, v88, 8uLL), v74, v87), v80, v110, 2), v71, v110, 3);
  v83.i32[3] = v86.i32[0];
  *(float32x4_t *)uint64_t v116 = v83;
  *(int8x16_t *)&v116[16] = vextq_s8(vextq_s8(v86, v86, 0xCuLL), (int8x16_t)v80, 8uLL);
  LODWORD(v117) = v80.i32[2];
  __n128 result = gm::quaternionFromRotationMatrix<float>(&v112, (float *)v116);
  double v91 = a3[5];
  double v90 = a3[6];
  double v93 = a3[3];
  double v92 = a3[4];
  double v94 = -(v93 * v111.f32[2] - v91 * v111.f32[0]);
  double v95 = -(v92 * v111.f32[0] - v93 * v111.f32[1]);
  double v96 = -(v91 * v111.f32[1] - v92 * v111.f32[2]);
  double v97 = v96 + v96;
  double v98 = v94 + v94;
  double v99 = v95 + v95;
  double v100 = *a3 + v111.f32[0] + v99 * v92 + v97 * v90 - v98 * v91;
  double v101 = a3[1] + v111.f32[1] - v99 * v93 + v97 * v91 + v98 * v90;
  double v102 = a3[2] + v111.f32[2] + v99 * v90 + v98 * v93 - v97 * v92;
  *(double *)uint64_t v116 = v100;
  *(double *)&v116[8] = v101;
  *(double *)&v116[16] = v102;
  *(double *)&v116[24] = v90 * v112 + v93 * v115 + v92 * v114 - v91 * v113;
  double v117 = v92 * v115 - (v93 * v114 - v90 * v113) + v91 * v112;
  double v118 = v90 * v114 + v93 * v113 - v92 * v112 + v91 * v115;
  double v119 = -(v93 * v112 + v92 * v113 + v91 * v114 - v90 * v115);
  long long v103 = *(uint64_t **)(a1 + 32);
  for (uint64_t i = *(uint64_t **)(a1 + 40); v103 != i; *(void *)(v105 + 248) = a4[2])
  {
    uint64_t v105 = *v103++;
    *(unsigned char *)(v105 + 180) = a5;
    __n128 result = (float *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v105 + 16))(v105, v116);
    *(void *)(v105 + 232) = *a4;
    *(void *)(v105 + 240) = a4[1];
  }
  long long v107 = *(void **)(a1 + 8);
  for (uint64_t j = *(void **)(a1 + 16); v107 != j; v107 += 2)
    __n128 result = (float *)(*(uint64_t (**)(void, void *, unsigned char *, void *, uint64_t))(*(void *)*v107 + 16))(*v107, a2, v116, a4, a5);
  return result;
}

void altitude::SgFixedAxisRotationAnimation::~SgFixedAxisRotationAnimation(altitude::SgFixedAxisRotationAnimation *this)
{
  altitude::SgAnimation<float>::~SgAnimation(this);
  JUMPOUT(0x1A6239270);
}

void *altitude::SgAnimation<float>::~SgAnimation(void *a1)
{
  *a1 = &unk_1EF568810;
  float v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1EF56B530;
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t v5 = a1[2];
    float v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        float v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      float v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void altitude::SgMatrixAnimation::update(uint64_t a1, void *a2, uint64_t a3, float64x2_t *a4, uint64_t a5)
{
  double v10 = *(double *)(a1 + 64) + *(double *)(*(void *)(*a2 + 16 * *(unsigned int *)(a1 + 72)) + 8);
  int v11 = *(unsigned __int8 *)(a1 + 76);
  if (v11 == 2)
  {
    double v10 = fmin(*(double *)(a1 + 56), v10);
  }
  else if (v11 == 1)
  {
    double v12 = *(double *)(a1 + 56);
    double v10 = fmod(v10, v12 + v12);
    if (v10 > v12) {
      double v10 = v12 - v10;
    }
  }
  else if (!*(unsigned char *)(a1 + 76))
  {
    double v10 = fmod(v10, *(long double *)(a1 + 56));
  }
  float v13 = *(double **)(a1 + 80);
  double v14 = *(double **)(a1 + 88);
  if (*v13 <= v10)
  {
    unint64_t v16 = 0;
    unsigned int v17 = 0;
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 5) > v16)
    {
      unint64_t v16 = ++v17;
      unsigned int v15 = v17;
      if (v13[12 * v17] > v10) {
        goto LABEL_15;
      }
    }
    unsigned int v15 = v17;
  }
  else
  {
    unsigned int v15 = 0;
    unint64_t v16 = 0;
  }
LABEL_15:
  unsigned int v18 = v15 - 1;
  if (v13 == v14) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 5);
  }
  unint64_t v20 = v16 % v19;
  uint64_t v22 = v20;
  _ZF = v20 == 0;
  unint64_t v23 = &v13[12 * v20];
  if (_ZF) {
    unint64_t v23 = (double *)(a1 + 56);
  }
  double v24 = *v23;
  BOOL v25 = &v13[12 * v18];
  float v26 = (v10 - *v25) / (v24 - *v25);
  int v27 = *((unsigned __int8 *)v25 + 8);
  float v28 = ceilf(v26);
  float v29 = floorf(v26);
  float v30 = roundf(v26);
  if (v27 == 1) {
    float v26 = v30;
  }
  if (v27 == 2) {
    float v26 = v29;
  }
  if (v27 == 3) {
    float v26 = v28;
  }
  int v31 = &v13[12 * v18];
  float v32 = &v13[12 * v22];
  double v76 = v26;
  float64x2_t v80 = *(float64x2_t *)(v31 + 5);
  uint64_t v81 = *((void *)v31 + 7);
  double v82 = v31[8];
  gm::Quaternion<double>::slerp(v80.f64, v32 + 5, v26);
  _KR00_16 = v80;
  _D20 = v81;
  _D21 = v82;
  _D2 = v31[4] + (v32[4] - v31[4]) * v76;
  double v37 = v31[11] + (v32[11] - v31[11]) * v76;
  float64x2_t v38 = vmlaq_n_f64(*(float64x2_t *)(v31 + 2), vsubq_f64(*(float64x2_t *)(v32 + 2), *(float64x2_t *)(v31 + 2)), v76);
  float64x2_t v39 = (float64x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL);
  float64x2_t v40 = vmlaq_n_f64(*(float64x2_t *)(v31 + 9), vsubq_f64(*(float64x2_t *)(v32 + 9), *(float64x2_t *)(v31 + 9)), v76);
  _Q6 = *(float64x2_t *)(a3 + 40);
  _Q5 = *(float64x2_t *)(a3 + 24);
  __asm
  {
    FMLA            D4, D20, V5.D[1]
    FMLS            D4, D19, V6.D[0]
    FMLA            D16, D19, V6.D[1]
    FMLA            D16, D21, V5.D[1]
  }
  double v50 = vmlad_n_f64(_D16, v80.f64[0], _Q6.f64[0]);
  __asm { FMLS            D3, D18, V5.D[1] }
  double v52 = vmlad_n_f64(_D3, v82, _Q6.f64[0]);
  __asm
  {
    FMLA            D18, D19, V5.D[1]
    FMLA            D18, D21, V6.D[1]
  }
  float64x2_t v55 = vaddq_f64(*(float64x2_t *)a3, v38);
  v38.f64[0] = _D2;
  _Q7 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q6, 8uLL), v38);
  _Q7.f64[0] = vsubq_f64(_Q7, (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q7, 1)).f64[0];
  __asm { FMLS            D20, D2, V5.D[0] }
  _Q17 = vmulq_f64(_Q5, v39);
  _Q17.f64[0] = vsubq_f64(_Q17, (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q17, 1)).f64[0];
  _Q7.f64[0] = _Q7.f64[0] + _Q7.f64[0];
  double v59 = _D20 + _D20;
  _Q17.f64[0] = _Q17.f64[0] + _Q17.f64[0];
  int8x16_t v60 = (int8x16_t)vmulq_n_f64(_Q6, _Q7.f64[0]);
  float64x2_t v61 = vmulq_n_f64(_Q6, v59);
  int8x16_t v62 = (int8x16_t)vmulq_n_f64(_Q5, _Q17.f64[0]);
  float64x2_t v63 = (float64x2_t)vextq_s8(v62, v62, 8uLL);
  *(void *)&v64.f64[0] = *(_OWORD *)&vaddq_f64(v55, v63);
  v64.f64[1] = vsubq_f64(v55, v63).f64[1];
  float64x2_t v65 = vaddq_f64(v64, (float64x2_t)vextq_s8(v60, v60, 8uLL));
  *(void *)&v55.f64[0] = *(_OWORD *)&vsubq_f64(v65, v61);
  v55.f64[1] = vaddq_f64(v65, v61).f64[1];
  __asm
  {
    FMLA            D2, D17, V6.D[1]
    FMLS            D2, D7, V5.D[1]
  }
  float64x2_t v80 = v55;
  uint64_t v81 = _D2;
  double v82 = _D4;
  double v83 = v50;
  double v84 = v52;
  uint64_t v85 = _D18;
  float64x2_t v68 = vmulq_f64(*a4, v40);
  double v69 = a4[1].f64[0] * v37;
  float64x2_t v78 = v68;
  double v79 = v69;
  int8x16_t v70 = *(uint64_t **)(a1 + 32);
  float32x4_t v71 = *(uint64_t **)(a1 + 40);
  if (v70 != v71)
  {
    float64x2_t v77 = v68;
    do
    {
      uint64_t v72 = *v70++;
      *(unsigned char *)(v72 + 180) = a5;
      (*(void (**)(uint64_t, float64x2_t *))(*(void *)v72 + 16))(v72, &v80);
      *(float64x2_t *)(v72 + 232) = v77;
      *(double *)(v72 + 248) = v69;
    }
    while (v70 != v71);
  }
  float32x4_t v74 = *(uint64_t **)(a1 + 8);
  int8x16_t v73 = *(uint64_t **)(a1 + 16);
  while (v74 != v73)
  {
    uint64_t v75 = *v74;
    v74 += 2;
    (*(void (**)(uint64_t, void *, float64x2_t *, float64x2_t *, uint64_t))(*(void *)v75 + 16))(v75, a2, &v80, &v78, a5);
  }
}

void altitude::SgMatrixAnimation::~SgMatrixAnimation(altitude::SgMatrixAnimation *this)
{
  altitude::SgAnimation<karo::media::TRS>::~SgAnimation(this);
  JUMPOUT(0x1A6239270);
}

void *altitude::SgAnimation<karo::media::TRS>::~SgAnimation(void *a1)
{
  *a1 = &unk_1EF5687C0;
  float v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1EF56B530;
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t v5 = a1[2];
    float v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        float v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      float v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

float *altitude::SgRotationAnimation::update(uint64_t a1, void *a2, double *a3, void *a4, uint64_t a5, double a6, double a7, int8x16_t a8, int32x4_t a9, float32x4_t a10)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  double v17 = *(double *)(a1 + 64) + *(double *)(*(void *)(*a2 + 16 * *(unsigned int *)(a1 + 72)) + 8);
  int v18 = *(unsigned __int8 *)(a1 + 76);
  if (v18 == 2)
  {
    double v17 = fmin(*(double *)(a1 + 56), v17);
  }
  else if (v18 == 1)
  {
    double v19 = *(double *)(a1 + 56);
    double v17 = fmod(v17, v19 + v19);
    if (v17 > v19) {
      double v17 = v19 - v17;
    }
  }
  else if (!*(unsigned char *)(a1 + 76))
  {
    double v17 = fmod(v17, *(long double *)(a1 + 56));
  }
  unint64_t v20 = *(double **)(a1 + 80);
  int v21 = *(double **)(a1 + 88);
  if (*v20 <= v17)
  {
    unint64_t v23 = 0;
    int v24 = 0;
    while (((char *)v21 - (char *)v20) >> 5 > v23)
    {
      unint64_t v23 = (v24 + 1);
      int v24 = v23;
      int v22 = v23;
      if (v20[4 * v23] > v17) {
        goto LABEL_16;
      }
    }
    int v22 = v24;
  }
  else
  {
    int v22 = 0;
    unint64_t v23 = 0;
  }
LABEL_16:
  if (v20 == v21) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = ((char *)v21 - (char *)v20) >> 5;
  }
  unint64_t v26 = v23 % v25;
  uint64_t v28 = v26;
  _ZF = v26 == 0;
  float v29 = &v20[4 * v26];
  if (_ZF) {
    float v29 = (double *)(a1 + 56);
  }
  double v30 = *v29;
  int v31 = &v20[4 * (v22 - 1)];
  float v32 = (v17 - *v31) / (v30 - *v31);
  int v33 = *((unsigned __int8 *)v31 + 8);
  float v34 = ceilf(v32);
  float v35 = floorf(v32);
  float v36 = roundf(v32);
  if (v33 == 1) {
    float v32 = v36;
  }
  if (v33 == 2) {
    float v32 = v35;
  }
  if (v33 == 3) {
    float v37 = v34;
  }
  else {
    float v37 = v32;
  }
  float32x4_t v38 = *(float32x4_t *)((char *)v31 + 12);
  _Q21 = *(float32x4_t *)((char *)&v20[4 * v28 + 1] + 4);
  float32x4_t v40 = vmulq_f32(_Q21, v38);
  int8x16_t v41 = (int8x16_t)vpaddq_f32(v40, v40);
  float v42 = vaddv_f32(*(float32x2_t *)v41.i8);
  if (v42 >= 1.0 || v42 <= -1.0)
  {
    a9.i32[0] = HIDWORD(*(_OWORD *)((char *)&v20[4 * v28 + 1] + 4));
    _Q21.i32[3] = HIDWORD(*(_OWORD *)((char *)v31 + 12));
  }
  else
  {
    double v44 = v37;
    float v45 = fabsf(v42);
    if (v45 <= 0.95)
    {
      int8x16_t v129 = *(int8x16_t *)((char *)v31 + 12);
      long long v130 = *(_OWORD *)((char *)&v20[4 * v28 + 1] + 4);
      float v48 = acosf(v45);
      float v49 = sinf(v48);
      double v50 = v48;
      double v51 = (float)(1.0 / v49);
      *(double *)&long long v52 = sin(v50 - v44 * v50) * v51;
      *(float *)&long long v52 = *(double *)&v52;
      long long v128 = v52;
      *(double *)v41.i64 = sin(v50 * v44) * v51;
      *(float *)v41.i32 = *(double *)v41.i64;
      a9.i64[1] = *((void *)&v128 + 1);
      float32x2_t v53 = vmul_n_f32(*(float32x2_t *)v129.i8, *(float *)&v128);
      a8 = vextq_s8(v129, v129, 8uLL);
      *(float32x2_t *)a8.i8 = vmul_n_f32(*(float32x2_t *)a8.i8, *(float *)&v128);
      *(float32x2_t *)v54.i8 = v53;
      v54.i64[1] = a8.i64[0];
      float32x2_t v55 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 0);
      if (v42 <= 0.0)
      {
        *(float32x2_t *)v56.f32 = vmls_f32(v53, v55, *(float32x2_t *)&v130);
        v56.i32[3] = vextq_s8(v54, v54, 8uLL).i32[1];
        v56.f32[2] = *(float *)a8.i32 - (float)(*((float *)&v130 + 2) * *(float *)v41.i32);
        *(float *)a9.i32 = *(float *)&a8.i32[1] - (float)(*((float *)&v130 + 3) * *(float *)v41.i32);
      }
      else
      {
        *(float32x2_t *)v56.f32 = vmla_f32(v53, v55, *(float32x2_t *)&v130);
        v56.i32[3] = vextq_s8(v54, v54, 8uLL).i32[1];
        v56.f32[2] = *(float *)a8.i32 + (float)(*((float *)&v130 + 2) * *(float *)v41.i32);
        *(float *)a9.i32 = *(float *)&a8.i32[1] + (float)(*((float *)&v130 + 3) * *(float *)v41.i32);
      }
      _Q21 = v56;
    }
    else
    {
      if (v42 <= 0.0)
      {
        float v47 = -v38.f32[3];
        a10 = vaddq_f32(_Q21, v38);
        *(float *)v41.i32 = vmlas_n_f32(-v38.f32[0], v37, a10.f32[0]);
        int8x16_t v46 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL);
        *(float32x2_t *)v46.i8 = vmla_n_f32(vneg_f32(*(float32x2_t *)v46.i8), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), v37);
        a8 = vextq_s8(vextq_s8(v41, v41, 4uLL), v46, 0xCuLL);
        *(float *)&a8.i32[3] = -v38.f32[3];
      }
      else
      {
        a10 = vsubq_f32(_Q21, v38);
        *(float *)v41.i32 = vmlas_n_f32(v38.f32[0], v37, a10.f32[0]);
        a8.i32[3] = HIDWORD(*(_OWORD *)((char *)v31 + 12));
        a8.i32[0] = v41.i32[0];
        *(float32x2_t *)v46.i8 = vmla_n_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), v37);
        *(uint64_t *)((char *)a8.i64 + 4) = v46.i64[0];
        float v47 = *(float *)&a8.i32[3];
      }
      float v57 = v47 + a10.f32[3] * v44;
      float32x2_t v58 = vmul_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8);
      v58.f32[0] = 1.0
                 / sqrtf((float)((float)(v58.f32[0] + (float)(*(float *)v41.i32 * *(float *)v41.i32)) + v58.f32[1])+ (float)(v57 * v57));
      float32x2_t v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 0);
      v59.i32[0] = v41.i32[0];
      *(float32x2_t *)_Q21.f32 = vmul_n_f32(v59, v58.f32[0]);
      int8x16_t v41 = vextq_s8(a8, a8, 8uLL);
      _Q21.i64[1] = __PAIR64__(v41.u32[1], COERCE_UNSIGNED_INT(vmuls_lane_f32(v58.f32[0], *(float32x2_t *)v46.i8, 1)));
      *(float *)a9.i32 = v58.f32[0] * v57;
    }
  }
  v10.f32[0] = vmuls_lane_f32(_Q21.f32[1] + _Q21.f32[1], *(float32x2_t *)_Q21.f32, 1);
  float v60 = vmuls_lane_f32(_Q21.f32[2] + _Q21.f32[2], _Q21, 2);
  a10.f32[0] = 1.0 - (float)(v10.f32[0] + v60);
  _S16 = _Q21.f32[0] + _Q21.f32[0];
  float v62 = vmuls_lane_f32(_Q21.f32[0] + _Q21.f32[0], *(float32x2_t *)_Q21.f32, 1);
  float v63 = (float)(_Q21.f32[2] + _Q21.f32[2]) * *(float *)a9.i32;
  *(float *)a8.i32 = v62 - v63;
  float v64 = vmuls_lane_f32(_Q21.f32[0] + _Q21.f32[0], _Q21, 2);
  float v65 = *(float *)a9.i32 * (float)(_Q21.f32[1] + _Q21.f32[1]);
  *(float *)v41.i32 = v65 + v64;
  float32_t v66 = v63 + v62;
  __asm { FMLS            S18, S16, V21.S[0] }
  *(float *)&__int32 v71 = _S18 - v60;
  float v72 = vmuls_lane_f32(_Q21.f32[1] + _Q21.f32[1], _Q21, 2);
  float v73 = *(float *)a9.i32 * (float)(_Q21.f32[0] + _Q21.f32[0]);
  *(float *)a9.i32 = v72 - v73;
  float v74 = v64 - v65;
  float v75 = v73 + v72;
  float v76 = _S18 - v10.f32[0];
  *(void *)&v141[20] = 1065353216;
  *(_OWORD *)&v141[4] = 0uLL;
  *(_DWORD *)int v141 = 1065353216;
  *(_DWORD *)&v141[28] = 0;
  float v77 = *(float *)(a1 + 112);
  v10.i64[0] = *(void *)(a1 + 104);
  float32x4_t v78 = (float32x4_t)vzip1q_s32((int32x4_t)v10, (int32x4_t)v10);
  v10.f32[2] = v77;
  int32x4_t v79 = (int32x4_t)vnegq_f32(v10);
  v11.i64[0] = *(void *)v141;
  int8x16_t v80 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v141[8], (float32x4_t)xmmword_1A28FD160);
  float32x4_t v81 = vmlaq_f32((float32x4_t)vextq_s8(v80, v80, 8uLL), (float32x4_t)xmmword_1A28FD160, v11);
  int8x16_t v82 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v141[8], (float32x4_t)xmmword_1A28FCDA0);
  float32x4_t v83 = (float32x4_t)vzip1q_s32(v79, v79);
  int8x16_t v84 = (int8x16_t)vmulq_f32(v83, *(float32x4_t *)&v141[8]);
  float32x4_t v85 = vmlsq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v84, v84, 8uLL), v11, v83), (float32x4_t)xmmword_1A28FCE90, v10, 2);
  float32x4_t v86 = vaddq_f32(v85, (float32x4_t)xmmword_1A28FCDD0);
  *(float32x4_t *)int v141 = v81;
  *(float32x4_t *)&v141[16] = vmlaq_f32((float32x4_t)vextq_s8(v82, v82, 8uLL), (float32x4_t)xmmword_1A28FCDA0, v11);
  *(_OWORD *)&v140[4] = 0uLL;
  *(_DWORD *)v140 = 1065353216;
  *(_DWORD *)&v140[20] = 1065353216;
  v85.i64[0] = *(void *)v140;
  int8x16_t v87 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v140[8], (float32x4_t)xmmword_1A28FD160);
  float32x4_t v88 = vmlaq_f32((float32x4_t)vextq_s8(v87, v87, 8uLL), (float32x4_t)xmmword_1A28FD160, v85);
  int8x16_t v89 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v140[8], (float32x4_t)xmmword_1A28FCDA0);
  int8x16_t v90 = (int8x16_t)vmulq_f32(v78, *(float32x4_t *)&v140[8]);
  float32x4_t v91 = vaddq_f32(vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v90, v90, 8uLL), v85, v78), (float32x4_t)xmmword_1A28FCE90, v77), (float32x4_t)xmmword_1A28FCDD0);
  *(float32x4_t *)v140 = v88;
  *(float32x4_t *)&v140[16] = vmlaq_f32((float32x4_t)vextq_s8(v89, v89, 8uLL), (float32x4_t)xmmword_1A28FCDA0, v85);
  a10.f32[1] = v66;
  float32x4_t v92 = (float32x4_t)vzip1q_s32((int32x4_t)a10, (int32x4_t)a10);
  int8x16_t v93 = (int8x16_t)vmulq_f32(v92, *(float32x4_t *)&v140[8]);
  v88.i64[1] = *(void *)&v140[24];
  float32x4_t v94 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v93, v93, 8uLL), v88, v92), (float32x4_t)xmmword_1A28FCE90, v74);
  a8.i32[1] = v71;
  float32x4_t v95 = (float32x4_t)vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
  int8x16_t v96 = (int8x16_t)vmulq_f32(v95, *(float32x4_t *)&v140[8]);
  int32x4_t v97 = (int32x4_t)vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v96, v96, 8uLL), v88, v95), (float32x4_t)xmmword_1A28FCE90, v75);
  *(void *)&v136[8] = v94.i64[1];
  *(void *)&v136[16] = v97.i64[0];
  v41.i32[1] = a9.i32[0];
  float32x4_t v98 = (float32x4_t)vzip1q_s32((int32x4_t)v41, (int32x4_t)v41);
  int8x16_t v99 = (int8x16_t)vmulq_f32(v98, *(float32x4_t *)&v140[8]);
  float32x4_t v100 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8(v99, v99, 8uLL), v88, v98), (float32x4_t)xmmword_1A28FCE90, v76);
  a9.i64[0] = v81.i64[0];
  v97.i64[0] = *(void *)&v141[16];
  float32x4_t v101 = (float32x4_t)vzip1q_s32(a9, a9);
  int8x16_t v102 = (int8x16_t)vmulq_f32(v101, *(float32x4_t *)&v136[8]);
  v94.i64[1] = v97.i64[1];
  float32x4_t v103 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v102, v102, 8uLL), v94, v101), v100, v81, 2), v91, v81, 3);
  float32x4_t v104 = (float32x4_t)vzip1q_s32(v97, v97);
  int8x16_t v105 = (int8x16_t)vmulq_f32(v104, *(float32x4_t *)&v136[8]);
  int8x16_t v106 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v105, v105, 8uLL), v94, v104), v100, *(float32x4_t *)&v141[16], 2), v91, *(float32x4_t *)&v141[16], 3);
  float32x4_t v107 = (float32x4_t)vzip1q_s32((int32x4_t)v86, (int32x4_t)v86);
  int8x16_t v108 = (int8x16_t)vmulq_f32(v107, *(float32x4_t *)&v136[8]);
  float32x4_t v131 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_f32((float32x4_t)vextq_s8(v108, v108, 8uLL), v94, v107), v100, v86, 2), v91, v86, 3);
  v103.i32[3] = v106.i32[0];
  *(float32x4_t *)long long v136 = v103;
  *(int8x16_t *)&v136[16] = vextq_s8(vextq_s8(v106, v106, 0xCuLL), (int8x16_t)v100, 8uLL);
  LODWORD(v137) = v100.i32[2];
  __n128 result = gm::quaternionFromRotationMatrix<float>(&v132, (float *)v136);
  double v111 = a3[5];
  double v110 = a3[6];
  double v113 = a3[3];
  double v112 = a3[4];
  double v114 = -(v113 * v131.f32[2] - v111 * v131.f32[0]);
  double v115 = -(v112 * v131.f32[0] - v113 * v131.f32[1]);
  double v116 = -(v111 * v131.f32[1] - v112 * v131.f32[2]);
  double v117 = v116 + v116;
  double v118 = v114 + v114;
  double v119 = v115 + v115;
  double v120 = *a3 + v131.f32[0] + v119 * v112 + v117 * v110 - v118 * v111;
  double v121 = a3[1] + v131.f32[1] - v119 * v113 + v117 * v111 + v118 * v110;
  double v122 = a3[2] + v131.f32[2] + v119 * v110 + v118 * v113 - v117 * v112;
  *(double *)long long v136 = v120;
  *(double *)&v136[8] = v121;
  *(double *)&v136[16] = v122;
  *(double *)&v136[24] = v110 * v132 + v113 * v135 + v112 * v134 - v111 * v133;
  double v137 = v112 * v135 - (v113 * v134 - v110 * v133) + v111 * v132;
  double v138 = v110 * v134 + v113 * v133 - v112 * v132 + v111 * v135;
  double v139 = -(v113 * v132 + v112 * v133 + v111 * v134 - v110 * v135);
  long long v123 = *(uint64_t **)(a1 + 32);
  for (uint64_t i = *(uint64_t **)(a1 + 40); v123 != i; *(void *)(v125 + 248) = a4[2])
  {
    uint64_t v125 = *v123++;
    *(unsigned char *)(v125 + 180) = a5;
    __n128 result = (float *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v125 + 16))(v125, v136);
    *(void *)(v125 + 232) = *a4;
    *(void *)(v125 + 240) = a4[1];
  }
  long long v127 = *(void **)(a1 + 8);
  for (uint64_t j = *(void **)(a1 + 16); v127 != j; v127 += 2)
    __n128 result = (float *)(*(uint64_t (**)(void, void *, unsigned char *, void *, uint64_t))(*(void *)*v127 + 16))(*v127, a2, v136, a4, a5);
  return result;
}

void altitude::SgRotationAnimation::~SgRotationAnimation(altitude::SgRotationAnimation *this)
{
  altitude::SgAnimation<gm::Matrix<float,4,1>>::~SgAnimation(this);
  JUMPOUT(0x1A6239270);
}

void *altitude::SgAnimation<gm::Matrix<float,4,1>>::~SgAnimation(void *a1)
{
  *a1 = &unk_1EF568798;
  float v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1EF56B530;
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t v5 = a1[2];
    float v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        float v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      float v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void altitude::SgScaleAnimation::update(void *a1, uint64_t *a2, uint64_t a3, float64x2_t *a4, uint64_t a5)
{
  uint64_t v25 = 0;
  unsigned int v24 = 0;
  altitude::SgAnimation<gm::Matrix<float,3,1>>::getFrameIndicesAndFraction((uint64_t)a1, *a2, &v25, &v24, (float *)&v25 + 1);
  uint64_t v10 = a1[10];
  uint64_t v11 = v10 + 24 * v25;
  uint64_t v12 = v10 + 24 * v24;
  float64x2_t v13 = vmulq_f64(*a4, vcvtq_f64_f32(vmla_n_f32(*(float32x2_t *)(v11 + 12), vsub_f32(*(float32x2_t *)(v12 + 12), *(float32x2_t *)(v11 + 12)), *((float *)&v25 + 1))));
  double v14 = a4[1].f64[0]
      * (float)(*(float *)(v11 + 20)
              + (float)((float)(*(float *)(v12 + 20) - *(float *)(v11 + 20)) * *((float *)&v25 + 1)));
  float64x2_t v22 = v13;
  double v23 = v14;
  unsigned int v15 = (uint64_t *)a1[4];
  unint64_t v16 = (uint64_t *)a1[5];
  if (v15 != v16)
  {
    float64x2_t v21 = v13;
    do
    {
      uint64_t v17 = *v15++;
      *(unsigned char *)(v17 + 180) = a5;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, a3);
      *(float64x2_t *)(v17 + 232) = v21;
      *(double *)(v17 + 248) = v14;
    }
    while (v15 != v16);
  }
  double v19 = (uint64_t *)a1[1];
  int v18 = (uint64_t *)a1[2];
  while (v19 != v18)
  {
    uint64_t v20 = *v19;
    v19 += 2;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, float64x2_t *, uint64_t))(*(void *)v20 + 16))(v20, a2, a3, &v22, a5);
  }
}

void altitude::SgAnimation<gm::Matrix<float,3,1>>::getFrameIndicesAndFraction(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, float *a5)
{
  double v9 = *(double *)(a1 + 64) + *(double *)(*(void *)(a2 + 16 * *(unsigned int *)(a1 + 72)) + 8);
  int v10 = *(unsigned __int8 *)(a1 + 76);
  if (v10 == 2)
  {
    double v9 = fmin(*(double *)(a1 + 56), v9);
  }
  else if (v10 == 1)
  {
    double v11 = *(double *)(a1 + 56);
    double v9 = fmod(v9, v11 + v11);
    if (v9 > v11) {
      double v9 = v11 - v9;
    }
  }
  else if (!*(unsigned char *)(a1 + 76))
  {
    double v9 = fmod(v9, *(long double *)(a1 + 56));
  }
  uint64_t v12 = *(double **)(a1 + 80);
  float64x2_t v13 = *(double **)(a1 + 88);
  if (*v12 <= v9)
  {
    unint64_t v15 = 0;
    unsigned int v16 = 0;
    while (0xAAAAAAAAAAAAAAABLL * (v13 - v12) > v15)
    {
      unint64_t v15 = ++v16;
      unsigned int v14 = v16;
      if (v12[3 * v16] > v9) {
        goto LABEL_15;
      }
    }
    unsigned int v14 = v16;
  }
  else
  {
    unsigned int v14 = 0;
    unint64_t v15 = 0;
  }
LABEL_15:
  *a3 = v14 - 1;
  if (v12 == v13) {
    unint64_t v17 = 1;
  }
  else {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v13 - v12);
  }
  unint64_t v18 = v15 % v17;
  *a4 = v18;
  if (v18) {
    double v19 = &v12[3 * v18];
  }
  else {
    double v19 = (double *)(a1 + 56);
  }
  uint64_t v20 = &v12[3 * *a3];
  float v21 = (v9 - *v20) / (*v19 - *v20);
  *a5 = v21;
  int v22 = *((unsigned __int8 *)v20 + 8);
  switch(v22)
  {
    case 3:
      float v23 = ceilf(v21);
      break;
    case 2:
      float v23 = floorf(v21);
      break;
    case 1:
      float v23 = roundf(v21);
      break;
    default:
      return;
  }
  *a5 = v23;
}

void altitude::SgScaleAnimation::~SgScaleAnimation(altitude::SgScaleAnimation *this)
{
  altitude::SgAnimation<gm::Matrix<float,3,1>>::~SgAnimation(this);
  JUMPOUT(0x1A6239270);
}

void *altitude::SgAnimation<gm::Matrix<float,3,1>>::~SgAnimation(void *a1)
{
  *a1 = &unk_1EF568770;
  float v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1EF56B530;
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t v5 = a1[2];
    float v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        float v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      float v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void altitude::SgSwitchAnimation::update(uint64_t a1, void *a2, uint64_t a3, void *a4, int a5)
{
  LODWORD(v5) = a5;
  double v10 = *(double *)(a1 + 64) + *(double *)(*(void *)(*a2 + 16 * *(unsigned int *)(a1 + 72)) + 8);
  int v11 = *(unsigned __int8 *)(a1 + 76);
  if (v11 == 2)
  {
    double v10 = fmin(*(double *)(a1 + 56), v10);
  }
  else if (v11 == 1)
  {
    double v12 = *(double *)(a1 + 56);
    double v10 = fmod(v10, v12 + v12);
    if (v10 > v12) {
      double v10 = v12 - v10;
    }
  }
  else if (!*(unsigned char *)(a1 + 76))
  {
    double v10 = fmod(v10, *(long double *)(a1 + 56));
  }
  float64x2_t v13 = *(double **)(a1 + 80);
  unsigned int v14 = *(double **)(a1 + 88);
  if (*v13 <= v10)
  {
    unint64_t v16 = 0;
    int v17 = 0;
    while (((char *)v14 - (char *)v13) >> 4 > v16)
    {
      unint64_t v16 = (v17 + 1);
      int v17 = v16;
      int v15 = v16;
      if (v13[2 * v16] > v10) {
        goto LABEL_15;
      }
    }
    int v15 = v17;
  }
  else
  {
    int v15 = 0;
    unint64_t v16 = 0;
  }
LABEL_15:
  if (v13 == v14) {
    unint64_t v18 = 1;
  }
  else {
    unint64_t v18 = ((char *)v14 - (char *)v13) >> 4;
  }
  unint64_t v19 = v16 % v18;
  if (v19) {
    uint64_t v20 = &v13[2 * v19];
  }
  else {
    uint64_t v20 = (double *)(a1 + 56);
  }
  double v21 = *v20;
  int v22 = &v13[2 * (v15 - 1)];
  float v23 = (v10 - *v22) / (v21 - *v22);
  int v24 = *((unsigned __int8 *)v22 + 8);
  float v25 = ceilf(v23);
  float v26 = floorf(v23);
  float v27 = roundf(v23);
  if (v24 == 1) {
    float v23 = v27;
  }
  if (v24 == 2) {
    float v23 = v26;
  }
  if (v24 == 3) {
    float v23 = v25;
  }
  if (BYTE1(v13[2 * (v23 >= 0.5) + 1])) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v28 = *(uint64_t **)(a1 + 32);
  for (uint64_t i = *(uint64_t **)(a1 + 40); v28 != i; *(void *)(v30 + 248) = a4[2])
  {
    uint64_t v30 = *v28++;
    *(unsigned char *)(v30 + 180) = v5;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, a3);
    *(void *)(v30 + 232) = *a4;
    *(void *)(v30 + 240) = a4[1];
  }
  float v32 = *(uint64_t **)(a1 + 8);
  int v31 = *(uint64_t **)(a1 + 16);
  while (v32 != v31)
  {
    uint64_t v33 = *v32;
    v32 += 2;
    (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t))(*(void *)v33 + 16))(v33, a2, a3, a4, v5);
  }
}

void altitude::SgSwitchAnimation::~SgSwitchAnimation(altitude::SgSwitchAnimation *this)
{
  altitude::SgAnimation<BOOL>::~SgAnimation(this);
  JUMPOUT(0x1A6239270);
}

void *altitude::SgAnimation<BOOL>::~SgAnimation(void *a1)
{
  *a1 = &unk_1EF5687E8;
  float v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1EF56B530;
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t v5 = a1[2];
    float v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        float v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      float v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void altitude::SgTranslationAnimation::update(void *a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5)
{
  float v48 = 0.0;
  unsigned int v46 = 0;
  unsigned int v47 = 0;
  altitude::SgAnimation<gm::Matrix<float,3,1>>::getFrameIndicesAndFraction((uint64_t)a1, *a2, &v47, &v46, &v48);
  uint64_t v10 = a1[10];
  uint64_t v11 = v10 + 24 * v47;
  uint64_t v12 = v10 + 24 * v46;
  float64x2_t v13 = vcvtq_f64_f32(vmla_n_f32(*(float32x2_t *)(v11 + 12), vsub_f32(*(float32x2_t *)(v12 + 12), *(float32x2_t *)(v11 + 12)), v48));
  float64x2_t v14 = *(float64x2_t *)(a3 + 24);
  _Q3 = *(float64x2_t *)(a3 + 40);
  float64x2_t v16 = (float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
  int64x2_t v17 = (int64x2_t)vmulq_f64(_Q3, v13);
  float64x2_t v18 = vaddq_f64(*(float64x2_t *)a3, v13);
  v13.f64[0] = (float)(*(float *)(v11 + 20) + (float)((float)(*(float *)(v12 + 20) - *(float *)(v11 + 20)) * v48));
  float64x2_t v19 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)_Q3, 8uLL), v13);
  _Q4 = vmulq_f64(v14, v16);
  _Q4.f64[0] = vsubq_f64(_Q4, (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q4, 1)).f64[0];
  _Q4.f64[0] = _Q4.f64[0] + _Q4.f64[0];
  int8x16_t v21 = (int8x16_t)vmulq_n_f64(v14, _Q4.f64[0]);
  float64x2_t v22 = (float64x2_t)vextq_s8(v21, v21, 8uLL);
  *(void *)&v23.f64[0] = *(_OWORD *)&vaddq_f64(v18, v22);
  v23.f64[1] = vsubq_f64(v18, v22).f64[1];
  float64x2_t v24 = (float64x2_t)vzip1q_s64(v17, (int64x2_t)v19);
  v19.f64[0] = (float)(*(float *)(v11 + 20) + (float)((float)(*(float *)(v12 + 20) - *(float *)(v11 + 20)) * v48))
             * v14.f64[0];
  float64x2_t v25 = vsubq_f64(v24, v19);
  float64x2_t v26 = vaddq_f64(v25, v25);
  int8x16_t v27 = (int8x16_t)vmulq_laneq_f64(_Q3, v26, 1);
  float64x2_t v28 = vmulq_n_f64(_Q3, v26.f64[0]);
  float64x2_t v29 = vaddq_f64(v23, (float64x2_t)vextq_s8(v27, v27, 8uLL));
  *(void *)&v18.f64[0] = *(_OWORD *)&vsubq_f64(v29, v28);
  v18.f64[1] = vaddq_f64(v29, v28).f64[1];
  __asm { FMLA            D1, D4, V3.D[1] }
  float64x2_t v35 = vmulq_f64(v26, v14);
  float64x2_t v42 = v18;
  double v43 = _D1 + v35.f64[0] - v35.f64[1];
  float64x2_t v44 = v14;
  float64x2_t v45 = _Q3;
  float v36 = (uint64_t *)a1[4];
  for (uint64_t i = (uint64_t *)a1[5]; v36 != i; *(void *)(v38 + 248) = a4[2])
  {
    uint64_t v38 = *v36++;
    *(unsigned char *)(v38 + 180) = a5;
    (*(void (**)(uint64_t, float64x2_t *))(*(void *)v38 + 16))(v38, &v42);
    *(void *)(v38 + 232) = *a4;
    *(void *)(v38 + 240) = a4[1];
  }
  float32x4_t v40 = (uint64_t *)a1[1];
  float64x2_t v39 = (uint64_t *)a1[2];
  while (v40 != v39)
  {
    uint64_t v41 = *v40;
    v40 += 2;
    (*(void (**)(uint64_t, uint64_t *, float64x2_t *, void *, uint64_t))(*(void *)v41 + 16))(v41, a2, &v42, a4, a5);
  }
}

void altitude::SgTranslationAnimation::~SgTranslationAnimation(altitude::SgTranslationAnimation *this)
{
  altitude::SgAnimation<gm::Matrix<float,3,1>>::~SgAnimation(this);
  JUMPOUT(0x1A6239270);
}

void altitude::SceneGraph::updateTime(altitude::SceneGraph *this)
{
  id v8 = [MEMORY[0x1E4F1C9C8] date];
  float v2 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:0.0];
  [v8 timeIntervalSinceDate:v2];
  uint64_t v5 = (void ***)*((void *)this + 10);
  uint64_t v4 = (void ***)*((void *)this + 11);
  if (v5 != v4)
  {
    double v6 = v3;
    do
    {
      float v7 = **v5;
      if (v7) {
        *((double *)*v5 + 1) = v6 + (double)[v7 secondsFromGMT];
      }
      v5 += 2;
    }
    while (v5 != v4);
  }
}

void sub_1A25C3EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<altitude::SgTimeZoneSpec>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<altitude::SgTimeZoneSpec>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58ABD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::SgTimeZoneSpec>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58ABD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void altitude::loadSceneGraphNode(void *a1, uint64_t a2, void *a3, uint64_t a4, int **a5, void *a6, void *a7, uint64_t a8)
{
  id v8 = a6;
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  double v9 = *a5;
  int v10 = **a5;
  switch(v10)
  {
    case 1:
      uint64_t v11 = operator new(0x90uLL);
      v11[1] = 0;
      v11[2] = 0;
      void *v11 = &unk_1EF58AD60;
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      v11[3] = &unk_1EF569CE8;
      *a1 = v11 + 3;
      a1[1] = v11;
      float64x2_t v13 = (std::__shared_weak_count *)a5[1];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v11 + 20) = v9[14];
      *((_DWORD *)v11 + 21) = v9[15];
      *((_DWORD *)v11 + 22) = v9[16];
      *((_DWORD *)v11 + 23) = v9[17];
      *((_DWORD *)v11 + 24) = v9[18];
      *((_DWORD *)v11 + 25) = v9[19];
      *((_DWORD *)v11 + 26) = v9[20];
      *((_DWORD *)v11 + 27) = v9[21];
      *((_DWORD *)v11 + 28) = v9[22];
      *((_DWORD *)v11 + 29) = v9[23];
      *((_DWORD *)v11 + 30) = v9[24];
      *((_DWORD *)v11 + 31) = v9[25];
      *((_DWORD *)v11 + 32) = v9[26];
      *((_DWORD *)v11 + 33) = v9[27];
      *((_DWORD *)v11 + 34) = v9[28];
      *((_DWORD *)v11 + 35) = v9[29];
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      break;
    case 2:
      uint64_t v30 = operator new(0x98uLL);
      v30[1] = 0;
      v30[2] = 0;
      *uint64_t v30 = &unk_1EF58AF20;
      v30[13] = 0;
      int v31 = (void **)(v30 + 13);
      v30[14] = 0;
      v30[15] = 0;
      *(void *)((char *)v30 + 93) = 0;
      *((_OWORD *)v30 + 4) = 0u;
      *((_OWORD *)v30 + 5) = 0u;
      *((_OWORD *)v30 + 2) = 0u;
      *((_OWORD *)v30 + 3) = 0u;
      v30[3] = &unk_1EF56B158;
      *a1 = v30 + 3;
      a1[1] = v30;
      v30[10] = *((void *)v9 + 9);
      uint64_t v32 = *((unsigned __int16 *)v9 + 29);
      *((_DWORD *)v30 + 24) = v32;
      float v34 = (uint64_t *)*((void *)v9 + 11);
      uint64_t v33 = (uint64_t *)*((void *)v9 + 12);
      uint64_t v35 = (char *)v33 - (char *)v34;
      if (v33 == v34)
      {
        float v36 = 0;
      }
      else
      {
        if (v35 < 0) {
LABEL_196:
        }
          abort();
        float v36 = (char *)operator new((char *)v33 - (char *)v34);
        v30[13] = v36;
        v30[14] = v36;
        v30[15] = &v36[16 * (v35 >> 4)];
      }
      double v110 = *((double *)v9 + 8);
      if (*((unsigned char *)v9 + 56) == 1) {
        double v110 = v110 - *(double *)(*(void *)(*(void *)(a8 + 80) + 16 * v32) + 8);
      }
      id v8 = a6;
      *((double *)v30 + 11) = v110;
      for (*((unsigned char *)v30 + 100) = *((unsigned char *)v9 + 57); v34 != v33; float v36 = v123)
      {
        char v124 = *((unsigned char *)v34 + 8);
        uint64_t v125 = *v34;
        int v126 = *((_DWORD *)v34 + 3);
        unint64_t v127 = v30[15];
        if ((unint64_t)v36 < v127)
        {
          *(void *)float v36 = v125;
          v36[8] = v124;
          long long v123 = v36 + 16;
          *((_DWORD *)v36 + 3) = v126;
        }
        else
        {
          long long v128 = (char *)*v31;
          uint64_t v129 = (v36 - (unsigned char *)*v31) >> 4;
          unint64_t v130 = v129 + 1;
          if ((unint64_t)(v129 + 1) >> 60) {
            goto LABEL_196;
          }
          uint64_t v131 = v127 - (void)v128;
          if (v131 >> 3 > v130) {
            unint64_t v130 = v131 >> 3;
          }
          if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v132 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v132 = v130;
          }
          if (v132)
          {
            if (v132 >> 60) {
              goto LABEL_193;
            }
            float v133 = (char *)operator new(16 * v132);
          }
          else
          {
            float v133 = 0;
          }
          float v134 = &v133[16 * v129];
          *(void *)float v134 = v125;
          v134[8] = v124;
          *((_DWORD *)v134 + 3) = v126;
          float v135 = v134;
          if (v36 != v128)
          {
            do
            {
              *((_OWORD *)v135 - 1) = *((_OWORD *)v36 - 1);
              v135 -= 16;
              v36 -= 16;
            }
            while (v36 != v128);
            float v36 = (char *)*v31;
          }
          long long v123 = v134 + 16;
          v30[13] = v135;
          v30[14] = v134 + 16;
          v30[15] = &v133[16 * v132];
          id v8 = a6;
          if (v36) {
            operator delete(v36);
          }
        }
        v30[14] = v123;
        v34 += 2;
      }
      *(double *)(a8 + 104) = fmax(*(double *)(a8 + 104), *((double *)v9 + 10));
      *((_DWORD *)v30 + 32) = v9[28];
      *((_DWORD *)v30 + 33) = v9[29];
      *((_DWORD *)v30 + 34) = v9[30];
      *((_DWORD *)v30 + 35) = v9[31];
      *((_DWORD *)v30 + 36) = v9[32];
      *((_DWORD *)v30 + 37) = v9[33];
      break;
    case 3:
      int v15 = operator new(0x80uLL);
      v15[1] = 0;
      v15[2] = 0;
      *int v15 = &unk_1EF58AD28;
      v15[13] = 0;
      long long v159 = (void **)(v15 + 13);
      v15[14] = 0;
      v15[15] = 0;
      *(void *)((char *)v15 + 93) = 0;
      *((_OWORD *)v15 + 4) = 0u;
      *((_OWORD *)v15 + 5) = 0u;
      *((_OWORD *)v15 + 2) = 0u;
      *((_OWORD *)v15 + 3) = 0u;
      v15[3] = &unk_1EF569CC0;
      *a1 = v15 + 3;
      a1[1] = v15;
      v15[10] = *((void *)v9 + 9);
      uint64_t v16 = *((unsigned __int16 *)v9 + 29);
      *((_DWORD *)v15 + 24) = v16;
      float64x2_t v18 = (uint64_t *)*((void *)v9 + 11);
      int64x2_t v17 = (uint64_t *)*((void *)v9 + 12);
      int64_t v19 = (char *)v17 - (char *)v18;
      if (v17 == v18)
      {
        int8x16_t v21 = 0;
      }
      else
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 5);
        if (v20 > 0x2AAAAAAAAAAAAAALL) {
LABEL_194:
        }
          abort();
        int8x16_t v21 = (char *)operator new(v19);
        v15[13] = v21;
        v15[14] = v21;
        v15[15] = &v21[96 * v20];
        id v8 = a6;
      }
      double v75 = *((double *)v9 + 8);
      if (*((unsigned char *)v9 + 56) == 1) {
        double v75 = v75 - *(double *)(*(void *)(*(void *)(a8 + 80) + 16 * v16) + 8);
      }
      *((double *)v15 + 11) = v75;
      *((unsigned char *)v15 + 100) = *((unsigned char *)v9 + 57);
      if (v17 == v18) {
        goto LABEL_77;
      }
      while (1)
      {
        char v78 = *((unsigned char *)v18 + 8);
        uint64_t v79 = *v18;
        *(_OWORD *)&buf[7] = *((_OWORD *)v18 + 1);
        *(void *)&buf[23] = v18[4];
        long long v172 = *(_OWORD *)(v18 + 5);
        uint64_t v173 = v18[7];
        uint64_t v80 = v18[8];
        __n128 v174 = *(__n128 *)(v18 + 9);
        uint64_t v175 = v18[11];
        unint64_t v81 = v15[15];
        if ((unint64_t)v21 < v81)
        {
          *(void *)int8x16_t v21 = v79;
          v21[8] = v78;
          uint64_t v76 = *(void *)&buf[23];
          *((_OWORD *)v21 + 1) = *(_OWORD *)&buf[7];
          *((void *)v21 + 4) = v76;
          *(_OWORD *)(v21 + 40) = v172;
          *((void *)v21 + 7) = v173;
          *((void *)v21 + 8) = v80;
          *(__n128 *)(v21 + 72) = v174;
          *((void *)v21 + 11) = v175;
          float v77 = v21 + 96;
        }
        else
        {
          int8x16_t v82 = (char *)*v159;
          unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (unsigned char *)*v159) >> 5);
          unint64_t v84 = v83 + 1;
          if (v83 + 1 > 0x2AAAAAAAAAAAAAALL) {
            goto LABEL_194;
          }
          unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (void)v82) >> 5);
          if (2 * v85 > v84) {
            unint64_t v84 = 2 * v85;
          }
          if (v85 >= 0x155555555555555) {
            unint64_t v86 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v86 = v84;
          }
          if (v86)
          {
            if (v86 > 0x2AAAAAAAAAAAAAALL) {
              goto LABEL_193;
            }
            int8x16_t v87 = (char *)operator new(96 * v86);
          }
          else
          {
            int8x16_t v87 = 0;
          }
          float32x4_t v88 = &v87[96 * v83];
          *(void *)float32x4_t v88 = v79;
          v88[8] = v78;
          *((_OWORD *)v88 + 1) = *(_OWORD *)&buf[7];
          *((void *)v88 + 4) = *(void *)&buf[23];
          *(_OWORD *)(v88 + 40) = v172;
          *((void *)v88 + 7) = v173;
          *((void *)v88 + 8) = v80;
          *(__n128 *)(v88 + 72) = v174;
          *((void *)v88 + 11) = v175;
          int8x16_t v89 = v88;
          if (v21 != v82)
          {
            do
            {
              uint64_t v90 = *((void *)v21 - 12);
              v21 -= 96;
              char v91 = v21[8];
              *((void *)v89 - 12) = v90;
              v89 -= 96;
              v89[8] = v91;
              long long v92 = *((_OWORD *)v21 + 1);
              *((void *)v89 + 4) = *((void *)v21 + 4);
              *((_OWORD *)v89 + 1) = v92;
              long long v93 = *(_OWORD *)(v21 + 40);
              *((void *)v89 + 7) = *((void *)v21 + 7);
              *(_OWORD *)(v89 + 40) = v93;
              *((void *)v89 + 8) = *((void *)v21 + 8);
              long long v94 = *(_OWORD *)(v21 + 72);
              *((void *)v89 + 11) = *((void *)v21 + 11);
              *(_OWORD *)(v89 + 72) = v94;
            }
            while (v21 != v82);
            int8x16_t v21 = (char *)*v159;
          }
          float v77 = v88 + 96;
          v15[13] = v89;
          v15[14] = v88 + 96;
          v15[15] = &v87[96 * v86];
          id v8 = a6;
          if (v21) {
            operator delete(v21);
          }
        }
        v15[14] = v77;
        v18 += 12;
        int8x16_t v21 = v77;
        if (v18 == v17) {
          goto LABEL_77;
        }
      }
    case 4:
      float64x2_t v22 = operator new(0x90uLL);
      v22[1] = 0;
      v22[2] = 0;
      *float64x2_t v22 = &unk_1EF58AE08;
      v22[13] = 0;
      long long v160 = (void **)(v22 + 13);
      v22[14] = 0;
      v22[15] = 0;
      *(void *)((char *)v22 + 93) = 0;
      *((_OWORD *)v22 + 4) = 0u;
      *((_OWORD *)v22 + 5) = 0u;
      *((_OWORD *)v22 + 2) = 0u;
      *((_OWORD *)v22 + 3) = 0u;
      v22[3] = &unk_1EF56A310;
      *a1 = v22 + 3;
      a1[1] = v22;
      v22[10] = *((void *)v9 + 9);
      uint64_t v23 = *((unsigned __int16 *)v9 + 29);
      *((_DWORD *)v22 + 24) = v23;
      float64x2_t v25 = (uint64_t *)*((void *)v9 + 11);
      float64x2_t v24 = (uint64_t *)*((void *)v9 + 12);
      uint64_t v26 = (char *)v24 - (char *)v25;
      if (v24 == v25)
      {
        int8x16_t v27 = 0;
      }
      else
      {
        if (v26 < 0) {
LABEL_195:
        }
          abort();
        int8x16_t v27 = (char *)operator new((char *)v24 - (char *)v25);
        v22[13] = v27;
        v22[14] = v27;
        v22[15] = &v27[32 * (v26 >> 5)];
      }
      double v95 = *((double *)v9 + 8);
      if (*((unsigned char *)v9 + 56) == 1) {
        double v95 = v95 - *(double *)(*(void *)(*(void *)(a8 + 80) + 16 * v23) + 8);
      }
      id v8 = a6;
      *((double *)v22 + 11) = v95;
      for (*((unsigned char *)v22 + 100) = *((unsigned char *)v9 + 57); v25 != v24; int8x16_t v27 = v97)
      {
        char v98 = *((unsigned char *)v25 + 8);
        uint64_t v99 = *v25;
        *(_OWORD *)&buf[3] = *(_OWORD *)((char *)v25 + 12);
        unint64_t v100 = v22[15];
        if ((unint64_t)v27 < v100)
        {
          *(void *)int8x16_t v27 = v99;
          v27[8] = v98;
          long long v96 = *(_OWORD *)buf;
          *((_DWORD *)v27 + 6) = *(_DWORD *)&buf[15];
          *(_OWORD *)(v27 + 9) = v96;
          int32x4_t v97 = v27 + 32;
        }
        else
        {
          float32x4_t v101 = (char *)*v160;
          uint64_t v102 = (v27 - (unsigned char *)*v160) >> 5;
          unint64_t v103 = v102 + 1;
          if ((unint64_t)(v102 + 1) >> 59) {
            goto LABEL_195;
          }
          uint64_t v104 = v100 - (void)v101;
          if (v104 >> 4 > v103) {
            unint64_t v103 = v104 >> 4;
          }
          if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v105 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v105 = v103;
          }
          if (v105)
          {
            if (v105 >> 59) {
              goto LABEL_193;
            }
            int8x16_t v106 = (char *)operator new(32 * v105);
          }
          else
          {
            int8x16_t v106 = 0;
          }
          float32x4_t v107 = &v106[32 * v102];
          *(void *)float32x4_t v107 = v99;
          v107[8] = v98;
          *(_OWORD *)(v107 + 9) = *(_OWORD *)buf;
          *((_DWORD *)v107 + 6) = *(_DWORD *)&buf[15];
          int8x16_t v108 = v107;
          if (v27 != v101)
          {
            do
            {
              long long v109 = *((_OWORD *)v27 - 1);
              *((_OWORD *)v108 - 2) = *((_OWORD *)v27 - 2);
              *((_OWORD *)v108 - 1) = v109;
              v108 -= 32;
              v27 -= 32;
            }
            while (v27 != v101);
            int8x16_t v27 = (char *)*v160;
          }
          int32x4_t v97 = v107 + 32;
          v22[13] = v108;
          v22[14] = v107 + 32;
          v22[15] = &v106[32 * v105];
          id v8 = a6;
          if (v27) {
            operator delete(v27);
          }
        }
        v22[14] = v97;
        v25 += 4;
      }
      *(double *)(a8 + 104) = fmax(*(double *)(a8 + 104), *((double *)v9 + 10));
      *((_DWORD *)v22 + 32) = v9[28];
      *((_DWORD *)v22 + 33) = v9[29];
      *((_DWORD *)v22 + 34) = v9[30];
      break;
    case 5:
      float64x2_t v14 = operator new(0x80uLL);
      v14[1] = 0;
      v14[2] = 0;
      *float64x2_t v14 = &unk_1EF58ACF0;
      v14[14] = 0;
      v14[15] = 0;
      v14[13] = 0;
      *((_OWORD *)v14 + 2) = 0u;
      *((_OWORD *)v14 + 3) = 0u;
      *((_OWORD *)v14 + 4) = 0u;
      *((_OWORD *)v14 + 5) = 0u;
      *(void *)((char *)v14 + 93) = 0;
      v14[3] = &unk_1EF5696F0;
      *a1 = v14 + 3;
      a1[1] = v14;
      altitude::readAnimation<gm::Matrix<float,3,1>>((uint64_t)v9, (uint64_t)(v14 + 3), a8);
      break;
    case 6:
      float v37 = operator new(0x80uLL);
      v37[1] = 0;
      v37[2] = 0;
      *float v37 = &unk_1EF58AD98;
      v37[13] = 0;
      long long v161 = (void **)(v37 + 13);
      v37[14] = 0;
      v37[15] = 0;
      *(void *)((char *)v37 + 93) = 0;
      *((_OWORD *)v37 + 4) = 0u;
      *((_OWORD *)v37 + 5) = 0u;
      *((_OWORD *)v37 + 2) = 0u;
      *((_OWORD *)v37 + 3) = 0u;
      v37[3] = &unk_1EF569D10;
      *(void *)&long long v38 = v37 + 3;
      *((void *)&v38 + 1) = v37;
      *(_OWORD *)a1 = v38;
      int v39 = *((unsigned __int16 *)v9 + 29);
      uint64_t v41 = *((void *)v9 + 11);
      uint64_t v40 = *((void *)v9 + 12);
      v37[10] = *((void *)v9 + 9);
      *((_DWORD *)v37 + 24) = v39;
      size_t v42 = v40 - v41;
      uint64_t v43 = (v40 - v41) >> 4;
      if (!v43) {
        goto LABEL_24;
      }
      if ((v42 & 0x8000000000000000) != 0) {
        goto LABEL_197;
      }
      uint64_t v44 = v37[14];
      float64x2_t v45 = (char *)operator new(v42);
      unsigned int v46 = &v45[v44];
      unsigned int v47 = &v45[v44];
      id v8 = a6;
      if (v44)
      {
        unsigned int v47 = &v45[v44];
        do
        {
          uint64_t v48 = *(void *)(v44 - 16);
          v44 -= 16;
          __int16 v49 = *(_WORD *)(v44 + 8);
          *((void *)v47 - 2) = v48;
          v47 -= 16;
          *((_WORD *)v47 + 4) = v49;
        }
        while (v44);
      }
      v37[13] = v47;
      v37[14] = v46;
      v37[15] = &v45[16 * v43];
LABEL_24:
      double v50 = *((double *)v9 + 8);
      if (*((unsigned char *)v9 + 56) == 1) {
        double v50 = v50 - *(double *)(*(void *)(*(void *)(a8 + 80) + 16 * *((unsigned __int16 *)v9 + 29)) + 8);
      }
      *((double *)v37 + 11) = v50;
      *((unsigned char *)v37 + 100) = *((unsigned char *)v9 + 57);
      double v51 = (uint64_t *)*((void *)v9 + 11);
      long long v52 = (uint64_t *)*((void *)v9 + 12);
      if (v51 == v52) {
        goto LABEL_77;
      }
      float32x2_t v53 = (char *)v37[14];
      do
      {
        char v55 = *((unsigned char *)v51 + 8);
        uint64_t v56 = *v51;
        char v57 = *((unsigned char *)v51 + 9);
        unint64_t v58 = v37[15];
        if ((unint64_t)v53 < v58)
        {
          *(void *)float32x2_t v53 = v56;
          v53[8] = v55;
          int8x16_t v54 = v53 + 16;
          v53[9] = v57;
        }
        else
        {
          float32x2_t v59 = (char *)*v161;
          uint64_t v60 = (v53 - (unsigned char *)*v161) >> 4;
          unint64_t v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 60) {
LABEL_197:
          }
            abort();
          uint64_t v62 = v58 - (void)v59;
          if (v62 >> 3 > v61) {
            unint64_t v61 = v62 >> 3;
          }
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v61;
          }
          if (v63)
          {
            if (v63 >> 60) {
LABEL_193:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            float v64 = (char *)operator new(16 * v63);
          }
          else
          {
            float v64 = 0;
          }
          float v65 = &v64[16 * v60];
          *(void *)float v65 = v56;
          v65[8] = v55;
          v65[9] = v57;
          float32_t v66 = v65;
          if (v53 != v59)
          {
            do
            {
              uint64_t v67 = *((void *)v53 - 2);
              v53 -= 16;
              __int16 v68 = *((_WORD *)v53 + 4);
              *((void *)v66 - 2) = v67;
              v66 -= 16;
              *((_WORD *)v66 + 4) = v68;
            }
            while (v53 != v59);
            float32x2_t v53 = (char *)*v161;
          }
          int8x16_t v54 = v65 + 16;
          v37[13] = v66;
          v37[14] = v65 + 16;
          v37[15] = &v64[16 * v63];
          id v8 = a6;
          if (v53) {
            operator delete(v53);
          }
        }
        v37[14] = v54;
        v51 += 2;
        float32x2_t v53 = v54;
      }
      while (v51 != v52);
LABEL_77:
      *(double *)(a8 + 104) = fmax(*(double *)(a8 + 104), *((double *)v9 + 10));
      break;
    case 7:
      double v69 = operator new(0x80uLL);
      v69[1] = 0;
      v69[2] = 0;
      *double v69 = &unk_1EF58AEB0;
      v69[14] = 0;
      v69[15] = 0;
      v69[13] = 0;
      *((_OWORD *)v69 + 2) = 0u;
      *((_OWORD *)v69 + 3) = 0u;
      *((_OWORD *)v69 + 4) = 0u;
      *((_OWORD *)v69 + 5) = 0u;
      *(void *)((char *)v69 + 93) = 0;
      v69[3] = &unk_1EF56AB98;
      *(void *)&long long v70 = v69 + 3;
      *((void *)&v70 + 1) = v69;
      *(_OWORD *)a1 = v70;
      altitude::readAnimation<gm::Matrix<float,3,1>>((uint64_t)v9, (uint64_t)(v69 + 3), a8);
      break;
    case 8:
      float64x2_t v28 = operator new(0x58uLL);
      v28[1] = 0;
      v28[2] = 0;
      *float64x2_t v28 = &unk_1EF58AEE8;
      *((_OWORD *)v28 + 2) = 0u;
      *((_OWORD *)v28 + 3) = 0u;
      *((_OWORD *)v28 + 4) = 0u;
      v28[3] = &unk_1EF56B050;
      *(void *)&long long v29 = v28 + 3;
      *((void *)&v29 + 1) = v28;
      *(_OWORD *)a1 = v29;
      *((_DWORD *)v28 + 20) = v9[14];
      goto LABEL_109;
    default:
      __int32 v71 = operator new(0x50uLL);
      v71[1] = 0;
      v71[2] = 0;
      *__int32 v71 = &unk_1EF58B000;
      v71[3] = &unk_1EF56B530;
      *((_OWORD *)v71 + 2) = 0u;
      *((_OWORD *)v71 + 3) = 0u;
      *((_OWORD *)v71 + 4) = 0u;
      *(void *)&long long v72 = v71 + 3;
      *((void *)&v72 + 1) = v71;
      *(_OWORD *)a1 = v72;
      if (v10)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        float v73 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          int v74 = **a5;
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v74;
          _os_log_impl(&dword_1A1780000, v73, OS_LOG_TYPE_ERROR, "Unhandled node type: %d fall back to C3M_SG_NODE", buf, 8u);
        }
      }
      break;
  }
  if (*a1)
  {
    double v9 = *a5;
LABEL_109:
    v158 = (int *)*((void *)v9 + 1);
    uint64_t v155 = (int *)*((void *)v9 + 2);
    if (v158 != v155 && a3[17] != a3[18])
    {
      __asm { FMOV            V8.2S, #1.0 }
      do
      {
        uint64_t v117 = a3[17];
        uint64_t v116 = a3[18];
        if (v117 != v116)
        {
          int v118 = *v158;
          do
          {
            if (*(_DWORD *)(v117 + 4) == v118)
            {
              altitude::util::createMeshIndexData((void *)v117, v12);
              if (*(unsigned int *)(v117 + 32) < (unint64_t)((uint64_t)(v8[1] - *v8) >> 4))
              {
                uint64_t v170 = _D8;
                uint64_t v169 = 0;
                altitude::util::computeBounds((uint64_t)&v172, (uint64_t *)(v117 + 40), (unint64_t *)(v117 + 64));
                unint64_t v119 = *(unsigned int *)(v117 + 32);
                if (v119 >= (uint64_t)(a7[1] - *a7) >> 4) {
                  uint64_t v120 = 0;
                }
                else {
                  uint64_t v120 = *(void *)(*a7 + 16 * v119);
                }
                unint64_t v122 = *(void *)(v117 + 48);
                v174.n128_u64[0] = *(void *)(v117 + 40);
                v174.n128_u64[1] = v122;
                if (v122) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v122 + 8), 1uLL, memory_order_relaxed);
                }
                if (v120) {
                  operator new();
                }
                operator new();
              }
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              double v121 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1A1780000, v121, OS_LOG_TYPE_ERROR, "Missing texture", buf, 2u);
              }
            }
            v117 += 120;
          }
          while (v117 != v116);
        }
        ++v158;
      }
      while (v158 != v155);
      double v9 = *a5;
    }
    uint64_t v136 = a3[20];
    memset(buf, 0, 24);
    double v137 = (unsigned int *)*((void *)v9 + 4);
    double v138 = (unsigned int *)*((void *)v9 + 5);
    if (v137 != v138)
    {
      double v139 = 0;
      do
      {
        __n128 v140 = *(__n128 *)(*(void *)(v136 + 24) + 16 * *v137);
        if ((unint64_t)v139 >= *(void *)&buf[16])
        {
          double v139 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)buf, v140);
        }
        else
        {
          __n128 *v139 = v140;
          if (v140.n128_u64[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v140.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
          }
          ++v139;
        }
        *(void *)&buf[8] = v139;
        ++v137;
      }
      while (v137 != v138);
      int v141 = *(__n128 **)buf;
      if (*(__n128 **)buf != v139)
      {
        while (1)
        {
          unint64_t v142 = v141->n128_u64[0];
          *(void *)&long long v172 = v141->n128_u64[0];
          long long v143 = (std::__shared_weak_count *)v141->n128_u64[1];
          *((void *)&v172 + 1) = v143;
          if (v143)
          {
            atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v168 = v143;
            atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            uint64_t v168 = 0;
          }
          unint64_t v167 = v142;
          altitude::loadSceneGraphNode(&v174, a2, a3, a4, &v167, a6, a7, a8);
          if (v143 && !atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
            unint64_t v144 = v174.n128_u64[0];
            if (!v174.n128_u64[0]) {
              goto LABEL_173;
            }
          }
          else
          {
            unint64_t v144 = v174.n128_u64[0];
            if (!v174.n128_u64[0]) {
              goto LABEL_173;
            }
          }
          uint64_t v145 = *a1;
          long long v146 = *(__n128 **)(*a1 + 16);
          if ((unint64_t)v146 >= *(void *)(*a1 + 24))
          {
            long long v148 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(v145 + 8, v174);
          }
          else
          {
            v146->n128_u64[0] = v144;
            unint64_t v147 = v174.n128_u64[1];
            v146->n128_u64[1] = v174.n128_u64[1];
            if (v147) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v147 + 8), 1uLL, memory_order_relaxed);
            }
            long long v148 = v146 + 1;
          }
          *(void *)(v145 + 16) = v148;
LABEL_173:
          long long v149 = (std::__shared_weak_count *)v174.n128_u64[1];
          if (v174.n128_u64[1]
            && !atomic_fetch_add((atomic_ullong *volatile)(v174.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
            uint64_t v150 = (std::__shared_weak_count *)*((void *)&v172 + 1);
            if (*((void *)&v172 + 1))
            {
LABEL_176:
              if (!atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
          }
          else
          {
            uint64_t v150 = (std::__shared_weak_count *)*((void *)&v172 + 1);
            if (*((void *)&v172 + 1)) {
              goto LABEL_176;
            }
          }
          if (++v141 == v139)
          {
            double v139 = *(__n128 **)buf;
            break;
          }
        }
      }
      if (v139)
      {
        unint64_t v151 = *(__n128 **)&buf[8];
        uint64_t v152 = v139;
        if (*(__n128 **)&buf[8] != v139)
        {
          do
          {
            int v153 = (std::__shared_weak_count *)v151[-1].n128_u64[1];
            if (v153 && !atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
            --v151;
          }
          while (v151 != v139);
          uint64_t v152 = *(__n128 **)buf;
        }
        *(void *)&buf[8] = v139;
        operator delete(v152);
      }
    }
  }
}

void sub_1A25C5488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

void altitude::readAnimation<gm::Matrix<float,3,1>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 56) = *(void *)(a1 + 72);
  *(_DWORD *)(a2 + 72) = *(unsigned __int16 *)(a1 + 58);
  int64_t v6 = *(void *)(a1 + 96) - *(void *)(a1 + 88);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  id v8 = *(unsigned char **)(a2 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 96) - (void)v8) >> 3) < v7)
  {
    if (v7 > 0xAAAAAAAAAAAAAAALL) {
LABEL_32:
    }
      abort();
    double v9 = *(unsigned char **)(a2 + 88);
    int v10 = (char *)operator new(v6);
    uint64_t v11 = &v10[24 * ((v9 - v8) / 24)];
    uint64_t v12 = v11;
    if (v9 != v8)
    {
      float64x2_t v13 = &v10[24 * ((v9 - v8) / 24)];
      do
      {
        uint64_t v12 = v13 - 24;
        long long v14 = *(_OWORD *)(v9 - 24);
        *((void *)v13 - 1) = *((void *)v9 - 1);
        *(_OWORD *)(v13 - 24) = v14;
        v9 -= 24;
        v13 -= 24;
      }
      while (v9 != v8);
    }
    *(void *)(a2 + 80) = v12;
    *(void *)(a2 + 88) = v11;
    *(void *)(a2 + 96) = &v10[24 * v7];
    if (v8) {
      operator delete(v8);
    }
  }
  double v15 = *(double *)(a1 + 64);
  uint64_t v33 = a3;
  if (*(unsigned char *)(a1 + 56) == 1) {
    double v15 = v15 - *(double *)(*(void *)(*(void *)(a3 + 80) + 16 * *(unsigned __int16 *)(a1 + 58)) + 8);
  }
  *(double *)(a2 + 64) = v15;
  *(unsigned char *)(a2 + 76) = *(unsigned char *)(a1 + 57);
  uint64_t v32 = a1;
  uint64_t v16 = *(uint64_t **)(a1 + 88);
  int64x2_t v17 = *(uint64_t **)(a1 + 96);
  if (v16 != v17)
  {
    float64x2_t v18 = *(char **)(a2 + 88);
    do
    {
      char v20 = *((unsigned char *)v16 + 8);
      uint64_t v21 = *v16;
      *(void *)&v34[3] = *(uint64_t *)((char *)v16 + 12);
      *(_DWORD *)&v34[11] = *((_DWORD *)v16 + 5);
      unint64_t v22 = *(void *)(a2 + 96);
      if ((unint64_t)v18 < v22)
      {
        *(void *)float64x2_t v18 = v21;
        v18[8] = v20;
        *(void *)(v18 + 9) = *(void *)v34;
        *((void *)v18 + 2) = *(void *)&v34[7];
        int64_t v19 = v18 + 24;
      }
      else
      {
        uint64_t v23 = *(unsigned char **)(a2 + 80);
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v23) >> 3) + 1;
        if (v24 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_32;
        }
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v23) >> 3);
        if (2 * v25 > v24) {
          unint64_t v24 = 2 * v25;
        }
        if (v25 >= 0x555555555555555) {
          unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          if (v26 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int8x16_t v27 = (char *)operator new(24 * v26);
        }
        else
        {
          int8x16_t v27 = 0;
        }
        float64x2_t v28 = &v27[8 * ((v18 - v23) >> 3)];
        *(void *)float64x2_t v28 = v21;
        v28[8] = v20;
        *(void *)(v28 + 9) = *(void *)v34;
        *((void *)v28 + 2) = *(void *)&v34[7];
        long long v29 = v28;
        if (v18 != v23)
        {
          do
          {
            long long v30 = *(_OWORD *)(v18 - 24);
            *((void *)v29 - 1) = *((void *)v18 - 1);
            *(_OWORD *)(v29 - 24) = v30;
            v29 -= 24;
            v18 -= 24;
          }
          while (v18 != v23);
          float64x2_t v18 = *(char **)(a2 + 80);
        }
        int v31 = &v27[24 * v26];
        int64_t v19 = v28 + 24;
        *(void *)(a2 + 80) = v29;
        *(void *)(a2 + 88) = v28 + 24;
        *(void *)(a2 + 96) = v31;
        if (v18) {
          operator delete(v18);
        }
      }
      *(void *)(a2 + 88) = v19;
      v16 += 3;
      float64x2_t v18 = v19;
    }
    while (v16 != v17);
  }
  *(double *)(v33 + 104) = fmax(*(double *)(v33 + 104), *(double *)(v32 + 80));
}

uint64_t std::__shared_ptr_emplace<altitude::SgNode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::SgNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::SgNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void altitude::SgExternalObjectPlaceHolder::~SgExternalObjectPlaceHolder(altitude::SgExternalObjectPlaceHolder *this)
{
  *(void *)this = &unk_1EF56B530;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 2);
    uint64_t v5 = (void *)*((void *)this + 1);
    if (v4 != v3)
    {
      do
      {
        int64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 16;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_1EF56B530;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 2);
    uint64_t v5 = (void *)*((void *)this + 1);
    if (v4 != v3)
    {
      do
      {
        int64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v3;
    operator delete(v5);
  }
}

uint64_t std::__shared_ptr_emplace<altitude::SgExternalObjectPlaceHolder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::SgExternalObjectPlaceHolder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AEE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::SgExternalObjectPlaceHolder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AEE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<altitude::SgTranslationAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::SgTranslationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AEB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::SgTranslationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AEB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<altitude::SgSwitchAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::SgSwitchAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AD98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::SgSwitchAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AD98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<altitude::SgScaleAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::SgScaleAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58ACF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::SgScaleAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58ACF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<altitude::SgRotationAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::SgRotationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AE08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::SgRotationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AE08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<altitude::SgMatrixAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::SgMatrixAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AD28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::SgMatrixAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AD28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<altitude::SgFixedAxisRotationAnimation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::SgFixedAxisRotationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AF20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::SgFixedAxisRotationAnimation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AF20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<altitude::SgStaticTransform>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::SgStaticTransform>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AD60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::SgStaticTransform>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AD60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<altitude::SceneGraph>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[13];
  if (v2)
  {
    uint64_t v3 = a1[14];
    uint64_t v4 = (void *)a1[13];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[13];
    }
    a1[14] = v2;
    operator delete(v4);
  }
  uint64_t v6 = a1[3];
  if (v6)
  {
    uint64_t v7 = a1[4];
    id v8 = (void *)a1[3];
    if (v7 != v6)
    {
      do
      {
        double v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      id v8 = (void *)a1[3];
    }
    a1[4] = v6;
    operator delete(v8);
  }
}

void std::__shared_ptr_emplace<altitude::SceneGraph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AA88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::SceneGraph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AA88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void altitude::loadSceneGraphPlaceHolderNodes(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a1;
  uint64_t v7 = (_DWORD *)*a3;
  if (*(_DWORD *)*a3 == 8)
  {
    id v8 = operator new(0x58uLL);
    v8[1] = 0;
    v8[2] = 0;
    void *v8 = &unk_1EF58AEE8;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    v8[3] = &unk_1EF56B050;
    v58.n128_u64[0] = (unint64_t)(v8 + 3);
    v58.n128_u64[1] = (unint64_t)v8;
    *((_DWORD *)v8 + 20) = v7[14];
    double v51 = (int *)*((void *)v7 + 2);
    long long v52 = (int *)*((void *)v7 + 1);
    if (v52 != v51 && *(void *)(a2 + 48) != *(void *)(a2 + 56))
    {
      uint64_t v50 = a2;
      do
      {
        int v10 = *(uint64_t **)(a2 + 48);
        double v9 = *(uint64_t **)(a2 + 56);
        if (v10 != v9)
        {
          int v11 = *v52;
          int v53 = *v52;
          do
          {
            uint64_t v13 = *v10;
            if (*(_DWORD *)(*v10 + 172) == v11)
            {
              long long v14 = (void *)v58.n128_u64[0];
              uint64_t v16 = *(char **)(v58.n128_u64[0] + 40);
              unint64_t v15 = *(void *)(v58.n128_u64[0] + 48);
              if ((unint64_t)v16 < v15)
              {
                *(void *)uint64_t v16 = v13;
                uint64_t v12 = v16 + 8;
              }
              else
              {
                int64x2_t v17 = *(char **)(v58.n128_u64[0] + 32);
                uint64_t v18 = (v16 - v17) >> 3;
                unint64_t v19 = v18 + 1;
                if ((unint64_t)(v18 + 1) >> 61) {
                  abort();
                }
                uint64_t v20 = v15 - (void)v17;
                if (v20 >> 2 > v19) {
                  unint64_t v19 = v20 >> 2;
                }
                if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v21 = v19;
                }
                if (v21)
                {
                  if (v21 >> 61) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  unint64_t v22 = (char *)operator new(8 * v21);
                }
                else
                {
                  unint64_t v22 = 0;
                }
                uint64_t v23 = &v22[8 * v18];
                *(void *)uint64_t v23 = v13;
                uint64_t v12 = v23 + 8;
                if (v16 != v17)
                {
                  unint64_t v24 = v16 - 8 - v17;
                  if (v24 < 0x58) {
                    goto LABEL_81;
                  }
                  if ((unint64_t)(v17 - v22) < 0x20) {
                    goto LABEL_81;
                  }
                  uint64_t v25 = (v24 >> 3) + 1;
                  unint64_t v26 = &v22[8 * v18 - 16];
                  int8x16_t v27 = (long long *)(v16 - 16);
                  uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v29 = *v27;
                    *((_OWORD *)v26 - 1) = *(v27 - 1);
                    *(_OWORD *)unint64_t v26 = v29;
                    v26 -= 32;
                    v27 -= 2;
                    v28 -= 4;
                  }
                  while (v28);
                  v23 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
                  v16 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_81:
                    do
                    {
                      uint64_t v30 = *((void *)v16 - 1);
                      v16 -= 8;
                      *((void *)v23 - 1) = v30;
                      v23 -= 8;
                    }
                    while (v16 != v17);
                  }
                  uint64_t v16 = (char *)v14[4];
                }
                v14[4] = v23;
                v14[5] = v12;
                v14[6] = &v22[8 * v21];
                if (v16) {
                  operator delete(v16);
                }
                int v11 = v53;
              }
              v14[5] = v12;
            }
            ++v10;
          }
          while (v10 != v9);
        }
        ++v52;
        a2 = v50;
      }
      while (v52 != v51);
    }
    uint64_t v4 = a4;
    uint64_t v31 = *a4;
    uint64_t v32 = *(__n128 **)(*a4 + 8);
    uint64_t v33 = a2;
    if ((unint64_t)v32 >= *(void *)(*a4 + 16))
    {
      uint64_t v35 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(*a4, v58);
      float v34 = (std::__shared_weak_count *)v58.n128_u64[1];
    }
    else
    {
      v32->n128_u64[0] = v58.n128_u64[0];
      float v34 = (std::__shared_weak_count *)v58.n128_u64[1];
      v32->n128_u64[1] = v58.n128_u64[1];
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = v32 + 1;
    }
    uint64_t v6 = a1;
    *(void *)(v31 + 8) = v35;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    uint64_t v7 = (_DWORD *)*a3;
    a2 = v33;
  }
  uint64_t v36 = *(void *)(v6 + 160);
  unint64_t v59 = 0;
  __n128 v58 = 0uLL;
  float v37 = (unsigned int *)*((void *)v7 + 4);
  long long v38 = (unsigned int *)*((void *)v7 + 5);
  if (v37 != v38)
  {
    int v39 = 0;
    do
    {
      __n128 v40 = *(__n128 *)(*(void *)(v36 + 24) + 16 * *v37);
      if ((unint64_t)v39 >= v59)
      {
        int v39 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v58, v40);
      }
      else
      {
        *int v39 = v40;
        if (v40.n128_u64[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v40.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
        }
        ++v39;
      }
      v58.n128_u64[1] = (unint64_t)v39;
      ++v37;
    }
    while (v37 != v38);
    uint64_t v41 = (__n128 *)v58.n128_u64[0];
    if ((__n128 *)v58.n128_u64[0] != v39)
    {
      while (1)
      {
        unint64_t v42 = v41->n128_u64[0];
        unint64_t v56 = v41->n128_u64[0];
        uint64_t v43 = (std::__shared_weak_count *)v41->n128_u64[1];
        char v57 = v43;
        if (v43)
        {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          char v55 = v43;
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          char v55 = 0;
        }
        unint64_t v54 = v42;
        altitude::loadSceneGraphPlaceHolderNodes(v6, a2, &v54, v4);
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
          uint64_t v44 = v57;
          if (v57)
          {
LABEL_60:
            if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
        }
        else
        {
          uint64_t v44 = v57;
          if (v57) {
            goto LABEL_60;
          }
        }
        if (++v41 == v39)
        {
          int v39 = (__n128 *)v58.n128_u64[0];
          break;
        }
      }
    }
    if (v39)
    {
      unint64_t v45 = v58.n128_u64[1];
      if ((__n128 *)v58.n128_u64[1] != v39)
      {
        do
        {
          unsigned int v46 = *(std::__shared_weak_count **)(v45 - 8);
          if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
          v45 -= 16;
        }
        while ((__n128 *)v45 != v39);
        int v39 = (__n128 *)v58.n128_u64[0];
      }
      operator delete(v39);
    }
  }
}

void sub_1A25C66D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL md::MaterialRenderBatchKey::operator!=(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)(a1 + 64) != *(void *)(a2 + 64)
    || *(void *)a1 != *(void *)a2
    || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)
    || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)
    || *(unsigned __int8 *)(a1 + 74) != *(unsigned __int8 *)(a2 + 74)
    || *(unsigned __int8 *)(a1 + 75) != *(unsigned __int8 *)(a2 + 75)
    || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)
    || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    BOOL v6 = v5 == *(void *)(a2 + 16);
  }
  else {
    BOOL v6 = 1;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v6) {
    BOOL v4 = 1;
  }
  if (v7) {
    BOOL v8 = v7 == *(void *)(a2 + 32);
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (!v8) {
    BOOL v4 = 1;
  }
  if (v9) {
    BOOL v10 = v9 == *(void *)(a2 + 48);
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    BOOL v4 = 1;
  }
  if (v4
    || *(void *)(a1 + 80) != *(void *)(a2 + 80)
    || *(void *)(a1 + 96) != *(void *)(a2 + 96)
    || *(void *)(a1 + 104) != *(void *)(a2 + 104)
    || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120)
    || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121)
    || *(unsigned __int8 *)(a1 + 122) != *(unsigned __int8 *)(a2 + 122)
    || std::operator!=[abi:nn180100]<geo::Color<float,4,(geo::ColorSpace)0>,geo::Color<float,4,(geo::ColorSpace)0>>(a1 + 124, a2 + 124))
  {
    return 1;
  }
  if (*(unsigned char *)(a1 + 148) && *(unsigned char *)(a2 + 148))
  {
    if (*(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 1;
    }
  }
  else if ((*(unsigned char *)(a1 + 148) != 0) != (*(unsigned char *)(a2 + 148) != 0))
  {
    return 1;
  }
  if (*(unsigned char *)(a1 + 217) && *(unsigned char *)(a2 + 217))
  {
    if (*(unsigned __int8 *)(a1 + 216) != *(unsigned __int8 *)(a2 + 216)) {
      return 1;
    }
  }
  else if ((*(unsigned char *)(a1 + 217) != 0) != (*(unsigned char *)(a2 + 217) != 0))
  {
    return 1;
  }
  if (*(unsigned char *)(a1 + 208) && *(unsigned char *)(a2 + 208))
  {
    if (!md::RasterOverlayRenderPatch::operator!=((void *)(a1 + 152), (void *)(a2 + 152))) {
      return *(unsigned __int8 *)(a1 + 218) != *(unsigned __int8 *)(a2 + 218);
    }
  }
  else if ((*(unsigned char *)(a1 + 208) != 0) == (*(unsigned char *)(a2 + 208) != 0))
  {
    return *(unsigned __int8 *)(a1 + 218) != *(unsigned __int8 *)(a2 + 218);
  }
  return 1;
}

BOOL std::operator!=[abi:nn180100]<geo::Color<float,4,(geo::ColorSpace)0>,geo::Color<float,4,(geo::ColorSpace)0>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16)) {
    BOOL v2 = *(unsigned char *)(a2 + 16) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(unsigned char *)(a1 + 16) != 0) ^ (*(unsigned char *)(a2 + 16) != 0);
  }
  return *(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8);
}

BOOL md::MaterialDecalRenderBatchKey::operator!=(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void *)(a1 + 64) != *(void *)(a2 + 64)
    || *(void *)a1 != *(void *)a2
    || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)
    || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)
    || *(unsigned __int8 *)(a1 + 74) != *(unsigned __int8 *)(a2 + 74)
    || *(unsigned __int8 *)(a1 + 75) != *(unsigned __int8 *)(a2 + 75)
    || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)
    || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    BOOL v4 = v3 == *(void *)(a2 + 16);
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v4) {
    BOOL v2 = 1;
  }
  if (v5) {
    BOOL v6 = v5 == *(void *)(a2 + 32);
  }
  else {
    BOOL v6 = 1;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (!v6) {
    BOOL v2 = 1;
  }
  if (v7) {
    BOOL v8 = v7 == *(void *)(a2 + 48);
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    BOOL v2 = 1;
  }
  return v2 || *(void *)(a1 + 80) != *(void *)(a2 + 80) || *(void *)(a1 + 96) != *(void *)(a2 + 96);
}

BOOL md::DynamicTypedRenderBatchKey::operator!=(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void *)(a1 + 64) != *(void *)(a2 + 64)
    || *(void *)a1 != *(void *)a2
    || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)
    || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)
    || *(unsigned __int8 *)(a1 + 74) != *(unsigned __int8 *)(a2 + 74)
    || *(unsigned __int8 *)(a1 + 75) != *(unsigned __int8 *)(a2 + 75)
    || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)
    || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    BOOL v4 = v3 == *(void *)(a2 + 16);
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v4) {
    BOOL v2 = 1;
  }
  if (v5) {
    BOOL v6 = v5 == *(void *)(a2 + 32);
  }
  else {
    BOOL v6 = 1;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (!v6) {
    BOOL v2 = 1;
  }
  if (v7) {
    BOOL v8 = v7 == *(void *)(a2 + 48);
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    BOOL v2 = 1;
  }
  return v2 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80);
}

void md::PuckRenderResources::update(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5, float a6)
{
  id v11 = a2;
  uint64_t v12 = (uint64_t *)(a1 + 96);
  if (*(unsigned char *)(a5 + 73) != 1) {
    uint64_t v12 = (uint64_t *)(a1 + 96 + 16 * a4);
  }
  uint64_t v13 = *v12;
  *(void *)(*(void *)(a1 + 144) + 24) = v13;
  *(void *)(*(void *)(a1 + 160) + 24) = v13;
  uint64_t v14 = *(void *)(a1 + 224);
  if (!v14)
  {
    unint64_t v15 = (std::__shared_weak_count *)operator new(0x58uLL);
    v15->__shared_owners_ = 0;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583858;
    v15[1].__shared_weak_owners_ = 0;
    v15[2].__vftable = 0;
    v15[1].__shared_owners_ = 0;
    LODWORD(v15[2].__shared_owners_) = 0;
    v15->__shared_weak_owners_ = 0;
    v15[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55AE58;
    *(void *)&long long v16 = 0x100000001;
    *((void *)&v16 + 1) = 0x100000001;
    *(_OWORD *)((char *)&v15[2].__shared_owners_ + 4) = v16;
    *(std::__shared_weak_count_vtbl **)((char *)&v15[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
    HIDWORD(v15[3].__shared_owners_) = 0;
    uint64_t v44 = v15 + 1;
    unint64_t v45 = v15;
    if (v11)
    {
      [v11 textureManager];
      int64x2_t v17 = v40;
    }
    else
    {
      int64x2_t v17 = 0;
      __n128 v40 = 0;
      uint64_t v41 = 0;
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
    v38[1] = (uint64_t)v15;
    strcpy((char *)&__p, "puckCircle");
    v38[0] = (uint64_t)&v15[1];
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    md::TextureManager::texture(&v42, v17, (uint64_t)&__p, v38, 0, a6);
    if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_9:
        uint64_t v18 = v41;
        if (!v41) {
          goto LABEL_14;
        }
        goto LABEL_13;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v18 = v41;
    if (!v41) {
      goto LABEL_14;
    }
LABEL_13:
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      unint64_t v19 = v42;
      if (v42)
      {
LABEL_15:
        atomic_ullong v20 = v19[4];
        unint64_t v19 = (atomic_ullong *)v19[5];
        if (v19) {
          atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
        }
        goto LABEL_19;
      }
LABEL_18:
      atomic_ullong v20 = 0;
LABEL_19:
      unint64_t v21 = *(std::__shared_weak_count **)(a1 + 232);
      *(void *)(a1 + 224) = v20;
      *(void *)(a1 + 232) = v19;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      unint64_t v22 = v43;
      if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v23 = v45;
      if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      uint64_t v14 = *(void *)(a1 + 224);
      goto LABEL_29;
    }
LABEL_14:
    unint64_t v19 = v42;
    if (v42) {
      goto LABEL_15;
    }
    goto LABEL_18;
  }
LABEL_29:
  **(void **)(*(void *)(a1 + 32) + 96) = v14;
  uint64_t v24 = *(void *)(a1 + 208);
  if (!v24)
  {
    int v25 = *(_DWORD *)(a3 + 44);
LABEL_33:
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    *(_DWORD *)(a1 + 256) = v25;
    if (v25 == 1)
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      LODWORD(__p.__r_.__value_.__l.__data_) = 1802264951;
      unsigned __int16 v26 = 26987;
    }
    else
    {
      if (v25) {
        goto LABEL_38;
      }
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      LODWORD(__p.__r_.__value_.__l.__data_) = 1986622052;
      unsigned __int16 v26 = 26998;
    }
    *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) = v26 | 0x676E0000;
    __p.__r_.__value_.__s.__data_[7] = 0;
LABEL_38:
    std::string::append(&__p, "PuckArrowMask", 0xDuLL);
    int8x16_t v27 = (std::__shared_weak_count *)operator new(0x58uLL);
    v27->__shared_owners_ = 0;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583858;
    v27[1].__shared_weak_owners_ = 0;
    v27[2].__vftable = 0;
    v27[1].__shared_owners_ = 0;
    LODWORD(v27[2].__shared_owners_) = 0;
    v27->__shared_weak_owners_ = 0;
    v27[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55AE58;
    *(void *)&long long v28 = 0x100000001;
    *((void *)&v28 + 1) = 0x100000001;
    *(_OWORD *)((char *)&v27[2].__shared_owners_ + 4) = v28;
    *(std::__shared_weak_count_vtbl **)((char *)&v27[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
    HIDWORD(v27[3].__shared_owners_) = 0;
    uint64_t v44 = v27 + 1;
    unint64_t v45 = v27;
    if (v11)
    {
      [v11 textureManager];
      long long v29 = v40;
    }
    else
    {
      long long v29 = 0;
      __n128 v40 = 0;
      uint64_t v41 = 0;
    }
    v37[0] = (uint64_t)&v27[1];
    v37[1] = (uint64_t)v27;
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    md::TextureManager::texture(&v42, v29, (uint64_t)&__p, v37, 0, a6);
    if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v30 = v41;
      if (!v41) {
        goto LABEL_46;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      uint64_t v30 = v41;
      if (!v41) {
        goto LABEL_46;
      }
    }
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      uint64_t v31 = v42;
      if (v42)
      {
LABEL_47:
        atomic_ullong v32 = v31[4];
        uint64_t v31 = (atomic_ullong *)v31[5];
        if (v31) {
          atomic_fetch_add_explicit(v31 + 1, 1uLL, memory_order_relaxed);
        }
LABEL_51:
        uint64_t v33 = *(std::__shared_weak_count **)(a1 + 216);
        *(void *)(a1 + 208) = v32;
        *(void *)(a1 + 216) = v31;
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        float v34 = v43;
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          uint64_t v35 = v45;
          if (!v45) {
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v35 = v45;
          if (!v45) {
            goto LABEL_58;
          }
        }
        if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_60;
          }
          goto LABEL_59;
        }
LABEL_58:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_60:
          uint64_t v24 = *(void *)(a1 + 208);
          goto LABEL_61;
        }
LABEL_59:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_60;
      }
LABEL_50:
      atomic_ullong v32 = 0;
      goto LABEL_51;
    }
LABEL_46:
    uint64_t v31 = v42;
    if (v42) {
      goto LABEL_47;
    }
    goto LABEL_50;
  }
  int v25 = *(_DWORD *)(a3 + 44);
  if (*(_DWORD *)(a1 + 256) != v25) {
    goto LABEL_33;
  }
LABEL_61:
  **(void **)(*(void *)(a1 + 48) + 96) = v24;
  if (!*(unsigned char *)(a5 + 73))
  {
    uint64_t v36 = *(void *)(a1 + 128);
    *(void *)(*(void *)(a1 + 176) + 24) = v36;
    *(void *)(*(void *)(a1 + 192) + 24) = v36;
    **(void **)(*(void *)(a1 + 64) + 96) = *(void *)(a1 + 224);
    **(void **)(*(void *)(a1 + 80) + 96) = *(void *)(a1 + 208);
  }
}

void sub_1A25C71E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a24);

  _Unwind_Resume(a1);
}

uint64_t *ggl::ConstantDataTyped<ggl::Textured::Style>::write(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  *a1 = 0;
  a1[1] = 0;
  unint64_t v2 = *(void *)(a2 + 8);
  id v11 = 0;
  uint64_t v12 = a2;
  unint64_t v13 = 0;
  unint64_t v14 = v2;
  __int16 v15 = 1;
  if (v2) {
    unint64_t v2 = *(void *)(a2 + 72);
  }
  unint64_t v16 = v2;
  __n128 result = ggl::BufferMemory::operator=(a1, (uint64_t)&v11);
  if (v16)
  {
    unint64_t v5 = v13;
    unint64_t v4 = v14;
    if (v14 != v13)
    {
      __n128 result = v11;
      BOOL v6 = (void *)v12;
      int v7 = v15;
      int v8 = HIBYTE(v15);
      if (v11 && *(unsigned char *)(v12 + 17) != 2) {
        __n128 result = (uint64_t *)(*(uint64_t (**)(void))(*v11 + 64))();
      }
      if (v7 && !v8)
      {
        unint64_t v10 = v6[7];
        unint64_t v9 = v6[8];
        if (v9 == v10) {
          unint64_t v10 = v6[10] - v6[9];
        }
        if (v5 < v10) {
          unint64_t v10 = v5;
        }
        if (v9 <= v4) {
          unint64_t v9 = v4;
        }
        if (v9 == v10) {
          unint64_t v9 = v10 + v6[10] - v6[9];
        }
        v6[7] = v10;
        v6[8] = v9;
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5713D0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5713D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571388;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF571388;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PuckRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::PuckRenderLayer::~PuckRenderLayer(md::PuckRenderLayer *this)
{
  *(void *)this = &unk_1EF535228;
  uint64_t v2 = (md::PuckRenderResources *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2)
  {
    md::PuckRenderResources::~PuckRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = &unk_1EF530C60;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  md::PuckRenderResources *v2;
  void *v3;

  *(void *)this = &unk_1EF535228;
  uint64_t v2 = (md::PuckRenderResources *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2)
  {
    md::PuckRenderResources::~PuckRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = &unk_1EF530C60;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void md::PuckRenderResources::~PuckRenderResources(md::PuckRenderResources *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 29);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 29);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 25);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 25);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  BOOL v6 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    int v7 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v7) {
      goto LABEL_19;
    }
  }
  else
  {
    int v7 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v7) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_19:
  int v8 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 17);
    if (!v9) {
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 17);
    if (!v9) {
      goto LABEL_25;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_25:
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    id v11 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v11) {
      goto LABEL_31;
    }
  }
  else
  {
    id v11 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v11) {
      goto LABEL_31;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_31:
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    unint64_t v13 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v13) {
      goto LABEL_37;
    }
  }
  else
  {
    unint64_t v13 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v13) {
      goto LABEL_37;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_37:
  unint64_t v14 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    __int16 v15 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v15) {
      goto LABEL_43;
    }
  }
  else
  {
    __int16 v15 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v15) {
      goto LABEL_43;
    }
  }
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_43:
  unint64_t v16 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    int64x2_t v17 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v17) {
      return;
    }
  }
  else
  {
    int64x2_t v17 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v17) {
      return;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

uint64_t std::__shared_ptr_emplace<ggl::RenderItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::RenderItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::RenderItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::TextureAlphaMask::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TextureAlphaMask::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::TextureAlphaMask::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TextureAlphaMask::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5865D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5865D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5858B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5858B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::Textured::Pos2DUVExtendedPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Textured::Pos2DUVExtendedPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589B38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Textured::Pos2DUVExtendedPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5858F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5858F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      unsigned int v8 = *(unsigned __int8 *)(v6 + 52);
      unsigned int v9 = *(unsigned __int8 *)(*a1 + 52);
      BOOL v10 = v8 == v9;
      BOOL v11 = v8 < v9;
      if (v10) {
        BOOL v11 = v6 < *a1;
      }
      if (v11)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      unint64_t v12 = *a1;
      unint64_t v13 = a1[1];
      unsigned int v14 = *(unsigned __int8 *)(v13 + 52);
      unsigned int v15 = *(unsigned __int8 *)(*a1 + 52);
      BOOL v16 = v14 < v15;
      if (v14 == v15) {
        BOOL v16 = v13 < *a1;
      }
      unint64_t v17 = *(a2 - 1);
      unsigned int v18 = *(unsigned __int8 *)(v17 + 52);
      BOOL v10 = v18 == v14;
      BOOL v19 = v18 < v14;
      if (v10) {
        BOOL v19 = v17 < v13;
      }
      if (v16)
      {
        if (v19)
        {
          *a1 = v17;
          *(a2 - 1) = v12;
        }
        else
        {
          *a1 = v13;
          a1[1] = v12;
          unint64_t v72 = *(a2 - 1);
          unsigned int v73 = *(unsigned __int8 *)(v72 + 52);
          BOOL v10 = v73 == v15;
          BOOL v74 = v73 < v15;
          if (v10) {
            BOOL v74 = v72 < v12;
          }
          if (v74)
          {
            a1[1] = v72;
            *(a2 - 1) = v12;
          }
        }
      }
      else if (v19)
      {
        a1[1] = v17;
        *(a2 - 1) = v13;
        unint64_t v53 = *a1;
        unint64_t v52 = a1[1];
        unsigned int v54 = *(unsigned __int8 *)(v52 + 52);
        unsigned int v55 = *(unsigned __int8 *)(*a1 + 52);
        BOOL v10 = v54 == v55;
        BOOL v56 = v54 < v55;
        if (v10) {
          BOOL v56 = v52 < *a1;
        }
        if (v56)
        {
          *a1 = v52;
          a1[1] = v53;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v33 = a1 + 1;
      float v34 = a1 + 2;
      uint64_t v35 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::getGridItems(gm::Box<int,2> const&,md::LabelCollidableItem const&,md::SimpleBuffer<md::LabelCollidableItem*,20ul> &)::$_0 &,md::LabelCollidableItem**>(a1, a1 + 1, a1 + 2, a1 + 3);
      unint64_t v36 = *(a2 - 1);
      unint64_t v37 = a1[3];
      unsigned int v38 = *(unsigned __int8 *)(v36 + 52);
      unsigned int v39 = *(unsigned __int8 *)(v37 + 52);
      BOOL v10 = v38 == v39;
      BOOL v40 = v38 < v39;
      if (v10) {
        BOOL v40 = v36 < v37;
      }
      if (v40)
      {
        *uint64_t v35 = v36;
        *(a2 - 1) = v37;
        unint64_t v41 = *v35;
        unint64_t v42 = *v34;
        unsigned int v43 = *(unsigned __int8 *)(*v35 + 52);
        unsigned int v44 = *(unsigned __int8 *)(*v34 + 52);
        BOOL v10 = v43 == v44;
        BOOL v45 = v43 < v44;
        if (v10) {
          BOOL v45 = *v35 < *v34;
        }
        if (v45)
        {
          unint64_t *v34 = v41;
          *uint64_t v35 = v42;
          unint64_t v46 = *v33;
          unsigned int v47 = *(unsigned __int8 *)(*v33 + 52);
          BOOL v10 = v43 == v47;
          BOOL v48 = v43 < v47;
          if (v10) {
            BOOL v48 = v41 < *v33;
          }
          if (v48)
          {
            a1[1] = v41;
            a1[2] = v46;
            unint64_t v49 = *a1;
            unsigned int v50 = *(unsigned __int8 *)(*a1 + 52);
            BOOL v10 = v43 == v50;
            BOOL v51 = v43 < v50;
            if (v10) {
              BOOL v51 = v41 < *a1;
            }
            if (v51)
            {
              *a1 = v41;
              a1[1] = v49;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v21 = a1 + 2;
      unint64_t v20 = a1[2];
      unint64_t v22 = a1[1];
      unint64_t v23 = *a1;
      unsigned int v24 = *(unsigned __int8 *)(v22 + 52);
      unsigned int v25 = *(unsigned __int8 *)(*a1 + 52);
      BOOL v26 = v24 < v25;
      if (v24 == v25) {
        BOOL v26 = v22 < *a1;
      }
      unsigned int v27 = *(unsigned __int8 *)(v20 + 52);
      BOOL v28 = v20 < v22;
      BOOL v10 = v27 == v24;
      BOOL v29 = v27 < v24;
      if (!v10) {
        BOOL v28 = v29;
      }
      if (v26)
      {
        uint64_t v30 = a1;
        uint64_t v31 = a1 + 2;
        if (!v28)
        {
          *a1 = v22;
          a1[1] = v23;
          BOOL v10 = v27 == v25;
          BOOL v32 = v27 < v25;
          if (v10) {
            BOOL v32 = v20 < v23;
          }
          uint64_t v30 = a1 + 1;
          uint64_t v31 = a1 + 2;
          if (!v32) {
            goto LABEL_47;
          }
        }
LABEL_46:
        *uint64_t v30 = v20;
        *uint64_t v31 = v23;
        goto LABEL_47;
      }
      if (v28)
      {
        a1[1] = v20;
        *unint64_t v21 = v22;
        BOOL v10 = v27 == v25;
        BOOL v57 = v27 < v25;
        if (v10) {
          BOOL v57 = v20 < v23;
        }
        uint64_t v30 = a1;
        uint64_t v31 = a1 + 1;
        if (v57) {
          goto LABEL_46;
        }
      }
LABEL_47:
      __n128 v58 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v59 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        unint64_t v62 = *v58;
        unint64_t v63 = *v21;
        unsigned int v64 = *(unsigned __int8 *)(*v58 + 52);
        unsigned int v65 = *(unsigned __int8 *)(v63 + 52);
        BOOL v10 = v64 == v65;
        BOOL v66 = v64 < v65;
        if (v10) {
          BOOL v66 = *v58 < v63;
        }
        if (v66)
        {
          uint64_t v67 = i;
          do
          {
            *(unint64_t *)((char *)a1 + v67) = v63;
            uint64_t v68 = v67 - 8;
            if (v67 == 8)
            {
              unint64_t v61 = a1;
              goto LABEL_50;
            }
            unint64_t v63 = *(unint64_t *)((char *)a1 + v67 - 16);
            unsigned int v69 = *(unsigned __int8 *)(v63 + 52);
            BOOL v70 = v62 < v63;
            BOOL v10 = v64 == v69;
            BOOL v71 = v64 < v69;
            if (!v10) {
              BOOL v70 = v71;
            }
            uint64_t v67 = v68;
          }
          while (v70);
          unint64_t v61 = (unint64_t *)((char *)a1 + v68);
LABEL_50:
          *unint64_t v61 = v62;
          if (++v59 == 8) {
            break;
          }
        }
        unint64_t v21 = v58++;
        if (v58 == a2) {
          return 1;
        }
      }
      return v58 + 1 == a2;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      if (v6 != *a1)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 80))(v6))
        {
          uint64_t v7 = *a1;
          *a1 = *(a2 - 1);
          *(a2 - 1) = v7;
        }
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **>(a1, a1 + 1, a1 + 2);
      unsigned int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 16;
      break;
  }
  while (1)
  {
    if (*v9 != *v8 && (*(unsigned int (**)(uint64_t))(*(void *)*v9 + 80))(*v9))
    {
      uint64_t v13 = *v9;
      uint64_t v14 = v11;
      do
      {
        uint64_t v15 = v14;
        BOOL v16 = (uint64_t *)((char *)a1 + v14);
        v16[1] = *v16;
        if (!v15)
        {
          unint64_t v12 = a1;
          goto LABEL_8;
        }
        if (v13 == *(v16 - 1)) {
          break;
        }
        char v17 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 80))(v13);
        uint64_t v14 = v15 - 8;
      }
      while ((v17 & 1) != 0);
      unint64_t v12 = (uint64_t *)((char *)a1 + v15);
LABEL_8:
      uint64_t *v12 = v13;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

void md::LabelSettingsStyleCache::~LabelSettingsStyleCache(md::LabelSettingsStyleCache *this)
{
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40F5825EE8);
  }
  uint64_t v3 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x1000C4033FC2DF1);
  }
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    MEMORY[0x1A6239270](v4, 0x1000C4000313F17);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    MEMORY[0x1A6239270](v5, 0x1000C40F5825EE8);
  }
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    MEMORY[0x1A6239270](v6, 0x1000C4052888210);
  }
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    MEMORY[0x1A6239270](v7, 0x1000C4052888210);
  }
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8) {
    MEMORY[0x1A6239270](v8, 0x1000C4090D0E795);
  }
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9) {
    MEMORY[0x1A6239270](v9, 0x1000C40005DEF19);
  }
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v10) {
    MEMORY[0x1A6239270](v10, 0x1000C40D77C405DLL);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void std::__shared_ptr_emplace<md::LabelStyleContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E1B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelStyleContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E1B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::LabelStyleCache::~LabelStyleCache(md::LabelStyleCache *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 57);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 57);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::~__hash_table((uint64_t *)this + 44);
  std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear((uint64_t *)this + 40);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,std::__unordered_map_hasher<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,true>,std::__unordered_map_equal<std::shared_ptr<md::LabelImageKey const>,std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<md::LabelImageKey const>,md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::MapEntry>,mdm::Allocator>>::~__hash_table((uint64_t *)this + 30);
  std::__list_imp<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,geo::StdAllocator<md::LabelCachingStore<std::shared_ptr<md::LabelImageKey const>,std::shared_ptr<md::LabelIcon>,std::weak_ptr<md::LabelIcon>,md::LabelPtrHash<std::shared_ptr<md::LabelImageKey const>>,md::LabelPtrEqual<std::shared_ptr<md::LabelImageKey const>>>::ListEntry,mdm::Allocator>>::clear((uint64_t *)this + 26);
  uint64_t v5 = (md::LabelSettingsStyleCache *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v5)
  {
    md::LabelSettingsStyleCache::~LabelSettingsStyleCache(v5);
    MEMORY[0x1A6239270]();
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v7) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v7) {
      goto LABEL_18;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_18:
  std::mutex::~mutex((std::mutex *)this + 1);
  std::mutex::~mutex((std::mutex *)this);
}

void *std::function<void ()(std::shared_ptr<md::LabelStyle> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<md::LabelStyleCache::setContentScale(float)::$_0,std::allocator<md::LabelStyleCache::setContentScale(float)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::operator()(uint64_t a1, md::LabelStyle **a2)
{
}

uint64_t std::__function::__func<md::LabelStyleCache::setContentScale(float)::$_0,std::allocator<md::LabelStyleCache::setContentScale(float)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  *(void *)a2 = &unk_1EF570F50;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

_DWORD *std::__function::__func<md::LabelStyleCache::setContentScale(float)::$_0,std::allocator<md::LabelStyleCache::setContentScale(float)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  int v3 = *(_DWORD *)(a1 + 8);
  *(void *)BOOL result = &unk_1EF570F50;
  result[2] = v3;
  return result;
}

void std::__function::__func<md::LabelStyleCache::setContentScale(float)::$_0,std::allocator<md::LabelStyleCache::setContentScale(float)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::~__func()
{
}

void std::__function::__func<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0,std::allocator<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v3 = *a2;
  if (*(unsigned __int8 *)(*a2 + 93) != v2)
  {
    *(unsigned char *)(v3 + 93) = v2;
    *(unsigned char *)(v3 + 136) = -1;
    *(unsigned char *)(v3 + 125) = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 416);
    *(void *)(v3 + 408) = 0;
    *(void *)(v3 + 416) = 0;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 432);
    *(void *)(v3 + 424) = 0;
    *(void *)(v3 + 432) = 0;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t std::__function::__func<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0,std::allocator<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)a2 = &unk_1EF570FE0;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

unsigned char *std::__function::__func<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0,std::allocator<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  char v3 = *(unsigned char *)(a1 + 8);
  *(void *)BOOL result = &unk_1EF570FE0;
  result[8] = v3;
  return result;
}

void std::__function::__func<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0,std::allocator<md::LabelStyleCache::setLabelScaleFactor(gss::LabelScaleFactor,gss::LabelScaleFactor)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::~__func()
{
}

void std::__function::__func<md::LabelStyleCache::stylesheetDidChange(void)::$_0,std::allocator<md::LabelStyleCache::stylesheetDidChange(void)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 408;
  *(unsigned char *)(v2 + 136) = -1;
  *(unsigned char *)(v2 + 125) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 416);
  *(void *)(v2 + 408) = 0;
  *(void *)(v2 + 416) = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 432);
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__function::__func<md::LabelStyleCache::stylesheetDidChange(void)::$_0,std::allocator<md::LabelStyleCache::stylesheetDidChange(void)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF571070;
}

void *std::__function::__func<md::LabelStyleCache::stylesheetDidChange(void)::$_0,std::allocator<md::LabelStyleCache::stylesheetDidChange(void)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1EF571070;
  return result;
}

void std::__function::__func<md::LabelStyleCache::stylesheetDidChange(void)::$_0,std::allocator<md::LabelStyleCache::stylesheetDidChange(void)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::~__func()
{
}

void std::__function::__func<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0,std::allocator<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0,std::allocator<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF571028;
  a2[1] = *(void *)(result + 8);
  return result;
}

void *std::__function::__func<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0,std::allocator<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF571028;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0,std::allocator<md::LabelStyleCache::setVariantStyleType(gss::DisplayStyle)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::~__func()
{
}

void std::__function::__func<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0,std::allocator<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2 + 408;
  *(unsigned char *)(v2 + 136) = -1;
  *(unsigned char *)(v2 + 125) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 416);
  *(void *)(v2 + 408) = 0;
  *(void *)(v2 + 416) = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 432);
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__function::__func<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0,std::allocator<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF570F98;
}

void *std::__function::__func<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0,std::allocator<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1EF570F98;
  return result;
}

void std::__function::__func<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0,std::allocator<md::LabelStyleCache::updateStyleState(md::StyleLogicContext const*)::$_0>,void ()(std::shared_ptr<md::LabelStyle> const&)>::~__func()
{
}

void md::LabelStyleCache::logStyleAttributes(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitLabelStyleQueryLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitLabelStyleQueryLog(void)::onceToken, &__block_literal_global_39116);
  }
  uint64_t v10 = (id)GEOGetVectorKitLabelStyleQueryLog(void)::log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a1 + 128);
    if (a4)
    {
      md::LabelFeature::debugName((md::LabelFeature *)&v32, a4);
      if (v33 >= 0) {
        unint64_t v12 = (const char *)&v32;
      }
      else {
        unint64_t v12 = (const char *)v32;
      }
      if (*((char *)a5 + 23) < 0) {
        a5 = (uint64_t *)*a5;
      }
      *(_DWORD *)buf = 134218754;
      *(void *)&uint8_t buf[4] = v11;
      __int16 v36 = 2080;
      uint64_t v37 = a2;
      __int16 v38 = 2080;
      unsigned int v39 = v12;
      __int16 v40 = 2080;
      unint64_t v41 = a5;
      _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_INFO, "MDL:[mgr=%p] %s feature=%s style=%s", buf, 0x2Au);
      if (SHIBYTE(v33) < 0) {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v34 + 40))(v34, v32, v33 & 0x7FFFFFFFFFFFFFFFLL);
      }
    }
    else
    {
      if (*((char *)a5 + 23) < 0) {
        a5 = (uint64_t *)*a5;
      }
      *(_DWORD *)buf = 134218754;
      *(void *)&uint8_t buf[4] = v11;
      __int16 v36 = 2080;
      uint64_t v37 = a2;
      __int16 v38 = 2080;
      unsigned int v39 = "?";
      __int16 v40 = 2080;
      unint64_t v41 = a5;
      _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_INFO, "MDL:[mgr=%p] %s feature=%s style=%s", buf, 0x2Au);
    }
  }

  if (GEOGetVectorKitLabelStyleQueryLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitLabelStyleQueryLog(void)::onceToken, &__block_literal_global_39116);
  }
  uint64_t v13 = (id)GEOGetVectorKitLabelStyleQueryLog(void)::log;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    gss::attributesToString((uint64_t *)(*(void *)a3 + 240), 1, 0, 0, buf);
    uint64_t v14 = v38 >= 0 ? buf : *(unsigned char **)buf;
    LODWORD(v32) = 136315138;
    *(void *)((char *)&v32 + 4) = v14;
    _os_log_impl(&dword_1A1780000, v13, OS_LOG_TYPE_INFO, "MDL:featureAttributes:%s", (uint8_t *)&v32, 0xCu);
    if (SHIBYTE(v38) < 0) {
      operator delete(*(void **)buf);
    }
  }

  uint64_t v15 = *(void *)(a1 + 184);
  uint64_t v16 = *(void *)(v15 + 520);
  char v17 = *(std::__shared_weak_count **)(v15 + 528);
  *(void *)&long long v32 = v16;
  *((void *)&v32 + 1) = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (GEOGetVectorKitLabelStyleQueryLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitLabelStyleQueryLog(void)::onceToken, &__block_literal_global_39116);
  }
  unsigned int v18 = (id)GEOGetVectorKitLabelStyleQueryLog(void)::log;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    uint64_t v29 = v16 + 16;
    BOOL v19 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v16 + 16));
    if (v19) {
      geo::read_write_lock::logFailure(v19, (uint64_t)"read lock", v20);
    }
    geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map(&v26, (uint64_t *)(v16 + 216));
    unint64_t v21 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v16 + 16));
    if (v21) {
      geo::read_write_lock::logFailure(v21, (uint64_t)"unlock", v22);
    }
    gss::attributesToString((unsigned __int16 *)&v26, 1, 0, 0, buf);
    if (v38 >= 0) {
      unint64_t v23 = buf;
    }
    else {
      unint64_t v23 = *(unsigned char **)buf;
    }
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v31 = v23;
    _os_log_impl(&dword_1A1780000, v18, OS_LOG_TYPE_INFO, "MDL:clientAttributes:%s", v30, 0xCu);
    if (SHIBYTE(v38) < 0) {
      operator delete(*(void **)buf);
    }
    if (!v28 && v26)
    {
      uint64_t v25 = gss::Allocator::instance(v24);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v25 + 40))(v25, v26, v27);
    }
  }

  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1A25C9670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A25C9680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A25C96B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL33GEOGetVectorKitLabelStyleQueryLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "LabelStyleQuery");
  uint64_t v1 = (void *)GEOGetVectorKitLabelStyleQueryLog(void)::log;
  GEOGetVectorKitLabelStyleQueryLog(void)::log = (uint64_t)v0;
}

void md::HillshadeLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = 2147483646;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  uint64_t v13 = *(unsigned __int8 **)(a6 + 16);
  uint64_t v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

void md::HillshadeLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  sp_mut = std::__get_sp_mut((const void *)(a1 + 776));
  std::__sp_mut::lock(sp_mut);
  int v9 = *(std::__shared_weak_count **)(a1 + 784);
  uint64_t v60 = *(void *)(a1 + 776);
  unint64_t v61 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  uint64_t v10 = (unsigned __int16 *)*a3;
  int v11 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v11)
  {
    while (*v10 != *(unsigned __int16 *)(a1 + 584))
    {
      v10 += 24;
      if (v10 == v11) {
        goto LABEL_12;
      }
    }
  }
  if (v10 == v11 || *((void *)v10 + 4) != 1)
  {
LABEL_12:
    uint64_t v13 = 0;
    goto LABEL_13;
  }
  uint64_t v12 = *((void *)v10 + 3);
  uint64_t v13 = *(void *)(v12 + 112);
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 120);
  if (!v14)
  {
LABEL_13:
    uint64_t v58 = v13;
    int v59 = 0;
    goto LABEL_14;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v58 = v13;
  int v59 = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_14:
  long long v57 = 0uLL;
  uint64_t v15 = geo::codec::VectorTile::hillshadeRasterData(*(geo::codec::VectorTile **)(v58 + 144));
  unsigned int v16 = geo::codec::VectorTile::hillshadeRasterCount(*(geo::codec::VectorTile **)(v58 + 144));
  int v17 = geo::codec::VectorTile::hillshadeRasterFormat(*(geo::codec::VectorTile **)(v58 + 144));
  memset(__p, 0, sizeof(__p));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
  if (v15) {
    BOOL v19 = v16 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    uint64_t v20 = (char *)operator new(0x308uLL);
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 2) = 0;
    *(void *)uint64_t v20 = &unk_1EF5803A0;
    unint64_t v52 = 0;
    unint64_t v53 = 0;
    BOOL v48 = 0;
    unint64_t v49 = 0;
    long long v62 = 0uLL;
    uint64_t v21 = md::MapTileData::MapTileData((uint64_t)(v20 + 24), a2, (uint64_t)__p, (uint64_t *)&v62, 0);
    *((void *)v20 + 3) = &unk_1EF536E10;
    *((void *)v20 + 82) = &unk_1EF536E50;
    *(_OWORD *)(v20 + 744) = 0u;
    *(_OWORD *)(v20 + 760) = 0u;
    *a4 = v21;
    a4[1] = (uint64_t)v20;
    goto LABEL_42;
  }
  uint64_t v22 = v60;
  if (v60)
  {
    unint64_t v52 = 0;
    unint64_t v53 = 0;
    unsigned int v54 = 0;
    uint64_t v23 = gss::Allocator::instance(v18);
    uint64_t v55 = v23;
    unsigned int v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23 + 16))(v23, 8, 4);
    uint64_t v25 = (std::__shared_weak_count *)v24;
    uint64_t v26 = (char *)(v24 + 1);
    if (v24) {
      *unsigned int v24 = 0x1800000005;
    }
    unint64_t v53 = (std::__shared_weak_count *)(v24 + 1);
    unsigned int v54 = v24 + 1;
    unint64_t v52 = (char *)v24;
    gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)&v48, (uint64_t)&v52);
    *(void *)((char *)&v62 + 7) = 0;
    *(void *)&long long v62 = 0;
    HIBYTE(v62) = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v47, v22, (gss::FeatureAttributeSet *)&v48, (gss::QueryOverrides *)&v62);
    long long v57 = v47;
    if (v48)
    {
      unint64_t v49 = v48;
      (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(void *)v51 + 40))(v51, v48, v50 - (void)v48);
    }
    if (v25)
    {
      unint64_t v53 = v25;
      (*(void (**)(uint64_t, std::__shared_weak_count *, int64_t))(*(void *)v23 + 40))(v23, v25, v26 - (char *)v25);
    }
  }
  unsigned __int16 v27 = (char *)operator new(0x58uLL);
  char v28 = (std::__shared_weak_count *)v27;
  *((void *)v27 + 1) = 0;
  uint64_t v29 = (atomic_ullong *)(v27 + 8);
  *(void *)unsigned __int16 v27 = &unk_1EF583858;
  unint64_t v30 = v16;
  uint64_t v31 = v27 + 24;
  *((void *)v27 + 5) = 0;
  *((void *)v27 + 6) = 0;
  *((void *)v27 + 4) = 0;
  *((_DWORD *)v27 + 14) = 0;
  *((void *)v27 + 2) = 0;
  *((void *)v27 + 3) = &unk_1EF55AE58;
  *(void *)&long long v32 = 0x100000001;
  *((void *)&v32 + 1) = 0x100000001;
  *(_OWORD *)(v27 + 60) = v32;
  *(void *)(v27 + 76) = 0x100000001;
  *((_DWORD *)v27 + 21) = 0;
  unint64_t v52 = v27 + 24;
  unint64_t v53 = (std::__shared_weak_count *)v27;
  if ((v17 & 0xFFFFFFFB) == 1)
  {
    LOBYTE(v62) = 0;
    uint64_t v33 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v15 length:v30 freeWhenDone:0];
    v46[0] = v31;
    v46[1] = v28;
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    textureWithData(&v48, v33, v46, 2u, 0, &v62);
    if (!atomic_fetch_add(v29, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }

    uint64_t v34 = v58;
    uint64_t v35 = operator new(0x308uLL);
    __int16 v36 = (uint64_t *)(v34 + 144);
    v35[1] = 0;
    v35[2] = 0;
    *uint64_t v35 = &unk_1EF5803A0;
    uint64_t v37 = v49;
    __int16 v38 = std::construct_at[abi:nn180100]<md::HillshadeTileData,gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata>,std::shared_ptr<ggl::Texture2D> &,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &,std::shared_ptr<geo::codec::VectorTile> const&,md::HillshadeTileData*>(v35 + 3, a2, (uint64_t)__p, (uint64_t)v48, v49, (uint64_t *)&v57, v36);
LABEL_35:
    *a4 = (uint64_t)v38;
    a4[1] = (uint64_t)v35;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    goto LABEL_39;
  }
  if (v17 == 3)
  {
    v45[0] = v27 + 24;
    v45[1] = v27;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v27 + 1, 1uLL, memory_order_relaxed);
    loadASTCTexture(&v48, v15, v30, v45, 0);
    if (!atomic_fetch_add(v29, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    uint64_t v39 = v58;
    uint64_t v35 = operator new(0x308uLL);
    __int16 v40 = (uint64_t *)(v39 + 144);
    v35[1] = 0;
    v35[2] = 0;
    *uint64_t v35 = &unk_1EF5803A0;
    uint64_t v37 = v49;
    __int16 v38 = std::construct_at[abi:nn180100]<md::HillshadeTileData,gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata>,std::shared_ptr<ggl::Texture2D> &,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &,std::shared_ptr<geo::codec::VectorTile> const&,md::HillshadeTileData*>(v35 + 3, a2, (uint64_t)__p, (uint64_t)v48, v49, (uint64_t *)&v57, v40);
    goto LABEL_35;
  }
  *a4 = 0;
  a4[1] = 0;
LABEL_39:
  unint64_t v41 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_42:
  if (__p[0]) {
    operator delete(__p[0]);
  }
  uint64_t v42 = (std::__shared_weak_count *)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v57 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  unsigned int v43 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  unsigned int v44 = v61;
  if (v61)
  {
    if (!atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_1A25C9F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a20);
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a27);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v28 - 128);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v28 - 112);
  _Unwind_Resume(a1);
}

void *std::construct_at[abi:nn180100]<md::HillshadeTileData,gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata>,std::shared_ptr<ggl::Texture2D> &,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> &,std::shared_ptr<geo::codec::VectorTile> const&,md::HillshadeTileData*>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t *a6, uint64_t *a7)
{
  if (a5) {
    atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *a6;
  uint64_t v10 = (std::__shared_weak_count *)a6[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::MapTileData::MapTileData((uint64_t)a1, a2, a3, a7, 0);
  *a1 = &unk_1EF536E10;
  a1[79] = &unk_1EF536E50;
  a1[90] = v11;
  a1[91] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[92] = a4;
  a1[93] = a5;
  if (a5) {
    atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (a5 && !atomic_fetch_add(&a5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
    std::__shared_weak_count::__release_weak(a5);
  }
  return a1;
}

void sub_1A25CA22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t std::__shared_ptr_emplace<md::HillshadeTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::HillshadeTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5803A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::HillshadeTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5803A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::HillshadeLayerDataSource::~HillshadeLayerDataSource(md::HillshadeLayerDataSource *this)
{
  *(void *)this = &unk_1EF5450E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 94) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF5450E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 94) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void md::mun::MuninPointLabelDataRequester::requestDataKeys(md::mun::MuninPointLabelDataRequester *this, const gdc::SelectionContext *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (gdc::LayerDataCollector *)*((void *)a2 + 1);
  uint64_t v3 = *((void *)this + 1);
  double v4 = *((double *)a2 + 13);
  double v5 = *((double *)a2 + 14);
  double v6 = v4 * 0.5;
  long double v7 = tan(v4 * 0.5 + 0.785398163);
  double v8 = v5 * 0.159154943 + 0.5;
  double v9 = log(v7) * 0.159154943 + 0.5;
  long double v10 = cos(v4 + v4) * -559.82 + 111132.92;
  long double v11 = v10 + cos(v4 * 4.0) * 1.175;
  long double v12 = v11 + cos(v4 * 6.0) * -0.0023;
  long double v13 = tan(v4 * 0.5 + 0.78103484);
  double v14 = log(v13);
  long double v15 = tan(v6 + 0.789761487);
  double v16 = fabs((log(v15) - v14) * 0.159154943) * 1000.0 / v12;
  float v17 = log2(1.0 / v16);
  unsigned __int8 v18 = vcvtms_s32_f32(v17);
  double v19 = (double)(1 << v18);
  v56._type = -1;
  v56._level = v18;
  v56._yIdx = (1 << v18) + ~vcvtmd_s64_f64(v9 * v19);
  v56._xIdx = vcvtmd_s64_f64(v8 * v19);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, QuadTile *))(*(void *)v3 + 16))(&v45, v3, 26, &v56);
  if ((_BYTE)v45)
  {
    char v20 = v46;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v3 + 24))(&v55, v3, 26);
    if (!(_BYTE)v55)
    {
      uint64_t v50 = v54;
      uint64_t v51 = v54;
      unint64_t v52 = v54;
      uint64_t v53 = 9;
LABEL_36:
      uint64_t v29 = v54;
      goto LABEL_37;
    }
    char v20 = BYTE4(v55);
  }
  int v21 = 1 << v20;
  signed int v22 = vcvtmd_s64_f64((v8 - v16) * (double)(1 << v20));
  unsigned int v23 = vcvtmd_s64_f64((v9 - v16) * (double)(1 << v20));
  signed int v24 = vcvtmd_s64_f64((v16 + v8) * (double)(1 << v20));
  int v25 = v21 + ~vcvtmd_s64_f64((v16 + v9) * (double)v21);
  uint64_t v26 = v54;
  uint64_t v50 = v54;
  uint64_t v51 = v54;
  unint64_t v52 = v54;
  uint64_t v53 = 9;
  signed int v44 = v22;
  if (v25 > (int)((1 << v20) + ~v23) || v22 > v24) {
    goto LABEL_36;
  }
  uint64_t v42 = v2;
  unsigned int v43 = v21 - v23;
  unint64_t v28 = 9;
  uint64_t v29 = v54;
  do
  {
    signed int v30 = v44;
    do
    {
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v26) >> 3);
      if (v28 >= v33 + 1)
      {
        uint64_t v31 = v29;
      }
      else
      {
        uint64_t v34 = v52;
        unint64_t v35 = (1 << -(char)__clz(v28 + 1));
        if (v28 >= 0xFFFFFFFFFFFFFFFELL) {
          unint64_t v35 = 1;
        }
        if (v35 <= v33 + 1) {
          unint64_t v28 = v33 + 1;
        }
        else {
          unint64_t v28 = v35;
        }
        __int16 v36 = malloc_type_malloc(24 * v28, 0x1000040FC312AA6uLL);
        uint64_t v37 = v50;
        __int16 v38 = v51;
        if (v50 != v51)
        {
          uint64_t v39 = v36;
          __int16 v40 = v50;
          do
          {
            *(_WORD *)uint64_t v39 = *(_WORD *)v40;
            *(void *)(v39 + 4) = *(void *)(v40 + 4);
            v40 += 24;
            v39 += 24;
          }
          while (v40 != v38);
        }
        if (v26 != v34) {
          free(v37);
        }
        uint64_t v31 = &v36[24 * v33];
        uint64_t v50 = v36;
        uint64_t v53 = v28;
        uint64_t v26 = v36;
      }
      *uint64_t v31 = -1;
      v31[1] = v20;
      *((_DWORD *)v31 + 1) = v25;
      *((_DWORD *)v31 + 2) = v30;
      uint64_t v29 = v31 + 24;
      uint64_t v51 = v31 + 24;
    }
    while (v30++ != v24);
    ++v25;
  }
  while (v25 != v43);
  if (v50 != v29)
  {
    unint64_t v41 = v50 - 24;
    do
    {
      *(int32x2_t *)&v56._type = vrev64_s32(*(int32x2_t *)(v41 + 28));
      v56._xIdx = v41[25];
      *(&v56._xIdx + 1) = v41[24];
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v45, 0, 38, (int *)&v56, 4);
      *(_WORD *)&v56._type = 255;
      *(void *)&v56._yIdx = 0;
      gdc::LayerDataCollector::addDataKey(v42, (const gdc::LayerDataRequestKey *)&v45, &v56);
      if (v49) {
        char v49 = 0;
      }
      if (v47 != v48) {
        free(v47);
      }
      v41 += 24;
    }
    while (v41 != v31);
    uint64_t v29 = v50;
  }
LABEL_37:
  if (v29 != v52) {
    free(v29);
  }
}

void sub_1A25CA8F4(_Unwind_Exception *exception_object)
{
}

void sub_1A25CA900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27)
{
  if (a25 == a27) {
    _Unwind_Resume(exception_object);
  }
  free(a25);
  _Unwind_Resume(exception_object);
}

void md::mun::MuninPointLabelDataRequester::~MuninPointLabelDataRequester(md::mun::MuninPointLabelDataRequester *this)
{
}

void md::DaVinciAssetDataRequester::~DaVinciAssetDataRequester(md::DaVinciAssetDataRequester *this)
{
}

uint64_t non-virtual thunk to'md::DaVinciGroundTileData::featureRegistryPtr(md::DaVinciGroundTileData *this)
{
  return *((void *)this + 86);
}

uint64_t md::DaVinciGroundTileData::featureRegistryPtr(md::DaVinciGroundTileData *this)
{
  return *((void *)this + 165);
}

void md::DaVinciGroundTileData::~DaVinciGroundTileData(md::DaVinciGroundTileData *this)
{
  md::DaVinciGroundTileData::~DaVinciGroundTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  void *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  void **v45;
  uint64_t vars8;

  *(void *)this = &unk_1EF53F0E8;
  *((void *)this + 79) = &unk_1EF53F130;
  md::RegistryManager::removeRegistry(*((md::RegistryManager **)this + 166), this);
  if (*((void *)this + 168))
  {
    std::vector<std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::__clear[abi:nn180100]((uint64_t *)this + 168);
    operator delete(*((void **)this + 168));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 167);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 164);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  double v4 = (void *)*((void *)this + 160);
  if (v4)
  {
    *((void *)this + 161) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 157);
  if (v5)
  {
    *((void *)this + 158) = v5;
    operator delete(v5);
  }
  double v6 = (void *)*((void *)this + 154);
  if (v6)
  {
    *((void *)this + 155) = v6;
    operator delete(v6);
  }
  long double v7 = (void *)*((void *)this + 151);
  if (v7)
  {
    *((void *)this + 152) = v7;
    operator delete(v7);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 144));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 141));
  double v8 = (void *)*((void *)this + 137);
  if (v8)
  {
    double v9 = (void *)*((void *)this + 138);
    long double v10 = (void *)*((void *)this + 137);
    if (v9 != v8)
    {
      do
      {
        long double v11 = (void *)*(v9 - 3);
        if (v11)
        {
          do
          {
            long double v12 = (void *)*v11;
            operator delete(v11);
            long double v11 = v12;
          }
          while (v12);
        }
        double v14 = (void *)*(v9 - 5);
        v9 -= 5;
        long double v13 = v14;
        std::__shared_weak_count *v9 = 0;
        if (v14) {
          operator delete(v13);
        }
      }
      while (v9 != v8);
      long double v10 = (void *)*((void *)this + 137);
    }
    *((void *)this + 138) = v8;
    operator delete(v10);
  }
  uint64_t v45 = (void **)((char *)this + 1072);
  std::vector<md::DaVinciGroundTileData::RibbonAsset>::__destroy_vector::operator()[abi:nn180100](&v45);
  long double v15 = *((void *)this + 131);
  if (v15)
  {
    double v16 = *((void *)this + 132);
    float v17 = (void *)*((void *)this + 131);
    if (v16 != v15)
    {
      do
      {
        unsigned __int8 v18 = *(std::__shared_weak_count **)(v16 - 8);
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        v16 -= 16;
      }
      while (v16 != v15);
      float v17 = (void *)*((void *)this + 131);
    }
    *((void *)this + 132) = v15;
    operator delete(v17);
  }
  uint64_t v45 = (void **)((char *)this + 1024);
  std::vector<md::Mesh>::__destroy_vector::operator()[abi:nn180100](&v45);
  double v19 = *((void *)this + 125);
  if (v19)
  {
    char v20 = *((void *)this + 126);
    int v21 = (void *)*((void *)this + 125);
    if (v20 != v19)
    {
      do
      {
        signed int v22 = *(std::__shared_weak_count **)(v20 - 8);
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v20 -= 16;
      }
      while (v20 != v19);
      int v21 = (void *)*((void *)this + 125);
    }
    *((void *)this + 126) = v19;
    operator delete(v21);
  }
  unsigned int v23 = *((void *)this + 122);
  if (v23)
  {
    signed int v24 = *((void *)this + 123);
    int v25 = (void *)*((void *)this + 122);
    if (v24 != v23)
    {
      do
      {
        uint64_t v26 = *(std::__shared_weak_count **)(v24 - 8);
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        v24 -= 16;
      }
      while (v24 != v23);
      int v25 = (void *)*((void *)this + 122);
    }
    *((void *)this + 123) = v23;
    operator delete(v25);
  }
  unsigned __int16 v27 = *((void *)this + 119);
  if (v27)
  {
    unint64_t v28 = *((void *)this + 120);
    uint64_t v29 = (void *)*((void *)this + 119);
    if (v28 != v27)
    {
      do
      {
        signed int v30 = *(std::__shared_weak_count **)(v28 - 8);
        if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        v28 -= 16;
      }
      while (v28 != v27);
      uint64_t v29 = (void *)*((void *)this + 119);
    }
    *((void *)this + 120) = v27;
    operator delete(v29);
  }
  uint64_t v31 = (void *)*((void *)this + 116);
  if (v31)
  {
    *((void *)this + 117) = v31;
    operator delete(v31);
  }
  long long v32 = (std::__shared_weak_count *)*((void *)this + 115);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  unint64_t v33 = (std::__shared_weak_count *)*((void *)this + 113);
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  uint64_t v34 = (std::__shared_weak_count *)*((void *)this + 111);
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  unint64_t v35 = (std::__shared_weak_count *)*((void *)this + 109);
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  __int16 v36 = (std::__shared_weak_count *)*((void *)this + 107);
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  uint64_t v37 = (std::__shared_weak_count *)*((void *)this + 105);
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  __int16 v38 = (std::__shared_weak_count *)*((void *)this + 103);
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  uint64_t v39 = (std::__shared_weak_count *)*((void *)this + 101);
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  __int16 v40 = (std::__shared_weak_count *)*((void *)this + 99);
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  unint64_t v41 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  uint64_t v42 = (std::__shared_weak_count *)*((void *)this + 95);
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  unsigned int v43 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  signed int v44 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  md::MapTileData::~MapTileData(this);
}

void sub_1A25CB168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::vector<std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::~vector[abi:nn180100]((uint64_t *)(v10 + 1344));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 1304);
  long double v13 = *(void **)(v10 + 1280);
  if (v13)
  {
    *(void *)(v10 + 1288) = v13;
    operator delete(v13);
    double v14 = *(void **)(v10 + 1256);
    if (!v14)
    {
LABEL_3:
      long double v15 = *(void **)(v10 + 1232);
      if (!v15) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    double v14 = *(void **)(v10 + 1256);
    if (!v14) {
      goto LABEL_3;
    }
  }
  *(void *)(v10 + 1264) = v14;
  operator delete(v14);
  long double v15 = *(void **)(v10 + 1232);
  if (!v15)
  {
LABEL_4:
    double v16 = *(void **)(v10 + 1208);
    if (!v16) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  *(void *)(v10 + 1240) = v15;
  operator delete(v15);
  double v16 = *(void **)(v10 + 1208);
  if (!v16)
  {
LABEL_6:
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v10 + 1152));
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v10 + 1128));
    std::vector<std::unordered_map<unsigned short,unsigned long long>>::~vector[abi:nn180100]((void *)(v10 + 1096));
    a10 = (void **)(v10 + 1072);
    std::vector<md::DaVinciGroundTileData::RibbonAsset>::__destroy_vector::operator()[abi:nn180100](&a10);
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v10 + 1048));
    a10 = (void **)(v10 + 1024);
    std::vector<md::Mesh>::__destroy_vector::operator()[abi:nn180100](&a10);
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v10 + 1000));
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v10 + 976));
    md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v10 + 952));
    float v17 = *(void **)(v10 + 928);
    if (v17)
    {
      *(void *)(v10 + 936) = v17;
      operator delete(v17);
    }
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 912);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 896);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 880);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 864);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 848);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 832);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 816);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 800);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 784);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 768);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 752);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 736);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 720);
    md::MapTileData::~MapTileData((md::MapTileData *)v10);
    _Unwind_Resume(a1);
  }
LABEL_5:
  *(void *)(v10 + 1216) = v16;
  operator delete(v16);
  goto LABEL_6;
}

void std::vector<std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    while (1)
    {
      double v4 = *(std::__shared_weak_count **)(v3 - 8);
      if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        break;
      }
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      double v5 = *(void **)(v3 - 40);
      if (v5) {
        goto LABEL_7;
      }
LABEL_8:
      double v6 = *(std::__shared_weak_count **)(v3 - 72);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      v3 -= 80;
      if (v3 == v2) {
        goto LABEL_13;
      }
    }
    double v5 = *(void **)(v3 - 40);
    if (!v5) {
      goto LABEL_8;
    }
LABEL_7:
    *(void *)(v3 - 32) = v5;
    operator delete(v5);
    goto LABEL_8;
  }
LABEL_13:
  a1[1] = v2;
}

void std::vector<md::DaVinciGroundTileData::RibbonAsset>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    double v4 = (char *)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v10 = (void **)(v4 - 24);
        std::vector<altitude::QuickSurfaceManager::Tile>::__destroy_vector::operator()[abi:nn180100](&v10);
        uint64_t v7 = *((void *)v4 - 6);
        if (v7)
        {
          uint64_t v8 = *((void *)v4 - 5);
          double v6 = (void *)*((void *)v4 - 6);
          if (v8 != v7)
          {
            do
            {
              double v9 = *(std::__shared_weak_count **)(v8 - 16);
              if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
              v8 -= 24;
            }
            while (v8 != v7);
            double v6 = (void *)*((void *)v4 - 6);
          }
          *((void *)v4 - 5) = v7;
          operator delete(v6);
        }
        v4 -= 56;
      }
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::vector<std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::~vector[abi:nn180100](uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::__clear[abi:nn180100](a1);
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t gdc::ObjectHolder<md::overlayComponents::Overlayable>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::overlayComponents::Overlayable>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555730;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::overlayComponents::Overlayable>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555730;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

uint64_t md::DaVinciGroundTileData::_buildBuildings(uint64_t a1, geo::codec::VectorTile **a2, uint64_t a3, float *a4, _OWORD *a5)
{
  uint64_t v437 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = 0u;
  long long v412 = 0u;
  float v413 = 1.0;
  uint64_t v7 = +[VKDebugSettings sharedSettings];
  int v380 = [v7 daVinciColorBuildings];

  v409 = 0;
  v410 = 0;
  uint64_t v8 = geo::codec::VectorTile::key(*a2);
  int v9 = -1 << (*(unsigned char *)(a1 + 169) - (*(unsigned char *)(v8 + 1) & 0x3F));
  v385 = geo::codec::VectorTile::daVinciSubTileBuildingIndices(*a2, *(_DWORD *)(a1 + 176) & ~v9, *(_DWORD *)(a1 + 172) & ~v9, (*(unsigned char *)(a1 + 169) - (*(unsigned char *)(v8 + 1) & 0x3F)));
  uint64_t v11 = *v385;
  uint64_t v10 = v385[1];
  uint64_t v389 = geo::codec::VectorTile::daVinciBuildings(*a2);
  uint64_t v377 = geo::codec::VectorTile::daVinciBuildingSections(*a2);
  uint64_t v392 = geo::codec::VectorTile::daVinciLineLoops(*a2);
  uint64_t v12 = geo::codec::VectorTile::daVinciBuildingVertices(*a2);
  long double v13 = *a2;
  if (v12)
  {
    uint64_t v391 = geo::codec::VectorTile::daVinciBuildingVertices(v13);
  }
  else
  {
    uint64_t v21 = geo::codec::VectorTile::daVinciVertices(v13);
    uint64_t v391 = v21 + 12 * geo::codec::VectorTile::daVinciBuildingVertexOffset(*a2);
  }
  v382 = geo::codec::VectorTile::buildingTileIntersectionInfo((void **)*a2, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v378 = geo::codec::VectorTile::buildingToModifierMap(*a2);
  BOOL v22 = geo::codec::VectorTile::daVinciBuildingColorsArePresent(*a2);
  BOOL v23 = v22;
  unint64_t v24 = (char *)v10 - (char *)v11;
  int v425 = -1;
  v393 = a4;
  v394 = a2;
  if ((v380 & 1) == 0)
  {
    __int16 v38 = operator new(0x78uLL);
    v38[1] = 0;
    uint64_t v38[2] = 0;
    *__int16 v38 = &unk_1EF57FAA8;
    unsigned __int16 v27 = (char *)(v38 + 3);
    md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::StyleTexture((uint64_t)(v38 + 3), 1uLL);
    v409 = (char *)(v38 + 3);
    v410 = (std::__shared_weak_count *)v38;
    uint64_t v39 = (_DWORD *)v38[3];
LABEL_22:
    if (v425 != *v39)
    {
      *((unsigned char *)v38 + 56) = 1;
      *uint64_t v39 = -1;
    }
    goto LABEL_24;
  }
  if (!v22)
  {
    uint64_t v40 = *(unsigned __int16 *)(v378 + 24);
    if (!*(_WORD *)(v378 + 24))
    {
      unsigned __int16 v27 = 0;
      if (!(unsigned __int16)(v24 >> 1)) {
        goto LABEL_395;
      }
LABEL_25:
      uint64_t v49 = 0;
      int v386 = 0;
      char v379 = v380 ^ 1 | v23;
      uint64_t v381 = (unsigned __int16)(v24 >> 1);
      while (1)
      {
        uint64_t v390 = (*v385)->u16[v49];
        unint64_t v50 = *(void *)(v389 + 40 * v390 + 16);
        unint64_t v51 = (unint64_t)*v382;
        md::createFeatureAttributeSet((gss::Allocator *)v423, (uint64_t *)(v389 + 40 * v390));
        if (v50) {
          break;
        }
LABEL_382:
        if (v423[0])
        {
          v423[1] = v423[0];
          (*(void (**)(uint64_t, void, void))(*(void *)v424 + 40))(v424, v423[0], v423[2] - v423[0]);
        }
        if (++v49 == v381)
        {
          unsigned __int16 v27 = v409;
          goto LABEL_395;
        }
      }
      unint64_t v383 = v51;
      uint64_t v384 = v389 + 40 * v390;
      uint64_t v387 = v49;
      uint64_t v52 = *(unsigned __int8 *)(v51 + v390);
      unint64_t v53 = ((v50 << 6) + (v50 >> 2) + v52 - 0x61C8864680B583EBLL) ^ v50;
      unint64_t v54 = (unint64_t)__p[1];
      if (__p[1])
      {
        uint8x8_t v55 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v55.i16[0] = vaddlv_u8(v55);
        if (v55.u32[0] > 1uLL)
        {
          unint64_t v51 = ((v50 << 6) + (v50 >> 2) + v52 - 0x61C8864680B583EBLL) ^ v50;
          if ((void *)v53 >= __p[1]) {
            unint64_t v51 = v53 % (unint64_t)__p[1];
          }
        }
        else
        {
          unint64_t v51 = v53 & ((unint64_t)__p[1] - 1);
        }
        QuadTile v56 = (uint64_t **)*((void *)__p[0] + v51);
        if (v56)
        {
          uint64_t v57 = *v56;
          if (v57)
          {
            uint64_t v58 = v57;
            if (v55.u32[0] < 2uLL)
            {
              int v59 = v57;
              while (1)
              {
                uint64_t v62 = v59[1];
                if (v62 == v53)
                {
                  if (v59[2] == v50 && *((unsigned __int8 *)v59 + 24) == v52)
                  {
                    v388 = v59;
                    goto LABEL_117;
                  }
                }
                else if ((v62 & ((uint64_t)__p[1] - 1)) != v51)
                {
                  goto LABEL_57;
                }
                int v59 = (uint64_t *)*v59;
                if (!v59) {
                  goto LABEL_57;
                }
              }
            }
            do
            {
              unint64_t v60 = v58[1];
              if (v60 == v53)
              {
                if (v58[2] == v50 && *((unsigned __int8 *)v58 + 24) == v52)
                {
                  v388 = v58;
                  goto LABEL_117;
                }
              }
              else
              {
                if ((void *)v60 >= __p[1]) {
                  v60 %= (unint64_t)__p[1];
                }
                if (v60 != v51) {
                  break;
                }
              }
              uint64_t v58 = (uint64_t *)*v58;
            }
            while (v58);
          }
        }
      }
LABEL_57:
      unsigned int v64 = operator new(0x38uLL);
      v420[0] = v64;
      v420[1] = &v412;
      *unsigned int v64 = 0;
      v64[1] = v53;
      v64[2] = v50;
      *((unsigned char *)v64 + 24) = v52;
      v64[5] = 0;
      v64[6] = 0;
      v64[4] = 0;
      v388 = v64;
      LOBYTE(v421[0]) = 1;
      float v65 = (float)(unint64_t)(*((void *)&v412 + 1) + 1);
      if (v54 && (float)(v413 * (float)v54) >= v65)
      {
LABEL_107:
        unint64_t v86 = __p[0];
        int8x16_t v87 = (void *)*((void *)__p[0] + v51);
        if (v87)
        {
          float32x4_t v88 = v388;
          void *v388 = *v87;
        }
        else
        {
          void *v388 = v412;
          *(void *)&long long v412 = v388;
          v86[v51] = &v412;
          if (!*v388) {
            goto LABEL_116;
          }
          unint64_t v89 = *(void *)(*v388 + 8);
          if ((v54 & (v54 - 1)) != 0)
          {
            if (v89 >= v54) {
              v89 %= v54;
            }
          }
          else
          {
            v89 &= v54 - 1;
          }
          int8x16_t v87 = (char *)__p[0] + 8 * v89;
          float32x4_t v88 = v388;
        }
        *int8x16_t v87 = v88;
LABEL_116:
        ++*((void *)&v412 + 1);
LABEL_117:
        uint64_t v90 = v389 + 40 * v390;
        int v92 = *(unsigned __int16 *)(v90 + 34);
        char v91 = (unsigned __int16 *)(v90 + 34);
        if (v92)
        {
          uint64_t v93 = 0;
          unint64_t v94 = 0;
          uint64_t v95 = 0;
          uint64_t v96 = v377 + 20 * *(v91 - 1);
          v395 = v91;
          uint64_t v400 = v96;
          while (1)
          {
            uint64_t v97 = v392 + 8 * *(unsigned int *)(v96 + 20 * v93 + 12);
            *(_OWORD *)v421 = 0u;
            long long v422 = 0u;
            *(_OWORD *)v420 = 0u;
            v417 = 0;
            v418 = 0;
            uint64_t v419 = 0;
            md::DaVinciGroundTileData::_populateBuildingLoops(a4, v391, v96 + 20 * v93, *(_DWORD *)v97, *(_WORD *)(v97 + 4), v97 + 8, (uint64_t)v420, (uint64_t)&v417);
            uint64_t v399 = v96 + 20 * v93;
            uint64_t v401 = v95;
            unint64_t v403 = v94;
            char v98 = &unk_1EF57DCF8;
            v430[0] = &unk_1EF57DCF8;
            v430[1] = v420;
            v431 = v430;
            v414 = 0;
            v415 = 0;
            v416 = 0;
            unint64_t v100 = (_WORD *)(v399 + 16);
            uint64_t v99 = *(unsigned __int16 *)(v399 + 16);
            uint64_t v405 = v93;
            if (!*(_WORD *)(v399 + 16)
              || (float32x4_t v101 = (unint64_t *)operator new(40 * v99),
                  v414 = v101,
                  v415 = v101,
                  v416 = (char *)&v101[5 * v99],
                  !*v100))
            {
              unint64_t v122 = 0xAAAAAAAAAAAAAAABLL * (((char *)v420[1] - (char *)v420[0]) >> 2);
LABEL_153:
              v429 = v428;
              (*((void (**)(void *, void *))v98 + 3))(v430, v428);
              long long v123 = v429;
              if (v429) {
                goto LABEL_154;
              }
LABEL_162:
              unint64_t v125 = 0;
              v436 = 0;
              if (v122 >= 3)
              {
                unint64_t v432 = 0;
                goto LABEL_425;
              }
              goto LABEL_172;
            }
            unint64_t v102 = 0;
            do
            {
              uint64_t v104 = (char *)v417 + 48 * v102;
              unint64_t v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104[1] - *v104) >> 2);
              if (v101 < (unint64_t *)v416)
              {
                *float32x4_t v101 = v105;
                v101[1] = (unint64_t)&unk_1EF57DCB0;
                v101[2] = (unint64_t)v104;
                v101[4] = (unint64_t)(v101 + 1);
                unint64_t v103 = v101 + 5;
                goto LABEL_124;
              }
              int8x16_t v106 = v414;
              unint64_t v107 = 0xCCCCCCCCCCCCCCCDLL * (v101 - v414);
              unint64_t v108 = v107 + 1;
              if (v107 + 1 > 0x666666666666666) {
                abort();
              }
              if (0x999999999999999ALL * ((v416 - (char *)v414) >> 3) > v108) {
                unint64_t v108 = 0x999999999999999ALL * ((v416 - (char *)v414) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((v416 - (char *)v414) >> 3) >= 0x333333333333333) {
                unint64_t v109 = 0x666666666666666;
              }
              else {
                unint64_t v109 = v108;
              }
              if (v109 > 0x666666666666666) {
                goto LABEL_422;
              }
              double v110 = (char *)operator new(40 * v109);
              double v111 = (unint64_t *)&v110[40 * v107];
              double v112 = &v110[40 * v109];
              *double v111 = v105;
              v111[1] = (unint64_t)&unk_1EF57DCB0;
              v111[2] = (unint64_t)v104;
              v111[4] = (unint64_t)(v111 + 1);
              unint64_t v103 = v111 + 5;
              if (v101 == v106)
              {
                v414 = v111;
                v415 = v111 + 5;
                v416 = &v110[40 * v109];
LABEL_151:
                operator delete(v101);
                goto LABEL_124;
              }
              uint64_t v113 = 0;
              do
              {
                double v114 = &v111[v113];
                double v115 = &v101[v113];
                v111[v113 - 5] = v101[v113 - 5];
                uint64_t v116 = (unint64_t *)v101[v113 - 1];
                if (v116)
                {
                  if (v115 - 4 == v116)
                  {
                    *(v114 - 1) = (unint64_t)(v114 - 4);
                    (*(void (**)(unint64_t *))(*v116 + 24))(v116);
                  }
                  else
                  {
                    *(v114 - 1) = (unint64_t)v116;
                    *(v115 - 1) = 0;
                  }
                }
                else
                {
                  *(v114 - 1) = 0;
                }
                v113 -= 5;
              }
              while (&v101[v113] != v106);
              float32x4_t v101 = v414;
              uint64_t v117 = v415;
              v414 = &v111[v113];
              v415 = v111 + 5;
              v416 = v112;
              if (v117 != v101)
              {
                int v118 = v117 - 4;
                unint64_t v119 = v117 - 4;
                do
                {
                  double v121 = (unint64_t *)v119[3];
                  if (v119 == v121)
                  {
                    (*(void (**)(unint64_t *))(*v119 + 32))(v119);
                  }
                  else if (v121)
                  {
                    (*(void (**)(unint64_t *))(*v121 + 40))(v121);
                  }
                  uint64_t v120 = v119 - 1;
                  v119 -= 5;
                  v118 -= 5;
                }
                while (v120 != v101);
              }
              if (v101) {
                goto LABEL_151;
              }
LABEL_124:
              v415 = v103;
              ++v102;
              float32x4_t v101 = v103;
            }
            while (v102 < (unsigned __int16)*v100);
            unint64_t v122 = 0xAAAAAAAAAAAAAAABLL * (((char *)v420[1] - (char *)v420[0]) >> 2);
            if (!v431)
            {
              v429 = 0;
              goto LABEL_162;
            }
            if (v431 == v430)
            {
              char v98 = (void *)v430[0];
              goto LABEL_153;
            }
            long long v123 = (void *)(*(uint64_t (**)(void))(*v431 + 16))();
            v429 = v123;
            if (!v123) {
              goto LABEL_162;
            }
LABEL_154:
            if (v123 == v428)
            {
              v436 = &v435;
              (*(void (**)(void *, uint64_t *))(v428[0] + 24))(v428, &v435);
              char v124 = v436;
              if (v122 >= 3) {
                goto LABEL_165;
              }
LABEL_156:
              unint64_t v125 = 0;
              if (v124 != &v435) {
                goto LABEL_157;
              }
LABEL_171:
              (*(void (**)(uint64_t *))(v435 + 32))(&v435);
            }
            else
            {
              char v124 = (uint64_t *)(*(uint64_t (**)(void *))(*v123 + 16))(v123);
              v436 = v124;
              if (v122 < 3) {
                goto LABEL_156;
              }
LABEL_165:
              unint64_t v432 = 0;
              if (!v124
                || (LODWORD(v427) = (*(float (**)(uint64_t *, unint64_t *))(*v124 + 48))(v124, &v432),
                    HIDWORD(v427) = v126,
                    unint64_t v432 = v122 - 1,
                    !v436))
              {
LABEL_425:
                std::__throw_bad_function_call[abi:nn180100]();
                __break(1u);
              }
              *(float *)&unsigned int v127 = (*(float (**)(uint64_t *, unint64_t *))(*v436 + 48))(v436, &v432);
              unint64_t v432 = __PAIR64__(v128, v127);
              if (v427 == __PAIR64__(v128, v127)) {
                unint64_t v125 = v122 - 1;
              }
              else {
                unint64_t v125 = v122;
              }
              char v124 = v436;
              if (v436 == &v435) {
                goto LABEL_171;
              }
LABEL_157:
              if (v124) {
                (*(void (**)(uint64_t *))(*v124 + 40))(v124);
              }
            }
LABEL_172:
            uint64_t v129 = v414;
            unint64_t v130 = v415;
            if (v414 != v415)
            {
              uint64_t v131 = 0;
              while (2)
              {
                unint64_t v132 = *v129;
                if (!*v129) {
                  goto LABEL_176;
                }
                float v133 = (unint64_t *)v129[4];
                if (v133)
                {
                  if (v129 + 1 == v133)
                  {
                    v434 = &v432;
                    (*(void (**)(unint64_t *, unint64_t *))(*v133 + 24))(v133, &v432);
                    float v134 = v434;
                    if (v132 >= 3) {
                      goto LABEL_183;
                    }
LABEL_181:
                    unint64_t v135 = 0;
                  }
                  else
                  {
                    float v134 = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*v133 + 16))(v133);
                    v434 = v134;
                    if (v132 < 3) {
                      goto LABEL_181;
                    }
LABEL_183:
                    unint64_t v427 = 0;
                    if (!v134) {
                      goto LABEL_425;
                    }
                    LODWORD(v426) = (*(float (**)(unint64_t *, unint64_t *))(*v134 + 48))(v134, &v427);
                    HIDWORD(v426) = v136;
                    unint64_t v427 = v132 - 1;
                    if (!v434) {
                      goto LABEL_425;
                    }
                    *(float *)&unsigned int v137 = (*(float (**)(unint64_t *, unint64_t *))(*v434 + 48))(v434, &v427);
                    unint64_t v427 = __PAIR64__(v138, v137);
                    if (v426 == __PAIR64__(v138, v137)) {
                      unint64_t v135 = v132 - 1;
                    }
                    else {
                      unint64_t v135 = v132;
                    }
                    float v134 = v434;
                  }
                  v125 += v135;
                  if (v134 == &v432)
                  {
                    (*(void (**)(unint64_t *))(v432 + 32))(&v432);
                  }
                  else if (v134)
                  {
                    (*(void (**)(unint64_t *))(*v134 + 40))(v134);
                    unint64_t v130 = v415;
                  }
                }
                else
                {
                  v434 = 0;
                  if (v132 >= 3)
                  {
                    unint64_t v427 = 0;
                    goto LABEL_425;
                  }
                }
                ++v131;
LABEL_176:
                v129 += 5;
                if (v129 == v130) {
                  goto LABEL_194;
                }
                continue;
              }
            }
            uint64_t v131 = 0;
            unint64_t v130 = v414;
LABEL_194:
            if (v429 == v428)
            {
              (*(void (**)(void *))(v428[0] + 32))(v428);
              uint64_t v139 = v400;
            }
            else
            {
              uint64_t v139 = v400;
              if (v429) {
                (*(void (**)(void))(*v429 + 40))();
              }
            }
            __n128 v140 = (char *)v421[1];
            if (v421[1] == (void *)v422)
            {
              uint64_t v142 = 0;
              goto LABEL_219;
            }
            unint64_t v141 = v422 - (unint64_t)v421[1];
            if ((unint64_t)v422 - (unint64_t)v421[1] >= 8)
            {
              if (v141 >= 0x20)
              {
                int64x2_t v144 = 0uLL;
                unint64_t v143 = v141 & 0xFFFFFFFFFFFFFFE0;
                int64x2_t v145 = 0uLL;
                long long v146 = (int8x16_t *)((char *)v421[1] + 16);
                int64x2_t v147 = 0uLL;
                unint64_t v148 = v141 & 0xFFFFFFFFFFFFFFE0;
                int64x2_t v149 = 0uLL;
                int64x2_t v150 = 0uLL;
                int64x2_t v151 = 0uLL;
                int64x2_t v152 = 0uLL;
                int64x2_t v153 = 0uLL;
                int64x2_t v154 = 0uLL;
                int64x2_t v155 = 0uLL;
                int64x2_t v156 = 0uLL;
                int64x2_t v157 = 0uLL;
                int64x2_t v158 = 0uLL;
                int64x2_t v159 = 0uLL;
                int64x2_t v160 = 0uLL;
                int64x2_t v161 = 0uLL;
                do
                {
                  v162.i64[0] = 0x303030303030303;
                  v162.i64[1] = 0x303030303030303;
                  int8x16_t v163 = vandq_s8(*v146, v162);
                  uint8x16_t v164 = (uint8x16_t)vceqzq_s8(vandq_s8(v146[-1], v162));
                  uint16x8_t v165 = vmovl_u8(*(uint8x8_t *)v164.i8);
                  uint32x4_t v166 = vmovl_u16(*(uint16x4_t *)v165.i8);
                  v167.i64[0] = v166.u32[0];
                  v167.i64[1] = v166.u32[1];
                  int8x16_t v168 = (int8x16_t)vdupq_n_s64(1uLL);
                  int64x2_t v406 = (int64x2_t)vandq_s8(v167, v168);
                  v167.i64[0] = v166.u32[2];
                  v167.i64[1] = v166.u32[3];
                  int64x2_t v169 = (int64x2_t)vandq_s8(v167, v168);
                  uint32x4_t v170 = vmovl_high_u16(v165);
                  v167.i64[0] = v170.u32[0];
                  v167.i64[1] = v170.u32[1];
                  int64x2_t v171 = (int64x2_t)vandq_s8(v167, v168);
                  uint16x8_t v172 = vmovl_high_u8(v164);
                  uint32x4_t v173 = vmovl_u16(*(uint16x4_t *)v172.i8);
                  v167.i64[0] = v173.u32[0];
                  v167.i64[1] = v173.u32[1];
                  int64x2_t v174 = (int64x2_t)vandq_s8(v167, v168);
                  v167.i64[0] = v170.u32[2];
                  v167.i64[1] = v170.u32[3];
                  int64x2_t v175 = (int64x2_t)vandq_s8(v167, v168);
                  v167.i64[0] = v173.u32[2];
                  v167.i64[1] = v173.u32[3];
                  int64x2_t v176 = (int64x2_t)vandq_s8(v167, v168);
                  uint32x4_t v177 = vmovl_high_u16(v172);
                  v167.i64[0] = v177.u32[0];
                  v167.i64[1] = v177.u32[1];
                  int64x2_t v178 = (int64x2_t)vandq_s8(v167, v168);
                  v167.i64[0] = v177.u32[2];
                  v167.i64[1] = v177.u32[3];
                  int64x2_t v179 = (int64x2_t)vandq_s8(v167, v168);
                  uint8x16_t v180 = (uint8x16_t)vceqzq_s8(v163);
                  uint16x8_t v181 = vmovl_u8(*(uint8x8_t *)v180.i8);
                  uint32x4_t v182 = vmovl_u16(*(uint16x4_t *)v181.i8);
                  v167.i64[0] = v182.u32[0];
                  v167.i64[1] = v182.u32[1];
                  int64x2_t v183 = (int64x2_t)vandq_s8(v167, v168);
                  v167.i64[0] = v182.u32[2];
                  v167.i64[1] = v182.u32[3];
                  int64x2_t v184 = (int64x2_t)vandq_s8(v167, v168);
                  uint32x4_t v185 = vmovl_high_u16(v181);
                  v167.i64[0] = v185.u32[0];
                  v167.i64[1] = v185.u32[1];
                  int64x2_t v186 = (int64x2_t)vandq_s8(v167, v168);
                  uint16x8_t v187 = vmovl_high_u8(v180);
                  uint32x4_t v188 = vmovl_u16(*(uint16x4_t *)v187.i8);
                  v167.i64[0] = v188.u32[0];
                  v167.i64[1] = v188.u32[1];
                  int64x2_t v189 = (int64x2_t)vandq_s8(v167, v168);
                  v167.i64[0] = v185.u32[2];
                  v167.i64[1] = v185.u32[3];
                  int64x2_t v190 = (int64x2_t)vandq_s8(v167, v168);
                  v167.i64[0] = v188.u32[2];
                  v167.i64[1] = v188.u32[3];
                  int64x2_t v191 = (int64x2_t)vandq_s8(v167, v168);
                  uint32x4_t v192 = vmovl_high_u16(v187);
                  v167.i64[0] = v192.u32[0];
                  v167.i64[1] = v192.u32[1];
                  int64x2_t v193 = (int64x2_t)vandq_s8(v167, v168);
                  v167.i64[0] = v192.u32[2];
                  v167.i64[1] = v192.u32[3];
                  int64x2_t v153 = vaddq_s64(v153, v179);
                  int64x2_t v152 = vaddq_s64(v152, v178);
                  int64x2_t v151 = vaddq_s64(v151, v176);
                  int64x2_t v149 = vaddq_s64(v149, v175);
                  int64x2_t v150 = vaddq_s64(v150, v174);
                  int64x2_t v147 = vaddq_s64(v147, v171);
                  int64x2_t v145 = vaddq_s64(v145, v169);
                  int64x2_t v144 = vaddq_s64(v144, v406);
                  int64x2_t v161 = vaddq_s64(v161, (int64x2_t)vandq_s8(v167, v168));
                  int64x2_t v160 = vaddq_s64(v160, v193);
                  int64x2_t v159 = vaddq_s64(v159, v191);
                  int64x2_t v157 = vaddq_s64(v157, v190);
                  int64x2_t v158 = vaddq_s64(v158, v189);
                  int64x2_t v156 = vaddq_s64(v156, v186);
                  int64x2_t v155 = vaddq_s64(v155, v184);
                  int64x2_t v154 = vaddq_s64(v154, v183);
                  v146 += 2;
                  v148 -= 32;
                }
                while (v148);
                uint64_t v142 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v154, v144), vaddq_s64(v158, v150)), vaddq_s64(vaddq_s64(v156, v147), vaddq_s64(v160, v152))), vaddq_s64(vaddq_s64(vaddq_s64(v155, v145), vaddq_s64(v159, v151)), vaddq_s64(vaddq_s64(v157, v149), vaddq_s64(v161, v153)))));
                if (v141 == v143) {
                  goto LABEL_219;
                }
                if ((v141 & 0x18) == 0)
                {
                  __n128 v140 = (char *)v421[1] + v143;
                  goto LABEL_216;
                }
              }
              else
              {
                uint64_t v142 = 0;
                unint64_t v143 = 0;
              }
              unint64_t v194 = v141 & 0xFFFFFFFFFFFFFFF8;
              int64x2_t v195 = 0uLL;
              int64x2_t v196 = (int64x2_t)(unint64_t)v142;
              unint64_t v197 = v143 - (v141 & 0xFFFFFFFFFFFFFFF8);
              unsigned int v198 = (int8x8_t *)((char *)v421[1] + v143);
              int64x2_t v199 = 0uLL;
              int64x2_t v200 = 0uLL;
              do
              {
                int8x8_t v201 = *v198++;
                uint16x8_t v202 = vmovl_u8((uint8x8_t)vceqz_s8(vand_s8(v201, (int8x8_t)0x303030303030303)));
                uint32x4_t v203 = vmovl_u16(*(uint16x4_t *)v202.i8);
                v204.i64[0] = v203.u32[0];
                v204.i64[1] = v203.u32[1];
                int8x16_t v205 = (int8x16_t)vdupq_n_s64(1uLL);
                int64x2_t v206 = (int64x2_t)vandq_s8(v204, v205);
                v204.i64[0] = v203.u32[2];
                v204.i64[1] = v203.u32[3];
                int64x2_t v207 = (int64x2_t)vandq_s8(v204, v205);
                uint32x4_t v208 = vmovl_high_u16(v202);
                v204.i64[0] = v208.u32[0];
                v204.i64[1] = v208.u32[1];
                int64x2_t v209 = (int64x2_t)vandq_s8(v204, v205);
                v204.i64[0] = v208.u32[2];
                v204.i64[1] = v208.u32[3];
                int64x2_t v200 = vaddq_s64(v200, (int64x2_t)vandq_s8(v204, v205));
                int64x2_t v199 = vaddq_s64(v199, v209);
                int64x2_t v195 = vaddq_s64(v195, v207);
                int64x2_t v196 = vaddq_s64(v196, v206);
                v197 += 8;
              }
              while (v197);
              uint64_t v142 = vaddvq_s64(vaddq_s64(vaddq_s64(v196, v199), vaddq_s64(v195, v200)));
              if (v141 != v194)
              {
                __n128 v140 = (char *)v421[1] + v194;
                goto LABEL_216;
              }
            }
            else
            {
              uint64_t v142 = 0;
              do
              {
LABEL_216:
                char v210 = *v140++;
                if ((v210 & 3) == 0) {
                  ++v142;
                }
              }
              while (v140 != (char *)v422);
            }
LABEL_219:
            uint64_t v211 = 6 * v122;
            uint64_t v212 = 2 * (v142 - 0x5555555555555555 * (((char *)v420[1] - (char *)v420[0]) >> 2));
            if (*v100)
            {
              for (uint64_t i = 0; i != (unsigned __int16)*v100; ++i)
              {
                uint64_t v216 = (char *)v417 + 48 * i;
                uint64_t v217 = (int8x16_t *)v216[3];
                v218 = (int8x16_t *)v216[4];
                if (v217 == v218)
                {
                  uint64_t v214 = 0;
                }
                else
                {
                  unint64_t v219 = (char *)v218 - (char *)v217;
                  if ((unint64_t)((char *)v218 - (char *)v217) < 8)
                  {
                    uint64_t v214 = 0;
                    goto LABEL_237;
                  }
                  if (v219 >= 0x20)
                  {
                    int64x2_t v221 = 0uLL;
                    unint64_t v220 = v219 & 0xFFFFFFFFFFFFFFE0;
                    int64x2_t v222 = 0uLL;
                    unsigned int v223 = v217 + 1;
                    int64x2_t v224 = 0uLL;
                    unint64_t v225 = v219 & 0xFFFFFFFFFFFFFFE0;
                    int64x2_t v226 = 0uLL;
                    int64x2_t v227 = 0uLL;
                    int64x2_t v228 = 0uLL;
                    int64x2_t v229 = 0uLL;
                    int64x2_t v230 = 0uLL;
                    int64x2_t v231 = 0uLL;
                    int64x2_t v232 = 0uLL;
                    int64x2_t v233 = 0uLL;
                    int64x2_t v234 = 0uLL;
                    int64x2_t v235 = 0uLL;
                    int64x2_t v236 = 0uLL;
                    int64x2_t v237 = 0uLL;
                    int64x2_t v238 = 0uLL;
                    do
                    {
                      v239.i64[0] = 0x303030303030303;
                      v239.i64[1] = 0x303030303030303;
                      int8x16_t v240 = vandq_s8(*v223, v239);
                      uint8x16_t v241 = (uint8x16_t)vceqzq_s8(vandq_s8(v223[-1], v239));
                      uint16x8_t v242 = vmovl_u8(*(uint8x8_t *)v241.i8);
                      uint32x4_t v243 = vmovl_u16(*(uint16x4_t *)v242.i8);
                      v244.i64[0] = v243.u32[0];
                      v244.i64[1] = v243.u32[1];
                      int8x16_t v245 = (int8x16_t)vdupq_n_s64(1uLL);
                      int64x2_t v407 = (int64x2_t)vandq_s8(v244, v245);
                      v244.i64[0] = v243.u32[2];
                      v244.i64[1] = v243.u32[3];
                      int64x2_t v246 = (int64x2_t)vandq_s8(v244, v245);
                      uint32x4_t v247 = vmovl_high_u16(v242);
                      v244.i64[0] = v247.u32[0];
                      v244.i64[1] = v247.u32[1];
                      int64x2_t v248 = (int64x2_t)vandq_s8(v244, v245);
                      uint16x8_t v249 = vmovl_high_u8(v241);
                      uint32x4_t v250 = vmovl_u16(*(uint16x4_t *)v249.i8);
                      v244.i64[0] = v250.u32[0];
                      v244.i64[1] = v250.u32[1];
                      int64x2_t v251 = (int64x2_t)vandq_s8(v244, v245);
                      v244.i64[0] = v247.u32[2];
                      v244.i64[1] = v247.u32[3];
                      int64x2_t v252 = (int64x2_t)vandq_s8(v244, v245);
                      v244.i64[0] = v250.u32[2];
                      v244.i64[1] = v250.u32[3];
                      int64x2_t v253 = (int64x2_t)vandq_s8(v244, v245);
                      uint32x4_t v254 = vmovl_high_u16(v249);
                      v244.i64[0] = v254.u32[0];
                      v244.i64[1] = v254.u32[1];
                      int64x2_t v255 = (int64x2_t)vandq_s8(v244, v245);
                      v244.i64[0] = v254.u32[2];
                      v244.i64[1] = v254.u32[3];
                      int64x2_t v256 = (int64x2_t)vandq_s8(v244, v245);
                      uint8x16_t v257 = (uint8x16_t)vceqzq_s8(v240);
                      uint16x8_t v258 = vmovl_u8(*(uint8x8_t *)v257.i8);
                      uint32x4_t v259 = vmovl_u16(*(uint16x4_t *)v258.i8);
                      v244.i64[0] = v259.u32[0];
                      v244.i64[1] = v259.u32[1];
                      int64x2_t v260 = (int64x2_t)vandq_s8(v244, v245);
                      v244.i64[0] = v259.u32[2];
                      v244.i64[1] = v259.u32[3];
                      int64x2_t v261 = (int64x2_t)vandq_s8(v244, v245);
                      uint32x4_t v262 = vmovl_high_u16(v258);
                      v244.i64[0] = v262.u32[0];
                      v244.i64[1] = v262.u32[1];
                      int64x2_t v263 = (int64x2_t)vandq_s8(v244, v245);
                      uint16x8_t v264 = vmovl_high_u8(v257);
                      uint32x4_t v265 = vmovl_u16(*(uint16x4_t *)v264.i8);
                      v244.i64[0] = v265.u32[0];
                      v244.i64[1] = v265.u32[1];
                      int64x2_t v266 = (int64x2_t)vandq_s8(v244, v245);
                      v244.i64[0] = v262.u32[2];
                      v244.i64[1] = v262.u32[3];
                      int64x2_t v267 = (int64x2_t)vandq_s8(v244, v245);
                      v244.i64[0] = v265.u32[2];
                      v244.i64[1] = v265.u32[3];
                      int64x2_t v268 = (int64x2_t)vandq_s8(v244, v245);
                      uint32x4_t v269 = vmovl_high_u16(v264);
                      v244.i64[0] = v269.u32[0];
                      v244.i64[1] = v269.u32[1];
                      int64x2_t v270 = (int64x2_t)vandq_s8(v244, v245);
                      v244.i64[0] = v269.u32[2];
                      v244.i64[1] = v269.u32[3];
                      int64x2_t v230 = vaddq_s64(v230, v256);
                      int64x2_t v229 = vaddq_s64(v229, v255);
                      int64x2_t v228 = vaddq_s64(v228, v253);
                      int64x2_t v226 = vaddq_s64(v226, v252);
                      int64x2_t v227 = vaddq_s64(v227, v251);
                      int64x2_t v224 = vaddq_s64(v224, v248);
                      int64x2_t v222 = vaddq_s64(v222, v246);
                      int64x2_t v221 = vaddq_s64(v221, v407);
                      int64x2_t v238 = vaddq_s64(v238, (int64x2_t)vandq_s8(v244, v245));
                      int64x2_t v237 = vaddq_s64(v237, v270);
                      int64x2_t v236 = vaddq_s64(v236, v268);
                      int64x2_t v234 = vaddq_s64(v234, v267);
                      int64x2_t v235 = vaddq_s64(v235, v266);
                      int64x2_t v233 = vaddq_s64(v233, v263);
                      int64x2_t v232 = vaddq_s64(v232, v261);
                      int64x2_t v231 = vaddq_s64(v231, v260);
                      v223 += 2;
                      v225 -= 32;
                    }
                    while (v225);
                    uint64_t v214 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v231, v221), vaddq_s64(v235, v227)), vaddq_s64(vaddq_s64(v233, v224), vaddq_s64(v237, v229))), vaddq_s64(vaddq_s64(vaddq_s64(v232, v222), vaddq_s64(v236, v228)), vaddq_s64(vaddq_s64(v234, v226), vaddq_s64(v238, v230)))));
                    if (v219 == v220) {
                      goto LABEL_222;
                    }
                    if ((v219 & 0x18) == 0)
                    {
                      uint64_t v217 = (int8x16_t *)((char *)v217 + v220);
                      do
                      {
LABEL_237:
                        __int8 v287 = v217->i8[0];
                        uint64_t v217 = (int8x16_t *)((char *)v217 + 1);
                        if ((v287 & 3) == 0) {
                          ++v214;
                        }
                      }
                      while (v217 != v218);
                      goto LABEL_222;
                    }
                  }
                  else
                  {
                    uint64_t v214 = 0;
                    unint64_t v220 = 0;
                  }
                  unint64_t v271 = v219 & 0xFFFFFFFFFFFFFFF8;
                  int64x2_t v272 = 0uLL;
                  int64x2_t v273 = (int64x2_t)(unint64_t)v214;
                  unint64_t v274 = v220 - (v219 & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v275 = (int8x8_t *)&v217->i8[v220];
                  int64x2_t v276 = 0uLL;
                  int64x2_t v277 = 0uLL;
                  do
                  {
                    int8x8_t v278 = *v275++;
                    uint16x8_t v279 = vmovl_u8((uint8x8_t)vceqz_s8(vand_s8(v278, (int8x8_t)0x303030303030303)));
                    uint32x4_t v280 = vmovl_u16(*(uint16x4_t *)v279.i8);
                    v281.i64[0] = v280.u32[0];
                    v281.i64[1] = v280.u32[1];
                    int8x16_t v282 = (int8x16_t)vdupq_n_s64(1uLL);
                    int64x2_t v283 = (int64x2_t)vandq_s8(v281, v282);
                    v281.i64[0] = v280.u32[2];
                    v281.i64[1] = v280.u32[3];
                    int64x2_t v284 = (int64x2_t)vandq_s8(v281, v282);
                    uint32x4_t v285 = vmovl_high_u16(v279);
                    v281.i64[0] = v285.u32[0];
                    v281.i64[1] = v285.u32[1];
                    int64x2_t v286 = (int64x2_t)vandq_s8(v281, v282);
                    v281.i64[0] = v285.u32[2];
                    v281.i64[1] = v285.u32[3];
                    int64x2_t v277 = vaddq_s64(v277, (int64x2_t)vandq_s8(v281, v282));
                    int64x2_t v276 = vaddq_s64(v276, v286);
                    int64x2_t v272 = vaddq_s64(v272, v284);
                    int64x2_t v273 = vaddq_s64(v273, v283);
                    v274 += 8;
                  }
                  while (v274);
                  uint64_t v214 = vaddvq_s64(vaddq_s64(vaddq_s64(v273, v276), vaddq_s64(v272, v277)));
                  if (v219 != v271)
                  {
                    uint64_t v217 = (int8x16_t *)((char *)v217 + v271);
                    goto LABEL_237;
                  }
                }
LABEL_222:
                uint64_t v215 = v216[1] - *v216;
                v122 += 0xAAAAAAAAAAAAAAABLL * (v215 >> 2);
                v211 += v215 >> 1;
                v212 += 2 * (v214 - 0x5555555555555555 * (v215 >> 2));
              }
            }
            uint64_t v288 = 3 * (v125 + 2 * v131) - 6;
            if (*(unsigned char *)v399) {
              uint64_t v289 = 3 * (v125 + 2 * v131) - 6;
            }
            else {
              uint64_t v289 = 0;
            }
            float v290 = *(float *)(v139 + 20 * v405 + 4) - *(float *)(v139 + 20 * v405 + 8);
            if (*(unsigned char *)v399) {
              unint64_t v291 = v122;
            }
            else {
              unint64_t v291 = 0;
            }
            if (v290 <= 0.0) {
              uint64_t v292 = 0;
            }
            else {
              uint64_t v292 = v211;
            }
            if (v290 <= 0.0) {
              uint64_t v293 = 0;
            }
            else {
              uint64_t v293 = v212;
            }
            uint64_t v294 = v414;
            if (v414)
            {
              if (v130 != v414)
              {
                uint64_t v295 = (char *)(v130 - 4);
                v296 = v295;
                do
                {
                  uint64_t v298 = (char *)*((void *)v296 + 3);
                  if (v296 == v298)
                  {
                    (*(void (**)(char *))(*(void *)v296 + 32))(v296);
                  }
                  else if (v298)
                  {
                    (*(void (**)(char *))(*(void *)v298 + 40))(v298);
                  }
                  uint64_t v297 = (unint64_t *)(v296 - 8);
                  v296 -= 40;
                  v295 -= 40;
                }
                while (v297 != v294);
                unint64_t v130 = v414;
              }
              v415 = v294;
              operator delete(v130);
            }
            if (v431 == v430)
            {
              (*(void (**)(void *))(v430[0] + 32))(v430);
              int v299 = (char *)v417;
              if (v417) {
                goto LABEL_267;
              }
LABEL_277:
              v303 = v421[1];
              if (v421[1]) {
                goto LABEL_278;
              }
              goto LABEL_279;
            }
            if (v431) {
              (*(void (**)(void))(*v431 + 40))();
            }
            int v299 = (char *)v417;
            if (!v417) {
              goto LABEL_277;
            }
LABEL_267:
            for (uint64_t j = v418; j != v299; j -= 48)
            {
              v301 = (void *)*((void *)j - 3);
              if (v301)
              {
                *((void *)j - 2) = v301;
                operator delete(v301);
              }
              v302 = (void *)*((void *)j - 6);
              if (v302)
              {
                *((void *)j - 5) = v302;
                operator delete(v302);
              }
            }
            operator delete(v299);
            v303 = v421[1];
            if (!v421[1]) {
              goto LABEL_279;
            }
LABEL_278:
            *(void *)&long long v422 = v303;
            operator delete(v303);
LABEL_279:
            if (v420[0])
            {
              v420[1] = v420[0];
              operator delete(v420[0]);
            }
            uint64_t v95 = v288 + v401 + v289 + v292;
            unint64_t v94 = v122 + v403 + v291 + v293;
            uint64_t v93 = v405 + 1;
            a2 = v394;
            a4 = v393;
            uint64_t v96 = v400;
            if (v405 + 1 >= (unint64_t)*v395) {
              goto LABEL_282;
            }
          }
        }
        LODWORD(v95) = 0;
        unint64_t v94 = 0;
LABEL_282:
        int v402 = v95;
        int v404 = v94;
        v304 = (char *)v388[4];
        v305 = (char *)v388[5];
        if (v305 == v304 || v94 + *((unsigned int *)v305 - 7) >= 0x10000)
        {
          unint64_t v306 = v388[6];
          if ((unint64_t)v305 >= v306)
          {
            unint64_t v308 = 0xCCCCCCCCCCCCCCCDLL * ((v305 - v304) >> 4) + 1;
            if (v308 > 0x333333333333333) {
              abort();
            }
            unint64_t v309 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v306 - (void)v304) >> 4);
            if (2 * v309 > v308) {
              unint64_t v308 = 2 * v309;
            }
            if (v309 >= 0x199999999999999) {
              unint64_t v310 = 0x333333333333333;
            }
            else {
              unint64_t v310 = v308;
            }
            if (v310 > 0x333333333333333) {
LABEL_422:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            v311 = (char *)operator new(80 * v310);
            v312 = &v311[16 * ((v305 - v304) >> 4)];
            v312[64] = 0;
            v312[72] = 0;
            *(_OWORD *)v312 = 0u;
            *((_OWORD *)v312 + 1) = 0u;
            v313 = &v311[80 * v310];
            *((_OWORD *)v312 + 2) = 0u;
            *(_OWORD *)(v312 + 42) = 0u;
            v307 = v312 + 80;
            if (v305 == v304)
            {
              v388[4] = v312;
              v388[5] = v307;
              v388[6] = v313;
            }
            else
            {
              do
              {
                long long v314 = *((_OWORD *)v305 - 5);
                v305 -= 80;
                *((_OWORD *)v312 - 5) = v314;
                v312 -= 80;
                *((void *)v312 + 2) = *((void *)v305 + 2);
                *(void *)v305 = 0;
                *((void *)v305 + 1) = 0;
                *((void *)v305 + 2) = 0;
                *(_OWORD *)(v312 + 24) = *(_OWORD *)(v305 + 24);
                *((void *)v312 + 5) = *((void *)v305 + 5);
                *((void *)v305 + 3) = 0;
                *((void *)v305 + 4) = 0;
                *((void *)v305 + 5) = 0;
                long long v315 = *((_OWORD *)v305 + 3);
                *(_OWORD *)(v312 + 57) = *(_OWORD *)(v305 + 57);
                *((_OWORD *)v312 + 3) = v315;
              }
              while (v305 != v304);
              v305 = (char *)v388[4];
              v316 = (char *)v388[5];
              v388[4] = v312;
              v388[5] = v307;
              v388[6] = v313;
              while (v316 != v305)
              {
                v317 = (void *)*((void *)v316 - 7);
                if (v317)
                {
                  *((void *)v316 - 6) = v317;
                  operator delete(v317);
                }
                v318 = (void *)*((void *)v316 - 10);
                if (v318)
                {
                  *((void *)v316 - 9) = v318;
                  operator delete(v318);
                }
                v316 -= 80;
              }
            }
            if (v305) {
              operator delete(v305);
            }
          }
          else
          {
            v305[64] = 0;
            v305[72] = 0;
            *(_OWORD *)v305 = 0u;
            *((_OWORD *)v305 + 1) = 0u;
            *((_OWORD *)v305 + 2) = 0u;
            v307 = v305 + 80;
            *(_OWORD *)(v305 + 42) = 0u;
          }
          v388[5] = v307;
          v305 = v307;
        }
        v320 = (uint64_t *)*((void *)v305 - 9);
        unint64_t v319 = *((void *)v305 - 8);
        if ((unint64_t)v320 >= v319)
        {
          v323 = (char *)*((void *)v305 - 10);
          uint64_t v324 = ((char *)v320 - v323) >> 3;
          unint64_t v325 = v324 + 1;
          if ((unint64_t)(v324 + 1) >> 61) {
            goto LABEL_427;
          }
          uint64_t v326 = v319 - (void)v323;
          if (v326 >> 2 > v325) {
            unint64_t v325 = v326 >> 2;
          }
          if ((unint64_t)v326 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v327 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v327 = v325;
          }
          if (v327)
          {
            if (v327 >> 61) {
              goto LABEL_422;
            }
            v328 = (char *)operator new(8 * v327);
          }
          else
          {
            v328 = 0;
          }
          v329 = (uint64_t *)&v328[8 * v324];
          uint64_t *v329 = v384;
          v321 = v329 + 1;
          if (v320 != (uint64_t *)v323)
          {
            unint64_t v330 = (char *)(v320 - 1) - v323;
            if (v330 < 0x58) {
              goto LABEL_431;
            }
            if ((unint64_t)(v323 - v328) < 0x20) {
              goto LABEL_431;
            }
            uint64_t v331 = (v330 >> 3) + 1;
            v332 = &v328[(char *)v320 - v323 - 16];
            v333 = v320 - 2;
            uint64_t v334 = v331 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v335 = *(_OWORD *)v333;
              *((_OWORD *)v332 - 1) = *((_OWORD *)v333 - 1);
              *(_OWORD *)v332 = v335;
              v332 -= 32;
              v333 -= 4;
              v334 -= 4;
            }
            while (v334);
            v329 -= v331 & 0x3FFFFFFFFFFFFFFCLL;
            v320 -= v331 & 0x3FFFFFFFFFFFFFFCLL;
            if (v331 != (v331 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_431:
              do
              {
                uint64_t v336 = *--v320;
                *--v329 = v336;
              }
              while (v320 != (uint64_t *)v323);
            }
            v320 = (uint64_t *)*((void *)v305 - 10);
          }
          *((void *)v305 - 10) = v329;
          *((void *)v305 - 9) = v321;
          *((void *)v305 - 8) = &v328[8 * v327];
          unint64_t v322 = v390;
          if (v320) {
            operator delete(v320);
          }
        }
        else
        {
          uint64_t *v320 = v384;
          v321 = v320 + 1;
          unint64_t v322 = v390;
        }
        *((void *)v305 - 9) = v321;
        int v337 = v386;
        if (v380) {
          int v337 = v387;
        }
        if ((v379 & 1) == 0)
        {
          int8x8_t v338 = *(int8x8_t *)(v378 + 8);
          if (!*(void *)&v338) {
            goto LABEL_351;
          }
          uint8x8_t v339 = (uint8x8_t)vcnt_s8(v338);
          v339.i16[0] = vaddlv_u8(v339);
          if (v339.u32[0] > 1uLL)
          {
            unint64_t v340 = v322;
            if (*(void *)&v338 <= v322) {
              unint64_t v340 = v322 % *(void *)&v338;
            }
          }
          else
          {
            unint64_t v340 = (v338.i32[0] - 1) & v322;
          }
          v341 = *(uint64_t ****)(*(void *)v378 + 8 * v340);
          if (!v341 || (v342 = *v341) == 0)
          {
LABEL_351:
            int v337 = 0xFFFF;
            goto LABEL_352;
          }
          if (v339.u32[0] < 2uLL)
          {
            uint64_t v343 = *(void *)&v338 - 1;
            while (1)
            {
              v345 = v342[1];
              if (v345 == (uint64_t *)v322)
              {
                if (*((unsigned __int16 *)v342 + 8) == v322) {
                  goto LABEL_393;
                }
              }
              else if (((unint64_t)v345 & v343) != v340)
              {
                goto LABEL_351;
              }
              v342 = (uint64_t **)*v342;
              int v337 = 0xFFFF;
              if (!v342) {
                goto LABEL_352;
              }
            }
          }
          do
          {
            unint64_t v344 = (unint64_t)v342[1];
            if (v344 == v322)
            {
              if (*((unsigned __int16 *)v342 + 8) == v322)
              {
LABEL_393:
                int v337 = *((unsigned __int16 *)v342 + 9);
                break;
              }
            }
            else
            {
              if (v344 >= *(void *)&v338) {
                v344 %= *(void *)&v338;
              }
              if (v344 != v340) {
                goto LABEL_351;
              }
            }
            v342 = (uint64_t **)*v342;
            int v337 = 0xFFFF;
          }
          while (v342);
        }
LABEL_352:
        v347 = (char *)*((void *)v305 - 6);
        unint64_t v346 = *((void *)v305 - 5);
        int v386 = v337;
        if ((unint64_t)v347 >= v346)
        {
          v349 = (char *)*((void *)v305 - 7);
          uint64_t v350 = v347 - v349;
          if (v347 - v349 < -2) {
LABEL_427:
          }
            abort();
          uint64_t v351 = v350 >> 1;
          unint64_t v352 = v346 - (void)v349;
          if (v352 <= (v350 >> 1) + 1) {
            unint64_t v353 = v351 + 1;
          }
          else {
            unint64_t v353 = v352;
          }
          if (v352 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v354 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v354 = v353;
          }
          if (v354)
          {
            if (v354 < 0) {
              goto LABEL_422;
            }
            v355 = operator new(2 * v354);
          }
          else
          {
            v355 = 0;
          }
          v356 = &v355[2 * v351];
          _WORD *v356 = v386;
          v348 = v356 + 1;
          if (v347 != v349)
          {
            unint64_t v357 = v347 - 2 - v349;
            if (v357 < 0x1E) {
              goto LABEL_432;
            }
            if ((unint64_t)(v347 - &v355[v350 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
              goto LABEL_432;
            }
            uint64_t v358 = (v357 >> 1) + 1;
            v359 = &v355[2 * v351 - 16];
            v360 = v347 - 16;
            unint64_t v361 = v358 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              long long v362 = *(_OWORD *)v360;
              *(v359 - 1) = *((_OWORD *)v360 - 1);
              _OWORD *v359 = v362;
              v359 -= 2;
              v360 -= 32;
              v361 -= 16;
            }
            while (v361);
            v356 -= v358 & 0xFFFFFFFFFFFFFFF0;
            v347 -= 2 * (v358 & 0xFFFFFFFFFFFFFFF0);
            if (v358 != (v358 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_432:
              do
              {
                __int16 v363 = *((_WORD *)v347 - 1);
                v347 -= 2;
                *--v356 = v363;
              }
              while (v347 != v349);
            }
          }
          *((void *)v305 - 7) = v356;
          *((void *)v305 - 6) = v348;
          *((void *)v305 - 5) = &v355[2 * v354];
          if (v349) {
            operator delete(v349);
          }
        }
        else
        {
          *(_WORD *)v347 = v337;
          v348 = v347 + 2;
        }
        *((void *)v305 - 6) = v348;
        int v364 = *((_DWORD *)v305 - 7) + v404;
        *((_DWORD *)v305 - 8) += v402;
        *((_DWORD *)v305 - 7) = v364;
        if (*(unsigned char *)(v383 + v390))
        {
          if (*(v305 - 8))
          {
            unint64_t v365 = *((void *)v305 - 2);
          }
          else
          {
            unint64_t v365 = -1;
            *((void *)v305 - 2) = -1;
            *(v305 - 8) = 1;
          }
          if (*(void *)(v389 + 40 * v390 + 24) < v365) {
            unint64_t v365 = *(void *)(v389 + 40 * v390 + 24);
          }
          *((void *)v305 - 2) = v365;
          *(v305 - 8) = 1;
          *((_WORD *)v305 - 12) = *(unsigned char *)(geo::codec::VectorTile::key(*a2) + 1) & 0x3F | 0x100;
        }
        uint64_t v49 = v387;
        goto LABEL_382;
      }
      BOOL v66 = (v54 & (v54 - 1)) != 0;
      if (v54 < 3) {
        BOOL v66 = 1;
      }
      unint64_t v67 = v66 | (2 * v54);
      unint64_t v68 = vcvtps_u32_f32(v65 / v413);
      if (v67 <= v68) {
        size_t prime = v68;
      }
      else {
        size_t prime = v67;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v54 = (unint64_t)__p[1];
      }
      if (prime <= v54)
      {
        if (prime >= v54) {
          goto LABEL_94;
        }
        unint64_t v80 = vcvtps_u32_f32((float)*((unint64_t *)&v412 + 1) / v413);
        if (v54 < 3 || (uint8x8_t v81 = (uint8x8_t)vcnt_s8((int8x8_t)v54), v81.i16[0] = vaddlv_u8(v81), v81.u32[0] > 1uLL))
        {
          unint64_t v80 = std::__next_prime(v80);
        }
        else
        {
          uint64_t v82 = 1 << -(char)__clz(v80 - 1);
          if (v80 >= 2) {
            unint64_t v80 = v82;
          }
        }
        if (prime <= v80) {
          size_t prime = v80;
        }
        if (prime >= v54)
        {
          unint64_t v54 = (unint64_t)__p[1];
LABEL_94:
          if ((v54 & (v54 - 1)) != 0)
          {
            if (v53 >= v54) {
              unint64_t v51 = v53 % v54;
            }
            else {
              unint64_t v51 = v53;
            }
          }
          else
          {
            unint64_t v51 = (v54 - 1) & v53;
          }
          goto LABEL_107;
        }
        if (!prime)
        {
          v366 = __p[0];
          __p[0] = 0;
          if (v366) {
            operator delete(v366);
          }
          unint64_t v54 = 0;
          __p[1] = 0;
          goto LABEL_94;
        }
      }
      if (prime >> 61) {
        goto LABEL_422;
      }
      BOOL v70 = operator new(8 * prime);
      BOOL v71 = __p[0];
      __p[0] = v70;
      if (v71) {
        operator delete(v71);
      }
      uint64_t v72 = 0;
      __p[1] = (void *)prime;
      do
        *((void *)__p[0] + v72++) = 0;
      while (prime != v72);
      unsigned int v73 = (void **)v412;
      if (!(void)v412)
      {
LABEL_93:
        unint64_t v54 = prime;
        goto LABEL_94;
      }
      size_t v74 = *(void *)(v412 + 8);
      size_t v75 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v76 = v74 & v75;
        *((void *)__p[0] + v76) = &v412;
        for (k = *v73; *v73; k = *v73)
        {
          size_t v78 = k[1] & v75;
          if (v78 == v76)
          {
            unsigned int v73 = (void **)k;
          }
          else if (*((void *)__p[0] + v78))
          {
            *unsigned int v73 = (void *)*k;
            uint64_t v79 = 8 * v78;
            void *k = **(void **)((char *)__p[0] + v79);
            **(void **)((char *)__p[0] + v79) = k;
          }
          else
          {
            *((void *)__p[0] + v78) = v73;
            unsigned int v73 = (void **)k;
            size_t v76 = v78;
          }
        }
        goto LABEL_93;
      }
      if (v74 >= prime) {
        v74 %= prime;
      }
      *((void *)__p[0] + v74) = &v412;
      unint64_t v83 = *v73;
      if (!*v73) {
        goto LABEL_93;
      }
      while (1)
      {
        size_t v85 = v83[1];
        if (v85 >= prime) {
          v85 %= prime;
        }
        if (v85 != v74)
        {
          if (!*((void *)__p[0] + v85))
          {
            *((void *)__p[0] + v85) = v73;
            goto LABEL_98;
          }
          *unsigned int v73 = (void *)*v83;
          uint64_t v84 = 8 * v85;
          void *v83 = **(void **)((char *)__p[0] + v84);
          **(void **)((char *)__p[0] + v84) = v83;
          unint64_t v83 = v73;
        }
        size_t v85 = v74;
LABEL_98:
        unsigned int v73 = (void **)v83;
        unint64_t v83 = (void *)*v83;
        size_t v74 = v85;
        if (!v83) {
          goto LABEL_93;
        }
      }
    }
    __int16 v38 = operator new(0x78uLL);
    v38[1] = 0;
    uint64_t v38[2] = 0;
    *__int16 v38 = &unk_1EF57FAA8;
    unsigned __int16 v27 = (char *)(v38 + 3);
    md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::StyleTexture((uint64_t)(v38 + 3), v40 + 1);
    v409 = (char *)(v38 + 3);
    v410 = (std::__shared_weak_count *)v38;
    unint64_t v41 = (void *)geo::codec::VectorTile::materialModifiers(*a2);
    for (m = *(uint64_t ***)(v378 + 16); m; m = (uint64_t **)*m)
    {
      uint64_t v43 = *((unsigned __int16 *)m + 9);
      signed int v44 = (unsigned char *)(*v41 + 16 * v43);
      char v45 = v44[8];
      char v46 = v44[9];
      char v47 = v44[10];
      LOBYTE(v420[0]) = v45;
      BYTE1(v420[0]) = v46;
      BYTE2(v420[0]) = v47;
      BYTE3(v420[0]) = -1;
      BOOL v48 = (unsigned char *)(*(void *)v27 + 4 * v43);
      if (LODWORD(v420[0]) != *(_DWORD *)v48)
      {
        *((unsigned char *)v38 + 56) = 1;
        *BOOL v48 = v45;
        v48[1] = v46;
        v48[2] = v47;
        v48[3] = -1;
      }
    }
    uint64_t v39 = (_DWORD *)(*(void *)v27 + 4 * v40);
    goto LABEL_22;
  }
  uint64_t v25 = geo::codec::VectorTile::daVinciBuildingColors(*a2);
  uint64_t v26 = operator new(0x78uLL);
  v26[1] = 0;
  v26[2] = 0;
  *uint64_t v26 = &unk_1EF57FAA8;
  unsigned __int16 v27 = (char *)(v26 + 3);
  md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::StyleTexture((uint64_t)(v26 + 3), (unsigned __int16)(v24 >> 1));
  v409 = (char *)(v26 + 3);
  v410 = (std::__shared_weak_count *)v26;
  if (!(unsigned __int16)(v24 >> 1))
  {
    if (*((unsigned char *)v26 + 56))
    {
LABEL_397:
      v367 = operator new(0x58uLL);
      v367[1] = 0;
      v367[2] = 0;
      void *v367 = &unk_1EF583858;
      int v368 = *((_DWORD *)v27 + 23);
      v367[5] = 0;
      v367[6] = 0;
      *((_DWORD *)v367 + 14) = 0;
      v367[3] = &unk_1EF55AE58;
      v367[4] = 0;
      *(void *)((char *)v367 + 60) = 0x100000001;
      *((_DWORD *)v367 + 17) = 1;
      *((_DWORD *)v367 + 18) = v368;
      *((_DWORD *)v367 + 19) = v368;
      v367[10] = 0;
      v420[0] = v367 + 3;
      v420[1] = v367;
      operator new();
    }
    goto LABEL_401;
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  do
  {
    uint64_t v30 = (*v385)->u16[v28];
    if (*(unsigned char *)(v25 + 4 * v30))
    {
      uint64_t v31 = (unsigned char *)(v25 + 4 * v30);
      char v32 = v31[1];
      char v33 = v31[2];
      char v34 = v31[3];
      LOBYTE(v420[0]) = v32;
      BYTE1(v420[0]) = v33;
      BYTE2(v420[0]) = v34;
      BYTE3(v420[0]) = -1;
      uint64_t v35 = *(void *)v27;
      if (LODWORD(v420[0]) != *(_DWORD *)(*(void *)v27 + v29))
      {
        *((unsigned char *)v26 + 56) = 1;
        __int16 v36 = (unsigned char *)(v35 + v29);
        *__int16 v36 = v32;
        v36[1] = v33;
        v36[2] = v34;
        v36[3] = -1;
      }
    }
    else
    {
      uint64_t v37 = *(void *)v27;
      if (v425 != *(_DWORD *)(*(void *)v27 + v29))
      {
        *((unsigned char *)v26 + 56) = 1;
        *(_DWORD *)(v37 + v29) = -1;
      }
    }
    v29 += 4;
    ++v28;
  }
  while (4 * (unsigned __int16)(v24 >> 1) != v29);
LABEL_24:
  if ((unsigned __int16)(v24 >> 1)) {
    goto LABEL_25;
  }
LABEL_395:
  if (!v27) {
    goto LABEL_403;
  }
  if (v27[32]) {
    goto LABEL_397;
  }
LABEL_401:
  unint64_t v369 = *((void *)v27 + 3);
  if (v369)
  {
    *((void *)v27 + 3) = 0;
    unint64_t v432 = v369;
    operator new();
  }
LABEL_403:
  v370 = 0;
  unint64_t v432 = 0;
  v433 = 0;
  v371 = (void **)v412;
  if ((void)v412)
  {
    do
    {
      v373 = (uint64_t **)v371[4];
      for (n = (uint64_t **)v371[5]; v373 != n; v373 += 10)
      {
        v374 = v410;
        v408[0] = v409;
        v408[1] = &v410->__vftable;
        if (v410) {
          atomic_fetch_add_explicit(&v410->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        md::DaVinciGroundTileData::_buildBuildingBatch((void *)a1, a2, v373, v371 + 2, a3, a4, v408, a5, &v432);
        if (v374 && !atomic_fetch_add(&v374->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
          std::__shared_weak_count::__release_weak(v374);
        }
      }
      v371 = (void **)*v371;
    }
    while (v371);
    v370 = v433;
  }
  if (v370 && !atomic_fetch_add(&v370->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
    std::__shared_weak_count::__release_weak(v370);
  }
  v375 = v410;
  if (v410 && !atomic_fetch_add(&v410->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
    std::__shared_weak_count::__release_weak(v375);
  }
  return std::__hash_table<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::__unordered_map_hasher<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,true>,std::__unordered_map_equal<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,md::DaVinciGroundTileData::BuildingBatchTypeHash,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>>::~__hash_table((uint64_t)__p);
}

void sub_1A25CDB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  std::__hash_table<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::__unordered_map_hasher<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,true>,std::__unordered_map_equal<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,md::DaVinciGroundTileData::BuildingBatchTypeHash,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>>::~__hash_table((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::__unordered_map_hasher<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,true>,std::__unordered_map_equal<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,md::DaVinciGroundTileData::BuildingBatchTypeHash,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v6 = (void *)*v2;
      uint64_t v7 = v2[4];
      if (v7)
      {
        uint64_t v8 = v2[5];
        double v5 = (void *)v2[4];
        if (v8 != v7)
        {
          do
          {
            int v9 = *(void **)(v8 - 56);
            if (v9)
            {
              *(void *)(v8 - 48) = v9;
              operator delete(v9);
            }
            uint64_t v10 = *(void **)(v8 - 80);
            if (v10)
            {
              *(void *)(v8 - 72) = v10;
              operator delete(v10);
            }
            v8 -= 80;
          }
          while (v8 != v7);
          double v5 = (void *)v2[4];
        }
        v2[5] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      uint64_t v2 = v6;
    }
    while (v6);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void md::DaVinciGroundTileData::_buildBuildingBatch(void *a1, geo::codec::VectorTile **a2, uint64_t **a3, void **a4, uint64_t a5, float *a6, void **a7, _OWORD *a8, void *a9)
{
  uint64_t v1099 = *MEMORY[0x1E4F143B8];
  long double v13 = +[VKDebugSettings sharedSettings];
  int v979 = [v13 daVinciBuildingHeights];

  v1080 = 0;
  v1079 = (uint64_t *)&v1080;
  long long v1082 = xmmword_1A28FE9A0;
  uint64_t v1087 = 0;
  uint64_t v1081 = 0;
  v1083 = 0;
  unint64_t v1085 = 0;
  unint64_t v1084 = 0;
  float v1086 = 0.0;
  int v1088 = 4;
  uint64_t v964 = geo::codec::VectorTile::daVinciBuildingSections(*a2);
  uint64_t v978 = geo::codec::VectorTile::daVinciLineLoops(*a2);
  uint64_t v14 = geo::codec::VectorTile::daVinciBuildingVertices(*a2);
  double v15 = *a2;
  if (v14)
  {
    uint64_t v977 = geo::codec::VectorTile::daVinciBuildingVertices(v15);
  }
  else
  {
    uint64_t v16 = geo::codec::VectorTile::daVinciVertices(v15);
    uint64_t v977 = v16 + 12 * geo::codec::VectorTile::daVinciBuildingVertexOffset(*a2);
  }
  double v17 = operator new(0xF8uLL);
  v1010 = a1;
  v17[1] = 0;
  v955 = v17 + 1;
  v17[2] = 0;
  *double v17 = &unk_1EF589D68;
  float32x4_t v18 = v17 + 3;
  float32x4_t v19 = v17;
  ggl::BufferData::BufferData((uint64_t)(v17 + 3), 2, 1, 0, 6, *((unsigned int *)a3 + 12));
  v19[3] = &unk_1EF561BA0;
  v19[4] = 2;
  v19[28] = &unk_1EF561BC0;
  v19[29] = "DV Building Index Data";
  *((_DWORD *)v19 + 60) = 0;
  v962 = v19;
  float32x4_t v20 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v20->__shared_owners_ = 0;
  p_shared_owners = &v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585180;
  uint64_t v21 = &v20[1].__vftable;
  BOOL v22 = v20;
  ggl::BufferData::BufferData((uint64_t)&v20[1], 8, 0, 0, 1, *((unsigned int *)a3 + 13));
  v22[9].__shared_weak_owners_ = (uint64_t)"DV Building Vertex Data";
  v22[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DaVinci::elevationCompressedVboReflection;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55CE08;
  v958 = v22;
  v22[9].__shared_owners_ = (uint64_t)&unk_1EF55CE28;
  BOOL v23 = operator new(0xE0uLL);
  v23[1] = 0;
  v953 = v23 + 1;
  v23[2] = 0;
  *BOOL v23 = &unk_1EF584000;
  unint64_t v24 = v23 + 3;
  uint64_t v25 = (std::__shared_weak_count *)v23;
  ggl::BufferData::BufferData((uint64_t)(v23 + 3), qword_1E9558BD0, 3, 0, 1, *((unsigned int *)a3 + 13));
  v1023 = v24;
  v961 = v25;
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B9F0;
  uint64_t v26 = operator new(0xE0uLL);
  v26[1] = 0;
  v952 = v26 + 1;
  v26[2] = 0;
  *uint64_t v26 = &unk_1EF583FC8;
  unsigned __int16 v27 = v26 + 3;
  uint64_t v28 = (std::__shared_weak_count *)v26;
  ggl::BufferData::BufferData((uint64_t)(v26 + 3), qword_1E9558C10, 3, 0, 1, *((unsigned int *)a3 + 13));
  v960 = v28;
  v28[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B9D0;
  uint64_t v29 = operator new(0xE0uLL);
  v29[1] = 0;
  v951 = v29 + 1;
  v29[2] = 0;
  void *v29 = &unk_1EF583F58;
  uint64_t v30 = v29 + 3;
  uint64_t v31 = (std::__shared_weak_count *)v29;
  ggl::BufferData::BufferData((uint64_t)(v29 + 3), qword_1E9558C50, 3, 0, 1, *((unsigned int *)a3 + 13));
  v1021 = v30;
  v959 = v31;
  v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B990;
  char v32 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v32->__shared_owners_ = 0;
  v956 = v32;
  v957 = &v32->__shared_owners_;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5895F8;
  uint64_t v33 = (uint64_t)&v32[1];
  *(void *)&long long v1028 = v21;
  *((void *)&v1028 + 1) = v958;
  atomic_fetch_add_explicit(&v958->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)buf = v18;
  *(void *)&buf[8] = v962;
  atomic_fetch_add_explicit(v962 + 1, 1uLL, memory_order_relaxed);
  ggl::DaVinci::ElevationCompressedMesh::ElevationCompressedMesh((uint64_t)&v32[1], (uint64_t)"DV Building Mesh", (uint64_t *)&v1028, (uint64_t *)buf);
  if (!atomic_fetch_add(v962 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(atomic_ullong *))(*v962 + 16))(v962);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v962);
  }
  char v34 = (std::__shared_weak_count *)*((void *)&v1028 + 1);
  if (*((void *)&v1028 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v1028 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  v1078[0] = v1023;
  v1078[1] = (uint64_t *)v961;
  atomic_fetch_add_explicit(&v961->__shared_owners_, 1uLL, memory_order_relaxed);
  ggl::Mesh::setCustomDeviceData(v33, v1078, (uint64_t *)1);
  if (!atomic_fetch_add(&v961->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v961->__on_zero_shared)(v961);
    std::__shared_weak_count::__release_weak(v961);
  }
  v1077[0] = v27;
  v1077[1] = (uint64_t *)v960;
  atomic_fetch_add_explicit(&v960->__shared_owners_, 1uLL, memory_order_relaxed);
  ggl::Mesh::setCustomDeviceData(v33, v1077, 0);
  if (!atomic_fetch_add(&v960->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v960->__on_zero_shared)(v960);
    std::__shared_weak_count::__release_weak(v960);
  }
  v1076[0] = v30;
  v1076[1] = (uint64_t *)v31;
  atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  ggl::Mesh::setCustomDeviceData(v33, v1076, (uint64_t *)2);
  if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v35 = (uint64_t *)v1010[120];
  unint64_t v36 = v1010[121];
  v982 = a2;
  if ((unint64_t)v35 >= v36)
  {
    uint64_t v39 = (uint64_t *)v1010[119];
    uint64_t v40 = ((char *)v35 - (char *)v39) >> 4;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 60) {
      abort();
    }
    uint64_t v42 = v36 - (void)v39;
    if (v42 >> 3 > v41) {
      unint64_t v41 = v42 >> 3;
    }
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v41;
    }
    if (v43 >> 60) {
      goto LABEL_1090;
    }
    signed int v44 = (char *)operator new(16 * v43);
    *(void *)&long long v45 = v33;
    *((void *)&v45 + 1) = v956;
    char v46 = &v44[16 * v40];
    char v47 = &v44[16 * v43];
    *(_OWORD *)char v46 = v45;
    uint64_t v37 = v46 + 16;
    atomic_fetch_add_explicit(v957, 1uLL, memory_order_relaxed);
    if (v35 == v39)
    {
      v1010[119] = v46;
      v1010[120] = v37;
      v1010[121] = v47;
    }
    else
    {
      do
      {
        long long v48 = *((_OWORD *)v35 - 1);
        v35 -= 2;
        *((_OWORD *)v46 - 1) = v48;
        v46 -= 16;
        *uint64_t v35 = 0;
        v35[1] = 0;
      }
      while (v35 != v39);
      uint64_t v35 = (uint64_t *)v1010[119];
      uint64_t v49 = (uint64_t *)v1010[120];
      v1010[119] = v46;
      v1010[120] = v37;
      for (v1010[121] = v47; v49 != v35; v49 -= 2)
      {
        unint64_t v50 = (std::__shared_weak_count *)*(v49 - 1);
        if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
    __int16 v38 = a3;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *uint64_t v35 = v33;
    v35[1] = (uint64_t)v956;
    atomic_fetch_add_explicit(&v956->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v37 = v35 + 2;
    __int16 v38 = a3;
  }
  v1010[120] = v37;
  uint64_t v51 = *((unsigned int *)v38 + 12);
  long long v1071 = 0uLL;
  atomic_ullong v52 = v962[4] * v51;
  *(void *)&long long v53 = a5;
  *(void *)&long long v54 = a5;
  *((void *)&v54 + 1) = v18;
  if (v52)
  {
    if (!a5 || *((unsigned char *)v962 + 41) == 2)
    {
      uint64_t v55 = v962[12];
    }
    else
    {
      long long v1015 = v54;
      uint64_t v55 = (*(uint64_t (**)(uint64_t, void *, void, atomic_ullong, uint64_t, uint64_t))(*(void *)a5 + 56))(a5, v18, 0, v52, 1, 1);
      long long v54 = v1015;
      *(void *)&long long v53 = a5;
    }
  }
  else
  {
    uint64_t v55 = 0;
  }
  long long v1071 = v54;
  unint64_t v1072 = 0;
  atomic_ullong v1073 = v52;
  uint64_t v1075 = v55;
  __int16 v1074 = 257;
  uint64_t v56 = *((unsigned int *)a3 + 13);
  long long v1066 = 0uLL;
  uint64_t v57 = v958[1].__shared_owners_ * v56;
  *(void *)&long long v58 = v53;
  *((void *)&v58 + 1) = v21;
  if (v57)
  {
    if (!a5 || BYTE1(v958[1].__shared_weak_owners_) == 2)
    {
      uint64_t v59 = (uint64_t)v958[4].__vftable;
    }
    else
    {
      long long v1016 = v58;
      uint64_t v59 = (*(uint64_t (**)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)a5 + 56))(a5, v21, 0, v57, 1, 1);
      long long v58 = v1016;
      *(void *)&long long v53 = a5;
    }
  }
  else
  {
    uint64_t v59 = 0;
  }
  long long v1066 = v58;
  unint64_t v1067 = 0;
  uint64_t v1068 = v57;
  uint64_t v1070 = v59;
  __int16 v1069 = 257;
  uint64_t v60 = *((unsigned int *)a3 + 13);
  long long v1061 = 0uLL;
  uint64_t v61 = v960[1].__shared_owners_ * v60;
  *(void *)&long long v62 = v53;
  *((void *)&v62 + 1) = v27;
  if (v61)
  {
    if (!a5 || BYTE1(v960[1].__shared_weak_owners_) == 2)
    {
      uint64_t v63 = (uint64_t)v960[4].__vftable;
    }
    else
    {
      long long v1017 = v62;
      uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t *, void, uint64_t, uint64_t, uint64_t))(*(void *)a5 + 56))(a5, v27, 0, v61, 1, 1);
      long long v62 = v1017;
      *(void *)&long long v53 = a5;
    }
  }
  else
  {
    uint64_t v63 = 0;
  }
  long long v1061 = v62;
  unint64_t v1062 = 0;
  unint64_t v1063 = v61;
  uint64_t v1065 = v63;
  __int16 v1064 = 257;
  uint64_t v64 = *((unsigned int *)a3 + 13);
  long long v1056 = 0uLL;
  uint64_t v65 = v961[1].__shared_owners_ * v64;
  *(void *)&long long v66 = v53;
  *((void *)&v66 + 1) = v1023;
  if (v65)
  {
    if (!a5 || BYTE1(v961[1].__shared_weak_owners_) == 2)
    {
      uint64_t v68 = (uint64_t)v961[4].__vftable;
    }
    else
    {
      unint64_t v67 = v1023;
      long long v1024 = v66;
      uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t *, void, uint64_t, uint64_t, uint64_t))(*(void *)a5 + 56))(a5, v67, 0, v65, 1, 1);
      long long v66 = v1024;
      *(void *)&long long v53 = a5;
    }
  }
  else
  {
    uint64_t v68 = 0;
  }
  long long v1056 = v66;
  unint64_t v1057 = 0;
  unint64_t v1058 = v65;
  uint64_t v1060 = v68;
  __int16 v1059 = 257;
  uint64_t v69 = *((unsigned int *)a3 + 13);
  long long v1051 = 0uLL;
  uint64_t v70 = v959[1].__shared_owners_ * v69;
  *((void *)&v53 + 1) = v1021;
  if (v70)
  {
    uint64_t v71 = (uint64_t)v1010;
    if (!a5 || BYTE1(v959[1].__shared_weak_owners_) == 2)
    {
      uint64_t v73 = (uint64_t)v959[4].__vftable;
    }
    else
    {
      long long v1019 = v53;
      uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t *, void, uint64_t, uint64_t, uint64_t))(*(void *)a5 + 56))(a5, v1021, 0, v70, 1, 1);
      long long v53 = v1019;
      uint64_t v73 = v72;
    }
  }
  else
  {
    uint64_t v73 = 0;
    uint64_t v71 = (uint64_t)v1010;
  }
  long long v1051 = v53;
  unint64_t v1052 = 0;
  uint64_t v1053 = v70;
  uint64_t v1055 = v73;
  __int16 v1054 = 257;
  uint64_t v1050 = 0;
  uint64_t v1049 = 0;
  size_t v74 = (uint64_t *)geo::codec::VectorTile::daVinciBuildingTileBound(*v982);
  v75.i64[0] = *v74;
  float32x2_t v76 = (float32x2_t)v74[1];
  v992 = (float *)a8 + 6;
  if (*((unsigned char *)a8 + 24))
  {
    float32x2_t v77 = vmul_f32(*(float32x2_t *)a8, *(float32x2_t *)v75.f32);
    float32x2_t v78 = vmul_f32(*(float32x2_t *)a8, v76);
    int32x2_t v79 = vcgt_f32(v77, v78);
    if ((v79.i32[0] | v79.i32[1]))
    {
      *(int32x2_t *)v75.f32 = vdup_n_s32(0x7F7FFFFFu);
      float32x2_t v76 = (float32x2_t)0x80000000800000;
    }
    else
    {
      float32x2_t v80 = *(float32x2_t *)((char *)a8 + 12);
      *(float32x2_t *)v75.f32 = vadd_f32(v80, v77);
      float32x2_t v76 = vadd_f32(v80, v78);
    }
  }
  if (a3[1] != *a3)
  {
    _D1 = COERCE_DOUBLE(vabs_f32(v76));
    *(float32x2_t *)v75.f32 = vmaxnm_f32(vabs_f32(*(float32x2_t *)v75.f32), *(float32x2_t *)&_D1);
    WORD1(_D1) = v75.i16[3];
    float v965 = fmaxf(v75.f32[0], v75.f32[1]);
    v75.f32[0] = 32767.0 / v965;
    float32x4_t v1018 = v75;
    _D0 = 1.73238039e-255;
    double v83 = 1.0;
    double v84 = -1.0;
    uint64_t v983 = **a3;
    uint64_t v1048 = 0;
    _S15 = 0.0;
    _S14 = 0.0;
    if (!*a9)
    {
LABEL_76:
      uint64_t v93 = v1050;
      if (*(_WORD *)(v983 + 34))
      {
        uint64_t v967 = v1050;
        uint64_t v993 = 0;
        __asm
        {
          FCVT            H1, S14
          FCVT            H0, S15
        }
        __int16 v999 = LOWORD(_D0);
        __int16 v1000 = LOWORD(_D1);
        *(int16x4_t *)v96.i8 = vdup_lane_s16(*(int16x4_t *)&_D1, 0);
        uint64_t v991 = v964 + 20 * *(unsigned __int16 *)(v983 + 32);
        v96.u64[1] = (unint64_t)vdup_lane_s16(*(int16x4_t *)&_D0, 0);
        int8x16_t v97 = vqtbl1q_s8(v96, (int8x16_t)xmmword_1A28FF740);
        int8x16_t v981 = v97;
        v97.i64[0] = 0x80000000800000;
        int8x16_t v988 = v97;
        long long v987 = xmmword_1A28FC710;
        while (1)
        {
          float v98 = *(float *)(v71 + 1176);
          if (v979)
          {
            uint64_t v99 = v993;
            uint64_t v100 = v991;
            uint64_t v101 = v991 + 20 * v993;
            float v102 = *(float *)(v101 + 4);
            float v103 = *((float *)a8 + 5) + (float)(*((float *)a8 + 2) * v102);
            if (!*((unsigned char *)a8 + 24)) {
              float v103 = *(float *)(v101 + 4);
            }
            float v104 = v98 * 0.1;
            if ((float)(v102 - *(float *)(v101 + 8)) > 0.0) {
              float v104 = -0.0;
            }
            float v105 = v104 + v103;
            int v106 = *(unsigned __int8 *)(v101 + 1);
          }
          else
          {
            float v105 = v98 * 5.0;
            int v106 = 1;
            uint64_t v99 = v993;
            uint64_t v100 = v991;
          }
          uint64_t v107 = v978 + 8 * *(unsigned int *)(v100 + 20 * v99 + 12);
          *(_OWORD *)v1029 = 0u;
          *(_OWORD *)v1030 = 0u;
          long long v1028 = 0u;
          v1089[1] = 0;
          v1089[0] = 0;
          uint64_t v1090 = 0;
          v998 = (unsigned char *)(v100 + 20 * v99);
          md::DaVinciGroundTileData::_populateBuildingLoops(a6, v977, (uint64_t)v998, *(_DWORD *)v107, *(_WORD *)(v107 + 4), v107 + 8, (uint64_t)&v1028, (uint64_t)v1089);
          long long v111 = v1028;
          if (*(unsigned char *)v992)
          {
            if ((void)v1028 != *((void *)&v1028 + 1))
            {
              double v112 = (float *)v1028;
              unint64_t v113 = *((void *)&v1028 + 1) - v1028 - 12;
              uint64_t v114 = v1028;
              if (v113 > 0x23)
              {
                unint64_t v115 = v113 / 0xC;
                if ((unint64_t)v1028 >= (unint64_t)v992
                  || (uint64_t v114 = v1028, (unint64_t)v1028 + 12 * v115 + 12 <= (unint64_t)a8))
                {
                  unint64_t v116 = v115 + 1;
                  uint64_t v117 = (v115 + 1) & 0x3FFFFFFFFFFFFFFCLL;
                  uint64_t v118 = v117;
                  do
                  {
                    *(float32x4x3_t *)v108.f32 = vld3q_f32(v112);
                    int32x4_t v119 = *(int32x4_t *)((char *)a8 + 8);
                    v1103.val[0] = vmlaq_n_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshrq_n_u64((uint64x2_t)v119, 0x20uLL), 0), v108, COERCE_FLOAT(*a8));
                    v1103.val[1] = vmlaq_n_f32((float32x4_t)vdupq_laneq_s32(v119, 2), v109, COERCE_FLOAT(*(_OWORD *)((char *)a8 + 4)));
                    v1103.val[2] = vmlaq_n_f32((float32x4_t)vdupq_laneq_s32(v119, 3), v110, *(float *)v119.i32);
                    vst3q_f32(v112, v1103);
                    v112 += 12;
                    v118 -= 4;
                  }
                  while (v118);
                  if (v116 == v117) {
                    goto LABEL_96;
                  }
                  uint64_t v114 = v111 + 12 * v117;
                }
              }
              do
              {
                v108.i64[0] = *(void *)v114;
                v108.i32[2] = *(_DWORD *)(v114 + 8);
                v109.i64[0] = *(void *)a8;
                v109.i32[2] = *((_DWORD *)a8 + 2);
                v110.i64[0] = *(void *)((char *)a8 + 12);
                v110.i32[2] = *((_DWORD *)a8 + 5);
                float32x4_t v110 = vmlaq_f32(v110, v108, v109);
                *(_DWORD *)(v114 + 8) = v110.i32[2];
                *(void *)uint64_t v114 = v110.i64[0];
                v114 += 12;
              }
              while (v114 != *((void *)&v111 + 1));
            }
LABEL_96:
            uint64_t v120 = (float **)v1089[0];
            double v121 = (float **)v1089[1];
            while (1)
            {
              if (v120 == v121) {
                goto LABEL_109;
              }
              unint64_t v122 = *v120;
              long long v123 = v120[1];
              if (*v120 != v123)
              {
                unint64_t v124 = (char *)v123 - (char *)v122 - 12;
                if (v124 <= 0x23) {
                  goto LABEL_107;
                }
                unint64_t v125 = v124 / 0xC;
                if (v122 < v992 && &v122[3 * v125 + 3] > (float *)a8) {
                  goto LABEL_107;
                }
                unint64_t v126 = v125 + 1;
                unsigned int v127 = *v120;
                uint64_t v128 = v126 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  *(float32x4x3_t *)v108.f32 = vld3q_f32(v127);
                  int32x4_t v129 = *(int32x4_t *)((char *)a8 + 8);
                  v1104.val[0] = vmlaq_n_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshrq_n_u64((uint64x2_t)v129, 0x20uLL), 0), v108, COERCE_FLOAT(*a8));
                  v1104.val[1] = vmlaq_n_f32((float32x4_t)vdupq_laneq_s32(v129, 2), v109, COERCE_FLOAT(*(_OWORD *)((char *)a8 + 4)));
                  v1104.val[2] = vmlaq_n_f32((float32x4_t)vdupq_laneq_s32(v129, 3), v110, *(float *)v129.i32);
                  vst3q_f32(v127, v1104);
                  v127 += 12;
                  v128 -= 4;
                }
                while (v128);
                if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL)) {
                  break;
                }
              }
LABEL_97:
              v120 += 6;
            }
            v122 += 3 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
            do
            {
LABEL_107:
              v108.i64[0] = *(void *)v122;
              v108.f32[2] = v122[2];
              v109.i64[0] = *(void *)a8;
              v109.i32[2] = *((_DWORD *)a8 + 2);
              v110.i64[0] = *(void *)((char *)a8 + 12);
              v110.i32[2] = *((_DWORD *)a8 + 5);
              float32x4_t v110 = vmlaq_f32(v110, v108, v109);
              v122[2] = v110.f32[2];
              *(void *)unint64_t v122 = v110.i64[0];
              v122 += 3;
            }
            while (v122 != v123);
            goto LABEL_97;
          }
LABEL_109:
          v1046 = 0;
          v1045 = 0;
          v1047 = 0;
          uint64_t v130 = *((void *)&v111 + 1);
          if ((void)v111 == *((void *)&v111 + 1))
          {
            v109.i32[0] = -8388609;
          }
          else
          {
            unint64_t v131 = *((void *)&v111 + 1) - v111 - 12;
            if (v131 > 0x5F)
            {
              unint64_t v133 = v131 / 0xC + 1;
              uint64_t v134 = v133 & 7;
              if ((v133 & 7) == 0) {
                uint64_t v134 = 8;
              }
              unint64_t v135 = v133 - v134;
              uint64_t v136 = 12 * v135;
              unsigned int v137 = (const float *)(v111 + 56);
              v138.i64[0] = 0x80000000800000;
              v138.i64[1] = 0x80000000800000;
              v109.i64[0] = 0x80000000800000;
              v109.i64[1] = 0x80000000800000;
              do
              {
                uint64_t v139 = v137 - 12;
                unsigned long long v140 = (unsigned __int128)vld3q_f32(v139);
                unsigned long long v141 = (unsigned __int128)vld3q_f32(v137);
                float32x4_t v138 = vmaxnmq_f32((float32x4_t)v140, v138);
                float32x4_t v109 = vmaxnmq_f32((float32x4_t)v141, v109);
                v137 += 24;
                v135 -= 8;
              }
              while (v135);
              uint64_t v132 = v111 + v136;
              v109.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v138, v109));
              uint64_t v130 = *((void *)&v111 + 1);
            }
            else
            {
              v109.i32[0] = -8388609;
              uint64_t v132 = v111;
            }
            do
            {
              v109.f32[0] = fmaxf(*(float *)(v132 + 8), v109.f32[0]);
              v132 += 12;
            }
            while (v132 != v130);
          }
          float32x4_t v1025 = v109;
          if (geo::codec::VectorTile::daVinciBuildingsSupportTerrainElevation(*v982))
          {
            float v147 = *(float *)(v991 + 20 * v993 + 8);
            v144.i32[1] = v1025.i32[1];
            char v1011 = v1025.f32[0] > (float)(v147 + 0.0001);
            if (v147 > (float)(v1025.f32[0] + 0.0001))
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              unint64_t v148 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG))
              {
                v1043[0] = *(_WORD *)(v71 + 168);
                uint64_t v1044 = *(void *)(v71 + 172);
                md::debugString<geo::QuadTile>(&v1095, (char *)v1043);
                int64x2_t v149 = SHIBYTE(v1097) >= 0 ? (void **)&v1095 : *(void ***)&v1095;
                *(_DWORD *)buf = 134219010;
                *(void *)&uint8_t buf[4] = 0;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v993;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = v149;
                *(_WORD *)&buf[28] = 2048;
                *(double *)&buf[30] = v147;
                *(_WORD *)&buf[38] = 2048;
                *(double *)v1092 = v1025.f32[0];
                _os_log_impl(&dword_1A1780000, v148, OS_LOG_TYPE_DEBUG, "For Building %zu/section %d key %s, terrainElevation (%f) should be lower than section maxz (%f)", buf, 0x30u);
                if (SHIBYTE(v1097) < 0) {
                  operator delete(*(void **)&v1095);
                }
              }
            }
            uint64_t v150 = *((void *)&v111 + 1);
            unint64_t v151 = v111;
            if (*(unsigned char *)v992) {
              v142.val[0].f32[0] = *((float *)a8 + 5) + (float)(*((float *)a8 + 2) * v147);
            }
            else {
              v142.val[0].f32[0] = v147;
            }
            float32x4_t v1025 = (float32x4_t)v142;
            uint64_t v152 = v993;
            uint64_t v153 = v991;
            if ((void)v111 == *((void *)&v111 + 1))
            {
LABEL_144:
              unsigned int v174 = v1049;
              unint64_t v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v150 - v151) >> 2);
              uint64_t v175 = v1049;
              goto LABEL_145;
            }
          }
          else
          {
            char v1011 = 1;
            uint64_t v152 = v993;
            uint64_t v150 = *((void *)&v111 + 1);
            uint64_t v153 = v991;
            unint64_t v151 = v111;
            if ((void)v111 == *((void *)&v111 + 1)) {
              goto LABEL_144;
            }
          }
          int8x16_t v155 = (int8x16_t)v987;
          int8x16_t v154 = v988;
          v142.val[0].i32[0] = v988.i32[1];
          unint64_t v156 = v151;
          do
          {
            v143.i32[0] = *(_DWORD *)v156;
            v157.i32[3] = v155.i32[3];
            v145.i64[0] = *(void *)(v156 + 4);
            float v158 = *(float *)&v145.i32[1];
            if (!v106) {
              float v158 = 0.0;
            }
            float v159 = v158 + v105;
            v154.i32[1] = fmaxf(v142.val[0].f32[0], v159);
            *(uint64_t *)((char *)v157.i64 + 4) = v145.i64[0];
            v144.i64[0] = v155.i64[0];
            v144.i64[1] = __PAIR64__(v143.u32[0], COERCE_UNSIGNED_INT(fminf(v159, *(float *)&v155.i32[2])));
            *(float32x2_t *)v154.i8 = vmaxnm_f32(*(float32x2_t *)v154.i8, *(float32x2_t *)v145.i8);
            v157.i32[0] = *(_DWORD *)v156;
            float32x2x2_t v142 = (float32x2x2_t)vcgtq_f32(v144, v157);
            int8x16_t v143 = vextq_s8(vextq_s8(v143, v143, 4uLL), v145, 0xCuLL);
            v143.i32[3] = v143.i32[0];
            v144.i32[3] = v155.i32[3];
            int8x16_t v155 = vbslq_s8((int8x16_t)v142, v143, (int8x16_t)v144);
            v142.val[0].i32[0] = v154.i32[1];
            v156 += 12;
          }
          while (v156 != v150);
          long long v987 = (__int128)v155;
          int8x16_t v988 = v154;
          uint64_t v160 = 0;
          unint64_t v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v150 - v151) >> 2);
          __asm
          {
            FCVT            H0, S14
            FCVT            H1, S15
          }
          uint64_t v164 = v1070 + 8 * v1049 + 2;
          uint64_t v165 = v1049;
          uint64_t v166 = v1055 + 4 * v1049;
          int8x16_t v167 = (float *)(v151 + 8);
          int8x16_t v168 = (_WORD *)(v1065 + 4 * v1049 + 2);
          uint64_t v169 = v1060 + 4 * v1049 + 2;
          float32x4_t v146 = v1018;
          do
          {
            float v170 = *(v167 - 2);
            float v171 = *(v167 - 1);
            float v172 = *v167;
            v167 += 3;
            float v173 = v172;
            if (!v106) {
              float v173 = 0.0;
            }
            *(_WORD *)(v164 - 2) = (int)(float)(v170 * v1018.f32[0]);
            *(_WORD *)uint64_t v164 = (int)(float)(v171 * v1018.f32[0]);
            *(float *)(v164 + 2) = v173 + v105;
            *(_DWORD *)(v169 - 2) = 939538432;
            *(v168 - 1) = _H0;
            *int8x16_t v168 = _H1;
            *(_DWORD *)(v166 + 4 * v160++) = v1025.i32[0];
            v164 += 8;
            v168 += 2;
            v169 += 4;
          }
          while (v161 > (unsigned __int16)v160);
          unsigned int v174 = v165;
          uint64_t v175 = v165 + v160;
LABEL_145:
          v1020 = (_WORD *)(v153 + 20 * v152 + 16);
          if (*v1020)
          {
            unint64_t v176 = 0;
            uint32x4_t v177 = (char *)v1089[0];
            __asm
            {
              FCVT            H0, S14
              FCVT            H1, S15
            }
            uint64_t v180 = v1055;
            uint64_t v181 = v1070 + 2;
            uint64_t v182 = v1060 + 2;
            uint64_t v183 = v1065 + 2;
            do
            {
              int64x2_t v184 = &v177[48 * v176];
              uint64_t v185 = *(void *)v184;
              uint64_t v186 = *((void *)v184 + 1) - *(void *)v184;
              if (v186)
              {
                unint64_t v187 = 0xAAAAAAAAAAAAAAABLL * (v186 >> 2);
                uint64_t v188 = 4 * v175;
                int v189 = 0;
                if (v106)
                {
                  int64x2_t v190 = (float *)(v185 + 8);
                  uint64_t v191 = v182 + v188;
                  uint32x4_t v192 = (_WORD *)(v183 + v188);
                  uint64_t v193 = v181 + 8 * v175;
                  float32x4_t v146 = v1018;
                  do
                  {
                    float v194 = *(v190 - 2);
                    float v195 = *(v190 - 1);
                    float v196 = *v190;
                    v190 += 3;
                    *(_WORD *)(v193 - 2) = (int)(float)(v194 * v1018.f32[0]);
                    *(_WORD *)uint64_t v193 = (int)(float)(v195 * v1018.f32[0]);
                    *(float *)(v193 + 2) = v196 + v105;
                    *(_DWORD *)(v191 - 2) = 939538432;
                    *(v192 - 1) = _H0;
                    _WORD *v192 = _H1;
                    *(_DWORD *)(v180 + 4 * v175++) = v1025.i32[0];
                    ++v189;
                    v193 += 8;
                    v191 += 4;
                    v192 += 2;
                  }
                  while (v187 > (unsigned __int16)v189);
                }
                else
                {
                  unint64_t v197 = (float *)(v185 + 4);
                  unsigned int v198 = (_WORD *)(v183 + v188);
                  uint64_t v199 = v182 + v188;
                  uint64_t v200 = v181 + 8 * v175;
                  float32x4_t v146 = v1025;
                  do
                  {
                    int v201 = (int)(float)(*v197 * v1018.f32[0]);
                    *(_WORD *)(v200 - 2) = (int)(float)(*(v197 - 1) * v1018.f32[0]);
                    *(_WORD *)uint64_t v200 = v201;
                    *(float *)(v200 + 2) = v105;
                    *(_DWORD *)(v199 - 2) = 939538432;
                    *(v198 - 1) = _H0;
                    *unsigned int v198 = _H1;
                    *(_DWORD *)(v180 + 4 * v175++) = v1025.i32[0];
                    ++v189;
                    v200 += 8;
                    v197 += 3;
                    v198 += 2;
                    v199 += 4;
                  }
                  while (v187 > (unsigned __int16)v189);
                }
              }
              ++v176;
            }
            while (v176 < (unsigned __int16)*v1020);
          }
          uint64_t v1049 = v175;
          v1041 = 0;
          v1040 = 0;
          v1042 = 0;
          unsigned int v989 = v174;
          if (v151 != *((void *)&v111 + 1))
          {
            if (v161 >> 61) {
              abort();
            }
            uint16x8_t v202 = (float *)operator new(8 * v161);
            uint32x4_t v203 = v202;
            if (v161 <= 1) {
              unint64_t v204 = 1;
            }
            else {
              unint64_t v204 = v161;
            }
            if (v204 < 0x1C)
            {
LABEL_162:
              unint64_t v205 = 0;
              int v206 = 0;
              goto LABEL_163;
            }
            int v206 = 0;
            unint64_t v205 = 0;
            uint64_t v246 = 2 * (v204 - 1);
            if (&v202[v246 + 1] < v202 + 1 || &v202[v246] < v202 || v204 == 0x100000000 || (v204 - 1) >> 32) {
              goto LABEL_163;
            }
            if ((unint64_t)v202 < v151 + 12 * v204 - 4 && v151 < (unint64_t)&v202[2 * v204]) {
              goto LABEL_162;
            }
            unint64_t v205 = v204 & 0xFFFFFFFFFFFFFFFELL;
            uint32x4_t v247 = (int *)(v151 + 16);
            int64x2_t v248 = v202;
            unint64_t v249 = v204 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v142.val[0].i32[0] = *(v247 - 4);
              v142.val[0].i32[1] = *(v247 - 1);
              int v250 = *(v247 - 3);
              int v251 = *v247;
              vst2_f32(v248, v142);
              v248 += 4;
              v247 += 6;
              v249 -= 2;
            }
            while (v249);
            int v206 = v204 & 0xFFFFFFFE;
            if (v204 != v205)
            {
LABEL_163:
              unsigned int v207 = v206 + 1;
              do
              {
                v142.val[0] = *(float32x2_t *)(v151 + 12 * v205);
                *(float32x2_t *)&v202[2 * v205] = v142.val[0];
                unint64_t v205 = v207++;
              }
              while (v161 > v205);
            }
            uint32x4_t v208 = (char *)&v202[2 * v161];
            int64x2_t v209 = v208;
            goto LABEL_167;
          }
          uint32x4_t v208 = 0;
          int64x2_t v209 = 0;
          uint32x4_t v203 = 0;
LABEL_167:
          v1040 = v203;
          v1041 = v209;
          v1042 = v208;
          if (v1089[1] == v1089[0])
          {
            double v211 = 0.0;
            v1022 = 0;
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v1089[1] - (char *)v1089[0]) >> 4) >= 0xAAAAAAAAAAAAAABLL) {
              abort();
            }
            size_t v210 = 8 * (((char *)v1089[1] - (char *)v1089[0]) >> 4);
            double v211 = COERCE_DOUBLE(operator new(v210));
            size_t v212 = 24 * ((v210 - 24) / 0x18) + 24;
            bzero(*(void **)&v211, v212);
            v1022 = (char *)(*(void *)&v211 + v212);
          }
          double v1013 = v211;
          unint64_t v1001 = v161;
          if (*v1020)
          {
            uint64_t v213 = 0;
            uint64_t v214 = (char *)v1089[0];
            while (1)
            {
              uint64_t v216 = (unint64_t *)&v214[48 * v213];
              unint64_t v217 = *v216;
              int64_t v218 = v216[1] - *v216;
              if (v218) {
                break;
              }
              unint64_t v225 = 0;
              int64x2_t v226 = 0;
              int64x2_t v221 = 0;
LABEL_206:
              double v211 = v1013;
              int64x2_t v238 = (char *)(*(void *)&v1013 + 24 * v213);
              int8x16_t v239 = *(void **)v238;
              if (*(void *)v238)
              {
                *(void *)(*(void *)&v1013 + 24 * v213 + 8) = v239;
                operator delete(v239);
                *(void *)int64x2_t v238 = 0;
                *((void *)v238 + 1) = 0;
                *((void *)v238 + 2) = 0;
              }
              *(void *)int64x2_t v238 = v221;
              uint64_t v215 = (char *)(*(void *)&v1013 + 24 * v213);
              *((void *)v215 + 1) = v226;
              *((void *)v215 + 2) = v225;
              if (++v213 >= (unint64_t)(unsigned __int16)*v1020)
              {
                int8x16_t v240 = (int16x8_t *)v1045;
                int64x2_t v209 = v1041;
                uint32x4_t v203 = (float *)v1040;
                unint64_t v161 = v1001;
                goto LABEL_210;
              }
            }
            unint64_t v219 = v218 / 12;
            if ((unint64_t)(v218 / 12) >> 61) {
              abort();
            }
            unint64_t v220 = (float *)operator new(8 * v219);
            int64x2_t v221 = v220;
            if (v219 <= 1) {
              unint64_t v222 = 1;
            }
            else {
              unint64_t v222 = v219;
            }
            if (v222 >= 0x1C)
            {
              uint64_t v227 = 2 * (v222 - 1);
              _CF = &v220[v227 + 1] >= v220 + 1 && &v220[v227] >= v220;
              _ZF = !_CF || v222 == 0x100000000;
              BOOL v230 = !_ZF && (v222 - 1) >> 32 == 0;
              if (v230
                && ((unint64_t)v220 < v217 + 12 * v222 - 4
                  ? (BOOL v231 = v217 >= (unint64_t)&v220[2 * v222])
                  : (BOOL v231 = 1),
                    v231))
              {
                unint64_t v223 = v222 & 0xFFFFFFFFFFFFFFFELL;
                int64x2_t v232 = (int *)(v217 + 16);
                int64x2_t v233 = v220;
                unint64_t v234 = v222 & 0xFFFFFFFFFFFFFFFELL;
                do
                {
                  v142.val[0].i32[0] = *(v232 - 4);
                  v142.val[0].i32[1] = *(v232 - 1);
                  int v235 = *(v232 - 3);
                  int v236 = *v232;
                  vst2_f32(v233, v142);
                  v233 += 4;
                  v232 += 6;
                  v234 -= 2;
                }
                while (v234);
                int v224 = v222 & 0xFFFFFFFE;
                if (v222 == v223) {
                  goto LABEL_205;
                }
              }
              else
              {
                unint64_t v223 = 0;
                int v224 = 0;
              }
            }
            else
            {
              unint64_t v223 = 0;
              int v224 = 0;
            }
            unsigned int v237 = v224 + 1;
            do
            {
              v142.val[0] = *(float32x2_t *)(v217 + 12 * v223);
              *(float32x2_t *)&v220[2 * v223] = v142.val[0];
              unint64_t v223 = v237++;
            }
            while (v219 > v223);
LABEL_205:
            unint64_t v225 = &v220[2 * v219];
            int64x2_t v226 = v225;
            goto LABEL_206;
          }
          int8x16_t v240 = 0;
LABEL_210:
          uint64_t v1087 = 0;
          v1046 = v240;
          uint64_t v241 = v209 - (char *)v203;
          if ((unint64_t)(v209 - (char *)v203) < 0x18) {
            goto LABEL_646;
          }
          unint64_t v242 = v241 >> 3;
          v1088 |= 4u;
          if ((unint64_t)v241 > 0x3F)
          {
            unint64_t v243 = v242 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v252 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
            int64x2_t v253 = v203 + 8;
            v254.i64[0] = 0x80000000800000;
            v254.i64[1] = 0x80000000800000;
            unint64_t v255 = v242 & 0xFFFFFFFFFFFFFFF8;
            v256.i64[0] = 0x80000000800000;
            v256.i64[1] = 0x80000000800000;
            v257.i64[0] = 0x80000000800000;
            v257.i64[1] = 0x80000000800000;
            v146.i64[0] = 0x80000000800000;
            v146.i64[1] = 0x80000000800000;
            float32x4_t v258 = v252;
            float32x4_t v259 = v252;
            float32x4_t v260 = v252;
            do
            {
              int64x2_t v261 = v253 - 8;
              float32x4x2_t v1100 = vld2q_f32(v261);
              float32x4x2_t v1101 = vld2q_f32(v253);
              float32x4_t v259 = vminnmq_f32(v1100.val[0], v259);
              float32x4_t v260 = vminnmq_f32(v1101.val[0], v260);
              float32x4_t v252 = vminnmq_f32(v1100.val[1], v252);
              float32x4_t v258 = vminnmq_f32(v1101.val[1], v258);
              float32x4_t v257 = vmaxnmq_f32(v1100.val[0], v257);
              float32x4_t v146 = vmaxnmq_f32(v1101.val[0], v146);
              float32x4_t v254 = vmaxnmq_f32(v1100.val[1], v254);
              float32x4_t v256 = vmaxnmq_f32(v1101.val[1], v256);
              v253 += 16;
              v255 -= 8;
            }
            while (v255);
            float32x4_t v144 = vminnmq_f32(v259, v260);
            v144.f32[0] = vminnmvq_f32(v144);
            float32x2x2_t v142 = (float32x2x2_t)vminnmq_f32(v252, v258);
            v142.val[0].f32[0] = vminnmvq_f32((float32x4_t)v142);
            float v245 = vmaxnmvq_f32(vmaxnmq_f32(v257, v146));
            float v244 = vmaxnmvq_f32(vmaxnmq_f32(v254, v256));
            if (v242 == v243) {
              goto LABEL_228;
            }
          }
          else
          {
            unint64_t v243 = 0;
            v142.val[0].i32[0] = 2139095039;
            float v244 = -3.4028e38;
            float v245 = -3.4028e38;
            v144.i32[0] = 2139095039;
          }
          unint64_t v262 = v242 - v243;
          int64x2_t v263 = &v203[2 * v243 + 1];
          do
          {
            float v264 = *(v263 - 1);
            v146.f32[0] = *v263;
            v144.f32[0] = fminf(v264, v144.f32[0]);
            v142.val[0].f32[0] = fminf(*v263, v142.val[0].f32[0]);
            float v245 = fmaxf(v264, v245);
            float v244 = fmaxf(*v263, v244);
            v263 += 2;
            --v262;
          }
          while (v262);
LABEL_228:
          unint64_t v1084 = __PAIR64__(v142.val[0].u32[0], v144.u32[0]);
          unint64_t v1085 = __PAIR64__(LODWORD(v244), LODWORD(v245));
          v144.f32[0] = v245 - v144.f32[0];
          double v265 = v144.f32[0];
          float v266 = v244 - v142.val[0].f32[0];
          double v267 = v266;
          double v268 = 4294967300.0;
          if (v144.f32[0] < 4294967300.0 && v267 < 4294967300.0)
          {
            v142.val[0].f32[0] = fmaxf(v144.f32[0], v266);
          }
          else
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Cannot properly hash this geometry. Its space is too large.\n", 60);
            uint32x4_t v203 = (float *)v1040;
            unint64_t v242 = (v1041 - (unsigned char *)v1040) >> 3;
            v142.val[0] = 0;
          }
          float v1086 = v142.val[0].f32[0];
          uint64_t LinkedList = geo::Triangulator<float,unsigned short>::createLinkedList((uint64_t)&v1079, (uint64_t)v203, v242, 0, 1, *(double *)v142.val, v267, *(double *)v144.i64, v265, v268, (int8x16_t)v146);
          if (!LinkedList) {
            goto LABEL_646;
          }
          uint64_t v271 = *(void *)(LinkedList + 24);
          geo::Triangulator<float,unsigned short>::linkListInHashSpace(v271, v1086);
          if (v1022 == *(char **)&v211)
          {
            v1007 = 0;
            unint64_t v319 = 0;
            uint64_t v336 = 0;
            goto LABEL_334;
          }
          unint64_t v272 = (uint64_t)&v1022[-*(void *)&v211] / 24;
          if (v272 >> 61) {
            goto LABEL_1093;
          }
          int64x2_t v273 = (char *)operator new(8 * v272);
          uint64_t v280 = 0;
          v995 = &v273[8 * v272];
          if (v272 <= 1) {
            uint64_t v281 = 1;
          }
          else {
            uint64_t v281 = (uint64_t)&v1022[-*(void *)&v211] / 24;
          }
          v1007 = v273;
          while (2)
          {
            int8x16_t v282 = (uint64_t *)(*(void *)&v211 + 24 * v280);
            uint64_t v283 = *v282;
            uint64_t v284 = v282[1] - *v282;
            if ((unint64_t)v284 < 0x18) {
              goto LABEL_242;
            }
            std::string __p = v273;
            double v285 = v211;
            uint64_t v286 = geo::Triangulator<float,unsigned short>::createLinkedList((uint64_t)&v1079, v283, v284 >> 3, v280 + 1, 2, *(double *)&v274, *(double *)&v275, v276, v277, v278, v279);
            uint64_t v287 = v286;
            if (!v286) {
              goto LABEL_241;
            }
            *(float *)&long long v274 = v1086;
            if (v1086 == 0.0) {
              goto LABEL_274;
            }
            uint64_t v288 = (void *)v286;
            do
            {
              uint64_t v289 = (void *)v288[3];
              v288[4] = v288[2];
              v288[5] = v289;
              uint64_t v288 = v289;
            }
            while (v289 != (void *)v286);
            *(void *)(*(void *)(v286 + 32) + 40) = 0;
            *(void *)(v286 + 32) = 0;
            uint64_t v290 = 1;
            while (2)
            {
              unint64_t v291 = 0;
              uint64_t v292 = 0;
              uint64_t v293 = v286;
              uint64_t v294 = v286;
              while (2)
              {
                uint64_t v295 = 0;
                ++v291;
                while (1)
                {
                  ++v295;
                  uint64_t v294 = *(void *)(v294 + 40);
                  if (!v294) {
                    break;
                  }
                  if (v290 == v295)
                  {
                    uint64_t v295 = v290;
                    break;
                  }
                }
                uint64_t v296 = v290;
                while (1)
                {
                  BOOL v301 = !v296 || v294 == 0;
                  BOOL v302 = !v301;
                  if (!v295) {
                    break;
                  }
                  if (!v302 || *(_DWORD *)(v293 + 48) <= *(_DWORD *)(v294 + 48))
                  {
                    uint64_t v297 = *(void *)(v293 + 40);
                    --v295;
                    uint64_t v298 = v294;
                    uint64_t v299 = v293;
                    uint64_t v300 = v293;
                    if (!v292) {
                      goto LABEL_259;
                    }
LABEL_258:
                    *(void *)(v292 + 40) = v299;
                    uint64_t v300 = v286;
                    goto LABEL_259;
                  }
LABEL_272:
                  uint64_t v298 = *(void *)(v294 + 40);
                  --v296;
                  uint64_t v297 = v293;
                  uint64_t v299 = v294;
                  uint64_t v300 = v294;
                  if (v292) {
                    goto LABEL_258;
                  }
LABEL_259:
                  *(void *)(v299 + 32) = v292;
                  uint64_t v286 = v300;
                  uint64_t v293 = v297;
                  uint64_t v294 = v298;
                  uint64_t v292 = v299;
                }
                if (v302)
                {
                  uint64_t v295 = 0;
                  goto LABEL_272;
                }
                uint64_t v293 = v294;
                if (v294) {
                  continue;
                }
                break;
              }
              *(void *)(v292 + 40) = 0;
              v290 *= 2;
              if (v291 > 1) {
                continue;
              }
              break;
            }
LABEL_274:
            if (v1007 >= v995)
            {
              int64_t v303 = v1007 - __p;
              uint64_t v304 = (v1007 - __p) >> 3;
              unint64_t v305 = v304 + 1;
              if ((unint64_t)(v304 + 1) >> 61) {
                abort();
              }
              if ((v995 - __p) >> 2 > v305) {
                unint64_t v305 = (v995 - __p) >> 2;
              }
              if ((unint64_t)(v995 - __p) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v306 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v306 = v305;
              }
              if (v306)
              {
                if (!(v306 >> 61))
                {
                  unint64_t v307 = v306;
                  unint64_t v308 = operator new(8 * v306);
                  unint64_t v306 = v307;
                  goto LABEL_286;
                }
LABEL_1090:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              unint64_t v308 = 0;
LABEL_286:
              unint64_t v309 = (uint64_t *)&v308[8 * v304];
              *unint64_t v309 = v287;
              unint64_t v310 = (char *)(v309 + 1);
              if (v1007 == __p)
              {
                double v211 = v285;
              }
              else
              {
                unint64_t v311 = v1007 - 8 - __p;
                double v211 = v285;
                if (v311 < 0x168)
                {
                  v312 = v1007;
                  goto LABEL_294;
                }
                if (&v308[v303 - 8 - (v311 & 0xFFFFFFFFFFFFFFF8)] > &v308[v303 - 8]
                  || &v1007[-(v311 & 0xFFFFFFFFFFFFFFF8) - 8] > v1007 - 8
                  || (unint64_t)(__p - v308) < 0x20)
                {
                  v312 = v1007;
                  goto LABEL_294;
                }
                uint64_t v315 = (v311 >> 3) + 1;
                v312 = &v1007[-8 * (v315 & 0x3FFFFFFFFFFFFFFCLL)];
                v316 = &v308[v303 - 16];
                v317 = v1007 - 16;
                uint64_t v318 = v315 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v275 = *((_OWORD *)v317 - 1);
                  long long v274 = *(_OWORD *)v317;
                  *(v316 - 1) = v275;
                  _OWORD *v316 = v274;
                  v316 -= 2;
                  v317 -= 32;
                  v318 -= 4;
                }
                while (v318);
                v309 -= v315 & 0x3FFFFFFFFFFFFFFCLL;
                if (v315 != (v315 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_294:
                    uint64_t v313 = *((void *)v312 - 1);
                    v312 -= 8;
                    *--unint64_t v309 = v313;
                  }
                  while (v312 != __p);
                }
              }
              v995 = &v308[8 * v306];
              if (__p)
              {
                long long v314 = v310;
                operator delete(__p);
                v1007 = v314;
              }
              else
              {
                v1007 = v310;
              }
              int64x2_t v273 = (char *)v309;
              goto LABEL_242;
            }
            *(void *)v1007 = v287;
            v1007 += 8;
LABEL_241:
            int64x2_t v273 = __p;
LABEL_242:
            if (++v280 != v281) {
              continue;
            }
            break;
          }
          unint64_t v319 = (float *)(v1007 - v273);
          if (v1007 == v273)
          {
            uint64_t v336 = 0;
            unint64_t v161 = v1001;
          }
          else
          {
            v320 = v273;
            if ((unint64_t)v319 >= 0x7FFFFFFFFFFFFFF9) {
              abort();
            }
            v321 = (float *)operator new(2 * (void)v319);
            unint64_t v322 = (char *)&v321[4 * ((uint64_t)v319 >> 3)];
            __pa = v321;
            unint64_t v319 = v321;
            v323 = v320;
            do
            {
              uint64_t v324 = 0;
              float v325 = -3.4028e38;
              uint64_t v326 = *(void *)v323;
              do
              {
                float v327 = *(float *)(v326 + 4);
                if (v327 > v325) {
                  uint64_t v324 = v326;
                }
                float v325 = fmaxf(v327, v325);
                uint64_t v326 = *(void *)(v326 + 24);
              }
              while (v326 != *(void *)v323);
              if (v319 < (float *)v322)
              {
                *(void *)unint64_t v319 = v324;
                v319[2] = v325;
                v319 += 4;
                unint64_t v161 = v1001;
              }
              else
              {
                uint64_t v328 = ((char *)v319 - (char *)__pa) >> 4;
                unint64_t v329 = v328 + 1;
                if ((unint64_t)(v328 + 1) >> 60) {
                  abort();
                }
                if ((v322 - (char *)__pa) >> 3 > v329) {
                  unint64_t v329 = (v322 - (char *)__pa) >> 3;
                }
                if ((unint64_t)(v322 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v330 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v330 = v329;
                }
                if (v330)
                {
                  if (v330 >> 60) {
                    goto LABEL_1090;
                  }
                  uint64_t v331 = (char *)operator new(16 * v330);
                }
                else
                {
                  uint64_t v331 = 0;
                }
                v332 = (float *)&v331[16 * v328];
                *(void *)v332 = v324;
                v332[2] = v325;
                if (v319 == __pa)
                {
                  long long v335 = &v331[16 * v328];
                  unint64_t v161 = v1001;
                  uint64_t v334 = __pa;
                }
                else
                {
                  v333 = &v331[16 * v328];
                  unint64_t v161 = v1001;
                  uint64_t v334 = __pa;
                  do
                  {
                    long long v335 = v333 - 16;
                    *((_OWORD *)v333 - 1) = *((_OWORD *)v319 - 1);
                    v319 -= 4;
                    v333 -= 16;
                  }
                  while (v319 != __pa);
                }
                unint64_t v322 = &v331[16 * v330];
                unint64_t v319 = v332 + 4;
                if (v334) {
                  operator delete(v334);
                }
                __pa = (float *)v335;
              }
              v323 += 8;
            }
            while (v323 != v1007);
            v1007 = v320;
            uint64_t v336 = __pa;
          }
LABEL_334:
          unint64_t v337 = 126 - 2 * __clz(((char *)v319 - (char *)v336) >> 4);
          if (v319 == v336) {
            uint64_t v338 = 0;
          }
          else {
            uint64_t v338 = v337;
          }
          std::__introsort<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *,false>(v336, v319, v338, 1);
          __pb = v336;
          uint8x8_t v339 = v336;
          if (v319 != v336)
          {
            while (2)
            {
              v996 = v339;
              uint64_t v340 = *(void *)v339;
              int v341 = *(char *)(*(void *)v339 + 52);
              if (v1086 == 0.0)
              {
                uint64_t v375 = 0;
                if (!v271) {
                  break;
                }
              }
              else
              {
                *(void *)&buf[8] = 0;
                *(void *)&buf[16] = 0;
                uint64_t v342 = v271;
                *(void *)buf = &buf[8];
                do
                {
                  uint64_t v343 = (uint64_t *)operator new(0x30uLL);
                  unint64_t v344 = v343;
                  unsigned int v345 = *(_DWORD *)(v342 + 48);
                  *((_DWORD *)v343 + 8) = v345;
                  v343[5] = v342;
                  unint64_t v346 = *(uint64_t ***)&buf[8];
                  v347 = (uint64_t **)&buf[8];
                  v348 = (uint64_t **)&buf[8];
                  if (*(void *)&buf[8])
                  {
                    do
                    {
                      while (1)
                      {
                        v347 = v346;
                        if (v345 >= *((_DWORD *)v346 + 8)) {
                          break;
                        }
                        unint64_t v346 = (uint64_t **)*v346;
                        v348 = v347;
                        if (!*v347) {
                          goto LABEL_348;
                        }
                      }
                      unint64_t v346 = (uint64_t **)v346[1];
                    }
                    while (v346);
                    v348 = v347 + 1;
                  }
LABEL_348:
                  *uint64_t v343 = 0;
                  v343[1] = 0;
                  v343[2] = (uint64_t)v347;
                  _WORD *v348 = v343;
                  if (**(void **)buf)
                  {
                    *(void *)buf = **(void **)buf;
                    unint64_t v344 = *v348;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v344);
                  ++*(void *)&buf[16];
                  uint64_t v342 = *(void *)(v342 + 24);
                }
                while (v342 != v271);
                uint64_t v349 = v340;
                do
                {
                  uint64_t v350 = (uint64_t *)operator new(0x30uLL);
                  uint64_t v351 = v350;
                  unsigned int v352 = *(_DWORD *)(v349 + 48);
                  *((_DWORD *)v350 + 8) = v352;
                  v350[5] = v349;
                  unint64_t v353 = *(uint64_t ***)&buf[8];
                  uint64_t v354 = (uint64_t **)&buf[8];
                  v355 = (uint64_t **)&buf[8];
                  if (*(void *)&buf[8])
                  {
                    do
                    {
                      while (1)
                      {
                        uint64_t v354 = v353;
                        if (v352 >= *((_DWORD *)v353 + 8)) {
                          break;
                        }
                        unint64_t v353 = (uint64_t **)*v353;
                        v355 = v354;
                        if (!*v354) {
                          goto LABEL_359;
                        }
                      }
                      unint64_t v353 = (uint64_t **)v353[1];
                    }
                    while (v353);
                    v355 = v354 + 1;
                  }
LABEL_359:
                  *uint64_t v350 = 0;
                  v350[1] = 0;
                  v350[2] = (uint64_t)v354;
                  unsigned char *v355 = v350;
                  if (**(void **)buf)
                  {
                    *(void *)buf = **(void **)buf;
                    uint64_t v351 = *v355;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v351);
                  ++*(void *)&buf[16];
                  uint64_t v349 = *(void *)(v349 + 24);
                }
                while (v349 != v340);
                v356 = *(void **)&buf[8];
                if (!*(void *)&buf[8]) {
                  goto LABEL_400;
                }
                uint64_t v357 = v271;
                while (1)
                {
                  unsigned int v358 = *(_DWORD *)(v357 + 48);
                  v359 = *(uint64_t **)&buf[8];
                  v360 = &buf[8];
                  while (1)
                  {
                    while (1)
                    {
                      unsigned int v361 = *((_DWORD *)v359 + 8);
                      if (v358 >= v361) {
                        break;
                      }
                      v360 = v359;
                      v359 = (uint64_t *)*v359;
                      if (!v359) {
                        goto LABEL_364;
                      }
                    }
                    if (v361 >= v358) {
                      break;
                    }
                    v359 = (uint64_t *)v359[1];
                    if (!v359) {
                      goto LABEL_364;
                    }
                  }
                  uint64_t v362 = *v359;
                  __int16 v363 = v359;
                  if (*v359)
                  {
                    __int16 v363 = v359;
                    do
                    {
                      unsigned int v364 = *(_DWORD *)(v362 + 32);
                      BOOL v365 = v364 >= v358;
                      if (v364 >= v358) {
                        v366 = (uint64_t *)v362;
                      }
                      else {
                        v366 = (uint64_t *)(v362 + 8);
                      }
                      if (v365) {
                        __int16 v363 = (void *)v362;
                      }
                      uint64_t v362 = *v366;
                    }
                    while (*v366);
                  }
                  uint64_t v367 = v359[1];
                  if (v367)
                  {
                    do
                    {
                      unsigned int v368 = *(_DWORD *)(v367 + 32);
                      BOOL v369 = v358 >= v368;
                      if (v358 >= v368) {
                        v370 = (uint64_t *)(v367 + 8);
                      }
                      else {
                        v370 = (uint64_t *)v367;
                      }
                      if (!v369) {
                        v360 = (unsigned char *)v367;
                      }
                      uint64_t v367 = *v370;
                    }
                    while (*v370);
                  }
                  if (v363 != (void *)v360)
                  {
                    uint64_t v371 = 0;
                    do
                    {
                      uint64_t v372 = v371;
                      v373 = (void *)v363[1];
                      if (v373)
                      {
                        do
                        {
                          v374 = v373;
                          v373 = (void *)*v373;
                        }
                        while (v373);
                      }
                      else
                      {
                        do
                        {
                          v374 = (void *)v363[2];
                          _ZF = *v374 == (void)v363;
                          __int16 v363 = v374;
                        }
                        while (!_ZF);
                      }
                      uint64_t v371 = v372 + 1;
                      __int16 v363 = v374;
                    }
                    while (v374 != (void *)v360);
                    if (!v372) {
                      break;
                    }
                  }
LABEL_364:
                  uint64_t v357 = *(void *)(v357 + 16);
                  if (v357 == v271) {
                    goto LABEL_400;
                  }
                }
                if (!v357)
                {
LABEL_400:
                  uint64_t v271 = 0;
                  uint64_t v375 = 0;
                  goto LABEL_401;
                }
                uint64_t v271 = v357;
                while (1)
                {
                  unsigned int v442 = *(_DWORD *)(v271 + 48);
                  v443 = *(uint64_t **)&buf[8];
                  v444 = &buf[8];
                  while (1)
                  {
                    while (1)
                    {
                      unsigned int v445 = *((_DWORD *)v443 + 8);
                      if (v442 >= v445) {
                        break;
                      }
                      v444 = v443;
                      v443 = (uint64_t *)*v443;
                      if (!v443) {
                        goto LABEL_474;
                      }
                    }
                    if (v445 >= v442) {
                      break;
                    }
                    v443 = (uint64_t *)v443[1];
                    if (!v443) {
                      goto LABEL_474;
                    }
                  }
                  uint64_t v446 = *v443;
                  v447 = v443;
                  if (*v443)
                  {
                    v447 = v443;
                    do
                    {
                      unsigned int v448 = *(_DWORD *)(v446 + 32);
                      BOOL v449 = v448 >= v442;
                      if (v448 >= v442) {
                        v450 = (uint64_t *)v446;
                      }
                      else {
                        v450 = (uint64_t *)(v446 + 8);
                      }
                      if (v449) {
                        v447 = (void *)v446;
                      }
                      uint64_t v446 = *v450;
                    }
                    while (*v450);
                  }
                  uint64_t v451 = v443[1];
                  if (v451)
                  {
                    do
                    {
                      unsigned int v452 = *(_DWORD *)(v451 + 32);
                      BOOL v453 = v442 >= v452;
                      if (v442 >= v452) {
                        v454 = (uint64_t *)(v451 + 8);
                      }
                      else {
                        v454 = (uint64_t *)v451;
                      }
                      if (!v453) {
                        v444 = (unsigned char *)v451;
                      }
                      uint64_t v451 = *v454;
                    }
                    while (*v454);
                  }
                  if (v447 != (void *)v444) {
                    break;
                  }
LABEL_474:
                  uint64_t v271 = *(void *)(v271 + 24);
                  if (v357 == v271)
                  {
                    uint64_t v375 = 0;
                    uint64_t v271 = v357;
                    unint64_t v161 = v1001;
                    goto LABEL_401;
                  }
                }
                uint64_t v455 = 0;
                do
                {
                  int v456 = *(char *)(v447[5] + 52);
                  if (v456 >= 1) {
                    uint64_t v455 = v447[5];
                  }
                  if (v456 > 0)
                  {
                    uint64_t v455 = v447[5];
                    goto LABEL_510;
                  }
                  v457 = (void *)v447[1];
                  if (v457)
                  {
                    do
                    {
                      v458 = v457;
                      v457 = (void *)*v457;
                    }
                    while (v457);
                  }
                  else
                  {
                    do
                    {
                      v458 = (void *)v447[2];
                      _ZF = *v458 == (void)v447;
                      v447 = v458;
                    }
                    while (!_ZF);
                  }
                  v447 = v458;
                }
                while (v458 != (void *)v444);
                if (!v455) {
                  goto LABEL_474;
                }
LABEL_510:
                uint64_t v459 = v455;
                uint64_t v460 = v271;
                while (1)
                {
                  uint64_t v460 = *(void *)(v460 + 24);
                  uint64_t v459 = *(void *)(v459 + 16);
                  if (v455 == v459) {
                    break;
                  }
                  if (*(_DWORD *)(v459 + 48) != *(_DWORD *)(v460 + 48)) {
                    goto LABEL_515;
                  }
                }
                uint64_t v459 = v455;
LABEL_515:
                uint64_t v461 = *(void *)(v459 + 24);
                if (v461 == v455 || (uint64_t v462 = *(void *)(v460 + 16)) == 0)
                {
                  if (v271)
                  {
                    uint64_t v485 = v455;
                    do
                    {
                      *(unsigned char *)(v485 + 52) = 0;
                      uint64_t v485 = *(void *)(v485 + 24);
                    }
                    while (v485 != v455);
                    uint64_t v486 = *(void *)(v455 + 24);
                    uint64_t v487 = *(void *)(v271 + 24);
                    *(void *)(v271 + 24) = v486;
                    *(void *)(v455 + 24) = v487;
                    *(void *)(v487 + 16) = v455;
                    *(void *)(v486 + 16) = v271;
                  }
LABEL_556:
                  uint64_t v271 = v357;
                  uint64_t v375 = 1;
                  unint64_t v161 = v1001;
                  goto LABEL_401;
                }
                if (!v461) {
                  goto LABEL_556;
                }
                uint64_t v463 = v455;
                do
                {
                  *(unsigned char *)(v463 + 52) = 0;
                  uint64_t v463 = *(void *)(v463 + 24);
                }
                while (v463 != v455);
                uint64_t v464 = *(void *)(v455 + 16);
                uint64_t v970 = v461;
                if (v464 != v461)
                {
                  v465 = 0;
                  v466 = 0;
                  v467 = 0;
                  uint64_t v969 = v462;
                  while (v466 < v465)
                  {
                    *(void *)v466 = v464;
                    v468 = v466 + 8;
LABEL_523:
                    uint64_t v464 = *(void *)(v464 + 16);
                    v466 = v468;
                    if (v464 == v461) {
                      goto LABEL_559;
                    }
                  }
                  int64_t v469 = v466 - v467;
                  uint64_t v470 = (v466 - v467) >> 3;
                  unint64_t v471 = v470 + 1;
                  if ((unint64_t)(v470 + 1) >> 61) {
                    abort();
                  }
                  v984 = v467;
                  if ((v465 - v467) >> 2 > v471) {
                    unint64_t v471 = (v465 - v467) >> 2;
                  }
                  if ((unint64_t)(v465 - v467) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v472 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v472 = v471;
                  }
                  if (v472)
                  {
                    int64_t v971 = v466 - v467;
                    v972 = v466;
                    uint64_t v974 = v464;
                    if (v472 >> 61) {
                      goto LABEL_1090;
                    }
                    unint64_t v473 = v472;
                    v474 = operator new(8 * v472);
                    v466 = v972;
                    uint64_t v464 = v974;
                    unint64_t v472 = v473;
                    int64_t v469 = v971;
                  }
                  else
                  {
                    v474 = 0;
                  }
                  v475 = &v474[8 * v470];
                  *(void *)v475 = v464;
                  v468 = v475 + 8;
                  if (v466 == v984)
                  {
                    v467 = &v474[8 * v470];
                    double v211 = v1013;
                    v465 = &v474[8 * v472];
                    if (v466) {
                      goto LABEL_546;
                    }
                  }
                  else
                  {
                    unint64_t v476 = v466 - 8 - v984;
                    if (v476 < 0x168)
                    {
                      v477 = v466;
                      double v211 = v1013;
                      v466 = v984;
                      goto LABEL_544;
                    }
                    double v211 = v1013;
                    if (&v474[v469 - 8 - (v476 & 0xFFFFFFFFFFFFFFF8)] > &v474[v469 - 8]
                      || &v466[-(v476 & 0xFFFFFFFFFFFFFFF8) - 8] > v466 - 8
                      || (unint64_t)(v466 - &v474[v469]) < 0x20)
                    {
                      v477 = v466;
                      v466 = v984;
                      goto LABEL_544;
                    }
                    uint64_t v480 = (v476 >> 3) + 1;
                    v477 = &v466[-8 * (v480 & 0x3FFFFFFFFFFFFFFCLL)];
                    v481 = &v474[v469 - 16];
                    v482 = v466 - 16;
                    uint64_t v483 = v480 & 0x3FFFFFFFFFFFFFFCLL;
                    v466 = v984;
                    do
                    {
                      long long v484 = *(_OWORD *)v482;
                      *(v481 - 1) = *((_OWORD *)v482 - 1);
                      _OWORD *v481 = v484;
                      v481 -= 2;
                      v482 -= 32;
                      v483 -= 4;
                    }
                    while (v483);
                    v475 -= 8 * (v480 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v480 != (v480 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      do
                      {
LABEL_544:
                        uint64_t v478 = *((void *)v477 - 1);
                        v477 -= 8;
                        *((void *)v475 - 1) = v478;
                        v475 -= 8;
                      }
                      while (v477 != v466);
                    }
                    v467 = v475;
                    v465 = &v474[8 * v472];
                    if (v466)
                    {
LABEL_546:
                      v973 = v465;
                      v975 = v468;
                      uint64_t v479 = v464;
                      v985 = v467;
                      operator delete(v466);
                      v465 = v973;
                      v468 = v975;
                      v467 = v985;
                      uint64_t v464 = v479;
                    }
                  }
                  uint64_t v462 = v969;
                  uint64_t v461 = v970;
                  goto LABEL_523;
                }
                v467 = 0;
                v468 = 0;
LABEL_559:
                for (uint64_t i = *(void *)(v271 + 24); i != v462; uint64_t i = *(void *)(i + 24))
                {
                  if (i == v357) {
                    break;
                  }
                }
                uint64_t v489 = *(void *)(v455 + 24);
                uint64_t v490 = v462;
                uint64_t v491 = v271;
                if (v489 != v970)
                {
                  *(void *)(v489 + 16) = v271;
                  uint64_t v491 = *(void *)(v970 + 16);
                  *(void *)(v491 + 24) = v462;
                  uint64_t v490 = *(void *)(v455 + 24);
                }
                *(void *)(v271 + 24) = v490;
                *(void *)(v462 + 16) = v491;
                unint64_t v161 = v1001;
                if (v467 != v468)
                {
                  uint64_t v492 = v1081;
                  v493 = v1083;
                  v494 = v467;
                  do
                  {
                    v495 = *(uint64_t **)v494;
                    if (*(void *)v494) {
                      BOOL v496 = v492 == 0;
                    }
                    else {
                      BOOL v496 = 1;
                    }
                    if (!v496)
                    {
                      *((unsigned char *)v495 + 52) = -1;
                      uint64_t *v495 = (uint64_t)v493;
                      v493 = v495;
                      v1083 = v495;
                    }
                    v494 += 8;
                  }
                  while (v494 != v468);
                }
                if (v467) {
                  operator delete(v467);
                }
                v356 = *(void **)&buf[8];
                uint64_t v375 = 1;
LABEL_401:
                std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v356);
                if (!v271) {
                  break;
                }
              }
              if (v375) {
                goto LABEL_447;
              }
              int v376 = 0;
              uint64_t v377 = 0;
              int v378 = 0;
              float v379 = *(float *)(v340 + 4);
              float v380 = *(float *)(v340 + 8);
              double v381 = v379;
              double v382 = v380;
              buf[0] = 0;
              double v383 = *(double *)buf;
              double v384 = *(double *)&buf[8];
              float v385 = *(float *)(v271 + 8);
              double v386 = *(double *)buf;
              uint64_t v387 = v271;
LABEL_404:
              uint64_t v388 = v387;
              float v389 = v385;
              uint64_t v387 = *(void *)(v387 + 24);
              float v385 = *(float *)(v387 + 8);
              float v390 = fminf(v385, v389);
              if (fmaxf(v389, v385) < v380 || v390 > v380) {
                goto LABEL_408;
              }
              float v393 = *(float *)(v388 + 4);
              float v394 = *(float *)(v387 + 4);
              if (fmaxf(v393, v394) < v379) {
                goto LABEL_408;
              }
              if ((float)((float)((float)(v393 - v394) * (float)(v380 - v385))
                         + (float)((float)(v379 - v394) * (float)(v385 - v389))) >= 0.0)
                goto LABEL_408;
              double v395 = v389;
              double v396 = v385;
              double v397 = v385 - v395;
              if (v397 == 0.0) {
                goto LABEL_408;
              }
              double v398 = -((v396 - v382) * (v84 / v397));
              BOOL v399 = v398 >= 0.0 && v398 <= v83;
              if (v399
                && (double v400 = v394, v401 = v400 - v393, ((v381 - v400) * v397 + v401 * (v396 - v382)) * (v84 / v397) >= 0.0))
              {
                double v392 = v400 - v401 * v398;
                if (v378)
                {
                  if (v392 >= v386)
                  {
                    int v378 = 1;
                    goto LABEL_408;
                  }
                }
                else
                {
                  int v376 = 1;
                }
                double v384 = v396 - v398 * v397;
                int v378 = 1;
                double v383 = v392;
                uint64_t v377 = v388;
              }
              else
              {
LABEL_408:
                double v392 = v386;
              }
              double v386 = v392;
              if (v387 == v271)
              {
                *(double *)buf = v383;
                *(double *)&buf[8] = v384;
                buf[16] = v376;
                if (v376)
                {
                  uint64_t v402 = *(float *)(*(void *)(v377 + 24) + 4) <= *(float *)(v377 + 4)
                       ? v377
                       : *(void *)(v377 + 24);
                  double v403 = *(float *)(v402 + 4);
                  double v404 = *(float *)(v402 + 8);
                  double v1095 = v403;
                  double v1096 = v404;
                  if (*(void *)buf == *(void *)&v403 && *(void *)&buf[8] == *(void *)&v404) {
                    goto LABEL_440;
                  }
                  double v406 = v383 - v381;
                  double v407 = v384 - v382;
                  double v408 = v403 - v381;
                  double v409 = v404 - v382;
                  double v410 = -((v384 - v382) * (v403 - v381) - (v404 - v382) * (v383 - v381));
                  BOOL v411 = v410 == 0.0;
                  if (v410 != 0.0) {
                    double v410 = v83 / v410;
                  }
                  uint64_t v412 = 0;
                  if (!v411)
                  {
                    double v422 = fmin(v384, fmin(v382, 1.79769313e308));
                    double v423 = fmax(fmax(v382, -1.79769313e308), v384);
                    double v424 = fmin(fmin(v383, fmin(v381, 1.79769313e308)), v403);
                    double v425 = fmax(fmax(fmax(v381, -1.79769313e308), v383), v403);
                    double v426 = fmin(v422, v404);
                    double v427 = fmax(v423, v404);
                    float v428 = 3.4028e38;
                    uint64_t v429 = *(void *)(v402 + 24);
                    do
                    {
                      if (*(void *)(v429 + 4) != *(void *)(v402 + 4))
                      {
                        float v430 = *(float *)(v429 + 4);
                        float v431 = *(float *)(v429 + 8);
                        double v432 = v430;
                        double v433 = v431;
                        BOOL v434 = v424 > v430 || v425 <= v432;
                        BOOL v435 = !v434 && v426 <= v433;
                        if (v435 && v427 > v433)
                        {
                          double v437 = v432 - v381;
                          double v438 = v433 - v382;
                          double v439 = -((v433 - v382) * v408 - v437 * v409) * v410;
                          double v440 = -(v437 * v407 - v438 * v406) * v410;
                          if (v83 - (v440 + v439) > 0.0
                            && v439 > 0.0
                            && v440 > 0.0
                            && (float)((float)((float)(v431 - *(float *)(*(void *)(v429 + 24) + 8))
                                             * (float)(v430 - *(float *)(*(void *)(v429 + 16) + 4)))
                                     + (float)((float)(*(float *)(*(void *)(v429 + 24) + 4) - v430)
                                             * (float)(v431 - *(float *)(*(void *)(v429 + 16) + 8)))) >= 0.0)
                          {
                            float v441 = (float)((float)(v430 - v379) * (float)(v430 - v379))
                                 + (float)((float)(v431 - v380) * (float)(v431 - v380));
                            _NF = v441 < v428;
                            float v428 = fminf(v441, v428);
                            if (_NF) {
                              uint64_t v412 = v429;
                            }
                          }
                        }
                      }
                      uint64_t v429 = *(void *)(v429 + 24);
                    }
                    while (v429 != v402);
                  }
                  if (v412) {
                    uint64_t v402 = v412;
                  }
                  if (v402)
                  {
LABEL_440:
                    uint64_t v413 = v340;
                    do
                    {
                      *(unsigned char *)(v413 + 52) = 0;
                      uint64_t v413 = *(void *)(v413 + 24);
                    }
                    while (v413 != v340);
                    v414 = v1083;
                    if (!v1083)
                    {
                      geo::Pool<geo::Triangulator<float,unsigned short>::Node>::allocateSlab(&v1079);
                      v414 = v1083;
                    }
                    v1083 = (uint64_t *)*v414;
                    *(_WORD *)v414 = *(_WORD *)v402;
                    *(uint64_t *)((char *)v414 + 4) = *(void *)(v402 + 4);
                    long long v415 = 0uLL;
                    *((_OWORD *)v414 + 1) = 0u;
                    *((_OWORD *)v414 + 2) = 0u;
                    *(uint64_t *)((char *)v414 + 45) = 0;
                    *((_DWORD *)v414 + 12) = *(_DWORD *)(v402 + 48);
                    v416 = v1083;
                    if (!v1083)
                    {
                      geo::Pool<geo::Triangulator<float,unsigned short>::Node>::allocateSlab(&v1079);
                      v416 = v1083;
                      long long v415 = 0uLL;
                    }
                    v1083 = (uint64_t *)*v416;
                    *(_WORD *)v416 = *(_WORD *)v340;
                    *(uint64_t *)((char *)v416 + 4) = *(void *)(v340 + 4);
                    *(uint64_t *)((char *)v416 + 45) = 0;
                    *((_OWORD *)v416 + 1) = v415;
                    *((_OWORD *)v416 + 2) = v415;
                    *((_DWORD *)v416 + 12) = *(_DWORD *)(v340 + 48);
                    v414[5] = v402;
                    *(void *)(v402 + 40) = v414;
                    v416[5] = v340;
                    *(void *)(v340 + 40) = v416;
                    uint64_t v417 = *(void *)(v402 + 24);
                    uint64_t v418 = *(void *)(v340 + 16);
                    *(void *)(v402 + 24) = v340;
                    *(void *)(v340 + 16) = v402;
                    v414[3] = v417;
                    *(void *)(v417 + 16) = v414;
                    v416[3] = (uint64_t)v414;
                    v414[2] = (uint64_t)v416;
                    *(void *)(v418 + 24) = v416;
                    v416[2] = v418;
                  }
                }
LABEL_447:
                uint8x8_t v339 = v996 + 4;
                if (v996 + 4 == v319) {
                  break;
                }
                uint64_t v419 = v996 + 4;
                do
                {
                  uint64_t v420 = *(void *)v419;
                  if (*(char *)(*(void *)v419 + 52) > v341)
                  {
                    uint64_t v421 = *(void *)v419;
                    do
                    {
                      --*(unsigned char *)(v421 + 52);
                      uint64_t v421 = *(void *)(v421 + 24);
                    }
                    while (v421 != v420);
                  }
                  v419 += 4;
                }
                while (v419 != v319);
                continue;
              }
              goto LABEL_404;
            }
          }
          if (__pb) {
            operator delete(__pb);
          }
          if (v1007) {
            operator delete(v1007);
          }
          if (!v271) {
            goto LABEL_646;
          }
          if (v1086 == 0.0) {
            goto LABEL_609;
          }
          v497 = (void *)v271;
          do
          {
            v498 = (void *)v497[3];
            v497[4] = v497[2];
            v497[5] = v498;
            v497 = v498;
          }
          while (v498 != (void *)v271);
          *(void *)(*(void *)(v271 + 32) + 40) = 0;
          *(void *)(v271 + 32) = 0;
          uint64_t v499 = v271;
          uint64_t v500 = 1;
          while (2)
          {
            unint64_t v501 = 0;
            uint64_t v502 = 0;
            uint64_t v503 = v499;
            uint64_t v504 = v499;
            while (2)
            {
              uint64_t v505 = 0;
              ++v501;
              while (1)
              {
                ++v505;
                uint64_t v504 = *(void *)(v504 + 40);
                if (!v504) {
                  break;
                }
                if (v500 == v505)
                {
                  uint64_t v505 = v500;
                  break;
                }
              }
              uint64_t v506 = v500;
              while (1)
              {
                BOOL v511 = !v506 || v504 == 0;
                BOOL v512 = !v511;
                if (!v505) {
                  break;
                }
                if (!v512 || *(_DWORD *)(v503 + 48) <= *(_DWORD *)(v504 + 48))
                {
                  uint64_t v507 = *(void *)(v503 + 40);
                  --v505;
                  uint64_t v508 = v504;
                  uint64_t v509 = v503;
                  uint64_t v510 = v503;
                  if (!v502) {
                    goto LABEL_594;
                  }
LABEL_593:
                  *(void *)(v502 + 40) = v509;
                  uint64_t v510 = v499;
                  goto LABEL_594;
                }
LABEL_607:
                uint64_t v508 = *(void *)(v504 + 40);
                --v506;
                uint64_t v507 = v503;
                uint64_t v509 = v504;
                uint64_t v510 = v504;
                if (v502) {
                  goto LABEL_593;
                }
LABEL_594:
                *(void *)(v509 + 32) = v502;
                uint64_t v499 = v510;
                uint64_t v503 = v507;
                uint64_t v504 = v508;
                uint64_t v502 = v509;
              }
              if (v512)
              {
                uint64_t v505 = 0;
                goto LABEL_607;
              }
              uint64_t v503 = v504;
              if (v504) {
                continue;
              }
              break;
            }
            *(void *)(v502 + 40) = 0;
            v500 *= 2;
            if (v501 > 1) {
              continue;
            }
            break;
          }
LABEL_609:
          int __pc = geo::Triangulator<float,unsigned short>::earclipPolygon((uint64_t)&v1079, (float *)v271, (char **)&v1045);
          v513 = v1046;
          v514 = (int16x8_t *)v1045;
          unint64_t v515 = ((char *)v1046 - (unsigned char *)v1045) >> 1;
          unint64_t v516 = geo::triangulatedIndexCount<float>(&v1040, *(void **)&v211, v1022);
          if (v515 >= v516) {
            goto LABEL_642;
          }
          v517 = v1047;
          unint64_t v1008 = v516;
          while (2)
          {
            if (v513 < v517)
            {
              v513->i16[0] = 0;
              v513 = (int16x8_t *)((char *)v513 + 2);
              goto LABEL_612;
            }
            uint64_t v518 = (char *)v513 - (char *)v514;
            if ((char *)v513 - (char *)v514 <= -3)
            {
              v1047 = v517;
              v1045 = v514;
LABEL_1093:
              abort();
            }
            uint64_t v519 = v518 >> 1;
            if ((char *)v517 - (char *)v514 <= (unint64_t)((v518 >> 1) + 1)) {
              uint64_t v520 = v519 + 1;
            }
            else {
              uint64_t v520 = (char *)v517 - (char *)v514;
            }
            if ((unint64_t)((char *)v517 - (char *)v514) >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v521 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v521 = v520;
            }
            if (v521)
            {
              if (v521 < 0) {
                goto LABEL_1090;
              }
              uint64_t v522 = v521;
              v523 = operator new(2 * v521);
              uint64_t v521 = v522;
            }
            else
            {
              v523 = 0;
            }
            v524 = (int16x8_t *)&v523[2 * v519];
            v524->i16[0] = 0;
            v525 = (int16x8_t *)&v524->i16[1];
            if (v513 == v514)
            {
              double v211 = v1013;
              goto LABEL_634;
            }
            unint64_t v526 = (char *)&v513[-1].u64[1] + 6 - (char *)v514;
            if (v526 < 0x5E
              || (unint64_t v528 = v518 & 0xFFFFFFFFFFFFFFFELL,
                  &v523[(v518 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v526 & 0xFFFFFFFFFFFFFFFELL)] > &v523[(v518 & 0xFFFFFFFFFFFFFFFELL)
                                                                                                 - 2]))
            {
              v527 = v513;
              double v211 = v1013;
              do
              {
LABEL_633:
                __int16 v529 = v527[-1].i16[7];
                v527 = (int16x8_t *)((char *)v527 - 2);
                v524[-1].i16[7] = v529;
                v524 = (int16x8_t *)((char *)v524 - 2);
              }
              while (v527 != v514);
              goto LABEL_634;
            }
            double v211 = v1013;
            if ((char *)&v513[-1].u64[1] - (v526 & 0xFFFFFFFFFFFFFFFELL) + 6 > (char *)&v513[-1].u64[1] + 6
              || (char *)v513 - v523 - v528 < 0x20)
            {
              v527 = v513;
              goto LABEL_633;
            }
            uint64_t v530 = (v526 >> 1) + 1;
            v527 = (int16x8_t *)((char *)v513 - 2 * (v530 & 0xFFFFFFFFFFFFFFF0));
            v531 = (int16x8_t *)&v523[2 * v519 - 16];
            v532 = v513 - 1;
            unint64_t v533 = v530 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              int16x8_t v534 = *v532;
              v531[-1] = v532[-1];
              int16x8_t *v531 = v534;
              v531 -= 2;
              v532 -= 2;
              v533 -= 16;
            }
            while (v533);
            v524 = (int16x8_t *)((char *)v524 - 2 * (v530 & 0xFFFFFFFFFFFFFFF0));
            if (v530 != (v530 & 0xFFFFFFFFFFFFFFF0)) {
              goto LABEL_633;
            }
LABEL_634:
            v517 = (int16x8_t *)&v523[2 * v521];
            v1046 = v525;
            if (v514) {
              operator delete(v514);
            }
            v514 = v524;
            v513 = v525;
            unint64_t v516 = v1008;
LABEL_612:
            v1046 = v513;
            if (++v515 != v516) {
              continue;
            }
            break;
          }
          v1047 = v517;
          v1045 = v514;
          unint64_t v161 = v1001;
LABEL_642:
          if (!__pc)
          {
LABEL_646:
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
            }
            v538 = (id)GEOGetVectorKitVKDefaultLog_log;
            uint64_t v71 = (uint64_t)v1010;
            if (os_log_type_enabled(v538, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1A1780000, v538, OS_LOG_TYPE_ERROR, "Building failed to triangulate!", buf, 2u);
            }

            *(void *)buf = &off_1EF57A730;
            *(void *)&buf[8] = &v1040;
            *(void *)&buf[24] = buf;
            if ((unint64_t)(v1041 - (unsigned char *)v1040) >= 0x18)
            {
              uint64_t v539 = (v1041 - (unsigned char *)v1040) >> 3;
              if (*(void *)v1040 == *((void *)v1040 + v539 - 1)) {
                --v539;
              }
            }
            else
            {
              uint64_t v539 = 0;
            }
            if (*(char **)&v211 == v1022)
            {
              uint64_t v540 = 0;
            }
            else
            {
              uint64_t v540 = 0;
              double v541 = v211;
              v542 = *(char **)&v211;
              do
              {
                v545 = *(void **)v542;
                uint64_t v546 = *((void *)v542 + 1);
                if (*(void *)v542 != v546)
                {
                  *(void *)buf = &off_1EF57A730;
                  *(double *)&buf[8] = v541;
                  *(void *)&buf[24] = buf;
                  uint64_t v547 = v546 - (void)v545;
                  v1098 = (void **)&v1095;
                  double v1095 = COERCE_DOUBLE(&off_1EF57A730);
                  double v1096 = v541;
                  if ((unint64_t)v547 >= 0x18)
                  {
                    uint64_t v543 = v547 >> 3;
                    if (*v545 == v545[v543 - 1]) {
                      uint64_t v544 = v543 - 1;
                    }
                    else {
                      uint64_t v544 = v543;
                    }
                  }
                  else
                  {
                    uint64_t v544 = 0;
                  }
                  v539 += v544;
                  ++v540;
                }
                *(void *)&v541 += 24;
                v542 += 24;
              }
              while (v542 != v1022);
            }
            uint64_t v535 = v1050;
            if (v539 + 2 * v540 != 2)
            {
              unint64_t v548 = 3 * (v539 + 2 * v540 - 2);
              uint64_t v549 = v1075;
              if (v548 < 0x10)
              {
                unint64_t v550 = 0;
                goto LABEL_671;
              }
              unint64_t v550 = v548 & 0xFFFFFFFFFFFFFFF0;
              int16x8_t v551 = vdupq_n_s16(v989);
              v552 = (int16x8_t *)(v1075 + 2 * v1050 + 16);
              unint64_t v553 = v548 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v552[-1] = v551;
                int16x8_t *v552 = v551;
                v552 += 2;
                v553 -= 16;
              }
              while (v553);
              v535 += v550;
              if (v548 != v550)
              {
LABEL_671:
                uint64_t v554 = v550 - 3 * v539 - 6 * v540 + 6;
                do
                {
                  *(_WORD *)(v549 + 2 * v535++) = v989;
                  _CF = __CFADD__(v554++, 1);
                }
                while (!_CF);
              }
            }
            int v555 = 0;
            goto LABEL_675;
          }
          uint64_t v535 = v1050;
          if (v514 == v513)
          {
            int v555 = 1;
            uint64_t v71 = (uint64_t)v1010;
          }
          else
          {
            uint64_t v536 = v1075;
            unint64_t v537 = (char *)v513 - (char *)v514 - 2;
            if (v537 > 0x1D)
            {
              uint64_t v71 = (uint64_t)v1010;
              if ((unint64_t)(2 * v1050 + v1075 - (void)v514) < 0x20) {
                goto LABEL_871;
              }
              uint64_t v767 = (v537 >> 1) + 1;
              unint64_t v768 = v767 & 0xFFFFFFFFFFFFFFF0;
              int16x8_t v769 = vdupq_n_s16(v989);
              v770 = (int16x8_t *)(v1075 + 2 * v1050 + 16);
              v771 = v514 + 1;
              unint64_t v772 = v767 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                int16x8_t v773 = vaddq_s16(*v771, v769);
                v770[-1] = vaddq_s16(v771[-1], v769);
                int16x8_t *v770 = v773;
                v770 += 2;
                v771 += 2;
                v772 -= 16;
              }
              while (v772);
              v535 += v768;
              if (v767 != v768)
              {
                v514 = (int16x8_t *)((char *)v514 + 2 * (v767 & 0xFFFFFFFFFFFFFFF0));
                goto LABEL_871;
              }
            }
            else
            {
              uint64_t v71 = (uint64_t)v1010;
              do
              {
LABEL_871:
                __int16 v774 = v514->i16[0];
                v514 = (int16x8_t *)((char *)v514 + 2);
                *(_WORD *)(v536 + 2 * v535++) = v774 + v989;
              }
              while (v514 != v513);
            }
            int v555 = 1;
          }
LABEL_675:
          uint64_t v1050 = v535;
          if (!*v998)
          {
            uint64_t v556 = v175;
            goto LABEL_845;
          }
          uint64_t v556 = v175;
          if ((void)v111 != *((void *)&v111 + 1))
          {
            uint64_t v557 = 0;
            __asm
            {
              FCVT            H0, S14
              FCVT            H1, S15
            }
            uint64_t v560 = v1070 + 8 * v175 + 2;
            uint64_t v561 = v1055 + 4 * v175;
            v562 = (float *)(v111 + 8);
            uint64_t v563 = v1060 + 4 * v175 + 2;
            v564 = (_WORD *)(v1065 + 4 * v175 + 2);
            do
            {
              int v565 = (int)(float)(*(v562 - 1) * v1018.f32[0]);
              *(_WORD *)(v560 - 2) = (int)(float)(*(v562 - 2) * v1018.f32[0]);
              *(_WORD *)uint64_t v560 = v565;
              *(float *)(v560 + 2) = *v562;
              float v566 = v1025.f32[0];
              if ((v1011 & 1) == 0) {
                float v566 = *v562;
              }
              *(float *)(v561 + 4 * v557) = v566;
              *(v564 - 1) = _H0;
              _WORD *v564 = _H1;
              *(_DWORD *)(v563 - 2) = 939538432;
              ++v557;
              v560 += 8;
              v562 += 3;
              v563 += 4;
              v564 += 2;
            }
            while (v161 > (unsigned __int16)v557);
            uint64_t v556 = v175 + v557;
          }
          if (*v1020)
          {
            int v976 = v555;
            unint64_t v567 = 0;
            v568 = v1089[0];
            uint64_t v569 = v1070;
            uint64_t v570 = v1055;
            uint64_t v571 = v1065;
            uint64_t v572 = v1060;
            uint64_t v573 = v1070 + 2;
            uint64_t v1009 = v1065 + 2;
            __pd = (char *)(v1060 + 2);
            uint64_t v990 = v1070 + 4;
            int32x4_t v574 = vdupq_lane_s32(*(int32x2_t *)v1025.f32, 0);
            uint64_t v986 = v1070 + 16;
            uint64_t v994 = v1060;
            uint64_t v997 = v1070 + 2;
            while (1)
            {
              unint64_t v575 = v568[6 * v567];
              int64_t v576 = v568[6 * v567 + 1] - v575;
              if (v576)
              {
                unint64_t v577 = v576 / 12;
                if (v577 <= 1) {
                  unint64_t v578 = 1;
                }
                else {
                  unint64_t v578 = v577;
                }
                if (v1011)
                {
                  if (v578 >= 0x1C)
                  {
                    uint64_t v589 = 8 * v556;
                    unint64_t v590 = v569 + 8 * v556;
                    uint64_t v591 = 8 * (v578 - 1);
                    unint64_t v592 = v590 + v591;
                    unint64_t v593 = v573 + 8 * v556;
                    unint64_t v594 = v593 + v591;
                    uint64_t v595 = 4 * v556;
                    v596 = (int8x16_t *)(v571 + 4 * v556);
                    uint64_t v597 = 4 * (v578 - 1);
                    v598 = (_OWORD *)(v572 + 4 * v556);
                    if (&__pd[4 * v556 + v597] >= &__pd[4 * v556]
                      && (_OWORD *)((char *)v598 + v597) >= v598
                      && v1009 + 4 * v556 + v597 >= (unint64_t)(v1009 + 4 * v556)
                      && &v596->i8[v597] >= (__int8 *)v596
                      && v594 >= v593
                      && v592 >= v590
                      && (unsigned __int16)(v578 - 1) != 0xFFFFLL
                      && (v578 - 1) >> 16 == 0)
                    {
                      int v580 = 0;
                      unint64_t v579 = 0;
                      unint64_t v606 = v569 + 8 * (v556 + v578);
                      unint64_t v607 = v570 + v595;
                      uint64_t v608 = 4 * (v556 + v578);
                      unint64_t v609 = v570 + v608;
                      unint64_t v610 = v575 + 12 * v578;
                      unint64_t v611 = v572 + v608;
                      BOOL v613 = v990 + v589 < v610 && v575 < v606;
                      BOOL v615 = v607 < v610 && v575 < v609;
                      unint64_t v616 = v571 + v608;
                      BOOL v618 = (unint64_t)v596 < v611 && (unint64_t)v598 < v616;
                      if (v607 >= v606 || v990 + v589 >= v609)
                      {
                        uint64_t v572 = v994;
                        uint64_t v573 = v997;
                        if (v613 || v615 || v618)
                        {
                          float v581 = v1018.f32[0];
                          __int16 v583 = v999;
                          __int16 v582 = v1000;
                          double v211 = v1013;
                          unint64_t v161 = v1001;
                        }
                        else
                        {
                          uint64_t v620 = v569;
                          unint64_t v579 = v578 & 0xFFFFFFFFFFFFFFFCLL;
                          int v580 = v578 & 0xFFFFFFFC;
                          v621 = (int32x4_t *)(v570 + v595);
                          uint64_t v622 = v986 + v589;
                          v623 = (int32x4_t *)v568[6 * v567];
                          unint64_t v624 = v578 & 0xFFFFFFFFFFFFFFFCLL;
                          float v581 = v1018.f32[0];
                          *(void *)&long long v625 = 0x3800380038003800;
                          *((void *)&v625 + 1) = 0x3800380038003800;
                          double v211 = v1013;
                          do
                          {
                            int32x4_t v627 = v623[1];
                            int32x4_t v626 = v623[2];
                            int32x4_t v628 = *v623;
                            v623 += 3;
                            v629.i64[0] = __PAIR64__(v628.u32[3], v628.u32[0]);
                            float32x4_t v630 = (float32x4_t)vrev64q_s32(v627);
                            v630.i32[0] = v628.i32[1];
                            *(_DWORD *)(v622 - 12) = v628.i32[2];
                            v629.i64[1] = __PAIR64__(v626.u32[1], v627.u32[2]);
                            v630.i32[3] = v626.i32[2];
                            *(int16x4_t *)v629.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_n_f32(v629, v1018.f32[0])));
                            *(int16x4_t *)v630.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_n_f32(v630, v1018.f32[0])));
                            *(_WORD *)(v622 - 8) = v629.i16[1];
                            *(_WORD *)uint64_t v622 = v629.i16[2];
                            *(_WORD *)(v622 - 16) = v629.i16[0];
                            *(_WORD *)(v622 + 8) = v629.i16[3];
                            *(_WORD *)(v622 - 6) = v630.i16[1];
                            *(_WORD *)(v622 + 2) = v630.i16[2];
                            *(_WORD *)(v622 + 10) = v630.i16[3];
                            *(_WORD *)(v622 - 14) = v630.i16[0];
                            *(_DWORD *)(v622 - 4) = v627.i32[1];
                            *(_DWORD *)(v622 + 4) = v626.i32[0];
                            *(_DWORD *)(v622 + 12) = v626.i32[3];
                            *v621++ = v574;
                            *v596++ = v981;
                            *v598++ = v625;
                            v622 += 32;
                            v624 -= 4;
                          }
                          while (v624);
                          v556 += v579;
                          __int16 v583 = v999;
                          __int16 v582 = v1000;
                          unint64_t v161 = v1001;
                          uint64_t v569 = v620;
                          uint64_t v572 = v994;
                          if (v578 == v579) {
                            goto LABEL_684;
                          }
                        }
                      }
                      else
                      {
                        float v581 = v1018.f32[0];
                        __int16 v583 = v999;
                        __int16 v582 = v1000;
                        double v211 = v1013;
                        unint64_t v161 = v1001;
                        uint64_t v572 = v994;
                        uint64_t v573 = v997;
                      }
                    }
                    else
                    {
                      unint64_t v579 = 0;
                      int v580 = 0;
                      float v581 = v1018.f32[0];
                      __int16 v583 = v999;
                      __int16 v582 = v1000;
                      double v211 = v1013;
                      unint64_t v161 = v1001;
                      uint64_t v573 = v997;
                    }
                  }
                  else
                  {
                    unint64_t v579 = 0;
                    int v580 = 0;
                    float v581 = v1018.f32[0];
                    __int16 v583 = v999;
                    __int16 v582 = v1000;
                  }
                  uint64_t v675 = v573 + 8 * v556;
                  v676 = &__pd[4 * v556];
                  v677 = (_WORD *)(v1009 + 4 * v556);
                  do
                  {
                    unint64_t v678 = v575 + 12 * v579;
                    float v679 = *(float *)(v678 + 4);
                    *(_WORD *)(v675 - 2) = (int)(float)(*(float *)v678 * v581);
                    *(_WORD *)uint64_t v675 = (int)(float)(v679 * v581);
                    *(_DWORD *)(v675 + 2) = *(_DWORD *)(v678 + 8);
                    *(_DWORD *)(v570 + 4 * v556) = v1025.i32[0];
                    *(v677 - 1) = v582;
                    ++v556;
                    unint64_t v579 = (unsigned __int16)++v580;
                    _WORD *v677 = v583;
                    *(_DWORD *)(v676 - 2) = 939538432;
                    v675 += 8;
                    v676 += 4;
                    v677 += 2;
                  }
                  while (v577 > (unsigned __int16)v580);
                }
                else
                {
                  if (v578 > 0x17)
                  {
                    uint64_t v631 = 8 * v556;
                    unint64_t v632 = v569 + 8 * v556;
                    uint64_t v633 = 8 * (v578 - 1);
                    unint64_t v634 = v632 + v633;
                    unint64_t v635 = v573 + 8 * v556;
                    uint64_t v636 = v569;
                    unint64_t v637 = v635 + v633;
                    uint64_t v638 = 4 * v556;
                    v639 = (int8x16_t *)(v571 + 4 * v556);
                    uint64_t v640 = 4 * (v578 - 1);
                    v641 = (_OWORD *)(v572 + 4 * v556);
                    if (&__pd[4 * v556 + v640] >= &__pd[4 * v556]
                      && (_OWORD *)((char *)v641 + v640) >= v641
                      && v1009 + 4 * v556 + v640 >= (unint64_t)(v1009 + 4 * v556)
                      && &v639->i8[v640] >= (__int8 *)v639
                      && v637 >= v635
                      && v634 >= v632
                      && (unsigned __int16)(v578 - 1) != 0xFFFFLL
                      && (v578 - 1) >> 16 == 0)
                    {
                      int v585 = 0;
                      unint64_t v584 = 0;
                      unint64_t v649 = v636 + 8 * (v556 + v578);
                      unint64_t v650 = v570 + v638;
                      uint64_t v651 = 4 * (v556 + v578);
                      unint64_t v652 = v570 + v651;
                      unint64_t v653 = v575 + 12 * v578;
                      unint64_t v654 = v572 + v651;
                      BOOL v656 = v990 + v631 < v653 && v575 < v649;
                      BOOL v658 = v650 < v653 && v575 < v652;
                      unint64_t v659 = v571 + v651;
                      BOOL v661 = (unint64_t)v639 < v654 && (unint64_t)v641 < v659;
                      BOOL v662 = v650 >= v649 || v990 + v631 >= v652;
                      uint64_t v569 = v636;
                      if (v662)
                      {
                        uint64_t v572 = v994;
                        uint64_t v573 = v997;
                        if (v656 || v658 || v661)
                        {
                          float v586 = v1018.f32[0];
                          __int16 v588 = v999;
                          __int16 v587 = v1000;
                          double v211 = v1013;
                          unint64_t v161 = v1001;
                        }
                        else
                        {
                          unint64_t v584 = v578 & 0xFFFFFFFFFFFFFFFCLL;
                          int v585 = v578 & 0xFFFFFFFC;
                          v663 = (float32x4_t *)(v570 + v638);
                          uint64_t v664 = v986 + v631;
                          v665 = (const float *)v568[6 * v567];
                          unint64_t v666 = v578 & 0xFFFFFFFFFFFFFFFCLL;
                          float v586 = v1018.f32[0];
                          *(void *)&long long v667 = 0x3800380038003800;
                          *((void *)&v667 + 1) = 0x3800380038003800;
                          double v211 = v1013;
                          do
                          {
                            float32x4x3_t v1102 = vld3q_f32(v665);
                            v665 += 12;
                            int16x4_t v668 = vmovn_s32(vcvtq_s32_f32(vmulq_n_f32(v1102.val[0], v1018.f32[0])));
                            *(_WORD *)(v664 - 8) = v668.i16[1];
                            *(_WORD *)uint64_t v664 = v668.i16[2];
                            *(_WORD *)(v664 + 8) = v668.i16[3];
                            *(_WORD *)(v664 - 16) = v668.i16[0];
                            int16x4_t v669 = vmovn_s32(vcvtq_s32_f32(vmulq_n_f32(v1102.val[1], v1018.f32[0])));
                            *(_WORD *)(v664 - 14) = v669.i16[0];
                            *(_WORD *)(v664 - 6) = v669.i16[1];
                            *(_WORD *)(v664 + 2) = v669.i16[2];
                            *(_WORD *)(v664 + 10) = v669.i16[3];
                            *(_DWORD *)(v664 - 12) = v1102.val[2].i32[0];
                            *(_DWORD *)(v664 - 4) = v1102.val[2].i32[1];
                            *(_DWORD *)(v664 + 4) = v1102.val[2].i32[2];
                            *(_DWORD *)(v664 + 12) = v1102.val[2].i32[3];
                            *v663++ = v1102.val[2];
                            v664 += 32;
                            *v639++ = v981;
                            *v641++ = v667;
                            v666 -= 4;
                          }
                          while (v666);
                          v556 += v584;
                          __int16 v588 = v999;
                          __int16 v587 = v1000;
                          unint64_t v161 = v1001;
                          if (v578 == v584) {
                            goto LABEL_684;
                          }
                        }
                      }
                      else
                      {
                        float v586 = v1018.f32[0];
                        __int16 v588 = v999;
                        __int16 v587 = v1000;
                        double v211 = v1013;
                        unint64_t v161 = v1001;
                        uint64_t v572 = v994;
                        uint64_t v573 = v997;
                      }
                    }
                    else
                    {
                      unint64_t v584 = 0;
                      int v585 = 0;
                      float v586 = v1018.f32[0];
                      __int16 v588 = v999;
                      __int16 v587 = v1000;
                      double v211 = v1013;
                      unint64_t v161 = v1001;
                      uint64_t v569 = v636;
                      uint64_t v573 = v997;
                    }
                  }
                  else
                  {
                    unint64_t v584 = 0;
                    int v585 = 0;
                    float v586 = v1018.f32[0];
                    __int16 v588 = v999;
                    __int16 v587 = v1000;
                  }
                  uint64_t v670 = v573 + 8 * v556;
                  v671 = &__pd[4 * v556];
                  v672 = (_WORD *)(v1009 + 4 * v556);
                  do
                  {
                    unint64_t v673 = v575 + 12 * v584;
                    float v674 = *(float *)(v673 + 4);
                    *(_WORD *)(v670 - 2) = (int)(float)(*(float *)v673 * v586);
                    *(_WORD *)uint64_t v670 = (int)(float)(v674 * v586);
                    *(_DWORD *)(v670 + 2) = *(_DWORD *)(v673 + 8);
                    *(_DWORD *)(v570 + 4 * v556) = *(_DWORD *)(v673 + 8);
                    *(v672 - 1) = v587;
                    ++v556;
                    unint64_t v584 = (unsigned __int16)++v585;
                    _WORD *v672 = v588;
                    *(_DWORD *)(v671 - 2) = 939538432;
                    v670 += 8;
                    v671 += 4;
                    v672 += 2;
                  }
                  while (v577 > (unsigned __int16)v585);
                }
              }
LABEL_684:
              ++v567;
              uint64_t v71 = (uint64_t)v1010;
              if (v567 >= (unsigned __int16)*v1020)
              {
                int v555 = v976;
                break;
              }
            }
          }
          uint64_t v1049 = v556;
          if (v555)
          {
            v680 = (char *)v1045;
            uint64_t v681 = (char *)v1046 - (unsigned char *)v1045;
            if (v1046 != v1045)
            {
              uint64_t v682 = v681 >> 1;
              uint64_t v683 = v1075;
              if ((unint64_t)v681 >= 0x20
                && ((unint64_t v684 = v1075 + 2 * v535, v684 >= (unint64_t)v1045 + (v681 & 0xFFFFFFFFFFFFFFFELL))
                 || (unint64_t)v1045 >= v684 + (v681 & 0xFFFFFFFFFFFFFFFELL)))
              {
                unint64_t v710 = v682 & 0xFFFFFFFFFFFFFFF0;
                int16x8_t v711 = vdupq_n_s16(v175);
                uint64_t v685 = ((unint64_t)v681 >> 1) & 0xF;
                v712 = (int16x8_t *)((char *)v1045 + 2 * v682 - 16);
                v713 = (int16x8_t *)(v1075 + 2 * v535 + 16);
                unint64_t v714 = v682 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  int8x16_t v715 = (int8x16_t)vrev64q_s16(*v712);
                  int8x16_t v716 = (int8x16_t)vrev64q_s16(v712[-1]);
                  v713[-1] = vaddq_s16((int16x8_t)vextq_s8(v715, v715, 8uLL), v711);
                  int16x8_t *v713 = vaddq_s16((int16x8_t)vextq_s8(v716, v716, 8uLL), v711);
                  v712 -= 2;
                  v713 += 2;
                  v714 -= 16;
                }
                while (v714);
                v535 += v710;
                if (v682 == v710) {
                  goto LABEL_844;
                }
              }
              else
              {
                uint64_t v685 = v681 >> 1;
              }
              v686 = v680 - 2;
              do
                *(_WORD *)(v683 + 2 * v535++) = *(_WORD *)&v686[2 * v685--] + v175;
              while (v685);
            }
          }
          else
          {
            *(void *)buf = &off_1EF57A730;
            *(void *)&buf[8] = &v1040;
            *(void *)&buf[24] = buf;
            if ((unint64_t)(v1041 - (unsigned char *)v1040) >= 0x18)
            {
              uint64_t v688 = (v1041 - (unsigned char *)v1040) >> 3;
              if (*(void *)v1040 == *((void *)v1040 + v688 - 1)) {
                uint64_t v687 = v688 - 1;
              }
              else {
                uint64_t v687 = (v1041 - (unsigned char *)v1040) >> 3;
              }
            }
            else
            {
              uint64_t v687 = 0;
            }
            if (*(char **)&v211 == v1022)
            {
              uint64_t v689 = 0;
            }
            else
            {
              uint64_t v689 = 0;
              double v690 = v211;
              v691 = *(char **)&v211;
              do
              {
                v694 = *(void **)v691;
                uint64_t v693 = *((void *)v691 + 1);
                if (*(void *)v691 != v693)
                {
                  *(void *)buf = &off_1EF57A730;
                  *(double *)&buf[8] = v690;
                  *(void *)&buf[24] = buf;
                  uint64_t v695 = v693 - (void)v694;
                  v1098 = (void **)&v1095;
                  double v1095 = COERCE_DOUBLE(&off_1EF57A730);
                  double v1096 = v690;
                  if ((unint64_t)v695 >= 0x18)
                  {
                    if (*v694 == v694[(v695 >> 3) - 1]) {
                      uint64_t v692 = (v695 >> 3) - 1;
                    }
                    else {
                      uint64_t v692 = v695 >> 3;
                    }
                  }
                  else
                  {
                    uint64_t v692 = 0;
                  }
                  v687 += v692;
                  ++v689;
                }
                *(void *)&v690 += 24;
                v691 += 24;
              }
              while (v691 != v1022);
            }
            uint64_t v696 = v687 + 2 * v689;
            if (v696 == 2) {
              goto LABEL_844;
            }
            unint64_t v697 = 3 * (v696 - 2);
            uint64_t v698 = v1075;
            if (v697 >= 0x10)
            {
              unint64_t v699 = v697 & 0xFFFFFFFFFFFFFFF0;
              int16x8_t v700 = vdupq_n_s16(v175);
              v701 = (int16x8_t *)(v1075 + 2 * v535 + 16);
              unint64_t v702 = v697 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v701[-1] = v700;
                int16x8_t *v701 = v700;
                v701 += 2;
                v702 -= 16;
              }
              while (v702);
              v535 += v699;
              if (v697 == v699) {
                goto LABEL_844;
              }
            }
            else
            {
              unint64_t v699 = 0;
            }
            uint64_t v703 = v699 - 3 * v687 - 6 * v689 + 6;
            do
            {
              *(_WORD *)(v698 + 2 * v535++) = v175;
              _CF = __CFADD__(v703++, 1);
            }
            while (!_CF);
          }
LABEL_844:
          uint64_t v1050 = v535;
LABEL_845:
          if ((float)(*(float *)(v991 + 20 * v993 + 4) - *(float *)(v991 + 20 * v993 + 8)) > 0.0)
          {
            if (v555)
            {
              md::DaVinciGroundTileData::_appendFaces(v71, (uint64_t)v998, (uint64_t *)&v1028, (uint64_t)&v1071, (uint64_t)&v1066, (uint64_t)&v1061, (uint64_t)&v1056, (uint64_t)&v1051, v1025.f32[0], v1018.f32[0], &v1050, &v1049, v1011, (int *)&v1048, (uint64_t)a8);
              uint64_t v71 = (uint64_t)v1010;
              if (*v1020)
              {
                unint64_t v704 = 0;
                v705 = (uint64_t *)v1089[0];
                do
                {
                  md::DaVinciGroundTileData::_appendFaces((uint64_t)v1010, (uint64_t)v998, v705, (uint64_t)&v1071, (uint64_t)&v1066, (uint64_t)&v1061, (uint64_t)&v1056, (uint64_t)&v1051, v1025.f32[0], v1018.f32[0], &v1050, &v1049, v1011, (int *)&v1048, (uint64_t)a8);
                  ++v704;
                  v705 += 6;
                }
                while (v704 < (unsigned __int16)*v1020);
              }
              goto LABEL_914;
            }
            v706 = (char *)v1029[1];
            float v1014 = _S14;
            float v1012 = _S15;
            if (v1029[1] == *(void **)v1030)
            {
              uint64_t v708 = 0;
              goto LABEL_882;
            }
            unint64_t v707 = *(void *)v1030 - (unint64_t)v1029[1];
            if (*(void *)v1030 - (unint64_t)v1029[1] >= 8)
            {
              if (v707 >= 0x20)
              {
                int64x2_t v717 = 0uLL;
                unint64_t v709 = v707 & 0xFFFFFFFFFFFFFFE0;
                int64x2_t v718 = 0uLL;
                v719 = (int8x16_t *)((char *)v1029[1] + 16);
                int64x2_t v720 = 0uLL;
                unint64_t v721 = v707 & 0xFFFFFFFFFFFFFFE0;
                int64x2_t v722 = 0uLL;
                int64x2_t v723 = 0uLL;
                int64x2_t v724 = 0uLL;
                int64x2_t v725 = 0uLL;
                int64x2_t v726 = 0uLL;
                int64x2_t v727 = 0uLL;
                int64x2_t v728 = 0uLL;
                int64x2_t v729 = 0uLL;
                int64x2_t v730 = 0uLL;
                int64x2_t v731 = 0uLL;
                int64x2_t v732 = 0uLL;
                int64x2_t v733 = 0uLL;
                int64x2_t v734 = 0uLL;
                do
                {
                  v735.i64[0] = 0x303030303030303;
                  v735.i64[1] = 0x303030303030303;
                  int8x16_t v736 = vandq_s8(*v719, v735);
                  uint8x16_t v737 = (uint8x16_t)vceqzq_s8(vandq_s8(v719[-1], v735));
                  uint16x8_t v738 = vmovl_u8(*(uint8x8_t *)v737.i8);
                  uint32x4_t v739 = vmovl_u16(*(uint16x4_t *)v738.i8);
                  v740.i64[0] = v739.u32[0];
                  v740.i64[1] = v739.u32[1];
                  int8x16_t v741 = (int8x16_t)vdupq_n_s64(1uLL);
                  int64x2_t v1026 = (int64x2_t)vandq_s8(v740, v741);
                  v740.i64[0] = v739.u32[2];
                  v740.i64[1] = v739.u32[3];
                  int64x2_t v742 = (int64x2_t)vandq_s8(v740, v741);
                  uint32x4_t v743 = vmovl_high_u16(v738);
                  v740.i64[0] = v743.u32[0];
                  v740.i64[1] = v743.u32[1];
                  int64x2_t v744 = (int64x2_t)vandq_s8(v740, v741);
                  uint16x8_t v745 = vmovl_high_u8(v737);
                  uint32x4_t v746 = vmovl_u16(*(uint16x4_t *)v745.i8);
                  v740.i64[0] = v746.u32[0];
                  v740.i64[1] = v746.u32[1];
                  int64x2_t v747 = (int64x2_t)vandq_s8(v740, v741);
                  v740.i64[0] = v743.u32[2];
                  v740.i64[1] = v743.u32[3];
                  int64x2_t v748 = (int64x2_t)vandq_s8(v740, v741);
                  v740.i64[0] = v746.u32[2];
                  v740.i64[1] = v746.u32[3];
                  int64x2_t v749 = (int64x2_t)vandq_s8(v740, v741);
                  uint32x4_t v750 = vmovl_high_u16(v745);
                  v740.i64[0] = v750.u32[0];
                  v740.i64[1] = v750.u32[1];
                  int64x2_t v751 = (int64x2_t)vandq_s8(v740, v741);
                  v740.i64[0] = v750.u32[2];
                  v740.i64[1] = v750.u32[3];
                  int64x2_t v752 = (int64x2_t)vandq_s8(v740, v741);
                  uint8x16_t v753 = (uint8x16_t)vceqzq_s8(v736);
                  uint16x8_t v754 = vmovl_u8(*(uint8x8_t *)v753.i8);
                  uint32x4_t v755 = vmovl_u16(*(uint16x4_t *)v754.i8);
                  v740.i64[0] = v755.u32[0];
                  v740.i64[1] = v755.u32[1];
                  int64x2_t v756 = (int64x2_t)vandq_s8(v740, v741);
                  v740.i64[0] = v755.u32[2];
                  v740.i64[1] = v755.u32[3];
                  int64x2_t v757 = (int64x2_t)vandq_s8(v740, v741);
                  uint32x4_t v758 = vmovl_high_u16(v754);
                  v740.i64[0] = v758.u32[0];
                  v740.i64[1] = v758.u32[1];
                  int64x2_t v759 = (int64x2_t)vandq_s8(v740, v741);
                  uint16x8_t v760 = vmovl_high_u8(v753);
                  uint32x4_t v761 = vmovl_u16(*(uint16x4_t *)v760.i8);
                  v740.i64[0] = v761.u32[0];
                  v740.i64[1] = v761.u32[1];
                  int64x2_t v762 = (int64x2_t)vandq_s8(v740, v741);
                  v740.i64[0] = v758.u32[2];
                  v740.i64[1] = v758.u32[3];
                  int64x2_t v763 = (int64x2_t)vandq_s8(v740, v741);
                  v740.i64[0] = v761.u32[2];
                  v740.i64[1] = v761.u32[3];
                  int64x2_t v764 = (int64x2_t)vandq_s8(v740, v741);
                  uint32x4_t v765 = vmovl_high_u16(v760);
                  v740.i64[0] = v765.u32[0];
                  v740.i64[1] = v765.u32[1];
                  int64x2_t v766 = (int64x2_t)vandq_s8(v740, v741);
                  v740.i64[0] = v765.u32[2];
                  v740.i64[1] = v765.u32[3];
                  int64x2_t v726 = vaddq_s64(v726, v752);
                  int64x2_t v725 = vaddq_s64(v725, v751);
                  int64x2_t v724 = vaddq_s64(v724, v749);
                  int64x2_t v722 = vaddq_s64(v722, v748);
                  int64x2_t v723 = vaddq_s64(v723, v747);
                  int64x2_t v720 = vaddq_s64(v720, v744);
                  int64x2_t v718 = vaddq_s64(v718, v742);
                  int64x2_t v717 = vaddq_s64(v717, v1026);
                  int64x2_t v734 = vaddq_s64(v734, (int64x2_t)vandq_s8(v740, v741));
                  int64x2_t v733 = vaddq_s64(v733, v766);
                  int64x2_t v732 = vaddq_s64(v732, v764);
                  int64x2_t v730 = vaddq_s64(v730, v763);
                  int64x2_t v731 = vaddq_s64(v731, v762);
                  int64x2_t v729 = vaddq_s64(v729, v759);
                  int64x2_t v728 = vaddq_s64(v728, v757);
                  int64x2_t v727 = vaddq_s64(v727, v756);
                  v719 += 2;
                  v721 -= 32;
                }
                while (v721);
                uint64_t v708 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v727, v717), vaddq_s64(v731, v723)), vaddq_s64(vaddq_s64(v729, v720), vaddq_s64(v733, v725))), vaddq_s64(vaddq_s64(vaddq_s64(v728, v718), vaddq_s64(v732, v724)), vaddq_s64(vaddq_s64(v730, v722), vaddq_s64(v734, v726)))));
                if (v707 == v709)
                {
                  double v83 = 1.0;
                  double v84 = -1.0;
                  _S14 = v1014;
                  _S15 = v1012;
                  goto LABEL_882;
                }
                double v83 = 1.0;
                double v84 = -1.0;
                _S14 = v1014;
                _S15 = v1012;
                if ((v707 & 0x18) == 0)
                {
                  v706 = (char *)v1029[1] + v709;
                  goto LABEL_879;
                }
              }
              else
              {
                uint64_t v708 = 0;
                unint64_t v709 = 0;
              }
              unint64_t v775 = v707 & 0xFFFFFFFFFFFFFFF8;
              int64x2_t v776 = 0uLL;
              int64x2_t v777 = (int64x2_t)(unint64_t)v708;
              unint64_t v778 = v709 - (v707 & 0xFFFFFFFFFFFFFFF8);
              v779 = (int8x8_t *)((char *)v1029[1] + v709);
              int64x2_t v780 = 0uLL;
              int64x2_t v781 = 0uLL;
              do
              {
                int8x8_t v782 = *v779++;
                uint16x8_t v783 = vmovl_u8((uint8x8_t)vceqz_s8(vand_s8(v782, (int8x8_t)0x303030303030303)));
                uint32x4_t v784 = vmovl_u16(*(uint16x4_t *)v783.i8);
                v785.i64[0] = v784.u32[0];
                v785.i64[1] = v784.u32[1];
                int8x16_t v786 = (int8x16_t)vdupq_n_s64(1uLL);
                int64x2_t v787 = (int64x2_t)vandq_s8(v785, v786);
                v785.i64[0] = v784.u32[2];
                v785.i64[1] = v784.u32[3];
                int64x2_t v788 = (int64x2_t)vandq_s8(v785, v786);
                uint32x4_t v789 = vmovl_high_u16(v783);
                v785.i64[0] = v789.u32[0];
                v785.i64[1] = v789.u32[1];
                int64x2_t v790 = (int64x2_t)vandq_s8(v785, v786);
                v785.i64[0] = v789.u32[2];
                v785.i64[1] = v789.u32[3];
                int64x2_t v781 = vaddq_s64(v781, (int64x2_t)vandq_s8(v785, v786));
                int64x2_t v780 = vaddq_s64(v780, v790);
                int64x2_t v776 = vaddq_s64(v776, v788);
                int64x2_t v777 = vaddq_s64(v777, v787);
                v778 += 8;
              }
              while (v778);
              uint64_t v708 = vaddvq_s64(vaddq_s64(vaddq_s64(v777, v780), vaddq_s64(v776, v781)));
              if (v707 != v775)
              {
                v706 = (char *)v1029[1] + v775;
                goto LABEL_879;
              }
            }
            else
            {
              uint64_t v708 = 0;
              do
              {
LABEL_879:
                char v791 = *v706++;
                if ((v791 & 3) == 0) {
                  ++v708;
                }
              }
              while (v706 != *(char **)v1030);
            }
LABEL_882:
            unint64_t v792 = 6 * v161;
            uint64_t v793 = 2 * (v708 + v161);
            if (*v1020)
            {
              for (uint64_t j = 0; j != (unsigned __int16)*v1020; ++j)
              {
                v797 = (char *)v1089[0] + 48 * j;
                v798 = (int8x16_t *)v797[3];
                v799 = (int8x16_t *)v797[4];
                if (v798 == v799)
                {
                  uint64_t v795 = 0;
                }
                else
                {
                  unint64_t v800 = (char *)v799 - (char *)v798;
                  if ((unint64_t)((char *)v799 - (char *)v798) < 8)
                  {
                    uint64_t v795 = 0;
                    goto LABEL_901;
                  }
                  if (v800 >= 0x20)
                  {
                    int64x2_t v802 = 0uLL;
                    unint64_t v801 = v800 & 0xFFFFFFFFFFFFFFE0;
                    int64x2_t v803 = 0uLL;
                    v804 = v798 + 1;
                    int64x2_t v805 = 0uLL;
                    unint64_t v806 = v800 & 0xFFFFFFFFFFFFFFE0;
                    int64x2_t v807 = 0uLL;
                    int64x2_t v808 = 0uLL;
                    int64x2_t v809 = 0uLL;
                    int64x2_t v810 = 0uLL;
                    int64x2_t v811 = 0uLL;
                    int64x2_t v812 = 0uLL;
                    int64x2_t v813 = 0uLL;
                    int64x2_t v814 = 0uLL;
                    int64x2_t v815 = 0uLL;
                    int64x2_t v816 = 0uLL;
                    int64x2_t v817 = 0uLL;
                    int64x2_t v818 = 0uLL;
                    int64x2_t v819 = 0uLL;
                    do
                    {
                      v820.i64[0] = 0x303030303030303;
                      v820.i64[1] = 0x303030303030303;
                      int8x16_t v821 = vandq_s8(*v804, v820);
                      uint8x16_t v822 = (uint8x16_t)vceqzq_s8(vandq_s8(v804[-1], v820));
                      uint16x8_t v823 = vmovl_u8(*(uint8x8_t *)v822.i8);
                      uint32x4_t v824 = vmovl_u16(*(uint16x4_t *)v823.i8);
                      v825.i64[0] = v824.u32[0];
                      v825.i64[1] = v824.u32[1];
                      int8x16_t v826 = (int8x16_t)vdupq_n_s64(1uLL);
                      int64x2_t v1027 = (int64x2_t)vandq_s8(v825, v826);
                      v825.i64[0] = v824.u32[2];
                      v825.i64[1] = v824.u32[3];
                      int64x2_t v827 = (int64x2_t)vandq_s8(v825, v826);
                      uint32x4_t v828 = vmovl_high_u16(v823);
                      v825.i64[0] = v828.u32[0];
                      v825.i64[1] = v828.u32[1];
                      int64x2_t v829 = (int64x2_t)vandq_s8(v825, v826);
                      uint16x8_t v830 = vmovl_high_u8(v822);
                      uint32x4_t v831 = vmovl_u16(*(uint16x4_t *)v830.i8);
                      v825.i64[0] = v831.u32[0];
                      v825.i64[1] = v831.u32[1];
                      int64x2_t v832 = (int64x2_t)vandq_s8(v825, v826);
                      v825.i64[0] = v828.u32[2];
                      v825.i64[1] = v828.u32[3];
                      int64x2_t v833 = (int64x2_t)vandq_s8(v825, v826);
                      v825.i64[0] = v831.u32[2];
                      v825.i64[1] = v831.u32[3];
                      int64x2_t v834 = (int64x2_t)vandq_s8(v825, v826);
                      uint32x4_t v835 = vmovl_high_u16(v830);
                      v825.i64[0] = v835.u32[0];
                      v825.i64[1] = v835.u32[1];
                      int64x2_t v836 = (int64x2_t)vandq_s8(v825, v826);
                      v825.i64[0] = v835.u32[2];
                      v825.i64[1] = v835.u32[3];
                      int64x2_t v837 = (int64x2_t)vandq_s8(v825, v826);
                      uint8x16_t v838 = (uint8x16_t)vceqzq_s8(v821);
                      uint16x8_t v839 = vmovl_u8(*(uint8x8_t *)v838.i8);
                      uint32x4_t v840 = vmovl_u16(*(uint16x4_t *)v839.i8);
                      v825.i64[0] = v840.u32[0];
                      v825.i64[1] = v840.u32[1];
                      int64x2_t v841 = (int64x2_t)vandq_s8(v825, v826);
                      v825.i64[0] = v840.u32[2];
                      v825.i64[1] = v840.u32[3];
                      int64x2_t v842 = (int64x2_t)vandq_s8(v825, v826);
                      uint32x4_t v843 = vmovl_high_u16(v839);
                      v825.i64[0] = v843.u32[0];
                      v825.i64[1] = v843.u32[1];
                      int64x2_t v844 = (int64x2_t)vandq_s8(v825, v826);
                      uint16x8_t v845 = vmovl_high_u8(v838);
                      uint32x4_t v846 = vmovl_u16(*(uint16x4_t *)v845.i8);
                      v825.i64[0] = v846.u32[0];
                      v825.i64[1] = v846.u32[1];
                      int64x2_t v847 = (int64x2_t)vandq_s8(v825, v826);
                      v825.i64[0] = v843.u32[2];
                      v825.i64[1] = v843.u32[3];
                      int64x2_t v848 = (int64x2_t)vandq_s8(v825, v826);
                      v825.i64[0] = v846.u32[2];
                      v825.i64[1] = v846.u32[3];
                      int64x2_t v849 = (int64x2_t)vandq_s8(v825, v826);
                      uint32x4_t v850 = vmovl_high_u16(v845);
                      v825.i64[0] = v850.u32[0];
                      v825.i64[1] = v850.u32[1];
                      int64x2_t v851 = (int64x2_t)vandq_s8(v825, v826);
                      v825.i64[0] = v850.u32[2];
                      v825.i64[1] = v850.u32[3];
                      int64x2_t v811 = vaddq_s64(v811, v837);
                      int64x2_t v810 = vaddq_s64(v810, v836);
                      int64x2_t v809 = vaddq_s64(v809, v834);
                      int64x2_t v807 = vaddq_s64(v807, v833);
                      int64x2_t v808 = vaddq_s64(v808, v832);
                      int64x2_t v805 = vaddq_s64(v805, v829);
                      int64x2_t v803 = vaddq_s64(v803, v827);
                      int64x2_t v802 = vaddq_s64(v802, v1027);
                      int64x2_t v819 = vaddq_s64(v819, (int64x2_t)vandq_s8(v825, v826));
                      int64x2_t v818 = vaddq_s64(v818, v851);
                      int64x2_t v817 = vaddq_s64(v817, v849);
                      int64x2_t v815 = vaddq_s64(v815, v848);
                      int64x2_t v816 = vaddq_s64(v816, v847);
                      int64x2_t v814 = vaddq_s64(v814, v844);
                      int64x2_t v813 = vaddq_s64(v813, v842);
                      int64x2_t v812 = vaddq_s64(v812, v841);
                      v804 += 2;
                      v806 -= 32;
                    }
                    while (v806);
                    uint64_t v795 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v812, v802), vaddq_s64(v816, v808)), vaddq_s64(vaddq_s64(v814, v805), vaddq_s64(v818, v810))), vaddq_s64(vaddq_s64(vaddq_s64(v813, v803), vaddq_s64(v817, v809)), vaddq_s64(vaddq_s64(v815, v807), vaddq_s64(v819, v811)))));
                    if (v800 == v801)
                    {
                      double v83 = 1.0;
                      double v84 = -1.0;
                      _S14 = v1014;
                      _S15 = v1012;
                      goto LABEL_885;
                    }
                    double v83 = 1.0;
                    double v84 = -1.0;
                    _S14 = v1014;
                    _S15 = v1012;
                    if ((v800 & 0x18) == 0)
                    {
                      v798 = (int8x16_t *)((char *)v798 + v801);
                      do
                      {
LABEL_901:
                        __int8 v868 = v798->i8[0];
                        v798 = (int8x16_t *)((char *)v798 + 1);
                        if ((v868 & 3) == 0) {
                          ++v795;
                        }
                      }
                      while (v798 != v799);
                      goto LABEL_885;
                    }
                  }
                  else
                  {
                    uint64_t v795 = 0;
                    unint64_t v801 = 0;
                  }
                  unint64_t v852 = v800 & 0xFFFFFFFFFFFFFFF8;
                  int64x2_t v853 = 0uLL;
                  int64x2_t v854 = (int64x2_t)(unint64_t)v795;
                  unint64_t v855 = v801 - (v800 & 0xFFFFFFFFFFFFFFF8);
                  v856 = (int8x8_t *)&v798->i8[v801];
                  int64x2_t v857 = 0uLL;
                  int64x2_t v858 = 0uLL;
                  do
                  {
                    int8x8_t v859 = *v856++;
                    uint16x8_t v860 = vmovl_u8((uint8x8_t)vceqz_s8(vand_s8(v859, (int8x8_t)0x303030303030303)));
                    uint32x4_t v861 = vmovl_u16(*(uint16x4_t *)v860.i8);
                    v862.i64[0] = v861.u32[0];
                    v862.i64[1] = v861.u32[1];
                    int8x16_t v863 = (int8x16_t)vdupq_n_s64(1uLL);
                    int64x2_t v864 = (int64x2_t)vandq_s8(v862, v863);
                    v862.i64[0] = v861.u32[2];
                    v862.i64[1] = v861.u32[3];
                    int64x2_t v865 = (int64x2_t)vandq_s8(v862, v863);
                    uint32x4_t v866 = vmovl_high_u16(v860);
                    v862.i64[0] = v866.u32[0];
                    v862.i64[1] = v866.u32[1];
                    int64x2_t v867 = (int64x2_t)vandq_s8(v862, v863);
                    v862.i64[0] = v866.u32[2];
                    v862.i64[1] = v866.u32[3];
                    int64x2_t v858 = vaddq_s64(v858, (int64x2_t)vandq_s8(v862, v863));
                    int64x2_t v857 = vaddq_s64(v857, v867);
                    int64x2_t v853 = vaddq_s64(v853, v865);
                    int64x2_t v854 = vaddq_s64(v854, v864);
                    v855 += 8;
                  }
                  while (v855);
                  uint64_t v795 = vaddvq_s64(vaddq_s64(vaddq_s64(v854, v857), vaddq_s64(v853, v858)));
                  if (v800 != v852)
                  {
                    v798 = (int8x16_t *)((char *)v798 + v852);
                    goto LABEL_901;
                  }
                }
LABEL_885:
                uint64_t v796 = v797[1] - *v797;
                v792 += v796 >> 1;
                v793 += 2 * (v795 - 0x5555555555555555 * (v796 >> 2));
              }
            }
            uint64_t v1049 = v793 + v556;
            if (v792)
            {
              uint64_t v869 = v1075;
              if (v792 < 0x10)
              {
                unint64_t v870 = 0;
                goto LABEL_911;
              }
              unint64_t v870 = v792 & 0xFFFFFFFFFFFFFFF0;
              int16x8_t v871 = vdupq_n_s16(v556);
              v872 = (int16x8_t *)(v1075 + 2 * v535 + 16);
              unint64_t v873 = v792 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v872[-1] = v871;
                int16x8_t *v872 = v871;
                v872 += 2;
                v873 -= 16;
              }
              while (v873);
              v535 += v870;
              if (v792 != v870)
              {
LABEL_911:
                unint64_t v874 = v792 - v870;
                do
                {
                  *(_WORD *)(v869 + 2 * v535++) = v556;
                  --v874;
                }
                while (v874);
              }
            }
            uint64_t v1050 = v535;
          }
LABEL_914:
          if (v211 != 0.0)
          {
            if (v1022 != *(char **)&v211)
            {
              v875 = v1022;
              do
              {
                v877 = (void *)*((void *)v875 - 3);
                v875 -= 24;
                v876 = v877;
                if (v877)
                {
                  *((void *)v1022 - 2) = v876;
                  operator delete(v876);
                }
                v1022 = v875;
              }
              while (v875 != *(char **)&v211);
            }
            operator delete(*(void **)&v211);
          }
          if (v1040)
          {
            v1041 = (char *)v1040;
            operator delete(v1040);
          }
          if (v1045) {
            operator delete(v1045);
          }
          v878 = (char *)v1089[0];
          if (v1089[0])
          {
            for (k = (char *)v1089[1]; k != v878; k -= 48)
            {
              v880 = (void *)*((void *)k - 3);
              if (v880)
              {
                *((void *)k - 2) = v880;
                operator delete(v880);
              }
              v881 = (void *)*((void *)k - 6);
              if (v881)
              {
                *((void *)k - 5) = v881;
                operator delete(v881);
              }
            }
            operator delete(v878);
          }
          if (v1029[1]) {
            operator delete(v1029[1]);
          }
          if ((void)v111) {
            operator delete((void *)v111);
          }
          if (++v993 >= (unint64_t)*(unsigned __int16 *)(v983 + 34))
          {
            uint64_t v882 = v1050;
            uint64_t v93 = v967;
            goto LABEL_940;
          }
        }
      }
      v988.i64[0] = 0x80000000800000;
      long long v987 = xmmword_1A28FC710;
      uint64_t v882 = v1050;
LABEL_940:
      uint64_t v883 = *(void *)(v71 + 960);
      uint64_t v884 = v71;
      unint64_t v885 = *(void *)(v71 + 1032);
      unint64_t v886 = *(void *)(v884 + 1040);
      if (v885 < v886)
      {
        uint64_t v887 = *(void *)(v883 - 16);
        v888 = *(std::__shared_weak_count **)(v883 - 8);
        if (v888)
        {
          atomic_fetch_add_explicit(&v888->__shared_owners_, 1uLL, memory_order_relaxed);
          *(void *)unint64_t v885 = v887;
          *(void *)(v885 + 8) = v888;
          atomic_fetch_add_explicit(&v888->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          *(void *)unint64_t v885 = v887;
          *(void *)(v885 + 8) = 0;
        }
        v895 = a3;
        *(void *)(v885 + 16) = v93;
        *(void *)(v885 + 24) = v882;
        *(unsigned char *)(v885 + 32) = 3;
        *(_OWORD *)(v885 + 36) = v987;
        *(void *)(v885 + 52) = v988.i64[0];
        *(_WORD *)(v885 + 60) = 257;
        *(void *)(v885 + 64) = 0;
        *(void *)(v885 + 72) = 0;
        if (v888 && !atomic_fetch_add(&v888->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v888->__on_zero_shared)(v888);
          std::__shared_weak_count::__release_weak(v888);
        }
        v896 = (char *)(v885 + 80);
        v897 = v1010;
        goto LABEL_980;
      }
      uint64_t v889 = *(void *)(v884 + 1024);
      unint64_t v890 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v885 - v889) >> 4);
      unint64_t v891 = v890 + 1;
      if (v890 + 1 > 0x333333333333333) {
        abort();
      }
      unint64_t v892 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v886 - v889) >> 4);
      if (2 * v892 > v891) {
        unint64_t v891 = 2 * v892;
      }
      if (v892 >= 0x199999999999999) {
        unint64_t v893 = 0x333333333333333;
      }
      else {
        unint64_t v893 = v891;
      }
      if (v893)
      {
        if (v893 > 0x333333333333333) {
          goto LABEL_1090;
        }
        v894 = (char *)operator new(80 * v893);
      }
      else
      {
        v894 = 0;
      }
      v898 = &v894[80 * v890];
      uint64_t v899 = *(void *)(v883 - 16);
      v900 = *(std::__shared_weak_count **)(v883 - 8);
      if (v900)
      {
        atomic_fetch_add_explicit(&v900->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)v898 = v899;
        *((void *)v898 + 1) = v900;
        atomic_fetch_add_explicit(&v900->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *(void *)v898 = v899;
        *((void *)v898 + 1) = 0;
      }
      v901 = &v894[80 * v890];
      *((void *)v901 + 2) = v93;
      *((void *)v901 + 3) = v882;
      v901[32] = 3;
      *(_OWORD *)(v901 + 36) = v987;
      *(void *)(v901 + 52) = v988.i64[0];
      *((_WORD *)v901 + 30) = 257;
      *((void *)v901 + 8) = 0;
      *((void *)v901 + 9) = 0;
      if (v900 && !atomic_fetch_add(&v900->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v900->__on_zero_shared)(v900);
        std::__shared_weak_count::__release_weak(v900);
      }
      v902 = &v894[80 * v893];
      v896 = v898 + 80;
      v903 = (char *)v1010[129];
      v904 = (char *)v1010[128];
      if (v903 == v904)
      {
        v1010[128] = v898;
        v1010[129] = v896;
        v1010[130] = v902;
        v895 = a3;
        v897 = v1010;
        if (!v903) {
          goto LABEL_980;
        }
        goto LABEL_979;
      }
      v895 = a3;
      do
      {
        long long v905 = *((_OWORD *)v903 - 5);
        v903 -= 80;
        *((_OWORD *)v898 - 5) = v905;
        v898 -= 80;
        *(void *)v903 = 0;
        *((void *)v903 + 1) = 0;
        long long v906 = *((_OWORD *)v903 + 1);
        long long v907 = *((_OWORD *)v903 + 2);
        *(_OWORD *)(v898 + 46) = *(_OWORD *)(v903 + 46);
        *((_OWORD *)v898 + 1) = v906;
        *((_OWORD *)v898 + 2) = v907;
        *((_OWORD *)v898 + 4) = *((_OWORD *)v903 + 4);
        *((void *)v903 + 8) = 0;
        *((void *)v903 + 9) = 0;
      }
      while (v903 != v904);
      v903 = (char *)v1010[128];
      v908 = (char *)v1010[129];
      v1010[128] = v898;
      v897 = v1010;
      v1010[129] = v896;
      v1010[130] = v902;
      if (v908 == v903)
      {
LABEL_978:
        if (!v903)
        {
LABEL_980:
          v897[129] = v896;
          int v911 = *((unsigned __int8 *)v895 + 72);
          v912 = (gdc::Registry *)v897[165];
          v913 = (uint64_t *)(v896 - 44);
          if (!v911)
          {
            *(void *)&long long v1028 = v896 - 80;
            BYTE8(v1028) = 0;
            LOBYTE(v1029[1]) = 0;
            v1030[0] = 1;
            *(_OWORD *)&v1030[4] = xmmword_1A28FC710;
            uint64_t v1031 = 0x80000000800000;
            int v1033 = 0;
            uint64_t v1032 = 1065353216;
            int v1035 = 0;
            uint64_t v1034 = 0x3F80000000000000;
            uint64_t v1036 = 0;
            int v1039 = 0;
            uint64_t v1038 = 0;
            int v1037 = 1065353216;
            *(void *)buf = 1065353216;
            *(void *)&buf[8] = 0;
            *(void *)&buf[16] = 0x3F80000000000000;
            *(void *)&buf[24] = 0;
            *(void *)&uint8_t buf[32] = 0;
            *(void *)&v1092[4] = 0;
            uint64_t v1093 = 0;
            *(_DWORD *)v1092 = 1065353216;
            int v1094 = 1065353216;
            *(_OWORD *)v1089 = xmmword_1A28FC710;
            uint64_t v1090 = 0x80000000800000;
            double v1095 = COERCE_DOUBLE(&unk_1EF57D5F0);
            double v1096 = COERCE_DOUBLE(v1089);
            v1097 = buf;
            v1098 = (void **)&v1095;
            gm::Box<float,3>::forEachCorner(v913, (uint64_t)&v1095);
            if (v1098 == (void **)&v1095)
            {
              (*(void (**)(double *))(*(void *)&v1095 + 32))(&v1095);
            }
            else if (v1098)
            {
              (*((void (**)(void))*v1098 + 5))();
            }
            *(_OWORD *)&v1030[4] = *(_OWORD *)v1089;
            uint64_t v1031 = v1090;
            double v1095 = *(double *)a4;
            v1089[0] = *(void **)(v983 + 24);
            *(void *)&buf[8] = 0x100000000000000;
            *(void *)buf = 0;
            LOBYTE(v1040) = 1;
            *(float *)&v1045 = v965;
            gdc::Registry::create(v912);
          }
          *(void *)&long long v1028 = v896 - 80;
          BYTE8(v1028) = 0;
          LOBYTE(v1029[1]) = 0;
          v1030[0] = 1;
          *(_OWORD *)&v1030[4] = xmmword_1A28FC710;
          uint64_t v1031 = 0x80000000800000;
          int v1033 = 0;
          uint64_t v1032 = 1065353216;
          int v1035 = 0;
          uint64_t v1034 = 0x3F80000000000000;
          uint64_t v1036 = 0;
          int v1039 = 0;
          uint64_t v1038 = 0;
          int v1037 = 1065353216;
          *(void *)buf = 1065353216;
          *(void *)&buf[8] = 0;
          *(void *)&buf[16] = 0x3F80000000000000;
          *(void *)&buf[24] = 0;
          *(void *)&uint8_t buf[32] = 0;
          *(void *)&v1092[4] = 0;
          uint64_t v1093 = 0;
          *(_DWORD *)v1092 = 1065353216;
          int v1094 = 1065353216;
          *(_OWORD *)v1089 = xmmword_1A28FC710;
          uint64_t v1090 = 0x80000000800000;
          double v1095 = COERCE_DOUBLE(&unk_1EF57D5F0);
          double v1096 = COERCE_DOUBLE(v1089);
          v1097 = buf;
          v1098 = (void **)&v1095;
          gm::Box<float,3>::forEachCorner(v913, (uint64_t)&v1095);
          if (v1098 == (void **)&v1095)
          {
            (*(void (**)(double *))(*(void *)&v1095 + 32))(&v1095);
          }
          else if (v1098)
          {
            (*((void (**)(void))*v1098 + 5))();
          }
          *(_OWORD *)&v1030[4] = *(_OWORD *)v1089;
          uint64_t v1031 = v1090;
          v1040 = *a4;
          if (*((unsigned char *)a3 + 72) && *((unsigned char *)a3 + 57))
          {
            double v1095 = 0.0;
            double v1096 = 7.29112202e-304;
            gdc::Registry::create(v912);
          }
          std::__throw_bad_optional_access[abi:nn180100]();
          __break(1u);
          return;
        }
LABEL_979:
        operator delete(v903);
        goto LABEL_980;
      }
      while (1)
      {
        v909 = (std::__shared_weak_count *)*((void *)v908 - 1);
        if (v909 && !atomic_fetch_add(&v909->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v909->__on_zero_shared)(v909);
          std::__shared_weak_count::__release_weak(v909);
          v910 = (std::__shared_weak_count *)*((void *)v908 - 9);
          if (v910)
          {
LABEL_973:
            if (!atomic_fetch_add(&v910->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v910->__on_zero_shared)(v910);
              std::__shared_weak_count::__release_weak(v910);
            }
          }
        }
        else
        {
          v910 = (std::__shared_weak_count *)*((void *)v908 - 9);
          if (v910) {
            goto LABEL_973;
          }
        }
        v908 -= 80;
        if (v908 == v903)
        {
          v895 = a3;
          goto LABEL_978;
        }
      }
    }
    unsigned __int16 v87 = *(_WORD *)a3[3];
    if (geo::codec::VectorTile::daVinciBuildingColorsArePresent(*v982))
    {
      float32x4_t v88 = *a7;
    }
    else
    {
      float32x4_t v88 = *a7;
      if (v87 == 0xFFFF)
      {
        unint64_t v914 = ((uint64_t)(v88[1] - *v88) >> 2) - 1;
        unint64_t v915 = v88[9];
        double v90 = 0.5;
        unint64_t v91 = v88[7];
        _S14 = ((float)(v88[10] * (v914 % v915)) + 0.5) / (double)(unint64_t)v88[6];
        double v92 = (float)(v914 / v915);
        goto LABEL_75;
      }
    }
    unint64_t v89 = v88[9];
    double v90 = 0.5;
    unint64_t v91 = v88[7];
    _S14 = ((float)(v88[10] * (v87 % v89)) + 0.5) / (double)(unint64_t)v88[6];
    double v92 = (double)(v87 / v89);
LABEL_75:
    _D1 = (double)v91;
    _D0 = (v92 + v90) / (double)v91;
    *(float *)&uint64_t v1048 = _S14;
    _S15 = _D0;
    *((float *)&v1048 + 1) = _S15;
    goto LABEL_76;
  }
  if (v73)
  {
    unint64_t v916 = v1052;
    unint64_t v917 = v1053;
    if (v1053 != v1052)
    {
      v918 = (void *)*((void *)&v1051 + 1);
      int v919 = v1054;
      int v920 = HIBYTE(v1054);
      if ((void)v1051 && *(unsigned char *)(*((void *)&v1051 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v1051 + 64))();
      }
      if (v919 && !v920)
      {
        unint64_t v922 = v918[7];
        unint64_t v921 = v918[8];
        if (v921 == v922) {
          unint64_t v922 = v918[10] - v918[9];
        }
        if (v916 < v922) {
          unint64_t v922 = v916;
        }
        if (v921 <= v917) {
          unint64_t v921 = v917;
        }
        if (v921 == v922) {
          unint64_t v921 = v922 + v918[10] - v918[9];
        }
        v918[7] = v922;
        v918[8] = v921;
      }
    }
  }
  if (v1060)
  {
    unint64_t v923 = v1057;
    unint64_t v924 = v1058;
    if (v1058 != v1057)
    {
      v925 = (void *)*((void *)&v1056 + 1);
      int v926 = v1059;
      int v927 = HIBYTE(v1059);
      if ((void)v1056 && *(unsigned char *)(*((void *)&v1056 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v1056 + 64))();
      }
      if (v926 && !v927)
      {
        unint64_t v929 = v925[7];
        unint64_t v928 = v925[8];
        if (v928 == v929) {
          unint64_t v929 = v925[10] - v925[9];
        }
        if (v923 < v929) {
          unint64_t v929 = v923;
        }
        if (v928 <= v924) {
          unint64_t v928 = v924;
        }
        if (v928 == v929) {
          unint64_t v928 = v929 + v925[10] - v925[9];
        }
        v925[7] = v929;
        v925[8] = v928;
      }
    }
  }
  if (v1065)
  {
    unint64_t v930 = v1062;
    unint64_t v931 = v1063;
    if (v1063 != v1062)
    {
      v932 = (void *)*((void *)&v1061 + 1);
      int v933 = v1064;
      int v934 = HIBYTE(v1064);
      if ((void)v1061 && *(unsigned char *)(*((void *)&v1061 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v1061 + 64))();
      }
      if (v933 && !v934)
      {
        unint64_t v936 = v932[7];
        unint64_t v935 = v932[8];
        if (v935 == v936) {
          unint64_t v936 = v932[10] - v932[9];
        }
        if (v930 < v936) {
          unint64_t v936 = v930;
        }
        if (v935 <= v931) {
          unint64_t v935 = v931;
        }
        if (v935 == v936) {
          unint64_t v935 = v936 + v932[10] - v932[9];
        }
        v932[7] = v936;
        v932[8] = v935;
      }
    }
  }
  if (v1070)
  {
    unint64_t v937 = v1067;
    unint64_t v938 = v1068;
    if (v1068 != v1067)
    {
      v939 = (void *)*((void *)&v1066 + 1);
      int v940 = v1069;
      int v941 = HIBYTE(v1069);
      if ((void)v1066 && *(unsigned char *)(*((void *)&v1066 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v1066 + 64))();
      }
      if (v940 && !v941)
      {
        unint64_t v943 = v939[7];
        unint64_t v942 = v939[8];
        if (v942 == v943) {
          unint64_t v943 = v939[10] - v939[9];
        }
        if (v937 < v943) {
          unint64_t v943 = v937;
        }
        if (v942 <= v938) {
          unint64_t v942 = v938;
        }
        if (v942 == v943) {
          unint64_t v942 = v943 + v939[10] - v939[9];
        }
        v939[7] = v943;
        v939[8] = v942;
      }
    }
  }
  if (v1075)
  {
    unint64_t v944 = v1072;
    unint64_t v945 = v1073;
    if (v1073 != v1072)
    {
      v946 = (void *)*((void *)&v1071 + 1);
      int v947 = v1074;
      int v948 = HIBYTE(v1074);
      if ((void)v1071 && *(unsigned char *)(*((void *)&v1071 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v1071 + 64))();
      }
      if (v947 && !v948)
      {
        unint64_t v950 = v946[7];
        unint64_t v949 = v946[8];
        if (v949 == v950) {
          unint64_t v950 = v946[10] - v946[9];
        }
        if (v944 < v950) {
          unint64_t v950 = v944;
        }
        if (v949 <= v945) {
          unint64_t v949 = v945;
        }
        if (v949 == v950) {
          unint64_t v949 = v950 + v946[10] - v946[9];
        }
        v946[7] = v950;
        v946[8] = v949;
      }
    }
  }
  if (!atomic_fetch_add(v957, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v956->__on_zero_shared)(v956);
    std::__shared_weak_count::__release_weak(v956);
  }
  if (!atomic_fetch_add(v951, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v959->__on_zero_shared)(v959);
    std::__shared_weak_count::__release_weak(v959);
  }
  if (!atomic_fetch_add(v952, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v960->__on_zero_shared)(v960);
    std::__shared_weak_count::__release_weak(v960);
  }
  if (!atomic_fetch_add(v953, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v961->__on_zero_shared)(v961);
    std::__shared_weak_count::__release_weak(v961);
  }
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v958->__on_zero_shared)(v958);
    std::__shared_weak_count::__release_weak(v958);
  }
  if (!atomic_fetch_add(v955, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(atomic_ullong *))(*v962 + 16))(v962);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v962);
  }
  geo::Pool<geo::Triangulator<float,unsigned short>::Node>::disposeElements((uint64_t)&v1079);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1080);
}

void sub_1A25D3604(_Unwind_Exception *a1)
{
}

void md::DaVinciGroundTileData::_populateBuildingLoops(float *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = a2;
  md::DaVinciGroundTileData::_roundLoopCorners((char **)__p, a1, a2, a4, a5);
  uint64_t v14 = *(void **)a7;
  if (*(void *)a7)
  {
    *(void *)(a7 + 8) = v14;
    operator delete(v14);
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
  }
  *(_OWORD *)a7 = *(_OWORD *)__p;
  *(void *)(a7 + 16) = v52;
  __p[1] = 0;
  uint64_t v52 = 0;
  __p[0] = 0;
  double v15 = *(void **)(a7 + 24);
  if (v15)
  {
    *(void *)(a7 + 32) = v15;
    operator delete(v15);
    *(void *)(a7 + 24) = 0;
    *(void *)(a7 + 32) = 0;
    *(void *)(a7 + 40) = 0;
    double v15 = __p[0];
  }
  *(_OWORD *)(a7 + 24) = *(_OWORD *)v53;
  *(void *)(a7 + 40) = v54;
  v53[1] = 0;
  uint64_t v54 = 0;
  v53[0] = 0;
  if (v15)
  {
    __p[1] = v15;
    operator delete(v15);
  }
  unint64_t v16 = *(unsigned __int16 *)(a3 + 16);
  double v17 = *(void **)a8;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a8 + 16) - *(void *)a8) >> 4) < v16)
  {
    float32x4_t v18 = *(unsigned char **)(a8 + 8);
    uint64_t v19 = 48 * v16;
    float32x4_t v20 = (char *)operator new(48 * v16);
    uint64_t v21 = &v20[v19];
    BOOL v22 = &v20[v18 - (unsigned char *)v17];
    if (v18 == (unsigned char *)v17)
    {
      *(void *)a8 = v22;
      *(void *)(a8 + 8) = v22;
      *(void *)(a8 + 16) = v21;
    }
    else
    {
      uint64_t v23 = 0;
      do
      {
        unint64_t v24 = &v22[v23];
        uint64_t v25 = &v18[v23];
        *((_OWORD *)v24 - 3) = *(_OWORD *)&v18[v23 - 48];
        *((void *)v24 - 4) = *(void *)&v18[v23 - 32];
        *((void *)v25 - 6) = 0;
        *((void *)v25 - 5) = 0;
        *((void *)v25 - 4) = 0;
        *(_OWORD *)(v24 - 24) = *(_OWORD *)&v18[v23 - 24];
        *((void *)v24 - 1) = *(void *)&v18[v23 - 8];
        *((void *)v25 - 3) = 0;
        *((void *)v25 - 2) = 0;
        *((void *)v25 - 1) = 0;
        v23 -= 48;
      }
      while (&v18[v23] != (unsigned char *)v17);
      double v17 = *(void **)a8;
      uint64_t v26 = *(void **)(a8 + 8);
      *(void *)a8 = &v22[v23];
      *(void *)(a8 + 8) = v22;
      *(void *)(a8 + 16) = v21;
      while (v26 != v17)
      {
        unsigned __int16 v27 = (void *)*(v26 - 3);
        if (v27)
        {
          *(v26 - 2) = v27;
          operator delete(v27);
        }
        uint64_t v28 = (void *)*(v26 - 6);
        if (v28)
        {
          *(v26 - 5) = v28;
          operator delete(v28);
        }
        v26 -= 6;
      }
    }
    if (v17) {
      operator delete(v17);
    }
  }
  if (*(_WORD *)(a3 + 16))
  {
    uint64_t v29 = 0;
    while (1)
    {
      md::DaVinciGroundTileData::_roundLoopCorners((char **)__p, a1, v12, *(_DWORD *)(a6 + 8 * v29), *(_WORD *)(a6 + 8 * v29 + 4));
      uint64_t v31 = *(void **)(a8 + 8);
      unint64_t v30 = *(void *)(a8 + 16);
      if ((unint64_t)v31 >= v30) {
        break;
      }
      v31[2] = 0;
      v31[3] = 0;
      *uint64_t v31 = 0;
      v31[1] = 0;
      *(_OWORD *)uint64_t v31 = *(_OWORD *)__p;
      v31[2] = v52;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v52 = 0;
      v31[4] = 0;
      v31[5] = 0;
      *(_OWORD *)(v31 + 3) = *(_OWORD *)v53;
      v31[5] = v54;
      v53[0] = 0;
      v53[1] = 0;
      uint64_t v54 = 0;
      *(void *)(a8 + 8) = v31 + 6;
LABEL_49:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (++v29 >= (unint64_t)*(unsigned __int16 *)(a3 + 16)) {
        return;
      }
    }
    char v32 = *(void **)a8;
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v31 - *(void *)a8) >> 4);
    unint64_t v34 = v33 + 1;
    if (v33 + 1 > 0x555555555555555) {
      abort();
    }
    uint64_t v35 = a3;
    uint64_t v36 = v12;
    uint64_t v37 = a6;
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (void)v32) >> 4);
    if (2 * v38 > v34) {
      unint64_t v34 = 2 * v38;
    }
    if (v38 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v39 = 0x555555555555555;
    }
    else {
      unint64_t v39 = v34;
    }
    if (v39 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v40 = (char *)operator new(48 * v39);
    unint64_t v41 = &v40[48 * v33];
    *((void *)v41 + 2) = v52;
    *(_OWORD *)unint64_t v41 = *(_OWORD *)__p;
    uint64_t v42 = &v40[48 * v39];
    __p[1] = 0;
    uint64_t v52 = 0;
    __p[0] = 0;
    *(_OWORD *)(v41 + 24) = *(_OWORD *)v53;
    *((void *)v41 + 5) = v54;
    v53[1] = 0;
    uint64_t v54 = 0;
    unint64_t v43 = v41 + 48;
    v53[0] = 0;
    if (v31 == v32)
    {
      *(void *)a8 = v41;
      *(void *)(a8 + 8) = v43;
      *(void *)(a8 + 16) = v42;
      a6 = v37;
    }
    else
    {
      uint64_t v44 = 0;
      do
      {
        long long v45 = &v41[v44 * 8];
        char v46 = &v31[v44];
        *((_OWORD *)v45 - 3) = *(_OWORD *)&v31[v44 - 6];
        *((void *)v45 - 4) = v31[v44 - 4];
        *(v46 - 6) = 0;
        *(v46 - 5) = 0;
        *(v46 - 4) = 0;
        *(_OWORD *)(v45 - 24) = *(_OWORD *)&v31[v44 - 3];
        *((void *)v45 - 1) = v31[v44 - 1];
        *(v46 - 3) = 0;
        *(v46 - 2) = 0;
        *(v46 - 1) = 0;
        v44 -= 6;
      }
      while (&v31[v44] != v32);
      uint64_t v31 = *(void **)a8;
      char v47 = *(void **)(a8 + 8);
      *(void *)a8 = &v41[v44 * 8];
      *(void *)(a8 + 8) = v43;
      *(void *)(a8 + 16) = v42;
      a6 = v37;
      if (v47 != v31)
      {
        uint64_t v12 = v36;
        a3 = v35;
        do
        {
          long long v48 = (void *)*(v47 - 3);
          if (v48)
          {
            *(v47 - 2) = v48;
            operator delete(v48);
          }
          uint64_t v49 = (void *)*(v47 - 6);
          if (v49)
          {
            *(v47 - 5) = v49;
            operator delete(v49);
          }
          v47 -= 6;
        }
        while (v47 != v31);
        goto LABEL_45;
      }
    }
    uint64_t v12 = v36;
    a3 = v35;
LABEL_45:
    if (v31) {
      operator delete(v31);
    }
    unint64_t v50 = v53[0];
    *(void *)(a8 + 8) = v43;
    if (v50)
    {
      v53[1] = v50;
      operator delete(v50);
    }
    goto LABEL_49;
  }
}

void sub_1A25D3EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  md::TileAdjustmentHelpers::~TileAdjustmentHelpers((md::TileAdjustmentHelpers *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::triangulatedIndexCount<float>(void *a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  double v15 = &off_1EF57A730;
  unint64_t v16 = a1;
  double v17 = &v15;
  uint64_t v3 = a1[1] - *a1;
  if ((unint64_t)v3 < 0x18)
  {
    uint64_t v4 = 0;
    if (a2 != a3) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = 0;
    return 3 * (v4 + 2 * v5) - 6;
  }
  uint64_t v12 = v3 >> 3;
  if (*(void *)*a1 == *(void *)(*a1 + 8 * (v12 - 1))) {
    uint64_t v4 = v12 - 1;
  }
  else {
    uint64_t v4 = v12;
  }
  if (a2 == a3) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v5 = 0;
  double v6 = a2;
  do
  {
    int v9 = (void *)*a2;
    uint64_t v10 = a2[1];
    if (*a2 != v10)
    {
      double v15 = &off_1EF57A730;
      unint64_t v16 = v6;
      double v17 = &v15;
      uint64_t v11 = v10 - (void)v9;
      v14[3] = v14;
      v14[0] = &off_1EF57A730;
      v14[1] = v6;
      if ((unint64_t)v11 >= 0x18)
      {
        uint64_t v7 = v11 >> 3;
        if (*v9 == v9[v7 - 1]) {
          uint64_t v8 = v7 - 1;
        }
        else {
          uint64_t v8 = v7;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      v4 += v8;
      ++v5;
    }
    v6 += 3;
    a2 += 3;
  }
  while (a2 != a3);
  return 3 * (v4 + 2 * v5) - 6;
}

void md::DaVinciGroundTileData::_appendFaces(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, uint64_t *a11, uint64_t *a12, char a13, int *a14, uint64_t a15)
{
  uint64_t v25 = +[VKDebugSettings sharedSettings];
  int v26 = [v25 daVinciBuildingHeights];

  if (v26)
  {
    float v27 = *(float *)(a2 + 4);
    if (*(unsigned char *)(a15 + 24)) {
      float v27 = *(float *)(a15 + 20) + (float)(*(float *)(a15 + 8) * v27);
    }
    BOOL v28 = *(unsigned char *)(a2 + 1) != 0;
  }
  else
  {
    float v27 = *(float *)(a1 + 1176) * 5.0;
    BOOL v28 = 1;
  }
  BOOL v100 = v28;
  uint64_t v29 = *a3;
  uint64_t v30 = a3[1];
  if (v30 != *a3)
  {
    uint64_t v31 = 0;
    uint64_t v32 = *a12;
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v30 - *a3) >> 2);
    unsigned __int16 v34 = v33 - 1;
    uint64_t v99 = a3[3];
    uint64_t v35 = *(void *)(a5 + 40);
    uint64_t v36 = *(void *)(a8 + 40);
    uint64_t v37 = *(void *)(a7 + 40);
    uint64_t v38 = *(void *)(a6 + 40);
    unint64_t v39 = v33 - 1;
    uint64_t v40 = *(void *)(a4 + 40);
    unint64_t v41 = (float *)(v29 + 4);
    uint64_t v42 = *a12;
    do
    {
      uint64_t v89 = v31++;
      if (v39 == v89) {
        unsigned int v90 = 0;
      }
      else {
        unsigned int v90 = (unsigned __int16)v31;
      }
      float v91 = a9;
      if ((a13 & 1) == 0) {
        float v91 = v41[1];
      }
      if (v100) {
        float v92 = v41[1];
      }
      else {
        float v92 = 0.0;
      }
      uint64_t v93 = (float *)(v29 + 12 * v34);
      char v94 = *(unsigned char *)(v99 + v89);
      float v95 = *(v41 - 1);
      float v96 = v92 + v27;
      int v97 = (int)(float)(v95 * a10);
      int v98 = (int)(float)(*v41 * a10);
      if ((v94 & 3) == 0)
      {
        float v43 = *v41 - v93[1];
        float v44 = *v93 - v95;
        uint64_t v45 = v35 + 8 * v42;
        *(_WORD *)uint64_t v45 = v97;
        *(_WORD *)(v45 + 2) = v98;
        *(float *)(v45 + 4) = v96;
        *(float *)(v36 + 4 * v42) = a9;
        float v46 = 0.28126 / sqrtf((float)(v43 * v43) + (float)(v44 * v44));
        _S5 = (float)(v46 * v43) + 0.5;
        _S4 = (float)(v46 * v44) + 0.5;
        __asm
        {
          FCVT            H5, S5
          FCVT            H4, S4
        }
        long long v53 = (_WORD *)(v37 + 4 * v42);
        *long long v53 = LOWORD(_S5);
        v53[1] = LOWORD(_S4);
        _S6 = *a14;
        _S7 = a14[1];
        __asm
        {
          FCVT            H6, S6
          FCVT            H7, S7
        }
        uint64_t v56 = (_WORD *)(v38 + 4 * v42);
        *uint64_t v56 = _S6;
        v56[1] = _S7;
        uint64_t v57 = v35 + 8 * (v42 + 1);
        *(_WORD *)uint64_t v57 = v97;
        *(_WORD *)(v57 + 2) = v98;
        *(float *)(v57 + 4) = v41[1];
        uint64_t v58 = 4 * (v42 + 1);
        *(float *)(v36 + v58) = v91;
        uint64_t v59 = (_WORD *)(v37 + v58);
        *uint64_t v59 = LOWORD(_S5);
        v59[1] = LOWORD(_S4);
        _S4 = *a14;
        _S5 = a14[1];
        __asm
        {
          FCVT            H4, S4
          FCVT            H5, S5
        }
        long long v62 = (_WORD *)(v38 + v58);
        *long long v62 = _S4;
        v62[1] = _S5;
        v42 += 2;
        *a12 = v42;
      }
      uint64_t v63 = (float *)(v29 + 12 * v90);
      __int16 v64 = v42 + 2;
      if (v39 == v89) {
        __int16 v64 = v32;
      }
      uint64_t v65 = *a11;
      long long v66 = (_WORD *)(v40 + 2 * *a11);
      *long long v66 = v42;
      *a11 = v65 + 1;
      *(_WORD *)(v40 + 2 * (v65 + 1)) = *(_WORD *)a12 + 1;
      v66[2] = v64;
      v66[3] = v64;
      *a11 = v65 + 4;
      *(_WORD *)(v40 + 2 * (v65 + 4)) = *(_WORD *)a12 + 1;
      v66[5] = v64 + 1;
      *a11 = v65 + 6;
      unint64_t v67 = v63 + 1;
      uint64_t v68 = v93 + 1;
      if (v94) {
        uint64_t v69 = v63 + 1;
      }
      else {
        uint64_t v69 = v41;
      }
      if (v94) {
        uint64_t v70 = v63;
      }
      else {
        uint64_t v70 = v41 - 1;
      }
      if ((v94 & 2) != 0) {
        unint64_t v67 = v69;
      }
      else {
        uint64_t v68 = v41;
      }
      if ((v94 & 2) != 0) {
        uint64_t v71 = v93;
      }
      else {
        uint64_t v71 = v41 - 1;
      }
      if ((v94 & 2) == 0) {
        uint64_t v70 = v63;
      }
      float v72 = *v67 - *v68;
      float v73 = *v71 - *v70;
      float v74 = sqrtf((float)(v72 * v72) + (float)(v73 * v73));
      uint64_t v75 = *a12;
      uint64_t v76 = v35 + 8 * *a12;
      *(_WORD *)uint64_t v76 = v97;
      *(_WORD *)(v76 + 2) = v98;
      *(float *)(v76 + 4) = v96;
      *(float *)(v36 + 4 * v75) = a9;
      _S4 = (float)((float)(0.28126 / v74) * v72) + 0.5;
      _S3 = (float)((float)(0.28126 / v74) * v73) + 0.5;
      __asm
      {
        FCVT            H4, S4
        FCVT            H3, S3
      }
      int32x2_t v79 = (_WORD *)(v37 + 4 * v75);
      *int32x2_t v79 = LOWORD(_S4);
      v79[1] = LOWORD(_S3);
      _S5 = *a14;
      _S6 = a14[1];
      __asm
      {
        FCVT            H5, S5
        FCVT            H6, S6
      }
      uint64_t v82 = (_WORD *)(v38 + 4 * v75);
      _WORD *v82 = _S5;
      v82[1] = _S6;
      uint64_t v83 = v35 + 8 * (v75 + 1);
      *(_WORD *)uint64_t v83 = v97;
      *(_WORD *)(v83 + 2) = v98;
      *(float *)(v83 + 4) = v41[1];
      uint64_t v84 = 4 * (v75 + 1);
      *(float *)(v36 + v84) = v91;
      size_t v85 = (_WORD *)(v37 + v84);
      *size_t v85 = LOWORD(_S4);
      v85[1] = LOWORD(_S3);
      _S2 = *a14;
      _S3 = a14[1];
      __asm
      {
        FCVT            H2, S2
        FCVT            H3, S3
      }
      float32x4_t v88 = (_WORD *)(v38 + v84);
      *float32x4_t v88 = _S2;
      v88[1] = _S3;
      uint64_t v42 = v75 + 2;
      *a12 = v75 + 2;
      v41 += 3;
      unsigned __int16 v34 = v89;
    }
    while (v33 > (unsigned __int16)v31);
  }
}

void sub_1A25D4444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float *std::__introsort<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  int v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                float v90 = *(a2 - 2);
                float v91 = v10[2];
                if (v91 < v90)
                {
                  uint64_t v92 = *(void *)v10;
                  *(void *)uint64_t v10 = *((void *)a2 - 2);
                  *((void *)a2 - 2) = v92;
                  v10[2] = v90;
                  *(a2 - 2) = v91;
                }
                return result;
              case 3:
                float v93 = v10[6];
                float v94 = v10[2];
                float v95 = *(a2 - 2);
                if (v94 >= v93)
                {
                  if (v93 < v95)
                  {
                    uint64_t v130 = *((void *)v10 + 2);
                    *((void *)v10 + 2) = *((void *)a2 - 2);
                    *((void *)a2 - 2) = v130;
                    v10[6] = v95;
                    *(a2 - 2) = v93;
                    float v131 = v10[6];
                    float v132 = v10[2];
                    if (v132 < v131)
                    {
                      uint64_t v133 = *(void *)v10;
                      *(void *)uint64_t v10 = *((void *)v10 + 2);
                      *((void *)v10 + 2) = v133;
                      v10[2] = v131;
                      v10[6] = v132;
                    }
                  }
                }
                else
                {
                  uint64_t v96 = *(void *)v10;
                  if (v93 >= v95)
                  {
                    *(void *)uint64_t v10 = *((void *)v10 + 2);
                    *((void *)v10 + 2) = v96;
                    v10[2] = v93;
                    v10[6] = v94;
                    float v154 = *(a2 - 2);
                    if (v94 >= v154) {
                      return result;
                    }
                    *((void *)v10 + 2) = *((void *)a2 - 2);
                    *((void *)a2 - 2) = v96;
                    v10[6] = v154;
                  }
                  else
                  {
                    *(void *)uint64_t v10 = *((void *)a2 - 2);
                    *((void *)a2 - 2) = v96;
                    v10[2] = v95;
                  }
                  *(a2 - 2) = v94;
                }
                break;
              case 4:
                return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(v10, v10 + 4, v10 + 8, a2 - 4);
              case 5:
                BOOL result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(v10, v10 + 4, v10 + 8, v10 + 12);
                float v97 = *(a2 - 2);
                float v98 = v10[14];
                if (v98 < v97)
                {
                  uint64_t v99 = *((void *)v10 + 6);
                  *((void *)v10 + 6) = *((void *)a2 - 2);
                  *((void *)a2 - 2) = v99;
                  v10[14] = v97;
                  *(a2 - 2) = v98;
                  float v100 = v10[14];
                  float v101 = v10[10];
                  if (v101 < v100)
                  {
                    uint64_t v102 = *((void *)v10 + 4);
                    uint64_t v103 = *((void *)v10 + 6);
                    *((void *)v10 + 4) = v103;
                    *((void *)v10 + 6) = v102;
                    v10[10] = v100;
                    v10[14] = v101;
                    float v104 = v10[6];
                    if (v104 < v100)
                    {
                      uint64_t v105 = *((void *)v10 + 2);
                      *((void *)v10 + 2) = v103;
                      *((void *)v10 + 4) = v105;
                      v10[6] = v100;
                      v10[10] = v104;
                      float v106 = v10[2];
                      if (v106 < v100)
                      {
                        uint64_t v107 = *(void *)v10;
                        *(void *)uint64_t v10 = v103;
                        *((void *)v10 + 2) = v107;
                        v10[2] = v100;
                        v10[6] = v106;
                      }
                    }
                  }
                }
                return result;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            float32x4_t v108 = v10 + 4;
            BOOL v110 = v10 == a2 || v108 == a2;
            if (a4)
            {
              if (!v110)
              {
                uint64_t v111 = 0;
                double v112 = v10;
                do
                {
                  float v114 = v112[6];
                  float v115 = v112[2];
                  double v112 = v108;
                  if (v115 < v114)
                  {
                    uint64_t v116 = *(void *)v108;
                    uint64_t v117 = v111;
                    do
                    {
                      uint64_t v118 = (char *)v10 + v117;
                      *((void *)v118 + 2) = *(void *)((char *)v10 + v117);
                      *((float *)v118 + 6) = *(float *)((char *)v10 + v117 + 8);
                      if (!v117)
                      {
                        uint64_t v113 = (uint64_t)v10;
                        goto LABEL_123;
                      }
                      v117 -= 16;
                    }
                    while (*((float *)v118 - 2) < v114);
                    uint64_t v113 = (uint64_t)v10 + v117 + 16;
LABEL_123:
                    *(void *)uint64_t v113 = v116;
                    *(float *)(v113 + 8) = v114;
                  }
                  float32x4_t v108 = v112 + 4;
                  v111 += 16;
                }
                while (v112 + 4 != a2);
              }
            }
            else if (!v110)
            {
              uint64_t v134 = v10 + 2;
              do
              {
                float v135 = v9[6];
                float v136 = v9[2];
                int v9 = v108;
                if (v136 < v135)
                {
                  uint64_t v137 = *(void *)v108;
                  float32x4_t v138 = v134;
                  do
                  {
                    *((void *)v138 + 1) = *((void *)v138 - 1);
                    v138[4] = *v138;
                    float v139 = *(v138 - 4);
                    v138 -= 4;
                  }
                  while (v139 < v135);
                  *((void *)v138 + 1) = v137;
                  v138[4] = v135;
                }
                float32x4_t v108 = v9 + 4;
                v134 += 4;
              }
              while (v9 + 4 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v119 = (unint64_t)(v12 - 2) >> 1;
              int64_t v120 = v119;
              do
              {
                if (v119 >= v120)
                {
                  uint64_t v122 = (2 * v120) | 1;
                  long long v123 = &v10[4 * v122];
                  if (2 * v120 + 2 < v12 && v123[6] < v123[2])
                  {
                    v123 += 4;
                    uint64_t v122 = 2 * v120 + 2;
                  }
                  unint64_t v124 = &v10[4 * v120];
                  float v125 = v124[2];
                  if (v125 >= v123[2])
                  {
                    uint64_t v126 = *(void *)v124;
                    do
                    {
                      unsigned int v127 = v124;
                      unint64_t v124 = v123;
                      *(void *)unsigned int v127 = *(void *)v123;
                      v127[2] = v123[2];
                      if (v119 < v122) {
                        break;
                      }
                      uint64_t v128 = 2 * v122;
                      uint64_t v122 = (2 * v122) | 1;
                      long long v123 = &v10[4 * v122];
                      uint64_t v129 = v128 + 2;
                      if (v129 < v12 && v123[6] < v123[2])
                      {
                        v123 += 4;
                        uint64_t v122 = v129;
                      }
                    }
                    while (v125 >= v123[2]);
                    *(void *)unint64_t v124 = v126;
                    v124[2] = v125;
                  }
                }
                BOOL v121 = v120-- <= 0;
              }
              while (!v121);
              uint64_t v140 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v141 = 0;
                uint64_t v142 = *(void *)v10;
                int v143 = *((_DWORD *)v10 + 2);
                float32x4_t v144 = v10;
                do
                {
                  int8x16_t v145 = v144;
                  v144 += 4 * v141 + 4;
                  uint64_t v146 = 2 * v141;
                  uint64_t v141 = (2 * v141) | 1;
                  uint64_t v147 = v146 + 2;
                  if (v147 < v140 && v144[6] < v144[2])
                  {
                    v144 += 4;
                    uint64_t v141 = v147;
                  }
                  *(void *)int8x16_t v145 = *(void *)v144;
                  v145[2] = v144[2];
                }
                while (v141 <= (uint64_t)((unint64_t)(v140 - 2) >> 1));
                if (v144 == a2 - 4)
                {
                  *(void *)float32x4_t v144 = v142;
                  *((_DWORD *)v144 + 2) = v143;
                }
                else
                {
                  *(void *)float32x4_t v144 = *((void *)a2 - 2);
                  v144[2] = *(a2 - 2);
                  *((void *)a2 - 2) = v142;
                  *((_DWORD *)a2 - 2) = v143;
                  uint64_t v148 = (char *)v144 - (char *)v10 + 16;
                  if (v148 >= 17)
                  {
                    unint64_t v149 = (((unint64_t)v148 >> 4) - 2) >> 1;
                    uint64_t v150 = &v10[4 * v149];
                    float v151 = v144[2];
                    if (v151 < v150[2])
                    {
                      uint64_t v152 = *(void *)v144;
                      do
                      {
                        uint64_t v153 = v144;
                        float32x4_t v144 = v150;
                        *(void *)uint64_t v153 = *(void *)v150;
                        v153[2] = v150[2];
                        if (!v149) {
                          break;
                        }
                        unint64_t v149 = (v149 - 1) >> 1;
                        uint64_t v150 = &v10[4 * v149];
                      }
                      while (v151 < v150[2]);
                      *(void *)float32x4_t v144 = v152;
                      v144[2] = v151;
                    }
                  }
                }
                a2 -= 4;
                BOOL v121 = v140-- <= 2;
              }
              while (!v121);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[4 * ((unint64_t)v12 >> 1)];
          float v15 = *(a2 - 2);
          if ((unint64_t)v11 < 0x801) {
            break;
          }
          float v16 = v14[2];
          float v17 = v10[2];
          if (v17 >= v16)
          {
            if (v16 < v15)
            {
              uint64_t v22 = *(void *)v14;
              *(void *)uint64_t v14 = *((void *)a2 - 2);
              *((void *)a2 - 2) = v22;
              v14[2] = v15;
              *(a2 - 2) = v16;
              float v23 = v14[2];
              float v24 = v10[2];
              if (v24 < v23)
              {
                uint64_t v25 = *(void *)v10;
                *(void *)uint64_t v10 = *(void *)v14;
                *(void *)uint64_t v14 = v25;
                v10[2] = v23;
                v14[2] = v24;
              }
            }
          }
          else
          {
            uint64_t v18 = *(void *)v10;
            if (v16 >= v15)
            {
              *(void *)uint64_t v10 = *(void *)v14;
              *(void *)uint64_t v14 = v18;
              v10[2] = v16;
              v14[2] = v17;
              float v30 = *(a2 - 2);
              if (v17 >= v30) {
                goto LABEL_24;
              }
              *(void *)uint64_t v14 = *((void *)a2 - 2);
              *((void *)a2 - 2) = v18;
              v14[2] = v30;
            }
            else
            {
              *(void *)uint64_t v10 = *((void *)a2 - 2);
              *((void *)a2 - 2) = v18;
              v10[2] = v15;
            }
            *(a2 - 2) = v17;
          }
LABEL_24:
          uint64_t v31 = &v10[4 * v13];
          uint64_t v32 = v31 - 4;
          float v33 = *(v31 - 2);
          float v34 = v10[6];
          float v35 = *(a2 - 6);
          if (v34 >= v33)
          {
            if (v33 < v35)
            {
              uint64_t v37 = *(void *)v32;
              *(void *)uint64_t v32 = *((void *)a2 - 4);
              *((void *)a2 - 4) = v37;
              v32[2] = v35;
              *(a2 - 6) = v33;
              float v38 = v32[2];
              float v39 = v10[6];
              if (v39 < v38)
              {
                uint64_t v40 = *((void *)v10 + 2);
                *((void *)v10 + 2) = *(void *)v32;
                *(void *)uint64_t v32 = v40;
                v10[6] = v38;
                v32[2] = v39;
              }
            }
          }
          else
          {
            uint64_t v36 = *((void *)v10 + 2);
            if (v33 >= v35)
            {
              *((void *)v10 + 2) = *(void *)v32;
              *(void *)uint64_t v32 = v36;
              v10[6] = v33;
              v32[2] = v34;
              float v45 = *(a2 - 6);
              if (v34 >= v45) {
                goto LABEL_38;
              }
              *(void *)uint64_t v32 = *((void *)a2 - 4);
              *((void *)a2 - 4) = v36;
              v32[2] = v45;
            }
            else
            {
              *((void *)v10 + 2) = *((void *)a2 - 4);
              *((void *)a2 - 4) = v36;
              v10[6] = v35;
            }
            *(a2 - 6) = v34;
          }
LABEL_38:
          float v46 = &v10[4 * v13];
          char v47 = v46 + 4;
          float v48 = v46[6];
          float v49 = v10[10];
          float v50 = *(a2 - 10);
          if (v49 >= v48)
          {
            if (v48 < v50)
            {
              uint64_t v52 = *(void *)v47;
              *(void *)char v47 = *((void *)a2 - 6);
              *((void *)a2 - 6) = v52;
              v47[2] = v50;
              *(a2 - 10) = v48;
              float v53 = v47[2];
              float v54 = v10[10];
              if (v54 < v53)
              {
                uint64_t v55 = *((void *)v10 + 4);
                *((void *)v10 + 4) = *(void *)v47;
                *(void *)char v47 = v55;
                v10[10] = v53;
                v47[2] = v54;
              }
            }
          }
          else
          {
            uint64_t v51 = *((void *)v10 + 4);
            if (v48 >= v50)
            {
              *((void *)v10 + 4) = *(void *)v47;
              *(void *)char v47 = v51;
              v10[10] = v48;
              v47[2] = v49;
              float v56 = *(a2 - 10);
              if (v49 >= v56) {
                goto LABEL_47;
              }
              *(void *)char v47 = *((void *)a2 - 6);
              *((void *)a2 - 6) = v51;
              v47[2] = v56;
            }
            else
            {
              *((void *)v10 + 4) = *((void *)a2 - 6);
              *((void *)a2 - 6) = v51;
              v10[10] = v50;
            }
            *(a2 - 10) = v49;
          }
LABEL_47:
          float v57 = v14[2];
          float v58 = v32[2];
          float v59 = v57;
          float v60 = v47[2];
          if (v58 >= v57)
          {
            uint64_t v61 = *(void *)v14;
            if (v57 < v60)
            {
              uint64_t v62 = *(void *)v47;
              *(void *)uint64_t v14 = *(void *)v47;
              *(void *)char v47 = v61;
              v14[2] = v60;
              v47[2] = v57;
              float v59 = v60;
              if (v58 >= v60)
              {
                uint64_t v61 = v62;
              }
              else
              {
                uint64_t v61 = *(void *)v32;
                *(void *)uint64_t v32 = v62;
                *(void *)uint64_t v14 = v61;
                v32[2] = v60;
                v14[2] = v58;
                float v59 = v58;
              }
            }
          }
          else
          {
            uint64_t v61 = *(void *)v32;
            if (v57 >= v60)
            {
              *(void *)uint64_t v32 = *(void *)v14;
              *(void *)uint64_t v14 = v61;
              v32[2] = v57;
              v14[2] = v58;
              float v59 = v58;
              if (v58 < v60)
              {
                uint64_t v63 = *(void *)v47;
                *(void *)uint64_t v14 = *(void *)v47;
                *(void *)char v47 = v61;
                v14[2] = v60;
                v47[2] = v58;
                float v59 = v60;
                uint64_t v61 = v63;
              }
            }
            else
            {
              *(void *)uint64_t v32 = *(void *)v47;
              *(void *)char v47 = v61;
              v32[2] = v60;
              v47[2] = v58;
              uint64_t v61 = *(void *)v14;
            }
          }
          uint64_t v64 = *(void *)v10;
          *(void *)uint64_t v10 = v61;
          *(void *)uint64_t v14 = v64;
          float v65 = v10[2];
          v10[2] = v59;
          v10[4 * v13 + 2] = v65;
          --a3;
          if (a4) {
            goto LABEL_34;
          }
LABEL_57:
          float v43 = v10[2];
          float v44 = v43;
          uint64_t v42 = *(void *)v10;
          if (v43 < *(v10 - 2)) {
            goto LABEL_58;
          }
          if (*(a2 - 2) < v43)
          {
            int32x2_t v79 = v10;
            do
            {
              uint64_t v10 = v79 + 4;
              float v80 = v79[6];
              v79 += 4;
            }
            while (v80 >= v43);
          }
          else
          {
            uint8x8_t v81 = v10 + 4;
            do
            {
              uint64_t v10 = v81;
              if (v81 >= a2) {
                break;
              }
              float v82 = v81[2];
              v81 += 4;
            }
            while (v82 >= v43);
          }
          uint64_t v83 = a2;
          if (v10 < a2)
          {
            uint64_t v84 = a2;
            do
            {
              uint64_t v83 = v84 - 4;
              float v85 = *(v84 - 2);
              v84 -= 4;
            }
            while (v85 < v43);
          }
          while (v10 < v83)
          {
            uint64_t v86 = *(void *)v10;
            *(void *)uint64_t v10 = *(void *)v83;
            *(void *)uint64_t v83 = v86;
            int v87 = *((_DWORD *)v10 + 2);
            v10[2] = v83[2];
            *((_DWORD *)v83 + 2) = v87;
            do
            {
              float v88 = v10[6];
              v10 += 4;
            }
            while (v88 >= v43);
            do
            {
              float v89 = *(v83 - 2);
              v83 -= 4;
            }
            while (v89 < v43);
          }
          BOOL v4 = v10 - 4 >= v9;
          BOOL v5 = v10 - 4 == v9;
          if (v10 - 4 != v9)
          {
            *(void *)int v9 = *((void *)v10 - 2);
            v9[2] = *(v10 - 2);
          }
          a4 = 0;
          *((void *)v10 - 2) = v42;
          *(v10 - 2) = v43;
        }
        float v19 = v10[2];
        float v20 = v14[2];
        if (v20 < v19)
        {
          uint64_t v21 = *(void *)v14;
          if (v19 >= v15)
          {
            *(void *)uint64_t v14 = *(void *)v10;
            *(void *)uint64_t v10 = v21;
            v14[2] = v19;
            v10[2] = v20;
            float v41 = *(a2 - 2);
            if (v20 >= v41) {
              goto LABEL_33;
            }
            *(void *)uint64_t v10 = *((void *)a2 - 2);
            *((void *)a2 - 2) = v21;
            v10[2] = v41;
          }
          else
          {
            *(void *)uint64_t v14 = *((void *)a2 - 2);
            *((void *)a2 - 2) = v21;
            v14[2] = v15;
          }
          *(a2 - 2) = v20;
LABEL_33:
          --a3;
          if ((a4 & 1) == 0) {
            goto LABEL_57;
          }
          goto LABEL_34;
        }
        if (v19 >= v15) {
          goto LABEL_33;
        }
        uint64_t v26 = *(void *)v10;
        *(void *)uint64_t v10 = *((void *)a2 - 2);
        *((void *)a2 - 2) = v26;
        v10[2] = v15;
        *(a2 - 2) = v19;
        float v27 = v10[2];
        float v28 = v14[2];
        if (v28 >= v27) {
          goto LABEL_33;
        }
        uint64_t v29 = *(void *)v14;
        *(void *)uint64_t v14 = *(void *)v10;
        *(void *)uint64_t v10 = v29;
        v14[2] = v27;
        v10[2] = v28;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_57;
        }
LABEL_34:
        uint64_t v42 = *(void *)v10;
        float v43 = v10[2];
        float v44 = v43;
LABEL_58:
        long long v66 = v10;
        do
        {
          unint64_t v67 = v66;
          v66 += 4;
        }
        while (v44 < v67[6]);
        uint64_t v68 = a2;
        if (v67 == v10)
        {
          uint64_t v71 = a2;
          while (v66 < v71)
          {
            uint64_t v69 = v71 - 4;
            float v72 = *(v71 - 2);
            v71 -= 4;
            if (v44 < v72) {
              goto LABEL_67;
            }
          }
          uint64_t v69 = v71;
        }
        else
        {
          do
          {
            uint64_t v69 = v68 - 4;
            float v70 = *(v68 - 2);
            v68 -= 4;
          }
          while (v44 >= v70);
        }
LABEL_67:
        uint64_t v10 = v66;
        if (v66 < v69)
        {
          unint64_t v73 = (unint64_t)v69;
          do
          {
            uint64_t v74 = *(void *)v10;
            *(void *)uint64_t v10 = *(void *)v73;
            *(void *)unint64_t v73 = v74;
            int v75 = *((_DWORD *)v10 + 2);
            v10[2] = *(float *)(v73 + 8);
            *(_DWORD *)(v73 + 8) = v75;
            do
            {
              float v76 = v10[6];
              v10 += 4;
            }
            while (v44 < v76);
            do
            {
              float v77 = *(float *)(v73 - 8);
              v73 -= 16;
            }
            while (v44 >= v77);
          }
          while ((unint64_t)v10 < v73);
        }
        if (v10 - 4 != v9)
        {
          *(void *)int v9 = *((void *)v10 - 2);
          v9[2] = *(v10 - 2);
        }
        *((void *)v10 - 2) = v42;
        *(v10 - 2) = v43;
        if (v66 >= v69) {
          break;
        }
LABEL_78:
        BOOL result = (float *)std::__introsort<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *,false>(v9, v10 - 4, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v78 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(v9, v10 - 4);
      BOOL result = (float *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v78) {
        goto LABEL_78;
      }
    }
    a2 = v10 - 4;
    if (!v78) {
      continue;
    }
    return result;
  }
}

float *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(float *result, float *a2, float *a3, float *a4)
{
  float v4 = a2[2];
  float v5 = result[2];
  float v6 = a3[2];
  if (v5 >= v4)
  {
    if (v4 < v6)
    {
      uint64_t v8 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v8;
      a2[2] = v6;
      a3[2] = v4;
      float v9 = a2[2];
      float v10 = result[2];
      if (v10 < v9)
      {
        uint64_t v11 = *(void *)result;
        *(void *)BOOL result = *(void *)a2;
        *(void *)a2 = v11;
        result[2] = v9;
        a2[2] = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = *(void *)result;
    if (v4 < v6)
    {
      *(void *)BOOL result = *(void *)a3;
      *(void *)a3 = v7;
      result[2] = v6;
LABEL_9:
      a3[2] = v5;
      goto LABEL_10;
    }
    *(void *)BOOL result = *(void *)a2;
    *(void *)a2 = v7;
    result[2] = v4;
    a2[2] = v5;
    float v12 = a3[2];
    if (v5 < v12)
    {
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v7;
      a2[2] = v12;
      goto LABEL_9;
    }
  }
LABEL_10:
  float v13 = a4[2];
  float v14 = a3[2];
  if (v14 < v13)
  {
    uint64_t v15 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v15;
    a3[2] = v13;
    a4[2] = v14;
    float v16 = a3[2];
    float v17 = a2[2];
    if (v17 < v16)
    {
      uint64_t v18 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v18;
      a2[2] = v16;
      a3[2] = v17;
      float v19 = a2[2];
      float v20 = result[2];
      if (v20 < v19)
      {
        uint64_t v21 = *(void *)result;
        *(void *)BOOL result = *(void *)a2;
        *(void *)a2 = v21;
        result[2] = v19;
        a2[2] = v20;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 2);
      float v7 = a1[2];
      if (v7 < v6)
      {
        uint64_t v8 = *(void *)a1;
        *(void *)a1 = *((void *)a2 - 2);
        *((void *)a2 - 2) = v8;
        a1[2] = v6;
        *(a2 - 2) = v7;
      }
      return result;
    case 3:
      float v9 = a1[6];
      float v10 = a1[2];
      float v11 = *(a2 - 2);
      if (v10 >= v9)
      {
        if (v9 < v11)
        {
          uint64_t v29 = *((void *)a1 + 2);
          *((void *)a1 + 2) = *((void *)a2 - 2);
          *((void *)a2 - 2) = v29;
          a1[6] = v11;
          *(a2 - 2) = v9;
          float v30 = a1[6];
          float v31 = a1[2];
          if (v31 < v30)
          {
            uint64_t v32 = *(void *)a1;
            *(void *)a1 = *((void *)a1 + 2);
            *((void *)a1 + 2) = v32;
            a1[2] = v30;
            a1[6] = v31;
          }
        }
      }
      else
      {
        uint64_t v12 = *(void *)a1;
        if (v9 >= v11)
        {
          *(void *)a1 = *((void *)a1 + 2);
          *((void *)a1 + 2) = v12;
          a1[2] = v9;
          a1[6] = v10;
          float v36 = *(a2 - 2);
          if (v10 < v36)
          {
            *((void *)a1 + 2) = *((void *)a2 - 2);
            *((void *)a2 - 2) = v12;
            a1[6] = v36;
            *(a2 - 2) = v10;
          }
        }
        else
        {
          *(void *)a1 = *((void *)a2 - 2);
          *((void *)a2 - 2) = v12;
          a1[2] = v11;
          *(a2 - 2) = v10;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(a1, a1 + 4, a1 + 8, a1 + 12);
      float v18 = *(a2 - 2);
      float v19 = a1[14];
      if (v19 < v18)
      {
        uint64_t v20 = *((void *)a1 + 6);
        *((void *)a1 + 6) = *((void *)a2 - 2);
        *((void *)a2 - 2) = v20;
        a1[14] = v18;
        *(a2 - 2) = v19;
        float v21 = a1[14];
        float v22 = a1[10];
        if (v22 < v21)
        {
          uint64_t v23 = *((void *)a1 + 4);
          uint64_t v24 = *((void *)a1 + 6);
          *((void *)a1 + 4) = v24;
          *((void *)a1 + 6) = v23;
          a1[10] = v21;
          a1[14] = v22;
          float v25 = a1[6];
          if (v25 < v21)
          {
            uint64_t v26 = *((void *)a1 + 2);
            *((void *)a1 + 2) = v24;
            *((void *)a1 + 4) = v26;
            a1[6] = v21;
            a1[10] = v25;
            float v27 = a1[2];
            if (v27 < v21)
            {
              uint64_t v28 = *(void *)a1;
              *(void *)a1 = v24;
              *((void *)a1 + 2) = v28;
              a1[2] = v21;
              a1[6] = v27;
            }
          }
        }
      }
      return 1;
    default:
      float v13 = a1[10];
      float v14 = a1 + 6;
      float v15 = a1[6];
      float v16 = a1[2];
      if (v16 < v15)
      {
        uint64_t v17 = *(void *)a1;
        if (v15 >= v13)
        {
          *(void *)a1 = *((void *)a1 + 2);
          *((void *)a1 + 2) = v17;
          a1[2] = v15;
          a1[6] = v16;
          if (v16 >= v13) {
            goto LABEL_28;
          }
          *((void *)a1 + 2) = *((void *)a1 + 4);
          *((void *)a1 + 4) = v17;
          a1[6] = v13;
        }
        else
        {
          *(void *)a1 = *((void *)a1 + 4);
          *((void *)a1 + 4) = v17;
          a1[2] = v13;
        }
        float v14 = a1 + 10;
        goto LABEL_27;
      }
      if (v15 < v13)
      {
        uint64_t v33 = *((void *)a1 + 2);
        uint64_t v34 = *((void *)a1 + 4);
        *((void *)a1 + 2) = v34;
        *((void *)a1 + 4) = v33;
        a1[6] = v13;
        a1[10] = v15;
        if (v16 < v13)
        {
          uint64_t v35 = *(void *)a1;
          *(void *)a1 = v34;
          *((void *)a1 + 2) = v35;
          a1[2] = v13;
LABEL_27:
          *float v14 = v16;
        }
      }
LABEL_28:
      uint64_t v37 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v38 = 0;
      int v39 = 0;
      uint64_t v40 = a1 + 8;
      while (1)
      {
        float v42 = v37[2];
        if (v40[2] < v42)
        {
          uint64_t v43 = *(void *)v37;
          uint64_t v44 = v38;
          do
          {
            float v45 = (char *)a1 + v44;
            *((void *)v45 + 6) = *(void *)((char *)a1 + v44 + 32);
            *((float *)v45 + 14) = *(float *)((char *)a1 + v44 + 40);
            if (v44 == -32)
            {
              uint64_t v41 = (uint64_t)a1;
              goto LABEL_31;
            }
            v44 -= 16;
          }
          while (*((float *)v45 + 6) < v42);
          uint64_t v41 = (uint64_t)a1 + v44 + 48;
LABEL_31:
          *(void *)uint64_t v41 = v43;
          *(float *)(v41 + 8) = v42;
          if (++v39 == 8) {
            return v37 + 4 == a2;
          }
        }
        uint64_t v40 = v37;
        v38 += 16;
        v37 += 4;
        if (v37 == a2) {
          return 1;
        }
      }
  }
}

void md::DaVinciGroundTileData::_roundLoopCorners(char **a1, float *a2, uint64_t a3, unsigned int a4, unsigned __int16 a5)
{
  uint64_t v222 = *MEMORY[0x1E4F143B8];
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  float v6 = (float *)(a3 + 12 * a4);
  unsigned int v7 = a5;
  unsigned int v8 = a5 - 1;
  *(void *)&long long v9 = LODWORD(v6[3 * v8]);
  if (*(float *)&v9 == *v6 && v6[3 * v8 + 1] == *(float *)(a3 + 12 * a4 + 4)) {
    unsigned int v7 = a5 - 1;
  }
  size_t v10 = v7;
  size_t v212 = (float *)(a3 + 12 * a4);
  size_t v210 = v7;
  if (v7 >= 3 && *a2 != 0.0)
  {
    unsigned int v11 = vcvtas_u32_f32(1.5708 / a2[1]);
    if (v11 <= 1) {
      unsigned int v11 = 1;
    }
    size_t v12 = v10 * (unint64_t)(v11 + 1);
    if (v12)
    {
      if (v12 > 0x1555555555555555) {
        abort();
      }
      float v13 = (char *)operator new(12 * v12);
      *a1 = v13;
      a1[1] = v13;
      a1[2] = &v13[12 * v12];
      float v14 = (char *)operator new(v12);
      a1[3] = v14;
      a1[4] = v14;
      a1[5] = &v14[v12];
    }
    else
    {
      float v14 = 0;
    }
    uint64_t v56 = 0;
    size_t v208 = v10 - 1;
    __asm { FMOV            V8.2S, #1.0 }
    while (1)
    {
      size_t v62 = (v208 + v56) % v10;
      size_t v63 = v10;
      uint64_t v64 = v56 + 1;
      if (v56 + 1 == v63) {
        uint64_t v65 = 0;
      }
      else {
        uint64_t v65 = v56 + 1;
      }
      long long v66 = (float32x2_t *)&v6[3 * v62];
      LODWORD(v9) = v66[1].i32[0];
      float32x2_t v213 = *v66;
      int32x2_t v214 = (int32x2_t)v9;
      unint64_t v67 = (float32x2_t *)&v6[3 * v56];
      float32x2_t v215 = *v67;
      __int32 v216 = v67[1].i32[0];
      uint64_t v68 = &v6[3 * v65];
      float v69 = *v68;
      float v70 = v68[1];
      unsigned int v211 = *((_DWORD *)v68 + 2);
      *(float32x2_t *)&long long v71 = *v66;
      *((float32x2_t *)&v71 + 1) = v215;
      long long v219 = v71;
      float v220 = v69;
      float v221 = v70;
      md::PolygonRound::smoothTwoSegments((float **)&__p, a2, (float *)&v219);
      float32x2_t v73 = v215;
      __int32 v72 = v216;
      uint64_t v74 = v218;
      if ((unint64_t)((char *)v218 - (unsigned char *)__p) < 9) {
        goto LABEL_72;
      }
      float32x2_t v75 = vsub_f32(v215, v213);
      float32x2_t v76 = vsub_f32((float32x2_t)__PAIR64__(v216, v211), (float32x2_t)vdup_lane_s32(v214, 0));
      v77.i32[1] = v75.i32[1];
      v77.f32[0] = v70 - v213.f32[1];
      float32x2_t v78 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v75, v75), 0);
      v78.f32[0] = (float)(v69 - v213.f32[0]) * (float)(v69 - v213.f32[0]);
      float32x2_t v79 = vdiv_f32(_D8, vsqrt_f32(vmla_f32(vmla_f32(v78, v77, v77), v76, v76)));
      float32x2_t v80 = (float32x2_t)vdup_lane_s32((int32x2_t)v75, 0);
      v75.f32[0] = v69 - v213.f32[0];
      float32x2_t v81 = vmul_f32(v79, v75);
      v80.f32[0] = v70 - v213.f32[1];
      float32x2_t v82 = vmul_lane_f32(v81, v81, 1);
      float32x2_t v83 = vmul_f32(v79, v80);
      float32x2_t v84 = vmul_f32(v79, v76);
      *(float32x2_t *)&long long v9 = vmla_f32(vneg_f32(vmul_f32(v83, (float32x2_t)vrev64_s32((int32x2_t)v84))), v84, (float32x2_t)vrev64_s32((int32x2_t)v81));
      float32x2_t v85 = vmla_lane_f32(vneg_f32(v82), v83, v83, 1);
      float32x2_t v86 = vmul_f32(*(float32x2_t *)&v9, *(float32x2_t *)&v9);
      float v87 = 1.0 / sqrtf(vmla_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v86, 1), v86), v85, v85).f32[0]);
      float v88 = v87 * v85.f32[0];
      if (v88 == 0.0)
      {
LABEL_72:
        float v90 = (float32x2_t *)a1[1];
        unint64_t v89 = (unint64_t)a1[2];
        if ((unint64_t)v90 >= v89)
        {
          uint64_t v92 = (float32x2_t *)*a1;
          unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)v90 - *a1) >> 2);
          unint64_t v94 = v93 + 1;
          if (v93 + 1 > 0x1555555555555555) {
            abort();
          }
          unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (void)v92) >> 2);
          if (2 * v95 > v94) {
            unint64_t v94 = 2 * v95;
          }
          if (v95 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v96 = 0x1555555555555555;
          }
          else {
            unint64_t v96 = v94;
          }
          if (v96)
          {
            if (v96 > 0x1555555555555555) {
              goto LABEL_253;
            }
            float v97 = (char *)operator new(12 * v96);
            float32x2_t v73 = v215;
            __int32 v72 = v216;
          }
          else
          {
            float v97 = 0;
          }
          uint64_t v118 = &v97[12 * v93];
          *(float32x2_t *)uint64_t v118 = v73;
          *((_DWORD *)v118 + 2) = v72;
          int64_t v119 = v118;
          if (v90 != v92)
          {
            do
            {
              uint64_t v120 = *(uint64_t *)((char *)&v90[-2] + 4);
              float v90 = (float32x2_t *)((char *)v90 - 12);
              __int32 v121 = v90[1].i32[0];
              *(void *)(v119 - 12) = v120;
              v119 -= 12;
              *((_DWORD *)v119 + 2) = v121;
            }
            while (v90 != v92);
            float v90 = (float32x2_t *)*a1;
          }
          float v91 = v118 + 12;
          *a1 = v119;
          a1[1] = v118 + 12;
          a1[2] = &v97[12 * v96];
          if (v90) {
            operator delete(v90);
          }
        }
        else
        {
          float32x2_t *v90 = v215;
          v90[1].i32[0] = v216;
          float v91 = (char *)&v90[1] + 4;
        }
        a1[1] = v91;
        long long v123 = a1[4];
        unint64_t v122 = (unint64_t)a1[5];
        if ((unint64_t)v123 < v122)
        {
          *v123 &= 0xFCu;
          float v14 = v123 + 1;
          float v6 = v212;
          goto LABEL_241;
        }
        unint64_t v124 = a1[3];
        unint64_t v125 = v123 - v124;
        uint64_t v126 = v123 - v124 + 1;
        float v6 = v212;
        if (v126 < 0) {
          abort();
        }
        unint64_t v127 = v122 - (void)v124;
        if (2 * v127 > v126) {
          uint64_t v126 = 2 * v127;
        }
        if (v127 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v128 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v128 = v126;
        }
        if (v128) {
          uint64_t v129 = (char *)operator new(v128);
        }
        else {
          uint64_t v129 = 0;
        }
        uint64_t v130 = &v129[v125];
        v129[v125] &= 0xFCu;
        float v14 = &v129[v125 + 1];
        if (v123 == v124) {
          goto LABEL_238;
        }
        if (v125 < 8 || (unint64_t)(v124 - v129) < 0x20) {
          goto LABEL_234;
        }
        if (v125 >= 0x20)
        {
          unint64_t v131 = v125 & 0xFFFFFFFFFFFFFFE0;
          float32x4_t v144 = &v129[v125 - 16];
          int8x16_t v145 = (long long *)(v123 - 16);
          unint64_t v146 = v125 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v9 = *v145;
            *((_OWORD *)v144 - 1) = *(v145 - 1);
            *(_OWORD *)float32x4_t v144 = v9;
            v144 -= 32;
            v145 -= 2;
            v146 -= 32;
          }
          while (v146);
          if (v125 == v131) {
            goto LABEL_152;
          }
          if ((v125 & 0x18) == 0)
          {
            v130 -= v131;
            v123 -= v131;
            goto LABEL_234;
          }
        }
        else
        {
          unint64_t v131 = 0;
        }
        unint64_t v147 = v131 - (v125 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v148 = &v123[-v131];
        unint64_t v149 = &v129[&v123[-v131] - v124 - 8];
        uint64_t v150 = (uint64_t *)(v148 - 8);
        do
        {
          uint64_t v151 = *v150--;
          DWORD1(v9) = HIDWORD(v151);
          *(void *)unint64_t v149 = v151;
          v149 -= 8;
          v147 += 8;
        }
        while (v147);
        if (v125 == (v125 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_152:
          long long v123 = v124;
LABEL_237:
          uint64_t v130 = v129;
LABEL_238:
          a1[3] = v130;
          a1[4] = v14;
          a1[5] = &v129[v128];
          if (v123)
          {
            float v196 = v123;
            goto LABEL_240;
          }
          goto LABEL_241;
        }
        v130 -= v125 & 0xFFFFFFFFFFFFFFF8;
        v123 -= v125 & 0xFFFFFFFFFFFFFFF8;
LABEL_234:
        int v201 = v130 - 1;
        do
        {
          char v202 = *--v123;
          *v201-- = v202;
        }
        while (v123 != v124);
        long long v123 = a1[3];
        goto LABEL_237;
      }
      if (__p != v218)
      {
        float v98 = v87 * *(float *)&v9;
        float v99 = vmuls_lane_f32(v87, *(float32x2_t *)&v9, 1);
        float v100 = (float)(vmuls_lane_f32(v99, v213, 1) + (float)((float)(v87 * *(float *)&v9) * v213.f32[0]))
             + (float)(v88 * *(float *)v214.i32);
        float v101 = (float32x2_t *)a1[1];
        float v102 = 1.0 / v88;
        uint64_t v103 = (float *)__p;
        do
        {
          float v105 = *v103;
          *(float *)&long long v9 = v103[1];
          float v106 = (float)(v100 - (float)((float)(*v103 * v98) + (float)(*(float *)&v9 * v99))) * v102;
          unint64_t v107 = (unint64_t)a1[2];
          if ((unint64_t)v101 < v107)
          {
            v101->f32[0] = v105;
            v101->i32[1] = v9;
            float v104 = (float32x2_t *)((char *)v101 + 12);
            v101[1].f32[0] = v106;
          }
          else
          {
            float32x4_t v108 = (float32x2_t *)*a1;
            unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * (((char *)v101 - *a1) >> 2);
            unint64_t v110 = v109 + 1;
            if (v109 + 1 > 0x1555555555555555) {
              abort();
            }
            unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - (void)v108) >> 2);
            if (2 * v111 > v110) {
              unint64_t v110 = 2 * v111;
            }
            if (v111 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v112 = 0x1555555555555555;
            }
            else {
              unint64_t v112 = v110;
            }
            if (v112)
            {
              if (v112 > 0x1555555555555555) {
                goto LABEL_253;
              }
              uint64_t v113 = (char *)operator new(12 * v112);
              float v105 = *v103;
              *(float *)&long long v9 = v103[1];
            }
            else
            {
              uint64_t v113 = 0;
            }
            float v114 = &v113[12 * v109];
            *(float *)float v114 = v105;
            *((_DWORD *)v114 + 1) = v9;
            *((float *)v114 + 2) = v106;
            float v115 = v114;
            if (v101 != v108)
            {
              do
              {
                uint64_t v116 = *(uint64_t *)((char *)&v101[-2] + 4);
                float v101 = (float32x2_t *)((char *)v101 - 12);
                int v117 = v101[1].i32[0];
                *(void *)(v115 - 12) = v116;
                v115 -= 12;
                *((_DWORD *)v115 + 2) = v117;
              }
              while (v101 != v108);
              float v101 = (float32x2_t *)*a1;
            }
            float v104 = (float32x2_t *)(v114 + 12);
            *a1 = v115;
            a1[1] = v114 + 12;
            a1[2] = &v113[12 * v112];
            if (v101) {
              operator delete(v101);
            }
          }
          a1[1] = (char *)v104;
          v103 += 2;
          float v101 = v104;
        }
        while (v103 != v74);
        float v14 = a1[4];
        float v6 = v212;
      }
      unint64_t v132 = (unint64_t)a1[5];
      if ((unint64_t)v14 < v132)
      {
        *float v14 = *v14 & 0xFC | 2;
        uint64_t v133 = v14 + 1;
        goto LABEL_166;
      }
      uint64_t v134 = a1[3];
      unint64_t v135 = v14 - v134;
      uint64_t v136 = v14 - v134 + 1;
      if (v136 < 0) {
        abort();
      }
      unint64_t v137 = v132 - (void)v134;
      if (2 * v137 > v136) {
        uint64_t v136 = 2 * v137;
      }
      size_t v138 = v137 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v136;
      float v139 = v138 ? (char *)operator new(v138) : 0;
      uint64_t v140 = &v139[v135];
      v139[v135] = v139[v135] & 0xFC | 2;
      uint64_t v133 = &v139[v135 + 1];
      if (v14 != v134) {
        break;
      }
LABEL_164:
      a1[3] = v140;
      a1[4] = v133;
      a1[5] = &v139[v138];
      if (v14) {
        operator delete(v14);
      }
LABEL_166:
      a1[4] = v133;
      if ((unint64_t)((((char *)v218 - (unsigned char *)__p) >> 3) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        LODWORD(v161) = 1;
        while (1)
        {
          unint64_t v163 = (unint64_t)a1[5];
          if ((unint64_t)v133 >= v163) {
            break;
          }
          *v133 |= 3u;
          int8x16_t v162 = v133 + 1;
LABEL_169:
          a1[4] = v162;
          unint64_t v161 = (v161 + 1);
          uint64_t v133 = v162;
          if ((((char *)v218 - (unsigned char *)__p) >> 3) - 1 <= v161) {
            goto LABEL_205;
          }
        }
        unint64_t v164 = (unint64_t)a1[3];
        unint64_t v165 = (unint64_t)&v133[-v164];
        uint64_t v166 = (uint64_t)&v133[-v164 + 1];
        if (v166 < 0) {
          abort();
        }
        unint64_t v167 = v163 - v164;
        if (2 * v167 > v166) {
          uint64_t v166 = 2 * v167;
        }
        if (v167 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v168 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v168 = v166;
        }
        if (v168) {
          uint64_t v169 = (char *)operator new(v168);
        }
        else {
          uint64_t v169 = 0;
        }
        float v170 = &v169[v165];
        float v171 = &v169[v168];
        v169[v165] |= 3u;
        int8x16_t v162 = &v169[v165 + 1];
        if (v133 != (char *)v164)
        {
          if (v165 <= 7
            || v169 > &v133[(void)v169 - v164 - 1]
            || v164 > (unint64_t)(v133 - 1)
            || v164 - (unint64_t)v169 < 0x20)
          {
            float v172 = v133;
          }
          else
          {
            if (v165 < 0x20)
            {
              uint64_t v175 = 0;
LABEL_199:
              float v172 = &v133[-(v165 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v179 = v175 - (v165 & 0xFFFFFFFFFFFFFFF8);
              uint64_t v180 = &v133[-v175];
              uint64_t v181 = &v133[-v175 - v164 - 8 + (void)v169];
              uint64_t v182 = (uint64_t *)(v180 - 8);
              do
              {
                uint64_t v183 = *v182--;
                DWORD1(v9) = HIDWORD(v183);
                *(void *)uint64_t v181 = v183;
                v181 -= 8;
                v179 += 8;
              }
              while (v179);
              if (v165 != (v165 & 0xFFFFFFFFFFFFFFF8))
              {
                v170 -= v165 & 0xFFFFFFFFFFFFFFF8;
                goto LABEL_183;
              }
LABEL_186:
              a1[3] = v169;
              a1[4] = v162;
              uint64_t v133 = (char *)v164;
              a1[5] = v171;
              if (!v164) {
                goto LABEL_169;
              }
LABEL_189:
              operator delete(v133);
              goto LABEL_169;
            }
            uint64_t v175 = v165 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v176 = (long long *)(v133 - 16);
            uint32x4_t v177 = &v169[v165 - 16];
            unint64_t v178 = v165 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v9 = *v176;
              *((_OWORD *)v177 - 1) = *(v176 - 1);
              *(_OWORD *)uint32x4_t v177 = v9;
              v176 -= 2;
              v177 -= 32;
              v178 -= 32;
            }
            while (v178);
            if (v165 == v175) {
              goto LABEL_186;
            }
            if ((v165 & 0x18) != 0) {
              goto LABEL_199;
            }
            v170 -= v175;
            float v172 = &v133[-v175];
          }
LABEL_183:
          float v173 = v170 - 1;
          do
          {
            char v174 = *--v172;
            *v173-- = v174;
          }
          while (v172 != (char *)v164);
          unint64_t v164 = (unint64_t)a1[3];
          goto LABEL_186;
        }
        a1[3] = v170;
        a1[4] = v162;
        a1[5] = v171;
        goto LABEL_189;
      }
      int8x16_t v162 = v133;
LABEL_205:
      unint64_t v184 = (unint64_t)a1[5];
      if ((unint64_t)v162 >= v184)
      {
        uint64_t v185 = a1[3];
        unint64_t v186 = v162 - v185;
        uint64_t v187 = v162 - v185 + 1;
        if (v187 < 0) {
          abort();
        }
        unint64_t v188 = v184 - (void)v185;
        if (2 * v188 > v187) {
          uint64_t v187 = 2 * v188;
        }
        if (v188 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v189 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v189 = v187;
        }
        if (v189) {
          int64x2_t v190 = (char *)operator new(v189);
        }
        else {
          int64x2_t v190 = 0;
        }
        uint64_t v191 = &v190[v186];
        uint32x4_t v192 = &v190[v189];
        v190[v186] = v190[v186] & 0xFC | 1;
        float v14 = &v190[v186 + 1];
        if (v162 == v185)
        {
          a1[3] = v191;
          a1[4] = v14;
          a1[5] = v192;
        }
        else
        {
          if (v186 > 7 && (unint64_t)(v185 - v190) >= 0x20)
          {
            if (v186 >= 0x20)
            {
              unint64_t v197 = v186 & 0xFFFFFFFFFFFFFFE0;
              unsigned int v198 = (long long *)(v162 - 16);
              uint64_t v199 = &v190[v186 - 16];
              unint64_t v200 = v186 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v9 = *v198;
                *((_OWORD *)v199 - 1) = *(v198 - 1);
                *(_OWORD *)uint64_t v199 = v9;
                v198 -= 2;
                v199 -= 32;
                v200 -= 32;
              }
              while (v200);
              if (v186 == v197) {
                goto LABEL_223;
              }
              if ((v186 & 0x18) == 0)
              {
                v191 -= v197;
                uint64_t v193 = &v162[-v197];
                goto LABEL_220;
              }
            }
            else
            {
              unint64_t v197 = 0;
            }
            uint64_t v193 = &v162[-(v186 & 0xFFFFFFFFFFFFFFF8)];
            unint64_t v203 = v197 - (v186 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v204 = &v162[-v197];
            unint64_t v205 = &v190[&v162[-v197] - v185 - 8];
            int v206 = (uint64_t *)(v204 - 8);
            do
            {
              uint64_t v207 = *v206--;
              DWORD1(v9) = HIDWORD(v207);
              *(void *)unint64_t v205 = v207;
              v205 -= 8;
              v203 += 8;
            }
            while (v203);
            if (v186 != (v186 & 0xFFFFFFFFFFFFFFF8))
            {
              v191 -= v186 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_220;
            }
          }
          else
          {
            uint64_t v193 = v162;
LABEL_220:
            float v194 = v191 - 1;
            do
            {
              char v195 = *--v193;
              *v194-- = v195;
            }
            while (v193 != v185);
            uint64_t v185 = a1[3];
          }
LABEL_223:
          a1[3] = v190;
          a1[4] = v14;
          int8x16_t v162 = v185;
          a1[5] = v192;
          if (!v185) {
            goto LABEL_241;
          }
        }
        float v196 = v162;
LABEL_240:
        operator delete(v196);
        goto LABEL_241;
      }
      *int8x16_t v162 = *v162 & 0xFC | 1;
      float v14 = v162 + 1;
LABEL_241:
      a1[4] = v14;
      if (__p) {
        operator delete(__p);
      }
      uint64_t v56 = v64;
      _ZF = v64 == v210;
      size_t v10 = v210;
      if (_ZF) {
        return;
      }
    }
    if (v135 < 8 || (unint64_t)(v134 - v139) < 0x20)
    {
      uint64_t v141 = v14;
      goto LABEL_142;
    }
    if (v135 >= 0x20)
    {
      unint64_t v152 = v135 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v153 = &v139[v135 - 16];
      float v154 = (long long *)(v14 - 16);
      unint64_t v155 = v135 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v9 = *v154;
        *((_OWORD *)v153 - 1) = *(v154 - 1);
        *(_OWORD *)uint64_t v153 = v9;
        v153 -= 32;
        v154 -= 2;
        v155 -= 32;
      }
      while (v155);
      if (v135 == v152)
      {
LABEL_163:
        float v14 = v134;
        uint64_t v140 = v139;
        goto LABEL_164;
      }
      if ((v135 & 0x18) == 0)
      {
        v140 -= v152;
        uint64_t v141 = &v14[-v152];
LABEL_142:
        uint64_t v142 = v140 - 1;
        do
        {
          char v143 = *--v141;
          *v142-- = v143;
        }
        while (v141 != v134);
        float v14 = a1[3];
        uint64_t v140 = v139;
        goto LABEL_164;
      }
    }
    else
    {
      unint64_t v152 = 0;
    }
    uint64_t v141 = &v14[-(v135 & 0xFFFFFFFFFFFFFFF8)];
    unint64_t v156 = v152 - (v135 & 0xFFFFFFFFFFFFFFF8);
    float32x4_t v157 = &v14[-v152];
    float v158 = &v139[&v14[-v152] - v134 - 8];
    float v159 = (uint64_t *)(v157 - 8);
    do
    {
      uint64_t v160 = *v159--;
      DWORD1(v9) = HIDWORD(v160);
      *(void *)float v158 = v160;
      v158 -= 8;
      v156 += 8;
    }
    while (v156);
    if (v135 == (v135 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_163;
    }
    v140 -= v135 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_142;
  }
  if (v7)
  {
    float v15 = (char *)operator new(12 * v7);
    *a1 = v15;
    a1[1] = v15;
    a1[2] = &v15[12 * v10];
    float v16 = (char *)operator new(v10);
    uint64_t v17 = 0;
    a1[3] = v16;
    a1[4] = v16;
    a1[5] = &v16[v10];
    while (1)
    {
      float v19 = &v6[3 * v17];
      float v21 = (float32x2_t *)a1[1];
      unint64_t v20 = (unint64_t)a1[2];
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v24 = (float32x2_t *)*a1;
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - *a1) >> 2);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x1555555555555555) {
          abort();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)v24) >> 2);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        unint64_t v28 = v27 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v26;
        if (v28)
        {
          if (v28 > 0x1555555555555555) {
LABEL_253:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          uint64_t v29 = (char *)operator new(12 * v28);
        }
        else
        {
          uint64_t v29 = 0;
        }
        float32x2_t v30 = *(float32x2_t *)v19;
        float v31 = &v29[12 * v25];
        *((float *)v31 + 2) = v19[2];
        *(float32x2_t *)float v31 = v30;
        uint64_t v32 = v31;
        if (v21 != v24)
        {
          do
          {
            uint64_t v33 = *(uint64_t *)((char *)&v21[-2] + 4);
            float v21 = (float32x2_t *)((char *)v21 - 12);
            __int32 v34 = v21[1].i32[0];
            *(void *)(v32 - 12) = v33;
            v32 -= 12;
            *((_DWORD *)v32 + 2) = v34;
          }
          while (v21 != v24);
          float v21 = (float32x2_t *)*a1;
        }
        uint64_t v23 = v31 + 12;
        *a1 = v32;
        a1[1] = v31 + 12;
        a1[2] = &v29[12 * v28];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        float32x2_t v22 = *(float32x2_t *)v19;
        v21[1].f32[0] = v19[2];
        *float v21 = v22;
        uint64_t v23 = (char *)&v21[1] + 4;
      }
      a1[1] = v23;
      float v36 = a1[4];
      unint64_t v35 = (unint64_t)a1[5];
      if ((unint64_t)v36 >= v35) {
        break;
      }
      *v36 &= 0xFCu;
      uint64_t v18 = (uint64_t)(v36 + 1);
      float v6 = v212;
LABEL_14:
      a1[4] = (char *)v18;
      if (++v17 == v10) {
        return;
      }
    }
    uint64_t v37 = a1[3];
    unint64_t v38 = v36 - v37;
    uint64_t v39 = v36 - v37 + 1;
    float v6 = v212;
    if (v39 < 0) {
      abort();
    }
    unint64_t v40 = v35 - (void)v37;
    if (2 * v40 > v39) {
      uint64_t v39 = 2 * v40;
    }
    if (v40 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v41 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v41 = v39;
    }
    if (v41) {
      float v42 = (char *)operator new(v41);
    }
    else {
      float v42 = 0;
    }
    uint64_t v43 = &v42[v38];
    v42[v38] &= 0xFCu;
    uint64_t v18 = (uint64_t)&v42[v38 + 1];
    if (v36 == v37)
    {
LABEL_61:
      size_t v10 = v210;
      a1[3] = v43;
      a1[4] = (char *)v18;
      a1[5] = &v42[v41];
      if (v36) {
        operator delete(v36);
      }
      goto LABEL_14;
    }
    if (v38 < 8 || (unint64_t)(v37 - v42) < 0x20) {
      goto LABEL_57;
    }
    if (v38 >= 0x20)
    {
      unint64_t v44 = v38 & 0xFFFFFFFFFFFFFFE0;
      float v45 = &v42[v38 - 16];
      float v46 = (long long *)(v36 - 16);
      unint64_t v47 = v38 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v48 = *v46;
        *((_OWORD *)v45 - 1) = *(v46 - 1);
        *(_OWORD *)float v45 = v48;
        v45 -= 32;
        v46 -= 2;
        v47 -= 32;
      }
      while (v47);
      if (v38 == v44) {
        goto LABEL_54;
      }
      if ((v38 & 0x18) == 0)
      {
        v43 -= v44;
        v36 -= v44;
        goto LABEL_57;
      }
    }
    else
    {
      unint64_t v44 = 0;
    }
    unint64_t v49 = v44 - (v38 & 0xFFFFFFFFFFFFFFF8);
    float v50 = &v36[-v44];
    uint64_t v51 = &v42[&v36[-v44] - v37 - 8];
    uint64_t v52 = (uint64_t *)(v50 - 8);
    do
    {
      uint64_t v53 = *v52--;
      *(void *)uint64_t v51 = v53;
      v51 -= 8;
      v49 += 8;
    }
    while (v49);
    if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_54:
      float v36 = v37;
LABEL_60:
      uint64_t v43 = v42;
      goto LABEL_61;
    }
    v43 -= v38 & 0xFFFFFFFFFFFFFFF8;
    v36 -= v38 & 0xFFFFFFFFFFFFFFF8;
LABEL_57:
    float v54 = v43 - 1;
    do
    {
      char v55 = *--v36;
      *v54-- = v55;
    }
    while (v36 != v37);
    float v36 = a1[3];
    goto LABEL_60;
  }
}

void sub_1A25D650C(_Unwind_Exception *a1)
{
  md::TileAdjustmentHelpers::~TileAdjustmentHelpers(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::ElevationCompressedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevationCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5895F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevationCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5895F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::DeviceDataTyped<ggl::DaVinci::Elevations>::~DeviceDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::DeviceDataTyped<ggl::DaVinci::Elevations>::~DeviceDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583F58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583F58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationCompressedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<ggl::Texture2D  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::Texture2D  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::StyleTexture(uint64_t a1, unint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (a2)
  {
    uint64_t v4 = 4 * a2;
    float v5 = (char *)operator new(4 * a2);
    *(void *)a1 = v5;
    float v6 = &v5[v4];
    *(void *)(a1 + 16) = &v5[v4];
    bzero(v5, 4 * a2);
    *(void *)(a1 + 8) = v6;
  }
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  {
    if (v16)
    {
      md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::StyleTexture(unsigned long,md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel = 4;
    }
  }
  unint64_t v8 = v7[165];
  unint64_t v9 = (v8 + 3) / v8;
  unint64_t v10 = vcvtpd_u64_f64(sqrt((double)(v9 * a2)));
  BOOL v11 = v10 > 1;
  unint64_t v12 = (1 << -(char)__clz(v10 - 1));
  if (!v11) {
    unint64_t v12 = 1;
  }
  unint64_t v13 = vcvtpd_u64_f64((double)a2 / (double)(v12 / v9));
  BOOL v11 = v13 > 1;
  uint64_t v14 = (1 << -(char)__clz(v13 - 1));
  if (!v11) {
    uint64_t v14 = 1;
  }
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 72) = v12 / v9;
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 64) = v9 * v8;
  *(float *)(a1 + 88) = 1.0 / (float)v12;
  return a1;
}

void **std::vector<std::pair<unsigned long,std::function<gm::Matrix<float,2,1> ()(unsigned long)>>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      float v5 = v3 - 32;
      float v6 = v3 - 32;
      do
      {
        unint64_t v8 = (char *)*((void *)v6 + 3);
        if (v6 == v8)
        {
          (*(void (**)(char *))(*(void *)v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(char *))(*(void *)v8 + 40))(v8);
        }
        unsigned int v7 = v6 - 8;
        v6 -= 40;
        v5 -= 40;
      }
      while (v7 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

float std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0>,gm::Matrix<float,2,1> ()(unsigned long)>::operator()(uint64_t a1, void *a2)
{
  return *(float *)(**(void **)(a1 + 8) + 12 * *a2);
}

uint64_t std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57DCB0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF57DCB0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_0>,gm::Matrix<float,2,1> ()(unsigned long)>::~__func()
{
}

float std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1>,gm::Matrix<float,2,1> ()(unsigned long)>::operator()(uint64_t a1, void *a2)
{
  return *(float *)(**(void **)(a1 + 8) + 12 * *a2);
}

uint64_t std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57DCF8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF57DCF8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1,std::allocator<md::DaVinciGroundTileData::_prepareBuildingBatches(std::shared_ptr<geo::codec::VectorTile> const&,md::PolygonRound const&,std::unordered_map<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,std::allocator<std::pair<md::DaVinciGroundTileData::BuildingBatchType const,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>> &)::$_1>,gm::Matrix<float,2,1> ()(unsigned long)>::~__func()
{
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[4];
      if (v3)
      {
        uint64_t v4 = v2[5];
        float v5 = (void *)v2[4];
        if (v4 != v3)
        {
          do
          {
            float v6 = *(void **)(v4 - 56);
            if (v6)
            {
              *(void *)(v4 - 48) = v6;
              operator delete(v6);
            }
            unsigned int v7 = *(void **)(v4 - 80);
            if (v7)
            {
              *(void *)(v4 - 72) = v7;
              operator delete(v7);
            }
            v4 -= 80;
          }
          while (v4 != v3);
          float v5 = (void *)v2[4];
        }
        v2[5] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FAA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FAA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#3},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::operator()(uint64_t a1)
{
  return md::DaVinciGroundTileData::_buildBuildings(*(void *)(a1 + 8), *(geo::codec::VectorTile ***)(a1 + 16), **(void **)(a1 + 24), *(float **)(a1 + 40), *(_OWORD **)(a1 + 48));
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#3},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57E8C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#3},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EF57E8C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#3},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#2},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::operator()(uint64_t a1)
{
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#2},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57E880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#2},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF57E880;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#2},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::~__func()
{
}

void md::DaVinciGroundTileData::RibbonAsset::~RibbonAsset(md::DaVinciGroundTileData::RibbonAsset *this)
{
  float v6 = (void **)((char *)this + 32);
  std::vector<altitude::QuickSurfaceManager::Tile>::__destroy_vector::operator()[abi:nn180100](&v6);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        float v5 = *(std::__shared_weak_count **)(v3 - 16);
        if (v5)
        {
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::RibbonMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::RibbonMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::RibbonMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::RibbonVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *geo::range_map<unsigned int,md::DaVinciGroundTileData::TextureMappingData,std::less<unsigned int>,std::allocator<std::pair<gm::Range<unsigned int> const,md::DaVinciGroundTileData::TextureMappingData>>>::insert(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (result[2])
  {
    uint64_t v4 = (uint64_t **)(result + 1);
    if ((uint64_t *)*result == result + 1)
    {
      unint64_t v10 = (uint64_t **)*result;
    }
    else
    {
      unint64_t v5 = 0;
      float v6 = (uint64_t *)*result;
      do
      {
        unsigned int v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            unint64_t v8 = (uint64_t **)v7;
            unsigned int v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            unint64_t v8 = (uint64_t **)v6[2];
            BOOL v9 = *v8 == v6;
            float v6 = (uint64_t *)v8;
          }
          while (!v9);
        }
        ++v5;
        float v6 = (uint64_t *)v8;
      }
      while (v8 != v4);
      unint64_t v10 = (uint64_t **)*result;
      do
      {
        unint64_t v11 = v5 >> 1;
        unint64_t v12 = (uint64_t *)v10;
        if (v5 != 1)
        {
          uint64_t v14 = v5 >> 1;
          float v15 = v10;
          do
          {
            uint64_t v17 = v15[1];
            if (v17)
            {
              do
              {
                unint64_t v12 = v17;
                uint64_t v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                unint64_t v12 = v15[2];
                BOOL v9 = *v12 == (void)v15;
                float v15 = (uint64_t **)v12;
              }
              while (!v9);
            }
            float v15 = (uint64_t **)v12;
          }
          while (v14-- > 1);
        }
        if (*((_DWORD *)v12 + 9) < *(_DWORD *)(a2 + 4))
        {
          unint64_t v13 = (uint64_t *)v12[1];
          if (v13)
          {
            do
            {
              unint64_t v10 = (uint64_t **)v13;
              unint64_t v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              unint64_t v10 = (uint64_t **)v12[2];
              BOOL v9 = *v10 == v12;
              unint64_t v12 = (uint64_t *)v10;
            }
            while (!v9);
          }
          unint64_t v11 = v5 + ~v11;
        }
        unint64_t v5 = v11;
      }
      while (v11);
    }
    if (v10 != v4 && *((_DWORD *)v10 + 8) < *(_DWORD *)(a2 + 4)) {
      return result;
    }
    if (v10 != (uint64_t **)*result)
    {
      float32x2_t v22 = *v10;
      if (*v10)
      {
        do
        {
          uint64_t v23 = v22;
          float32x2_t v22 = (uint64_t *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = v10[2];
          BOOL v9 = *v23 == (void)v10;
          unint64_t v10 = (uint64_t **)v23;
        }
        while (v9);
      }
      if (*(_DWORD *)a2 < *((_DWORD *)v23 + 9)) {
        return result;
      }
    }
    uint64_t v24 = *v4;
    unint64_t v20 = (uint64_t **)(result + 1);
    if (*v4)
    {
      unsigned int v25 = *(_DWORD *)(a2 + 4);
      while (1)
      {
        while (1)
        {
          unint64_t v20 = (uint64_t **)v24;
          unsigned int v26 = *((_DWORD *)v24 + 9);
          if (v25 >= v26) {
            break;
          }
          uint64_t v24 = *v20;
          uint64_t v4 = v20;
          if (!*v20) {
            goto LABEL_54;
          }
        }
        if (v26 >= v25) {
          return result;
        }
        uint64_t v24 = v20[1];
        if (!v24) {
          goto LABEL_52;
        }
      }
    }
LABEL_54:
    unint64_t v27 = operator new(0x40uLL);
    long long v28 = *(_OWORD *)(a2 + 16);
    v27[2] = *(_OWORD *)a2;
    v27[3] = v28;
    *(void *)unint64_t v27 = 0;
    *((void *)v27 + 1) = 0;
    *((void *)v27 + 2) = v20;
    *uint64_t v4 = (uint64_t *)v27;
    uint64_t v29 = *(void *)*v3;
    if (v29)
    {
      uint64_t *v3 = v29;
      float32x2_t v30 = *v4;
    }
    else
    {
      float32x2_t v30 = (uint64_t *)v27;
    }
    __n128 result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[1], v30);
    ++v3[2];
    return result;
  }
  uint64_t v4 = (uint64_t **)(result + 1);
  uint64_t v18 = result[1];
  if (!v18)
  {
    unint64_t v20 = (uint64_t **)(result + 1);
    goto LABEL_54;
  }
  unsigned int v19 = *(_DWORD *)(a2 + 4);
  while (1)
  {
    while (1)
    {
      unint64_t v20 = (uint64_t **)v18;
      unsigned int v21 = *(_DWORD *)(v18 + 36);
      if (v19 >= v21) {
        break;
      }
      uint64_t v18 = (uint64_t)*v20;
      uint64_t v4 = v20;
      if (!*v20) {
        goto LABEL_54;
      }
    }
    if (v21 >= v19) {
      return result;
    }
    uint64_t v18 = (uint64_t)v20[1];
    if (!v18)
    {
LABEL_52:
      uint64_t v4 = v20 + 1;
      goto LABEL_54;
    }
  }
}

void *std::pair<md::ServerDrapedMesh,std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>::~pair(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[5];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
LABEL_4:
    a1[6] = v3;
    operator delete(v3);
  }
LABEL_5:
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void md::ServerDrapedMesh::~ServerDrapedMesh(md::ServerDrapedMesh *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::__shared_ptr_emplace<md::MeshConnectivity>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<md::MeshConnectivity>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::MeshConnectivity>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::DistanceCompressedMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::DistanceCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::DistanceCompressedMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::ElevationMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevationMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::ElevationMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::DistanceCompressedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::DistanceCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5850D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::DistanceCompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5850D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ElevationVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::function<void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

gdc::DCEL **std::unique_ptr<gdc::DCEL>::~unique_ptr[abi:nn180100](gdc::DCEL **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    gdc::DCEL::~DCEL(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

gdc::DCEL *std::__shared_ptr_pointer<gdc::DCEL  *>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(gdc::DCEL **)(a1 + 24);
  if (result)
  {
    gdc::DCEL::~DCEL(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<gdc::DCEL  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__function::__func<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0,std::allocator<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  int v4 = *a4;
  uint64_t v5 = *(void *)(a1 + 48);
  float v6 = *(_DWORD **)v5;
  unsigned int v7 = *(_DWORD **)(v5 + 8);
  if (v6 == v7)
  {
LABEL_8:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unint64_t v13 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v91 = v4;
      _os_log_impl(&dword_1A1780000, v13, OS_LOG_TYPE_ERROR, "could not find vtx offset for face %d", buf, 8u);
    }
  }
  else
  {
    int v9 = *a3;
    uint64_t v10 = (**(_DWORD **)(a1 + 32) + 3 * v4);
    while (*v6 > v10 || v6[1] <= v10)
    {
      v6 += 4;
      if (v6 == v7) {
        goto LABEL_8;
      }
    }
    uint64_t v11 = v6[2];
    if (v10 < 0xFFFFFFFD)
    {
      for (unint64_t i = (**(_DWORD **)(a1 + 32) + 3 * v4); i < (v10 + 3); ++i)
      {
        uint64_t v15 = *(void *)(a1 + 40);
        unint64_t v16 = v11 + *(unsigned __int16 *)(*(void *)(a1 + 8) + 2 * i);
        uint64_t v17 = (char *)operator new(0x20uLL);
        *((_DWORD *)v17 + 4) = v16;
        *(void *)(v17 + 20) = v11 | (i << 32);
        *(void *)uint64_t v17 = 0;
        *((void *)v17 + 1) = v16;
        unint64_t v18 = *(void *)(v15 + 8);
        float v19 = (float)(unint64_t)(*(void *)(v15 + 24) + 1);
        float v20 = *(float *)(v15 + 32);
        if (!v18 || (float)(v20 * (float)v18) < v19)
        {
          BOOL v21 = (v18 & (v18 - 1)) != 0;
          if (v18 < 3) {
            BOOL v21 = 1;
          }
          unint64_t v22 = v21 | (2 * v18);
          unint64_t v23 = vcvtps_u32_f32(v19 / v20);
          if (v22 <= v23) {
            size_t prime = v23;
          }
          else {
            size_t prime = v22;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
            unint64_t v18 = *(void *)(v15 + 8);
          }
          if (prime > v18) {
            goto LABEL_136;
          }
          if (prime >= v18) {
            goto LABEL_55;
          }
          unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(v15 + 24) / *(float *)(v15 + 32));
          if (v18 < 3 || (uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v18), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
          {
            unint64_t v38 = std::__next_prime(v38);
          }
          else
          {
            uint64_t v40 = 1 << -(char)__clz(v38 - 1);
            if (v38 >= 2) {
              unint64_t v38 = v40;
            }
          }
          if (prime <= v38) {
            size_t prime = v38;
          }
          if (prime >= v18)
          {
            unint64_t v18 = *(void *)(v15 + 8);
            goto LABEL_55;
          }
          if (prime)
          {
LABEL_136:
            if (prime >> 61) {
              goto LABEL_132;
            }
            unsigned int v25 = operator new(8 * prime);
            unsigned int v26 = *(void **)v15;
            *(void *)uint64_t v15 = v25;
            if (v26) {
              operator delete(v26);
            }
            uint64_t v27 = 0;
            *(void *)(v15 + 8) = prime;
            do
              *(void *)(*(void *)v15 + 8 * v27++) = 0;
            while (prime != v27);
            uint64_t v29 = v15 + 16;
            long long v28 = *(uint64_t ***)(v15 + 16);
            if (v28)
            {
              size_t v30 = (size_t)v28[1];
              size_t v31 = prime - 1;
              if ((prime & (prime - 1)) != 0)
              {
                if (v30 >= prime) {
                  v30 %= prime;
                }
                *(void *)(*(void *)v15 + 8 * v30) = v29;
                for (uint64_t j = *v28; *v28; uint64_t j = *v28)
                {
                  size_t v50 = j[1];
                  if (v50 >= prime) {
                    v50 %= prime;
                  }
                  if (v50 == v30)
                  {
                    long long v28 = (uint64_t **)j;
                  }
                  else
                  {
                    uint64_t v51 = j;
                    if (*(void *)(*(void *)v15 + 8 * v50))
                    {
                      do
                      {
                        uint64_t v52 = v51;
                        uint64_t v51 = (uint64_t *)*v51;
                      }
                      while (v51 && *((_DWORD *)j + 4) == *((_DWORD *)v51 + 4));
                      *long long v28 = v51;
                      uint64_t v53 = 8 * v50;
                      *uint64_t v52 = **(void **)(*(void *)v15 + v53);
                      **(void **)(*(void *)v15 + v53) = j;
                    }
                    else
                    {
                      *(void *)(*(void *)v15 + 8 * v50) = v28;
                      long long v28 = (uint64_t **)j;
                      size_t v30 = v50;
                    }
                  }
                }
              }
              else
              {
                size_t v32 = v30 & v31;
                *(void *)(*(void *)v15 + 8 * v32) = v29;
                for (k = *v28; *v28; k = *v28)
                {
                  size_t v34 = k[1] & v31;
                  if (v34 == v32)
                  {
                    long long v28 = (uint64_t **)k;
                  }
                  else
                  {
                    unint64_t v35 = k;
                    if (*(void *)(*(void *)v15 + 8 * v34))
                    {
                      do
                      {
                        float v36 = v35;
                        unint64_t v35 = (uint64_t *)*v35;
                      }
                      while (v35 && *((_DWORD *)k + 4) == *((_DWORD *)v35 + 4));
                      *long long v28 = v35;
                      uint64_t v37 = 8 * v34;
                      *float v36 = **(void **)(*(void *)v15 + v37);
                      **(void **)(*(void *)v15 + v37) = k;
                    }
                    else
                    {
                      *(void *)(*(void *)v15 + 8 * v34) = v28;
                      long long v28 = (uint64_t **)k;
                      size_t v32 = v34;
                    }
                  }
                }
              }
            }
            unint64_t v18 = prime;
          }
          else
          {
            size_t v62 = *(void **)v15;
            *(void *)uint64_t v15 = 0;
            if (v62) {
              operator delete(v62);
            }
            unint64_t v18 = 0;
            *(void *)(v15 + 8) = 0;
          }
        }
LABEL_55:
        uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
        v42.i16[0] = vaddlv_u8(v42);
        if (v42.u32[0] >= 2uLL)
        {
          unint64_t v54 = v16;
          if (v18 <= v16) {
            unint64_t v54 = v16 % v18;
          }
          char v55 = *(uint64_t **)(*(void *)v15 + 8 * v54);
          if (!v55)
          {
            long long v48 = 0;
            unint64_t v61 = *((void *)v17 + 1);
            if (v61 < v18) {
              goto LABEL_93;
            }
LABEL_92:
            v61 %= v18;
            goto LABEL_93;
          }
          int v56 = 0;
          do
          {
            long long v48 = v55;
            char v55 = (uint64_t *)*v55;
            if (!v55) {
              break;
            }
            unint64_t v59 = v55[1];
            unint64_t v60 = v59;
            if (v59 >= v18) {
              unint64_t v60 = v59 % v18;
            }
            if (v60 != v54) {
              break;
            }
            BOOL v57 = v59 == v16 && *((_DWORD *)v55 + 4) == *((_DWORD *)v17 + 4);
            int v58 = v56 & !v57;
            v56 |= v57;
          }
          while (v58 != 1);
        }
        else
        {
          uint64_t v43 = (v18 - 1) & v16;
          unint64_t v44 = *(uint64_t **)(*(void *)v15 + 8 * v43);
          if (!v44)
          {
            long long v48 = 0;
            unint64_t v61 = *((void *)v17 + 1);
LABEL_90:
            v61 &= v18 - 1;
            goto LABEL_93;
          }
          int v45 = 0;
          do
          {
            long long v48 = v44;
            unint64_t v44 = (uint64_t *)*v44;
            if (!v44) {
              break;
            }
            uint64_t v49 = v44[1];
            if ((v49 & (v18 - 1)) != v43) {
              break;
            }
            BOOL v46 = v49 == v16 && *((_DWORD *)v44 + 4) == *((_DWORD *)v17 + 4);
            char v47 = v45 & !v46;
            v45 |= v46;
          }
          while ((v47 & 1) == 0);
        }
        unint64_t v61 = *((void *)v17 + 1);
        if (v42.u32[0] <= 1uLL) {
          goto LABEL_90;
        }
        if (v61 >= v18) {
          goto LABEL_92;
        }
LABEL_93:
        if (v48)
        {
          *(void *)uint64_t v17 = *v48;
          *long long v48 = v17;
          if (!*(void *)v17) {
            goto LABEL_15;
          }
          unint64_t v14 = *(void *)(*(void *)v17 + 8);
          if (v42.u32[0] > 1uLL)
          {
            if (v14 >= v18) {
              v14 %= v18;
            }
          }
          else
          {
            v14 &= v18 - 1;
          }
          if (v14 == v61) {
            goto LABEL_15;
          }
        }
        else
        {
          *(void *)uint64_t v17 = *(void *)(v15 + 16);
          *(void *)(v15 + 16) = v17;
          *(void *)(*(void *)v15 + 8 * v61) = v15 + 16;
          if (!*(void *)v17) {
            goto LABEL_15;
          }
          unint64_t v14 = *(void *)(*(void *)v17 + 8);
          if (v42.u32[0] <= 1uLL)
          {
            v14 &= v18 - 1;
          }
          else if (v14 >= v18)
          {
            v14 %= v18;
          }
        }
        *(void *)(*(void *)v15 + 8 * v14) = v17;
LABEL_15:
        ++*(void *)(v15 + 24);
      }
    }
    uint64_t v63 = *(void *)(a1 + 8);
    uint64_t v64 = *(char ***)(a1 + 16);
    uint64_t v65 = *(void *)(a1 + 24);
    long long v66 = (int *)(v65 + 12 * (v11 + *(unsigned __int16 *)(v63 + 2 * v10)));
    int v67 = *v66;
    *(void *)&long long v68 = *(void *)(v66 + 1);
    float v69 = (uint64_t *)(v65 + 12 * (v11 + *(unsigned __int16 *)(v63 + 2 * (v10 + 1))));
    uint64_t v70 = *v69;
    int v71 = *((_DWORD *)v69 + 2);
    __int32 v72 = (int *)(v65 + 12 * (v11 + *(unsigned __int16 *)(v63 + 2 * (v10 + 2))));
    int v74 = *v72;
    int v73 = v72[1];
    int v75 = v72[2];
    float32x2_t v77 = v64[1];
    unint64_t v76 = (unint64_t)v64[2];
    if ((unint64_t)v77 >= v76)
    {
      float32x2_t v79 = *v64;
      unint64_t v80 = 0xCCCCCCCCCCCCCCCDLL * ((v77 - *v64) >> 3);
      unint64_t v81 = v80 + 1;
      if (v80 + 1 > 0x666666666666666) {
        abort();
      }
      unint64_t v82 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v76 - (void)v79) >> 3);
      if (2 * v82 > v81) {
        unint64_t v81 = 2 * v82;
      }
      if (v82 >= 0x333333333333333) {
        unint64_t v83 = 0x666666666666666;
      }
      else {
        unint64_t v83 = v81;
      }
      if (v83)
      {
        uint64_t v88 = v70;
        uint64_t v89 = v68;
        if (v83 > 0x666666666666666) {
LABEL_132:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        float32x2_t v84 = (char *)operator new(40 * v83);
        uint64_t v70 = v88;
        *(void *)&long long v68 = v89;
      }
      else
      {
        float32x2_t v84 = 0;
      }
      float32x2_t v85 = &v84[40 * v80];
      *(_DWORD *)float32x2_t v85 = v9;
      *((_DWORD *)v85 + 1) = v67;
      *((void *)&v68 + 1) = v70;
      *(_OWORD *)(v85 + 8) = v68;
      *((_DWORD *)v85 + 6) = v71;
      *((_DWORD *)v85 + 7) = v74;
      *((_DWORD *)v85 + 8) = v73;
      *((_DWORD *)v85 + 9) = v75;
      float32x2_t v78 = v85 + 40;
      if (v77 != v79)
      {
        do
        {
          long long v86 = *(_OWORD *)(v77 - 40);
          long long v87 = *(_OWORD *)(v77 - 24);
          *((void *)v85 - 1) = *((void *)v77 - 1);
          *(_OWORD *)(v85 - 24) = v87;
          *(_OWORD *)(v85 - 40) = v86;
          v85 -= 40;
          v77 -= 40;
        }
        while (v77 != v79);
        float32x2_t v77 = *v64;
      }
      *uint64_t v64 = v85;
      v64[1] = v78;
      v64[2] = &v84[40 * v83];
      if (v77) {
        operator delete(v77);
      }
    }
    else
    {
      *(_DWORD *)float32x2_t v77 = v9;
      *((_DWORD *)v77 + 1) = v67;
      *((void *)&v68 + 1) = v70;
      *(_OWORD *)(v77 + 8) = v68;
      *((_DWORD *)v77 + 6) = v71;
      *((_DWORD *)v77 + 7) = v74;
      *((_DWORD *)v77 + 8) = v73;
      *((_DWORD *)v77 + 9) = v75;
      float32x2_t v78 = v77 + 40;
    }
    v64[1] = v78;
  }
}

void sub_1A25D85C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0,std::allocator<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5755A0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0,std::allocator<md::DaVinciGroundTileData::_buildNormals(gm::Matrix<float,3,1> const*,unsigned int,unsigned int,std::vector<md::IndexRangeInfo> const&,unsigned short const*,float,std::unordered_map<unsigned int,unsigned int> &,std::vector<gm::Range<unsigned int>> &,std::vector<gm::Matrix<float,3,1>,geo::StdAllocator<gm::Matrix<float,3,1>,geo::codec::Allocator>> &,md::DaVinciGroundTileData::MeshIndices &,std::vector<md::BadTriangle> &,std::string const&,md::DaVinciGroundTileData::ConnectivityInfo *)::$_0>,void ()(gdc::DCEL const*,gdc::DCEL::Warning,unsigned int)>::~__func()
{
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#1},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::operator()(uint64_t a1)
{
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#1},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57E910;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#1},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EF57E910;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0::operator() const(ggl::ResourceAccessor *)::{lambda(void)#1},std::allocator<ggl::ResourceAccessor *>,void ()(void)>::~__func()
{
}

md::MaterialRaster **std::unique_ptr<md::MaterialRaster>::~unique_ptr[abi:nn180100](md::MaterialRaster **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::MaterialRaster::~MaterialRaster(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

void std::__shared_ptr_emplace<md::StyleAttributeRasterSet>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      float v6 = (md::MaterialRaster *)v2[3];
      v2[3] = 0;
      if (v6)
      {
        md::MaterialRaster::~MaterialRaster(v6);
        MEMORY[0x1A6239270]();
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  long long v3 = (void *)a1[8];
  a1[8] = 0;
  if (v3) {
    operator delete(v3);
  }
  int v4 = (void *)a1[5];
  while (v4)
  {
    unsigned int v7 = v4;
    int v4 = (void *)*v4;
    unint64_t v8 = (std::__shared_weak_count *)v7[4];
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    operator delete(v7);
  }
  int v9 = (void *)a1[3];
  a1[3] = 0;
  if (v9)
  {
    operator delete(v9);
  }
}

void std::__shared_ptr_emplace<md::StyleAttributeRasterSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::StyleAttributeRasterSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::unique_ptr<md::MaterialRaster>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::unique_ptr<md::MaterialRaster>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      long long v3 = (md::MaterialRaster *)v2[3];
      v2[3] = 0;
      if (v3)
      {
        md::MaterialRaster::~MaterialRaster(v3);
        MEMORY[0x1A6239270]();
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5755E8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

__n128 std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_1EF5755E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)v2 + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  *((__n128 *)v2 + 2) = result;
  *((_OWORD *)v2 + 3) = v5;
  *((void *)v2 + 8) = *(void *)(a1 + 64);
  return result;
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF5755E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::~__func(void *a1)
{
  *a1 = &unk_1EF5755E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

float md::DaVinciGroundTileData::_edgeSmoothingAngleForZ(md::DaVinciGroundTileData *this)
{
  uint64_t v1 = +[VKDebugSettings sharedSettings];
  unsigned int v2 = [v1 daVinciSmoothEdgeMinZ];
  unsigned int v3 = [v1 daVinciSmoothEdgeMaxZ];
  [v1 daVinciSmoothEdgeMinZAngle];
  float v5 = v4;
  [v1 daVinciSmoothEdgeMaxZAngle];
  float v7 = (float)(v5
             + (float)((float)(v6 - v5)
                     * fminf(fmaxf((float)(17.0 - (float)v2) / (float)((float)v3 - (float)v2), 0.0), 1.0)))
     * 0.017453;

  return v7;
}

void sub_1A25D8C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *md::DaVinciGroundTileData::_buildIndexBuffer(md::DaVinciGroundTileData *this, const char *a2, ResourceAccessor *a3, const unsigned __int16 *a4)
{
  unsigned int v4 = a4;
  unint64_t v8 = operator new(0xF8uLL);
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = &unk_1EF589D68;
  int v9 = (char *)(v8 + 3);
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 2, 1, 0, 1, v4);
  v8[3] = &unk_1EF561BA0;
  v8[4] = 2;
  v8[28] = &unk_1EF561BC0;
  v8[29] = "DV Asset Indices";
  *((_DWORD *)v8 + 60) = 0;
  *(void *)this = v8 + 3;
  *((void *)this + 1) = v8;
  if (v4)
  {
    if (!a2 || *((unsigned char *)v8 + 41) == 2) {
      uint64_t v10 = (void *)v8[12];
    }
    else {
      uint64_t v10 = (void *)(*(uint64_t (**)(const char *, char *, void, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v9, 0, 2 * v4, 1, 1);
    }
    __n128 result = memcpy(v10, a3, 2 * v4);
    if (v10) {
      BOOL v12 = v4 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12 && a2 && *((unsigned char *)v8 + 41) != 2)
    {
      unint64_t v13 = *(uint64_t (**)(const char *, void *, char *, void, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64);
      return (void *)v13(a2, v10, v9, 0, 2 * v4, 1, 1);
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<ggl::PatternedRibbon::WriteStencilBasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PatternedRibbon::WriteStencilBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584230;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PatternedRibbon::WriteStencilBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL md::PatternedBatchKey::operator==(_DWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 240);
  uint64_t v4 = *(void *)(*(void *)a1 + 248);
  uint64_t v6 = *(void *)(a2 + 240);
  if (v4 - v5 != *(void *)(a2 + 248) - v6) {
    return 0;
  }
  if (v5 != v4)
  {
    while (*(_DWORD *)v5 == *(_DWORD *)v6 && *(unsigned __int16 *)(v5 + 4) == *(unsigned __int16 *)(v6 + 4))
    {
      v5 += 8;
      v6 += 8;
      if (v5 == v4) {
        goto LABEL_9;
      }
    }
    return 0;
  }
LABEL_9:
  unint64_t v8 = *(unsigned __int16 *)(v3 + 282);
  if (v8 != *(unsigned __int16 *)(a2 + 282)) {
    return 0;
  }
  if (*(_WORD *)(v3 + 282))
  {
    int v9 = *(_DWORD **)(v3 + 272);
    uint64_t v10 = *(_DWORD **)(a2 + 272);
    if (*v9 == *v10)
    {
      uint64_t v11 = *(unsigned __int16 *)(a2 + 280);
      uint64_t v12 = *(unsigned __int16 *)(v3 + 280);
      if (*(unsigned __int16 *)((char *)v9 + v12) == *(unsigned __int16 *)((char *)v10 + v11))
      {
        unint64_t v13 = 0;
        unint64_t v14 = v9 + 1;
        uint64_t v15 = v10 + 1;
        uint64_t v16 = (uint64_t)v9 + v12 + 2;
        uint64_t v17 = (uint64_t)v10 + v11 + 2;
        while (v8 - 1 != v13)
        {
          if (v14[v13] != v15[v13])
          {
            ++v13;
LABEL_19:
            if (v13 >= v8) {
              return a1[4] == a3;
            }
            return 0;
          }
          int v18 = *(unsigned __int16 *)(v16 + 2 * v13);
          int v19 = *(unsigned __int16 *)(v17 + 2 * v13++);
          if (v18 != v19) {
            goto LABEL_19;
          }
        }
        return a1[4] == a3;
      }
    }
    return 0;
  }
  return a1[4] == a3;
}

uint64_t md::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(void *a1)
{
  *a1 = &unk_1EF530ED8;
  unsigned int v2 = (std::__shared_weak_count *)a1[116];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *a1 = &unk_1EF530ED8;
  unsigned int v2 = (std::__shared_weak_count *)a1[116];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553910;
  unsigned int v2 = *(uint64_t **)(a1 + 888);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 896);
    uint64_t v4 = *(void **)(a1 + 888);
    if (v3 != v2)
    {
      do
        std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](--v3, 0);
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 888);
    }
    *(void *)(a1 + 896) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 864);
  do
  {
    if (v5[1])
    {
      unint64_t v6 = 0;
      float v7 = v5 + 2;
      unint64_t v8 = v5 + 2;
      int v9 = (void (***)(void))(v5 + 2);
      do
      {
        uint64_t v10 = (void (**)(void *))*v9;
        v9 += 15;
        (*v10)(v8);
        ++v6;
        v7 += 15;
        unint64_t v8 = v9;
      }
      while (v6 < v5[1]);
    }
    v5[1] = 0;
    uint64_t v5 = (void *)*v5;
  }
  while (v5);
  uint64_t v11 = *(void ***)(a1 + 864);
  *(void *)(a1 + 872) = v11;
  uint64_t v12 = *v11;
  int16x8_t *v11 = 0;
  if (v12)
  {
    do
    {
      unint64_t v13 = (void *)*v12;
      free(v12);
      uint64_t v12 = v13;
    }
    while (v13);
    uint64_t v11 = *(void ***)(a1 + 864);
  }
  free(v11);
  unint64_t v14 = *(void **)(a1 + 840);
  if (v14)
  {
    *(void *)(a1 + 848) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 808);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 816);
    uint64_t v17 = *(void *)(a1 + 808);
    if (v16 != v15)
    {
      uint64_t v18 = *(void *)(a1 + 816);
      do
      {
        float v20 = *(void **)(v18 - 24);
        v18 -= 24;
        int v19 = v20;
        if (v20)
        {
          *(void *)(v16 - 16) = v19;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = *(void *)(a1 + 808);
    }
    *(void *)(a1 + 816) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 832) + 40))(*(void *)(a1 + 832), v17, *(void *)(a1 + 824) - v17);
  }
  BOOL v21 = *(void **)(a1 + 784);
  if (v21)
  {
    *(void *)(a1 + 792) = v21;
    operator delete(v21);
  }
  *(void *)(a1 + 656) = &off_1EF55A458;
  *(void *)(a1 + 672) = 3131955885;
  *(void *)(a1 + 528) = &off_1EF55A458;
  *(void *)(a1 + 544) = 3131955885;
  *(void *)(a1 + 400) = &off_1EF55A458;
  *(void *)(a1 + 416) = 3131955885;
  *(void *)(a1 + 272) = &off_1EF55A458;
  *(void *)(a1 + 288) = 3131955885;
  *(void *)(a1 + 144) = &off_1EF55A458;
  *(void *)(a1 + 160) = 3131955885;
  *(void *)(a1 + 16) = &off_1EF55A458;
  *(void *)(a1 + 32) = 3131955885;
  return a1;
}

uint64_t *std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 56);
    if (v3)
    {
      uint64_t v4 = *(void **)(v2 + 64);
      uint64_t v5 = *(void *)(v2 + 56);
      if (v4 != v3)
      {
        do
        {
          float v7 = (void (***)(void, uint64_t))*--v4;
          unint64_t v6 = v7;
          *uint64_t v4 = 0;
          if (v7)
          {
            (**v6)(v6, v5);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v6, 120);
          }
        }
        while (v4 != v3);
        uint64_t v5 = *(void *)(v2 + 56);
      }
      *(void *)(v2 + 64) = v3;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 80) + 40))(*(void *)(v2 + 80), v5, *(void *)(v2 + 72) - v5);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::ConstantDataTyped<ggl::PatternedRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::PatternedRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PatternedRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PatternedRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PatternedRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::PatternedBatch::~PatternedBatch(md::PatternedBatch *this)
{
  md::PatternedBatch::~PatternedBatch(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t vars8;

  *(void *)this = &unk_1EF5343A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 129);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 127);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 127);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 125);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *((void *)this + 123);
  *((void *)this + 123) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  unint64_t v6 = *((void *)this + 122);
  *((void *)this + 122) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  float v7 = *((void *)this + 121);
  *((void *)this + 121) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  unint64_t v8 = *((void *)this + 120);
  *((void *)this + 120) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  int v9 = *((void *)this + 119);
  *((void *)this + 119) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 118);
  *((void *)this + 118) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *(void *)this = &unk_1EF530ED8;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 116);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

void md::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(void *a1)
{
  *a1 = &unk_1EF530ED8;
  uint64_t v2 = (std::__shared_weak_count *)a1[116];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::Ribbons::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A6239270);
}

void md::PatternedPipelineStateManager::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned __int8 a3, __int8 a4, __int8 a5, __int8 a6, __int8 a7, __int8 a8)
{
  int8x16_t v12 = (int8x16_t)a3;
  v12.i8[1] = a4;
  v12.i8[2] = a5;
  v12.i8[5] = a6;
  v12.i8[6] = a7;
  v12.i8[11] = a8;
  int8x16_t v13 = vceqzq_s8(v12);
  int16x8_t v14 = vmovl_s8(*(int8x8_t *)v13.i8);
  int32x4_t v15 = vmovl_high_s16(v14);
  v16.i64[0] = v15.u32[2];
  v16.i64[1] = v15.u32[3];
  int8x16_t v17 = v16;
  int16x8_t v18 = vmovl_high_s8(v13);
  int32x4_t v19 = vmovl_high_s16(v18);
  v16.i64[0] = v19.u32[2];
  v16.i64[1] = v19.u32[3];
  int8x16_t v20 = v16;
  int32x4_t v21 = vmovl_s16(*(int16x4_t *)v14.i8);
  v16.i64[0] = v21.u32[2];
  v16.i64[1] = v21.u32[3];
  int8x16_t v22 = v16;
  int32x4_t v23 = vmovl_s16(*(int16x4_t *)v18.i8);
  v16.i64[0] = v23.u32[2];
  v16.i64[1] = v23.u32[3];
  int8x16_t v24 = v16;
  v16.i64[0] = v15.u32[0];
  v16.i64[1] = v15.u32[1];
  int8x16_t v25 = v16;
  v16.i64[0] = v19.u32[0];
  v16.i64[1] = v19.u32[1];
  int8x16_t v26 = v16;
  v16.i64[0] = v21.u32[0];
  v16.i64[1] = v21.u32[1];
  int8x16_t v27 = v16;
  v16.i64[0] = v23.u32[0];
  v16.i64[1] = v23.u32[1];
  unint64_t v28 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v27), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v25), vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v26))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v22), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC980, v17), vbicq_s8((int8x16_t)xmmword_1A28FC990, v20)))));
  unint64_t v29 = v28;
  size_t v31 = (uint64_t **)(a2 + 104);
  size_t v30 = *(void **)(a2 + 104);
  if (!v30) {
    goto LABEL_12;
  }
  size_t v32 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v33 = v30[4];
    BOOL v34 = v33 >= v28;
    if (v33 >= v28) {
      unint64_t v35 = v30;
    }
    else {
      unint64_t v35 = v30 + 1;
    }
    if (v34) {
      size_t v32 = (uint64_t **)v30;
    }
    size_t v30 = (void *)*v35;
  }
  while (*v35);
  if (v32 != v31 && v28 >= (unint64_t)v32[4])
  {
    *a1 = (std::__shared_weak_count *)v32[5];
    int64_t v119 = v32[6];
    a1[1] = (std::__shared_weak_count *)v119;
    if (v119) {
      atomic_fetch_add_explicit(v119 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    float v36 = (std::__shared_weak_count *)operator new(0x198uLL);
    v36->__shared_owners_ = 0;
    v36->__shared_weak_owners_ = 0;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5841F8;
    uint64_t v37 = v36 + 1;
    long long v125 = *(_OWORD *)(a2 + 16);
    long long v126 = *(_OWORD *)(a2 + 32);
    {
      if (v120)
      {
        {
          if (v120)
          {
            {
              {
                ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PatternedRibbon::defaultVboReflection;
              }
              ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::attributesReflection(void)::r;
              unk_1EB31EC48 = 1;
            }
            ggl::PatternedRibbon::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PatternedRibbon::DefaultVbo>::typedReflection(void)::r;
            *(void *)algn_1EB31EBC8 = &ggl::PatternedRibbon::pipelineDataBasePipelineDeviceStructs(void)::ref;
            qword_1EB31EBD0 = 0;
            {
              ggl::PatternedRibbon::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1EB31EC00 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EB31EC08 = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
              unk_1EB31EC10 = ggl::Tile::Clipping::reflection(void)::reflection;
            }
            qword_1EB31EBD8 = (uint64_t)&ggl::PatternedRibbon::pipelineDataBasePipelineConstantStructs(void)::ref;
            unk_1EB31EBE0 = xmmword_1A28FE1F0;
          }
        }
        ggl::PatternedRibbon::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PatternedRibbon::BasePipelineSetup::typedReflection(void)::ref;
        ggl::PatternedRibbonShader::typedReflection(v120);
        qword_1E958DBA0 = (uint64_t)&ggl::PatternedRibbonShader::typedReflection(void)::ref;
        {
          ggl::PatternedRibbon::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
          unk_1E957F3A0 = 0;
          qword_1E957F3A8 = (uint64_t)"";
          dword_1E957F3B0 = 0;
          qword_1E957F3B8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
          unk_1E957F3C0 = 5;
        }
        qword_1E958DBA8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
        unk_1E958DBB0 = 1;
        qword_1E958DBB8 = 0;
        unk_1E958DBC0 = 1;
        qword_1E958DBC8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
        unk_1E958DBD0 = 0;
        {
          ggl::PatternedRibbon::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
          unk_1E95835D0 = 0;
          qword_1E95835D8 = (uint64_t)"view";
          dword_1E95835E0 = 3;
          qword_1E95835E8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
          *(_OWORD *)algn_1E95835F0 = xmmword_1A28FCEB0;
          qword_1E9583600 = 1;
          unk_1E9583608 = "transform";
          dword_1E9583610 = 3;
          qword_1E9583618 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
          unk_1E9583620 = xmmword_1A28FCF70;
          qword_1E9583630 = 2;
          unk_1E9583638 = "style";
          dword_1E9583640 = 3;
          qword_1E9583648 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
          *(_OWORD *)algn_1E9583650 = xmmword_1A28FF750;
          qword_1E9583660 = 3;
          unk_1E9583668 = "tileClipping";
          dword_1E9583670 = 3;
          qword_1E9583678 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineConstantTileClippingBinding(void)::reflection;
          unk_1E9583680 = 2;
        }
        qword_1E958DBD8 = (uint64_t)&ggl::PatternedRibbon::pipelineStateBasePipelineConstantStructBinding(void)::ref;
        unk_1E958DBE0 = 4;
      }
    }
    unint64_t v38 = *(std::__shared_weak_count_vtbl **)a2;
    uint8x8_t v39 = *(std::__shared_weak_count **)(a2 + 8);
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)unint64_t v127 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v127[12] = *(_OWORD *)(a2 + 60);
    long long v40 = *(_OWORD *)(a2 + 76);
    char v41 = *(unsigned char *)(a2 + 92);
    v36[1].__shared_weak_owners_ = 0;
    v36[2].__vftable = 0;
    LODWORD(v36[2].__shared_owners_) = 0;
    v36[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v36[1].__shared_owners_ = 0;
    v36[2].__shared_weak_owners_ = (uint64_t)&ggl::PatternedRibbon::BasePipelineState::typedReflection(void)::ref;
    v36[3].__vftable = v38;
    v36[3].__shared_owners_ = (uint64_t)v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v36[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v36[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v36[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v36[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v36[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v36[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v36[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v36[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v36[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v36[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v36[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v36[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v36[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v36[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v36[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v36[11].__shared_weak_owners_ = v125;
    *(_OWORD *)&v36[12].__shared_owners_ = v126;
    LOBYTE(v36[13].__vftable) = 0;
    v36[16].__vftable = 0;
    *(_OWORD *)&v36[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v36[15].__shared_owners_ = 0u;
    *(_OWORD *)&v36[13].__shared_owners_ = 0u;
    v36[14].std::__shared_count = 0u;
    v36[16].__shared_owners_ = 0x100000001;
    LOBYTE(v36[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v36[4].std::__shared_count + 4) = *(std::__shared_count *)&v127[12];
    *(_OWORD *)&v36[3].__shared_weak_owners_ = *(_OWORD *)v127;
    *(_OWORD *)((char *)&v36[4].__shared_weak_owners_ + 4) = v40;
    BYTE4(v36[5].__shared_owners_) = v41;
    if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    LOBYTE(v36[13].__shared_weak_owners_) = a3;
    BYTE1(v36[13].__shared_weak_owners_) = a4;
    BYTE2(v36[13].__shared_weak_owners_) = a5;
    *(_WORD *)((char *)&v36[13].__shared_weak_owners_ + 3) = 0;
    BYTE5(v36[13].__shared_weak_owners_) = a6;
    BYTE6(v36[13].__shared_weak_owners_) = a7;
    *(_DWORD *)((char *)&v36[13].__shared_weak_owners_ + 7) = 0;
    BYTE3(v36[14].__vftable) = a8;
    int8x16_t v42 = *(int8x16_t *)&v36[14].__shared_owners_;
    int8x16_t v43 = vceqzq_s8(*(int8x16_t *)&v36[13].__shared_weak_owners_);
    int16x8_t v44 = vmovl_high_s8(v43);
    int32x4_t v45 = vmovl_s16(*(int16x4_t *)v44.i8);
    v46.i64[0] = v45.u32[0];
    v46.i64[1] = v45.u32[1];
    int8x16_t v47 = v46;
    int16x8_t v48 = vmovl_s8(*(int8x8_t *)v43.i8);
    int32x4_t v49 = vmovl_s16(*(int16x4_t *)v48.i8);
    v46.i64[0] = v49.u32[0];
    v46.i64[1] = v49.u32[1];
    int8x16_t v50 = v46;
    int32x4_t v51 = vmovl_high_s16(v44);
    v46.i64[0] = v51.u32[0];
    v46.i64[1] = v51.u32[1];
    int8x16_t v52 = v46;
    int32x4_t v53 = vmovl_high_s16(v48);
    v46.i64[0] = v53.u32[0];
    v46.i64[1] = v53.u32[1];
    int8x16_t v54 = v46;
    v46.i64[0] = v45.u32[2];
    v46.i64[1] = v45.u32[3];
    int8x16_t v55 = v46;
    v46.i64[0] = v49.u32[2];
    v46.i64[1] = v49.u32[3];
    int8x16_t v56 = v46;
    v46.i64[0] = v51.u32[2];
    v46.i64[1] = v51.u32[3];
    int8x16_t v57 = v46;
    v46.i64[0] = v53.u32[2];
    v46.i64[1] = v53.u32[3];
    int8x16_t v58 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v46);
    v36[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55BCE0;
    int8x16_t v59 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v57);
    int8x16_t v60 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v56);
    int8x16_t v61 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v52);
    int8x16_t v62 = vceqzq_s8(v42);
    int16x8_t v63 = vmovl_high_s8(v62);
    int32x4_t v64 = vmovl_s16(*(int16x4_t *)v63.i8);
    v46.i64[0] = v64.u32[0];
    v46.i64[1] = v64.u32[1];
    int8x16_t v65 = v46;
    int16x8_t v66 = vmovl_s8(*(int8x8_t *)v62.i8);
    int32x4_t v67 = vmovl_s16(*(int16x4_t *)v66.i8);
    v46.i64[0] = v67.u32[0];
    v46.i64[1] = v67.u32[1];
    int8x16_t v68 = v46;
    int32x4_t v69 = vmovl_high_s16(v63);
    v46.i64[0] = v69.u32[0];
    v46.i64[1] = v69.u32[1];
    int8x16_t v70 = v46;
    int32x4_t v71 = vmovl_high_s16(v66);
    v46.i64[0] = v71.u32[0];
    v46.i64[1] = v71.u32[1];
    int8x16_t v72 = v46;
    v46.i64[0] = v64.u32[2];
    v46.i64[1] = v64.u32[3];
    int8x16_t v73 = v46;
    v46.i64[0] = v67.u32[2];
    v46.i64[1] = v67.u32[3];
    int8x16_t v74 = v46;
    v46.i64[0] = v69.u32[2];
    v46.i64[1] = v69.u32[3];
    int8x16_t v75 = v46;
    v46.i64[0] = v71.u32[2];
    v46.i64[1] = v71.u32[3];
    int8x16_t v76 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v75);
    int8x16_t v77 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v65), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v47));
    int8x16_t v78 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v68), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v50));
    int8x16_t v79 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v70), v61);
    int8x16_t v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v72), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v54));
    int8x16_t v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v73), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v55));
    int8x16_t v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v74), v60);
    int8x16_t v83 = vorrq_s8(v76, v59);
    int8x16_t v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v46), v58);
    int8x16_t v85 = vceqzq_s8((int8x16_t)v36[15].std::__shared_count);
    int16x8_t v86 = vmovl_s8(*(int8x8_t *)v85.i8);
    int32x4_t v87 = vmovl_high_s16(v86);
    v46.i64[0] = v87.i32[2];
    v46.i64[1] = v87.i32[3];
    int8x16_t v88 = v46;
    int16x8_t v89 = vmovl_high_s8(v85);
    int32x4_t v90 = vmovl_high_s16(v89);
    v46.i64[0] = v90.i32[2];
    v46.i64[1] = v90.i32[3];
    int8x16_t v91 = v46;
    int32x4_t v92 = vmovl_s16(*(int16x4_t *)v86.i8);
    v46.i64[0] = v92.i32[2];
    v46.i64[1] = v92.i32[3];
    int8x16_t v93 = v46;
    int32x4_t v94 = vmovl_s16(*(int16x4_t *)v89.i8);
    v46.i64[0] = v94.i32[2];
    v46.i64[1] = v94.i32[3];
    int8x16_t v95 = v46;
    v46.i64[0] = v87.i32[0];
    v46.i64[1] = v87.i32[1];
    int8x16_t v96 = v46;
    v46.i64[0] = v90.i32[0];
    v46.i64[1] = v90.i32[1];
    int8x16_t v97 = v46;
    v46.i64[0] = v92.i32[0];
    v46.i64[1] = v92.i32[1];
    int8x16_t v98 = v46;
    v46.i64[0] = v94.i32[0];
    v46.i64[1] = v94.i32[1];
    int8x16_t v99 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v46);
    int8x16_t v100 = vceqzq_s8(*(int8x16_t *)&v36[15].__shared_weak_owners_);
    int16x8_t v101 = vmovl_high_s8(v100);
    int32x4_t v102 = vmovl_s16(*(int16x4_t *)v101.i8);
    v46.i64[0] = v102.i32[0];
    v46.i64[1] = v102.i32[1];
    int8x16_t v103 = v46;
    int16x8_t v104 = vmovl_s8(*(int8x8_t *)v100.i8);
    int32x4_t v105 = vmovl_s16(*(int16x4_t *)v104.i8);
    v46.i64[0] = v105.i32[0];
    v46.i64[1] = v105.i32[1];
    int8x16_t v106 = v46;
    int32x4_t v107 = vmovl_high_s16(v101);
    v46.i64[0] = v107.i32[0];
    v46.i64[1] = v107.i32[1];
    int8x16_t v108 = v46;
    int32x4_t v109 = vmovl_high_s16(v104);
    v46.i64[0] = v109.i32[0];
    v46.i64[1] = v109.i32[1];
    int8x16_t v110 = v46;
    v46.i64[0] = v102.i32[2];
    v46.i64[1] = v102.i32[3];
    int8x16_t v111 = v46;
    v46.i64[0] = v105.i32[2];
    v46.i64[1] = v105.i32[3];
    int8x16_t v112 = v46;
    v46.i64[0] = v107.i32[2];
    v46.i64[1] = v107.i32[3];
    int8x16_t v113 = v46;
    v46.i64[0] = v109.i32[2];
    v46.i64[1] = v109.i32[3];
    v36[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v106), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v98)), v78), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v103), v99), v77)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v110), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v96)), v80), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v108),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v97)),
                                                    v79))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v112), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v93)), v82), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v111), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v95)), v81)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v46), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v88)), v84), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v113),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v91)),
                                                    v83)))));
    LOBYTE(v36[13].__vftable) = 1;
    *a1 = v37;
    a1[1] = v36;
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    float v114 = *v31;
    float v115 = v31;
    if (*v31)
    {
      while (1)
      {
        while (1)
        {
          float v115 = (uint64_t **)v114;
          unint64_t v116 = v114[4];
          if (v29 >= v116) {
            break;
          }
          float v114 = *v115;
          size_t v31 = v115;
          if (!*v115) {
            goto LABEL_27;
          }
        }
        if (v116 >= v29) {
          break;
        }
        float v114 = v115[1];
        if (!v114)
        {
          size_t v31 = v115 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    else
    {
LABEL_27:
      int v117 = (uint64_t *)operator new(0x38uLL);
      v117[4] = v29;
      v117[5] = (uint64_t)v37;
      v117[6] = (uint64_t)v36;
      *int v117 = 0;
      v117[1] = 0;
      v117[2] = (uint64_t)v115;
      *size_t v31 = v117;
      uint64_t v118 = **(void **)(a2 + 96);
      if (v118)
      {
        *(void *)(a2 + 96) = v118;
        int v117 = *v31;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v117);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A25DA604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  md::components::Material::~Material((md::components::Material *)&a31);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v31);
  _Unwind_Resume(a1);
}

void setupPatternedShader<ggl::PatternedRibbon::BasePipelineSetup>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, void *a5, int a6, __n128 a7, float a8, float a9)
{
  _S8 = a9;
  int v11 = a6;
  _S9 = a8;
  float v16 = a7.n128_f32[0];
  uint64_t v17 = a2;
  uint64_t v18 = a1;
  uint64_t v19 = *a5;
  if (*a5)
  {
    uint64_t v22 = *(void *)(a3 + 24);
    int32x4_t v23 = *(float **)a3;
    int8x16_t v24 = *(float **)(a3 + 8);
    uint64_t v25 = (uint64_t)v24 - *(void *)a3;
    if (v24 == *(float **)a3)
    {
      uint64_t v30 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      if (v25 < 0) {
        goto LABEL_60;
      }
      uint64_t v26 = v25 >> 2;
      uint64_t v27 = (*(uint64_t (**)(void))(*(void *)v22 + 16))(*(void *)(a3 + 24));
      uint64_t v25 = v27;
      uint64_t v28 = 0;
      do
      {
        if (v27 + v28 * 4) {
          *(float *)(v27 + v28 * 4) = v23[v28];
        }
        ++v28;
      }
      while (&v23[v28] != v24);
      uint64_t v29 = v27 + v28 * 4;
      uint64_t v30 = v27 + 4 * v26;
    }
    a7.n128_f32[0] = _S9 + 0.5;
    int v11 = a6;
    if (*(unsigned __int16 *)(v19 + 46) == (int)(float)(_S9 + 0.5)
      && (a7.n128_u32[0] = *(_DWORD *)(a3 + 32), a7.n128_f32[0] == *(float *)(v19 + 32))
      && (unint64_t v31 = (v29 - v25) >> 2, v31 == (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 2))
    {
      uint64_t v17 = a2;
      if (v29 == v25)
      {
        uint64_t v18 = a1;
        if (!v25) {
          goto LABEL_38;
        }
        BOOL v35 = 1;
      }
      else
      {
        unint64_t v32 = 0;
        unsigned int v33 = 1;
        a7.n128_u64[0] = 0x3400000034000000;
        uint64_t v18 = a1;
        do
        {
          float v34 = vabds_f32(*(float *)(v25 + 4 * v32), *(float *)(*(void *)v19 + 4 * v32));
          BOOL v35 = v34 <= 0.00000011921;
          unint64_t v32 = v33++;
        }
        while (v34 <= 0.00000011921 && v31 > v32);
      }
    }
    else
    {
      uint64_t v17 = a2;
      uint64_t v18 = a1;
      if (!v25) {
        goto LABEL_23;
      }
      BOOL v35 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)v22 + 40))(v22, v25, v30 - v25, a7);
    if (v35) {
      goto LABEL_38;
    }
  }
LABEL_23:
  int32x4_t v71 = 0;
  int8x16_t v72 = 0;
  uint64_t v37 = *(void *)(a3 + 24);
  int8x16_t v73 = 0;
  uint64_t v74 = v37;
  unint64_t v38 = *(float **)a3;
  uint8x8_t v39 = *(float **)(a3 + 8);
  uint64_t v40 = (uint64_t)v39 - *(void *)a3;
  if (v39 != *(float **)a3)
  {
    if ((v40 & 0x8000000000000000) == 0)
    {
      uint64_t v41 = v40 >> 2;
      int8x16_t v42 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v37 + 16))(v37);
      int32x4_t v71 = v42;
      int8x16_t v73 = (char *)&v42[v41];
      do
      {
        if (v42) {
          _DWORD *v42 = *(_DWORD *)v38;
        }
        ++v38;
        ++v42;
      }
      while (v38 != v39);
      int8x16_t v72 = v42;
      goto LABEL_30;
    }
LABEL_60:
    abort();
  }
LABEL_30:
  int v75 = *(_DWORD *)(a3 + 32);
  md::DashTextureCache::textureForPattern(&v76, v17, (float *)&v71, 0, _S9);
  long long v43 = v76;
  long long v76 = 0uLL;
  int16x8_t v44 = (std::__shared_weak_count *)a5[1];
  *(_OWORD *)a5 = v43;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  int32x4_t v45 = (std::__shared_weak_count *)*((void *)&v76 + 1);
  if (*((void *)&v76 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v76 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  if (v71)
  {
    int8x16_t v72 = v71;
    (*(void (**)(uint64_t, _DWORD *, int64_t))(*(void *)v74 + 40))(v74, v71, v73 - (char *)v71);
  }
LABEL_38:
  **(void **)(v18 + 96) = *(void *)(*a5 + 64);
  uint64_t v46 = *a5;
  LOWORD(v9) = *(_WORD *)(v46 + 40);
  uint64_t v47 = **(void **)(v18 + 64);
  if ((*(unsigned char *)(v47 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    *(void *)&long long v76 = &v77;
    int8x16_t v78 = &v76;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v78, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  float v48 = *(float *)(v46 + 48);
  float v49 = 0.0;
  if (v48 != 0.0)
  {
    float v50 = *(float *)(*(void *)(v47 + 72) + 64);
    if (v11)
    {
      float v51 = log2f(v50);
      float v49 = 1.0 / (float)(v48 * exp2f(floorf(v51)));
    }
    else
    {
      float v52 = logf(v48 * v50);
      float v49 = expf(floorf(v52 * 4.0) * -0.25);
    }
  }
  int32x4_t v53 = *(void **)(*(void *)(v18 + 64) + 32);
  unint64_t v54 = v53[1];
  if (v54) {
    uint64_t v55 = v53[9];
  }
  else {
    uint64_t v55 = 0;
  }
  *(_DWORD *)(v55 + 16) = *a4;
  *(_DWORD *)(v55 + 20) = a4[1];
  *(_DWORD *)(v55 + 24) = a4[2];
  int v56 = a4[3];
  *(float *)uint64_t v55 = (float)((float)v9 * 0.5) / v16;
  *(_DWORD *)(v55 + 28) = v56;
  *(float *)(v55 + 32) = v49;
  __asm { FCVT            H0, S9 }
  *(_WORD *)(v55 + 36) = _H0;
  int8x16_t v62 = *(float **)a3;
  uint64_t v63 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
  if (*(void *)(a3 + 8) == *(void *)a3) {
    _S0 = 0.0;
  }
  else {
    _S0 = *v62;
  }
  __asm { FCVT            H1, S0 }
  *(_WORD *)(v55 + 38) = _H1;
  float v66 = _S0 + (float)(unint64_t)v63;
  _H0 = 0;
  if (v66 > 1.0)
  {
    _S0 = *((_DWORD *)v62 + 1);
    __asm { FCVT            H0, S0 }
  }
  *(_WORD *)(v55 + 40) = _H0;
  __asm { FCVT            H0, S8 }
  *(_WORD *)(v55 + 42) = _H0;
  if (v54)
  {
    if (v53[8] > v54) {
      unint64_t v54 = v53[8];
    }
    v53[7] = 0;
    v53[8] = v54;
  }
}

uint64_t std::__shared_ptr_emplace<ggl::PatternedRibbon::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PatternedRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5841F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PatternedRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5841F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::PatternedLayer::~PatternedLayer(md::PatternedLayer *this)
{
  *(void *)this = &unk_1EF531018;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF531018;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(this);
}

void *md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553B50;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[14];
  a1[14] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  unint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  unsigned int v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531018;
  uint64_t v2 = (std::__shared_weak_count *)a1[22];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[20];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[20];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531018;
  uint64_t v2 = (std::__shared_weak_count *)a1[22];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[20];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[20];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::~RibbonLayer(a1);
}

void *md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(void *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  void *result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a2)
  {
    uint64_t v90 = 0;
    unint64_t v91 = 0;
    {
      operator new();
    }
    uint64_t v92 = mdm::Allocator::instance(void)::alloc;
    uint64_t v93 = 0;
    {
      operator new();
    }
    uint64_t v94 = mdm::Allocator::instance(void)::alloc;
    unint64_t v95 = 0;
    float v96 = 1.0;
    uint64_t v6 = *(uint64_t **)(a2 + 40);
    uint64_t v7 = *(uint64_t **)(a2 + 48);
    while (1)
    {
      if (v6 == v7) {
        operator new();
      }
      unint64_t v9 = *(void *)(*v6 + 88);
      uint64_t v10 = *(void **)(*v6 + 72);
      if (a5)
      {
        if (v9)
        {
          if (v9 >= 8)
          {
            unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFF8;
            int8x16_t v13 = (__int32 *)(v10 + 6);
            int8x16_t v14 = 0uLL;
            unint64_t v15 = v9 & 0xFFFFFFFFFFFFFFF8;
            int8x16_t v16 = 0uLL;
            v17.i64[0] = 0x300000003;
            v17.i64[1] = 0x300000003;
            v18.i64[0] = 0x100000001;
            v18.i64[1] = 0x100000001;
            do
            {
              v19.i32[0] = *(v13 - 12);
              v20.i32[0] = *(v13 - 11);
              v19.i32[1] = *(v13 - 9);
              v19.i32[2] = *(v13 - 6);
              v19.i32[3] = *(v13 - 3);
              v21.i32[0] = *v13;
              v22.i32[0] = v13[1];
              v21.i32[1] = v13[3];
              v21.i32[2] = v13[6];
              v21.i32[3] = v13[9];
              v20.i32[1] = *(v13 - 8);
              v20.i32[2] = *(v13 - 5);
              v20.i32[3] = *(v13 - 2);
              v22.i32[1] = v13[4];
              v22.i32[2] = v13[7];
              v22.i32[3] = v13[10];
              int8x16_t v14 = vorrq_s8((int8x16_t)vshlq_u32(v18, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v20, 2uLL), v17), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v19, 2uLL), v17))), v14);
              int8x16_t v16 = vorrq_s8((int8x16_t)vshlq_u32(v18, (uint32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vminq_u32(vcvtq_n_u32_f32(v22, 2uLL), v17), 2uLL), (int8x16_t)vminq_u32(vcvtq_n_u32_f32(v21, 2uLL), v17))), v16);
              v13 += 24;
              v15 -= 8;
            }
            while (v15);
            int8x16_t v23 = vorrq_s8(v16, v14);
            *(int8x8_t *)v23.i8 = vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
            unsigned int v12 = v23.i32[0] | v23.i32[1];
            if (v9 == v11) {
              goto LABEL_23;
            }
          }
          else
          {
            unint64_t v11 = 0;
            unsigned int v12 = 0;
          }
          unint64_t v24 = v9 - v11;
          uint64_t v25 = (float *)v10 + 3 * v11 + 1;
          do
          {
            unsigned int v26 = vcvts_n_u32_f32(*(v25 - 1), 2uLL);
            if (v26 >= 3) {
              LOBYTE(v26) = 3;
            }
            float v27 = *v25;
            v25 += 3;
            unsigned int v28 = vcvts_n_u32_f32(v27, 2uLL);
            if (v28 >= 3) {
              LOBYTE(v28) = 3;
            }
            v12 |= 1 << (v26 | (4 * v28));
            --v24;
          }
          while (v24);
        }
        else
        {
          unsigned int v12 = 0;
        }
      }
      else
      {
        unsigned int v12 = ggl::CullingGrid::intersectedCellsForRibbon(v9, v10);
      }
LABEL_23:
      unint64_t v29 = v12;
      unint64_t v30 = v91;
      if (v91)
      {
        uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v91);
        v31.i16[0] = vaddlv_u8(v31);
        if (v31.u32[0] > 1uLL)
        {
          unint64_t v5 = v12;
          if (v91 <= v12) {
            unint64_t v5 = v12 % v91;
          }
        }
        else
        {
          unint64_t v5 = (v91 - 1) & v12;
        }
        unint64_t v32 = *(uint64_t **)(v90 + 8 * v5);
        if (v32)
        {
          uint64_t v33 = *v32;
          if (*v32)
          {
            if (v31.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v35 = *(void *)(v33 + 8);
                if (v35 == v12)
                {
                  if (*(_DWORD *)(v33 + 16) == v12) {
                    goto LABEL_103;
                  }
                }
                else if ((v35 & (v91 - 1)) != v5)
                {
                  goto LABEL_43;
                }
                uint64_t v33 = *(void *)v33;
                if (!v33) {
                  goto LABEL_43;
                }
              }
            }
            do
            {
              unint64_t v34 = *(void *)(v33 + 8);
              if (v34 == v12)
              {
                if (*(_DWORD *)(v33 + 16) == v12) {
                  goto LABEL_103;
                }
              }
              else
              {
                if (v34 >= v91) {
                  v34 %= v91;
                }
                if (v34 != v5) {
                  break;
                }
              }
              uint64_t v33 = *(void *)v33;
            }
            while (v33);
          }
        }
      }
LABEL_43:
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v94 + 16))(v94, 56, 8);
      int8x16_t v97 = &v94;
      *(void *)uint64_t v33 = 0;
      *(void *)(v33 + 8) = v12;
      *(_DWORD *)(v33 + 16) = v12;
      *(void *)(v33 + 32) = 0;
      *(void *)(v33 + 40) = 0;
      *(void *)(v33 + 24) = 0;
      {
        operator new();
      }
      *(void *)(v33 + 48) = mdm::Allocator::instance(void)::alloc;
      char v98 = 1;
      float v36 = (float)(v95 + 1);
      if (!v91 || (float)(v96 * (float)v91) < v36)
      {
        BOOL v37 = (v91 & (v91 - 1)) != 0;
        if (v91 < 3) {
          BOOL v37 = 1;
        }
        unint64_t v38 = v37 | (2 * v91);
        unint64_t v39 = vcvtps_u32_f32(v36 / v96);
        if (v38 <= v39) {
          size_t prime = v39;
        }
        else {
          size_t prime = v38;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
        }
        unint64_t v30 = v91;
        if (prime <= v91)
        {
          if (prime < v91)
          {
            unint64_t v51 = vcvtps_u32_f32((float)v95 / v96);
            if (v91 < 3 || (uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)v91), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
            {
              unint64_t v51 = std::__next_prime(v51);
            }
            else
            {
              uint64_t v53 = 1 << -(char)__clz(v51 - 1);
              if (v51 >= 2) {
                unint64_t v51 = v53;
              }
            }
            if (prime <= v51) {
              size_t prime = v51;
            }
            if (prime >= v91)
            {
              unint64_t v30 = v91;
            }
            else
            {
              if (prime) {
                goto LABEL_56;
              }
              uint64_t v87 = v90;
              uint64_t v90 = 0;
              if (v87) {
                (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v92 + 40))(v92, v87, 8 * v91);
              }
              unint64_t v30 = 0;
              unint64_t v91 = 0;
            }
          }
LABEL_80:
          if ((v30 & (v30 - 1)) != 0)
          {
            if (v30 <= v29) {
              unint64_t v5 = v29 % v30;
            }
            else {
              unint64_t v5 = v29;
            }
          }
          else
          {
            unint64_t v5 = (v30 - 1) & v29;
          }
          goto LABEL_93;
        }
LABEL_56:
        uint64_t v41 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(void *)v92 + 16))(v92, 8 * prime, 8);
        uint64_t v42 = v90;
        uint64_t v90 = v41;
        if (v42) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v92 + 40))(v92, v42, 8 * v91);
        }
        uint64_t v43 = 0;
        unint64_t v91 = prime;
        do
          *(void *)(v90 + 8 * v43++) = 0;
        while (prime != v43);
        int16x8_t v44 = (void **)v93;
        if (!v93) {
          goto LABEL_79;
        }
        size_t v45 = *(void *)(v93 + 8);
        size_t v46 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v47 = v45 & v46;
          *(void *)(v90 + 8 * v47) = &v93;
          for (unint64_t i = *v44; *v44; unint64_t i = *v44)
          {
            size_t v49 = i[1] & v46;
            if (v49 == v47)
            {
              int16x8_t v44 = (void **)i;
            }
            else if (*(void *)(v90 + 8 * v49))
            {
              *int16x8_t v44 = (void *)*i;
              uint64_t v50 = 8 * v49;
              *unint64_t i = **(void **)(v90 + v50);
              **(void **)(v90 + v50) = i;
            }
            else
            {
              *(void *)(v90 + 8 * v49) = v44;
              int16x8_t v44 = (void **)i;
              size_t v47 = v49;
            }
          }
          goto LABEL_79;
        }
        if (v45 >= prime) {
          v45 %= prime;
        }
        *(void *)(v90 + 8 * v45) = &v93;
        unint64_t v54 = *v44;
        if (!*v44)
        {
LABEL_79:
          unint64_t v30 = prime;
          goto LABEL_80;
        }
        while (2)
        {
          size_t v56 = v54[1];
          if (v56 >= prime) {
            v56 %= prime;
          }
          if (v56 != v45)
          {
            if (!*(void *)(v90 + 8 * v56))
            {
              *(void *)(v90 + 8 * v56) = v44;
LABEL_84:
              int16x8_t v44 = (void **)v54;
              unint64_t v54 = (void *)*v54;
              size_t v45 = v56;
              if (!v54) {
                goto LABEL_79;
              }
              continue;
            }
            *int16x8_t v44 = (void *)*v54;
            uint64_t v55 = 8 * v56;
            *unint64_t v54 = **(void **)(v90 + v55);
            **(void **)(v90 + v55) = v54;
            unint64_t v54 = v44;
          }
          break;
        }
        size_t v56 = v45;
        goto LABEL_84;
      }
LABEL_93:
      int8x16_t v57 = *(uint64_t **)(v90 + 8 * v5);
      if (v57)
      {
        *(void *)uint64_t v33 = *v57;
LABEL_101:
        *int8x16_t v57 = v33;
        goto LABEL_102;
      }
      *(void *)uint64_t v33 = v93;
      uint64_t v93 = v33;
      *(void *)(v90 + 8 * v5) = &v93;
      if (*(void *)v33)
      {
        unint64_t v58 = *(void *)(*(void *)v33 + 8);
        if ((v30 & (v30 - 1)) != 0)
        {
          if (v58 >= v30) {
            v58 %= v30;
          }
        }
        else
        {
          v58 &= v30 - 1;
        }
        int8x16_t v57 = (uint64_t *)(v90 + 8 * v58);
        goto LABEL_101;
      }
LABEL_102:
      ++v95;
LABEL_103:
      int8x16_t v59 = *(void **)(v33 + 32);
      unint64_t v60 = *(void *)(v33 + 40);
      if ((unint64_t)v59 < v60)
      {
        if (v59)
        {
          uint64_t v61 = *v6;
          uint64_t *v6 = 0;
          *int8x16_t v59 = v61;
        }
        unint64_t v8 = v59 + 1;
        goto LABEL_6;
      }
      uint64_t v62 = *(void *)(v33 + 24);
      uint64_t v63 = ((uint64_t)v59 - v62) >> 3;
      unint64_t v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61) {
        abort();
      }
      uint64_t v65 = v60 - v62;
      if (v65 >> 2 > v64) {
        unint64_t v64 = v65 >> 2;
      }
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v66 = v64;
      }
      if (v66)
      {
        uint64_t v67 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v33 + 48) + 16))(*(void *)(v33 + 48), 8 * v66, 8);
        int8x16_t v68 = (void *)(v67 + 8 * v63);
        uint64_t v69 = v67 + 8 * v66;
        if (v67)
        {
          uint64_t v70 = *v6;
          uint64_t *v6 = 0;
          *int8x16_t v68 = v70;
        }
      }
      else
      {
        uint64_t v69 = 0;
        int8x16_t v68 = (void *)(8 * v63);
      }
      unint64_t v8 = v68 + 1;
      int32x4_t v71 = *(void **)(v33 + 24);
      unint64_t v72 = *(void *)(v33 + 32);
      if ((void *)v72 == v71)
      {
        *(void *)(v33 + 24) = v68;
        *(void *)(v33 + 32) = v8;
        uint64_t v78 = *(void *)(v33 + 40);
        *(void *)(v33 + 40) = v69;
        goto LABEL_130;
      }
      unint64_t v73 = v72 - (void)v71 - 8;
      if (v73 <= 0x47
        || (unint64_t v74 = v73 >> 3, v72 - 8 * v74 - 8 < (unint64_t)v68) && (unint64_t)&v68[-v74 - 1] < v72)
      {
        int v75 = *(void **)(v33 + 32);
        do
        {
LABEL_121:
          uint64_t v76 = *--v75;
          *int v75 = 0;
          *--int8x16_t v68 = v76;
        }
        while (v75 != v71);
        goto LABEL_122;
      }
      unint64_t v80 = v74 + 1;
      uint64_t v81 = (v74 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      int v75 = (void *)(v72 - 8 * v81);
      int8x16_t v82 = v68 - 2;
      int8x16_t v83 = (long long *)(v72 - 32);
      uint64_t v84 = v81;
      do
      {
        long long v86 = *v83;
        long long v85 = v83[1];
        long long *v83 = 0uLL;
        v83[1] = 0uLL;
        v83 -= 2;
        *(v82 - 1) = v86;
        _OWORD *v82 = v85;
        v82 -= 2;
        v84 -= 4;
      }
      while (v84);
      v68 -= v81;
      if (v80 != v81) {
        goto LABEL_121;
      }
LABEL_122:
      unint64_t v72 = *(void *)(v33 + 24);
      char v77 = *(void **)(v33 + 32);
      *(void *)(v33 + 24) = v68;
      *(void *)(v33 + 32) = v8;
      uint64_t v78 = *(void *)(v33 + 40);
      *(void *)(v33 + 40) = v69;
      while (v77 != (void *)v72)
      {
        unint64_t v79 = *--v77;
        unint64_t v5 = v79;
        *char v77 = 0;
        if (v79)
        {
          (**(void (***)(unint64_t))v5)(v5);
          {
            operator new();
          }
          (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                     + 40))(mdm::Allocator::instance(void)::alloc, v5, 120);
        }
      }
LABEL_130:
      if (v72) {
        (*(void (**)(void, unint64_t, unint64_t))(**(void **)(v33 + 48) + 40))(*(void *)(v33 + 48), v72, v78 - v72);
      }
LABEL_6:
      *(void *)(v33 + 32) = v8;
      ++v6;
    }
  }
  return result;
}

void sub_1A25DE18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v29 - 120);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v29 - 104);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v29 - 144);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v28 + 128));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v28 + 126));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(v28 + 124));
  uint64_t v31 = v28[123];
  v28[123] = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = v28[122];
  v28[122] = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = v28[121];
  v28[121] = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = v28[120];
  v28[120] = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = v28[119];
  v28[119] = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *v27;
  *float v27 = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  md::RibbonBatch<md::Ribbons::PatternedRibbonDescriptor>::~RibbonBatch(v28);
  MEMORY[0x1A6239270](v28, 0x10F1C4033AD85D8);
  std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__deallocate_node((uint64_t)&a24, a27);
  uint64_t v37 = a24;
  a24 = 0;
  if (v37) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a26 + 40))(a26, v37, 8 * a25);
  }
  unint64_t v38 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584A80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PatternedRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t v6 = (int8x16_t *)result;
LABEL_2:
  uint64_t v160 = &a2[-1].i64[1];
  uint64_t v7 = v6;
  while (1)
  {
    uint64_t v6 = v7;
    uint64_t v8 = (char *)a2 - (char *)v7;
    uint64_t v9 = ((char *)a2 - (char *)v7) >> 3;
    if (!(!v5 & v4))
    {
      switch(v9)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v65 = *v160;
          uint64_t v66 = v7->i64[0];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v7->i64[0]);
          if (result)
          {
            v7->i64[0] = v65;
            *uint64_t v160 = v66;
          }
          break;
        case 3:
          __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v160);
          break;
        case 4:
          uint64_t v67 = v7 + 1;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64);
          uint64_t v68 = *v160;
          uint64_t v69 = v7[1].i64[0];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v69);
          if (result)
          {
            v67->i64[0] = v68;
            *uint64_t v160 = v69;
            __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v67->i64[0] + 96), v7->i64[1]);
            if (result)
            {
              int8x16_t v70 = *(int8x16_t *)((char *)v7 + 8);
              *(int8x16_t *)((char *)v7 + 8) = vextq_s8(v70, v70, 8uLL);
              __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v70.i64[1] + 96), v7->i64[0]);
              if (result) {
                int8x16_t *v7 = vextq_s8(*v7, *v7, 8uLL);
              }
            }
          }
          break;
        case 5:
          __n128 result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64, &v7[1].i64[1], v160);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v8 <= 191)
    {
      int32x4_t v71 = (int8x16_t *)&v7->u64[1];
      BOOL v73 = v7 == a2 || v71 == a2;
      if (a4)
      {
        if (!v73)
        {
          unint64_t v74 = (uint64_t *)v7;
          do
          {
            uint64_t v76 = v71;
            uint64_t v77 = v74[1];
            __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v77 + 96), *v74);
            if (result)
            {
              uint64_t v78 = (uint64_t *)v76;
              uint64_t v79 = 0;
              *uint64_t v78 = 0;
              uint64_t v167 = v77;
              uint64_t v80 = *v74;
              unint64_t v163 = v78;
              for (unint64_t i = v78; ; v79 = *i)
              {
                *unint64_t i = v80;
                unint64_t i = v74;
                *unint64_t v74 = 0;
                if (v79)
                {
                  uint64_t v81 = *(void **)(v79 + 56);
                  if (v81)
                  {
                    int8x16_t v82 = *(void **)(v79 + 64);
                    uint64_t v83 = *(void *)(v79 + 56);
                    if (v82 != v81)
                    {
                      do
                      {
                        long long v85 = (void (***)(void, uint64_t))*--v82;
                        uint64_t v84 = v85;
                        void *v82 = 0;
                        if (v85)
                        {
                          (**v84)(v84, v83);
                          {
                            operator new();
                          }
                          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v84, 120);
                        }
                      }
                      while (v82 != v81);
                      uint64_t v83 = *(void *)(v79 + 56);
                    }
                    *(void *)(v79 + 64) = v81;
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v79 + 80) + 40))(*(void *)(v79 + 80), v83, *(void *)(v79 + 72) - v83);
                  }
                  MEMORY[0x1A6239270](v79, 0x1020C4010FC18DELL);
                }
                uint64_t v86 = v167;
                if (i == (uint64_t *)v6) {
                  break;
                }
                unint64_t v87 = *(unsigned int *)(v167 + 96);
                if ((v87 & 0xF000) != 0) {
                  uint64_t v88 = 3;
                }
                else {
                  uint64_t v88 = 0;
                }
                if ((v87 & 0xF00) != 0) {
                  uint64_t v88 = 2;
                }
                if ((v87 & 0xF0) != 0) {
                  uint64_t v88 = 1;
                }
                if ((v87 & 0xF) != 0) {
                  uint64_t v88 = 0;
                }
                int v89 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v88];
                int v90 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v87 >> 12];
                int v91 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v87 >> 8) & 0xF];
                int v92 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 >> 4];
                unsigned int v93 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 & 0xF];
                unint64_t v74 = i - 1;
                uint64_t v80 = *(i - 1);
                unint64_t v94 = *(unsigned int *)(v80 + 96);
                if ((v94 & 0xF000) != 0) {
                  uint64_t v95 = 3;
                }
                else {
                  uint64_t v95 = 0;
                }
                if ((v94 & 0xF00) != 0) {
                  uint64_t v95 = 2;
                }
                if ((v94 & 0xF0) != 0) {
                  uint64_t v95 = 1;
                }
                if ((v94 & 0xF) != 0) {
                  uint64_t v95 = 0;
                }
                if (((v90 << 12) | (v89 << 16) | (v91 << 8) | (16 * v92) | v93) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v94 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v95] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v94 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 & 0xF])) {
                  goto LABEL_128;
                }
              }
              unint64_t i = (uint64_t *)v6;
LABEL_128:
              uint64_t v167 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](i, v86);
              __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
              uint64_t v76 = (int8x16_t *)v163;
            }
            int32x4_t v71 = (int8x16_t *)&v76->u64[1];
            unint64_t v74 = (uint64_t *)v76;
          }
          while (&v76->u64[1] != (unint64_t *)a2);
        }
      }
      else if (!v73)
      {
        do
        {
          size_t v138 = v71;
          uint64_t v139 = v6->i64[1];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v139 + 96), v6->i64[0]);
          if (result)
          {
            uint64_t v140 = (uint64_t *)v138;
            uint64_t v141 = 0;
            uint64_t *v140 = 0;
            uint64_t v167 = v139;
            uint64_t v142 = v6->i64[0];
            unint64_t v164 = v140;
            for (uint64_t j = v140; ; v141 = *j)
            {
              *uint64_t j = v142;
              uint64_t j = (uint64_t *)v6;
              v6->i64[0] = 0;
              if (v141)
              {
                float32x4_t v144 = *(void **)(v141 + 56);
                if (v144)
                {
                  int8x16_t v145 = *(void **)(v141 + 64);
                  uint64_t v146 = *(void *)(v141 + 56);
                  if (v145 != v144)
                  {
                    do
                    {
                      uint64_t v148 = (void (***)(void, uint64_t))*--v145;
                      unint64_t v147 = v148;
                      *int8x16_t v145 = 0;
                      if (v148)
                      {
                        (**v147)(v147, v146);
                        {
                          operator new();
                        }
                        (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v147, 120);
                      }
                    }
                    while (v145 != v144);
                    uint64_t v146 = *(void *)(v141 + 56);
                  }
                  *(void *)(v141 + 64) = v144;
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v141 + 80) + 40))(*(void *)(v141 + 80), v146, *(void *)(v141 + 72) - v146);
                }
                MEMORY[0x1A6239270](v141, 0x1020C4010FC18DELL);
              }
              uint64_t v149 = v167;
              unint64_t v150 = *(unsigned int *)(v167 + 96);
              if ((v150 & 0xF000) != 0) {
                uint64_t v151 = 3;
              }
              else {
                uint64_t v151 = 0;
              }
              if ((v150 & 0xF00) != 0) {
                uint64_t v151 = 2;
              }
              if ((v150 & 0xF0) != 0) {
                uint64_t v151 = 1;
              }
              if ((v150 & 0xF) != 0) {
                uint64_t v151 = 0;
              }
              int v152 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v151];
              int v153 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v150 >> 12];
              int v154 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v150 >> 8) & 0xF];
              int v155 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 >> 4];
              unsigned int v156 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 & 0xF];
              uint64_t v6 = (int8x16_t *)(j - 1);
              uint64_t v142 = *(j - 1);
              unint64_t v157 = *(unsigned int *)(v142 + 96);
              if ((v157 & 0xF000) != 0) {
                uint64_t v158 = 3;
              }
              else {
                uint64_t v158 = 0;
              }
              if ((v157 & 0xF00) != 0) {
                uint64_t v158 = 2;
              }
              if ((v157 & 0xF0) != 0) {
                uint64_t v158 = 1;
              }
              if ((v157 & 0xF) != 0) {
                uint64_t v158 = 0;
              }
              if (((v153 << 12) | (v152 << 16) | (v154 << 8) | (16 * v155) | v156) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v157 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v158] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v157 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 & 0xF])) {
                break;
              }
            }
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](j, v149);
            __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
            size_t v138 = (int8x16_t *)v164;
          }
          int32x4_t v71 = (int8x16_t *)&v138->u64[1];
          uint64_t v6 = v138;
        }
        while (&v138->u64[1] != (unint64_t *)a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v10 = (unint64_t)v9 >> 1;
    unint64_t v11 = &v7->i64[(unint64_t)v9 >> 1];
    if ((unint64_t)v8 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11, v7->i64, v160);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, v11, v160);
      uint64_t v12 = v10;
      int8x16_t v13 = &v7->i64[v10];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v7->i64[1], v13 - 1, a2[-1].i64);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7[1].i64, &v7->i64[v12 + 1], &a2[-2].i64[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v13 - 1, v11, &v7->i64[v12 + 1]);
      uint64_t v14 = v7->i64[0];
      v7->i64[0] = *v13;
      uint64_t *v13 = v14;
    }
    --a3;
    uint64_t v15 = v7->i64[0];
    if ((a4 & 1) != 0
      || md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v7[-1].i64[1] + 96), v7->i64[0]))
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      int8x16_t v16 = v7;
      do
      {
        uint32x4_t v17 = v16;
        uint64_t v19 = v16->i64[1];
        int8x16_t v16 = (int8x16_t *)((char *)v16 + 8);
        uint64_t v18 = v19;
      }
      while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v15));
      float32x4_t v20 = (uint64_t *)a2;
      if (v17 == v6)
      {
        float32x4_t v20 = (uint64_t *)a2;
        do
        {
          if (v16 >= (int8x16_t *)v20) {
            break;
          }
          uint64_t v22 = *--v20;
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v22 + 96), v15));
      }
      else
      {
        do
          uint64_t v21 = *--v20;
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v15));
      }
      if (v16 < (int8x16_t *)v20)
      {
        uint64_t v23 = *v20;
        unint64_t v24 = (uint64_t *)v16;
        uint64_t v25 = v20;
        do
        {
          *unint64_t v24 = v23;
          *uint64_t v25 = v18;
          uint64_t v15 = v167;
          unint64_t v26 = *(unsigned int *)(v167 + 96);
          int v27 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v26 >> 8) & 0xF];
          int v28 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v26 >> 12] << 12;
          int v29 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 >> 4];
          int v30 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 & 0xF];
          if ((v26 & 0xF000) != 0) {
            uint64_t v31 = 3;
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v26 & 0xF00) != 0) {
            uint64_t v31 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v32 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v32 = v31;
          }
          unsigned int v33 = v28 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v32] << 16) | (v27 << 8) | (16 * v29) | v30;
          do
          {
            uint64_t v34 = v24[1];
            ++v24;
            uint64_t v18 = v34;
            unint64_t v35 = *(unsigned int *)(v34 + 96);
            if ((v35 & 0xF000) != 0) {
              uint64_t v36 = 3;
            }
            else {
              uint64_t v36 = 0;
            }
            if ((v35 & 0xF00) != 0) {
              uint64_t v36 = 2;
            }
            if ((v35 & 0xF0) != 0) {
              uint64_t v36 = 1;
            }
            if ((v35 & 0xF) != 0) {
              uint64_t v36 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v35 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v35 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 & 0xF]) < v33);
          uint32x4_t v17 = (int8x16_t *)(v24 - 1);
          do
          {
            uint64_t v37 = *--v25;
            uint64_t v23 = v37;
            unint64_t v38 = *(unsigned int *)(v37 + 96);
            if ((v38 & 0xF000) != 0) {
              uint64_t v39 = 3;
            }
            else {
              uint64_t v39 = 0;
            }
            if ((v38 & 0xF00) != 0) {
              uint64_t v39 = 2;
            }
            if ((v38 & 0xF0) != 0) {
              uint64_t v39 = 1;
            }
            if ((v38 & 0xF) != 0) {
              uint64_t v39 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v38 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v39] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v38 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 & 0xF]) >= v33);
        }
        while (v24 < v25);
      }
      if (v17 != v6)
      {
        uint64_t v40 = v17->i64[0];
        v17->i64[0] = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v40);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v17->i64, v15);
      std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      if (v16 < (int8x16_t *)v20) {
        goto LABEL_58;
      }
      char v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6, v17);
      uint64_t v7 = (int8x16_t *)&v17->u64[1];
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v17->u64[1], a2);
      if (result)
      {
        a2 = v17;
        if (v41) {
          return result;
        }
        goto LABEL_2;
      }
      if ((v41 & 1) == 0)
      {
LABEL_58:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v6, v17, a3, a4 & 1);
        a4 = 0;
        uint64_t v7 = (int8x16_t *)&v17->u64[1];
      }
    }
    else
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      unint64_t v42 = *(unsigned int *)(v15 + 96);
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, *v160))
      {
        do
        {
          uint64_t v43 = v7->i64[1];
          uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v43));
      }
      else
      {
        int16x8_t v44 = (int8x16_t *)&v7->u64[1];
        do
        {
          uint64_t v7 = v44;
          if (v44 >= a2) {
            break;
          }
          int16x8_t v44 = (int8x16_t *)((char *)v44 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v7->i64[0]));
      }
      size_t v45 = a2;
      if (v7 < a2)
      {
        size_t v45 = a2;
        do
        {
          uint64_t v46 = v45[-1].i64[1];
          size_t v45 = (int8x16_t *)((char *)v45 - 8);
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v46));
      }
      if (v7 < v45)
      {
        uint64_t v47 = v7->i64[0];
        uint64_t v48 = v45->i64[0];
        do
        {
          v7->i64[0] = v48;
          v45->i64[0] = v47;
          uint64_t v15 = v167;
          unint64_t v49 = *(unsigned int *)(v167 + 96);
          int v50 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v49 >> 8) & 0xF];
          int v51 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 >> 4];
          int v52 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 & 0xF];
          int v53 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v49 >> 12] << 12;
          if ((v49 & 0xF000) != 0) {
            uint64_t v54 = 3;
          }
          else {
            uint64_t v54 = 0;
          }
          if ((v49 & 0xF00) != 0) {
            uint64_t v54 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v55 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v55 = v54;
          }
          unsigned int v56 = v53 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v55] << 16) | (v50 << 8) | (16 * v51) | v52;
          do
          {
            uint64_t v57 = v7->i64[1];
            uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
            uint64_t v47 = v57;
            unint64_t v58 = *(unsigned int *)(v57 + 96);
            if ((v58 & 0xF000) != 0) {
              uint64_t v59 = 3;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((v58 & 0xF00) != 0) {
              uint64_t v59 = 2;
            }
            if ((v58 & 0xF0) != 0) {
              uint64_t v59 = 1;
            }
            if ((v58 & 0xF) != 0) {
              uint64_t v59 = 0;
            }
          }
          while (v56 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v58 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v59] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v58 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 & 0xF]));
          do
          {
            uint64_t v60 = v45[-1].i64[1];
            size_t v45 = (int8x16_t *)((char *)v45 - 8);
            uint64_t v48 = v60;
            unint64_t v61 = *(unsigned int *)(v60 + 96);
            if ((v61 & 0xF000) != 0) {
              uint64_t v62 = 3;
            }
            else {
              uint64_t v62 = 0;
            }
            if ((v61 & 0xF00) != 0) {
              uint64_t v62 = 2;
            }
            if ((v61 & 0xF0) != 0) {
              uint64_t v62 = 1;
            }
            if ((v61 & 0xF) != 0) {
              uint64_t v62 = 0;
            }
          }
          while (v56 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v61 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v62] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v61 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 & 0xF]));
        }
        while (v7 < v45);
      }
      uint64_t v63 = &v7[-1].i64[1];
      if (&v7[-1].u64[1] != (unint64_t *)v6)
      {
        uint64_t v64 = *v63;
        *uint64_t v63 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v64);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v7[-1].i64[1], v15);
      __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      a4 = 0;
    }
  }
  if (v7 != a2)
  {
    unint64_t v161 = (char *)a2 - (char *)v7;
    int64_t v96 = (unint64_t)(v9 - 2) >> 1;
    int64_t v97 = v96;
    do
    {
      int64_t v98 = v97;
      if (v96 >= v97)
      {
        uint64_t v99 = (2 * v97) | 1;
        int8x16_t v100 = &v6->i64[v99];
        if (2 * v97 + 2 < v9)
        {
          uint64_t v101 = *v100;
          uint64_t v102 = v100[1];
          BOOL v103 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v102);
          if (v103) {
            uint64_t v104 = v102;
          }
          else {
            uint64_t v104 = v101;
          }
          if (v103)
          {
            ++v100;
            uint64_t v99 = 2 * v98 + 2;
          }
        }
        else
        {
          uint64_t v104 = *v100;
        }
        int32x4_t v105 = &v6->i64[v98];
        uint64_t v106 = *v105;
        __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v104 + 96), *v105);
        if ((result & 1) == 0)
        {
          *int32x4_t v105 = 0;
          uint64_t v167 = v106;
          uint64_t v107 = *v100;
          while (1)
          {
            int8x16_t v111 = v100;
            *int8x16_t v100 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v105, v107);
            if (v96 < v99) {
              break;
            }
            uint64_t v112 = (2 * v99) | 1;
            int8x16_t v100 = &v6->i64[v112];
            uint64_t v113 = 2 * v99 + 2;
            if (v113 < v9)
            {
              uint64_t v108 = *v100;
              uint64_t v107 = v100[1];
              BOOL v109 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v107);
              if (v109) {
                ++v100;
              }
              else {
                uint64_t v107 = v108;
              }
              if (v109) {
                uint64_t v99 = v113;
              }
              else {
                uint64_t v99 = v112;
              }
            }
            else
            {
              uint64_t v107 = *v100;
              uint64_t v99 = (2 * v99) | 1;
            }
            uint64_t v110 = v167;
            int32x4_t v105 = v111;
            if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v107 + 96), v167))
            {
              goto LABEL_168;
            }
          }
          uint64_t v110 = v167;
LABEL_168:
          uint64_t v167 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v111, v110);
          __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
        }
      }
      int64_t v97 = v98 - 1;
    }
    while (v98);
    uint64_t v114 = v161 >> 3;
    while (2)
    {
      if (v114 >= 2)
      {
        uint64_t v118 = 0;
        uint64_t v119 = v6->i64[0];
        v6->i64[0] = 0;
        uint64_t v166 = v119;
        uint64_t v120 = (uint64_t *)v6;
        do
        {
          long long v125 = &v120[v118 + 1];
          uint64_t v126 = (2 * v118) | 1;
          uint64_t v127 = 2 * v118 + 2;
          if (v127 < v114)
          {
            uint64_t v121 = *v125;
            uint64_t v122 = v120[v118 + 2];
            BOOL v123 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v125 + 96), v125[1]);
            if (v123) {
              uint64_t v124 = v122;
            }
            else {
              uint64_t v124 = v121;
            }
            if (v123)
            {
              ++v125;
              uint64_t v118 = v127;
            }
            else
            {
              uint64_t v118 = v126;
            }
          }
          else
          {
            uint64_t v124 = *v125;
            uint64_t v118 = (2 * v118) | 1;
          }
          *long long v125 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v120, v124);
          uint64_t v120 = v125;
        }
        while (v118 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
        size_t v128 = &a2[-1].i64[1];
        if (v125 == (uint64_t *)&a2[-1].u64[1])
        {
          uint64_t v115 = v166;
          uint64_t v166 = 0;
          unint64_t v116 = v125;
          goto LABEL_193;
        }
        uint64_t v129 = *v128;
        *size_t v128 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v125, v129);
        uint64_t v130 = v166;
        uint64_t v166 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v128, v130);
        uint64_t v131 = (char *)v125 - (char *)v6 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (unint64_t)((v131 >> 3) - 2) >> 1;
          uint64_t v133 = &v6->i64[v132];
          uint64_t v134 = *v125;
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), *v125))
          {
            *long long v125 = 0;
            uint64_t v167 = v134;
            uint64_t v135 = *v133;
            do
            {
              uint64_t v136 = v133;
              *uint64_t v133 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v125, v135);
              uint64_t v137 = v167;
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              uint64_t v133 = &v6->i64[v132];
              uint64_t v135 = *v133;
              long long v125 = v136;
            }
            while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), v167));
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v136, v137);
            unint64_t v116 = &v167;
            uint64_t v115 = 0;
LABEL_193:
            std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v116, v115);
          }
        }
        __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v166, 0);
      }
      a2 = (int8x16_t *)((char *)a2 - 8);
      if ((unint64_t)v114-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  BOOL v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2[-1].i64[1];
      uint64_t v6 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v5 + 96), a1->i64[0]))
      {
        a1->i64[0] = v5;
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return v4;
    case 4:
      int8x16_t v16 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v17 = a2[-1].i64[1];
      uint64_t v18 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v18))
      {
        v16->i64[0] = v17;
        a2[-1].i64[1] = v18;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v16->i64[0] + 96), a1->i64[1]))
        {
          int8x16_t v19 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v19, v19, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return v4;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v8 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v8;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v8 + 96), *i64))
    {
      break;
    }
LABEL_6:
    i64 = v8;
    v9 += 8;
    if (++v8 == (uint64_t *)a2) {
      return 1;
    }
  }
  uint64_t *v8 = 0;
  uint64_t v21 = v11;
  uint64_t v12 = *i64;
  uint64_t v13 = v9;
  while (1)
  {
    *(uint64_t *)((char *)a1[1].i64 + v13) = 0;
    std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100]((uint64_t *)((char *)&a1[1].i64[1] + v13), v12);
    uint64_t v14 = v21;
    if (v13 == -16) {
      break;
    }
    uint64_t v12 = *(uint64_t *)((char *)&a1->i64[1] + v13);
    v13 -= 8;
    if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v12))
    {
      uint64_t v15 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
      goto LABEL_13;
    }
  }
  uint64_t v15 = (uint64_t *)a1;
LABEL_13:
  uint64_t v21 = 0;
  std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v15, v14);
  if (++v10 != 8)
  {
    std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
    goto LABEL_6;
  }
  BOOL v4 = v8 + 1 == (uint64_t *)a2;
  std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
  return v4;
}

uint64_t std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>>,void *>,mdm::Allocator>>::operator()[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 8))
  {
    BOOL v4 = *(void **)(a2 + 24);
    if (v4)
    {
      uint64_t v5 = *(void **)(a2 + 32);
      uint64_t v6 = *(void *)(a2 + 24);
      if (v5 != v4)
      {
        do
        {
          uint64_t v8 = (void (***)(void, uint64_t))*--v5;
          uint64_t v7 = v8;
          void *v5 = 0;
          if (v8)
          {
            (**v7)(v7, v6);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v7, 120);
          }
        }
        while (v5 != v4);
        uint64_t v6 = *(void *)(a2 + 24);
      }
      *(void *)(a2 + 32) = v4;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 48) + 40))(*(void *)(a2 + 48), v6, *(void *)(a2 + 40) - v6);
    }
  }
  else if (!a2)
  {
    return result;
  }
  uint64_t v9 = *(uint64_t (**)(void))(***(void ***)v3 + 40);
  return v9();
}

void *md::PatternedLayer::PatternedLayer(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char *a6, int a7)
{
  uint64_t v334 = *MEMORY[0x1E4F143B8];
  int v11 = a6[24];
  if (a6[24])
  {
    char v7 = a6[1];
    char v12 = *a6;
    uint64_t v8 = *(void *)(a6 + 4);
  }
  else
  {
    char v12 = 0;
  }
  md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(&v327, *(void *)(a3 + 16), a4, (uint64_t)a5, a7);
  a1[1] = 0;
  *a1 = &unk_1EF553B50;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v13 = v327;
  int64_t v14 = (char *)v328 - (char *)v327;
  unint64_t v306 = (void *)a4;
  if (v328 == v327)
  {
    unint64_t v310 = 0;
    uint64_t v18 = 0;
    int8x16_t v16 = a1;
  }
  else
  {
    if (v14 < 0) {
      abort();
    }
    uint64_t v15 = operator new((char *)v328 - (char *)v327);
    int8x16_t v16 = a1;
    a1[1] = v15;
    a1[2] = v15;
    uint64_t v17 = (char *)&v15[v14 >> 3];
    a1[3] = v17;
    uint64_t v18 = v15;
    memcpy(v15, v13, v14);
    unint64_t v310 = v17;
    a1[2] = v17;
  }
  *((_OWORD *)v16 + 2) = 0u;
  v16[12] = 0;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((unsigned char *)v16 + 104) = a7;
  v16[14] = 0;
  *((unsigned char *)v16 + 120) = 0;
  *((unsigned char *)v16 + 144) = 0;
  if (v11)
  {
    *((unsigned char *)v16 + 120) = v12;
    *((unsigned char *)v16 + 121) = v7;
    *(void *)((char *)v16 + 124) = v8;
    *((unsigned char *)v16 + 144) = 1;
  }
  if (v18 != v310)
  {
    int8x16_t v19 = 0;
    float32x4_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = a1;
    while (1)
    {
      uint64_t v23 = (void *)*v18;
      v23[1] = v22;
      unint64_t v24 = (void **)v23[111];
      uint64_t v25 = (void **)v23[112];
      unint64_t v311 = v18;
      uint64_t v313 = v25;
      while (v24 != v25)
      {
        unint64_t v315 = (unint64_t)v21;
        v317 = v24;
        unint64_t v319 = v20;
        unint64_t v26 = *v24;
        v26[1] = **v24;
        v26[3] = v26[2];
        v26[5] = v26[4];
        long long v332 = 0uLL;
        unint64_t v333 = 0;
        memset(&v330, 0, sizeof(v330));
        int v28 = (uint64_t *)v26[7];
        int v27 = (uint64_t *)v26[8];
        if (v28 != v27)
        {
          unint64_t v322 = (uint64_t *)v26[8];
          float v325 = v19;
          do
          {
            uint64_t v33 = *v28;
            __p.__begin_ = (std::vector<unsigned int>::pointer)1;
            md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(v33, (uint64_t)&v332, &v330, (uint64_t *)&__p);
            std::vector<unsigned int>::pointer begin = __p.__begin_;
            if (__p.__begin_ >= (std::vector<unsigned int>::pointer)2)
            {
              uint64_t v35 = v332;
              if (*(unsigned char *)(v33 + 96))
              {
                uint64_t v36 = 0;
                unint64_t v37 = 0;
                float v38 = *(float *)(v33 + 100);
                float v39 = *(float *)(v33 + 104);
              }
              else
              {
                uint64_t v40 = (float *)(v332 + 12);
                float v41 = *(float *)v332;
                unint64_t v42 = (char *)__p.__begin_ - 1;
                while (1)
                {
                  if (vabds_f32(*v40, v41) >= 1.0e-10)
                  {
                    float v45 = v40[1] - *(float *)(v332 + 4);
                    goto LABEL_32;
                  }
                  float v43 = *(float *)(v332 + 4);
                  float v44 = v40[1];
                  if (vabds_f32(v44, v43) >= 1.0e-10) {
                    break;
                  }
                  v40 += 3;
                  if (!--v42)
                  {
                    float v39 = 0.0;
                    float v38 = 1.0;
                    goto LABEL_33;
                  }
                }
                float v45 = v44 - v43;
LABEL_32:
                float v46 = *v40 - v41;
                float v47 = 1.0 / sqrtf((float)(v46 * v46) + (float)(v45 * v45));
                float v38 = v47 * v46;
                float v39 = v47 * v45;
LABEL_33:
                uint64_t v36 = 2;
                unint64_t v37 = 1;
              }
              uint64_t v48 = (char *)__p.__begin_ - 1;
              if ((std::vector<unsigned int>::pointer)v37 < (std::vector<unsigned int>::pointer)((char *)__p.__begin_
                                                                                                - 1))
              {
                uint64_t v49 = v332 + 12 * v37 + 16;
                do
                {
                  float v54 = v38;
                  float v55 = v39;
                  unint64_t v56 = v37++;
                  if (v37 < (unint64_t)begin)
                  {
                    uint64_t v57 = (float *)(v35 + 12 * v56);
                    float v58 = *v57;
                    float v59 = v57[1];
                    uint64_t v60 = (float *)v49;
                    unint64_t v61 = v37;
                    while (1)
                    {
                      float v62 = *(v60 - 1);
                      float v63 = vabds_f32(*v60, v59);
                      if (vabds_f32(v62, v58) >= 1.0e-10 || v63 >= 1.0e-10) {
                        break;
                      }
                      ++v61;
                      v60 += 3;
                      if (v61 >= (unint64_t)begin) {
                        goto LABEL_49;
                      }
                    }
                    float v65 = v62 - v58;
                    float v66 = *v60 - v59;
                    float v67 = 1.0 / sqrtf((float)(v65 * v65) + (float)(v66 * v66));
                    float v38 = v67 * v65;
                    float v39 = v67 * v66;
                  }
LABEL_49:
                  float v68 = atan2f(v39, v38);
                  float v51 = v68 - atan2f(v55, v54);
                  double v69 = v51;
                  if (v51 > 3.14159265)
                  {
                    double v50 = v69 + -6.28318531;
                  }
                  else
                  {
                    if (v69 >= -3.14159265) {
                      goto LABEL_38;
                    }
                    double v50 = v69 + 6.28318531;
                  }
                  float v51 = v50;
LABEL_38:
                  float v52 = fmaxf(ceilf(fabsf(v51) * 1.2732), 1.0);
                  unint64_t v53 = 2;
                  if ((unint64_t)v52 >= 2) {
                    unint64_t v53 = 2 * (unint64_t)v52;
                  }
                  v36 += v53;
                  v49 += 12;
                }
                while ((char *)v37 != v48);
              }
              uint64_t v70 = v36 + 2;
              if ((unint64_t)(v36 + 2) < 0x10000)
              {
                uint64_t v29 = 3 * v70 + *(void *)(v33 + 24);
                uint64_t v30 = *(void *)(v33 + 8) + v70;
                uint64_t v31 = v29 - 6;
              }
              else
              {
                uint64_t v30 = *(void *)(v33 + 8);
                uint64_t v31 = *(void *)(v33 + 24);
              }
              int v27 = v322;
              int8x16_t v19 = v325;
              *(void *)(v33 + 16) = v30;
              *(void *)(v33 + 32) = v31;
              *(void *)(v33 + 48) = *(void *)(v33 + 40);
            }
            BOOL v32 = (void *)*v28++;
            v26[1] = v32[2] + v26[1] - v32[1];
            v26[3] = v32[4] + v26[3] - v32[3];
            v26[5] = v32[6] + v26[5] - v32[5];
          }
          while (v28 != v27);
          if (v330.__begin_) {
            operator delete(v330.__begin_);
          }
        }
        if ((void)v332) {
          operator delete((void *)v332);
        }
        int32x4_t v71 = v317;
        uint64_t v72 = *v317;
        uint64_t v21 = (char *)v315;
        if ((unint64_t)v319 < v315)
        {
          *(void *)unint64_t v319 = v72;
          float32x4_t v20 = v319 + 8;
          uint64_t v22 = a1;
          goto LABEL_15;
        }
        uint64_t v73 = (v319 - v19) >> 3;
        unint64_t v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 61) {
          abort();
        }
        if ((uint64_t)(v315 - (void)v19) >> 2 > v74) {
          unint64_t v74 = (uint64_t)(v315 - (void)v19) >> 2;
        }
        if (v315 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v74;
        }
        if (v75)
        {
          if (v75 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v76 = operator new(8 * v75);
        }
        else
        {
          uint64_t v76 = 0;
        }
        uint64_t v77 = &v76[8 * v73];
        *(void *)uint64_t v77 = v72;
        float32x4_t v20 = v77 + 8;
        if (v319 == v19)
        {
          uint64_t v22 = a1;
          uint64_t v21 = &v76[8 * v75];
          if (!v19) {
            goto LABEL_75;
          }
LABEL_74:
          operator delete(v19);
          goto LABEL_75;
        }
        unint64_t v78 = v319 - 8 - v19;
        uint64_t v22 = a1;
        if (v78 < 0x168)
        {
          uint64_t v79 = v319;
          goto LABEL_72;
        }
        if (&v76[v319 - v19 - 8 - (v78 & 0xFFFFFFFFFFFFFFF8)] > &v76[v319 - v19 - 8])
        {
          uint64_t v79 = v319;
          do
          {
LABEL_72:
            uint64_t v80 = *((void *)v79 - 1);
            v79 -= 8;
            *((void *)v77 - 1) = v80;
            v77 -= 8;
          }
          while (v79 != v19);
          goto LABEL_73;
        }
        if (&v319[-(v78 & 0xFFFFFFFFFFFFFFF8) - 8] > v319 - 8)
        {
          uint64_t v79 = v319;
          goto LABEL_72;
        }
        if ((unint64_t)(v19 - v76) < 0x20)
        {
          uint64_t v79 = v319;
          goto LABEL_72;
        }
        uint64_t v81 = (v78 >> 3) + 1;
        uint64_t v79 = &v319[-8 * (v81 & 0x3FFFFFFFFFFFFFFCLL)];
        int8x16_t v82 = &v76[8 * v73 - 16];
        uint64_t v83 = v319 - 16;
        uint64_t v84 = v81 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v85 = *(_OWORD *)v83;
          *(v82 - 1) = *((_OWORD *)v83 - 1);
          _OWORD *v82 = v85;
          v82 -= 2;
          v83 -= 32;
          v84 -= 4;
        }
        while (v84);
        v77 -= 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
        if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_72;
        }
LABEL_73:
        uint64_t v21 = &v76[8 * v75];
        if (v19) {
          goto LABEL_74;
        }
LABEL_75:
        int8x16_t v19 = v77;
        int32x4_t v71 = v317;
LABEL_15:
        unint64_t v24 = (void **)(v71 + 1);
        uint64_t v25 = v313;
      }
      uint64_t v18 = v311 + 1;
      if (v311 + 1 == v310)
      {
        if (!*((unsigned char *)v22 + 104)) {
          goto LABEL_92;
        }
LABEL_91:
        operator new();
      }
    }
  }
  float32x4_t v20 = 0;
  int8x16_t v19 = 0;
  if (a7) {
    goto LABEL_91;
  }
LABEL_92:
  unint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  unint64_t v89 = (v20 - v19) >> 3;
  do
  {
    if (v86 == v89
      || (unint64_t)(*(void *)(*(void *)&v19[8 * v86] + 8) + v88 - **(void **)&v19[8 * v86]) >= 0x10000)
    {
      int v90 = operator new(0xF8uLL);
      v90[1] = 0;
      v90[2] = 0;
      void *v90 = &unk_1EF584A80;
      ggl::BufferData::BufferData((uint64_t)(v90 + 3), 20, 0, 0, 1, v88);
      v90[29] = "BatchType/VData";
      v90[30] = &ggl::PatternedRibbon::defaultVboReflection;
      v90[3] = &unk_1EF55C688;
      v90[28] = &unk_1EF55C6A8;
      int v91 = operator new(0xF8uLL);
      v91[1] = 0;
      v91[2] = 0;
      *int v91 = &unk_1EF583D28;
      ggl::BufferData::BufferData((uint64_t)(v91 + 3), 2, 1, 0, 1, v87);
      *((_DWORD *)v91 + 60) = 0;
      v91[3] = &unk_1EF55B630;
      v91[4] = 2;
      v91[28] = &unk_1EF55B650;
      v91[29] = "BatchType/IData";
      operator new();
    }
    if (v86 < v89)
    {
      int v92 = *(void **)&v19[8 * v86];
      uint64_t v88 = v92[1] + v88 - *v92;
      uint64_t v87 = v92[3] + v87 + v92[5] - (v92[2] + v92[4]);
    }
    ++v86;
  }
  while (v86 <= v89);
  if (v19) {
    operator delete(v19);
  }
  unsigned int v93 = a1;
  uint64_t v94 = a2;
  if (v327) {
    operator delete(v327);
  }
  *a1 = &unk_1EF531018;
  a1[19] = *v306;
  uint64_t v95 = v306[1];
  a1[20] = v95;
  if (v95) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v95 + 8), 1uLL, memory_order_relaxed);
  }
  a1[21] = *a5;
  uint64_t v96 = a5[1];
  a1[22] = v96;
  if (v96) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v96 + 8), 1uLL, memory_order_relaxed);
  }
  a1[23] = 0;
  uint64_t v97 = a1[1];
  uint64_t v287 = a1[2];
  if (v97 != v287)
  {
    float v98 = 1.0;
    do
    {
      uint64_t v288 = v97;
      uint64_t v99 = *(uint64_t **)(*(void *)v97 + 888);
      int8x16_t v100 = *(uint64_t **)(*(void *)v97 + 896);
      uint64_t v290 = v100;
      while (v99 != v100)
      {
        uint64_t v101 = *v99;
        uint64_t v293 = **(void **)(*(void *)(*v99 + 88) + 64);
        uint64_t v102 = *(void *)(v293 + 8);
        uint64_t v295 = v102 * *(void *)(*v99 + 8);
        uint64_t v298 = v102 * *(void *)*v99;
        unint64_t v291 = v99;
        if (v295 == v298)
        {
          uint64_t v300 = 0;
        }
        else if (v94 && *(unsigned char *)(v293 + 17) != 2)
        {
          uint64_t v300 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v94 + 56))(v94, v293, v298, v295, 1, 1);
        }
        else
        {
          uint64_t v300 = *(void *)(v293 + 72) + v298;
        }
        unint64_t v103 = *(void *)(v101 + 16);
        unint64_t v105 = *(void *)(v101 + 32);
        unint64_t v104 = *(void *)(v101 + 40);
        if (v104 == v105)
        {
          unint64_t v104 = *(void *)(v101 + 24);
        }
        else
        {
          if (v105 < v103) {
            unint64_t v103 = *(void *)(v101 + 32);
          }
          if (*(void *)(v101 + 24) > v104) {
            unint64_t v104 = *(void *)(v101 + 24);
          }
        }
        uint64_t v292 = *(void *)(*(void *)(v101 + 88) + 96);
        uint64_t v106 = *(void *)(v292 + 8);
        uint64_t v294 = v106 * v104;
        uint64_t v297 = v106 * v103;
        if (v106 * v104 == v106 * v103)
        {
          uint64_t v299 = 0;
        }
        else if (v94 && *(unsigned char *)(v292 + 17) != 2)
        {
          uint64_t v299 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v94 + 56))(v94, v292, v297, v294, 1, 1);
        }
        else
        {
          uint64_t v299 = *(void *)(v292 + 72) + v297;
        }
        uint64_t v107 = *(void *)(v101 + 16);
        uint64_t v108 = *(void *)(v101 + 32);
        float v327 = 0;
        uint64_t v328 = 0;
        uint64_t v329 = 0;
        memset(&__p, 0, sizeof(__p));
        BOOL v109 = *(uint64_t **)(v101 + 56);
        uint64_t v296 = (void *)(v101 + 56);
        uint64_t v110 = *(uint64_t **)(v101 + 64);
        if (v109 != v110)
        {
          uint64_t v111 = 2 * v103;
          uint64_t v112 = v299 + 2 * v108 - 2 * v103;
          uint64_t v113 = v299 + 2 * v107 - v111;
          uint64_t v309 = v300;
          BOOL v301 = *(uint64_t **)(v101 + 64);
          uint64_t v302 = v101;
          while (1)
          {
            uint64_t v115 = *v109;
            uint64_t v116 = *(void *)(*v109 + 16);
            if (v116 != *(void *)(*v109 + 8)) {
              break;
            }
            uint64_t v114 = *(void *)(*v109 + 16);
LABEL_134:
            v309 += 20 * (v114 - v116);
            v113 += 2 * (*(void *)(v115 + 32) - *(void *)(v115 + 24));
            v112 += 2 * (*(void *)(v115 + 48) - *(void *)(v115 + 40));
            if (++v109 == v110) {
              goto LABEL_241;
            }
          }
          unint64_t v331 = 1;
          md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(v115, (uint64_t)&v327, &__p, (uint64_t *)&v331);
          unint64_t v305 = (_WORD *)v113;
          uint64_t v307 = v112;
          unint64_t v118 = v331;
          if (v331 >= 2)
          {
            uint64_t v119 = v327;
            unint64_t v120 = v331 - 1;
            int32x2_t v121 = *v327;
            if (v331 > 9)
            {
              uint64_t v126 = v120 & 7;
              if ((v120 & 7) == 0) {
                uint64_t v126 = 8;
              }
              unint64_t v122 = v120 - v126;
              v117.u64[1] = (unint64_t)*v327;
              int8x16_t v127 = (int8x16_t)vdupq_lane_s32(v121, 0);
              size_t v128 = (int32x4_t *)((char *)&v327[7] + 4);
              float32x4_t v129 = 0uLL;
              unint64_t v130 = v122;
              float32x4_t v131 = 0uLL;
              long long v125 = "se_cfENS_8_hash_cfENS_9_equal_cfEEE";
              do
              {
                i32 = (const float *)v128[-3].i32;
                float32x4x3_t v336 = vld3q_f32(i32);
                int32x4_t v134 = v128[1];
                int32x4_t v133 = v128[2];
                int32x4_t v135 = *v128;
                v128 += 6;
                v136.i64[0] = __PAIR64__(v135.u32[3], v135.u32[0]);
                float32x4_t v137 = (float32x4_t)vrev64q_s32(v134);
                v137.i32[0] = v135.i32[1];
                v136.i64[1] = __PAIR64__(v133.u32[1], v134.u32[2]);
                v137.i32[3] = v133.i32[2];
                float32x4_t v138 = vsubq_f32(v336.val[0], (float32x4_t)vextq_s8(v127, (int8x16_t)v336.val[0], 0xCuLL));
                float32x4_t v139 = vsubq_f32((float32x4_t)v136, (float32x4_t)vextq_s8((int8x16_t)v336.val[0], v136, 0xCuLL));
                float32x4_t v140 = vsubq_f32(v336.val[1], (float32x4_t)vextq_s8(v117, (int8x16_t)v336.val[1], 0xCuLL));
                v336.val[0] = vsubq_f32(v137, (float32x4_t)vextq_s8((int8x16_t)v336.val[1], (int8x16_t)v137, 0xCuLL));
                float32x4_t v129 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v138, v138), v140, v140)), v129);
                float32x4_t v131 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v139, v139), v336.val[0], v336.val[0])), v131);
                int8x16_t v117 = (int8x16_t)v137;
                int8x16_t v127 = v136;
                v130 -= 8;
              }
              while (v130);
              float32x2_t v124 = *(float32x2_t *)((char *)v133.i64 + 4);
              float32x4_t v141 = vaddq_f32(v131, v129);
              float v123 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v141, v141));
            }
            else
            {
              unint64_t v122 = 0;
              float v123 = 0.0;
              float32x2_t v124 = (float32x2_t)*v327;
              long long v125 = "N3geo11_retain_ptrIP9CGContextNS_10_retain_cfIS2_EENS_11_release_cfENS_8_hash_cfENS_9_equal_cfEEE"
                   + 62;
            }
            unint64_t v142 = v122 + 1;
            char v143 = (char *)&v327[1] + 12 * v122 + 4;
            do
            {
              float32x2_t v144 = *(float32x2_t *)v143;
              v143 += 12;
              float32x2_t v145 = vsub_f32(v144, v124);
              float v123 = sqrtf(vaddv_f32(vmul_f32(v145, v145))) + v123;
              ++v142;
              float32x2_t v124 = v144;
            }
            while (v331 != v142);
            double v146 = v123;
            float v147 = v98 / v123;
            if (v146 <= 1.0e-10) {
              float v147 = 0.0;
            }
            float v312 = v147;
            uint64_t v304 = v109;
            if (*(unsigned char *)(v115 + 96))
            {
              uint64_t v148 = 0;
              float v150 = *(float *)(v115 + 100);
              float v149 = *(float *)(v115 + 104);
              float v151 = 0.0;
              uint64_t v152 = v309;
              goto LABEL_150;
            }
            unint64_t v200 = (float *)&v327[2];
            float v151 = sqrtf((float)((float)(*(float *)&v327[1].i32[1] - *(float *)v121.i32)* (float)(*(float *)&v327[1].i32[1] - *(float *)v121.i32))+ (float)((float)(*(float *)v327[2].i32 - *(float *)&v121.i32[1])* (float)(*(float *)v327[2].i32 - *(float *)&v121.i32[1])));
            unint64_t v201 = v331 - 1;
            do
            {
              float v202 = *(v200 - 1);
              float v203 = vabds_f32(*v200, *(float *)&v121.i32[1]);
              if (vabds_f32(v202, *(float *)v121.i32) >= 1.0e-10 || v203 >= 1.0e-10)
              {
                float v205 = v202 - *(float *)v121.i32;
                float v206 = *v200 - *(float *)&v121.i32[1];
                float v207 = v98 / sqrtf((float)(v205 * v205) + (float)(v206 * v206));
                float v150 = v207 * v205;
                float v149 = v207 * v206;
                goto LABEL_192;
              }
              v200 += 3;
              --v201;
            }
            while (v201);
            float v150 = 1.0;
            float v149 = 0.0;
LABEL_192:
            __int32 v208 = v327[1].i32[0];
            v330.__end_cap_.__value_ = 0;
            *(float *)&unint64_t v333 = -v149;
            *((float *)&v333 + 1) = v150;
            *(float *)&long long v332 = -v149;
            *(void *)((char *)&v332 + 4) = __PAIR64__(LODWORD(v149), LODWORD(v150));
            *((float *)&v332 + 3) = -v150;
            *(_OWORD *)&v330.__begin_ = xmmword_1A28FC8C0;
            float v209 = fmaxf(*(float *)v121.i32, 0.0);
            *(float *)v121.i32 = v209 >= v98 ? 65535.0 : v209 * 65535.0;
            int v210 = (int)*(float *)v121.i32;
            float v211 = fmaxf(*(float *)&v121.i32[1], 0.0);
            float v212 = v211 >= v98 ? 65535.0 : v211 * 65535.0;
            int v213 = (int)v212;
            *(_WORD *)uint64_t v309 = v210;
            *(_WORD *)(v309 + 2) = (int)v212;
            v214.i64[0] = v332;
            v214.i64[1] = 0xBF80000000000000;
            v215.i64[0] = 0xBF000000BF000000;
            v215.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v309 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v215, (float32x4_t)xmmword_1A28FC8B0, v214)));
            *(_DWORD *)(v309 + 12) = v208;
            *(_DWORD *)(v309 + 16) = 0;
            *(_WORD *)(v309 + 20) = v210;
            *(_WORD *)(v309 + 22) = v213;
            v214.i64[0] = *((void *)&v332 + 1);
            v214.i64[1] = (uint64_t)v330.__end_;
            v215.i64[0] = 0xBF000000BF000000;
            v215.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v309 + 24) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v215, (float32x4_t)xmmword_1A28FC8B0, v214)));
            *(_DWORD *)(v309 + 32) = v208;
            *(_DWORD *)(v309 + 36) = 0;
            uint64_t v152 = v309 + 40;
            uint64_t v148 = 1;
            if (v120 > 1)
            {
LABEL_150:
              uint64_t v153 = (uint64_t)&v119[2] + 12 * v148;
              float v154 = v149;
              float v155 = v150;
              do
              {
                unint64_t v165 = (char *)v119 + 12 * v148;
                float v166 = *(float *)v165;
                float v167 = *((float *)v165 + 1);
                if (++v148 < v118)
                {
                  size_t v168 = (float *)v153;
                  unint64_t v169 = v148;
                  do
                  {
                    float v170 = *(v168 - 1);
                    float v171 = vabds_f32(*v168, v167);
                    if (vabds_f32(v170, v166) >= 1.0e-10 || v171 >= 1.0e-10)
                    {
                      float v173 = v170 - v166;
                      float v174 = *v168 - v167;
                      float v175 = v98 / sqrtf((float)(v173 * v173) + (float)(v174 * v174));
                      float v155 = v175 * v173;
                      float v154 = v175 * v174;
                      goto LABEL_168;
                    }
                    ++v169;
                    v168 += 3;
                  }
                  while (v169 < v118);
                  float v154 = v149;
                  float v155 = v150;
                }
LABEL_168:
                float v323 = *(float *)v165;
                float v176 = v155 + v150;
                float v177 = v154 + v149;
                float v178 = (float)(v176 * v176) + (float)(v177 * v177);
                float v179 = v149;
                float v180 = v150;
                if (v178 > 0.0)
                {
                  float v181 = v98 / sqrtf(v178);
                  float v150 = -(float)(v177 * v181);
                  float v179 = v181 * v176;
                }
                float v316 = *((float *)v165 + 4);
                int v182 = *((_DWORD *)v165 + 2);
                float v314 = *((float *)v165 + 3);
                *(float *)&v330.__end_cap_.__value_ = v151;
                *((float *)&v330.__end_cap_.__value_ + 1) = v151 * v312;
                *(_OWORD *)&v330.__begin_ = xmmword_1A28FC8C0;
                float v318 = v154;
                float v320 = v155;
                float v183 = atan2f(v154, v155);
                float v184 = v183 - atan2f(v149, v180);
                double v185 = v184;
                if (v184 <= *((double *)v125 + 138))
                {
                  float v98 = 1.0;
                  float v186 = v323;
                  if (v185 < -3.14159265) {
                    float v184 = v185 + 6.28318531;
                  }
                }
                else
                {
                  float v184 = v185 + -6.28318531;
                  float v98 = 1.0;
                  float v186 = v323;
                }
                unint64_t v187 = (unint64_t)fmaxf(ceilf(fabsf(v184) * 1.2732), v98);
                if (v187 <= 1)
                {
                  float v155 = v320;
                  float v154 = v318;
                  float v156 = sqrtf(fmaxf(-(float)((float)((float)((float)(v150 * v320) + (float)(v179 * v318))* (float)((float)(v150 * v320) + (float)(v179 * v318)))+ -1.0), 0.1));
                  unint64_t v333 = __PAIR64__(LODWORD(v179), LODWORD(v150));
                  *(float *)&long long v332 = v150 / v156;
                  *((float *)&v332 + 1) = v179 / v156;
                  *((float *)&v332 + 2) = -(float)(v150 / v156);
                  *((float *)&v332 + 3) = -(float)(v179 / v156);
                  float v157 = fmaxf(v186, 0.0);
                  if (v157 >= v98) {
                    float v158 = 65535.0;
                  }
                  else {
                    float v158 = v157 * 65535.0;
                  }
                  int v159 = (int)v158;
                  float v160 = fmaxf(v167, 0.0);
                  if (v160 >= v98) {
                    float v161 = 65535.0;
                  }
                  else {
                    float v161 = v160 * 65535.0;
                  }
                  int v162 = (int)v161;
                  *(_WORD *)uint64_t v152 = v159;
                  *(_WORD *)(v152 + 2) = (int)v161;
                  v163.i64[0] = v332;
                  v163.i64[1] = (uint64_t)v330.__begin_;
                  v164.i64[0] = 0xBF000000BF000000;
                  v164.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v152 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v164, (float32x4_t)xmmword_1A28FC8B0, v163)));
                  *(_DWORD *)(v152 + 12) = v182;
                  *(float *)(v152 + 16) = v151;
                  *(_WORD *)(v152 + 20) = v159;
                  *(_WORD *)(v152 + 22) = v162;
                  v163.i64[0] = *((void *)&v332 + 1);
                  v163.i64[1] = (uint64_t)v330.__end_;
                  v164.i64[0] = 0xBF000000BF000000;
                  v164.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v152 + 24) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v164, (float32x4_t)xmmword_1A28FC8B0, v163)));
                  *(_DWORD *)(v152 + 32) = v182;
                  *(float *)(v152 + 36) = v151;
                  v152 += 40;
                }
                else
                {
                  uint64_t v188 = v115;
                  size_t v189 = v119;
                  uint64_t v190 = 0;
                  float v191 = fmaxf(v186, 0.0);
                  if (v191 >= v98) {
                    float v192 = 65535.0;
                  }
                  else {
                    float v192 = v191 * 65535.0;
                  }
                  int v193 = (int)v192;
                  float v194 = fmaxf(v167, 0.0);
                  if (v194 >= v98) {
                    float v195 = 65535.0;
                  }
                  else {
                    float v195 = v194 * 65535.0;
                  }
                  int v196 = (int)v195;
                  do
                  {
                    __float2 v197 = __sincosf_stret((float)((float)((float)(int)v190 * (float)(1.0 / (float)((float)v187 + -1.0))) + -0.5)* v184);
                    *(float *)&unint64_t v333 = -(float)((float)(v197.__sinval * v179) - (float)(v197.__cosval * v150));
                    *((float *)&v333 + 1) = (float)(v197.__sinval * v150) + (float)(v197.__cosval * v179);
                    *(void *)&long long v332 = v333;
                    *((float *)&v332 + 2) = -(float)((float)(v197.__cosval * v150) - (float)(v197.__sinval * v179));
                    *((float *)&v332 + 3) = -*((float *)&v333 + 1);
                    *(_WORD *)uint64_t v152 = v193;
                    *(_WORD *)(v152 + 2) = v196;
                    v198.i64[0] = v332;
                    v198.i64[1] = (uint64_t)v330.__begin_;
                    v199.i64[0] = 0xBF000000BF000000;
                    v199.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v152 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v199, (float32x4_t)xmmword_1A28FC8B0, v198)));
                    *(_DWORD *)(v152 + 12) = v182;
                    *(float *)(v152 + 16) = v151;
                    *(_WORD *)(v152 + 20) = v193;
                    *(_WORD *)(v152 + 22) = v196;
                    v198.i64[0] = *((void *)&v332 + 1);
                    v198.i64[1] = (uint64_t)v330.__end_;
                    v199.i64[0] = 0xBF000000BF000000;
                    v199.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v152 + 24) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v199, (float32x4_t)xmmword_1A28FC8B0, v198)));
                    *(_DWORD *)(v152 + 32) = v182;
                    *(float *)(v152 + 36) = v151;
                    v152 += 40;
                    ++v190;
                  }
                  while (v187 != v190);
                  long long v125 = "N3geo11_retain_ptrIP9CGContextNS_10_retain_cfIS2_EENS_11_release_cfENS_8_hash_cfENS_9_equal_cfEEE"
                       + 62;
                  float v98 = 1.0;
                  uint64_t v119 = v189;
                  uint64_t v115 = v188;
                  float v155 = v320;
                  float v154 = v318;
                  float v186 = v323;
                }
                float v151 = sqrtf((float)((float)(v314 - v186) * (float)(v314 - v186))+ (float)((float)(v316 - v167) * (float)(v316 - v167)))+ v151;
                v153 += 12;
                float v149 = v154;
                float v150 = v155;
                unint64_t v120 = v118 - 1;
              }
              while (v148 != v118 - 1);
            }
            else
            {
              float v154 = v149;
              float v155 = v150;
            }
            __int32 v216 = (char *)v119 + 12 * v120;
            unint64_t v217 = (char *)v119 + 12 * v118;
            float v219 = *((float *)v217 - 6);
            int64_t v218 = v217 - 24;
            float v220 = v219;
            float v221 = *(float *)v216;
            unsigned int v93 = a1;
            if (vabds_f32(*(float *)v216, v219) >= 1.0e-10)
            {
              float v223 = *((float *)v216 + 1);
              float v225 = v223 - *((float *)v218 + 1);
              uint64_t v101 = v302;
              int v224 = (__int16 *)v307;
LABEL_204:
              float v226 = v221 - v220;
              float v227 = v98 / sqrtf((float)(v226 * v226) + (float)(v225 * v225));
              float v155 = v227 * v226;
              float v154 = v227 * v225;
            }
            else
            {
              float v222 = *((float *)v218 + 1);
              float v223 = *((float *)v216 + 1);
              uint64_t v101 = v302;
              int v224 = (__int16 *)v307;
              if (vabds_f32(v223, v222) >= 1.0e-10)
              {
                float v225 = v223 - v222;
                goto LABEL_204;
              }
            }
            if (*(unsigned char *)(v115 + 97))
            {
              float v321 = v223;
              float v324 = *(float *)v216;
              float v228 = *(float *)(v115 + 108);
              float v229 = *(float *)(v115 + 112);
              float v230 = v155 + v228;
              float v231 = v154 + v229;
              float v232 = (float)(v230 * v230) + (float)(v231 * v231);
              float v233 = v155;
              float v234 = v155;
              float v235 = v154;
              float v236 = v154;
              if (v232 > 0.0)
              {
                float v237 = v98 / sqrtf(v232);
                float v234 = -(float)(v231 * v237);
                float v236 = v237 * v230;
              }
              float v238 = atan2f(*(float *)(v115 + 112), *(float *)(v115 + 108));
              float v239 = v238 - atan2f(v235, v233);
              double v240 = v239;
              if (v239 <= 3.14159265)
              {
                float v98 = 1.0;
                float v221 = v324;
                float v223 = v321;
                if (v240 < -3.14159265) {
                  float v239 = v240 + 6.28318531;
                }
              }
              else
              {
                float v239 = v240 + -6.28318531;
                float v98 = 1.0;
                float v221 = v324;
                float v223 = v321;
              }
              unint64_t v241 = (unint64_t)fmaxf(ceilf(fabsf(v239) * 1.2732), v98);
              float v242 = v234;
              float v155 = v236;
              if (v241 <= 1)
              {
                float v243 = sqrtf(fmaxf(-(float)((float)((float)((float)(v234 * v228) + (float)(v236 * v229))* (float)((float)(v234 * v228) + (float)(v236 * v229)))+ -1.0), 0.1));
                float v242 = v234 / v243;
                float v155 = v236 / v243;
              }
              *(void *)&long long v332 = __PAIR64__(LODWORD(v155), LODWORD(v242));
              float v154 = -v242;
            }
            else
            {
              float v234 = -v154;
              *(float *)&long long v332 = -v154;
              *((float *)&v332 + 1) = v155;
              float v236 = v155;
            }
            *((float *)&v332 + 2) = v154;
            *((float *)&v332 + 3) = -v155;
            int v244 = *((_DWORD *)v216 + 2);
            unint64_t v333 = __PAIR64__(LODWORD(v236), LODWORD(v234));
            *(float *)&v330.__end_cap_.__value_ = v151;
            *((float *)&v330.__end_cap_.__value_ + 1) = v151 * v312;
            float v245 = fmaxf(v221, 0.0);
            float v246 = v245 >= v98 ? 65535.0 : v245 * 65535.0;
            int v247 = (int)v246;
            float v248 = fmaxf(v223, 0.0);
            float v249 = v248 >= v98 ? 65535.0 : v248 * 65535.0;
            int v250 = (int)v249;
            *(_WORD *)uint64_t v152 = v247;
            *(_WORD *)(v152 + 2) = (int)v249;
            v251.i64[0] = v332;
            v251.i64[1] = (uint64_t)v330.__begin_;
            v252.i64[0] = 0xBF000000BF000000;
            v252.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v152 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v252, (float32x4_t)xmmword_1A28FC8B0, v251)));
            *(_DWORD *)(v152 + 12) = v244;
            *(float *)(v152 + 16) = v151;
            *(_WORD *)(v152 + 20) = v247;
            *(_WORD *)(v152 + 22) = v250;
            v251.i64[0] = *((void *)&v332 + 1);
            v251.i64[1] = (uint64_t)v330.__end_;
            v252.i64[0] = 0xBF000000BF000000;
            v252.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v152 + 24) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v252, (float32x4_t)xmmword_1A28FC8B0, v251)));
            *(_DWORD *)(v152 + 32) = v244;
            *(float *)(v152 + 36) = v151;
            unint64_t v253 = *(void *)(v115 + 8);
            unint64_t v254 = *(void *)(v115 + 16) - v253;
            v255.i64[0] = 0x1000100010001;
            v255.i64[1] = 0x1000100010001;
            BOOL v109 = v304;
            uint64_t v110 = v301;
            if (v254 >= 4)
            {
              unint64_t v256 = v254 >> 1;
              uint64_t v257 = *(void *)(v115 + 8);
              uint64_t v258 = (v254 >> 1) - 1;
              if (v254 >= 6)
              {
                uint64_t v261 = 0;
                unint64_t v262 = v258 & 0xFFFFFFFFFFFFFFFELL;
                int64x2_t v263 = v305 + 6;
                do
                {
                  __int16 v264 = v253 + 2 * v261;
                  *(v263 - 6) = v264;
                  _WORD *v263 = v264 + 2;
                  *(v263 - 5) = v264 + 1;
                  v263[1] = v264 + 3;
                  *(v263 - 4) = v264 + 2;
                  v263[2] = v264 + 4;
                  *(v263 - 3) = v264 + 1;
                  v263[3] = v264 + 3;
                  *(v263 - 2) = v264 + 3;
                  v263[4] = v264 + 5;
                  v261 += 2;
                  *(v263 - 1) = v264 + 2;
                  v263[5] = v264 + 4;
                  v263 += 12;
                }
                while (v262 != v261);
                if (v258 != v262)
                {
                  uint64_t v259 = v258 | 1;
                  LODWORD(v257) = 2 * (v258 & 0xFFFFFFFE) + v253;
                  float32x4_t v260 = &v305[6 * (v258 & 0xFFFFFFFFFFFFFFFELL)];
                  goto LABEL_229;
                }
              }
              else
              {
                uint64_t v259 = 1;
                float32x4_t v260 = v305;
LABEL_229:
                unint64_t v265 = v256 - v259;
                do
                {
                  *float32x4_t v260 = v257;
                  __int16 v266 = v257 + 1;
                  v260[1] = v257 + 1;
                  __int16 v267 = v257 + 3;
                  LODWORD(v257) = v257 + 2;
                  v260[2] = v257;
                  v260[3] = v266;
                  v260[4] = v267;
                  v260[5] = v257;
                  v260 += 6;
                  --v265;
                }
                while (v265);
              }
              if (*(void *)(v115 + 48) != *(void *)(v115 + 40))
              {
                if (v254 >= 0x12)
                {
                  unint64_t v270 = v258 & 0xFFFFFFFFFFFFFFF8;
                  int64x2_t v271 = (int64x2_t)xmmword_1A28FCD40;
                  int64x2_t v272 = (int64x2_t)xmmword_1A28FCD50;
                  int64x2_t v273 = (int64x2_t)xmmword_1A28FCD60;
                  int64x2_t v274 = (int64x2_t)xmmword_1A28FC6E0;
                  long long v275 = v224;
                  unint64_t v276 = v258 & 0xFFFFFFFFFFFFFFF8;
                  int64x2_t v277 = vdupq_n_s64(v253);
                  do
                  {
                    v335.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v277, vaddq_s64(v274, v274)), (int32x4_t)vaddq_s64(v277, vaddq_s64(v273, v273))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v277, vaddq_s64(v272, v272)), (int32x4_t)vaddq_s64(v277, vaddq_s64(v271, v271))));
                    v335.val[0] = vaddq_s16(v335.val[1], v255);
                    vst2q_s16(v275, v335);
                    v275 += 16;
                    v335.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                    int64x2_t v272 = vaddq_s64(v272, (int64x2_t)v335.val[0]);
                    int64x2_t v273 = vaddq_s64(v273, (int64x2_t)v335.val[0]);
                    int64x2_t v274 = vaddq_s64(v274, (int64x2_t)v335.val[0]);
                    int64x2_t v271 = vaddq_s64(v271, (int64x2_t)v335.val[0]);
                    v276 -= 8;
                  }
                  while (v276);
                  if (v258 != v270)
                  {
                    uint64_t v268 = v270 | 1;
                    uint32x4_t v269 = &v224[2 * (v258 & 0xFFFFFFFFFFFFFFF8)];
                    goto LABEL_238;
                  }
                }
                else
                {
                  uint64_t v268 = 1;
                  uint32x4_t v269 = v224;
LABEL_238:
                  unint64_t v278 = v256 - v268;
                  unint64_t v279 = v253 + 2 * v268;
                  do
                  {
                    *uint32x4_t v269 = v279 - 2;
                    v269[1] = v279;
                    v279 += 2;
                    v269 += 2;
                    --v278;
                  }
                  while (v278);
                }
              }
            }
          }
          uint64_t v115 = *v109;
          uint64_t v116 = *(void *)(*v109 + 8);
          uint64_t v114 = *(void *)(*v109 + 16);
          uint64_t v113 = (uint64_t)v305;
          uint64_t v112 = v307;
          goto LABEL_134;
        }
LABEL_241:
        {
          operator new();
        }
        uint64_t v280 = v296;
        uint64_t v281 = (void *)*v296;
        if (*v296)
        {
          int8x16_t v282 = *(void **)(v101 + 64);
          uint64_t v283 = *v296;
          if (v282 != v281)
          {
            do
            {
              double v285 = (void (***)(void, uint64_t))*--v282;
              uint64_t v284 = v285;
              void *v282 = 0;
              if (v285)
              {
                (**v284)(v284, v283);
                {
                  operator new();
                }
                (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v284, 120);
              }
            }
            while (v282 != v281);
            uint64_t v280 = v296;
            uint64_t v283 = *v296;
          }
          *(void *)(v101 + 64) = v281;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v101 + 80) + 40))(*(void *)(v101 + 80), v283, *(void *)(v101 + 72) - v283);
          void *v280 = 0;
          v280[1] = 0;
          v280[2] = 0;
        }
        void *v280 = 0;
        v280[1] = 0;
        v280[2] = 0;
        uint64_t v94 = a2;
        if (__p.__begin_) {
          operator delete(__p.__begin_);
        }
        if (v327) {
          operator delete(v327);
        }
        if (v299 && v294 != v297 && a2 && *(unsigned char *)(v292 + 17) != 2) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v299, v292, v297, v294, 1, 1);
        }
        if (v300 && v295 != v298 && a2 && *(unsigned char *)(v293 + 17) != 2) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v300, v293, v298, v295, 1, 1);
        }
        uint64_t v99 = v291 + 1;
        int8x16_t v100 = v290;
      }
      uint64_t v97 = v288 + 8;
    }
    while (v288 + 8 != v287);
  }
  *unsigned int v93 = &unk_1EF5343C8;
  v93[24] = 0;
  return v93;
}

void sub_1A25E1ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,void *a45)
{
  MEMORY[0x1A6239270](v45, 0x1020C4007FF0C4BLL);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v48 = a28[14];
  a28[14] = 0;
  if (v48)
  {
    uint64_t v49 = *(void *)(v48 + 2584);
    if (v49) {
      MEMORY[0x1A6239250](v49, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v48, 0x1020C4007FF0C4BLL);
  }
  double v50 = *a33;
  if (*a33)
  {
    a28[5] = v50;
    operator delete(v50);
  }
  float v51 = *a29;
  if (*a29)
  {
    a28[2] = v51;
    operator delete(v51);
  }
  float v52 = *(void **)(v46 - 248);
  if (!v52) {
    _Unwind_Resume(a1);
  }
  operator delete(v52);
  _Unwind_Resume(a1);
}

void md::PatternedLayer::layout(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(unsigned char *)(a2 + 56))
  {
    uint64_t v4 = *(void *)(a1 + 192);
    *(void *)(a1 + 64) = *(void *)(v4 + 8);
    *(void *)(a1 + 56) = *(void *)(v4 + 8);
    *(void *)(a1 + 72) = *(void *)(v4 + 8);
    *(void *)(a1 + 88) = *(void *)(v4 + 24);
    *(void *)(a1 + 80) = *(void *)(v4 + 24);
    *(void *)(a1 + 96) = *(void *)(v4 + 24);
  }
  else
  {
    uint64_t v5 = *(void **)(a1 + 192);
    if (*(unsigned char *)(a2 + 105))
    {
      *(void *)(a1 + 64) = v5[2];
      *(void *)(a1 + 56) = v5[2];
      uint64_t v6 = v5[2];
    }
    else
    {
      *(void *)(a1 + 64) = *v5;
      *(void *)(a1 + 56) = *v5;
      uint64_t v6 = *v5;
    }
    *(void *)(a1 + 72) = v6;
  }
  uint64_t v7 = *(void *)a2;
  if (!*(unsigned char *)(a2 + 104))
  {
    uint64_t v9 = *(void **)(v7 + 8);
    int8x8_t v10 = (int8x8_t)v9[1];
    goto LABEL_43;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(void **)(v7 + 8);
  int8x8_t v10 = (int8x8_t)v9[1];
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  uint64_t v12 = *(void *)&v10 - 1;
  unint64_t v167 = v11.u32[0];
  if (v11.u32[0] >= 2uLL) {
    uint64_t v13 = 0x1AF456233693CD46;
  }
  else {
    uint64_t v13 = v12 & 0x1AF456233693CD46;
  }
  float v170 = fminf(fmaxf(*(float *)(a2 + 64), 0.2), 1.0);
  BOOL v14 = *(void *)&v10 > 0x1AF456233693CD46uLL || v11.u32[0] < 2uLL;
  while (2)
  {
    if (!*(void *)&v10) {
      goto LABEL_36;
    }
    unint64_t v15 = v13;
    if (!v14) {
      unint64_t v15 = 0x1AF456233693CD46uLL % *(void *)&v10;
    }
    int8x16_t v16 = *(void **)(*v9 + 8 * v15);
    if (!v16) {
      goto LABEL_36;
    }
    uint64_t v17 = (void *)*v16;
    if (!v17) {
      goto LABEL_36;
    }
    if (v167 < 2)
    {
      while (1)
      {
        uint64_t v18 = v17[1];
        if (v18 == 0x1AF456233693CD46)
        {
          if (v17[2] == 0x1AF456233693CD46) {
            goto LABEL_34;
          }
        }
        else if ((v18 & v12) != v15)
        {
          goto LABEL_36;
        }
        uint64_t v17 = (void *)*v17;
        if (!v17) {
          goto LABEL_36;
        }
      }
    }
    while (1)
    {
      unint64_t v19 = v17[1];
      if (v19 == 0x1AF456233693CD46) {
        break;
      }
      if (v19 >= *(void *)&v10) {
        v19 %= *(void *)&v10;
      }
      if (v19 != v15) {
        goto LABEL_36;
      }
LABEL_28:
      uint64_t v17 = (void *)*v17;
      if (!v17) {
        goto LABEL_36;
      }
    }
    if (v17[2] != 0x1AF456233693CD46) {
      goto LABEL_28;
    }
LABEL_34:
    uint64_t v20 = v17[5];
    if (*(void *)(v20 + 8) == 0x1AF456233693CD46)
    {
      uint64_t v21 = *(double **)(v20 + 32);
      goto LABEL_37;
    }
LABEL_36:
    uint64_t v21 = 0;
LABEL_37:
    uint64_t v22 = *(void *)(a1 + 8 * v8 + 56);
    if (v22)
    {
      long double v23 = v21[64];
      double v24 = sqrt(v21[62] * v21[62] + v21[63] * v21[63]);
      double v25 = atan2(v23, v24 * 0.996647189);
      __double2 v26 = __sincos_stret(v25);
      double v27 = atan2(v23 + v26.__sinval * v26.__sinval * 42841.3115 * v26.__sinval, v24 + v26.__cosval * v26.__cosval * -42697.6727 * v26.__cosval);
      __double2 v28 = __sincos_stret(v27);
      float v29 = v24 / v28.__cosval + -6378137.0 / sqrt(v28.__sinval * v28.__sinval * -0.00669437999 + 1.0);
      float v30 = fmaxf(fminf(fmaxf((float)(v29 * 0.00021053) + -0.10526, 0.0), 1.0) * v170, 0.0);
      float v31 = (float)(v30 * -200000.0) + -5000.0;
      BOOL v32 = v30 <= 1.0;
      float v33 = -205000.0;
      if (v32) {
        float v33 = v31;
      }
      *(float *)(v22 + 40) = v33;
    }
    if (++v8 != 6) {
      continue;
    }
    break;
  }
LABEL_43:
  if (!*(void *)&v10) {
    goto LABEL_71;
  }
  uint8x8_t v34 = (uint8x8_t)vcnt_s8(v10);
  v34.i16[0] = vaddlv_u8(v34);
  if (v34.u32[0] > 1uLL)
  {
    uint64_t v35 = 0x1AF456233693CD46;
    if (*(void *)&v10 <= 0x1AF456233693CD46uLL) {
      uint64_t v35 = 0x1AF456233693CD46uLL % *(void *)&v10;
    }
  }
  else
  {
    uint64_t v35 = (*(void *)&v10 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v36 = *(void **)(*v9 + 8 * v35);
  if (!v36) {
    goto LABEL_71;
  }
  unint64_t v37 = (void *)*v36;
  if (!v37) {
    goto LABEL_71;
  }
  if (v34.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v39 = v37[1];
      if (v39 == 0x1AF456233693CD46)
      {
        if (v37[2] == 0x1AF456233693CD46) {
          goto LABEL_64;
        }
      }
      else if ((v39 & (*(void *)&v10 - 1)) != v35)
      {
        goto LABEL_71;
      }
      unint64_t v37 = (void *)*v37;
      if (!v37) {
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
    unint64_t v38 = v37[1];
    if (v38 == 0x1AF456233693CD46) {
      break;
    }
    if (v38 >= *(void *)&v10) {
      v38 %= *(void *)&v10;
    }
    if (v38 != v35) {
      goto LABEL_71;
    }
LABEL_53:
    unint64_t v37 = (void *)*v37;
    if (!v37) {
      goto LABEL_71;
    }
  }
  if (v37[2] != 0x1AF456233693CD46) {
    goto LABEL_53;
  }
LABEL_64:
  uint64_t v40 = v37[5];
  if (*(void *)(v40 + 8) != 0x1AF456233693CD46)
  {
LABEL_71:
    uint64_t v41 = 0;
    if (MEMORY[0xEC0]) {
      goto LABEL_72;
    }
LABEL_66:
    if ((*(void *)&v10 & (*(void *)&v10 - 1)) != 0)
    {
      unint64_t v48 = 0x8BD499FBD96FBB9ELL;
      if (*(void *)&v10 <= 0x8BD499FBD96FBB9ELL) {
        unint64_t v48 = 0x8BD499FBD96FBB9ELL % *(void *)&v10;
      }
      unint64_t v42 = *(void **)(*v9 + 8 * v48);
      do
      {
        do
          unint64_t v42 = (void *)*v42;
        while (v42[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v42[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      unint64_t v42 = *(void **)(*v9 + 8 * ((*(void *)&v10 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          unint64_t v42 = (void *)*v42;
        while (v42[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v42[2] != 0x8BD499FBD96FBB9ELL);
    }
    double v49 = 0.0;
    if (**(unsigned char **)(v42[5] + 32) && *(unsigned char *)(a1 + 144)) {
      double v49 = *(double *)(v41 + 24) * 0.0000000249532021 * (double)(1 << *(unsigned char *)(a1 + 121));
    }
    uint64_t v50 = *(void *)(a1 + 152);
    if ((*(unsigned char *)(v50 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      *(void *)&long long v190 = &v182;
      *(void *)&long long v186 = &v190;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v186, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    uint64_t v46 = *(float **)(v50 + 72);
    double v47 = v49;
    goto LABEL_90;
  }
  uint64_t v41 = *(void *)(v40 + 32);
  if (!*(unsigned char *)(v41 + 3776)) {
    goto LABEL_66;
  }
LABEL_72:
  uint64_t v43 = *(void *)(a1 + 112);
  if (!v43)
  {
    uint64_t v45 = *(void *)(a1 + 152);
    if ((*(unsigned char *)(v45 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      *(void *)&long long v190 = &v182;
      *(void *)&long long v186 = &v190;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v186, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    uint64_t v46 = *(float **)(v45 + 72);
    double v47 = 0.0;
LABEL_90:
    float v44 = (gss::Allocator *)ggl::CullingGrid::intersectedCellsForView(v46, v47);
    goto LABEL_91;
  }
  float v44 = (gss::Allocator *)gdc::GlobeTileGrid::intersectWithFrustum(v43, (const double *)(v41 + 984), *(double *)(v41 + 24));
LABEL_91:
  uint64_t v51 = *(void *)(a1 + 8);
  uint64_t v52 = *(void *)(a1 + 16);
  if (v51 != v52)
  {
    do
    {
      float v54 = *(unsigned char **)v51;
      float v55 = *(uint64_t **)(*(void *)v51 + 888);
      unint64_t v56 = *(uint64_t **)(*(void *)v51 + 896);
      if (v55 == v56)
      {
        char v53 = 0;
      }
      else
      {
        char v53 = 0;
        do
        {
          uint64_t v57 = *v55++;
          BOOL v58 = (*(_DWORD *)(v57 + 96) & v44) != 0;
          v53 |= v58;
          *(unsigned char *)(v57 + 48) = v58;
        }
        while (v55 != v56);
      }
      v54[136] = v53 & 1;
      v54[264] = v53 & 1;
      v54[392] = v53 & 1;
      v54[520] = v53 & 1;
      v54[648] = v53 & 1;
      v54[776] = v53 & 1;
      v51 += 8;
      v54[912] = v53 & 1;
    }
    while (v51 != v52);
    uint64_t v60 = *(uint64_t **)(a1 + 8);
    float v59 = *(uint64_t **)(a1 + 16);
    if (v60 != v59)
    {
      float32x4_t v163 = (float32x4_t)vdupq_n_s32(0x37800080u);
      uint64_t v172 = v2;
      while (1)
      {
        uint64_t v61 = *v60;
        if (*(unsigned char *)(*v60 + 912)) {
          break;
        }
LABEL_101:
        if (++v60 == v59) {
          return;
        }
      }
      long long v190 = 0uLL;
      uint64_t v191 = 0;
      float v192 = (gss::Allocator *)gss::Allocator::instance(v44);
      long long v186 = 0uLL;
      uint64_t v187 = 0;
      uint64_t v188 = (gss::Allocator *)gss::Allocator::instance(v192);
      long long v182 = 0uLL;
      uint64_t v183 = 0;
      uint64_t v184 = gss::Allocator::instance(v188);
      uint64_t v62 = *(void *)(v61 + 920);
      *(void *)&long long v174 = v62;
      float v63 = *(std::__shared_weak_count **)(v61 + 928);
      *((void *)&v174 + 1) = v63;
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)float v195 = 0;
      char v194 = 0;
      gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v177, v62, (uint64_t)v63);
      if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
        if (v178) {
          goto LABEL_108;
        }
      }
      else if (v178)
      {
LABEL_108:
        md::getRoadWidths((uint64_t)v177, &v195[1], v195, &v194, *(float *)(v2 + 8));
        uint64_t v64 = *(void *)(*(void *)&v177[0] + 24);
        if ((int)*(float *)(v2 + 8) >= 0x17) {
          unsigned int v65 = 23;
        }
        else {
          unsigned int v65 = (int)*(float *)(v2 + 8);
        }
        float v66 = *(float **)v64;
        if (*(void *)v64
          && (float v67 = *v66, LODWORD(v66) = *v66 == 1.0, *(unsigned char *)(v64 + 10))
          && (v67 != 0.0 ? (BOOL v68 = v67 == 1.0) : (BOOL v68 = 1), !v68)
          || (v69 = *(unsigned __int8 *)(v64 + v66 + 11), float v67 = 0.0, v69 == 2))
        {
          LOBYTE(v174) = 1;
          LOBYTE(v173) = 1;
          char v70 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v64, 0x5Bu, v65, 0, &v174);
          char v71 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v64, 0x5Bu, v65, 1, &v173);
          if (v67 < 1.0) {
            char v71 = v70;
          }
        }
        else
        {
          char v71 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(void *)&v177[0] + 24), 0x5Bu, v65, v69, 0);
        }
        float v73 = *(float *)(v2 + 60);
        BOOL v74 = v195[0] >= v73 && v195[0] > 0.0;
        BOOL v75 = v195[1] >= v73 && v195[1] > 0.0;
        BOOL v171 = v74;
        if (v71) {
          BOOL v76 = !v74 && !v75;
        }
        else {
          BOOL v76 = 1;
        }
        if (v76)
        {
          BOOL v168 = 0;
          char v77 = 0;
          BOOL v164 = 0;
          BOOL v78 = 0;
          float v79 = 0.0;
          float v80 = 0.0;
        }
        else
        {
          uint64_t v81 = *(void *)(*(void *)&v177[0] + 24);
          if (*(unsigned __int8 *)(v2 + 12) >= 0x17u) {
            unsigned int v82 = 23;
          }
          else {
            unsigned int v82 = *(unsigned __int8 *)(v2 + 12);
          }
          uint64_t v83 = *(float **)v81;
          if (*(void *)v81
            && (float v84 = *v83, LODWORD(v83) = *v83 == 1.0, *(unsigned char *)(v81 + 10))
            && (v84 != 0.0 ? (BOOL v85 = v84 == 1.0) : (BOOL v85 = 1), !v85)
            || (unsigned int v86 = *(unsigned __int8 *)(v81 + v83 + 11), v84 = 0.0, v86 == 2))
          {
            LOBYTE(v174) = 1;
            LOBYTE(v173) = 1;
            float v87 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v81, 0x1D1u, v82, 0, &v174);
            float v88 = v87
                + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v81, 0x1D1u, v82, 1u, &v173)- v87)* v84);
          }
          else
          {
            float v88 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)&v177[0] + 24), 0x1D1u, v82, v86, 0);
          }
          BOOL v164 = v88 >= 1.0;
          if ((int)*(float *)(v2 + 8) >= 0x17) {
            unsigned int v89 = 23;
          }
          else {
            unsigned int v89 = (int)*(float *)(v2 + 8);
          }
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)&v174, *(void *)(*(void *)&v177[0] + 24), 0x12Du, v89, 2);
          if ((void)v190) {
            (*(void (**)(gss::Allocator *, void, void))(*(void *)v192 + 40))(v192, v190, v191 - v190);
          }
          long long v190 = v174;
          uint64_t v191 = v175;
          int v193 = v176;
          if ((int)*(float *)(v2 + 8) >= 0x17) {
            unsigned int v90 = 23;
          }
          else {
            unsigned int v90 = (int)*(float *)(v2 + 8);
          }
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v174, *(void *)(*(void *)&v177[0] + 24), 0x5Du, v90, 2u, 0);
          unsigned int v91 = (int)*(float *)(v2 + 8);
          float32x4_t v169 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v174)), v163);
          float32x4_t v181 = v169;
          uint64_t v92 = *(void *)(*(void *)&v177[0] + 24);
          if (v91 >= 0x17) {
            unsigned int v93 = 23;
          }
          else {
            unsigned int v93 = v91;
          }
          uint64_t v94 = *(float **)v92;
          if (*(void *)v92
            && (float v95 = *v94, LODWORD(v94) = *v94 == 1.0, *(unsigned char *)(v92 + 10))
            && v95 != 0.0
            && v95 != 1.0
            || (v96 = *(unsigned __int8 *)(v92 + v94 + 11), float v95 = 0.0, v96 == 2))
          {
            LOBYTE(v174) = 1;
            LOBYTE(v173) = 1;
            float v97 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v92, 0x134u, v93, 0, &v174);
            float v79 = v97
                + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v92, 0x134u, v93, 1u, &v173)- v97)* v95);
          }
          else
          {
            float v79 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)&v177[0] + 24), 0x134u, v93, v96, 0);
          }
          BOOL v78 = v79 > 0.0;
          if ((int)*(float *)(v2 + 8) >= 0x17) {
            unsigned int v98 = 23;
          }
          else {
            unsigned int v98 = (int)*(float *)(v2 + 8);
          }
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)&v174, *(void *)(*(void *)&v177[0] + 24), 0x12Cu, v98, 2);
          if ((void)v186) {
            (*(void (**)(gss::Allocator *, void, void))(*(void *)v188 + 40))(v188, v186, v187 - v186);
          }
          long long v186 = v174;
          uint64_t v187 = v175;
          int v189 = v176;
          if ((int)*(float *)(v2 + 8) >= 0x17) {
            unsigned int v99 = 23;
          }
          else {
            unsigned int v99 = (int)*(float *)(v2 + 8);
          }
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v174, *(void *)(*(void *)&v177[0] + 24), 0x5Cu, v99, 2u, 0);
          float32x4_t v165 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v174)), v163);
          float32x4_t v180 = v165;
          if ((int)*(float *)(v2 + 8) >= 0x17) {
            unsigned int v100 = 23;
          }
          else {
            unsigned int v100 = (int)*(float *)(v2 + 8);
          }
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)&v174, *(void *)(*(void *)&v177[0] + 24), 0x12Cu, v100, 2);
          if ((void)v182) {
            (*(void (**)(uint64_t, void, void))(*(void *)v184 + 40))(v184, v182, v183 - v182);
          }
          long long v182 = v174;
          uint64_t v183 = v175;
          int v185 = v176;
          if ((int)*(float *)(v2 + 8) >= 0x17) {
            unsigned int v101 = 23;
          }
          else {
            unsigned int v101 = (int)*(float *)(v2 + 8);
          }
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v174, *(void *)(*(void *)&v177[0] + 24), 0x193u, v101, 2u, 0);
          float32x4_t v162 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v174)), v163);
          float32x4_t v179 = v162;
          unint64_t v102 = *(void *)(*(void *)&v177[0] + 24);
          float v103 = fminf(fmaxf(*(float *)(v2 + 8), 0.0), 23.0);
          unint64_t v104 = *(float **)v102;
          if (*(void *)v102
            && (float v105 = *v104, LODWORD(v104) = *v104 == 1.0, *(unsigned char *)(v102 + 10))
            && v105 != 0.0
            && v105 != 1.0
            || (v106 = *(unsigned __int8 *)(v102 + v104 + 11), float v105 = 0.0, v106 == 2))
          {
            LOBYTE(v174) = 1;
            LOBYTE(v173) = 1;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v102, 0x194u, 0, (BOOL *)&v174, v103);
            float v108 = v107;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v102, 0x194u, 1u, (BOOL *)&v173, v103);
            float v80 = v108 + (float)((float)(v109 - v108) * v105);
          }
          else
          {
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(void *)(*(void *)&v177[0] + 24), 0x194u, v106, 0, v103);
            float v80 = v110;
          }
          float v111 = *(float *)(v2 + 108);
          float v112 = v165.f32[3] * v111;
          v180.f32[3] = v165.f32[3] * v111;
          float v113 = v169.f32[3] * v111;
          v181.f32[3] = v113;
          float v114 = vmuls_lane_f32(v111, v162, 3);
          v179.f32[3] = v114;
          BOOL v115 = v171;
          if (v113 <= 0.0) {
            BOOL v115 = 0;
          }
          if (v112 <= 0.0) {
            BOOL v75 = 0;
          }
          BOOL v171 = v115;
          BOOL v168 = v114 > 0.0;
          if (v115 || v75)
          {
            BOOL v117 = v112 > 0.0 || *(unsigned char *)(v2 + 112) == 0;
            char v77 = v113 > 0.0 || v117;
          }
          else
          {
            char v77 = 0;
            BOOL v171 = 0;
          }
        }
        float v118 = *(float *)(v2 + 8);
        uint64_t v119 = *(void *)(*(void *)&v177[0] + 24);
        if ((int)v118 >= 0x17) {
          unsigned int v120 = 23;
        }
        else {
          unsigned int v120 = (int)v118;
        }
        int32x2_t v121 = *(float **)v119;
        if (*(void *)v119
          && (float v122 = *v121, LODWORD(v121) = *v121 == 1.0, *(unsigned char *)(v119 + 10))
          && (v122 != 0.0 ? (BOOL v123 = v122 == 1.0) : (BOOL v123 = 1), !v123)
          || (unsigned int v124 = *(unsigned __int8 *)(v119 + v121 + 11), v124 == 2))
        {
          if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(*(void *)&v177[0] + 24), 0x1A2u, v120, 0))goto LABEL_222; {
          unsigned int v124 = 1;
          }
        }
        if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v119, 0x1A2u, v120, v124))
        {
LABEL_223:
          char v166 = v77;
          uint64_t v125 = v2;
          BOOL v126 = v75;
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v177);
          uint64_t v127 = *(void *)(*(void *)(v61 + 8) + 192);
          uint64_t v128 = *(void *)(v125 + 96);
          float32x4_t v129 = +[VKDebugSettings sharedSettings];
          LOBYTE(v125) = [v129 enableTileClippingDebug];

          v177[0] = 0uLL;
          long long v174 = 0uLL;
          md::PatternedPipelineStateManager::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v173, *(void *)(v127 + 32), *(unsigned char *)(v61 + 1041), *(unsigned char *)(v172 + 107), *(unsigned char *)(v172 + 106), v128 != 0, v125, v78);
          v177[0] = v173;
          md::PatternedPipelineStateManager::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v173, *(void *)(v127 + 32), *(unsigned char *)(v61 + 1041) != 0, *(unsigned char *)(v172 + 107) != 0, *(unsigned char *)(v172 + 106) != 0, v128 != 0, v125, 0);
          long long v130 = v173;
          long long v173 = 0uLL;
          float32x4_t v131 = (std::__shared_weak_count *)*((void *)&v174 + 1);
          long long v174 = v130;
          if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
            unint64_t v132 = (std::__shared_weak_count *)*((void *)&v173 + 1);
            if (!*((void *)&v173 + 1)) {
              goto LABEL_229;
            }
          }
          else
          {
            unint64_t v132 = (std::__shared_weak_count *)*((void *)&v173 + 1);
            if (!*((void *)&v173 + 1)) {
              goto LABEL_229;
            }
          }
          if (!atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
LABEL_229:
          ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v61 + 944), *(uint64_t *)&v177[0], *((std::__shared_weak_count **)&v177[0] + 1));
          long long v133 = v174;
          ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v61 + 952), v174, *((std::__shared_weak_count **)&v174 + 1));
          ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v61 + 960), v133, *((std::__shared_weak_count **)&v133 + 1));
          uint64_t v135 = *(void *)(v61 + 944);
          uint64_t v136 = *(void *)(v135 + 64);
          *(void *)(v136 + 48) = v128;
          *(void *)(v136 + 56) = 0;
          uint64_t v137 = *(void *)(v135 + 160);
          float32x4_t v138 = *(std::__shared_weak_count **)(v137 + 56);
          *(void *)(v137 + 48) = 0;
          *(void *)(v137 + 56) = 0;
          if (v138 && !atomic_fetch_add(&v138->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
          uint64_t v139 = *(void *)(v61 + 952);
          uint64_t v140 = *(void *)(v139 + 64);
          *(void *)(v140 + 48) = v128;
          *(void *)(v140 + 56) = 0;
          uint64_t v141 = *(void *)(v139 + 160);
          unint64_t v142 = *(std::__shared_weak_count **)(v141 + 56);
          *(void *)(v141 + 48) = 0;
          *(void *)(v141 + 56) = 0;
          if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
          uint64_t v143 = *(void *)(v61 + 960);
          uint64_t v144 = *(void *)(v143 + 64);
          *(void *)(v144 + 48) = v128;
          *(void *)(v144 + 56) = 0;
          uint64_t v145 = *(void *)(v143 + 160);
          double v146 = *(std::__shared_weak_count **)(v145 + 56);
          *(void *)(v145 + 48) = 0;
          *(void *)(v145 + 56) = 0;
          if (v146 && !atomic_fetch_add(&v146->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
          if (*(unsigned char *)(v61 + 1041))
          {
            if (v166) {
              goto LABEL_240;
            }
          }
          else
          {
            ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v61 + 976), *(void *)(v127 + 40), *(std::__shared_weak_count **)(v127 + 48));
            ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v61 + 968), *(void *)(v127 + 40), *(std::__shared_weak_count **)(v127 + 48));
            ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v61 + 984), *(void *)(v127 + 40), *(std::__shared_weak_count **)(v127 + 48));
            if (v166)
            {
LABEL_240:
              uint64_t v147 = *(void *)v195;
              float v148 = *(float *)(v172 + 20);
              *(unsigned char *)(v61 + 136) = 1;
              *(unsigned char *)(v61 + 264) = 1;
              *(unsigned char *)(v61 + 392) = 1;
              *(unsigned char *)(v61 + 520) = 1;
              *(unsigned char *)(v61 + 648) = 1;
              *(unsigned char *)(v61 + 776) = 1;
              *(unsigned char *)(v61 + 912) = 1;
              if (*(unsigned char *)(v61 + 1041)) {
                char v149 = 1;
              }
              else {
                char v149 = v168;
              }
              BOOL v150 = (v149 & 1) == 0 && *(unsigned char *)(v172 + 56) != 0;
              uint64_t v151 = *(void *)(*(void *)(v61 + 8) + 192) + 56;
              if (v171)
              {
                uint64_t v152 = *(void *)(v61 + 944);
                *(void *)(v61 + 48) = v152;
                v134.n128_f32[0] = v148;
                setupPatternedShader<ggl::PatternedRibbon::BasePipelineSetup>(v152, v151, (uint64_t)&v190, &v181, (void *)(v61 + 1008), v164, v134, *(float *)&v147 * v148, v148 * v79);
                *(unsigned char *)(v61 + 520) = v150;
                if (!v126)
                {
LABEL_250:
                  BOOL v153 = 0;
                  *(unsigned char *)(v61 + 264) = 0;
LABEL_253:
                  *(unsigned char *)(v61 + 648) = v153;
                  uint64_t v155 = v172;
                  if (v168)
                  {
                    uint64_t v156 = *(void *)(v61 + 960);
                    *(void *)(v61 + 304) = v156;
                    v134.n128_u32[0] = *(_DWORD *)(v172 + 20);
                    setupPatternedShader<ggl::PatternedRibbon::BasePipelineSetup>(v156, v151, (uint64_t)&v182, &v179, (void *)(v61 + 1024), v164, v134, v148 * v80, 0.0);
                    BOOL v157 = v150;
                    uint64_t v155 = v172;
                  }
                  else
                  {
                    BOOL v157 = 0;
                    *(unsigned char *)(v61 + 392) = 0;
                  }
                  *(unsigned char *)(v61 + 776) = v157;
                  int v158 = *(unsigned __int8 *)(v155 + 57);
                  *(_DWORD *)(v61 + 56) = v158;
                  *(_DWORD *)(v61 + 184) = v158;
                  *(_DWORD *)(v61 + 312) = v158;
                  *(_DWORD *)(v61 + 440) = v158;
                  *(_DWORD *)(v61 + 568) = v158;
                  *(_DWORD *)(v61 + 696) = v158;
                  if (*(unsigned char *)(v61 + 1041)) {
                    int v159 = 1;
                  }
                  else {
                    int v159 = v150;
                  }
                  if (((v159 | v168) & 1) == 0)
                  {
                    *(_DWORD *)(v61 + 184) = v158 + 1;
                    *(_DWORD *)(v61 + 312) = v158 + 2;
                  }
                  float v44 = (gss::Allocator *)md::RoadBatch::setRenderOrdersForStrokeAndFill(0, 0, v61 + 16, v61 + 144, 0, 0, *(_DWORD *)(v61 + 936), 1, *(void *)(v61 + 920), *(std::__shared_weak_count **)(v61 + 928), v155, *(unsigned char *)(v61 + 1040) & 0xFE);
                  if (v150) {
                    float v44 = (gss::Allocator *)md::RoadBatch::setRenderOrdersForStrokeAndFill(0, 0, v61 + 400, v61 + 528, 0, 0, *(_DWORD *)(v61 + 936), 1, *(void *)(v61 + 920), *(std::__shared_weak_count **)(v61 + 928), v172, *(unsigned char *)(v61 + 1040) | 1u);
                  }
LABEL_263:
                  float v160 = (std::__shared_weak_count *)*((void *)&v174 + 1);
                  if (*((void *)&v174 + 1)
                    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v174 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                    std::__shared_weak_count::__release_weak(v160);
                    float v161 = (std::__shared_weak_count *)*((void *)&v177[0] + 1);
                    if (!*((void *)&v177[0] + 1)) {
                      goto LABEL_269;
                    }
                  }
                  else
                  {
                    float v161 = (std::__shared_weak_count *)*((void *)&v177[0] + 1);
                    if (!*((void *)&v177[0] + 1)) {
                      goto LABEL_269;
                    }
                  }
                  if (!atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                    std::__shared_weak_count::__release_weak(v161);
                  }
LABEL_269:
                  uint64_t v2 = v172;
                  uint64_t v72 = v182;
                  if (!(void)v182)
                  {
LABEL_271:
                    if ((void)v186) {
                      float v44 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, void, void))(*(void *)v188 + 40))(v188, v186, v187 - v186);
                    }
                    if ((void)v190) {
                      float v44 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *, void, void))(*(void *)v192 + 40))(v192, v190, v191 - v190);
                    }
                    goto LABEL_101;
                  }
LABEL_270:
                  float v44 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v184 + 40))(v184, v72, v183 - v72);
                  goto LABEL_271;
                }
              }
              else
              {
                *(unsigned char *)(v61 + 136) = 0;
                *(unsigned char *)(v61 + 520) = 0;
                if (!v126) {
                  goto LABEL_250;
                }
              }
              uint64_t v154 = *(void *)(v61 + 952);
              *(void *)(v61 + 176) = v154;
              v134.n128_u32[0] = *(_DWORD *)(v172 + 20);
              setupPatternedShader<ggl::PatternedRibbon::BasePipelineSetup>(v154, v151, (uint64_t)&v186, &v180, (void *)(v61 + 992), v164, v134, v148 * *((float *)&v147 + 1), 0.0);
              BOOL v153 = v150;
              goto LABEL_253;
            }
          }
          *(unsigned char *)(v61 + 136) = 0;
          *(unsigned char *)(v61 + 264) = 0;
          *(unsigned char *)(v61 + 392) = 0;
          *(unsigned char *)(v61 + 520) = 0;
          *(unsigned char *)(v61 + 648) = 0;
          *(unsigned char *)(v61 + 776) = 0;
          *(unsigned char *)(v61 + 912) = 0;
          goto LABEL_263;
        }
LABEL_222:
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v174, v119, 0x1A2u, 2u, fminf(fmaxf(v118, 0.0), 23.0));
        goto LABEL_223;
      }
      *(unsigned char *)(v61 + 136) = 0;
      *(unsigned char *)(v61 + 264) = 0;
      *(unsigned char *)(v61 + 392) = 0;
      *(unsigned char *)(v61 + 520) = 0;
      *(unsigned char *)(v61 + 648) = 0;
      *(unsigned char *)(v61 + 776) = 0;
      *(unsigned char *)(v61 + 912) = 0;
      float v44 = (gss::Allocator *)gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v177);
      uint64_t v72 = v182;
      if (!(void)v182) {
        goto LABEL_271;
      }
      goto LABEL_270;
    }
  }
}

void sub_1A25E36B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a33);
  if (a45)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a48 + 40))(a48, a45, a47 - a45);
    uint64_t v50 = *(void *)(v48 - 256);
    if (!v50)
    {
LABEL_3:
      uint64_t v51 = *(void *)(v48 - 208);
      if (!v51) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v50 = *(void *)(v48 - 256);
    if (!v50) {
      goto LABEL_3;
    }
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v48 - 232) + 40))(*(void *)(v48 - 232), v50, *(void *)(v48 - 240) - v50);
  uint64_t v51 = *(void *)(v48 - 208);
  if (!v51) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v48 - 184) + 40))(*(void *)(v48 - 184), v51, *(void *)(v48 - 192) - v51);
  _Unwind_Resume(a1);
}

void md::PolygonRound::smoothTwoSegments(float **a1, float *a2, float *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  float v5 = *a2;
  if (*a2 != 0.0)
  {
    float v7 = a3[2];
    float v8 = a3[3];
    float v9 = v7 - *a3;
    float v10 = v8 - a3[1];
    float v11 = a3[4] - v7;
    float v12 = a3[5] - v8;
    float v13 = atan2f(v12, v11);
    float v67 = v9;
    float v14 = v13 - atan2f(v10, v9);
    if (v14 <= 3.1416)
    {
      if (v14 >= -3.1416)
      {
LABEL_7:
        float v17 = fabsf(v14);
        if (v17 < a2[2] || v17 > a2[3]) {
          goto LABEL_13;
        }
        float v18 = v5 / tanf((float)(v17 * -0.5) + 1.5708);
        float v19 = sqrtf((float)(v67 * v67) + (float)(v10 * v10));
        float v20 = a2[4];
        float v21 = v20 * sqrtf((float)(v11 * v11) + (float)(v12 * v12));
        if (v18 > (float)(v20 * v19) || v18 > v21) {
          goto LABEL_13;
        }
        unsigned int v25 = vcvtas_u32_f32(v17 / a2[1]);
        if (v25 <= 1) {
          unsigned int v26 = 1;
        }
        else {
          unsigned int v26 = v25;
        }
        float v27 = 1.0 / v19;
        float v28 = v27 * v67;
        float v65 = v27 * v67;
        float v29 = v27 * v10;
        float v66 = v27 * v10;
        float v30 = -(float)(v27 * v10);
        float v31 = -(float)(v27 * v67);
        if (v14 <= 0.0) {
          float v32 = v29;
        }
        else {
          float v32 = v30;
        }
        if (v14 <= 0.0) {
          float v33 = v31;
        }
        else {
          float v33 = v28;
        }
        float v34 = v18;
        uint64_t v35 = (float *)operator new(8 * v26 + 8);
        int v36 = 0;
        *a1 = v35;
        a1[1] = v35;
        a1[2] = &v35[2 * v26 + 2];
        float v37 = -(float)(v32 * v5);
        float v38 = v33;
        float v39 = -(float)(v33 * v5);
        float v40 = (float)(v7 + (float)(v32 * v5)) - (float)(v34 * v65);
        float v41 = (float)(v8 + (float)(v38 * v5)) - (float)(v34 * v66);
        while (1)
        {
          __float2 v44 = __sincosf_stret((float)(v14 * (float)v36) * (float)(1.0 / (float)v26));
          float v45 = v40 - (float)((float)(v44.__sinval * v39) - (float)(v44.__cosval * v37));
          float v46 = (float)(v41 + (float)(v44.__sinval * v37)) + (float)(v44.__cosval * v39);
          unint64_t v47 = (unint64_t)a1[2];
          if ((unint64_t)v35 < v47)
          {
            *uint64_t v35 = v45;
            v35[1] = v46;
            unint64_t v42 = v35 + 2;
            goto LABEL_26;
          }
          uint64_t v48 = *a1;
          uint64_t v49 = (char *)v35 - (char *)*a1;
          uint64_t v50 = v49 >> 3;
          unint64_t v51 = (v49 >> 3) + 1;
          if (v51 >> 61) {
            abort();
          }
          uint64_t v52 = v47 - (void)v48;
          if (v52 >> 2 > v51) {
            unint64_t v51 = v52 >> 2;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            if (v53 >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            float v54 = operator new(8 * v53);
          }
          else
          {
            float v54 = 0;
          }
          float v55 = (float *)&v54[8 * v50];
          unint64_t v56 = (float *)&v54[8 * v53];
          *float v55 = v45;
          v55[1] = v46;
          unint64_t v42 = v55 + 2;
          if (v35 == v48)
          {
            *a1 = v55;
            a1[1] = v42;
            a1[2] = v56;
LABEL_54:
            operator delete(v35);
            goto LABEL_26;
          }
          unint64_t v57 = (char *)(v35 - 2) - (char *)v48;
          if (v57 >= 0x168)
          {
            if (&v54[v49 - 8 - (v57 & 0xFFFFFFFFFFFFFFF8)] > &v54[v49 - 8])
            {
              BOOL v58 = v35;
            }
            else if ((float *)((char *)v35 - (v57 & 0xFFFFFFFFFFFFFFF8) - 8) > v35 - 2)
            {
              BOOL v58 = v35;
            }
            else if ((unint64_t)((char *)v35 - &v54[v49]) >= 0x20)
            {
              uint64_t v59 = (v57 >> 3) + 1;
              BOOL v58 = &v35[-2 * (v59 & 0x3FFFFFFFFFFFFFFCLL)];
              uint64_t v60 = &v54[8 * v50 - 16];
              uint64_t v61 = v35 - 4;
              uint64_t v62 = v59 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v63 = *(_OWORD *)v61;
                *(v60 - 1) = *((_OWORD *)v61 - 1);
                *uint64_t v60 = v63;
                v60 -= 2;
                v61 -= 8;
                v62 -= 4;
              }
              while (v62);
              v55 -= 2 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
              if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_53;
              }
            }
            else
            {
              BOOL v58 = v35;
            }
          }
          else
          {
            BOOL v58 = v35;
          }
          do
          {
            uint64_t v64 = *((void *)v58 - 1);
            v58 -= 2;
            *((void *)v55 - 1) = v64;
            v55 -= 2;
          }
          while (v58 != v48);
          uint64_t v48 = *a1;
LABEL_53:
          *a1 = v55;
          a1[1] = v42;
          uint64_t v35 = v48;
          a1[2] = v56;
          if (v48) {
            goto LABEL_54;
          }
LABEL_26:
          a1[1] = v42;
          uint64_t v35 = v42;
          if (v36++ == v26) {
            return;
          }
        }
      }
      double v15 = v14;
      double v16 = 6.28318531;
    }
    else
    {
      double v15 = v14;
      double v16 = -6.28318531;
    }
    float v14 = v15 + v16;
    goto LABEL_7;
  }
LABEL_13:
  long double v23 = (float *)operator new(8uLL);
  uint64_t v24 = *((void *)a3 + 1);
  *a1 = v23;
  *(void *)long double v23 = v24;
  v23 += 2;
  a1[1] = v23;
  a1[2] = v23;
}

char *std::vector<geo::_retain_ptr<CAMediaTimingFunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__emplace_back_slow_path<CAMediaTimingFunction * {__strong},geo::memory_management_mode const&>(void **a1, void *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    float v7 = (char *)operator new(24 * v6);
  }
  else
  {
    float v7 = 0;
  }
  float v8 = &v7[24 * v2];
  float v9 = &v7[24 * v6];
  id v10 = a2;
  *(void *)float v8 = &unk_1EF559998;
  *((void *)v8 + 1) = v10;
  float v11 = v8 + 24;
  float v13 = (id *)*a1;
  float v12 = (id *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v12) {
      return v11;
    }
    goto LABEL_19;
  }
  uint64_t v14 = (uint64_t)&v7[24 * v2 - 24];
  do
  {
    *((void *)v8 - 3) = &unk_1EF559998;
    v8 -= 24;
    *((void *)v8 + 1) = 0;
    objc_storeStrong((id *)v8 + 1, *(v12 - 2));
    double v15 = *(v12 - 2);
    *(v12 - 2) = 0;

    v14 -= 24;
    v12 -= 3;
  }
  while (v12 != v13);
  float v12 = (id *)*a1;
  double v16 = (id *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v16 != v12)
  {
    float v17 = v16 - 3;
    float v18 = v16 - 3;
    float v19 = v16 - 3;
    do
    {
      float v20 = (void (**)(id *))*v19;
      v19 -= 3;
      (*v20)(v18);
      v17 -= 3;
      BOOL v21 = v18 == v12;
      float v18 = v19;
    }
    while (!v21);
  }
  if (v12) {
LABEL_19:
  }
    operator delete(v12);
  return v11;
}

char *std::vector<md::AnimationData::LabelEntry>::__push_back_slow_path<md::AnimationData::LabelEntry const&>(char **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (v3 - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    abort();
  }
  uint64_t v8 = a1[2] - v2;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    id v10 = (char *)operator new(32 * v9);
  }
  else
  {
    id v10 = 0;
  }
  float v11 = &v10[32 * v4];
  float v20 = v11;
  BOOL v21 = v11;
  uint64_t v22 = &v10[32 * v9];
  *(void *)float v11 = *(void *)a2;
  float v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
    unint64_t v2 = *a1;
    unint64_t v3 = a1[1];
    float v11 = v20;
    float v13 = v21;
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    *((void *)v11 + 3) = *(void *)(a2 + 24);
    float v13 = v11;
  }
  uint64_t v14 = v13 + 32;
  if (v3 == v2)
  {
    float v17 = v2;
  }
  else
  {
    do
    {
      uint64_t v15 = *((void *)v3 - 4);
      v3 -= 32;
      *((void *)v11 - 4) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v3 + 8);
      *((void *)v11 + 3) = *((void *)v3 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v3 + 2) = 0;
      *((void *)v3 + 3) = 0;
      *((void *)v3 + 1) = 0;
    }
    while (v3 != v2);
    float v17 = *a1;
    unint64_t v2 = a1[1];
    uint64_t v14 = v13 + 32;
  }
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v22;
  if (v2 == v17)
  {
    if (v2) {
LABEL_20:
    }
      operator delete(v2);
  }
  else
  {
    do
    {
      float v19 = v2 - 32;
      if (*(v2 - 1) < 0) {
        operator delete(*((void **)v2 - 3));
      }
      v2 -= 32;
    }
    while (v19 != v17);
    unint64_t v2 = v17;
    if (v17) {
      goto LABEL_20;
    }
  }
  return v14;
}

void sub_1A25E3F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<md::AnimationData::LabelEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void **std::vector<md::AnimationData::LabelEntry>::~vector[abi:nn180100](void **a1)
{
  unint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<geo::_retain_ptr<CAMediaTimingFunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 24;
      unint64_t v6 = v3 - 24;
      float v7 = v3 - 24;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v2;
        unint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__split_buffer<md::AnimationData::LabelEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void geo::_retain_ptr<CAMediaTimingFunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559998;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<CAMediaTimingFunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559998;

  return a1;
}

void std::vector<geo::_retain_ptr<CAMediaTimingFunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  uint64_t v4 = *(id **)(a1 + 8);
  uint64_t v5 = 24 * a2;
  unint64_t v6 = (char *)operator new(24 * a2);
  float v7 = &v6[v5];
  uint64_t v8 = ((char *)v4 - v2) / 24;
  BOOL v9 = &v6[24 * v8];
  if (v4 == (id *)v2)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v10 = (uint64_t)&v6[24 * v8 - 24];
  float v11 = &v6[24 * v8];
  do
  {
    *((void *)v11 - 3) = &unk_1EF559998;
    v11 -= 24;
    *((void *)v11 + 1) = 0;
    objc_storeStrong((id *)v11 + 1, *(v4 - 2));
    float v12 = *(v4 - 2);
    *(v4 - 2) = 0;

    v10 -= 24;
    v4 -= 3;
  }
  while (v4 != (id *)v2);
  uint64_t v2 = *(char **)a1;
  float v13 = *(char **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
  if (v13 != v2)
  {
    uint64_t v14 = v13 - 24;
    uint64_t v15 = v13 - 24;
    long long v16 = v13 - 24;
    do
    {
      float v17 = *(void (***)(char *))v16;
      v16 -= 24;
      (*v17)(v15);
      v14 -= 24;
      BOOL v18 = v15 == v2;
      uint64_t v15 = v16;
    }
    while (!v18);
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

void md::AnimationData::~AnimationData(md::AnimationData *this)
{
  uint64_t v2 = *((void *)this + 15);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 16);
    uint64_t v4 = (void *)*((void *)this + 15);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 15);
    }
    *((void *)this + 16) = v2;
    operator delete(v4);
  }
  uint64_t v5 = (void (***)(void))*((void *)this + 12);
  if (v5)
  {
    unint64_t v6 = (void (***)(void))*((void *)this + 13);
    float v7 = (void *)*((void *)this + 12);
    if (v6 != v5)
    {
      uint64_t v8 = v6 - 3;
      BOOL v9 = v6 - 3;
      uint64_t v10 = v6 - 3;
      do
      {
        float v11 = *v10;
        v10 -= 3;
        (*v11)(v9);
        v8 -= 3;
        BOOL v12 = v9 == v5;
        BOOL v9 = v10;
      }
      while (!v12);
      float v7 = (void *)*((void *)this + 12);
    }
    *((void *)this + 13) = v5;
    operator delete(v7);
  }
  float v13 = (void *)*((void *)this + 9);
  if (v13)
  {
    *((void *)this + 10) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 6);
  if (v14)
  {
    *((void *)this + 7) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 3);
  if (v15)
  {
    *((void *)this + 4) = v15;
    operator delete(v15);
  }
  long long v16 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v16;
    operator delete(v16);
  }
}

double md::AnimationData::interpolateFrames(md::AnimationData *this, double a2, uint64_t a3, unsigned int a4)
{
  *(int64x2_t *)this = vdupq_n_s64(0xC00921FB54442D18);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  if (v6 > a4 + 1) {
    unsigned int v7 = a4 + 1;
  }
  else {
    unsigned int v7 = v6 - 1;
  }
  uint64_t v8 = a4;
  if (v7 == a4)
  {
    LODWORD(a2) = 1.0;
  }
  else
  {
    a2 = (a2 / *(double *)(a3 + 144) - *(double *)(*(void *)(a3 + 72) + 8 * a4))
       / (*(double *)(*(void *)(a3 + 72) + 8 * v7) - *(double *)(*(void *)(a3 + 72) + 8 * a4));
    *(float *)&a2 = a2;
  }
  [*(id *)(*(void *)(a3 + 96) + 24 * a4 + 8) _solveForInput:a2];
  double v10 = v9;
  if (*(unsigned char *)(a3 + 152))
  {
    double v11 = *(double *)(*(void *)(a3 + 72) + 8 * v8)
        + (*(double *)(*(void *)(a3 + 72) + 8 * v7) - *(double *)(*(void *)(a3 + 72) + 8 * v8)) * v10;
    double v12 = md::interpolateSpline(a3, (char **)(a3 + 72), v11).n128_f64[0];
    long double v14 = v13;
    long double v16 = v15;
    *(void *)&double v17 = md::interpolateSpline(a3 + 48, (char **)(a3 + 72), v11).n128_u64[0];
    double v19 = v18;
    double v21 = v20;
    *(void *)&double v48 = md::interpolateSpline(a3 + 24, (char **)(a3 + 72), v11).n128_u64[0];
    double v22 = sqrt(v12 * v12 + v14 * v14);
    double v23 = atan2(v16, v22 * 0.996647189);
    double v24 = atan2(v14, v12);
    __double2 v25 = __sincos_stret(v23);
    double v26 = atan2(v16 + v25.__sinval * v25.__sinval * 42841.3115 * v25.__sinval, v22 + v25.__cosval * v25.__cosval * -42697.6727 * v25.__cosval);
    __double2 v27 = __sincos_stret(v26);
    double v28 = v22 / v27.__cosval + -6378137.0 / sqrt(v27.__sinval * v27.__sinval * -0.00669437999 + 1.0);
  }
  else
  {
    uint64_t v29 = 24 * v8;
    float v30 = (double *)(*(void *)a3 + v29);
    double v31 = *v30;
    float v32 = (double *)(*(void *)a3 + 24 * v7);
    long double v33 = fmod(3.14159265 - *v30 + *v32, 6.28318531);
    long double v34 = fmod(v33 + 6.28318531, 6.28318531);
    long double v35 = fmod(v31 + 3.14159265 + (v34 + -3.14159265) * v10, 6.28318531);
    double v26 = fmod(v35 + 6.28318531, 6.28318531) + -3.14159265;
    double v36 = v30[1];
    long double v37 = fmod(3.14159265 - v36 + v32[1], 6.28318531);
    long double v38 = fmod(v37 + 6.28318531, 6.28318531);
    long double v39 = fmod(v36 + 3.14159265 + (v38 + -3.14159265) * v10, 6.28318531);
    double v24 = fmod(v39 + 6.28318531, 6.28318531) + -3.14159265;
    double v28 = v30[2] + (v32[2] - v30[2]) * v10;
    double v48 = *(double *)(*(void *)(a3 + 24) + v29)
        + (*(double *)(*(void *)(a3 + 24) + 24 * v7) - *(double *)(*(void *)(a3 + 24) + v29)) * v10;
    uint64_t v40 = *(void *)(a3 + 48);
    uint64_t v41 = v40 + v29;
    double v42 = *(double *)(v40 + v29);
    uint64_t v43 = (double *)(v40 + 24 * v7);
    long double v44 = fmod(3.14159265 - v42 + *v43, 6.28318531);
    long double v45 = fmod(v44 + 6.28318531, 6.28318531);
    long double v46 = fmod(v42 + 3.14159265 + (v45 + -3.14159265) * v10, 6.28318531);
    double v17 = fmod(v46 + 6.28318531, 6.28318531) + -3.14159265;
    double v19 = *(double *)(v41 + 8) + (v43[1] - *(double *)(v41 + 8)) * v10;
    double v21 = *(double *)(v41 + 16) + (v43[2] - *(double *)(v41 + 16)) * v10;
  }
  *(double *)this = v26;
  *((double *)this + 1) = v24;
  double result = v48;
  *((double *)this + 2) = v28;
  *((double *)this + 3) = v48;
  *((double *)this + 4) = v19;
  *((double *)this + 5) = v17;
  *((double *)this + 6) = v21;
  return result;
}

__n128 md::interpolateSpline(uint64_t a1, char **a2, double a3)
{
  float v222 = &unk_1EF5130F0;
  long long v228 = 0u;
  long long v229 = 0u;
  long long v230 = 0u;
  long long v231 = 0u;
  long long v232 = 0u;
  uint64_t v236 = 0;
  float64x2_t v235 = 0uLL;
  __int16 v233 = 256;
  char v234 = 1;
  float v223 = (double *)operator new(0x18uLL);
  int v224 = v223;
  float v225 = v223 + 3;
  float v226 = (char *)operator new(0x48uLL);
  float v227 = v226;
  *(void *)&long long v228 = v226 + 72;
  if (&v226 != (char **)a1) {
    std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>((uint64_t)&v226, *(void *)a1, *(char **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
  }
  char v234 = 1;
  if (&v223 != (double **)a2) {
    std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(&v223, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  char v234 = 0;
  unint64_t v6 = (unint64_t)((char *)v224 - (char *)v223) >> 3;
  int v7 = -1431655765 * ((unint64_t)(v227 - v226) >> 3);
  if ((int)v6 >= v7) {
    *(void *)&float64_t v8 = v7;
  }
  else {
    *(void *)&float64_t v8 = v6;
  }
  uint64_t v216 = (LODWORD(v8) - 2);
  if (SLODWORD(v8) < 2) {
    goto LABEL_297;
  }
  unint64_t v9 = (LODWORD(v8) - 1);
  double v10 = (float64x2_t *)operator new(24 * v9);
  double v11 = (float64x2_t *)operator new(8 * v9);
  double v12 = (char *)v10 + 24 * v9;
  uint64_t v13 = 1;
  long double v14 = v10;
  double v15 = (double *)v11;
  unint64_t v218 = v9;
  long double v16 = &v11->f64[v9];
  v221.f64[0] = v8;
  do
  {
    double v18 = (float64x2_t *)&v226[24 * v13];
    float64x2_t v19 = vsubq_f64(*v18, *(float64x2_t *)((char *)v18 - 24));
    double v20 = v18[1].f64[0] - v18[-1].f64[1];
    if (v14 >= (float64x2_t *)v12)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v10) >> 3) + 1;
      if (v21 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      if (0x5555555555555556 * ((v12 - (char *)v10) >> 3) > v21) {
        unint64_t v21 = 0x5555555555555556 * ((v12 - (char *)v10) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v12 - (char *)v10) >> 3) >= 0x555555555555555) {
        unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v22 = v21;
      }
      float64x2_t v219 = v19;
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_317;
        }
        double v23 = (char *)operator new(24 * v22);
        float64x2_t v19 = v219;
      }
      else
      {
        double v23 = 0;
      }
      double v24 = (float64x2_t *)&v23[8 * (((char *)v14 - (char *)v10) >> 3)];
      *double v24 = v19;
      v24[1].f64[0] = v20;
      if (v14 == v10)
      {
        double v26 = &v23[8 * (((char *)v14 - (char *)v10) >> 3)];
      }
      else
      {
        __double2 v25 = &v23[8 * (((char *)v14 - (char *)v10) >> 3)];
        do
        {
          double v26 = v25 - 24;
          long long v27 = *(long long *)((char *)&v14[-2] + 8);
          *((void *)v25 - 1) = *(void *)&v14[-1].f64[1];
          *(_OWORD *)(v25 - 24) = v27;
          long double v14 = (float64x2_t *)((char *)v14 - 24);
          v25 -= 24;
        }
        while (v14 != v10);
      }
      double v12 = &v23[24 * v22];
      long double v14 = (float64x2_t *)((char *)v24 + 24);
      if (v10)
      {
        operator delete(v10);
        float64x2_t v19 = v219;
      }
      double v10 = (float64x2_t *)v26;
      float64_t v8 = v221.f64[0];
    }
    else
    {
      *long double v14 = v19;
      v14[1].f64[0] = v20;
      long double v14 = (float64x2_t *)((char *)v14 + 24);
    }
    double v28 = sqrt(vaddvq_f64(vmulq_f64(v19, v19)) + v20 * v20);
    if (v15 < v16)
    {
      *double v15 = v28;
      double v17 = v15 + 1;
      goto LABEL_11;
    }
    int64_t v29 = (char *)v15 - (char *)v11;
    uint64_t v30 = ((char *)v15 - (char *)v11) >> 3;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61) {
      abort();
    }
    if (((char *)v16 - (char *)v11) >> 2 > v31) {
      unint64_t v31 = ((char *)v16 - (char *)v11) >> 2;
    }
    if ((unint64_t)((char *)v16 - (char *)v11) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32)
    {
      if (v32 >> 61) {
LABEL_317:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      long double v33 = operator new(8 * v32);
    }
    else
    {
      long double v33 = 0;
    }
    long double v34 = (double *)&v33[8 * v30];
    double *v34 = v28;
    double v17 = v34 + 1;
    if (v15 != (double *)v11)
    {
      unint64_t v35 = (char *)(v15 - 1) - (char *)v11;
      if (v35 >= 0x168)
      {
        if (&v33[v29 - 8 - (v35 & 0xFFFFFFFFFFFFFFF8)] > &v33[v29 - 8])
        {
          double v36 = v15;
        }
        else if ((double *)((char *)v15 - (v35 & 0xFFFFFFFFFFFFFFF8) - 8) > v15 - 1)
        {
          double v36 = v15;
        }
        else if ((unint64_t)((char *)v11 - v33) >= 0x20)
        {
          uint64_t v38 = (v35 >> 3) + 1;
          double v36 = &v15[-(v38 & 0x3FFFFFFFFFFFFFFCLL)];
          long double v39 = &v33[v29 - 16];
          uint64_t v40 = v15 - 2;
          uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *long double v39 = v42;
            v39 -= 2;
            v40 -= 4;
            v41 -= 4;
          }
          while (v41);
          v34 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
          if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_47;
          }
        }
        else
        {
          double v36 = v15;
        }
      }
      else
      {
        double v36 = v15;
      }
      do
      {
        uint64_t v37 = *((void *)v36-- - 1);
        *((void *)v34-- - 1) = v37;
      }
      while (v36 != (double *)v11);
    }
LABEL_47:
    long double v16 = (double *)&v33[8 * v32];
    if (v11) {
      operator delete(v11);
    }
    double v11 = (float64x2_t *)v34;
    float64_t v8 = v221.f64[0];
LABEL_11:
    ++v13;
    double v15 = v17;
  }
  while (v13 != *(void *)&v8);
  int v220 = HIBYTE(v233);
  if (HIBYTE(v233))
  {
    if (LODWORD(v8) > 4)
    {
      unint64_t v47 = (*(void *)&v8 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      double v48 = v11 + 1;
      float64x2_t v49 = 0uLL;
      unint64_t v50 = v47;
      float64x2_t v51 = 0uLL;
      do
      {
        float64x2_t v49 = vaddq_f64(v48[-1], v49);
        float64x2_t v51 = vaddq_f64(*v48, v51);
        v48 += 2;
        v50 -= 4;
      }
      while (v50);
      double v43 = vaddvq_f64(vaddq_f64(v51, v49));
      unint64_t v45 = v218;
      if (*(void *)&v8 - 1 != v47)
      {
        uint64_t v44 = v47 | 1;
        goto LABEL_68;
      }
    }
    else
    {
      double v43 = 0.0;
      uint64_t v44 = 1;
      unint64_t v45 = v218;
LABEL_68:
      uint64_t v52 = *(void *)&v8 - v44;
      unint64_t v53 = &v11->f64[v44 - 1];
      do
      {
        double v54 = *v53++;
        double v43 = v54 + v43;
        --v52;
      }
      while (v52);
    }
    double v46 = v43 / (double)(int)v45;
  }
  else
  {
    double v46 = 0.0;
    unint64_t v45 = v218;
  }
  unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v232 - *((void *)&v231 + 1)) >> 3);
  if (*(void *)&v8 <= v55)
  {
    if (*(void *)&v8 < v55) {
      *(void *)&long long v232 = *((void *)&v231 + 1) + 24 * LODWORD(v8);
    }
  }
  else
  {
    std::vector<gm::Matrix<double,3,1>>::__append((void **)&v231 + 1, *(void *)&v8 - v55);
  }
  unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v230 + 1) - v230) >> 3);
  if (*(void *)&v8 <= v56)
  {
    if (*(void *)&v8 < v56) {
      *((void *)&v230 + 1) = v230 + 24 * LODWORD(v8);
    }
  }
  else
  {
    std::vector<gm::Matrix<double,3,1>>::__append((void **)&v230, *(void *)&v8 - v56);
  }
  int v57 = v233;
  BOOL v58 = (float64x2_t *)operator new(24 * *(void *)&v8);
  uint64_t v59 = v58;
  uint64_t v60 = (char *)v58 + 24 * LODWORD(v8);
  size_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v229 - *((void *)&v228 + 1)) >> 3);
  if (v61 == 0xAAAAAAAAAAAAAAABLL * ((v227 - v226) >> 3))
  {
    if (v220)
    {
      uint64_t v62 = 0;
      long long v63 = (double *)v58;
      while (1)
      {
        float v65 = (double *)(*((void *)&v228 + 1) + 24 * v62);
        double v66 = *v65;
        double v67 = v65[1];
        double v68 = v65[2];
        float v69 = sqrt(v66 * v66 + v67 * v67 + v68 * v68);
        double v70 = v69;
        if (v70 <= 1.0e-20) {
          double v70 = 1.0;
        }
        double v71 = v46 / v70;
        double v72 = v71 * v66;
        double v73 = v71 * v67;
        double v74 = v71 * v68;
        if (v63 < (double *)v60)
        {
          *long long v63 = v72;
          v63[1] = v73;
          uint64_t v64 = v63 + 3;
          v63[2] = v74;
        }
        else
        {
          unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v59) >> 3) + 1;
          if (v75 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v75) {
            unint64_t v75 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
            unint64_t v76 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v76 = v75;
          }
          if (v76)
          {
            if (v76 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_317;
            }
            char v77 = (char *)operator new(24 * v76);
          }
          else
          {
            char v77 = 0;
          }
          BOOL v78 = (double *)&v77[8 * (((char *)v63 - (char *)v59) >> 3)];
          uint64_t v60 = &v77[24 * v76];
          *BOOL v78 = v72;
          v78[1] = v73;
          v78[2] = v74;
          uint64_t v64 = v78 + 3;
          if (v63 == (double *)v59) {
            goto LABEL_100;
          }
          do
          {
            long long v79 = *(_OWORD *)(v63 - 3);
            *(v78 - 1) = *(v63 - 1);
            *(_OWORD *)(v78 - 3) = v79;
            v78 -= 3;
            v63 -= 3;
          }
          while (v63 != (double *)v59);
          if (v59) {
LABEL_100:
          }
            operator delete(v59);
          uint64_t v59 = (float64x2_t *)v78;
        }
        ++v62;
        long long v63 = v64;
        if (v62 == *(void *)&v221.f64[0]) {
          goto LABEL_278;
        }
      }
    }
    uint64_t v167 = 0;
    BOOL v168 = v58;
    do
    {
      uint64_t v171 = *((void *)&v228 + 1) + 24 * v167;
      if (v168 < (float64x2_t *)v60)
      {
        float64x2_t v169 = *(float64x2_t *)v171;
        v168[1].f64[0] = *(float64_t *)(v171 + 16);
        *BOOL v168 = v169;
        float v170 = (float64x2_t *)((char *)v168 + 24);
      }
      else
      {
        unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168 - (char *)v59) >> 3) + 1;
        if (v172 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v172) {
          unint64_t v172 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
          unint64_t v173 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v173 = v172;
        }
        if (v173)
        {
          if (v173 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_317;
          }
          long long v174 = (char *)operator new(24 * v173);
        }
        else
        {
          long long v174 = 0;
        }
        uint64_t v175 = &v174[8 * (((char *)v168 - (char *)v59) >> 3)];
        float64x2_t v176 = *(float64x2_t *)v171;
        uint64_t v60 = &v174[24 * v173];
        *((void *)v175 + 2) = *(void *)(v171 + 16);
        *(float64x2_t *)uint64_t v175 = v176;
        float v170 = (float64x2_t *)(v175 + 24);
        if (v168 == v59) {
          goto LABEL_276;
        }
        do
        {
          long long v177 = *(long long *)((char *)&v168[-2] + 8);
          *((void *)v175 - 1) = *(void *)&v168[-1].f64[1];
          *(_OWORD *)(v175 - 24) = v177;
          v175 -= 24;
          BOOL v168 = (float64x2_t *)((char *)v168 - 24);
        }
        while (v168 != v59);
        if (v59) {
LABEL_276:
        }
          operator delete(v59);
        uint64_t v59 = (float64x2_t *)v175;
      }
      ++v167;
      BOOL v168 = v170;
    }
    while (v167 != *(void *)&v221.f64[0]);
LABEL_278:
    float32x4_t v162 = (float64x2_t *)v230;
    float32x4_t v163 = (float64x2_t *)*((void *)&v231 + 1);
    float64_t v8 = v221.f64[0];
    unint64_t v45 = v218;
    BOOL v164 = &qword_1A28FC000;
    goto LABEL_279;
  }
  float v237 = 0;
  float v238 = 0;
  uint64_t v239 = 0;
  if ((void)v229 - *((void *)&v228 + 1) == 48) {
    std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>((uint64_t)&v237, *((unint64_t *)&v228 + 1), (char *)v229, v61);
  }
  BOOL v80 = 0;
  if (SLODWORD(v8) >= 3 && v57)
  {
    uint64_t v81 = &v226[24 * v45];
    uint64_t v82 = *(void *)v81;
    uint64_t v83 = *((void *)v81 + 1);
    uint64_t v84 = *((void *)v81 + 2);
    BOOL v80 = *(void *)v226 == v82 && *((void *)v226 + 1) == v83 && *((void *)v226 + 2) == v84;
  }
  unint64_t v87 = 0;
  if (v237 != v238) {
    BOOL v80 = 1;
  }
  BOOL v212 = v80;
  float64x2_t v217 = (float64x2_t)vdupq_n_s64(0x3BC79CA10C924223uLL);
  float v88 = (double *)v59;
  while (2)
  {
    if (v87 || (float v118 = v237, v237 == v238))
    {
      if (v87 == v45 && v237 != v238)
      {
        if (v220)
        {
          unsigned int v90 = &v226[24 * v45];
          unsigned int v91 = &v226[24 * v216];
          float64x2_t v92 = vsubq_f64(*(float64x2_t *)(v90 + 8), *(float64x2_t *)(v91 + 8));
          float64x2_t v93 = vmulq_f64(v92, v92);
          double v94 = v237[3];
          double v95 = v237[5];
          v96.f64[0] = v237[4];
          v96.f64[1] = *(double *)v90 - *(double *)v91;
          float64x2_t v97 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v93.f64[0], 0);
          v97.f64[0] = v94 * v94;
          v93.f64[0] = v95 * v95;
          float64x2_t v98 = vcvtq_f64_f32(vcvt_f32_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64(v97, v96, v96), v93))));
          int32x2_t v99 = vmovn_s64(vcgtq_f64(v98, v217));
          double v100 = v98.f64[1];
          if ((v99.i8[4] & 1) == 0) {
            double v100 = 1.0;
          }
          if ((v99.i8[0] & 1) == 0) {
            v98.f64[0] = 1.0;
          }
          double v101 = v100 / v98.f64[0];
          double v102 = v101 * v94;
          double v103 = v101 * v237[4];
          double v104 = v101 * v95;
          if (v88 >= (double *)v60)
          {
            unint64_t v105 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
            if (v105 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v105) {
              unint64_t v105 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
              unint64_t v106 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v106 = v105;
            }
            if (v106)
            {
              if (v106 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_317;
              }
              float v107 = (char *)operator new(24 * v106);
            }
            else
            {
              float v107 = 0;
            }
            uint64_t v151 = (double *)&v107[8 * (((char *)v88 - (char *)v59) >> 3)];
            uint64_t v60 = &v107[24 * v106];
            *uint64_t v151 = v102;
            v151[1] = v103;
            v151[2] = v104;
            unsigned int v89 = v151 + 3;
            if (v88 != (double *)v59)
            {
              unint64_t v45 = v218;
              do
              {
                long long v155 = *(_OWORD *)(v88 - 3);
                *(v151 - 1) = *(v88 - 1);
                *(_OWORD *)(v151 - 3) = v155;
                v151 -= 3;
                v88 -= 3;
              }
              while (v88 != (double *)v59);
              goto LABEL_236;
            }
            goto LABEL_238;
          }
LABEL_118:
          *float v88 = v102;
          v88[1] = v103;
          unsigned int v89 = v88 + 3;
          v88[2] = v104;
          goto LABEL_119;
        }
        float v118 = v237 + 3;
        if (v88 < (double *)v60)
        {
LABEL_184:
          float64x2_t v141 = *(float64x2_t *)v118;
          v88[2] = v118[2];
          *(float64x2_t *)float v88 = v141;
          unsigned int v89 = v88 + 3;
          goto LABEL_119;
        }
        unint64_t v138 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
        if (v138 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_323;
        }
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v138) {
          unint64_t v138 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
          unint64_t v139 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v139 = v138;
        }
        if (v139)
        {
          if (v139 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_317;
          }
          uint64_t v140 = (char *)operator new(24 * v139);
        }
        else
        {
          uint64_t v140 = 0;
        }
        BOOL v157 = (float64x2_t *)&v140[8 * (((char *)v88 - (char *)v59) >> 3)];
        float64x2_t v158 = *(float64x2_t *)v118;
        uint64_t v60 = &v140[24 * v139];
        v157[1].f64[0] = v118[2];
        *BOOL v157 = v158;
        unsigned int v89 = &v157[1].f64[1];
        if (v88 != (double *)v59)
        {
          float64_t v8 = v221.f64[0];
          do
          {
            float64x2_t v159 = *(float64x2_t *)(v88 - 3);
            v157[-1].f64[1] = *(v88 - 1);
            *(float64x2_t *)((char *)v157 - 24) = v159;
            BOOL v157 = (float64x2_t *)((char *)v157 - 24);
            v88 -= 3;
          }
          while (v88 != (double *)v59);
          goto LABEL_250;
        }
        goto LABEL_252;
      }
      if (v87)
      {
        unint64_t v108 = v87 - 1;
        if (v87 < v45)
        {
          double v109 = v11->f64[v108];
          double v110 = v11->f64[v87];
          double v111 = 1.0 / (v110 + v109);
          if (fabs(v110 + v109) <= 1.0e-20) {
            double v111 = 0.0;
          }
          float v112 = (float64x2_t *)((char *)v10 + 24 * v108);
          double v113 = v111 * v110;
          float v114 = (float64x2_t *)((char *)v10 + 24 * v87);
          double v115 = v111 * v109;
          float64x2_t v116 = vmlaq_n_f64(vmulq_n_f64(*v112, v113), *v114, v115);
          double v117 = v113 * v112[1].f64[0] + v114[1].f64[0] * v115;
          if (v88 >= (double *)v60)
          {
            unint64_t v142 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
            if (v142 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v142) {
              unint64_t v142 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
              unint64_t v143 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v143 = v142;
            }
            if (v143)
            {
              float64x2_t v214 = v116;
              if (v143 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_317;
              }
              uint64_t v144 = (char *)operator new(24 * v143);
              float64x2_t v116 = v214;
            }
            else
            {
              uint64_t v144 = 0;
            }
            uint64_t v151 = (double *)&v144[8 * (((char *)v88 - (char *)v59) >> 3)];
            uint64_t v60 = &v144[24 * v143];
            *(float64x2_t *)uint64_t v151 = v116;
            v151[2] = v117;
            unsigned int v89 = v151 + 3;
            if (v88 != (double *)v59)
            {
              unint64_t v45 = v218;
              do
              {
                long long v153 = *(_OWORD *)(v88 - 3);
                *(v151 - 1) = *(v88 - 1);
                *(_OWORD *)(v151 - 3) = v153;
                v151 -= 3;
                v88 -= 3;
              }
              while (v88 != (double *)v59);
              goto LABEL_236;
            }
            goto LABEL_238;
          }
          *(float64x2_t *)float v88 = v116;
LABEL_172:
          v88[2] = v117;
          unsigned int v89 = v88 + 3;
          goto LABEL_119;
        }
        uint64_t v136 = (float64x2_t *)&v226[24 * v87];
        uint64_t v137 = (float64x2_t *)&v226[24 * v108];
        float64x2_t v132 = vsubq_f64(*v136, *v137);
        double v117 = v136[1].f64[0] - v137[1].f64[0];
        if (v88 >= (double *)v60)
        {
          unint64_t v145 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
          if (v145 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v145) {
            unint64_t v145 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
            unint64_t v146 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v146 = v145;
          }
          if (v146)
          {
            float64x2_t v215 = v132;
            if (v146 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_317;
            }
            uint64_t v147 = (char *)operator new(24 * v146);
            float64x2_t v132 = v215;
          }
          else
          {
            uint64_t v147 = 0;
          }
          uint64_t v151 = (double *)&v147[8 * (((char *)v88 - (char *)v59) >> 3)];
          uint64_t v60 = &v147[24 * v146];
          *(float64x2_t *)uint64_t v151 = v132;
          v151[2] = v117;
          unsigned int v89 = v151 + 3;
          if (v88 != (double *)v59)
          {
            unint64_t v45 = v218;
            do
            {
              long long v154 = *(_OWORD *)(v88 - 3);
              *(v151 - 1) = *(v88 - 1);
              *(_OWORD *)(v151 - 3) = v154;
              v151 -= 3;
              v88 -= 3;
            }
            while (v88 != (double *)v59);
            goto LABEL_236;
          }
          goto LABEL_238;
        }
      }
      else
      {
        float64x2_t v132 = vsubq_f64(*(float64x2_t *)(v226 + 24), *(float64x2_t *)v226);
        double v117 = *((double *)v226 + 5) - *((double *)v226 + 2);
        if (v88 >= (double *)v60)
        {
          unint64_t v133 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
          if (v133 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v133) {
            unint64_t v133 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
            unint64_t v134 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v134 = v133;
          }
          if (v134)
          {
            float64x2_t v213 = v132;
            if (v134 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_317;
            }
            uint64_t v135 = (char *)operator new(24 * v134);
            float64x2_t v132 = v213;
          }
          else
          {
            uint64_t v135 = 0;
          }
          uint64_t v151 = (double *)&v135[8 * (((char *)v88 - (char *)v59) >> 3)];
          uint64_t v60 = &v135[24 * v134];
          *(float64x2_t *)uint64_t v151 = v132;
          v151[2] = v117;
          unsigned int v89 = v151 + 3;
          if (v88 != (double *)v59)
          {
            unint64_t v45 = v218;
            do
            {
              long long v152 = *(_OWORD *)(v88 - 3);
              *(v151 - 1) = *(v88 - 1);
              *(_OWORD *)(v151 - 3) = v152;
              v151 -= 3;
              v88 -= 3;
            }
            while (v88 != (double *)v59);
            goto LABEL_236;
          }
          goto LABEL_238;
        }
      }
      *(float64x2_t *)float v88 = v132;
      goto LABEL_172;
    }
    if (v220)
    {
      float64x2_t v119 = vsubq_f64(*(float64x2_t *)(v226 + 8), *((float64x2_t *)v226 + 2));
      float64x2_t v120 = vmulq_f64(v119, v119);
      double v121 = *v237;
      double v122 = v237[2];
      v123.f64[0] = v237[1];
      v123.f64[1] = *(double *)v226 - *((double *)v226 + 3);
      float64x2_t v124 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v120.f64[0], 0);
      v124.f64[0] = v121 * v121;
      v120.f64[0] = v122 * v122;
      float64x2_t v125 = vcvtq_f64_f32(vcvt_f32_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64(v124, v123, v123), v120))));
      int32x2_t v126 = vmovn_s64(vcgtq_f64(v125, v217));
      double v127 = v125.f64[1];
      if ((v126.i8[4] & 1) == 0) {
        double v127 = 1.0;
      }
      if ((v126.i8[0] & 1) == 0) {
        v125.f64[0] = 1.0;
      }
      double v128 = v127 / v125.f64[0];
      double v102 = v128 * v121;
      double v103 = v128 * v237[1];
      double v104 = v128 * v122;
      if (v88 >= (double *)v60)
      {
        unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
        if (v129 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v129) {
          unint64_t v129 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
          unint64_t v130 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          if (v130 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_317;
          }
          float32x4_t v131 = (char *)operator new(24 * v130);
        }
        else
        {
          float32x4_t v131 = 0;
        }
        uint64_t v151 = (double *)&v131[8 * (((char *)v88 - (char *)v59) >> 3)];
        uint64_t v60 = &v131[24 * v130];
        *uint64_t v151 = v102;
        v151[1] = v103;
        v151[2] = v104;
        unsigned int v89 = v151 + 3;
        if (v88 != (double *)v59)
        {
          unint64_t v45 = v218;
          do
          {
            long long v156 = *(_OWORD *)(v88 - 3);
            *(v151 - 1) = *(v88 - 1);
            *(_OWORD *)(v151 - 3) = v156;
            v151 -= 3;
            v88 -= 3;
          }
          while (v88 != (double *)v59);
LABEL_236:
          if (!v59)
          {
LABEL_240:
            uint64_t v59 = (float64x2_t *)v151;
            goto LABEL_119;
          }
LABEL_239:
          operator delete(v59);
          goto LABEL_240;
        }
LABEL_238:
        unint64_t v45 = v218;
        goto LABEL_239;
      }
      goto LABEL_118;
    }
    if (v88 < (double *)v60) {
      goto LABEL_184;
    }
    unint64_t v148 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
    if (v148 > 0xAAAAAAAAAAAAAAALL) {
LABEL_323:
    }
      abort();
    if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v148) {
      unint64_t v148 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
      unint64_t v149 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v149 = v148;
    }
    if (v149)
    {
      if (v149 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_317;
      }
      BOOL v150 = (char *)operator new(24 * v149);
    }
    else
    {
      BOOL v150 = 0;
    }
    BOOL v157 = (float64x2_t *)&v150[8 * (((char *)v88 - (char *)v59) >> 3)];
    float64x2_t v160 = *(float64x2_t *)v118;
    uint64_t v60 = &v150[24 * v149];
    v157[1].f64[0] = v118[2];
    *BOOL v157 = v160;
    unsigned int v89 = &v157[1].f64[1];
    if (v88 == (double *)v59)
    {
LABEL_252:
      float64_t v8 = v221.f64[0];
LABEL_253:
      operator delete(v59);
      goto LABEL_254;
    }
    float64_t v8 = v221.f64[0];
    do
    {
      float64x2_t v161 = *(float64x2_t *)(v88 - 3);
      v157[-1].f64[1] = *(v88 - 1);
      *(float64x2_t *)((char *)v157 - 24) = v161;
      BOOL v157 = (float64x2_t *)((char *)v157 - 24);
      v88 -= 3;
    }
    while (v88 != (double *)v59);
LABEL_250:
    if (v59) {
      goto LABEL_253;
    }
LABEL_254:
    uint64_t v59 = v157;
    unint64_t v45 = v218;
LABEL_119:
    ++v87;
    float v88 = v89;
    if (v87 != *(void *)&v8) {
      continue;
    }
    break;
  }
  if (v237) {
    operator delete(v237);
  }
  float32x4_t v162 = (float64x2_t *)v230;
  float32x4_t v163 = (float64x2_t *)*((void *)&v231 + 1);
  BOOL v164 = &qword_1A28FC000;
  int v165 = v212;
  if (v212)
  {
LABEL_279:
    double v178 = v223[v216];
    double v179 = v223[1] + 1.0 - v178;
    if (v179 <= *((double *)v164 + 136)) {
      double v166 = 0.0;
    }
    else {
      double v166 = (1.0 - v178 + *v223 + 1.0 - v178 + *v223) / v179;
    }
    int v165 = 1;
    goto LABEL_283;
  }
  double v166 = 0.0;
LABEL_283:
  uint64_t v180 = 0;
  unint64_t v181 = 0;
  float64_t v182 = v59[1].f64[0] * v166;
  *float32x4_t v162 = vmulq_n_f64(*v59, v166);
  v162[1].f64[0] = v182;
  float64_t v183 = v59[1].f64[0] * v166;
  *float32x4_t v163 = vmulq_n_f64(*v59, v166);
  v163[1].f64[0] = v183;
  unint64_t v184 = 1;
  int v185 = v223;
  double v186 = *((double *)v164 + 136);
  do
  {
    unint64_t v191 = v184 + 1;
    double v192 = 0.0;
    if (((v45 == v184) & ~v165) == 0)
    {
      uint64_t v193 = (v184 + 1);
      double v192 = 0.0;
      if (v184 >= v45) {
        double v194 = 1.0;
      }
      else {
        double v194 = 0.0;
      }
      if (v184 >= v45) {
        uint64_t v193 = 1;
      }
      double v195 = *(double *)((char *)v185 + (v180 >> 29));
      double v196 = v185[v193] + v194 - v195;
      if (v196 > v186) {
        double v192 = (v185[v184] - v195 + v185[v184] - v195) / v196;
      }
    }
    float64_t v187 = v59[2].f64[v181 / 8 + 1] * v192;
    uint64_t v188 = (char *)v162 + v181;
    *(float64x2_t *)(v188 + 24) = vmulq_n_f64(*(float64x2_t *)((char *)v59 + v181 + 24), v192);
    *((float64_t *)v188 + 5) = v187;
    float64_t v189 = v59[2].f64[v181 / 8 + 1] * v192;
    long long v190 = (char *)v163 + v181;
    *(float64x2_t *)(v190 + 24) = vmulq_n_f64(*(float64x2_t *)((char *)v59 + v181 + 24), v192);
    *((float64_t *)v190 + 5) = v189;
    v181 += 24;
    v180 += 0x100000000;
    ++v184;
  }
  while (*(void *)&v8 != v191);
  operator delete(v59);
  if (v11) {
    operator delete(v11);
  }
  if (v10) {
    operator delete(v10);
  }
LABEL_297:
  if (v224 - v223 >= 0xAAAAAAAAAAAAAAABLL * ((v227 - v226) >> 3)) {
    uint64_t v197 = 0xAAAAAAAAAAAAAAABLL * ((v227 - v226) >> 3);
  }
  else {
    uint64_t v197 = v224 - v223;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v230 + 1) - v230) >> 3) == v197
    && v197
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v232 - *((void *)&v231 + 1)) >> 3) == v197)
  {
    uint64_t v200 = 0;
    while (v223[v200] <= a3)
    {
      if (v197 == ++v200)
      {
        uint64_t v200 = v197;
        break;
      }
    }
    if (v200)
    {
      if (v200 == v197)
      {
        float64x2_t v221 = *(float64x2_t *)&v226[24 * v197 - 24];
      }
      else
      {
        uint64_t v201 = v200 - 1;
        double v202 = v223[v200 - 1];
        double v203 = v223[v200] - v202;
        double v204 = 0.0;
        if (v203 != 0.0) {
          double v204 = (a3 - v202) / v203;
        }
        uint64_t v205 = 24 * v200;
        float v206 = (float64x2_t *)(v230 + 24 * v201);
        __asm
        {
          FMOV            V17.2D, #2.0
          FMOV            V2.2D, #3.0
        }
        float64x2_t v221 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)&v226[24 * v201], *v206, v204), vaddq_f64(vmlaq_f64(vaddq_f64(v235, *v206), _Q17, vsubq_f64(*(float64x2_t *)&v226[24 * v201], *(float64x2_t *)&v226[v205])), *(float64x2_t *)(*((void *)&v231 + 1) + v205)), v204 * v204 * v204), vsubq_f64(vmlaq_f64(vsubq_f64(v235, vaddq_f64(*v206, *v206)), _Q2, vsubq_f64(*(float64x2_t *)&v226[v205], *(float64x2_t *)&v226[24 * v201])), *(float64x2_t *)(*((void *)&v231 + 1) + v205)), v204 * v204);
      }
    }
    else
    {
      float64x2_t v221 = *(float64x2_t *)v226;
    }
  }
  return (__n128)v221;
}

void sub_1A25E5C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v30 = *(void **)(v28 - 176);
  if (v30)
  {
    operator delete(v30);
    if (!v27)
    {
LABEL_3:
      if (!v25) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v27)
  {
    goto LABEL_3;
  }
  operator delete(v27);
  if (!v25)
  {
LABEL_4:
    if (!v26)
    {
LABEL_10:
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(v26);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v25);
  if (!v26) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void *md::anonymous namespace'::FlyoverSplineInterpolator<gm::Matrix<double,3,1>>::~FlyoverSplineInterpolator(void *a1)
{
  *a1 = &unk_1EF5130F0;
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

void md::anonymous namespace'::FlyoverSplineInterpolator<gm::Matrix<double,3,1>>::~FlyoverSplineInterpolator(void *a1)
{
  JUMPOUT(0x1A6239270);
}

md::AnimationData **std::unique_ptr<md::AnimationData>::~unique_ptr[abi:nn180100](md::AnimationData **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::AnimationData::~AnimationData(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

void md::VKFlyoverTour::VKFlyoverTour(md::VKFlyoverTour *this)
{
  int64x2_t v1 = vdupq_n_s64(0xC00921FB54442D18);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((int64x2_t *)this + 1) = v1;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *(int64x2_t *)((char *)this + 72) = v1;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *((_DWORD *)this + 33) = 1060320051;
  *((void *)this + 23) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = 0;
  operator new();
}

void sub_1A25E5F30(_Unwind_Exception *a1)
{
  uint64_t v3 = v1 + 24;
  uint64_t v4 = (uint64_t *)v1[31];
  if (v4 == v1 + 28)
  {
    (*(void (**)(uint64_t *))(v1[28] + 32))(v1 + 28);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t *))(*v4 + 40))(v4);
  }
  uint64_t v5 = v1 + 20;
  unint64_t v6 = (void *)v1[27];
  if (v6 == v3)
  {
    (*(void (**)(uint64_t *))(*v3 + 32))(v1 + 24);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  int v7 = (void *)v1[23];
  if (v7 == v5)
  {
    (*(void (**)(uint64_t *))(*v5 + 32))(v1 + 20);
  }
  else if (v7)
  {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
  float64_t v8 = (md::AnimationData **)v1[1];
  v1[1] = 0;
  if (v8)
  {
    unint64_t v9 = *v8;
    char *v8 = 0;
    if (v9)
    {
      md::AnimationData::~AnimationData(v9);
      MEMORY[0x1A6239270]();
    }
    MEMORY[0x1A6239270](v8, 0x1020C40F7B62AD5);
  }
  uint64_t v10 = *v1;
  uint64_t *v1 = 0;
  if (v10)
  {
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(void **)(v10 + 8));
    MEMORY[0x1A6239270](v10, 0x1020C4062D53EE8);
  }
  _Unwind_Resume(a1);
}

md::VKFlyoverTour *md::VKFlyoverTour::stopTour(md::VKFlyoverTour *this)
{
  double result = (md::VKFlyoverTour *)*((void *)this + 27);
  if (result)
  {
    uint64_t v3 = (char *)this + 192;
    uint64_t v4 = (uint64_t *)*((void *)this + 1);
    if (v4)
    {
      uint64_t v5 = *v4;
      if (v5) {
        float v6 = *(double *)(v5 + 144);
      }
      else {
        float v6 = 0.0;
      }
      if (vabds_f32(*((float *)this + 35), v6) <= 0.01) {
        int v7 = 5;
      }
      else {
        int v7 = 3;
      }
    }
    else
    {
      int v7 = 5;
    }
    int v9 = v7;
    (*(void (**)(md::VKFlyoverTour *, int *))(*(void *)result + 48))(result, &v9);
    float64_t v8 = (char *)*((void *)this + 27);
    *((void *)this + 27) = 0;
    if (v8 == v3)
    {
      (*(void (**)(char *))(*(void *)v3 + 32))((char *)this + 192);
    }
    else if (v8)
    {
      (*(void (**)(char *))(*(void *)v8 + 40))(v8);
    }
    double result = (md::VKFlyoverTour *)*((void *)this + 31);
    *((void *)this + 31) = 0;
    if (result == (md::VKFlyoverTour *)((char *)this + 224))
    {
      return (md::VKFlyoverTour *)(*(uint64_t (**)(char *))(*((void *)this + 28) + 32))((char *)this + 224);
    }
    else if (result)
    {
      return (md::VKFlyoverTour *)(*(uint64_t (**)(md::VKFlyoverTour *))(*(void *)result + 40))(result);
    }
  }
  return result;
}

void *std::__function::__value_func<void ()(VKFlyoverTourState)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void *std::__function::__value_func<void ()(std::string const&)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void ggl::RouteLineTraffic::BasePipelineState::~BasePipelineState(ggl::RouteLineTraffic::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::RouteLineTraffic::BasePipelineSetup::textureIsEnabled(ggl::RouteLineTraffic::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::RouteLineTraffic::BasePipelineSetup::constantDataIsEnabled(ggl::RouteLineTraffic::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::RouteLineTraffic::BasePipelineSetup::~BasePipelineSetup(ggl::RouteLineTraffic::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::RouteLineTraffic::BasePipelineSetup::BasePipelineSetup(ggl::RouteLineTraffic::BasePipelineSetup *this)
{
  {
    {
      {
        ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
      unk_1EB32B798 = 1;
    }
    ggl::RouteLineTraffic::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
    *(void *)algn_1EB320F98 = &ggl::RouteLineTraffic::pipelineDataBasePipelineDeviceStructs(void)::ref;
    qword_1EB320FA0 = 0;
    {
      ggl::RouteLineTraffic::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1EB320FD0 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EB320FD8 = (uint64_t)ggl::RouteLineTraffic::Style::reflection(void)::reflection;
    }
    qword_1EB320FA8 = (uint64_t)&ggl::RouteLineTraffic::pipelineDataBasePipelineConstantStructs(void)::ref;
    unk_1EB320FB0 = xmmword_1A28FCEF0;
  }
  uint64_t result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::RouteLineTraffic::BasePipelineSetup::typedReflection(void)::ref);
  *(void *)this = &unk_1EF55D4D8;
  return result;
}

void md::CrossFadeLabelPart::debugCompositeClassName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "CrossFade");
}

uint64_t md::CrossFadeLabelPart::isTextVisible(md::CrossFadeLabelPart *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 72) + 8) + 744))();
}

uint64_t md::CrossFadeLabelPart::hitPartAtPixel(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 576) + 8) + 632))();
}

uint64_t md::CrossFadeLabelPart::reserveSpaceLabelPart(md::CrossFadeLabelPart *this, BOOL *a2)
{
  return 0;
}

uint64_t md::CrossFadeLabelPart::collidesWithObject(md::CrossFadeLabelPart *this, const md::CollisionObject *a2)
{
  return 0;
}

uint64_t md::CrossFadeLabelPart::collidesWithItem(md::CrossFadeLabelPart *this, const md::LabelCollidableItem *a2)
{
  return 0;
}

void md::CrossFadeLabelPart::~CrossFadeLabelPart(md::CrossFadeLabelPart *this)
{
  md::CompositeLabelPart::~CompositeLabelPart(this);
  int64x2_t v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    int64x2_t v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  uint64_t v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

void md::HardwareScalerFilter::~HardwareScalerFilter(md::HardwareScalerFilter *this)
{
  md::HardwareScalerFilter::~HardwareScalerFilter(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(void *)this = &unk_1EF53D6F0;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2) {
    free(v2);
  }
  int v3 = (void *)*((void *)this + 6);
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 7);
  if (v4) {
    free(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 8);
  if (v5) {
    free(v5);
  }
  float v6 = (void *)*((void *)this + 9);
  if (v6) {
    free(v6);
  }
  int v7 = (void *)*((void *)this + 10);
  if (v7) {
    free(v7);
  }
  float64_t v8 = (void *)*((void *)this + 11);
  if (v8) {
    free(v8);
  }
}

void md::HardwareScalerFilter::coefficients(int a1, unsigned int a2, char a3, char a4, uint64_t a5, int a6, double a7)
{
  v103[448] = *MEMORY[0x1E4F143B8];
  int v7 = a1 - 1;
  if (a1 < 1) {
    int v7 = a1;
  }
  double v8 = (double)(v7 >> 1);
  unsigned int v9 = llround(a7 * 8.0);
  double v10 = v8 + 0.5;
  double v11 = v8 + 1.5;
  if (v9 != 2) {
    double v11 = v8;
  }
  if (v9 != 4) {
    double v10 = v11;
  }
  if (a2)
  {
    uint64_t v13 = v10 * a2;
    unsigned int v98 = 1 << a4;
    if (a1)
    {
      double v96 = 1.0 / (double)(int)a2;
      unsigned int v95 = a1 & 0x80000001;
      double v94 = -v10;
      double v14 = (double)(unint64_t)(1 << a4);
      uint64_t v15 = ~(-1 << (a4 + a3));
      uint64_t v16 = a5 + 4 * v13;
      uint64_t v93 = a2;
      uint64_t v17 = a1;
      uint64_t v18 = a1 & 0xFFFFFFFE;
      BOOL v20 = a1 == 1 || a2 != 1;
      BOOL v92 = v20;
      uint64_t v21 = 0;
      if (a6)
      {
        double v22 = floor(v8 * a7);
        double v23 = (double)-vcvtmd_s64_f64(v8 * a7);
        double v24 = (double *)v102;
        __double2 v25 = (double *)v103;
        double v26 = 0.5;
        while (1)
        {
          uint64_t v27 = 0;
          double v28 = v96 * (double)v21;
          if (v28 >= v26 && v95 == 1) {
            double v28 = v28 + -1.0;
          }
          double v30 = v94 - v28;
          double v31 = 0.0;
          unint64_t v32 = v24;
          do
          {
            double v36 = (v30 + (double)v27) * a7;
            BOOL v37 = v36 >= v22 || v36 <= v23;
            double v35 = 0.0;
            if (!v37)
            {
              if (v36 == 0.0)
              {
                double v35 = 1.0;
              }
              else
              {
                double v33 = v36 * 3.14159265;
                double v34 = sin(v36 * 3.14159265);
                double v35 = sin(v33 * (1.0 / v22)) * v34 / (v33 * (1.0 / v22) * v33);
              }
            }
            *unint64_t v32 = v35;
            double v31 = v35 + v31;
            ++v27;
            v32 += 32;
          }
          while (v17 != v27);
          uint64_t v38 = a5 + 4 * v21;
          double v39 = 1.0 / v31;
          if (v92)
          {
            uint64_t v40 = 0;
            int v41 = 0;
            double v26 = 0.5;
          }
          else
          {
            uint64_t v42 = 0;
            int v43 = 0;
            int v44 = 0;
            unint64_t v45 = v25;
            double v26 = 0.5;
            do
            {
              int v46 = (int)(*(v45 - 32) * v14 * v39 + 0.5) & v15;
              int v47 = (int)(*v45 * v14 * v39 + 0.5) & v15;
              double v48 = (_DWORD *)(v38 + 4 * (v42 & 0xFFFFFFFE));
              *double v48 = v46;
              v48[1] = v47;
              v43 += v46;
              v44 += v47;
              v42 += 2;
              v45 += 64;
            }
            while (v18 != v42);
            int v41 = v44 + v43;
            uint64_t v40 = v18;
            if (v18 == v17) {
              goto LABEL_17;
            }
          }
          uint64_t v49 = v17 - v40;
          unsigned int v50 = a2 * v40;
          uint64_t v51 = v40 << 8;
          do
          {
            int v52 = (int)(v26 + *(double *)((char *)v24 + v51) * v14 * v39) & v15;
            *(_DWORD *)(v38 + 4 * v50) = v52;
            v41 += v52;
            v50 += a2;
            v51 += 256;
            --v49;
          }
          while (v49);
LABEL_17:
          *(_DWORD *)(v16 + 4 * v21++) += v98 - v41;
          ++v24;
          ++v25;
          if (v21 == v93) {
            return;
          }
        }
      }
      double v99 = (double)a1 * -0.5;
      double v100 = (double)a1 * 0.5;
      double v54 = 1.0 / (double)a1;
      unint64_t v55 = (double *)v102;
      unint64_t v56 = (double *)v103;
      double v57 = 0.5;
      while (1)
      {
        uint64_t v58 = 0;
        double v59 = v96 * (double)v21;
        if (v59 >= v57 && v95 == 1) {
          double v59 = v59 + -1.0;
        }
        double v61 = v94 - v59;
        double v62 = 0.0;
        long long v63 = v55;
        do
        {
          double v66 = (v61 + (double)v58) * a7;
          double v67 = cos(v66 * 3.14159265 * v54);
          double v65 = 1.0;
          if (v66 != 0.0)
          {
            double v65 = 0.0;
            if (v100 > v66 && v99 < v66)
            {
              double v69 = sin(v66 * 3.14159265);
              double v70 = v67 * v67;
              if (a7 < 1.0) {
                double v64 = v70 * v70 * v69;
              }
              else {
                double v64 = v67 * v69 * v70;
              }
              double v65 = v64 / (v66 * 3.14159265);
            }
          }
          *long long v63 = v65;
          double v62 = v65 + v62;
          ++v58;
          v63 += 32;
        }
        while (v17 != v58);
        uint64_t v71 = a5 + 4 * v21;
        double v72 = 1.0 / v62;
        if (v92)
        {
          uint64_t v73 = 0;
          int v74 = 0;
          double v57 = 0.5;
        }
        else
        {
          uint64_t v75 = 0;
          int v76 = 0;
          int v77 = 0;
          BOOL v78 = v56;
          double v57 = 0.5;
          do
          {
            int v79 = (int)(*(v78 - 32) * v14 * v72 + 0.5) & v15;
            int v80 = (int)(*v78 * v14 * v72 + 0.5) & v15;
            uint64_t v81 = (_DWORD *)(v71 + 4 * (v75 & 0xFFFFFFFE));
            *uint64_t v81 = v79;
            v81[1] = v80;
            v76 += v79;
            v77 += v80;
            v75 += 2;
            v78 += 64;
          }
          while (v18 != v75);
          int v74 = v77 + v76;
          uint64_t v73 = v18;
          if (v18 == v17) {
            goto LABEL_43;
          }
        }
        uint64_t v82 = v17 - v73;
        unsigned int v83 = a2 * v73;
        uint64_t v84 = v73 << 8;
        do
        {
          int v85 = (int)(v57 + *(double *)((char *)v55 + v84) * v14 * v72) & v15;
          *(_DWORD *)(v71 + 4 * v83) = v85;
          v74 += v85;
          v83 += a2;
          v84 += 256;
          --v82;
        }
        while (v82);
LABEL_43:
        *(_DWORD *)(v16 + 4 * v21++) += v98 - v74;
        ++v55;
        ++v56;
        if (v21 == v93) {
          return;
        }
      }
    }
    if (a2 <= 7)
    {
      uint64_t v53 = 0;
LABEL_72:
      uint64_t v90 = a2 - v53;
      unsigned int v91 = (_DWORD *)(a5 + 4 * v53 + 4 * v13);
      do
      {
        *v91++ += v98;
        --v90;
      }
      while (v90);
      return;
    }
    uint64_t v53 = a2 & 0xFFFFFFF8;
    int32x4_t v86 = vdupq_n_s32(v98);
    unint64_t v87 = (int32x4_t *)(a5 + 4 * v13 + 16);
    uint64_t v88 = v53;
    do
    {
      int32x4_t v89 = vaddq_s32(v86, *v87);
      v87[-1] = vaddq_s32(v86, v87[-1]);
      *unint64_t v87 = v89;
      v87 += 2;
      v88 -= 8;
    }
    while (v88);
    if (v53 != a2) {
      goto LABEL_72;
    }
  }
}

void ___ZN2md14HardwareScaler8instanceENS_23HardwareScalerOperationENS_24HardwareScalerFilterTypeE_block_invoke_2()
{
}

void sub_1A25E73F8(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x1060C409B8FB70ALL);
  _Unwind_Resume(a1);
}

void ___ZN2md14HardwareScaler8instanceENS_23HardwareScalerOperationENS_24HardwareScalerFilterTypeE_block_invoke_3()
{
}

void sub_1A25E7468(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x1060C409B8FB70ALL);
  _Unwind_Resume(a1);
}

void md::HardwareScaler::HardwareScaler(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  IOSurfaceAcceleratorCreate();
  int v7 = v4(v5, v6);
  *(_DWORD *)a1 = v7;
  if (!v7)
  {
    *(_DWORD *)a1 = v8(v9, v10);
  }
  Main = CFRunLoopGetMain();
  RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
  CFRunLoopAddSource(Main, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  operator new();
}

__CFDictionary *anonymous namespace'::SetAccelOptions(_anonymous_namespace_ *this)
{
  int v1 = (int)this;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v3 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6ED70], (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6EC80], v3);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6ECB8], v3);
  uint64_t v4 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (v1) {
    uint64_t v5 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  else {
    uint64_t v5 = v3;
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6ED60], v5);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6ED78], v4);
  int valuePtr = 0;
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6EC60], v6);
  CFRelease(v6);
  return Mutable;
}

int *___ZN2md14HardwareScaler8instanceENS_23HardwareScalerOperationENS_24HardwareScalerFilterTypeE_block_invoke()
{
  uint64_t result = (int *)dlopen((const char *)[@"/System/Library/Frameworks/IOKit.framework/IOKit" fileSystemRepresentation], 4);
  if (result)
  {
    int v1 = result;
    uint64_t result = (int *)dlsym(v1, "kIOMasterPortDefault");
  }
  return result;
}

uint64_t md::HardwareScaler::scaleSync(int a1, IOSurfaceRef buffer)
{
  return IOSurfaceAcceleratorTransformSurface();
}

void md::RunLoopController::setNeedsLayoutContinously(md::RunLoopController *this, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (this && *((unsigned __int8 *)this + 1160) != a2)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v4 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = "True";
      if (*((unsigned char *)this + 1160)) {
        CFNumberRef v6 = "True";
      }
      else {
        CFNumberRef v6 = "False";
      }
      if (!a2) {
        uint64_t v5 = "False";
      }
      int v7 = 136315394;
      double v8 = v6;
      __int16 v9 = 2080;
      uint64_t v10 = v5;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "Layout Continuously changed from '%s' to '%s'", (uint8_t *)&v7, 0x16u);
    }

    *((unsigned char *)this + 1160) = a2;
  }
}

uint64_t md::LabelsExternalMeshLogic::debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)a2 + 16);
  if (!v4
    || (uint64_t v5 = result,
        (uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 168) + 64) + 24))(*(void *)(*(void *)(v4 + 168) + 64))) == 0))
  {
    a3[23] = 0;
    *a3 = 0;
    return result;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v48);
  gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(*(int8x8_t **)(v5 + 120));
  gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>(*(int8x8_t **)(v5 + 120));
  gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>(*(int8x8_t **)(v5 + 120));
  gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>(*(int8x8_t **)(v5 + 120));
  CFNumberRef v6 = *(int8x8_t **)(v5 + 120);
  int v7 = (uint64_t *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(v6);
  uint64_t v8 = gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v6);
  uint64_t v9 = v8;
  uint64_t v10 = (void *)(v8 + 32);
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) >= (unint64_t)(v7[8] - v7[7])) {
    uint64_t v11 = (uint64_t)(v7 + 4);
  }
  else {
    uint64_t v11 = v8 + 32;
  }
  gdc::RegistryView<md::components::DynamicMeshInstance,md::components::Material>::RegistryViewIterator::RegistryViewIterator(&v60, v11, v7 + 4, v10, *(void *)(v11 + 24));
  if (*(void *)(v9 + 64) - *(void *)(v9 + 56) >= (unint64_t)(v7[8] - v7[7])) {
    uint64_t v12 = (uint64_t)(v7 + 4);
  }
  else {
    uint64_t v12 = (uint64_t)v10;
  }
  gdc::RegistryView<md::components::DynamicMeshInstance,md::components::Material>::RegistryViewIterator::RegistryViewIterator(v58, v12, v7 + 4, v10, *(void *)(v12 + 32));
  uint64_t v13 = v63;
  if (v59 != v63)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(v60 + 32);
    do
    {
      uint64_t v63 = v13 + 8;
      uint64_t v16 = v15;
      if (v13 + 8 != v15)
      {
        uint64_t v17 = *v61;
        unint64_t v18 = (v61[1] - *v61) >> 3;
        uint64_t v19 = v13 + 16;
        while (1)
        {
          unint64_t v20 = *(unsigned int *)(v19 - 4);
          unint64_t v21 = v20 >> 7;
          if (v20 >> 7 < v18)
          {
            uint64_t v22 = *(void *)(v17 + 8 * v21);
            if (v22)
            {
              unint64_t v23 = *(unsigned __int16 *)(v22 + 2 * (v20 & 0x7F));
              uint64_t v25 = v61[3];
              uint64_t v24 = v61[4];
              if (v23 < (v24 - v25) >> 3)
              {
                uint64_t v26 = v25 + 8 * v23;
                BOOL v27 = v26 != v24 && *(_DWORD *)(v26 + 4) == v20;
                if (v27 && v21 < (uint64_t)(v62[1] - *v62) >> 3)
                {
                  uint64_t v28 = *(void *)(*v62 + 8 * v21);
                  if (v28)
                  {
                    unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * (v20 & 0x7F));
                    uint64_t v30 = v62[3];
                    uint64_t v31 = v62[4];
                    if (v29 < (v31 - v30) >> 3)
                    {
                      uint64_t v32 = v30 + 8 * v29;
                      if (v32 != v31 && *(_DWORD *)(v32 + 4) == v20) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v63 = v19;
          BOOL v27 = v19 == v15;
          v19 += 8;
          if (v27)
          {
            uint64_t v16 = v15;
            goto LABEL_12;
          }
        }
        uint64_t v16 = v19 - 8;
      }
LABEL_12:
      ++v14;
      uint64_t v13 = v16;
    }
    while (v59 != v16);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Pending Arrival Requests:", 25);
  double v34 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Pending Shadow Requests:", 24);
  double v35 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Arrival Features:", 17);
  double v36 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Shadow Features:", 16);
  BOOL v37 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Visible Features:", 17);
  uint64_t v38 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)"Awaiting Deletion:", 18);
  double v39 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"\n", 1);
  if ((v56 & 0x10) != 0)
  {
    unint64_t v41 = v55;
    if (v55 < v52)
    {
      unint64_t v55 = v52;
      unint64_t v41 = v52;
    }
    uint64_t v42 = (const void **)&v51;
  }
  else
  {
    if ((v56 & 8) == 0)
    {
      size_t v40 = 0;
      a3[23] = 0;
      goto LABEL_49;
    }
    uint64_t v42 = (const void **)v50;
    unint64_t v41 = v50[2];
  }
  int v43 = *v42;
  size_t v40 = v41 - (void)*v42;
  if (v40 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v40 >= 0x17)
  {
    uint64_t v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v44 = v40 | 7;
    }
    uint64_t v45 = v44 + 1;
    int v46 = operator new(v44 + 1);
    *((void *)a3 + 1) = v40;
    *((void *)a3 + 2) = v45 | 0x8000000000000000;
    *(void *)a3 = v46;
    a3 = v46;
  }
  else
  {
    a3[23] = v40;
    if (!v40) {
      goto LABEL_49;
    }
  }
  memmove(a3, v43, v40);
LABEL_49:
  a3[v40] = 0;
  v48[0] = *MEMORY[0x1E4FBA408];
  uint64_t v47 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v48 + *(void *)(v48[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v49[0] = v47;
  v49[1] = MEMORY[0x1E4FBA470] + 16;
  if (v54 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v57);
}

void sub_1A25E8460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x38E94766143C6BD3;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x38E94766143C6BD3;
    if (*(void *)&v1 <= 0x38E94766143C6BD3uLL) {
      uint64_t v3 = 0x38E94766143C6BD3uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x38E94766143C6BD3;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x38E94766143C6BD3)
      {
        if (v5[2] == 0x38E94766143C6BD3) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x38E94766143C6BD3) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x38E94766143C6BD3) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A25E86C4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x152DC0B81456FF96;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x152DC0B81456FF96;
    if (*(void *)&v1 <= 0x152DC0B81456FF96uLL) {
      uint64_t v3 = 0x152DC0B81456FF96uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x152DC0B81456FF96;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x152DC0B81456FF96)
      {
        if (v5[2] == 0x152DC0B81456FF96) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x152DC0B81456FF96) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x152DC0B81456FF96) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A25E8934(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xDC141A54284D3B32;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xDC141A54284D3B32;
    if (*(void *)&v1 <= 0xDC141A54284D3B32) {
      unint64_t v3 = 0xDC141A54284D3B32 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xDC141A54284D3B32;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDC141A54284D3B32)
      {
        if (v5[2] == 0xDC141A54284D3B32) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDC141A54284D3B32) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDC141A54284D3B32) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A25E8BA4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x29581258A69F7265;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x29581258A69F7265;
    if (*(void *)&v1 <= 0x29581258A69F7265uLL) {
      uint64_t v3 = 0x29581258A69F7265uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x29581258A69F7265;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x29581258A69F7265)
      {
        if (v5[2] == 0x29581258A69F7265) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x29581258A69F7265) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x29581258A69F7265) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A25E8E14(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v24 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = (void *)(a1[10] + 16 * v7);
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          uint64_t v16 = *(void *)(v14 - 16);
          uint64_t v15 = *(void *)(v14 - 8);
          if (v15) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v17 = (std::__shared_weak_count *)v13[1];
          void *v13 = v16;
          v13[1] = v15;
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          uint64_t v18 = a1[11];
          uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          a1[11] = v18 - 16;
          unint64_t v20 = (void *)a1[28];
          if (v20)
          {
            uint64_t v21 = a1[31];
            while (1)
            {
              v26[0] = &v24;
              v26[1] = 1;
              uint64_t v25 = v21;
              uint64_t v22 = v20[6];
              if (!v22) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v22 + 48))(v22, &v25, v26);
              unint64_t v20 = (void *)*v20;
              if (!v20) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>::~ComponentStorageWrapper(v23);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v24 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = (void *)(a1[10] + 16 * v7);
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          uint64_t v16 = *(void *)(v14 - 16);
          uint64_t v15 = *(void *)(v14 - 8);
          if (v15) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v17 = (std::__shared_weak_count *)v13[1];
          void *v13 = v16;
          v13[1] = v15;
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          uint64_t v18 = a1[11];
          uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          a1[11] = v18 - 16;
          unint64_t v20 = (void *)a1[28];
          if (v20)
          {
            uint64_t v21 = a1[31];
            while (1)
            {
              v26[0] = &v24;
              v26[1] = 1;
              uint64_t v25 = v21;
              uint64_t v22 = v20[6];
              if (!v22) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v22 + 48))(v22, &v25, v26);
              unint64_t v20 = (void *)*v20;
              if (!v20) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>::~ComponentStorageWrapper(v23);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v24 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = (void *)(a1[10] + 16 * v7);
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          uint64_t v16 = *(void *)(v14 - 16);
          uint64_t v15 = *(void *)(v14 - 8);
          if (v15) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v17 = (std::__shared_weak_count *)v13[1];
          void *v13 = v16;
          v13[1] = v15;
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          uint64_t v18 = a1[11];
          uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          a1[11] = v18 - 16;
          unint64_t v20 = (void *)a1[28];
          if (v20)
          {
            uint64_t v21 = a1[31];
            while (1)
            {
              v26[0] = &v24;
              v26[1] = 1;
              uint64_t v25 = v21;
              uint64_t v22 = v20[6];
              if (!v22) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v22 + 48))(v22, &v25, v26);
              unint64_t v20 = (void *)*v20;
              if (!v20) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>::~ComponentStorageWrapper(v23);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v24 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = (void *)(a1[10] + 16 * v7);
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          uint64_t v16 = *(void *)(v14 - 16);
          uint64_t v15 = *(void *)(v14 - 8);
          if (v15) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v17 = (std::__shared_weak_count *)v13[1];
          void *v13 = v16;
          v13[1] = v15;
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          uint64_t v18 = a1[11];
          uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          a1[11] = v18 - 16;
          unint64_t v20 = (void *)a1[28];
          if (v20)
          {
            uint64_t v21 = a1[31];
            while (1)
            {
              v26[0] = &v24;
              v26[1] = 1;
              uint64_t v25 = v21;
              uint64_t v22 = v20[6];
              if (!v22) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v22 + 48))(v22, &v25, v26);
              unint64_t v20 = (void *)*v20;
              if (!v20) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>::~ComponentStorageWrapper(v23);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

void md::LabelsExternalMeshLogic::runAfterLayout(uint64_t a1)
{
  uint64_t v26 = (unint64_t *)v29;
  BOOL v27 = (unint64_t *)v29;
  unint64_t v28 = 4;
  uint64_t v2 = gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(*(int8x8_t **)(a1 + 120));
  uint64_t v3 = *(unint64_t **)(v2 + 56);
  uint64_t v4 = *(unint64_t **)(v2 + 64);
  uint64_t v5 = (unint64_t *)v29;
  if (v3 != v4)
  {
    while (1)
    {
      unint64_t v6 = *v3;
      uint64_t v7 = v5 - v26;
      if (v28 < v7 + 1) {
        break;
      }
LABEL_4:
      unint64_t *v5 = v6;
      uint64_t v5 = ++v27;
      if (++v3 == v4) {
        goto LABEL_23;
      }
    }
    unint64_t v8 = (1 << -(char)__clz(v28 + 1));
    if (v28 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9 <= v7 + 1) {
      uint64_t v10 = v7 + 1;
    }
    else {
      uint64_t v10 = v9;
    }
    uint64_t v11 = (char *)malloc_type_malloc(8 * v10, 0x100004000313F17uLL);
    uint64_t v12 = (unint64_t *)v11;
    uint64_t v13 = v26;
    if (v26 != v27)
    {
      unint64_t v14 = (char *)v27 - (char *)v26 - 8;
      if (v14 < 0x18)
      {
        uint64_t v15 = v11;
      }
      else
      {
        uint64_t v15 = v11;
        if ((unint64_t)(v11 - (char *)v26) >= 0x20)
        {
          uint64_t v16 = (v14 >> 3) + 1;
          uint64_t v17 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v15 = &v11[v17 * 8];
          uint64_t v18 = (long long *)(v26 + 2);
          uint64_t v19 = v11 + 16;
          uint64_t v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v21 = *v18;
            *(v19 - 1) = *(v18 - 1);
            _OWORD *v19 = v21;
            v18 += 2;
            v19 += 2;
            v20 -= 4;
          }
          while (v20);
          if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_21;
          }
          uint64_t v13 = &v26[v17];
        }
      }
      do
      {
        uint64_t v22 = *v13++;
        *(void *)uint64_t v15 = v22;
        v15 += 8;
      }
      while (v13 != v27);
    }
LABEL_21:
    if (v26 != (unint64_t *)v29) {
      free(v26);
    }
    uint64_t v5 = &v12[v7];
    uint64_t v26 = v12;
    BOOL v27 = v5;
    unint64_t v28 = v10;
    goto LABEL_4;
  }
LABEL_23:
  uint64_t v23 = v26;
  if (v26 != v5)
  {
    uint64_t v24 = *(void *)(a1 + 120);
    do
    {
      unint64_t v25 = *v23++;
      gdc::Registry::destroy(v24, v25);
    }
    while (v23 != v5);
    uint64_t v5 = v26;
  }
  if (v5 != (unint64_t *)v29) {
    free(v5);
  }
}

void sub_1A25E9A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11)
{
  if (a9 != a11) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

void md::LabelsExternalMeshLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, uint64_t a3)
{
  uint64_t v809 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 120)) {
    return;
  }
  uint64_t v3 = *(void *)(*(void *)a3 + 16);
  if (!v3) {
    return;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v3 + 168) + 64) + 24))(*(void *)(*(void *)(v3 + 168) + 64));
  if (!v4) {
    return;
  }
  uint64_t v771 = v4;
  *(void *)int64x2_t v802 = (char *)&v803 + 8;
  *(void *)&v802[8] = (char *)&v803 + 8;
  *(void *)&v802[16] = (char *)&v803 + 8;
  *(void *)&long long v803 = 4;
  char v791 = (unint64_t *)v795;
  unint64_t v792 = (unint64_t *)v795;
  uint64_t v793 = (unint64_t *)v795;
  unint64_t v794 = 4;
  uint64_t v5 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(*(int8x8_t **)(a1 + 120));
  unint64_t v6 = (unint64_t *)v5[7];
  uint64_t v7 = (unint64_t *)v5[8];
  if (v6 != v7)
  {
    unint64_t v8 = (int **)v5[10];
    while (1)
    {
      unint64_t v9 = *v6;
      unsigned __int8 v10 = atomic_load((unsigned __int8 *)*v8 + 116);
      if (v10) {
        break;
      }
LABEL_6:
      v8 += 2;
      if (++v6 == v7) {
        goto LABEL_58;
      }
    }
    uint64_t v11 = (void *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(*(int8x8_t **)(a1 + 120));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v11, v9);
    uint64_t v12 = (void *)gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(*(int8x8_t **)(a1 + 120));
    uint64_t v13 = v12[4];
    if (v9 >> 39 < (v12[5] - v13) >> 3)
    {
      uint64_t v14 = *(void *)(v13 + 8 * (v9 >> 39));
      if (v14)
      {
        unint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v9) & 0x7F));
        uint64_t v17 = v12[7];
        uint64_t v16 = v12[8];
        if (v15 < (v16 - v17) >> 3)
        {
          uint64_t v18 = v17 + 8 * v15;
          if (v18 != v16 && *(_DWORD *)(v18 + 4) == HIDWORD(v9))
          {
            uint64_t v20 = v12[10];
            if (v20)
            {
              long long v21 = (uint64_t *)(v20 + 16 * v15);
              if (v21 != (uint64_t *)v12[11])
              {
                uint64_t v22 = *v21;
                uint64_t v23 = (void *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(*(int8x8_t **)(a1 + 120));
                gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v23, v22);
                uint64_t v24 = *(void *)(v20 + 16 * v15 + 8);
                unint64_t v25 = (void *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(*(int8x8_t **)(a1 + 120));
                gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v25, v24);
              }
            }
          }
        }
      }
    }
    BOOL v27 = *(char **)(a1 + 176);
    uint64_t v26 = *(char **)(a1 + 184);
    if (v27 == v26)
    {
      unint64_t v28 = *(char **)(a1 + 176);
    }
    else
    {
      unint64_t v28 = *(char **)(a1 + 176);
      while (*v8 != *(int **)v28)
      {
        v28 += 16;
        if (v28 == v26) {
          goto LABEL_34;
        }
      }
    }
    if (v28 == v26)
    {
LABEL_34:
      uint64_t v40 = *(void *)v802;
      double v39 = *(unint64_t **)&v802[8];
      uint64_t v41 = (uint64_t)(*(void *)&v802[8] - *(void *)v802) >> 3;
      if ((unint64_t)v803 >= v41 + 1)
      {
LABEL_52:
        *double v39 = v9;
        *(void *)&v802[8] += 8;
        if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1) {
          dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_39646);
        }
        uint64_t v58 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_INFO))
        {
          int v59 = **v8;
          uint64_t v60 = "ARFeatureShadow";
          if (!*((unsigned char *)*v8 + 4)) {
            uint64_t v60 = "ARArrival";
          }
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v59;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = v60;
          _os_log_impl(&dword_1A1780000, v58, OS_LOG_TYPE_INFO, "Queuing external mesh for deletion (id:%d type:%s)", buf, 0x12u);
        }
        goto LABEL_6;
      }
      uint64_t v42 = *(void *)&v802[16];
      unint64_t v43 = (1 << -(char)__clz(v803 + 1));
      if ((unint64_t)v803 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v43 = 1;
      }
      if (v43 <= v41 + 1) {
        unint64_t v44 = v41 + 1;
      }
      else {
        unint64_t v44 = v43;
      }
      uint64_t v45 = (char *)malloc_type_malloc(8 * v44, 0x100004000313F17uLL);
      int v46 = v45;
      uint64_t v47 = *(uint64_t **)v802;
      double v48 = *(uint64_t **)&v802[8];
      if (*(void *)v802 != *(void *)&v802[8])
      {
        unint64_t v49 = *(void *)&v802[8] - *(void *)v802 - 8;
        if (v49 < 0x18)
        {
          unsigned int v50 = v45;
        }
        else
        {
          unsigned int v50 = v45;
          if ((unint64_t)&v45[-*(void *)v802] >= 0x20)
          {
            uint64_t v51 = (v49 >> 3) + 1;
            uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            unsigned int v50 = &v45[v52];
            uint64_t v53 = (long long *)(*(void *)v802 + 16);
            char v54 = v45 + 16;
            uint64_t v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v56 = *v53;
              *(v54 - 1) = *(v53 - 1);
              *char v54 = v56;
              v53 += 2;
              v54 += 2;
              v55 -= 4;
            }
            while (v55);
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_49;
            }
            uint64_t v47 = (uint64_t *)((char *)v47 + v52);
          }
        }
        do
        {
          uint64_t v57 = *v47++;
          *(void *)unsigned int v50 = v57;
          v50 += 8;
        }
        while (v47 != v48);
      }
LABEL_49:
      if (v40 != v42) {
        free(*(void **)v802);
      }
      double v39 = (unint64_t *)&v46[8 * v41];
      *(void *)int64x2_t v802 = v46;
      *(void *)&v802[8] = v39;
      *(void *)&long long v803 = v44;
      goto LABEL_52;
    }
    unint64_t v29 = v28 + 16;
    if (v28 + 16 != v26)
    {
      unint64_t v30 = v26 - v28 - 32;
      if (v30 >= 0x30)
      {
        uint64_t v31 = (v28 - v27) >> 4;
        uint64_t v32 = (v30 >> 4) + 1;
        uint64_t v33 = 16 * (v32 & 0x1FFFFFFFFFFFFFFCLL);
        v28 += v33;
        double v34 = (double *)&v27[16 * v31 + 32];
        uint64_t v35 = v32 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          double v36 = v34 - 2;
          float64x2x2_t v810 = vld2q_f64(v36);
          BOOL v37 = v34 + 2;
          float64x2x2_t v811 = vld2q_f64(v37);
          uint64_t v38 = v34 - 4;
          vst2q_f64(v38, v810);
          vst2q_f64(v34, v811);
          v34 += 8;
          v35 -= 4;
        }
        while (v35);
        if (v32 == (v32 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_33;
        }
        v29 += v33;
      }
      do
      {
        *(void *)unint64_t v28 = *(void *)v29;
        *((void *)v28 + 1) = *((void *)v29 + 1);
        v28 += 16;
        v29 += 16;
      }
      while (v29 != v26);
    }
LABEL_33:
    *(void *)(a1 + 184) = v28;
    goto LABEL_34;
  }
LABEL_58:
  double v61 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>(*(int8x8_t **)(a1 + 120));
  double v62 = (unint64_t *)v61[7];
  uint64_t v63 = (unint64_t *)v61[8];
  if (v62 != v63)
  {
    double v64 = (uint64_t *)v61[10];
    while (1)
    {
      unint64_t v65 = *v62;
      uint64_t v66 = *v64;
      double v67 = (std::mutex *)(*v64 + 96);
      std::mutex::lock(v67);
      LODWORD(v66) = *(unsigned __int8 *)(v66 + 176);
      std::mutex::unlock(v67);
      if (v66 == 4) {
        break;
      }
LABEL_60:
      v64 += 2;
      if (++v62 == v63) {
        goto LABEL_133;
      }
    }
    double v68 = (void *)gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(*(int8x8_t **)(a1 + 120));
    uint64_t v69 = v68[4];
    if (v65 >> 39 >= (v68[5] - v69) >> 3) {
      goto LABEL_109;
    }
    uint64_t v70 = *(void *)(v69 + 8 * (v65 >> 39));
    if (!v70) {
      goto LABEL_109;
    }
    unint64_t v71 = *(unsigned __int16 *)(v70 + 2 * (HIDWORD(v65) & 0x7F));
    uint64_t v73 = v68[7];
    uint64_t v72 = v68[8];
    if (v71 >= (v72 - v73) >> 3) {
      goto LABEL_109;
    }
    uint64_t v74 = v73 + 8 * v71;
    BOOL v75 = v74 != v72 && *(_DWORD *)(v74 + 4) == HIDWORD(v65);
    if (!v75
      || (uint64_t v76 = v68[10]) == 0
      || (int v77 = (unint64_t *)(v76 + 16 * v71), v77 == (unint64_t *)v68[11]))
    {
LABEL_109:
      float v114 = v792;
      double v115 = v791;
      uint64_t v116 = v792 - v791;
      if (v794 >= v116 + 1)
      {
LABEL_127:
        *float v114 = v65;
        ++v792;
        if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1) {
          dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_39646);
        }
        unint64_t v133 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_INFO))
        {
          int v134 = *(_DWORD *)(*v64 + 8);
          uint64_t v135 = "ARFeatureShadow";
          if (!*(unsigned char *)(*v64 + 12)) {
            uint64_t v135 = "ARArrival";
          }
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v134;
          *(_WORD *)&buf[8] = 2080;
          *(void *)&buf[10] = v135;
          _os_log_impl(&dword_1A1780000, v133, OS_LOG_TYPE_INFO, "Dropping canceled mesh request (id:%d type:%s)", buf, 0x12u);
        }
        goto LABEL_60;
      }
      double v117 = v793;
      unint64_t v118 = (1 << -(char)__clz(v794 + 1));
      if (v794 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v118 = 1;
      }
      if (v118 <= v116 + 1) {
        uint64_t v119 = v116 + 1;
      }
      else {
        uint64_t v119 = v118;
      }
      float64x2_t v120 = malloc_type_malloc(8 * v119, 0x100004000313F17uLL);
      double v121 = (unint64_t *)v120;
      float64x2_t v123 = v792;
      double v122 = v791;
      if (v791 != v792)
      {
        unint64_t v124 = (char *)v792 - (char *)v791 - 8;
        if (v124 < 0x18)
        {
          float64x2_t v125 = v120;
        }
        else
        {
          float64x2_t v125 = v120;
          if ((unint64_t)((char *)v120 - (char *)v791) >= 0x20)
          {
            uint64_t v126 = (v124 >> 3) + 1;
            uint64_t v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
            float64x2_t v125 = (void *)((char *)v120 + v127);
            double v128 = (long long *)(v791 + 2);
            unint64_t v129 = v120 + 1;
            uint64_t v130 = v126 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v131 = *v128;
              *(v129 - 1) = *(v128 - 1);
              _OWORD *v129 = v131;
              v128 += 2;
              v129 += 2;
              v130 -= 4;
            }
            while (v130);
            if (v126 == (v126 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_124;
            }
            double v122 = (unint64_t *)((char *)v122 + v127);
          }
        }
        do
        {
          uint64_t v132 = *v122++;
          *v125++ = v132;
        }
        while (v122 != v123);
      }
LABEL_124:
      if (v115 != v117) {
        free(v791);
      }
      float v114 = &v121[v116];
      char v791 = v121;
      unint64_t v792 = v114;
      unint64_t v794 = v119;
      goto LABEL_127;
    }
    BOOL v78 = v792;
    int v79 = v791;
    unint64_t v80 = v792 - v791 + 1;
    if (v794 >= v80)
    {
LABEL_90:
      *BOOL v78 = *v77;
      double v96 = v791;
      float64x2_t v97 = v792 + 1;
      unint64_t v792 = v97;
      uint64_t v98 = v97 - v791;
      if (v794 >= v98 + 1)
      {
LABEL_108:
        *float64x2_t v97 = *(void *)(v76 + 16 * v71 + 8);
        ++v792;
        goto LABEL_109;
      }
      int8x16_t v786 = v793;
      unint64_t v99 = (1 << -(char)__clz(v794 + 1));
      if (v794 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v99 = 1;
      }
      if (v99 <= v98 + 1) {
        uint64_t v100 = v98 + 1;
      }
      else {
        uint64_t v100 = v99;
      }
      double v101 = malloc_type_malloc(8 * v100, 0x100004000313F17uLL);
      double v102 = (unint64_t *)v101;
      double v104 = v792;
      double v103 = v791;
      if (v791 != v792)
      {
        unint64_t v105 = (char *)v792 - (char *)v791 - 8;
        if (v105 < 0x18)
        {
          unint64_t v106 = v101;
        }
        else
        {
          unint64_t v106 = v101;
          if ((unint64_t)((char *)v101 - (char *)v791) >= 0x20)
          {
            uint64_t v107 = (v105 >> 3) + 1;
            uint64_t v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v106 = (void *)((char *)v101 + v108);
            double v109 = (long long *)(v791 + 2);
            double v110 = v101 + 1;
            uint64_t v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v112 = *v109;
              *(v110 - 1) = *(v109 - 1);
              *double v110 = v112;
              v109 += 2;
              v110 += 2;
              v111 -= 4;
            }
            while (v111);
            if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_105;
            }
            double v103 = (unint64_t *)((char *)v103 + v108);
          }
        }
        do
        {
          uint64_t v113 = *v103++;
          *v106++ = v113;
        }
        while (v103 != v104);
      }
LABEL_105:
      if (v96 != v786) {
        free(v791);
      }
      float64x2_t v97 = &v102[v98];
      char v791 = v102;
      unint64_t v792 = v97;
      unint64_t v794 = v100;
      goto LABEL_108;
    }
    uint16x8_t v783 = v793;
    uint64_t v785 = v792 - v791;
    unint64_t v81 = (1 << -(char)__clz(v794 + 1));
    if (v794 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v81 = 1;
    }
    if (v81 <= v80) {
      uint64_t v82 = v792 - v791 + 1;
    }
    else {
      uint64_t v82 = v81;
    }
    unsigned int v83 = malloc_type_malloc(8 * v82, 0x100004000313F17uLL);
    uint64_t v84 = (unint64_t *)v83;
    int32x4_t v86 = v792;
    int v85 = v791;
    if (v791 != v792)
    {
      unint64_t v87 = (char *)v792 - (char *)v791 - 8;
      if (v87 < 0x18)
      {
        uint64_t v88 = v83;
      }
      else
      {
        uint64_t v88 = v83;
        if ((unint64_t)((char *)v83 - (char *)v791) >= 0x20)
        {
          uint64_t v89 = (v87 >> 3) + 1;
          uint64_t v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v88 = (void *)((char *)v83 + v90);
          unsigned int v91 = (long long *)(v791 + 2);
          BOOL v92 = v83 + 1;
          uint64_t v93 = v89 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v94 = *v91;
            *(v92 - 1) = *(v91 - 1);
            _OWORD *v92 = v94;
            v91 += 2;
            v92 += 2;
            v93 -= 4;
          }
          while (v93);
          if (v89 == (v89 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_87;
          }
          int v85 = (unint64_t *)((char *)v85 + v90);
        }
      }
      do
      {
        uint64_t v95 = *v85++;
        *v88++ = v95;
      }
      while (v85 != v86);
    }
LABEL_87:
    if (v79 != v783) {
      free(v791);
    }
    BOOL v78 = &v84[v785];
    char v791 = v84;
    unint64_t v792 = v78;
    unint64_t v794 = v82;
    goto LABEL_90;
  }
LABEL_133:
  uint64_t v136 = *(int8x8_t **)(a1 + 120);
  uint64_t v137 = *(unint64_t **)v802;
  unint64_t v138 = *(unint64_t **)&v802[8];
  if (*(void *)v802 != *(void *)&v802[8])
  {
    do
    {
      unint64_t v139 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(v136);
      gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::remove(v139, *v137++);
    }
    while (v137 != v138);
    uint64_t v136 = *(int8x8_t **)(a1 + 120);
    uint64_t v140 = *(unint64_t **)v802;
    float64x2_t v141 = *(unint64_t **)&v802[8];
    if (*(void *)v802 != *(void *)&v802[8])
    {
      do
      {
        unint64_t v142 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>(v136);
        gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>::remove(v142, *v140++);
      }
      while (v140 != v141);
      uint64_t v136 = *(int8x8_t **)(a1 + 120);
      unint64_t v143 = *(unint64_t **)v802;
      uint64_t v144 = *(unint64_t **)&v802[8];
      if (*(void *)v802 != *(void *)&v802[8])
      {
        do
        {
          unint64_t v145 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>(v136);
          gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>::remove(v145, *v143++);
        }
        while (v143 != v144);
        uint64_t v136 = *(int8x8_t **)(a1 + 120);
      }
    }
  }
  unint64_t v146 = v791;
  if (v791 != v792)
  {
    do
    {
      unint64_t v147 = *v146++;
      gdc::Registry::destroy((uint64_t)v136, v147);
    }
    while (v146 != v792);
    unint64_t v146 = v791;
  }
  if (v146 != v793) {
    free(v146);
  }
  if (*(void *)v802 != *(void *)&v802[16]) {
    free(*(void **)v802);
  }
  *(void *)int64x2_t v802 = (char *)&v803 + 8;
  *(void *)&v802[8] = (char *)&v803 + 8;
  *(void *)&v802[16] = (char *)&v803 + 8;
  *(void *)&long long v803 = 4;
  char v791 = (unint64_t *)v795;
  unint64_t v792 = (unint64_t *)v795;
  uint64_t v793 = (unint64_t *)v795;
  unint64_t v794 = 4;
  unint64_t v148 = *(int8x8_t **)(a1 + 120);
  unint64_t v149 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::IsFailed>(v148);
  uint64_t v150 = gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(v148);
  uint64_t v151 = (void *)v150;
  uint64_t v152 = v150 + 32;
  uint64_t v154 = v149[7];
  uint64_t v153 = v149[8];
  if (*(void *)(v150 + 64) - *(void *)(v150 + 56) >= (unint64_t)(v153 - v154)) {
    long long v155 = v149 + 4;
  }
  else {
    long long v155 = (void *)(v150 + 32);
  }
  if (v149 + 4 == v155)
  {
    *(void *)buf = &v791;
    *(void *)&buf[8] = a1;
    while (v154 != v153)
    {
      unint64_t v561 = *(unsigned int *)(v154 + 4);
      uint64_t v562 = v151[4];
      unint64_t v563 = (v151[5] - v562) >> 3;
      if (v561 >> 7 < v563)
      {
        uint64_t v564 = *(void *)(v562 + 8 * (v561 >> 7));
        if (v564)
        {
          unint64_t v565 = *(unsigned __int16 *)(v564 + 2 * (v561 & 0x7F));
          uint64_t v567 = v151[7];
          uint64_t v566 = v151[8];
          unint64_t v568 = (v566 - v567) >> 3;
          if (v568 > v565)
          {
            uint64_t v569 = v567 + 8 * v565;
            if (v569 != v566 && *(_DWORD *)(v569 + 4) == v561)
            {
              unint64_t v571 = *(void *)v154;
              unint64_t v572 = *(void *)v154 >> 39;
              if (v572 < v563
                && (uint64_t v573 = *(void *)(v562 + 8 * v572)) != 0
                && (unint64_t v574 = *(unsigned __int16 *)(v573 + 2 * (HIDWORD(v571) & 0x7F)), v568 > v574)
                && ((uint64_t v575 = v567 + 8 * v574, v575 != v566)
                  ? (BOOL v576 = *(_DWORD *)(v575 + 4) == HIDWORD(v571))
                  : (BOOL v576 = 0),
                    v576))
              {
                uint64_t v560 = (uint64_t *)(v151[10] + 16 * v574);
              }
              else
              {
                uint64_t v560 = (uint64_t *)v151[11];
              }
              md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_0::operator()((uint64_t **)buf, v571, *v560);
            }
          }
        }
      }
      v154 += 8;
    }
  }
  if ((void *)v152 == v155)
  {
    *(void *)buf = &v791;
    *(void *)&buf[8] = a1;
    uint64_t v577 = v151[7];
    uint64_t v578 = v151[8];
    if (v577 != v578)
    {
      unint64_t v579 = (uint64_t *)v151[10];
      do
      {
        unint64_t v580 = *(unsigned int *)(v577 + 4);
        uint64_t v581 = v149[4];
        if (v580 >> 7 < (v149[5] - v581) >> 3)
        {
          uint64_t v582 = *(void *)(v581 + 8 * (v580 >> 7));
          if (v582)
          {
            unint64_t v583 = *(unsigned __int16 *)(v582 + 2 * (v580 & 0x7F));
            uint64_t v585 = v149[7];
            uint64_t v584 = v149[8];
            if (v583 < (v584 - v585) >> 3)
            {
              uint64_t v586 = v585 + 8 * v583;
              if (v586 != v584 && *(_DWORD *)(v586 + 4) == v580) {
                md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_0::operator()((uint64_t **)buf, *(void *)v577, *v579);
              }
            }
          }
        }
        v579 += 2;
        v577 += 8;
      }
      while (v577 != v578);
    }
  }
  long long v156 = *(int8x8_t **)(a1 + 120);
  float64x2_t v158 = v792;
  BOOL v157 = v791;
  if (v791 != v792)
  {
    do
    {
      unint64_t v159 = *v157++;
      gdc::Registry::destroy((uint64_t)v156, v159);
    }
    while (v157 != v158);
    BOOL v157 = v791;
    long long v156 = *(int8x8_t **)(a1 + 120);
  }
  unint64_t v792 = v157;
  float64x2_t v160 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::IsCompleted>(v156);
  float64x2_t v161 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(v156);
  uint64_t v162 = gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(v156);
  float32x4_t v163 = (void *)v162;
  uint64_t v164 = v162 + 32;
  uint64_t v166 = v160[7];
  uint64_t v165 = v160[8];
  if (v161[8] - v161[7] >= (unint64_t)(v165 - v166)) {
    uint64_t v167 = v160 + 4;
  }
  else {
    uint64_t v167 = v161 + 4;
  }
  if (*(void *)(v162 + 64) - *(void *)(v162 + 56) >= v167[4] - v167[3]) {
    BOOL v168 = v167;
  }
  else {
    BOOL v168 = (void *)(v162 + 32);
  }
  if (v160 + 4 == v168)
  {
    *(void *)buf = a1;
    *(void *)&buf[8] = v802;
    *(void *)&buf[16] = &v791;
    while (1)
    {
      if (v166 == v165) {
        goto LABEL_162;
      }
      unint64_t v605 = *(unsigned int *)(v166 + 4);
      unint64_t v606 = v605 >> 7;
      uint64_t v607 = v161[4];
      unint64_t v608 = (v161[5] - v607) >> 3;
      if (v605 >> 7 < v608)
      {
        uint64_t v609 = *(void *)(v607 + 8 * v606);
        if (v609)
        {
          unint64_t v610 = *(unsigned __int16 *)(v609 + 2 * (v605 & 0x7F));
          uint64_t v612 = v161[7];
          uint64_t v611 = v161[8];
          unint64_t v613 = (v611 - v612) >> 3;
          if (v613 > v610)
          {
            uint64_t v614 = v612 + 8 * v610;
            if (v614 != v611 && *(_DWORD *)(v614 + 4) == v605)
            {
              uint64_t v616 = v163[4];
              unint64_t v617 = (v163[5] - v616) >> 3;
              if (v606 < v617)
              {
                uint64_t v618 = *(void *)(v616 + 8 * v606);
                if (v618)
                {
                  unint64_t v619 = *(unsigned __int16 *)(v618 + 2 * (v605 & 0x7F));
                  uint64_t v621 = v163[7];
                  uint64_t v620 = v163[8];
                  unint64_t v622 = (v620 - v621) >> 3;
                  if (v622 > v619)
                  {
                    uint64_t v623 = v621 + 8 * v619;
                    if (v623 != v620 && *(_DWORD *)(v623 + 4) == v605) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_636:
      v166 += 8;
    }
    unint64_t v625 = *(void *)v166;
    uint64_t v626 = HIDWORD(*(void *)v166);
    unint64_t v627 = *(void *)v166 >> 39;
    if (v627 < v608
      && (uint64_t v628 = *(void *)(v607 + 8 * v627)) != 0
      && (unint64_t v629 = *(unsigned __int16 *)(v628 + 2 * (HIDWORD(v625) & 0x7F)), v613 > v629)
      && ((uint64_t v630 = v612 + 8 * v629, v630 != v611) ? (v631 = *(_DWORD *)(v630 + 4) == v626) : (v631 = 0), v631))
    {
      unint64_t v632 = (uint64_t *)(v161[10] + 16 * v629);
      if (v627 >= v617) {
        goto LABEL_634;
      }
    }
    else
    {
      unint64_t v632 = (uint64_t *)v161[11];
      if (v627 >= v617) {
        goto LABEL_634;
      }
    }
    uint64_t v633 = *(void *)(v616 + 8 * v627);
    if (v633)
    {
      unint64_t v634 = *(unsigned __int16 *)(v633 + 2 * (HIDWORD(v625) & 0x7F));
      if (v622 > v634)
      {
        uint64_t v635 = v621 + 8 * v634;
        if (v635 != v620 && *(_DWORD *)(v635 + 4) == v626)
        {
          v604 = (uint64_t *)(v163[10] + 16 * v634);
          goto LABEL_635;
        }
      }
    }
LABEL_634:
    v604 = (uint64_t *)v163[11];
LABEL_635:
    md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_1::operator()(buf, v625, *v632, v604);
    goto LABEL_636;
  }
LABEL_162:
  if (v161 + 4 == v168)
  {
    *(void *)buf = a1;
    *(void *)&buf[8] = v802;
    *(void *)&buf[16] = &v791;
    uint64_t v588 = v161[7];
    uint64_t v589 = v161[8];
    if (v588 != v589)
    {
      unint64_t v590 = (uint64_t *)v161[10];
      do
      {
        unint64_t v638 = *(unsigned int *)(v588 + 4);
        unint64_t v639 = v638 >> 7;
        uint64_t v640 = v160[4];
        if (v638 >> 7 < (v160[5] - v640) >> 3)
        {
          uint64_t v641 = *(void *)(v640 + 8 * v639);
          if (v641)
          {
            unint64_t v642 = *(unsigned __int16 *)(v641 + 2 * (v638 & 0x7F));
            uint64_t v644 = v160[7];
            uint64_t v643 = v160[8];
            if (v642 < (v643 - v644) >> 3)
            {
              uint64_t v645 = v644 + 8 * v642;
              if (v645 != v643 && *(_DWORD *)(v645 + 4) == v638)
              {
                uint64_t v647 = v163[4];
                unint64_t v648 = (v163[5] - v647) >> 3;
                if (v639 < v648)
                {
                  uint64_t v649 = *(void *)(v647 + 8 * v639);
                  if (v649)
                  {
                    unint64_t v650 = *(unsigned __int16 *)(v649 + 2 * (v638 & 0x7F));
                    uint64_t v652 = v163[7];
                    uint64_t v651 = v163[8];
                    unint64_t v653 = (v651 - v652) >> 3;
                    if (v653 > v650)
                    {
                      uint64_t v654 = v652 + 8 * v650;
                      if (v654 != v651 && *(_DWORD *)(v654 + 4) == v638)
                      {
                        unint64_t v656 = *(void *)v588;
                        unint64_t v657 = *(void *)v588 >> 39;
                        if (v657 < v648
                          && (uint64_t v658 = *(void *)(v647 + 8 * v657)) != 0
                          && (unint64_t v659 = *(unsigned __int16 *)(v658 + 2 * (HIDWORD(v656) & 0x7F)), v653 > v659)
                          && ((uint64_t v660 = v652 + 8 * v659, v660 != v651)
                            ? (BOOL v661 = *(_DWORD *)(v660 + 4) == HIDWORD(v656))
                            : (BOOL v661 = 0),
                              v661))
                        {
                          unint64_t v637 = (uint64_t *)(v163[10] + 16 * v659);
                        }
                        else
                        {
                          unint64_t v637 = (uint64_t *)v163[11];
                        }
                        md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_1::operator()(buf, v656, *v590, v637);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v590 += 2;
        v588 += 8;
      }
      while (v588 != v589);
    }
  }
  if ((void *)v164 == v168)
  {
    *(void *)buf = a1;
    *(void *)&buf[8] = v802;
    *(void *)&buf[16] = &v791;
    uint64_t v591 = v163[7];
    uint64_t v592 = v163[8];
    if (v591 != v592)
    {
      unint64_t v593 = (uint64_t *)v163[10];
      do
      {
        unint64_t v663 = *(unsigned int *)(v591 + 4);
        unint64_t v664 = v663 >> 7;
        uint64_t v665 = v160[4];
        if (v663 >> 7 < (v160[5] - v665) >> 3)
        {
          uint64_t v666 = *(void *)(v665 + 8 * v664);
          if (v666)
          {
            unint64_t v667 = *(unsigned __int16 *)(v666 + 2 * (v663 & 0x7F));
            uint64_t v669 = v160[7];
            uint64_t v668 = v160[8];
            if (v667 < (v668 - v669) >> 3)
            {
              uint64_t v670 = v669 + 8 * v667;
              if (v670 != v668 && *(_DWORD *)(v670 + 4) == v663)
              {
                uint64_t v672 = v161[4];
                unint64_t v673 = (v161[5] - v672) >> 3;
                if (v664 < v673)
                {
                  uint64_t v674 = *(void *)(v672 + 8 * v664);
                  if (v674)
                  {
                    unint64_t v675 = *(unsigned __int16 *)(v674 + 2 * (v663 & 0x7F));
                    uint64_t v677 = v161[7];
                    uint64_t v676 = v161[8];
                    unint64_t v678 = (v676 - v677) >> 3;
                    if (v678 > v675)
                    {
                      uint64_t v679 = v677 + 8 * v675;
                      if (v679 != v676 && *(_DWORD *)(v679 + 4) == v663)
                      {
                        unint64_t v681 = *(void *)v591;
                        unint64_t v682 = *(void *)v591 >> 39;
                        if (v682 < v673
                          && (uint64_t v683 = *(void *)(v672 + 8 * v682)) != 0
                          && (unint64_t v684 = *(unsigned __int16 *)(v683 + 2 * (HIDWORD(v681) & 0x7F)), v678 > v684)
                          && ((uint64_t v685 = v677 + 8 * v684, v685 != v676)
                            ? (BOOL v686 = *(_DWORD *)(v685 + 4) == HIDWORD(v681))
                            : (BOOL v686 = 0),
                              v686))
                        {
                          BOOL v662 = (uint64_t *)(v161[10] + 16 * v684);
                        }
                        else
                        {
                          BOOL v662 = (uint64_t *)v161[11];
                        }
                        md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_1::operator()(buf, v681, *v662, v593);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v593 += 2;
        v591 += 8;
      }
      while (v591 != v592);
    }
  }
  float64x2_t v169 = *(int8x8_t **)(a1 + 120);
  float v170 = *(unint64_t **)v802;
  uint64_t v171 = *(unint64_t **)&v802[8];
  if (*(void *)v802 != *(void *)&v802[8])
  {
    do
    {
      unint64_t v172 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(v169);
      gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>::remove(v172, *v170++);
    }
    while (v170 != v171);
    float64x2_t v169 = *(int8x8_t **)(a1 + 120);
    unint64_t v173 = *(unint64_t **)v802;
    long long v174 = *(unint64_t **)&v802[8];
    if (*(void *)v802 != *(void *)&v802[8])
    {
      do
      {
        uint64_t v175 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>(v169);
        gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::remove(v175, *v173++);
      }
      while (v173 != v174);
      float64x2_t v169 = *(int8x8_t **)(a1 + 120);
    }
  }
  float64x2_t v176 = v792;
  long long v177 = v791;
  if (v791 != v792)
  {
    do
    {
      unint64_t v178 = *v177++;
      gdc::Registry::destroy((uint64_t)v169, v178);
    }
    while (v177 != v176);
    long long v177 = v791;
  }
  if (v177 != v793) {
    free(v177);
  }
  if (*(void *)v802 != *(void *)&v802[16]) {
    free(*(void **)v802);
  }
  uint64_t v179 = 0;
  unint64_t v180 = 0xCBF29CE484222325;
  *(void *)int64x2_t v802 = (char *)&v803 + 8;
  *(void *)&v802[8] = (char *)&v803 + 8;
  *(void *)&v802[16] = (char *)&v803 + 8;
  *(void *)&long long v803 = 4;
  char v791 = (unint64_t *)v795;
  unint64_t v792 = (unint64_t *)v795;
  uint64_t v793 = (unint64_t *)v795;
  unint64_t v794 = 4;
  unint64_t v181 = *(int8x8_t **)(a1 + 120);
  do
    unint64_t v180 = 0x100000001B3 * (v180 ^ aStdStringViewG_777[v179++ + 38]);
  while (v179 != 122);
  float64_t v182 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)4>>(*(int8x8_t **)(a1 + 120), v180);
  float64_t v183 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>(v181);
  uint64_t v184 = gdc::Registry::storage<arComponents::Boundary>(v181);
  int v185 = (void *)v184;
  uint64_t v186 = v184 + 32;
  uint64_t v188 = v182[7];
  uint64_t v187 = v182[8];
  if (v183[8] - v183[7] >= (unint64_t)(v187 - v188)) {
    float64_t v189 = v182 + 4;
  }
  else {
    float64_t v189 = v183 + 4;
  }
  if (*(void *)(v184 + 64) - *(void *)(v184 + 56) >= v189[4] - v189[3]) {
    long long v190 = v189;
  }
  else {
    long long v190 = (void *)(v184 + 32);
  }
  if (v182 + 4 == v190)
  {
    *(void *)buf = a1;
    *(void *)&buf[8] = v802;
    for (*(void *)&buf[16] = &v791; v188 != v187; v188 += 8)
    {
      unint64_t v688 = *(unsigned int *)(v188 + 4);
      unint64_t v689 = v688 >> 7;
      uint64_t v690 = v183[4];
      unint64_t v691 = (v183[5] - v690) >> 3;
      if (v688 >> 7 >= v691) {
        continue;
      }
      uint64_t v692 = *(void *)(v690 + 8 * v689);
      if (!v692) {
        continue;
      }
      unint64_t v693 = *(unsigned __int16 *)(v692 + 2 * (v688 & 0x7F));
      uint64_t v695 = v183[7];
      uint64_t v694 = v183[8];
      unint64_t v696 = (v694 - v695) >> 3;
      if (v696 <= v693) {
        continue;
      }
      uint64_t v697 = v695 + 8 * v693;
      if (v697 == v694 || *(_DWORD *)(v697 + 4) != v688) {
        continue;
      }
      uint64_t v699 = v185[4];
      unint64_t v700 = (v185[5] - v699) >> 3;
      if (v689 >= v700) {
        continue;
      }
      uint64_t v701 = *(void *)(v699 + 8 * v689);
      if (!v701) {
        continue;
      }
      unint64_t v702 = *(unsigned __int16 *)(v701 + 2 * (v688 & 0x7F));
      uint64_t v704 = v185[7];
      uint64_t v703 = v185[8];
      unint64_t v705 = (v703 - v704) >> 3;
      if (v705 <= v702) {
        continue;
      }
      uint64_t v706 = v704 + 8 * v702;
      if (v706 == v703 || *(_DWORD *)(v706 + 4) != v688) {
        continue;
      }
      unint64_t v708 = *(void *)v188;
      uint64_t v709 = HIDWORD(*(void *)v188);
      unint64_t v710 = *(void *)v188 >> 39;
      if (v710 < v691
        && (uint64_t v711 = *(void *)(v690 + 8 * v710)) != 0
        && (unint64_t v712 = *(unsigned __int16 *)(v711 + 2 * (HIDWORD(v708) & 0x7F)), v696 > v712)
        && ((v713 = v695 + 8 * v712, v713 != v694) ? (BOOL v714 = *(_DWORD *)(v713 + 4) == v709) : (BOOL v714 = 0), v714))
      {
        int8x16_t v715 = (uint64_t *)(v183[10] + 16 * v712);
        if (v710 >= v700) {
          goto LABEL_728;
        }
      }
      else
      {
        int8x16_t v715 = (uint64_t *)v183[11];
        if (v710 >= v700) {
          goto LABEL_728;
        }
      }
      uint64_t v716 = *(void *)(v699 + 8 * v710);
      if (v716)
      {
        unint64_t v717 = *(unsigned __int16 *)(v716 + 2 * (HIDWORD(v708) & 0x7F));
        if (v705 > v717)
        {
          uint64_t v718 = v704 + 8 * v717;
          if (v718 != v703 && *(_DWORD *)(v718 + 4) == v709)
          {
            uint64_t v687 = v185[10] + 24 * v717;
            goto LABEL_729;
          }
        }
      }
LABEL_728:
      uint64_t v687 = v185[11];
LABEL_729:
      md::LabelsExternalMeshLogic::processPendingShadowRequests(void)::$_0::operator()(buf, v708, v715, v687);
    }
  }
  if (v183 + 4 == v190)
  {
    *(void *)buf = a1;
    *(void *)&buf[8] = v802;
    *(void *)&buf[16] = &v791;
    uint64_t v594 = v183[7];
    uint64_t v595 = v183[8];
    if (v594 != v595)
    {
      v596 = (uint64_t *)v183[10];
      do
      {
        unint64_t v721 = *(unsigned int *)(v594 + 4);
        unint64_t v722 = v721 >> 7;
        uint64_t v723 = v182[4];
        if (v721 >> 7 < (v182[5] - v723) >> 3)
        {
          uint64_t v724 = *(void *)(v723 + 8 * v722);
          if (v724)
          {
            unint64_t v725 = *(unsigned __int16 *)(v724 + 2 * (v721 & 0x7F));
            uint64_t v727 = v182[7];
            uint64_t v726 = v182[8];
            if (v725 < (v726 - v727) >> 3)
            {
              uint64_t v728 = v727 + 8 * v725;
              if (v728 != v726 && *(_DWORD *)(v728 + 4) == v721)
              {
                uint64_t v730 = v185[4];
                unint64_t v731 = (v185[5] - v730) >> 3;
                if (v722 < v731)
                {
                  uint64_t v732 = *(void *)(v730 + 8 * v722);
                  if (v732)
                  {
                    unint64_t v733 = *(unsigned __int16 *)(v732 + 2 * (v721 & 0x7F));
                    uint64_t v735 = v185[7];
                    uint64_t v734 = v185[8];
                    unint64_t v736 = (v734 - v735) >> 3;
                    if (v736 > v733)
                    {
                      uint64_t v737 = v735 + 8 * v733;
                      if (v737 != v734 && *(_DWORD *)(v737 + 4) == v721)
                      {
                        unint64_t v739 = *(void *)v594;
                        unint64_t v740 = *(void *)v594 >> 39;
                        if (v740 < v731
                          && (uint64_t v741 = *(void *)(v730 + 8 * v740)) != 0
                          && (unint64_t v742 = *(unsigned __int16 *)(v741 + 2 * (HIDWORD(v739) & 0x7F)), v736 > v742)
                          && ((uint64_t v743 = v735 + 8 * v742, v743 != v734)
                            ? (BOOL v744 = *(_DWORD *)(v743 + 4) == HIDWORD(v739))
                            : (BOOL v744 = 0),
                              v744))
                        {
                          uint64_t v720 = v185[10] + 24 * v742;
                        }
                        else
                        {
                          uint64_t v720 = v185[11];
                        }
                        md::LabelsExternalMeshLogic::processPendingShadowRequests(void)::$_0::operator()(buf, v739, v596, v720);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v596 += 2;
        v594 += 8;
      }
      while (v594 != v595);
    }
  }
  if ((void *)v186 == v190)
  {
    *(void *)buf = a1;
    *(void *)&buf[8] = v802;
    *(void *)&buf[16] = &v791;
    uint64_t v597 = v185[7];
    uint64_t v598 = v185[8];
    if (v597 != v598)
    {
      uint64_t v599 = v185[10];
      do
      {
        unint64_t v746 = *(unsigned int *)(v597 + 4);
        unint64_t v747 = v746 >> 7;
        uint64_t v748 = v182[4];
        if (v746 >> 7 < (v182[5] - v748) >> 3)
        {
          uint64_t v749 = *(void *)(v748 + 8 * v747);
          if (v749)
          {
            unint64_t v750 = *(unsigned __int16 *)(v749 + 2 * (v746 & 0x7F));
            uint64_t v752 = v182[7];
            uint64_t v751 = v182[8];
            if (v750 < (v751 - v752) >> 3)
            {
              uint64_t v753 = v752 + 8 * v750;
              if (v753 != v751 && *(_DWORD *)(v753 + 4) == v746)
              {
                uint64_t v755 = v183[4];
                unint64_t v756 = (v183[5] - v755) >> 3;
                if (v747 < v756)
                {
                  uint64_t v757 = *(void *)(v755 + 8 * v747);
                  if (v757)
                  {
                    unint64_t v758 = *(unsigned __int16 *)(v757 + 2 * (v746 & 0x7F));
                    uint64_t v760 = v183[7];
                    uint64_t v759 = v183[8];
                    unint64_t v761 = (v759 - v760) >> 3;
                    if (v761 > v758)
                    {
                      uint64_t v762 = v760 + 8 * v758;
                      if (v762 != v759 && *(_DWORD *)(v762 + 4) == v746)
                      {
                        unint64_t v764 = *(void *)v597;
                        unint64_t v765 = *(void *)v597 >> 39;
                        if (v765 < v756
                          && (uint64_t v766 = *(void *)(v755 + 8 * v765)) != 0
                          && (unint64_t v767 = *(unsigned __int16 *)(v766 + 2 * (HIDWORD(v764) & 0x7F)), v761 > v767)
                          && ((uint64_t v768 = v760 + 8 * v767, v768 != v759)
                            ? (BOOL v769 = *(_DWORD *)(v768 + 4) == HIDWORD(v764))
                            : (BOOL v769 = 0),
                              v769))
                        {
                          uint16x8_t v745 = (uint64_t *)(v183[10] + 16 * v767);
                        }
                        else
                        {
                          uint16x8_t v745 = (uint64_t *)v183[11];
                        }
                        md::LabelsExternalMeshLogic::processPendingShadowRequests(void)::$_0::operator()(buf, v764, v745, v599);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v599 += 24;
        v597 += 8;
      }
      while (v597 != v598);
    }
  }
  unint64_t v191 = *(unint64_t **)v802;
  double v192 = *(unint64_t **)&v802[8];
  if (*(void *)v802 != *(void *)&v802[8])
  {
    do
    {
      unint64_t v193 = *v191;
      double v194 = *(int8x8_t **)(a1 + 120);
      double v195 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v194);
      unint64_t v196 = v193 >> 39;
      uint64_t v197 = v195[4];
      if (v193 >> 39 < (v195[5] - v197) >> 3)
      {
        uint64_t v198 = *(void *)(v197 + 8 * v196);
        if (v198)
        {
          uint64_t v199 = HIDWORD(v193) & 0x7F;
          unint64_t v200 = *(unsigned __int16 *)(v198 + 2 * v199);
          uint64_t v202 = v195[7];
          uint64_t v201 = v195[8];
          if (v200 < (v201 - v202) >> 3)
          {
            uint64_t v203 = v202 + 8 * v200;
            if (v203 != v201 && *(_DWORD *)(v203 + 4) == HIDWORD(v193))
            {
              uint64_t v205 = v195[10];
              float v206 = (unsigned char *)(v205 + v200);
              if (v205 + v200 != v195[11] && v205 != 0)
              {
                __int32 v208 = (void *)gdc::Registry::storage<arComponents::XYPlaneMeshRequestData>(v194);
                gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::remove(v208, v193);
                gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::_removeStatusTag(v194, v193, *v206);
                uint64_t v209 = 0;
                unsigned char *v206 = 0;
                unint64_t v210 = 0xCBF29CE484222325;
                do
                  unint64_t v210 = 0x100000001B3 * (v210 ^ aStdStringViewG_787[v209++ + 38]);
                while (v209 != 116);
                float v211 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v194, v210);
                uint64_t v212 = v211[4];
                if (v196 < (v211[5] - v212) >> 3)
                {
                  uint64_t v213 = *(void *)(v212 + 8 * v196);
                  if (v213)
                  {
                    unint64_t v214 = *(unsigned __int16 *)(v213 + 2 * v199);
                    uint64_t v216 = v211[7];
                    uint64_t v215 = v211[8];
                    if (v214 < (v215 - v216) >> 3)
                    {
                      uint64_t v217 = v216 + 8 * v214;
                      if (v217 != v215 && *(_DWORD *)(v217 + 4) == HIDWORD(v193))
                      {
                        uint64_t v219 = v211[10];
                        int v220 = (unint64_t **)(v219 + 24 * v214);
                        if (v220 != (unint64_t **)v211[11] && v219 != 0)
                        {
                          float v223 = *v220;
                          float v222 = v220[1];
                          if (*v220 != v222)
                          {
                            do
                            {
                              uint64_t v224 = 0;
                              unint64_t v225 = *v223;
                              unint64_t v226 = 0xCBF29CE484222325;
                              do
                                unint64_t v226 = 0x100000001B3 * (v226 ^ aStdStringViewG_788[v224++ + 38]);
                              while (v224 != 112);
                              float v227 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v194, v226);
                              uint64_t v228 = v227[4];
                              if (v225 >> 39 < (v227[5] - v228) >> 3
                                && (uint64_t v229 = *(void *)(v228 + 8 * (v225 >> 39))) != 0
                                && (unint64_t v230 = *(unsigned __int16 *)(v229 + 2 * (HIDWORD(v225) & 0x7F)),
                                    uint64_t v232 = v227[7],
                                    uint64_t v231 = v227[8],
                                    v230 < (v231 - v232) >> 3)
                                && ((uint64_t v233 = v232 + 8 * v230, v233 != v231)
                                  ? (BOOL v234 = *(_DWORD *)(v233 + 4) == HIDWORD(v225))
                                  : (BOOL v234 = 0),
                                    v234))
                              {
                                uint64_t v235 = v227[11];
                                uint64_t v236 = v227[10] + 12 * v230;
                              }
                              else
                              {
                                uint64_t v235 = v227[11];
                                uint64_t v236 = v235;
                              }
                              if (v236 == v235) {
                                uint64_t v236 = 0;
                              }
                              gdc::component::DataRequestObserver::updateStatusCounts(v194, v225, v193, *(unsigned __int8 *)(v236 + 8), 0);
                              uint64_t v237 = 0;
                              unint64_t v238 = 0xCBF29CE484222325;
                              do
                                unint64_t v238 = 0x100000001B3 * (v238 ^ aStdStringViewG_788[v237++ + 38]);
                              while (v237 != 112);
                              uint64_t v239 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v194, v238);
                              gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::remove(v239, v225);
                              ++v223;
                            }
                            while (v223 != v222);
                          }
                          uint64_t v240 = 0;
                          unint64_t v241 = 0xCBF29CE484222325;
                          do
                            unint64_t v241 = 0x100000001B3 * (v241 ^ aStdStringViewG_787[v240++ + 38]);
                          while (v240 != 116);
                          float v242 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(v194, v241);
                          unint64_t v797 = v193;
                          if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v242 + 4, HIDWORD(v193)))
                          {
                            float v243 = (void *)v242[28];
                            if (v243)
                            {
                              uint64_t v244 = v242[31];
                              do
                              {
                                *(void *)buf = &v797;
                                *(void *)&buf[8] = 1;
                                *(void *)&long long v790 = v244;
                                uint64_t v245 = v243[6];
                                if (!v245) {
                                  goto LABEL_823;
                                }
                                (*(void (**)(uint64_t, long long *, uint8_t *))(*(void *)v245 + 48))(v245, &v790, buf);
                                float v243 = (void *)*v243;
                              }
                              while (v243);
                            }
                          }
                        }
                      }
                    }
                  }
                }
                float v246 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(v194);
                gdc::ComponentStorageWrapper<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>::remove(v246, v193);
              }
            }
          }
        }
      }
      ++v191;
    }
    while (v191 != v192);
    int v247 = *(unint64_t **)v802;
    float v248 = *(unint64_t **)&v802[8];
    float v249 = *(int8x8_t **)(a1 + 120);
    if (*(void *)v802 == *(void *)&v802[8]) {
      goto LABEL_247;
    }
    do
    {
      int v250 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>(v249);
      gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>::remove(v250, *v247++);
    }
    while (v247 != v248);
    float v249 = *(int8x8_t **)(a1 + 120);
    float32x4_t v251 = *(unint64_t **)v802;
    float32x4_t v252 = *(unint64_t **)&v802[8];
    if (*(void *)v802 == *(void *)&v802[8]) {
      goto LABEL_247;
    }
    do
    {
      unint64_t v253 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>(v249);
      gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::remove(v253, *v251++);
    }
    while (v251 != v252);
  }
  float v249 = *(int8x8_t **)(a1 + 120);
LABEL_247:
  unint64_t v254 = v792;
  int16x8_t v255 = v791;
  if (v791 != v792)
  {
    do
    {
      unint64_t v256 = *v255++;
      gdc::Registry::destroy((uint64_t)v249, v256);
    }
    while (v255 != v254);
    int16x8_t v255 = v791;
  }
  if (v255 != v793) {
    free(v255);
  }
  if (*(void *)v802 != *(void *)&v802[16]) {
    free(*(void **)v802);
  }
  memset(buf, 0, sizeof(buf));
  std::mutex::lock((std::mutex *)(v771 + 64));
  uint64_t v257 = *(void *)(v771 + 56);
  *(_OWORD *)buf = *(_OWORD *)(v771 + 40);
  *(void *)&buf[16] = v257;
  *(void *)(v771 + 48) = 0;
  *(void *)(v771 + 56) = 0;
  *(void *)(v771 + 40) = 0;
  std::mutex::unlock((std::mutex *)(v771 + 64));
  uint64_t v258 = *(unint64_t ***)buf;
  int64x2_t v781 = *(unint64_t ***)&buf[8];
  if (*(void *)buf != *(void *)&buf[8])
  {
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_39646);
      }
      int64x2_t v263 = (id)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
      if (os_log_type_enabled(v263, OS_LOG_TYPE_INFO))
      {
        int v264 = *((_DWORD *)*v258 + 2);
        unint64_t v265 = "ARFeatureShadow";
        if (!*((unsigned char *)*v258 + 12)) {
          unint64_t v265 = "ARArrival";
        }
        *(_DWORD *)int64x2_t v802 = 67109378;
        *(_DWORD *)&v802[4] = v264;
        *(_WORD *)&v802[8] = 2080;
        *(void *)&v802[10] = v265;
        _os_log_impl(&dword_1A1780000, v263, OS_LOG_TYPE_INFO, "Processing new request(id:%d) for external mesh type:%s", v802, 0x12u);
      }

      if (!*((unsigned char *)*v258 + 12))
      {
        __int16 v267 = v258[1];
        char v791 = *v258;
        unint64_t v792 = v267;
        if (v267) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v267 + 1, 1uLL, memory_order_relaxed);
        }
        gdc::Registry::create(*(gdc::Registry **)(a1 + 120));
      }
      if (*((unsigned char *)*v258 + 12) == 1)
      {
        __int16 v266 = v258[1];
        char v791 = *v258;
        unint64_t v792 = v266;
        if (v266) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v266 + 1, 1uLL, memory_order_relaxed);
        }
        gdc::Registry::create(*(gdc::Registry **)(a1 + 120));
      }
      v258 += 2;
    }
    while (v258 != v781);
  }
  uint64_t v268 = a1;
  uint64_t v269 = gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMeshRequest>>>(*(int8x8_t **)(a1 + 120));
  uint64_t v271 = *(void *)(v269 + 80);
  uint64_t v270 = *(void *)(v269 + 88);
  uint64_t v272 = gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMeshRequest>>>(*(int8x8_t **)(a1 + 120));
  uint64_t v273 = (v270 - v271) >> 4;
  uint64_t v275 = *(void *)(v272 + 80);
  uint64_t v274 = *(void *)(v272 + 88);
  if (*(void *)(a1 + 208) != v273)
  {
    if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_39646);
    }
    unint64_t v276 = (id)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
    if (os_log_type_enabled(v276, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int64x2_t v802 = 134217984;
      *(void *)&v802[4] = v273;
      _os_log_impl(&dword_1A1780000, v276, OS_LOG_TYPE_INFO, "%lu pending Arrival requests", v802, 0xCu);
    }

    uint64_t v268 = a1;
    *(void *)(a1 + 208) = v273;
  }
  uint64_t v277 = (v274 - v275) >> 4;
  if (*(void *)(v268 + 200) != v277)
  {
    if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_39646);
    }
    unint64_t v278 = (id)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
    if (os_log_type_enabled(v278, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int64x2_t v802 = 134217984;
      *(void *)&v802[4] = (v274 - v275) >> 4;
      _os_log_impl(&dword_1A1780000, v278, OS_LOG_TYPE_INFO, "%lu pending Shadow requests", v802, 0xCu);
    }

    *(void *)(a1 + 200) = v277;
  }
  double v279 = *(double *)(md::LayoutContext::frameState(a2) + 88);
  uint64_t v280 = +[VKDebugSettings sharedSettings];
  int v782 = [v280 arIsArrivalAnimationEnabled];

  uint64_t v281 = *(void *)(a1 + 128);
  uint64_t v282 = *(void *)(a1 + 144);
  uint64_t v283 = *(uint64_t **)(a1 + 152);
  *(void *)(a1 + 128) = v283;
  long long v284 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a1 + 136) = v284;
  *(void *)(a1 + 160) = v281;
  *(void *)(a1 + 168) = v282;
  *(void *)(a1 + 152) = v281;
  char v791 = (unint64_t *)v795;
  unint64_t v792 = (unint64_t *)v795;
  uint64_t v793 = (unint64_t *)v795;
  unint64_t v794 = 2;
  double v285 = *(int ***)(v771 + 8);
  uint64_t v286 = *(int ***)(v771 + 16);
  if (v285 == v286)
  {
    v552 = (unint64_t *)v284;
    if (v283 == (uint64_t *)v284) {
      goto LABEL_621;
    }
LABEL_569:
    unint64_t v553 = *(int8x8_t **)(a1 + 120);
    do
    {
      uint64_t v554 = *v283;
      int v555 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(v553);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v555, v554);
      ++v283;
    }
    while (v283 != (uint64_t *)v552);
    uint64_t v556 = a1;
    v552 = *(unint64_t **)(a1 + 128);
    uint64_t v557 = *(unint64_t **)(a1 + 136);
    if (v552 != v557)
    {
      v558 = *(int8x8_t **)(a1 + 120);
      do
      {
        v559 = (void *)gdc::Registry::storage<arComponents::IsVisible>(v558);
        gdc::ComponentStorageWrapper<arComponents::IsVisible>::remove(v559, *v552++);
      }
      while (v552 != v557);
      uint64_t v556 = a1;
      v552 = *(unint64_t **)(a1 + 128);
    }
LABEL_622:
    *(void *)(v556 + 136) = v552;
    if (v791 != v793) {
      free(v791);
    }
    uint64_t v600 = *(void *)buf;
    if (*(void *)buf)
    {
      uint64_t v601 = *(void *)&buf[8];
      v602 = *(void **)buf;
      if (*(void *)&buf[8] != *(void *)buf)
      {
        do
        {
          v603 = *(std::__shared_weak_count **)(v601 - 8);
          if (v603 && !atomic_fetch_add(&v603->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
            std::__shared_weak_count::__release_weak(v603);
          }
          v601 -= 16;
        }
        while (v601 != v600);
        v602 = *(void **)buf;
      }
      *(void *)&buf[8] = v600;
      operator delete(v602);
    }
    return;
  }
  uint64_t v780 = (uint64_t)(v279 * 1000.0);
  uint32x4_t v784 = *(int ***)(v771 + 16);
  while (1)
  {
    uint64_t v287 = *v285;
    unint64_t v792 = v791;
    uint64_t v288 = *(int ***)(a1 + 176);
    uint64_t v289 = *(int ***)(a1 + 184);
    if (v288 != v289)
    {
      while (v287 != *v288)
      {
        v288 += 2;
        if (v288 == v289) {
          goto LABEL_294;
        }
      }
    }
    if (v288 == v289)
    {
LABEL_294:
      unsigned int v292 = 0;
      unsigned int v291 = 0;
      unint64_t v293 = 0xFFFFFFFFLL;
    }
    else
    {
      unint64_t v290 = (unint64_t)v288[1];
      unsigned int v291 = (unsigned __int16)v290;
      unsigned int v292 = WORD1(v290);
      unint64_t v293 = HIDWORD(v290);
      if ((_WORD)v290) {
        break;
      }
    }
    if (v292 || v293 != 0xFFFFFFFF) {
      break;
    }
LABEL_351:
    if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_39646);
    }
    uint64_t v351 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_ERROR))
    {
      int v352 = *v287;
      unint64_t v353 = "ARFeatureShadow";
      if (!*((unsigned char *)v287 + 4)) {
        unint64_t v353 = "ARArrival";
      }
      *(_DWORD *)int64x2_t v802 = 67109378;
      *(_DWORD *)&v802[4] = v352;
      *(_WORD *)&v802[8] = 2080;
      *(void *)&v802[10] = v353;
      _os_log_impl(&dword_1A1780000, v351, OS_LOG_TYPE_ERROR, "Labels is still tracking a deleted external mesh entity (id:%d type:%s)", v802, 0x12u);
    }
    v355 = *(unint64_t **)(a1 + 128);
    uint64_t v354 = *(unint64_t **)(a1 + 136);
    if (v355 != v354)
    {
      unint64_t v356 = ((unint64_t)v292 << 16) | (v293 << 32) | v291;
      while (1)
      {
        unint64_t v357 = *v355;
        if (*v355 == v356) {
          break;
        }
        ++v355;
        if (v356 < v357 || v355 == v354) {
          goto LABEL_286;
        }
      }
    }
    if (v355 != v354)
    {
      int64_t v359 = (char *)v354 - (char *)(v355 + 1);
      if (v354 != v355 + 1) {
        memmove(v355, v355 + 1, (char *)v354 - (char *)(v355 + 1));
      }
      *(void *)(a1 + 136) = (char *)v355 + v359;
    }
LABEL_286:
    if (++v285 == v286)
    {
      uint64_t v283 = *(uint64_t **)(a1 + 128);
      v552 = *(unint64_t **)(a1 + 136);
      if (v283 != (uint64_t *)v552) {
        goto LABEL_569;
      }
LABEL_621:
      uint64_t v556 = a1;
      goto LABEL_622;
    }
  }
  uint64_t v294 = *(int8x8_t **)(a1 + 120);
  if (v291 != v294[5].u16[0]) {
    goto LABEL_351;
  }
  int8x8_t v295 = v294[6];
  if (v293 >= (uint64_t)(*(void *)&v294[7] - *(void *)&v295) >> 3) {
    goto LABEL_351;
  }
  uint64_t v296 = (unsigned __int16 *)(*(void *)&v295 + 8 * v293);
  if (*v296 != v291 || v296[1] != v292 || *((_DWORD *)v296 + 1) != v293) {
    goto LABEL_351;
  }
  uint64_t v297 = (void *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v294);
  unint64_t v298 = v293 >> 7;
  uint64_t v299 = v297[4];
  if (v293 >> 7 < (v297[5] - v299) >> 3)
  {
    uint64_t v300 = *(void *)(v299 + 8 * v298);
    if (v300)
    {
      unint64_t v301 = *(unsigned __int16 *)(v300 + 2 * (v293 & 0x7F));
      uint64_t v303 = v297[7];
      uint64_t v302 = v297[8];
      if (v301 < (v302 - v303) >> 3)
      {
        uint64_t v304 = v303 + 8 * v301;
        if (v304 != v302 && *(_DWORD *)(v304 + 4) == v293) {
          goto LABEL_351;
        }
      }
    }
  }
  if (*((unsigned char *)v287 + 4))
  {
    if (*((unsigned char *)v287 + 4) == 1)
    {
      unint64_t v306 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(*(int8x8_t **)(a1 + 120));
      unint64_t v307 = v291 | ((unint64_t)v292 << 16) | (v293 << 32);
      uint64_t v308 = v306[4];
      if (v298 < (v306[5] - v308) >> 3)
      {
        uint64_t v309 = *(void *)(v308 + 8 * v298);
        if (v309)
        {
          unint64_t v310 = *(unsigned __int16 *)(v309 + 2 * (v293 & 0x7F));
          uint64_t v312 = v306[7];
          uint64_t v311 = v306[8];
          if (v310 < (v311 - v312) >> 3)
          {
            uint64_t v313 = v312 + 8 * v310;
            if (v313 != v311 && *(_DWORD *)(v313 + 4) == v293)
            {
              uint64_t v315 = v306[10];
              if (v315 + 80 * v310 != v306[11] && v315 != 0)
              {
                v317 = *(int8x8_t **)(a1 + 120);
                *(_OWORD *)int64x2_t v802 = *((_OWORD *)v287 + 2);
                *(void *)&v802[16] = *((void *)v287 + 6);
                long long v803 = *(_OWORD *)(v287 + 14);
                unint64_t v804 = *((void *)v287 + 9);
                uint64_t v805 = *((void *)v287 + 10);
                long long v806 = *(_OWORD *)(v287 + 22);
                uint64_t v807 = *((void *)v287 + 13);
                float v318 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v317);
                gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v318, v291 | ((unint64_t)v292 << 16) | (v293 << 32), (long long *)v802);
                unint64_t v319 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(*(int8x8_t **)(a1 + 120));
                gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v319, v291 | ((unint64_t)v292 << 16) | (v293 << 32));
              }
            }
          }
        }
      }
      float v320 = (void *)gdc::Registry::storage<arComponents::VisibilityAlpha>(*(int8x8_t **)(a1 + 120));
      uint64_t v321 = v320[4];
      if (v298 < (v320[5] - v321) >> 3)
      {
        uint64_t v322 = *(void *)(v321 + 8 * v298);
        if (v322)
        {
          unint64_t v323 = *(unsigned __int16 *)(v322 + 2 * (v293 & 0x7F));
          uint64_t v325 = v320[7];
          uint64_t v324 = v320[8];
          if (v323 < (v324 - v325) >> 3)
          {
            uint64_t v326 = v325 + 8 * v323;
            if (v326 != v324 && *(_DWORD *)(v326 + 4) == v293)
            {
              uint64_t v328 = v320[10];
              uint64_t v329 = (float *)(v328 + 4 * v323);
              if (v329 != (float *)v320[11] && v328 != 0)
              {
                float v331 = *((float *)v287 + 28);
                if (vabds_f32(*v329, v331) > 0.001)
                {
                  float *v329 = v331;
                  long long v332 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(*(int8x8_t **)(a1 + 120));
                  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v332, v291 | ((unint64_t)v292 << 16) | (v293 << 32));
                }
              }
            }
          }
        }
      }
      unint64_t v333 = v792;
      uint64_t v334 = v791;
      uint64_t v335 = v792 - v791;
      if (v794 < v335 + 1)
      {
        float32x4x3_t v336 = v793;
        unint64_t v337 = (1 << -(char)__clz(v794 + 1));
        if (v794 >= 0xFFFFFFFFFFFFFFFELL) {
          unint64_t v337 = 1;
        }
        if (v337 <= v335 + 1) {
          uint64_t v338 = v335 + 1;
        }
        else {
          uint64_t v338 = v337;
        }
        uint8x8_t v339 = malloc_type_malloc(8 * v338, 0x100004000313F17uLL);
        uint64_t v340 = (unint64_t *)v339;
        uint64_t v342 = v792;
        int v341 = v791;
        if (v791 != v792)
        {
          unint64_t v343 = (char *)v792 - (char *)v791 - 8;
          if (v343 < 0x18)
          {
            unint64_t v344 = v339;
            goto LABEL_394;
          }
          unint64_t v344 = v339;
          if ((unint64_t)((char *)v339 - (char *)v791) < 0x20)
          {
            do
            {
LABEL_394:
              uint64_t v382 = *v341++;
              *v344++ = v382;
            }
            while (v341 != v342);
          }
          else
          {
            uint64_t v345 = (v343 >> 3) + 1;
            uint64_t v346 = 8 * (v345 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v344 = (void *)((char *)v339 + v346);
            v347 = (long long *)(v791 + 2);
            v348 = v339 + 1;
            uint64_t v349 = v345 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v350 = *v347;
              *(v348 - 1) = *(v347 - 1);
              _OWORD *v348 = v350;
              v347 += 2;
              v348 += 2;
              v349 -= 4;
            }
            while (v349);
            if (v345 != (v345 & 0x3FFFFFFFFFFFFFFCLL))
            {
              int v341 = (unint64_t *)((char *)v341 + v346);
              goto LABEL_394;
            }
          }
        }
        if (v334 != v336) {
          free(v791);
        }
        unint64_t v333 = &v340[v335];
        char v791 = v340;
        unint64_t v792 = v333;
        unint64_t v794 = v338;
      }
      unint64_t *v333 = v307;
      ++v792;
    }
LABEL_399:
    double v383 = v792;
    int64x2_t v787 = v792;
    double v384 = v791;
    while (2)
    {
      if (v384 == v383) {
        goto LABEL_286;
      }
      unint64_t v385 = *v384;
      *(void *)int64x2_t v802 = *v384;
      unint64_t v387 = *(void *)(a1 + 152);
      double v386 = *(char **)(a1 + 160);
      uint64_t v388 = (char *)v387;
      if ((char *)v387 == v386)
      {
LABEL_408:
        float v389 = *(char **)(a1 + 160);
        if (v388 == v386) {
          goto LABEL_410;
        }
        float v389 = v388;
        if (v385 != *(void *)v388) {
          goto LABEL_410;
        }
LABEL_470:
        double v438 = *(char **)(a1 + 128);
        double v437 = *(char **)(a1 + 136);
        if (v438 != v437)
        {
          uint64_t v439 = *(void *)v802;
          while (1)
          {
            unint64_t v440 = *(void *)v438;
            if (*(void *)v438 == *(void *)v802) {
              break;
            }
            v438 += 8;
            if (*(void *)v802 < v440 || v438 == v437) {
              goto LABEL_483;
            }
          }
        }
        if (v438 == v437)
        {
          uint64_t v439 = *(void *)v802;
LABEL_483:
          v443 = (void *)gdc::Registry::storage<arComponents::IsVisible>(*(int8x8_t **)(a1 + 120));
          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v443, v439);
          uint64_t v444 = *(void *)v802;
          unsigned int v445 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(*(int8x8_t **)(a1 + 120));
          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v445, v444);
        }
        else
        {
          int64_t v442 = v437 - (v438 + 8);
          if (v437 != v438 + 8) {
            memmove(v438, v438 + 8, v437 - (v438 + 8));
          }
          *(void *)(a1 + 136) = &v438[v442];
        }
        ++v384;
        double v383 = v787;
        continue;
      }
      break;
    }
    uint64_t v388 = *(char **)(a1 + 152);
    do
    {
      if (*(void *)v388 >= v385) {
        goto LABEL_408;
      }
      v388 += 8;
    }
    while (v388 != v386);
    float v389 = *(char **)(a1 + 160);
LABEL_410:
    uint64_t v390 = (uint64_t)&v389[-v387];
    uint64_t v391 = (uint64_t)&v389[-v387] >> 3;
    double v392 = (char *)(v387 + ((unint64_t)&v389[-v387] & 0xFFFFFFFFFFFFFFF8));
    unint64_t v393 = *(void *)(a1 + 168);
    if ((unint64_t)v386 < v393)
    {
      if (v392 == v386)
      {
        *(void *)double v386 = v385;
        *(void *)(a1 + 160) = v386 + 8;
      }
      else
      {
        int64_t v394 = v386 - (v392 + 8);
        uint64_t v395 = v394 >> 3;
        double v396 = (uint64_t *)(v386 - 8);
        if ((unint64_t)v386 < 8)
        {
          double v403 = *(char **)(a1 + 160);
        }
        else
        {
          unint64_t v397 = (v390 & 0xFFFFFFFFFFFFFFF8) + v394;
          double v398 = (char *)(v397 + v387);
          unint64_t v399 = v397 + v387 + 8;
          if ((unint64_t)v386 > v399) {
            unint64_t v399 = *(void *)(a1 + 160);
          }
          unint64_t v400 = v399 + ~v387 - v397;
          unint64_t v401 = v386 - v398;
          BOOL v402 = v400 >= 0x58 && v401 > 0x1F;
          double v403 = *(char **)(a1 + 160);
          if (!v402) {
            goto LABEL_826;
          }
          uint64_t v404 = (v400 >> 3) + 1;
          uint64_t v405 = 8 * (v404 & 0x3FFFFFFFFFFFFFFCLL);
          double v396 = (uint64_t *)((char *)v396 + v405);
          double v406 = v386 + 16;
          double v407 = (long long *)(v387 + 8 * v395 + 8 * v391 + 16);
          uint64_t v408 = v404 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v409 = *v407;
            *(v406 - 1) = *(v407 - 1);
            *double v406 = v409;
            v406 += 2;
            v407 += 2;
            v408 -= 4;
          }
          while (v408);
          double v403 = &v386[v405];
          if (v404 != (v404 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_826:
            do
            {
              uint64_t v410 = *v396++;
              *(void *)double v403 = v410;
              v403 += 8;
            }
            while (v396 < (uint64_t *)v386);
          }
        }
        *(void *)(a1 + 160) = v403;
        if (v386 != v392 + 8) {
          memmove(&v386[-8 * v395], (const void *)(v387 + ((unint64_t)&v389[-v387] & 0xFFFFFFFFFFFFFFF8)), v394);
        }
        uint64_t v420 = v802;
        if (v392 <= v802) {
          uint64_t v420 = &v802[8 * (*(void *)(a1 + 160) > (unint64_t)v802)];
        }
        *(void *)double v392 = *(void *)v420;
      }
      goto LABEL_470;
    }
    unint64_t v411 = ((uint64_t)&v386[-v387] >> 3) + 1;
    if (v411 >> 61) {
      abort();
    }
    uint64_t v412 = v393 - v387;
    if (v412 >> 2 > v411) {
      unint64_t v411 = v412 >> 2;
    }
    if ((unint64_t)v412 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v413 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v413 = v411;
    }
    if (v413)
    {
      if (v413 >> 61) {
        goto LABEL_821;
      }
      v414 = (char *)operator new(8 * v413);
      uint64_t v391 = (uint64_t)&v389[-v387] >> 3;
    }
    else
    {
      v414 = 0;
    }
    long long v415 = &v414[8 * v391];
    v416 = &v414[8 * v413];
    if (v391 == v413)
    {
      uint64_t v417 = (char *)(v387 + ((unint64_t)&v389[-v387] & 0xFFFFFFFFFFFFFFF8));
      if (v390 < 1)
      {
        if ((char *)v387 == v389) {
          unint64_t v421 = 1;
        }
        else {
          unint64_t v421 = v390 >> 2;
        }
        if (v421 >> 61) {
LABEL_821:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        uint64_t v422 = v391;
        long long v415 = (char *)operator new(8 * v421);
        v416 = &v415[8 * v421];
        if (v414)
        {
          operator delete(v414);
          v416 = &v415[8 * v421];
          uint64_t v419 = *(char **)(a1 + 152);
          unint64_t v385 = *(void *)v802;
        }
        else
        {
          uint64_t v419 = (char *)v387;
        }
        uint64_t v391 = v422;
      }
      else
      {
        unint64_t v418 = v391 + 2;
        if (v391 >= -1) {
          unint64_t v418 = v391 + 1;
        }
        v415 -= 8 * (v418 >> 1);
        uint64_t v419 = (char *)v387;
      }
    }
    else
    {
      uint64_t v419 = (char *)v387;
      uint64_t v417 = (char *)(v387 + ((unint64_t)&v389[-v387] & 0xFFFFFFFFFFFFFFF8));
    }
    *(void *)long long v415 = v385;
    double v423 = v415 + 8;
    if (v419 != v417)
    {
      double v424 = (char *)((v390 & 0xFFFFFFFFFFFFFFF8) + v387);
      unint64_t v425 = v424 - v419 - 8;
      if (v425 < 0x58)
      {
        double v427 = v417;
      }
      else if ((unint64_t)(v424 - v415) < 0x20)
      {
        double v427 = v417;
      }
      else
      {
        uint64_t v426 = (v425 >> 3) + 1;
        double v427 = &v417[-8 * (v426 & 0x3FFFFFFFFFFFFFFCLL)];
        float v428 = v415 - 16;
        uint64_t v429 = (long long *)(v387 + 8 * v391 - 16);
        uint64_t v430 = v426 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v431 = *v429;
          *((_OWORD *)v428 - 1) = *(v429 - 1);
          *(_OWORD *)float v428 = v431;
          v428 -= 32;
          v429 -= 2;
          v430 -= 4;
        }
        while (v430);
        v415 -= 8 * (v426 & 0x3FFFFFFFFFFFFFFCLL);
        if (v426 == (v426 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_466;
        }
      }
      do
      {
        uint64_t v432 = *((void *)v427 - 1);
        v427 -= 8;
        *((void *)v415 - 1) = v432;
        v415 -= 8;
      }
      while (v427 != v419);
    }
LABEL_466:
    double v433 = *(unsigned char **)(a1 + 160);
    uint64_t v434 = v433 - v417;
    if (v433 != v417)
    {
      BOOL v435 = v416;
      memmove(v423, v417, v433 - v417);
      v416 = v435;
    }
    v436 = *(void **)(a1 + 152);
    *(void *)(a1 + 152) = v415;
    *(void *)(a1 + 160) = &v423[v434];
    *(void *)(a1 + 168) = v416;
    uint64_t v286 = v784;
    if (v436) {
      operator delete(v436);
    }
    goto LABEL_470;
  }
  uint64_t v796 = v287;
  v360 = (void *)gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(*(int8x8_t **)(a1 + 120));
  uint64_t v361 = v360[4];
  if (v298 >= (v360[5] - v361) >> 3) {
    goto LABEL_399;
  }
  uint64_t v362 = *(void *)(v361 + 8 * v298);
  if (!v362) {
    goto LABEL_399;
  }
  unint64_t v363 = *(unsigned __int16 *)(v362 + 2 * (v293 & 0x7F));
  uint64_t v365 = v360[7];
  uint64_t v364 = v360[8];
  if (v363 >= (v364 - v365) >> 3) {
    goto LABEL_399;
  }
  uint64_t v366 = v365 + 8 * v363;
  if (v366 == v364 || *(_DWORD *)(v366 + 4) != v293) {
    goto LABEL_399;
  }
  uint64_t v368 = v360[10];
  BOOL v369 = (unint64_t *)(v368 + 16 * v363);
  if (v369 == (unint64_t *)v360[11] || v368 == 0) {
    goto LABEL_399;
  }
  uint64_t v371 = *(int8x8_t **)(a1 + 120);
  unint64_t v372 = *v369;
  v800[0] = &unk_1EF5765F0;
  v800[1] = &v796;
  unint64_t v801 = v800;
  v373 = (void *)gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(v371);
  uint64_t v374 = v373[4];
  if (v372 >> 39 < (v373[5] - v374) >> 3
    && (uint64_t v375 = *(void *)(v374 + 8 * (v372 >> 39))) != 0
    && (unint64_t v376 = *(unsigned __int16 *)(v375 + 2 * (HIDWORD(v372) & 0x7F)),
        uint64_t v378 = v373[7],
        uint64_t v377 = v373[8],
        v376 < (v377 - v378) >> 3)
    && ((uint64_t v379 = v378 + 8 * v376, v379 != v377) ? (v380 = *(_DWORD *)(v379 + 4) == HIDWORD(v372)) : (v380 = 0),
        v380 && (uint64_t v551 = v373[10]) != 0 && v551 + 8 * v376 != v373[11]))
  {
    v802[0] = 0;
    if (v801)
    {
      (*(void (**)(void *))(*v801 + 48))(v801);
LABEL_390:
      if (v801 == v800)
      {
        (*(void (**)(void *))(v800[0] + 32))(v800);
      }
      else if (v801)
      {
        (*(void (**)(void))(*v801 + 40))();
      }
      unint64_t v446 = *v369;
      v447 = (void *)gdc::Registry::storage<arComponents::AnimationEntityStatus<(VKAnimationState)1>>(*(int8x8_t **)(a1 + 120));
      uint64_t v448 = v447[4];
      if (v446 >> 39 >= (v447[5] - v448) >> 3) {
        goto LABEL_498;
      }
      uint64_t v449 = *(void *)(v448 + 8 * (v446 >> 39));
      if (!v449) {
        goto LABEL_498;
      }
      unint64_t v450 = *(unsigned __int16 *)(v449 + 2 * (HIDWORD(v446) & 0x7F));
      uint64_t v452 = v447[7];
      uint64_t v451 = v447[8];
      if (v450 >= (v451 - v452) >> 3) {
        goto LABEL_498;
      }
      uint64_t v453 = v452 + 8 * v450;
      BOOL v454 = v453 != v451 && *(_DWORD *)(v453 + 4) == HIDWORD(v446);
      if (!v454 || ((uint64_t v455 = v447[10], v455 + 8 * v450 != v447[11]) ? (v456 = v455 == 0) : (v456 = 1), v456))
      {
LABEL_498:
        unint64_t v457 = *v369;
        v458 = (void *)gdc::Registry::storage<arComponents::AnimationEntityStatus<(VKAnimationState)3>>(*(int8x8_t **)(a1 + 120));
        uint64_t v459 = v458[4];
        if (v457 >> 39 < (v458[5] - v459) >> 3
          && (uint64_t v460 = *(void *)(v459 + 8 * (v457 >> 39))) != 0
          && (unint64_t v461 = *(unsigned __int16 *)(v460 + 2 * (HIDWORD(v457) & 0x7F)),
              uint64_t v463 = v458[7],
              uint64_t v462 = v458[8],
              v461 < (v462 - v463) >> 3)
          && ((uint64_t v464 = v463 + 8 * v461, v464 != v462) ? (v465 = *(_DWORD *)(v464 + 4) == HIDWORD(v457)) : (v465 = 0), v465))
        {
          v466 = (void *)v458[11];
          v467 = (void *)(v458[10] + 8 * v461);
        }
        else
        {
          v466 = (void *)v458[11];
          v467 = v466;
        }
        if (v467 == v466) {
          v467 = 0;
        }
        if (v782 && (!v467 || v780 - *v467 >= 1001))
        {
          v468 = *(int8x8_t **)(a1 + 120);
          uint64_t v469 = *v369;
          uint64_t v470 = +[VKDebugSettings sharedSettings];
          [v470 arJumpOffset];
          int v788 = v471;

          unint64_t v472 = +[VKDebugSettings sharedSettings];
          [v472 arJumpDuration];
          float v779 = v473;

          v474 = +[VKDebugSettings sharedSettings];
          [v474 arJumpStart];
          float v778 = v475;

          unint64_t v476 = +[VKDebugSettings sharedSettings];
          [v476 arFallOffset];
          int v777 = v477;

          uint64_t v478 = +[VKDebugSettings sharedSettings];
          [v478 arFallDuration];
          float v776 = v479;

          uint64_t v480 = +[VKDebugSettings sharedSettings];
          [v480 arFallStart];
          float v775 = v481;

          v482 = +[VKDebugSettings sharedSettings];
          [v482 arRotateOffset];
          float v774 = v483;

          long long v484 = +[VKDebugSettings sharedSettings];
          [v484 arRotateDuration];
          float v772 = v485;

          uint64_t v486 = +[VKDebugSettings sharedSettings];
          [v486 arRotateStart];
          float v488 = v487;

          uint64_t v489 = +[VKDebugSettings sharedSettings];
          [v489 arPulseOffset];
          int v491 = v490;

          uint64_t v492 = +[VKDebugSettings sharedSettings];
          [v492 arPulseDuration];
          float v494 = v493;

          v495 = +[VKDebugSettings sharedSettings];
          [v495 arPulseStart];
          float v497 = v496;

          v498 = +[VKDebugSettings sharedSettings];
          [v498 arPulseNumberOfRepeats];
          float v500 = v499;

          *(float *)int64x2_t v802 = fmaxf(fmaxf(fmaxf(fmaxf(v778 + v779, 0.0), v776 + (float)(v778 + v779)), v488 + v772), v497 + (float)((float)(v494 + v494) * v500))- fminf(v497, fminf(v488, fminf(v775, fminf(v778, 0.0))));
          *(_DWORD *)&v802[4] = v788;
          *(float *)&v802[8] = v779;
          *(float *)&v802[12] = v778;
          *(_DWORD *)&v802[20] = v777;
          *(void *)&long long v803 = __PAIR64__(LODWORD(v775), LODWORD(v776));
          float v501 = v774 * 3.14159265;
          *((float *)&v803 + 3) = v501;
          unint64_t v804 = __PAIR64__(LODWORD(v488), LODWORD(v772));
          HIDWORD(v805) = v491;
          *(void *)&long long v806 = __PAIR64__(LODWORD(v497), LODWORD(v494));
          HIDWORD(v806) = (int)v500;
          JumpAndRotate = (void *)gdc::Registry::storage<arComponents::CreateJumpAndRotateAnimation>(v468);
          gdc::ComponentStorageWrapper<arComponents::CreateJumpAndRotateAnimation>::emplace(JumpAndRotate, v469, (uint64_t)v802);
          uint64_t v286 = v784;
        }
      }
      char v503 = 0;
      uint64_t v504 = 0;
      *(_OWORD *)int64x2_t v802 = *(_OWORD *)v369;
      while (2)
      {
        char v506 = v503;
        unint64_t v507 = *(void *)&v802[8 * v504];
        uint64_t v508 = (void *)gdc::Registry::storage<arComponents::VisibilityAlpha>(*(int8x8_t **)(a1 + 120));
        unint64_t v509 = v507 >> 39;
        uint64_t v510 = v508[4];
        if (v507 >> 39 < (v508[5] - v510) >> 3)
        {
          uint64_t v511 = *(void *)(v510 + 8 * v509);
          if (v511)
          {
            unint64_t v512 = *(unsigned __int16 *)(v511 + 2 * (HIDWORD(v507) & 0x7F));
            uint64_t v514 = v508[7];
            uint64_t v513 = v508[8];
            if (v512 < (v513 - v514) >> 3)
            {
              uint64_t v515 = v514 + 8 * v512;
              if (v515 != v513 && *(_DWORD *)(v515 + 4) == HIDWORD(v507))
              {
                uint64_t v517 = v508[10];
                uint64_t v518 = (float *)(v517 + 4 * v512);
                if (v518 != (float *)v508[11] && v517 != 0)
                {
                  float v520 = *((float *)v287 + 28);
                  if (vabds_f32(*v518, v520) > 0.001)
                  {
                    *uint64_t v518 = v520;
                    uint64_t v521 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(*(int8x8_t **)(a1 + 120));
                    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v521, v507);
                  }
                }
              }
            }
          }
        }
        uint64_t v522 = *(int8x8_t **)(a1 + 120);
        v798[0] = &unk_1EF576638;
        v798[1] = &v796;
        v799 = v798;
        v523 = (void *)gdc::Registry::storage<arComponents::ScaleToApply>(v522);
        uint64_t v524 = v523[4];
        if (v509 < (v523[5] - v524) >> 3
          && (uint64_t v525 = *(void *)(v524 + 8 * v509)) != 0
          && (unint64_t v526 = *(unsigned __int16 *)(v525 + 2 * (HIDWORD(v507) & 0x7F)),
              uint64_t v528 = v523[7],
              uint64_t v527 = v523[8],
              v526 < (v527 - v528) >> 3)
          && ((uint64_t v529 = v528 + 8 * v526, v529 != v527) ? (v530 = *(_DWORD *)(v529 + 4) == HIDWORD(v507)) : (v530 = 0),
              v530 && (uint64_t v549 = v523[10]) != 0 && v549 + 8 * v526 != v523[11]))
        {
          LOBYTE(v790) = 0;
          if (!v799) {
            break;
          }
          (*(void (**)(void *))(*v799 + 48))(v799);
        }
        else
        {
          *(void *)&long long v790 = 0x3FF0000000000000;
          LOBYTE(v797) = 1;
          if (!v799) {
            break;
          }
          (*(void (**)(void *, long long *, unint64_t *))(*v799 + 48))(v799, &v790, &v797);
          unint64_t v797 = v790;
          v531 = (void *)gdc::Registry::storage<arComponents::ScaleToApply>(v522);
          gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v531, v507, &v797);
        }
        if (v799 == v798)
        {
          (*(void (**)(void *))(v798[0] + 32))(v798);
        }
        else if (v799)
        {
          (*(void (**)(void))(*v799 + 40))();
        }
        uint64_t v505 = v792;
        v532 = v791;
        uint64_t v533 = v792 - v791;
        if (v794 < v533 + 1)
        {
          int16x8_t v534 = v793;
          unint64_t v535 = (1 << -(char)__clz(v794 + 1));
          if (v794 >= 0xFFFFFFFFFFFFFFFELL) {
            unint64_t v535 = 1;
          }
          if (v535 <= v533 + 1) {
            uint64_t v536 = v533 + 1;
          }
          else {
            uint64_t v536 = v535;
          }
          unint64_t v537 = malloc_type_malloc(8 * v536, 0x100004000313F17uLL);
          v538 = (unint64_t *)v537;
          uint64_t v540 = v792;
          uint64_t v539 = v791;
          if (v791 != v792)
          {
            unint64_t v541 = (char *)v792 - (char *)v791 - 8;
            if (v541 < 0x18)
            {
              v542 = v537;
              goto LABEL_560;
            }
            v542 = v537;
            if ((unint64_t)((char *)v537 - (char *)v791) < 0x20)
            {
              do
              {
LABEL_560:
                uint64_t v550 = *v539++;
                *v542++ = v550;
              }
              while (v539 != v540);
            }
            else
            {
              uint64_t v543 = (v541 >> 3) + 1;
              uint64_t v544 = 8 * (v543 & 0x3FFFFFFFFFFFFFFCLL);
              v542 = (void *)((char *)v537 + v544);
              v545 = (long long *)(v791 + 2);
              uint64_t v546 = v537 + 1;
              uint64_t v547 = v543 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v548 = *v545;
                *(v546 - 1) = *(v545 - 1);
                *uint64_t v546 = v548;
                v545 += 2;
                v546 += 2;
                v547 -= 4;
              }
              while (v547);
              if (v543 != (v543 & 0x3FFFFFFFFFFFFFFCLL))
              {
                uint64_t v539 = (unint64_t *)((char *)v539 + v544);
                goto LABEL_560;
              }
            }
          }
          if (v532 != v534) {
            free(v791);
          }
          uint64_t v505 = &v538[v533];
          char v791 = v538;
          unint64_t v792 = v505;
          unint64_t v794 = v536;
        }
        *uint64_t v505 = v507;
        ++v792;
        char v503 = 1;
        uint64_t v504 = 1;
        if (v506) {
          goto LABEL_399;
        }
        continue;
      }
    }
  }
  else
  {
    *(void *)int64x2_t v802 = 0;
    LOBYTE(v790) = 1;
    if (v801)
    {
      (*(void (**)(void *, unsigned char *, long long *))(*v801 + 48))(v801, v802, &v790);
      *(void *)&long long v790 = *(void *)v802;
      double v381 = (void *)gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(v371);
      gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v381, v372, &v790);
      goto LABEL_390;
    }
  }
LABEL_823:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A25F04C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53)
{
  if (a33 != a35) {
    free(a33);
  }
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v54 - 192));
  _Unwind_Resume(a1);
}

void gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::addRequest(int8x8_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(a1);
  unint64_t v7 = a2 >> 39;
  uint64_t v8 = v6[4];
  if (a2 >> 39 < (v6[5] - v8) >> 3)
  {
    uint64_t v9 = *(void *)(v8 + 8 * v7);
    if (v9)
    {
      unint64_t v10 = *(unsigned __int16 *)(v9 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v12 = v6[7];
      uint64_t v11 = v6[8];
      if (v10 < (v11 - v12) >> 3)
      {
        uint64_t v13 = v12 + 8 * v10;
        if (v13 != v11 && *(_DWORD *)(v13 + 4) == HIDWORD(a2))
        {
          uint64_t v15 = v6[10];
          uint64_t v16 = (unsigned char *)(v15 + v10);
          if (v15 + v10 != v6[11] && v15 != 0)
          {
            BOOL v37 = (void *)gdc::Registry::storage<arComponents::XYPlaneMeshRequestData>(a1);
            gdc::ComponentStorageWrapper<arComponents::XYPlaneMeshRequestData>::remove(v37, a2);
            gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::_removeStatusTag(a1, a2, *v16);
            int v38 = 0;
            unsigned char *v16 = 0;
            goto LABEL_63;
          }
        }
      }
    }
  }
  uint64_t v18 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(a1);
  unint64_t v107 = a2;
  uint64_t v19 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v18 + 4, (uint64_t)&v107);
  if (v20)
  {
    uint64_t v26 = (unsigned char *)v18[11];
    unint64_t v25 = v18[12];
    if ((unint64_t)v26 < v25)
    {
      *uint64_t v26 = 0;
      uint64_t v27 = (uint64_t)(v26 + 1);
LABEL_50:
      v18[11] = v27;
      uint64_t v22 = v18[31];
LABEL_51:
      unint64_t v49 = (void *)v18[22];
      if (v49)
      {
        while (1)
        {
          double v109 = &v107;
          uint64_t v110 = 1;
          uint64_t v108 = v22;
          uint64_t v50 = v49[6];
          if (!v50) {
            goto LABEL_125;
          }
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v50 + 48))(v50, &v108, &v109);
          unint64_t v49 = (void *)*v49;
          if (!v49) {
            goto LABEL_54;
          }
        }
      }
      goto LABEL_54;
    }
    unint64_t v28 = (unsigned char *)v18[10];
    unint64_t v29 = v26 - v28;
    uint64_t v30 = v26 - v28 + 1;
    if (v30 < 0) {
      goto LABEL_126;
    }
    unint64_t v31 = v25 - (void)v28;
    if (2 * v31 > v30) {
      uint64_t v30 = 2 * v31;
    }
    if (v31 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v32 = v30;
    }
    if (v32) {
      uint64_t v33 = (char *)operator new(v32);
    }
    else {
      uint64_t v33 = 0;
    }
    double v34 = &v33[v29];
    uint64_t v35 = &v33[v32];
    v33[v29] = 0;
    uint64_t v27 = (uint64_t)&v33[v29 + 1];
    if (v26 == v28)
    {
LABEL_48:
      v18[10] = v34;
      v18[11] = v27;
      v18[12] = v35;
      if (v28) {
        operator delete(v28);
      }
      goto LABEL_50;
    }
    if (v29 < 8 || (unint64_t)(v28 - v33) < 0x20) {
      goto LABEL_45;
    }
    if (v29 >= 0x20)
    {
      unint64_t v36 = v29 & 0xFFFFFFFFFFFFFFE0;
      double v39 = (long long *)(v26 - 16);
      uint64_t v40 = &v33[v26 - 16 - v28];
      unint64_t v41 = v29 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v42 = *v39;
        *((_OWORD *)v40 - 1) = *(v39 - 1);
        *(_OWORD *)uint64_t v40 = v42;
        v40 -= 32;
        v39 -= 2;
        v41 -= 32;
      }
      while (v41);
      if (v29 == v36) {
        goto LABEL_47;
      }
      if ((v29 & 0x18) == 0)
      {
        v34 -= v36;
        v26 -= v36;
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v36 = 0;
    }
    unint64_t v43 = v36 - (v29 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v44 = &v26[-v36 - 8];
    int64_t v45 = v44 - v28;
    do
    {
      uint64_t v46 = *(void *)v44;
      v44 -= 8;
      *(void *)&v33[v45] = v46;
      v45 -= 8;
      v43 += 8;
    }
    while (v43);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_47;
    }
    v34 -= v29 & 0xFFFFFFFFFFFFFFF8;
    v26 -= v29 & 0xFFFFFFFFFFFFFFF8;
LABEL_45:
    uint64_t v47 = v34 - 1;
    do
    {
      char v48 = *--v26;
      *v47-- = v48;
    }
    while (v26 != v28);
LABEL_47:
    double v34 = v33;
    goto LABEL_48;
  }
  long long v21 = (unsigned char *)(v18[10] + (((uint64_t)v19 - v18[7]) >> 3));
  *long long v21 = 0;
  uint64_t v22 = v18[31];
  if (v21 == (unsigned char *)v18[11]) {
    goto LABEL_51;
  }
  for (unint64_t i = (void *)v18[16]; i; unint64_t i = (void *)*i)
  {
    double v109 = &v107;
    uint64_t v110 = 1;
    uint64_t v108 = v22;
    uint64_t v24 = i[6];
    if (!v24) {
      goto LABEL_125;
    }
    (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v24 + 48))(v24, &v108, &v109);
  }
LABEL_54:
  uint64_t v51 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(a1);
  uint64_t v52 = v51[4];
  if (v7 < (v51[5] - v52) >> 3
    && (uint64_t v53 = *(void *)(v52 + 8 * v7)) != 0
    && (unint64_t v54 = *(unsigned __int16 *)(v53 + 2 * (HIDWORD(a2) & 0x7F)), v56 = v51[7], v55 = v51[8], v54 < (v55 - v56) >> 3)
    && ((uint64_t v57 = v56 + 8 * v54, v57 != v55) ? (v58 = *(_DWORD *)(v57 + 4) == HIDWORD(a2)) : (v58 = 0), v58))
  {
    uint64_t v16 = (unsigned char *)(v51[10] + v54);
  }
  else
  {
    uint64_t v16 = (unsigned char *)v51[11];
  }
  int v38 = *v16;
  if (v38 != 2)
  {
LABEL_63:
    gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::_removeStatusTag(a1, a2, v38);
    uint64_t v59 = 0;
    unint64_t v60 = 0xCBF29CE484222325;
    do
      unint64_t v60 = 0x100000001B3 * (v60 ^ aStdStringViewG_776[v59++ + 38]);
    while (v59 != 122);
    double v61 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::StatusTag<(gdc::component::DataRequestStatus)2>>(a1, v60);
    unint64_t v107 = a2;
    double v62 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v61 + 4, (uint64_t)&v107);
    if (v63)
    {
      double v68 = (unsigned char *)v61[11];
      unint64_t v67 = v61[12];
      if ((unint64_t)v68 >= v67)
      {
        uint64_t v70 = (char *)v61[10];
        uint64_t v71 = v68 - v70;
        uint64_t v72 = v68 - v70 + 1;
        if (v72 < 0) {
          goto LABEL_126;
        }
        unint64_t v73 = v67 - (void)v70;
        if (2 * v73 > v72) {
          uint64_t v72 = 2 * v73;
        }
        if (v73 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v74 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v74 = v72;
        }
        if (v74) {
          BOOL v75 = (char *)operator new(v74);
        }
        else {
          BOOL v75 = 0;
        }
        uint64_t v76 = &v75[v74];
        uint64_t v69 = (uint64_t)&v75[v71 + 1];
        int v77 = (char *)(v70 - v68);
        if (v70 == v68) {
          int v77 = 0;
        }
        v61[10] = &v75[v71 + (void)v77];
        v61[11] = v69;
        v61[12] = v76;
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        uint64_t v69 = (uint64_t)(v68 + 1);
      }
      v61[11] = v69;
      uint64_t v64 = v61[31];
    }
    else
    {
      uint64_t v64 = v61[31];
      if (v61[10] + (((uint64_t)v62 - v61[7]) >> 3) != v61[11])
      {
        unint64_t v65 = (void *)v61[16];
        if (v65)
        {
          while (1)
          {
            double v109 = &v107;
            uint64_t v110 = 1;
            uint64_t v108 = v64;
            uint64_t v66 = v65[6];
            if (!v66) {
              goto LABEL_125;
            }
            (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v66 + 48))(v66, &v108, &v109);
            unint64_t v65 = (void *)*v65;
            if (!v65) {
              goto LABEL_91;
            }
          }
        }
        goto LABEL_91;
      }
    }
    for (uint64_t j = (void *)v61[22]; j; uint64_t j = (void *)*j)
    {
      double v109 = &v107;
      uint64_t v110 = 1;
      uint64_t v108 = v64;
      uint64_t v79 = j[6];
      if (!v79) {
        goto LABEL_125;
      }
      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v79 + 48))(v79, &v108, &v109);
    }
LABEL_91:
    unsigned char *v16 = 2;
    unint64_t v80 = (void *)gdc::Registry::storage<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>::DidChange>(a1);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v80, a2);
  }
  unint64_t v81 = (void *)gdc::Registry::storage<arComponents::XYPlaneMeshRequestData>(a1);
  unint64_t v107 = a2;
  uint64_t v82 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v81 + 4, (uint64_t)&v107);
  if (v83)
  {
    uint64_t v89 = (char *)v81[11];
    unint64_t v88 = v81[12];
    if ((unint64_t)v89 >= v88)
    {
      unsigned int v91 = (char *)v81[10];
      uint64_t v92 = (v89 - v91) >> 3;
      unint64_t v93 = v92 + 1;
      if ((unint64_t)(v92 + 1) >> 61) {
        goto LABEL_126;
      }
      uint64_t v94 = v88 - (void)v91;
      if (v94 >> 2 > v93) {
        unint64_t v93 = v94 >> 2;
      }
      if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v95 = v93;
      }
      if (v95)
      {
        if (v95 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        double v96 = (char *)operator new(8 * v95);
      }
      else
      {
        double v96 = 0;
      }
      float64x2_t v97 = &v96[8 * v92];
      *(void *)float64x2_t v97 = *(void *)a3;
      uint64_t v90 = v97 + 8;
      if (v89 != v91)
      {
        unint64_t v98 = v89 - v91 - 8;
        if (v98 < 0x58) {
          goto LABEL_130;
        }
        if ((unint64_t)(v91 - v96) < 0x20) {
          goto LABEL_130;
        }
        uint64_t v99 = (v98 >> 3) + 1;
        uint64_t v100 = &v96[8 * v92 - 16];
        double v101 = (long long *)(v89 - 16);
        uint64_t v102 = v99 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v103 = *v101;
          *((_OWORD *)v100 - 1) = *(v101 - 1);
          *(_OWORD *)uint64_t v100 = v103;
          v100 -= 32;
          v101 -= 2;
          v102 -= 4;
        }
        while (v102);
        v97 -= 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
        v89 -= 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
        if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_130:
          do
          {
            uint64_t v104 = *((void *)v89 - 1);
            v89 -= 8;
            *((void *)v97 - 1) = v104;
            v97 -= 8;
          }
          while (v89 != v91);
        }
        uint64_t v89 = (char *)v81[10];
      }
      v81[10] = v97;
      v81[11] = v90;
      v81[12] = &v96[8 * v95];
      if (v89) {
        operator delete(v89);
      }
    }
    else
    {
      *(void *)uint64_t v89 = *(void *)a3;
      uint64_t v90 = v89 + 8;
    }
    v81[11] = v90;
    uint64_t v85 = v81[31];
  }
  else
  {
    uint64_t v84 = (_DWORD *)((char *)v82 + v81[10] - v81[7]);
    _DWORD *v84 = *(_DWORD *)a3;
    v84[1] = *(_DWORD *)(a3 + 4);
    uint64_t v85 = v81[31];
    if (v84 != (_DWORD *)v81[11])
    {
      int32x4_t v86 = (void *)v81[16];
      if (v86)
      {
        while (1)
        {
          double v109 = &v107;
          uint64_t v110 = 1;
          uint64_t v108 = v85;
          uint64_t v87 = v86[6];
          if (!v87) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v87 + 48))(v87, &v108, &v109);
          int32x4_t v86 = (void *)*v86;
          if (!v86) {
            return;
          }
        }
LABEL_125:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_126:
        abort();
      }
      return;
    }
  }
  unint64_t v105 = (void *)v81[22];
  if (v105)
  {
    while (1)
    {
      double v109 = &v107;
      uint64_t v110 = 1;
      uint64_t v108 = v85;
      uint64_t v106 = v105[6];
      if (!v106) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v106 + 48))(v106, &v108, &v109);
      unint64_t v105 = (void *)*v105;
      if (!v105) {
        return;
      }
    }
    goto LABEL_125;
  }
}

uint64_t gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xB1DB1DACA18D5329;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB1DB1DACA18D5329;
    if (*(void *)&v1 <= 0xB1DB1DACA18D5329) {
      unint64_t v3 = 0xB1DB1DACA18D5329 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB1DB1DACA18D5329;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB1DB1DACA18D5329)
      {
        if (v5[2] == 0xB1DB1DACA18D5329) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB1DB1DACA18D5329) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB1DB1DACA18D5329) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A25F11C8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>(int8x8_t *a1)
{
  uint64_t v10 = 0x757F6D4F9C7E65A8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x757F6D4F9C7E65A8;
    if (*(void *)&v1 <= 0x757F6D4F9C7E65A8uLL) {
      uint64_t v3 = 0x757F6D4F9C7E65A8uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x757F6D4F9C7E65A8;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x757F6D4F9C7E65A8)
      {
        if (v5[2] == 0x757F6D4F9C7E65A8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x757F6D4F9C7E65A8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x757F6D4F9C7E65A8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A25F1438(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(int8x8_t *a1)
{
  uint64_t v10 = 0x347DBF5108282558;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x347DBF5108282558;
    if (*(void *)&v1 <= 0x347DBF5108282558uLL) {
      uint64_t v3 = 0x347DBF5108282558uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x347DBF5108282558;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x347DBF5108282558)
      {
        if (v5[2] == 0x347DBF5108282558) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x347DBF5108282558) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x347DBF5108282558) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A25F16A8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(int8x8_t *a1)
{
  uint64_t v10 = 0x32AFEAA002EF563ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x32AFEAA002EF563ELL;
    if (*(void *)&v1 <= 0x32AFEAA002EF563EuLL) {
      uint64_t v3 = 0x32AFEAA002EF563EuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x32AFEAA002EF563ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x32AFEAA002EF563ELL)
      {
        if (v5[2] == 0x32AFEAA002EF563ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x32AFEAA002EF563ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x32AFEAA002EF563ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A25F1918(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(int8x8_t *a1)
{
  unint64_t v10 = 0xE77D1752D79CE08ELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE77D1752D79CE08ELL;
    if (*(void *)&v1 <= 0xE77D1752D79CE08ELL) {
      unint64_t v3 = 0xE77D1752D79CE08ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE77D1752D79CE08ELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE77D1752D79CE08ELL)
      {
        if (v5[2] == 0xE77D1752D79CE08ELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE77D1752D79CE08ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE77D1752D79CE08ELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A25F1B88(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::CreateJumpAndRotateAnimation>::emplace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v33);
  if (v6)
  {
    uint64_t v15 = (char *)a1[11];
    unint64_t v14 = a1[12];
    if ((unint64_t)v15 >= v14)
    {
      char v20 = (char *)a1[10];
      unint64_t v21 = 0x8E38E38E38E38E39 * ((v15 - v20) >> 3) + 1;
      if (v21 > 0x38E38E38E38E38ELL) {
        goto LABEL_30;
      }
      unint64_t v22 = 0x8E38E38E38E38E39 * ((uint64_t)(v14 - (void)v20) >> 3);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x1C71C71C71C71C7) {
        unint64_t v23 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 > 0x38E38E38E38E38ELL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v24 = (char *)operator new(72 * v23);
      }
      else
      {
        uint64_t v24 = 0;
      }
      unint64_t v25 = &v24[8 * ((v15 - v20) >> 3)];
      long long v26 = *(_OWORD *)(a3 + 48);
      *((_OWORD *)v25 + 2) = *(_OWORD *)(a3 + 32);
      *((_OWORD *)v25 + 3) = v26;
      *((void *)v25 + 8) = *(void *)(a3 + 64);
      long long v27 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)unint64_t v25 = *(_OWORD *)a3;
      *((_OWORD *)v25 + 1) = v27;
      uint64_t v19 = v25 + 72;
      if (v15 != v20)
      {
        do
        {
          *(_OWORD *)(v25 - 72) = *(_OWORD *)(v15 - 72);
          long long v28 = *(_OWORD *)(v15 - 56);
          long long v29 = *(_OWORD *)(v15 - 40);
          long long v30 = *(_OWORD *)(v15 - 24);
          *((void *)v25 - 1) = *((void *)v15 - 1);
          *(_OWORD *)(v25 - 24) = v30;
          *(_OWORD *)(v25 - 40) = v29;
          *(_OWORD *)(v25 - 56) = v28;
          v25 -= 72;
          v15 -= 72;
        }
        while (v15 != v20);
        uint64_t v15 = (char *)a1[10];
      }
      a1[10] = v25;
      a1[11] = v19;
      a1[12] = &v24[72 * v23];
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a3;
      long long v16 = *(_OWORD *)(a3 + 16);
      long long v17 = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a3 + 48);
      *((void *)v15 + 8) = *(void *)(a3 + 64);
      *((_OWORD *)v15 + 2) = v17;
      *((_OWORD *)v15 + 3) = v18;
      *((_OWORD *)v15 + 1) = v16;
      uint64_t v19 = v15 + 72;
    }
    a1[11] = v19;
    uint64_t v11 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10] + 72 * (((uint64_t)v5 - a1[7]) >> 3);
    long long v9 = *(_OWORD *)(a3 + 32);
    long long v8 = *(_OWORD *)(a3 + 48);
    long long v10 = *(_OWORD *)(a3 + 16);
    *(void *)(v7 + 64) = *(void *)(a3 + 64);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = v8;
    *(_OWORD *)(v7 + 16) = v10;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a3;
    uint64_t v11 = a1[31];
    if (v7 != a1[11])
    {
      uint64_t v12 = (void *)a1[16];
      if (v12)
      {
        while (1)
        {
          uint64_t v35 = &v33;
          uint64_t v36 = 1;
          uint64_t v34 = v11;
          uint64_t v13 = v12[6];
          if (!v13) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v13 + 48))(v13, &v34, &v35);
          uint64_t v12 = (void *)*v12;
          if (!v12) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  unint64_t v31 = (void *)a1[22];
  if (v31)
  {
    while (1)
    {
      uint64_t v35 = &v33;
      uint64_t v36 = 1;
      uint64_t v34 = v11;
      uint64_t v32 = v31[6];
      if (!v32) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v32 + 48))(v32, &v34, &v35);
      unint64_t v31 = (void *)*v31;
      if (!v31) {
        return;
      }
    }
    goto LABEL_29;
  }
}

double _ZNSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__1NS_9allocatorISJ_EEFvRN12arComponents12ScaleToApplyEbEEclESO_Ob(uint64_t a1, double *a2)
{
  double result = *a2 * *(float *)(**(void **)(a1 + 8) + 168);
  *a2 = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__1NS_9allocatorISJ_EEFvRN12arComponents12ScaleToApplyEbEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576638;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__1NS_9allocatorISJ_EEFvRN12arComponents12ScaleToApplyEbEE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF576638;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__1NS_9allocatorISJ_EEFvRN12arComponents12ScaleToApplyEbEED0Ev()
{
}

double _ZNSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__0NS_9allocatorISJ_EEFvRN12arComponents28UpRelativeTranslationToApplyEbEEclESO_Ob(uint64_t a1, double *a2)
{
  double result = *a2 + *(double *)(**(void **)(a1 + 8) + 120) * 0.0000000249532021;
  *a2 = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__0NS_9allocatorISJ_EEFvRN12arComponents28UpRelativeTranslationToApplyEbEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5765F0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__0NS_9allocatorISJ_EEFvRN12arComponents28UpRelativeTranslationToApplyEbEE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5765F0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md23LabelsExternalMeshLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13LabelsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_25LabelsExternalMeshContextEE3__0NS_9allocatorISJ_EEFvRN12arComponents28UpRelativeTranslationToApplyEbEED0Ev()
{
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          --a1[11];
          uint64_t v13 = (void *)a1[28];
          if (v13)
          {
            uint64_t v14 = a1[31];
            while (1)
            {
              v19[0] = &v17;
              v19[1] = 1;
              uint64_t v18 = v14;
              uint64_t v15 = v13[6];
              if (!v15) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v15 + 48))(v15, &v18, v19);
              uint64_t v13 = (void *)*v13;
              if (!v13) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::~ComponentStorageWrapper(v16);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          --a1[11];
          uint64_t v13 = (void *)a1[28];
          if (v13)
          {
            uint64_t v14 = a1[31];
            while (1)
            {
              v19[0] = &v17;
              v19[1] = 1;
              uint64_t v18 = v14;
              uint64_t v15 = v13[6];
              if (!v15) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v15 + 48))(v15, &v18, v19);
              uint64_t v13 = (void *)*v13;
              if (!v13) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::~ComponentStorageWrapper(v16);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          --a1[11];
          uint64_t v13 = (void *)a1[28];
          if (v13)
          {
            uint64_t v14 = a1[31];
            while (1)
            {
              v19[0] = &v17;
              v19[1] = 1;
              uint64_t v18 = v14;
              uint64_t v15 = v13[6];
              if (!v15) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v15 + 48))(v15, &v18, v19);
              uint64_t v13 = (void *)*v13;
              if (!v13) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::~ComponentStorageWrapper(v16);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>(int8x8_t *a1, size_t a2, unint64_t a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0xCBF29CE484222325;
  unint64_t v8 = 0xCBF29CE484222325;
  do
    unint64_t v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_787[v6++ + 38]);
  while (v6 != 116);
  uint64_t v9 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v8);
  uint64_t v10 = v9[4];
  if (a2 >> 39 < (v9[5] - v10) >> 3)
  {
    uint64_t v11 = *(void *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v14 = v9[7];
      uint64_t v13 = v9[8];
      if (v12 < (v13 - v14) >> 3)
      {
        uint64_t v15 = v14 + 8 * v12;
        if (v15 != v13 && *(_DWORD *)(v15 + 4) == HIDWORD(a2))
        {
          uint64_t v17 = v9[10];
          uint64_t v18 = (unsigned __int16 **)(v17 + 24 * v12);
          if (v18 != (unsigned __int16 **)v9[11] && v17 != 0)
          {
            unint64_t v20 = HIDWORD(a3);
            unint64_t v22 = *v18;
            unint64_t v21 = v18[1];
            unint64_t v23 = *v18;
            if (*v18 != v21)
            {
              while (__PAIR64__(v23[1], *v23) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                   || *((_DWORD *)v23 + 1) != HIDWORD(a3))
              {
                v23 += 4;
                if (v23 == v21)
                {
                  unint64_t v23 = v18[1];
                  break;
                }
              }
            }
            if (v23 != v21)
            {
              uint64_t v24 = v23 + 4;
              if (v23 + 4 != v21)
              {
                do
                {
                  if (__PAIR64__(v24[1], *v24) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                    || *((_DWORD *)v24 + 1) != HIDWORD(a3))
                  {
                    *(void *)unint64_t v23 = *(void *)v24;
                    v23 += 4;
                  }
                  v24 += 4;
                }
                while (v24 != v21);
                unint64_t v22 = *v18;
                unint64_t v21 = v18[1];
              }
              if (v23 != v21)
              {
                int64_t v25 = (char *)v21 - (char *)(v23 + 4);
                if (v21 != v23 + 4)
                {
                  memmove(v23, v23 + 4, (char *)v21 - (char *)(v23 + 4));
                  unint64_t v22 = *v18;
                }
                unint64_t v21 = (unsigned __int16 *)((char *)v23 + v25);
                v18[1] = (unsigned __int16 *)((char *)v23 + v25);
                unint64_t v20 = HIDWORD(a3);
              }
            }
            if (v22 != v21) {
              goto LABEL_43;
            }
            uint64_t v26 = 0;
            unint64_t v27 = 0xCBF29CE484222325;
            do
              unint64_t v27 = 0x100000001B3 * (v27 ^ aStdStringViewG_787[v26++ + 38]);
            while (v26 != 116);
            long long v28 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v27);
            size_t v46 = a2;
            if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v28 + 4, HIDWORD(a2))&& (long long v29 = (void *)v28[28]) != 0)
            {
              uint64_t v30 = v28[31];
              while (1)
              {
                v48[0] = &v46;
                v48[1] = 1;
                uint64_t v47 = v30;
                uint64_t v31 = v29[6];
                if (!v31) {
                  break;
                }
                (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v31 + 48))(v31, &v47, v48);
                long long v29 = (void *)*v29;
                if (!v29) {
                  goto LABEL_43;
                }
              }
              std::__throw_bad_function_call[abi:nn180100]();
              gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::LabelIconRequestData>>();
            }
            else
            {
LABEL_43:
              uint64_t v32 = 0;
              unint64_t v33 = 0xCBF29CE484222325;
              do
                unint64_t v33 = 0x100000001B3 * (v33 ^ aStdStringViewG_788[v32++ + 38]);
              while (v32 != 112);
              uint64_t v34 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v33);
              uint64_t v35 = v34[4];
              if (a3 >> 39 < (v34[5] - v35) >> 3)
              {
                uint64_t v36 = *(void *)(v35 + 8 * (a3 >> 39));
                if (v36)
                {
                  unint64_t v37 = *(unsigned __int16 *)(v36 + 2 * (HIDWORD(a3) & 0x7F));
                  uint64_t v39 = v34[7];
                  uint64_t v38 = v34[8];
                  if (v37 < (v38 - v39) >> 3)
                  {
                    uint64_t v40 = v39 + 8 * v37;
                    if (v40 != v38 && *(_DWORD *)(v40 + 4) == v20)
                    {
                      uint64_t v42 = v34[10];
                      if (v42 + 12 * v37 != v34[11] && v42 != 0)
                      {
                        gdc::component::DataRequestObserver::updateStatusCounts(a1, a3, a2, *(unsigned __int8 *)(v42 + 12 * v37 + 8), 0);
                        for (uint64_t i = 0; i != 112; ++i)
                          unint64_t v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_788[i + 38]);
                        int64_t v45 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>(a1, v7);
                        gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::remove(v45, a3);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::LabelIconRequestData>>(int8x8_t *a1, size_t a2, unint64_t a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0xCBF29CE484222325;
  unint64_t v8 = 0xCBF29CE484222325;
  do
    unint64_t v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_785[v6++ + 38]);
  while (v6 != 114);
  uint64_t v9 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v8);
  uint64_t v10 = v9[4];
  if (a2 >> 39 < (v9[5] - v10) >> 3)
  {
    uint64_t v11 = *(void *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v14 = v9[7];
      uint64_t v13 = v9[8];
      if (v12 < (v13 - v14) >> 3)
      {
        uint64_t v15 = v14 + 8 * v12;
        if (v15 != v13 && *(_DWORD *)(v15 + 4) == HIDWORD(a2))
        {
          uint64_t v17 = v9[10];
          uint64_t v18 = (unsigned __int16 **)(v17 + 24 * v12);
          if (v18 != (unsigned __int16 **)v9[11] && v17 != 0)
          {
            unint64_t v20 = HIDWORD(a3);
            unint64_t v22 = *v18;
            unint64_t v21 = v18[1];
            unint64_t v23 = *v18;
            if (*v18 != v21)
            {
              while (__PAIR64__(v23[1], *v23) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                   || *((_DWORD *)v23 + 1) != HIDWORD(a3))
              {
                v23 += 4;
                if (v23 == v21)
                {
                  unint64_t v23 = v18[1];
                  break;
                }
              }
            }
            if (v23 != v21)
            {
              uint64_t v24 = v23 + 4;
              if (v23 + 4 != v21)
              {
                do
                {
                  if (__PAIR64__(v24[1], *v24) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                    || *((_DWORD *)v24 + 1) != HIDWORD(a3))
                  {
                    *(void *)unint64_t v23 = *(void *)v24;
                    v23 += 4;
                  }
                  v24 += 4;
                }
                while (v24 != v21);
                unint64_t v22 = *v18;
                unint64_t v21 = v18[1];
              }
              if (v23 != v21)
              {
                int64_t v25 = (char *)v21 - (char *)(v23 + 4);
                if (v21 != v23 + 4)
                {
                  memmove(v23, v23 + 4, (char *)v21 - (char *)(v23 + 4));
                  unint64_t v22 = *v18;
                }
                unint64_t v21 = (unsigned __int16 *)((char *)v23 + v25);
                v18[1] = (unsigned __int16 *)((char *)v23 + v25);
                unint64_t v20 = HIDWORD(a3);
              }
            }
            if (v22 != v21) {
              goto LABEL_43;
            }
            uint64_t v26 = 0;
            unint64_t v27 = 0xCBF29CE484222325;
            do
              unint64_t v27 = 0x100000001B3 * (v27 ^ aStdStringViewG_785[v26++ + 38]);
            while (v26 != 114);
            long long v28 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v27);
            size_t v46 = a2;
            if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v28 + 4, HIDWORD(a2))&& (long long v29 = (void *)v28[28]) != 0)
            {
              uint64_t v30 = v28[31];
              while (1)
              {
                v48[0] = &v46;
                v48[1] = 1;
                uint64_t v47 = v30;
                uint64_t v31 = v29[6];
                if (!v31) {
                  break;
                }
                (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v31 + 48))(v31, &v47, v48);
                long long v29 = (void *)*v29;
                if (!v29) {
                  goto LABEL_43;
                }
              }
              std::__throw_bad_function_call[abi:nn180100]();
              gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>();
            }
            else
            {
LABEL_43:
              uint64_t v32 = 0;
              unint64_t v33 = 0xCBF29CE484222325;
              do
                unint64_t v33 = 0x100000001B3 * (v33 ^ aStdStringViewG_786[v32++ + 38]);
              while (v32 != 110);
              uint64_t v34 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v33);
              uint64_t v35 = v34[4];
              if (a3 >> 39 < (v34[5] - v35) >> 3)
              {
                uint64_t v36 = *(void *)(v35 + 8 * (a3 >> 39));
                if (v36)
                {
                  unint64_t v37 = *(unsigned __int16 *)(v36 + 2 * (HIDWORD(a3) & 0x7F));
                  uint64_t v39 = v34[7];
                  uint64_t v38 = v34[8];
                  if (v37 < (v38 - v39) >> 3)
                  {
                    uint64_t v40 = v39 + 8 * v37;
                    if (v40 != v38 && *(_DWORD *)(v40 + 4) == v20)
                    {
                      uint64_t v42 = v34[10];
                      if (v42 + 12 * v37 != v34[11] && v42 != 0)
                      {
                        gdc::component::DataRequestObserver::updateStatusCounts(a1, a3, a2, *(unsigned __int8 *)(v42 + 12 * v37 + 8), 0);
                        for (uint64_t i = 0; i != 110; ++i)
                          unint64_t v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_786[i + 38]);
                        int64_t v45 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>(a1, v7);
                        gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::LabelIconRequestData>>>::remove(v45, a3);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void gdc::component::DataRequestObserver::unobserveRequest<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>(int8x8_t *a1, size_t a2, unint64_t a3)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0xCBF29CE484222325;
  unint64_t v8 = 0xCBF29CE484222325;
  do
    unint64_t v8 = 0x100000001B3 * (v8 ^ aStdStringViewG_783[v6++ + 38]);
  while (v6 != 118);
  uint64_t v9 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(a1, v8);
  uint64_t v10 = v9[4];
  if (a2 >> 39 < (v9[5] - v10) >> 3)
  {
    uint64_t v11 = *(void *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v14 = v9[7];
      uint64_t v13 = v9[8];
      if (v12 < (v13 - v14) >> 3)
      {
        uint64_t v15 = v14 + 8 * v12;
        if (v15 != v13 && *(_DWORD *)(v15 + 4) == HIDWORD(a2))
        {
          uint64_t v17 = v9[10];
          uint64_t v18 = (unsigned __int16 **)(v17 + 24 * v12);
          if (v18 != (unsigned __int16 **)v9[11] && v17 != 0)
          {
            unint64_t v20 = HIDWORD(a3);
            unint64_t v22 = *v18;
            unint64_t v21 = v18[1];
            unint64_t v23 = *v18;
            if (*v18 != v21)
            {
              while (__PAIR64__(v23[1], *v23) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                   || *((_DWORD *)v23 + 1) != HIDWORD(a3))
              {
                v23 += 4;
                if (v23 == v21)
                {
                  unint64_t v23 = v18[1];
                  break;
                }
              }
            }
            if (v23 != v21)
            {
              uint64_t v24 = v23 + 4;
              if (v23 + 4 != v21)
              {
                do
                {
                  if (__PAIR64__(v24[1], *v24) != __PAIR64__(WORD1(a3), (unsigned __int16)a3)
                    || *((_DWORD *)v24 + 1) != HIDWORD(a3))
                  {
                    *(void *)unint64_t v23 = *(void *)v24;
                    v23 += 4;
                  }
                  v24 += 4;
                }
                while (v24 != v21);
                unint64_t v22 = *v18;
                unint64_t v21 = v18[1];
              }
              if (v23 != v21)
              {
                int64_t v25 = (char *)v21 - (char *)(v23 + 4);
                if (v21 != v23 + 4)
                {
                  memmove(v23, v23 + 4, (char *)v21 - (char *)(v23 + 4));
                  unint64_t v22 = *v18;
                }
                unint64_t v21 = (unsigned __int16 *)((char *)v23 + v25);
                v18[1] = (unsigned __int16 *)((char *)v23 + v25);
                unint64_t v20 = HIDWORD(a3);
              }
            }
            if (v22 != v21) {
              goto LABEL_43;
            }
            uint64_t v26 = 0;
            unint64_t v27 = 0xCBF29CE484222325;
            do
              unint64_t v27 = 0x100000001B3 * (v27 ^ aStdStringViewG_783[v26++ + 38]);
            while (v26 != 118);
            long long v28 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(a1, v27);
            size_t v48 = a2;
            if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver::ObserverList<gdc::component::DataRequest<arComponents::XYPlaneMeshRequestData>>>::erase(v28 + 4, HIDWORD(a2))&& (long long v29 = (void *)v28[28]) != 0)
            {
              uint64_t v30 = v28[31];
              while (1)
              {
                v50[0] = &v48;
                v50[1] = 1;
                uint64_t v49 = v30;
                uint64_t v31 = v29[6];
                if (!v31) {
                  break;
                }
                (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v31 + 48))(v31, &v49, v50);
                long long v29 = (void *)*v29;
                if (!v29) {
                  goto LABEL_43;
                }
              }
              std::__throw_bad_function_call[abi:nn180100]();
              gdc::ComponentStorageWrapper<arComponents::LabelFeatureArrivalModel>::contains(v46, v47);
            }
            else
            {
LABEL_43:
              uint64_t v32 = 0;
              unint64_t v33 = 0xCBF29CE484222325;
              do
                unint64_t v33 = 0x100000001B3 * (v33 ^ aStdStringViewG_784[v32++ + 38]);
              while (v32 != 114);
              uint64_t v34 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(a1, v33);
              uint64_t v35 = v34[4];
              if (a3 >> 39 < (v34[5] - v35) >> 3)
              {
                uint64_t v36 = *(void *)(v35 + 8 * (a3 >> 39));
                if (v36)
                {
                  unint64_t v37 = *(unsigned __int16 *)(v36 + 2 * (HIDWORD(a3) & 0x7F));
                  uint64_t v39 = v34[7];
                  uint64_t v38 = v34[8];
                  if (v37 < (v38 - v39) >> 3)
                  {
                    uint64_t v40 = v39 + 8 * v37;
                    if (v40 != v38 && *(_DWORD *)(v40 + 4) == v20)
                    {
                      uint64_t v42 = v34[10];
                      if (v42 + 12 * v37 != v34[11] && v42 != 0)
                      {
                        gdc::component::DataRequestObserver::updateStatusCounts(a1, a3, a2, *(unsigned __int8 *)(v42 + 12 * v37 + 8), 0);
                        for (uint64_t i = 0; i != 114; ++i)
                          unint64_t v7 = 0x100000001B3 * (v7 ^ aStdStringViewG_784[i + 38]);
                        int64_t v45 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>(a1, v7);
                        gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::Observer<gdc::component::DataRequest<arComponents::ExternalAssetRequestData>>>::remove(v45, a3);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

BOOL gdc::ComponentStorageWrapper<arComponents::LabelFeatureArrivalModel>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::LabelFeatureArrivalModel>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::LabelFeatureArrivalModel>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::LabelFeatureArrivalModel>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v24 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (void *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v17 = *(void *)(v15 - 16);
  uint64_t v16 = *(void *)(v15 - 8);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v18 = (std::__shared_weak_count *)v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = a1[11];
  unint64_t v20 = *(std::__shared_weak_count **)(v19 - 8);
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  a1[11] = v19 - 16;
  unint64_t v21 = (void *)a1[28];
  if (!v21) {
    return 1;
  }
  uint64_t v22 = a1[31];
  while (1)
  {
    v26[0] = &v24;
    v26[1] = 1;
    uint64_t v25 = v22;
    uint64_t v23 = v21[6];
    if (!v23) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v23 + 48))(v23, &v25, v26);
    unint64_t v21 = (void *)*v21;
    if (!v21) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

void ___ZL40GEOGetVectorKitLabelExternalMeshLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "LabelExternalMeshLogic");
  uint64_t v1 = (void *)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
  GEOGetVectorKitLabelExternalMeshLogicLog(void)::log = (uint64_t)v0;
}

void md::LabelsExternalMeshLogic::processPendingShadowRequests(void)::$_0::operator()(void *a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = (void *)gdc::Registry::storage<arComponents::XYPlaneMeshRequest>(*(int8x8_t **)(*a1 + 120));
  uint64_t v10 = v9[4];
  if (a2 >> 39 < (v9[5] - v10) >> 3)
  {
    uint64_t v11 = *(void *)(v10 + 8 * (a2 >> 39));
    if (v11)
    {
      unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v14 = v9[7];
      uint64_t v13 = v9[8];
      if (v12 < (v13 - v14) >> 3)
      {
        uint64_t v15 = v14 + 8 * v12;
        if (v15 != v13 && *(_DWORD *)(v15 + 4) == HIDWORD(a2)) {
          return;
        }
      }
    }
  }
  uint64_t v17 = *a3;
  unint64_t v18 = (std::__shared_weak_count *)operator new(0x98uLL);
  v18->__shared_weak_owners_ = 0;
  v18->__shared_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582080;
  LODWORD(v18[1].__vftable) = *(_DWORD *)(v17 + 8);
  BYTE4(v18[1].__vftable) = 1;
  *(_OWORD *)&v18[1].__shared_owners_ = *(_OWORD *)a4;
  v18[2].__vftable = *(std::__shared_weak_count_vtbl **)(a4 + 16);
  long long v19 = *(_OWORD *)(v17 + 16);
  v18[3].__vftable = *(std::__shared_weak_count_vtbl **)(v17 + 32);
  *(_OWORD *)&v18[2].__shared_owners_ = v19;
  long long v20 = *(_OWORD *)(v17 + 40);
  v18[4].__vftable = *(std::__shared_weak_count_vtbl **)(v17 + 56);
  *(_OWORD *)&v18[3].__shared_owners_ = v20;
  v18[4].__shared_owners_ = *(void *)(v17 + 64);
  uint64_t v21 = *(void *)(v17 + 88);
  *(_OWORD *)&v18[4].__shared_weak_owners_ = *(_OWORD *)(v17 + 72);
  v18[5].__shared_owners_ = v21;
  LODWORD(v18[5].__shared_weak_owners_) = 1065353216;
  BYTE4(v18[5].__shared_weak_owners_) = 0;
  *(_DWORD *)((char *)&v18[5].__shared_weak_owners_ + 5) = *(_DWORD *)(v17 + 177);
  *(void *)&long long v109 = v18 + 1;
  *((void *)&v109 + 1) = v18;
  *(void *)buf = v18 + 1;
  *(void *)uint64_t v113 = v18;
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::lock((std::mutex *)(v17 + 96));
  if (*(unsigned char *)(v17 + 176) == 4)
  {
    std::mutex::unlock((std::mutex *)(v17 + 96));
    BOOL v22 = 0;
  }
  else
  {
    if (BYTE4(v18[1].__vftable) == *(unsigned __int8 *)(v17 + 12))
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v23 = *(std::__shared_weak_count **)(v17 + 168);
      *(void *)(v17 + 160) = v18 + 1;
      *(void *)(v17 + 168) = v18;
      if (v23)
      {
        if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    uint64_t v24 = *(void *)(v17 + 160);
    BOOL v22 = v24 != 0;
    if (v24) {
      char v25 = 2;
    }
    else {
      char v25 = 3;
    }
    *(unsigned char *)(v17 + 176) = v25;
    unint64_t v18 = *(std::__shared_weak_count **)v113;
    std::mutex::unlock((std::mutex *)(v17 + 96));
    if (!*(void *)v113)
    {
LABEL_19:
      if (v22) {
        goto LABEL_20;
      }
      goto LABEL_29;
    }
  }
  if (atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (v22)
  {
LABEL_20:
    if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_39646);
    }
    uint64_t v26 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      int v27 = *(_DWORD *)(v17 + 8);
      long long v28 = "ARFeatureShadow";
      if (!*(unsigned char *)(v17 + 12)) {
        long long v28 = "ARArrival";
      }
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)uint64_t v113 = 2080;
      *(void *)&v113[2] = v28;
      _os_log_impl(&dword_1A1780000, v26, OS_LOG_TYPE_INFO, "Fulfilled request(%d) for external mesh type:%s", buf, 0x12u);
    }
    long long v29 = *(int8x8_t **)(v8 + 120);
    if (*((void *)&v109 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v109 + 1) + 8), 1uLL, memory_order_relaxed);
      *(void *)uint64_t v113 = *((void *)&v109 + 1);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v109 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      *(void *)uint64_t v113 = 0;
    }
    *(void *)buf = v109;
    uint64_t v50 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(v29);
    gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v50, a2, buf);
    uint64_t v51 = *(std::__shared_weak_count **)v113;
    if (*(void *)v113 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v113 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
    if (*((void *)&v109 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v109 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v109 + 1) + 16))(*((void *)&v109 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v109 + 1));
    }
    uint64_t v52 = *(int8x8_t **)(v8 + 120);
    *((void *)&v108 + 1) = *((void *)&v109 + 1);
    if (*((void *)&v109 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v109 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v53 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARFeatureShadowExternalMesh>>>(v52);
    unint64_t v110 = a2;
    unint64_t v54 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v53 + 4, (uint64_t)&v110);
    if (v55)
    {
      double v62 = (char *)v53[11];
      unint64_t v61 = v53[12];
      if ((unint64_t)v62 >= v61)
      {
        uint64_t v64 = (char *)v53[10];
        uint64_t v65 = (v62 - v64) >> 4;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 60) {
          abort();
        }
        uint64_t v67 = v61 - (void)v64;
        if (v67 >> 3 > v66) {
          unint64_t v66 = v67 >> 3;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          if (v68 >> 60) {
            goto LABEL_138;
          }
          uint64_t v69 = (char *)operator new(16 * v68);
        }
        else
        {
          uint64_t v69 = 0;
        }
        uint64_t v70 = &v69[16 * v65];
        *(_OWORD *)uint64_t v70 = v109;
        if (*((void *)&v109 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v109 + 1) + 8), 1uLL, memory_order_relaxed);
          uint64_t v64 = (char *)v53[10];
          double v62 = (char *)v53[11];
        }
        uint64_t v71 = &v69[16 * v68];
        char v63 = v70 + 16;
        if (v62 == v64)
        {
          v53[10] = v70;
          v53[11] = v63;
          v53[12] = v71;
        }
        else
        {
          do
          {
            long long v72 = *((_OWORD *)v62 - 1);
            v62 -= 16;
            *((_OWORD *)v70 - 1) = v72;
            v70 -= 16;
            *(void *)double v62 = 0;
            *((void *)v62 + 1) = 0;
          }
          while (v62 != v64);
          uint64_t v64 = (char *)v53[10];
          unint64_t v73 = (char *)v53[11];
          v53[10] = v70;
          v53[11] = v63;
          for (v53[12] = v71; v73 != v64; v73 -= 16)
          {
            size_t v74 = (std::__shared_weak_count *)*((void *)v73 - 1);
            if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
        }
        if (v64) {
          operator delete(v64);
        }
      }
      else
      {
        *(_OWORD *)double v62 = v109;
        if (*((void *)&v109 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v109 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        char v63 = v62 + 16;
      }
      v53[11] = v63;
      uint64_t v58 = v53[31];
    }
    else
    {
      uint64_t v56 = v53[10] + 2 * ((void)v54 - v53[7]);
      long long v108 = 0uLL;
      uint64_t v57 = *(std::__shared_weak_count **)(v56 + 8);
      *(_OWORD *)uint64_t v56 = v109;
      if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
      uint64_t v58 = v53[31];
      if (v56 != v53[11])
      {
        uint64_t v59 = (void *)v53[16];
        if (v59)
        {
          while (1)
          {
            *(void *)buf = &v110;
            *(void *)uint64_t v113 = 1;
            uint64_t v111 = v58;
            uint64_t v60 = v59[6];
            if (!v60) {
              break;
            }
            (*(void (**)(uint64_t, uint64_t *, uint8_t *))(*(void *)v60 + 48))(v60, &v111, buf);
            uint64_t v59 = (void *)*v59;
            if (!v59) {
              goto LABEL_91;
            }
          }
LABEL_136:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
LABEL_138:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        goto LABEL_91;
      }
    }
    for (uint64_t i = (void *)v53[22]; i; uint64_t i = (void *)*i)
    {
      *(void *)buf = &v110;
      *(void *)uint64_t v113 = 1;
      uint64_t v111 = v58;
      uint64_t v76 = i[6];
      if (!v76) {
        goto LABEL_136;
      }
      (*(void (**)(uint64_t, uint64_t *, uint8_t *))(*(void *)v76 + 48))(v76, &v111, buf);
    }
LABEL_91:
    if (*((void *)&v108 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v108 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v108 + 1) + 16))(*((void *)&v108 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v108 + 1));
    }
    int v77 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(int8x8_t **)(v8 + 120));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v77, a2);
    BOOL v78 = *(char **)(v8 + 176);
    uint64_t v79 = *(char **)(v8 + 184);
    uint64_t v80 = v8 + 176;
    if (v78 != v79)
    {
      while ((void)v109 != *(void *)v78)
      {
        v78 += 16;
        if (v78 == v79) {
          goto LABEL_99;
        }
      }
    }
    if (v78 == v79)
    {
LABEL_99:
      *(void *)buf = v109;
      *(void *)uint64_t v113 = 0xFFFFFFFF00000000;
      BOOL v78 = geo::linear_map<md::LabelExternalMesh *,gdc::Entity,std::equal_to<md::LabelExternalMesh *>,std::allocator<std::pair<md::LabelExternalMesh *,gdc::Entity>>,std::vector<std::pair<md::LabelExternalMesh *,gdc::Entity>>>::insert(v80, buf);
    }
    *((void *)v78 + 1) = a2;
    uint64_t v81 = a1[1];
    char v83 = *(char **)v81;
    uint64_t v82 = *(unint64_t **)(v81 + 8);
    uint64_t v84 = ((uint64_t)v82 - *(void *)v81) >> 3;
    unint64_t v85 = *(void *)(v81 + 24);
    if (v85 >= v84 + 1)
    {
LABEL_132:
      unint64_t *v82 = a2;
      *(void *)(v81 + 8) += 8;
      uint64_t v106 = (std::__shared_weak_count *)*((void *)&v109 + 1);
      if (!*((void *)&v109 + 1)) {
        return;
      }
      goto LABEL_133;
    }
    int32x4_t v86 = *(char **)(v81 + 16);
    unint64_t v87 = (1 << -(char)__clz(v85 + 1));
    if (v85 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v87 = 1;
    }
    if (v87 <= v84 + 1) {
      unint64_t v88 = v84 + 1;
    }
    else {
      unint64_t v88 = v87;
    }
    uint64_t v89 = (char *)malloc_type_malloc(8 * v88, 0x100004000313F17uLL);
    uint64_t v90 = v89;
    unsigned int v91 = *(uint64_t **)v81;
    uint64_t v92 = *(char **)(v81 + 8);
    if (*(char **)v81 != v92)
    {
      unint64_t v93 = v92 - (char *)v91 - 8;
      if (v93 < 0x18)
      {
        uint64_t v94 = v89;
      }
      else
      {
        uint64_t v94 = v89;
        if ((unint64_t)(v89 - (char *)v91) >= 0x20)
        {
          uint64_t v95 = (v93 >> 3) + 1;
          uint64_t v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v94 = &v89[v96];
          float64x2_t v97 = (long long *)(v91 + 2);
          unint64_t v98 = v89 + 16;
          uint64_t v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v100 = *v97;
            *(v98 - 1) = *(v97 - 1);
            *unint64_t v98 = v100;
            v97 += 2;
            v98 += 2;
            v99 -= 4;
          }
          while (v99);
          if (v95 == (v95 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_129;
          }
          unsigned int v91 = (uint64_t *)((char *)v91 + v96);
        }
      }
      do
      {
        uint64_t v107 = *v91++;
        *(void *)uint64_t v94 = v107;
        v94 += 8;
      }
      while (v91 != (uint64_t *)v92);
    }
LABEL_129:
    if (v83 != v86) {
      free(*(void **)v81);
    }
    uint64_t v82 = (unint64_t *)&v90[8 * v84];
    *(void *)uint64_t v81 = v90;
    *(void *)(v81 + 8) = v82;
    *(void *)(v81 + 24) = v88;
    goto LABEL_132;
  }
LABEL_29:
  uint64_t v30 = a1[2];
  uint64_t v32 = *(char **)v30;
  uint64_t v31 = *(unint64_t **)(v30 + 8);
  uint64_t v33 = ((uint64_t)v31 - *(void *)v30) >> 3;
  unint64_t v34 = *(void *)(v30 + 24);
  if (v34 >= v33 + 1) {
    goto LABEL_118;
  }
  uint64_t v35 = *(char **)(v30 + 16);
  unint64_t v36 = (1 << -(char)__clz(v34 + 1));
  if (v34 >= 0xFFFFFFFFFFFFFFFELL) {
    unint64_t v36 = 1;
  }
  if (v36 <= v33 + 1) {
    unint64_t v37 = v33 + 1;
  }
  else {
    unint64_t v37 = v36;
  }
  uint64_t v38 = (char *)malloc_type_malloc(8 * v37, 0x100004000313F17uLL);
  uint64_t v39 = v38;
  uint64_t v40 = *(uint64_t **)v30;
  unint64_t v41 = *(char **)(v30 + 8);
  if (*(char **)v30 != v41)
  {
    unint64_t v42 = v41 - (char *)v40 - 8;
    if (v42 < 0x18)
    {
      unint64_t v43 = v38;
    }
    else
    {
      unint64_t v43 = v38;
      if ((unint64_t)(v38 - (char *)v40) >= 0x20)
      {
        uint64_t v44 = (v42 >> 3) + 1;
        uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v43 = &v38[v45];
        size_t v46 = (long long *)(v40 + 2);
        unint64_t v47 = v38 + 16;
        uint64_t v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v46 += 2;
          v47 += 2;
          v48 -= 4;
        }
        while (v48);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_115;
        }
        uint64_t v40 = (uint64_t *)((char *)v40 + v45);
      }
    }
    do
    {
      uint64_t v101 = *v40++;
      *(void *)unint64_t v43 = v101;
      v43 += 8;
    }
    while (v40 != (uint64_t *)v41);
  }
LABEL_115:
  if (v32 != v35) {
    free(*(void **)v30);
  }
  uint64_t v31 = (unint64_t *)&v39[8 * v33];
  *(void *)uint64_t v30 = v39;
  *(void *)(v30 + 8) = v31;
  *(void *)(v30 + 24) = v37;
LABEL_118:
  *uint64_t v31 = a2;
  *(void *)(v30 + 8) += 8;
  if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_39646);
  }
  uint64_t v102 = (id)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
  if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
  {
    int v103 = *(_DWORD *)(v17 + 8);
    std::mutex::lock((std::mutex *)(v17 + 96));
    char v104 = *(unsigned char *)(v17 + 176);
    std::mutex::unlock((std::mutex *)(v17 + 96));
    if ((v104 - 1) > 3u) {
      unint64_t v105 = "None";
    }
    else {
      unint64_t v105 = off_1E5A95F00[(v104 - 1)];
    }
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v103;
    *(_WORD *)uint64_t v113 = 2080;
    *(void *)&v113[2] = v105;
    __int16 v114 = 2080;
    double v115 = "false";
    __int16 v116 = 2080;
    double v117 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/LabelsExternalMeshLogic.mm";
    __int16 v118 = 1024;
    int v119 = 408;
    _os_log_impl(&dword_1A1780000, v102, OS_LOG_TYPE_ERROR, "Failed to fulfill request (id:%d status:%s): Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x2Cu);
  }

  uint64_t v106 = (std::__shared_weak_count *)*((void *)&v109 + 1);
  if (*((void *)&v109 + 1))
  {
LABEL_133:
    if (!atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
}

void sub_1A25F3E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *geo::linear_map<md::LabelExternalMesh *,gdc::Entity,std::equal_to<md::LabelExternalMesh *>,std::allocator<std::pair<md::LabelExternalMesh *,gdc::Entity>>,std::vector<std::pair<md::LabelExternalMesh *,gdc::Entity>>>::insert(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)a1;
  uint64_t v5 = *(char **)(a1 + 8);
  double result = v4;
  if (v4 != v5)
  {
    double result = v4;
    while (*a2 != *(void *)result)
    {
      result += 16;
      if (result == v5) {
        goto LABEL_7;
      }
    }
  }
  if (result == v5)
  {
LABEL_7:
    unint64_t v7 = *(void *)(a1 + 16);
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = (v5 - v4) >> 4;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60) {
        abort();
      }
      uint64_t v11 = v7 - (void)v4;
      if (v11 >> 3 > v10) {
        unint64_t v10 = v11 >> 3;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v13 = (char *)operator new(16 * v12);
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[16 * v9];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
      uint64_t v8 = v14 + 16;
      if (v4 != v5)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v5 - 1);
          v14 -= 16;
          v5 -= 16;
        }
        while (v5 != v4);
        uint64_t v4 = *(char **)a1;
      }
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = &v13[16 * v12];
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
      uint64_t v8 = v5 + 16;
    }
    *(void *)(a1 + 8) = v8;
    return (char *)(v8 - 1);
  }
  return result;
}

void std::__shared_ptr_emplace<md::ARFeatureShadowExternalMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ARFeatureShadowExternalMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::IsFailed>(int8x8_t *a1)
{
  unint64_t v10 = 0xBD48D0FDFECFEB54;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBD48D0FDFECFEB54;
    if (*(void *)&v1 <= 0xBD48D0FDFECFEB54) {
      unint64_t v3 = 0xBD48D0FDFECFEB54 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBD48D0FDFECFEB54;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBD48D0FDFECFEB54)
      {
        if (v5[2] == 0xBD48D0FDFECFEB54) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBD48D0FDFECFEB54) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBD48D0FDFECFEB54) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A25F42EC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_0::operator()(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[1];
  unint64_t v7 = (std::mutex *)(a3 + 96);
  std::mutex::lock((std::mutex *)(a3 + 96));
  uint64_t v8 = *(void *)(a3 + 160);
  if (v8) {
    atomic_store(1u, (unsigned __int8 *)(v8 + 116));
  }
  std::mutex::lock(v7);
  int v9 = *(unsigned __int8 *)(a3 + 176);
  std::mutex::unlock(v7);
  if (v9 != 4) {
    *(unsigned char *)(a3 + 176) = 3;
  }
  std::mutex::unlock(v7);
  unint64_t v10 = (char **)*a1;
  uint64_t v12 = **a1;
  uint64_t v11 = (char *)(*a1)[1];
  uint64_t v13 = (uint64_t)&v11[-v12] >> 3;
  unint64_t v14 = (*a1)[3];
  if (v14 < v13 + 1)
  {
    uint64_t v15 = v10[2];
    unint64_t v16 = (1 << -(char)__clz(v14 + 1));
    if (v14 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v16 = 1;
    }
    if (v16 <= v13 + 1) {
      unint64_t v17 = v13 + 1;
    }
    else {
      unint64_t v17 = v16;
    }
    unint64_t v18 = (char *)malloc_type_malloc(8 * v17, 0x100004000313F17uLL);
    long long v19 = v18;
    long long v20 = *v10;
    uint64_t v21 = v10[1];
    if (*v10 == v21) {
      goto LABEL_20;
    }
    unint64_t v22 = v21 - v20 - 8;
    if (v22 < 0x18)
    {
      uint64_t v23 = v18;
    }
    else
    {
      uint64_t v23 = v18;
      if ((unint64_t)(v18 - v20) >= 0x20)
      {
        uint64_t v24 = (v22 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v23 = &v18[v25];
        uint64_t v26 = (long long *)(v20 + 16);
        int v27 = v18 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *int v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_20;
        }
        v20 += v25;
      }
    }
    do
    {
      uint64_t v30 = *(void *)v20;
      v20 += 8;
      *(void *)uint64_t v23 = v30;
      v23 += 8;
    }
    while (v20 != v21);
LABEL_20:
    if ((char *)v12 != v15) {
      free(*v10);
    }
    uint64_t v11 = &v19[8 * v13];
    void *v10 = v19;
    v10[1] = v11;
    v10[3] = (char *)v17;
  }
  *(void *)uint64_t v11 = a2;
  v10[1] += 8;
  uint64_t v31 = (void *)gdc::Registry::storage<arComponents::LabelFeatureArrivalModel>((int8x8_t *)v6[15]);
  uint64_t v32 = v31[4];
  if (a2 >> 39 < (v31[5] - v32) >> 3)
  {
    uint64_t v33 = *(void *)(v32 + 8 * (a2 >> 39));
    if (v33)
    {
      unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v36 = v31[7];
      uint64_t v35 = v31[8];
      if (v34 < (v35 - v36) >> 3)
      {
        uint64_t v37 = v36 + 8 * v34;
        if (v37 != v35 && *(_DWORD *)(v37 + 4) == HIDWORD(a2))
        {
          uint64_t v39 = v31[10];
          uint64_t v40 = (void *)(v39 + 16 * v34);
          if (v40 != (void *)v31[11] && v39 != 0)
          {
            unint64_t v42 = (char **)*a1;
            uint64_t v44 = **a1;
            unint64_t v43 = (char *)(*a1)[1];
            uint64_t v45 = (uint64_t)&v43[-v44] >> 3;
            unint64_t v46 = (*a1)[3];
            if (v46 >= v45 + 1) {
              goto LABEL_53;
            }
            int32x4_t v86 = v42[2];
            unint64_t v47 = (1 << -(char)__clz(v46 + 1));
            if (v46 >= 0xFFFFFFFFFFFFFFFELL) {
              unint64_t v47 = 1;
            }
            if (v47 <= v45 + 1) {
              unint64_t v48 = v45 + 1;
            }
            else {
              unint64_t v48 = v47;
            }
            long long v49 = (char *)malloc_type_malloc(8 * v48, 0x100004000313F17uLL);
            uint64_t v50 = v49;
            uint64_t v51 = *v42;
            uint64_t v52 = v42[1];
            if (*v42 != v52)
            {
              unint64_t v53 = v52 - v51 - 8;
              if (v53 < 0x18)
              {
                unint64_t v54 = v49;
              }
              else
              {
                unint64_t v54 = v49;
                if ((unint64_t)(v49 - v51) >= 0x20)
                {
                  uint64_t v55 = (v53 >> 3) + 1;
                  uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
                  unint64_t v54 = &v49[v56];
                  uint64_t v57 = (long long *)(v51 + 16);
                  uint64_t v58 = v49 + 16;
                  uint64_t v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v60 = *v57;
                    *(v58 - 1) = *(v57 - 1);
                    *uint64_t v58 = v60;
                    v57 += 2;
                    v58 += 2;
                    v59 -= 4;
                  }
                  while (v59);
                  if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_50;
                  }
                  v51 += v56;
                }
              }
              do
              {
                uint64_t v61 = *(void *)v51;
                v51 += 8;
                *(void *)unint64_t v54 = v61;
                v54 += 8;
              }
              while (v51 != v52);
            }
LABEL_50:
            if ((char *)v44 != v86) {
              free(*v42);
            }
            unint64_t v43 = &v50[8 * v45];
            float *v42 = v50;
            v42[1] = v43;
            v42[3] = (char *)v48;
LABEL_53:
            *(void *)unint64_t v43 = *v40;
            v42[1] += 8;
            double v62 = (char **)*a1;
            char v63 = (void *)(v39 + 16 * v34 + 8);
            uint64_t v65 = **a1;
            uint64_t v64 = (char *)(*a1)[1];
            uint64_t v66 = (uint64_t)&v64[-v65] >> 3;
            unint64_t v67 = (*a1)[3];
            if (v67 >= v66 + 1)
            {
LABEL_71:
              *(void *)uint64_t v64 = *v63;
              v62[1] += 8;
              goto LABEL_72;
            }
            unint64_t v68 = v62[2];
            unint64_t v69 = (1 << -(char)__clz(v67 + 1));
            if (v67 >= 0xFFFFFFFFFFFFFFFELL) {
              unint64_t v69 = 1;
            }
            if (v69 <= v66 + 1) {
              unint64_t v70 = v66 + 1;
            }
            else {
              unint64_t v70 = v69;
            }
            uint64_t v71 = (char *)malloc_type_malloc(8 * v70, 0x100004000313F17uLL);
            long long v72 = v71;
            unint64_t v73 = *v62;
            size_t v74 = v62[1];
            if (*v62 != v74)
            {
              unint64_t v75 = v74 - v73 - 8;
              if (v75 < 0x18)
              {
                uint64_t v76 = v71;
              }
              else
              {
                uint64_t v76 = v71;
                if ((unint64_t)(v71 - v73) >= 0x20)
                {
                  uint64_t v77 = (v75 >> 3) + 1;
                  uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v76 = &v71[v78];
                  uint64_t v79 = (long long *)(v73 + 16);
                  uint64_t v80 = v71 + 16;
                  uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v82 = *v79;
                    *(v80 - 1) = *(v79 - 1);
                    *uint64_t v80 = v82;
                    v79 += 2;
                    v80 += 2;
                    v81 -= 4;
                  }
                  while (v81);
                  if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_68;
                  }
                  v73 += v78;
                }
              }
              do
              {
                uint64_t v83 = *(void *)v73;
                v73 += 8;
                *(void *)uint64_t v76 = v83;
                v76 += 8;
              }
              while (v73 != v74);
            }
LABEL_68:
            if ((char *)v65 != v68) {
              free(*v62);
            }
            uint64_t v64 = &v72[8 * v66];
            *double v62 = v72;
            v62[1] = v64;
            v62[3] = (char *)v70;
            goto LABEL_71;
          }
        }
      }
    }
  }
LABEL_72:
  if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_39646);
  }
  uint64_t v84 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_ERROR))
  {
    int v85 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)buf = 67109890;
    int v88 = v85;
    __int16 v89 = 2080;
    uint64_t v90 = "false";
    __int16 v91 = 2080;
    uint64_t v92 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/LabelsExternalMeshLogic.mm";
    __int16 v93 = 1024;
    int v94 = 440;
    _os_log_impl(&dword_1A1780000, v84, OS_LOG_TYPE_ERROR, "Failed to fulfill request (id:%d): Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x22u);
  }
}

void sub_1A25F4860(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::component::DataRequestObserver::IsCompleted>(int8x8_t *a1)
{
  unint64_t v10 = 0xB369A71FEF0EAB72;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xB369A71FEF0EAB72;
    if (*(void *)&v1 <= 0xB369A71FEF0EAB72) {
      unint64_t v3 = 0xB369A71FEF0EAB72 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xB369A71FEF0EAB72;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xB369A71FEF0EAB72)
      {
        if (v5[2] == 0xB369A71FEF0EAB72) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xB369A71FEF0EAB72) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xB369A71FEF0EAB72) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A25F4AB0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::LabelsExternalMeshLogic::processPendingArrivalRequests(void)::$_1::operator()(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v99 = 0;
  long long v100 = 0;
  unint64_t v9 = *a4;
  unint64_t v10 = (void *)gdc::Registry::storage<arComponents::Boundary>(*(int8x8_t **)(*a1 + 120));
  uint64_t v11 = v10[4];
  if (v9 >> 39 >= (v10[5] - v11) >> 3) {
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(v11 + 8 * (v9 >> 39));
  if (!v12) {
    goto LABEL_14;
  }
  unint64_t v13 = *(unsigned __int16 *)(v12 + 2 * (HIDWORD(v9) & 0x7F));
  uint64_t v15 = v10[7];
  uint64_t v14 = v10[8];
  if (v13 >= (v14 - v15) >> 3) {
    goto LABEL_14;
  }
  uint64_t v16 = v15 + 8 * v13;
  BOOL v17 = v16 != v14 && *(_DWORD *)(v16 + 4) == HIDWORD(v9);
  if (v17
    && ((uint64_t v18 = v10[10], v19 = v18 + 24 * v13, v19 != v10[11]) ? (v20 = v18 == 0) : (v20 = 1), !v20))
  {
    __int16 v91 = (char *)operator new(0xC8uLL);
    uint64_t v21 = (atomic_ullong *)v91;
    *((void *)v91 + 1) = 0;
    *((void *)v91 + 2) = 0;
    *(void *)__int16 v91 = &unk_1EF5811A0;
    *((_DWORD *)v91 + 6) = *(_DWORD *)(a3 + 8);
    unint64_t v22 = v91 + 24;
    v91[28] = 0;
    uint64_t v92 = *(void *)(v19 + 16);
    *((_OWORD *)v91 + 2) = *(_OWORD *)v19;
    *((void *)v91 + 6) = v92;
    *(_OWORD *)(v91 + 56) = *(_OWORD *)(a3 + 16);
    *((void *)v91 + 9) = *(void *)(a3 + 32);
    *((_OWORD *)v91 + 5) = *(_OWORD *)(a3 + 40);
    *((void *)v91 + 12) = *(void *)(a3 + 56);
    *((void *)v91 + 13) = *(void *)(a3 + 64);
    long long v93 = *(_OWORD *)(a3 + 72);
    *((void *)v91 + 16) = *(void *)(a3 + 88);
    *((_OWORD *)v91 + 7) = v93;
    *((_DWORD *)v91 + 34) = 1065353216;
    v91[140] = 0;
    *((void *)v91 + 18) = 0;
    *(_OWORD *)(v91 + 152) = *(_OWORD *)(a3 + 180);
    *((_DWORD *)v91 + 42) = *(_DWORD *)(a3 + 196);
    uint64_t v94 = *(void *)(a3 + 208);
    *((void *)v91 + 22) = *(void *)(a3 + 200);
    *((void *)v91 + 23) = v94;
    if (v94) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v94 + 8), 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v91 + 48) = 1065353216;
    uint64_t v99 = v91 + 24;
    long long v100 = (std::__shared_weak_count *)v91;
    *(void *)buf = v91 + 24;
    *(void *)uint64_t v102 = v91;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v91 + 1, 1uLL, memory_order_relaxed);
  }
  else
  {
LABEL_14:
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    *(void *)buf = 0;
    *(void *)uint64_t v102 = 0;
  }
  std::mutex::lock((std::mutex *)(a3 + 96));
  if (*(unsigned char *)(a3 + 176) == 4)
  {
    BOOL v23 = 0;
  }
  else
  {
    if (!v22 || v22[4] == *(unsigned char *)(a3 + 12))
    {
      if (v21) {
        atomic_fetch_add_explicit(v21 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = *(std::__shared_weak_count **)(a3 + 168);
      *(void *)(a3 + 160) = v22;
      *(void *)(a3 + 168) = v21;
      if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    uint64_t v25 = *(void *)(a3 + 160);
    BOOL v23 = v25 != 0;
    if (v25) {
      char v26 = 2;
    }
    else {
      char v26 = 3;
    }
    *(unsigned char *)(a3 + 176) = v26;
  }
  std::mutex::unlock((std::mutex *)(a3 + 96));
  if (*(void *)v102 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v102 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**(void **)v102 + 16))(*(void *)v102);
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v102);
    if (v23)
    {
LABEL_31:
      if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_39646);
      }
      int v27 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_INFO))
      {
        int v28 = *(_DWORD *)(a3 + 8);
        long long v29 = "ARFeatureShadow";
        if (!*(unsigned char *)(a3 + 12)) {
          long long v29 = "ARArrival";
        }
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v28;
        *(_WORD *)uint64_t v102 = 2080;
        *(void *)&v102[2] = v29;
        _os_log_impl(&dword_1A1780000, v27, OS_LOG_TYPE_INFO, "Fulfilled request(id:%d) for external mesh type:%s", buf, 0x12u);
      }
      uint64_t v30 = *(int8x8_t **)(v8 + 120);
      if (v100)
      {
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)uint64_t v102 = v100;
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *(void *)uint64_t v102 = 0;
      }
      *(void *)buf = v99;
      uint64_t v51 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(v30);
      gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v51, a2, buf);
      uint64_t v52 = *(std::__shared_weak_count **)v102;
      if (*(void *)v102 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v102 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
      unint64_t v53 = *(int8x8_t **)(v8 + 120);
      *(void *)buf = v99;
      *(void *)uint64_t v102 = v100;
      if (v100) {
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v54 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>(v53);
      gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v54, a2, buf);
      uint64_t v55 = *(std::__shared_weak_count **)v102;
      if (*(void *)v102 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v102 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      uint64_t v56 = *(int8x8_t **)(v8 + 120);
      uint64_t v57 = *a4;
      if (v100)
      {
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)uint64_t v102 = v100;
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *(void *)uint64_t v102 = 0;
      }
      *(void *)buf = v99;
      uint64_t v58 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(v56);
      gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v58, v57, buf);
      uint64_t v59 = *(std::__shared_weak_count **)v102;
      if (*(void *)v102 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v102 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
      long long v60 = *(int8x8_t **)(v8 + 120);
      uint64_t v61 = *a4;
      *(void *)buf = v99;
      *(void *)uint64_t v102 = v100;
      if (v100) {
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v62 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::ARArrivalExternalMesh>>>(v60);
      gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v62, v61, buf);
      char v63 = *(std::__shared_weak_count **)v102;
      if (*(void *)v102 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v102 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
      uint64_t v64 = *a4;
      uint64_t v65 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(int8x8_t **)(v8 + 120));
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v65, v64);
      uint64_t v66 = a4[1];
      unint64_t v67 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(int8x8_t **)(v8 + 120));
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v67, v66);
      unint64_t v68 = *(char **)(v8 + 176);
      unint64_t v69 = *(char **)(v8 + 184);
      uint64_t v70 = v8 + 176;
      if (v68 != v69)
      {
        while (v99 != *(char **)v68)
        {
          v68 += 16;
          if (v68 == v69) {
            goto LABEL_84;
          }
        }
      }
      if (v68 == v69)
      {
LABEL_84:
        *(void *)buf = v99;
        *(void *)uint64_t v102 = 0xFFFFFFFF00000000;
        unint64_t v68 = geo::linear_map<md::LabelExternalMesh *,gdc::Entity,std::equal_to<md::LabelExternalMesh *>,std::allocator<std::pair<md::LabelExternalMesh *,gdc::Entity>>,std::vector<std::pair<md::LabelExternalMesh *,gdc::Entity>>>::insert(v70, buf);
      }
      *((void *)v68 + 1) = a2;
      uint64_t v71 = a1[1];
      unint64_t v73 = *(char **)v71;
      long long v72 = *(uint64_t **)(v71 + 8);
      uint64_t v74 = ((uint64_t)v72 - *(void *)v71) >> 3;
      unint64_t v75 = *(void *)(v71 + 24);
      if (v75 >= v74 + 1) {
        goto LABEL_115;
      }
      uint64_t v76 = *(char **)(v71 + 16);
      unint64_t v77 = (1 << -(char)__clz(v75 + 1));
      if (v75 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v77 = 1;
      }
      if (v77 <= v74 + 1) {
        unint64_t v78 = v74 + 1;
      }
      else {
        unint64_t v78 = v77;
      }
      uint64_t v79 = (char *)malloc_type_malloc(8 * v78, 0x100004000313F17uLL);
      uint64_t v80 = v79;
      uint64_t v81 = *(uint64_t **)v71;
      long long v82 = *(char **)(v71 + 8);
      if (*(char **)v71 != v82)
      {
        unint64_t v83 = v82 - (char *)v81 - 8;
        if (v83 < 0x18)
        {
          uint64_t v84 = v79;
        }
        else
        {
          uint64_t v84 = v79;
          if ((unint64_t)(v79 - (char *)v81) >= 0x20)
          {
            uint64_t v85 = (v83 >> 3) + 1;
            uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v84 = &v79[v86];
            unint64_t v87 = (long long *)(v81 + 2);
            int v88 = v79 + 16;
            uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v90 = *v87;
              *(v88 - 1) = *(v87 - 1);
              *int v88 = v90;
              v87 += 2;
              v88 += 2;
              v89 -= 4;
            }
            while (v89);
            if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_112;
            }
            uint64_t v81 = (uint64_t *)((char *)v81 + v86);
          }
        }
        do
        {
          uint64_t v98 = *v81++;
          *(void *)uint64_t v84 = v98;
          v84 += 8;
        }
        while (v81 != (uint64_t *)v82);
      }
LABEL_112:
      if (v73 != v76) {
        free(*(void **)v71);
      }
      long long v72 = (uint64_t *)&v80[8 * v74];
      *(void *)uint64_t v71 = v80;
      *(void *)(v71 + 8) = v72;
      *(void *)(v71 + 24) = v78;
LABEL_115:
      *long long v72 = a2;
      *(void *)(v71 + 8) += 8;
      goto LABEL_116;
    }
  }
  else if (v23)
  {
    goto LABEL_31;
  }
  uint64_t v31 = a1[2];
  uint64_t v33 = *(char **)v31;
  uint64_t v32 = *(uint64_t **)(v31 + 8);
  uint64_t v34 = ((uint64_t)v32 - *(void *)v31) >> 3;
  unint64_t v35 = *(void *)(v31 + 24);
  if (v35 < v34 + 1)
  {
    uint64_t v36 = *(char **)(v31 + 16);
    unint64_t v37 = (1 << -(char)__clz(v35 + 1));
    if (v35 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v37 = 1;
    }
    if (v37 <= v34 + 1) {
      unint64_t v38 = v34 + 1;
    }
    else {
      unint64_t v38 = v37;
    }
    uint64_t v39 = (char *)malloc_type_malloc(8 * v38, 0x100004000313F17uLL);
    uint64_t v40 = v39;
    unint64_t v41 = *(uint64_t **)v31;
    unint64_t v42 = *(char **)(v31 + 8);
    if (*(char **)v31 == v42) {
      goto LABEL_103;
    }
    unint64_t v43 = v42 - (char *)v41 - 8;
    if (v43 < 0x18)
    {
      uint64_t v44 = v39;
    }
    else
    {
      uint64_t v44 = v39;
      if ((unint64_t)(v39 - (char *)v41) >= 0x20)
      {
        uint64_t v45 = (v43 >> 3) + 1;
        uint64_t v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v44 = &v39[v46];
        unint64_t v47 = (long long *)(v41 + 2);
        unint64_t v48 = v39 + 16;
        uint64_t v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v50 = *v47;
          *(v48 - 1) = *(v47 - 1);
          *unint64_t v48 = v50;
          v47 += 2;
          v48 += 2;
          v49 -= 4;
        }
        while (v49);
        if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_103;
        }
        unint64_t v41 = (uint64_t *)((char *)v41 + v46);
      }
    }
    do
    {
      uint64_t v95 = *v41++;
      *(void *)uint64_t v44 = v95;
      v44 += 8;
    }
    while (v41 != (uint64_t *)v42);
LABEL_103:
    if (v33 != v36) {
      free(*(void **)v31);
    }
    uint64_t v32 = (uint64_t *)&v40[8 * v34];
    *(void *)uint64_t v31 = v40;
    *(void *)(v31 + 8) = v32;
    *(void *)(v31 + 24) = v38;
  }
  *uint64_t v32 = a2;
  *(void *)(v31 + 8) += 8;
  if (GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitLabelExternalMeshLogicLog(void)::onceToken, &__block_literal_global_39646);
  }
  uint64_t v96 = GEOGetVectorKitLabelExternalMeshLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitLabelExternalMeshLogicLog(void)::log, OS_LOG_TYPE_ERROR))
  {
    int v97 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v97;
    *(_WORD *)uint64_t v102 = 2080;
    *(void *)&v102[2] = "false";
    __int16 v103 = 2080;
    char v104 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/LabelsExternalMeshLogic.mm";
    __int16 v105 = 1024;
    int v106 = 480;
    _os_log_impl(&dword_1A1780000, v96, OS_LOG_TYPE_ERROR, "Failed to fulfill request (id:%d): Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x22u);
  }
LABEL_116:
  if (v100)
  {
    if (!atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
}

void sub_1A25F548C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::ARArrivalExternalMesh>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 184);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<md::ARArrivalExternalMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5811A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ARArrivalExternalMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5811A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsCompleted>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsCompleted>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          --a1[11];
          unint64_t v13 = (void *)a1[28];
          if (v13)
          {
            uint64_t v14 = a1[31];
            while (1)
            {
              v19[0] = &v17;
              v19[1] = 1;
              uint64_t v18 = v14;
              uint64_t v15 = v13[6];
              if (!v15) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v15 + 48))(v15, &v18, v19);
              unint64_t v13 = (void *)*v13;
              if (!v13) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsCompleted>::~ComponentStorageWrapper(v16);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsCompleted>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsFailed>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsFailed>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          --a1[11];
          unint64_t v13 = (void *)a1[28];
          if (v13)
          {
            uint64_t v14 = a1[31];
            while (1)
            {
              v19[0] = &v17;
              v19[1] = 1;
              uint64_t v18 = v14;
              uint64_t v15 = v13[6];
              if (!v15) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v15 + 48))(v15, &v18, v19);
              unint64_t v13 = (void *)*v13;
              if (!v13) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsFailed>::~ComponentStorageWrapper(v16);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<gdc::component::DataRequestObserver::IsFailed>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0xF409241CDA31AF08 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0xA588623CD4116DAELL;
    if (*(void *)&v5 <= 0xA588623CD4116DAELL) {
      unint64_t v7 = 0xA588623CD4116DAELL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0xA588623CD4116DAELL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0xA588623CD4116DAELL)
      {
        if (v9[2] == 0xA588623CD4116DAELL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0xA588623CD4116DAELL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0xA588623CD4116DAELL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0xA588623CD4116DAELL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xF409241CDA31AF08 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0xA588623CD4116DAELL;
    if (*(void *)&v4 <= 0xA588623CD4116DAELL) {
      unint64_t v6 = 0xA588623CD4116DAELL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0xA588623CD4116DAELL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0xA588623CD4116DAELL)
      {
        if (v8[2] == 0xA588623CD4116DAELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0xA588623CD4116DAELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0xA588623CD4116DAELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0xA588623CD4116DAELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xF409241CDA31AF08 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0xA588623CD4116DAELL;
    if (*(void *)&v4 <= 0xA588623CD4116DAELL) {
      unint64_t v6 = 0xA588623CD4116DAELL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0xA588623CD4116DAELL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0xA588623CD4116DAELL)
      {
        if (v8[2] == 0xA588623CD4116DAELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0xA588623CD4116DAELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0xA588623CD4116DAELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0xA588623CD4116DAELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xF409241CDA31AF08 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0xA588623CD4116DAELL;
    if (*(void *)&v4 <= 0xA588623CD4116DAELL) {
      unint64_t v6 = 0xA588623CD4116DAELL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0xA588623CD4116DAELL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0xA588623CD4116DAELL)
      {
        if (v8[2] == 0xA588623CD4116DAELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0xA588623CD4116DAELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0xA588623CD4116DAELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0xA588623CD4116DAELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xF409241CDA31AF08 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0xA588623CD4116DAELL;
    if (*(void *)&v4 <= 0xA588623CD4116DAELL) {
      unint64_t v6 = 0xA588623CD4116DAELL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0xA588623CD4116DAELL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0xA588623CD4116DAELL)
      {
        if (v8[2] == 0xA588623CD4116DAELL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0xA588623CD4116DAELL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0xA588623CD4116DAELL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0xA588623CD4116DAELL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

void md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A25F614C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::LabelsExternalMeshContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::LabelsExternalMeshContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555AF0;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::LabelsExternalMeshContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555AF0;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

int8x8_t *md::LabelsExternalMeshLogic::createDebugNode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  strcpy((char *)a2, "LabelExternalMeshLogic");
  *(unsigned char *)(a2 + 23) = 22;
  *(unsigned char *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(unsigned char *)(a2 + 95) = 0;
  double result = *(int8x8_t **)(a1 + 120);
  if (result)
  {
    uint64_t v5 = gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMeshRequest>>>(result);
    unint64_t v6 = (void *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(*(int8x8_t **)(a1 + 120));
    char v19 = 15;
    strcpy((char *)&v18, "PendingRequests");
    unint64_t v7 = *(void *)(v5 + 88) - *(void *)(v5 + 80);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = 1;
    uint64_t v14 = 0;
    uint64_t v13 = (v7 >> 4);
    gdc::DebugTreeNode::addProperty(a2, (uint64_t)&v18, (uint64_t)v12);
    char v19 = 14;
    strcpy((char *)&v18, "ExternalMeshes");
    double result = (int8x8_t *)gdc::DebugTreeNode::createChildNode(a2, &v18);
    uint64_t v8 = v6[7];
    uint64_t v9 = v6[8];
    if (v8 != v9)
    {
      uint64_t v10 = (uint64_t)result;
      uint64_t v11 = v6[10];
      do
      {
        if (*(unsigned char *)(*(void *)v11 + 4) == 1)
        {
          char v19 = 15;
          strcpy((char *)&v18, "ARFeatureShadow");
        }
        else
        {
          if (*(unsigned char *)(*(void *)v11 + 4)) {
            goto LABEL_6;
          }
          char v19 = 9;
          strcpy((char *)&v18, "ARArrival");
        }
        double result = (int8x8_t *)gdc::DebugTreeNode::createChildNode(v10, &v18);
LABEL_6:
        v11 += 16;
        v8 += 8;
      }
      while (v8 != v9);
    }
  }
  return result;
}

void sub_1A25F6410(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

void md::LabelsExternalMeshLogic::~LabelsExternalMeshLogic(md::LabelsExternalMeshLogic *this)
{
  *(void *)this = &unk_1EF5434B8;
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }
  int8x8_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(void *)this = &unk_1EF5434B8;
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }
  int8x8_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void md::Logic<md::LabelsExternalMeshLogic,md::LabelsExternalMeshContext,md::LogicDependencies<gdc::TypeList<md::LabelsContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState::~MeshPipelineState(ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup::textureIsEnabled(ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup *this)
{
  return 0;
}

BOOL ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup::constantDataIsEnabled(ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup::~MeshPipelineSetup(ggl::VenueOpenToBelowShadowAlpha::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::VenueOpenToBelowShadow::MeshPipelineState::~MeshPipelineState(ggl::VenueOpenToBelowShadow::MeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::VenueOpenToBelowShadow::MeshPipelineSetup::textureIsEnabled(ggl::VenueOpenToBelowShadow::MeshPipelineSetup *this)
{
  return 0;
}

BOOL ggl::VenueOpenToBelowShadow::MeshPipelineSetup::constantDataIsEnabled(ggl::VenueOpenToBelowShadow::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::VenueOpenToBelowShadow::MeshPipelineSetup::~MeshPipelineSetup(ggl::VenueOpenToBelowShadow::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A25F7294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1A25F72B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::__unordered_map_hasher<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::hash<std::pair<void const*,unsigned long>>,std::equal_to<std::pair<void const*,unsigned long>>,true>,std::__unordered_map_equal<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::equal_to<std::pair<void const*,unsigned long>>,std::hash<std::pair<void const*,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>>>::__emplace_unique_key_args<std::pair<void const*,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<void const*,unsigned long> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = (a3
      + 0x77FA823ACE0B5A40 * (v8 ^ (v8 >> 47))
      + ((0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47))) >> 2)
      - 0x61C8864680B583EBLL) ^ (0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (a3
          + 0x77FA823ACE0B5A40 * (v8 ^ (v8 >> 47))
          + ((0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47))) >> 2)
          - 0x61C8864680B583EBLL) ^ (0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v13[1];
            if (v17 == v9)
            {
              if (v13[2] == a2 && v13[3] == a3) {
                return v13;
              }
            }
            else if ((v17 & (v10 - 1)) != v4)
            {
              goto LABEL_28;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v15 = v13[1];
          if (v15 == v9)
          {
            if (v13[2] == a2 && v13[3] == a3) {
              return v13;
            }
          }
          else
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_28:
  long long v18 = (void *)(a1 + 16);
  uint64_t v13 = operator new(0x38uLL);
  void *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a4;
  v13[5] = 0;
  v13[6] = 0;
  v13[4] = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_40;
    }
    if (prime < v10)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < v10) {
LABEL_40:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v28 = *(void *)a1;
  long long v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    void *v13 = *v29;
LABEL_64:
    void *v29 = v13;
    goto LABEL_65;
  }
  void *v13 = *v18;
  *long long v18 = v13;
  *(void *)(v28 + 8 * v4) = v18;
  if (*v13)
  {
    unint64_t v30 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    long long v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_64;
  }
LABEL_65:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1A25F7714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<geo::handle<md::CommandBufferResource>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<geo::handle<md::CommandBufferResource>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A25F8158(_Unwind_Exception *a1)
{
  std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> &,ggl::DataWrite<unsigned short> &)>::~function((void *)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_1A25F816C(_Unwind_Exception *a1)
{
  std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> &,ggl::DataWrite<unsigned short> &)>::~function((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void *std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> &,ggl::DataWrite<unsigned short> &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> &,ggl::DataWrite<unsigned short> &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1A25F95CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_1A25F95E0(_Unwind_Exception *a1)
{
  std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::VenueWall::DefaultVbo> &,ggl::DataWrite<unsigned short> &)>::~function((void *)(v1 - 136));
  _Unwind_Resume(a1);
}

void *std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::VenueWall::DefaultVbo> &,ggl::DataWrite<unsigned short> &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::VenueWall::EndCapVbo> &,ggl::DataWrite<unsigned short> &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1A25FD0CC(_Unwind_Exception *exception_object)
{
}

void sub_1A25FD0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (a19 && !atomic_fetch_add(&a19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
    std::__shared_weak_count::__release_weak(a19);
  }
  if (a21)
  {
    if (!atomic_fetch_add(&a21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583B30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583B68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583B68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWall::EndCapMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VenueWall::EndCapMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VenueWall::EndCapMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWall::MeshMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VenueWall::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VenueWall::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A25FE614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A25FFE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, ggl::BufferMemory *a10, ggl::BufferMemory *a11, void *a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v33);
  if (a33) {
    std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](a33);
  }
  ggl::BufferMemory::~BufferMemory(v34);
  ggl::BufferMemory::~BufferMemory(a11);
  md::DynamicTrafficTileList::~DynamicTrafficTileList(v35);
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1A25FFFCC(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 128);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  unint64_t v8 = operator new(0xF8uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = &unk_1EF584818;
  unint64_t v10 = v8 + 3;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(std::__shared_weak_count **)(a2 + 32);
  v13[0] = v11;
  v13[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 32, v13, *a3, a3[1], 1);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v9[29] = v7;
  v9[30] = &ggl::Venue3DStroke::verticalDefaultVboReflection;
  v9[3] = &unk_1EF55C3C8;
  v9[28] = &unk_1EF55C3E8;
  *a4 = v10;
  a4[1] = v9;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::VerticalDefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::VerticalDefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::VerticalDefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF570AD0;
}

void *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF570AD0;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::VerticalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  unint64_t v8 = operator new(0xF8uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = &unk_1EF584850;
  unint64_t v10 = v8 + 3;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(std::__shared_weak_count **)(a2 + 32);
  v13[0] = v11;
  v13[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 40, v13, *a3, a3[1], 1);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v9[29] = v7;
  v9[30] = &ggl::Venue3DStroke::horizontalDefaultVboReflection;
  v9[3] = &unk_1EF55C408;
  v9[28] = &unk_1EF55C428;
  *a4 = v10;
  a4[1] = v9;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF570B18;
}

void *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF570B18;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::Venue3DStroke::HorizontalDefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  unint64_t v8 = operator new(0xF8uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = &unk_1EF5853E8;
  unint64_t v10 = v8 + 3;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(std::__shared_weak_count **)(a2 + 32);
  v13[0] = v11;
  v13[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 24, v13, *a3, a3[1], 1);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v9[29] = v7;
  v9[30] = &ggl::VenueWall::endCapVboReflection;
  v9[3] = &unk_1EF55D088;
  v9[28] = &unk_1EF55D0A8;
  *a4 = v10;
  a4[1] = v9;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5853E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::EndCapVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5853E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF570C38;
}

void *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF570C38;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::EndCapVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  unint64_t v8 = operator new(0xF8uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = &unk_1EF5853B0;
  unint64_t v10 = v8 + 3;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(std::__shared_weak_count **)(a2 + 32);
  v13[0] = v11;
  v13[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 24, v13, *a3, a3[1], 1);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v9[29] = v7;
  v9[30] = &ggl::VenueWall::defaultVboReflection;
  v9[3] = &unk_1EF55D048;
  v9[28] = &unk_1EF55D068;
  *a4 = v10;
  a4[1] = v9;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5853B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VenueWall::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5853B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF570BF0;
}

void *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF570BF0;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::VenueWall::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
}

void *std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<BOOL ()(gm::Box<double,3> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(gm::Matrix<double,4,4> const&,gm::Box<float,3> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(gdc::Tiled const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

double std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3>,void ()(gdc::Tiled const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = 1 << *(unsigned char *)(*(void *)a2 + 1);
  double v4 = 1.0 / (double)v3;
  double v5 = v4 * (double)(v3 + ~*(_DWORD *)(*(void *)a2 + 4));
  v8[0] = v4 * (double)*(int *)(*(void *)a2 + 8);
  v8[1] = v5;
  v8[2] = v8[0] + v4;
  v8[3] = v5 + v4;
  int v7 = -16711681;
  md::DebugConsoleMapRect::drawWorldRect(v2, v8, (__int8 *)&v7, 0);
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3>,void ()(gdc::Tiled const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57D9E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3>,void ()(gdc::Tiled const*)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF57D9E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_3>,void ()(gdc::Tiled const*)>::~__func()
{
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2>,void ()(gm::Matrix<double,4,4> const&,gm::Box<float,3> const&)>::operator()(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  float64x2_t v5 = vcvtq_f64_f32(a3[1]);
  float64x2_t v9 = vcvtq_f64_f32(*a3);
  float64x2_t v10 = v5;
  float64x2_t v11 = vcvtq_f64_f32(a3[2]);
  int64x2_t v12 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)uint64_t v13 = xmmword_1A28FC720;
  *(int64x2_t *)&v13[16] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v14[0] = &unk_1EF57D5A8;
  v14[1] = &v12;
  v14[2] = a2;
  unint64_t v15 = v14;
  double v6 = gm::Box<double,3>::forEachCorner((uint64_t)&v9, (uint64_t)v14);
  if (v15 == v14)
  {
    (*(void (**)(void *, double))(v14[0] + 32))(v14, v6);
  }
  else if (v15)
  {
    (*(void (**)(void *, double))(*v15 + 40))(v15, v6);
  }
  float64x2_t v9 = (float64x2_t)v12;
  float64x2_t v10 = *(float64x2_t *)&v13[8];
  uint64_t v7 = *(void *)(a1 + 16);
  if (*(unsigned char *)(*(void *)(v4 + 2200) + 129)) {
    unsigned int v8 = -16776961;
  }
  else {
    unsigned int v8 = 0x80000000;
  }
  LODWORD(v14[0]) = v8;
  md::DebugConsoleMapRect::drawWorldRect(v7, v9.f64, (__int8 *)v14, 0);
}

__n128 std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2>,void ()(gm::Matrix<double,4,4> const&,gm::Box<float,3> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57D998;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2>,void ()(gm::Matrix<double,4,4> const&,gm::Box<float,3> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57D998;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_2>,void ()(gm::Matrix<double,4,4> const&,gm::Box<float,3> const&)>::~__func()
{
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1>,void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>::operator()(uint64_t a1, float64x2_t *a2, uint64_t a3, double a4, double a5, int32x4_t a6)
{
  uint64_t v9 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a3 + 160)) {
    goto LABEL_32;
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  std::vector<unsigned int> __p = 0;
  unint64_t v54 = 0;
  uint64_t v55 = 0;
  float64x2_t v51 = 0uLL;
  v52[0].f64[0] = 0.0;
  __asm { FMOV            V0.4S, #1.0 }
  *(float32x4_t *)((char *)v52 + 8) = _Q0;
  geo::DiscreteOrientedPolytope<arComponents::XY26DOPTraits<float>>::extractVertices(a3, (char **)&__p, (uint64_t)&v51, _Q0, a5, a6);
  uint64_t v17 = (float32x2_t *)__p;
  uint64_t v16 = v54;
  if (v54 != __p)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (unsigned char *)__p) >> 2);
    if (!(v18 >> 60))
    {
      float v19 = (float64x2_t *)operator new(0xAAAAAAAAAAAAAAB0 * (((char *)v54 - (unsigned char *)__p) >> 2));
      uint64_t v56 = v19;
      uint64_t v58 = &v19[v18];
      while (1)
      {
        float64x2_t v15 = vcvtq_f64_f32(*v17);
        if (v19 < v58)
        {
          float64x2_t *v19 = v15;
          float v20 = v19 + 1;
        }
        else
        {
          BOOL v21 = (float64x2_t *)v56;
          uint64_t v22 = ((char *)v19 - (unsigned char *)v56) >> 4;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60) {
            abort();
          }
          uint64_t v24 = (char *)v58 - (unsigned char *)v56;
          if (((char *)v58 - (unsigned char *)v56) >> 3 > v23) {
            unint64_t v23 = v24 >> 3;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            float64x2_t v50 = v15;
            if (v25 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint8x8_t v26 = (char *)operator new(16 * v25);
            float64x2_t v15 = v50;
          }
          else
          {
            uint8x8_t v26 = 0;
          }
          uint64_t v27 = (float64x2_t *)&v26[16 * v22];
          *uint64_t v27 = v15;
          float v20 = v27 + 1;
          if (v19 == v21)
          {
            uint64_t v56 = v27;
            uint64_t v58 = (float64x2_t *)&v26[16 * v25];
            BOOL v21 = v19;
          }
          else
          {
            do
            {
              float64x2_t v15 = v19[-1];
              v27[-1] = v15;
              --v27;
              --v19;
            }
            while (v19 != v21);
            uint64_t v56 = v27;
            uint64_t v58 = (float64x2_t *)&v26[16 * v25];
            if (!v21) {
              goto LABEL_6;
            }
          }
          operator delete(v21);
        }
LABEL_6:
        uint64_t v57 = v20;
        uint64_t v17 = (float32x2_t *)((char *)v17 + 12);
        float v19 = v20;
        if (v17 == v16) {
          goto LABEL_24;
        }
      }
    }
LABEL_47:
    abort();
  }
LABEL_24:
  float64x2_t v51 = 0uLL;
  v52[0].f64[0] = 0.0;
  geo::ConvexHull2<double>::getConvexHullPoints((double **)&v56, &v51, v15);
  if (*(unsigned char *)(a3 + 160))
  {
    float64_t v28 = v51.f64[0];
    std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>(a3 + 136, *(unint64_t *)&v51.f64[0], *(char **)&v51.f64[1], (uint64_t)(*(void *)&v51.f64[1] - *(void *)&v51.f64[0]) >> 4);
    if (v28 != 0.0) {
      operator delete(*(void **)&v28);
    }
    long long v29 = __p;
    if (__p) {
      goto LABEL_28;
    }
  }
  else
  {
    *(float64x2_t *)(a3 + 136) = v51;
    *(float64_t *)(a3 + 152) = v52[0].f64[0];
    *(unsigned char *)(a3 + 160) = 1;
    long long v29 = __p;
    if (__p) {
LABEL_28:
    }
      operator delete(v29);
  }
  if (v56) {
    operator delete(v56);
  }
  if (!*(unsigned char *)(a3 + 160))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_47;
  }
LABEL_32:
  uint64_t v30 = *(void *)(a3 + 136);
  uint64_t v31 = *(void *)(a3 + 144) - v30;
  if (v31)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    unint64_t v34 = v31 >> 4;
    do
    {
      double v36 = *(double *)(v30 + v32);
      double v37 = *(double *)(v30 + v32 + 8);
      double v38 = a2[1].f64[1];
      double v39 = a2[3].f64[1];
      double v40 = a2[7].f64[1];
      double v41 = 1.0 / (v40 + v38 * v36 + v39 * v37);
      if (v33 < v34 - 1) {
        unint64_t v42 = v33 + 1;
      }
      else {
        unint64_t v42 = 0;
      }
      unint64_t v43 = (double *)(v30 + 16 * v42);
      double v44 = v43[1];
      double v45 = 1.0 / (v40 + *v43 * v38 + v44 * v39);
      float64x2_t v46 = a2[2];
      float64x2_t v47 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[6], *a2, v36), v46, v37), v41);
      uint64_t v48 = *(void *)(a1 + 16);
      float64x2_t v49 = vmlaq_n_f64(vnegq_f64(v47), vmlaq_n_f64(vmlaq_n_f64(a2[6], *a2, *v43), v46, v44), v45);
      if (*(unsigned char *)(*(void *)(v9 + 2200) + 128)) {
        unsigned int v35 = -16776961;
      }
      else {
        unsigned int v35 = 0x80000000;
      }
      LODWORD(v56) = v35;
      float64x2_t v51 = v47;
      v52[0] = v49;
      md::DebugConsoleMapRect::drawWorldSegment(v48, v51.f64, &v56);
      ++v33;
      uint64_t v30 = *(void *)(a3 + 136);
      unint64_t v34 = (*(void *)(a3 + 144) - v30) >> 4;
      v32 += 16;
    }
    while (v33 < v34);
  }
}

void sub_1A2601808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20)
{
  if (v20) {
    operator delete(v20);
  }
  if (__p)
  {
    operator delete(__p);
    uint64_t v22 = a20;
    if (!a20) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v22 = a20;
    if (!a20) {
      goto LABEL_5;
    }
  }
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1>,void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57D950;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1>,void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57D950;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_1>,void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>::~__func()
{
}

BOOL std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0>,BOOL ()(gm::Box<double,3> const&)>::operator()(uint64_t a1, double *a2)
{
  uint64_t v2 = *(double **)(a1 + 8);
  return v2[5] <= *a2 || v2[3] >= a2[3] || v2[6] <= a2[1] || v2[4] >= a2[4];
}

uint64_t std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0>,BOOL ()(gm::Box<double,3> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57D908;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0>,BOOL ()(gm::Box<double,3> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF57D908;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0,std::allocator<md::ARWalkingLabeler::debugDrawMiniMap(md::DebugConsole *)::$_0>,BOOL ()(gm::Box<double,3> const&)>::~__func()
{
}

void md::ARWalkingLabeler::debugString(md::ARWalkingLabeler *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (NSMutableString *)objc_alloc_init(MEMORY[0x1E4F28E78]);
  md::ARWalkingLabeler::debugOutputLabelState(this, v4);
  float64x2_t v11 = v4;
  float64x2_t v5 = (const char *)[(NSMutableString *)v11 UTF8String];
  size_t v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    float64x2_t v10 = operator new(v8 + 1);
    a2[1] = v7;
    a2[2] = v9 | 0x8000000000000000;
    *a2 = v10;
    a2 = v10;
    goto LABEL_8;
  }
  *((unsigned char *)a2 + 23) = v6;
  if (v6) {
LABEL_8:
  }
    memmove(a2, v5, v7);
  *((unsigned char *)a2 + v7) = 0;
}

void sub_1A2601AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::ARWalkingLabeler::debugOutputLabelState(md::ARWalkingLabeler *this, NSMutableString *a2)
{
  float64x2_t v5 = a2;
  if (VectorKitDebugConfig_DisplayAllLabelsInARDebugString) {
    BOOL v6 = off_1E9570450 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    char BOOL = GEOConfigGetBOOL();
  }
  uint64_t v137 = (double *)*((void *)this + 3);
  id v7 = *((id *)this + 256);

  int v134 = this;
  if (v7)
  {
    id v8 = *((id *)this + 256);
    uint64_t v9 = [v8 routeInfo];
    float64x2_t v10 = [v9 route];

    [v10 pointAtRouteCoordinate:*(void *)(*((void *)this + 3) + 3560)];
    double v12 = v11;
    double v2 = v13;
    double v3 = v14;
  }
  else
  {
    float64x2_t v10 = 0;
    double v12 = 0.0;
  }
  [(NSMutableString *)v5 appendString:@"ARWalkingLabeler\n"];
  unint64_t v15 = *((unsigned __int8 *)this + 2195);
  if (v15 > 3) {
    uint64_t v16 = "<Invalid>";
  }
  else {
    uint64_t v16 = off_1E5A97908[v15];
  }
  unint64_t v17 = *((unsigned __int8 *)this + 2192);
  if (v17 > 3) {
    unint64_t v18 = "<Invalid>";
  }
  else {
    unint64_t v18 = off_1E5A95FD8[v17];
  }
  [(NSMutableString *)v5 appendFormat:@"  arSessionState:%s|%s\n", v16, v18];
  float v19 = *(void **)(*((void *)this + 55) + 448);
  if (v19)
  {
    uint64_t v20 = [v19 state];
    if ((unint64_t)(v20 - 1) > 4) {
      BOOL v21 = @"VKARWalkingFeatureSetStateNone";
    }
    else {
      BOOL v21 = (__CFString *)*((void *)&off_1E5A95FB0 + v20 - 1);
    }
  }
  else
  {
    BOOL v21 = @"VKARWalkingFeatureSetStateNone";
  }
  [(NSMutableString *)v5 appendFormat:@"  featureSetState:%@\n", v21];
  [(NSMutableString *)v5 appendFormat:@"  featureCount:%lu\n", 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(*((void *)this + 55) + 472) - *(void *)(*((void *)this + 55) + 464)) >> 3)];
  uint64_t v22 = *((void *)this + 275);
  unint64_t v23 = (std::__shared_weak_count *)*((void *)v134 + 276);
  uint64_t v155 = *((void *)v134 + 275);
  long long v156 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v135 = v5;
  uint64_t v136 = v10;
  id v24 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  unint64_t v25 = v24;
  if (v22)
  {
    if (*(unsigned char *)(v22 + 128)) {
      [v24 addObject:@"Building"];
    }
    if (*(unsigned char *)(v22 + 129)) {
      [v25 addObject:@"Ground"];
    }
  }
  uint8x8_t v26 = [v25 componentsJoinedByString:@"|"];

  [(NSMutableString *)v5 appendFormat:@"  avoidanceTypes:%@\n", v26];
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v27 = GEOPolylineCoordinateAsShortString();
  [(NSMutableString *)v5 appendFormat:@"  userRouteOffset:%@\n", v27];

  [(NSMutableString *)v5 appendFormat:@"  eye:%f,%f,%f\n", *((void *)v134 + 51), *((void *)v134 + 52), *((void *)v134 + 53)];
  if (v7)
  {
    double v28 = *((double *)v134 + 52) * 0.0174532925;
    double v29 = *((double *)v134 + 53);
    __double2 v30 = __sincos_stret(*((double *)v134 + 51) * 0.0174532925);
    double v147 = v2;
    double v142 = v3;
    double v31 = 6378137.0 / sqrt(1.0 - v30.__sinval * v30.__sinval * 0.00669437999);
    double v145 = (v31 + v29) * v30.__cosval;
    __double2 v32 = __sincos_stret(v28);
    double v33 = v2 * 0.0174532925;
    __double2 v34 = __sincos_stret(v12 * 0.0174532925);
    double v35 = 6378137.0 / sqrt(1.0 - v34.__sinval * v34.__sinval * 0.00669437999);
    __double2 v36 = __sincos_stret(v33);
    double v37 = -((v3 + v35 * 0.99330562) * v34.__sinval - (v29 + v31 * 0.99330562) * v30.__sinval);
    [(NSMutableString *)v5 appendFormat:@"  routeEye:%f,%f,%f(%3.0fm)\n", *(void *)&v12, *(void *)&v147, *(void *)&v3, sqrt(-((v35 + v3) * v34.__cosval * v36.__cosval - v145 * v32.__cosval)* -((v35 + v3) * v34.__cosval * v36.__cosval - v145 * v32.__cosval)+ -((v35 + v3) * v34.__cosval * v36.__sinval - v145 * v32.__sinval)* -((v35 + v3) * v34.__cosval * v36.__sinval - v145 * v32.__sinval)+ v37 * v37)];
  }
  double v38 = (id **)*((void *)v134 + 252);
  unint64_t v133 = (id **)*((void *)v134 + 253);
  if (v38 != v133)
  {
    while (1)
    {
      ARStringForFeature(v153, v38);
      double v39 = (*((void (**)(void))**v38 + 26))();
      unint64_t v40 = [v39 intraFeaturePriority];

      double v41 = v154 >= 0 ? v153 : (void **)v153[0];
      if (v40 == -1)
      {
        unint64_t v42 = (std::string *)"-";
      }
      else
      {
        std::to_string(&v152, v40);
        unint64_t v42 = &v152;
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v42 = (std::string *)v152.__r_.__value_.__r.__words[0];
        }
      }
      [(NSMutableString *)v5 appendFormat:@"=======%s (p:%s)", v41, v42];
      if (v40 != -1 && SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      uint64_t v43 = *((void *)v134 + 280);
      if (v43 && *v38 == *(id **)(v43 + 8)) {
        [(NSMutableString *)v5 appendFormat:@" ACTIVE"];
      }
      [(NSMutableString *)v5 appendFormat:@"======="];
      if ((*((unsigned int (**)(id *))**v38 + 33))(*v38) == 25
        || (*((unsigned int (**)(id *))**v38 + 33))(*v38) == 27)
      {
        int v44 = (*((uint64_t (**)(id *))**v38 + 33))(*v38);
        uint64_t v45 = 29;
        if (v44 == 27) {
          uint64_t v45 = 88;
        }
        id v46 = (*v38)[v45];
        float64x2_t v47 = [v46 storeFronts];
        -[NSMutableString appendFormat:](v5, "appendFormat:", @"\n  storeFronts:%lu", [v47 count]);

        [(NSMutableString *)v5 appendString:@"\n  attrs:"];
        uint64_t v48 = [v46 styleAttributes];
        if (v48)
        {
          uint64_t v49 = 0;
          for (unint64_t i = 1; i - 1 < [v48 countAttrs]; ++i)
          {
            uint64_t v51 = [v48 v];
            [(NSMutableString *)v5 appendFormat:@"(%d,%d)", *(unsigned int *)(v51 + v49), *(unsigned int *)(v51 + v49 + 4)];
            if (i < [v48 countAttrs]) {
              [(NSMutableString *)v5 appendString:@","];
            }
            v49 += 8;
          }
        }
      }
      [(NSMutableString *)v5 appendFormat:@"\n"];
      uint64_t v52 = (*((unsigned int (**)(id *))**v38 + 33))(*v38) == 24 ? 2 : 3;
      unint64_t v53 = v38[2];
      unint64_t v139 = v38[3];
      unint64_t v140 = v52;
      if (v53 != v139) {
        break;
      }
LABEL_35:
      if (v154 < 0) {
        operator delete(v153[0]);
      }
      v38 += 5;
      if (v38 == v133) {
        goto LABEL_153;
      }
    }
    unint64_t v54 = 0;
    while (1)
    {
      if (!(BOOL & 1 | (v54 < v140)))
      {
        [(NSMutableString *)v5 appendFormat:@"    ...+%lu more\n", (((char *)v38[3] - (char *)v38[2]) >> 7) - v54];
        goto LABEL_35;
      }
      int v57 = (*((uint64_t (**)(id *))**v38 + 33))(*v38);
      uint64_t v58 = *v38;
      if (v57 == 26) {
        break;
      }
      int v68 = (*((uint64_t (**)(id *))*v58 + 33))(v58);
      uint64_t v58 = *v38;
      if (v68 != 24) {
        goto LABEL_98;
      }
      unint64_t v69 = (char *)v58[58];
      if (!v69) {
        goto LABEL_98;
      }
      unsigned int v70 = *((_DWORD *)v53 + 8);
      uint64_t v71 = v58 + 58;
      do
      {
        unsigned int v72 = *((_DWORD *)v69 + 8);
        BOOL v73 = v72 >= v70;
        if (v72 >= v70) {
          uint64_t v74 = (id *)v69;
        }
        else {
          uint64_t v74 = (id *)(v69 + 8);
        }
        if (v73) {
          uint64_t v71 = (id *)v69;
        }
        unint64_t v69 = (char *)*v74;
      }
      while (*v74);
      if (v71 == v58 + 58 || v70 < *((_DWORD *)v71 + 8)) {
        goto LABEL_98;
      }
      char v66 = 0;
      int v67 = *((unsigned __int8 *)v71 + 121);
LABEL_99:
      uint64_t v75 = (*((uint64_t (**)(id *, id *))*v58 + 14))(v58, v53 + 4);
      unint64_t v144 = v54;
      long double v76 = *(double *)v75;
      long double v77 = *(double *)(v75 + 8);
      double v78 = *(double *)(v75 + 16);
      double v79 = *(double *)(v75 + 24);
      double v80 = *(double *)(v75 + 32);
      float v81 = *(float *)(v75 + 40);
      int v82 = *(unsigned __int8 *)(v75 + 45);
      unint64_t v83 = v38;
      uint64_t v84 = (*((uint64_t (**)(id *, id *))**v38 + 38))(*v38, v53 + 4);
      char v86 = v85;
      long double v143 = v78;
      double v87 = *((double *)v53 + 5) - v137[72];
      double v88 = *((double *)v53 + 6) - v137[73];
      double v89 = *((double *)v53 + 7) - v137[74];
      double v90 = 1.0 / sqrt(v87 * v87 + v88 * v88 + v89 * v89);
      double v91 = v90 * v87;
      double v92 = v90 * v88;
      double v93 = v90 * v89;
      double v148 = acos(v90 * v87 * v137[75] + v90 * v88 * v137[76] + v90 * v89 * v137[77]);
      if (*((unsigned char *)v53 + 76))
      {
        float v95 = *((float *)v53 + 17);
        float v94 = *((float *)v53 + 18);
        float v96 = *((float *)v53 + 16);
      }
      else
      {
        float v94 = 1.0;
        float v95 = 0.0;
        float v96 = 0.0;
      }
      long double v97 = acos(v92 * v95 + v93 * v94 + v91 * v96);
      uint64_t v98 = 0;
      if (v10 && v86)
      {
        [v10 distanceFromPoint:*(void *)(*((void *)v134 + 3) + 3560) toPoint:v84];
        uint64_t v98 = v99;
      }
      double v146 = v97;
      if (v82)
      {
        if (v81 == 3.4028e38) {
          float v100 = 0.0;
        }
        else {
          float v100 = v81;
        }
        long double v101 = exp(v80 * 6.28318531 + -3.14159265);
        double v102 = atan(v101);
        long double v103 = fmod(v79 * 6.28318531, 6.28318531);
        double v104 = fmod(v103 + 6.28318531, 6.28318531) * 57.2957795 + -180.0;
        double v105 = v102 * 114.591559 + -90.0;
      }
      else
      {
        double v106 = sqrt(v76 * v76 + v77 * v77);
        double v107 = atan2(v143, v106 * 0.996647189);
        double v108 = atan2(v77, v76);
        __double2 v109 = __sincos_stret(v107);
        double v105 = atan2(v143 + v109.__sinval * v109.__sinval * 42841.3115 * v109.__sinval, v106 + v109.__cosval * v109.__cosval * -42697.6727 * v109.__cosval)* 57.2957795;
        double v104 = v108 * 57.2957795;
        if (v81 == 3.4028e38) {
          float v100 = 0.0;
        }
        else {
          float v100 = v81;
        }
      }
      if (*((unsigned char *)v53 + 106)) {
        unint64_t v110 = " ";
      }
      else {
        unint64_t v110 = "!";
      }
      unsigned int v111 = *((_DWORD *)v53 + 8);
      if (v111)
      {
        std::to_string(&v151, v111);
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v112 = &v151;
        }
        else {
          long long v112 = (std::string *)v151.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        *((unsigned char *)&v151.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v151, "UNKNOWN");
        long long v112 = &v151;
      }
      double v113 = *((double *)v53 + 7);
      id v114 = v53[15];
      double v115 = *((double *)v53 + 12);
      if (v86)
      {
        __int16 v116 = NSString;
        GEOPolylineCoordinateAsShortString();
        double v142 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        float64x2_t v141 = [v116 stringWithFormat:@"rc:%@", *(void *)&v142];
        double v117 = v141;
      }
      else
      {
        double v117 = &stru_1EF593218;
      }
      __int16 v118 = "";
      if ((v66 & 1) == 0) {
        __int16 v118 = gss::to_string(v67);
      }
      md::stringFromLabelOutcome((uint64_t)__p, *((unsigned __int8 *)v53 + 104));
      unint64_t v119 = *((unsigned __int8 *)v53 + 105);
      uint64_t v120 = "<NONE>";
      if (v119 <= 2) {
        uint64_t v120 = off_1E5A93878[v119];
      }
      double v121 = (void **)__p[0];
      if (v150 >= 0) {
        double v121 = __p;
      }
      uint64_t v132 = v117;
      float64x2_t v5 = v135;
      [(NSMutableString *)v135 appendFormat:@"%s   id:%2s v:(%3.0f,%3.0f) e:(l:%3.0f o:%2.0f) d:(%3.0f:%3.0f) \n    %@ %f,%f,%f \n    %s %s-%s\n", v110, v112, v148 * 57.2957795, v146 * 57.2957795, v113 * 40075017.0, v114, sqrt(v115), v98, v132, *(void *)&v105, *(void *)&v104, v100, v118, v121, v120];
      float64x2_t v10 = v136;
      if (v150 < 0)
      {
        operator delete(__p[0]);
        if (!v86) {
          goto LABEL_133;
        }
LABEL_132:

        goto LABEL_133;
      }
      if (v86) {
        goto LABEL_132;
      }
LABEL_133:
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      double v38 = v83;
      if ((*((unsigned int (**)(id *))**v83 + 33))(*v83) == 27)
      {
        double v122 = *v83;
        float64x2_t v123 = (char *)(*v83)[58];
        if (v123)
        {
          unsigned int v124 = *((_DWORD *)v53 + 8);
          float64x2_t v125 = v122 + 58;
          do
          {
            unsigned int v126 = *((_DWORD *)v123 + 8);
            BOOL v127 = v126 >= v124;
            if (v126 >= v124) {
              double v128 = (char **)v123;
            }
            else {
              double v128 = (char **)(v123 + 8);
            }
            if (v127) {
              float64x2_t v125 = (id *)v123;
            }
            float64x2_t v123 = *v128;
          }
          while (*v128);
          if (v125 != v122 + 58 && v124 >= *((_DWORD *)v125 + 8))
          {
            uint64_t v129 = *((void *)v122[84] + 2 * *((unsigned __int8 *)v125 + 121));
            if (v129)
            {
              id v130 = *(id *)(v129 + 152);
              long long v131 = v130;
              if (v130)
              {
                [v130 faceWidthInMeters];
                std::string::size_type v56 = v151.__r_.__value_.__r.__words[0];
                [v131 faceHeightInMeters];
                uint64_t v55 = __p[0];
              }
              else
              {
                v151.__r_.__value_.__r.__words[0] = 0;
                __p[0] = 0;
                uint64_t v55 = 0;
                std::string::size_type v56 = 0;
              }
              [(NSMutableString *)v135 appendFormat:@"    storefront: w:%f h:%f\n", v56, v55];
            }
          }
        }
      }
      unint64_t v54 = v144 + 1;
      v53 += 16;
      if (v53 == v139) {
        goto LABEL_35;
      }
    }
    uint64_t v59 = (char *)v58[34];
    if (v59)
    {
      unsigned int v60 = *((_DWORD *)v53 + 8);
      uint64_t v61 = v58 + 34;
      do
      {
        unsigned int v62 = *((_DWORD *)v59 + 8);
        BOOL v63 = v62 >= v60;
        if (v62 >= v60) {
          uint64_t v64 = (id *)v59;
        }
        else {
          uint64_t v64 = (id *)(v59 + 8);
        }
        if (v63) {
          uint64_t v61 = (id *)v59;
        }
        uint64_t v59 = (char *)*v64;
      }
      while (*v64);
      if (v61 != v58 + 34 && v60 >= *((_DWORD *)v61 + 8))
      {
        uint64_t v65 = v61[5];
        if (v65)
        {
          char v66 = 0;
          int v67 = v65[41] == v60;
          goto LABEL_99;
        }
      }
    }
LABEL_98:
    int v67 = 0;
    char v66 = 1;
    goto LABEL_99;
  }
LABEL_153:
}

void sub_1A260291C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  _Unwind_Resume(a1);
}

void md::ARWalkingLabeler::populateDebugNode(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  md::StandardLabeler::populateDebugNode(v1, v2, v5);
  uint64_t v243 = v4;
  BOOL v6 = *(void **)(v4 + 440);
  BYTE7(v551[1]) = 16;
  strcpy((char *)v551, "ARWalkingSupport");
  uint64_t v263 = v3;
  ChildNode = gdc::DebugTreeNode::createChildNode(v3, v551);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v599, "ARWalkingFeatures");
  uint64_t v260 = (uint64_t)ChildNode;
  id v8 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (long long *)&v599);
  uint64_t v9 = v6[97];
  float64x2_t v10 = (char *)operator new(0x20uLL);
  v599.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  *(_OWORD *)&v599.__r_.__value_.__r.__words[1] = xmmword_1A28FD1A0;
  strcpy(v10, "HighPrecisionAltitudeRequestor");
  double v11 = gdc::DebugTreeNode::createChildNode((uint64_t)v8, (long long *)&v599);
  operator delete(v10);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v599, "Stats");
  __int16 v267 = gdc::DebugTreeNode::createChildNode((uint64_t)v11, (long long *)&v599);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v599, "Undulation");
  double v12 = gdc::DebugTreeNode::createChildNode((uint64_t)v267, (long long *)&v599);
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__dst, "cacheHits");
  std::string::size_type v13 = *(unsigned int *)(v9 + 408);
  v603 = 0;
  uint64_t v602 = 0;
  int v604 = 1;
  uint64_t v601 = 0;
  v599.__r_.__value_.__l.__size_ = v13;
  gdc::DebugTreeNode::addProperty((uint64_t)v12, (uint64_t)&__dst, (uint64_t)&v599);
  std::string::size_type v14 = *(unsigned int *)(v9 + 412);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__p, "cacheMisses");
  uint64_t v614 = 0;
  uint64_t v615 = 0;
  int v616 = 1;
  uint64_t v613 = 0;
  __dst.__r_.__value_.__l.__size_ = v14;
  gdc::DebugTreeNode::addProperty((uint64_t)v12, (uint64_t)&__p, (uint64_t)&__dst);
  std::string::size_type v15 = *(unsigned int *)(v9 + 232);
  v594[23] = 14;
  strcpy(v594, "cachedRequests");
  uint64_t v610 = 0;
  uint64_t v609 = 0;
  int v611 = 1;
  uint64_t v608 = 0;
  __p.__r_.__value_.__l.__size_ = v15;
  gdc::DebugTreeNode::addProperty((uint64_t)v12, (uint64_t)v594, (uint64_t)&__p);
  v594[23] = 2;
  strcpy(v594, "VL");
  uint64_t v16 = gdc::DebugTreeNode::createChildNode((uint64_t)v267, (long long *)v594);
  v589[23] = 9;
  strcpy(v589, "cacheHits");
  uint64_t v17 = *(unsigned int *)(v9 + 416);
  uint64_t v597 = 0;
  uint64_t v596 = 0;
  int v598 = 1;
  uint64_t v595 = 0;
  *(void *)&v594[8] = v17;
  gdc::DebugTreeNode::addProperty((uint64_t)v16, (uint64_t)v589, (uint64_t)v594);
  uint64_t v18 = *(unsigned int *)(v9 + 420);
  char v584 = 11;
  strcpy((char *)v583, "cacheMisses");
  uint64_t v592 = 0;
  uint64_t v591 = 0;
  int v593 = 1;
  uint64_t v590 = 0;
  *(void *)&v589[8] = v18;
  gdc::DebugTreeNode::addProperty((uint64_t)v16, (uint64_t)v583, (uint64_t)v589);
  uint64_t v19 = *(unsigned int *)(v9 + 160);
  char v578 = 14;
  strcpy((char *)&v577, "cachedRequests");
  uint64_t v587 = 0;
  uint64_t v586 = 0;
  int v588 = 1;
  uint64_t v585 = 0;
  v583[1] = v19;
  gdc::DebugTreeNode::addProperty((uint64_t)v16, (uint64_t)&v577, (uint64_t)v583);
  char v578 = 8;
  strcpy((char *)&v577, "Requests");
  uint64_t v20 = gdc::DebugTreeNode::createChildNode((uint64_t)v267, &v577);
  char v572 = 9;
  strcpy((char *)v571, "cacheHits");
  uint64_t v21 = *(unsigned int *)(v9 + 424);
  uint64_t v581 = 0;
  uint64_t v580 = 0;
  int v582 = 1;
  uint64_t v579 = 0;
  *((void *)&v577 + 1) = v21;
  gdc::DebugTreeNode::addProperty((uint64_t)v20, (uint64_t)v571, (uint64_t)&v577);
  uint64_t v22 = *(unsigned int *)(v9 + 428);
  char v566 = 11;
  strcpy((char *)v565, "cacheMisses");
  uint64_t v575 = 0;
  uint64_t v574 = 0;
  int v576 = 1;
  uint64_t v573 = 0;
  v571[1] = v22;
  gdc::DebugTreeNode::addProperty((uint64_t)v20, (uint64_t)v565, (uint64_t)v571);
  uint64_t v23 = *(unsigned int *)(v9 + 304);
  char v559 = 14;
  strcpy((char *)v558, "cachedRequests");
  uint64_t v569 = 0;
  uint64_t v568 = 0;
  int v570 = 1;
  uint64_t v567 = 0;
  v565[1] = v23;
  gdc::DebugTreeNode::addProperty((uint64_t)v20, (uint64_t)v558, (uint64_t)v565);
  for (uint64_t i = *(void *)(v9 + 328); i != v9 + 320; uint64_t i = *(void *)(i + 8))
    ;
  v564[23] = 18;
  strcpy(v564, "deviceLocationHits");
  uint64_t v25 = *(unsigned int *)(v9 + 432);
  uint64_t v562 = 0;
  uint64_t v561 = 0;
  int v563 = 1;
  uint64_t v560 = 0;
  v558[1] = v25;
  gdc::DebugTreeNode::addProperty((uint64_t)v20, (uint64_t)v564, (uint64_t)v558);
  uint64_t v26 = v6[58];
  uint64_t v27 = v6[59];
  if (v26 == v27) {
    goto LABEL_24;
  }
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v599, "FeatureCount");
  uint64_t v556 = 0;
  uint64_t v555 = 0;
  int v557 = 1;
  uint64_t v554 = 0;
  uint64_t v553 = -1431655765 * ((unint64_t)(v27 - v26) >> 3);
  gdc::DebugTreeNode::addProperty(v260, (uint64_t)&v599, (uint64_t)v552);
  uint64_t v28 = v6[58];
  uint64_t v29 = v6[59];
  if (v28 == v29)
  {
LABEL_24:
    uint64_t v40 = v243;
    goto LABEL_27;
  }
  unint64_t v30 = 1;
  uint64_t v31 = (uint64_t)v8;
  do
  {
    int v32 = (*(uint64_t (**)(void))(**(void **)(v28 + 8) + 264))(*(void *)(v28 + 8));
    md::to_string((uint64_t)&v599, v32);
    if ((v599.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v33 = &v599;
    }
    else {
      double v33 = (std::string *)v599.__r_.__value_.__r.__words[0];
    }
    size_t v34 = strlen((const char *)v33);
    if (v34 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    std::string::size_type v35 = v34;
    if (v34 >= 0x17)
    {
      uint64_t v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17) {
        uint64_t v37 = v34 | 7;
      }
      uint64_t v38 = v37 + 1;
      p_dst = (std::string *)operator new(v37 + 1);
      __dst.__r_.__value_.__l.__size_ = v35;
      __dst.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      uint64_t v31 = (uint64_t)v8;
LABEL_17:
      memmove(p_dst, v33, v35);
      goto LABEL_18;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v34;
    p_dst = &__dst;
    if (v34) {
      goto LABEL_17;
    }
LABEL_18:
    p_dst->__r_.__value_.__s.__data_[v35] = 0;
    std::to_string(&__p, v30);
    double v39 = gdc::DebugTreeNode::createChildNode(v31, (long long *)&__dst, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_20;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_20:
    (*(void (**)(void, char *, void))(**(void **)(v28 + 8) + 464))(*(void *)(v28 + 8), v39, *v6);
    uint64_t v40 = v243;
    if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0) {
      (*(void (**)(void *, std::string::size_type, std::string::size_type))(*(void *)v600 + 40))(v600, v599.__r_.__value_.__r.__words[0], v599.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL);
    }
    v28 += 24;
    ++v30;
  }
  while (v28 != v29);
  if (SBYTE7(v551[1]) < 0) {
    operator delete(*(void **)&v551[0]);
  }
LABEL_27:
  uint64_t v245 = *(void *)(v40 + 24);
  double v41 = *(double *)(v40 + 2080);
  long double v42 = *(double *)(v40 + 2064) * 6.28318531;
  long double v43 = exp(*(double *)(v40 + 2072) * 6.28318531 + -3.14159265);
  double v44 = atan(v43);
  long double v45 = fmod(v42, 6.28318531);
  double v46 = fmod(v45 + 6.28318531, 6.28318531);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&v599, "ARWalkingLabeler");
  float v242 = gdc::DebugTreeNode::createChildNode(v263, (long long *)&v599);
  unint64_t v47 = *(unsigned __int8 *)(v40 + 2195);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v599, "arSessionState");
  if (v47 > 3) {
    uint64_t v48 = "<Invalid>";
  }
  else {
    uint64_t v48 = off_1E5A97908[v47];
  }
  memset(&v549, 0, sizeof(v549));
  int v550 = 4;
  std::string::__assign_external(&v549, v48);
  gdc::DebugTreeNode::addProperty((uint64_t)v242, (uint64_t)&v599, (uint64_t)v548);
  if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v549.__r_.__value_.__l.__data_);
  }
  unint64_t v49 = *(unsigned __int8 *)(v243 + 2192);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&v599, "arLocalizationState");
  if (v49 > 3) {
    float64x2_t v50 = "<Invalid>";
  }
  else {
    float64x2_t v50 = off_1E5A95FD8[v49];
  }
  double v51 = v41 * 40075017.0;
  double v52 = v46 * 57.2957795 + -180.0;
  double v53 = v44 * 114.591559 + -90.0;
  memset(&v546, 0, sizeof(v546));
  int v547 = 4;
  std::string::__assign_external(&v546, v50);
  gdc::DebugTreeNode::addProperty((uint64_t)v242, (uint64_t)&v599, (uint64_t)v545);
  if (SHIBYTE(v546.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v546.__r_.__value_.__l.__data_);
  }
  uint64_t v54 = *(unsigned __int8 *)(v243 + 400);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&v599, "shouldLayoutLabels");
  int v544 = 0;
  memset(&v543[4], 0, 24);
  v543[0] = v54;
  gdc::DebugTreeNode::addProperty((uint64_t)v242, (uint64_t)&v599, (uint64_t)v543);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v599, "userRouteOffset");
  uint64_t v55 = gdc::DebugTreeNode::createChildNode((uint64_t)v242, (long long *)&v599);
  uint64_t v56 = *(unsigned int *)(*(void *)(v243 + 24) + 3560);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v599, "index");
  uint64_t v541 = 0;
  uint64_t v540 = 0;
  int v542 = 1;
  uint64_t v539 = 0;
  uint64_t v538 = v56;
  gdc::DebugTreeNode::addProperty((uint64_t)v55, (uint64_t)&v599, (uint64_t)v537);
  float v57 = *(float *)(*(void *)(v243 + 24) + 3564);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v599, "offset");
  uint64_t v535 = 0;
  uint64_t v533 = 0;
  uint64_t v534 = 0;
  int v536 = 2;
  double v532 = v57;
  gdc::DebugTreeNode::addProperty((uint64_t)v55, (uint64_t)&v599, (uint64_t)v531);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v599, "eyePos");
  uint64_t v58 = gdc::DebugTreeNode::createChildNode((uint64_t)v242, (long long *)&v599);
  uint64_t v59 = *(void *)(v245 + 576);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v599, "x");
  uint64_t v529 = 0;
  uint64_t v527 = 0;
  uint64_t v528 = 0;
  int v530 = 2;
  uint64_t v526 = v59;
  gdc::DebugTreeNode::addProperty((uint64_t)v58, (uint64_t)&v599, (uint64_t)v525);
  uint64_t v60 = *(void *)(v245 + 584);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v599, "y");
  uint64_t v523 = 0;
  uint64_t v521 = 0;
  uint64_t v522 = 0;
  int v524 = 2;
  uint64_t v520 = v60;
  gdc::DebugTreeNode::addProperty((uint64_t)v58, (uint64_t)&v599, (uint64_t)v519);
  uint64_t v61 = *(void *)(v245 + 592);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v599, "z");
  uint64_t v517 = 0;
  uint64_t v515 = 0;
  uint64_t v516 = 0;
  int v518 = 2;
  uint64_t v514 = v61;
  gdc::DebugTreeNode::addProperty((uint64_t)v58, (uint64_t)&v599, (uint64_t)v513);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v599, "resolvedEye");
  unsigned int v62 = gdc::DebugTreeNode::createChildNode((uint64_t)v242, (long long *)&v599);
  uint64_t v63 = *(void *)(v243 + 2064);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v599, "x");
  uint64_t v511 = 0;
  uint64_t v509 = 0;
  uint64_t v510 = 0;
  int v512 = 2;
  uint64_t v508 = v63;
  gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v599, (uint64_t)v507);
  uint64_t v64 = *(void *)(v243 + 2072);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v599, "y");
  uint64_t v505 = 0;
  uint64_t v503 = 0;
  uint64_t v504 = 0;
  int v506 = 2;
  uint64_t v502 = v64;
  gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v599, (uint64_t)v501);
  uint64_t v65 = *(void *)(v243 + 2080);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v599, "z");
  uint64_t v499 = 0;
  uint64_t v497 = 0;
  uint64_t v498 = 0;
  int v500 = 2;
  uint64_t v496 = v65;
  gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v599, (uint64_t)v495);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v599, "eyeCoord");
  char v66 = gdc::DebugTreeNode::createChildNode((uint64_t)v242, (long long *)&v599);
  uint64_t v67 = *(void *)(v243 + 408);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v599, "lat");
  uint64_t v493 = 0;
  uint64_t v491 = 0;
  uint64_t v492 = 0;
  int v494 = 2;
  uint64_t v490 = v67;
  gdc::DebugTreeNode::addProperty((uint64_t)v66, (uint64_t)&v599, (uint64_t)v489);
  uint64_t v68 = *(void *)(v243 + 416);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v599, "lng");
  uint64_t v487 = 0;
  uint64_t v485 = 0;
  uint64_t v486 = 0;
  int v488 = 2;
  uint64_t v484 = v68;
  gdc::DebugTreeNode::addProperty((uint64_t)v66, (uint64_t)&v599, (uint64_t)v483);
  uint64_t v69 = *(void *)(v243 + 424);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v599, "alt");
  uint64_t v481 = 0;
  uint64_t v479 = 0;
  uint64_t v480 = 0;
  int v482 = 2;
  uint64_t v478 = v69;
  gdc::DebugTreeNode::addProperty((uint64_t)v66, (uint64_t)&v599, (uint64_t)v477);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&v599, "resolvedEyeCoord");
  unsigned int v70 = gdc::DebugTreeNode::createChildNode((uint64_t)v242, (long long *)&v599);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v599, "lat");
  uint64_t v475 = 0;
  uint64_t v473 = 0;
  uint64_t v474 = 0;
  int v476 = 2;
  double v472 = v53;
  gdc::DebugTreeNode::addProperty((uint64_t)v70, (uint64_t)&v599, (uint64_t)v471);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v599, "lng");
  uint64_t v469 = 0;
  uint64_t v467 = 0;
  uint64_t v468 = 0;
  int v470 = 2;
  double v466 = v52;
  gdc::DebugTreeNode::addProperty((uint64_t)v70, (uint64_t)&v599, (uint64_t)v465);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v599, "alt");
  uint64_t v463 = 0;
  uint64_t v461 = 0;
  uint64_t v462 = 0;
  int v464 = 2;
  double v460 = v51;
  gdc::DebugTreeNode::addProperty((uint64_t)v70, (uint64_t)&v599, (uint64_t)v459);
  double v71 = *(double *)(v245 + 592);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v599, "elevation");
  uint64_t v457 = 0;
  uint64_t v455 = 0;
  uint64_t v456 = 0;
  int v458 = 2;
  double v454 = v71 * 40075017.0;
  gdc::DebugTreeNode::addProperty((uint64_t)v242, (uint64_t)&v599, (uint64_t)v453);
  uint64_t v72 = *(void *)(v243 + 776);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v599, "min clip range");
  uint64_t v451 = 0;
  uint64_t v449 = 0;
  uint64_t v450 = 0;
  int v452 = 2;
  uint64_t v448 = v72;
  gdc::DebugTreeNode::addProperty((uint64_t)v242, (uint64_t)&v599, (uint64_t)v447);
  uint64_t v73 = *(void *)(v243 + 856);
  *((unsigned char *)&v599.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v599, "max clip range");
  uint64_t v445 = 0;
  uint64_t v443 = 0;
  uint64_t v444 = 0;
  int v446 = 2;
  uint64_t v74 = v243;
  uint64_t v442 = v73;
  gdc::DebugTreeNode::addProperty((uint64_t)v242, (uint64_t)&v599, (uint64_t)v441);
  uint64_t v75 = *(void *)(v243 + 2200);
  if (v75)
  {
    *((unsigned char *)&v599.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&v599, "ARWorldIntersector");
    long double v76 = gdc::DebugTreeNode::createChildNode((uint64_t)v242, (long long *)&v599);
    long double v77 = (char *)operator new(0x20uLL);
    v599.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
    *(_OWORD *)&v599.__r_.__value_.__r.__words[1] = xmmword_1A28FD110;
    strcpy(v77, "isGroundOcclusionEnabled");
    std::string::size_type v78 = *(unsigned __int8 *)(v75 + 129);
    uint64_t v614 = 0;
    uint64_t v615 = 0;
    int v616 = 0;
    uint64_t v613 = 0;
    __dst.__r_.__value_.__r.__words[0] = v78;
    gdc::DebugTreeNode::addProperty((uint64_t)v76, (uint64_t)&v599, (uint64_t)&__dst);
    operator delete(v77);
    double v79 = (char *)operator new(0x20uLL);
    v599.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
    *(_OWORD *)&v599.__r_.__value_.__r.__words[1] = xmmword_1A28FCF30;
    strcpy(v79, "isBuildingOcclusionEnabled");
    std::string::size_type v80 = *(unsigned __int8 *)(v75 + 128);
    uint64_t v610 = 0;
    uint64_t v609 = 0;
    int v611 = 0;
    uint64_t v608 = 0;
    __p.__r_.__value_.__r.__words[0] = v80;
    uint64_t v268 = v76;
    gdc::DebugTreeNode::addProperty((uint64_t)v76, (uint64_t)&v599, (uint64_t)&__p);
    operator delete(v79);
    v583[0] = 0;
    float v81 = *(void **)v75;
    uint64_t v261 = (void *)v75;
    int v82 = (void *)(v75 + 8);
    if (v81 != v82)
    {
      uint64_t v83 = 0;
      uint64_t v84 = &v603;
      int v264 = v82;
      while (1)
      {
        uint64_t v85 = gdc::Registry::storage<arComponents::LocalBounds>(*(int8x8_t **)(v81[4] + 784));
        uint64_t v87 = *(void *)(v85 + 80);
        uint64_t v86 = *(void *)(v85 + 88);
        gdc::LayerDataKey::createDebugNode((uint64_t)&v599, (unsigned __int16 *)(v81[4] + 24));
        gdc::DebugTreeNode::addChildNode(v268, (long long *)&v599);
        double v88 = (void **)v605;
        if (v605)
        {
          double v89 = v606;
          double v90 = v605;
          if (v606 != v605)
          {
            double v91 = v84;
            do
            {
              double v92 = (void **)*(v89 - 3);
              if (v92)
              {
                double v93 = (void **)*(v89 - 2);
                float v94 = *(v89 - 3);
                if (v93 != v92)
                {
                  do
                  {
                    if (*((char *)v93 - 1) < 0) {
                      operator delete(*(v93 - 3));
                    }
                    v93 -= 3;
                  }
                  while (v93 != v92);
                  float v94 = *(v89 - 3);
                }
                *(v89 - 2) = v92;
                operator delete(v94);
              }
              float v95 = (void **)*(v89 - 6);
              if (v95)
              {
                float v96 = (void **)*(v89 - 5);
                long double v97 = *(v89 - 6);
                if (v96 != v95)
                {
                  do
                  {
                    if (*((char *)v96 - 9) < 0) {
                      operator delete(*(v96 - 4));
                    }
                    v96 -= 8;
                  }
                  while (v96 != v95);
                  long double v97 = *(v89 - 6);
                }
                *(v89 - 5) = v95;
                operator delete(v97);
              }
              uint64_t v98 = v89 - 10;
              if (*((char *)v89 - 57) < 0) {
                operator delete(*v98);
              }
              v89 -= 10;
            }
            while (v98 != v88);
            double v90 = v605;
            uint64_t v74 = v243;
            uint64_t v84 = v91;
            int v82 = v264;
          }
          unint64_t v606 = v88;
          operator delete(v90);
        }
        std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v84);
        if (SHIBYTE(v602) < 0) {
          operator delete(v600);
        }
        if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v599.__r_.__value_.__l.__data_);
          uint64_t v99 = (void *)v81[1];
          if (v99)
          {
            do
            {
LABEL_71:
              float v100 = v99;
              uint64_t v99 = (void *)*v99;
            }
            while (v99);
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v99 = (void *)v81[1];
          if (v99) {
            goto LABEL_71;
          }
        }
        do
        {
          float v100 = (void *)v81[2];
          BOOL v101 = *v100 == (void)v81;
          float v81 = v100;
        }
        while (!v101);
LABEL_40:
        v83 -= 0x30C30C30C30C30C3 * ((v86 - v87) >> 3);
        float v81 = v100;
        if (v100 == v82) {
          goto LABEL_77;
        }
      }
    }
    LODWORD(v83) = 0;
LABEL_77:
    double v102 = (void *)v261[3];
    if (v102 != v261 + 4)
    {
      while (2)
      {
        (*(void (**)(std::string *__return_ptr))(*(void *)v102[5] + 24))(&v599);
        gdc::DebugTreeNode::addChildNode(v268, (long long *)&v599);
        long double v103 = (void **)v605;
        if (v605)
        {
          double v104 = v606;
          double v105 = v605;
          if (v606 != v605)
          {
            do
            {
              double v106 = (void **)*(v104 - 3);
              if (v106)
              {
                double v107 = (void **)*(v104 - 2);
                double v108 = *(v104 - 3);
                if (v107 != v106)
                {
                  do
                  {
                    if (*((char *)v107 - 1) < 0) {
                      operator delete(*(v107 - 3));
                    }
                    v107 -= 3;
                  }
                  while (v107 != v106);
                  double v108 = *(v104 - 3);
                }
                *(v104 - 2) = v106;
                operator delete(v108);
              }
              __double2 v109 = (void **)*(v104 - 6);
              if (v109)
              {
                unint64_t v110 = (void **)*(v104 - 5);
                unsigned int v111 = *(v104 - 6);
                if (v110 != v109)
                {
                  do
                  {
                    if (*((char *)v110 - 9) < 0) {
                      operator delete(*(v110 - 4));
                    }
                    v110 -= 8;
                  }
                  while (v110 != v109);
                  unsigned int v111 = *(v104 - 6);
                }
                *(v104 - 5) = v109;
                operator delete(v111);
              }
              long long v112 = v104 - 10;
              if (*((char *)v104 - 57) < 0) {
                operator delete(*v112);
              }
              v104 -= 10;
            }
            while (v112 != v103);
            double v105 = v605;
            uint64_t v74 = v243;
          }
          unint64_t v606 = v103;
          operator delete(v105);
        }
        std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v603);
        if (SHIBYTE(v602) < 0) {
          operator delete(v600);
        }
        if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v599.__r_.__value_.__l.__data_);
          double v113 = (void *)v102[1];
          if (v113) {
            goto LABEL_110;
          }
          do
          {
LABEL_112:
            id v114 = (void *)v102[2];
            BOOL v101 = *v114 == (void)v102;
            double v102 = v114;
          }
          while (!v101);
        }
        else
        {
          double v113 = (void *)v102[1];
          if (!v113) {
            goto LABEL_112;
          }
          do
          {
LABEL_110:
            id v114 = v113;
            double v113 = (void *)*v113;
          }
          while (v113);
        }
        double v102 = v114;
        if (v114 == v261 + 4) {
          break;
        }
        continue;
      }
    }
    double v115 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v594 = v115;
    *(_OWORD *)&v594[8] = xmmword_1A28FD190;
    strcpy(v115, "buildingOcclusionBoundsCount");
    v603 = 0;
    uint64_t v602 = 0;
    int v604 = 1;
    uint64_t v601 = 0;
    v599.__r_.__value_.__l.__size_ = v83;
    gdc::DebugTreeNode::addProperty((uint64_t)v268, (uint64_t)v594, (uint64_t)&v599);
    operator delete(v115);
    __int16 v116 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v589 = v116;
    *(_OWORD *)&v589[8] = xmmword_1A28FCF30;
    strcpy(v116, "groundOcclusionBoundsCount");
    uint64_t v117 = -1431655765 * ((v261[14] - v261[13]) >> 4);
    uint64_t v597 = 0;
    uint64_t v596 = 0;
    int v598 = 1;
    uint64_t v595 = 0;
    *(void *)&v594[8] = v117;
    gdc::DebugTreeNode::addProperty((uint64_t)v268, (uint64_t)v589, (uint64_t)v594);
    operator delete(v116);
  }
  __int16 v118 = *(id ***)(v74 + 2016);
  unint64_t v241 = *(id ***)(v74 + 2024);
  if (v118 != v241)
  {
    uint64_t v244 = (double *)(v74 + 2088);
    do
    {
      ARStringForFeature(&v599, v118);
      uint64_t v119 = *(void *)(v74 + 2240);
      if (v119 && *v118 == *(id **)(v119 + 8)) {
        std::string::append(&v599, "  - ACTIVE", 0xAuLL);
      }
      int v247 = gdc::DebugTreeNode::createChildNode((uint64_t)v242, (long long *)&v599);
      float v248 = v118;
      if ((*((unsigned int (**)(id *))**v118 + 33))(*v118) == 25
        || (*((unsigned int (**)(id *))**v118 + 33))(*v118) == 27)
      {
        int v120 = (*((uint64_t (**)(id *))**v118 + 33))(*v118);
        uint64_t v121 = 29;
        if (v120 == 27) {
          uint64_t v121 = 88;
        }
        id v122 = (*v118)[v121];
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 14;
        strcpy((char *)&__dst, "hasStoreFronts");
        id v265 = v122;
        float64x2_t v123 = [v122 storeFronts];
        uint64_t v124 = [v123 count];
        memset(&v439[4], 0, 24);
        int v440 = 0;
        v439[0] = v124 != 0;
        gdc::DebugTreeNode::addProperty((uint64_t)v247, (uint64_t)&__dst, (uint64_t)v439);

        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&__dst, "StyleAttributes");
        uint64_t v269 = gdc::DebugTreeNode::createChildNode((uint64_t)v247, (long long *)&__dst);
        (*((void (**)(unsigned char *__return_ptr))**v248 + 73))(v594);
        float64x2_t v125 = *(uint64_t **)v594;
        if (*(unsigned char *)(*(void *)v594 + 33))
        {
          uint64_t v126 = 0;
          unint64_t v127 = 0;
          do
          {
            uint64_t v128 = *v125;
            uint64_t v129 = gss::to_string(*(_DWORD *)(*v125 + v126));
            uint64_t v130 = v128 + v126;
            long long v131 = gss::to_string(*(_DWORD *)(v128 + v126), *(_WORD *)(v128 + v126 + 4));
            if (v129)
            {
              size_t v132 = strlen(v129);
              if (v132 > 0x7FFFFFFFFFFFFFF7) {
                abort();
              }
              std::string::size_type v133 = v132;
              if (v132 >= 0x17)
              {
                uint64_t v138 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v132 | 7) != 0x17) {
                  uint64_t v138 = v132 | 7;
                }
                uint64_t v139 = v138 + 1;
                int v134 = (std::string *)operator new(v138 + 1);
                __dst.__r_.__value_.__l.__size_ = v133;
                __dst.__r_.__value_.__r.__words[2] = v139 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
              }
              else
              {
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v132;
                int v134 = &__dst;
                if (!v132)
                {
                  __dst.__r_.__value_.__s.__data_[0] = 0;
                  if (!v131) {
                    goto LABEL_135;
                  }
                  goto LABEL_137;
                }
              }
              memmove(v134, v129, v133);
              v134->__r_.__value_.__s.__data_[v133] = 0;
              if (!v131)
              {
LABEL_135:
                std::to_string(&__p, *(_DWORD *)(v130 + 4));
                goto LABEL_151;
              }
            }
            else
            {
              std::to_string(&__dst, *(_DWORD *)(v128 + v126));
              if (!v131) {
                goto LABEL_135;
              }
            }
LABEL_137:
            size_t v135 = strlen(v131);
            if (v135 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            std::string::size_type v136 = v135;
            if (v135 >= 0x17)
            {
              uint64_t v140 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v135 | 7) != 0x17) {
                uint64_t v140 = v135 | 7;
              }
              uint64_t v141 = v140 + 1;
              p_p = (std::string *)operator new(v140 + 1);
              __p.__r_.__value_.__r.__words[2] = v141 | 0x8000000000000000;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
              __p.__r_.__value_.__l.__size_ = v136;
            }
            else
            {
              *((unsigned char *)&__p.__r_.__value_.__s + 23) = v135;
              p_p = &__p;
              if (!v135) {
                goto LABEL_150;
              }
            }
            memmove(p_p, v131, v136);
LABEL_150:
            p_p->__r_.__value_.__s.__data_[v136] = 0;
LABEL_151:
            memset(&v437, 0, sizeof(v437));
            int v438 = 4;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__assign_no_alias<true>(&v437, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else {
              std::string v437 = __p;
            }
            gdc::DebugTreeNode::addProperty((uint64_t)v269, (uint64_t)&__dst, (uint64_t)v436);
            if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v437.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_128:
                operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_159;
                }
                goto LABEL_129;
              }
            }
            else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              goto LABEL_128;
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_159:
            }
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_129:
            ++v127;
            float64x2_t v125 = *(uint64_t **)v594;
            v126 += 8;
          }
          while (v127 < *(unsigned __int8 *)(*(void *)v594 + 33));
        }
        double v142 = *(std::__shared_weak_count **)&v594[8];
        if (*(void *)&v594[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v594[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }

        uint64_t v74 = v243;
      }
      long double v143 = v248[2];
      float v246 = v248[3];
      if (v143 == v246) {
        goto LABEL_235;
      }
      do
      {
        unsigned int v144 = *((_DWORD *)v143 + 8);
        if (v144)
        {
          std::to_string(&__dst, v144);
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&__dst, "UNKNOWN");
        }
        double v145 = gdc::DebugTreeNode::createChildNode((uint64_t)v247, (long long *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        double v146 = *(float64x2_t **)(v74 + 24);
        double v270 = *(double *)(v74 + 656);
        double v147 = v146[36].f64[0];
        double v148 = *((double *)v143 + 5);
        double v149 = *((double *)v143 + 6);
        double v150 = v146[36].f64[1];
        double v151 = *((double *)v143 + 7);
        double v152 = v146[37].f64[0];
        double v153 = v146[37].f64[1];
        double v154 = v146[38].f64[0];
        double v155 = v146[38].f64[1];
        double v156 = 1.0 / (v146[81].f64[0] + v146[75].f64[0] * v148 + v146[77].f64[0] * v149 + v146[79].f64[0] * v151);
        double v157 = v156 * (v146[79].f64[1] + v146[73].f64[1] * v148 + v146[75].f64[1] * v149 + v146[77].f64[1] * v151);
        double v259 = v149;
        double v262 = v148;
        double v266 = v151;
        float64x2_t v158 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v146[80], v146[74], v148), v146[76], v149), v146[78], v151), v156);
        BOOL v159 = v158.f64[1] > 1.0 || v158.f64[1] < -1.0;
        double v160 = v157 / v158.f64[1];
        float64_t v161 = v158.f64[0] / v158.f64[1];
        double v162 = 1.0 / sqrt(v160 * v160 + v161 * v161);
        double v163 = -(v160 * v162);
        double v164 = acos(v162 * v161) * 57.2957795;
        int v165 = v163 > 0.0 && !v159;
        BOOL v166 = v163 < 0.0 && v159;
        if (v165 | v166) {
          double v167 = 360.0 - v164;
        }
        else {
          double v167 = v164;
        }
        uint64_t v168 = (*((uint64_t (**)(id *, id *))**v248 + 14))(*v248, v143 + 4);
        long double v249 = *(double *)(v168 + 8);
        long double v250 = *(double *)v168;
        double v253 = *(double *)(v168 + 24);
        long double v251 = *(double *)(v168 + 16);
        double v252 = *(double *)(v168 + 32);
        float v254 = *(float *)(v168 + 40);
        int v258 = *(unsigned __int8 *)(v168 + 45);
        double v169 = *((double *)v143 + 5) - *(double *)(v245 + 576);
        double v170 = *((double *)v143 + 6) - *(double *)(v245 + 584);
        double v171 = *((double *)v143 + 7) - *(double *)(v245 + 592);
        double v172 = 1.0 / sqrt(v169 * v169 + v170 * v170 + v171 * v171);
        double v173 = v172 * v171;
        double v256 = v172 * v169;
        double v257 = v172 * v170;
        double v255 = acos(v172 * v169 * *(double *)(v245 + 600)+ v172 * v170 * *(double *)(v245 + 608)+ v172 * v171 * *(double *)(v245 + 616));
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 14;
        strcpy((char *)&__dst, "isDisplayLabel");
        uint64_t v174 = *((unsigned __int8 *)v143 + 106);
        memset(&v434[4], 0, 24);
        int v435 = 0;
        v434[0] = v174;
        gdc::DebugTreeNode::addProperty((uint64_t)v145, (uint64_t)&__dst, (uint64_t)v434);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&__dst, "hasBecomeVisible");
        uint64_t v175 = gdc::DebugTreeNode::createChildNode((uint64_t)v145, (long long *)&__dst);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&__dst, "hasBecomeVisible");
        uint64_t v176 = *((unsigned __int8 *)v143 + 107);
        memset(&v432[4], 0, 24);
        int v433 = 0;
        v432[0] = v176;
        gdc::DebugTreeNode::addProperty((uint64_t)v175, (uint64_t)&__dst, (uint64_t)v432);
        if (v143[14])
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 13;
          strcpy((char *)&__dst, "eyeCoordinate");
          long long v177 = gdc::DebugTreeNode::createChildNode((uint64_t)v175, (long long *)&__dst);
          unint64_t v178 = (uint64_t *)v143[14];
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 3;
          LODWORD(__dst.__r_.__value_.__l.__data_) = 7627116;
          uint64_t v179 = *v178;
          uint64_t v429 = 0;
          uint64_t v430 = 0;
          uint64_t v428 = 0;
          int v431 = 2;
          uint64_t v427 = v179;
          gdc::DebugTreeNode::addProperty((uint64_t)v177, (uint64_t)&__dst, (uint64_t)v426);
          unint64_t v180 = v143[14];
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 3;
          LODWORD(__dst.__r_.__value_.__l.__data_) = 6778476;
          uint64_t v181 = v180[1];
          uint64_t v423 = 0;
          uint64_t v424 = 0;
          uint64_t v422 = 0;
          int v425 = 2;
          uint64_t v421 = v181;
          gdc::DebugTreeNode::addProperty((uint64_t)v177, (uint64_t)&__dst, (uint64_t)v420);
          float64_t v182 = v143[14];
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&__dst, "altitude");
          uint64_t v183 = v182[2];
          uint64_t v417 = 0;
          uint64_t v418 = 0;
          uint64_t v416 = 0;
          int v419 = 2;
          uint64_t v415 = v183;
          gdc::DebugTreeNode::addProperty((uint64_t)v177, (uint64_t)&__dst, (uint64_t)v414);
          uint64_t v184 = *((void *)v143[14] + 4);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&__dst, "distance");
          uint64_t v411 = 0;
          uint64_t v412 = 0;
          uint64_t v410 = 0;
          int v413 = 2;
          uint64_t v409 = v184;
          gdc::DebugTreeNode::addProperty((uint64_t)v175, (uint64_t)&__dst, (uint64_t)v408);
          uint64_t v185 = *((void *)v143[14] + 3);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 15;
          strcpy((char *)&__dst, "faceAngleCosine");
          uint64_t v405 = 0;
          uint64_t v406 = 0;
          uint64_t v404 = 0;
          int v407 = 2;
          uint64_t v403 = v185;
          gdc::DebugTreeNode::addProperty((uint64_t)v175, (uint64_t)&__dst, (uint64_t)v402);
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 21;
        strcpy((char *)&__dst, "fixedPerspectiveScale");
        float v186 = *((float *)v143[2] + 266);
        uint64_t v399 = 0;
        uint64_t v400 = 0;
        uint64_t v398 = 0;
        int v401 = 2;
        double v397 = v186;
        gdc::DebugTreeNode::addProperty((uint64_t)v145, (uint64_t)&__dst, (uint64_t)v396);
        unsigned int v187 = *((_DWORD *)v143 + 8);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 10;
        strcpy((char *)&__dst, "identifier");
        if (!v187)
        {
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&__p, "UNKNOWN");
          memset(&v394, 0, sizeof(v394));
          int v395 = 4;
LABEL_188:
          std::string v394 = __p;
          goto LABEL_189;
        }
        std::to_string(&__p, v187);
        memset(&v394, 0, sizeof(v394));
        int v395 = 4;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_188;
        }
        std::string::__assign_no_alias<true>(&v394, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_189:
        gdc::DebugTreeNode::addProperty((uint64_t)v145, (uint64_t)&__dst, (uint64_t)v393);
        if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v394.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 13;
        strcpy((char *)&__dst, "screenHeading");
        uint64_t v390 = 0;
        uint64_t v391 = 0;
        uint64_t v389 = 0;
        int v392 = 2;
        double v388 = v167;
        gdc::DebugTreeNode::addProperty((uint64_t)v145, (uint64_t)&__dst, (uint64_t)v387);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&__dst, "isDirectlyBehind");
        memset(&v385[4], 0, 24);
        int v386 = 0;
        v385[0] = (v154 * (v259 - v150) + v155 * (v266 - v152) + v153 * (v262 - v147))
                / sqrt((v262 - v147) * (v262 - v147) + (v259 - v150) * (v259 - v150) + (v266 - v152) * (v266 - v152)) <= v270;
        gdc::DebugTreeNode::addProperty((uint64_t)v145, (uint64_t)&__dst, (uint64_t)v385);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 13;
        strcpy((char *)&__dst, "angleFromView");
        uint64_t v382 = 0;
        uint64_t v383 = 0;
        uint64_t v381 = 0;
        int v384 = 2;
        double v380 = v255 * 57.2957795;
        gdc::DebugTreeNode::addProperty((uint64_t)v145, (uint64_t)&__dst, (uint64_t)v379);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
        strcpy((char *)&__dst, "pointDir");
        uint64_t v188 = gdc::DebugTreeNode::createChildNode((uint64_t)v145, (long long *)&__dst);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 120;
        uint64_t v376 = 0;
        uint64_t v377 = 0;
        uint64_t v375 = 0;
        int v378 = 2;
        double v374 = v256;
        gdc::DebugTreeNode::addProperty((uint64_t)v188, (uint64_t)&__dst, (uint64_t)v373);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 121;
        uint64_t v370 = 0;
        uint64_t v371 = 0;
        uint64_t v369 = 0;
        int v372 = 2;
        double v368 = v257;
        gdc::DebugTreeNode::addProperty((uint64_t)v188, (uint64_t)&__dst, (uint64_t)v367);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 122;
        uint64_t v364 = 0;
        uint64_t v365 = 0;
        uint64_t v363 = 0;
        int v366 = 2;
        double v362 = v173;
        gdc::DebugTreeNode::addProperty((uint64_t)v188, (uint64_t)&__dst, (uint64_t)v361);
        double v189 = *((double *)v143 + 7);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 9;
        strcpy((char *)&__dst, "elevation");
        uint64_t v358 = 0;
        uint64_t v359 = 0;
        uint64_t v357 = 0;
        int v360 = 2;
        double v356 = v189 * 40075017.0;
        gdc::DebugTreeNode::addProperty((uint64_t)v145, (uint64_t)&__dst, (uint64_t)v355);
        id v190 = v143[15];
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 15;
        strcpy((char *)&__dst, "elevationOffset");
        uint64_t v352 = 0;
        uint64_t v353 = 0;
        uint64_t v351 = 0;
        int v354 = 2;
        id v350 = v190;
        gdc::DebugTreeNode::addProperty((uint64_t)v145, (uint64_t)&__dst, (uint64_t)v349);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 10;
        strcpy((char *)&__dst, "worldPoint");
        unint64_t v191 = gdc::DebugTreeNode::createChildNode((uint64_t)v145, (long long *)&__dst);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 120;
        id v192 = v143[5];
        uint64_t v346 = 0;
        uint64_t v347 = 0;
        uint64_t v345 = 0;
        int v348 = 2;
        id v344 = v192;
        gdc::DebugTreeNode::addProperty((uint64_t)v191, (uint64_t)&__dst, (uint64_t)v343);
        id v193 = v143[6];
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 121;
        uint64_t v340 = 0;
        uint64_t v341 = 0;
        uint64_t v339 = 0;
        int v342 = 2;
        id v338 = v193;
        gdc::DebugTreeNode::addProperty((uint64_t)v191, (uint64_t)&__dst, (uint64_t)v337);
        id v194 = v143[7];
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
        LOWORD(__dst.__r_.__value_.__l.__data_) = 122;
        uint64_t v334 = 0;
        uint64_t v335 = 0;
        uint64_t v333 = 0;
        int v336 = 2;
        id v332 = v194;
        gdc::DebugTreeNode::addProperty((uint64_t)v191, (uint64_t)&__dst, (uint64_t)v331);
        if (v258)
        {
          if (v254 == 3.4028e38) {
            float v195 = 0.0;
          }
          else {
            float v195 = v254;
          }
          long double v196 = exp(v252 * 6.28318531 + -3.14159265);
          double v197 = atan(v196);
          long double v198 = fmod(v253 * 6.28318531, 6.28318531);
          double v199 = fmod(v198 + 6.28318531, 6.28318531) * 57.2957795 + -180.0;
          double v200 = v197 * 114.591559 + -90.0;
        }
        else
        {
          double v201 = sqrt(v250 * v250 + v249 * v249);
          double v202 = atan2(v251, v201 * 0.996647189);
          double v203 = atan2(v249, v250);
          __double2 v204 = __sincos_stret(v202);
          double v200 = atan2(v251 + v204.__sinval * v204.__sinval * 42841.3115 * v204.__sinval, v201 + v204.__cosval * v204.__cosval * -42697.6727 * v204.__cosval)* 57.2957795;
          double v199 = v203 * 57.2957795;
          if (v254 == 3.4028e38) {
            float v195 = 0.0;
          }
          else {
            float v195 = v254;
          }
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 10;
        strcpy((char *)&__dst, "coordinate");
        uint64_t v205 = gdc::DebugTreeNode::createChildNode((uint64_t)v145, (long long *)&__dst);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 3;
        LODWORD(__dst.__r_.__value_.__l.__data_) = 7627116;
        uint64_t v328 = 0;
        uint64_t v329 = 0;
        uint64_t v327 = 0;
        int v330 = 2;
        double v326 = v200;
        gdc::DebugTreeNode::addProperty((uint64_t)v205, (uint64_t)&__dst, (uint64_t)v325);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 3;
        LODWORD(__dst.__r_.__value_.__l.__data_) = 6778476;
        uint64_t v322 = 0;
        uint64_t v323 = 0;
        uint64_t v321 = 0;
        int v324 = 2;
        double v320 = v199;
        gdc::DebugTreeNode::addProperty((uint64_t)v205, (uint64_t)&__dst, (uint64_t)v319);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
        strcpy((char *)&__dst, "altitude");
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        uint64_t v315 = 0;
        int v318 = 2;
        double v314 = v195;
        gdc::DebugTreeNode::addProperty((uint64_t)v205, (uint64_t)&__dst, (uint64_t)v313);
        int8x8_t v206 = *(int8x8_t *)(v74 + 2120);
        if (!*(void *)&v206) {
          goto LABEL_229;
        }
        unint64_t v207 = (unint64_t)v143[2];
        unint64_t v208 = 0x9DDFEA08EB382D69 * (((8 * v207) + 8) ^ HIDWORD(v207));
        unint64_t v209 = 0x9DDFEA08EB382D69 * (HIDWORD(v207) ^ (v208 >> 47) ^ v208);
        unint64_t v210 = 0x9DDFEA08EB382D69 * (v209 ^ (v209 >> 47));
        uint8x8_t v211 = (uint8x8_t)vcnt_s8(v206);
        v211.i16[0] = vaddlv_u8(v211);
        if (v211.u32[0] > 1uLL)
        {
          unint64_t v212 = v210;
          if (v210 >= *(void *)&v206) {
            unint64_t v212 = v210 % *(void *)&v206;
          }
        }
        else
        {
          unint64_t v212 = v210 & (*(void *)&v206 - 1);
        }
        uint64_t v213 = *(void **)(*(void *)(v74 + 2112) + 8 * v212);
        if (!v213) {
          goto LABEL_229;
        }
        unint64_t v214 = (void *)*v213;
        if (!*v213) {
          goto LABEL_229;
        }
        if (v211.u32[0] < 2uLL)
        {
          uint64_t v215 = *(void *)&v206 - 1;
          while (1)
          {
            uint64_t v217 = v214[1];
            if (v217 == v210)
            {
              if (v214[2] == v207) {
                goto LABEL_222;
              }
            }
            else if ((v217 & v215) != v212)
            {
              goto LABEL_229;
            }
            unint64_t v214 = (void *)*v214;
            if (!v214) {
              goto LABEL_229;
            }
          }
        }
        while (1)
        {
          unint64_t v216 = v214[1];
          if (v216 == v210) {
            break;
          }
          if (v216 >= *(void *)&v206) {
            v216 %= *(void *)&v206;
          }
          if (v216 != v212) {
            goto LABEL_229;
          }
LABEL_211:
          unint64_t v214 = (void *)*v214;
          if (!v214) {
            goto LABEL_229;
          }
        }
        if (v214[2] != v207) {
          goto LABEL_211;
        }
LABEL_222:
        unint64_t v218 = (double *)v214[3];
        uint64_t v219 = (double *)operator new(0x38uLL);
        int v220 = v219;
        long long v221 = *((_OWORD *)v218 + 1);
        long long v222 = *((_OWORD *)v218 + 2);
        v219[6] = v218[6];
        *((_OWORD *)v219 + 1) = v221;
        *((_OWORD *)v219 + 2) = v222;
        uint64_t v223 = *(void *)(v74 + 2088);
        *(void *)(v223 + 8) = v219;
        *(void *)(v74 + 2088) = v219;
        *(void *)uint64_t v219 = v223;
        *((void *)v219 + 1) = v244;
        uint64_t v224 = *(double **)(v74 + 2152);
        if (v224 == v218)
        {
          unint64_t v225 = (double *)*((void *)v218 + 1);
          goto LABEL_226;
        }
        unint64_t v225 = v219;
        if (v224 == v244) {
LABEL_226:
        }
          *(void *)(v74 + 2152) = v225;
        uint64_t v226 = *(void *)v218;
        *(double *)(v226 + 8) = v218[1];
        **((void **)v218 + 1) = v226;
        operator delete(v218);
        v214[3] = v220;
        if (v220 != v244)
        {
          double v227 = v220[4];
          double v228 = v220[5] * 40075017.0;
          double v229 = v220[3];
          long double v230 = exp(v227 * 6.28318531 + -3.14159265);
          double v231 = atan(v230);
          long double v232 = fmod(v229 * 6.28318531, 6.28318531) + 6.28318531;
          long double v233 = fmod(v232, 6.28318531) * 57.2957795 + -180.0;
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 17;
          strcpy((char *)&__dst, "intersectionPoint");
          BOOL v234 = gdc::DebugTreeNode::createChildNode((uint64_t)v145, (long long *)&__dst);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&__dst, "mercator");
          uint64_t v235 = gdc::DebugTreeNode::createChildNode((uint64_t)v234, (long long *)&__dst);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
          LOWORD(__dst.__r_.__value_.__l.__data_) = 120;
          uint64_t v310 = 0;
          uint64_t v311 = 0;
          uint64_t v309 = 0;
          int v312 = 2;
          double v308 = v229;
          gdc::DebugTreeNode::addProperty((uint64_t)v235, (uint64_t)&__dst, (uint64_t)v307);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
          LOWORD(__dst.__r_.__value_.__l.__data_) = 121;
          uint64_t v304 = 0;
          uint64_t v305 = 0;
          uint64_t v303 = 0;
          int v306 = 2;
          double v302 = v227;
          gdc::DebugTreeNode::addProperty((uint64_t)v235, (uint64_t)&__dst, (uint64_t)v301);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
          LOWORD(__dst.__r_.__value_.__l.__data_) = 122;
          uint64_t v298 = 0;
          uint64_t v299 = 0;
          uint64_t v297 = 0;
          int v300 = 2;
          double v296 = v228;
          gdc::DebugTreeNode::addProperty((uint64_t)v235, (uint64_t)&__dst, (uint64_t)v295);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 10;
          strcpy((char *)&__dst, "coordinate");
          uint64_t v236 = gdc::DebugTreeNode::createChildNode((uint64_t)v234, (long long *)&__dst);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 3;
          LODWORD(__dst.__r_.__value_.__l.__data_) = 7627116;
          uint64_t v292 = 0;
          uint64_t v293 = 0;
          uint64_t v291 = 0;
          int v294 = 2;
          double v290 = v231 * 114.591559 + -90.0;
          gdc::DebugTreeNode::addProperty((uint64_t)v236, (uint64_t)&__dst, (uint64_t)v289);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 3;
          LODWORD(__dst.__r_.__value_.__l.__data_) = 6778476;
          uint64_t v286 = 0;
          uint64_t v287 = 0;
          uint64_t v285 = 0;
          int v288 = 2;
          long double v284 = v233;
          gdc::DebugTreeNode::addProperty((uint64_t)v236, (uint64_t)&__dst, (uint64_t)v283);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&__dst, "altitude");
          uint64_t v280 = 0;
          uint64_t v281 = 0;
          uint64_t v279 = 0;
          int v282 = 2;
          double v278 = v228;
          gdc::DebugTreeNode::addProperty((uint64_t)v236, (uint64_t)&__dst, (uint64_t)v277);
        }
LABEL_229:
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
        strcpy((char *)&__dst, "distance");
        double v237 = *((double *)v143 + 12);
        uint64_t v274 = 0;
        uint64_t v275 = 0;
        uint64_t v273 = 0;
        int v276 = 2;
        double v272 = sqrt(v237);
        gdc::DebugTreeNode::addProperty((uint64_t)v145, (uint64_t)&__dst, (uint64_t)v271);
        unsigned int v238 = *((_DWORD *)v143[2] + 12);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&__dst, "label");
        if (v238)
        {
          std::to_string(&__p, v238);
        }
        else
        {
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&__p, "UNKNOWN");
        }
        uint64_t v240 = gdc::DebugTreeNode::createChildNode((uint64_t)v145, (long long *)&__dst, (long long *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        md::Label::populateDebugNode((md::Label *)v143[2], (gdc::DebugTreeNode *)v240, v239);
        v143 += 16;
      }
      while (v143 != v246);
LABEL_235:
      if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v599.__r_.__value_.__l.__data_);
      }
      __int16 v118 = v248 + 5;
    }
    while (v248 + 5 != v241);
  }
}

void sub_1A2605628(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0xF27]) < 0) {
    operator delete((void *)STACK[0xF10]);
  }
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingContinueFeatureDedupingGroup::getAlternateLayout(md::ARWalkingContinueFeatureDedupingGroup *this, md::LabelBase *a2)
{
  uint64_t v2 = *((void *)this + 36);
  uint64_t v3 = *(void *)(v2 + 272);
  if (!v3) {
    goto LABEL_17;
  }
  uint64_t v4 = v2 + 272;
  unsigned int v5 = *((_DWORD *)a2 + 12);
  uint64_t v6 = v4;
  do
  {
    unsigned int v7 = *(_DWORD *)(v3 + 32);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v3;
    }
    else {
      uint64_t v9 = (uint64_t *)(v3 + 8);
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 != v4 && v5 >= *(_DWORD *)(v6 + 32) && (uint64_t v10 = *(void *)(v6 + 40)) != 0)
  {
    BOOL v11 = *(_DWORD *)(v10 + 160) == v5;
    uint64_t v12 = 160;
    if (v11) {
      uint64_t v12 = 164;
    }
    unsigned int v13 = *(_DWORD *)(v10 + v12);
    unint64_t v14 = *((void *)this + 43);
    if (!v14) {
      return 0;
    }
  }
  else
  {
LABEL_17:
    unsigned int v13 = 0;
    unint64_t v14 = *((void *)this + 43);
    if (!v14) {
      return 0;
    }
  }
  uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v16 = v13;
    if (v14 <= v13) {
      unint64_t v16 = v13 % v14;
    }
  }
  else
  {
    unint64_t v16 = (v14 - 1) & v13;
  }
  uint64_t v17 = *(uint64_t ***)(*((void *)this + 42) + 8 * v16);
  if (!v17) {
    return 0;
  }
  uint64_t v18 = *v17;
  if (!v18) {
    return 0;
  }
  if (v15.u32[0] < 2uLL)
  {
    unint64_t v19 = v14 - 1;
    while (1)
    {
      uint64_t v21 = v18[1];
      if (v21 == v13)
      {
        if (*((_DWORD *)v18 + 4) == v13) {
          return v18[3];
        }
      }
      else if ((v21 & v19) != v16)
      {
        return 0;
      }
      uint64_t v18 = (uint64_t *)*v18;
      if (!v18) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v20 = v18[1];
    if (v20 == v13) {
      break;
    }
    if (v20 >= v14) {
      v20 %= v14;
    }
    if (v20 != v16) {
      return 0;
    }
LABEL_27:
    uint64_t v18 = (uint64_t *)*v18;
    if (!v18) {
      return 0;
    }
  }
  if (*((_DWORD *)v18 + 4) != v13) {
    goto LABEL_27;
  }
  return v18[3];
}

void md::ARWalkingContinueFeatureDedupingGroup::onLabelRemoved(int8x8_t *this, md::LabelBase *a2)
{
  md::ARWalkingLabelLayoutDedupingGroup::onLabelRemoved(this, a2);
  int8x8_t v4 = this[43];
  if (v4)
  {
    unint64_t v5 = *((unsigned int *)a2 + 12);
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v7 = *((unsigned int *)a2 + 12);
      if (*(void *)&v4 <= v5) {
        unint64_t v7 = v5 % *(void *)&v4;
      }
    }
    else
    {
      unint64_t v7 = (v4.i32[0] - 1) & v5;
    }
    int8x8_t v8 = this[42];
    uint64_t v9 = *(int8x8_t ***)(*(void *)&v8 + 8 * v7);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        uint64_t v11 = *(void *)&v4 - 1;
        if (v6.u32[0] < 2uLL)
        {
          while (1)
          {
            int8x8_t v12 = v10[1];
            if (*(void *)&v12 == v5)
            {
              if (v10[2].i32[0] == v5) {
                goto LABEL_22;
              }
            }
            else if ((*(void *)&v12 & v11) != v7)
            {
              return;
            }
            uint64_t v10 = (int8x8_t *)*v10;
            if (!v10) {
              return;
            }
          }
        }
        do
        {
          unint64_t v13 = (unint64_t)v10[1];
          if (v13 == v5)
          {
            if (v10[2].i32[0] == v5)
            {
LABEL_22:
              if (v6.u32[0] > 1uLL)
              {
                if (*(void *)&v4 <= v5) {
                  v5 %= *(void *)&v4;
                }
              }
              else
              {
                v5 &= v11;
              }
              unint64_t v14 = *(int8x8_t **)(*(void *)&v8 + 8 * v5);
              do
              {
                uint8x8_t v15 = v14;
                unint64_t v14 = (int8x8_t *)*v14;
              }
              while (v14 != v10);
              if (v15 == &this[44]) {
                goto LABEL_39;
              }
              int8x8_t v16 = v15[1];
              if (v6.u32[0] > 1uLL)
              {
                if (*(void *)&v16 >= *(void *)&v4) {
                  *(void *)&v16 %= *(void *)&v4;
                }
              }
              else
              {
                *(void *)&v16 &= v11;
              }
              if (*(void *)&v16 != v5)
              {
LABEL_39:
                if (!*(void *)v10) {
                  goto LABEL_40;
                }
                unint64_t v17 = *(void *)(*(void *)v10 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v17 >= *(void *)&v4) {
                    v17 %= *(void *)&v4;
                  }
                }
                else
                {
                  v17 &= v11;
                }
                if (v17 != v5) {
LABEL_40:
                }
                  *(void *)(*(void *)&v8 + 8 * v5) = 0;
              }
              int8x8_t v18 = *v10;
              if (*v10)
              {
                unint64_t v19 = *(void *)(*(void *)&v18 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v19 >= *(void *)&v4) {
                    v19 %= *(void *)&v4;
                  }
                }
                else
                {
                  v19 &= v11;
                }
                if (v19 != v5)
                {
                  *(void *)(*(void *)&this[42] + 8 * v19) = v15;
                  int8x8_t v18 = *v10;
                }
              }
              *uint8x8_t v15 = v18;
              int8x8_t *v10 = 0;
              --*(void *)&this[45];
              operator delete(v10);
              return;
            }
          }
          else
          {
            if (v13 >= *(void *)&v4) {
              v13 %= *(void *)&v4;
            }
            if (v13 != v7) {
              return;
            }
          }
          uint64_t v10 = (int8x8_t *)*v10;
        }
        while (v10);
      }
    }
  }
}

void md::ARWalkingContinueFeatureDedupingGroup::onLabelAdded(md::ARWalkingContinueFeatureDedupingGroup *this, md::LabelBase *a2)
{
  md::ARWalkingLabelLayoutDedupingGroup::onLabelAdded(this, (unint64_t)a2);
  unint64_t v5 = *((unsigned int *)a2 + 12);
  unint64_t v6 = *((void *)this + 43);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v2 = *((unsigned int *)a2 + 12);
      if (v6 <= v5) {
        unint64_t v2 = v5 % v6;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
    int8x8_t v8 = *(void ***)(*((void *)this + 42) + 8 * v2);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = v9[1];
            if (v11 == v5)
            {
              if (*((_DWORD *)v9 + 4) == v5) {
                goto LABEL_82;
              }
            }
            else if ((v11 & (v6 - 1)) != v2)
            {
              goto LABEL_22;
            }
            uint64_t v9 = (void *)*v9;
            if (!v9) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == v5)
          {
            if (*((_DWORD *)v9 + 4) == v5) {
              goto LABEL_82;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v2) {
              break;
            }
          }
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_22:
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = 0;
  v9[1] = v5;
  *((_DWORD *)v9 + 4) = v5;
  v9[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)this + 45) + 1);
  float v13 = *((float *)this + 92);
  if (v6 && (float)(v13 * (float)v6) >= v12)
  {
    unint64_t v5 = v2;
    goto LABEL_72;
  }
  BOOL v14 = 1;
  if (v6 >= 3) {
    BOOL v14 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v6);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    size_t prime = v16;
  }
  else {
    size_t prime = v15;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v6 = *((void *)this + 43);
  }
  if (prime > v6)
  {
LABEL_35:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v18 = operator new(8 * prime);
    unint64_t v19 = (void *)*((void *)this + 42);
    *((void *)this + 42) = v18;
    if (v19) {
      operator delete(v19);
    }
    uint64_t v20 = 0;
    *((void *)this + 43) = prime;
    do
      *(void *)(*((void *)this + 42) + 8 * v20++) = 0;
    while (prime != v20);
    uint64_t v21 = (void *)*((void *)this + 44);
    if (!v21) {
      goto LABEL_59;
    }
    uint64_t v22 = (char *)this + 352;
    size_t v23 = v21[1];
    size_t v24 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v25 = v23 & v24;
      *(void *)(*((void *)this + 42) + 8 * v25) = v22;
      for (uint64_t i = (void *)*v21; *v21; uint64_t i = (void *)*v21)
      {
        size_t v27 = i[1] & v24;
        if (v27 == v25)
        {
          uint64_t v21 = i;
        }
        else
        {
          uint64_t v28 = *((void *)this + 42);
          if (*(void *)(v28 + 8 * v27))
          {
            *uint64_t v21 = *i;
            uint64_t v29 = 8 * v27;
            *uint64_t i = **(void **)(*((void *)this + 42) + v29);
            **(void **)(*((void *)this + 42) + v29) = i;
          }
          else
          {
            *(void *)(v28 + 8 * v27) = v21;
            uint64_t v21 = i;
            size_t v25 = v27;
          }
        }
      }
LABEL_59:
      unint64_t v6 = prime;
      goto LABEL_60;
    }
    if (v23 >= prime) {
      v23 %= prime;
    }
    *(void *)(*((void *)this + 42) + 8 * v23) = v22;
    double v33 = (void *)*v21;
    if (!*v21) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v23)
      {
        uint64_t v36 = *((void *)this + 42);
        if (!*(void *)(v36 + 8 * v35))
        {
          *(void *)(v36 + 8 * v35) = v21;
          goto LABEL_64;
        }
        *uint64_t v21 = *v33;
        uint64_t v34 = 8 * v35;
        void *v33 = **(void **)(*((void *)this + 42) + v34);
        **(void **)(*((void *)this + 42) + v34) = v33;
        double v33 = v21;
      }
      size_t v35 = v23;
LABEL_64:
      uint64_t v21 = v33;
      double v33 = (void *)*v33;
      size_t v23 = v35;
      if (!v33) {
        goto LABEL_59;
      }
    }
  }
  if (prime >= v6) {
    goto LABEL_60;
  }
  unint64_t v30 = vcvtps_u32_f32((float)*((unint64_t *)this + 45) / *((float *)this + 92));
  if (v6 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    unint64_t v30 = std::__next_prime(v30);
  }
  else
  {
    uint64_t v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2) {
      unint64_t v30 = v32;
    }
  }
  if (prime <= v30) {
    size_t prime = v30;
  }
  if (prime < v6)
  {
    if (!prime)
    {
      uint64_t v40 = (void *)*((void *)this + 42);
      *((void *)this + 42) = 0;
      if (v40) {
        operator delete(v40);
      }
      unint64_t v6 = 0;
      *((void *)this + 43) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v6 = *((void *)this + 43);
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5) {
      v5 %= v6;
    }
  }
  else
  {
    unint64_t v5 = (v6 - 1) & v5;
  }
LABEL_72:
  uint64_t v37 = *((void *)this + 42);
  uint64_t v38 = *(void **)(v37 + 8 * v5);
  if (v38)
  {
    void *v9 = *v38;
LABEL_80:
    *uint64_t v38 = v9;
    goto LABEL_81;
  }
  void *v9 = *((void *)this + 44);
  *((void *)this + 44) = v9;
  *(void *)(v37 + 8 * v5) = (char *)this + 352;
  if (*v9)
  {
    unint64_t v39 = *(void *)(*v9 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v39 >= v6) {
        v39 %= v6;
      }
    }
    else
    {
      v39 &= v6 - 1;
    }
    uint64_t v38 = (void *)(*((void *)this + 42) + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)this + 45);
LABEL_82:
  v9[3] = a2;
}

void sub_1A2605F04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL md::ARWalkingContinueFeatureDedupingGroup::isResolved(md::ARWalkingContinueFeatureDedupingGroup *this)
{
  return *((void *)this + 6) != *((void *)this + 5);
}

void md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(int8x8_t *this, const md::LabelLayoutContext **a2)
{
  md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(this, a2[54]);
  int8x8_t v4 = (uint64_t *)this[5];
  if (v4 == (uint64_t *)this[6]) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v4;
  }
  this[6] = (int8x8_t)v4;
  this[9] = 0;
  id v68 = *(id *)&this[32];
  if (this[40])
  {
    unint64_t v6 = (void *)this[39];
    if (v6)
    {
      do
      {
        uint8x8_t v7 = (void *)*v6;
        operator delete(v6);
        unint64_t v6 = v7;
      }
      while (v7);
    }
    this[39] = 0;
    int8x8_t v8 = this[38];
    if (v8)
    {
      uint64_t v9 = 0;
      do
        *(void *)(*(void *)&this[37] + 8 * v9++) = 0;
      while (*(void *)&v8 != v9);
    }
    this[40] = 0;
  }
  unint64_t v10 = (int8x16_t *)this[1];
  uint64_t v11 = (unint64_t *)this[2];
  if (v10 != (int8x16_t *)v11)
  {
    do
    {
      while (1)
      {
        unint64_t v12 = v10->i64[0];
        if (*(unsigned char *)(v10->i64[0] + 1290))
        {
          if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(&this[26], v10->i64[0]))
          {
            break;
          }
        }
        if (v10 != (int8x16_t *)--v11)
        {
          while (1)
          {
            unint64_t v13 = *v11;
            if (*(unsigned char *)(*v11 + 1290))
            {
              if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(&this[26], *v11))
              {
                break;
              }
            }
            if (--v11 == (unint64_t *)v10) {
              goto LABEL_22;
            }
          }
          v10->i64[0] = v13;
          unint64_t v10 = (int8x16_t *)((char *)v10 + 8);
          unint64_t *v11 = v12;
          if (v10 != (int8x16_t *)v11) {
            continue;
          }
        }
        goto LABEL_22;
      }
      unint64_t v10 = (int8x16_t *)((char *)v10 + 8);
    }
    while (v10 != (int8x16_t *)v11);
    unint64_t v10 = (int8x16_t *)v11;
  }
LABEL_22:
  BOOL v14 = (int8x16_t *)this[1];
  uint64_t v65 = this;
  char v66 = &v68;
  uint64_t v67 = (float *)(a2 + 445);
  uint64_t v15 = (uint64_t)v10;
  uint64_t i = v10;
  if (v14 == v10) {
    goto LABEL_85;
  }
  unint64_t v17 = v10;
  do
  {
    while (1)
    {
      if (v5 == v14->i64[0])
      {
        uint64_t v69 = (int8x8_t **)v5;
        uint64_t v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 8) + 304))(*(void *)(v5 + 8), v5 + 48);
        if (v19)
        {
          uint64_t v20 = v18;
          uint64_t v21 = (uint64_t *)v69;
          uint64_t v22 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v65[37], (unint64_t)v69);
          if (v22)
          {
            double v23 = v22[3];
          }
          else
          {
            [*v66 distanceFromPoint:*(void *)v67 toPoint:v20];
            double v23 = v24;
            if (*(_DWORD *)v67 > v20 || *(_DWORD *)v67 == v20 && v67[1] > *((float *)&v20 + 1)) {
              double v23 = -v24;
            }
            *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&v65[37], (unint64_t)v21, &v69)+ 3) = v23;
          }
        }
        else
        {
          double v23 = 0.0;
        }
        if (v23 >= -(*(double *)&this[35] * *(double *)&this[34])) {
          break;
        }
      }
      unint64_t v17 = (int8x16_t *)((char *)v17 - 8);
      if (v14 != v17)
      {
        while (1)
        {
          if (v5 == v17->i64[0])
          {
            uint64_t v69 = (int8x8_t **)v5;
            uint64_t v26 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 8) + 304))(*(void *)(v5 + 8), v5 + 48);
            if (v27)
            {
              uint64_t v28 = v26;
              uint64_t v29 = (uint64_t *)v69;
              unint64_t v30 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&v65[37], (unint64_t)v69);
              if (v30)
              {
                double v25 = v30[3];
              }
              else
              {
                [*v66 distanceFromPoint:*(void *)v67 toPoint:v28];
                double v25 = v31;
                if (*(_DWORD *)v67 > v28
                  || *(_DWORD *)v67 == v28 && v67[1] > *((float *)&v28 + 1))
                {
                  double v25 = -v31;
                }
                *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>((float *)&v65[37], (unint64_t)v29, &v69)+ 3) = v25;
              }
            }
            else
            {
              double v25 = 0.0;
            }
            if (v25 >= -(*(double *)&this[35] * *(double *)&this[34])) {
              break;
            }
          }
          unint64_t v17 = (int8x16_t *)((char *)v17 - 8);
          if (v17 == v14) {
            goto LABEL_52;
          }
        }
        unint64_t v32 = v14->i64[0];
        v14->i64[0] = v17->i64[0];
        BOOL v14 = (int8x16_t *)((char *)v14 + 8);
        v17->i64[0] = v32;
        if (v14 != v17) {
          continue;
        }
      }
      goto LABEL_52;
    }
    BOOL v14 = (int8x16_t *)((char *)v14 + 8);
  }
  while (v14 != v17);
  BOOL v14 = v17;
LABEL_52:
  uint64_t v15 = (uint64_t)v10;
  uint64_t i = v10;
  if (v14 == v10) {
    goto LABEL_85;
  }
  uint64_t i = v10;
  double v33 = (unint64_t *)v14;
LABEL_54:
  uint64_t v34 = (float *)&v65[37];
  while (1)
  {
    unint64_t v35 = *v33;
    uint64_t v69 = (int8x8_t **)v35;
    uint64_t v36 = (*(uint64_t (**)(void, unint64_t))(**(void **)(v35 + 8) + 304))(*(void *)(v35 + 8), v35 + 48);
    if (!v37)
    {
      double v40 = 0.0;
      goto LABEL_65;
    }
    uint64_t v38 = v36;
    unint64_t v39 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v34, v35);
    if (!v39) {
      break;
    }
    double v40 = v39[3];
    if (v40 < 0.0) {
      goto LABEL_68;
    }
LABEL_65:
    if (v40 > *(double *)&this[35]) {
      goto LABEL_68;
    }
    if (++v33 == (unint64_t *)i)
    {
      uint64_t v15 = (uint64_t)v14;
      goto LABEL_85;
    }
  }
  [*v66 distanceFromPoint:*(void *)v67 toPoint:v38];
  double v40 = v41;
  if (*(_DWORD *)v67 > v38 || *(_DWORD *)v67 == v38 && v67[1] > *((float *)&v38 + 1)) {
    double v40 = -v41;
  }
  *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v34, v35, &v69)+ 3) = v40;
  if (v40 >= 0.0) {
    goto LABEL_65;
  }
LABEL_68:
  for (uint64_t i = (int8x16_t *)((char *)i - 8); i != (int8x16_t *)v33; uint64_t i = (int8x16_t *)((char *)i - 8))
  {
    unint64_t v43 = i->i64[0];
    uint64_t v69 = (int8x8_t **)v43;
    uint64_t v44 = (*(uint64_t (**)(void, unint64_t))(**(void **)(v43 + 8) + 304))(*(void *)(v43 + 8), v43 + 48);
    if (v45)
    {
      uint64_t v46 = v44;
      unint64_t v47 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v34, v43);
      if (v47)
      {
        double v42 = v47[3];
        if (v42 < 0.0) {
          continue;
        }
      }
      else
      {
        [*v66 distanceFromPoint:*(void *)v67 toPoint:v46];
        double v42 = v48;
        if (*(_DWORD *)v67 > v46 || *(_DWORD *)v67 == v46 && v67[1] > *((float *)&v46 + 1)) {
          double v42 = -v48;
        }
        *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v34, v43, &v69)+ 3) = v42;
        if (v42 < 0.0) {
          continue;
        }
      }
    }
    else
    {
      double v42 = 0.0;
    }
    if (v42 <= *(double *)&this[35])
    {
      unint64_t v49 = *v33;
      *v33++ = i->i64[0];
      i->i64[0] = v49;
      if (v33 == (unint64_t *)i) {
        break;
      }
      goto LABEL_54;
    }
  }
  uint64_t v15 = (uint64_t)v14;
  uint64_t i = (int8x16_t *)v33;
LABEL_85:
  unint64_t v50 = 126 - 2 * __clz(((uint64_t)i->i64 - v15) >> 3);
  uint64_t v69 = &v65;
  if (i == (int8x16_t *)v15) {
    uint64_t v51 = 0;
  }
  else {
    uint64_t v51 = v50;
  }
  std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>(v15, i, (uint64_t **)&v69, v51, 1);
  unint64_t v52 = 126 - 2 * __clz(((char *)v10 - (char *)i) >> 3);
  uint64_t v69 = &v65;
  if (v10 == i) {
    uint64_t v53 = 0;
  }
  else {
    uint64_t v53 = v52;
  }
  std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,false>((uint64_t)i, v10, (uint64_t **)&v69, v53, 1);
  uint64_t v54 = (int8x8_t *)this[1];
  uint64_t v55 = (int8x8_t *)this[2];
  if (v54 != v55)
  {
    unint64_t v56 = (char *)v55 - (char *)v54 - 8;
    if (v56 > 7)
    {
      uint64_t v59 = 0;
      uint64_t v60 = (v56 >> 3) + 1;
      uint64_t v57 = v60 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v61 = &v54[v59];
        int8x8_t v63 = *v61;
        int8x8_t v62 = v61[1];
        *(_DWORD *)(*(void *)&v63 + 32) = v59;
        *(_DWORD *)(*(void *)&v62 + 32) = v59 + 1;
        v59 += 2;
      }
      while (v57 != v59);
      if (v60 != v57)
      {
        uint64_t v58 = &v54[v60 & 0x3FFFFFFFFFFFFFFELL];
        goto LABEL_98;
      }
    }
    else
    {
      LODWORD(v57) = 0;
      uint64_t v58 = (int8x8_t *)this[1];
      do
      {
LABEL_98:
        uint64_t v64 = (uint64_t)*v58++;
        *(_DWORD *)(v64 + 32) = v57;
        LODWORD(v57) = v57 + 1;
      }
      while (v58 != v55);
    }
    this[9] = *v54;
  }
}

void sub_1A26065E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  unint64_t v12 = operator new(0x20uLL);
  void *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_59;
      }
      unint64_t v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        double v42 = *(void **)a1;
        *(void *)a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = operator new(8 * prime);
    uint64_t v22 = *(void **)a1;
    *(void *)a1 = v21;
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    double v25 = (uint64_t *)(a1 + 4);
    double v24 = (void *)*((void *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      unint64_t v9 = prime;
      goto LABEL_59;
    }
    size_t v26 = v24[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*(void *)a1 + 8 * v28) = v25;
      for (uint64_t i = (void *)*v24; *v24; uint64_t i = (void *)*v24)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          double v24 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v30))
        {
          *double v24 = *i;
          uint64_t v31 = 8 * v30;
          *uint64_t i = **(void **)(*(void *)a1 + v31);
          **(void **)(*(void *)a1 + v31) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v30) = v24;
          double v24 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v26) = v25;
    unint64_t v35 = (void *)*v24;
    if (!*v24) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 != v26)
      {
        if (!*(void *)(*(void *)a1 + 8 * v37))
        {
          *(void *)(*(void *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *double v24 = *v35;
        uint64_t v36 = 8 * v37;
        *unint64_t v35 = **(void **)(*(void *)a1 + v36);
        **(void **)(*(void *)a1 + v36) = v35;
        unint64_t v35 = v24;
      }
      size_t v37 = v26;
LABEL_63:
      double v24 = v35;
      unint64_t v35 = (void *)*v35;
      size_t v26 = v37;
      if (!v35) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v38 = *(void **)a1;
  unint64_t v39 = *(void **)(*(void *)a1 + 8 * v3);
  if (v39)
  {
    void *v12 = *v39;
LABEL_80:
    *unint64_t v39 = v12;
    goto LABEL_81;
  }
  void *v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    unint64_t v40 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9) {
        v40 %= v9;
      }
    }
    else
    {
      v40 &= v9 - 1;
    }
    unint64_t v39 = (void *)(*(void *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v12;
}

void sub_1A2606A88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>(uint64_t result, int8x16_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint8x8_t v10 = (int8x16_t *)result;
  while (2)
  {
    double v90 = &a2[-1].u64[1];
    uint64_t v86 = &a2[-2].u64[1];
    uint64_t v87 = (unint64_t *)&a2[-1];
    uint64_t v11 = (unint64_t *)v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint8x8_t v10 = (int8x16_t *)v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          uint64_t v13 = ((char *)a2 - (char *)v11) >> 3;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v90, v10->i64[0]);
                if (result)
                {
                  unint64_t v41 = v10->i64[0];
                  v10->i64[0] = *v90;
                  unint64_t *v90 = v41;
                }
                break;
              case 3:
                __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)v10, &v10->u64[1], v90, a3);
                break;
              case 4:
                double v42 = (unint64_t *)&v10[1];
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)v10, &v10->u64[1], (unint64_t *)&v10[1], a3);
                __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v90, v10[1].u64[0]);
                if (result)
                {
                  unint64_t v43 = *v42;
                  unint64_t *v42 = *v90;
                  unint64_t *v90 = v43;
                  __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v42, v10->u64[1]);
                  if (result)
                  {
                    uint64_t v45 = v10->i64[1];
                    unint64_t v44 = v10[1].u64[0];
                    unint64_t v46 = v10->i64[0];
                    v10->i64[1] = v44;
                    v10[1].i64[0] = v45;
                    __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v44, v46);
                    if (result) {
                      int8x16_t *v10 = vextq_s8(*v10, *v10, 8uLL);
                    }
                  }
                }
                break;
              case 5:
                __n128 result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>((unint64_t *)v10, &v10->u64[1], (unint64_t *)&v10[1], &v10[1].u64[1], v90, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            unint64_t v47 = (int8x16_t *)&v10->u64[1];
            BOOL v49 = v10 == a2 || v47 == a2;
            if (a5)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                uint64_t v51 = (unint64_t *)v10;
                do
                {
                  unint64_t v54 = *v51;
                  unint64_t v53 = v51[1];
                  uint64_t v51 = (unint64_t *)v47;
                  __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v53, v54);
                  if (result)
                  {
                    unint64_t v55 = *v51;
                    uint64_t v56 = v50;
                    do
                    {
                      *(uint64_t *)((char *)&v10->i64[1] + v56) = *(uint64_t *)((char *)v10->i64 + v56);
                      if (!v56)
                      {
                        i64 = v10->i64;
                        goto LABEL_75;
                      }
                      __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v55, *(unint64_t *)((char *)&v10->u64[-1] + v56));
                      v56 -= 8;
                    }
                    while ((result & 1) != 0);
                    i64 = (uint64_t *)((char *)&v10->i64[1] + v56);
LABEL_75:
                    void *i64 = v55;
                  }
                  unint64_t v47 = (int8x16_t *)(v51 + 1);
                  v50 += 8;
                }
                while (v51 + 1 != (unint64_t *)a2);
              }
            }
            else if (!v49)
            {
              do
              {
                unint64_t v80 = v10->i64[0];
                unint64_t v79 = v10->u64[1];
                uint8x8_t v10 = v47;
                __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v79, v80);
                if (result)
                {
                  unint64_t v81 = v10->i64[0];
                  int v82 = v10->i64;
                  do
                  {
                    uint64_t v83 = v82;
                    uint64_t v84 = *--v82;
                    void *v83 = v84;
                    __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v81, *(v83 - 2));
                  }
                  while ((result & 1) != 0);
                  void *v82 = v81;
                }
                unint64_t v47 = (int8x16_t *)&v10->u64[1];
              }
              while (&v10->u64[1] != (unint64_t *)a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != a2)
            {
              int64_t v57 = (unint64_t)(v13 - 2) >> 1;
              int64_t v91 = v57;
              uint64_t v85 = a2;
              do
              {
                int64_t v58 = v57;
                if (v91 >= v57)
                {
                  uint64_t v59 = (2 * v57) | 1;
                  uint64_t v60 = (unint64_t *)v10 + v59;
                  if (2 * v57 + 2 < v13
                    && md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v60, v60[1]))
                  {
                    ++v60;
                    uint64_t v59 = 2 * v58 + 2;
                  }
                  uint64_t v61 = (unint64_t *)v10 + v58;
                  __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v60, *v61);
                  if ((result & 1) == 0)
                  {
                    int64_t v89 = v58;
                    unint64_t v62 = *v61;
                    do
                    {
                      int8x8_t v63 = v60;
                      *uint64_t v61 = *v60;
                      if (v91 < v59) {
                        break;
                      }
                      uint64_t v64 = (2 * v59) | 1;
                      uint64_t v60 = (unint64_t *)v10 + v64;
                      if (2 * v59 + 2 < v13
                        && md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v60, v60[1]))
                      {
                        ++v60;
                        uint64_t v64 = 2 * v59 + 2;
                      }
                      __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v60, v62);
                      uint64_t v61 = v63;
                      uint64_t v59 = v64;
                    }
                    while (!result);
                    *int8x8_t v63 = v62;
                    a2 = v85;
                    int64_t v58 = v89;
                  }
                }
                int64_t v57 = v58 - 1;
              }
              while (v58);
              uint64_t v65 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v67 = a2;
                uint64_t v68 = 0;
                unint64_t v92 = v10->i64[0];
                uint64_t v69 = v10->i64;
                do
                {
                  unsigned int v70 = &v69[v68 + 1];
                  uint64_t v71 = (2 * v68) | 1;
                  uint64_t v72 = 2 * v68 + 2;
                  if (v72 < v65)
                  {
                    __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v70, v69[v68 + 2]);
                    if (result)
                    {
                      ++v70;
                      uint64_t v71 = v72;
                    }
                  }
                  *uint64_t v69 = *v70;
                  uint64_t v69 = v70;
                  uint64_t v68 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
                a2 = (int8x16_t *)((char *)v67 - 8);
                if (v70 == &v67[-1].u64[1])
                {
                  *unsigned int v70 = v92;
                }
                else
                {
                  *unsigned int v70 = a2->i64[0];
                  a2->i64[0] = v92;
                  uint64_t v73 = (char *)v70 - (char *)v10 + 8;
                  if (v73 >= 9)
                  {
                    unint64_t v74 = (((unint64_t)v73 >> 3) - 2) >> 1;
                    uint64_t v75 = (unint64_t *)v10 + v74;
                    __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v75, *v70);
                    if (result)
                    {
                      long double v76 = (int8x16_t *)((char *)v67 - 8);
                      unint64_t v77 = *v70;
                      do
                      {
                        std::string::size_type v78 = v75;
                        *unsigned int v70 = *v75;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        uint64_t v75 = (unint64_t *)v10 + v74;
                        __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v75, v77);
                        unsigned int v70 = v78;
                      }
                      while ((result & 1) != 0);
                      *std::string::size_type v78 = v77;
                      a2 = v76;
                    }
                  }
                }
              }
              while (v65-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          float v15 = (unint64_t *)v10 + ((unint64_t)v13 >> 1);
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v15, (unint64_t *)v10, v90, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)v10, v15, v90, a3);
            uint64_t v16 = v14;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(&v10->u64[1], &v10->u64[v16 - 1], v87, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)&v10[1], &v10->u64[v16 + 1], v86, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(&v10->u64[v16 - 1], v15, &v10->u64[v16 + 1], a3);
            uint64_t v17 = v10->i64[0];
            v10->i64[0] = v10->i64[v16];
            v10->i64[v16] = v17;
          }
          --a4;
          if ((a5 & 1) != 0
            || md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v10[-1].u64[1], v10->i64[0]))
          {
            break;
          }
          unint64_t v32 = v10->i64[0];
          __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v10->i64[0], *v90);
          if (result)
          {
            uint64_t v11 = (unint64_t *)v10;
            do
            {
              unint64_t v33 = v11[1];
              ++v11;
              __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v32, v33);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v34 = &v10->u64[1];
            do
            {
              uint64_t v11 = v34;
              if (v34 >= (unint64_t *)a2) {
                break;
              }
              ++v34;
              __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v32, *v11);
            }
            while (!result);
          }
          unint64_t v35 = (unint64_t *)a2;
          if (v11 < (unint64_t *)a2)
          {
            unint64_t v35 = (unint64_t *)a2;
            do
            {
              unint64_t v36 = *--v35;
              __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v32, v36);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v35)
          {
            unint64_t v37 = *v11;
            unint64_t *v11 = *v35;
            *unint64_t v35 = v37;
            do
            {
              unint64_t v38 = v11[1];
              ++v11;
            }
            while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v32, v38));
            do
            {
              unint64_t v39 = *--v35;
              __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v32, v39);
            }
            while ((result & 1) != 0);
          }
          unint64_t v40 = v11 - 1;
          BOOL v5 = v11 - 1 >= (unint64_t *)v10;
          BOOL v6 = v11 - 1 == (unint64_t *)v10;
          if (v11 - 1 != (unint64_t *)v10) {
            v10->i64[0] = *v40;
          }
          a5 = 0;
          *unint64_t v40 = v32;
        }
        unint64_t v18 = v10->i64[0];
        unint64_t v19 = v10;
        do
        {
          uint64_t v20 = v19;
          unint64_t v21 = v19->u64[1];
          unint64_t v19 = (int8x16_t *)((char *)v19 + 8);
        }
        while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v21, v18));
        uint64_t v22 = a2;
        if (v20 == v10)
        {
          uint64_t v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = v22[-1].u64[1];
            uint64_t v22 = (int8x16_t *)((char *)v22 - 8);
          }
          while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v24, v18));
        }
        else
        {
          do
          {
            unint64_t v23 = v22[-1].u64[1];
            uint64_t v22 = (int8x16_t *)((char *)v22 - 8);
          }
          while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v23, v18));
        }
        double v25 = a2;
        if (v19 < v22)
        {
          size_t v26 = (uint64_t *)v19;
          size_t v27 = (uint64_t *)v22;
          do
          {
            uint64_t v28 = *v26;
            *size_t v26 = *v27;
            *size_t v27 = v28;
            do
            {
              uint64_t v20 = (int8x16_t *)v26;
              unint64_t v29 = v26[1];
              ++v26;
            }
            while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v29, v18));
            do
              unint64_t v30 = *--v27;
            while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v30, v18));
          }
          while (v26 < v27);
        }
        if (v20 != v10) {
          v10->i64[0] = v20->i64[0];
        }
        v20->i64[0] = v18;
        a2 = v25;
        if (v19 >= v22) {
          break;
        }
LABEL_31:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>(v10, v20, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v11 = &v20->u64[1];
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v10, v20, a3);
      uint64_t v11 = &v20->u64[1];
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((int8x16_t *)&v20->u64[1], v25, a3);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_31;
      }
    }
    a2 = v20;
    if (!v31) {
      continue;
    }
    return result;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,false>(uint64_t result, int8x16_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint8x8_t v10 = (int8x16_t *)result;
  while (2)
  {
    double v90 = &a2[-1].u64[1];
    uint64_t v86 = &a2[-2].u64[1];
    uint64_t v87 = (unint64_t *)&a2[-1];
    uint64_t v11 = (unint64_t *)v10;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint8x8_t v10 = (int8x16_t *)v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          uint64_t v13 = ((char *)a2 - (char *)v11) >> 3;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v90, v10->i64[0]);
                if (result)
                {
                  unint64_t v41 = v10->i64[0];
                  v10->i64[0] = *v90;
                  unint64_t *v90 = v41;
                }
                break;
              case 3:
                __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)v10, &v10->u64[1], v90, a3);
                break;
              case 4:
                double v42 = (unint64_t *)&v10[1];
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)v10, &v10->u64[1], (unint64_t *)&v10[1], a3);
                __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v90, v10[1].u64[0]);
                if (result)
                {
                  unint64_t v43 = *v42;
                  unint64_t *v42 = *v90;
                  unint64_t *v90 = v43;
                  __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v42, v10->u64[1]);
                  if (result)
                  {
                    uint64_t v45 = v10->i64[1];
                    unint64_t v44 = v10[1].u64[0];
                    unint64_t v46 = v10->i64[0];
                    v10->i64[1] = v44;
                    v10[1].i64[0] = v45;
                    __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v44, v46);
                    if (result) {
                      int8x16_t *v10 = vextq_s8(*v10, *v10, 8uLL);
                    }
                  }
                }
                break;
              case 5:
                __n128 result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,0>((unint64_t *)v10, &v10->u64[1], (unint64_t *)&v10[1], &v10[1].u64[1], v90, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            unint64_t v47 = (int8x16_t *)&v10->u64[1];
            BOOL v49 = v10 == a2 || v47 == a2;
            if (a5)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                uint64_t v51 = (unint64_t *)v10;
                do
                {
                  unint64_t v54 = *v51;
                  unint64_t v53 = v51[1];
                  uint64_t v51 = (unint64_t *)v47;
                  __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v53, v54);
                  if (result)
                  {
                    unint64_t v55 = *v51;
                    uint64_t v56 = v50;
                    do
                    {
                      *(uint64_t *)((char *)&v10->i64[1] + v56) = *(uint64_t *)((char *)v10->i64 + v56);
                      if (!v56)
                      {
                        i64 = v10->i64;
                        goto LABEL_75;
                      }
                      __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v55, *(unint64_t *)((char *)&v10->u64[-1] + v56));
                      v56 -= 8;
                    }
                    while ((result & 1) != 0);
                    i64 = (uint64_t *)((char *)&v10->i64[1] + v56);
LABEL_75:
                    void *i64 = v55;
                  }
                  unint64_t v47 = (int8x16_t *)(v51 + 1);
                  v50 += 8;
                }
                while (v51 + 1 != (unint64_t *)a2);
              }
            }
            else if (!v49)
            {
              do
              {
                unint64_t v80 = v10->i64[0];
                unint64_t v79 = v10->u64[1];
                uint8x8_t v10 = v47;
                __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v79, v80);
                if (result)
                {
                  unint64_t v81 = v10->i64[0];
                  int v82 = v10->i64;
                  do
                  {
                    uint64_t v83 = v82;
                    uint64_t v84 = *--v82;
                    void *v83 = v84;
                    __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v81, *(v83 - 2));
                  }
                  while ((result & 1) != 0);
                  void *v82 = v81;
                }
                unint64_t v47 = (int8x16_t *)&v10->u64[1];
              }
              while (&v10->u64[1] != (unint64_t *)a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v10 != a2)
            {
              int64_t v57 = (unint64_t)(v13 - 2) >> 1;
              int64_t v91 = v57;
              uint64_t v85 = a2;
              do
              {
                int64_t v58 = v57;
                if (v91 >= v57)
                {
                  uint64_t v59 = (2 * v57) | 1;
                  uint64_t v60 = (unint64_t *)v10 + v59;
                  if (2 * v57 + 2 < v13
                    && md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v60, v60[1]))
                  {
                    ++v60;
                    uint64_t v59 = 2 * v58 + 2;
                  }
                  uint64_t v61 = (unint64_t *)v10 + v58;
                  __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v60, *v61);
                  if ((result & 1) == 0)
                  {
                    int64_t v89 = v58;
                    unint64_t v62 = *v61;
                    do
                    {
                      int8x8_t v63 = v60;
                      *uint64_t v61 = *v60;
                      if (v91 < v59) {
                        break;
                      }
                      uint64_t v64 = (2 * v59) | 1;
                      uint64_t v60 = (unint64_t *)v10 + v64;
                      if (2 * v59 + 2 < v13
                        && md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v60, v60[1]))
                      {
                        ++v60;
                        uint64_t v64 = 2 * v59 + 2;
                      }
                      __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v60, v62);
                      uint64_t v61 = v63;
                      uint64_t v59 = v64;
                    }
                    while (!result);
                    *int8x8_t v63 = v62;
                    a2 = v85;
                    int64_t v58 = v89;
                  }
                }
                int64_t v57 = v58 - 1;
              }
              while (v58);
              uint64_t v65 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v67 = a2;
                uint64_t v68 = 0;
                unint64_t v92 = v10->i64[0];
                uint64_t v69 = v10->i64;
                do
                {
                  unsigned int v70 = &v69[v68 + 1];
                  uint64_t v71 = (2 * v68) | 1;
                  uint64_t v72 = 2 * v68 + 2;
                  if (v72 < v65)
                  {
                    __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v70, v69[v68 + 2]);
                    if (result)
                    {
                      ++v70;
                      uint64_t v71 = v72;
                    }
                  }
                  *uint64_t v69 = *v70;
                  uint64_t v69 = v70;
                  uint64_t v68 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
                a2 = (int8x16_t *)((char *)v67 - 8);
                if (v70 == &v67[-1].u64[1])
                {
                  *unsigned int v70 = v92;
                }
                else
                {
                  *unsigned int v70 = a2->i64[0];
                  a2->i64[0] = v92;
                  uint64_t v73 = (char *)v70 - (char *)v10 + 8;
                  if (v73 >= 9)
                  {
                    unint64_t v74 = (((unint64_t)v73 >> 3) - 2) >> 1;
                    uint64_t v75 = (unint64_t *)v10 + v74;
                    __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v75, *v70);
                    if (result)
                    {
                      long double v76 = (int8x16_t *)((char *)v67 - 8);
                      unint64_t v77 = *v70;
                      do
                      {
                        std::string::size_type v78 = v75;
                        *unsigned int v70 = *v75;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        uint64_t v75 = (unint64_t *)v10 + v74;
                        __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v75, v77);
                        unsigned int v70 = v78;
                      }
                      while ((result & 1) != 0);
                      *std::string::size_type v78 = v77;
                      a2 = v76;
                    }
                  }
                }
              }
              while (v65-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          float v15 = (unint64_t *)v10 + ((unint64_t)v13 >> 1);
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(v15, (unint64_t *)v10, v90, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)v10, v15, v90, a3);
            uint64_t v16 = v14;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(&v10->u64[1], &v10->u64[v16 - 1], v87, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)&v10[1], &v10->u64[v16 + 1], v86, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(&v10->u64[v16 - 1], v15, &v10->u64[v16 + 1], a3);
            uint64_t v17 = v10->i64[0];
            v10->i64[0] = v10->i64[v16];
            v10->i64[v16] = v17;
          }
          --a4;
          if ((a5 & 1) != 0
            || md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v10[-1].u64[1], v10->i64[0]))
          {
            break;
          }
          unint64_t v32 = v10->i64[0];
          __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v10->i64[0], *v90);
          if (result)
          {
            uint64_t v11 = (unint64_t *)v10;
            do
            {
              unint64_t v33 = v11[1];
              ++v11;
              __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v32, v33);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v34 = &v10->u64[1];
            do
            {
              uint64_t v11 = v34;
              if (v34 >= (unint64_t *)a2) {
                break;
              }
              ++v34;
              __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v32, *v11);
            }
            while (!result);
          }
          unint64_t v35 = (unint64_t *)a2;
          if (v11 < (unint64_t *)a2)
          {
            unint64_t v35 = (unint64_t *)a2;
            do
            {
              unint64_t v36 = *--v35;
              __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v32, v36);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v35)
          {
            unint64_t v37 = *v11;
            unint64_t *v11 = *v35;
            *unint64_t v35 = v37;
            do
            {
              unint64_t v38 = v11[1];
              ++v11;
            }
            while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v32, v38));
            do
            {
              unint64_t v39 = *--v35;
              __n128 result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v32, v39);
            }
            while ((result & 1) != 0);
          }
          unint64_t v40 = v11 - 1;
          BOOL v5 = v11 - 1 >= (unint64_t *)v10;
          BOOL v6 = v11 - 1 == (unint64_t *)v10;
          if (v11 - 1 != (unint64_t *)v10) {
            v10->i64[0] = *v40;
          }
          a5 = 0;
          *unint64_t v40 = v32;
        }
        unint64_t v18 = v10->i64[0];
        unint64_t v19 = v10;
        do
        {
          uint64_t v20 = v19;
          unint64_t v21 = v19->u64[1];
          unint64_t v19 = (int8x16_t *)((char *)v19 + 8);
        }
        while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v21, v18));
        uint64_t v22 = a2;
        if (v20 == v10)
        {
          uint64_t v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = v22[-1].u64[1];
            uint64_t v22 = (int8x16_t *)((char *)v22 - 8);
          }
          while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v24, v18));
        }
        else
        {
          do
          {
            unint64_t v23 = v22[-1].u64[1];
            uint64_t v22 = (int8x16_t *)((char *)v22 - 8);
          }
          while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v23, v18));
        }
        double v25 = a2;
        if (v19 < v22)
        {
          size_t v26 = (uint64_t *)v19;
          size_t v27 = (uint64_t *)v22;
          do
          {
            uint64_t v28 = *v26;
            *size_t v26 = *v27;
            *size_t v27 = v28;
            do
            {
              uint64_t v20 = (int8x16_t *)v26;
              unint64_t v29 = v26[1];
              ++v26;
            }
            while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v29, v18));
            do
              unint64_t v30 = *--v27;
            while (!md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v30, v18));
          }
          while (v26 < v27);
        }
        if (v20 != v10) {
          v10->i64[0] = v20->i64[0];
        }
        v20->i64[0] = v18;
        a2 = v25;
        if (v19 >= v22) {
          break;
        }
LABEL_31:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,false>(v10, v20, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v11 = &v20->u64[1];
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(v10, v20, a3);
      uint64_t v11 = &v20->u64[1];
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((int8x16_t *)&v20->u64[1], v25, a3);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_31;
      }
    }
    a2 = v20;
    if (!v31) {
      continue;
    }
    return result;
  }
}

BOOL md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(uint64_t **a1, unint64_t a2, unint64_t a3)
{
  BOOL v6 = *a1;
  unint64_t v27 = a2;
  uint64_t v7 = *v6;
  uint64_t v8 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a2 + 8) + 304))(*(void *)(a2 + 8), a2 + 48);
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = (float *)(v7 + 296);
    uint64_t v12 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v11, a2);
    if (v12)
    {
      double v13 = v12[3];
    }
    else
    {
      [*(id *)v6[1] distanceFromPoint:*(void *)v6[2] toPoint:v10];
      double v13 = v14;
      uint64_t v15 = v6[2];
      if (*(_DWORD *)v15 > v10
        || *(_DWORD *)v15 == v10 && *(float *)(v15 + 4) > *((float *)&v10 + 1))
      {
        double v13 = -v14;
      }
      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v11, a2, &v27)+ 3) = v13;
    }
  }
  else
  {
    double v13 = 0.0;
  }
  uint64_t v16 = *a1;
  unint64_t v27 = a3;
  uint64_t v17 = *v16;
  uint64_t v18 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a3 + 8) + 304))(*(void *)(a3 + 8), a3 + 48);
  if (!v19)
  {
    double v23 = 0.0;
    if (v13 >= 0.0) {
      return v13 < v23;
    }
    if (v13 > 0.0) {
      return 0;
    }
    return v13 > v23;
  }
  uint64_t v20 = v18;
  unint64_t v21 = (float *)(v17 + 296);
  uint64_t v22 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v21, a3);
  if (v22)
  {
    double v23 = v22[3];
  }
  else
  {
    [*(id *)v16[1] distanceFromPoint:*(void *)v16[2] toPoint:v20];
    double v23 = v25;
    uint64_t v26 = v16[2];
    if (*(_DWORD *)v26 > v20
      || *(_DWORD *)v26 == v20 && *(float *)(v26 + 4) > *((float *)&v20 + 1))
    {
      double v23 = -v25;
    }
    *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v21, a3, &v27)+ 3) = v23;
  }
  BOOL result = v13 >= 0.0;
  if (v13 >= 0.0 && v23 >= 0.0) {
    return v13 < v23;
  }
  if (v13 <= 0.0 && v23 <= 0.0) {
    return v13 > v23;
  }
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t **a4)
{
  BOOL v8 = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a4, *a2, *a1);
  BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a4, *a3, *a2);
  if (v8)
  {
    unint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a4, *a3, v10);
      if (result)
      {
        unint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    unint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a4, *a2, *a1);
    if (result)
    {
      unint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t **a6)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(a1, a2, a3, a6);
  if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a4, *a3))
  {
    unint64_t v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a3, *a2))
    {
      unint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a2, *a1))
      {
        unint64_t v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a5, *a4);
  if (result)
  {
    unint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a4, *a3);
    if (result)
    {
      unint64_t v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a3, *a2);
      if (result)
      {
        unint64_t v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a6, *a2, *a1);
        if (result)
        {
          unint64_t v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>(int8x16_t *a1, int8x16_t *a2, uint64_t **a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, a2[-1].u64[1], a1->i64[0]))
      {
        unint64_t v8 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1], a3);
      return 1;
    case 4:
      unint64_t v17 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, a2[-1].u64[1], a1[1].u64[0]))
      {
        unint64_t v18 = *v17;
        *unint64_t v17 = a2[-1].u64[1];
        a2[-1].i64[1] = v18;
        if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v17, a1->u64[1]))
        {
          uint64_t v20 = a1->i64[1];
          unint64_t v19 = a1[1].u64[0];
          unint64_t v21 = a1->i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v20;
          if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v19, v21))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **,0>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1], a3);
      return 1;
    default:
      char v9 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      unint64_t v10 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, *v10, *v9))
    {
      unint64_t v14 = *v10;
      uint64_t v15 = v11;
      do
      {
        unint64_t v16 = &a1->i8[v15];
        *(uint64_t *)((char *)&a1[1].i64[1] + v15) = *(uint64_t *)((char *)a1[1].i64 + v15);
        if (v15 == -16)
        {
          i64 = a1->i64;
          goto LABEL_7;
        }
        v15 -= 8;
      }
      while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_4::operator()(a3, v14, *((void *)v16 + 1)));
      i64 = (uint64_t *)((char *)&a1[1].i64[1] + v15);
LABEL_7:
      void *i64 = v14;
      if (++v12 == 8) {
        return v10 + 1 == (unint64_t *)a2;
      }
    }
    char v9 = v10;
    v11 += 8;
    if (++v10 == (unint64_t *)a2) {
      return 1;
    }
  }
}

BOOL md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(uint64_t **a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v27 = a2;
  uint64_t v7 = *v6;
  uint64_t v8 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a2 + 8) + 304))(*(void *)(a2 + 8), a2 + 48);
  double v9 = 0.0;
  double v10 = 0.0;
  if (v11)
  {
    uint64_t v12 = v8;
    unint64_t v13 = (float *)(v7 + 296);
    unint64_t v14 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v13, a2);
    if (v14)
    {
      double v10 = v14[3];
    }
    else
    {
      [*(id *)v6[1] distanceFromPoint:*(void *)v6[2] toPoint:v12];
      double v10 = v15;
      uint64_t v16 = v6[2];
      if (*(_DWORD *)v16 > v12
        || *(_DWORD *)v16 == v12 && *(float *)(v16 + 4) > *((float *)&v12 + 1))
      {
        double v10 = -v15;
      }
      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v13, a2, &v27)+ 3) = v10;
    }
  }
  unint64_t v17 = *a1;
  unint64_t v27 = a3;
  uint64_t v18 = *v17;
  uint64_t v19 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a3 + 8) + 304))(*(void *)(a3 + 8), a3 + 48);
  if (v20)
  {
    uint64_t v21 = v19;
    uint64_t v22 = (float *)(v18 + 296);
    double v23 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v22, a3);
    if (v23)
    {
      double v9 = v23[3];
    }
    else
    {
      [*(id *)v17[1] distanceFromPoint:*(void *)v17[2] toPoint:v21];
      double v9 = v24;
      uint64_t v25 = v17[2];
      if (*(_DWORD *)v25 > v21
        || *(_DWORD *)v25 == v21 && *(float *)(v25 + 4) > *((float *)&v21 + 1))
      {
        double v9 = -v24;
      }
      *((double *)std::__hash_table<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::__unordered_map_hasher<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::hash<md::LabelBase const*>,std::equal_to<md::LabelBase const*>,true>,std::__unordered_map_equal<md::LabelBase const*,std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>,std::equal_to<md::LabelBase const*>,std::hash<md::LabelBase const*>,true>,std::allocator<std::__hash_value_type<md::LabelBase const*,geo::Unit<geo::MeterUnitDescription,double>>>>::__emplace_unique_key_args<md::LabelBase const*,std::piecewise_construct_t const&,std::tuple<md::LabelBase const* const&>,std::tuple<>>(v22, a3, &v27)+ 3) = v9;
    }
  }
  return v10 > v9;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t **a4)
{
  BOOL v8 = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a4, *a2, *a1);
  BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a4, *a3, *a2);
  if (v8)
  {
    unint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a4, *a3, v10);
      if (result)
      {
        unint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    unint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a4, *a2, *a1);
    if (result)
    {
      unint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t **a6)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a2, a3, a6);
  if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a4, *a3))
  {
    unint64_t v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a3, *a2))
    {
      unint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a2, *a1))
      {
        unint64_t v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a5, *a4);
  if (result)
  {
    unint64_t v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a4, *a3);
    if (result)
    {
      unint64_t v17 = *a3;
      *a3 = *a4;
      *a4 = v17;
      BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a3, *a2);
      if (result)
      {
        unint64_t v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        BOOL result = md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a6, *a2, *a1);
        if (result)
        {
          unint64_t v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(int8x16_t *a1, int8x16_t *a2, uint64_t **a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, a2[-1].u64[1], a1->i64[0]))
      {
        unint64_t v8 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], &a2[-1].u64[1], a3);
      return 1;
    case 4:
      unint64_t v17 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, a2[-1].u64[1], a1[1].u64[0]))
      {
        unint64_t v18 = *v17;
        *unint64_t v17 = a2[-1].u64[1];
        a2[-1].i64[1] = v18;
        if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v17, a1->u64[1]))
        {
          uint64_t v20 = a1->i64[1];
          unint64_t v19 = a1[1].u64[0];
          unint64_t v21 = a1->i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v20;
          if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v19, v21))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1], &a2[-1].u64[1], a3);
      return 1;
    default:
      double v9 = (unint64_t *)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], a3);
      unint64_t v10 = &a1[1].u64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, *v10, *v9))
    {
      unint64_t v14 = *v10;
      uint64_t v15 = v11;
      do
      {
        unint64_t v16 = &a1->i8[v15];
        *(uint64_t *)((char *)&a1[1].i64[1] + v15) = *(uint64_t *)((char *)a1[1].i64 + v15);
        if (v15 == -16)
        {
          i64 = a1->i64;
          goto LABEL_7;
        }
        v15 -= 8;
      }
      while (md::ARWalkingContinueFeatureDedupingGroup::prepareForCollision(md::LabelManager *)::$_3::operator()(a3, v14, *((void *)v16 + 1)));
      i64 = (uint64_t *)((char *)&a1[1].i64[1] + v15);
LABEL_7:
      void *i64 = v14;
      if (++v12 == 8) {
        return v10 + 1 == (unint64_t *)a2;
      }
    }
    double v9 = v10;
    v11 += 8;
    if (++v10 == (unint64_t *)a2) {
      return 1;
    }
  }
}

void md::ARWalkingContinueFeatureDedupingGroup::~ARWalkingContinueFeatureDedupingGroup(md::ARWalkingContinueFeatureDedupingGroup *this)
{
  *(void *)this = &unk_1EF54F678;
  unint64_t v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = (void *)*((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v4) {
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 39);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      BOOL v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v7) {
    operator delete(v7);
  }
  *((void *)this + 31) = &unk_1EF559678;

  md::ARWalkingLabelLayoutDedupingGroup::~ARWalkingLabelLayoutDedupingGroup(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EF54F678;
  unint64_t v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = (void *)*((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v4) {
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 39);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      BOOL v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v7) {
    operator delete(v7);
  }
  *((void *)this + 31) = &unk_1EF559678;

  md::ARWalkingLabelLayoutDedupingGroup::~ARWalkingLabelLayoutDedupingGroup(this);
}

void md::ARWalkingLabelLayoutDedupingGroup::~ARWalkingLabelLayoutDedupingGroup(md::ARWalkingLabelLayoutDedupingGroup *this)
{
  *(void *)this = &unk_1EF54DB70;
  unint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = (void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v4) {
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 23);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      BOOL v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 18);
  if (v8)
  {
    do
    {
      uint64_t v15 = (void *)*v8;
      unint64_t v16 = (void *)v8[3];
      if (v16)
      {
        double v8[4] = v16;
        operator delete(v16);
      }
      operator delete(v8);
      unint64_t v8 = v15;
    }
    while (v15);
  }
  double v9 = (void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v9) {
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 13);
  if (v10)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      operator delete(v10);
      unint64_t v10 = v11;
    }
    while (v11);
  }
  int v12 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v12) {
    operator delete(v12);
  }
  *(void *)this = &unk_1EF539178;
  uint64_t v13 = *((void *)this + 5);
  if (v13)
  {
    *((void *)this + 6) = v13;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), v13, *((void *)this + 7) - v13);
  }
  uint64_t v14 = *((void *)this + 1);
  if (v14)
  {
    *((void *)this + 2) = v14;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), v14, *((void *)this + 3) - v14);
  }
}

{
  uint64_t vars8;

  md::ARWalkingLabelLayoutDedupingGroup::~ARWalkingLabelLayoutDedupingGroup(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A2608ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A26098C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2609988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A260A700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A260A8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A260ABC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A260AE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A260AFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A260B1B8(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void md::CameraManager::~CameraManager(md::CameraManager *this)
{
}

double md::getDirFromScreenPosition(uint64_t a1, double *a2, float a3, float a4)
{
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v40, (double *)(a1 + 8));
  float v37 = *(float *)(a1 + 488);
  float v6 = *(float *)(a1 + 492);
  double v7 = *(double *)(a1 + 384);
  double v8 = *(double *)(a1 + 392);
  double v9 = *(double *)(a1 + 368);
  double v10 = *(double *)(a1 + 376);
  double v11 = v10 * v9;
  if (v10 >= v9)
  {
    double v13 = *(double *)(a1 + 456);
    double v16 = v13;
    if (v9 >= v10) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if (v11 <= 0.0) {
    double v12 = 1.0;
  }
  else {
    double v12 = v10 / v9;
  }
  double v13 = *(double *)(a1 + 456);
  long double v14 = tan(v13 * 0.5);
  long double v15 = atan(v12 * v14);
  double v16 = v15 + v15;
  if (v9 < v10)
  {
LABEL_8:
    if (v11 <= 0.0) {
      double v17 = 1.0;
    }
    else {
      double v17 = v9 / v10;
    }
    long double v18 = tan(v13 * 0.5);
    long double v19 = atan(v17 * v18);
    double v13 = v19 + v19;
  }
LABEL_12:
  double v20 = tan(v16 * 0.5);
  float v21 = v8 * v6;
  double v22 = ((float)(v21 - a4) + (float)(v21 - a4)) / v8;
  float v23 = v7 * v37;
  double v24 = ((float)(a3 - v23) + (float)(a3 - v23)) / v7;
  long double v25 = tan(v13 * 0.5);
  long double v26 = -(v25 - v24 * v25);
  double v27 = v20 + v22 * v20;
  double v28 = 1.0 / sqrt(v27 * v27 + 1.0 + v26 * v26);
  long double v29 = v28 * v26;
  double v30 = v28 * v27;
  double v31 = -(v30 * v43 + v28 * v42) - (v30 * v43 + v28 * v42);
  long double v32 = v28 * v41 + v29 * v43 + v28 * v41 + v29 * v43;
  long double v33 = -(v29 * v42 - v30 * v41) - (v29 * v42 - v30 * v41);
  double result = v29 + v31 * v44 + v33 * v42 - v32 * v43;
  long double v35 = v30 + v31 * v43 + v32 * v44 - v33 * v41;
  long double v36 = v33 * v44 + v32 * v41 - (v28 + v31 * v42);
  *a2 = result;
  a2[1] = v35;
  a2[2] = v36;
  return result;
}

void md::CameraManager::update(uint64_t a1, uint64_t *a2, int a3)
{
  if (*(unsigned char *)(a1 + 16) || *(unsigned char *)(a1 + 81) || *(unsigned char *)(a1 + 128) || *(unsigned char *)(a1 + 184))
  {
    md::MapDataAccess::heightAtCoordinate(*(unsigned __int8 **)(a1 + 8), (_OWORD *)(*a2 + 8));
    double v7 = v6;
    if (!v8) {
      double v7 = 0.0;
    }
    uint64_t v9 = *a2;
    *(double *)(*a2 + 24) = fmax(v7, *(double *)(*a2 + 24));
    int v10 = 1;
    if (*(unsigned char *)(a1 + 16))
    {
      md::MapDataAccess::groundCoordinateForScreenCursor((uint64_t)&v436, *(void *)(a1 + 8), v9 + 8, *(int32x2_t *)(a1 + 20));
      *(float64x2_t *)(a1 + 48) = v436;
      *(double *)(a1 + 64) = v437;
      *(unsigned char *)(a1 + 17) = 1;
    }
    if (*(unsigned char *)(a1 + 81)) {
      goto LABEL_10;
    }
  }
  else
  {
    int v10 = 0;
    if (*(unsigned char *)(a1 + 81))
    {
LABEL_10:
      md::MapDataAccess::groundCoordinateForScreenCursor((uint64_t)&v436, *(void *)(a1 + 8), *a2 + 8, *(int32x2_t *)(a1 + 112));
      *(float64x2_t *)(a1 + 88) = v436;
      *(double *)(a1 + 104) = v437;
      *(unsigned char *)(a1 + 82) = 1;
    }
  }
  if (*(unsigned char *)(a1 + 128))
  {
    md::MapDataAccess::groundCoordinateForScreenCursor((uint64_t)&v436, *(void *)(a1 + 8), *a2 + 8, *(int32x2_t *)(a1 + 160));
    *(float64x2_t *)(a1 + 136) = v436;
    *(double *)(a1 + 152) = v437;
    *(unsigned char *)(a1 + 129) = 1;
  }
  if (*(unsigned char *)(a1 + 184))
  {
    md::MapDataAccess::groundCoordinateForScreenCursor((uint64_t)&v436, *(void *)(a1 + 8), *a2 + 8, *(int32x2_t *)(a1 + 216));
    *(float64x2_t *)(a1 + 192) = v436;
    *(double *)(a1 + 208) = v437;
    *(void *)(a1 + 232) = *(void *)(*a2 + 32);
    *(unsigned char *)(a1 + 185) = 1;
  }
  if (v10 && (!*(unsigned char *)(a1 + 16) || !*(unsigned char *)(a1 + 243))) {
    *(unsigned char *)(a1 + 244) = 0;
  }
  uint64_t v11 = *a2;
  double v12 = (double *)(*a2 + 8);
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v436.f64, v12);
  double v13 = *(double *)(v11 + 16);
  double v14 = *(double *)(v11 + 24);
  __double2 v15 = __sincos_stret(*(double *)(v11 + 8));
  double v16 = 6378137.0 / sqrt(v15.__sinval * v15.__sinval * -0.00669437999 + 1.0);
  double v17 = (v16 + v14) * v15.__cosval;
  __double2 v18 = __sincos_stret(v13);
  double v424 = v17 * v18.__cosval;
  double v19 = v17 * v18.__sinval;
  double v20 = (v14 + v16 * 0.99330562) * v15.__sinval;
  _Q22 = v436;
  double v23 = v437;
  double v22 = *(double *)&v438;
  double v407 = *(double *)&v439 * -2.0 * *(double *)&v439 + 1.0 - (v22 + v22) * v22;
  double v408 = (v22 + v22) * *((double *)&v438 + 1) + *((double *)&v439 + 1) * (*(double *)&v439 * -2.0);
  double v406 = -(*(double *)&v439 * -2.0 * *((double *)&v438 + 1) - (v22 + v22) * *((double *)&v439 + 1));
  if (!*(unsigned char *)(a1 + 17))
  {
LABEL_22:
    int v29 = 0;
    if (!*(unsigned char *)(a1 + 82)) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  int v24 = *(_DWORD *)(a1 + 20);
  int v25 = *(_DWORD *)(a1 + 28);
  int v26 = v24 - v25;
  if (v24 == v25)
  {
    int v27 = *(_DWORD *)(a1 + 24);
    int v28 = *(_DWORD *)(a1 + 32);
    if (v27 == v28) {
      goto LABEL_22;
    }
  }
  else
  {
    int v28 = *(_DWORD *)(a1 + 32);
    int v27 = *(_DWORD *)(a1 + 24);
  }
  float64x2_t v421 = v436;
  double v400 = v437;
  double v403 = v17 * v18.__sinval;
  if (*(unsigned char *)(a1 + 80))
  {
    int v110 = v27 - v28;
    int v25 = *(_DWORD *)(a1 + 36);
    int v28 = *(_DWORD *)(a1 + 40);
    int v24 = v26 + v25;
    int v27 = v110 + v28;
  }
  double v387 = *(double *)(v11 + 32);
  float v111 = (float)v24;
  float v112 = (float)v27;
  md::getDirFromScreenPosition(v11, &v429, (float)v24, (float)v27);
  md::getDirFromScreenPosition(v11, &v426, (float)v25, (float)v28);
  double v369 = v430;
  double v370 = v431;
  double v383 = v428;
  double v385 = v429;
  double v379 = v427;
  double v381 = v426;
  double v373 = -(v426 * v431 - v429 * v428);
  double v372 = -(v429 * v427 - v426 * v430);
  double v375 = -(v430 * v428 - v431 * v427) * -(v430 * v428 - v431 * v427) + v373 * v373 + v372 * v372;
  double v377 = -(v430 * v428 - v431 * v427);
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v436.f64, v12);
  double v397 = v436.f64[1];
  double v390 = v436.f64[0];
  double v393 = v437;
  double v113 = *(double *)(v11 + 384);
  double v114 = *(double *)(v11 + 392);
  float v115 = v113 * *(float *)(v11 + 488);
  float v116 = v114 * *(float *)(v11 + 492);
  double v117 = ((float)(v111 - v115) + (float)(v111 - v115)) / v113;
  double v118 = ((float)(v116 - v112) + (float)(v116 - v112)) / v114;
  double v120 = *(double *)(v11 + 368);
  double v119 = *(double *)(v11 + 376);
  double v415 = v20;
  if (v119 >= v120)
  {
    double v122 = 1.0;
    double v123 = *(double *)(v11 + 456);
    double v126 = v123;
  }
  else
  {
    if (v119 * v120 <= 0.0) {
      double v121 = 1.0;
    }
    else {
      double v121 = v119 / v120;
    }
    double v122 = 1.0;
    double v123 = *(double *)(v11 + 456);
    long double v124 = tan(v123 * 0.5);
    long double v125 = atan(v121 * v124);
    double v126 = v125 + v125;
  }
  double v134 = v117 + -1.0;
  double v135 = v118 + v122;
  double v136 = sqrt(v375);
  double v137 = tan(v126 * 0.5);
  if (v120 < v119)
  {
    if (v119 * v120 <= 0.0) {
      double v138 = 1.0;
    }
    else {
      double v138 = v120 / v119;
    }
    long double v139 = tan(v123 * 0.5);
    long double v140 = atan(v138 * v139);
    double v123 = v140 + v140;
  }
  double v141 = 1.0 / v136;
  long double v142 = tan(v123 * 0.5) * v134;
  double v143 = 1.0 / sqrt(v135 * v137 * (v135 * v137) + 1.0 + v142 * v142);
  long double v144 = v143 * v142;
  double v145 = v143 * (v135 * v137);
  double v146 = *(double *)&v439;
  double v147 = -(v145 * v146 + v143 * *((double *)&v438 + 1)) - (v145 * v146 + v143 * *((double *)&v438 + 1));
  long double v148 = v143 * *(double *)&v438 + v144 * v146 + v143 * *(double *)&v438 + v144 * v146;
  long double v149 = -(v144 * *((double *)&v438 + 1) - v145 * *(double *)&v438)
       - (v144 * *((double *)&v438 + 1)
        - v145 * *(double *)&v438);
  double v150 = v144 + v147 * *((double *)&v439 + 1) + v149 * *((double *)&v438 + 1) - v148 * *(double *)&v439;
  double v151 = v145 + v147 * *(double *)&v439 + v148 * *((double *)&v439 + 1) - v149 * *(double *)&v438;
  double v152 = v149 * *((double *)&v439 + 1) + v148 * *(double *)&v438 - (v143 + v147 * *((double *)&v438 + 1));
  double v371 = v390 * v390 + v397 * v397 + v393 * v393;
  double v153 = 1.0 / sqrt(v371);
  double v154 = v153 * v397;
  double v155 = v153 * v393;
  double v156 = 1.0 / sqrt(v153 * v390 * (v153 * v390) + v154 * v154 + v155 * v155);
  double v157 = v156 * (v153 * v390);
  double v158 = v156 * v154;
  double v159 = v156 * v155;
  double v160 = v150 * v157 + 0.1 + v151 * v158 + v152 * (v156 * v155);
  if (v160 > 0.0)
  {
    double v161 = v160 * 0.8;
    double v150 = v150 - v161 * v157;
    double v151 = v151 - v161 * v158;
    double v152 = v152 - v161 * v159;
  }
  double v374 = v141 * v373;
  double v376 = v141 * v377;
  double v378 = v141 * v372;
  double v162 = 1.0 / sqrt(v152 * v152 + v151 * v151 + v150 * v150);
  double v163 = v162 * v150;
  double v164 = v162 * v151;
  double v165 = v162 * v152;
  double v166 = *(double *)(a1 + 56);
  double v167 = *(double *)(a1 + 64);
  __double2 v168 = __sincos_stret(*(double *)(a1 + 48));
  double v169 = 6378137.0 / sqrt(v168.__sinval * v168.__sinval * -0.00669437999 + 1.0);
  __double2 v170 = __sincos_stret(v166);
  double v171 = v163 * v163 + v164 * v164 + v165 * v165;
  double v172 = v164 * v397 + v163 * v390 + v165 * v393;
  double v173 = v172 + v172;
  double v174 = (v371
        - ((v169 + v167) * v168.__cosval * v170.__sinval * ((v169 + v167) * v168.__cosval * v170.__sinval)
         + (v167 + v169 * 0.99330562) * v168.__sinval * ((v167 + v169 * 0.99330562) * v168.__sinval)
         + (v169 + v167) * v168.__cosval * v170.__cosval * ((v169 + v167) * v168.__cosval * v170.__cosval)))
       * 4.0
       * v171;
  double v175 = -(v174 - v173 * v173);
  if (v175 >= 0.0 && (double v176 = (sqrt(v175) + v173) * -0.5 / v171, v176 >= 0.0))
  {
    double v201 = v176 * v163;
    double v202 = v176 * v164;
    double v203 = v176 * v165;
  }
  else
  {
    double v177 = -(v165 * v393 + v164 * v397 + v163 * v390) - (v165 * v393 + v164 * v397 + v163 * v390);
    double v178 = -(v174 - v177 * v177);
    if (v178 < 0.0
      || (double v199 = sqrt(v170.__cosval), v200 = (v199 + v177) * -0.5 / v171, v200 < 0.0)
      && (double v200 = (v199 - v177) * 0.5 / v171, v200 < 0.0))
    {
      double v179 = sqrt((v387 + cos(3.14159265 - *(double *)(v11 + 40)) * -12756274.0) * v387 + 4.06806316e13);
      double v180 = sqrt((v179 + 6378137.0) * (v179 + -6378137.0));
      long double v181 = v390 + v180 * v163;
      long double v182 = v397 + v180 * v164;
      long double v183 = v393 + v180 * v165;
      double v184 = sqrt(v181 * v181 + v182 * v182);
      double v185 = atan2(v183, v184 * 0.996647189);
      double v186 = atan2(v182, v181);
      __double2 v187 = __sincos_stret(v185);
      double v188 = atan2(v183 + v187.__sinval * v187.__sinval * 42841.3115 * v187.__sinval, v184 + v187.__cosval * v187.__cosval * -42697.6727 * v187.__cosval);
      __double2 v189 = __sincos_stret(v188);
      double v190 = 6378137.0 / sqrt(v189.__sinval * v189.__sinval * -0.00669437999 + 1.0);
      double v191 = (v190 + v167) * v189.__cosval;
      __double2 v192 = __sincos_stret(v186);
      double v193 = v191 * v192.__cosval;
      double v194 = v191 * v192.__sinval;
      double v195 = (v167 + v190 * 0.99330562) * v189.__sinval;
      double v196 = v424;
      double v198 = v369;
      double v197 = v370;
      goto LABEL_66;
    }
    double v201 = v200 * -v163;
    double v202 = v200 * -v164;
    double v203 = v200 * -v165;
  }
  double v196 = v424;
  double v198 = v369;
  double v197 = v370;
  double v195 = v203 + v393;
  double v194 = v202 + v397;
  double v193 = v201 + v390;
LABEL_66:
  double v204 = sqrt(v193 * v193 + v194 * v194);
  double v205 = atan2(v195, v204 * 0.996647189);
  __double2 v206 = __sincos_stret(v205);
  long double v207 = atan2(v195 + v206.__sinval * v206.__sinval * 42841.3115 * v206.__sinval, v204 + v206.__cosval * v206.__cosval * -42697.6727 * v206.__cosval);
  long double v208 = cos(v207);
  _V5.D[1] = v421.f64[1];
  double v210 = v193 - v421.f64[0];
  _D10 = v421.f64[1];
  double v212 = v400;
  double v213 = fabs(fmax(v387 * 0.2, sqrt(v210 * v210 + (v194 - v421.f64[1]) * (v194 - v421.f64[1]) + (v195 - v400) * (v195 - v400))))* sqrt(2.0 - (v383 * v197 + v198 * v379 + v381 * v385) * 2.0);
  *(double *)(a1 + 72) = v213;
  __asm { FMLA            D3, D10, V5.D[1] }
  double v215 = fabs(-(vmuld_lane_f64(v198, v421, 1) + v212 * v197 + v421.f64[0] * v385) / sqrt(_D3 + v212 * v212));
  double v216 = 1.0;
  double v217 = v213 * (0.000000156961014 * fmin(1.0 / v215, 2.0));
  double v218 = 1.0 / sqrt(v196 * v196 + v403 * v403 + v415 * v415);
  double v219 = v218 * v196;
  double v220 = -(v403 * v218);
  double v221 = 1.0 / sqrt(v220 * v220 + v219 * v219);
  double v222 = v221 * v220;
  double v223 = v221 * v219;
  double v398 = -(v221 * v220);
  double v388 = v221 * v220 * v376 + v221 * v219 * v374;
  double v391 = -(v221 * v220 * v374 - v221 * v219 * v376);
  double v224 = -(v400 * (v221 * v219));
  double v225 = vmlad_n_f64(-(v222 * v421.f64[1]), v221 * v219, v421.f64[0]);
  double v226 = v217
       * (v222 * v400 * v374 + v225 * v378 + v224 * v376)
       * fmin(1.0 / v208, 4.0)
       / sqrt(v224 * v224 + v222 * v212 * (v222 * v212) + v225 * v225);
  double v227 = fmax(fabs(v207), 1.30899694);
  if (v227 <= 1.48352986) {
    double v228 = v227 * 5.72957795 + -7.5;
  }
  else {
    double v228 = 1.0;
  }
  double v229 = -((v228 * 2.0 + -3.0) * (v228 * v228));
  double v394 = v217;
  double v230 = v226 + -(v226 - v217 * v378) * v229;
  if (*(double *)(*a2 + 32) > 1000000.0)
  {
    int v231 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 40);
    if (v231)
    {
      double v232 = fmax(fabs((double)(*(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 36)) / (double)v231), 1.0);
      if (v232 <= 2.0) {
        double v233 = v232 + -1.0;
      }
      else {
        double v233 = 1.0;
      }
      double v216 = v233 * v233 * (v233 * 2.0 + -3.0) + 1.0;
    }
  }
  __double2 v234 = __sincos_stret(v230 * 0.5);
  __double2 v235 = __sincos_stret(v394 * 0.5 * (v388 * v216));
  double v236 = -(v235.__sinval * v223 * v234.__sinval - v235.__sinval * v222 * v234.__cosval);
  double v237 = v235.__sinval * v222 * v234.__sinval + v235.__sinval * v223 * v234.__cosval;
  __double2 v238 = __sincos_stret(v394 * 0.5 * v391 * v229);
  double v239 = v236 * v238.__cosval
       - (v235.__cosval * v234.__sinval * (v238.__sinval * v398)
        - v235.__cosval * v234.__cosval * (v238.__sinval * v223));
  double v240 = v235.__cosval * v234.__cosval * (v238.__sinval * v398)
       + v235.__cosval * v234.__sinval * (v238.__sinval * v223)
       + v237 * v238.__cosval;
  double v241 = v235.__cosval * v234.__sinval * v238.__cosval - (v237 * (v238.__sinval * v223) - v236 * (v238.__sinval * v398));
  double v242 = -(v237 * (v238.__sinval * v398) + v236 * (v238.__sinval * v223) - v235.__cosval * v234.__cosval * v238.__cosval);
  double v243 = -(v241 * v421.f64[1] - v240 * v400) - (v241 * v421.f64[1] - v240 * v400);
  double v244 = -(v239 * v400 - v241 * v421.f64[0]) - (v239 * v400 - v241 * v421.f64[0]);
  double v245 = -(v240 * v421.f64[0] - v239 * v421.f64[1]) - (v240 * v421.f64[0] - v239 * v421.f64[1]);
  _Q22.f64[0] = v421.f64[0] + v243 * v242 + v245 * v240 - v244 * v241;
  double v23 = v400 + v244 * v239 + v245 * v242 - v243 * v240;
  _Q22.f64[1] = v421.f64[1] + v243 * v241 + v244 * v242 - v245 * v239;
  double v246 = -(v403 * v241 - v240 * v415) - (v403 * v241 - v240 * v415);
  double v247 = -(v239 * v415 - v424 * v241) - (v239 * v415 - v424 * v241);
  double v248 = -(v424 * v240 - v403 * v239) - (v424 * v240 - v403 * v239);
  double v424 = v424 + v246 * v242 + v248 * v240 - v247 * v241;
  double v19 = v403 + v246 * v241 + v247 * v242 - v248 * v239;
  double v20 = v415 - v246 * v240 + v247 * v239 + v248 * v242;
  double v249 = -(v407 * v241 - v406 * v240) - (v407 * v241 - v406 * v240);
  double v250 = -(v406 * v239 - v408 * v241) - (v406 * v239 - v408 * v241);
  double v251 = -(v408 * v240 - v407 * v239) - (v408 * v240 - v407 * v239);
  double v407 = v407 + v249 * v241 + v250 * v242 - v251 * v239;
  double v408 = v408 + v249 * v242 + v251 * v240 - v250 * v241;
  double v406 = v406 - v249 * v240 + v250 * v239 + v251 * v242;
  *(void *)(a1 + 28) = *(void *)(a1 + 20);
  int v29 = 1;
  if (*(unsigned char *)(a1 + 82))
  {
LABEL_23:
    double v30 = *(double *)(a1 + 96);
    double v412 = v20;
    double v31 = *(double *)(a1 + 104);
    float64x2_t v418 = _Q22;
    double v32 = v19;
    double v33 = v424;
    __double2 v34 = __sincos_stret(*(double *)(a1 + 88));
    double v35 = 6378137.0 / sqrt(v34.__sinval * v34.__sinval * -0.00669437999 + 1.0);
    double v36 = (v35 + v31) * v34.__cosval;
    __double2 v37 = __sincos_stret(v30);
    double v38 = v36 * v37.__cosval;
    double v39 = v36 * v37.__sinval;
    double v40 = (v31 + v35 * 0.99330562) * v34.__sinval;
    __double2 v41 = __sincos_stret(*(double *)(a1 + 120) * 0.5);
    double v42 = v41.__sinval / sqrt(v38 * v38 + v39 * v39 + v40 * v40);
    _D2 = v42 * v38;
    double v44 = v42 * v39;
    double v45 = v42 * v40;
    _V16.D[1] = v418.f64[1];
    double v47 = vmuld_lane_f64(v45, v418, 1);
    double v48 = vmlad_n_f64(-(_D2 * v23), v45, v418.f64[0]);
    __asm { FMLA            D7, D2, V16.D[1] }
    double v54 = -(v47 - v44 * v23) - (v47 - v44 * v23);
    double v55 = v48 + v48;
    double v56 = _D7 + _D7;
    _Q22.f64[0] = v418.f64[0] + v54 * v41.__cosval + v56 * v44 - v55 * v45;
    double v23 = v23 + v55 * _D2 + v56 * v41.__cosval - v54 * v44;
    _Q22.f64[1] = v418.f64[1] + v54 * v45 + v55 * v41.__cosval - v56 * _D2;
    double v57 = -(v45 * v32 - v44 * v412) - (v45 * v32 - v44 * v412);
    double v58 = -(_D2 * v412 - v45 * v33) - (_D2 * v412 - v45 * v33);
    double v59 = -(v44 * v33 - _D2 * v32) - (v44 * v33 - _D2 * v32);
    double v424 = v424 + v57 * v41.__cosval + v59 * v44 - v58 * v45;
    double v19 = v32 + v57 * v45 + v58 * v41.__cosval - v59 * _D2;
    double v20 = v412 + v58 * _D2 + v59 * v41.__cosval - v57 * v44;
    double v60 = -(v407 * v45 - v406 * v44) - (v407 * v45 - v406 * v44);
    double v61 = -(_D2 * v406 - v408 * v45) - (_D2 * v406 - v408 * v45);
    double v62 = -(v408 * v44 - v407 * _D2) - (v408 * v44 - v407 * _D2);
    double v407 = v407 + v60 * v45 + v61 * v41.__cosval - v62 * _D2;
    double v408 = v408 + v60 * v41.__cosval + v62 * v44 - v61 * v45;
    double v406 = v406 - v60 * v44 + v61 * _D2 + v62 * v41.__cosval;
    *(void *)(a1 + 120) = 0;
    int v29 = 1;
  }
LABEL_24:
  if (*(unsigned char *)(a1 + 129))
  {
    double v392 = fmin(fmax(*(double *)(*a2 + 40) + *(double *)(a1 + 176), 0.0), 3.14159265) - *(double *)(*a2 + 40);
    double v63 = *(double *)(a1 + 144);
    double v64 = *(double *)(a1 + 152);
    float64x2_t v419 = _Q22;
    __double2 v65 = __sincos_stret(*(double *)(a1 + 136));
    double v66 = 6378137.0 / sqrt(v65.__sinval * v65.__sinval * -0.00669437999 + 1.0);
    double v67 = (v66 + v64) * v65.__cosval;
    __double2 v68 = __sincos_stret(v63);
    double v69 = (v64 + v66 * 0.99330562) * v65.__sinval;
    float64_t v382 = v419.f64[1] - v67 * v68.__sinval;
    float64_t v384 = v419.f64[0] - v67 * v68.__cosval;
    double v380 = v23 - v69;
    double v395 = v424 - v67 * v68.__cosval;
    double v386 = v20 - v69;
    double v389 = v19 - v67 * v68.__sinval;
    double v70 = v20 - v23;
    double v72 = v406;
    double v71 = v407;
    double v413 = v20;
    double v73 = -(v407 * (v20 - v23) - v406 * (v19 - v419.f64[1]));
    double v74 = v408;
    double v75 = -(v406 * (v424 - v419.f64[0]) - v408 * v70);
    double v402 = v19;
    double v76 = -(v408 * (v19 - v419.f64[1]) - v407 * (v424 - v419.f64[0]));
    __double2 v77 = __sincos_stret(v392 * 0.5);
    double v78 = v77.__sinval / sqrt(v73 * v73 + v75 * v75 + v76 * v76);
    double v79 = v78 * v73;
    double v80 = v78 * v75;
    double v81 = v78 * v76;
    double v82 = -(v81 * v382 - v80 * v380) - (v81 * v382 - v80 * v380);
    double v83 = -(v79 * v380 - v81 * v384) - (v79 * v380 - v81 * v384);
    double v84 = -(v80 * v384 - v79 * v382) - (v80 * v384 - v79 * v382);
    _Q22.f64[0] = v419.f64[0] + v82 * v77.__cosval + v84 * v80 - v83 * v81;
    double v23 = v23 + v83 * v79 + v84 * v77.__cosval - v82 * v80;
    _Q22.f64[1] = v419.f64[1] + v82 * v81 + v83 * v77.__cosval - v84 * v79;
    double v85 = -(v81 * v389 - v80 * v386) - (v81 * v389 - v80 * v386);
    double v86 = -(v79 * v386 - v81 * v395) - (v79 * v386 - v81 * v395);
    double v87 = -(v80 * v395 - v79 * v389) - (v80 * v395 - v79 * v389);
    double v424 = v424 + v85 * v77.__cosval + v87 * v80 - v86 * v81;
    double v19 = v402 + v85 * v81 + v86 * v77.__cosval - v87 * v79;
    double v20 = v413 + v86 * v79 + v87 * v77.__cosval - v85 * v80;
    double v88 = -(v81 * v71 - v80 * v72) - (v81 * v71 - v80 * v72);
    double v89 = -(v79 * v72 - v81 * v74) - (v79 * v72 - v81 * v74);
    double v90 = -(v80 * v74 - v79 * v71) - (v80 * v74 - v79 * v71);
    double v407 = v407 + v88 * v81 + v89 * v77.__cosval - v90 * v79;
    double v408 = v408 + v88 * v77.__cosval + v90 * v80 - v89 * v81;
    double v406 = v406 + v89 * v79 + v90 * v77.__cosval - v88 * v80;
    *(void *)(a1 + 176) = 0;
    int v29 = 1;
  }
  if (*(unsigned char *)(a1 + 185))
  {
    double v91 = v23;
    float64x2_t v420 = _Q22;
    double v414 = v20;
    double v396 = *(double *)(*a2 + 104);
    double v399 = *(double *)(*a2 + 96);
    double v92 = *(double *)(*a2 + 32);
    if (v92 < *(double *)(a1 + 232) * 0.125)
    {
      md::MapDataAccess::groundCoordinateForScreenCursor((uint64_t)&v436, *(void *)(a1 + 8), *a2 + 8, *(int32x2_t *)(a1 + 216));
      *(float64x2_t *)(a1 + 192) = v436;
      *(double *)(a1 + 208) = v437;
      *(void *)(a1 + 232) = *(void *)(*a2 + 32);
    }
    double v93 = *(double *)(a1 + 200);
    double v94 = *(double *)(a1 + 208);
    __double2 v95 = __sincos_stret(*(double *)(a1 + 192));
    double v96 = 6378137.0 / sqrt(v95.__sinval * v95.__sinval * -0.00669437999 + 1.0);
    double v97 = (v96 + v94) * v95.__cosval;
    __double2 v98 = __sincos_stret(v93);
    double v99 = v97 * v98.__cosval;
    double v100 = v97 * v98.__sinval;
    double v101 = (v94 + v96 * 0.99330562) * v95.__sinval;
    double v102 = *(double *)(a1 + 224);
    if (v102 <= 1.0)
    {
      _Q22 = v420;
      _D3 = v420.f64[1];
      double v20 = v414;
      double v23 = v91;
    }
    else
    {
      _Q22 = v420;
      _D3 = v420.f64[1];
      __asm { FMLA            D6, D3, V22.D[1] }
      double v23 = v91;
      double v20 = v414;
      if (sqrt(_D6 + v91 * v91) - sqrt(v99 * v99 + v100 * v100 + v101 * v101) < v92 * 0.2)
      {
        double v105 = 0.2 - v102 * 0.2;
        double v106 = v105 * (v424 - v420.f64[0]);
        double v107 = v105 * (v19 - v420.f64[1]);
        double v108 = v105 * (v414 - v91);
        _Q22.f64[0] = v106 + v420.f64[0];
        _Q22.f64[1] = v107 + v420.f64[1];
        double v109 = v108 + v91;
        double v424 = v106 + v424;
        double v19 = v107 + v19;
        double v20 = v108 + v414;
        goto LABEL_82;
      }
    }
    double v127 = v99 - _Q22.f64[0];
    double v128 = v100 - _D3;
    double v129 = v101 - v23;
    double v130 = sqrt(v127 * v127 + v128 * v128 + v129 * v129);
    double v131 = v130 * v102;
    if (v102 >= 1.0)
    {
      if (v102 <= 1.0)
      {
        double v133 = v130 * v102;
LABEL_78:
        double v252 = v130 - v133;
        double v253 = 1.0
             / sqrt((v424 - _Q22.f64[0]) * (v424 - _Q22.f64[0]) + (v19 - _D3) * (v19 - _D3) + (v20 - v23) * (v20 - v23));
        double v254 = v253 * (v424 - _Q22.f64[0]);
        double v255 = v253 * (v19 - _D3);
        double v256 = v253 * (v20 - v23);
        double v257 = v252 / v130;
        v258.f64[0] = _Q22.f64[0] + v257 * v127;
        double v259 = _D3 + v257 * v128;
        double v109 = v23 + v257 * v129;
        double v260 = v254 * v254 + v255 * v255 + v256 * v256;
        double v261 = v254 * v258.f64[0] + v255 * v259 + v256 * v109;
        double v262 = v261 + v261;
        double v263 = (v259 * v259 - (v100 * v100 + v101 * v101 + v99 * v99 - v258.f64[0] * v258.f64[0]) + v109 * v109)
             * (-4.0
              * v260)
             + v262 * v262;
        if (v263 < 0.0 || (double v264 = (sqrt(v263) + v262) * -0.5 / v260, v264 < 0.0))
        {
          int v265 = 0;
LABEL_83:
          v29 |= v265;
          goto LABEL_84;
        }
        double v424 = v258.f64[0] + v264 * v254;
        double v19 = v259 + v264 * v255;
        double v20 = v109 + v264 * v256;
        v258.f64[1] = v259;
        _Q22 = v258;
LABEL_82:
        *(void *)(a1 + 224) = 0x3FF0000000000000;
        int v265 = 1;
        double v23 = v109;
        goto LABEL_83;
      }
      double v132 = v396;
      double v133 = v130;
      if (v130 > v396) {
        goto LABEL_78;
      }
      double v133 = v131;
      if (v131 <= v396) {
        goto LABEL_78;
      }
    }
    else
    {
      double v132 = v399;
      double v133 = v130;
      if (v130 < v399) {
        goto LABEL_78;
      }
      double v133 = v131;
      if (v131 >= v399) {
        goto LABEL_78;
      }
    }
    double v133 = v132;
    goto LABEL_78;
  }
LABEL_84:
  int v266 = *(unsigned __int8 *)(a1 + 18);
  long double v416 = v20;
  float64x2_t v422 = _Q22;
  double v401 = v23;
  if (*(unsigned char *)(a1 + 18) || *(unsigned char *)(a1 + 130) || *(unsigned char *)(a1 + 83) || *(unsigned char *)(a1 + 186))
  {
    __int16 v267 = (unsigned char *)(a1 + 243);
    if (*(unsigned char *)(a1 + 243))
    {
      if (*(double *)(a1 + 256) < 1.0) {
        goto LABEL_92;
      }
      *__int16 v267 = 0;
    }
    goto LABEL_91;
  }
  __int16 v267 = (unsigned char *)(a1 + 243);
  if (!*(unsigned char *)(a1 + 243)) {
LABEL_91:
  }
    *(void *)(a1 + 264) = *(void *)(*a2 + 40);
LABEL_92:
  double v268 = *(double *)(*a2 + 16);
  double v269 = *(double *)(*a2 + 24);
  __double2 v270 = __sincos_stret(*(double *)(*a2 + 8));
  double v271 = 6378137.0 / sqrt(v270.__sinval * v270.__sinval * -0.00669437999 + 1.0);
  double v272 = (v271 + v269) * v270.__cosval;
  __double2 v273 = __sincos_stret(v268);
  double v274 = v272 * v273.__cosval;
  double v275 = v272 * v273.__sinval;
  double v276 = (v269 + v271 * 0.99330562) * v270.__sinval;
  *(double *)(a1 + 272) = v274;
  *(double *)(a1 + 280) = v275;
  *(double *)(a1 + 288) = v276;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 244) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 296) = 0;
  uint64_t v277 = *a2;
  int v278 = *(unsigned __int8 *)(a1 + 241);
  if (*(unsigned char *)(a1 + 241))
  {
    double v279 = *(double *)(v277 + 32);
    double v280 = 0.0;
    if (v279 <= 1500000.0)
    {
      double v281 = 0.000000666666667;
      if (v279 >= 1.0) {
        double v281 = v279 * 0.000000666666667;
      }
      double v282 = cos(sqrt(v281) * 3.7699104 + 2.5132736);
      if (*v267) {
        double v280 = *(double *)(a1 + 264);
      }
      else {
        double v280 = 0.680678408 - v282 * 0.680678408;
      }
    }
  }
  else
  {
    double v280 = 1.57079633;
  }
  double v283 = *(double *)(v277 + 40);
  *(unsigned char *)(a1 + 243) = v280 < v283;
  *(void *)(a1 + 320) = 0x3FD3333333333333;
  if (v280 < v283)
  {
    double v404 = v19;
    double v284 = *(double *)(v277 + 16);
    double v285 = *(double *)(v277 + 24);
    __double2 v286 = __sincos_stret(*(double *)(v277 + 8));
    double v287 = 6378137.0 / sqrt(v286.__sinval * v286.__sinval * -0.00669437999 + 1.0);
    double v288 = (v287 + v285) * v286.__cosval;
    __double2 v289 = __sincos_stret(v284);
    double v290 = -(v274 - v288 * v289.__cosval);
    double v291 = -(v275 - v288 * v289.__sinval);
    double v292 = -(v276 - (v285 + v287 * 0.99330562) * v286.__sinval);
    double v293 = sqrt(v290 * v290 + v291 * v291 + v292 * v292);
    if (v293 > 1.0)
    {
      double v294 = 1.0 / v293;
      *(double *)(a1 + 296) = v294 * v290;
      *(double *)(a1 + 304) = v294 * v291;
      *(double *)(a1 + 312) = v294 * v292;
    }
    *(void *)(a1 + 256) = 0;
    double v19 = v404;
  }
  if ((v29 | a3) == 1)
  {
    double v405 = v424 * v424 + v19 * v19;
    double v295 = sqrt(v405);
    double v296 = atan2(v416, v295 * 0.996647189);
    long double v409 = atan2(v19, v424);
    __double2 v297 = __sincos_stret(v296);
    double v410 = atan2(v416 + v297.__sinval * v297.__sinval * 42841.3115 * v297.__sinval, v295 + v297.__cosval * v297.__cosval * -42697.6727 * v297.__cosval);
    __double2 v298 = __sincos_stret(v410);
    double v411 = v295 / v298.__cosval + -6378137.0 / sqrt(v298.__sinval * v298.__sinval * -0.00669437999 + 1.0);
    double v299 = v424 - v422.f64[0];
    v422.f64[0] = sqrt(v299 * v299 + (v19 - v422.f64[1]) * (v19 - v422.f64[1]) + (v416 - v401) * (v416 - v401));
    double v300 = 1.0 / v422.f64[0] * v299;
    double v301 = v19;
    double v302 = 1.0 / v422.f64[0] * (v19 - v422.f64[1]);
    double v303 = 1.0 / v422.f64[0] * (v416 - v401);
    double v304 = 1.0 / sqrt(v408 * v408 + v407 * v407 + v406 * v406);
    double v305 = v304 * v408;
    double v306 = v304 * v407;
    double v307 = v304 * v406;
    int v308 = *(unsigned __int8 *)(a1 + 129);
    if (*(unsigned char *)(a1 + 129)) {
      double v309 = acos(fmin(fmax(-(v302 * v301 + v303 * v416 + v300 * v424) / sqrt(v405 + v416 * v416), -1.0), 1.0));
    }
    else {
      double v309 = *(double *)(v277 + 40);
    }
    __double2 v310 = __sincos_stret(v309);
    double v311 = v305 * v310.__cosval + v310.__sinval * v300;
    double v312 = v306 * v310.__cosval + v310.__sinval * v302;
    long long v439 = 0u;
    long long v438 = 0u;
    double v313 = v307 * v310.__cosval + v310.__sinval * v303;
    v436.f64[0] = v410;
    v436.f64[1] = v409;
    double v314 = v411;
    double v437 = v411;
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(&v429, v436.f64);
    double v315 = -(v433 * v313 - v434 * v312) - (v433 * v313 - v434 * v312);
    double v316 = -(v434 * v311 - v432 * v313) - (v434 * v311 - v432 * v313);
    double v317 = -(v432 * v312 - v433 * v311) - (v432 * v312 - v433 * v311);
    double v318 = atan2(-(v316 * v434 - (-(v311 - v317 * v433) - v315 * v435)), v312 + v317 * v432 + v316 * v435 - v315 * v434);
    if (v308)
    {
      double v319 = v309;
      v321.f64[0] = v409;
      double v320 = v410;
      double v322 = v422.f64[0];
      goto LABEL_121;
    }
    double v322 = v422.f64[0];
    if (v278)
    {
      double v319 = 0.0;
      if (v422.f64[0] <= 1500000.0)
      {
        double v323 = 0.000000666666667;
        if (v422.f64[0] >= 1.0) {
          double v323 = v422.f64[0] * 0.000000666666667;
        }
        double v324 = cos(sqrt(v323) * 3.7699104 + 2.5132736);
        if (*(unsigned char *)(a1 + 243))
        {
          double v319 = *(double *)(a1 + 264);
          if (v309 <= v319)
          {
LABEL_116:
            double v319 = v309;
            v321.f64[0] = v409;
            double v320 = v410;
            goto LABEL_121;
          }
        }
        else
        {
          double v319 = 0.680678408 - v324 * 0.680678408;
          if (v309 <= v319) {
            goto LABEL_116;
          }
        }
LABEL_119:
        v321.f64[0] = v409;
        double v320 = v410;
        if (*(unsigned char *)(a1 + 242))
        {
          *(unsigned char *)(a1 + 244) = 1;
          *(double *)(a1 + 248) = v309;
        }
LABEL_121:
        *(double *)v325.i64 = v320;
        if (*(unsigned char *)(a1 + 82))
        {
          double v326 = v318;
        }
        else
        {
          double v326 = v318;
          if (fabs(v320) < 1.30899694)
          {
            double v327 = *(double *)(v277 + 48);
            if (v322 >= 400000.0)
            {
              double v328 = fabs(v327);
              double v326 = 0.0;
              if (v328 >= 0.01)
              {
                double v425 = v320;
                long double v329 = fmod(v321.f64[0] + 3.14159265 - *(double *)(v277 + 16), 6.28318531);
                double v330 = fabs(fmod(v329 + 6.28318531, 6.28318531) + -3.14159265);
                double v331 = v330 + v330;
                if (*(unsigned char *)(a1 + 240))
                {
                  double v332 = *(double *)(v277 + 32);
                  if (v322 >= v332) {
                    double v333 = v322 * 0.785398163 / v332;
                  }
                  else {
                    double v333 = v332 * 0.785398163 / v322;
                  }
                  double v334 = v333 + -0.785398163;
                }
                else
                {
                  double v334 = 0.0;
                }
                v321.f64[0] = v409;
                double v320 = v410;
                *(double *)v325.i64 = v425;
                double v335 = fmin(v328, fmax(v331, v334));
                if (v327 <= 0.0) {
                  double v335 = -v335;
                }
                double v326 = v318 - v335;
              }
            }
            else
            {
              double v326 = *(double *)(v277 + 48);
            }
          }
        }
        v325.i64[1] = *(void *)&v321.f64[0];
        double v336 = fmin(v322, 60592301.5);
        double v337 = *(double *)(a1 + 344);
        double v338 = *(double *)(a1 + 328);
        if (v337 < v338 || (double v339 = *(double *)(a1 + 352), v340 = *(double *)(a1 + 336), v339 < v340))
        {
LABEL_144:
          double v341 = *(double *)(a1 + 376);
          double v342 = *(double *)(a1 + 360);
          if (v341 < v342) {
            goto LABEL_156;
          }
          double v343 = *(double *)(a1 + 384);
          double v344 = *(double *)(a1 + 368);
          if (v343 < v344) {
            goto LABEL_156;
          }
          double v345 = *(double *)(a1 + 408);
          double v346 = *(double *)(a1 + 392);
          if (v345 < v346) {
            goto LABEL_156;
          }
          double v347 = *(double *)(a1 + 416);
          double v348 = *(double *)(a1 + 400);
          if (v347 < v348) {
            goto LABEL_156;
          }
          if (v321.f64[0] <= v341)
          {
            if (v321.f64[0] >= v342)
            {
              char v349 = 1;
              double v359 = 0.0;
LABEL_177:
              if (v320 <= v343)
              {
                if (v320 >= v344)
                {
                  if (v349) {
                    goto LABEL_156;
                  }
                  double v361 = sqrt(v359);
                  if (v321.f64[0] > v345) {
                    goto LABEL_182;
                  }
                  goto LABEL_185;
                }
                double v360 = v344 - v320;
              }
              else
              {
                double v360 = v320 - v343;
              }
              double v361 = sqrt(v360 * v360 + v359);
              if (v321.f64[0] > v345)
              {
LABEL_182:
                char v362 = 0;
                double v363 = v321.f64[0] - v345;
                goto LABEL_187;
              }
LABEL_185:
              if (v321.f64[0] >= v346)
              {
                char v362 = 1;
                double v364 = 0.0;
                goto LABEL_189;
              }
              char v362 = 0;
              double v363 = v346 - v321.f64[0];
LABEL_187:
              double v364 = v363 * v363;
LABEL_189:
              if (v320 > v347)
              {
                double v365 = v320 - v347;
LABEL_193:
                double v366 = sqrt(v365 * v365 + v364);
LABEL_194:
                uint64_t v367 = (float64x2_t *)(a1 + 360);
                if (v361 > v366) {
                  uint64_t v367 = (float64x2_t *)(a1 + 392);
                }
                v321.f64[1] = v320;
                int8x16_t v368 = (int8x16_t)vminnmq_f64(vmaxnmq_f64(v321, *v367), v367[1]);
                int8x16_t v325 = vextq_s8(v368, v368, 8uLL);
                goto LABEL_156;
              }
              if (v320 < v348)
              {
                double v365 = v348 - v320;
                goto LABEL_193;
              }
              if ((v362 & 1) == 0)
              {
                double v366 = sqrt(v364);
                goto LABEL_194;
              }
LABEL_156:
              *(int8x16_t *)(v277 + 8) = v325;
              *(double *)(v277 + 24) = v314;
              *(double *)(v277 + 32) = v336;
              *(double *)(v277 + 40) = v319;
              *(double *)(v277 + 48) = v326;
              *(void *)(v277 + 56) = 0;
              int v266 = *(unsigned __int8 *)(a1 + 18);
              goto LABEL_157;
            }
            char v349 = 0;
            double v350 = v342 - v321.f64[0];
          }
          else
          {
            char v349 = 0;
            double v350 = v321.f64[0] - v341;
          }
          double v359 = v350 * v350;
          goto LABEL_177;
        }
        if (v321.f64[0] < v338) {
          goto LABEL_151;
        }
        if (v321.f64[0] < v337)
        {
          BOOL v358 = v320 >= v340 && v320 < v339;
          if (v358) {
            goto LABEL_144;
          }
        }
        if (v321.f64[0] > v337)
        {
LABEL_151:
          double v423 = v319;
          float64_t v351 = v321.f64[0] + -3.14159265;
          double v417 = v336;
          long double v352 = fmod(v338 - (v321.f64[0] + -3.14159265), 6.28318531);
          double v353 = fabs(fmod(v352 + 6.28318531, 6.28318531) + -3.14159265);
          long double v354 = v337 - v351;
          double v319 = v423;
          long double v355 = fmod(v354, 6.28318531);
          long double v356 = fmod(v355 + 6.28318531, 6.28318531);
          double v320 = v410;
          BOOL v358 = v353 <= fabs(v356 + -3.14159265);
          double v314 = v411;
          double v336 = v417;
          if (v358) {
            uint64_t v357 = (uint64_t *)(a1 + 328);
          }
          else {
            uint64_t v357 = (uint64_t *)(a1 + 344);
          }
          v325.i64[1] = *v357;
        }
        v325.i64[0] = fmin(fmax(v320, v340), v339);
        goto LABEL_156;
      }
    }
    else
    {
      double v319 = 1.57079633;
    }
    if (v309 <= v319) {
      goto LABEL_116;
    }
    goto LABEL_119;
  }
LABEL_157:
  if (v266) {
    *(_WORD *)(a1 + 17) = 0;
  }
  if (*(unsigned char *)(a1 + 130)) {
    *(_WORD *)(a1 + 129) = 0;
  }
  if (*(unsigned char *)(a1 + 83)) {
    *(_WORD *)(a1 + 82) = 0;
  }
  if (*(unsigned char *)(a1 + 186)) {
    *(_WORD *)(a1 + 185) = 0;
  }
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 81) = 0;
  *(unsigned char *)(a1 + 184) = 0;
}

void ggl::ConstantDataTyped<ggl::OffsetRibbon::Noise>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::OffsetRibbon::Noise>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Noise>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Noise>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585D50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Noise>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585D50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::TexturedInnerShadowRibbon::ShadowStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TexturedInnerShadowRibbon::ShadowStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedInnerShadowRibbon::ShadowStyle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedInnerShadowRibbon::ShadowStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedInnerShadowRibbon::ShadowStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Line::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Line::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Line::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Line::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586D48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Line::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::OuterShadowRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::OuterShadowRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OuterShadowRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OuterShadowRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OuterShadowRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::OffsetRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::OffsetRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::OffsetRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::TexturedInnerShadowRibbon::PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TexturedInnerShadowRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TexturedInnerShadowRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::TexturedSolidRibbon::PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TexturedSolidRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5883D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TexturedSolidRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5883D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::Line::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Line::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588F30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Line::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588F30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::OuterShadowRibbon::PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::OuterShadowRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::OuterShadowRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch(void *a1)
{
  *a1 = &unk_1EF530EB8;
  uint64_t v2 = (std::__shared_weak_count *)a1[132];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *a1 = &unk_1EF530EB8;
  uint64_t v2 = (std::__shared_weak_count *)a1[132];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5538D0;
  uint64_t v2 = *(uint64_t **)(a1 + 1016);
  if (v2)
  {
    unint64_t v3 = *(uint64_t **)(a1 + 1024);
    int8x8_t v4 = *(void **)(a1 + 1016);
    if (v3 != v2)
    {
      do
        std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](--v3, 0);
      while (v3 != v2);
      int8x8_t v4 = *(void **)(a1 + 1016);
    }
    *(void *)(a1 + 1024) = v2;
    operator delete(v4);
  }
  BOOL v5 = *(void **)(a1 + 992);
  do
  {
    if (v5[1])
    {
      unint64_t v6 = 0;
      double v7 = v5 + 2;
      char v8 = v5 + 2;
      uint64_t v9 = (void (***)(void))(v5 + 2);
      do
      {
        int v10 = (void (**)(void *))*v9;
        v9 += 15;
        (*v10)(v8);
        ++v6;
        v7 += 15;
        char v8 = v9;
      }
      while (v6 < v5[1]);
    }
    v5[1] = 0;
    BOOL v5 = (void *)*v5;
  }
  while (v5);
  uint64_t v11 = *(void ***)(a1 + 992);
  *(void *)(a1 + 1000) = v11;
  double v12 = *v11;
  void *v11 = 0;
  if (v12)
  {
    do
    {
      double v13 = (void *)*v12;
      free(v12);
      double v12 = v13;
    }
    while (v13);
    uint64_t v11 = *(void ***)(a1 + 992);
  }
  free(v11);
  double v14 = *(void **)(a1 + 968);
  if (v14)
  {
    *(void *)(a1 + 976) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 936);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 944);
    uint64_t v17 = *(void *)(a1 + 936);
    if (v16 != v15)
    {
      uint64_t v18 = *(void *)(a1 + 944);
      do
      {
        double v20 = *(void **)(v18 - 24);
        v18 -= 24;
        double v19 = v20;
        if (v20)
        {
          *(void *)(v16 - 16) = v19;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = *(void *)(a1 + 936);
    }
    *(void *)(a1 + 944) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 960) + 40))(*(void *)(a1 + 960), v17, *(void *)(a1 + 952) - v17);
  }
  float v21 = *(void **)(a1 + 912);
  if (v21)
  {
    *(void *)(a1 + 920) = v21;
    operator delete(v21);
  }
  *(void *)(a1 + 784) = &off_1EF55A458;
  *(void *)(a1 + 800) = 3131955885;
  *(void *)(a1 + 656) = &off_1EF55A458;
  *(void *)(a1 + 672) = 3131955885;
  *(void *)(a1 + 528) = &off_1EF55A458;
  *(void *)(a1 + 544) = 3131955885;
  *(void *)(a1 + 400) = &off_1EF55A458;
  *(void *)(a1 + 416) = 3131955885;
  *(void *)(a1 + 272) = &off_1EF55A458;
  *(void *)(a1 + 288) = 3131955885;
  *(void *)(a1 + 144) = &off_1EF55A458;
  *(void *)(a1 + 160) = 3131955885;
  *(void *)(a1 + 16) = &off_1EF55A458;
  *(void *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A6239270);
}

void md::RoadBatch::~RoadBatch(md::RoadBatch *this)
{
  md::RoadBatch::~RoadBatch(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t vars8;

  *(void *)this = &unk_1EF554600;
  uint64_t v2 = *((void *)this + 142);
  *((void *)this + 142) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *((void *)this + 141);
  *((void *)this + 141) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int8x8_t v4 = *((void *)this + 140);
  *((void *)this + 140) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  BOOL v5 = *((void *)this + 139);
  *((void *)this + 139) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  unint64_t v6 = *((void *)this + 138);
  *((void *)this + 138) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  double v7 = *((void *)this + 137);
  *((void *)this + 137) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  char v8 = *((void *)this + 136);
  *((void *)this + 136) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 135);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)this = &unk_1EF530EB8;
  int v10 = (std::__shared_weak_count *)*((void *)this + 132);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

void md::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch(void *a1)
{
  *a1 = &unk_1EF530EB8;
  uint64_t v2 = (std::__shared_weak_count *)a1[132];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::Ribbons::RibbonBatch<md::Ribbons::RoadRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A6239270);
}

void md::RoadLayer::~RoadLayer(md::RoadLayer *this)
{
  *(void *)this = &unk_1EF530FF8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF530FF8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(this);
}

void *md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553B10;
  uint64_t v2 = (void *)a1[1];
  unint64_t v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int8x8_t v4 = (void *)a1[4];
  BOOL v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[15];
  a1[15] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  char v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF530FF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[23];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)a1[21];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)a1[21];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF530FF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[23];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)a1[21];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)a1[21];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::~RibbonLayer(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::batch(std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RoadBatchKey,std::vector<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,geo::StdAllocator<std::unique_ptr<md::RoadRibbon,mdm::TypeDeleter<md::RoadRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RoadRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  BOOL v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2[-1].i64[1];
      uint64_t v6 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v5 + 96), a1->i64[0]))
      {
        a1->i64[0] = v5;
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return v4;
    case 4:
      uint64_t v16 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v17 = a2[-1].i64[1];
      uint64_t v18 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v18))
      {
        v16->i64[0] = v17;
        a2[-1].i64[1] = v18;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v16->i64[0] + 96), a1->i64[1]))
        {
          int8x16_t v19 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v19, v19, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return v4;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      char v8 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v8;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v8 + 96), *i64))
    {
      break;
    }
LABEL_6:
    i64 = v8;
    v9 += 8;
    if (++v8 == (uint64_t *)a2) {
      return 1;
    }
  }
  uint64_t *v8 = 0;
  uint64_t v21 = v11;
  uint64_t v12 = *i64;
  uint64_t v13 = v9;
  while (1)
  {
    *(uint64_t *)((char *)a1[1].i64 + v13) = 0;
    std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100]((uint64_t *)((char *)&a1[1].i64[1] + v13), v12);
    uint64_t v14 = v21;
    if (v13 == -16) {
      break;
    }
    uint64_t v12 = *(uint64_t *)((char *)&a1->i64[1] + v13);
    v13 -= 8;
    if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v12))
    {
      uint64_t v15 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
      goto LABEL_13;
    }
  }
  uint64_t v15 = (uint64_t *)a1;
LABEL_13:
  uint64_t v21 = 0;
  std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](v15, v14);
  if (++v10 != 8)
  {
    std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
    goto LABEL_6;
  }
  BOOL v4 = v8 + 1 == (uint64_t *)a2;
  std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
  return v4;
}

BOOL md::CollisionObject::circlesCollideWithCircles(md::CollisionObject *this, const md::CollisionObject *a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 44);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  BOOL v4 = 1;
  while (1)
  {
    uint64_t v5 = (float32x2_t *)(*((void *)a2 + 23) + 24 * v3);
    float v6 = v5[*((unsigned __int8 *)this + 199) + 1].f32[0];
    if (v6 > 0.0)
    {
      uint64_t v7 = *((unsigned int *)this + 44);
      if (v7) {
        break;
      }
    }
LABEL_3:
    BOOL v4 = ++v3 < v2;
    if (v3 == v2) {
      return 0;
    }
  }
  char v8 = (float32x2_t *)*((void *)this + 23);
  while (1)
  {
    float v9 = v8[*((unsigned __int8 *)a2 + 199) + 1].f32[0];
    if (v9 > 0.0)
    {
      float32x2_t v10 = vsub_f32(*v8, *v5);
      if (vaddv_f32(vmul_f32(v10, v10)) < (float)((float)(v9 + v6) * (float)(v9 + v6))) {
        return v4;
      }
    }
    v8 += 3;
    if (!--v7) {
      goto LABEL_3;
    }
  }
}

BOOL md::CollisionObject::rectsCollideWithRectsOBB(md::CollisionObject *this, const md::CollisionObject *a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 44);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *((unsigned int *)this + 44);
  if (!v3) {
    return 0;
  }
  float v4 = *((float *)a2 + 4);
  float v5 = *((float *)a2 + 5);
  float v6 = -v5;
  float v7 = *((float *)this + 4);
  float v8 = *((float *)this + 5);
  LODWORD(v9) = HIDWORD(*((void *)this + 2));
  LODWORD(v10) = *((void *)this + 2);
  uint64_t v11 = *((unsigned __int8 *)a2 + 199);
  uint64_t v12 = *((unsigned __int8 *)this + 199);
  uint64_t v13 = *((void *)a2 + 23);
  uint64_t v14 = (float *)*((void *)this + 23);
  if (*((void *)this + 2) == (LODWORD(v4) | ((unint64_t)LODWORD(v5) << 32)))
  {
    uint64_t v15 = 0;
    uint64_t v16 = 2 * v11;
    BOOL v17 = 1;
LABEL_6:
    int8x16_t v19 = (float *)(v13 + 24 * v15);
    float v20 = *v19;
    float v21 = v19[1];
    double v22 = &v19[2 * v12];
    float v23 = v22[2];
    float v24 = v22[3];
    float v25 = v23 * v4;
    float v26 = v23 * v5;
    float v27 = v24 * v6;
    float v28 = v24 * v4;
    float v29 = fabsf((float)(v7 * (float)(v23 * v4)) + (float)(v8 * (float)(v23 * v5)));
    float v30 = fabsf((float)((float)(v24 * v6) * v7) + (float)(v8 * (float)(v24 * v4)));
    float v31 = fabsf(-(float)((float)(v27 * v9) - (float)(v28 * v10)))
        + fabsf(-(float)((float)(v25 * v9) - (float)(v26 * v10)));
    double v32 = v14;
    uint64_t v33 = v3;
    while (1)
    {
      float v34 = v20 - *v32;
      float v35 = v21 - v32[1];
      if (fabsf((float)(v7 * v34) + (float)(v8 * v35)) <= (float)((float)(v29 + v30) + v32[v16 + 2])
        && fabsf(-(float)((float)(v34 * v9) - (float)(v35 * v10))) <= (float)(v31 + v32[v16 + 3]))
      {
        return v17;
      }
      v32 += 6;
      if (!--v33)
      {
        BOOL v18 = 0;
        BOOL v17 = ++v15 < v2;
        if (v15 == v2) {
          return v18;
        }
        goto LABEL_6;
      }
    }
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v38 = 2 * v11;
    BOOL v18 = 1;
LABEL_13:
    double v39 = (float *)(v13 + 24 * v37);
    float v40 = *v39;
    float v41 = v39[1];
    double v42 = &v39[2 * v12];
    float v43 = v42[2];
    float v44 = v42[3];
    float v45 = fabsf((float)(v7 * (float)(v43 * v4)) + (float)(v8 * (float)(v43 * v5)));
    float v46 = fabsf((float)((float)(v44 * v6) * v7) + (float)(v8 * (float)(v44 * v4)));
    float v47 = fabsf(-(float)((float)((float)(v44 * v6) * v9) - (float)((float)(v44 * v4) * v10)))
        + fabsf(-(float)((float)((float)(v43 * v4) * v9) - (float)((float)(v43 * v5) * v10)));
    double v48 = v14;
    uint64_t v49 = v3;
    while (1)
    {
      float v50 = v40 - *v48;
      float v51 = v41 - v48[1];
      float v52 = v48[v38 + 2];
      if (fabsf((float)(v7 * v50) + (float)(v8 * v51)) <= (float)((float)(v45 + v46) + v52))
      {
        float v53 = v48[v38 + 3];
        BOOL v60 = fabsf(-(float)((float)(v50 * v9) - (float)(v51 * v10))) <= (float)(v47 + v53);
        float v54 = v52 * v7;
        float v55 = v52 * v8;
        float v56 = v53 * (float)-v9;
        float v57 = v53 * v10;
        float v58 = fabsf((float)(v50 * v4) + (float)(v51 * v5));
        float v59 = (float)(fabsf((float)(v54 * v4) + (float)(v55 * v5)) + v43) + fabsf((float)(v56 * v4) + (float)(v57 * v5));
        BOOL v60 = v60 && v58 <= v59;
        float v61 = fabsf(-(float)((float)(v50 * v5) - (float)(v51 * v4)));
        float v62 = (float)(fabsf(-(float)((float)(v54 * v5) - (float)(v55 * v4))) + v44)
            + fabsf(-(float)((float)(v56 * v5) - (float)(v57 * v4)));
        if (v60 && v61 <= v62) {
          return v18;
        }
      }
      v48 += 6;
      if (!--v49)
      {
        BOOL v18 = ++v37 < v2;
        if (v37 == v2) {
          return 0;
        }
        goto LABEL_13;
      }
    }
  }
}

void md::CollisionObject::worldDrawDebugHighlightWithContext(md::CollisionObject *this, float64x2_t *a2, float32x2_t *a3)
{
  float v6 = (long long *)*((void *)this + 14);
  if (v6)
  {
    long long v7 = v6[5];
    long long v121 = v6[4];
    long long v122 = v7;
    long long v8 = v6[7];
    long long v123 = v6[6];
    long long v124 = v8;
    long long v9 = v6[1];
    long long v117 = *v6;
    long long v118 = v9;
    long long v10 = v6[3];
    long long v119 = v6[2];
    long long v120 = v10;
    if (*((unsigned char *)this + 152)) {
      return;
    }
  }
  else
  {
    uint64_t v11 = (double *)*((void *)this + 15);
    if (!v11) {
      return;
    }
    double v12 = v11[4];
    double v13 = v11[5];
    double v14 = v12 + v12;
    double v15 = (v12 + v12) * v12;
    double v16 = (v13 + v13) * v13;
    uint64_t v18 = *((void *)v11 + 2);
    double v17 = v11[3];
    double v19 = (v17 + v17) * v12;
    double v20 = v11[6];
    uint64_t v21 = *((void *)v11 + 7);
    double v22 = (v13 + v13) * v20;
    double v23 = v19 - v22;
    double v24 = v13 * (v17 + v17);
    v134[0] = 1.0 - (v15 + v16);
    v134[1] = v22 + v19;
    double v25 = 1.0 - (v17 + v17) * v17;
    v134[4] = v23;
    v134[5] = v25 - v16;
    double v26 = v20 * v14;
    double v27 = v20 * v14 + v24;
    double v28 = v14 * v13;
    double v29 = v20 * (v17 + v17);
    v134[8] = v27;
    v134[9] = v28 - v29;
    v134[2] = v24 - v26;
    v134[6] = v29 + v28;
    v134[10] = v25 - v15;
    v134[3] = 0.0;
    v134[7] = 0.0;
    v134[11] = 0.0;
    long long v135 = *(_OWORD *)v11;
    uint64_t v136 = v18;
    uint64_t v137 = 0x3FF0000000000000;
    long long v128 = 0u;
    long long v130 = 0u;
    long long v132 = 0u;
    long long v131 = 0u;
    long long v129 = 0u;
    long long v127 = 0u;
    long long v126 = 0u;
    uint64_t v133 = 0x3FF0000000000000;
    uint64_t v30 = *((void *)v11 + 8);
    uint64_t v31 = *((void *)v11 + 9);
    uint64_t v125 = v21;
    *(void *)&long long v128 = v30;
    *((void *)&v130 + 1) = v31;
    gm::operator*<double,4,4,4>((double *)&v117, v134, (double *)&v125);
    if (*((unsigned char *)this + 152)) {
      return;
    }
  }
  uint64_t v32 = 100;
  if (!*((unsigned char *)this + 199)) {
    uint64_t v32 = 96;
  }
  float v33 = *((float *)this + 2);
  float v34 = *(float *)this;
  if (v33 >= *(float *)this)
  {
    float v36 = *((float *)this + 3);
    float v35 = *((float *)this + 1);
    if (v36 >= v35)
    {
      float v37 = *(float *)((char *)this + v32);
      float v34 = v34 - v37;
      float v33 = v33 + v37;
      float v35 = v35 - v37;
      float v36 = v36 + v37;
    }
  }
  else
  {
    float v35 = *((float *)this + 1);
    float v36 = *((float *)this + 3);
  }
  double v38 = v33;
  double v39 = v36;
  double v40 = *(double *)&v117 * v38;
  double v41 = *(double *)&v119 * v39;
  double v42 = *(double *)&v119 * v39 + *(double *)&v117 * v38 + *(double *)&v123;
  double v43 = *((double *)&v117 + 1) * v38;
  double v44 = *((double *)&v119 + 1) * v39;
  double v45 = *((double *)&v119 + 1) * v39 + *((double *)&v117 + 1) * v38 + *((double *)&v123 + 1);
  double v46 = *(double *)&v118 * v38;
  double v47 = *(double *)&v120 * v39;
  double v48 = *(double *)&v120 * v39 + *(double *)&v118 * v38 + *(double *)&v124;
  double v49 = *((double *)&v118 + 1) * v38;
  double v50 = *((double *)&v120 + 1) * v39;
  double v51 = 1.0 / (v50 + v49 + *((double *)&v124 + 1));
  double v52 = v51 * v42;
  double v53 = v51 * v45;
  double v54 = v34;
  double v55 = *(double *)&v117 * v54;
  double v56 = v41 + *(double *)&v117 * v54 + *(double *)&v123;
  double v57 = *((double *)&v117 + 1) * v54;
  double v58 = v44 + *((double *)&v117 + 1) * v54 + *((double *)&v123 + 1);
  double v59 = *(double *)&v118 * v54;
  double v60 = v47 + *(double *)&v118 * v54 + *(double *)&v124;
  double v61 = *((double *)&v118 + 1) * v54;
  double v62 = 1.0 / (v50 + v61 + *((double *)&v124 + 1));
  double v63 = v62 * v56;
  double v64 = v62 * v58;
  double v65 = v62 * v60;
  double v66 = v35;
  double v67 = *(double *)&v119 * v66;
  double v68 = *(double *)&v119 * v66 + v55 + *(double *)&v123;
  double v69 = *((double *)&v119 + 1) * v66;
  double v70 = *((double *)&v119 + 1) * v66 + v57 + *((double *)&v123 + 1);
  double v71 = *(double *)&v120 * v66;
  double v72 = *(double *)&v120 * v66 + v59 + *(double *)&v124;
  double v73 = *((double *)&v120 + 1) * v66;
  double v74 = 1.0 / (v73 + v61 + *((double *)&v124 + 1));
  double v111 = v74 * v68;
  double v112 = v74 * v70;
  double v113 = v74 * v72;
  double v75 = 1.0 / (v73 + v49 + *((double *)&v124 + 1));
  double v114 = v75 * (v67 + v40 + *(double *)&v123);
  double v115 = v75 * (v69 + v43 + *((double *)&v123 + 1));
  double v116 = v75 * (v71 + v46 + *(double *)&v124);
  double v76 = a2[55].f64[1];
  double v77 = a2[57].f64[1];
  double v78 = a2[61].f64[1];
  double v79 = a2[59].f64[1];
  double v110 = v63;
  float64x2_t v80 = a2[54];
  float64x2_t v81 = a2[56];
  float64x2_t v82 = a2[58];
  float32x2_t v83 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v80, v52), v81, v53), v82, v51 * v48), 1.0 / (v78 + v76 * v52 + v77 * v53 + v79 * (v51 * v48))));
  double v108 = v65;
  double v109 = v64;
  *(float32x2_t *)&v134[0] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v80, v63), v81, v64), v82, v65), 1.0 / (v78 + v76 * v63 + v77 * v64 + v79 * v65)));
  a3[1] = v83;
  ggl::DebugConsole::drawLine((uint64_t)a3, (float *)v134);
  double v84 = a2[55].f64[1];
  double v85 = a2[57].f64[1];
  double v86 = a2[61].f64[1];
  double v87 = a2[59].f64[1];
  float64x2_t v88 = a2[54];
  float64x2_t v89 = a2[56];
  float64x2_t v90 = a2[58];
  float32x2_t v91 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v88, v110), v89, v109), v90, v108), 1.0 / (v86 + v84 * v110 + v85 * v109 + v87 * v108)));
  *(float32x2_t *)&v134[0] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v88, v111), v89, v112), v90, v113), 1.0 / (v86 + v84 * v111 + v85 * v112 + v87 * v113)));
  a3[1] = v91;
  ggl::DebugConsole::drawLine((uint64_t)a3, (float *)v134);
  double v92 = a2[55].f64[1];
  double v93 = a2[57].f64[1];
  double v94 = a2[61].f64[1];
  double v95 = a2[59].f64[1];
  float64x2_t v96 = a2[54];
  float64x2_t v97 = a2[56];
  float64x2_t v98 = a2[58];
  float32x2_t v99 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v96, v111), v97, v112), v98, v113), 1.0 / (v94 + v92 * v111 + v93 * v112 + v95 * v113)));
  *(float32x2_t *)&v134[0] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v96, v114), v97, v115), v98, v116), 1.0 / (v94 + v92 * v114 + v93 * v115 + v95 * v116)));
  a3[1] = v99;
  ggl::DebugConsole::drawLine((uint64_t)a3, (float *)v134);
  double v100 = a2[55].f64[1];
  double v101 = a2[57].f64[1];
  double v102 = a2[61].f64[1];
  double v103 = a2[59].f64[1];
  float64x2_t v104 = a2[54];
  float64x2_t v105 = a2[56];
  float64x2_t v106 = a2[58];
  float32x2_t v107 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v104, v114), v105, v115), v106, v116), 1.0 / (v102 + v100 * v114 + v101 * v115 + v103 * v116)));
  *(float32x2_t *)&v134[0] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(a2[60], v104, v52), v105, v53), v106, v51 * v48), 1.0 / (v102 + v100 * v52 + v101 * v53 + v103 * (v51 * v48))));
  a3[1] = v107;
  ggl::DebugConsole::drawLine((uint64_t)a3, (float *)v134);
}

float md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  float v4 = *(float *)(v3 + 116);
  float v5 = *(float *)(v3 + 120);
  float v6 = *(float *)(v3 + 112);
  if (v6 == v5 && v4 == *(float *)(v3 + 124))
  {
    float v7 = 0.0;
    if (v6 != v4) {
      float v7 = (float)(fminf(v4, fmaxf(v6, *(float *)(a3 + 60))) - v6) / (float)(v4 - v6);
    }
    float v8 = -1.0 - v7;
  }
  else
  {
    float v9 = *(float *)(a3 + 60);
    if (v9 >= v4)
    {
      float v8 = 1.0;
      if (v9 >= v5)
      {
        float v10 = *(float *)(v3 + 124);
        if (v5 != v10) {
          float v8 = (float)((float)(fminf(v10, fmaxf(v5, v9)) - v5) / (float)(v10 - v5)) + 1.0;
        }
      }
    }
    else
    {
      float v8 = 0.0;
      if (v6 != v4) {
        float v8 = (float)(fminf(v4, fmaxf(v6, v9)) - v6) / (float)(v4 - v6);
      }
    }
  }
  uint64_t v11 = *a2;
  float v12 = fmaxf(*(float *)(a3 + 8), 0.0);
  if (v12 >= 1.0) {
    float v13 = 65535.0;
  }
  else {
    float v13 = v12 * 65535.0;
  }
  int v14 = (int)v13;
  float v15 = fmaxf(*(float *)(a3 + 12), 0.0);
  if (v15 >= 1.0) {
    float v16 = 65535.0;
  }
  else {
    float v16 = v15 * 65535.0;
  }
  *(_WORD *)uint64_t v11 = v14;
  *(_WORD *)(v11 + 2) = (int)v16;
  float32x4_t v17 = *(float32x4_t *)(a3 + 20);
  v17.i64[1] = *(void *)(a3 + 44);
  v18.i64[0] = 0xBF000000BF000000;
  v18.i64[1] = 0xBF000000BF000000;
  v19.i64[0] = 0xBF000000BF000000;
  v19.i64[1] = 0xBF000000BF000000;
  int16x4_t v20 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v19, (float32x4_t)xmmword_1A28FC8B0, v17)));
  *(_DWORD *)(v11 + 16) = *(_DWORD *)(v3 + 100);
  *(_DWORD *)(v11 + 20) = *(_DWORD *)(v3 + 104);
  *(float *)(v11 + 24) = v8;
  *(float *)(v11 + 28) = *(float *)(v3 + 128) + *(float *)(a3 + 60);
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(a3 + 16);
  float v21 = *(float *)(a3 + 12);
  v19.f32[0] = fmaxf(*(float *)(a3 + 8), 0.0);
  BOOL v22 = v19.f32[0] < 1.0;
  float v23 = v19.f32[0] * 65535.0;
  if (!v22) {
    float v23 = 65535.0;
  }
  *(_WORD *)(v11 + 40) = (int)v23;
  uint64_t v24 = v11 + 40;
  *(int16x4_t *)(v24 - 36) = v20;
  float v25 = fmaxf(v21, 0.0);
  if (v25 >= 1.0) {
    float v26 = 65535.0;
  }
  else {
    float v26 = v25 * 65535.0;
  }
  *a2 = v24;
  *(_WORD *)(v24 + 2) = (int)v26;
  float32x4_t v27 = *(float32x4_t *)(a3 + 28);
  v27.i64[1] = *(void *)(a3 + 52);
  *(int16x4_t *)(v24 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v18, (float32x4_t)xmmword_1A28FC8B0, v27)));
  uint64_t v28 = *(void *)(a1 + 8);
  *(_DWORD *)(v24 + 16) = *(_DWORD *)(v28 + 100);
  *(_DWORD *)(v24 + 20) = *(_DWORD *)(v28 + 104);
  *(float *)(v24 + 24) = v8;
  *(float *)(v24 + 28) = *(float *)(v28 + 128) + *(float *)(a3 + 60);
  float result = *(float *)(a3 + 16);
  *(float *)(v24 + 32) = result;
  *a2 = v24 + 40;
  return result;
}

void md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    float v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      float v5 = __p;
    }
    float v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t md::FlyoverCompleteTileDataLogic::runBeforeLayoutAtVariableRate(unint64_t a1, md::LayoutContext *a2, unsigned __int16 ***a3, void *a4)
{
  uint64_t v493 = *MEMORY[0x1E4F143B8];
  v486[0] = &unk_1EF51F1D8;
  v486[1] = a2;
  uint64_t v487 = v486;
  v484[0] = &unk_1EF51F220;
  v484[1] = a2;
  uint64_t v485 = v484;
  uint64_t v489 = v488;
  v488[0] = &unk_1EF51F220;
  v488[1] = a2;
  _ZNSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v486);
  if (v485 == v484)
  {
    (*(void (**)(void *))(v484[0] + 32))(v484);
  }
  else if (v485)
  {
    (*(void (**)(void))(*v485 + 40))();
  }
  if (v487 == v486)
  {
    (*(void (**)(void *))(v486[0] + 32))(v486);
    uint64_t v7 = *(void *)(a1 + 168);
    if (!v7) {
      goto LABEL_884;
    }
    goto LABEL_11;
  }
  if (v487) {
    (*(void (**)(void))(*v487 + 40))();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  if (v7)
  {
LABEL_11:
    uint64_t v445 = *(QuadTile **)(v7 + 352);
    if (!v445) {
      goto LABEL_884;
    }
    uint64_t v444 = *a3;
    float v8 = (uint64_t *)a3[2];
    uint64_t v448 = a3[1];
    char v9 = (std::__shared_weak_count *)v8[1];
    uint64_t v469 = *v8;
    int v470 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v10 = *(double *)(md::LayoutContext::frameState(a2) + 88);
    if (*(void *)(a1 + 792))
    {
      uint64_t v11 = *(void **)(a1 + 784);
      if (v11)
      {
        do
        {
          float v12 = (void *)*v11;
          operator delete(v11);
          uint64_t v11 = v12;
        }
        while (v12);
      }
      *(void *)(a1 + 784) = 0;
      uint64_t v13 = *(void *)(a1 + 776);
      if (v13)
      {
        for (uint64_t i = 0; i != v13; ++i)
          *(void *)(*(void *)(a1 + 768) + 8 * i) = 0;
      }
      *(void *)(a1 + 792) = 0;
    }
    unint64_t v436 = a1 + 768;
    uint64_t v15 = *(void *)(a1 + 232);
    float v16 = *(uint64_t **)(a1 + 288);
    unint64_t v460 = a1;
    if ((uint64_t *)v15 != v16)
    {
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a1 + 272);
      int16x4_t v20 = (void *)(a1 + 248);
      while (v18 != v19)
      {
        uint64_t v21 = *(void *)(v15 + 120);
        BOOL v22 = std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>((void *)(a1 + 248), (unsigned __int8 *)(v15 + 16));
        if (v22)
        {
          int8x8_t v23 = *(int8x8_t *)(a1 + 256);
          unint64_t v24 = *((void *)v22 + 1);
          uint8x8_t v25 = (uint8x8_t)vcnt_s8(v23);
          v25.i16[0] = vaddlv_u8(v25);
          if (v25.u32[0] > 1uLL)
          {
            if (v24 >= *(void *)&v23) {
              v24 %= *(void *)&v23;
            }
          }
          else
          {
            v24 &= *(void *)&v23 - 1;
          }
          float v26 = *(unsigned __int8 **)(*v20 + 8 * v24);
          do
          {
            float32x4_t v27 = v26;
            float v26 = *(unsigned __int8 **)v26;
          }
          while (v26 != v22);
          if (v27 == (unsigned __int8 *)(a1 + 264)) {
            goto LABEL_44;
          }
          unint64_t v28 = *((void *)v27 + 1);
          if (v25.u32[0] > 1uLL)
          {
            if (v28 >= *(void *)&v23) {
              v28 %= *(void *)&v23;
            }
          }
          else
          {
            v28 &= *(void *)&v23 - 1;
          }
          if (v28 != v24)
          {
LABEL_44:
            if (!*(void *)v22) {
              goto LABEL_45;
            }
            unint64_t v29 = *(void *)(*(void *)v22 + 8);
            if (v25.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&v23) {
                v29 %= *(void *)&v23;
              }
            }
            else
            {
              v29 &= *(void *)&v23 - 1;
            }
            if (v29 != v24) {
LABEL_45:
            }
              *(void *)(*v20 + 8 * v24) = 0;
          }
          uint64_t v30 = *(void *)v22;
          if (*(void *)v22)
          {
            unint64_t v31 = *(void *)(v30 + 8);
            if (v25.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&v23) {
                v31 %= *(void *)&v23;
              }
            }
            else
            {
              v31 &= *(void *)&v23 - 1;
            }
            if (v31 != v24)
            {
              *(void *)(*v20 + 8 * v31) = v27;
              uint64_t v30 = *(void *)v22;
            }
          }
          *(void *)float32x4_t v27 = v30;
          --*(void *)(a1 + 272);
          operator delete(v22);
          float v16 = *(uint64_t **)(a1 + 288);
        }
        v17 += v21;
        uint64_t v15 = *(void *)(v15 + 8);
        ++v18;
        if ((uint64_t *)v15 == v16) {
          goto LABEL_54;
        }
      }
      float v16 = (uint64_t *)v15;
LABEL_54:
      uint64_t v32 = *(uint64_t **)(a1 + 232);
      if (v32 != v16)
      {
        uint64_t v33 = *v16;
        uint64_t v34 = *v32;
        *(void *)(v34 + 8) = *(void *)(*v16 + 8);
        **(void **)(v33 + 8) = v34;
        while (1)
        {
          float v35 = (uint64_t *)v32[1];
          --*(void *)(a1 + 240);
          if (v32[14])
          {
            uint64_t v36 = v32[12];
            float v37 = (uint64_t *)v32[13];
            uint64_t v38 = *v37;
            *(void *)(v38 + 8) = *(void *)(v36 + 8);
            **(void **)(v36 + 8) = v38;
            v32[14] = 0;
            if (v37 != v32 + 12) {
              break;
            }
          }
LABEL_56:
          operator delete(v32);
          uint64_t v32 = v35;
          a1 = v460;
          if (v35 == v16) {
            goto LABEL_70;
          }
        }
        while (1)
        {
          double v39 = (uint64_t *)v37[1];
          double v40 = (std::__shared_weak_count *)v37[7];
          if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
            double v41 = (std::__shared_weak_count *)v37[5];
            if (v41)
            {
LABEL_64:
              if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
          }
          else
          {
            double v41 = (std::__shared_weak_count *)v37[5];
            if (v41) {
              goto LABEL_64;
            }
          }
          double v42 = (std::__shared_weak_count *)v37[3];
          if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
          operator delete(v37);
          float v37 = v39;
          if (v39 == v32 + 12) {
            goto LABEL_56;
          }
        }
      }
LABEL_70:
      unint64_t v43 = *(void *)(a1 + 296);
      _CF = v43 >= v17;
      unint64_t v44 = v43 - v17;
      if (!_CF) {
        unint64_t v44 = 0;
      }
      *(void *)(a1 + 296) = v44;
    }
    if (*(void *)(a1 + 720))
    {
      double v45 = *(void **)(a1 + 712);
      if (v45)
      {
        do
        {
          double v46 = (void *)*v45;
          operator delete(v45);
          double v45 = v46;
        }
        while (v46);
      }
      *(void *)(a1 + 712) = 0;
      uint64_t v47 = *(void *)(a1 + 704);
      if (v47)
      {
        for (uint64_t j = 0; j != v47; ++j)
          *(void *)(*(void *)(a1 + 696) + 8 * j) = 0;
      }
      *(void *)(a1 + 720) = 0;
    }
    std::mutex::lock((std::mutex *)(a1 + 488));
    double v435 = (void *)(a1 + 592);
    std::__hash_table<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::__unordered_map_hasher<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::hash<gdc::Registry *>,std::equal_to<gdc::Registry *>,true>,std::__unordered_map_equal<gdc::Registry *,std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,std::equal_to<gdc::Registry *>,std::hash<gdc::Registry *>,true>,std::allocator<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>>>::swap(a1 + 592, a1 + 632);
    std::mutex::unlock((std::mutex *)(a1 + 488));
    for (k = *(uint64_t **)(a1 + 568); k; k = (uint64_t *)*k)
    {
      while (1)
      {
        unsigned __int8 v50 = atomic_load((unsigned __int8 *)(k[15] + 33));
        if ((v50 & 1) == 0)
        {
          unsigned __int8 v51 = atomic_load((unsigned __int8 *)(k[15] + 32));
          if ((v51 & 1) == 0) {
            break;
          }
        }
        k = (uint64_t *)std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::erase((void *)(a1 + 552), k);
        if (!k) {
          goto LABEL_86;
        }
      }
    }
LABEL_86:
    double v52 = (uint64_t *)v8[2];
    unint64_t v53 = *(unsigned __int16 *)(a1 + 384);
    uint64_t v54 = *v8;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    double v55 = *(unsigned __int16 **)(v54 + 48);
    double v56 = *(unsigned __int16 **)(v54 + 56);
    if (v55 == v56) {
      goto LABEL_97;
    }
    int v440 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    double v57 = *(unsigned __int16 **)(v54 + 48);
    while (*v57 != v53)
    {
      v57 += 16;
      if (v57 == v56) {
        goto LABEL_99;
      }
    }
    if (v57 == v56)
    {
LABEL_97:
      double v58 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      do
      {
        if (*v55 == v53) {
          goto LABEL_96;
        }
        v55 += 16;
      }
      while (v55 != v56);
      double v55 = *(unsigned __int16 **)(v54 + 56);
LABEL_96:
      double v58 = (uint64_t *)(v55 + 4);
    }
    int v440 = v58;
LABEL_99:
    *(_OWORD *)double v466 = 0u;
    *(_OWORD *)uint64_t v467 = 0u;
    float v468 = 1.0;
    *((void *)&v464 + 1) = 0;
    uint64_t v465 = 0;
    *(void *)&long long v464 = (char *)&v464 + 8;
    uint64_t v59 = *v52;
    uint64_t v60 = v52[1];
    if (*v52 == v60) {
      goto LABEL_830;
    }
    uint64_t v451 = (void *)(a1 + 712);
    uint64_t v449 = v440 + 1;
    unint64_t v439 = a1 + 680;
    v447 = (double *)(a1 + 744);
    uint64_t v438 = v52[1];
    __asm { FMOV            V14.2S, #1.0 }
LABEL_102:
    uint64_t v64 = v59 + 8;
    uint64_t v65 = *(void *)(v59 + 16);
    if (v65 == v59 + 8) {
      goto LABEL_101;
    }
LABEL_105:
    while (2)
    {
      double v66 = *(void **)(v65 + 16);
      int8x8_t v67 = (int8x8_t)v66[3];
      if (!*(void *)&v67) {
        goto LABEL_104;
      }
      unint64_t v68 = *(unsigned __int16 *)(a1 + 384);
      uint8x8_t v69 = (uint8x8_t)vcnt_s8(v67);
      v69.i16[0] = vaddlv_u8(v69);
      if (v69.u32[0] > 1uLL)
      {
        unint64_t v70 = *(unsigned __int16 *)(a1 + 384);
        if (*(void *)&v67 <= v68) {
          unint64_t v70 = v68 % *(void *)&v67;
        }
      }
      else
      {
        unint64_t v70 = (v67.i32[0] - 1) & v68;
      }
      double v71 = *(uint64_t ****)(v66[2] + 8 * v70);
      if (!v71) {
        goto LABEL_104;
      }
      double v72 = *v71;
      if (!v72) {
        goto LABEL_104;
      }
      if (v69.u32[0] < 2uLL)
      {
        uint64_t v73 = *(void *)&v67 - 1;
        while (1)
        {
          double v75 = v72[1];
          if (v75 == (uint64_t *)v68)
          {
            if (*((unsigned __int16 *)v72 + 8) == v68) {
              goto LABEL_126;
            }
          }
          else if (((unint64_t)v75 & v73) != v70)
          {
            goto LABEL_104;
          }
          double v72 = (uint64_t **)*v72;
          if (!v72) {
            goto LABEL_104;
          }
        }
      }
      while (1)
      {
        unint64_t v74 = (unint64_t)v72[1];
        if (v74 == v68) {
          break;
        }
        if (v74 >= *(void *)&v67) {
          v74 %= *(void *)&v67;
        }
        if (v74 != v70) {
          goto LABEL_104;
        }
LABEL_115:
        double v72 = (uint64_t **)*v72;
        if (!v72) {
          goto LABEL_104;
        }
      }
      if (*((unsigned __int16 *)v72 + 8) != v68) {
        goto LABEL_115;
      }
LABEL_126:
      if (!v66 || (double v76 = (unint64_t *)v66[1]) == 0)
      {
LABEL_104:
        uint64_t v65 = *(void *)(v65 + 8);
        if (v65 == v64) {
          goto LABEL_101;
        }
        continue;
      }
      break;
    }
    unint64_t v77 = 0x9DDFEA08EB382D69 * (((8 * v76) + 8) ^ ((unint64_t)v76 >> 32));
    unint64_t v78 = 0x9DDFEA08EB382D69 * (((unint64_t)v76 >> 32) ^ (v77 >> 47) ^ v77);
    unint64_t v79 = v78 ^ (v78 >> 47);
    unint64_t v80 = 0x9DDFEA08EB382D69 * v79;
    if (v466[1])
    {
      uint8x8_t v81 = (uint8x8_t)vcnt_s8((int8x8_t)v466[1]);
      v81.i16[0] = vaddlv_u8(v81);
      if (v81.u32[0] > 1uLL)
      {
        unint64_t v82 = 0x9DDFEA08EB382D69 * v79;
        if ((void *)v80 >= v466[1]) {
          unint64_t v82 = v80 % (unint64_t)v466[1];
        }
      }
      else
      {
        unint64_t v82 = ((unint64_t)v466[1] - 1) & v80;
      }
      float32x2_t v83 = (void *)*((void *)v466[0] + v82);
      if (v83)
      {
        double v84 = (void *)*v83;
        if (v84)
        {
          if (v81.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v86 = v84[1];
              if (v80 == v86)
              {
                if ((unint64_t *)v84[2] == v76) {
                  goto LABEL_104;
                }
              }
              else if ((v86 & ((uint64_t)v466[1] - 1)) != v82)
              {
                goto LABEL_148;
              }
              double v84 = (void *)*v84;
              if (!v84) {
                goto LABEL_148;
              }
            }
          }
          do
          {
            unint64_t v85 = v84[1];
            if (v80 == v85)
            {
              if ((unint64_t *)v84[2] == v76) {
                goto LABEL_104;
              }
            }
            else
            {
              if ((void *)v85 >= v466[1]) {
                v85 %= (unint64_t)v466[1];
              }
              if (v85 != v82) {
                break;
              }
            }
            double v84 = (void *)*v84;
          }
          while (v84);
        }
      }
    }
LABEL_148:
    unint64_t v446 = v80;
    uint64_t v441 = v65;
    uint64_t v442 = v64;
    uint64_t v443 = v59;
    *(_OWORD *)uint64_t v461 = 0u;
    *(_OWORD *)uint64_t v462 = 0u;
    int v463 = 1065353216;
    md::FlyoverCompleteTileDataLogic::addFallbackData(a1, v76, (uint64_t)v461);
    unint64_t v87 = *v76;
    unint64_t v88 = *v76;
    unint64_t v450 = v76[1];
    if (*v76 == v450) {
      goto LABEL_158;
    }
    unint64_t v89 = v87 + 144;
    unint64_t v88 = *v76;
    while (1)
    {
      if (v89 == v450)
      {
        unint64_t v88 = v76[1];
        goto LABEL_158;
      }
      if (*(unsigned __int8 *)(v89 + 112) != *(unsigned __int8 *)(v87 + 112)) {
        break;
      }
      v88 += 144;
      if (*(unsigned __int8 *)(v89 + 113) == *(unsigned __int8 *)(v87 + 113)
        && *(_DWORD *)(v89 + 116) == *(_DWORD *)(v87 + 116))
      {
        int v90 = *(_DWORD *)(v89 + 120);
        v89 += 144;
        if (v90 == *(_DWORD *)(v87 + 120)) {
          continue;
        }
      }
      goto LABEL_158;
    }
    unint64_t v88 = v89;
LABEL_158:
    unint64_t v91 = v76[1];
    uint64_t v457 = v76;
LABEL_161:
    if (v87 != v91)
    {
      char v453 = *(unsigned char *)(v87 + 112);
      char v454 = *(unsigned char *)(v87 + 113);
      uint64_t v452 = *(void *)(v87 + 116);
      signed int v456 = vcvtmd_s64_f64((double)SHIDWORD(v452) / (double)(1 << v454));
      uint64_t v455 = v456 - 0x61C8864680B583EBLL;
      unint64_t v458 = v88;
      while (1)
      {
        if (v87 == v88)
        {
          unint64_t v92 = v450;
          if (v450 != v88)
          {
            unint64_t v142 = v88 + 144;
            unint64_t v92 = v88;
            while (1)
            {
              if (v142 == v450)
              {
                unint64_t v92 = v450;
                goto LABEL_160;
              }
              if (*(unsigned __int8 *)(v142 + 112) != *(unsigned __int8 *)(v88 + 112)) {
                break;
              }
              v92 += 144;
              if (*(unsigned __int8 *)(v142 + 113) == *(unsigned __int8 *)(v88 + 113)
                && *(_DWORD *)(v142 + 116) == *(_DWORD *)(v88 + 116))
              {
                int v143 = *(_DWORD *)(v142 + 120);
                v142 += 144;
                if (v143 == *(_DWORD *)(v88 + 120)) {
                  continue;
                }
              }
              goto LABEL_160;
            }
            unint64_t v92 = v142;
          }
LABEL_160:
          unint64_t v91 = v76[1];
          unint64_t v87 = v88;
          unint64_t v88 = v92;
          goto LABEL_161;
        }
        if (*(unsigned __int16 *)(v87 + 8) == *(unsigned __int16 *)(a1 + 384)) {
          break;
        }
LABEL_167:
        v87 += 144;
      }
      md::FlyoverCommon::decodeFlyoverKey((md::FlyoverCommon *)__p, (const gdc::LayerDataRequestKey *)v87);
      char v93 = v491[8];
      if (!v491[8])
      {
LABEL_166:
        a1 = v460;
        double v76 = v457;
        unint64_t v88 = v458;
        goto LABEL_167;
      }
      char v94 = BYTE1(__p[0]);
      char v95 = (char)__p[0];
      uint64_t v96 = *(void *)&v491[12];
      int v97 = *(_DWORD *)&v491[20];
      uint64_t v459 = *(uint64_t *)((char *)__p + 4);
      uint64_t v100 = *(void *)&v491[12] & 0xFF00000000;
      uint64_t v101 = 2 * *(unsigned int *)&v491[12];
      if ((*(void *)&v491[12] & 0xFF00000000) == 0) {
        uint64_t v101 = 0;
      }
      unint64_t v98 = (BYTE1(__p[0])
           - 0x61C8864680B583EBLL
           + ((LOBYTE(__p[0]) - 0x61C8864680B583EBLL) << 6)
           + (((unint64_t)LOBYTE(__p[0]) - 0x61C8864680B583EBLL) >> 2)) ^ (LOBYTE(__p[0]) - 0x61C8864680B583EBLL);
      unint64_t v99 = (SHIDWORD(__p[0]) - 0x61C8864680B583EBLL + (v98 << 6) + (v98 >> 2)) ^ v98;
      unint64_t v102 = (v101 | ((unint64_t)*(unsigned int *)&v491[20] << 33)) ^ v99 ^ (SLODWORD(__p[1])
                                                                                  - 0x61C8864680B583EBLL
                                                                                  + (v99 << 6)
                                                                                  + (v99 >> 2));
      unint64_t v103 = (v455 + (v102 << 6) + (v102 >> 2)) ^ v102;
      unint64_t v104 = *(void *)(v460 + 704);
      if (v104)
      {
        uint8x8_t v105 = (uint8x8_t)vcnt_s8((int8x8_t)v104);
        v105.i16[0] = vaddlv_u8(v105);
        if (v105.u32[0] > 1uLL)
        {
          unint64_t v53 = (v455 + (v102 << 6) + (v102 >> 2)) ^ v102;
          if (v103 >= v104) {
            unint64_t v53 = v103 % v104;
          }
        }
        else
        {
          unint64_t v53 = v103 & (v104 - 1);
        }
        float64x2_t v106 = *(uint64_t ***)(*(void *)(v460 + 696) + 8 * v53);
        if (v106)
        {
          float32x2_t v107 = *v106;
          if (v107)
          {
            if (v105.u32[0] <= 1uLL)
            {
              unint64_t v108 = v104 - 1;
              if (!v100)
              {
                while (1)
                {
                  uint64_t v110 = v107[1];
                  if (v110 == v103)
                  {
                    if (*((unsigned __int8 *)v107 + 40) == v491[8]
                      && __PAIR64__(*((unsigned __int8 *)v107 + 17), *((unsigned __int8 *)v107 + 16)) == __PAIR64__(BYTE1(__p[0]), LOBYTE(__p[0]))
                      && *(void **)((char *)v107 + 20) == *(void **)((char *)__p + 4)
                      && *((_DWORD *)v107 + 13) == *(_DWORD *)&v491[20]
                      && !*((unsigned char *)v107 + 48)
                      && *((unsigned __int8 *)v107 + 56) == v456)
                    {
                      goto LABEL_166;
                    }
                  }
                  else if ((v110 & v108) != v53)
                  {
                    goto LABEL_231;
                  }
                  float32x2_t v107 = (uint64_t *)*v107;
                  if (!v107) {
                    goto LABEL_231;
                  }
                }
              }
              while (1)
              {
                uint64_t v109 = v107[1];
                if (v109 == v103)
                {
                  if (*((unsigned __int8 *)v107 + 40) == v491[8]
                    && __PAIR64__(*((unsigned __int8 *)v107 + 17), *((unsigned __int8 *)v107 + 16)) == __PAIR64__(BYTE1(__p[0]), LOBYTE(__p[0]))
                    && *(void **)((char *)v107 + 20) == *(void **)((char *)__p + 4)
                    && *((_DWORD *)v107 + 13) == *(_DWORD *)&v491[20]
                    && *((unsigned char *)v107 + 48)
                    && *((_DWORD *)v107 + 11) == *(_DWORD *)&v491[12]
                    && *((unsigned __int8 *)v107 + 56) == v456)
                  {
                    goto LABEL_166;
                  }
                }
                else if ((v109 & v108) != v53)
                {
                  goto LABEL_231;
                }
                float32x2_t v107 = (uint64_t *)*v107;
                if (!v107) {
                  goto LABEL_231;
                }
              }
            }
            if (!v100)
            {
              while (1)
              {
                unint64_t v112 = v107[1];
                if (v112 == v103)
                {
                  if (*((unsigned __int8 *)v107 + 40) == v491[8]
                    && __PAIR64__(*((unsigned __int8 *)v107 + 17), *((unsigned __int8 *)v107 + 16)) == __PAIR64__(BYTE1(__p[0]), LOBYTE(__p[0]))
                    && *(void **)((char *)v107 + 20) == *(void **)((char *)__p + 4)
                    && *((_DWORD *)v107 + 13) == *(_DWORD *)&v491[20]
                    && !*((unsigned char *)v107 + 48)
                    && *((unsigned __int8 *)v107 + 56) == v456)
                  {
                    goto LABEL_166;
                  }
                }
                else
                {
                  if (v112 >= v104) {
                    v112 %= v104;
                  }
                  if (v112 != v53) {
                    goto LABEL_231;
                  }
                }
                float32x2_t v107 = (uint64_t *)*v107;
                if (!v107) {
                  goto LABEL_231;
                }
              }
            }
            do
            {
              unint64_t v111 = v107[1];
              if (v111 == v103)
              {
                if (*((unsigned __int8 *)v107 + 40) == v491[8]
                  && __PAIR64__(*((unsigned __int8 *)v107 + 17), *((unsigned __int8 *)v107 + 16)) == __PAIR64__(BYTE1(__p[0]), LOBYTE(__p[0]))
                  && *(void **)((char *)v107 + 20) == *(void **)((char *)__p + 4)
                  && *((_DWORD *)v107 + 13) == *(_DWORD *)&v491[20]
                  && *((unsigned char *)v107 + 48)
                  && *((_DWORD *)v107 + 11) == *(_DWORD *)&v491[12]
                  && *((unsigned __int8 *)v107 + 56) == v456)
                {
                  goto LABEL_166;
                }
              }
              else
              {
                if (v111 >= v104) {
                  v111 %= v104;
                }
                if (v111 != v53) {
                  break;
                }
              }
              float32x2_t v107 = (uint64_t *)*v107;
            }
            while (v107);
          }
        }
      }
LABEL_231:
      double v113 = (char *)operator new(0x58uLL);
      *(void *)double v113 = 0;
      *((void *)v113 + 1) = v103;
      v113[16] = v95;
      v113[17] = v94;
      *(void *)(v113 + 20) = v459;
      v113[40] = v93;
      *(_WORD *)(v113 + 41) = *(_WORD *)&v491[9];
      v113[43] = v491[11];
      *(void *)(v113 + 44) = v96;
      *((_DWORD *)v113 + 13) = v97;
      v113[56] = v456;
      v113[64] = v453;
      v113[65] = v454;
      *(void *)(v113 + 68) = v452;
      float v114 = (float)(unint64_t)(*(void *)(v460 + 720) + 1);
      float v115 = *(float *)(v460 + 728);
      if (v104 && (float)(v115 * (float)v104) >= v114)
      {
LABEL_281:
        uint64_t v138 = *(void *)(v460 + 696);
        long double v139 = *(void **)(v138 + 8 * v53);
        if (v139)
        {
          *(void *)double v113 = *v139;
        }
        else
        {
          *(void *)double v113 = *v451;
          *uint64_t v451 = v113;
          *(void *)(v138 + 8 * v53) = v451;
          if (!*(void *)v113) {
            goto LABEL_165;
          }
          unint64_t v140 = *(void *)(*(void *)v113 + 8);
          if ((v104 & (v104 - 1)) != 0)
          {
            if (v140 >= v104) {
              v140 %= v104;
            }
          }
          else
          {
            v140 &= v104 - 1;
          }
          long double v139 = (void *)(*(void *)(v460 + 696) + 8 * v140);
        }
        void *v139 = v113;
LABEL_165:
        ++*(void *)(v460 + 720);
        goto LABEL_166;
      }
      BOOL v116 = (v104 & (v104 - 1)) != 0;
      if (v104 < 3) {
        BOOL v116 = 1;
      }
      unint64_t v117 = v116 | (2 * v104);
      unint64_t v118 = vcvtps_u32_f32(v114 / v115);
      if (v117 <= v118) {
        size_t prime = v118;
      }
      else {
        size_t prime = v117;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v104 = *(void *)(v460 + 704);
      }
      if (prime <= v104)
      {
        if (prime >= v104) {
          goto LABEL_268;
        }
        unint64_t v131 = vcvtps_u32_f32((float)*(unint64_t *)(v460 + 720) / *(float *)(v460 + 728));
        if (v104 < 3 || (uint8x8_t v132 = (uint8x8_t)vcnt_s8((int8x8_t)v104), v132.i16[0] = vaddlv_u8(v132), v132.u32[0] > 1uLL))
        {
          unint64_t v131 = std::__next_prime(v131);
        }
        else
        {
          uint64_t v133 = 1 << -(char)__clz(v131 - 1);
          if (v131 >= 2) {
            unint64_t v131 = v133;
          }
        }
        if (prime <= v131) {
          size_t prime = v131;
        }
        if (prime >= v104)
        {
          unint64_t v104 = *(void *)(v460 + 704);
LABEL_268:
          if ((v104 & (v104 - 1)) != 0)
          {
            if (v103 >= v104) {
              unint64_t v53 = v103 % v104;
            }
            else {
              unint64_t v53 = v103;
            }
          }
          else
          {
            unint64_t v53 = (v104 - 1) & v103;
          }
          goto LABEL_281;
        }
        if (!prime)
        {
          double v141 = *(void **)(v460 + 696);
          *(void *)(v460 + 696) = 0;
          if (v141) {
            operator delete(v141);
          }
          unint64_t v104 = 0;
          *(void *)(v460 + 704) = 0;
          goto LABEL_268;
        }
      }
      if (prime >> 61) {
        goto LABEL_953;
      }
      long long v120 = operator new(8 * prime);
      long long v121 = *(void **)(v460 + 696);
      *(void *)(v460 + 696) = v120;
      if (v121) {
        operator delete(v121);
      }
      uint64_t v122 = 0;
      *(void *)(v460 + 704) = prime;
      do
        *(void *)(*(void *)(v460 + 696) + 8 * v122++) = 0;
      while (prime != v122);
      long long v123 = (void *)*v451;
      if (!*v451)
      {
LABEL_267:
        unint64_t v104 = prime;
        goto LABEL_268;
      }
      size_t v124 = v123[1];
      size_t v125 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v126 = v124 & v125;
        *(void *)(*(void *)(v460 + 696) + 8 * v126) = v451;
        for (m = (void *)*v123; *v123; m = (void *)*v123)
        {
          size_t v128 = m[1] & v125;
          if (v128 == v126)
          {
            long long v123 = m;
          }
          else
          {
            uint64_t v129 = *(void *)(v460 + 696);
            if (*(void *)(v129 + 8 * v128))
            {
              *long long v123 = *m;
              uint64_t v130 = 8 * v128;
              void *m = **(void **)(*(void *)(v460 + 696) + v130);
              **(void **)(*(void *)(v460 + 696) + v130) = m;
            }
            else
            {
              *(void *)(v129 + 8 * v128) = v123;
              long long v123 = m;
              size_t v126 = v128;
            }
          }
        }
        goto LABEL_267;
      }
      if (v124 >= prime) {
        v124 %= prime;
      }
      *(void *)(*(void *)(v460 + 696) + 8 * v124) = v451;
      double v134 = (void *)*v123;
      if (!*v123) {
        goto LABEL_267;
      }
      while (1)
      {
        size_t v136 = v134[1];
        if (v136 >= prime) {
          v136 %= prime;
        }
        if (v136 != v124)
        {
          uint64_t v137 = *(void *)(v460 + 696);
          if (!*(void *)(v137 + 8 * v136))
          {
            *(void *)(v137 + 8 * v136) = v123;
            goto LABEL_272;
          }
          *long long v123 = *v134;
          uint64_t v135 = 8 * v136;
          *double v134 = **(void **)(*(void *)(v460 + 696) + v135);
          **(void **)(*(void *)(v460 + 696) + v135) = v134;
          double v134 = v123;
        }
        size_t v136 = v124;
LABEL_272:
        long long v123 = v134;
        double v134 = (void *)*v134;
        size_t v124 = v136;
        if (!v134) {
          goto LABEL_267;
        }
      }
    }
    long double v144 = (void *)*v440;
    if ((uint64_t *)*v440 == v449)
    {
LABEL_307:
      double v145 = (unsigned __int8 *)v462[0];
      unint64_t v146 = v439;
      unint64_t v53 = (unint64_t)v457;
      if (v462[0])
      {
        do
        {
          unsigned int v147 = v145[57];
          LOBYTE(v471) = v145[56];
          BYTE1(v471) = v147;
          *(void *)((char *)&v471 + 4) = *(void *)(v145 + 60);
          long long v473 = *((_OWORD *)v145 + 5);
          unsigned int v148 = v145[209];
          _ZF = v147 < v148 && v473 == 2;
          if (_ZF)
          {
            uint64_t v150 = *(void *)(v145 + 212);
            LOBYTE(v471) = v145[208];
            BYTE1(v471) = v148;
            *(void *)((char *)&v471 + 4) = v150;
            LOBYTE(v473) = 2;
            *(void *)((char *)&v473 + 4) = 0;
            HIDWORD(v473) = 0;
          }
          md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo::FlyoverOctileTileInfo((uint64_t)__p, (char *)v145 + 16, (uint64_t)&v471, (uint64_t)(v145 + 208));
          std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>((uint64_t **)&v464, (uint64_t)__p, (uint64_t)__p);
          double v145 = *(unsigned __int8 **)v145;
        }
        while (v145);
      }
      if (!*(unsigned char *)(a1 + 808)) {
        goto LABEL_654;
      }
      v478[0] = 0;
      v478[1] = 0;
      int v477 = v478;
      unint64_t v151 = *(void *)(a1 + 672);
      int v482 = (void **)v464;
      uint64_t v474 = (void **)&v464 + 1;
      unint64_t v481 = v151;
      unint64_t v480 = v439;
      *(void *)&long long v471 = &v477;
      *((void *)&v471 + 1) = v478;
      std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::insert_iterator<std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>> &>((char *)__p, (uint64_t)&v482, &v474, (uint64_t)&v481, &v480, (uint64_t)&v471);
      uint64_t v475 = 0;
      uint64_t v476 = 0;
      uint64_t v474 = &v475;
      int v482 = *(void ***)(a1 + 672);
      unint64_t v481 = v439;
      unint64_t v480 = v464;
      uint64_t v479 = (char *)&v464 + 8;
      *(void *)&long long v471 = &v474;
      *((void *)&v471 + 1) = &v475;
      std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::insert_iterator<std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>> &>((char *)__p, (uint64_t)&v482, &v481, (uint64_t)&v480, &v479, (uint64_t)&v471);
      double v152 = v477;
      if (v477 == v478) {
        goto LABEL_317;
      }
LABEL_413:
      unint64_t v146 = (unint64_t)(v152 + 12);
      if (*((unsigned char *)v152 + 56) == 2 || *((unsigned char *)v152 + 96) == 2) {
        goto LABEL_630;
      }
      __p[1] = 0;
      *(void *)uint64_t v491 = 0;
      __p[0] = &__p[1];
      *(void *)&v491[8] = 0;
      *(double *)&v491[16] = v10;
      if (!v476) {
        goto LABEL_629;
      }
      double v194 = v475;
      double v195 = &v475;
      double v196 = v475;
      double v197 = &v475;
      if (v475)
      {
        do
        {
          BOOL v198 = md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v196 + 4), (uint64_t)(v152 + 4));
          double v199 = v196 + 1;
          if (!v198)
          {
            double v199 = v196;
            double v195 = (void **)v196;
          }
          double v196 = (void *)*v199;
        }
        while (*v199);
        if (v195 != &v475)
        {
          if (v195 == v474)
          {
            long double v207 = &v475;
LABEL_456:
            if (v207 == &v475) {
              goto LABEL_457;
            }
LABEL_475:
            if (v207 == &v475) {
              goto LABEL_629;
            }
            double v220 = &v475;
            if (v195 == &v475) {
              goto LABEL_499;
            }
            unsigned int v221 = *((unsigned __int8 *)v152 + 73);
            int v222 = *((_DWORD *)v152 + 19);
            int v223 = *((_DWORD *)v152 + 20);
            int v224 = *((_DWORD *)v152 + 27);
            while (1)
            {
              if (*((unsigned __int8 *)v152 + 72) != *((unsigned __int8 *)v195 + 72))
              {
LABEL_495:
                double v220 = v195;
                if (v207 == v195) {
                  goto LABEL_629;
                }
                goto LABEL_502;
              }
              unsigned int v225 = *((unsigned __int8 *)v195 + 73);
              if (v221 >= v225)
              {
                if (v221 != v225
                  || v222 != *((_DWORD *)v195 + 19)
                  || v223 != *((_DWORD *)v195 + 20)
                  || v224 != *((_DWORD *)v195 + 27))
                {
                  goto LABEL_495;
                }
              }
              else
              {
                char v226 = v225 - v221;
                if (v222 != *((int *)v195 + 19) >> v226 || v223 != *((int *)v195 + 20) >> v226) {
                  goto LABEL_495;
                }
                if (v224 != *((_DWORD *)v195 + 27) >> v226)
                {
                  double v220 = v195;
LABEL_499:
                  if (v207 == v220) {
                    goto LABEL_629;
                  }
                  do
                  {
LABEL_502:
                    if (*((unsigned char *)v207 + 56) != 2 && *((unsigned char *)v207 + 96) != 2) {
                      std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>((uint64_t **)__p, (uint64_t)(v207 + 4), (uint64_t)(v207 + 4));
                    }
                    double v230 = v207[1];
                    if (v230)
                    {
                      do
                      {
                        int v231 = v230;
                        double v230 = (void *)*v230;
                      }
                      while (v230);
                    }
                    else
                    {
                      do
                      {
                        int v231 = v207[2];
                        _ZF = *v231 == (void)v207;
                        long double v207 = (void **)v231;
                      }
                      while (!_ZF);
                    }
                    long double v207 = (void **)v231;
                  }
                  while (v231 != v220);
                  if (!*(void *)v491) {
                    goto LABEL_629;
                  }
                  double v232 = (uint64_t **)v447;
LABEL_515:
                  double v233 = *v232;
                  __double2 v234 = v232;
                  if (*v232)
                  {
                    while (1)
                    {
                      double v232 = (uint64_t **)v233;
                      uint64_t v235 = (uint64_t)(v233 + 4);
                      if (md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v152 + 4), (uint64_t)(v233 + 4)))
                      {
                        goto LABEL_515;
                      }
                      if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(v235, (uint64_t)(v152 + 4)))break; {
                      __double2 v234 = v232 + 1;
                      }
                      double v233 = v232[1];
                      if (!v233) {
                        goto LABEL_519;
                      }
                    }
                    double v236 = (char *)v232;
                  }
                  else
                  {
LABEL_519:
                    double v236 = (char *)operator new(0x130uLL);
                    *((_WORD *)v236 + 16) = *((_WORD *)v152 + 16);
                    *(void *)(v236 + 36) = *(void **)((char *)v152 + 36);
                    *(_OWORD *)(v236 + 56) = *(_OWORD *)(v152 + 7);
                    *((_WORD *)v236 + 36) = *((_WORD *)v152 + 36);
                    *(void *)(v236 + 76) = *(void **)((char *)v152 + 76);
                    *((_OWORD *)v236 + 6) = *(_OWORD *)v146;
                    *((_WORD *)v236 + 56) = *((_WORD *)v152 + 56);
                    *(void *)(v236 + 116) = *(void **)((char *)v152 + 116);
                    *((void *)v236 + 17) = v152[17];
                    *((_WORD *)v236 + 72) = *((_WORD *)v152 + 72);
                    *(void *)(v236 + 148) = *(void **)((char *)v152 + 148);
                    *(_OWORD *)(v236 + 168) = *(_OWORD *)(v152 + 21);
                    v236[184] = *((unsigned char *)v152 + 184);
                    *((void *)v236 + 24) = v152[24];
                    *((_WORD *)v236 + 100) = *((_WORD *)v152 + 100);
                    *(void *)(v236 + 204) = *(void **)((char *)v152 + 204);
                    *((_OWORD *)v236 + 14) = *((_OWORD *)v152 + 14);
                    v236[240] = *((unsigned char *)v152 + 240);
                    *(_OWORD *)(v236 + 248) = *(_OWORD *)(v152 + 31);
                    *((void *)v236 + 33) = v236 + 272;
                    *((void *)v236 + 34) = 0;
                    *((void *)v236 + 36) = 0;
                    *((void *)v236 + 37) = 0;
                    *((void *)v236 + 35) = 0;
                    *(void *)double v236 = 0;
                    *((void *)v236 + 1) = 0;
                    *((void *)v236 + 2) = v232;
                    *__double2 v234 = (uint64_t *)v236;
                    uint64_t v237 = **(void **)(a1 + 736);
                    __double2 v238 = (uint64_t *)v236;
                    if (v237)
                    {
                      *(void *)(a1 + 736) = v237;
                      __double2 v238 = *v234;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 744), v238);
                    ++*(void *)(a1 + 752);
                  }
                  unint64_t v146 = (unint64_t)(v236 + 264);
                  if (v236 + 264 == (char *)__p) {
                    goto LABEL_628;
                  }
                  double v239 = (void **)__p[0];
                  if (!*((void *)v236 + 35)) {
                    goto LABEL_603;
                  }
                  double v240 = (char **)(v236 + 272);
                  uint64_t v241 = *((void *)v236 + 33);
                  uint64_t v242 = *((void *)v236 + 34);
                  *((void *)v236 + 33) = v236 + 272;
                  *(void *)(v242 + 16) = 0;
                  *((void *)v236 + 34) = 0;
                  *((void *)v236 + 35) = 0;
                  double v243 = *(void *)(v241 + 8) ? *(void **)(v241 + 8) : (void *)v241;
                  if (!v243)
                  {
LABEL_603:
                    double v246 = v239;
                    goto LABEL_604;
                  }
                  double v244 = (void *)v243[2];
                  if (v244)
                  {
                    double v245 = (void *)*v244;
                    if ((void *)*v244 == v243)
                    {
                      void *v244 = 0;
                      while (1)
                      {
                        double v296 = (void *)v244[1];
                        if (!v296) {
                          break;
                        }
                        do
                        {
                          double v244 = v296;
                          double v296 = (void *)*v296;
                        }
                        while (v296);
                      }
                    }
                    else
                    {
                      for (v244[1] = 0; v245; double v245 = (void *)v244[1])
                      {
                        do
                        {
                          double v244 = v245;
                          double v245 = (void *)*v245;
                        }
                        while (v245);
                      }
                    }
                  }
                  double v246 = &__p[1];
                  if (v239 == &__p[1])
                  {
                    double v247 = v243;
                    goto LABEL_607;
                  }
                  while (2)
                  {
                    double v247 = v244;
                    long long v248 = *((_OWORD *)v239 + 2);
                    long long v249 = *((_OWORD *)v239 + 4);
                    *((_OWORD *)v243 + 3) = *((_OWORD *)v239 + 3);
                    *((_OWORD *)v243 + 4) = v249;
                    *((_OWORD *)v243 + 2) = v248;
                    long long v250 = *((_OWORD *)v239 + 5);
                    long long v251 = *((_OWORD *)v239 + 6);
                    long long v252 = *((_OWORD *)v239 + 8);
                    *((_OWORD *)v243 + 7) = *((_OWORD *)v239 + 7);
                    *((_OWORD *)v243 + 8) = v252;
                    *((_OWORD *)v243 + 5) = v250;
                    *((_OWORD *)v243 + 6) = v251;
                    long long v253 = *((_OWORD *)v239 + 9);
                    long long v254 = *((_OWORD *)v239 + 10);
                    long long v255 = *((_OWORD *)v239 + 12);
                    *((_OWORD *)v243 + 11) = *((_OWORD *)v239 + 11);
                    *((_OWORD *)v243 + 12) = v255;
                    *((_OWORD *)v243 + 9) = v253;
                    *((_OWORD *)v243 + 10) = v254;
                    long long v256 = *((_OWORD *)v239 + 13);
                    long long v257 = *((_OWORD *)v239 + 14);
                    long long v258 = *((_OWORD *)v239 + 15);
                    v243[32] = v239[32];
                    *((_OWORD *)v243 + 14) = v257;
                    *((_OWORD *)v243 + 15) = v258;
                    *((_OWORD *)v243 + 13) = v256;
                    double v259 = *v240;
                    double v260 = v236 + 272;
                    double v261 = v236 + 272;
                    if (!*v240) {
                      goto LABEL_581;
                    }
                    unint64_t v262 = v243[24];
                    while (2)
                    {
                      while (2)
                      {
                        double v260 = v259;
                        unint64_t v263 = *((void *)v259 + 24);
                        if (v262 == v263)
                        {
                          unint64_t v264 = v243[17];
                          unint64_t v265 = *((void *)v259 + 17);
                          if (v264 == v265)
                          {
                            unsigned int v266 = *((unsigned __int8 *)v243 + 256);
                            unsigned int v267 = v260[256];
                            char v268 = v266 - v267;
                            if (v266 < v267)
                            {
                              int v269 = *((unsigned __int8 *)v243 + 257);
                              if (v269 == BYTE1(*((void *)v260 + 32)))
                              {
                                if (v243[31] > *((void *)v260 + 31) >> (2
                                                                         * (v267 - v266)))
                                  break;
                              }
                              else if ((char)v269 >= (char)BYTE1(*((void *)v260 + 32)))
                              {
                                break;
                              }
                              goto LABEL_537;
                            }
                            if (v266 <= v267)
                            {
                              int v279 = *((unsigned __int8 *)v243 + 257);
                              int v280 = v260[257];
                              if (v279 != v280)
                              {
                                if ((char)v279 >= (char)v280) {
                                  break;
                                }
                                goto LABEL_537;
                              }
                              unint64_t v264 = v243[31];
                            }
                            else
                            {
                              int v276 = v260[257];
                              if (v276 != BYTE1(v243[32]))
                              {
                                if ((char)v276 <= (char)BYTE1(v243[32])) {
                                  break;
                                }
                                goto LABEL_537;
                              }
                              unint64_t v264 = v243[31] >> (2 * v268);
                            }
                            unint64_t v265 = *((void *)v260 + 31);
LABEL_574:
                            if (v264 >= v265) {
                              break;
                            }
                            goto LABEL_537;
                          }
                          unsigned int v272 = *((unsigned __int8 *)v243 + 184);
                          unsigned int v273 = v260[184];
                          if (v272 >= v273)
                          {
                            if (v272 > v273)
                            {
                              unint64_t v277 = v264 >> (3 * (v272 - v273));
                              if (v264 == v277 || v277 >= v265) {
                                break;
                              }
                              goto LABEL_537;
                            }
                            goto LABEL_574;
                          }
                          if (v264 > v265 >> (3 * (v273 - v272))) {
                            break;
                          }
                          goto LABEL_537;
                        }
                        unsigned int v270 = *((unsigned __int8 *)v243 + 240);
                        unsigned int v271 = v259[240];
                        if (v270 < v271)
                        {
                          if (v262 > v263 >> (3 * (v271 - v270))) {
                            break;
                          }
                          goto LABEL_537;
                        }
                        if (v270 <= v271)
                        {
                          if (v262 >= v263) {
                            break;
                          }
                          goto LABEL_537;
                        }
                        unint64_t v274 = v262 >> (3 * (v270 - v271));
                        _CF = v262 == v274 || v274 >= v263;
                        if (!_CF)
                        {
LABEL_537:
                          double v259 = *(char **)v260;
                          double v261 = v260;
                          if (!*(void *)v260) {
                            goto LABEL_581;
                          }
                          continue;
                        }
                        break;
                      }
                      double v259 = (char *)*((void *)v260 + 1);
                      if (v259) {
                        continue;
                      }
                      break;
                    }
                    double v261 = v260 + 8;
LABEL_581:
                    void *v243 = 0;
                    v243[1] = 0;
                    v243[2] = v260;
                    *double v261 = v243;
                    uint64_t v281 = **(void **)v146;
                    if (v281)
                    {
                      *(void *)unint64_t v146 = v281;
                      double v243 = (void *)*v261;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v236 + 34), v243);
                    ++*((void *)v236 + 35);
                    if (v244)
                    {
                      double v244 = (void *)v244[2];
                      if (v244)
                      {
                        double v283 = (void *)*v244;
                        if ((void *)*v244 == v247)
                        {
                          void *v244 = 0;
                          while (1)
                          {
                            double v284 = (void *)v244[1];
                            if (!v284) {
                              break;
                            }
                            do
                            {
                              double v244 = v284;
                              double v284 = (void *)*v284;
                            }
                            while (v284);
                          }
                        }
                        else
                        {
                          for (v244[1] = 0; v283; double v283 = (void *)v244[1])
                          {
                            do
                            {
                              double v244 = v283;
                              double v283 = (void *)*v283;
                            }
                            while (v283);
                          }
                        }
                      }
                    }
                    else
                    {
                      double v244 = 0;
                    }
                    double v282 = (void **)v239[1];
                    if (v282)
                    {
                      do
                      {
                        double v246 = v282;
                        double v282 = (void **)*v282;
                      }
                      while (v282);
                    }
                    else
                    {
                      do
                      {
                        double v246 = (void **)v239[2];
                        _ZF = *v246 == v239;
                        double v239 = v246;
                      }
                      while (!_ZF);
                    }
                    if (v247)
                    {
                      double v243 = v247;
                      double v239 = v246;
                      if (v246 != &__p[1]) {
                        continue;
                      }
                    }
                    break;
                  }
LABEL_607:
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v247);
                  if (v244)
                  {
                    for (n = (void *)v244[2]; n; n = (void *)n[2])
                      double v244 = n;
                    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v244);
                    if (v246 != &__p[1]) {
                      goto LABEL_611;
                    }
                    goto LABEL_628;
                  }
LABEL_604:
                  if (v246 != &__p[1])
                  {
LABEL_611:
                    __double2 v286 = (char **)(v236 + 272);
                    do
                    {
                      double v287 = (char *)operator new(0x108uLL);
                      *((_WORD *)v287 + 16) = *((_WORD *)v246 + 16);
                      *(void *)(v287 + 36) = *(void **)((char *)v246 + 36);
                      *(_OWORD *)(v287 + 56) = *(_OWORD *)(v246 + 7);
                      *((_WORD *)v287 + 36) = *((_WORD *)v246 + 36);
                      *(void *)(v287 + 76) = *(void **)((char *)v246 + 76);
                      *((_OWORD *)v287 + 6) = *((_OWORD *)v246 + 6);
                      *((_WORD *)v287 + 56) = *((_WORD *)v246 + 56);
                      *(void *)(v287 + 116) = *(void **)((char *)v246 + 116);
                      *((void *)v287 + 17) = v246[17];
                      *((_WORD *)v287 + 72) = *((_WORD *)v246 + 72);
                      *(void *)(v287 + 148) = *(void **)((char *)v246 + 148);
                      *(_OWORD *)(v287 + 168) = *(_OWORD *)(v246 + 21);
                      v287[184] = *((unsigned char *)v246 + 184);
                      *((void *)v287 + 24) = v246[24];
                      *((_WORD *)v287 + 100) = *((_WORD *)v246 + 100);
                      *(void *)(v287 + 204) = *(void **)((char *)v246 + 204);
                      *((_OWORD *)v287 + 14) = *((_OWORD *)v246 + 14);
                      v287[240] = *((unsigned char *)v246 + 240);
                      *(_OWORD *)(v287 + 248) = *(_OWORD *)(v246 + 31);
                      double v288 = *v286;
                      __double2 v289 = (char **)(v236 + 272);
                      double v290 = (char **)(v236 + 272);
                      if (*v286)
                      {
                        do
                        {
                          while (1)
                          {
                            __double2 v289 = (char **)v288;
                            if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v287 + 32), (uint64_t)(v288 + 32)))break; {
                            double v288 = *v289;
                            }
                            double v290 = v289;
                            if (!*v289) {
                              goto LABEL_620;
                            }
                          }
                          double v288 = v289[1];
                        }
                        while (v288);
                        double v290 = v289 + 1;
                      }
LABEL_620:
                      *(void *)double v287 = 0;
                      *((void *)v287 + 1) = 0;
                      *((void *)v287 + 2) = v289;
                      uint64_t *v290 = v287;
                      uint64_t v291 = **(void **)v146;
                      if (v291)
                      {
                        *(void *)unint64_t v146 = v291;
                        double v287 = *v290;
                      }
                      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v236 + 34), (uint64_t *)v287);
                      ++*((void *)v236 + 35);
                      double v292 = (void **)v246[1];
                      if (v292)
                      {
                        do
                        {
                          double v293 = v292;
                          double v292 = (void **)*v292;
                        }
                        while (v292);
                      }
                      else
                      {
                        do
                        {
                          double v293 = (void **)v246[2];
                          _ZF = *v293 == v246;
                          double v246 = v293;
                        }
                        while (!_ZF);
                      }
                      double v246 = v293;
                    }
                    while (v293 != &__p[1]);
                  }
LABEL_628:
                  *((_OWORD *)v236 + 18) = *(_OWORD *)&v491[8];
LABEL_629:
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((void *)__p[1]);
LABEL_630:
                  double v294 = v152[1];
                  if (v294)
                  {
                    do
                    {
                      double v295 = (void **)v294;
                      double v294 = (void *)*v294;
                    }
                    while (v294);
                  }
                  else
                  {
                    do
                    {
                      double v295 = (void **)v152[2];
                      _ZF = *v295 == v152;
                      double v152 = v295;
                    }
                    while (!_ZF);
                  }
                  double v152 = v295;
                  if (v295 != v478) {
                    goto LABEL_413;
                  }
LABEL_317:
                  unint64_t v53 = (unint64_t)v457;
                  if (*(unsigned char *)(a1 + 808))
                  {
                    *(_OWORD *)std::string __p = 0u;
                    *(_OWORD *)uint64_t v491 = 0u;
                    *(_DWORD *)&v491[16] = 1065353216;
                    uint64_t v153 = *(void *)(a1 + 168);
                    uint64_t v154 = *(void *)(v153 + 80);
                    uint64_t v155 = *(void *)(v153 + 88);
                    if (v154 != v155)
                    {
                      while (*(_WORD *)v154 != 75)
                      {
                        v154 += 16;
                        if (v154 == v155) {
                          goto LABEL_643;
                        }
                      }
                    }
                    if (v154 == v155) {
LABEL_643:
                    }
                      uint64_t v297 = 0;
                    else {
                      uint64_t v297 = *(void *)(v154 + 8);
                    }
                    v483[0] = 0;
                    v483[1] = 0;
                    int v482 = v483;
                    __double2 v298 = *(double **)(a1 + 736);
                    if (v298 == v447)
                    {
LABEL_645:
                      unsigned __int16 v299 = *(_WORD *)(a1 + 384);
                      double v300 = *(unsigned __int8 **)geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)(v53 + 24), v299);
                      unint64_t v146 = *((void *)geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[]((unsigned __int16 **)(v53 + 24), v299)+ 1);
                      int8x8_t v301 = (int8x8_t)__p[1];
                      if (v300 != (unsigned __int8 *)v146 && __p[1] != 0)
                      {
                        while (1)
                        {
                          if (v301)
                          {
                            unint64_t v319 = *((void *)v300 + 13);
                            uint8x8_t v320 = (uint8x8_t)vcnt_s8(v301);
                            v320.i16[0] = vaddlv_u8(v320);
                            if (v320.u32[0] > 1uLL)
                            {
                              unint64_t v321 = *((void *)v300 + 13);
                              if (v319 >= *(void *)&v301) {
                                unint64_t v321 = v319 % *(void *)&v301;
                              }
                            }
                            else
                            {
                              unint64_t v321 = (*(void *)&v301 - 1) & v319;
                            }
                            double v322 = (uint64_t ***)*((void *)__p[0] + v321);
                            if (v322)
                            {
                              double v323 = *v322;
                              if (*v322)
                              {
                                if (v320.u32[0] < 2uLL)
                                {
                                  uint64_t v324 = *(void *)&v301 - 1;
                                  while (1)
                                  {
                                    long double v329 = v323[1];
                                    if (v329 == (uint64_t *)v319)
                                    {
                                      if (*((unsigned __int8 *)v323 + 16) == *v300
                                        && *((unsigned __int16 *)v323 + 12) == *((unsigned __int16 *)v300 + 4)
                                        && v323[12] == *((uint64_t **)v300 + 10))
                                      {
                                        double v330 = v323[4];
                                        size_t v331 = (char *)v323[5] - (char *)v330;
                                        double v332 = (const void *)*((void *)v300 + 2);
                                        if (v331 == *((void *)v300 + 3) - (void)v332 && !memcmp(v330, v332, v331)) {
                                          goto LABEL_720;
                                        }
                                      }
                                    }
                                    else if (((unint64_t)v329 & v324) != v321)
                                    {
                                      goto LABEL_729;
                                    }
                                    double v323 = (uint64_t **)*v323;
                                    if (!v323) {
                                      goto LABEL_729;
                                    }
                                  }
                                }
                                do
                                {
                                  unint64_t v325 = (unint64_t)v323[1];
                                  if (v325 == v319)
                                  {
                                    if (*((unsigned __int8 *)v323 + 16) == *v300
                                      && *((unsigned __int16 *)v323 + 12) == *((unsigned __int16 *)v300 + 4)
                                      && v323[12] == *((uint64_t **)v300 + 10))
                                    {
                                      double v326 = v323[4];
                                      size_t v327 = (char *)v323[5] - (char *)v326;
                                      double v328 = (const void *)*((void *)v300 + 2);
                                      if (v327 == *((void *)v300 + 3) - (void)v328 && !memcmp(v326, v328, v327))
                                      {
LABEL_720:
                                        double v333 = v323[16];
                                        if (v333 && !*((void *)v300 + 14) && *((_DWORD *)v300 + 32) != 3)
                                        {
                                          double v334 = v323[17];
                                          if (v334) {
                                            atomic_fetch_add_explicit(v334 + 1, 1uLL, memory_order_relaxed);
                                          }
                                          double v335 = (std::__shared_weak_count *)*((void *)v300 + 15);
                                          *((void *)v300 + 14) = v333;
                                          *((void *)v300 + 15) = v334;
                                          if (v335 && !atomic_fetch_add(&v335->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                          {
                                            ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
                                            std::__shared_weak_count::__release_weak(v335);
                                          }
                                          *((_DWORD *)v300 + 32) = 3;
                                        }
                                        break;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    if (v325 >= *(void *)&v301) {
                                      v325 %= *(void *)&v301;
                                    }
                                    if (v325 != v321) {
                                      break;
                                    }
                                  }
                                  double v323 = (uint64_t **)*v323;
                                }
                                while (v323);
                              }
                            }
                          }
LABEL_729:
                          v300 += 144;
                          if (v300 == (unsigned __int8 *)v146) {
                            break;
                          }
                          int8x8_t v301 = (int8x8_t)__p[1];
                        }
                      }
                      std::__tree<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::less<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::allocator<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(v483[0]);
                      double v303 = *(void **)v491;
                      unint64_t v53 = (unint64_t)v457;
                      if (!*(void *)v491)
                      {
LABEL_651:
                        double v304 = __p[0];
                        __p[0] = 0;
                        if (v304) {
                          operator delete(v304);
                        }
                        goto LABEL_653;
                      }
                      while (2)
                      {
                        double v307 = *(void **)v303;
                        int v308 = (std::__shared_weak_count *)*((void *)v303 + 17);
                        if (v308 && !atomic_fetch_add(&v308->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                          std::__shared_weak_count::__release_weak(v308);
                          if (*((unsigned char *)v303 + 112)) {
LABEL_661:
                          }
                            *((unsigned char *)v303 + 112) = 0;
                        }
                        else if (*((unsigned char *)v303 + 112))
                        {
                          goto LABEL_661;
                        }
                        double v309 = (void *)*((void *)v303 + 4);
                        if (v309 != *((void **)v303 + 6)) {
                          free(v309);
                        }
                        operator delete(v303);
                        double v303 = v307;
                        if (!v307) {
                          goto LABEL_651;
                        }
                        continue;
                      }
                    }
                    while (2)
                    {
                      LOBYTE(v481) = 0;
                      float v310 = fmax((v10 - v298[37]) * 10.0, 0.0);
                      if (v310 >= 1.0)
                      {
                        LOBYTE(v481) = 1;
                      }
                      else
                      {
                        v311.f32[0] = v310 + v310;
                        v311.f32[1] = 2.0 - v311.f32[0];
                        *((float32x2_t *)v298 + 36) = vminnm_f32(vmaxnm_f32(v311, 0), _D14);
                        *(void *)&long long v471 = &v481;
                        *((void *)&v471 + 1) = __p;
                        uint64_t v472 = v297;
                        *(void *)&long long v473 = v53;
                        md::FlyoverCompleteTileDataLogic::updateTransitions(gdc::LayerDataCollector *,std::map<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<std::pair<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const,md::FlyoverCompleteTileDataLogic::TransitionInfo>>> &,double)::$_0::operator()((uint64_t)&v471, (uint64_t)(v298 + 4));
                        double v312 = (double *)*((void *)v298 + 33);
                        if (v312 != v298 + 34)
                        {
                          do
                          {
                            md::FlyoverCompleteTileDataLogic::updateTransitions(gdc::LayerDataCollector *,std::map<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<std::pair<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const,md::FlyoverCompleteTileDataLogic::TransitionInfo>>> &,double)::$_0::operator()((uint64_t)&v471, (uint64_t)(v312 + 4));
                            double v315 = (double *)*((void *)v312 + 1);
                            if (v315)
                            {
                              do
                              {
                                double v316 = v315;
                                double v315 = *(double **)v315;
                              }
                              while (v315);
                            }
                            else
                            {
                              do
                              {
                                double v316 = (double *)*((void *)v312 + 2);
                                _ZF = *(void *)v316 == (void)v312;
                                double v312 = v316;
                              }
                              while (!_ZF);
                            }
                            double v312 = v316;
                          }
                          while (v316 != v298 + 34);
                        }
                        unint64_t v53 = (unint64_t)v457;
                        if (!(_BYTE)v481)
                        {
                          double v313 = (double *)*((void *)v298 + 1);
                          if (v313)
                          {
                            do
                            {
                              double v314 = v313;
                              double v313 = *(double **)v313;
                            }
                            while (v313);
                          }
                          else
                          {
                            do
                            {
                              double v314 = (double *)*((void *)v298 + 2);
                              _ZF = *(void *)v314 == (void)v298;
                              __double2 v298 = v314;
                            }
                            while (!_ZF);
                          }
                          goto LABEL_667;
                        }
                      }
                      double v317 = (double *)*((void *)v298 + 1);
                      double v318 = v298;
                      if (v317)
                      {
                        do
                        {
                          double v314 = v317;
                          double v317 = *(double **)v317;
                        }
                        while (v317);
                      }
                      else
                      {
                        do
                        {
                          double v314 = (double *)*((void *)v318 + 2);
                          _ZF = *(void *)v314 == (void)v318;
                          double v318 = v314;
                        }
                        while (!_ZF);
                      }
                      if (*(double **)(a1 + 736) == v298) {
                        *(void *)(a1 + 736) = v314;
                      }
                      --*(void *)(a1 + 752);
                      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 744), (uint64_t *)v298);
                      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)v298 + 34));
                      operator delete(v298);
LABEL_667:
                      __double2 v298 = v314;
                      if (v314 == v447) {
                        goto LABEL_645;
                      }
                      continue;
                    }
                  }
LABEL_653:
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v475);
                  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v478[0]);
LABEL_654:
                  unint64_t v305 = (unint64_t)v466[1];
                  if (v466[1])
                  {
                    uint8x8_t v306 = (uint8x8_t)vcnt_s8((int8x8_t)v466[1]);
                    v306.i16[0] = vaddlv_u8(v306);
                    if (v306.u32[0] > 1uLL)
                    {
                      unint64_t v146 = v446;
                      if ((void *)v446 >= v466[1]) {
                        unint64_t v146 = v446 % (unint64_t)v466[1];
                      }
                    }
                    else
                    {
                      unint64_t v146 = v446 & ((unint64_t)v466[1] - 1);
                    }
                    double v336 = (void *)*((void *)v466[0] + v146);
                    if (v336)
                    {
                      double v337 = (void *)*v336;
                      if (v337)
                      {
                        if (v306.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            unint64_t v339 = v337[1];
                            if (v339 == v446)
                            {
                              if (v337[2] == v53) {
                                goto LABEL_807;
                              }
                            }
                            else if ((v339 & ((unint64_t)v466[1] - 1)) != v146)
                            {
                              goto LABEL_748;
                            }
                            double v337 = (void *)*v337;
                            if (!v337) {
                              goto LABEL_748;
                            }
                          }
                        }
                        do
                        {
                          unint64_t v338 = v337[1];
                          if (v338 == v446)
                          {
                            if (v337[2] == v53) {
                              goto LABEL_807;
                            }
                          }
                          else
                          {
                            if ((void *)v338 >= v466[1]) {
                              v338 %= (unint64_t)v466[1];
                            }
                            if (v338 != v146) {
                              break;
                            }
                          }
                          double v337 = (void *)*v337;
                        }
                        while (v337);
                      }
                    }
                  }
LABEL_748:
                  double v340 = operator new(0x18uLL);
                  *double v340 = 0;
                  v340[1] = v446;
                  v340[2] = v53;
                  float v341 = (float)((unint64_t)v467[1] + 1);
                  if (!v305 || (float)(v468 * (float)v305) < v341)
                  {
                    BOOL v342 = (v305 & (v305 - 1)) != 0;
                    if (v305 < 3) {
                      BOOL v342 = 1;
                    }
                    unint64_t v343 = v342 | (2 * v305);
                    unint64_t v344 = vcvtps_u32_f32(v341 / v468);
                    if (v343 <= v344) {
                      size_t v345 = v344;
                    }
                    else {
                      size_t v345 = v343;
                    }
                    if (v345 == 1)
                    {
                      size_t v345 = 2;
                    }
                    else if ((v345 & (v345 - 1)) != 0)
                    {
                      size_t v345 = std::__next_prime(v345);
                      unint64_t v305 = (unint64_t)v466[1];
                    }
                    if (v345 > v305)
                    {
LABEL_760:
                      if (v345 >> 61) {
LABEL_953:
                      }
                        std::__throw_bad_array_new_length[abi:nn180100]();
                      double v346 = operator new(8 * v345);
                      double v347 = v466[0];
                      v466[0] = v346;
                      if (v347) {
                        operator delete(v347);
                      }
                      uint64_t v348 = 0;
                      v466[1] = (void *)v345;
                      do
                        *((void *)v466[0] + v348++) = 0;
                      while (v345 != v348);
                      char v349 = (void **)v467[0];
                      if (!v467[0]) {
                        goto LABEL_784;
                      }
                      size_t v350 = *((void *)v467[0] + 1);
                      size_t v351 = v345 - 1;
                      if ((v345 & (v345 - 1)) == 0)
                      {
                        size_t v352 = v350 & v351;
                        *((void *)v466[0] + v352) = v467;
                        for (iuint64_t i = *v349; *v349; iuint64_t i = *v349)
                        {
                          size_t v354 = ii[1] & v351;
                          if (v354 == v352)
                          {
                            char v349 = (void **)ii;
                          }
                          else if (*((void *)v466[0] + v354))
                          {
                            char *v349 = (void *)*ii;
                            uint64_t v355 = 8 * v354;
                            *iuint64_t i = **(void **)((char *)v466[0] + v355);
                            **(void **)((char *)v466[0] + v355) = ii;
                          }
                          else
                          {
                            *((void *)v466[0] + v354) = v349;
                            char v349 = (void **)ii;
                            size_t v352 = v354;
                          }
                        }
                        goto LABEL_784;
                      }
                      if (v350 >= v345) {
                        v350 %= v345;
                      }
                      *((void *)v466[0] + v350) = v467;
                      double v359 = *v349;
                      if (!*v349)
                      {
LABEL_784:
                        unint64_t v305 = v345;
                        goto LABEL_785;
                      }
                      while (2)
                      {
                        size_t v361 = v359[1];
                        if (v361 >= v345) {
                          v361 %= v345;
                        }
                        if (v361 != v350)
                        {
                          if (!*((void *)v466[0] + v361))
                          {
                            *((void *)v466[0] + v361) = v349;
LABEL_789:
                            char v349 = (void **)v359;
                            double v359 = (void *)*v359;
                            size_t v350 = v361;
                            if (!v359) {
                              goto LABEL_784;
                            }
                            continue;
                          }
                          char *v349 = (void *)*v359;
                          uint64_t v360 = 8 * v361;
                          void *v359 = **(void **)((char *)v466[0] + v360);
                          **(void **)((char *)v466[0] + v360) = v359;
                          double v359 = v349;
                        }
                        break;
                      }
                      size_t v361 = v350;
                      goto LABEL_789;
                    }
                    if (v345 < v305)
                    {
                      unint64_t v356 = vcvtps_u32_f32((float)(unint64_t)v467[1] / v468);
                      if (v305 < 3
                        || (uint8x8_t v357 = (uint8x8_t)vcnt_s8((int8x8_t)v305), v357.i16[0] = vaddlv_u8(v357), v357.u32[0] > 1uLL))
                      {
                        unint64_t v356 = std::__next_prime(v356);
                      }
                      else
                      {
                        uint64_t v358 = 1 << -(char)__clz(v356 - 1);
                        if (v356 >= 2) {
                          unint64_t v356 = v358;
                        }
                      }
                      if (v345 <= v356) {
                        size_t v345 = v356;
                      }
                      if (v345 >= v305)
                      {
                        unint64_t v305 = (unint64_t)v466[1];
                      }
                      else
                      {
                        if (v345) {
                          goto LABEL_760;
                        }
                        double v370 = v466[0];
                        v466[0] = 0;
                        if (v370) {
                          operator delete(v370);
                        }
                        unint64_t v305 = 0;
                        v466[1] = 0;
                      }
                    }
LABEL_785:
                    if ((v305 & (v305 - 1)) != 0)
                    {
                      unint64_t v146 = v446;
                      if (v446 >= v305) {
                        unint64_t v146 = v446 % v305;
                      }
                    }
                    else
                    {
                      unint64_t v146 = (v305 - 1) & v446;
                    }
                  }
                  char v362 = v466[0];
                  double v363 = (void *)*((void *)v466[0] + v146);
                  if (v363)
                  {
                    *double v340 = *v363;
                    goto LABEL_805;
                  }
                  *double v340 = v467[0];
                  v467[0] = v340;
                  v362[v146] = v467;
                  if (*v340)
                  {
                    unint64_t v364 = *(void *)(*v340 + 8);
                    if ((v305 & (v305 - 1)) != 0)
                    {
                      if (v364 >= v305) {
                        v364 %= v305;
                      }
                    }
                    else
                    {
                      v364 &= v305 - 1;
                    }
                    double v363 = (char *)v466[0] + 8 * v364;
LABEL_805:
                    *double v363 = v340;
                  }
                  ++v467[1];
LABEL_807:
                  double v365 = v462[0];
                  if (!v462[0])
                  {
LABEL_808:
                    double v366 = v461[0];
                    v461[0] = 0;
                    if (v366) {
                      operator delete(v366);
                    }
                    uint64_t v64 = v442;
                    uint64_t v59 = v443;
                    uint64_t v60 = v438;
                    uint64_t v65 = *(void *)(v441 + 8);
                    if (v65 == v442)
                    {
LABEL_101:
                      v59 += 32;
                      if (v59 != v60) {
                        goto LABEL_102;
                      }
LABEL_830:
                      uint64_t v371 = v469;
                      if (!v469) {
                        goto LABEL_840;
                      }
                      double v372 = *(unsigned __int8 **)&v445[4]._xIdx;
                      if (!v372) {
                        goto LABEL_840;
                      }
                      do
                      {
                        double v373 = *v444;
                        double v374 = v444[1];
                        if (*v444 != v374)
                        {
                          do
                            md::SceneStateManager::setHasTileSelectionDependency(v371, *v373++, *(unsigned __int16 *)(a1 + 384), v372 + 16);
                          while (v373 != v374);
                        }
                        double v375 = v444[3];
                        for (juint64_t j = v444[4]; v375 != jj; ++v375)
                          md::SceneStateManager::setHasTileSelectionDependency(v371, *v375, *(unsigned __int16 *)(a1 + 384), v372 + 16);
                        double v372 = *(unsigned __int8 **)v372;
                      }
                      while (v372);
                      double v377 = *(unsigned __int8 **)&v445[4]._xIdx;
                      if (!v377)
                      {
LABEL_840:
                        double v378 = (unsigned __int8 **)(a1 + 672);
                        double v379 = (unsigned __int8 *)(a1 + 680);
                        uint64_t v380 = *(void *)(a1 + 680);
                        long long v381 = v464;
                        *(void *)&long long v464 = *(void *)(a1 + 672);
                        *((void *)&v464 + 1) = v380;
                        *(_OWORD *)(a1 + 672) = v381;
                        uint64_t v382 = v465;
                        uint64_t v465 = *(void *)(a1 + 688);
                        uint64_t v383 = v465;
                        *(void *)(a1 + 688) = v382;
                        float64_t v384 = (long long *)(v380 + 16);
                        if (!v383) {
                          float64_t v384 = &v464;
                        }
                        *(void *)float64_t v384 = (char *)&v464 + 8;
                        if (v382) {
                          double v385 = (unsigned __int8 **)(*(void *)(a1 + 680) + 16);
                        }
                        else {
                          double v385 = (unsigned __int8 **)(a1 + 672);
                        }
                        *double v385 = v379;
                        double v386 = (void *)(a1 + 304);
                        if (*(void *)(a1 + 328))
                        {
                          double v387 = *(void **)(a1 + 320);
                          if (v387)
                          {
                            do
                            {
                              double v412 = (void *)*v387;
                              double v413 = (void *)v387[12];
                              if (v413)
                              {
                                v387[13] = v413;
                                operator delete(v413);
                              }
                              operator delete(v387);
                              double v387 = v412;
                            }
                            while (v412);
                          }
                          *(void *)(a1 + 320) = 0;
                          uint64_t v388 = *(void *)(a1 + 312);
                          if (v388)
                          {
                            for (uint64_t kk = 0; kk != v388; ++kk)
                              *(void *)(*v386 + 8 * kk) = 0;
                          }
                          *(void *)(a1 + 328) = 0;
                        }
                        double v390 = (void *)(a1 + 344);
                        if (*(void *)(a1 + 368))
                        {
                          double v391 = *(void **)(a1 + 360);
                          if (v391)
                          {
                            do
                            {
                              double v414 = (void *)*v391;
                              double v415 = (void *)v391[11];
                              if (v415)
                              {
                                v391[12] = v415;
                                operator delete(v415);
                              }
                              long double v416 = (void *)v391[8];
                              if (v416)
                              {
                                v391[9] = v416;
                                operator delete(v416);
                              }
                              operator delete(v391);
                              double v391 = v414;
                            }
                            while (v414);
                          }
                          *(void *)(a1 + 360) = 0;
                          uint64_t v392 = *(void *)(a1 + 352);
                          if (v392)
                          {
                            for (uint64_t mm = 0; mm != v392; ++mm)
                              *(void *)(*v390 + 8 * mm) = 0;
                          }
                          *(void *)(a1 + 368) = 0;
                        }
                        double v394 = (void *)(a1 + 184);
                        if (*(void *)(a1 + 208))
                        {
                          double v395 = *(void **)(a1 + 200);
                          if (v395)
                          {
                            do
                            {
                              double v417 = (void *)*v395;
                              float64x2_t v418 = (void *)v395[8];
                              if (v418)
                              {
                                v395[9] = v418;
                                operator delete(v418);
                              }
                              operator delete(v395);
                              double v395 = v417;
                            }
                            while (v417);
                          }
                          *(void *)(a1 + 200) = 0;
                          uint64_t v396 = *(void *)(a1 + 192);
                          if (v396)
                          {
                            for (uint64_t nn = 0; nn != v396; ++nn)
                              *(void *)(*v394 + 8 * nn) = 0;
                          }
                          *(void *)(a1 + 208) = 0;
                        }
                        *(void *)uint64_t v491 = 0;
                        __p[1] = 0;
                        __p[0] = &__p[1];
                        *(void *)&long long v471 = a1;
                        *((void *)&v471 + 1) = __p;
                        if (*(unsigned char *)(a1 + 808))
                        {
                          double v398 = *(void **)(a1 + 736);
                          if (v398 != (void *)(a1 + 744))
                          {
                            do
                            {
                              md::FlyoverCompleteTileDataLogic::buildOctileInstances(void)::$_0::operator()((uint64_t)&v471, (unsigned __int8 *)v398 + 32, 1, *((float *)v398 + 72));
                              float64x2_t v419 = (unsigned __int8 *)v398[33];
                              if (v419 != (unsigned __int8 *)(v398 + 34))
                              {
                                do
                                {
                                  md::FlyoverCompleteTileDataLogic::buildOctileInstances(void)::$_0::operator()((uint64_t)&v471, v419 + 32, 1, *((float *)v398 + 73));
                                  float64x2_t v422 = (unsigned __int8 *)*((void *)v419 + 1);
                                  if (v422)
                                  {
                                    do
                                    {
                                      double v423 = v422;
                                      float64x2_t v422 = *(unsigned __int8 **)v422;
                                    }
                                    while (v422);
                                  }
                                  else
                                  {
                                    do
                                    {
                                      double v423 = (unsigned __int8 *)*((void *)v419 + 2);
                                      _ZF = *(void *)v423 == (void)v419;
                                      float64x2_t v419 = v423;
                                    }
                                    while (!_ZF);
                                  }
                                  float64x2_t v419 = v423;
                                }
                                while (v423 != (unsigned __int8 *)(v398 + 34));
                              }
                              float64x2_t v420 = (void *)v398[1];
                              if (v420)
                              {
                                do
                                {
                                  float64x2_t v421 = v420;
                                  float64x2_t v420 = (void *)*v420;
                                }
                                while (v420);
                              }
                              else
                              {
                                do
                                {
                                  float64x2_t v421 = (void *)v398[2];
                                  _ZF = *v421 == (void)v398;
                                  double v398 = v421;
                                }
                                while (!_ZF);
                              }
                              double v398 = v421;
                            }
                            while (v421 != (void *)(a1 + 744));
                          }
                        }
                        double v399 = *v378;
                        if (*v378 != v379)
                        {
                          do
                          {
                            md::FlyoverCompleteTileDataLogic::buildOctileInstances(void)::$_0::operator()((uint64_t)&v471, v399 + 32, 0, 1.0);
                            double v410 = (unsigned __int8 *)*((void *)v399 + 1);
                            if (v410)
                            {
                              do
                              {
                                double v411 = v410;
                                double v410 = *(unsigned __int8 **)v410;
                              }
                              while (v410);
                            }
                            else
                            {
                              do
                              {
                                double v411 = (unsigned __int8 *)*((void *)v399 + 2);
                                _ZF = *(void *)v411 == (void)v399;
                                double v399 = v411;
                              }
                              while (!_ZF);
                            }
                            double v399 = v411;
                          }
                          while (v411 != v379);
                        }
                        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((void *)__p[1]);
                        *(void *)(a1 + 288) = a1 + 224;
                        if (*(void *)(a1 + 616))
                        {
                          double v400 = *(void **)(a1 + 608);
                          if (v400)
                          {
                            do
                            {
                              double v401 = (void *)*v400;
                              std::__destroy_at[abi:nn180100]<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>,0>(v400 + 2);
                              operator delete(v400);
                              double v400 = v401;
                            }
                            while (v401);
                          }
                          *(void *)(a1 + 608) = 0;
                          uint64_t v402 = *(void *)(a1 + 600);
                          if (v402)
                          {
                            for (uint64_t i1 = 0; i1 != v402; ++i1)
                              *(void *)(*v435 + 8 * i1) = 0;
                          }
                          *(void *)(a1 + 616) = 0;
                        }
                        *a4 = v394;
                        a4[1] = a1 + 224;
                        a4[2] = v386;
                        a4[3] = v390;
                        a4[4] = v436;
                        if (*(void *)(a1 + 752) || *(unsigned char *)(a1 + 760))
                        {
                          *(unsigned char *)(a1 + 760) = 0;
                          uint64_t v404 = **(void **)(a1 + 472);
                          if (v404)
                          {
                            LOBYTE(__p[0]) = 8;
                            md::MapEngine::setNeedsTick(v404, __p);
                          }
                        }
                        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)&v464 + 1));
                        double v405 = v467[0];
                        if (v467[0])
                        {
                          do
                          {
                            double v406 = (void *)*v405;
                            operator delete(v405);
                            double v405 = v406;
                          }
                          while (v406);
                        }
                        double v407 = v466[0];
                        v466[0] = 0;
                        if (v407) {
                          operator delete(v407);
                        }
                        double v408 = v470;
                        if (v470 && !atomic_fetch_add(&v470->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
                          std::__shared_weak_count::__release_weak(v408);
                        }
                        goto LABEL_884;
                      }
                      while (2)
                      {
                        md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)__p, v445, v377 + 16, 0, 0);
                        double v424 = *(unsigned __int8 **)v377;
                        if (v492)
                        {
                          int8x8_t v425 = *(int8x8_t *)&v445[4]._type;
                          unint64_t v426 = *((void *)v377 + 1);
                          uint8x8_t v427 = (uint8x8_t)vcnt_s8(v425);
                          v427.i16[0] = vaddlv_u8(v427);
                          if (v427.u32[0] > 1uLL)
                          {
                            if (v426 >= *(void *)&v425) {
                              v426 %= *(void *)&v425;
                            }
                          }
                          else
                          {
                            v426 &= *(void *)&v425 - 1;
                          }
                          unint64_t hash = v445[3]._hash;
                          double v429 = *(unsigned __int8 **)(hash + 8 * v426);
                          do
                          {
                            double v430 = (int *)v429;
                            double v429 = *(unsigned __int8 **)v429;
                          }
                          while (v429 != v377);
                          if (v430 == &v445[4]._xIdx) {
                            goto LABEL_959;
                          }
                          unint64_t v431 = *((void *)v430 + 1);
                          if (v427.u32[0] > 1uLL)
                          {
                            if (v431 >= *(void *)&v425) {
                              v431 %= *(void *)&v425;
                            }
                          }
                          else
                          {
                            v431 &= *(void *)&v425 - 1;
                          }
                          double v432 = *(unsigned __int8 **)v377;
                          if (v431 == v426)
                          {
LABEL_943:
                            if (v432) {
                              goto LABEL_944;
                            }
                          }
                          else
                          {
LABEL_959:
                            if (!v424) {
                              goto LABEL_942;
                            }
                            unint64_t v433 = *((void *)v424 + 1);
                            if (v427.u32[0] > 1uLL)
                            {
                              if (v433 >= *(void *)&v425) {
                                v433 %= *(void *)&v425;
                              }
                            }
                            else
                            {
                              v433 &= *(void *)&v425 - 1;
                            }
                            double v432 = *(unsigned __int8 **)v377;
                            if (v433 != v426)
                            {
LABEL_942:
                              *(void *)(hash + 8 * v426) = 0;
                              double v432 = *(unsigned __int8 **)v377;
                              goto LABEL_943;
                            }
LABEL_944:
                            unint64_t v434 = *((void *)v432 + 1);
                            if (v427.u32[0] > 1uLL)
                            {
                              if (v434 >= *(void *)&v425) {
                                v434 %= *(void *)&v425;
                              }
                            }
                            else
                            {
                              v434 &= *(void *)&v425 - 1;
                            }
                            if (v434 != v426)
                            {
                              *(void *)(v445[3]._hash + 8 * v434) = v430;
                              double v432 = *(unsigned __int8 **)v377;
                            }
                          }
                          *(void *)double v430 = v432;
                          --v445[4]._hash;
                          operator delete(v377);
                        }
                        double v377 = v424;
                        if (!v424) {
                          goto LABEL_840;
                        }
                        continue;
                      }
                    }
                    goto LABEL_105;
                  }
                  while (2)
                  {
                    uint64_t v367 = *(void **)v365;
                    int8x16_t v368 = (std::__shared_weak_count *)*((void *)v365 + 30);
                    if (v368 && !atomic_fetch_add(&v368->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                      std::__shared_weak_count::__release_weak(v368);
                      if (*((unsigned char *)v365 + 192)) {
LABEL_816:
                      }
                        *((unsigned char *)v365 + 192) = 0;
                    }
                    else if (*((unsigned char *)v365 + 192))
                    {
                      goto LABEL_816;
                    }
                    double v369 = (void *)*((void *)v365 + 14);
                    if (v369 != *((void **)v365 + 16)) {
                      free(v369);
                    }
                    operator delete(v365);
                    double v365 = v367;
                    if (!v367) {
                      goto LABEL_808;
                    }
                    continue;
                  }
                }
              }
              double v227 = v195[1];
              if (v227)
              {
                do
                {
                  double v228 = (void **)v227;
                  double v227 = (void *)*v227;
                }
                while (v227);
              }
              else
              {
                do
                {
                  double v228 = (void **)v195[2];
                  _ZF = *v228 == v195;
                  double v195 = v228;
                }
                while (!_ZF);
              }
              double v195 = v228;
              if (v228 == &v475)
              {
                double v220 = &v475;
                if (v207 == &v475) {
                  goto LABEL_629;
                }
                goto LABEL_502;
              }
            }
          }
          double v200 = *v195;
          double v197 = v195;
          if (*v195)
          {
            do
            {
              double v197 = (void **)v200;
              double v200 = (void *)v200[1];
            }
            while (v200);
          }
          else
          {
            do
            {
              double v213 = v197;
              double v197 = (void **)v197[2];
            }
            while (*v197 == v213);
          }
LABEL_431:
          if (v197 == &v475 || (int v202 = *((unsigned __int8 *)v152 + 72), *((unsigned __int8 *)v197 + 72) != v202))
          {
            long double v207 = &v475;
            goto LABEL_457;
          }
          unsigned int v203 = *((unsigned __int8 *)v152 + 73);
          int v204 = *((_DWORD *)v152 + 19);
          int v205 = *((_DWORD *)v152 + 20);
          unsigned int v206 = *((_DWORD *)v152 + 27);
          long double v207 = &v475;
          do
          {
            long double v208 = v197;
            unsigned int v209 = *((unsigned __int8 *)v197 + 73);
            if (v209 >= v203)
            {
              if (v209 != v203
                || *((_DWORD *)v208 + 19) != v204
                || *((_DWORD *)v208 + 20) != v205
                || *((_DWORD *)v208 + 27) != v206)
              {
                goto LABEL_456;
              }
            }
            else
            {
              char v210 = v203 - v209;
              if (*((_DWORD *)v208 + 19) != v204 >> v210
                || *((_DWORD *)v208 + 20) != v205 >> v210
                || *((_DWORD *)v208 + 27) != v206 >> v210)
              {
                goto LABEL_456;
              }
            }
            if (v208 == v474)
            {
              long double v207 = v474;
              if (v474 != &v475) {
                goto LABEL_475;
              }
              goto LABEL_457;
            }
            uint8x8_t v211 = *v208;
            double v212 = v208;
            if (*v208)
            {
              do
              {
                double v197 = (void **)v211;
                uint8x8_t v211 = (void *)v211[1];
              }
              while (v211);
            }
            else
            {
              do
              {
                double v197 = (void **)v212[2];
                _ZF = *v197 == v212;
                double v212 = v197;
              }
              while (_ZF);
            }
            if (v197 == &v475) {
              break;
            }
            long double v207 = v208;
          }
          while (*((unsigned __int8 *)v197 + 72) == v202);
          long double v207 = v208;
          if (v208 != &v475) {
            goto LABEL_475;
          }
LABEL_457:
          if (v195 != &v475)
          {
            if (*((unsigned __int8 *)v152 + 72) != *((unsigned __int8 *)v195 + 72)) {
              goto LABEL_629;
            }
            unsigned int v214 = *((unsigned __int8 *)v152 + 73);
            unsigned int v215 = *((unsigned __int8 *)v195 + 73);
            _CF = v215 >= v214;
            unsigned int v216 = v215 - v214;
            if (v216 != 0 && _CF)
            {
              if (*((_DWORD *)v152 + 19) != *((int *)v195 + 19) >> v216
                || *((_DWORD *)v152 + 20) != *((int *)v195 + 20) >> v216
                || *((_DWORD *)v152 + 27) != *((_DWORD *)v195 + 27) >> v216)
              {
                goto LABEL_629;
              }
            }
            else if (v216 {
                   || *((_DWORD *)v152 + 19) != *((_DWORD *)v195 + 19)
            }
                   || *((_DWORD *)v152 + 20) != *((_DWORD *)v195 + 20)
                   || *((_DWORD *)v152 + 27) != *((_DWORD *)v195 + 27))
            {
              goto LABEL_629;
            }
            double v217 = v195[1];
            double v218 = v195;
            if (v217)
            {
              do
              {
                double v218 = v217;
                double v217 = (void *)*v217;
              }
              while (v217);
            }
            else
            {
              do
              {
                double v219 = v218;
                double v218 = (void *)v218[2];
              }
              while ((void *)*v218 != v219);
            }
            long double v207 = v195;
            double v195 = (void **)v218;
          }
          goto LABEL_475;
        }
        do
        {
          double v197 = (void **)v194;
          double v194 = (void *)v194[1];
        }
        while (v194);
      }
      else
      {
        do
        {
          double v201 = v197;
          double v197 = (void **)v197[2];
        }
        while (*v197 == v201);
      }
      double v195 = &v475;
      goto LABEL_431;
    }
    while (1)
    {
      uint64_t v156 = v144[4];
      if (!v156) {
        goto LABEL_404;
      }
      double v157 = (void *)(v156 + 820);
      uint64_t v158 = *(void *)(v156 + 844);
      uint64_t v159 = v158 & 0xFF00000000;
      if ((v158 & 0xFF00000000) != 0) {
        uint64_t v160 = 2 * *(void *)(v156 + 844);
      }
      else {
        uint64_t v160 = 0;
      }
      int8x8_t v161 = *(int8x8_t *)(a1 + 704);
      if (v161)
      {
        uint64_t v162 = *(unsigned __int8 *)(v156 + 817);
        uint64_t v163 = *(unsigned __int8 *)(v156 + 816);
        uint64_t v164 = *(unsigned int *)(v156 + 852);
        unint64_t v165 = (v162
              - 0x61C8864680B583EBLL
              + ((v163 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v163 - 0x61C8864680B583EBLL) >> 2)) ^ (v163 - 0x61C8864680B583EBLL);
        int v166 = HIDWORD(*v157);
        int v167 = *v157;
        unint64_t v168 = (v167 - 0x61C8864680B583EBLL + (v165 << 6) + (v165 >> 2)) ^ v165;
        unint64_t v169 = (v160 | (v164 << 33)) ^ v168 ^ (v166 - 0x61C8864680B583EBLL + (v168 << 6) + (v168 >> 2));
        unint64_t v170 = (*((char *)v144 + 48) - 0x61C8864680B583EBLL + (v169 << 6) + (v169 >> 2)) ^ v169;
        uint8x8_t v171 = (uint8x8_t)vcnt_s8(v161);
        v171.i16[0] = vaddlv_u8(v171);
        if (v171.u32[0] > 1uLL)
        {
          unint64_t v172 = v170;
          if (v170 >= *(void *)&v161) {
            unint64_t v172 = v170 % *(void *)&v161;
          }
        }
        else
        {
          unint64_t v172 = v170 & (*(void *)&v161 - 1);
        }
        double v173 = *(uint64_t ***)(*(void *)(a1 + 696) + 8 * v172);
        if (v173)
        {
          double v174 = *v173;
          if (v174)
          {
            int v175 = *(unsigned __int8 *)(v156 + 840);
            int v176 = *((unsigned __int8 *)v144 + 48);
            if (v171.u32[0] <= 1uLL)
            {
              uint64_t v177 = *(void *)&v161 - 1;
              if (!v159)
              {
                while (1)
                {
                  uint64_t v180 = v174[1];
                  if (v180 == v170)
                  {
                    if (*((unsigned __int8 *)v174 + 40) == v175
                      && __PAIR64__(*((unsigned __int8 *)v174 + 17), *((unsigned __int8 *)v174 + 16)) == __PAIR64__(v162, v163)
                      && *((_DWORD *)v174 + 5) == v167
                      && *((_DWORD *)v174 + 6) == v166
                      && *((_DWORD *)v174 + 13) == v164
                      && !*((unsigned char *)v174 + 48)
                      && *((unsigned __int8 *)v174 + 56) == v176)
                    {
                      goto LABEL_359;
                    }
                  }
                  else if ((v180 & v177) != v172)
                  {
                    goto LABEL_389;
                  }
                  double v179 = 0;
                  double v174 = (uint64_t *)*v174;
                  if (!v174) {
                    goto LABEL_390;
                  }
                }
              }
              while (1)
              {
                uint64_t v178 = v174[1];
                if (v178 == v170)
                {
                  if (*((unsigned __int8 *)v174 + 40) == v175
                    && __PAIR64__(*((unsigned __int8 *)v174 + 17), *((unsigned __int8 *)v174 + 16)) == __PAIR64__(v162, v163)
                    && *((_DWORD *)v174 + 5) == v167
                    && *((_DWORD *)v174 + 6) == v166
                    && *((_DWORD *)v174 + 13) == v164
                    && *((unsigned char *)v174 + 48)
                    && *((_DWORD *)v174 + 11) == v158
                    && *((unsigned __int8 *)v174 + 56) == v176)
                  {
                    goto LABEL_359;
                  }
                }
                else if ((v178 & v177) != v172)
                {
                  goto LABEL_389;
                }
                double v174 = (uint64_t *)*v174;
                if (!v174) {
                  goto LABEL_389;
                }
              }
            }
            if (!v159)
            {
              while (1)
              {
                unint64_t v182 = v174[1];
                if (v182 == v170)
                {
                  if (*((unsigned __int8 *)v174 + 40) == v175
                    && __PAIR64__(*((unsigned __int8 *)v174 + 17), *((unsigned __int8 *)v174 + 16)) == __PAIR64__(v162, v163)
                    && *((_DWORD *)v174 + 5) == v167
                    && *((_DWORD *)v174 + 6) == v166
                    && *((_DWORD *)v174 + 13) == v164
                    && !*((unsigned char *)v174 + 48)
                    && *((unsigned __int8 *)v174 + 56) == v176)
                  {
                    goto LABEL_359;
                  }
                }
                else
                {
                  if (v182 >= *(void *)&v161) {
                    v182 %= *(void *)&v161;
                  }
                  if (v182 != v172) {
                    goto LABEL_389;
                  }
                }
                double v179 = 0;
                double v174 = (uint64_t *)*v174;
                if (!v174) {
                  goto LABEL_390;
                }
              }
            }
            do
            {
              unint64_t v181 = v174[1];
              if (v181 == v170)
              {
                if (*((unsigned __int8 *)v174 + 40) == v175
                  && __PAIR64__(*((unsigned __int8 *)v174 + 17), *((unsigned __int8 *)v174 + 16)) == __PAIR64__(v162, v163)
                  && *((_DWORD *)v174 + 5) == v167
                  && *((_DWORD *)v174 + 6) == v166
                  && *((_DWORD *)v174 + 13) == v164
                  && *((unsigned char *)v174 + 48)
                  && *((_DWORD *)v174 + 11) == v158
                  && *((unsigned __int8 *)v174 + 56) == v176)
                {
LABEL_359:
                  double v179 = v174;
                  goto LABEL_390;
                }
              }
              else
              {
                if (v181 >= *(void *)&v161) {
                  v181 %= *(void *)&v161;
                }
                if (v181 != v172) {
                  break;
                }
              }
              double v174 = (uint64_t *)*v174;
            }
            while (v174);
          }
        }
      }
LABEL_389:
      double v179 = 0;
LABEL_390:
      LOBYTE(v482) = 0;
      long double v183 = operator new(0x30uLL);
      double v184 = (void (**)(void *))&unk_1EF51F190;
      *long double v183 = &unk_1EF51F190;
      v183[1] = a1;
      v183[2] = v156 + 816;
      v183[3] = &v482;
      v183[4] = &v464;
      v183[5] = v179 + 8;
      *(void *)&v491[8] = v183;
      double v185 = v448[3];
      if (!v185) {
        goto LABEL_398;
      }
      double v186 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v185, (unsigned __int8 *)(v156 + 816));
      if (!v186) {
        goto LABEL_397;
      }
      __double2 v187 = (void *)v186[7];
      if (!v187) {
        goto LABEL_397;
      }
      do
      {
        if (!*(void *)&v491[8]) {
          goto LABEL_954;
        }
        (*(void (**)(void, void *))(**(void **)&v491[8] + 48))(*(void *)&v491[8], v187 + 2);
        __double2 v187 = (void *)*v187;
      }
      while (v187);
      long double v183 = *(void **)&v491[8];
      if (*(void ***)&v491[8] != __p) {
        break;
      }
      (*((void (**)(void **))__p[0] + 4))(__p);
      if (!(_BYTE)v482)
      {
LABEL_400:
        unsigned int v188 = *(unsigned __int8 *)(v156 + 817);
        LOBYTE(v471) = *(unsigned char *)(v156 + 816);
        BYTE1(v471) = v188;
        *(void *)((char *)&v471 + 4) = *v157;
        long long v473 = *(_OWORD *)(v156 + 840);
        unsigned int v189 = *((unsigned __int8 *)v179 + 65);
        if (v188 < v189 && *(unsigned char *)(v156 + 840) == 2)
        {
          uint64_t v190 = *(uint64_t *)((char *)v179 + 68);
          LOBYTE(v471) = *((unsigned char *)v179 + 64);
          BYTE1(v471) = v189;
          *(void *)((char *)&v471 + 4) = v190;
          LOBYTE(v473) = 2;
          *(void *)((char *)&v473 + 4) = 0;
          HIDWORD(v473) = 0;
        }
        md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo::FlyoverOctileTileInfo((uint64_t)__p, (char *)(v156 + 816), (uint64_t)&v471, (uint64_t)(v179 + 8));
        std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>((uint64_t **)&v464, (uint64_t)__p, (uint64_t)__p);
      }
LABEL_404:
      double v191 = (uint64_t *)v144[1];
      if (v191)
      {
        do
        {
          __double2 v192 = v191;
          double v191 = (uint64_t *)*v191;
        }
        while (v191);
      }
      else
      {
        do
        {
          __double2 v192 = (uint64_t *)v144[2];
          _ZF = *v192 == (void)v144;
          long double v144 = v192;
        }
        while (!_ZF);
      }
      long double v144 = v192;
      if (v192 == v449) {
        goto LABEL_307;
      }
    }
    if (*(void *)&v491[8])
    {
LABEL_397:
      double v184 = (void (**)(void *))*v183;
LABEL_398:
      v184[5](v183);
    }
    if (!(_BYTE)v482) {
      goto LABEL_400;
    }
    goto LABEL_404;
  }
LABEL_884:
  if (!v489)
  {
LABEL_954:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v489 + 48))(v489);
  uint64_t result = (uint64_t)v489;
  if (v489 == v488) {
    return (*(uint64_t (**)(void *))(v488[0] + 32))(v488);
  }
  if (v489) {
    return (*(uint64_t (**)(void))(*v489 + 40))();
  }
  return result;
}

void sub_1A2612C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

void _ZNSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)float v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "FlyoverCompleteTileDataLogic", "", v5, 2u);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::erase(void *a1, uint64_t *__p)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  uint64_t v5 = *__p;
  unint64_t v4 = __p[1];
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v7 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    float v8 = v7;
    uint64_t v7 = (uint64_t *)*v7;
  }
  while (v7 != __p);
  if (v8 != a1 + 2)
  {
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    uint64_t v10 = *__p;
    if (v9 == v4)
    {
LABEL_20:
      if (!v10) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v5) {
    goto LABEL_19;
  }
  unint64_t v11 = *(void *)(v5 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v3) {
      v11 %= *(void *)&v3;
    }
  }
  else
  {
    v11 &= *(void *)&v3 - 1;
  }
  uint64_t v10 = *__p;
  if (v11 != v4)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v4) = 0;
    uint64_t v10 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v12 = *(void *)(v10 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v3) {
      v12 %= *(void *)&v3;
    }
  }
  else
  {
    v12 &= *(void *)&v3 - 1;
  }
  if (v12 != v4)
  {
    *(void *)(*a1 + 8 * v12) = v8;
    uint64_t v10 = *__p;
  }
LABEL_27:
  uint64_t *v8 = v10;
  void *__p = 0;
  --a1[3];
  uint64_t v13 = (std::__shared_weak_count *)__p[16];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  int v14 = (std::__shared_weak_count *)__p[3];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(__p);
  return v5;
}

void md::FlyoverCompleteTileDataLogic::addFallbackData(unint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v520 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a1 + 168);
  uint64_t v6 = v5[10];
  uint64_t v7 = v5[11];
  if (v6 != v7)
  {
    while (*(_WORD *)v6 != 75)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_7;
      }
    }
  }
  if (v6 == v7) {
LABEL_7:
  }
    double v399 = 0;
  else {
    double v399 = *(gdc::LayerDataRequestKey **)(v6 + 8);
  }
  double v385 = (QuadTile *)v5[44];
  long long __p = 0u;
  long long v439 = 0u;
  float v440 = 1.0;
  gdc::LayerDataCollector::missingData((gdc::LayerDataCollector *)&v431, a2, *(unsigned __int16 *)(a1 + 384));
  int v8 = v431;
  unint64_t v9 = v432;
  uint64_t v10 = v433;
  unint64_t v11 = v434;
  int v12 = v435;
  double v415 = v436;
  long double v409 = v437;
  unint64_t v369 = v4;
  int v368 = v431;
LABEL_10:
  while (v8 != v12 || v9 != v415 || v11 != v409)
  {
    md::FlyoverCommon::decodeFlyoverKey((md::FlyoverCommon *)v444, v9);
    if (*(unsigned char *)v9 == 1)
    {
      char v13 = v444[0];
      char v14 = v444[1];
      unint64_t v15 = (v444[1]
           - 0x61C8864680B583EBLL
           + ((v444[0] - 0x61C8864680B583EBLL) << 6)
           + (((unint64_t)v444[0] - 0x61C8864680B583EBLL) >> 2)) ^ (v444[0] - 0x61C8864680B583EBLL);
      unint64_t v16 = (*(int *)&v444[4] - 0x61C8864680B583EBLL + (v15 << 6) + (v15 >> 2)) ^ v15;
      uint64_t v17 = *(int *)&v444[8] - 0x61C8864680B583EBLL + (v16 << 6) + (v16 >> 2);
      uint64_t v18 = *(void *)&v444[28] & 0xFF00000000;
      uint64_t v19 = 2 * *(unsigned int *)&v444[28];
      if ((*(void *)&v444[28] & 0xFF00000000) == 0) {
        uint64_t v19 = 0;
      }
      unint64_t v20 = (v19 | ((unint64_t)*(unsigned int *)&v444[36] << 33)) ^ v16;
      unint64_t v21 = v20 ^ v17;
      unint64_t v22 = *((void *)&__p + 1);
      if (*((void *)&__p + 1))
      {
        uint8x8_t v23 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          unint64_t v3 = v20 ^ v17;
          if (v21 >= *((void *)&__p + 1)) {
            unint64_t v3 = v21 % *((void *)&__p + 1);
          }
        }
        else
        {
          unint64_t v3 = v21 & (*((void *)&__p + 1) - 1);
        }
        unint64_t v24 = *(uint64_t ***)(__p + 8 * v3);
        if (v24)
        {
          uint8x8_t v25 = *v24;
          if (v25)
          {
            if (v23.u32[0] <= 1uLL)
            {
              uint64_t v26 = *((void *)&__p + 1) - 1;
              if (!v18)
              {
                while (1)
                {
                  uint64_t v28 = v25[1];
                  if (v28 == v21)
                  {
                    if (*((unsigned __int8 *)v25 + 40) == v444[24]
                      && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v444[1], v444[0])
                      && *(uint64_t *)((char *)v25 + 20) == *(void *)&v444[4]
                      && *((_DWORD *)v25 + 13) == *(_DWORD *)&v444[36]
                      && !*((unsigned char *)v25 + 48))
                    {
                      goto LABEL_130;
                    }
                  }
                  else if ((v28 & v26) != v3)
                  {
                    goto LABEL_70;
                  }
                  uint8x8_t v25 = (uint64_t *)*v25;
                  if (!v25) {
                    goto LABEL_70;
                  }
                }
              }
              while (1)
              {
                uint64_t v27 = v25[1];
                if (v27 == v21)
                {
                  if (*((unsigned __int8 *)v25 + 40) == v444[24]
                    && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v444[1], v444[0])
                    && *(uint64_t *)((char *)v25 + 20) == *(void *)&v444[4]
                    && *((_DWORD *)v25 + 13) == *(_DWORD *)&v444[36]
                    && *((unsigned char *)v25 + 48)
                    && *((_DWORD *)v25 + 11) == *(_DWORD *)&v444[28])
                  {
                    goto LABEL_130;
                  }
                }
                else if ((v27 & v26) != v3)
                {
                  goto LABEL_70;
                }
                uint8x8_t v25 = (uint64_t *)*v25;
                if (!v25) {
                  goto LABEL_70;
                }
              }
            }
            if (!v18)
            {
              while (1)
              {
                unint64_t v30 = v25[1];
                if (v30 == v21)
                {
                  if (*((unsigned __int8 *)v25 + 40) == v444[24]
                    && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v444[1], v444[0])
                    && *(uint64_t *)((char *)v25 + 20) == *(void *)&v444[4]
                    && *((_DWORD *)v25 + 13) == *(_DWORD *)&v444[36]
                    && !*((unsigned char *)v25 + 48))
                  {
                    goto LABEL_130;
                  }
                }
                else
                {
                  if (v30 >= *((void *)&__p + 1)) {
                    v30 %= *((void *)&__p + 1);
                  }
                  if (v30 != v3) {
                    goto LABEL_70;
                  }
                }
                uint8x8_t v25 = (uint64_t *)*v25;
                if (!v25) {
                  goto LABEL_70;
                }
              }
            }
            do
            {
              unint64_t v29 = v25[1];
              if (v29 == v21)
              {
                if (*((unsigned __int8 *)v25 + 40) == v444[24]
                  && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v444[1], v444[0])&& *(uint64_t *)((char *)v25 + 20) == *(void *)&v444[4]&& *((_DWORD *)v25 + 13) == *(_DWORD *)&v444[36]&& *((unsigned char *)v25 + 48)&& *((_DWORD *)v25 + 11) == *(_DWORD *)&v444[28])
                {
                  goto LABEL_130;
                }
              }
              else
              {
                if (v29 >= *((void *)&__p + 1)) {
                  v29 %= *((void *)&__p + 1);
                }
                if (v29 != v3) {
                  break;
                }
              }
              uint8x8_t v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
        }
      }
LABEL_70:
      unint64_t v31 = (char *)operator new(0x90uLL);
      *(void *)&long long v489 = v31;
      *((void *)&v489 + 1) = &v439;
      *(void *)unint64_t v31 = 0;
      *((void *)v31 + 1) = v21;
      v31[16] = v13;
      v31[17] = v14;
      *(void *)(v31 + 20) = *(void *)&v444[4];
      *(_OWORD *)(v31 + 40) = *(_OWORD *)&v444[24];
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v31 + 56), (uint64_t)v9 + 8);
      LOBYTE(v490) = 1;
      float v32 = (float)(unint64_t)(*((void *)&v439 + 1) + 1);
      if (!v22 || (float)(v440 * (float)v22) < v32)
      {
        BOOL v33 = (v22 & (v22 - 1)) != 0;
        if (v22 < 3) {
          BOOL v33 = 1;
        }
        unint64_t v34 = v33 | (2 * v22);
        unint64_t v35 = vcvtps_u32_f32(v32 / v440);
        if (v34 <= v35) {
          size_t prime = v35;
        }
        else {
          size_t prime = v34;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
        }
        unint64_t v22 = *((void *)&__p + 1);
        if (prime > *((void *)&__p + 1))
        {
LABEL_82:
          if (prime >> 61) {
            goto LABEL_902;
          }
          float v37 = operator new(8 * prime);
          uint64_t v38 = (void *)__p;
          *(void *)&long long __p = v37;
          if (v38) {
            operator delete(v38);
          }
          uint64_t v39 = 0;
          *((void *)&__p + 1) = prime;
          do
            *(void *)(__p + 8 * v39++) = 0;
          while (prime != v39);
          double v40 = (void **)v439;
          if (!(void)v439) {
            goto LABEL_106;
          }
          size_t v41 = *(void *)(v439 + 8);
          size_t v42 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            size_t v43 = v41 & v42;
            *(void *)(__p + 8 * v43) = &v439;
            for (uint64_t i = *v40; *v40; uint64_t i = *v40)
            {
              size_t v45 = i[1] & v42;
              if (v45 == v43)
              {
                double v40 = (void **)i;
              }
              else if (*(void *)(__p + 8 * v45))
              {
                *double v40 = (void *)*i;
                uint64_t v46 = 8 * v45;
                *uint64_t i = **(void **)(__p + v46);
                **(void **)(__p + v46) = i;
              }
              else
              {
                *(void *)(__p + 8 * v45) = v40;
                double v40 = (void **)i;
                size_t v43 = v45;
              }
            }
            goto LABEL_106;
          }
          if (v41 >= prime) {
            v41 %= prime;
          }
          *(void *)(__p + 8 * v41) = &v439;
          unsigned __int8 v50 = *v40;
          if (!*v40)
          {
LABEL_106:
            unint64_t v22 = prime;
            goto LABEL_107;
          }
          while (2)
          {
            size_t v52 = v50[1];
            if (v52 >= prime) {
              v52 %= prime;
            }
            if (v52 != v41)
            {
              if (!*(void *)(__p + 8 * v52))
              {
                *(void *)(__p + 8 * v52) = v40;
LABEL_111:
                double v40 = (void **)v50;
                unsigned __int8 v50 = (void *)*v50;
                size_t v41 = v52;
                if (!v50) {
                  goto LABEL_106;
                }
                continue;
              }
              *double v40 = (void *)*v50;
              uint64_t v51 = 8 * v52;
              *unsigned __int8 v50 = **(void **)(__p + v51);
              **(void **)(__p + v51) = v50;
              unsigned __int8 v50 = v40;
            }
            break;
          }
          size_t v52 = v41;
          goto LABEL_111;
        }
        if (prime < *((void *)&__p + 1))
        {
          unint64_t v47 = vcvtps_u32_f32((float)*((unint64_t *)&v439 + 1) / v440);
          if (*((void *)&__p + 1) < 3uLL
            || (uint8x8_t v48 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8)), v48.i16[0] = vaddlv_u8(v48),
                                                                           v48.u32[0] > 1uLL))
          {
            unint64_t v47 = std::__next_prime(v47);
          }
          else
          {
            uint64_t v49 = 1 << -(char)__clz(v47 - 1);
            if (v47 >= 2) {
              unint64_t v47 = v49;
            }
          }
          if (prime <= v47) {
            size_t prime = v47;
          }
          if (prime >= v22)
          {
            unint64_t v22 = *((void *)&__p + 1);
          }
          else
          {
            if (prime) {
              goto LABEL_82;
            }
            double v58 = (void *)__p;
            *(void *)&long long __p = 0;
            if (v58) {
              operator delete(v58);
            }
            unint64_t v22 = 0;
            *((void *)&__p + 1) = 0;
          }
        }
LABEL_107:
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v21 >= v22) {
            unint64_t v3 = v21 % v22;
          }
          else {
            unint64_t v3 = v21;
          }
        }
        else
        {
          unint64_t v3 = (v22 - 1) & v21;
        }
      }
      unint64_t v53 = *(void **)(__p + 8 * v3);
      uint64_t v54 = v489;
      if (v53)
      {
        *(void *)long long v489 = *v53;
        goto LABEL_128;
      }
      *(void *)long long v489 = v439;
      *(void *)&long long v439 = v54;
      *(void *)(__p + 8 * v3) = &v439;
      if (*(void *)v54)
      {
        unint64_t v55 = *(void *)(*(void *)v54 + 8);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v55 >= v22) {
            v55 %= v22;
          }
        }
        else
        {
          v55 &= v22 - 1;
        }
        unint64_t v53 = (void *)(__p + 8 * v55);
LABEL_128:
        *unint64_t v53 = v54;
      }
      ++*((void *)&v439 + 1);
    }
LABEL_130:
    double v56 = (gdc::LayerDataRequestKey *)((char *)v9 + 144);
    unint64_t v9 = v10;
    unint64_t v4 = v369;
    int v8 = v368;
    if (v56 != v10)
    {
      unint64_t v9 = v56;
      while (1)
      {
        if (*((unsigned __int16 *)v9 + 4) == v368)
        {
          uint64_t v57 = *((void *)v9 + 17);
          if (!v11[18 * v57 + 14] || LOBYTE(v11[18 * v57 + 17])) {
            break;
          }
        }
        unint64_t v9 = (gdc::LayerDataRequestKey *)((char *)v9 + 144);
        if (v9 == v10)
        {
          unint64_t v9 = v10;
          goto LABEL_10;
        }
      }
    }
  }
  double v387 = (void **)(v4 + 120);
  double v429 = 0;
  double v428 = 0;
  uint64_t v430 = 0;
  uint64_t v59 = v432;
  uint64_t v60 = v433;
  double v61 = v434;
  uint64_t v367 = v436;
  double v363 = v433;
  double v365 = v437;
  uint64_t v380 = (uint64_t *)(a3 + 16);
  char v362 = v434;
LABEL_148:
  while (v59 != v367 || v61 != v365)
  {
    double v397 = v59;
    md::FlyoverCommon::decodeFlyoverKey((md::FlyoverCommon *)&v441, v59);
    int v62 = v441;
    uint64_t v63 = BYTE1(v441);
    uint64_t v64 = HIDWORD(v443);
    uint64_t v65 = *(void *)((unsigned char *)&v443 + 4) & 0xFF00000000;
    if ((*(void *)((unsigned char *)&v443 + 4) & 0xFF00000000) != 0) {
      uint64_t v66 = 2 * DWORD1(v443);
    }
    else {
      uint64_t v66 = 0;
    }
    int32x2_t v371 = *(int32x2_t *)((char *)&v441 + 4);
    if (*((void *)&__p + 1))
    {
      unint64_t v67 = (BYTE1(v441)
           - 0x61C8864680B583EBLL
           + ((v441 - 0x61C8864680B583EBLL) << 6)
           + (((unint64_t)v441 - 0x61C8864680B583EBLL) >> 2)) ^ (v441
                                                                                       - 0x61C8864680B583EBLL);
      unint64_t v68 = (SDWORD1(v441) - 0x61C8864680B583EBLL + (v67 << 6) + (v67 >> 2)) ^ v67;
      unint64_t v69 = (v66 | ((unint64_t)HIDWORD(v443) << 33)) ^ v68 ^ (SDWORD2(v441)
                                                                   - 0x61C8864680B583EBLL
                                                                   + (v68 << 6)
                                                                   + (v68 >> 2));
      uint8x8_t v70 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__p + 8));
      v70.i16[0] = vaddlv_u8(v70);
      if (v70.u32[0] > 1uLL)
      {
        unint64_t v71 = v69;
        double v72 = v397;
        if (v69 >= *((void *)&__p + 1)) {
          unint64_t v71 = v69 % *((void *)&__p + 1);
        }
      }
      else
      {
        unint64_t v71 = v69 & (*((void *)&__p + 1) - 1);
        double v72 = v397;
      }
      unint64_t v74 = *(uint64_t ***)(__p + 8 * v71);
      if (!v74 || (double v75 = *v74) == 0)
      {
LABEL_208:
        uint64_t v73 = 0;
        goto LABEL_209;
      }
      if (v70.u32[0] <= 1uLL)
      {
        uint64_t v76 = *((void *)&__p + 1) - 1;
        if (!v65)
        {
          while (1)
          {
            uint64_t v78 = v75[1];
            if (v78 == v69)
            {
              if (*((unsigned __int8 *)v75 + 40) == v443
                && __PAIR64__(*((unsigned __int8 *)v75 + 17), *((unsigned __int8 *)v75 + 16)) == __PAIR64__(BYTE1(v441), v441)&& *(uint64_t *)((char *)v75 + 20) == *(void *)((char *)&v441 + 4)&& *((_DWORD *)v75 + 13) == HIDWORD(v443)&& !*((unsigned char *)v75 + 48))
              {
                goto LABEL_182;
              }
            }
            else if ((v78 & v76) != v71)
            {
              goto LABEL_208;
            }
            uint64_t v73 = 0;
            double v75 = (uint64_t *)*v75;
            if (!v75) {
              goto LABEL_209;
            }
          }
        }
        while (1)
        {
          uint64_t v77 = v75[1];
          if (v77 == v69)
          {
            if (*((unsigned __int8 *)v75 + 40) == v443
              && __PAIR64__(*((unsigned __int8 *)v75 + 17), *((unsigned __int8 *)v75 + 16)) == __PAIR64__(BYTE1(v441), v441)&& *(uint64_t *)((char *)v75 + 20) == *(void *)((char *)&v441 + 4)&& *((_DWORD *)v75 + 13) == HIDWORD(v443)&& *((unsigned char *)v75 + 48)&& *((_DWORD *)v75 + 11) == DWORD1(v443))
            {
              goto LABEL_182;
            }
          }
          else if ((v77 & v76) != v71)
          {
            goto LABEL_208;
          }
          double v75 = (uint64_t *)*v75;
          if (!v75) {
            goto LABEL_208;
          }
        }
      }
      if (!v65)
      {
        while (1)
        {
          unint64_t v80 = v75[1];
          if (v80 == v69)
          {
            if (*((unsigned __int8 *)v75 + 40) == v443
              && __PAIR64__(*((unsigned __int8 *)v75 + 17), *((unsigned __int8 *)v75 + 16)) == __PAIR64__(BYTE1(v441), v441)&& *(uint64_t *)((char *)v75 + 20) == *(void *)((char *)&v441 + 4)&& *((_DWORD *)v75 + 13) == HIDWORD(v443)&& !*((unsigned char *)v75 + 48))
            {
              goto LABEL_182;
            }
          }
          else
          {
            if (v80 >= *((void *)&__p + 1)) {
              v80 %= *((void *)&__p + 1);
            }
            if (v80 != v71) {
              goto LABEL_208;
            }
          }
          uint64_t v73 = 0;
          double v75 = (uint64_t *)*v75;
          if (!v75) {
            goto LABEL_209;
          }
        }
      }
      while (1)
      {
        unint64_t v79 = v75[1];
        if (v79 == v69)
        {
          if (*((unsigned __int8 *)v75 + 40) == v443
            && __PAIR64__(*((unsigned __int8 *)v75 + 17), *((unsigned __int8 *)v75 + 16)) == __PAIR64__(BYTE1(v441), v441)&& *(uint64_t *)((char *)v75 + 20) == *(void *)((char *)&v441 + 4)&& *((_DWORD *)v75 + 13) == HIDWORD(v443)&& *((unsigned char *)v75 + 48)&& *((_DWORD *)v75 + 11) == DWORD1(v443))
          {
LABEL_182:
            uint64_t v73 = v75;
            goto LABEL_209;
          }
        }
        else
        {
          if (v79 >= *((void *)&__p + 1)) {
            v79 %= *((void *)&__p + 1);
          }
          if (v79 != v71) {
            goto LABEL_208;
          }
        }
        double v75 = (uint64_t *)*v75;
        if (!v75) {
          goto LABEL_208;
        }
      }
    }
    uint64_t v73 = 0;
    double v72 = v397;
LABEL_209:
    if (!*((void *)&v439 + 1)
      || v73
      && *((unsigned __int16 *)v73 + 28) == *((unsigned __int16 *)v72 + 4)
      && v73[16] == *((void *)v72 + 10)
      && (uint8x8_t v81 = (const void *)v73[8],
          size_t v82 = v73[9] - (void)v81,
          float32x2_t v83 = (const void *)*((void *)v72 + 2),
          v82 == *((void *)v72 + 3) - (void)v83)
      && (v84 = memcmp(v81, v83, v82), double v72 = v397, !v84)
      && !*(unsigned char *)v397)
    {
      int v370 = v62;
      *(void *)&v512[12] = v443;
      *(_DWORD *)&v512[20] = DWORD2(v443);
      unint64_t v85 = (char *)operator new(0x28uLL);
      double v408 = 0;
      uint64_t v86 = 0;
      unint64_t v87 = 0;
      unsigned __int8 v383 = v63 - 1;
      char v382 = v63 + 1;
      unint64_t v88 = v85 + 40;
      *unint64_t v85 = v370;
      v85[1] = v63;
      *(int32x2_t *)(v85 + 4) = v371;
      *(_OWORD *)(v85 + 24) = v443;
      int v381 = (char)v63 + 2;
      int v377 = (char)v63 - 4;
      int v379 = 1;
      double v389 = v85 + 40;
LABEL_217:
      char v89 = 0;
      if (v381 < v382 || v85 == v389)
      {
        float v114 = v88;
        float v115 = v85;
        goto LABEL_392;
      }
      double v372 = v88;
      uint64_t v374 = v64;
      uint64_t v375 = v63;
      double v376 = v85;
      memset(v510, 0, 32);
      int v90 = v86;
      unint64_t v91 = v86;
      uint64_t v92 = (uint64_t)v85;
      *(_DWORD *)&v510[32] = 1065353216;
      uint64_t v93 = a3;
      char v94 = v385;
      while (2)
      {
        md::FlyoverCommon::selectChildren(v94, v92, (unsigned __int8 **)&v428, v387);
        char v95 = (char *)v428;
        double v413 = v429;
        if (v428 == v429) {
          goto LABEL_220;
        }
        uint64_t v391 = v92;
        char v394 = 1;
LABEL_225:
        int v97 = v95 + 24;
        if (v95[24])
        {
          md::FlyoverCommon::encodeFlyoverKey((unsigned __int8 *)v459, (unsigned __int8 *)v95, 0, 0);
          gdc::LayerDataStore::get((gdc::LayerDataStore *)v444, v399, (unsigned __int8 *)v459);
          uint64_t v98 = *(void *)v444;
          uint64_t v96 = *(std::__shared_weak_count **)&v444[8];
          *(void *)&v444[8] = 0;
          *(void *)uint64_t v444 = 0;
          if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
            unint64_t v99 = *(std::__shared_weak_count **)&v444[8];
            if (*(void *)&v444[8]) {
              goto LABEL_229;
            }
          }
          else
          {
            unint64_t v99 = *(std::__shared_weak_count **)&v444[8];
            if (*(void *)&v444[8])
            {
LABEL_229:
              if (!atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
          }
          if (!v98)
          {
            char v394 = 0;
            if (!(_BYTE)v467) {
              goto LABEL_258;
            }
            goto LABEL_257;
          }
          long double v416 = v96;
          double v410 = v90;
          char v100 = v95[1];
          uint64_t v101 = *(void *)(v95 + 4);
          unsigned __int8 v102 = *v95;
          *(_OWORD *)uint64_t v504 = *v97;
          char v103 = BYTE1(v441);
          uint64_t v104 = *(void *)((char *)&v441 + 4);
          char v105 = v441;
          LOBYTE(v489) = *(unsigned char *)(v98 + 16);
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v489 + 8, v98 + 24);
          LOBYTE(v497) = 0;
          if (*(unsigned char *)(v98 + 112))
          {
            DWORD1(v497) = *(_DWORD *)(v98 + 116);
            LOBYTE(v497) = 1;
          }
          *((void *)&v497 + 1) = *(void *)(v98 + 120);
          __int16 v498 = *((_WORD *)v397 + 56);
          uint64_t v499 = *(void *)((char *)v397 + 116);
          uint64_t v500 = v98;
          float v501 = v416;
          if (v416) {
            atomic_fetch_add_explicit(&v416->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v444[0] = v102;
          v444[1] = v100;
          *(void *)&v444[4] = v101;
          *(_OWORD *)&v444[24] = *(_OWORD *)v504;
          char v445 = v105;
          char v446 = v103;
          *(void *)v447 = v104;
          long long v448 = v443;
          char v449 = v489;
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v450, (uint64_t)&v489 + 8);
          char v452 = 0;
          if ((_BYTE)v497)
          {
            int v453 = DWORD1(v497);
            char v452 = 1;
          }
          uint64_t v454 = *((void *)&v497 + 1);
          __int16 v455 = v498;
          uint64_t v456 = v499;
          uint64_t v457 = v500;
          unint64_t v458 = v501;
          int v90 = v410;
          uint64_t v96 = v416;
          if (v501) {
            atomic_fetch_add_explicit(&v501->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>>>::__emplace_unique_key_args<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>((uint64_t)v510, v444, (uint64_t)v444);
          float64x2_t v106 = v458;
          if (v458 && !atomic_fetch_add(&v458->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
            if (v452) {
LABEL_244:
            }
              char v452 = 0;
          }
          else if (v452)
          {
            goto LABEL_244;
          }
          if (*((void *)&v450 + 1) != *((void *)&v451 + 1)) {
            free(*((void **)&v450 + 1));
          }
          float32x2_t v107 = v501;
          if (v501 && !atomic_fetch_add(&v501->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
            if ((_BYTE)v497) {
LABEL_250:
            }
              LOBYTE(v497) = 0;
          }
          else if ((_BYTE)v497)
          {
            goto LABEL_250;
          }
          if (v490 != *(void **)v492) {
            free(v490);
          }
          if (v91 < v408)
          {
            *(_WORD *)unint64_t v91 = *(_WORD *)v95;
            *(void *)(v91 + 4) = *(void *)(v95 + 4);
            *(_OWORD *)(v91 + 24) = *v97;
            v91 += 40;
            if (!(_BYTE)v467) {
              goto LABEL_258;
            }
LABEL_257:
            LOBYTE(v467) = 0;
            goto LABEL_258;
          }
          unint64_t v108 = 0xCCCCCCCCCCCCCCCDLL * ((v91 - v410) >> 3) + 1;
          if (v108 > 0x666666666666666) {
            abort();
          }
          if (0x999999999999999ALL * ((v408 - v410) >> 3) > v108) {
            unint64_t v108 = 0x999999999999999ALL * ((v408 - v410) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v408 - v410) >> 3) >= 0x333333333333333) {
            unint64_t v109 = 0x666666666666666;
          }
          else {
            unint64_t v109 = v108;
          }
          if (v109)
          {
            if (v109 > 0x666666666666666) {
              goto LABEL_902;
            }
            uint64_t v110 = (char *)operator new(40 * v109);
          }
          else
          {
            uint64_t v110 = 0;
          }
          unint64_t v111 = &v110[8 * ((v91 - v410) >> 3)];
          *(_WORD *)unint64_t v111 = *(_WORD *)v95;
          *(void *)(v111 + 4) = *(void *)(v95 + 4);
          *(_OWORD *)(v111 + 24) = *v97;
          if (v91 == v410)
          {
            int v90 = &v110[8 * ((v91 - v410) >> 3)];
          }
          else
          {
            uint64_t v112 = 0;
            do
            {
              double v113 = &v111[v112];
              *((_WORD *)v113 - 20) = *(_WORD *)&v91[v112 - 40];
              *(void *)(v113 - 36) = *(void *)&v91[v112 - 36];
              *((_OWORD *)v113 - 1) = *(_OWORD *)&v91[v112 - 16];
              v112 -= 40;
            }
            while (&v91[v112] != v410);
            int v90 = &v111[v112];
          }
          double v408 = &v110[40 * v109];
          unint64_t v91 = v111 + 40;
          if (v410) {
            operator delete(v410);
          }
          uint64_t v96 = v416;
          if ((_BYTE)v467) {
            goto LABEL_257;
          }
LABEL_258:
          if (v460 != *(void **)v462) {
            free(v460);
          }
          if (!v98)
          {
LABEL_285:
            if (v394)
            {
              unint64_t v87 = v96;
              uint64_t v92 = v391;
              uint64_t v93 = a3;
              char v94 = v385;
LABEL_220:
              v92 += 40;
              if ((char *)v92 != v389) {
                continue;
              }
              if (!*(void *)&v510[24])
              {
                char v89 = 0;
                uint64_t v154 = v87;
                goto LABEL_387;
              }
              BOOL v116 = *(unsigned __int8 **)&v510[16];
              if (!*(void *)&v510[16])
              {
                char v89 = 1;
                float v114 = v408;
                double v389 = v91;
                float v115 = v90;
                goto LABEL_389;
              }
              unint64_t v117 = *(void *)(v93 + 8);
              double v411 = v90;
              while (1)
              {
                unint64_t v118 = (v116[17]
                      - 0x61C8864680B583EBLL
                      + ((v116[16] - 0x61C8864680B583EBLL) << 6)
                      + (((unint64_t)v116[16] - 0x61C8864680B583EBLL) >> 2)) ^ (v116[16] - 0x61C8864680B583EBLL);
                unint64_t v119 = (*((int *)v116 + 5) - 0x61C8864680B583EBLL + (v118 << 6) + (v118 >> 2)) ^ v118;
                if ((*(void *)(v116 + 44) & 0xFF00000000) != 0) {
                  uint64_t v120 = 2 * *(void *)(v116 + 44);
                }
                else {
                  uint64_t v120 = 0;
                }
                unint64_t v121 = (v120 | ((unint64_t)*((unsigned int *)v116 + 13) << 33)) ^ v119 ^ (*((int *)v116 + 6)
                                                                                               - 0x61C8864680B583EBLL
                                                                                               + (v119 << 6)
                                                                                               + (v119 >> 2));
                unint64_t v122 = (v116[57]
                      - 0x61C8864680B583EBLL
                      + ((v116[56] - 0x61C8864680B583EBLL) << 6)
                      + (((unint64_t)v116[56] - 0x61C8864680B583EBLL) >> 2)) ^ (v116[56] - 0x61C8864680B583EBLL);
                unint64_t v123 = (*((int *)v116 + 15) - 0x61C8864680B583EBLL + (v122 << 6) + (v122 >> 2)) ^ v122;
                if ((*(void *)(v116 + 84) & 0xFF00000000) != 0) {
                  uint64_t v124 = 2 * *(void *)(v116 + 84);
                }
                else {
                  uint64_t v124 = 0;
                }
                unint64_t v125 = ((v121 << 6)
                      - 0x61C8864680B583EBLL
                      + (v121 >> 2)
                      + ((v124 | ((unint64_t)*((unsigned int *)v116 + 23) << 33)) ^ v123 ^ (*((int *)v116 + 16)
                                                                                                 - 0x61C8864680B583EBLL
                                                                                                 + (v123 << 6)
                                                                                                 + (v123 >> 2)))) ^ v121;
                if (!v117) {
                  goto LABEL_320;
                }
                uint8x8_t v126 = (uint8x8_t)vcnt_s8((int8x8_t)v117);
                v126.i16[0] = vaddlv_u8(v126);
                if (v126.u32[0] > 1uLL)
                {
                  unint64_t v127 = ((v121 << 6)
                        - 0x61C8864680B583EBLL
                        + (v121 >> 2)
                        + ((v124 | ((unint64_t)*((unsigned int *)v116 + 23) << 33)) ^ v123 ^ (*((int *)v116 + 16) - 0x61C8864680B583EBLL + (v123 << 6) + (v123 >> 2)))) ^ v121;
                  if (v117 <= v125) {
                    unint64_t v127 = v125 % v117;
                  }
                }
                else
                {
                  unint64_t v127 = (v117 - 1) & v125;
                }
                size_t v128 = *(unsigned __int8 ***)(*(void *)a3 + 8 * v127);
                if (!v128 || (uint64_t v129 = *v128) == 0)
                {
LABEL_320:
                  float v132 = (float)(unint64_t)(*(void *)(a3 + 24) + 1);
                  float v133 = *(float *)(a3 + 32);
                  if (!v117 || (float)(v133 * (float)v117) < v132)
                  {
                    BOOL v134 = v117 < 3 || (v117 & (v117 - 1)) != 0;
                    unint64_t v135 = v134 | (2 * v117);
                    unint64_t v136 = vcvtps_u32_f32(v132 / v133);
                    if (v135 <= v136) {
                      size_t v137 = v136;
                    }
                    else {
                      size_t v137 = v135;
                    }
                    if (v137 == 1)
                    {
                      size_t v137 = 2;
                    }
                    else if ((v137 & (v137 - 1)) != 0)
                    {
                      size_t v137 = std::__next_prime(v137);
                      unint64_t v117 = *(void *)(a3 + 8);
                    }
                    if (v137 > v117) {
                      goto LABEL_333;
                    }
                    if (v137 < v117)
                    {
                      unint64_t v138 = vcvtps_u32_f32((float)*(unint64_t *)(a3 + 24) / *(float *)(a3 + 32));
                      if (v117 < 3
                        || (uint8x8_t v139 = (uint8x8_t)vcnt_s8((int8x8_t)v117), v139.i16[0] = vaddlv_u8(v139), v139.u32[0] > 1uLL))
                      {
                        unint64_t v138 = std::__next_prime(v138);
                      }
                      else
                      {
                        uint64_t v140 = 1 << -(char)__clz(v138 - 1);
                        if (v138 >= 2) {
                          unint64_t v138 = v140;
                        }
                      }
                      if (v137 <= v138) {
                        size_t v137 = v138;
                      }
                      if (v137 < v117) {
LABEL_333:
                      }
                        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a3, v137);
                    }
                  }
                  unint64_t v141 = *(void *)&v510[8];
                  unint64_t v142 = *((void *)v116 + 1);
                  uint8x8_t v143 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v510[8]);
                  v143.i16[0] = vaddlv_u8(v143);
                  if (v143.u32[0] > 1uLL)
                  {
                    int v90 = v411;
                    if (v142 >= *(void *)&v510[8]) {
                      v142 %= *(void *)&v510[8];
                    }
                  }
                  else
                  {
                    v142 &= *(void *)&v510[8] - 1;
                    int v90 = v411;
                  }
                  long double v144 = *(unsigned __int8 **)v116;
                  double v145 = *(unsigned __int8 **)(*(void *)v510 + 8 * v142);
                  do
                  {
                    unint64_t v146 = v145;
                    double v145 = *(unsigned __int8 **)v145;
                  }
                  while (v145 != v116);
                  if (v146 == (void *)&v510[16]) {
                    goto LABEL_906;
                  }
                  unint64_t v147 = v146[1];
                  if (v143.u32[0] > 1uLL)
                  {
                    if (v147 >= *(void *)&v510[8]) {
                      v147 %= *(void *)&v510[8];
                    }
                  }
                  else
                  {
                    v147 &= *(void *)&v510[8] - 1;
                  }
                  unsigned int v148 = *(unsigned __int8 **)v116;
                  if (v147 == v142)
                  {
LABEL_365:
                    if (v148) {
                      goto LABEL_366;
                    }
                  }
                  else
                  {
LABEL_906:
                    if (!v144) {
                      goto LABEL_364;
                    }
                    unint64_t v149 = *((void *)v144 + 1);
                    if (v143.u32[0] > 1uLL)
                    {
                      if (v149 >= *(void *)&v510[8]) {
                        v149 %= *(void *)&v510[8];
                      }
                    }
                    else
                    {
                      v149 &= *(void *)&v510[8] - 1;
                    }
                    unsigned int v148 = *(unsigned __int8 **)v116;
                    if (v149 != v142)
                    {
LABEL_364:
                      *(void *)(*(void *)v510 + 8 * v142) = 0;
                      unsigned int v148 = *(unsigned __int8 **)v116;
                      goto LABEL_365;
                    }
LABEL_366:
                    unint64_t v150 = *((void *)v148 + 1);
                    if (v143.u32[0] > 1uLL)
                    {
                      if (v150 >= v141) {
                        v150 %= v141;
                      }
                    }
                    else
                    {
                      v150 &= v141 - 1;
                    }
                    if (v150 != v142)
                    {
                      *(void *)(*(void *)v510 + 8 * v150) = v146;
                      unsigned int v148 = *(unsigned __int8 **)v116;
                    }
                  }
                  *unint64_t v146 = v148;
                  *(void *)BOOL v116 = 0;
                  --*(void *)&v510[24];
                  *((void *)v116 + 1) = v125;
                  unint64_t v117 = *(void *)(a3 + 8);
                  uint8x8_t v151 = (uint8x8_t)vcnt_s8((int8x8_t)v117);
                  v151.i16[0] = vaddlv_u8(v151);
                  if (v151.u32[0] > 1uLL)
                  {
                    if (v125 >= v117) {
                      v125 %= v117;
                    }
                  }
                  else
                  {
                    v125 &= v117 - 1;
                  }
                  double v152 = *(unsigned __int8 ***)(*(void *)a3 + 8 * v125);
                  if (!v152)
                  {
                    *(void *)BOOL v116 = *(void *)(a3 + 16);
                    *(void *)(a3 + 16) = v116;
                    *(void *)(*(void *)a3 + 8 * v125) = v380;
                    if (*(void *)v116)
                    {
                      unint64_t v153 = *(void *)(*(void *)v116 + 8);
                      if (v151.u32[0] > 1uLL)
                      {
                        if (v153 >= v117) {
                          v153 %= v117;
                        }
                      }
                      else
                      {
                        v153 &= v117 - 1;
                      }
                      double v152 = (unsigned __int8 **)(*(void *)a3 + 8 * v153);
LABEL_292:
                      *double v152 = v116;
                    }
                    ++*(void *)(a3 + 24);
                    BOOL v116 = v144;
                    if (!v144) {
                      goto LABEL_385;
                    }
                    continue;
                  }
                  *(void *)BOOL v116 = *v152;
                  goto LABEL_292;
                }
                if (v126.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v131 = *((void *)v129 + 1);
                    if (v131 == v125)
                    {
                      if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v129 + 16, v116 + 16))
                      {
                        goto LABEL_340;
                      }
                    }
                    else if ((v131 & (v117 - 1)) != v127)
                    {
                      goto LABEL_320;
                    }
                    uint64_t v129 = *(unsigned __int8 **)v129;
                    if (!v129) {
                      goto LABEL_320;
                    }
                  }
                }
                while (1)
                {
                  unint64_t v130 = *((void *)v129 + 1);
                  if (v130 == v125) {
                    break;
                  }
                  if (v130 >= v117) {
                    v130 %= v117;
                  }
                  if (v130 != v127) {
                    goto LABEL_320;
                  }
LABEL_310:
                  uint64_t v129 = *(unsigned __int8 **)v129;
                  if (!v129) {
                    goto LABEL_320;
                  }
                }
                if (!std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v129 + 16, v116 + 16))goto LABEL_310; {
LABEL_340:
                }
                int v90 = v411;
                BOOL v116 = *(unsigned __int8 **)v116;
                if (!v116)
                {
LABEL_385:
                  char v89 = 1;
                  uint64_t v154 = v87;
LABEL_387:
                  uint64_t v155 = *(void **)&v510[16];
                  if (*(void *)&v510[16]) {
                    goto LABEL_417;
                  }
LABEL_388:
                  float v114 = v408;
                  double v389 = v91;
                  float v115 = v90;
                  unint64_t v87 = v154;
LABEL_389:
                  uint64_t v156 = *(void **)v510;
                  *(void *)uint64_t v510 = 0;
                  uint64_t v64 = v374;
                  uint64_t v63 = v375;
                  uint64_t v86 = v376;
                  if (v156) {
                    operator delete(v156);
                  }
                  double v408 = v372;
                  if ((v89 & 1) == 0)
                  {
LABEL_392:
                    if ((v383 & 0x80) == 0 && v377 < v383 && v379)
                    {
                      BOOL v157 = (char)v385;
                      if (v385)
                      {
                        if ((_BYTE)v63)
                        {
                          double v417 = v114;
                          LOBYTE(v489) = v370;
                          int32x2_t v158 = vshr_n_s32(v371, 1uLL);
                          BYTE1(v489) = v63 - 1;
                          *(int32x2_t *)((char *)&v489 + 4) = v158;
                          md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)v444, v385, (unsigned __int8 *)&v489, 0, 0);
                          if (v447[4]) {
                            uint64_t v159 = *(void *)&v444[32];
                          }
                          else {
                            uint64_t v159 = 0;
                          }
                          md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)v444, v385, (unsigned __int8 *)&v489, v64 >> 1, 0);
                          int v160 = v447[4];
                          if (v447[4])
                          {
                            BOOL v157 = 0;
                            BOOL v161 = v444[0] == v370 && v444[1] == (v63 - 1);
                            int32x2_t v162 = vceq_s32(*(int32x2_t *)&v444[4], v158);
                            int v163 = v161;
                            if ((v163 & v162.i32[0] & v162.i32[1]) != 0) {
                              char v164 = v445;
                            }
                            else {
                              char v164 = 0;
                            }
                            v510[0] = v370;
                            v510[1] = v63 - 1;
                            *(int32x2_t *)&v510[4] = v158;
                            v510[24] = v164;
                            *(_WORD *)&v510[25] = *(_WORD *)&v512[13];
                            v510[27] = v512[15];
                            *(void *)&v510[28] = v159;
                            *(_DWORD *)&v510[36] = v64 >> 1;
                            int v160 = 1;
                            LOBYTE(v511) = 1;
                            if (v164)
                            {
                              md::FlyoverCommon::encodeFlyoverKey((unsigned __int8 *)v459, v510, 0, 0);
                              gdc::LayerDataStore::get((gdc::LayerDataStore *)v444, v399, (unsigned __int8 *)v459);
                              uint64_t v165 = *(void *)v444;
                              double v414 = *(std::__shared_weak_count **)&v444[8];
                              *(void *)&v444[8] = 0;
                              *(void *)uint64_t v444 = 0;
                              if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                                std::__shared_weak_count::__release_weak(v87);
                                int v166 = *(std::__shared_weak_count **)&v444[8];
                                if (*(void *)&v444[8]) {
                                  goto LABEL_414;
                                }
                              }
                              else
                              {
                                int v166 = *(std::__shared_weak_count **)&v444[8];
                                if (*(void *)&v444[8])
                                {
LABEL_414:
                                  if (!atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                                    std::__shared_weak_count::__release_weak(v166);
                                  }
                                }
                              }
                              BOOL v157 = v165 != 0;
                              if (v165)
                              {
                                if (!(_BYTE)v511)
                                {
                                  std::__throw_bad_optional_access[abi:nn180100]();
                                  __break(1u);
                                }
                                char v395 = v510[1];
                                uint64_t v170 = *(void *)&v510[4];
                                char v171 = v510[0];
                                char v412 = BYTE1(v441);
                                uint64_t v172 = *(void *)((char *)&v441 + 4);
                                char v173 = v441;
                                LOBYTE(v489) = *(unsigned char *)(v165 + 16);
                                gdc::LayerDataKey::LayerDataKey((uint64_t)&v489 + 8, v165 + 24);
                                LOBYTE(v497) = 0;
                                if (*(unsigned char *)(v165 + 112))
                                {
                                  DWORD1(v497) = *(_DWORD *)(v165 + 116);
                                  LOBYTE(v497) = 1;
                                }
                                *((void *)&v497 + 1) = *(void *)(v165 + 120);
                                __int16 v498 = *((_WORD *)v397 + 56);
                                uint64_t v499 = *(void *)((char *)v397 + 116);
                                uint64_t v500 = v165;
                                float v501 = v414;
                                if (v414) {
                                  atomic_fetch_add_explicit(&v414->__shared_owners_, 1uLL, memory_order_relaxed);
                                }
                                v444[0] = v171;
                                v444[1] = v395;
                                *(void *)&v444[4] = v170;
                                *(_OWORD *)&v444[24] = *(_OWORD *)&v510[24];
                                char v445 = v173;
                                char v446 = v412;
                                *(void *)v447 = v172;
                                long long v448 = v443;
                                char v449 = v489;
                                gdc::LayerDataKey::LayerDataKey((uint64_t)&v450, (uint64_t)&v489 + 8);
                                char v452 = 0;
                                if ((_BYTE)v497)
                                {
                                  int v453 = DWORD1(v497);
                                  char v452 = 1;
                                }
                                uint64_t v454 = *((void *)&v497 + 1);
                                __int16 v455 = v498;
                                uint64_t v456 = v499;
                                uint64_t v457 = v500;
                                unint64_t v458 = v501;
                                if (v501) {
                                  atomic_fetch_add_explicit(&v501->__shared_owners_, 1uLL, memory_order_relaxed);
                                }
                                std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>>>::__emplace_unique_key_args<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>(a3, v444, (uint64_t)v444);
                                double v174 = v458;
                                if (v458 && !atomic_fetch_add(&v458->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                                  std::__shared_weak_count::__release_weak(v174);
                                  if (v452) {
LABEL_451:
                                  }
                                    char v452 = 0;
                                }
                                else if (v452)
                                {
                                  goto LABEL_451;
                                }
                                if (*((void *)&v450 + 1) != *((void *)&v451 + 1)) {
                                  free(*((void **)&v450 + 1));
                                }
                                int v175 = v501;
                                if (v501 && !atomic_fetch_add(&v501->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                                  std::__shared_weak_count::__release_weak(v175);
                                  if ((_BYTE)v497) {
LABEL_457:
                                  }
                                    LOBYTE(v497) = 0;
                                }
                                else if ((_BYTE)v497)
                                {
                                  goto LABEL_457;
                                }
                                if (v490 != *(void **)v492) {
                                  free(v490);
                                }
                              }
                              unint64_t v87 = v414;
                              if ((_BYTE)v467) {
                                LOBYTE(v467) = 0;
                              }
                              float v114 = v417;
                              if (v460 != *(void **)v462) {
                                free(v460);
                              }
                              int v160 = v511;
                            }
                          }
                          else
                          {
                            BOOL v157 = 0;
                            v510[0] = 0;
                            LOBYTE(v511) = 0;
                          }
LABEL_465:
                          if (v379 != v160)
                          {
                            int v379 = 0;
                            if (!v157) {
                              goto LABEL_426;
                            }
                            goto LABEL_474;
                          }
                          int v370 = v510[0];
                          uint64_t v63 = v510[1];
                          int32x2_t v371 = *(int32x2_t *)&v510[4];
                          *(_OWORD *)int v512 = *(_OWORD *)&v510[12];
                          *(void *)&v512[16] = *(void *)&v510[28];
                          uint64_t v64 = *(unsigned int *)&v510[36];
                          if (v157) {
                            goto LABEL_474;
                          }
LABEL_426:
                          ++v382;
                          if ((--v383 & 0x80) != 0 || v377 >= v383 || (v88 = v114, unint64_t v85 = v115, !v379))
                          {
                            if (v381 < v382 || (v88 = v114, unint64_t v85 = v115, v115 == v389))
                            {
LABEL_474:
                              if (v86) {
                                operator delete(v86);
                              }
                              double v61 = v362;
                              if (v115) {
                                operator delete(v115);
                              }
                              unint64_t v4 = v369;
                              uint64_t v60 = v363;
                              double v72 = v397;
                              if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                                std::__shared_weak_count::__release_weak(v87);
                                double v72 = v397;
                              }
                              goto LABEL_481;
                            }
                          }
                          goto LABEL_217;
                        }
                        int v160 = 0;
                        BOOL v157 = 0;
                      }
                      else
                      {
                        int v160 = 0;
                      }
                      v510[0] = 0;
                      LOBYTE(v511) = 0;
                      goto LABEL_465;
                    }
                  }
                  if (v89) {
                    goto LABEL_474;
                  }
                  goto LABEL_426;
                }
              }
            }
            uint64_t v154 = v96;
            char v89 = 0;
            uint64_t v155 = *(void **)&v510[16];
            if (!*(void *)&v510[16]) {
              goto LABEL_388;
            }
LABEL_417:
            while (2)
            {
              int v167 = *(void **)v155;
              unint64_t v168 = (std::__shared_weak_count *)*((void *)v155 + 30);
              if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
                if (*((unsigned char *)v155 + 192)) {
LABEL_420:
                }
                  *((unsigned char *)v155 + 192) = 0;
              }
              else if (*((unsigned char *)v155 + 192))
              {
                goto LABEL_420;
              }
              unint64_t v169 = (void *)*((void *)v155 + 14);
              if (v169 != *((void **)v155 + 16)) {
                free(v169);
              }
              operator delete(v155);
              uint64_t v155 = v167;
              if (!v167) {
                goto LABEL_388;
              }
              continue;
            }
          }
        }
        else
        {
          uint64_t v96 = v87;
        }
        break;
      }
      v95 += 40;
      unint64_t v87 = v96;
      if (v95 == v413) {
        goto LABEL_285;
      }
      goto LABEL_225;
    }
LABEL_481:
    uint64_t v59 = v60;
    if ((gdc::LayerDataRequestKey *)((char *)v72 + 144) != v60)
    {
      uint64_t v59 = (gdc::LayerDataRequestKey *)((char *)v72 + 144);
      while (1)
      {
        if (*((unsigned __int16 *)v59 + 4) == v368)
        {
          uint64_t v176 = *((void *)v59 + 17);
          if (!v61[18 * v176 + 14] || LOBYTE(v61[18 * v176 + 17])) {
            break;
          }
        }
        uint64_t v59 = (gdc::LayerDataRequestKey *)((char *)v59 + 144);
        if (v59 == v60)
        {
          uint64_t v59 = v60;
          goto LABEL_148;
        }
      }
    }
  }
  *(_OWORD *)int8x8_t v425 = 0u;
  long long v426 = 0u;
  float v427 = 1.0;
  uint64_t v177 = *v380;
  if (*v380)
  {
    double v386 = (QuadTile *)(v4 + 224);
    uint64_t v396 = (void *)(v4 + 248);
    double v378 = (void *)(v4 + 592);
    size_t v361 = (void *)(v4 + 568);
    while (1)
    {
      uint64_t v178 = *(unsigned __int8 *)(v177 + 208);
      uint64_t v179 = *(unsigned __int8 *)(v177 + 209);
      unint64_t v180 = (v179
            - 0x61C8864680B583EBLL
            + ((v178 - 0x61C8864680B583EBLL) << 6)
            + ((unint64_t)(v178 - 0x61C8864680B583EBLL) >> 2)) ^ (v178 - 0x61C8864680B583EBLL);
      uint64_t v181 = *(int *)(v177 + 212);
      uint64_t v182 = *(int *)(v177 + 216);
      float64x2_t v418 = (__int16 *)(v177 + 208);
      unint64_t v183 = (v181 - 0x61C8864680B583EBLL + (v180 << 6) + (v180 >> 2)) ^ v180;
      unint64_t v184 = (v182 - 0x61C8864680B583EBLL + (v183 << 6) + (v183 >> 2)) ^ v183;
      unint64_t v185 = (unint64_t)v425[1];
      if (v425[1])
      {
        uint8x8_t v186 = (uint8x8_t)vcnt_s8((int8x8_t)v425[1]);
        v186.i16[0] = vaddlv_u8(v186);
        if (v186.u32[0] > 1uLL)
        {
          unint64_t v187 = (v182 - 0x61C8864680B583EBLL + (v183 << 6) + (v183 >> 2)) ^ v183;
          if ((void *)v184 >= v425[1]) {
            unint64_t v187 = v184 % (unint64_t)v425[1];
          }
        }
        else
        {
          unint64_t v187 = v184 & ((unint64_t)v425[1] - 1);
        }
        unsigned int v188 = (void **)*((void *)v425[0] + v187);
        if (v188)
        {
          unsigned int v189 = (unsigned __int8 *)*v188;
          if (*v188)
          {
            if (v186.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v191 = *((void *)v189 + 1);
                if (v191 == v184)
                {
                  if (__PAIR64__(v189[17], v189[16]) == __PAIR64__(v179, v178)
                    && *(void *)(v189 + 20) == __PAIR64__(v182, v181))
                  {
                    goto LABEL_603;
                  }
                }
                else if ((v191 & ((uint64_t)v425[1] - 1)) != v187)
                {
                  goto LABEL_515;
                }
                unsigned int v189 = *(unsigned __int8 **)v189;
                if (!v189) {
                  goto LABEL_515;
                }
              }
            }
            do
            {
              unint64_t v190 = *((void *)v189 + 1);
              if (v190 == v184)
              {
                if (__PAIR64__(v189[17], v189[16]) == __PAIR64__(v179, v178)
                  && *(void *)(v189 + 20) == __PAIR64__(v182, v181))
                {
                  goto LABEL_603;
                }
              }
              else
              {
                if ((void *)v190 >= v425[1]) {
                  v190 %= (unint64_t)v425[1];
                }
                if (v190 != v187) {
                  break;
                }
              }
              unsigned int v189 = *(unsigned __int8 **)v189;
            }
            while (v189);
          }
        }
LABEL_515:
        memset(v444, 0, 32);
        *(_DWORD *)&v444[32] = 1065353216;
        if (v186.u32[0] > 1uLL)
        {
          unint64_t v4 = (v182 - 0x61C8864680B583EBLL + (v183 << 6) + (v183 >> 2)) ^ v183;
          if ((void *)v184 >= v425[1]) {
            unint64_t v4 = v184 % (unint64_t)v425[1];
          }
        }
        else
        {
          unint64_t v4 = v184 & ((unint64_t)v425[1] - 1);
        }
        __double2 v192 = (void **)*((void *)v425[0] + v4);
        if (v192)
        {
          unsigned int v189 = (unsigned __int8 *)*v192;
          if (*v192)
          {
            if (v186.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v194 = *((void *)v189 + 1);
                if (v194 == v184)
                {
                  if (v189[16] == v178
                    && v189[17] == v179
                    && *((_DWORD *)v189 + 5) == v181
                    && *((_DWORD *)v189 + 6) == v182)
                  {
                    goto LABEL_601;
                  }
                }
                else if ((v194 & ((uint64_t)v425[1] - 1)) != v4)
                {
                  goto LABEL_541;
                }
                unsigned int v189 = *(unsigned __int8 **)v189;
                if (!v189) {
                  goto LABEL_541;
                }
              }
            }
            do
            {
              unint64_t v193 = *((void *)v189 + 1);
              if (v193 == v184)
              {
                if (v189[16] == v178
                  && v189[17] == v179
                  && *((_DWORD *)v189 + 5) == v181
                  && *((_DWORD *)v189 + 6) == v182)
                {
                  goto LABEL_601;
                }
              }
              else
              {
                if ((void *)v193 >= v425[1]) {
                  v193 %= (unint64_t)v425[1];
                }
                if (v193 != v4) {
                  break;
                }
              }
              unsigned int v189 = *(unsigned __int8 **)v189;
            }
            while (v189);
          }
        }
      }
      else
      {
        memset(v444, 0, 32);
        *(_DWORD *)&v444[32] = 1065353216;
      }
LABEL_541:
      unsigned int v189 = (unsigned __int8 *)operator new(0x50uLL);
      *(void *)&long long v489 = v189;
      *((void *)&v489 + 1) = &v426;
      *(void *)unsigned int v189 = 0;
      *((void *)v189 + 1) = v184;
      *((_WORD *)v189 + 8) = *(_WORD *)(v177 + 208);
      *(void *)(v189 + 20) = *(void *)(v177 + 212);
      *(void *)&v444[8] = 0;
      *(void *)uint64_t v444 = 0;
      *((void *)v189 + 5) = 0;
      *((void *)v189 + 6) = 0;
      *((void *)v189 + 7) = 0;
      *((void *)v189 + 8) = 0;
      *((_DWORD *)v189 + 18) = 1065353216;
      LOBYTE(v490) = 1;
      float v195 = (float)(unint64_t)(*((void *)&v426 + 1) + 1);
      if (!v185 || (float)(v427 * (float)v185) < v195) {
        break;
      }
LABEL_591:
      unsigned int v216 = v425[0];
      double v217 = (void *)*((void *)v425[0] + v4);
      if (v217)
      {
        *(void *)unsigned int v189 = *v217;
      }
      else
      {
        *(void *)unsigned int v189 = v426;
        *(void *)&long long v426 = v189;
        v216[v4] = &v426;
        if (!*(void *)v189) {
          goto LABEL_600;
        }
        unint64_t v218 = *(void *)(*(void *)v189 + 8);
        if ((v185 & (v185 - 1)) != 0)
        {
          if (v218 >= v185) {
            v218 %= v185;
          }
        }
        else
        {
          v218 &= v185 - 1;
        }
        double v217 = (char *)v425[0] + 8 * v218;
      }
      *double v217 = v189;
LABEL_600:
      ++*((void *)&v426 + 1);
LABEL_601:
      if (*(void *)v444) {
        operator delete(*(void **)v444);
      }
LABEL_603:
      double v219 = (void *)(v177 + 232);
      unsigned __int8 v220 = *(unsigned char *)(*(void *)(v177 + 232) + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v422, v177 + 104);
      v502[0] = v220;
      gdc::LayerDataKey::LayerDataKey((uint64_t)v503, (uint64_t)v422);
      char v508 = 0;
      unint64_t v4 = (v507
          - 0x61C8864680B583EBLL
          + ((v502[0] - 0x61C8864680B583EBLL) << 6)
          + (((unint64_t)v502[0] - 0x61C8864680B583EBLL) >> 2)) ^ (v502[0] - 0x61C8864680B583EBLL);
      unint64_t v509 = v4;
      uint64_t v221 = v177;
      if (v423 != v424)
      {
        free(v423);
        unint64_t v4 = v509;
      }
      int v222 = v189 + 40;
      int8x8_t v223 = *(int8x8_t *)(v189 + 48);
      if (v223)
      {
        uint8x8_t v224 = (uint8x8_t)vcnt_s8(v223);
        v224.i16[0] = vaddlv_u8(v224);
        if (v224.u32[0] > 1uLL)
        {
          unint64_t v225 = v4;
          if (v4 >= *(void *)&v223) {
            unint64_t v225 = v4 % *(void *)&v223;
          }
        }
        else
        {
          unint64_t v225 = (*(void *)&v223 - 1) & v4;
        }
        char v226 = *(uint64_t ****)(*v222 + 8 * v225);
        if (v226)
        {
          double v227 = *v226;
          if (*v226)
          {
            int v228 = v502[0];
            int v229 = v503[0];
            double v230 = v506;
            int v231 = *(const void **)&v504[4];
            size_t v232 = *(void *)&v504[12] - *(void *)&v504[4];
            if (v224.u32[0] < 2uLL)
            {
              uint64_t v233 = *(void *)&v223 - 1;
              while (1)
              {
                double v239 = v227[1];
                if ((uint64_t *)v4 == v239)
                {
                  if (*((unsigned __int8 *)v227 + 16) == v228
                    && *((unsigned __int16 *)v227 + 12) == v229
                    && v227[12] == (uint64_t *)v230)
                  {
                    double v240 = v227[4];
                    if ((char *)v227[5] - (char *)v240 == v232)
                    {
                      double v401 = v230;
                      double v405 = v231;
                      uint64_t v241 = v231;
                      size_t v242 = v232;
                      int v243 = memcmp(v240, v241, v232);
                      size_t v232 = v242;
                      double v230 = v401;
                      int v231 = v405;
                      if (!v243) {
                        goto LABEL_635;
                      }
                    }
                  }
                }
                else if (((unint64_t)v239 & v233) != v225)
                {
                  goto LABEL_634;
                }
                double v227 = (uint64_t **)*v227;
                if (!v227) {
                  goto LABEL_634;
                }
              }
            }
            do
            {
              unint64_t v234 = (unint64_t)v227[1];
              if (v4 == v234)
              {
                if (*((unsigned __int8 *)v227 + 16) == v228
                  && *((unsigned __int16 *)v227 + 12) == v229
                  && v227[12] == (uint64_t *)v230)
                {
                  uint64_t v235 = v227[4];
                  if ((char *)v227[5] - (char *)v235 == v232)
                  {
                    double v400 = v230;
                    uint64_t v404 = v231;
                    double v236 = v231;
                    size_t v237 = v232;
                    int v238 = memcmp(v235, v236, v232);
                    size_t v232 = v237;
                    double v230 = v400;
                    int v231 = v404;
                    if (!v238) {
                      goto LABEL_635;
                    }
                  }
                }
              }
              else
              {
                if (v234 >= *(void *)&v223) {
                  v234 %= *(void *)&v223;
                }
                if (v234 != v225) {
                  break;
                }
              }
              double v227 = (uint64_t **)*v227;
            }
            while (v227);
          }
        }
      }
LABEL_634:
      gdc::LayerDataCollector::addFallbackData((uint64_t)a2, (uint64_t)v502, v418, v219);
      std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v222, v502, (uint64_t)v502);
LABEL_635:
      double v244 = (uint64_t *)v221;
      uint64_t v245 = *(void *)(v221 + 232);
      double v246 = *(std::__shared_weak_count **)(v221 + 240);
      uint64_t v487 = v245;
      int v488 = v246;
      if (v246) {
        atomic_fetch_add_explicit(&v246->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v247 = *(unsigned __int8 *)(v221 + 80);
      unsigned int v248 = *(unsigned __int8 *)(v221 + 17);
      int v249 = *(unsigned __int8 *)(v221 + 16);
      v480[0] = *(unsigned char *)(v221 + 16);
      v480[1] = v248;
      int v250 = *(unsigned __int8 *)(v221 + 40);
      uint64_t v481 = *(void *)(v221 + 20);
      long long v482 = *(_OWORD *)(v221 + 40);
      unsigned int v251 = *(unsigned __int8 *)(v221 + 57);
      int v252 = *(unsigned __int8 *)(v221 + 56);
      char v483 = *(unsigned char *)(v221 + 56);
      char v484 = v251;
      uint64_t v485 = *(void *)(v221 + 60);
      long long v486 = *(_OWORD *)(v221 + 80);
      if (v250 != 2) {
        goto LABEL_873;
      }
      if (v249 != 255) {
        goto LABEL_873;
      }
      if (!v247) {
        goto LABEL_873;
      }
      if (v252 != 255) {
        goto LABEL_873;
      }
      if (v248 >= v251) {
        goto LABEL_873;
      }
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v369 + 464) + 16))(&v477);
      if (!(_BYTE)v477) {
        goto LABEL_873;
      }
      unint64_t v4 = BYTE1(v478);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(v369 + 464) + 16))(v444);
      if (!v444[0]) {
        goto LABEL_873;
      }
      unsigned int v398 = v4;
      if ((_BYTE)v477)
      {
        long long v478 = *(_OWORD *)&v444[8];
        uint64_t v479 = *(void *)&v444[24];
        unint64_t v4 = v444[9];
        int v392 = *(_DWORD *)&v444[12];
        int v388 = *(_DWORD *)&v444[16];
        int v402 = v444[8];
      }
      else
      {
        unint64_t v4 = v444[9];
        int v402 = v444[8];
        LOWORD(v478) = *(_WORD *)&v444[8];
        int v392 = *(_DWORD *)&v444[12];
        *(void *)((char *)&v478 + 4) = *(void *)&v444[12];
        int v388 = *(_DWORD *)&v444[16];
        LOBYTE(v477) = 1;
      }
      long long v253 = std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>(v396, v480);
      unsigned int v419 = v4;
      if (!v253)
      {
        LODWORD(v256) = 0;
LABEL_653:
        if (v256 == v4) {
          goto LABEL_873;
        }
        goto LABEL_654;
      }
      long long v254 = v253;
      long long v255 = geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::_elementAccessed((char *)v386, *((char **)v253 + 12));
      *((void *)v254 + 12) = v255;
      if (v386 == (QuadTile *)v255)
      {
        LODWORD(v256) = 0;
        unint64_t v4 = v4;
        if (!v4) {
          goto LABEL_873;
        }
      }
      else
      {
        uint64_t v256 = *((void *)v255 + 14);
        unint64_t v4 = v4;
        if (!v256) {
          goto LABEL_653;
        }
        LODWORD(v256) = *(unsigned __int8 *)(*((void *)v255 + 12) + 64);
        if (v256 == v4) {
          goto LABEL_873;
        }
      }
LABEL_654:
      unsigned int v384 = v256;
      uint64_t v257 = *(void *)(v369 + 168);
      *(void *)&v444[8] = 0;
      *(void *)uint64_t v444 = 0;
      uint64_t v258 = *(void *)(v257 + 80);
      uint64_t v259 = *(void *)(v257 + 88);
      double v390 = v246;
      if (v258 != v259)
      {
        while (*(_WORD *)v258 != 77)
        {
          v258 += 16;
          if (v258 == v259) {
            goto LABEL_703;
          }
        }
      }
      if (v258 == v259 || (v260 = *(void *)(v258 + 8)) == 0 || (unint64_t v4 = *(void *)(v260 + 8), v4 == v260))
      {
LABEL_703:
        LOBYTE(v261) = 0;
        unint64_t v474 = 0;
        uint64_t v473 = 0;
        uint64_t v475 = 0;
LABEL_704:
        unsigned __int8 v476 = v261;
        goto LABEL_705;
      }
      uint64_t v364 = 0;
      unsigned int v261 = 0;
      uint64_t v406 = *(void *)(v258 + 8);
      do
      {
        unint64_t v263 = *(void **)(v4 + 128);
        uint64_t v262 = *(void *)(v4 + 136);
        *(void *)&long long v489 = v263;
        *((void *)&v489 + 1) = v262;
        if (v262) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v262 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v264 = v263[90];
        if (v264)
        {
          if (*(unsigned __int8 *)(v264 + 57) <= v261) {
            goto LABEL_698;
          }
LABEL_667:
          if (*(unsigned __int8 *)(v264 + 57) > v419) {
            goto LABEL_698;
          }
          goto LABEL_668;
        }
        uint64_t v273 = v263[92];
        if (!v273 || *(unsigned __int8 *)(v273 + 57) <= v261) {
          goto LABEL_698;
        }
        uint64_t v264 = v263[92];
        if (v264) {
          goto LABEL_667;
        }
LABEL_668:
        if (!(*(uint64_t (**)(void *))(*v263 + 72))(v263))
        {
          uint64_t v260 = v406;
          goto LABEL_698;
        }
        uint64_t v265 = (*(uint64_t (**)(void *))(*v263 + 72))(v263);
        uint64_t v266 = v265;
        uint64_t v260 = v406;
        if (v265 && *(unsigned __int8 *)(v265 + 56) == v402)
        {
          unsigned int v267 = *(unsigned __int8 *)(v265 + 57);
          uint64_t v268 = *(void *)(v265 + 60);
          char v269 = v419 - v267;
          if (v419 <= v267)
          {
            if (v419 != v267 || v268 != v392 || HIDWORD(v268) != v388) {
              goto LABEL_698;
            }
          }
          else
          {
            int v270 = v392 >> v269;
            int v271 = v388 >> v269;
            if (v268 != v270 || HIDWORD(v268) != v271) {
              goto LABEL_698;
            }
          }
          uint64_t v276 = v263[90];
          if (v276 || (uint64_t v276 = v263[92]) != 0)
          {
            unsigned int v261 = *(unsigned __int8 *)(v276 + 57);
            if (v262) {
              goto LABEL_693;
            }
          }
          else
          {
            unsigned int v261 = 0;
            if (v262) {
LABEL_693:
            }
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v262 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v277 = *(atomic_ullong **)&v444[8];
          *(void *)uint64_t v444 = v263;
          *(void *)&v444[8] = v262;
          if (v277 && !atomic_fetch_add(v277 + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            int v278 = (std::__shared_weak_count *)v277;
            (*(void (**)(atomic_ullong *))(*v277 + 16))(v277);
            std::__shared_weak_count::__release_weak(v278);
            uint64_t v260 = v406;
          }
          uint64_t v364 = v266;
        }
LABEL_698:
        int v279 = (std::__shared_weak_count *)*((void *)&v489 + 1);
        if (*((void *)&v489 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v489 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
          std::__shared_weak_count::__release_weak(v279);
          uint64_t v260 = v406;
        }
        unint64_t v4 = *(void *)(v4 + 8);
      }
      while (v4 != v260);
      double v292 = *(std::__shared_weak_count **)&v444[8];
      uint64_t v473 = v364;
      unint64_t v474 = *(void *)v444;
      uint64_t v475 = *(std::__shared_weak_count **)&v444[8];
      if (!*(void *)&v444[8]) {
        goto LABEL_704;
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v444[8] + 8), 1uLL, memory_order_relaxed);
      unsigned __int8 v476 = v261;
      if (!atomic_fetch_add(&v292->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
        std::__shared_weak_count::__release_weak(v292);
      }
LABEL_705:
      uint64_t v280 = v473;
      double v246 = v390;
      if (!v473 || v384 >= v476 || v476 < v398) {
        goto LABEL_870;
      }
      uint64_t v281 = (int8x8_t *)(*(uint64_t (**)(uint64_t))(*(void *)v245 + 48))(v245);
      gdc::Registry::storage<md::components::TexturedMeshInstance>(v281);
      double v282 = v475;
      unint64_t v420 = v474;
      *(void *)int v512 = v474;
      *(void *)&v512[8] = v475;
      if (v475) {
        atomic_fetch_add_explicit(&v475->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&v512[16] = v280;
      char v283 = *(unsigned char *)(v221 + 57);
      char v284 = *(unsigned char *)(v221 + 56);
      char v513 = v284;
      char v514 = v283;
      uint64_t v285 = *(void *)(v221 + 60);
      uint64_t v515 = v285;
      long long v516 = *(_OWORD *)(v221 + 80);
      char v286 = *(unsigned char *)(v221 + 17);
      unint64_t v4 = *(unsigned __int8 *)(v221 + 16);
      LOBYTE(v517) = *(unsigned char *)(v221 + 16);
      HIBYTE(v517) = v286;
      uint64_t v287 = *(void *)(v221 + 20);
      uint64_t v518 = v287;
      long long v519 = *(_OWORD *)(v221 + 40);
      double v288 = std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::find<md::FlyoverCompleteTileDataLogic::DrapingTask>(v378, (uint64_t)v512);
      double v373 = (uint64_t *)v221;
      if (v288)
      {
        uint64_t v289 = v288[16];
        *(void *)&long long v469 = v288[15];
        *((void *)&v469 + 1) = v289;
        if (v289) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v289 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v290 = v288[18];
        uint64_t v470 = v288[17];
        uint64_t v471 = v290;
        if (v290) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v290 + 8), 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)uint64_t v472 = *(_OWORD *)(v288 + 19);
        *(_OWORD *)&v472[9] = *(_OWORD *)((char *)v288 + 161);
        *(void *)&v444[8] = 0;
        *(void *)uint64_t v444 = 0;
        long long v489 = 0uLL;
        md::MeshRenderableBuilder::MeshRenderableBuilder(&v468, 0, 0, &v489);
        operator new();
      }
      unint64_t v293 = md::FlyoverCompleteTileDataLogic::DrapingTaskHash::operator()((uint64_t)v512);
      int8x8_t v294 = *(int8x8_t *)(v369 + 560);
      if (v294)
      {
        unint64_t v295 = v293;
        uint8x8_t v296 = (uint8x8_t)vcnt_s8(v294);
        v296.i16[0] = vaddlv_u8(v296);
        if (v296.u32[0] > 1uLL)
        {
          unint64_t v297 = v293;
          if (v293 >= *(void *)&v294) {
            unint64_t v297 = v293 % *(void *)&v294;
          }
        }
        else
        {
          unint64_t v297 = (*(void *)&v294 - 1) & v293;
        }
        unsigned __int16 v299 = *(void **)(*(void *)(v369 + 552) + 8 * v297);
        if (v299)
        {
          __double2 v298 = (void *)*v299;
          if (*v299)
          {
            if (v296.u32[0] < 2uLL)
            {
              uint64_t v300 = *(void *)&v294 - 1;
              while (1)
              {
                uint64_t v302 = v298[1];
                if (v302 == v295)
                {
                  if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v298 + 2), (uint64_t)v512)) {
                    goto LABEL_752;
                  }
                }
                else if ((v302 & v300) != v297)
                {
                  goto LABEL_751;
                }
                __double2 v298 = (void *)*v298;
                if (!v298) {
                  goto LABEL_752;
                }
              }
            }
            do
            {
              unint64_t v301 = v298[1];
              if (v301 == v295)
              {
                if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v298 + 2), (uint64_t)v512)) {
                  break;
                }
              }
              else
              {
                if (v301 >= *(void *)&v294) {
                  v301 %= *(void *)&v294;
                }
                if (v301 != v297) {
                  goto LABEL_751;
                }
              }
              __double2 v298 = (void *)*v298;
            }
            while (v298);
          }
        }
        else
        {
LABEL_751:
          __double2 v298 = 0;
        }
LABEL_752:
        double v244 = v373;
      }
      else
      {
        __double2 v298 = 0;
      }
      double v303 = std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::find<md::FlyoverCompleteTileDataLogic::DrapingTask>(v378, (uint64_t)v512);
      unint64_t v304 = v369;
      if (v298 || v303) {
        goto LABEL_867;
      }
      *(void *)&long long v489 = v369;
      unint64_t v305 = v420;
      *((void *)&v489 + 1) = v420;
      uint64_t v490 = v282;
      if (v282) {
        atomic_fetch_add_explicit(&v282->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v491 = v280;
      v492[0] = v284;
      v492[1] = v283;
      *(void *)&v492[4] = v285;
      long long v493 = v516;
      char v494 = v4;
      char v495 = v286;
      uint64_t v496 = v287;
      long long v497 = v519;
      uint64_t v306 = *(void *)(*(void *)(v369 + 176) + 128);
      if (!v306) {
        goto LABEL_864;
      }
      v459[0] = v369;
      v459[1] = v420;
      unint64_t v460 = v282;
      if (v282) {
        atomic_fetch_add_explicit(&v282->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v461 = v280;
      v462[0] = v284;
      v462[1] = v283;
      *(void *)&v462[4] = v285;
      long long v463 = v493;
      char v464 = v4;
      char v465 = v286;
      uint64_t v466 = v287;
      long long v467 = v497;
      *(void *)&v510[24] = 0;
      double v307 = (char *)operator new(0x78uLL);
      *(void *)double v307 = &unk_1EF51F148;
      *((void *)v307 + 1) = v369;
      *((void *)v307 + 2) = v420;
      *((void *)v307 + 3) = v282;
      if (v282) {
        atomic_fetch_add_explicit(&v282->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)v307 + 4) = v280;
      v307[40] = v284;
      v307[41] = v283;
      *(void *)(v307 + 44) = v285;
      *((_OWORD *)v307 + 4) = v463;
      v307[80] = v4;
      v307[81] = v286;
      *(void *)(v307 + 84) = v287;
      *(_OWORD *)(v307 + 104) = v467;
      *(void *)&v510[24] = v307;
      geo::TaskQueue::async((std::__shared_weak_count_vtbl **)&v469, v306, v510);
      if (*(unsigned char **)&v510[24] == v510)
      {
        (*(void (**)(unsigned char *))(*(void *)v510 + 32))(v510);
      }
      else if (*(void *)&v510[24])
      {
        (*(void (**)(void))(**(void **)&v510[24] + 40))();
      }
      if (v282 && !atomic_fetch_add(&v282->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
        std::__shared_weak_count::__release_weak(v282);
      }
      uint64_t v309 = *(void *)v512;
      uint64_t v308 = *(void *)&v512[8];
      *(void *)uint64_t v444 = *(void *)v512;
      *(void *)&v444[8] = *(void *)&v512[8];
      if (*(void *)&v512[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v512[8] + 8), 1uLL, memory_order_relaxed);
      }
      float v310 = *(gdc::LayerDataRequestKey **)&v512[16];
      *(void *)&v444[16] = *(void *)&v512[16];
      char v407 = v513;
      v444[24] = v513;
      char v421 = v514;
      v444[25] = v514;
      uint64_t v311 = v515;
      *(void *)&v444[28] = v515;
      *(_OWORD *)&v447[4] = v516;
      char v312 = HIBYTE(v517);
      char v313 = v517;
      LOWORD(v448) = v517;
      uint64_t v314 = v518;
      *(void *)((char *)&v448 + 4) = v518;
      long long v450 = v519;
      double v315 = (std::__shared_weak_count *)*((void *)&v469 + 1);
      long long v451 = v469;
      if (*((void *)&v469 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v469 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v316 = md::FlyoverCompleteTileDataLogic::DrapingTaskHash::operator()((uint64_t)v444);
      unint64_t v317 = v316;
      unint64_t v4 = *(void *)(v369 + 560);
      if (!v4) {
        goto LABEL_795;
      }
      uint8x8_t v318 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
      v318.i16[0] = vaddlv_u8(v318);
      if (v318.u32[0] > 1uLL)
      {
        unint64_t v305 = v316;
        if (v316 >= v4) {
          unint64_t v305 = v316 % v4;
        }
      }
      else
      {
        unint64_t v305 = (v4 - 1) & v316;
      }
      unint64_t v319 = *(void **)(*(void *)(v369 + 552) + 8 * v305);
      if (!v319) {
        goto LABEL_795;
      }
      double v403 = v310;
      uint8x8_t v320 = (void *)*v319;
      if (!*v319) {
        goto LABEL_794;
      }
      if (v318.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v322 = v320[1];
          if (v322 == v317)
          {
            if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v320 + 2), (uint64_t)v444)) {
              goto LABEL_880;
            }
          }
          else if ((v322 & (v4 - 1)) != v305)
          {
            goto LABEL_793;
          }
          uint8x8_t v320 = (void *)*v320;
          if (!v320) {
            goto LABEL_793;
          }
        }
      }
      while (2)
      {
        unint64_t v321 = v320[1];
        if (v321 != v317)
        {
          if (v321 >= v4) {
            v321 %= v4;
          }
          if (v321 != v305)
          {
LABEL_793:
            unint64_t v304 = v369;
LABEL_794:
            float v310 = v403;
LABEL_795:
            double v323 = (char *)operator new(0x88uLL);
            uint64_t v324 = v323;
            *(void *)&long long v441 = v323;
            *((void *)&v441 + 1) = v361;
            *(void *)double v323 = 0;
            *((void *)v323 + 1) = v317;
            *((void *)v323 + 2) = v309;
            *((void *)v323 + 3) = v308;
            if (v308) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v308 + 8), 1uLL, memory_order_relaxed);
            }
            *((void *)v323 + 4) = v310;
            v323[40] = v407;
            v323[41] = v421;
            *(void *)(v323 + 44) = v311;
            *((_OWORD *)v323 + 4) = *(_OWORD *)&v447[4];
            v323[80] = v313;
            v323[81] = v312;
            *(void *)(v323 + 84) = v314;
            *(_OWORD *)(v323 + 104) = v450;
            *(_OWORD *)(v323 + 120) = v451;
            long long v451 = 0uLL;
            LOBYTE(v442) = 1;
            float v325 = (float)(unint64_t)(*(void *)(v304 + 576) + 1);
            float v326 = *(float *)(v304 + 584);
            double v244 = v373;
            if (!v4 || (float)(v326 * (float)v4) < v325)
            {
              BOOL v327 = (v4 & (v4 - 1)) != 0;
              if (v4 < 3) {
                BOOL v327 = 1;
              }
              unint64_t v328 = v327 | (2 * v4);
              unint64_t v329 = vcvtps_u32_f32(v325 / v326);
              if (v328 <= v329) {
                size_t v330 = v329;
              }
              else {
                size_t v330 = v328;
              }
              if (v330 == 1)
              {
                size_t v330 = 2;
              }
              else if ((v330 & (v330 - 1)) != 0)
              {
                size_t v330 = std::__next_prime(v330);
              }
              unint64_t v4 = *(void *)(v304 + 560);
              if (v330 > v4)
              {
LABEL_809:
                if (!(v330 >> 61))
                {
                  size_t v331 = operator new(8 * v330);
                  double v332 = *(void **)(v304 + 552);
                  *(void *)(v304 + 552) = v331;
                  if (v332) {
                    operator delete(v332);
                  }
                  uint64_t v333 = 0;
                  *(void *)(v304 + 560) = v330;
                  do
                    *(void *)(*(void *)(v304 + 552) + 8 * v333++) = 0;
                  while (v330 != v333);
                  double v334 = (void *)*v361;
                  if (!*v361) {
                    goto LABEL_833;
                  }
                  size_t v335 = v334[1];
                  size_t v336 = v330 - 1;
                  if ((v330 & (v330 - 1)) == 0)
                  {
                    size_t v337 = v335 & v336;
                    *(void *)(*(void *)(v304 + 552) + 8 * v337) = v361;
                    for (uint64_t j = (void *)*v334; *v334; uint64_t j = (void *)*v334)
                    {
                      size_t v339 = j[1] & v336;
                      if (v339 == v337)
                      {
                        double v334 = j;
                      }
                      else
                      {
                        uint64_t v340 = *(void *)(v304 + 552);
                        if (*(void *)(v340 + 8 * v339))
                        {
                          *double v334 = *j;
                          uint64_t v341 = 8 * v339;
                          *uint64_t j = **(void **)(*(void *)(v304 + 552) + v341);
                          **(void **)(*(void *)(v304 + 552) + v341) = j;
                        }
                        else
                        {
                          *(void *)(v340 + 8 * v339) = v334;
                          double v334 = j;
                          size_t v337 = v339;
                        }
                      }
                    }
                    goto LABEL_833;
                  }
                  if (v335 >= v330) {
                    v335 %= v330;
                  }
                  *(void *)(*(void *)(v304 + 552) + 8 * v335) = v361;
                  size_t v345 = (void *)*v334;
                  if (!*v334)
                  {
LABEL_833:
                    unint64_t v4 = v330;
                    goto LABEL_834;
                  }
                  while (2)
                  {
                    size_t v347 = v345[1];
                    if (v347 >= v330) {
                      v347 %= v330;
                    }
                    if (v347 != v335)
                    {
                      uint64_t v348 = *(void *)(v304 + 552);
                      if (!*(void *)(v348 + 8 * v347))
                      {
                        *(void *)(v348 + 8 * v347) = v334;
LABEL_838:
                        double v334 = v345;
                        size_t v345 = (void *)*v345;
                        size_t v335 = v347;
                        if (!v345) {
                          goto LABEL_833;
                        }
                        continue;
                      }
                      *double v334 = *v345;
                      uint64_t v346 = 8 * v347;
                      void *v345 = **(void **)(*(void *)(v304 + 552) + v346);
                      **(void **)(*(void *)(v304 + 552) + v346) = v345;
                      size_t v345 = v334;
                    }
                    break;
                  }
                  size_t v347 = v335;
                  goto LABEL_838;
                }
LABEL_902:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              if (v330 < v4)
              {
                unint64_t v342 = vcvtps_u32_f32((float)*(unint64_t *)(v304 + 576) / *(float *)(v304 + 584));
                if (v4 < 3
                  || (uint8x8_t v343 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v343.i16[0] = vaddlv_u8(v343), v343.u32[0] > 1uLL))
                {
                  unint64_t v342 = std::__next_prime(v342);
                }
                else
                {
                  uint64_t v344 = 1 << -(char)__clz(v342 - 1);
                  if (v342 >= 2) {
                    unint64_t v342 = v344;
                  }
                }
                if (v330 <= v342) {
                  size_t v330 = v342;
                }
                if (v330 >= v4)
                {
                  unint64_t v4 = *(void *)(v304 + 560);
                }
                else
                {
                  if (v330) {
                    goto LABEL_809;
                  }
                  unint64_t v356 = *(void **)(v304 + 552);
                  *(void *)(v304 + 552) = 0;
                  if (v356) {
                    operator delete(v356);
                  }
                  unint64_t v4 = 0;
                  *(void *)(v304 + 560) = 0;
                }
              }
LABEL_834:
              if ((v4 & (v4 - 1)) != 0)
              {
                if (v317 >= v4) {
                  unint64_t v305 = v317 % v4;
                }
                else {
                  unint64_t v305 = v317;
                }
              }
              else
              {
                unint64_t v305 = (v4 - 1) & v317;
              }
            }
            uint64_t v349 = *(void *)(v304 + 552);
            size_t v350 = *(void **)(v349 + 8 * v305);
            if (v350)
            {
              *(void *)uint64_t v324 = *v350;
              goto LABEL_855;
            }
            *(void *)uint64_t v324 = *v361;
            *size_t v361 = v324;
            *(void *)(v349 + 8 * v305) = v361;
            if (*(void *)v324)
            {
              unint64_t v351 = *(void *)(*(void *)v324 + 8);
              if ((v4 & (v4 - 1)) != 0)
              {
                if (v351 >= v4) {
                  v351 %= v4;
                }
              }
              else
              {
                v351 &= v4 - 1;
              }
              size_t v350 = (void *)(*(void *)(v304 + 552) + 8 * v351);
LABEL_855:
              *size_t v350 = v324;
            }
            ++*(void *)(v304 + 576);
            goto LABEL_857;
          }
          goto LABEL_783;
        }
        if (!md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v320 + 2), (uint64_t)v444))
        {
LABEL_783:
          uint8x8_t v320 = (void *)*v320;
          unint64_t v304 = v369;
          if (!v320) {
            goto LABEL_794;
          }
          continue;
        }
        break;
      }
LABEL_880:
      double v244 = v373;
      if (v315 && !atomic_fetch_add(&v315->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
        std::__shared_weak_count::__release_weak(v315);
      }
LABEL_857:
      size_t v352 = *(std::__shared_weak_count **)&v444[8];
      if (*(void *)&v444[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v444[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
        std::__shared_weak_count::__release_weak(v352);
      }
      double v353 = (std::__shared_weak_count *)*((void *)&v469 + 1);
      if (*((void *)&v469 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v469 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
        std::__shared_weak_count::__release_weak(v353);
      }
      double v282 = (std::__shared_weak_count *)v490;
LABEL_864:
      if (v282 && !atomic_fetch_add(&v282->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
        std::__shared_weak_count::__release_weak(v282);
      }
LABEL_867:
      double v246 = v390;
      size_t v354 = *(std::__shared_weak_count **)&v512[8];
      if (*(void *)&v512[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v512[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
        std::__shared_weak_count::__release_weak(v354);
      }
LABEL_870:
      uint64_t v355 = v475;
      if (v475 && !atomic_fetch_add(&v475->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
        std::__shared_weak_count::__release_weak(v355);
      }
LABEL_873:
      if (v246 && !atomic_fetch_add(&v246->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
        std::__shared_weak_count::__release_weak(v246);
      }
      if (v508) {
        char v508 = 0;
      }
      if (*(void *)&v504[4] != v505) {
        free(*(void **)&v504[4]);
      }
      uint64_t v177 = *v244;
      if (!v177) {
        goto LABEL_892;
      }
    }
    BOOL v196 = (v185 & (v185 - 1)) != 0;
    if (v185 < 3) {
      BOOL v196 = 1;
    }
    unint64_t v197 = v196 | (2 * v185);
    unint64_t v198 = vcvtps_u32_f32(v195 / v427);
    if (v197 <= v198) {
      size_t v199 = v198;
    }
    else {
      size_t v199 = v197;
    }
    if (v199 == 1)
    {
      size_t v199 = 2;
    }
    else if ((v199 & (v199 - 1)) != 0)
    {
      size_t v199 = std::__next_prime(v199);
      unint64_t v185 = (unint64_t)v425[1];
    }
    if (v199 <= v185)
    {
      if (v199 >= v185) {
        goto LABEL_578;
      }
      unint64_t v210 = vcvtps_u32_f32((float)*((unint64_t *)&v426 + 1) / v427);
      if (v185 < 3 || (uint8x8_t v211 = (uint8x8_t)vcnt_s8((int8x8_t)v185), v211.i16[0] = vaddlv_u8(v211), v211.u32[0] > 1uLL))
      {
        unint64_t v210 = std::__next_prime(v210);
      }
      else
      {
        uint64_t v212 = 1 << -(char)__clz(v210 - 1);
        if (v210 >= 2) {
          unint64_t v210 = v212;
        }
      }
      if (v199 <= v210) {
        size_t v199 = v210;
      }
      if (v199 >= v185)
      {
        unint64_t v185 = (unint64_t)v425[1];
LABEL_578:
        if ((v185 & (v185 - 1)) != 0)
        {
          if (v184 >= v185) {
            unint64_t v4 = v184 % v185;
          }
          else {
            unint64_t v4 = v184;
          }
        }
        else
        {
          unint64_t v4 = (v185 - 1) & v184;
        }
        goto LABEL_591;
      }
      if (!v199)
      {
        uint64_t v291 = v425[0];
        v425[0] = 0;
        if (v291) {
          operator delete(v291);
        }
        unint64_t v185 = 0;
        v425[1] = 0;
        goto LABEL_578;
      }
    }
    if (v199 >> 61) {
      goto LABEL_902;
    }
    double v200 = operator new(8 * v199);
    double v201 = v425[0];
    v425[0] = v200;
    if (v201) {
      operator delete(v201);
    }
    uint64_t v202 = 0;
    v425[1] = (void *)v199;
    do
      *((void *)v425[0] + v202++) = 0;
    while (v199 != v202);
    unsigned int v203 = (void **)v426;
    if (!(void)v426)
    {
LABEL_577:
      unint64_t v185 = v199;
      goto LABEL_578;
    }
    size_t v204 = *(void *)(v426 + 8);
    size_t v205 = v199 - 1;
    if ((v199 & (v199 - 1)) == 0)
    {
      size_t v206 = v204 & v205;
      *((void *)v425[0] + v206) = &v426;
      for (k = *v203; *v203; k = *v203)
      {
        size_t v208 = k[1] & v205;
        if (v208 == v206)
        {
          unsigned int v203 = (void **)k;
        }
        else if (*((void *)v425[0] + v208))
        {
          *unsigned int v203 = (void *)*k;
          uint64_t v209 = 8 * v208;
          void *k = **(void **)((char *)v425[0] + v209);
          **(void **)((char *)v425[0] + v209) = k;
        }
        else
        {
          *((void *)v425[0] + v208) = v203;
          unsigned int v203 = (void **)k;
          size_t v206 = v208;
        }
      }
      goto LABEL_577;
    }
    if (v204 >= v199) {
      v204 %= v199;
    }
    *((void *)v425[0] + v204) = &v426;
    double v213 = *v203;
    if (!*v203) {
      goto LABEL_577;
    }
    while (1)
    {
      size_t v215 = v213[1];
      if (v215 >= v199) {
        v215 %= v199;
      }
      if (v215 != v204)
      {
        if (!*((void *)v425[0] + v215))
        {
          *((void *)v425[0] + v215) = v203;
          goto LABEL_582;
        }
        *unsigned int v203 = (void *)*v213;
        uint64_t v214 = 8 * v215;
        *double v213 = **(void **)((char *)v425[0] + v214);
        **(void **)((char *)v425[0] + v214) = v213;
        double v213 = v203;
      }
      size_t v215 = v204;
LABEL_582:
      unsigned int v203 = (void **)v213;
      double v213 = (void *)*v213;
      size_t v204 = v215;
      if (!v213) {
        goto LABEL_577;
      }
    }
  }
LABEL_892:
  std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~__hash_table((uint64_t)v425);
  if (v428) {
    operator delete(v428);
  }
  uint8x8_t v357 = (void *)v439;
  if ((void)v439)
  {
    do
    {
      double v359 = (void *)*v357;
      uint64_t v360 = (void *)v357[8];
      if (v360 != (void *)v357[10]) {
        free(v360);
      }
      operator delete(v357);
      uint8x8_t v357 = v359;
    }
    while (v359);
  }
  uint64_t v358 = (void *)__p;
  *(void *)&long long __p = 0;
  if (v358) {
    operator delete(v358);
  }
}

void sub_1A2617EA0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&STACK[0x2F0]);
  std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,std::shared_ptr<geo::Task>>::~pair((uint64_t)&STACK[0x370]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x650]);
  md::components::Material::~Material((md::components::Material *)&STACK[0x730]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 240);
  md::components::Material::~Material((md::components::Material *)&STACK[0x690]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x720]);
  if (LOBYTE(STACK[0x8D0])) {
    LOBYTE(STACK[0x8D0]) = 0;
  }
  if (STACK[0x880] != STACK[0x890]) {
    free((void *)STACK[0x880]);
  }
  std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~__hash_table((uint64_t)&STACK[0x210]);
  if (STACK[0x238]) {
    operator delete((void *)STACK[0x238]);
  }
  unint64_t v3 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    do
    {
      uint64_t v5 = (void *)*v3;
      uint64_t v6 = (void *)v3[8];
      if (v6 != (void *)v3[10]) {
        free(v6);
      }
      operator delete(v3);
      unint64_t v3 = v5;
    }
    while (v5);
  }
  unint64_t v4 = (void *)STACK[0x290];
  STACK[0x290] = 0;
  if (v4) {
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(unsigned char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = *(unsigned char **)v2;
      unint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 30);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      if (v2[192]) {
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v5 = (void *)*((void *)v2 + 14);
      if (v5 != *((void **)v2 + 16)) {
        free(v5);
      }
      operator delete(v2);
      unint64_t v2 = v3;
      if (!v3) {
        goto LABEL_12;
      }
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v2[192]) {
      goto LABEL_8;
    }
LABEL_7:
    v2[192] = 0;
    goto LABEL_8;
  }
LABEL_12:
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

void std::__destroy_at[abi:nn180100]<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>,0>(void *a1)
{
  unint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)a1[14];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)a1[14];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t *md::FlyoverCompleteTileDataLogic::buildOctileInstances(void)::$_0::operator()(uint64_t a1, unsigned __int8 *a2, int a3, float a4)
{
  uint64_t v337 = *MEMORY[0x1E4F143B8];
  uint64_t v287 = *(void *)a1;
  for (uint64_t i = *(void **)(*(void *)(a1 + 8) + 8); i; uint64_t i = (void *)*i)
  {
    if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)a2, (uint64_t)(i + 4)))
    {
      uint64_t result = (uint64_t *)md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(i + 4), (uint64_t)a2);
      if (!result) {
        return result;
      }
      ++i;
    }
  }
  char v289 = 0;
  unint64_t v9 = a2 + 24;
  int v10 = *a2;
  char v11 = 1;
  unint64_t v293 = a2 + 24;
  int8x8_t v294 = a2;
  if (a2[24])
  {
    uint64_t v12 = v287;
    if (v10 == 255)
    {
      char v289 = 0;
      if (a2[64])
      {
        if (a2[40] == 255)
        {
          if (a2[1] >= a2[41])
          {
            char v289 = 0;
            LOBYTE(v10) = -1;
          }
          else
          {
            char v13 = *(md::FlyoverRegionManager ****)(*(void *)(v287 + 168) + 352);
            md::FlyoverCompleteTileDataLogic::getTileBounds((uint64_t)&v316, v287, v13, a2 + 40, a2[64]);
            md::FlyoverCompleteTileDataLogic::getTileBounds((uint64_t)v312, v287, v13, a2, a2[64]);
            double v14 = -(*(double *)&v312[16] * *((double *)&v313 + 1) - *(double *)&v312[8] * v314)
                - (*(double *)&v312[16] * *((double *)&v313 + 1)
                 - *(double *)&v312[8] * v314);
            double v15 = -(*(double *)v312 * v314 - *(double *)&v312[16] * *(double *)&v313)
                - (*(double *)v312 * v314
                 - *(double *)&v312[16] * *(double *)&v313);
            double v16 = -(*(double *)&v312[8] * *(double *)&v313 - *(double *)v312 * *((double *)&v313 + 1))
                - (*(double *)&v312[8] * *(double *)&v313
                 - *(double *)v312 * *((double *)&v313 + 1));
            double v17 = -(v16 * *(double *)&v313 - (-(*(double *)&v312[8] - v14 * v314) - v15 * v315));
            double v18 = *(double *)&v312[16] + v14 * *((double *)&v313 + 1) + v16 * v315;
            *(double *)&long long v19 = -(*(double *)v312 + v14 * v315 + v15 * v314 - v16 * *((double *)&v313 + 1));
            *((double *)&v19 + 1) = v17;
            double v20 = -(*((double *)&v313 + 1) * (*((double *)&v313 + 1) * -2.0));
            double v21 = v314 * -2.0 * v315;
            double v22 = v315 * (*((double *)&v313 + 1) * -2.0);
            double v23 = *(double *)&v313 * (*(double *)&v313 * -2.0) + 1.0;
            double v24 = v315 * (*(double *)&v313 * -2.0);
            *(double *)&long long v300 = 1.0 - (v20 - v314 * (v314 * -2.0));
            *((double *)&v300 + 1) = v21 - *((double *)&v313 + 1) * (*(double *)&v313 * -2.0);
            *(double *)&char v301[16] = -(*((double *)&v313 + 1) * (*(double *)&v313 * -2.0)) - v21;
            *(double *)&v301[24] = v23 - -(v314 * (v314 * -2.0));
            *(double *)&long long v303 = v22 - v314 * (*(double *)&v313 * -2.0);
            *((double *)&v303 + 1) = -(v314 * (*((double *)&v313 + 1) * -2.0)) - v24;
            *(double *)unint64_t v301 = -(v314 * (*(double *)&v313 * -2.0)) - v22;
            *(double *)&v301[32] = v24 - v314 * (*((double *)&v313 + 1) * -2.0);
            double v304 = v23 - v20;
            *(void *)&v301[8] = 0;
            uint64_t v302 = 0;
            uint64_t v305 = 0;
            long long v306 = v19;
            double v307 = -(v18 - v15 * *(double *)&v313);
            uint64_t v308 = 0x3FF0000000000000;
            double v25 = *(double *)&v318;
            double v26 = v25 + v25;
            *(double *)&long long v19 = (v25 + v25) * v25;
            double v27 = (*((double *)&v318 + 1) + *((double *)&v318 + 1)) * *((double *)&v318 + 1);
            double v28 = *((double *)&v317 + 1);
            double v29 = (v28 + v28) * *(double *)&v318;
            double v30 = (*((double *)&v318 + 1) + *((double *)&v318 + 1)) * v319;
            double v31 = *((double *)&v318 + 1) * (v28 + v28);
            double v32 = 1.0 - (v28 + v28) * v28;
            *(double *)long long __p = 1.0 - (*(double *)&v19 + v27);
            *(double *)&__p[1] = v30 + v29;
            *(double *)&__p[4] = v29 - v30;
            *(double *)&__p[5] = v32 - v27;
            double v33 = v319 * (v28 + v28);
            *(double *)&__p[8] = v319 * v26 + v31;
            *(double *)&__p[9] = v26 * *((double *)&v318 + 1) - v33;
            *(_OWORD *)&__p[2] = COERCE_UNSIGNED_INT64(v31 - v319 * v26);
            *(double *)&__p[6] = v33 + v26 * *((double *)&v318 + 1);
            *(double *)&__p[10] = v32 - *(double *)&v19;
            __p[7] = 0;
            __p[11] = 0;
            long long v333 = v316;
            uint64_t v334 = v317;
            uint64_t v335 = 0x3FF0000000000000;
            gm::operator*<double,4,4,4>((double *)&v309, (double *)&v300, (double *)__p);
            long long v300 = v320;
            *(_OWORD *)unint64_t v301 = v321;
            *(_OWORD *)&char v301[16] = v322;
            *(int64x2_t *)long long __p = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
            *(_OWORD *)&__p[2] = xmmword_1A28FC720;
            *(int64x2_t *)&__p[4] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
            *(void *)size_t v336 = &unk_1EF57D5A8;
            *(void *)&v336[8] = __p;
            *(void *)&v336[16] = &v309;
            *(void *)&v336[24] = v336;
            double v34 = gm::Box<double,3>::forEachCorner((uint64_t)&v300, (uint64_t)v336);
            if (*(unsigned char **)&v336[24] == v336)
            {
              (*(void (**)(unsigned char *, double))(*(void *)v336 + 32))(v336, v34);
            }
            else if (*(void *)&v336[24])
            {
              (*(void (**)(double))(**(void **)&v336[24] + 40))(v34);
            }
            char v11 = 0;
            double v4 = v315;
            v331[0] = *(_OWORD *)&v312[1];
            *(void *)((char *)v331 + 15) = *(void *)&v312[16];
            char v289 = v312[0];
            long long v329 = v313;
            double v330 = v314;
            long long v297 = *(_OWORD *)__p;
            long long v298 = *(_OWORD *)&__p[2];
            long long v299 = *(_OWORD *)&__p[4];
            LOBYTE(v10) = *a2;
            uint64_t v12 = v287;
            unint64_t v9 = a2 + 24;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v12 = v287;
  }
  unsigned __int8 v36 = a2[1];
  LOBYTE(v300) = v10;
  BYTE1(v300) = v36;
  *(void *)((char *)&v300 + 4) = *(void *)(a2 + 4);
  *(_OWORD *)&v301[8] = *v9;
  *(_WORD *)&v301[24] = *((_WORD *)a2 + 20);
  *(void *)&v301[28] = *(void *)(a2 + 44);
  long long v303 = *((_OWORD *)a2 + 4);
  float v37 = std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>((void *)(v12 + 248), (unsigned __int8 *)&v300);
  if (v37)
  {
    uint64_t v38 = (char **)(v37 + 96);
    uint64_t v39 = geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::_elementAccessed((char *)(v12 + 224), *((char **)v37 + 12));
    *uint64_t v38 = v39;
    if ((char *)(v12 + 224) == v39)
    {
      uint8x8_t v296 = 0;
    }
    else
    {
      double v40 = v39 + 96;
      if (!*((void *)v39 + 14)) {
        double v40 = 0;
      }
      uint8x8_t v296 = v40;
    }
    unint64_t v9 = a2 + 24;
  }
  else
  {
    uint8x8_t v296 = 0;
  }
  unsigned __int8 v41 = a2[40];
  unsigned __int8 v42 = a2[41];
  uint64_t v43 = *(void *)(a2 + 44);
  *(_OWORD *)size_t v336 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)&v336[12] = *((_OWORD *)a2 + 4);
  if (v11)
  {
    char v289 = 0;
  }
  else
  {
    v328[0] = v331[0];
    *(void *)((char *)v328 + 15) = *(void *)((char *)v331 + 15);
    long long v326 = v329;
    double v327 = v330;
    long long v316 = v297;
    long long v317 = v298;
    long long v318 = v299;
  }
  BOOL v284 = v296 != 0;
  unint64_t v295 = a2 + 64;
  uint64_t v44 = v12;
  if (a3)
  {
    if (a4 >= 1.0) {
      char v45 = 2;
    }
    else {
      char v45 = 3;
    }
  }
  else
  {
    char v45 = a2[64] == 2;
  }
  char v282 = v45;
  uint64_t v46 = a2[1];
  uint64_t v47 = *a2;
  v312[0] = *a2;
  v312[1] = v46;
  uint64_t v280 = *(void *)(a2 + 4);
  *(void *)&v312[4] = v280;
  long long v313 = *v9;
  unsigned int v48 = vcvtmd_s64_f64((double)*((int *)a2 + 22) / (double)(1 << a2[81]));
  LOBYTE(v314) = v48;
  uint64_t v49 = (void *)(v44 + 184);
  unsigned __int8 v50 = std::__hash_table<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::__unordered_map_hasher<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,true>,std::__unordered_map_equal<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::equal_to<md::FlyoverOctileWorld>,md::FlyoverOctileWorldHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>>>::find<md::FlyoverOctileWorld>((void *)(v44 + 184), v312);
  if (!v50)
  {
    uint64_t v57 = v47;
    if (v11)
    {
      char v289 = 0;
    }
    else
    {
      *(_OWORD *)long long __p = v328[0];
      *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v328 + 15);
      *(_OWORD *)((char *)&__p[2] + 7) = v326;
      *(void **)((char *)&__p[4] + 7) = *(void **)&v327;
      long long v309 = v316;
      *(_OWORD *)float v310 = v317;
      *(_OWORD *)&v310[16] = v318;
    }
    uint64_t v54 = v44;
    signed int v276 = v48;
    uint64_t v63 = (char *)operator new(0xA8uLL);
    uint64_t v64 = v63;
    *uint64_t v63 = v41;
    v63[1] = v42;
    *(void *)(v63 + 4) = v43;
    *(_OWORD *)(v63 + 24) = *(_OWORD *)&v336[12];
    v63[40] = 0;
    uint64_t v65 = (uint64_t)(v63 + 40);
    v63[144] = 0;
    if ((v11 & 1) == 0)
    {
      v63[40] = v289;
      *(_OWORD *)(v63 + 41) = *(_OWORD *)__p;
      *((void **)v63 + 7) = *(void **)((char *)&__p[1] + 7);
      *((_OWORD *)v63 + 4) = *(_OWORD *)((char *)&__p[2] + 7);
      *((void **)v63 + 10) = *(void **)((char *)&__p[4] + 7);
      *((double *)v63 + 11) = v4;
      long long v66 = *(_OWORD *)v310;
      *((_OWORD *)v63 + 6) = v309;
      *((_OWORD *)v63 + 7) = v66;
      *((_OWORD *)v63 + 8) = *(_OWORD *)&v310[16];
      v63[144] = 1;
    }
    v63[152] = v284;
    *((float *)v63 + 39) = a4;
    v63[160] = v282;
    int v290 = v313;
    uint64_t v277 = *(void *)((char *)&v313 + 4);
    uint64_t v278 = HIDWORD(v313);
    unint64_t v67 = (char *)operator new(0xA8uLL);
    *(void *)&long long v68 = v67;
    double v275 = v67 + 168;
    *unint64_t v67 = v41;
    v67[1] = v42;
    *(void *)(v67 + 4) = v43;
    *(_OWORD *)(v67 + 24) = *(_OWORD *)((char *)v64 + 24);
    v67[40] = 0;
    v67[144] = 0;
    if ((v11 & 1) == 0)
    {
      *(_OWORD *)(v67 + 40) = *(_OWORD *)v65;
      *((void *)v67 + 7) = *(void *)(v65 + 16);
      *((_OWORD *)v67 + 4) = v64[4];
      *((void *)v67 + 10) = *((void *)v64 + 10);
      *((double *)v67 + 11) = v4;
      long long v69 = v64[7];
      *((_OWORD *)v67 + 6) = v64[6];
      *((_OWORD *)v67 + 7) = v69;
      *((_OWORD *)v67 + 8) = v64[8];
      v67[144] = 1;
    }
    v67[152] = v284;
    *((float *)v67 + 39) = a4;
    v67[160] = v282;
    *((void *)&v68 + 1) = v67 + 168;
    long long v279 = v68;
    char v70 = v57;
    int v71 = v46;
    uint64_t v74 = v277 & 0xFF00000000;
    uint64_t v75 = 2 * v277;
    if ((v277 & 0xFF00000000) == 0) {
      uint64_t v75 = 0;
    }
    unint64_t v72 = (v46
         + ((v57 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v57 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v57 - 0x61C8864680B583EBLL);
    unint64_t v73 = ((v72 << 6) + (int)v280 + (v72 >> 2) - 0x61C8864680B583EBLL) ^ v72;
    unint64_t v76 = (v75 | (v278 << 33)) ^ v73 ^ ((v73 << 6) + SHIDWORD(v280) + (v73 >> 2) - 0x61C8864680B583EBLL);
    unint64_t v77 = ((v76 << 6) + v276 + (v76 >> 2) - 0x61C8864680B583EBLL) ^ v76;
    unint64_t v78 = *(void *)(v44 + 192);
    if (v78)
    {
      uint8x8_t v79 = (uint8x8_t)vcnt_s8((int8x8_t)v78);
      v79.i16[0] = vaddlv_u8(v79);
      if (v79.u32[0] > 1uLL)
      {
        uint64_t v65 = ((v76 << 6) + v276 + (v76 >> 2) - 0x61C8864680B583EBLL) ^ v76;
        if (v77 >= v78) {
          uint64_t v65 = v77 % v78;
        }
      }
      else
      {
        uint64_t v65 = v77 & (v78 - 1);
      }
      char v94 = *(uint64_t ***)(*v49 + 8 * v65);
      if (v94)
      {
        char v95 = *v94;
        if (v95)
        {
          if (v79.u32[0] <= 1uLL)
          {
            unint64_t v96 = v78 - 1;
            if (!v74)
            {
              while (1)
              {
                uint64_t v98 = v95[1];
                if (v98 == v77)
                {
                  if (*((unsigned __int8 *)v95 + 40) == v290
                    && *((unsigned __int8 *)v95 + 16) == v57
                    && *((unsigned __int8 *)v95 + 17) == v71
                    && *(uint64_t *)((char *)v95 + 20) == v280
                    && *((_DWORD *)v95 + 13) == v278
                    && !*((unsigned char *)v95 + 48)
                    && *((unsigned __int8 *)v95 + 56) == v276)
                  {
                    goto LABEL_105;
                  }
                }
                else if ((v98 & v96) != v65)
                {
                  goto LABEL_135;
                }
                char v95 = (uint64_t *)*v95;
                if (!v95) {
                  goto LABEL_135;
                }
              }
            }
            while (1)
            {
              uint64_t v97 = v95[1];
              if (v97 == v77)
              {
                if (*((unsigned __int8 *)v95 + 40) == v290
                  && *((unsigned __int8 *)v95 + 16) == v57
                  && *((unsigned __int8 *)v95 + 17) == v71
                  && *(uint64_t *)((char *)v95 + 20) == v280
                  && *((_DWORD *)v95 + 13) == v278
                  && *((unsigned char *)v95 + 48)
                  && *((_DWORD *)v95 + 11) == v277
                  && *((unsigned __int8 *)v95 + 56) == v276)
                {
                  goto LABEL_105;
                }
              }
              else if ((v97 & v96) != v65)
              {
                goto LABEL_135;
              }
              char v95 = (uint64_t *)*v95;
              if (!v95) {
                goto LABEL_135;
              }
            }
          }
          if (!v74)
          {
            while (1)
            {
              unint64_t v101 = v95[1];
              if (v101 == v77)
              {
                if (*((unsigned __int8 *)v95 + 40) == v290
                  && *((unsigned __int8 *)v95 + 16) == v57
                  && *((unsigned __int8 *)v95 + 17) == v71
                  && *(uint64_t *)((char *)v95 + 20) == v280
                  && *((_DWORD *)v95 + 13) == v278
                  && !*((unsigned char *)v95 + 48)
                  && *((unsigned __int8 *)v95 + 56) == v276)
                {
                  goto LABEL_105;
                }
              }
              else
              {
                if (v101 >= v78) {
                  v101 %= v78;
                }
                if (v101 != v65) {
                  goto LABEL_135;
                }
              }
              char v95 = (uint64_t *)*v95;
              if (!v95) {
                goto LABEL_135;
              }
            }
          }
          do
          {
            unint64_t v100 = v95[1];
            if (v100 == v77)
            {
              if (*((unsigned __int8 *)v95 + 40) == v290
                && *((unsigned __int8 *)v95 + 16) == v57
                && *((unsigned __int8 *)v95 + 17) == v71
                && *(uint64_t *)((char *)v95 + 20) == v280
                && *((_DWORD *)v95 + 13) == v278
                && *((unsigned char *)v95 + 48)
                && *((_DWORD *)v95 + 11) == v277
                && *((unsigned __int8 *)v95 + 56) == v276)
              {
LABEL_105:
                a2 = v294;
                unint64_t v93 = (unint64_t)v295;
                unint64_t v99 = (void *)v279;
                goto LABEL_195;
              }
            }
            else
            {
              if (v100 >= v78) {
                v100 %= v78;
              }
              if (v100 != v65) {
                break;
              }
            }
            char v95 = (uint64_t *)*v95;
          }
          while (v95);
        }
      }
    }
LABEL_135:
    unsigned __int8 v102 = (char *)operator new(0x58uLL);
    double v323 = (unsigned __int8 *)v102;
    uint64_t v285 = (void *)(v44 + 200);
    uint64_t v324 = v44 + 200;
    *(void *)unsigned __int8 v102 = 0;
    *((void *)v102 + 1) = v77;
    v102[16] = v70;
    v102[17] = v71;
    *(void *)(v102 + 20) = v280;
    v102[40] = v290;
    *(_WORD *)(v102 + 41) = *(_WORD *)((char *)&v313 + 1);
    v102[43] = BYTE3(v313);
    *(void *)(v102 + 44) = v277;
    *((_DWORD *)v102 + 13) = v278;
    v102[56] = v276;
    *((_OWORD *)v102 + 4) = v279;
    *((void *)v102 + 10) = v275;
    char v325 = 1;
    float v103 = (float)(unint64_t)(*(void *)(v44 + 208) + 1);
    float v104 = *(float *)(v44 + 216);
    if (v78 && (float)(v104 * (float)v78) >= v103)
    {
LABEL_185:
      unint64_t v125 = (void *)*v49;
      uint8x8_t v126 = *(void **)(*v49 + 8 * v65);
      if (v126)
      {
        *(void *)unsigned __int8 v102 = *v126;
      }
      else
      {
        *(void *)unsigned __int8 v102 = *v285;
        void *v285 = v102;
        v125[v65] = v285;
        if (!*(void *)v102)
        {
LABEL_194:
          ++*(void *)(v44 + 208);
          unint64_t v99 = 0;
          a2 = v294;
          unint64_t v93 = (unint64_t)v295;
LABEL_195:
          if (v99) {
            operator delete(v99);
          }
          operator delete(v64);
          if (!v296) {
            return std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(uint64_t ***)(a1 + 8), (uint64_t)a2, (uint64_t)a2);
          }
LABEL_198:
          unsigned __int8 v291 = a2[81];
          int v128 = *((_DWORD *)a2 + 22);
          uint64_t v129 = a2;
          uint64_t v130 = a2[1];
          uint64_t v131 = *v129;
          LOBYTE(v309) = *v129;
          BYTE1(v309) = v130;
          uint64_t v286 = *(void *)(v129 + 4);
          *(void *)((char *)&v309 + 4) = v286;
          *(_OWORD *)&v310[8] = *v293;
          uint64_t v132 = v129[41];
          uint64_t v133 = v129[40];
          v310[24] = v129[40];
          v310[25] = v132;
          uint64_t v283 = *(void *)(v129 + 44);
          *(void *)&v310[28] = v283;
          BOOL v134 = (void *)(v54 + 304);
          long long v311 = *(_OWORD *)v93;
          unint64_t v135 = (char *)std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>((void *)(v54 + 304), (unsigned __int8 *)&v309);
          if (v135) {
            goto LABEL_297;
          }
          unint64_t v136 = (v130
                + ((v131 - 0x61C8864680B583EBLL) << 6)
                + ((unint64_t)(v131 - 0x61C8864680B583EBLL) >> 2)
                - 0x61C8864680B583EBLL) ^ (v131 - 0x61C8864680B583EBLL);
          unint64_t v137 = ((v136 << 6) + (int)v286 + (v136 >> 2) - 0x61C8864680B583EBLL) ^ v136;
          if ((*(void *)&v310[12] & 0xFF00000000) != 0) {
            uint64_t v138 = 2 * *(unsigned int *)&v310[12];
          }
          else {
            uint64_t v138 = 0;
          }
          unint64_t v139 = (v138 | ((unint64_t)*(unsigned int *)&v310[20] << 33)) ^ v137 ^ ((v137 << 6)
                                                                                       + SHIDWORD(v286)
                                                                                       + (v137 >> 2)
                                                                                       - 0x61C8864680B583EBLL);
          unint64_t v140 = (v132
                + ((v133 - 0x61C8864680B583EBLL) << 6)
                + ((unint64_t)(v133 - 0x61C8864680B583EBLL) >> 2)
                - 0x61C8864680B583EBLL) ^ (v133 - 0x61C8864680B583EBLL);
          unint64_t v141 = ((v140 << 6) + (int)v283 + (v140 >> 2) - 0x61C8864680B583EBLL) ^ v140;
          if ((*(void *)((unsigned char *)&v311 + 4) & 0xFF00000000) != 0) {
            uint64_t v143 = 2 * DWORD1(v311);
          }
          else {
            uint64_t v143 = 0;
          }
          uint64_t v142 = (v141 << 6) + SHIDWORD(v283) + (v141 >> 2) - 0x61C8864680B583EBLL;
          unint64_t v144 = ((v139 << 6)
                + (v139 >> 2)
                + ((v143 | ((unint64_t)HIDWORD(v311) << 33)) ^ v141 ^ v142)
                - 0x61C8864680B583EBLL) ^ v139;
          unint64_t v145 = *(void *)(v54 + 312);
          if (v145)
          {
            uint8x8_t v146 = (uint8x8_t)vcnt_s8((int8x8_t)v145);
            v146.i16[0] = vaddlv_u8(v146);
            if (v146.u32[0] > 1uLL)
            {
              unint64_t v93 = ((v139 << 6)
                   + (v139 >> 2)
                   + ((v143 | ((unint64_t)HIDWORD(v311) << 33)) ^ v141 ^ v142)
                   - 0x61C8864680B583EBLL) ^ v139;
              if (v144 >= v145) {
                unint64_t v93 = v144 % v145;
              }
            }
            else
            {
              unint64_t v93 = v144 & (v145 - 1);
            }
            unint64_t v147 = *(void ***)(*v134 + 8 * v93);
            if (v147)
            {
              unint64_t v135 = (char *)*v147;
              if (*v147)
              {
                if (v146.u32[0] >= 2uLL)
                {
                  while (1)
                  {
                    unint64_t v148 = *((void *)v135 + 1);
                    if (v148 == v144)
                    {
                      if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100]((unsigned __int8 *)v135 + 16, (unsigned __int8 *)&v309))
                      {
                        goto LABEL_297;
                      }
                    }
                    else
                    {
                      if (v148 >= v145) {
                        v148 %= v145;
                      }
                      if (v148 != v93) {
                        goto LABEL_237;
                      }
                    }
                    unint64_t v135 = *(char **)v135;
                    if (!v135) {
                      goto LABEL_237;
                    }
                  }
                }
                do
                {
                  uint64_t v149 = *((void *)v135 + 1);
                  if (v149 == v144)
                  {
                    if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100]((unsigned __int8 *)v135 + 16, (unsigned __int8 *)&v309))
                    {
                      uint64_t v54 = v287;
                      goto LABEL_297;
                    }
                  }
                  else if ((v149 & (v145 - 1)) != v93)
                  {
                    break;
                  }
                  unint64_t v135 = *(char **)v135;
                }
                while (v135);
                uint64_t v54 = v287;
              }
            }
          }
LABEL_237:
          unint64_t v135 = (char *)operator new(0x78uLL);
          __p[0] = v135;
          double v288 = (void *)(v54 + 320);
          __p[1] = (void *)(v54 + 320);
          *(void *)unint64_t v135 = 0;
          *((void *)v135 + 1) = v144;
          v135[16] = v131;
          v135[17] = v130;
          *(void *)(v135 + 20) = v286;
          *(_OWORD *)(v135 + 40) = *v293;
          v135[56] = v133;
          v135[57] = v132;
          *(void *)(v135 + 60) = v283;
          *((_OWORD *)v135 + 5) = *v295;
          *((void *)v135 + 13) = 0;
          *((void *)v135 + 14) = 0;
          *((void *)v135 + 12) = 0;
          LOBYTE(__p[2]) = 1;
          float v151 = (float)(unint64_t)(*(void *)(v54 + 328) + 1);
          float v152 = *(float *)(v54 + 336);
          if (v145 && (float)(v152 * (float)v145) >= v151)
          {
LABEL_287:
            char v173 = (void *)*v134;
            double v174 = *(void **)(*v134 + 8 * v93);
            if (v174)
            {
              *(void *)unint64_t v135 = *v174;
            }
            else
            {
              *(void *)unint64_t v135 = *v288;
              void *v288 = v135;
              v173[v93] = v288;
              if (!*(void *)v135)
              {
LABEL_296:
                ++*(void *)(v54 + 328);
LABEL_297:
                uint64_t v176 = *((void *)v296 + 1);
                if ((char *)v176 != v296)
                {
                  uint64_t v177 = (void *)*((void *)v135 + 13);
                  while (1)
                  {
                    uint64_t v179 = *(void *)(v176 + 16);
                    unint64_t v180 = *((void *)v135 + 14);
                    if ((unint64_t)v177 >= v180) {
                      break;
                    }
                    *uint64_t v177 = v179;
                    uint64_t v178 = v177 + 1;
LABEL_300:
                    *((void *)v135 + 13) = v178;
                    uint64_t v176 = *(void *)(v176 + 8);
                    uint64_t v177 = v178;
                    if ((char *)v176 == v296) {
                      goto LABEL_329;
                    }
                  }
                  uint64_t v181 = (char *)*((void *)v135 + 12);
                  uint64_t v182 = ((char *)v177 - v181) >> 3;
                  unint64_t v183 = v182 + 1;
                  if ((unint64_t)(v182 + 1) >> 61) {
                    abort();
                  }
                  uint64_t v184 = v180 - (void)v181;
                  if (v184 >> 2 > v183) {
                    unint64_t v183 = v184 >> 2;
                  }
                  if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v185 = v183;
                  }
                  if (v185)
                  {
                    if (v185 >> 61) {
                      goto LABEL_520;
                    }
                    uint8x8_t v186 = (char *)operator new(8 * v185);
                  }
                  else
                  {
                    uint8x8_t v186 = 0;
                  }
                  unint64_t v187 = &v186[8 * v182];
                  *(void *)unint64_t v187 = v179;
                  uint64_t v178 = v187 + 8;
                  if (v177 == (void *)v181)
                  {
LABEL_317:
                    *((void *)v135 + 12) = v187;
                    *((void *)v135 + 13) = v178;
                    *((void *)v135 + 14) = &v186[8 * v185];
                    if (v177) {
                      operator delete(v177);
                    }
                    goto LABEL_300;
                  }
                  unint64_t v188 = (char *)(v177 - 1) - v181;
                  if (v188 >= 0x168)
                  {
                    if (&v186[(char *)v177 - v181 - 8 - (v188 & 0xFFFFFFFFFFFFFFF8)] > &v186[(char *)v177 - v181 - 8])
                    {
                      unsigned int v189 = (char *)v177;
                    }
                    else if ((void *)((char *)v177 - (v188 & 0xFFFFFFFFFFFFFFF8) - 8) > v177 - 1)
                    {
                      unsigned int v189 = (char *)v177;
                    }
                    else if ((unint64_t)(v181 - v186) >= 0x20)
                    {
                      uint64_t v191 = (v188 >> 3) + 1;
                      unsigned int v189 = (char *)&v177[-(v191 & 0x3FFFFFFFFFFFFFFCLL)];
                      __double2 v192 = &v186[8 * v182 - 16];
                      unint64_t v193 = (long long *)(v177 - 2);
                      uint64_t v194 = v191 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v195 = *v193;
                        *((_OWORD *)v192 - 1) = *(v193 - 1);
                        *(_OWORD *)__double2 v192 = v195;
                        v192 -= 32;
                        v193 -= 2;
                        v194 -= 4;
                      }
                      while (v194);
                      v187 -= 8 * (v191 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v191 == (v191 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_316;
                      }
                    }
                    else
                    {
                      unsigned int v189 = (char *)v177;
                    }
                  }
                  else
                  {
                    unsigned int v189 = (char *)v177;
                  }
                  do
                  {
                    uint64_t v190 = *((void *)v189 - 1);
                    v189 -= 8;
                    *((void *)v187 - 1) = v190;
                    v187 -= 8;
                  }
                  while (v189 != v181);
LABEL_316:
                  uint64_t v177 = (void *)*((void *)v135 + 12);
                  goto LABEL_317;
                }
LABEL_329:
                signed int v196 = vcvtmd_s64_f64((double)v128 / (double)(1 << v291));
                uint64_t v197 = v294[1];
                uint64_t v198 = *v294;
                LOBYTE(v309) = *v294;
                BYTE1(v309) = v197;
                uint64_t v199 = (uint64_t)&v309;
                uint64_t v292 = *(void *)(v294 + 4);
                *(void *)((char *)&v309 + 4) = v292;
                *(_OWORD *)&v310[8] = *v293;
                v310[24] = v196;
                double v200 = (void *)(v54 + 344);
                double v201 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::__unordered_map_hasher<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,true>,std::__unordered_map_equal<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::equal_to<md::FlyoverOctileWorld>,md::FlyoverOctileWorldHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>>>::find<md::FlyoverOctileWorld>((void *)(v54 + 344), (unsigned __int8 *)&v309);
                if (v201)
                {
LABEL_457:
                  uint64_t v242 = *((void *)v296 + 1);
                  a2 = v294;
                  if ((char *)v242 != v296)
                  {
                    while (1)
                    {
                      uint64_t v244 = *(void *)(v242 + 16);
                      double v246 = (char *)*((void *)v201 + 9);
                      unint64_t v245 = *((void *)v201 + 10);
                      if ((unint64_t)v246 >= v245)
                      {
                        unsigned int v248 = (char *)*((void *)v201 + 8);
                        uint64_t v249 = (v246 - v248) >> 3;
                        unint64_t v250 = v249 + 1;
                        if ((unint64_t)(v249 + 1) >> 61) {
                          abort();
                        }
                        uint64_t v251 = v245 - (void)v248;
                        if (v251 >> 2 > v250) {
                          unint64_t v250 = v251 >> 2;
                        }
                        if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v252 = v250;
                        }
                        if (v252)
                        {
                          if (v252 >> 61) {
                            goto LABEL_520;
                          }
                          long long v253 = (char *)operator new(8 * v252);
                        }
                        else
                        {
                          long long v253 = 0;
                        }
                        long long v254 = &v253[8 * v249];
                        *(void *)long long v254 = v244;
                        int v247 = v254 + 8;
                        if (v246 != v248)
                        {
                          unint64_t v255 = v246 - 8 - v248;
                          if (v255 < 0x58) {
                            goto LABEL_527;
                          }
                          if ((unint64_t)(v248 - v253) < 0x20) {
                            goto LABEL_527;
                          }
                          uint64_t v256 = (v255 >> 3) + 1;
                          uint64_t v257 = &v253[8 * v249 - 16];
                          uint64_t v258 = (long long *)(v246 - 16);
                          uint64_t v259 = v256 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            long long v260 = *v258;
                            *((_OWORD *)v257 - 1) = *(v258 - 1);
                            *(_OWORD *)uint64_t v257 = v260;
                            v257 -= 32;
                            v258 -= 2;
                            v259 -= 4;
                          }
                          while (v259);
                          v254 -= 8 * (v256 & 0x3FFFFFFFFFFFFFFCLL);
                          v246 -= 8 * (v256 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v256 != (v256 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_527:
                            do
                            {
                              uint64_t v261 = *((void *)v246 - 1);
                              v246 -= 8;
                              *((void *)v254 - 1) = v261;
                              v254 -= 8;
                            }
                            while (v246 != v248);
                          }
                          double v246 = (char *)*((void *)v201 + 8);
                        }
                        *((void *)v201 + 8) = v254;
                        *((void *)v201 + 9) = v247;
                        *((void *)v201 + 10) = &v253[8 * v252];
                        a2 = v294;
                        if (v246) {
                          operator delete(v246);
                        }
                      }
                      else
                      {
                        *(void *)double v246 = v244;
                        int v247 = v246 + 8;
                      }
                      *((void *)v201 + 9) = v247;
                      unint64_t v263 = (char *)*((void *)v201 + 12);
                      unint64_t v262 = *((void *)v201 + 13);
                      if ((unint64_t)v263 < v262)
                      {
                        *(_WORD *)unint64_t v263 = *((_WORD *)a2 + 20);
                        *(void *)(v263 + 4) = *(void *)(a2 + 44);
                        *(_OWORD *)(v263 + 24) = *v295;
                        int v243 = v263 + 40;
                      }
                      else
                      {
                        uint64_t v264 = (char *)*((void *)v201 + 11);
                        unint64_t v265 = 0xCCCCCCCCCCCCCCCDLL * ((v263 - v264) >> 3) + 1;
                        if (v265 > 0x666666666666666) {
                          abort();
                        }
                        unint64_t v266 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v262 - (void)v264) >> 3);
                        if (2 * v266 > v265) {
                          unint64_t v265 = 2 * v266;
                        }
                        if (v266 >= 0x333333333333333) {
                          unint64_t v267 = 0x666666666666666;
                        }
                        else {
                          unint64_t v267 = v265;
                        }
                        if (v267)
                        {
                          if (v267 > 0x666666666666666) {
                            goto LABEL_520;
                          }
                          uint64_t v268 = (char *)operator new(40 * v267);
                          a2 = v294;
                        }
                        else
                        {
                          uint64_t v268 = 0;
                        }
                        char v269 = &v268[8 * ((v263 - v264) >> 3)];
                        *(_WORD *)char v269 = *((_WORD *)a2 + 20);
                        *(void *)(v269 + 4) = *(void *)(a2 + 44);
                        *(_OWORD *)(v269 + 24) = *v295;
                        if (v263 == v264)
                        {
                          unsigned int v272 = &v268[8 * ((v263 - v264) >> 3)];
                        }
                        else
                        {
                          uint64_t v270 = 0;
                          do
                          {
                            int v271 = &v269[v270];
                            *((_WORD *)v271 - 20) = *(_WORD *)&v263[v270 - 40];
                            *(void *)(v271 - 36) = *(void *)&v263[v270 - 36];
                            *((_OWORD *)v271 - 1) = *(_OWORD *)&v263[v270 - 16];
                            v270 -= 40;
                          }
                          while (&v263[v270] != v264);
                          unsigned int v272 = &v269[v270];
                          unint64_t v263 = (char *)*((void *)v201 + 11);
                        }
                        int v243 = v269 + 40;
                        *((void *)v201 + 11) = v272;
                        *((void *)v201 + 12) = v269 + 40;
                        *((void *)v201 + 13) = &v268[40 * v267];
                        if (v263) {
                          operator delete(v263);
                        }
                      }
                      *((void *)v201 + 12) = v243;
                      uint64_t v242 = *(void *)(v242 + 8);
                      if ((char *)v242 == v296) {
                        return std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(uint64_t ***)(a1 + 8), (uint64_t)a2, (uint64_t)a2);
                      }
                    }
                  }
                  return std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(uint64_t ***)(a1 + 8), (uint64_t)a2, (uint64_t)a2);
                }
                memset(__p, 0, 48);
                uint64_t v204 = *(void *)&v310[12] & 0xFF00000000;
                uint64_t v205 = 2 * *(unsigned int *)&v310[12];
                if ((*(void *)&v310[12] & 0xFF00000000) == 0) {
                  uint64_t v205 = 0;
                }
                unint64_t v202 = (v197
                      + ((v198 - 0x61C8864680B583EBLL) << 6)
                      + ((unint64_t)(v198 - 0x61C8864680B583EBLL) >> 2)
                      - 0x61C8864680B583EBLL) ^ (v198 - 0x61C8864680B583EBLL);
                unint64_t v203 = ((v202 << 6) + (int)v292 + (v202 >> 2) - 0x61C8864680B583EBLL) ^ v202;
                unint64_t v206 = (v205 | ((unint64_t)*(unsigned int *)&v310[20] << 33)) ^ v203 ^ ((v203 << 6)
                                                                                             + SHIDWORD(v292)
                                                                                             + (v203 >> 2)
                                                                                             - 0x61C8864680B583EBLL);
                unint64_t v207 = ((v206 << 6) + v196 + (v206 >> 2) - 0x61C8864680B583EBLL) ^ v206;
                unint64_t v208 = *(void *)(v54 + 352);
                if (v208)
                {
                  uint8x8_t v209 = (uint8x8_t)vcnt_s8((int8x8_t)v208);
                  v209.i16[0] = vaddlv_u8(v209);
                  if (v209.u32[0] > 1uLL)
                  {
                    uint64_t v199 = ((v206 << 6) + v196 + (v206 >> 2) - 0x61C8864680B583EBLL) ^ v206;
                    if (v207 >= v208) {
                      uint64_t v199 = v207 % v208;
                    }
                  }
                  else
                  {
                    uint64_t v199 = v207 & (v208 - 1);
                  }
                  unint64_t v210 = *(void ***)(*v200 + 8 * v199);
                  if (v210)
                  {
                    double v201 = (unsigned __int8 *)*v210;
                    if (*v210)
                    {
                      if (v209.u32[0] <= 1uLL)
                      {
                        unint64_t v211 = v208 - 1;
                        if (!v204)
                        {
                          while (1)
                          {
                            uint64_t v213 = *((void *)v201 + 1);
                            if (v213 == v207)
                            {
                              if (v201[40] == v310[8]
                                && v201[16] == v198
                                && v201[17] == v197
                                && *(void *)(v201 + 20) == v292
                                && *((_DWORD *)v201 + 13) == *(_DWORD *)&v310[20]
                                && !v201[48]
                                && v201[56] == v196)
                              {
                                goto LABEL_455;
                              }
                            }
                            else if ((v213 & v211) != v199)
                            {
                              goto LABEL_395;
                            }
                            double v201 = *(unsigned __int8 **)v201;
                            if (!v201) {
                              goto LABEL_395;
                            }
                          }
                        }
                        while (1)
                        {
                          uint64_t v212 = *((void *)v201 + 1);
                          if (v212 == v207)
                          {
                            if (v201[40] == v310[8]
                              && v201[16] == v198
                              && v201[17] == v197
                              && *(void *)(v201 + 20) == v292
                              && *((_DWORD *)v201 + 13) == *(_DWORD *)&v310[20]
                              && v201[48]
                              && *((_DWORD *)v201 + 11) == *(_DWORD *)&v310[12]
                              && v201[56] == v196)
                            {
                              goto LABEL_455;
                            }
                          }
                          else if ((v212 & v211) != v199)
                          {
                            goto LABEL_395;
                          }
                          double v201 = *(unsigned __int8 **)v201;
                          if (!v201) {
                            goto LABEL_395;
                          }
                        }
                      }
                      if (!v204)
                      {
                        while (1)
                        {
                          unint64_t v215 = *((void *)v201 + 1);
                          if (v215 == v207)
                          {
                            if (v201[40] == v310[8]
                              && v201[16] == v198
                              && v201[17] == v197
                              && *(void *)(v201 + 20) == v292
                              && *((_DWORD *)v201 + 13) == *(_DWORD *)&v310[20]
                              && !v201[48]
                              && v201[56] == v196)
                            {
                              goto LABEL_455;
                            }
                          }
                          else
                          {
                            if (v215 >= v208) {
                              v215 %= v208;
                            }
                            if (v215 != v199) {
                              goto LABEL_395;
                            }
                          }
                          double v201 = *(unsigned __int8 **)v201;
                          if (!v201) {
                            goto LABEL_395;
                          }
                        }
                      }
                      do
                      {
                        unint64_t v214 = *((void *)v201 + 1);
                        if (v214 == v207)
                        {
                          if (v201[40] == v310[8]
                            && v201[16] == v198
                            && v201[17] == v197
                            && *(void *)(v201 + 20) == v292
                            && *((_DWORD *)v201 + 13) == *(_DWORD *)&v310[20]
                            && v201[48]
                            && *((_DWORD *)v201 + 11) == *(_DWORD *)&v310[12]
                            && v201[56] == v196)
                          {
                            goto LABEL_455;
                          }
                        }
                        else
                        {
                          if (v214 >= v208) {
                            v214 %= v208;
                          }
                          if (v214 != v199) {
                            break;
                          }
                        }
                        double v201 = *(unsigned __int8 **)v201;
                      }
                      while (v201);
                    }
                  }
                }
LABEL_395:
                double v201 = (unsigned __int8 *)operator new(0x70uLL);
                unsigned int v216 = (void *)(v54 + 360);
                double v323 = v201;
                uint64_t v324 = v54 + 360;
                *(void *)double v201 = 0;
                *((void *)v201 + 1) = v207;
                v201[16] = v198;
                v201[17] = v197;
                *(void *)(v201 + 20) = v292;
                *(_OWORD *)(v201 + 40) = *v293;
                v201[56] = v196;
                *((void *)v201 + 8) = 0;
                *((void *)v201 + 9) = 0;
                __p[0] = 0;
                __p[1] = 0;
                *((void *)v201 + 10) = 0;
                *((void *)v201 + 11) = 0;
                *((void *)v201 + 12) = 0;
                *((void *)v201 + 13) = 0;
                memset(&__p[2], 0, 32);
                char v325 = 1;
                float v217 = (float)(unint64_t)(*(void *)(v54 + 368) + 1);
                float v218 = *(float *)(v54 + 376);
                if (v208 && (float)(v218 * (float)v208) >= v217)
                {
LABEL_445:
                  double v239 = (void *)*v200;
                  double v240 = *(void **)(*v200 + 8 * v199);
                  if (v240)
                  {
                    *(void *)double v201 = *v240;
                  }
                  else
                  {
                    *(void *)double v201 = *v216;
                    *unsigned int v216 = v201;
                    v239[v199] = v216;
                    if (!*(void *)v201) {
                      goto LABEL_454;
                    }
                    unint64_t v241 = *(void *)(*(void *)v201 + 8);
                    if ((v208 & (v208 - 1)) != 0)
                    {
                      if (v241 >= v208) {
                        v241 %= v208;
                      }
                    }
                    else
                    {
                      v241 &= v208 - 1;
                    }
                    double v240 = (void *)(*v200 + 8 * v241);
                  }
                  void *v240 = v201;
LABEL_454:
                  ++*(void *)(v54 + 368);
LABEL_455:
                  if (__p[0]) {
                    operator delete(__p[0]);
                  }
                  goto LABEL_457;
                }
                BOOL v219 = 1;
                if (v208 >= 3) {
                  BOOL v219 = (v208 & (v208 - 1)) != 0;
                }
                unint64_t v220 = v219 | (2 * v208);
                unint64_t v221 = vcvtps_u32_f32(v217 / v218);
                if (v220 <= v221) {
                  size_t prime = v221;
                }
                else {
                  size_t prime = v220;
                }
                if (prime == 1)
                {
                  size_t prime = 2;
                }
                else if ((prime & (prime - 1)) != 0)
                {
                  size_t prime = std::__next_prime(prime);
                  unint64_t v208 = *(void *)(v54 + 352);
                }
                if (prime <= v208)
                {
                  if (prime >= v208) {
                    goto LABEL_432;
                  }
                  unint64_t v233 = vcvtps_u32_f32((float)*(unint64_t *)(v54 + 368) / *(float *)(v54 + 376));
                  if (v208 < 3
                    || (uint8x8_t v234 = (uint8x8_t)vcnt_s8((int8x8_t)v208), v234.i16[0] = vaddlv_u8(v234), v234.u32[0] > 1uLL))
                  {
                    unint64_t v233 = std::__next_prime(v233);
                  }
                  else
                  {
                    uint64_t v235 = 1 << -(char)__clz(v233 - 1);
                    if (v233 >= 2) {
                      unint64_t v233 = v235;
                    }
                  }
                  if (prime <= v233) {
                    size_t prime = v233;
                  }
                  if (prime >= v208)
                  {
                    unint64_t v208 = *(void *)(v54 + 352);
LABEL_432:
                    if ((v208 & (v208 - 1)) != 0)
                    {
                      if (v207 >= v208) {
                        uint64_t v199 = v207 % v208;
                      }
                      else {
                        uint64_t v199 = v207;
                      }
                    }
                    else
                    {
                      uint64_t v199 = (v208 - 1) & v207;
                    }
                    goto LABEL_445;
                  }
                  if (!prime)
                  {
                    uint64_t v273 = (void *)*v200;
                    *double v200 = 0;
                    if (v273) {
                      operator delete(v273);
                    }
                    unint64_t v208 = 0;
                    *(void *)(v54 + 352) = 0;
                    goto LABEL_432;
                  }
                }
                if (!(prime >> 61))
                {
                  int8x8_t v223 = operator new(8 * prime);
                  uint8x8_t v224 = (void *)*v200;
                  *double v200 = v223;
                  if (v224) {
                    operator delete(v224);
                  }
                  uint64_t v225 = 0;
                  *(void *)(v54 + 352) = prime;
                  do
                    *(void *)(*v200 + 8 * v225++) = 0;
                  while (prime != v225);
                  char v226 = (void *)*v216;
                  if (!*v216) {
                    goto LABEL_431;
                  }
                  size_t v227 = v226[1];
                  size_t v228 = prime - 1;
                  if ((prime & (prime - 1)) == 0)
                  {
                    size_t v229 = v227 & v228;
                    *(void *)(*v200 + 8 * v229) = v216;
                    for (uint64_t j = (void *)*v226; *v226; uint64_t j = (void *)*v226)
                    {
                      size_t v231 = j[1] & v228;
                      if (v231 == v229)
                      {
                        char v226 = j;
                      }
                      else if (*(void *)(*v200 + 8 * v231))
                      {
                        void *v226 = *j;
                        uint64_t v232 = 8 * v231;
                        *uint64_t j = **(void **)(*v200 + v232);
                        **(void **)(*v200 + v232) = j;
                      }
                      else
                      {
                        *(void *)(*v200 + 8 * v231) = v226;
                        char v226 = j;
                        size_t v229 = v231;
                      }
                    }
LABEL_431:
                    unint64_t v208 = prime;
                    goto LABEL_432;
                  }
                  if (v227 >= prime) {
                    v227 %= prime;
                  }
                  *(void *)(*v200 + 8 * v227) = v216;
                  double v236 = (void *)*v226;
                  if (!*v226) {
                    goto LABEL_431;
                  }
                  while (1)
                  {
                    size_t v238 = v236[1];
                    if (v238 >= prime) {
                      v238 %= prime;
                    }
                    if (v238 != v227)
                    {
                      if (!*(void *)(*v200 + 8 * v238))
                      {
                        *(void *)(*v200 + 8 * v238) = v226;
                        goto LABEL_436;
                      }
                      void *v226 = *v236;
                      uint64_t v237 = 8 * v238;
                      *double v236 = **(void **)(*v200 + v237);
                      **(void **)(*v200 + v237) = v236;
                      double v236 = v226;
                    }
                    size_t v238 = v227;
LABEL_436:
                    char v226 = v236;
                    double v236 = (void *)*v236;
                    size_t v227 = v238;
                    if (!v236) {
                      goto LABEL_431;
                    }
                  }
                }
LABEL_520:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              unint64_t v175 = *(void *)(*(void *)v135 + 8);
              if ((v145 & (v145 - 1)) != 0)
              {
                if (v175 >= v145) {
                  v175 %= v145;
                }
              }
              else
              {
                v175 &= v145 - 1;
              }
              double v174 = (void *)(*v134 + 8 * v175);
            }
            *double v174 = v135;
            goto LABEL_296;
          }
          BOOL v153 = 1;
          if (v145 >= 3) {
            BOOL v153 = (v145 & (v145 - 1)) != 0;
          }
          unint64_t v154 = v153 | (2 * v145);
          unint64_t v155 = vcvtps_u32_f32(v151 / v152);
          if (v154 <= v155) {
            size_t v156 = v155;
          }
          else {
            size_t v156 = v154;
          }
          if (v156 == 1)
          {
            size_t v156 = 2;
          }
          else if ((v156 & (v156 - 1)) != 0)
          {
            size_t v156 = std::__next_prime(v156);
            unint64_t v145 = *(void *)(v54 + 312);
          }
          if (v156 <= v145)
          {
            if (v156 >= v145) {
              goto LABEL_274;
            }
            unint64_t v167 = vcvtps_u32_f32((float)*(unint64_t *)(v54 + 328) / *(float *)(v54 + 336));
            if (v145 < 3
              || (uint8x8_t v168 = (uint8x8_t)vcnt_s8((int8x8_t)v145), v168.i16[0] = vaddlv_u8(v168), v168.u32[0] > 1uLL))
            {
              unint64_t v167 = std::__next_prime(v167);
            }
            else
            {
              uint64_t v169 = 1 << -(char)__clz(v167 - 1);
              if (v167 >= 2) {
                unint64_t v167 = v169;
              }
            }
            if (v156 <= v167) {
              size_t v156 = v167;
            }
            if (v156 >= v145)
            {
              unint64_t v145 = *(void *)(v54 + 312);
LABEL_274:
              if ((v145 & (v145 - 1)) != 0)
              {
                if (v144 >= v145) {
                  unint64_t v93 = v144 % v145;
                }
                else {
                  unint64_t v93 = v144;
                }
              }
              else
              {
                unint64_t v93 = (v145 - 1) & v144;
              }
              goto LABEL_287;
            }
            if (!v156)
            {
              unint64_t v274 = (void *)*v134;
              *BOOL v134 = 0;
              if (v274) {
                operator delete(v274);
              }
              unint64_t v145 = 0;
              *(void *)(v54 + 312) = 0;
              goto LABEL_274;
            }
          }
          if (v156 >> 61) {
            goto LABEL_520;
          }
          BOOL v157 = operator new(8 * v156);
          int32x2_t v158 = (void *)*v134;
          *BOOL v134 = v157;
          if (v158) {
            operator delete(v158);
          }
          uint64_t v159 = 0;
          *(void *)(v54 + 312) = v156;
          do
            *(void *)(*v134 + 8 * v159++) = 0;
          while (v156 != v159);
          int v160 = (void *)*v288;
          if (!*v288)
          {
LABEL_273:
            unint64_t v145 = v156;
            goto LABEL_274;
          }
          size_t v161 = v160[1];
          size_t v162 = v156 - 1;
          if ((v156 & (v156 - 1)) == 0)
          {
            size_t v163 = v161 & v162;
            *(void *)(*v134 + 8 * v163) = v288;
            for (k = (void *)*v160; *v160; k = (void *)*v160)
            {
              size_t v165 = k[1] & v162;
              if (v165 == v163)
              {
                int v160 = k;
              }
              else if (*(void *)(*v134 + 8 * v165))
              {
                *int v160 = *k;
                uint64_t v166 = 8 * v165;
                void *k = **(void **)(*v134 + v166);
                **(void **)(*v134 + v166) = k;
              }
              else
              {
                *(void *)(*v134 + 8 * v165) = v160;
                int v160 = k;
                size_t v163 = v165;
              }
            }
            goto LABEL_273;
          }
          if (v161 >= v156) {
            v161 %= v156;
          }
          *(void *)(*v134 + 8 * v161) = v288;
          uint64_t v170 = (void *)*v160;
          if (!*v160) {
            goto LABEL_273;
          }
          while (1)
          {
            size_t v172 = v170[1];
            if (v172 >= v156) {
              v172 %= v156;
            }
            if (v172 != v161)
            {
              if (!*(void *)(*v134 + 8 * v172))
              {
                *(void *)(*v134 + 8 * v172) = v160;
                goto LABEL_278;
              }
              *int v160 = *v170;
              uint64_t v171 = 8 * v172;
              void *v170 = **(void **)(*v134 + v171);
              **(void **)(*v134 + v171) = v170;
              uint64_t v170 = v160;
            }
            size_t v172 = v161;
LABEL_278:
            int v160 = v170;
            uint64_t v170 = (void *)*v170;
            size_t v161 = v172;
            if (!v170) {
              goto LABEL_273;
            }
          }
        }
        unint64_t v127 = *(void *)(*(void *)v102 + 8);
        if ((v78 & (v78 - 1)) != 0)
        {
          if (v127 >= v78) {
            v127 %= v78;
          }
        }
        else
        {
          v127 &= v78 - 1;
        }
        uint8x8_t v126 = (void *)(*v49 + 8 * v127);
      }
      *uint8x8_t v126 = v102;
      goto LABEL_194;
    }
    BOOL v105 = 1;
    if (v78 >= 3) {
      BOOL v105 = (v78 & (v78 - 1)) != 0;
    }
    unint64_t v106 = v105 | (2 * v78);
    unint64_t v107 = vcvtps_u32_f32(v103 / v104);
    if (v106 <= v107) {
      size_t v108 = v107;
    }
    else {
      size_t v108 = v106;
    }
    if (v108 == 1)
    {
      size_t v108 = 2;
    }
    else if ((v108 & (v108 - 1)) != 0)
    {
      size_t v108 = std::__next_prime(v108);
      unint64_t v78 = *(void *)(v44 + 192);
    }
    if (v108 <= v78)
    {
      if (v108 >= v78) {
        goto LABEL_172;
      }
      unint64_t v119 = vcvtps_u32_f32((float)*(unint64_t *)(v44 + 208) / *(float *)(v44 + 216));
      if (v78 < 3 || (uint8x8_t v120 = (uint8x8_t)vcnt_s8((int8x8_t)v78), v120.i16[0] = vaddlv_u8(v120), v120.u32[0] > 1uLL))
      {
        unint64_t v119 = std::__next_prime(v119);
      }
      else
      {
        uint64_t v121 = 1 << -(char)__clz(v119 - 1);
        if (v119 >= 2) {
          unint64_t v119 = v121;
        }
      }
      if (v108 <= v119) {
        size_t v108 = v119;
      }
      if (v108 >= v78)
      {
        unint64_t v78 = *(void *)(v44 + 192);
LABEL_172:
        if ((v78 & (v78 - 1)) != 0)
        {
          if (v77 >= v78) {
            uint64_t v65 = v77 % v78;
          }
          else {
            uint64_t v65 = v77;
          }
        }
        else
        {
          uint64_t v65 = (v78 - 1) & v77;
        }
        goto LABEL_185;
      }
      if (!v108)
      {
        unint64_t v150 = (void *)*v49;
        *uint64_t v49 = 0;
        if (v150) {
          operator delete(v150);
        }
        unint64_t v78 = 0;
        *(void *)(v44 + 192) = 0;
        goto LABEL_172;
      }
    }
    if (v108 >> 61) {
      goto LABEL_520;
    }
    unint64_t v109 = operator new(8 * v108);
    uint64_t v110 = (void *)*v49;
    *uint64_t v49 = v109;
    if (v110) {
      operator delete(v110);
    }
    uint64_t v111 = 0;
    *(void *)(v44 + 192) = v108;
    do
      *(void *)(*v49 + 8 * v111++) = 0;
    while (v108 != v111);
    uint64_t v112 = (void *)*v285;
    if (!*v285)
    {
LABEL_171:
      unint64_t v78 = v108;
      goto LABEL_172;
    }
    size_t v113 = v112[1];
    size_t v114 = v108 - 1;
    if ((v108 & (v108 - 1)) == 0)
    {
      size_t v115 = v113 & v114;
      *(void *)(*v49 + 8 * v115) = v285;
      for (m = (void *)*v112; *v112; m = (void *)*v112)
      {
        size_t v117 = m[1] & v114;
        if (v117 == v115)
        {
          uint64_t v112 = m;
        }
        else if (*(void *)(*v49 + 8 * v117))
        {
          *uint64_t v112 = *m;
          uint64_t v118 = 8 * v117;
          void *m = **(void **)(*v49 + v118);
          **(void **)(*v49 + v118) = m;
        }
        else
        {
          *(void *)(*v49 + 8 * v117) = v112;
          uint64_t v112 = m;
          size_t v115 = v117;
        }
      }
      goto LABEL_171;
    }
    if (v113 >= v108) {
      v113 %= v108;
    }
    *(void *)(*v49 + 8 * v113) = v285;
    unint64_t v122 = (void *)*v112;
    if (!*v112) {
      goto LABEL_171;
    }
    while (1)
    {
      size_t v124 = v122[1];
      if (v124 >= v108) {
        v124 %= v108;
      }
      if (v124 != v113)
      {
        if (!*(void *)(*v49 + 8 * v124))
        {
          *(void *)(*v49 + 8 * v124) = v112;
          goto LABEL_176;
        }
        *uint64_t v112 = *v122;
        uint64_t v123 = 8 * v124;
        *unint64_t v122 = **(void **)(*v49 + v123);
        **(void **)(*v49 + v123) = v122;
        unint64_t v122 = v112;
      }
      size_t v124 = v113;
LABEL_176:
      uint64_t v112 = v122;
      unint64_t v122 = (void *)*v122;
      size_t v113 = v124;
      if (!v122) {
        goto LABEL_171;
      }
    }
  }
  uint64_t v51 = v50;
  unint64_t v53 = (unsigned __int8 *)v50[9];
  unint64_t v52 = v50[10];
  if ((unint64_t)v53 >= v52)
  {
    uint64_t v58 = v50[8];
    unint64_t v59 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)&v53[-v58] >> 3) + 1;
    if (v59 > 0x186186186186186) {
      abort();
    }
    uint64_t v54 = v44;
    unint64_t v60 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v52 - v58) >> 3);
    if (2 * v60 > v59) {
      unint64_t v59 = 2 * v60;
    }
    if (v60 >= 0xC30C30C30C30C3) {
      unint64_t v61 = 0x186186186186186;
    }
    else {
      unint64_t v61 = v59;
    }
    if (v61)
    {
      if (v61 > 0x186186186186186) {
        goto LABEL_520;
      }
      int v62 = (char *)operator new(168 * v61);
    }
    else
    {
      int v62 = 0;
    }
    unint64_t v80 = (unsigned __int8 *)&v62[8 * ((uint64_t)&v53[-v58] >> 3)];
    *unint64_t v80 = v41;
    v80[1] = v42;
    *(void *)(v80 + 4) = v43;
    *(_OWORD *)(v80 + 24) = *(_OWORD *)&v336[12];
    v80[40] = 0;
    v80[144] = 0;
    if ((v11 & 1) == 0)
    {
      v80[40] = v289;
      *(_OWORD *)(v80 + 41) = v328[0];
      *((void *)v80 + 7) = *(void *)((char *)v328 + 15);
      uint8x8_t v81 = &v62[8 * ((uint64_t)&v53[-v58] >> 3)];
      *((_OWORD *)v81 + 4) = v326;
      *((double *)v81 + 10) = v327;
      *((double *)v81 + 11) = v4;
      long long v82 = v317;
      *((_OWORD *)v81 + 6) = v316;
      *((_OWORD *)v81 + 7) = v82;
      *((_OWORD *)v81 + 8) = v318;
      v80[144] = 1;
    }
    float32x2_t v83 = (float *)&v62[8 * ((uint64_t)&v53[-v58] >> 3)];
    *((unsigned char *)v83 + 152) = v284;
    int v84 = &v62[168 * v61];
    v83[39] = a4;
    *((unsigned char *)v83 + 160) = v282;
    double v56 = v80 + 168;
    if (v53 != (unsigned __int8 *)v58)
    {
      uint64_t v85 = 0;
      do
      {
        unint64_t v87 = (char *)&v80[v85];
        unint64_t v88 = &v53[v85];
        *((_WORD *)v87 - 84) = *(_WORD *)&v53[v85 - 168];
        *(void *)(v87 - 164) = *(void *)&v53[v85 - 164];
        *((_OWORD *)v87 - 9) = *(_OWORD *)&v53[v85 - 144];
        v80[v85 - 128] = 0;
        *(v87 - 24) = 0;
        if (v53[v85 - 24])
        {
          long long v89 = *((_OWORD *)v88 - 8);
          *(void *)&v80[v85 - 112] = *((void *)v88 - 14);
          *(_OWORD *)&v80[v85 - 128] = v89;
          long long v90 = *(_OWORD *)(v88 - 104);
          *((void *)v87 - 11) = *((void *)v88 - 11);
          *(_OWORD *)(v87 - 104) = v90;
          *((void *)v87 - 10) = *((void *)v88 - 10);
          long long v91 = *(_OWORD *)(v88 - 72);
          long long v92 = *(_OWORD *)(v88 - 56);
          *(_OWORD *)(v87 - 40) = *(_OWORD *)(v88 - 40);
          *(_OWORD *)(v87 - 56) = v92;
          *(_OWORD *)(v87 - 72) = v91;
          *(v87 - 24) = 1;
        }
        uint64_t v86 = *((void *)v88 - 2);
        *(v87 - 8) = *(v88 - 8);
        *((void *)v87 - 2) = v86;
        v85 -= 168;
      }
      while (&v53[v85] != (unsigned __int8 *)v58);
      v80 += v85;
      unint64_t v53 = (unsigned __int8 *)v51[8];
    }
    v51[8] = (uint64_t)v80;
    v51[9] = (uint64_t)v56;
    v51[10] = (uint64_t)v84;
    a2 = v294;
    if (v53) {
      operator delete(v53);
    }
  }
  else
  {
    *unint64_t v53 = v41;
    v53[1] = v42;
    *(void *)(v53 + 4) = v43;
    *(_OWORD *)(v53 + 24) = *(_OWORD *)&v336[12];
    v53[40] = 0;
    v53[144] = 0;
    uint64_t v54 = v44;
    if ((v11 & 1) == 0)
    {
      v53[40] = v289;
      *(_OWORD *)(v53 + 41) = v328[0];
      *((void *)v53 + 7) = *(void *)((char *)v328 + 15);
      *((_OWORD *)v53 + 4) = v326;
      *((double *)v53 + 10) = v327;
      *((double *)v53 + 11) = v4;
      long long v55 = v317;
      *((_OWORD *)v53 + 6) = v316;
      *((_OWORD *)v53 + 7) = v55;
      *((_OWORD *)v53 + 8) = v318;
      v53[144] = 1;
    }
    v53[152] = v284;
    *((float *)v53 + 39) = a4;
    double v56 = v53 + 168;
    v53[160] = v282;
  }
  v51[9] = (uint64_t)v56;
  unint64_t v93 = (unint64_t)v295;
  if (v296) {
    goto LABEL_198;
  }
  return std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(uint64_t ***)(a1 + 8), (uint64_t)a2, (uint64_t)a2);
}

void sub_1A261AAA8(_Unwind_Exception *a1)
{
}

void sub_1A261AABC(_Unwind_Exception *a1)
{
}

BOOL md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 160);
  unint64_t v3 = *(void *)(a2 + 160);
  if (v2 != v3)
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + 208);
    unsigned int v10 = *(unsigned __int8 *)(a2 + 208);
LABEL_8:
    BOOL v11 = v2 < v3;
    unint64_t v12 = v2 >> (3 * (v9 - v10));
    BOOL v14 = v2 != v12 && v12 < v3;
    if (v9 > v10) {
      BOOL v11 = v14;
    }
    BOOL v15 = v2 <= v3 >> (3 * (v10 - v9));
    if (v9 < v10) {
      return v15;
    }
    else {
      return v11;
    }
  }
  unint64_t v2 = *(void *)(a1 + 104);
  unint64_t v3 = *(void *)(a2 + 104);
  if (v2 != v3)
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + 152);
    unsigned int v10 = *(unsigned __int8 *)(a2 + 152);
    goto LABEL_8;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 224);
  unsigned int v5 = *(unsigned __int8 *)(a2 + 224);
  char v6 = v4 - v5;
  if (v4 >= v5)
  {
    if (v4 <= v5)
    {
      int v18 = *(unsigned __int8 *)(a1 + 225);
      int v19 = *(unsigned __int8 *)(a2 + 225);
      if (v18 != v19) {
        return (char)v18 < (char)v19;
      }
      unint64_t v17 = *(void *)(a1 + 216);
    }
    else
    {
      int v16 = *(unsigned __int8 *)(a2 + 225);
      if (v16 != BYTE1(*(void *)(a1 + 224))) {
        return (char)v16 > (char)BYTE1(*(void *)(a1 + 224));
      }
      unint64_t v17 = *(void *)(a1 + 216) >> (2 * v6);
    }
    return v17 < *(void *)(a2 + 216);
  }
  int v7 = *(unsigned __int8 *)(a1 + 225);
  if (v7 == BYTE1(*(void *)(a2 + 224))) {
    return *(void *)(a1 + 216) <= *(void *)(a2 + 216) >> (2 * (v5 - v4));
  }
  else {
    return (char)v7 < (char)BYTE1(*(void *)(a2 + 224));
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__list_iterator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,void *>>>>::find<std::pair<md::FlyoverOctile,md::FlyoverOctile>>(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = 2 * *(void *)(a2 + 28);
  if ((*(void *)(a2 + 28) & 0xFF00000000) == 0) {
    uint64_t v2 = 0;
  }
  if ((*(void *)(a2 + 68) & 0xFF00000000) != 0) {
    uint64_t v3 = 2 * *(void *)(a2 + 68);
  }
  else {
    uint64_t v3 = 0;
  }
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  unint64_t v6 = (a2[1]
      + ((*a2 - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*a2 - 0x61C8864680B583EBLL);
  unint64_t v7 = (*((int *)a2 + 1) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  unint64_t v8 = (v2 | ((unint64_t)*((unsigned int *)a2 + 9) << 33)) ^ v7 ^ (*((int *)a2 + 2)
                                                                        + (v7 << 6)
                                                                        + (v7 >> 2)
                                                                        - 0x61C8864680B583EBLL);
  unint64_t v9 = (a2[41]
      + ((a2[40] - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)a2[40] - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (a2[40] - 0x61C8864680B583EBLL);
  unint64_t v10 = (*((int *)a2 + 11) + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  unint64_t v11 = ((v8 << 6)
       + (v8 >> 2)
       + ((v3 | ((unint64_t)*((unsigned int *)a2 + 19) << 33)) ^ v10 ^ (*((int *)a2 + 12)
                                                                             + (v10 << 6)
                                                                             + (v10 >> 2)
                                                                             - 0x61C8864680B583EBLL))
       - 0x61C8864680B583EBLL) ^ v8;
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = ((v8 << 6)
         + (v8 >> 2)
         + ((v3 | ((unint64_t)*((unsigned int *)a2 + 19) << 33)) ^ v10 ^ (*((int *)a2 + 12)
                                                                               + (v10 << 6)
                                                                               + (v10 >> 2)
                                                                               - 0x61C8864680B583EBLL))
         - 0x61C8864680B583EBLL) ^ v8;
    if (v11 >= *(void *)&v4) {
      unint64_t v13 = v11 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v13 = v11 & (*(void *)&v4 - 1);
  }
  BOOL v14 = *(unsigned __int8 ***)(*a1 + 8 * v13);
  if (!v14) {
    return 0;
  }
  BOOL v15 = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      uint64_t v16 = *(void *)&v4 - 1;
      while (1)
      {
        uint64_t v18 = *((void *)v15 + 1);
        if (v18 == v11)
        {
          if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v15 + 16, a2)) {
            return v15;
          }
        }
        else if ((v18 & v16) != v13)
        {
          return 0;
        }
        BOOL v15 = *(unsigned __int8 **)v15;
        if (!v15) {
          return v15;
        }
      }
    }
    do
    {
      unint64_t v17 = *((void *)v15 + 1);
      if (v17 == v11)
      {
        if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v15 + 16, a2)) {
          return v15;
        }
      }
      else
      {
        if (v17 >= *(void *)&v4) {
          v17 %= *(void *)&v4;
        }
        if (v17 != v13) {
          return 0;
        }
      }
      BOOL v15 = *(unsigned __int8 **)v15;
    }
    while (v15);
  }
  return v15;
}

char *geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::_elementAccessed(char *a1, char *a2)
{
  int8x8_t v4 = (char *)operator new(0x80uLL);
  *(void *)int8x8_t v4 = 0;
  *((void *)v4 + 1) = 0;
  char v5 = a2[17];
  v4[16] = a2[16];
  v4[17] = v5;
  *(void *)(v4 + 20) = *(void *)(a2 + 20);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *((_WORD *)v4 + 28) = *((_WORD *)a2 + 28);
  *(void *)(v4 + 60) = *(void *)(a2 + 60);
  *((_OWORD *)v4 + 5) = *((_OWORD *)a2 + 5);
  unint64_t v6 = (uint64_t *)(a2 + 96);
  std::list<md::FlyoverDynamicGeometry>::list((uint64_t *)v4 + 12, (uint64_t)(a2 + 96));
  *((void *)v4 + 15) = *((void *)a2 + 15);
  uint64_t v7 = *(void *)a1;
  *(void *)(v7 + 8) = v4;
  *(void *)a1 = v4;
  *(void *)int8x8_t v4 = v7;
  *((void *)v4 + 1) = a1;
  uint64_t v8 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v8 + 1;
  unint64_t v9 = (char *)*((void *)a1 + 8);
  if (v9 == a2)
  {
    unint64_t v10 = (char *)*((void *)a2 + 1);
LABEL_5:
    *((void *)a1 + 8) = v10;
    goto LABEL_6;
  }
  unint64_t v10 = v4;
  if (v9 == a1) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v11 = *(void *)a2;
  *(void *)(v11 + 8) = *((void *)a2 + 1);
  **((void **)a2 + 1) = v11;
  *((void *)a1 + 2) = v8;
  if (*((void *)a2 + 14))
  {
    uint64_t v12 = *((void *)a2 + 12);
    unint64_t v13 = (uint64_t *)*((void *)a2 + 13);
    uint64_t v14 = *v13;
    *(void *)(v14 + 8) = *(void *)(v12 + 8);
    **(void **)(v12 + 8) = v14;
    *((void *)a2 + 14) = 0;
    if (v13 != v6)
    {
      do
      {
        BOOL v15 = (uint64_t *)v13[1];
        std::__function::__alloc_func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy[abi:nn180100](v13 + 2);
        operator delete(v13);
        unint64_t v13 = v15;
      }
      while (v15 != v6);
    }
  }
  operator delete(a2);
  return v4;
}

void sub_1A261AFA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::__unordered_map_hasher<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,true>,std::__unordered_map_equal<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::equal_to<md::FlyoverOctileWorld>,md::FlyoverOctileWorldHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>>>::find<md::FlyoverOctileWorld>(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a2 + 28);
  uint64_t v3 = v2 & 0xFF00000000;
  if ((v2 & 0xFF00000000) != 0) {
    uint64_t v4 = 2 * *(void *)(a2 + 28);
  }
  else {
    uint64_t v4 = 0;
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  uint64_t v9 = *((int *)a2 + 1);
  uint64_t v10 = *((int *)a2 + 2);
  unint64_t v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  uint64_t v12 = *((unsigned int *)a2 + 9);
  unint64_t v13 = (v4 | (v12 << 33)) ^ v11 ^ (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL);
  unint64_t v14 = ((char)a2[40] + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583EBLL) ^ v13;
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v5);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v16 = v14;
    if (v14 >= *(void *)&v5) {
      unint64_t v16 = v14 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v16 = v14 & (*(void *)&v5 - 1);
  }
  unint64_t v17 = *(uint64_t ***)(*a1 + 8 * v16);
  if (!v17) {
    return 0;
  }
  uint64_t v18 = *v17;
  if (!v18) {
    return 0;
  }
  int v19 = a2[40];
  int v20 = a2[24];
  if (v15.u32[0] <= 1uLL)
  {
    uint64_t v21 = *(void *)&v5 - 1;
    if (!v3)
    {
      while (1)
      {
        uint64_t v24 = v18[1];
        if (v24 == v14)
        {
          if (*((unsigned __int8 *)v18 + 40) == v20
            && *((unsigned __int8 *)v18 + 16) == v6
            && *((unsigned __int8 *)v18 + 17) == v7
            && *((_DWORD *)v18 + 5) == v9
            && *((_DWORD *)v18 + 6) == v10
            && *((_DWORD *)v18 + 13) == v12
            && !*((unsigned char *)v18 + 48)
            && *((unsigned __int8 *)v18 + 56) == v19)
          {
            return v18;
          }
        }
        else if ((v24 & v21) != v16)
        {
          return 0;
        }
        uint64_t result = 0;
        uint64_t v18 = (uint64_t *)*v18;
        if (!v18) {
          return result;
        }
      }
    }
    while (1)
    {
      uint64_t v22 = v18[1];
      if (v22 == v14)
      {
        if (*((unsigned __int8 *)v18 + 40) == v20
          && *((unsigned __int8 *)v18 + 16) == v6
          && *((unsigned __int8 *)v18 + 17) == v7
          && *((_DWORD *)v18 + 5) == v9
          && *((_DWORD *)v18 + 6) == v10
          && *((_DWORD *)v18 + 13) == v12
          && *((unsigned char *)v18 + 48)
          && *((_DWORD *)v18 + 11) == v2
          && *((unsigned __int8 *)v18 + 56) == v19)
        {
          return v18;
        }
      }
      else if ((v22 & v21) != v16)
      {
        return 0;
      }
      uint64_t v18 = (uint64_t *)*v18;
      if (!v18) {
        return 0;
      }
    }
  }
  if (!v3)
  {
    while (1)
    {
      unint64_t v26 = v18[1];
      if (v26 == v14)
      {
        if (*((unsigned __int8 *)v18 + 40) == v20
          && __PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) == __PAIR64__(v7, v6)
          && *(uint64_t *)((char *)v18 + 20) == __PAIR64__(v10, v9)
          && *((_DWORD *)v18 + 13) == v12
          && !*((unsigned char *)v18 + 48)
          && *((unsigned __int8 *)v18 + 56) == v19)
        {
          return v18;
        }
      }
      else
      {
        if (v26 >= *(void *)&v5) {
          v26 %= *(void *)&v5;
        }
        if (v26 != v16) {
          return 0;
        }
      }
      uint64_t result = 0;
      uint64_t v18 = (uint64_t *)*v18;
      if (!v18) {
        return result;
      }
    }
  }
  while (1)
  {
    unint64_t v25 = v18[1];
    if (v25 == v14) {
      break;
    }
    if (v25 >= *(void *)&v5) {
      v25 %= *(void *)&v5;
    }
    if (v25 != v16) {
      return 0;
    }
LABEL_43:
    uint64_t v18 = (uint64_t *)*v18;
    if (!v18) {
      return 0;
    }
  }
  if (*((unsigned __int8 *)v18 + 40) != v20
    || __PAIR64__(*((unsigned __int8 *)v18 + 17), *((unsigned __int8 *)v18 + 16)) != __PAIR64__(v7, v6)
    || *(uint64_t *)((char *)v18 + 20) != __PAIR64__(v10, v9)
    || *((_DWORD *)v18 + 13) != v12
    || !*((unsigned char *)v18 + 48)
    || *((_DWORD *)v18 + 11) != v2
    || *((unsigned __int8 *)v18 + 56) != v19)
  {
    goto LABEL_43;
  }
  return v18;
}

uint64_t *std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  int8x8_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        uint64_t v9 = (uint64_t)(v5 + 4);
        if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(a2, (uint64_t)(v5 + 4))) {
          break;
        }
        int8x8_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      uint64_t result = (uint64_t *)md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(v9, a2);
      if (!result) {
        break;
      }
      uint64_t v6 = v8 + 1;
      int8x8_t v5 = v8[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_9:
    unint64_t v11 = (char *)operator new(0x108uLL);
    *((_WORD *)v11 + 16) = *(_WORD *)a3;
    *(void *)(v11 + 36) = *(void *)(a3 + 4);
    *(_OWORD *)(v11 + 56) = *(_OWORD *)(a3 + 24);
    *((_WORD *)v11 + 36) = *(_WORD *)(a3 + 40);
    *(void *)(v11 + 76) = *(void *)(a3 + 44);
    *((_OWORD *)v11 + 6) = *(_OWORD *)(a3 + 64);
    *((_WORD *)v11 + 56) = *(_WORD *)(a3 + 80);
    *(void *)(v11 + 116) = *(void *)(a3 + 84);
    *((void *)v11 + 17) = *(void *)(a3 + 104);
    *((_WORD *)v11 + 72) = *(_WORD *)(a3 + 112);
    *(void *)(v11 + 148) = *(void *)(a3 + 116);
    *(_OWORD *)(v11 + 168) = *(_OWORD *)(a3 + 136);
    v11[184] = *(unsigned char *)(a3 + 152);
    *((void *)v11 + 24) = *(void *)(a3 + 160);
    *((_WORD *)v11 + 100) = *(_WORD *)(a3 + 168);
    *(void *)(v11 + 204) = *(void *)(a3 + 172);
    *((_OWORD *)v11 + 14) = *(_OWORD *)(a3 + 192);
    v11[240] = *(unsigned char *)(a3 + 208);
    *(_OWORD *)(v11 + 248) = *(_OWORD *)(a3 + 216);
    *(void *)unint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v8;
    uint64_t *v6 = (uint64_t *)v11;
    uint64_t v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      unint64_t v13 = *v6;
    }
    else
    {
      unint64_t v13 = (uint64_t *)v11;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverOctileWorld,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverOctileWorld,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[11];
      if (v3)
      {
        v2[12] = v3;
        operator delete(v3);
      }
      uint64_t v4 = (void *)v2[8];
      if (v4)
      {
        v2[9] = v4;
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

BOOL std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[24] != a2[24]
    || *a1 != *a2
    || a1[1] != a2[1]
    || *((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)
    || *((_DWORD *)a1 + 2) != *((_DWORD *)a2 + 2)
    || *((_DWORD *)a1 + 9) != *((_DWORD *)a2 + 9))
  {
    return 0;
  }
  if (a1[32] && a2[32])
  {
    if (*((_DWORD *)a1 + 7) != *((_DWORD *)a2 + 7)) {
      return 0;
    }
  }
  else if ((a1[32] != 0) != (a2[32] != 0))
  {
    return 0;
  }
  if (a1[64] != a2[64]
    || a1[40] != a2[40]
    || a1[41] != a2[41]
    || *((_DWORD *)a1 + 11) != *((_DWORD *)a2 + 11)
    || *((_DWORD *)a1 + 12) != *((_DWORD *)a2 + 12)
    || *((_DWORD *)a1 + 19) != *((_DWORD *)a2 + 19))
  {
    return 0;
  }
  BOOL v2 = (a1[72] != 0) == (a2[72] != 0);
  if (a1[72])
  {
    if (a2[72]) {
      return *((_DWORD *)a1 + 17) == *((_DWORD *)a2 + 17);
    }
  }
  return v2;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::vector<md::MeshRenderable *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::vector<md::MeshRenderable *>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  BOOL v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[12];
      if (v3)
      {
        v2[13] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  BOOL v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[8];
      if (v3)
      {
        v2[9] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *std::list<md::FlyoverDynamicGeometry>::list(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v6 = operator new(0x48uLL);
    uint64_t v7 = *(void *)(i + 24);
    v6[2] = *(void *)(i + 16);
    v6[3] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(i + 40);
    void v6[4] = *(void *)(i + 32);
    v6[5] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *(void *)(i + 56);
    v6[6] = *(void *)(i + 48);
    v6[7] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *((unsigned char *)v6 + 64) = *(unsigned char *)(i + 64);
    uint64_t v5 = *a1;
    void *v6 = *a1;
    v6[1] = a1;
    *(void *)(v5 + 8) = v6;
    *a1 = (uint64_t)v6;
    ++a1[2];
  }
  return a1;
}

void sub_1A261B784(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v2 + 8);
    **(void **)(v2 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        std::__function::__alloc_func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy[abi:nn180100](v5 + 2);
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

double md::FlyoverCompleteTileDataLogic::getTileBounds(uint64_t a1, uint64_t a2, md::FlyoverRegionManager ***a3, unsigned __int8 *a4, int a5)
{
  if (a5 == 2)
  {
    double v5 = 22000.0;
    double v6 = -22000.0;
    goto LABEL_159;
  }
  unint64_t v11 = (uint64_t *)(a2 + 440);
  uint64_t v12 = (void **)(a2 + 400);
  unint64_t v13 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>((void *)(a2 + 400), a4);
  if (v13)
  {
    unint64_t v14 = *(double **)(a2 + 448);
    uint8x8_t v15 = (uint64_t *)v13[7];
    if (v14 != (double *)v15)
    {
      unint64_t v16 = (uint64_t *)v15[1];
      if (v16 != (uint64_t *)v14)
      {
        uint64_t v17 = *v15;
        *(void *)(v17 + 8) = v16;
        *(void *)v15[1] = v17;
        double v18 = *v14;
        *(void *)(*(void *)&v18 + 8) = v15;
        *(double *)uint8x8_t v15 = v18;
        *(void *)unint64_t v14 = v15;
        v15[1] = (uint64_t)v14;
        unint64_t v14 = *(double **)(a2 + 448);
      }
    }
    if (v14 != (double *)v11)
    {
      double v6 = v14[7];
      double v5 = v14[8];
      goto LABEL_159;
    }
  }
  uint64_t v19 = *((unsigned int *)a4 + 9);
  RegionAreas = md::FlyoverRegionManager::getRegionAreas(**a3, (const QuadTile *)a4);
  uint64_t v21 = *RegionAreas;
  uint64_t v22 = RegionAreas[1];
  if (*RegionAreas != v22)
  {
    double v23 = (void *)(*((unsigned int *)a4 + 2) | (unint64_t)(v19 << 32));
    v103[0] = (void *)(a4[1] | ((unint64_t)(~(-1 << a4[1]) - *((_DWORD *)a4 + 1)) << 32));
    v103[1] = v23;
    __p[0] = 0;
    __p[1] = 0;
    *(_DWORD *)unint64_t v107 = 1;
    *(_WORD *)&v107[4] = 0;
    uint64_t v24 = v21 + 24;
    while (geo::c3mm::C3mmArea::getEntry(*(_WORD **)(v24 - 24), v103, (uint64_t)__p) == -1)
    {
      BOOL v25 = *((float *)__p + 1) > *(float *)__p || v24 == v22;
      v24 += 24;
      if (v25)
      {
        double v6 = *(float *)__p;
        double v5 = *((float *)__p + 1);
        goto LABEL_33;
      }
    }
  }
  md::World::getDsmTileData((md::World *)__p, *(const QuadTile **)(*(void *)(a2 + 168) + 80), *(const QuadTile **)(*(void *)(a2 + 168) + 88), (int *)a4);
  if (__p[0])
  {
    uint64_t v26 = 720;
    if (*((void *)__p[0] + 90))
    {
      double v27 = (unint64_t *)((char *)__p[0] + 720);
    }
    else
    {
      uint64_t v26 = 736;
      double v27 = (unint64_t *)((char *)__p[0] + 736);
    }
    uint64_t v28 = *(void *)((char *)__p[0] + v26);
    if (v28)
    {
      if (*(unsigned char *)(v28 + 24) == 8)
      {
        unint64_t v29 = md::FlyoverDsmTileData::_heightBounds<unsigned char>((uint64_t)__p[0], (uint64_t)a4, v27);
        if (v30)
        {
LABEL_25:
          int v31 = 0;
          double v6 = *(float *)&v29;
          double v5 = *((float *)&v29 + 1);
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v29 = md::FlyoverDsmTileData::_heightBounds<unsigned short>((uint64_t)__p[0], (uint64_t)a4, v27);
        if (v32) {
          goto LABEL_25;
        }
      }
    }
  }
  int v31 = 1;
LABEL_28:
  double v33 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (v31)
  {
    double v5 = 22000.0;
    double v6 = -22000.0;
  }
LABEL_33:
  double v34 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>(v12, a4);
  if (v34)
  {
    unint64_t v35 = v34;
    unsigned __int8 v36 = (uint64_t *)v34[7];
    uint64_t v37 = *v36;
    *(void *)(v37 + 8) = v36[1];
    *(void *)v36[1] = v37;
    --*(void *)(a2 + 456);
    operator delete(v36);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v12, v35);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  uint64_t v38 = (char *)operator new(0x48uLL);
  unsigned __int8 v39 = a4[1];
  uint64_t v40 = *a4;
  v38[16] = v40;
  v38[17] = v39;
  uint64_t v41 = *(void *)(a4 + 4);
  *(void *)(v38 + 20) = v41;
  unsigned __int8 v42 = a4 + 24;
  *(_OWORD *)(v38 + 40) = *(_OWORD *)(a4 + 24);
  *((double *)v38 + 7) = v6;
  *((double *)v38 + 8) = v5;
  uint64_t v43 = *(void **)(a2 + 448);
  *(void *)uint64_t v38 = v11;
  *((void *)v38 + 1) = v43;
  *uint64_t v43 = v38;
  unint64_t v44 = *(void *)(a2 + 456) + 1;
  *(void *)(a2 + 448) = v38;
  *(void *)(a2 + 456) = v44;
  uint64_t v45 = a4[1];
  unint64_t v46 = (v45
       + ((v40 - 0x61C8864680B583EBLL) << 6)
       + ((unint64_t)(v40 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (v40 - 0x61C8864680B583EBLL);
  unint64_t v47 = ((v46 << 6) + (int)v41 + (v46 >> 2) - 0x61C8864680B583EBLL) ^ v46;
  uint64_t v48 = (v47 << 6) + SHIDWORD(v41) + (v47 >> 2) - 0x61C8864680B583EBLL;
  uint64_t v49 = *((unsigned int *)a4 + 9);
  uint64_t v50 = *(void *)(a4 + 28);
  uint64_t v51 = v50 & 0xFF00000000;
  uint64_t v52 = 2 * v50;
  if ((v50 & 0xFF00000000) == 0) {
    uint64_t v52 = 0;
  }
  unint64_t v53 = (v52 | (v49 << 33)) ^ v47;
  unint64_t v54 = v53 ^ v48;
  unint64_t v55 = *(void *)(a2 + 408);
  uint64_t v102 = v41;
  if (v55)
  {
    uint8x8_t v56 = (uint8x8_t)vcnt_s8((int8x8_t)v55);
    v56.i16[0] = vaddlv_u8(v56);
    if (v56.u32[0] > 1uLL)
    {
      unint64_t v57 = v53 ^ v48;
      if (v54 >= v55) {
        unint64_t v57 = v54 % v55;
      }
    }
    else
    {
      unint64_t v57 = v54 & (v55 - 1);
    }
    uint64_t v58 = (uint64_t **)*((void *)*v12 + v57);
    unint64_t v101 = v57;
    if (v58)
    {
      unint64_t v59 = *v58;
      if (v59)
      {
        int v60 = *v42;
        if (v56.u32[0] <= 1uLL)
        {
          unint64_t v61 = v55 - 1;
          if (!v51)
          {
            while (1)
            {
              uint64_t v63 = v59[1];
              if (v63 == v54)
              {
                if (*((unsigned __int8 *)v59 + 40) == v60
                  && __PAIR64__(*((unsigned __int8 *)v59 + 17), *((unsigned __int8 *)v59 + 16)) == __PAIR64__(v45, v40)
                  && *(uint64_t *)((char *)v59 + 20) == v41
                  && *((_DWORD *)v59 + 13) == v49
                  && !*((unsigned char *)v59 + 48))
                {
                  goto LABEL_153;
                }
              }
              else if ((v63 & v61) != v57)
              {
                goto LABEL_93;
              }
              unint64_t v59 = (uint64_t *)*v59;
              if (!v59) {
                goto LABEL_93;
              }
            }
          }
          while (1)
          {
            uint64_t v62 = v59[1];
            if (v62 == v54)
            {
              if (*((unsigned __int8 *)v59 + 40) == v60
                && __PAIR64__(*((unsigned __int8 *)v59 + 17), *((unsigned __int8 *)v59 + 16)) == __PAIR64__(v45, v40)
                && *(uint64_t *)((char *)v59 + 20) == v41
                && *((_DWORD *)v59 + 13) == v49
                && *((unsigned char *)v59 + 48)
                && *((_DWORD *)v59 + 11) == v50)
              {
                goto LABEL_153;
              }
            }
            else if ((v62 & v61) != v57)
            {
              goto LABEL_93;
            }
            unint64_t v59 = (uint64_t *)*v59;
            if (!v59) {
              goto LABEL_93;
            }
          }
        }
        if (!v51)
        {
          while (1)
          {
            unint64_t v65 = v59[1];
            if (v65 == v54)
            {
              if (*((unsigned __int8 *)v59 + 40) == v60
                && __PAIR64__(*((unsigned __int8 *)v59 + 17), *((unsigned __int8 *)v59 + 16)) == __PAIR64__(v45, v40)
                && *(uint64_t *)((char *)v59 + 20) == v41
                && *((_DWORD *)v59 + 13) == v49
                && !*((unsigned char *)v59 + 48))
              {
                goto LABEL_153;
              }
            }
            else
            {
              if (v65 >= v55) {
                v65 %= v55;
              }
              if (v65 != v57) {
                goto LABEL_93;
              }
            }
            unint64_t v59 = (uint64_t *)*v59;
            if (!v59) {
              goto LABEL_93;
            }
          }
        }
        do
        {
          unint64_t v64 = v59[1];
          if (v64 == v54)
          {
            if (*((unsigned __int8 *)v59 + 40) == v60
              && __PAIR64__(*((unsigned __int8 *)v59 + 17), *((unsigned __int8 *)v59 + 16)) == __PAIR64__(v45, v40)
              && *(uint64_t *)((char *)v59 + 20) == v41
              && *((_DWORD *)v59 + 13) == v49
              && *((unsigned char *)v59 + 48)
              && *((_DWORD *)v59 + 11) == v50)
            {
              goto LABEL_153;
            }
          }
          else
          {
            if (v64 >= v55) {
              v64 %= v55;
            }
            if (v64 != v57) {
              break;
            }
          }
          unint64_t v59 = (uint64_t *)*v59;
        }
        while (v59);
      }
    }
  }
LABEL_93:
  long long v66 = (char *)operator new(0x40uLL);
  *(void *)long long v66 = 0;
  *((void *)v66 + 1) = v54;
  v66[16] = *a4;
  v66[17] = v45;
  *(void *)(v66 + 20) = v102;
  *(_OWORD *)(v66 + 40) = *(_OWORD *)v42;
  *((void *)v66 + 7) = v38;
  float v67 = (float)(unint64_t)(*(void *)(a2 + 424) + 1);
  float v68 = *(float *)(a2 + 432);
  if (v55 && (float)(v68 * (float)v55) >= v67)
  {
    unint64_t v54 = v101;
    goto LABEL_143;
  }
  BOOL v69 = 1;
  if (v55 >= 3) {
    BOOL v69 = (v55 & (v55 - 1)) != 0;
  }
  unint64_t v70 = v69 | (2 * v55);
  unint64_t v71 = vcvtps_u32_f32(v67 / v68);
  if (v70 <= v71) {
    size_t prime = v71;
  }
  else {
    size_t prime = v70;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v55 = *(void *)(a2 + 408);
  }
  if (prime > v55)
  {
LABEL_106:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v73 = operator new(8 * prime);
    uint64_t v74 = *v12;
    uint64_t *v12 = v73;
    if (v74) {
      operator delete(v74);
    }
    uint64_t v75 = 0;
    *(void *)(a2 + 408) = prime;
    do
      *((void *)*v12 + v75++) = 0;
    while (prime != v75);
    unint64_t v76 = *(void **)(a2 + 416);
    if (!v76) {
      goto LABEL_130;
    }
    uint64_t v77 = a2 + 416;
    size_t v78 = v76[1];
    size_t v79 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v80 = v78 & v79;
      *((void *)*v12 + v80) = v77;
      for (uint64_t i = (void *)*v76; *v76; uint64_t i = (void *)*v76)
      {
        size_t v82 = i[1] & v79;
        if (v82 == v80)
        {
          unint64_t v76 = i;
        }
        else if (*((void *)*v12 + v82))
        {
          *unint64_t v76 = *i;
          uint64_t v83 = 8 * v82;
          *uint64_t i = **(void **)((char *)*v12 + v83);
          **(void **)((char *)*v12 + v83) = i;
        }
        else
        {
          *((void *)*v12 + v82) = v76;
          unint64_t v76 = i;
          size_t v80 = v82;
        }
      }
LABEL_130:
      unint64_t v55 = prime;
      goto LABEL_131;
    }
    if (v78 >= prime) {
      v78 %= prime;
    }
    *((void *)*v12 + v78) = v77;
    unint64_t v87 = (void *)*v76;
    if (!*v76) {
      goto LABEL_130;
    }
    while (1)
    {
      size_t v89 = v87[1];
      if (v89 >= prime) {
        v89 %= prime;
      }
      if (v89 != v78)
      {
        if (!*((void *)*v12 + v89))
        {
          *((void *)*v12 + v89) = v76;
          goto LABEL_135;
        }
        *unint64_t v76 = *v87;
        uint64_t v88 = 8 * v89;
        *unint64_t v87 = **(void **)((char *)*v12 + v88);
        **(void **)((char *)*v12 + v88) = v87;
        unint64_t v87 = v76;
      }
      size_t v89 = v78;
LABEL_135:
      unint64_t v76 = v87;
      unint64_t v87 = (void *)*v87;
      size_t v78 = v89;
      if (!v87) {
        goto LABEL_130;
      }
    }
  }
  if (prime >= v55) {
    goto LABEL_131;
  }
  unint64_t v84 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 424) / *(float *)(a2 + 432));
  if (v55 < 3 || (uint8x8_t v85 = (uint8x8_t)vcnt_s8((int8x8_t)v55), v85.i16[0] = vaddlv_u8(v85), v85.u32[0] > 1uLL))
  {
    unint64_t v84 = std::__next_prime(v84);
  }
  else
  {
    uint64_t v86 = 1 << -(char)__clz(v84 - 1);
    if (v84 >= 2) {
      unint64_t v84 = v86;
    }
  }
  if (prime <= v84) {
    size_t prime = v84;
  }
  if (prime < v55)
  {
    if (!prime)
    {
      unint64_t v100 = *v12;
      uint64_t *v12 = 0;
      if (v100) {
        operator delete(v100);
      }
      unint64_t v55 = 0;
      *(void *)(a2 + 408) = 0;
      goto LABEL_131;
    }
    goto LABEL_106;
  }
  unint64_t v55 = *(void *)(a2 + 408);
LABEL_131:
  if ((v55 & (v55 - 1)) != 0)
  {
    if (v54 >= v55) {
      v54 %= v55;
    }
  }
  else
  {
    v54 &= v55 - 1;
  }
LABEL_143:
  long long v90 = *v12;
  long long v91 = (void *)*((void *)*v12 + v54);
  if (v91)
  {
    *(void *)long long v66 = *v91;
  }
  else
  {
    *(void *)long long v66 = *(void *)(a2 + 416);
    *(void *)(a2 + 416) = v66;
    v90[v54] = a2 + 416;
    if (!*(void *)v66) {
      goto LABEL_152;
    }
    unint64_t v92 = *(void *)(*(void *)v66 + 8);
    if ((v55 & (v55 - 1)) != 0)
    {
      if (v92 >= v55) {
        v92 %= v55;
      }
    }
    else
    {
      v92 &= v55 - 1;
    }
    long long v91 = (char *)*v12 + 8 * v92;
  }
  *long long v91 = v66;
LABEL_152:
  ++*(void *)(a2 + 424);
  unint64_t v44 = *(void *)(a2 + 456);
LABEL_153:
  while (v44 > *(void *)(a2 + 392))
  {
    unint64_t v93 = *(char **)(a2 + 440);
    LOWORD(__p[0]) = *((_WORD *)v93 + 8);
    *(void **)((char *)__p + 4) = *(void **)(v93 + 20);
    *(_OWORD *)&v107[8] = *(_OWORD *)(v93 + 40);
    *(_OWORD *)&v107[24] = *(_OWORD *)(v93 + 56);
    uint64_t v94 = *(void *)v93;
    *(void *)(v94 + 8) = *((void *)v93 + 1);
    **((void **)v93 + 1) = v94;
    *(void *)(a2 + 456) = v44 - 1;
    operator delete(v93);
    char v95 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>(v12, (unsigned __int8 *)__p);
    if (v95)
    {
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)v103, v12, v95);
      if (v103[0]) {
        operator delete(v103[0]);
      }
    }
    unint64_t v44 = *(void *)(a2 + 456);
  }
LABEL_159:
  *(int64x2_t *)float v103 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  long long v104 = xmmword_1A28FC720;
  memset(v107, 0, 32);
  int64x2_t v105 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_OWORD *)long long __p = 0u;
  *(void *)&v107[32] = 0x3FF0000000000000;
  float v96 = v6;
  float v97 = v5;
  md::FlyoverCommon::computeGeocentricBoundsFromOctile((uint64_t)a4, (uint64_t)__p, (uint64_t)v103, v96, v97);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v107[8];
  *(void *)(a1 + 48) = *(void *)&v107[32];
  long long v98 = v104;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v103;
  *(void *)(a1 + 16) = *(void *)v107;
  *(void *)(a1 + 40) = *(void *)&v107[24];
  *(_OWORD *)(a1 + 72) = v98;
  double result = *(double *)v105.i64;
  *(int64x2_t *)(a1 + 88) = v105;
  return result;
}

void sub_1A261C26C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::__tree_const_iterator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__tree_node<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,void *> *,long> &,std::insert_iterator<std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>> &>(char *result, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void **)a2;
  uint64_t v9 = (void *)*a3;
  if (*(void *)a2 == *a3)
  {
LABEL_49:
    unint64_t v29 = *(char ***)a6;
    uint64_t v28 = *(char **)(a6 + 8);
    uint64_t v9 = v8;
    goto LABEL_50;
  }
  for (uint64_t i = *(void **)a4; *(void *)a4 != *a5; uint64_t i = *(void **)a4)
  {
    if (md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v8 + 4), (uint64_t)(i + 4)))
    {
      double result = std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_hint_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(char ***)a6, *(char **)(a6 + 8), (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
      *(void *)(a6 + 8) = result;
      uint8x8_t v15 = (char *)*((void *)result + 1);
      if (v15)
      {
        do
        {
          unint64_t v16 = v15;
          uint8x8_t v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          unint64_t v16 = (char *)*((void *)result + 2);
          BOOL v17 = *(void *)v16 == (void)result;
          double result = v16;
        }
        while (!v17);
      }
      *(void *)(a6 + 8) = v16;
      double v18 = *(void **)a2;
      uint64_t v19 = *(void **)(*(void *)a2 + 8);
      if (v19)
      {
        do
        {
          int v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          int v20 = (void *)v18[2];
          BOOL v17 = *v20 == (void)v18;
          double v18 = v20;
        }
        while (!v17);
      }
      *(void *)a2 = v20;
    }
    else
    {
      double result = (char *)md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(i + 4), (uint64_t)(v8 + 4));
      if (result)
      {
        uint64_t v21 = (void *)i[1];
        if (v21)
        {
          do
          {
            uint64_t v22 = v21;
            uint64_t v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)i[2];
            BOOL v17 = *v22 == (void)i;
            uint64_t i = v22;
          }
          while (!v17);
        }
        *(void *)a4 = v22;
      }
      else
      {
        double v23 = (void *)v8[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            double v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (void *)v8[2];
            BOOL v17 = *v24 == (void)v8;
            uint64_t v8 = v24;
          }
          while (!v17);
        }
        *(void *)a2 = v24;
        BOOL v25 = *(void **)a4;
        uint64_t v26 = *(void **)(*(void *)a4 + 8);
        if (v26)
        {
          do
          {
            double v27 = v26;
            uint64_t v26 = (void *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            double v27 = (void *)v25[2];
            BOOL v17 = *v27 == (void)v25;
            BOOL v25 = v27;
          }
          while (!v17);
        }
        *(void *)a4 = v27;
      }
    }
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = (void *)*a3;
    if (*(void *)a2 == *a3) {
      goto LABEL_49;
    }
  }
  unint64_t v29 = *(char ***)a6;
  uint64_t v28 = *(char **)(a6 + 8);
  if (v8 != v9)
  {
    do
    {
      double result = std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_hint_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(v29, v28, (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
      char v30 = (char *)*((void *)result + 1);
      if (v30)
      {
        do
        {
          uint64_t v28 = v30;
          char v30 = *(char **)v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          uint64_t v28 = (char *)*((void *)result + 2);
          BOOL v17 = *(void *)v28 == (void)result;
          double result = v28;
        }
        while (!v17);
      }
      int v31 = (void *)v8[1];
      if (v31)
      {
        do
        {
          char v32 = v31;
          int v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          char v32 = (void *)v8[2];
          BOOL v17 = *v32 == (void)v8;
          uint64_t v8 = v32;
        }
        while (!v17);
      }
      uint64_t v8 = v32;
    }
    while (v32 != v9);
  }
LABEL_50:
  void *v7 = v9;
  v7[1] = v29;
  v7[2] = v28;
  return result;
}

void md::FlyoverCompleteTileDataLogic::updateTransitions(gdc::LayerDataCollector *,std::map<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<std::pair<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const,md::FlyoverCompleteTileDataLogic::TransitionInfo>>> &,double)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  md::FlyoverCommon::encodeFlyoverKey(v47, (unsigned __int8 *)a2, 0, 0);
  gdc::LayerDataStore::get((gdc::LayerDataStore *)&v45, *(const gdc::LayerDataRequestKey **)(a1 + 16), v47);
  uint64_t v5 = v45;
  if (v45)
  {
    double v6 = *(gdc::LayerDataCollector **)(a1 + 24);
    if (!std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)v6 + 6, v47))gdc::LayerDataCollector::addDataKey(v6, (const gdc::LayerDataRequestKey *)v47, (const QuadTile *)(a2 + 80)); {
    uint64_t v7 = *(void *)(a1 + 8);
    }
    unint64_t v8 = v55;
    unint64_t v9 = *(void *)(v7 + 8);
    if (v9)
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        unint64_t v2 = v55;
        if (v55 >= v9) {
          unint64_t v2 = v55 % v9;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v55;
      }
      unint64_t v11 = *(uint64_t ****)(*(void *)v7 + 8 * v2);
      if (v11)
      {
        uint64_t v12 = *v11;
        if (*v11)
        {
          int v13 = v47[0];
          int v14 = v48;
          uint8x8_t v15 = v52;
          unint64_t v16 = v49;
          size_t v17 = v50 - (void)v49;
          if (v10.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v22 = v12[1];
              if (v22 == (uint64_t *)v8)
              {
                if (*((unsigned __int8 *)v12 + 16) == v13 && *((unsigned __int16 *)v12 + 12) == v14 && v12[12] == v15)
                {
                  double v23 = v12[4];
                  if ((char *)v12[5] - (char *)v23 == v17)
                  {
                    unsigned __int8 v42 = v16;
                    unint64_t v44 = v15;
                    uint64_t v24 = v16;
                    size_t v25 = v17;
                    int v26 = memcmp(v23, v24, v17);
                    size_t v17 = v25;
                    unint64_t v16 = v42;
                    uint8x8_t v15 = v44;
                    if (!v26) {
                      goto LABEL_77;
                    }
                  }
                }
              }
              else if (((unint64_t)v22 & (v9 - 1)) != v2)
              {
                goto LABEL_35;
              }
              uint64_t v12 = (uint64_t **)*v12;
              if (!v12) {
                goto LABEL_35;
              }
            }
          }
          do
          {
            unint64_t v18 = (unint64_t)v12[1];
            if (v18 == v8)
            {
              if (*((unsigned __int8 *)v12 + 16) == v13 && *((unsigned __int16 *)v12 + 12) == v14 && v12[12] == v15)
              {
                uint64_t v19 = v12[4];
                if ((char *)v12[5] - (char *)v19 == v17)
                {
                  size_t v20 = v17;
                  uint64_t v43 = v15;
                  int v21 = memcmp(v19, v16, v17);
                  size_t v17 = v20;
                  uint8x8_t v15 = v43;
                  if (!v21) {
                    goto LABEL_77;
                  }
                }
              }
            }
            else
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
              if (v18 != v2) {
                break;
              }
            }
            uint64_t v12 = (uint64_t **)*v12;
          }
          while (v12);
        }
      }
    }
LABEL_35:
    double v27 = operator new(0x90uLL);
    uint8x8_t v56 = v27;
    uint64_t v57 = v7 + 16;
    *double v27 = 0;
    v27[1] = v8;
    *((unsigned char *)v27 + 16) = v47[0];
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v27 + 3), (uint64_t)&v48);
    *((unsigned char *)v27 + 112) = 0;
    if (v53)
    {
      *((_DWORD *)v27 + 29) = v54;
      *((unsigned char *)v27 + 112) = 1;
    }
    v27[15] = v55;
    v27[16] = v5;
    uint64_t v28 = v46;
    v27[17] = v46;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v58 = 1;
    float v29 = (float)(unint64_t)(*(void *)(v7 + 24) + 1);
    float v30 = *(float *)(v7 + 32);
    if (!v9 || (float)(v30 * (float)v9) < v29)
    {
      BOOL v31 = 1;
      if (v9 >= 3) {
        BOOL v31 = (v9 & (v9 - 1)) != 0;
      }
      unint64_t v32 = v31 | (2 * v9);
      unint64_t v33 = vcvtps_u32_f32(v29 / v30);
      if (v32 <= v33) {
        size_t prime = v33;
      }
      else {
        size_t prime = v32;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
      }
      int8x8_t v35 = *(int8x8_t *)(v7 + 8);
      if (prime > *(void *)&v35) {
        goto LABEL_51;
      }
      if (prime < *(void *)&v35)
      {
        unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 24) / *(float *)(v7 + 32));
        if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
        {
          unint64_t v36 = std::__next_prime(v36);
        }
        else
        {
          uint64_t v38 = 1 << -(char)__clz(v36 - 1);
          if (v36 >= 2) {
            unint64_t v36 = v38;
          }
        }
        if (prime <= v36) {
          size_t prime = v36;
        }
        if (prime < *(void *)&v35) {
LABEL_51:
        }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v7, prime);
      }
      unint64_t v9 = *(void *)(v7 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
    }
    unsigned __int8 v39 = *(void **)(*(void *)v7 + 8 * v2);
    if (v39)
    {
      *double v27 = *v39;
    }
    else
    {
      *double v27 = *(void *)(v7 + 16);
      *(void *)(v7 + 16) = v27;
      *(void *)(*(void *)v7 + 8 * v2) = v7 + 16;
      if (!*v27)
      {
LABEL_76:
        ++*(void *)(v7 + 24);
        goto LABEL_77;
      }
      unint64_t v40 = *(void *)(*v27 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v40 >= v9) {
          v40 %= v9;
        }
      }
      else
      {
        v40 &= v9 - 1;
      }
      unsigned __int8 v39 = (void *)(*(void *)v7 + 8 * v40);
    }
    *unsigned __int8 v39 = v27;
    goto LABEL_76;
  }
  **(unsigned char **)a1 = 1;
LABEL_77:
  uint64_t v41 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v53) {
    char v53 = 0;
  }
  if (v49 != v51) {
    free(v49);
  }
}

void sub_1A261C994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v25 - 112));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  if (a25) {
    a25 = 0;
  }
  if (a15 != a17) {
    free(a15);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::less<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::allocator<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::less<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::allocator<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::less<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::allocator<std::__value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(a1[1]);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((void *)a1[15]);
    operator delete(a1);
  }
}

char *std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_hint_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(char **a1, char *a2, uint64_t a3, uint64_t a4)
{
  double v6 = a2;
  unint64_t v8 = (void **)(a1 + 1);
  if (a1 + 1 != (char **)a2
    && !md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(a3, (uint64_t)(a2 + 32)))
  {
    if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v6 + 32), a3))
    {
      uint64_t v25 = v6;
      int v13 = (void **)&v25;
      unint64_t v11 = (void **)v6;
      if (v6) {
        return v6;
      }
      goto LABEL_42;
    }
    int v13 = (void **)(v6 + 8);
    uint64_t v12 = (void **)*((void *)v6 + 1);
    if (v12)
    {
      do
      {
        int v13 = v12;
        uint64_t v12 = (void **)*v12;
        unint64_t v11 = v13;
        int v14 = v13;
      }
      while (v12);
      if (v13 == v8) {
        goto LABEL_41;
      }
    }
    else
    {
      int v14 = (void **)v6;
      do
      {
        uint64_t v19 = v14;
        int v14 = (void **)v14[2];
      }
      while (*v14 != v19);
      unint64_t v11 = (void **)v6;
      if (v14 == v8) {
        goto LABEL_41;
      }
    }
    if (md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(a3, (uint64_t)(v14 + 4))) {
      goto LABEL_41;
    }
    size_t v20 = (void **)*v8;
    if (*v8)
    {
      int v13 = v8;
      do
      {
        while (1)
        {
          unint64_t v11 = v20;
          uint64_t v21 = (uint64_t)(v20 + 4);
          if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(a3, (uint64_t)(v20 + 4))) {
            break;
          }
          size_t v20 = (void **)*v11;
          int v13 = v11;
          if (!*v11) {
            goto LABEL_41;
          }
        }
        if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(v21, a3)) {
          break;
        }
        int v13 = v11 + 1;
        size_t v20 = (void **)v11[1];
      }
      while (v20);
LABEL_41:
      double v6 = (char *)*v13;
      if (*v13) {
        return v6;
      }
      goto LABEL_42;
    }
LABEL_40:
    unint64_t v11 = v8;
    int v13 = v8;
    goto LABEL_41;
  }
  unint64_t v9 = *(void ***)v6;
  if (*a1 == v6)
  {
    unint64_t v11 = (void **)v6;
    goto LABEL_17;
  }
  if (v9)
  {
    uint8x8_t v10 = *(void ***)v6;
    do
    {
      unint64_t v11 = v10;
      uint8x8_t v10 = (void **)v10[1];
    }
    while (v10);
  }
  else
  {
    uint8x8_t v15 = (void **)v6;
    do
    {
      unint64_t v11 = (void **)v15[2];
      BOOL v16 = *v11 == v15;
      uint8x8_t v15 = v11;
    }
    while (v16);
  }
  if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()((uint64_t)(v11 + 4), a3))
  {
    size_t v17 = (void **)*v8;
    if (*v8)
    {
      int v13 = v8;
      do
      {
        while (1)
        {
          unint64_t v11 = v17;
          uint64_t v18 = (uint64_t)(v17 + 4);
          if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(a3, (uint64_t)(v17 + 4))) {
            break;
          }
          size_t v17 = (void **)*v11;
          int v13 = v11;
          if (!*v11) {
            goto LABEL_41;
          }
        }
        if (!md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare::operator()(v18, a3)) {
          break;
        }
        int v13 = v11 + 1;
        size_t v17 = (void **)v11[1];
      }
      while (v17);
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_17:
  if (v9)
  {
    int v13 = v11 + 1;
    goto LABEL_41;
  }
  unint64_t v11 = (void **)v6;
  int v13 = (void **)v6;
LABEL_42:
  double v6 = (char *)operator new(0x108uLL);
  *((_WORD *)v6 + 16) = *(_WORD *)a4;
  *(void *)(v6 + 36) = *(void *)(a4 + 4);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a4 + 24);
  *((_WORD *)v6 + 36) = *(_WORD *)(a4 + 40);
  *(void *)(v6 + 76) = *(void *)(a4 + 44);
  *((_OWORD *)v6 + 6) = *(_OWORD *)(a4 + 64);
  *((_WORD *)v6 + 56) = *(_WORD *)(a4 + 80);
  *(void *)(v6 + 116) = *(void *)(a4 + 84);
  *((void *)v6 + 17) = *(void *)(a4 + 104);
  *((_WORD *)v6 + 72) = *(_WORD *)(a4 + 112);
  *(void *)(v6 + 148) = *(void *)(a4 + 116);
  *(_OWORD *)(v6 + 168) = *(_OWORD *)(a4 + 136);
  v6[184] = *(unsigned char *)(a4 + 152);
  *((void *)v6 + 24) = *(void *)(a4 + 160);
  *((_WORD *)v6 + 100) = *(_WORD *)(a4 + 168);
  *(void *)(v6 + 204) = *(void *)(a4 + 172);
  *((_OWORD *)v6 + 14) = *(_OWORD *)(a4 + 192);
  v6[240] = *(unsigned char *)(a4 + 208);
  *(_OWORD *)(v6 + 248) = *(_OWORD *)(a4 + 216);
  *(void *)double v6 = 0;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = v11;
  uint64_t *v13 = v6;
  uint64_t v22 = (uint64_t *)v6;
  double v23 = *(char **)*a1;
  if (v23)
  {
    *a1 = v23;
    uint64_t v22 = (uint64_t *)*v13;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v22);
  ++a1[2];
  return v6;
}

void *std::function<void ()(geo::QuadTile const&)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo::FlyoverOctileTileInfo(uint64_t result, char *a2, uint64_t a3, uint64_t a4)
{
  char v4 = a2[1];
  uint64_t v6 = *((unsigned int *)a2 + 1);
  uint64_t v5 = *((unsigned int *)a2 + 2);
  char v7 = *a2;
  *(unsigned char *)double result = *a2;
  *(unsigned char *)(result + 1) = v4;
  *(_DWORD *)(result + 4) = v6;
  *(_DWORD *)(result + 8) = v5;
  long long v8 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 24) = v8;
  *(_WORD *)(result + 40) = *(_WORD *)a3;
  *(void *)(result + 44) = *(void *)(a3 + 4);
  *(_OWORD *)(result + 64) = *(_OWORD *)(a3 + 24);
  *(_WORD *)(result + 80) = *(_WORD *)a4;
  *(void *)(result + 84) = *(void *)(a4 + 4);
  *(unsigned char *)(result + 112) = v7;
  *(unsigned char *)(result + 113) = v4;
  *(_DWORD *)(result + 116) = v6;
  *(_DWORD *)(result + 120) = v5;
  *(_OWORD *)(result + 136) = v8;
  *(unsigned char *)(result + 152) = v4;
  uint64_t v9 = ((v5 << 32) | (v5 << 16)) & 0x1F0000FF0000FFLL | v5;
  uint64_t v10 = (v9 | (v9 << 8)) & 0x100F00F00F00F00FLL | (16 * ((v9 | (v9 << 8)) & 0x100F00F00F00F00FLL));
  uint64_t v11 = ((v6 << 32) | (v6 << 16)) & 0x1F0000FF0000FFLL | v6;
  uint64_t v12 = (v11 | (v11 << 8)) & 0x1003003003003003 | (16 * ((v11 | (v11 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  unint64_t v13 = (((unint64_t)*(unsigned int *)(result + 36) << 32) | ((unint64_t)*(unsigned int *)(result + 36) << 16) | *(_DWORD *)(result + 36)) & 0x1F0000FF0000FFLL;
  uint64_t v14 = (v13 | (v13 << 8)) & 0x1003003003003003 | (16 * ((v13 | (v13 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  *(void *)(result + 104) = v10 & 0x1041041041041041 | (4 * (v10 & 0x10C30C30C30C30C3)) & 0x1249249249249249 | ((8 * v12) | (2 * v12)) & 0x2492492492492492 | ((16 * v14) | (4 * v14)) & 0x4924924924924924;
  *(void *)(result + 160) = 0;
  LOBYTE(v12) = *(unsigned char *)(a3 + 1);
  *(unsigned char *)(result + 168) = *(unsigned char *)a3;
  *(unsigned char *)(result + 169) = v12;
  *(void *)(result + 172) = *(void *)(a3 + 4);
  *(_OWORD *)(result + 192) = *(_OWORD *)(a3 + 24);
  *(unsigned char *)(result + 208) = v12;
  unint64_t v15 = ((unint64_t)*(unsigned int *)(a3 + 8) << 32) | ((unint64_t)*(unsigned int *)(a3 + 8) << 16) | *(_DWORD *)(a3 + 8);
  uint64_t v16 = v15 & 0xF00000F00000FLL | ((v15 & 0x1F0000FF0000FFLL) << 8) & 0x100F00F00F00F00FLL;
  unint64_t v17 = (((unint64_t)*(unsigned int *)(a3 + 4) << 32) | ((unint64_t)*(unsigned int *)(a3 + 4) << 16) | *(_DWORD *)(a3 + 4)) & 0x1F0000FF0000FFLL;
  uint64_t v18 = (v17 | (v17 << 8)) & 0x1003003003003003 | (16 * ((v17 | (v17 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  uint64_t v19 = ((8 * v18) | (2 * v18)) & 0x2492492492492492 | (v16 | (16 * v16)) & 0x1041041041041041 | (4 * ((v16 | (16 * v16)) & 0x10C30C30C30C30C3)) & 0x1249249249249249;
  unint64_t v20 = ((unint64_t)*(unsigned int *)(a3 + 36) << 32) | ((unint64_t)*(unsigned int *)(a3 + 36) << 16) | *(_DWORD *)(a3 + 36);
  uint64_t v21 = v20 & 0xF00000F00000FLL | ((v20 & 0x1F0000FF0000FFLL) << 8) & 0x100F00F00F00F00FLL;
  *(void *)(result + 160) = v19 | ((16 * ((v21 | (16 * v21)) & 0x10C30C30C30C30C3)) | (4
                                                                                         * ((v21 | (16 * v21)) & 0x10C30C30C30C30C3))) & 0x4924924924924924;
  *(void *)(result + 216) = 0;
  *(_WORD *)(result + 224) = 0;
  unsigned int v22 = *(unsigned __int8 *)(a4 + 1);
  if (v22 <= 0x1E)
  {
    int v23 = 1 << v22;
    int v24 = *(_DWORD *)(a4 + 8);
    int v25 = vcvtmd_s64_f64((double)v24 / (double)(1 << v22));
    if (v25 >= 0) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = -v25;
    }
    if (v26 <= 0x7F)
    {
      *(unsigned char *)(result + 224) = v22;
      *(unsigned char *)(result + 225) = v25;
      uint64_t v27 = ((*(_DWORD *)(a4 + 4) % v23 + v23) % v23);
      unint64_t v28 = (((v24 % v23 + v23) % v23) | ((unint64_t)((v24 % v23 + v23) % v23) << 16)) & 0xFFFF0000FFFFLL;
      uint64_t v29 = (v28 | (v28 << 8)) & 0xF000F000F000FLL | (16 * ((v28 | (v28 << 8)) & 0xFF00FF00FF00FFLL)) & 0xF0F0F0F0F0F0F0FLL;
      uint64_t v30 = (v27 | (v27 << 16)) & 0xFF000000FFLL | (((v27 | (v27 << 16)) & 0xFFFF0000FFFFLL) << 8) & 0xFF00FF00FF00FFLL;
      uint64_t v31 = (v30 | (16 * v30)) & 0x303030303030303 | (4 * ((v30 | (16 * v30)) & 0xF0F0F0F0F0F0F0FLL)) & 0x3333333333333333;
      *(void *)(result + 216) = (v29 | (4 * v29)) & 0x1111111111111111 | (2
                                                                            * ((v29 | (4 * v29)) & 0x3333333333333333)) & 0x5555555555555555 | ((4 * v31) | (2 * v31)) & 0xAAAAAAAAAAAAAAAALL;
    }
  }
  return result;
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1,std::allocator<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1>,void ()(geo::QuadTile const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned int v5 = *(unsigned __int8 *)(a2 + 1);
  if (*(unsigned __int8 *)(v4 + 1) < v5)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    v66[0] = *(unsigned char *)a2;
    v66[1] = v5;
    uint64_t v67 = *(void *)(a2 + 4);
    char v68 = 2;
    uint64_t v69 = 0;
    int v70 = 0;
    md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo::FlyoverOctileTileInfo((uint64_t)v65, (char *)v4, (uint64_t)v66, *(void *)(a1 + 40));
    std::__tree<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>>::__emplace_unique_key_args<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo const&>(*(uint64_t ***)(a1 + 32), (uint64_t)v65, (uint64_t)v65);
    **(unsigned char **)(a1 + 24) = 1;
    long long v8 = *(unsigned __int8 **)(a1 + 16);
    uint64_t v9 = v8[1];
    uint64_t v10 = *v8;
    uint64_t v11 = *(void *)(v8 + 4);
    int v12 = v8[24];
    __int16 v63 = *(_WORD *)(v8 + 25);
    unsigned __int8 v64 = v8[27];
    uint64_t v13 = *(void *)(v8 + 28);
    uint64_t v14 = *((unsigned int *)v8 + 9);
    signed int v15 = vcvtmd_s64_f64((double)*(int *)(*(void *)(a1 + 40) + 8) / (double)(1 << *(unsigned char *)(*(void *)(a1 + 40)
                                                                                               + 1)));
    uint64_t v18 = v13 & 0xFF00000000;
    uint64_t v19 = 2 * v13;
    if ((v13 & 0xFF00000000) == 0) {
      uint64_t v19 = 0;
    }
    unint64_t v16 = (v9
         + ((v10 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v10 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v10 - 0x61C8864680B583EBLL);
    unint64_t v17 = ((v16 << 6) + (int)v11 + (v16 >> 2) - 0x61C8864680B583EBLL) ^ v16;
    unint64_t v20 = (v19 | (v14 << 33)) ^ v17 ^ ((v17 << 6) + SHIDWORD(v11) + (v17 >> 2) - 0x61C8864680B583EBLL);
    unint64_t v21 = ((v20 << 6) + v15 + (v20 >> 2) - 0x61C8864680B583EBLL) ^ v20;
    unint64_t v22 = *(void *)(v7 + 776);
    uint64_t v61 = *(void *)(v8 + 4);
    unint64_t v62 = v21;
    if (v22)
    {
      uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        uint64_t v2 = ((v20 << 6) + v15 + (v20 >> 2) - 0x61C8864680B583EBLL) ^ v20;
        if (v21 >= v22) {
          uint64_t v2 = v21 % v22;
        }
      }
      else
      {
        uint64_t v2 = v21 & (v22 - 1);
      }
      int v24 = *(uint64_t ***)(*(void *)(v7 + 768) + 8 * v2);
      if (v24)
      {
        int v25 = *v24;
        if (v25)
        {
          if (v23.u32[0] <= 1uLL)
          {
            unint64_t v26 = v22 - 1;
            if (!v18)
            {
              while (1)
              {
                uint64_t v28 = v25[1];
                if (v28 == v21)
                {
                  if (*((unsigned __int8 *)v25 + 40) == v12
                    && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v9, v10)
                    && *(uint64_t *)((char *)v25 + 20) == v11
                    && *((_DWORD *)v25 + 13) == v14
                    && !*((unsigned char *)v25 + 48)
                    && *((unsigned __int8 *)v25 + 56) == v15)
                  {
                    return;
                  }
                }
                else if ((v28 & v26) != v2)
                {
                  goto LABEL_63;
                }
                int v25 = (uint64_t *)*v25;
                if (!v25) {
                  goto LABEL_63;
                }
              }
            }
            while (1)
            {
              uint64_t v27 = v25[1];
              if (v27 == v21)
              {
                if (*((unsigned __int8 *)v25 + 40) == v12
                  && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v9, v10)
                  && *(uint64_t *)((char *)v25 + 20) == v11
                  && *((_DWORD *)v25 + 13) == v14
                  && *((unsigned char *)v25 + 48)
                  && *((_DWORD *)v25 + 11) == v13
                  && *((unsigned __int8 *)v25 + 56) == v15)
                {
                  return;
                }
              }
              else if ((v27 & v26) != v2)
              {
                goto LABEL_63;
              }
              int v25 = (uint64_t *)*v25;
              if (!v25) {
                goto LABEL_63;
              }
            }
          }
          if (!v18)
          {
            while (1)
            {
              unint64_t v30 = v25[1];
              if (v30 == v21)
              {
                if (*((unsigned __int8 *)v25 + 40) == v12
                  && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v9, v10)
                  && *(uint64_t *)((char *)v25 + 20) == v11
                  && *((_DWORD *)v25 + 13) == v14
                  && !*((unsigned char *)v25 + 48)
                  && *((unsigned __int8 *)v25 + 56) == v15)
                {
                  return;
                }
              }
              else
              {
                if (v30 >= v22) {
                  v30 %= v22;
                }
                if (v30 != v2) {
                  goto LABEL_63;
                }
              }
              int v25 = (uint64_t *)*v25;
              if (!v25) {
                goto LABEL_63;
              }
            }
          }
          do
          {
            unint64_t v29 = v25[1];
            if (v29 == v21)
            {
              if (*((unsigned __int8 *)v25 + 40) == v12
                && __PAIR64__(*((unsigned __int8 *)v25 + 17), *((unsigned __int8 *)v25 + 16)) == __PAIR64__(v9, v10)
                && *(uint64_t *)((char *)v25 + 20) == v11
                && *((_DWORD *)v25 + 13) == v14
                && *((unsigned char *)v25 + 48)
                && *((_DWORD *)v25 + 11) == v13
                && *((unsigned __int8 *)v25 + 56) == v15)
              {
                return;
              }
            }
            else
            {
              if (v29 >= v22) {
                v29 %= v22;
              }
              if (v29 != v2) {
                break;
              }
            }
            int v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
      }
    }
LABEL_63:
    uint64_t v31 = (char *)operator new(0x40uLL);
    *(void *)uint64_t v31 = 0;
    *((void *)v31 + 1) = v62;
    v31[16] = v10;
    v31[17] = v9;
    *(void *)(v31 + 20) = v61;
    v31[40] = v12;
    *(_WORD *)(v31 + 41) = v63;
    v31[43] = v64;
    *(void *)(v31 + 44) = v13;
    *((_DWORD *)v31 + 13) = v14;
    v31[56] = v15;
    float v32 = (float)(unint64_t)(*(void *)(v7 + 792) + 1);
    float v33 = *(float *)(v7 + 800);
    if (v22 && (float)(v33 * (float)v22) >= v32)
    {
LABEL_119:
      uint64_t v58 = *(void *)(v7 + 768);
      unint64_t v59 = *(void **)(v58 + 8 * v2);
      if (v59)
      {
        *(void *)uint64_t v31 = *v59;
      }
      else
      {
        *(void *)uint64_t v31 = *(void *)(v7 + 784);
        *(void *)(v7 + 784) = v31;
        *(void *)(v58 + 8 * v2) = v7 + 784;
        if (!*(void *)v31)
        {
LABEL_128:
          ++*(void *)(v7 + 792);
          return;
        }
        unint64_t v60 = *(void *)(*(void *)v31 + 8);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v60 >= v22) {
            v60 %= v22;
          }
        }
        else
        {
          v60 &= v22 - 1;
        }
        unint64_t v59 = (void *)(*(void *)(v7 + 768) + 8 * v60);
      }
      *unint64_t v59 = v31;
      goto LABEL_128;
    }
    BOOL v34 = 1;
    if (v22 >= 3) {
      BOOL v34 = (v22 & (v22 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v22);
    unint64_t v36 = vcvtps_u32_f32(v32 / v33);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v22 = *(void *)(v7 + 776);
    }
    if (prime <= v22)
    {
      if (prime >= v22) {
        goto LABEL_115;
      }
      unint64_t v50 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 792) / *(float *)(v7 + 800));
      if (v22 < 3 || (uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
      {
        unint64_t v50 = std::__next_prime(v50);
      }
      else
      {
        uint64_t v52 = 1 << -(char)__clz(v50 - 1);
        if (v50 >= 2) {
          unint64_t v50 = v52;
        }
      }
      if (prime <= v50) {
        size_t prime = v50;
      }
      if (prime >= v22) {
        goto LABEL_115;
      }
      if (!prime)
      {
        uint64_t v57 = *(void **)(v7 + 768);
        *(void *)(v7 + 768) = 0;
        if (v57) {
          operator delete(v57);
        }
        *(void *)(v7 + 776) = 0;
        goto LABEL_115;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v38 = operator new(8 * prime);
    unsigned __int8 v39 = *(void **)(v7 + 768);
    *(void *)(v7 + 768) = v38;
    if (v39) {
      operator delete(v39);
    }
    uint64_t v40 = 0;
    *(void *)(v7 + 776) = prime;
    do
      *(void *)(*(void *)(v7 + 768) + 8 * v40++) = 0;
    while (prime != v40);
    uint64_t v41 = *(void **)(v7 + 784);
    if (!v41)
    {
LABEL_115:
      unint64_t v22 = *(void *)(v7 + 776);
      if ((v22 & (v22 - 1)) != 0)
      {
        uint64_t v2 = v62;
        if (v62 >= v22) {
          uint64_t v2 = v62 % v22;
        }
      }
      else
      {
        uint64_t v2 = (v22 - 1) & v62;
      }
      goto LABEL_119;
    }
    uint64_t v42 = v7 + 784;
    size_t v43 = v41[1];
    size_t v44 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v45 = v43 & v44;
      *(void *)(*(void *)(v7 + 768) + 8 * v45) = v42;
      while (1)
      {
        unint64_t v46 = (void *)*v41;
        if (!*v41) {
          break;
        }
        size_t v47 = v46[1] & v44;
        if (v47 == v45)
        {
          uint64_t v41 = (void *)*v41;
        }
        else
        {
          uint64_t v48 = *(void *)(v7 + 768);
          if (*(void *)(v48 + 8 * v47))
          {
            *uint64_t v41 = *v46;
            uint64_t v49 = 8 * v47;
            void *v46 = **(void **)(*(void *)(v7 + 768) + v49);
            **(void **)(*(void *)(v7 + 768) + v49) = v46;
          }
          else
          {
            *(void *)(v48 + 8 * v47) = v41;
            uint64_t v41 = v46;
            size_t v45 = v47;
          }
        }
      }
      goto LABEL_115;
    }
    if (v43 >= prime) {
      v43 %= prime;
    }
    *(void *)(*(void *)(v7 + 768) + 8 * v43) = v42;
    char v53 = (void *)*v41;
    if (!*v41) {
      goto LABEL_115;
    }
    while (1)
    {
      size_t v55 = v53[1];
      if (v55 >= prime) {
        v55 %= prime;
      }
      if (v55 != v43)
      {
        uint64_t v56 = *(void *)(v7 + 768);
        if (!*(void *)(v56 + 8 * v55))
        {
          *(void *)(v56 + 8 * v55) = v41;
          goto LABEL_101;
        }
        *uint64_t v41 = *v53;
        uint64_t v54 = 8 * v55;
        *char v53 = **(void **)(*(void *)(v7 + 768) + v54);
        **(void **)(*(void *)(v7 + 768) + v54) = v53;
        char v53 = v41;
      }
      size_t v55 = v43;
LABEL_101:
      uint64_t v41 = v53;
      char v53 = (void *)*v53;
      size_t v43 = v55;
      if (!v53) {
        goto LABEL_115;
      }
    }
  }
}

void sub_1A261D814(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1,std::allocator<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1>,void ()(geo::QuadTile const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF51F190;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1,std::allocator<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1>,void ()(geo::QuadTile const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EF51F190;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1,std::allocator<md::FlyoverCompleteTileDataLogic::collectFlyoverTilesInView(std::set<gdc::LayerDataWithWorld> const&,std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>> const&,std::set<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,std::allocator<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo>> &,md::FlyoverTileDataResolverContext const&)::$_1>,void ()(geo::QuadTile const&)>::~__func()
{
}

void std::__hash_table<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::__unordered_map_hasher<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,true>,std::__unordered_map_equal<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,md::FlyoverOctilePairHash,true>,std::allocator<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>>>::__emplace_unique_key_args<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6 = (a2[1]
      + ((*a2 - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)*a2 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*a2 - 0x61C8864680B583EBLL);
  unint64_t v7 = (*((int *)a2 + 1) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  if ((*(void *)(a2 + 28) & 0xFF00000000) != 0) {
    uint64_t v8 = 2 * *(void *)(a2 + 28);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = (v8 | ((unint64_t)*((unsigned int *)a2 + 9) << 33)) ^ v7 ^ (*((int *)a2 + 2)
                                                                        + (v7 << 6)
                                                                        + (v7 >> 2)
                                                                        - 0x61C8864680B583EBLL);
  unint64_t v10 = (a2[41]
       + ((a2[40] - 0x61C8864680B583EBLL) << 6)
       + (((unint64_t)a2[40] - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (a2[40] - 0x61C8864680B583EBLL);
  unint64_t v11 = (*((int *)a2 + 11) + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583EBLL) ^ v10;
  if ((*(void *)(a2 + 68) & 0xFF00000000) != 0) {
    uint64_t v12 = 2 * *(void *)(a2 + 68);
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v13 = ((v9 << 6)
       + (v9 >> 2)
       + ((v12 | ((unint64_t)*((unsigned int *)a2 + 19) << 33)) ^ v11 ^ (*((int *)a2 + 12)
                                                                              + (v11 << 6)
                                                                              + (v11 >> 2)
                                                                              - 0x61C8864680B583EBLL))
       - 0x61C8864680B583EBLL) ^ v9;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v3 = ((v9 << 6)
          + (v9 >> 2)
          + ((v12 | ((unint64_t)*((unsigned int *)a2 + 19) << 33)) ^ v11 ^ (*((int *)a2 + 12)
                                                                                 + (v11 << 6)
                                                                                 + (v11 >> 2)
                                                                                 - 0x61C8864680B583EBLL))
          - 0x61C8864680B583EBLL) ^ v9;
      if (v13 >= v14) {
        unint64_t v3 = v13 % v14;
      }
    }
    else
    {
      unint64_t v3 = v13 & (v14 - 1);
    }
    unint64_t v17 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v17)
    {
      uint64_t v18 = *v17;
      if (*v17)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = *((void *)v18 + 1);
            if (v20 == v13)
            {
              if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v18 + 16, a2)) {
                return;
              }
            }
            else if ((v20 & (v14 - 1)) != v3)
            {
              goto LABEL_28;
            }
            uint64_t v18 = *(unsigned __int8 **)v18;
            if (!v18) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v19 = *((void *)v18 + 1);
          if (v19 == v13)
          {
            if (std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>::operator()[abi:nn180100](v18 + 16, a2)) {
              return;
            }
          }
          else
          {
            if (v19 >= v14) {
              v19 %= v14;
            }
            if (v19 != v3) {
              break;
            }
          }
          uint64_t v18 = *(unsigned __int8 **)v18;
        }
        while (v18);
      }
    }
  }
LABEL_28:
  unint64_t v21 = (void *)(a1 + 16);
  unint64_t v22 = (char *)operator new(0xF8uLL);
  *(void *)unint64_t v22 = 0;
  *((void *)v22 + 1) = v13;
  *((_WORD *)v22 + 8) = *(_WORD *)a3;
  *(void *)(v22 + 20) = *(void *)(a3 + 4);
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(a3 + 24);
  *((_WORD *)v22 + 28) = *(_WORD *)(a3 + 40);
  *(void *)(v22 + 60) = *(void *)(a3 + 44);
  long long v23 = *(_OWORD *)(a3 + 64);
  v22[96] = *(unsigned char *)(a3 + 80);
  *((_OWORD *)v22 + 5) = v23;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v22 + 104), a3 + 88);
  v22[192] = 0;
  if (*(unsigned char *)(a3 + 176))
  {
    *((_DWORD *)v22 + 49) = *(_DWORD *)(a3 + 180);
    v22[192] = 1;
  }
  *((void *)v22 + 25) = *(void *)(a3 + 184);
  *((_WORD *)v22 + 104) = *(_WORD *)(a3 + 192);
  *(void *)(v22 + 212) = *(void *)(a3 + 196);
  *(_OWORD *)(v22 + 232) = *(_OWORD *)(a3 + 216);
  *(void *)(a3 + 216) = 0;
  *(void *)(a3 + 224) = 0;
  float v24 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v25 = *(float *)(a1 + 32);
  if (!v14 || (float)(v25 * (float)v14) < v24)
  {
    BOOL v26 = v14 < 3 || (v14 & (v14 - 1)) != 0;
    unint64_t v27 = v26 | (2 * v14);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v30) {
      goto LABEL_43;
    }
    if (prime < *(void *)&v30)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v30 < 3uLL || (uint8x8_t v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime < *(void *)&v30) {
LABEL_43:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        unint64_t v3 = v13 % v14;
      }
      else {
        unint64_t v3 = v13;
      }
    }
    else
    {
      unint64_t v3 = (v14 - 1) & v13;
    }
  }
  uint64_t v34 = *(void *)a1;
  unint64_t v35 = *(void **)(*(void *)a1 + 8 * v3);
  if (v35)
  {
    *(void *)unint64_t v22 = *v35;
LABEL_67:
    *unint64_t v35 = v22;
    goto LABEL_68;
  }
  *(void *)unint64_t v22 = *v21;
  *unint64_t v21 = v22;
  *(void *)(v34 + 8 * v3) = v21;
  if (*(void *)v22)
  {
    unint64_t v36 = *(void *)(*(void *)v22 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v36 >= v14) {
        v36 %= v14;
      }
    }
    else
    {
      v36 &= v14 - 1;
    }
    unint64_t v35 = (void *)(*(void *)a1 + 8 * v36);
    goto LABEL_67;
  }
LABEL_68:
  ++*(void *)(a1 + 24);
}

void sub_1A261DD20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,md::FlyoverCompleteTileDataLogic::FallbackInfo>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*(unsigned char *)(a1 + 176)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(unsigned char *)(a1 + 176)) {
LABEL_4:
  }
    *(unsigned char *)(a1 + 176) = 0;
LABEL_5:
  unint64_t v3 = *(void **)(a1 + 96);
  if (v3 != *(void **)(a1 + 112)) {
    free(v3);
  }
  return a1;
}

void md::FlyoverCompleteTileDataLogic::FallbackInfo::~FallbackInfo(md::FlyoverCompleteTileDataLogic::FallbackInfo *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*((unsigned char *)this + 96)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*((unsigned char *)this + 96)) {
LABEL_4:
  }
    *((unsigned char *)this + 96) = 0;
LABEL_5:
  unint64_t v3 = (void *)*((void *)this + 2);
  if (v3 != *((void **)this + 4)) {
    free(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unsigned int v5 = (void *)*v2;
      unint64_t v6 = (unsigned char *)v2[7];
      if (v6)
      {
        do
        {
          if (v6[112]) {
            v6[112] = 0;
          }
          uint64_t v8 = *(unsigned char **)v6;
          unint64_t v9 = (void *)*((void *)v6 + 4);
          if (v9 != *((void **)v6 + 6)) {
            free(v9);
          }
          operator delete(v6);
          unint64_t v6 = v8;
        }
        while (v8);
      }
      unint64_t v7 = (void *)v2[5];
      v2[5] = 0;
      if (v7) {
        operator delete(v7);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::find<md::FlyoverCompleteTileDataLogic::DrapingTask>(void *a1, uint64_t a2)
{
  unint64_t v4 = md::FlyoverCompleteTileDataLogic::DrapingTaskHash::operator()(a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  unint64_t v10 = (void *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v13 = v10[1];
        if (v13 == v6)
        {
          if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v10 + 2), a2)) {
            return v10;
          }
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        unint64_t v10 = (void *)*v10;
        if (!v10) {
          return v10;
        }
      }
    }
    do
    {
      unint64_t v12 = v10[1];
      if (v12 == v6)
      {
        if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v10 + 2), a2)) {
          return v10;
        }
      }
      else
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      unint64_t v10 = (void *)*v10;
    }
    while (v10);
  }
  return v10;
}

void *std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>>::~pair(void *a1)
{
  if (a1[12])
  {
    uint64_t v2 = a1 + 10;
    uint64_t v3 = a1[10];
    unint64_t v4 = (uint64_t *)a1[11];
    uint64_t v5 = *v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    a1[12] = 0;
    if (v4 != a1 + 10)
    {
      do
      {
        unint64_t v6 = (uint64_t *)v4[1];
        std::__function::__alloc_func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy[abi:nn180100](v4 + 2);
        operator delete(v4);
        unint64_t v4 = v6;
      }
      while (v6 != v2);
    }
  }
  return a1;
}

uint64_t *std::list<md::FlyoverDynamicGeometry>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__function::__alloc_func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy[abi:nn180100](v3 + 2);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,std::shared_ptr<geo::Task>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

unint64_t md::FlyoverCompleteTileDataLogic::DrapingTaskHash::operator()(uint64_t a1)
{
  unint64_t v1 = (*(unsigned __int8 *)(a1 + 65)
      + ((*(unsigned __int8 *)(a1 + 64) - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)*(unsigned __int8 *)(a1 + 64) - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*(unsigned __int8 *)(a1 + 64) - 0x61C8864680B583EBLL);
  unint64_t v2 = (*(int *)(a1 + 68) + (v1 << 6) + (v1 >> 2) - 0x61C8864680B583EBLL) ^ v1;
  if ((*(void *)(a1 + 92) & 0xFF00000000) != 0) {
    uint64_t v3 = 2 * *(void *)(a1 + 92);
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t v4 = (v3 | ((unint64_t)*(unsigned int *)(a1 + 100) << 33)) ^ v2 ^ (*(int *)(a1 + 72)
                                                                          + (v2 << 6)
                                                                          + (v2 >> 2)
                                                                          - 0x61C8864680B583EBLL);
  unint64_t v5 = (*(unsigned __int8 *)(a1 + 25)
      + ((*(unsigned __int8 *)(a1 + 24) - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)*(unsigned __int8 *)(a1 + 24) - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*(unsigned __int8 *)(a1 + 24) - 0x61C8864680B583EBLL);
  unint64_t v6 = (*(int *)(a1 + 28) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  if ((*(void *)(a1 + 52) & 0xFF00000000) != 0) {
    uint64_t v7 = 2 * *(void *)(a1 + 52);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = ((v4 << 6)
      + (v4 >> 2)
      + ((v7 | ((unint64_t)*(unsigned int *)(a1 + 60) << 33)) ^ v6 ^ (*(int *)(a1 + 32)
                                                                           + (v6 << 6)
                                                                           + (v6 >> 2)
                                                                           - 0x61C8864680B583EBLL))
      - 0x61C8864680B583EBLL) ^ v4;
  unint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = HIDWORD(v9);
  unint64_t v11 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47))
        + (v8 << 6)
        + (v8 >> 2)
        - 0x61C8864680B583EBLL) ^ v8;
}

BOOL md::FlyoverCompleteTileDataLogic::DrapingTask::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88)
    || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)
    || *(unsigned __int8 *)(a1 + 65) != *(unsigned __int8 *)(a2 + 65)
    || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)
    || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)
    || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 96) && *(unsigned char *)(a2 + 96))
  {
    if (*(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 96) != 0) != (*(unsigned char *)(a2 + 96) != 0))
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)
    || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)
    || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25)
    || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 56) && *(unsigned char *)(a2 + 56))
  {
    if (*(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 56) != 0) != (*(unsigned char *)(a2 + 56) != 0))
  {
    return 0;
  }
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[16];
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      unint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::operator()(unint64_t a1)
{
  unint64_t v1 = a1;
  char v2 = *(unsigned char *)(a1 + 41) - *(unsigned char *)(a1 + 81);
  float v3 = (float)(1 << v2);
  float v4 = (float)(*(_DWORD *)(a1 + 48) - (*(_DWORD *)(a1 + 88) << v2)) / v3;
  float v5 = (float)(((*(_DWORD *)(a1 + 84) + 1) << v2) + ~*(_DWORD *)(a1 + 44)) / v3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    char v7 = *(unsigned char *)(v6 + 57);
  }
  else {
    char v7 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  LOWORD(v75) = 257;
  *((float *)&v75 + 1) = v4;
  *(float *)&unint64_t v76 = v5;
  *((float *)&v76 + 1) = 1.0 / v3;
  md::FlyoverTileBuilder::generateHeightMesh(&v89, a1 + 40, (float *)v6, (float *)&v75);
  unint64_t v9 = (std::__shared_weak_count *)operator new(0xA8uLL);
  unint64_t v10 = v9;
  v9->__shared_owners_ = 0;
  p_shared_owners = &v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5830B0;
  unint64_t v12 = (std::__shared_weak_count_vtbl *)&v9[1];
  uint64_t v75 = v89;
  unint64_t v76 = v90;
  if (v90) {
    atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v71 = v7;
  uint64_t v13 = v92;
  float v97 = v91;
  long long v98 = v92;
  if (v92)
  {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)&v9[1], (uint64_t)"Height Mesh Fallback", &v75, (uint64_t *)&v97);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh((uint64_t)&v9[1], (uint64_t)"Height Mesh Fallback", &v75, (uint64_t *)&v97);
  }
  unint64_t v14 = v76;
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v16 = *((void *)v91 + 5);
  uint64_t v15 = *((void *)v91 + 6);
  unint64_t v17 = *((void *)v91 + 1);
  uint64_t v74 = p_shared_owners;
  uint64_t v18 = (std::__shared_weak_count *)operator new(0x68uLL);
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E300;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  v18[1].__vftable = v12;
  v18[1].__shared_owners_ = (uint64_t)v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  v18[1].__shared_weak_owners_ = 0;
  v18[2].__vftable = (std::__shared_weak_count_vtbl *)((v15 - v16) / v17);
  LOBYTE(v18[2].__shared_owners_) = 3;
  *(_OWORD *)((char *)&v18[2].__shared_owners_ + 4) = v95;
  *(std::__shared_weak_count_vtbl **)((char *)&v18[3].__vftable + 4) = v96;
  WORD2(v18[3].__shared_owners_) = 0;
  v18[3].__shared_weak_owners_ = 0;
  v18[4].__vftable = 0;
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  unint64_t v73 = &v18->__shared_owners_;
  std::mutex::lock((std::mutex *)(v8 + 488));
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
  unint64_t v19 = *(std::__shared_weak_count **)(v1 + 24);
  uint64_t v70 = *(void *)(v1 + 16);
  uint64_t v75 = v70;
  unint64_t v76 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v69 = *(void *)(v1 + 32);
  uint64_t v77 = v69;
  char v67 = *(unsigned char *)(v1 + 40);
  char v68 = *(unsigned char *)(v1 + 41);
  char v78 = v67;
  char v79 = v68;
  uint64_t v20 = *(void *)(v1 + 44);
  uint64_t v80 = v20;
  long long v81 = *(_OWORD *)(v1 + 64);
  char v21 = *(unsigned char *)(v1 + 81);
  char v22 = *(unsigned char *)(v1 + 80);
  char v82 = v22;
  char v83 = v21;
  uint64_t v23 = *(void *)(v1 + 84);
  uint64_t v84 = v23;
  long long v85 = *(_OWORD *)(v1 + 104);
  *(void *)&long long v86 = v18 + 1;
  *((void *)&v86 + 1) = v18;
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v87 = v12;
  *((void *)&v87 + 1) = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  *(_OWORD *)uint64_t v88 = v93;
  *(void *)&v88[16] = v94;
  v88[24] = v71;
  unint64_t v24 = md::FlyoverCompleteTileDataLogic::DrapingTaskHash::operator()((uint64_t)&v75);
  unint64_t v25 = v24;
  unint64_t v26 = *(void *)(v8 + 640);
  if (!v26) {
    goto LABEL_38;
  }
  uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] > 1uLL)
  {
    unint64_t v1 = v24;
    if (v24 >= v26) {
      unint64_t v1 = v24 % v26;
    }
  }
  else
  {
    unint64_t v1 = (v26 - 1) & v24;
  }
  unint64_t v28 = *(void **)(*(void *)(v8 + 632) + 8 * v1);
  if (!v28 || (unint64_t v29 = (void *)*v28) == 0)
  {
LABEL_38:
    uint8x8_t v32 = (char *)operator new(0xB8uLL);
    uint64_t v33 = v32;
    float v97 = v32;
    long long v98 = (std::__shared_weak_count *)(v8 + 648);
    unint64_t v72 = (void *)(v8 + 648);
    *(void *)uint8x8_t v32 = 0;
    *((void *)v32 + 1) = v25;
    *((void *)v32 + 2) = v70;
    *((void *)v32 + 3) = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)v32 + 4) = v69;
    v32[40] = v67;
    v32[41] = v68;
    *(void *)(v32 + 44) = v20;
    *((_OWORD *)v32 + 4) = v81;
    v32[80] = v22;
    v32[81] = v21;
    *(void *)(v32 + 84) = v23;
    *(_OWORD *)(v32 + 104) = v85;
    *(_OWORD *)(v32 + 120) = v86;
    long long v86 = 0uLL;
    *(_OWORD *)(v32 + 136) = v87;
    long long v87 = 0uLL;
    *(_OWORD *)(v32 + 161) = *(_OWORD *)&v88[9];
    *(_OWORD *)(v32 + 152) = *(_OWORD *)v88;
    char v99 = 1;
    float v34 = (float)(unint64_t)(*(void *)(v8 + 656) + 1);
    float v35 = *(float *)(v8 + 664);
    unint64_t v36 = v74;
    if (v26 && (float)(v35 * (float)v26) >= v34)
    {
LABEL_91:
      uint64_t v59 = *(void *)(v8 + 632);
      unint64_t v60 = *(void **)(v59 + 8 * v1);
      if (v60)
      {
        *(void *)uint64_t v33 = *v60;
      }
      else
      {
        *(void *)uint64_t v33 = *v72;
        *unint64_t v72 = v33;
        *(void *)(v59 + 8 * v1) = v72;
        if (!*(void *)v33)
        {
LABEL_100:
          ++*(void *)(v8 + 656);
          goto LABEL_101;
        }
        unint64_t v61 = *(void *)(*(void *)v33 + 8);
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v61 >= v26) {
            v61 %= v26;
          }
        }
        else
        {
          v61 &= v26 - 1;
        }
        unint64_t v60 = (void *)(*(void *)(v8 + 632) + 8 * v61);
      }
      *unint64_t v60 = v33;
      goto LABEL_100;
    }
    BOOL v37 = v26 < 3 || (v26 & (v26 - 1)) != 0;
    unint64_t v38 = v37 | (2 * v26);
    unint64_t v39 = vcvtps_u32_f32(v34 / v35);
    if (v38 <= v39) {
      size_t prime = v39;
    }
    else {
      size_t prime = v38;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v26 = *(void *)(v8 + 640);
    if (prime <= v26)
    {
      if (prime >= v26) {
        goto LABEL_78;
      }
      unint64_t v52 = vcvtps_u32_f32((float)*(unint64_t *)(v8 + 656) / *(float *)(v8 + 664));
      if (v26 < 3 || (uint8x8_t v53 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v53.i16[0] = vaddlv_u8(v53), v53.u32[0] > 1uLL))
      {
        unint64_t v52 = std::__next_prime(v52);
      }
      else
      {
        uint64_t v54 = 1 << -(char)__clz(v52 - 1);
        if (v52 >= 2) {
          unint64_t v52 = v54;
        }
      }
      if (prime <= v52) {
        size_t prime = v52;
      }
      if (prime >= v26)
      {
        unint64_t v26 = *(void *)(v8 + 640);
LABEL_78:
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v25 >= v26) {
            unint64_t v1 = v25 % v26;
          }
          else {
            unint64_t v1 = v25;
          }
        }
        else
        {
          unint64_t v1 = (v26 - 1) & v25;
        }
        goto LABEL_91;
      }
      if (!prime)
      {
        long long v66 = *(void **)(v8 + 632);
        *(void *)(v8 + 632) = 0;
        if (v66) {
          operator delete(v66);
        }
        unint64_t v26 = 0;
        *(void *)(v8 + 640) = 0;
        goto LABEL_78;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v41 = operator new(8 * prime);
    uint64_t v42 = *(void **)(v8 + 632);
    *(void *)(v8 + 632) = v41;
    if (v42) {
      operator delete(v42);
    }
    uint64_t v43 = 0;
    *(void *)(v8 + 640) = prime;
    do
      *(void *)(*(void *)(v8 + 632) + 8 * v43++) = 0;
    while (prime != v43);
    size_t v44 = (void *)*v72;
    if (!*v72)
    {
LABEL_77:
      unint64_t v26 = prime;
      goto LABEL_78;
    }
    size_t v45 = v44[1];
    size_t v46 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v47 = v45 & v46;
      *(void *)(*(void *)(v8 + 632) + 8 * v47) = v72;
      for (uint64_t i = (void *)*v44; *v44; uint64_t i = (void *)*v44)
      {
        size_t v49 = i[1] & v46;
        if (v49 == v47)
        {
          size_t v44 = i;
        }
        else
        {
          uint64_t v50 = *(void *)(v8 + 632);
          if (*(void *)(v50 + 8 * v49))
          {
            *size_t v44 = *i;
            uint64_t v51 = 8 * v49;
            *uint64_t i = **(void **)(*(void *)(v8 + 632) + v51);
            **(void **)(*(void *)(v8 + 632) + v51) = i;
          }
          else
          {
            *(void *)(v50 + 8 * v49) = v44;
            size_t v44 = i;
            size_t v47 = v49;
          }
        }
      }
      goto LABEL_77;
    }
    if (v45 >= prime) {
      v45 %= prime;
    }
    *(void *)(*(void *)(v8 + 632) + 8 * v45) = v72;
    size_t v55 = (void *)*v44;
    if (!*v44) {
      goto LABEL_77;
    }
    while (1)
    {
      size_t v57 = v55[1];
      if (v57 >= prime) {
        v57 %= prime;
      }
      if (v57 != v45)
      {
        uint64_t v58 = *(void *)(v8 + 632);
        if (!*(void *)(v58 + 8 * v57))
        {
          *(void *)(v58 + 8 * v57) = v44;
          goto LABEL_82;
        }
        *size_t v44 = *v55;
        uint64_t v56 = 8 * v57;
        *size_t v55 = **(void **)(*(void *)(v8 + 632) + v56);
        **(void **)(*(void *)(v8 + 632) + v56) = v55;
        size_t v55 = v44;
      }
      size_t v57 = v45;
LABEL_82:
      size_t v44 = v55;
      size_t v55 = (void *)*v55;
      size_t v45 = v57;
      if (!v55) {
        goto LABEL_77;
      }
    }
  }
  if (v27.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v31 = v29[1];
      if (v31 == v25)
      {
        if (md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v29 + 2), (uint64_t)&v75)) {
          goto LABEL_123;
        }
      }
      else if ((v31 & (v26 - 1)) != v1)
      {
        goto LABEL_38;
      }
      unint64_t v29 = (void *)*v29;
      if (!v29) {
        goto LABEL_38;
      }
    }
  }
  while (1)
  {
    unint64_t v30 = v29[1];
    if (v30 == v25) {
      break;
    }
    if (v30 >= v26) {
      v30 %= v26;
    }
    if (v30 != v1) {
      goto LABEL_38;
    }
LABEL_28:
    unint64_t v29 = (void *)*v29;
    if (!v29) {
      goto LABEL_38;
    }
  }
  if (!md::FlyoverCompleteTileDataLogic::DrapingTask::operator==((uint64_t)(v29 + 2), (uint64_t)&v75)) {
    goto LABEL_28;
  }
LABEL_123:
  unint64_t v36 = v74;
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_101:
  unint64_t v62 = (std::__shared_weak_count *)*((void *)&v86 + 1);
  if (*((void *)&v86 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  __int16 v63 = v76;
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  if (!atomic_fetch_add(v36, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (!atomic_fetch_add(v73, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  std::mutex::unlock((std::mutex *)(v8 + 488));
  if (atomic_fetch_add(v73, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(v36, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_113;
    }
LABEL_116:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    unsigned __int8 v64 = v92;
    if (v92) {
      goto LABEL_117;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!atomic_fetch_add(v36, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_116;
    }
LABEL_113:
    unsigned __int8 v64 = v92;
    if (v92)
    {
LABEL_117:
      if (!atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
  }
  unint64_t v65 = v90;
  if (v90)
  {
    if (!atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_1A261F014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, uint64_t a13, atomic_ullong *a14, atomic_ullong *a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,void *>>>>::~unique_ptr[abi:nn180100](v32 - 128);
  if (a31 && !atomic_fetch_add(&a31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a31->__on_zero_shared)(a31);
    std::__shared_weak_count::__release_weak(a31);
  }
  if (a18 && !atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
    std::__shared_weak_count::__release_weak(a18);
  }
  if (!atomic_fetch_add(a15, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (!atomic_fetch_add(a14, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
    std::__shared_weak_count::__release_weak(a16);
  }
  std::mutex::unlock(a12);
  if (!atomic_fetch_add(a14, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
    std::__shared_weak_count::__release_weak(a16);
  }
  if (!atomic_fetch_add(a15, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  float v34 = *(std::__shared_weak_count **)(v32 - 192);
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  float v35 = *(std::__shared_weak_count **)(v32 - 208);
  if (v35)
  {
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  char v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>,0>(v2 + 2);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::Mesh>::__on_zero_shared(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }
  else
  {
    float v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__shared_ptr_emplace<md::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  char v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

__n128 std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF51F148;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  *(void *)(a2 + 44) = *(void *)(a1 + 44);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_WORD *)(a2 + 80) = *(_WORD *)(a1 + 80);
  *(void *)(a2 + 84) = *(void *)(a1 + 84);
  __n128 result = *(__n128 *)(a1 + 104);
  *(__n128 *)(a2 + 104) = result;
  return result;
}

__n128 std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x78uLL);
  *(void *)uint64_t v2 = &unk_1EF51F148;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)v2 + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v2 + 4) = *(void *)(a1 + 32);
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  *(void *)(v2 + 44) = *(void *)(a1 + 44);
  *((_OWORD *)v2 + 4) = *(_OWORD *)(a1 + 64);
  *((_WORD *)v2 + 40) = *(_WORD *)(a1 + 80);
  *(void *)(v2 + 84) = *(void *)(a1 + 84);
  __n128 result = *(__n128 *)(a1 + 104);
  *(__n128 *)(v2 + 104) = result;
  return result;
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF51F148;
  unint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::submitDrapings(md::FlyoverCompleteTileDataLogic::DrapingTask const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF51F148;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::TexturedRenderable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TexturedRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TexturedRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (unsigned char *)v2[7];
      if (v3)
      {
        do
        {
          if (v3[112]) {
            v3[112] = 0;
          }
          uint64_t v6 = *(unsigned char **)v3;
          char v7 = (void *)*((void *)v3 + 4);
          if (v7 != *((void **)v3 + 6)) {
            free(v7);
          }
          operator delete(v3);
          uint64_t v3 = v6;
        }
        while (v6);
      }
      float v4 = (void *)v2[5];
      v2[5] = 0;
      if (v4) {
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<md::FlyoverOctile,md::FlyoverOctile>,md::FlyoverCompleteTileDataLogic::FallbackInfo>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(std::__shared_weak_count **)(v2 + 240);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      if (*(unsigned char *)(v2 + 192)) {
        *(unsigned char *)(v2 + 192) = 0;
      }
      float v4 = *(void **)(v2 + 112);
      if (v4 != *(void **)(v2 + 128)) {
        free(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::FlyoverOctile,gdc::LayerDataKey>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::FlyoverOctile,gdc::LayerDataKey>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[8];
      if (v3 != (void *)v2[10]) {
        free(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)float v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "FlyoverCompleteTileDataLogic", "", v5, 2u);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51F220;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51F220;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51F1D8;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51F1D8;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md28FlyoverCompleteTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_20TileSelectionContextENS2_30FlyoverTileDataResolverContextENS2_19PendingSceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverCompleteTileDataContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

double md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xD3D7935EF848FCE7 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_71;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x64780CBD71DF7CF5;
    if (a3 <= 0x64780CBD71DF7CF5) {
      uint64_t v4 = 0x64780CBD71DF7CF5 % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x64780CBD71DF7CF5;
  }
  char v7 = *(void **)(a2 + 8 * v4);
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0x64780CBD71DF7CF5)
      {
        if (v8[2] == 0x64780CBD71DF7CF5) {
          goto LABEL_23;
        }
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == 0x64780CBD71DF7CF5) {
      break;
    }
    if (v9 >= a3) {
      v9 %= a3;
    }
    if (v9 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_25;
    }
  }
  if (v8[2] != 0x64780CBD71DF7CF5) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v11 = v8[5];
  if (*(void *)(v11 + 8) == 0x64780CBD71DF7CF5)
  {
    uint64_t v6 = *(void *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v12 = 0x479E84E48468DB70;
    if (a3 <= 0x479E84E48468DB70) {
      uint64_t v12 = 0x479E84E48468DB70 % a3;
    }
  }
  else
  {
    uint64_t v12 = (a3 - 1) & 0x479E84E48468DB70;
  }
  uint64_t v13 = *(void **)(a2 + 8 * v12);
  if (!v13) {
    goto LABEL_48;
  }
  unint64_t v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x479E84E48468DB70)
      {
        if (v14[2] == 0x479E84E48468DB70) {
          goto LABEL_46;
        }
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      unint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v15 = v14[1];
    if (v15 != 0x479E84E48468DB70)
    {
      if (v15 >= a3) {
        v15 %= a3;
      }
      if (v15 != v12) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v14[2] != 0x479E84E48468DB70)
    {
LABEL_35:
      unint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0x479E84E48468DB70)
  {
    uint64_t v5 = *(void *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x9F2276D081C2CB20;
    if (a3 <= 0x9F2276D081C2CB20) {
      unint64_t v18 = 0x9F2276D081C2CB20 % a3;
    }
  }
  else
  {
    unint64_t v18 = (a3 - 1) & 0x9F2276D081C2CB20;
  }
  unint64_t v19 = *(void **)(a2 + 8 * v18);
  if (!v19) {
    goto LABEL_71;
  }
  uint64_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0x9F2276D081C2CB20)
      {
        if (v20[2] == 0x9F2276D081C2CB20) {
          goto LABEL_69;
        }
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == 0x9F2276D081C2CB20) {
      break;
    }
    if (v21 >= a3) {
      v21 %= a3;
    }
    if (v21 != v18) {
      goto LABEL_71;
    }
LABEL_58:
    uint64_t v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_71;
    }
  }
  if (v20[2] != 0x9F2276D081C2CB20) {
    goto LABEL_58;
  }
LABEL_69:
  uint64_t v23 = v20[5];
  if (*(void *)(v23 + 8) != 0x9F2276D081C2CB20)
  {
LABEL_71:
    uint64_t v24 = 0;
    goto LABEL_72;
  }
  uint64_t v24 = *(void *)(v23 + 32);
LABEL_72:
  void *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xD3D7935EF848FCE7)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xD3D7935EF848FCE7)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xD3D7935EF848FCE7)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xD3D7935EF848FCE7)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::Logic<md::FlyoverCompleteTileDataLogic,md::FlyoverCompleteTileDataContext,md::LogicDependencies<gdc::TypeList<md::TileSelectionContext,md::FlyoverTileDataResolverContext,md::PendingSceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A26202B8(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::FlyoverCompleteTileDataContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::FlyoverCompleteTileDataContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5149C0;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x20C40769AC3DALL);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::FlyoverCompleteTileDataContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5149C0;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x20C40769AC3DALL);
  }
  return a1;
}

double md::FlyoverCompleteTileDataLogic::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void *std::__function::__func<md::FlyoverCompleteTileDataLogic::reset(void)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::reset(void)::$_0>,void ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF51F268;
  return result;
}

void std::__function::__func<md::FlyoverCompleteTileDataLogic::reset(void)::$_0,std::allocator<md::FlyoverCompleteTileDataLogic::reset(void)::$_0>,void ()(void)>::~__func()
{
}

void md::FlyoverCompleteTileDataLogic::~FlyoverCompleteTileDataLogic(md::FlyoverCompleteTileDataLogic *this)
{
  md::FlyoverCompleteTileDataLogic::~FlyoverCompleteTileDataLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  md::FlyoverCompleteTileDataLogic *v16;
  uint64_t v17;
  uint64_t v18;
  md::FlyoverCompleteTileDataLogic *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  *(void *)this = &unk_1EF513C38;
  md::FlyoverCompleteTileDataLogic::reset(this);
  uint64_t v2 = (void *)*((void *)this + 98);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 96);
  *((void *)this + 96) = 0;
  if (v4) {
    operator delete(v4);
  }
  std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(*((void **)this + 93));
  uint64_t v5 = (void *)*((void *)this + 89);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  char v7 = (void *)*((void *)this + 87);
  *((void *)this + 87) = 0;
  if (v7) {
    operator delete(v7);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 85));
  uint64_t v8 = (void *)*((void *)this + 81);
  if (v8)
  {
    do
    {
      unint64_t v9 = (void *)*v8;
      std::__destroy_at[abi:nn180100]<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>,0>(v8 + 2);
      operator delete(v8);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = (void *)*((void *)this + 79);
  *((void *)this + 79) = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 76);
  if (v11)
  {
    do
    {
      uint64_t v12 = (void *)*v11;
      std::__destroy_at[abi:nn180100]<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>,0>(v11 + 2);
      operator delete(v11);
      uint64_t v11 = v12;
    }
    while (v12);
  }
  uint64_t v13 = (void *)*((void *)this + 74);
  *((void *)this + 74) = 0;
  if (v13) {
    operator delete(v13);
  }
  std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::~__hash_table((uint64_t)this + 552);
  std::mutex::~mutex((std::mutex *)((char *)this + 488));
  unint64_t v14 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  unint64_t v15 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (*((void *)this + 57))
  {
    uint64_t v17 = *((void *)this + 55);
    uint64_t v16 = (md::FlyoverCompleteTileDataLogic *)*((void *)this + 56);
    unint64_t v18 = *(void *)v16;
    *(void *)(v18 + 8) = *(void *)(v17 + 8);
    **(void **)(v17 + 8) = v18;
    *((void *)this + 57) = 0;
    if (v16 != (md::FlyoverCompleteTileDataLogic *)((char *)this + 440))
    {
      do
      {
        unint64_t v19 = (md::FlyoverCompleteTileDataLogic *)*((void *)v16 + 1);
        operator delete(v16);
        uint64_t v16 = v19;
      }
      while (v19 != (md::FlyoverCompleteTileDataLogic *)((char *)this + 440));
    }
  }
  uint64_t v20 = (void *)*((void *)this + 52);
  if (v20)
  {
    do
    {
      unint64_t v21 = (void *)*v20;
      operator delete(v20);
      uint64_t v20 = v21;
    }
    while (v21);
  }
  uint64_t v22 = (void *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v22) {
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 45);
  if (v23)
  {
    do
    {
      uint64_t v32 = (void *)*v23;
      uint64_t v33 = (void *)v23[11];
      if (v33)
      {
        v23[12] = v33;
        operator delete(v33);
      }
      float v34 = (void *)v23[8];
      if (v34)
      {
        v23[9] = v34;
        operator delete(v34);
      }
      operator delete(v23);
      uint64_t v23 = v32;
    }
    while (v32);
  }
  uint64_t v24 = (void *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v24) {
    operator delete(v24);
  }
  unint64_t v25 = (void *)*((void *)this + 40);
  if (v25)
  {
    do
    {
      float v35 = (void *)*v25;
      unint64_t v36 = (void *)v25[12];
      if (v36)
      {
        v25[13] = v36;
        operator delete(v36);
      }
      operator delete(v25);
      unint64_t v25 = v35;
    }
    while (v35);
  }
  unint64_t v26 = (void *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v26) {
    operator delete(v26);
  }
  uint8x8_t v27 = (void *)*((void *)this + 33);
  if (v27)
  {
    do
    {
      unint64_t v28 = (void *)*v27;
      operator delete(v27);
      uint8x8_t v27 = v28;
    }
    while (v28);
  }
  unint64_t v29 = (void *)*((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v29) {
    operator delete(v29);
  }
  std::__list_imp<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,std::allocator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry>>::clear((uint64_t *)this + 28);
  unint64_t v30 = (void *)*((void *)this + 25);
  if (v30)
  {
    do
    {
      BOOL v37 = (void *)*v30;
      unint64_t v38 = (void *)v30[8];
      if (v38)
      {
        v30[9] = v38;
        operator delete(v38);
      }
      operator delete(v30);
      unint64_t v30 = v37;
    }
    while (v37);
  }
  uint64_t v31 = (void *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v31) {
    operator delete(v31);
  }
  std::deque<md::FlyoverOctile>::~deque[abi:nn180100]((uint64_t)this + 120);
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void sub_1A26207A8(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 768);
  std::__tree<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,std::__map_value_compare<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>,md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfoCompare,true>,std::allocator<std::__value_type<md::FlyoverCompleteTileDataLogic::FlyoverOctileTileInfo,md::FlyoverCompleteTileDataLogic::TransitionInfo>>>::destroy(*(void **)(v1 + 744));
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 696);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 680));
  std::unordered_map<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,std::allocator<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::~unordered_map[abi:nn180100](v1 + 632);
  std::unordered_map<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,std::allocator<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::~unordered_map[abi:nn180100](v1 + 592);
  std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::~__hash_table(v1 + 552);
  std::mutex::~mutex((std::mutex *)(v1 + 488));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 472);
  uint64_t v3 = *(void *)(v1 + 464);
  *(void *)(v1 + 464) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  geo::Cache<md::FlyoverOctile,gm::Range<double>,md::FlyoverOctileHash,geo::LRUPolicy>::~Cache((void *)(v1 + 392));
  std::unordered_map<md::FlyoverOctileWorld,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,std::allocator<std::pair<md::FlyoverOctileWorld const,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>>>>::~unordered_map[abi:nn180100](v1 + 344);
  std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::vector<md::MeshRenderable *>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,std::vector<md::MeshRenderable *>>>>::~unordered_map[abi:nn180100](v1 + 304);
  geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::~MarkedLRUCache((uint64_t *)(v1 + 224));
  std::unordered_map<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,std::allocator<std::pair<md::FlyoverOctileWorld const,std::vector<md::FlyoverOctileInstance>>>>::~unordered_map[abi:nn180100](v1 + 184);
  std::deque<md::FlyoverOctile>::~deque[abi:nn180100](v1 + 120);
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::__unordered_map_hasher<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,true>,std::__unordered_map_equal<md::FlyoverCompleteTileDataLogic::DrapingTask,std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,true>,std::allocator<std::__hash_value_type<md::FlyoverCompleteTileDataLogic::DrapingTask,std::shared_ptr<geo::Task>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    uint64_t v4 = (std::__shared_weak_count *)v3[16];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v5 = (std::__shared_weak_count *)v3[3];
      if (v5)
      {
LABEL_7:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      uint64_t v5 = (std::__shared_weak_count *)v3[3];
      if (v5) {
        goto LABEL_7;
      }
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

uint64_t std::unordered_map<md::FlyoverCompleteTileDataLogic::DrapingTask,md::FlyoverCompleteTileDataLogic::MeshStorage,md::FlyoverCompleteTileDataLogic::DrapingTaskHash,std::equal_to<md::FlyoverCompleteTileDataLogic::DrapingTask>,std::allocator<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<md::FlyoverCompleteTileDataLogic::DrapingTask const,md::FlyoverCompleteTileDataLogic::MeshStorage>,0>(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *geo::Cache<md::FlyoverOctile,gm::Range<double>,md::FlyoverOctileHash,geo::LRUPolicy>::~Cache(void *a1)
{
  if (a1[8])
  {
    uint64_t v2 = a1 + 6;
    uint64_t v4 = a1[6];
    uint64_t v3 = (uint64_t *)a1[7];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    a1[8] = 0;
    if (v3 != a1 + 6)
    {
      do
      {
        uint64_t v6 = (uint64_t *)v3[1];
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != v2);
    }
  }
  char v7 = (void *)a1[3];
  if (v7)
  {
    do
    {
      uint64_t v8 = (void *)*v7;
      operator delete(v7);
      char v7 = v8;
    }
    while (v8);
  }
  unint64_t v9 = (void *)a1[1];
  a1[1] = 0;
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

uint64_t std::unordered_map<md::FlyoverOctileWorld,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,std::allocator<std::pair<md::FlyoverOctileWorld const,std::pair<std::vector<md::MeshRenderable *>,std::vector<md::FlyoverOctile>>>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[11];
      if (v6)
      {
        v2[12] = v6;
        operator delete(v6);
      }
      char v7 = (void *)v2[8];
      if (v7)
      {
        v2[9] = v7;
        operator delete(v7);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::unordered_map<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::vector<md::MeshRenderable *>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>,std::allocator<std::pair<std::pair<md::FlyoverOctile,md::FlyoverOctile> const,std::vector<md::MeshRenderable *>>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[12];
      if (v6)
      {
        v2[13] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t *geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::~MarkedLRUCache(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4) {
    operator delete(v4);
  }
  std::__list_imp<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry,std::allocator<geo::MarkedLRUCache<std::pair<md::FlyoverOctile,md::FlyoverOctile>,std::list<md::FlyoverDynamicGeometry>,md::FlyoverOctilePairHash,std::equal_to<std::pair<md::FlyoverOctile,md::FlyoverOctile>>>::CacheEntry>>::clear(a1);
  return a1;
}

uint64_t std::unordered_map<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,std::allocator<std::pair<md::FlyoverOctileWorld const,std::vector<md::FlyoverOctileInstance>>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[8];
      if (v6)
      {
        v2[9] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

int64_t md::FlyoverCompleteTileDataContext::getOctileInstances(int64_t *a1, int64_t *a2, __int16 *a3, char a4)
{
  if (*((unsigned char *)a3 + 24) == 4)
  {
    __int16 v6 = *a3;
    char v7 = *((unsigned char *)a3 + 28);
    char v8 = *((unsigned char *)a3 + 32);
    int v9 = *((_DWORD *)a3 + 9);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    int64_t result = (int64_t)operator new(0xA8uLL);
    int64_t v11 = result + 168;
    a1[2] = result + 168;
    *(_WORD *)int64_t result = v6;
    *(void *)(result + 4) = *(void *)(a3 + 2);
    *(unsigned char *)(result + 24) = 4;
    *(_WORD *)(result + 25) = *(__int16 *)((char *)a3 + 25);
    *(unsigned char *)(result + 27) = *((unsigned char *)a3 + 27);
    *(unsigned char *)(result + 28) = v7;
    *(_WORD *)(result + 29) = *(__int16 *)((char *)a3 + 29);
    *(unsigned char *)(result + 31) = *((unsigned char *)a3 + 31);
    *(unsigned char *)(result + 32) = v8;
    __int16 v12 = *(__int16 *)((char *)a3 + 33);
    *(unsigned char *)(result + 35) = *((unsigned char *)a3 + 35);
    *(_WORD *)(result + 33) = v12;
    *(_DWORD *)(result + 36) = v9;
    *(unsigned char *)(result + 40) = 0;
    *(unsigned char *)(result + 144) = 0;
    *(unsigned char *)(result + 152) = 0;
    *(_DWORD *)(result + 156) = 1065353216;
    *(unsigned char *)(result + 160) = 0;
    *a1 = result;
LABEL_3:
    a1[1] = v11;
    return result;
  }
  int64_t result = *a2;
  if (*a2
    && (*(_WORD *)uint64_t v24 = *a3,
        uint64_t v25 = *(void *)(a3 + 2),
        long long v26 = *(_OWORD *)(a3 + 12),
        char v27 = a4,
        (int64_t result = (int64_t)std::__hash_table<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::__unordered_map_hasher<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,md::FlyoverOctileWorldHash,std::equal_to<md::FlyoverOctileWorld>,true>,std::__unordered_map_equal<md::FlyoverOctileWorld,std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>,std::equal_to<md::FlyoverOctileWorld>,md::FlyoverOctileWorldHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctileWorld,std::vector<md::FlyoverOctileInstance>>>>::find<md::FlyoverOctileWorld>((void *)result, v24)) != 0))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    uint64_t v13 = *(void *)(result + 64);
    uint64_t v14 = *(void *)(result + 72);
    int64_t result = v14 - v13;
    if (v14 != v13)
    {
      unint64_t v15 = 0xCF3CF3CF3CF3CF3DLL * (result >> 3);
      if (v15 >= 0x186186186186187) {
        abort();
      }
      int64_t result = (int64_t)operator new(result);
      uint64_t v16 = 0;
      *a1 = result;
      a1[1] = result;
      a1[2] = result + 168 * v15;
      do
      {
        uint64_t v18 = result + v16;
        uint64_t v19 = v13 + v16;
        *(_WORD *)uint64_t v18 = *(_WORD *)(v13 + v16);
        *(void *)(v18 + 4) = *(void *)(v13 + v16 + 4);
        *(_OWORD *)(v18 + 24) = *(_OWORD *)(v13 + v16 + 24);
        *(unsigned char *)(result + v16 + 40) = 0;
        *(unsigned char *)(v18 + 144) = 0;
        if (*(unsigned char *)(v13 + v16 + 144))
        {
          long long v20 = *(_OWORD *)(v19 + 40);
          *(void *)(result + v16 + 56) = *(void *)(v19 + 56);
          *(_OWORD *)(result + v16 + 40) = v20;
          long long v21 = *(_OWORD *)(v19 + 64);
          *(void *)(v18 + 80) = *(void *)(v19 + 80);
          *(_OWORD *)(v18 + 64) = v21;
          *(void *)(v18 + 88) = *(void *)(v19 + 88);
          long long v22 = *(_OWORD *)(v19 + 96);
          long long v23 = *(_OWORD *)(v19 + 128);
          *(_OWORD *)(v18 + 112) = *(_OWORD *)(v19 + 112);
          *(_OWORD *)(v18 + 128) = v23;
          *(_OWORD *)(v18 + 96) = v22;
          *(unsigned char *)(v18 + 144) = 1;
        }
        uint64_t v17 = *(void *)(v19 + 152);
        *(unsigned char *)(v18 + 160) = *(unsigned char *)(v19 + 160);
        *(void *)(v18 + 152) = v17;
        v16 += 168;
      }
      while (v13 + v16 != v14);
      int64_t v11 = result + v16;
      goto LABEL_3;
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  return result;
}

void ___ZL27GEOGetVectorKitVKMapViewLogv_block_invoke_40243()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "VKMapView");
  uint64_t v1 = (void *)GEOGetVectorKitVKMapViewLog(void)::log;
  GEOGetVectorKitVKMapViewLog(void)::log = (uint64_t)v0;
}

void sub_1A2621360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2621418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2621514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26215DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26216B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A262176C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A262195C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2621B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2621CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A262221C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26224E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A262258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::function<void ()(md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0,std::allocator<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0>,void ()(md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (const md::DaVinciGroundRenderable *)*a2;
  uint64_t v3 = **(void **)(a1 + 8);
  uint64_t v4 = **(const md::LayoutContext ***)(a1 + 16);
  md::DaVinciGroundRenderLayer::layoutRibbons(v3, (uint64_t)v4, *(void *)(a1 + 24), *a2, **(void **)(a1 + 32), **(unsigned char **)(a1 + 40));
  uint64_t v5 = (uint64_t *)*((void *)v4 + 1);
  int8x8_t v6 = (int8x8_t)v5[1];
  if (!*(void *)&v6) {
    return;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = 0xC97B9E962ADF4AD4;
    if (*(void *)&v6 <= 0xC97B9E962ADF4AD4) {
      unint64_t v8 = 0xC97B9E962ADF4AD4 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 - 1) & 0xC97B9E962ADF4AD4;
  }
  uint64_t v9 = *v5;
  uint64_t v10 = *(void **)(*v5 + 8 * v8);
  if (!v10) {
    return;
  }
  int64_t v11 = (void *)*v10;
  if (!*v10) {
    return;
  }
  uint64_t v12 = *(void *)&v6 - 1;
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v13 = v11[1];
      if (v13 == 0xC97B9E962ADF4AD4)
      {
        if (v11[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_22;
        }
      }
      else if ((v13 & v12) != v8)
      {
        return;
      }
      int64_t v11 = (void *)*v11;
      if (!v11) {
        return;
      }
    }
  }
  while (1)
  {
    unint64_t v14 = v11[1];
    if (v14 == 0xC97B9E962ADF4AD4) {
      break;
    }
    if (v14 >= *(void *)&v6) {
      v14 %= *(void *)&v6;
    }
    if (v14 != v8) {
      return;
    }
LABEL_16:
    int64_t v11 = (void *)*v11;
    if (!v11) {
      return;
    }
  }
  if (v11[2] != 0xC97B9E962ADF4AD4) {
    goto LABEL_16;
  }
LABEL_22:
  uint64_t v15 = v11[5];
  if (*(void *)(v15 + 8) == 0xC97B9E962ADF4AD4)
  {
    uint64_t v16 = *(uint64_t **)(v15 + 32);
    if (v16)
    {
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      if (v17 != v18)
      {
        while (*(unsigned char *)v17 != 11)
        {
          v17 += 16;
          if (v17 == v18) {
            return;
          }
        }
      }
      if (v17 != v18 && *(void *)(v17 + 8))
      {
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v19 = 0xE42D19AFCA302E68;
          if (*(void *)&v6 <= 0xE42D19AFCA302E68) {
            unint64_t v19 = 0xE42D19AFCA302E68 % *(void *)&v6;
          }
        }
        else
        {
          unint64_t v19 = v12 & 0xE42D19AFCA302E68;
        }
        long long v20 = *(void **)(v9 + 8 * v19);
        if (!v20) {
          goto LABEL_52;
        }
        long long v21 = (void *)*v20;
        if (!v21) {
          goto LABEL_52;
        }
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v21[1];
            if (v22 == 0xE42D19AFCA302E68)
            {
              if (v21[2] == 0xE42D19AFCA302E68) {
                goto LABEL_50;
              }
            }
            else if ((v22 & v12) != v19)
            {
              goto LABEL_52;
            }
            long long v21 = (void *)*v21;
            if (!v21) {
              goto LABEL_52;
            }
          }
        }
        while (1)
        {
          unint64_t v23 = v21[1];
          if (v23 == 0xE42D19AFCA302E68)
          {
            if (v21[2] == 0xE42D19AFCA302E68)
            {
LABEL_50:
              uint64_t v24 = v21[5];
              if (*(void *)(v24 + 8) == 0xE42D19AFCA302E68)
              {
                uint64_t v25 = *(const md::StyleLogicContext **)(v24 + 32);
                goto LABEL_53;
              }
LABEL_52:
              uint64_t v25 = 0;
LABEL_53:
              md::ElevatedPolygonContext::ElevatedPolygonContext((md::ElevatedPolygonContext *)v26, v4, *(unsigned char *)(v3 + 3192), *(const md::StandardPassList **)(*(void *)(v3 + 40) + 24), *(float *)v7.i32);
              md::DaVinciGroundRenderLayer::layoutPredrapedPolygons((uint64_t **)v3, v4, v2, (const md::ElevatedPolygonContext *)v26, v25);
              return;
            }
          }
          else
          {
            if (v23 >= *(void *)&v6) {
              v23 %= *(void *)&v6;
            }
            if (v23 != v19) {
              goto LABEL_52;
            }
          }
          long long v21 = (void *)*v21;
          if (!v21) {
            goto LABEL_52;
          }
        }
      }
    }
  }
}

__n128 std::__function::__func<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0,std::allocator<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0>,void ()(md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF51F610;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0,std::allocator<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0>,void ()(md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EF51F610;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0,std::allocator<md::ita::PushLegacyRibbons::operator()(ecs2::Query<md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&>)::$_0>,void ()(md::ls::RequireTypedRenderableForLegacyReasons<md::DaVinciGroundRenderable> const&)>::~__func()
{
}

void md::LabelSettingsData::~LabelSettingsData(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[38];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  this[34] = &unk_1EF559B78;

  this[30] = &unk_1EF559F18;
  this[27] = &unk_1EF5595D8;

  this[24] = off_1EF559738;
  this[20] = &unk_1EF5594B8;

  this[17] = &unk_1EF5599B8;
  this[13] = &unk_1EF559E18;

  this[10] = &unk_1EF559E38;
  this[7] = &unk_1EF559DD8;

  long long v3 = (std::__shared_weak_count *)this[5];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void geo::_retain_ptr<NSMutableSet<objc_object  {objcproto25VKCustomFeatureDataSource}*> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5594B8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSMutableSet<objc_object  {objcproto25VKCustomFeatureDataSource}*> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5594B8;

  return a1;
}

void geo::_retain_ptr<NSArray<VKTrafficFeature *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559DD8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSArray<VKTrafficFeature *> * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559DD8;

  return a1;
}

void md::LabelSettings::removeCustomFeatureDataSource(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  [*(id *)(*(void *)(a1 + 40) + 168) removeObject:v3];
  uint64_t v4 = *(void *)(a1 + 24);
  id v7 = v3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 168) + 64) + 32))(*(void *)(*(void *)(v4 + 168) + 64));
  if (v5)
  {
    id v6 = v7;
    v8[0] = &unk_1EF577718;
    v8[1] = v5;
    v8[2] = v6;
    uint64_t v9 = v8;
    md::LabelCustomFeatureSupport::queueCommand(v5, 1, v8);
    if (v9 == v8)
    {
      (*(void (**)(void *))(v8[0] + 32))(v8);
    }
    else if (v9)
    {
      (*(void (**)(void))(*v9 + 40))();
    }
  }
}

void sub_1A2622E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  std::function<void ()(void)>::~function(&a10);

  _Unwind_Resume(a1);
}

id md::LabelSettings::debugLabelString(md::LabelSettings *this, int a2)
{
  uint64_t v2 = NSString;
  md::LabelManager::debugString((md::LabelManager *)__p, (uint64_t)this, a2);
  if (v7 >= 0) {
    id v3 = __p;
  }
  else {
    id v3 = (void **)__p[0];
  }
  uint64_t v4 = [v2 stringWithUTF8String:v3];
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1A2622F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'altitude::GlobeMainViewNode::onChildTileRemoved(uint64_t this, altitude::Tile *a2, altitude::Tile *a3)
{
  if (*(altitude::Tile **)(this + 24) == a3) {
    *(void *)(this + 24) = 0;
  }
  return this;
}

void non-virtual thunk to'altitude::GlobeMainViewNode::~GlobeMainViewNode(altitude::GlobeMainViewNode *this)
{
  *((void *)this - 6) = &unk_1EF567F78;
  if (*((char *)this - 17) < 0) {
    operator delete(*((void **)this - 5));
  }
  JUMPOUT(0x1A6239270);
}

{
  *((void *)this - 6) = &unk_1EF567F78;
  if (*((char *)this - 17) < 0) {
    operator delete(*((void **)this - 5));
  }
}

uint64_t altitude::GlobeMainViewNode::onChildTileRemoved(uint64_t this, altitude::Tile *a2, altitude::Tile *a3)
{
  if (*(altitude::Tile **)(this + 72) == a3) {
    *(void *)(this + 72) = 0;
  }
  return this;
}

uint64_t altitude::GlobeMainViewNode::computeView(altitude::GlobeMainViewNode *this, const karo::Item *a2, int a3)
{
  v167[2] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v5 = (uint64_t *)*((void *)this + 4);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (*((_DWORD *)v5 + 22) != *((_DWORD *)this + 16) || *((_DWORD *)this + 15) != *(_DWORD *)(v6 + 376)) {
        goto LABEL_8;
      }
      if (a3 == -1) {
        a3 = *((_DWORD *)this + 14);
      }
      if (*(_DWORD *)(v3 + 112) != a3)
      {
LABEL_8:
        char v7 = *(double **)(v6 + 72);
        double v8 = v7[46];
        double v9 = v7[47];
        if (v9 * v8 > 0.0)
        {
          double v10 = v7[57];
          if (v9 < v8)
          {
            long double v11 = tan(v10 * 0.5);
            long double v12 = atan(v9 * v11 / v8);
            double v10 = v12 + v12;
          }
          double v13 = v7[59];
          double v14 = v7[60];
          double v15 = v8 / v9;
          long double v16 = tan(v10 * 0.5);
          *(double *)(v3 + 1000) = v10;
          *(double *)(v3 + 992) = v15;
          *(double *)(v3 + 944) = v13;
          *(void *)(v3 + 952) = 0x3FF0000000000000;
          *(long double *)(v3 + 976) = -(v16 * v15);
          *(long double *)(v3 + 984) = v16 * v15;
          *(long double *)(v3 + 968) = -v16;
          *(long double *)(v3 + 960) = v16;
          *(double *)(v3 + 1008) = v14;
          *(unsigned char *)(v3 + 1016) = 0;
          long double v17 = v15 * (v16 + v16);
          double v18 = -(v13 - v14 * v13);
          *(long double *)(v3 + 376) = 2.0 / v17;
          *(_OWORD *)(v3 + 384) = 0u;
          *(_OWORD *)(v3 + 400) = 0u;
          *(long double *)(v3 + 416) = 1.0 / v16;
          *(_OWORD *)(v3 + 424) = 0u;
          *(_OWORD *)(v3 + 440) = 0u;
          *(double *)(v3 + 456) = (v14 - v13) / (v13 + -1.0);
          *(void *)(v3 + 472) = 0;
          *(void *)(v3 + 480) = 0;
          *(void *)(v3 + 464) = 0xBFF0000000000000;
          *(double *)(v3 + 488) = v18 / (v13 + -1.0);
          *(void *)(v3 + 496) = 0;
          *(long double *)(v3 + 1160) = v17 * 0.5;
          *(_OWORD *)(v3 + 1168) = 0u;
          *(_OWORD *)(v3 + 1184) = 0u;
          *(long double *)(v3 + 1200) = v16;
          *(_OWORD *)(v3 + 1208) = 0u;
          *(_OWORD *)(v3 + 1224) = 0u;
          *(void *)(v3 + 1240) = 0;
          *(double *)(v3 + 1248) = (v13 + -1.0) / v18;
          *(void *)(v3 + 1256) = 0;
          *(void *)(v3 + 1264) = 0;
          *(void *)(v3 + 1272) = 0xBFF0000000000000;
          *(double *)(v3 + 1280) = (v14 - v13) / v18;
          karo::graphics::View::projectionUpdate((karo::graphics::View *)v3, 1);
          uint64_t v19 = *(void *)(v6 + 72);
          gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric(v161.f64, (double *)(v19 + 8));
          double v20 = *(double *)(v19 + 16);
          double v21 = *(double *)(v19 + 24);
          __double2 v22 = __sincos_stret(*(double *)(v19 + 8));
          double v23 = 6378137.0 / sqrt(v22.__sinval * v22.__sinval * -0.00669437999 + 1.0);
          double v24 = (v23 + v21) * v22.__cosval;
          __double2 v25 = __sincos_stret(v20);
          double v26 = v24 * v25.__cosval;
          double v27 = v24 * v25.__sinval;
          double v28 = (v21 + v23 * 0.99330562) * v22.__sinval;
          v159.f64[0] = v24 * v25.__sinval;
          v159.f64[1] = v28;
          *(float64x2_t *)BOOL v157 = v161;
          long double v30 = v162;
          double v29 = v163;
          *(double *)&v157[16] = v162;
          double v158 = v26;
          double v31 = (v29 + v29) * v164 + v166[0] * (v165 * -2.0);
          double v32 = v165 * -2.0 * v165 + 1.0 - (v29 + v29) * v29;
          double v33 = -(v165 * -2.0 * v164 - (v29 + v29) * v166[0]);
          v160[0] = v31;
          v160[1] = v32;
          v160[2] = v33;
          if (!*(unsigned char *)(v6 + 185)) {
            goto LABEL_50;
          }
          if (*(unsigned char *)(v6 + 160)) {
            goto LABEL_50;
          }
          double v34 = *(double *)(v19 + 32);
          float64x2_t __x = v161;
          double v148 = v27;
          double v150 = v26;
          if (cos(*(long double *)(v19 + 40)) * v34 >= 500.0) {
            goto LABEL_50;
          }
          double v145 = vmulq_f64(__x, __x).f64[0] + __x.f64[1] * __x.f64[1];
          double v35 = sqrt(v145);
          double v153 = v30;
          double v152 = atan2(v30, v35 * 0.996647189);
          double v147 = atan2(__x.f64[1], __x.f64[0]);
          __double2 v36 = __sincos_stret(v152);
          double v144 = v35;
          double v37 = atan2(v30 + v36.__sinval * v36.__sinval * 42841.3115 * v36.__sinval, v35 + v36.__cosval * v36.__cosval * -42697.6727 * v36.__cosval);
          __double2 v38 = __sincos_stret(v37);
          double cosval = v38.__cosval;
          double v151 = 6378137.0 / sqrt(v38.__sinval * v38.__sinval * -0.00669437999 + 1.0);
          uint64_t v40 = **((void **)this + 4);
          uint64_t v41 = *(void *)(v40 + 712);
          if (!v41) {
            goto LABEL_46;
          }
          double v42 = 1.0 / sqrt(v145 + v30 * v30);
          double v43 = v42 * __x.f64[0];
          double v44 = v42 * __x.f64[1];
          long double v45 = v42 * v30;
          double v46 = v31 + v150 - __x.f64[0];
          double v47 = v32 + v148 - __x.f64[1];
          long double v48 = v33 + v28 - v30;
          long double v49 = -(v48 * v44 - v47 * v45);
          long double v50 = -(v46 * v45 - v48 * v43);
          double v51 = -(v47 * v43 - v46 * v44);
          long double v52 = -(v50 * v45 - v51 * v44);
          long double v53 = -(v51 * v43 - v49 * v45);
          long double v54 = -(v49 * v44 - v50 * v43);
          double v55 = 1.0 / sqrt(v52 * v52 + v53 * v53 + v54 * v54);
          long double v146 = v55 * v52;
          long double v149 = v55 * v54;
          v156.f64[0] = -1.79769313e308;
          float64_t v141 = __x.f64[0] + v55 * v52 * 5.0;
          long double v142 = v55 * v53;
          long double v137 = v30 + v55 * v54 * 5.0;
          float64_t v138 = __x.f64[1] + v55 * v53 * 5.0;
          double v56 = 5.0 / sqrt(v51 * v51 + v49 * v49 + v50 * v50);
          long double v57 = v56 * v49;
          double v139 = v56 * v51;
          long double v140 = v56 * v50;
          long double v58 = v141 + v56 * v49;
          long double v59 = v138 + v56 * v50;
          long double v60 = v137 + v56 * v51;
          double v61 = sqrt(v58 * v58 + v59 * v59);
          uint64_t v143 = v40;
          double v62 = atan2(v60, v61 * 0.996647189);
          long double v63 = atan2(v59, v58);
          __double2 v64 = __sincos_stret(v62);
          v161.f64[0] = atan2(v60 + v64.__sinval * v64.__sinval * 42841.3115 * v64.__sinval, v61 - v64.__cosval * v64.__cosval * 42697.6727 * v64.__cosval);
          v161.f64[1] = v63;
          long double v65 = v141 - v57;
          double v66 = sqrt(v65 * v65 + (v138 - v140) * (v138 - v140));
          double v67 = atan2(v137 - v139, v66 * 0.996647189);
          long double v68 = atan2(v138 - v140, v65);
          __double2 v69 = __sincos_stret(v67);
          double v162 = atan2(v137 - v139 + v69.__sinval * v69.__sinval * 42841.3115 * v69.__sinval, v66 - v69.__cosval * v69.__cosval * 42697.6727 * v69.__cosval);
          long double v163 = v68;
          long double v70 = __x.f64[0] - v146 * 2.5;
          long double v71 = __x.f64[1] - v142 * 2.5;
          double v72 = sqrt(v70 * v70 + v71 * v71);
          double v73 = atan2(v153 - v149 * 2.5, v72 * 0.996647189);
          long double v74 = atan2(v71, v70);
          __double2 v75 = __sincos_stret(v73);
          double v164 = atan2(v153 - v149 * 2.5 + v75.__sinval * v75.__sinval * 42841.3115 * v75.__sinval, v72 - v75.__cosval * v75.__cosval * 42697.6727 * v75.__cosval);
          double v165 = v74;
          long double v76 = __x.f64[0] + v146 * 15.0;
          long double v77 = __x.f64[1] + v142 * 15.0;
          long double v78 = v153 + v149 * 15.0;
          double v79 = sqrt(v76 * v76 + v77 * v77);
          double v80 = atan2(v78, v79 * 0.996647189);
          long double v81 = atan2(v77, v76);
          __double2 v82 = __sincos_stret(v80);
          v166[0] = atan2(v78 + v82.__sinval * v82.__sinval * 42841.3115 * v82.__sinval, v79 - v82.__cosval * v82.__cosval * 42697.6727 * v82.__cosval);
          v166[1] = v81;
          long double v83 = __x.f64[0] + v146 * 30.0;
          long double v84 = __x.f64[1] + v142 * 30.0;
          long double v85 = v153 + v149 * 30.0;
          double v86 = sqrt(v83 * v83 + v84 * v84);
          double v87 = atan2(v85, v86 * 0.996647189);
          long double v88 = atan2(v84, v83);
          __double2 v89 = __sincos_stret(v87);
          v167[0] = atan2(v85 + v89.__sinval * v89.__sinval * 42841.3115 * v89.__sinval, v86 - v89.__cosval * v89.__cosval * 42697.6727 * v89.__cosval);
          v167[1] = v88;
          int v90 = altitude::IntersectorHeight::heightAtLatLon(v41, v161.f64, v156.f64, 0xEu);
          int v91 = v90;
          if (v156.f64[0] > -1.79769313e308 && v90 == 0) {
            double v93 = v156.f64[0];
          }
          else {
            double v93 = -1.79769313e308;
          }
          int v94 = altitude::IntersectorHeight::heightAtLatLon(v41, &v162, v156.f64, 0xEu);
          int v95 = v94;
          if (v93 < v156.f64[0] && v94 == 0) {
            double v93 = v156.f64[0];
          }
          int v97 = altitude::IntersectorHeight::heightAtLatLon(v41, &v164, v156.f64, 0xEu);
          int v98 = v97;
          if (v93 < v156.f64[0] && v97 == 0) {
            double v93 = v156.f64[0];
          }
          int v100 = altitude::IntersectorHeight::heightAtLatLon(v41, v166, v156.f64, 0xEu);
          int v101 = v100;
          if (v93 < v156.f64[0] && v100 == 0) {
            double v93 = v156.f64[0];
          }
          int v103 = altitude::IntersectorHeight::heightAtLatLon(v41, v167, v156.f64, 0xEu);
          uint64_t v40 = v143;
          double cosval = v38.__cosval;
          double v104 = v156.f64[0];
          if (v93 >= v156.f64[0] || v103 != 0) {
            double v104 = v93;
          }
          if (v103 || v101 || v98 || v95 || v91)
          {
LABEL_46:
            uint64_t v155 = v40;
            double v106 = cosval;
            double v107 = (v151 + 10000.0) * cosval;
            __double2 v108 = __sincos_stret(v147);
            v161.f64[0] = v107 * v108.__cosval;
            v161.f64[1] = v107 * v108.__sinval;
            double v162 = (v151 * 0.99330562 + 10000.0) * v38.__sinval;
            if (!altitude::Intersector::intersectAtPosition((uint64_t)&v155, &v161, &v156))
            {
LABEL_50:
              uint64_t v116 = *((void *)this + 5);
              altitude::View::updatePoints(v116, (double *)(*(void *)(v6 + 72) + 8));
              uint64_t v117 = *(void *)(**((void **)this + 4) + 792);
              double v118 = altitude::GlobeView::calculateMinZoomDistance((altitude::GlobeView *)v6);
              double v119 = fmax(fmin(*(double *)(v6 + 400), 60592301.5), altitude::GlobeView::calculateMinZoomDistance((altitude::GlobeView *)v6));
              uint64_t v120 = *(void *)(v116 + 1456);
              if (!v120)
              {
                uint64_t v120 = *(void *)(v116 + 32);
                *(void *)(v116 + 1456) = v120;
              }
              float v121 = *(double *)(v120 + 32);
              *(float *)(v116 + 1388) = v121;
              double v122 = 1.0 / *(double *)(v116 + 376);
              float64x2_t v123 = vsubq_f64(*(float64x2_t *)&v157[8], v159);
              float64x2_t v124 = vmulq_f64(v123, v123);
              double v125 = sqrt(v124.f64[0] + (*(double *)v157 - v158) * (*(double *)v157 - v158) + v124.f64[1]);
              *(float *)v124.f64 = v125 * v122 / ((double)(*(_DWORD *)(v117 + 48) - *(_DWORD *)(v117 + 40)) * 0.5);
              *(_DWORD *)(v116 + 1384) = LODWORD(v124.f64[0]);
              *(float *)(v116 + 1380) = *(float *)v124.f64 * v121;
              double v126 = v122 * 0.0000000499064043;
              float v127 = fmin(fmax(-log2(v125 * (v122 * 0.0000000499064043)), 0.0), 19.0);
              *(float *)(v116 + 1352) = v127;
              unsigned int v128 = v127;
              *(_DWORD *)(v116 + 1356) = v127;
              if ((int)v127 <= 1) {
                unsigned int v129 = 1;
              }
              else {
                unsigned int v129 = v127;
              }
              *(_DWORD *)(v116 + 1360) = v129 - 1;
              if (v128 + 1 < 0x13) {
                int v130 = v128 + 1;
              }
              else {
                int v130 = 19;
              }
              *(_DWORD *)(v116 + 1364) = v130;
              *(float *)(v116 + 1376) = v127 - truncf(v127);
              float v131 = fmin(fmax(-log2(v126 * v118), 0.0), 19.0);
              *(float *)(v116 + 1368) = v131;
              float v132 = fmin(fmax(-log2(v126 * v119), 0.0), 19.0);
              *(float *)(v116 + 1372) = v132;
              float v133 = *(double *)(*(void *)(v6 + 72) + 40) * 57.2957795;
              *(float *)(v116 + 1320) = v133;
              if (*(unsigned char *)(v6 + 432)) {
                int v134 = 3;
              }
              else {
                int v134 = 1;
              }
              *(_DWORD *)(v116 + 1392) = v134 | (4 * *(unsigned __int8 *)(v6 + 434)) | (8
                                                                                      * *(unsigned __int8 *)(v6 + 433));
              karo::graphics::View::lookAt(*((double **)this + 5), (double *)v157, &v158, v160);
              uint64_t v135 = *((void *)this + 4);
              uint64_t v3 = *((void *)this + 5);
              *((_DWORD *)this + 14) = *(_DWORD *)(v3 + 112);
              *((_DWORD *)this + 16) = *(_DWORD *)(v135 + 88);
              *((_DWORD *)this + 15) = *(_DWORD *)(v6 + 376);
              return v3;
            }
            geo::Coordinate3D<geo::Radians,double>::Coordinate3D<double>((uint64_t)&v161, v156.f64);
            double v104 = v162;
            double cosval = v106;
          }
          double v109 = v104 + 35.0;
          if (v144 / cosval - v151 < v104 + 35.0)
          {
            long long v110 = *(_OWORD *)v157;
            double v111 = *(double *)&v157[16];
            double v112 = (v109 + v151) * cosval;
            __double2 v113 = __sincos_stret(v147);
            *(double *)BOOL v157 = v112 * v113.__cosval;
            *(double *)&v157[8] = v112 * v113.__sinval;
            *(double *)&v157[16] = (v109 + v151 * 0.99330562) * v38.__sinval;
            double v158 = v112 * v113.__cosval - *(double *)&v110 + v158;
            v159.f64[0] = v112 * v113.__sinval - *((double *)&v110 + 1) + v159.f64[0];
            v159.f64[1] = *(double *)&v157[16] - v111 + v159.f64[1];
            uint64_t v114 = *(void *)(v6 + 72);
            geo::Coordinate3D<geo::Radians,double>::Coordinate3D<double>((uint64_t)&v161, &v158);
            float64x2_t v115 = v161;
            *(double *)(v114 + 24) = v162;
            *(float64x2_t *)(v114 + 8) = v115;
            ++*(_DWORD *)(v6 + 376);
          }
          goto LABEL_50;
        }
      }
    }
  }
  return v3;
}

uint64_t geo::Coordinate3D<geo::Radians,double>::Coordinate3D<double>(uint64_t a1, double *a2)
{
  long double v3 = *a2;
  long double v4 = a2[1];
  long double v5 = a2[2];
  double v6 = sqrt(v3 * v3 + v4 * v4);
  double v7 = atan2(v5, v6 * 0.996647189);
  long double v8 = atan2(v4, v3);
  __double2 v9 = __sincos_stret(v7);
  double v10 = atan2(v5 + v9.__sinval * v9.__sinval * 42841.3115 * v9.__sinval, v6 + v9.__cosval * v9.__cosval * -42697.6727 * v9.__cosval);
  __double2 v11 = __sincos_stret(v10);
  *(double *)a1 = v10;
  *(long double *)(a1 + 8) = v8;
  *(double *)(a1 + 16) = v6 / v11.__cosval + -6378137.0 / sqrt(v11.__sinval * v11.__sinval * -0.00669437999 + 1.0);
  return a1;
}

void altitude::GlobeMainViewNode::~GlobeMainViewNode(void **this)
{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1A6239270);
}

{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  long double v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  long double v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long double v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long double v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::BuildingPointyRoof::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::BuildingPointyRoof::BuildingMesh::~BuildingMesh(ggl::BuildingPointyRoof::BuildingMesh *this)
{
  ggl::Mesh::~Mesh((ggl::BuildingPointyRoof::BuildingMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::BuildingPointyRoof::BuildingMesh *)((char *)this - 16));
}

void ggl::BuildingPointyRoof::BuildingMesh::~BuildingMesh(ggl::BuildingPointyRoof::BuildingMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::ElevationTileData::primaryRaster(md::ElevationTileData *this)
{
  return 0;
}

uint64_t std::__shared_ptr_emplace<ggl::TexturedAnimatedRibbon::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TexturedAnimatedRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588718;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TexturedAnimatedRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLineTraffic::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::RouteLineTraffic::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::RouteLineTraffic::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLineAlphaReset::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::RouteLineAlphaReset::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5882F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::RouteLineAlphaReset::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5882F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLine::RouteLineMaskPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::RouteLine::RouteLineMaskPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::RouteLine::RouteLineMaskPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLine::PatternedBasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::RouteLine::PatternedBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::RouteLine::PatternedBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::DottedRouteLine::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DottedRouteLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5840A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DottedRouteLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5840A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLine::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::RouteLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::RouteLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::RouteLineBatch::RouteLineBatch(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EF553930;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v3 = a1 + 2320;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = "";
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  long long v4 = 0uLL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  int64x2_t v5 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 112) = v5;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 16) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 136) = 1;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = "";
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(int64x2_t *)(a1 + 240) = v5;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 144) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 264) = 1;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(void *)(a1 + 288) = "";
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(int64x2_t *)(a1 + 368) = v5;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 272) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 392) = 1;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 416) = "";
  *(_DWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(int64x2_t *)(a1 + 496) = v5;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 400) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 520) = 1;
  *(void *)(a1 + 544) = "";
  *(void *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 568) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 584) = 1065353216;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(int64x2_t *)(a1 + 624) = v5;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 528) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 648) = 1;
  *(void *)(a1 + 672) = "";
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  *(_DWORD *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 712) = 1065353216;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(int64x2_t *)(a1 + 752) = v5;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 656) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 776) = 1;
  *(void *)(a1 + 800) = "";
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 0;
  *(_DWORD *)(a1 + 840) = 1065353216;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(int64x2_t *)(a1 + 880) = v5;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 784) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 904) = 1;
  *(void *)(a1 + 928) = "";
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 936) = 0;
  *(_DWORD *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 968) = 1065353216;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(int64x2_t *)(a1 + 1008) = v5;
  *(void *)(a1 + 1024) = 0;
  *(void *)(a1 + 912) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 1032) = 1;
  *(void *)(a1 + 1056) = "";
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1072) = 0;
  *(void *)(a1 + 1064) = 0;
  *(_DWORD *)(a1 + 1080) = 0;
  *(_DWORD *)(a1 + 1096) = 1065353216;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(int64x2_t *)(a1 + 1136) = v5;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1040) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 1160) = 1;
  *(void *)(a1 + 1184) = "";
  *(void *)(a1 + 1216) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1192) = 0;
  *(_DWORD *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1224) = 1065353216;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(int64x2_t *)(a1 + 1264) = v5;
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1168) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 1288) = 1;
  *(void *)(a1 + 1312) = "";
  *(void *)(a1 + 1344) = 0;
  *(void *)(a1 + 1328) = 0;
  *(void *)(a1 + 1320) = 0;
  *(_DWORD *)(a1 + 1336) = 0;
  *(_DWORD *)(a1 + 1352) = 1065353216;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(int64x2_t *)(a1 + 1392) = v5;
  *(void *)(a1 + 1408) = 0;
  *(void *)(a1 + 1296) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 1416) = 1;
  *(void *)(a1 + 1440) = "";
  *(void *)(a1 + 1472) = 0;
  *(void *)(a1 + 1456) = 0;
  *(void *)(a1 + 1448) = 0;
  *(_DWORD *)(a1 + 1464) = 0;
  *(_DWORD *)(a1 + 1480) = 1065353216;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(int64x2_t *)(a1 + 1520) = v5;
  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1424) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 1544) = 1;
  *(void *)(a1 + 1568) = "";
  *(void *)(a1 + 1600) = 0;
  *(void *)(a1 + 1584) = 0;
  *(void *)(a1 + 1576) = 0;
  *(_DWORD *)(a1 + 1592) = 0;
  *(_DWORD *)(a1 + 1608) = 1065353216;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(int64x2_t *)(a1 + 1648) = v5;
  *(void *)(a1 + 1664) = 0;
  *(void *)(a1 + 1552) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 1672) = 1;
  *(void *)(a1 + 1696) = "";
  *(void *)(a1 + 1728) = 0;
  *(void *)(a1 + 1712) = 0;
  *(void *)(a1 + 1704) = 0;
  *(_DWORD *)(a1 + 1720) = 0;
  *(_DWORD *)(a1 + 1736) = 1065353216;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(int64x2_t *)(a1 + 1776) = v5;
  *(void *)(a1 + 1792) = 0;
  *(void *)(a1 + 1680) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 1800) = 1;
  *(void *)(a1 + 1824) = "";
  *(void *)(a1 + 1856) = 0;
  *(void *)(a1 + 1840) = 0;
  *(void *)(a1 + 1832) = 0;
  *(_DWORD *)(a1 + 1848) = 0;
  *(_DWORD *)(a1 + 1864) = 1065353216;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(int64x2_t *)(a1 + 1904) = v5;
  *(void *)(a1 + 1920) = 0;
  *(void *)(a1 + 1808) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 1928) = 1;
  *(void *)(a1 + 1952) = "";
  *(void *)(a1 + 1984) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  *(_DWORD *)(a1 + 1976) = 0;
  *(_DWORD *)(a1 + 1992) = 1065353216;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(int64x2_t *)(a1 + 2032) = v5;
  *(void *)(a1 + 2048) = 0;
  *(void *)(a1 + 1936) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 2056) = 1;
  *(void *)(a1 + 2080) = "";
  *(void *)(a1 + 2112) = 0;
  *(void *)(a1 + 2096) = 0;
  *(void *)(a1 + 2088) = 0;
  *(_DWORD *)(a1 + 2104) = 0;
  *(_DWORD *)(a1 + 2120) = 1065353216;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(int64x2_t *)(a1 + 2160) = v5;
  *(void *)(a1 + 2176) = 0;
  *(void *)(a1 + 2064) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 2184) = 1;
  *(void *)(a1 + 2208) = "";
  *(void *)(a1 + 2240) = 0;
  *(void *)(a1 + 2224) = 0;
  *(void *)(a1 + 2216) = 0;
  *(_DWORD *)(a1 + 2232) = 0;
  *(_DWORD *)(a1 + 2248) = 1065353216;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(int64x2_t *)(a1 + 2288) = v5;
  *(void *)(a1 + 2304) = 0;
  *(void *)(a1 + 2192) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 2312) = 1;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  {
    uint64_t v9 = a1 + 2320;
    long long v4 = 0uLL;
    uint64_t v3 = v9;
    if (v8) {
      operator new();
    }
  }
  *(void *)(a1 + 2368) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 2408) = 0;
  *(_OWORD *)(v3 + 56) = v4;
  *(_OWORD *)(v3 + 72) = v4;
  *(void *)(a1 + 2416) = 32;
  double v6 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  _OWORD *v6 = 0u;
  *(void *)(a1 + 2400) = v6;
  *(void *)(a1 + 2408) = v6;
  *(void *)(a1 + 2424) = 0;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(unsigned char *)(a1 + 2448) = 1;
  *(void *)(a1 + 2456) = *a2;
  *(void *)a1 = &unk_1EF5344A0;
  *(_OWORD *)(a1 + 2573) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_WORD *)(a1 + 2608) = 0;
  *(_OWORD *)(a1 + 2592) = 0u;
  double v7 = +[VKSharedResourcesManager sharedResources];
  *(unsigned char *)(a1 + 2609) = *(unsigned char *)([v7 gglDevice] + 20);

  operator new();
}

void sub_1A26274F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,_Unwind_Exception *exception_object)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)(a20 + 324));
  uint64_t v23 = *a14;
  *a14 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *a15;
  *a15 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *a16;
  *a16 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = a20[319];
  a20[319] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = a20[318];
  a20[318] = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = a20[317];
  a20[317] = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = a20[316];
  a20[316] = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = a20[315];
  a20[315] = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = a20[314];
  a20[314] = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = a20[313];
  a20[313] = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = a20[312];
  a20[312] = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = a20[311];
  a20[311] = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = a20[310];
  a20[310] = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = a20[309];
  a20[309] = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = *a17;
  *a17 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonBatch((uint64_t)a20);
  _Unwind_Resume(a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553930;
  uint64_t v2 = *(uint64_t **)(a1 + 2424);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 2432);
    long long v4 = *(void **)(a1 + 2424);
    if (v3 != v2)
    {
      do
        std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](--v3, 0);
      while (v3 != v2);
      long long v4 = *(void **)(a1 + 2424);
    }
    *(void *)(a1 + 2432) = v2;
    operator delete(v4);
  }
  int64x2_t v5 = *(void **)(a1 + 2400);
  do
  {
    if (v5[1])
    {
      unint64_t v6 = 0;
      double v7 = v5 + 2;
      int v8 = v5 + 2;
      uint64_t v9 = (void (***)(void))(v5 + 2);
      do
      {
        double v10 = (void (**)(void *))*v9;
        v9 += 15;
        (*v10)(v8);
        ++v6;
        v7 += 15;
        int v8 = v9;
      }
      while (v6 < v5[1]);
    }
    v5[1] = 0;
    int64x2_t v5 = (void *)*v5;
  }
  while (v5);
  __double2 v11 = *(void ***)(a1 + 2400);
  *(void *)(a1 + 2408) = v11;
  long double v12 = *v11;
  void *v11 = 0;
  if (v12)
  {
    do
    {
      double v13 = (void *)*v12;
      free(v12);
      long double v12 = v13;
    }
    while (v13);
    __double2 v11 = *(void ***)(a1 + 2400);
  }
  free(v11);
  double v14 = *(void **)(a1 + 2376);
  if (v14)
  {
    *(void *)(a1 + 2384) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 2344);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 2352);
    uint64_t v17 = *(void *)(a1 + 2344);
    if (v16 != v15)
    {
      uint64_t v18 = *(void *)(a1 + 2352);
      do
      {
        double v20 = *(void **)(v18 - 24);
        v18 -= 24;
        uint64_t v19 = v20;
        if (v20)
        {
          *(void *)(v16 - 16) = v19;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = *(void *)(a1 + 2344);
    }
    *(void *)(a1 + 2352) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 2368) + 40))(*(void *)(a1 + 2368), v17, *(void *)(a1 + 2360) - v17);
  }
  double v21 = *(void **)(a1 + 2320);
  if (v21)
  {
    *(void *)(a1 + 2328) = v21;
    operator delete(v21);
  }
  *(void *)(a1 + 2192) = &off_1EF55A458;
  *(void *)(a1 + 2208) = 3131955885;
  *(void *)(a1 + 2064) = &off_1EF55A458;
  *(void *)(a1 + 2080) = 3131955885;
  *(void *)(a1 + 1936) = &off_1EF55A458;
  *(void *)(a1 + 1952) = 3131955885;
  *(void *)(a1 + 1808) = &off_1EF55A458;
  *(void *)(a1 + 1824) = 3131955885;
  *(void *)(a1 + 1680) = &off_1EF55A458;
  *(void *)(a1 + 1696) = 3131955885;
  *(void *)(a1 + 1552) = &off_1EF55A458;
  *(void *)(a1 + 1568) = 3131955885;
  *(void *)(a1 + 1424) = &off_1EF55A458;
  *(void *)(a1 + 1440) = 3131955885;
  *(void *)(a1 + 1296) = &off_1EF55A458;
  *(void *)(a1 + 1312) = 3131955885;
  *(void *)(a1 + 1168) = &off_1EF55A458;
  *(void *)(a1 + 1184) = 3131955885;
  *(void *)(a1 + 1040) = &off_1EF55A458;
  *(void *)(a1 + 1056) = 3131955885;
  *(void *)(a1 + 912) = &off_1EF55A458;
  *(void *)(a1 + 928) = 3131955885;
  *(void *)(a1 + 784) = &off_1EF55A458;
  *(void *)(a1 + 800) = 3131955885;
  *(void *)(a1 + 656) = &off_1EF55A458;
  *(void *)(a1 + 672) = 3131955885;
  *(void *)(a1 + 528) = &off_1EF55A458;
  *(void *)(a1 + 544) = 3131955885;
  *(void *)(a1 + 400) = &off_1EF55A458;
  *(void *)(a1 + 416) = 3131955885;
  *(void *)(a1 + 272) = &off_1EF55A458;
  *(void *)(a1 + 288) = 3131955885;
  *(void *)(a1 + 144) = &off_1EF55A458;
  *(void *)(a1 + 160) = 3131955885;
  *(void *)(a1 + 16) = &off_1EF55A458;
  *(void *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::ConstantDataTyped<ggl::RouteLineAlphaReset::FadeParams>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::RouteLineAlphaReset::FadeParams>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineAlphaReset::FadeParams>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineAlphaReset::FadeParams>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineAlphaReset::FadeParams>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Ribbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Ribbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Ribbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Ribbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Ribbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::RouteLineTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::RouteLineTraffic::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineTraffic::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5865A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::RouteLineTraffic::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5865A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::RouteLineBatch::~RouteLineBatch(md::RouteLineBatch *this)
{
  md::RouteLineBatch::~RouteLineBatch(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t vars8;

  *(void *)this = &unk_1EF5344A0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 325);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *((void *)this + 322);
  *((void *)this + 322) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = *((void *)this + 321);
  *((void *)this + 321) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int64x2_t v5 = *((void *)this + 320);
  *((void *)this + 320) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  unint64_t v6 = *((void *)this + 319);
  *((void *)this + 319) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  double v7 = *((void *)this + 318);
  *((void *)this + 318) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  int v8 = *((void *)this + 317);
  *((void *)this + 317) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 316);
  *((void *)this + 316) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  double v10 = *((void *)this + 315);
  *((void *)this + 315) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  __double2 v11 = *((void *)this + 314);
  *((void *)this + 314) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  long double v12 = *((void *)this + 313);
  *((void *)this + 313) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  double v13 = *((void *)this + 312);
  *((void *)this + 312) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  double v14 = *((void *)this + 311);
  *((void *)this + 311) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 310);
  *((void *)this + 310) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)this + 309);
  *((void *)this + 309) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)this + 308);
  *((void *)this + 308) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

void md::RouteLineBatch::layout(uint64_t a1, uint64_t a2)
{
  uint64_t v246 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 8) + 304) + 248);
  if (v4) {
    float v5 = *(float *)(v4 + 16);
  }
  else {
    float v5 = 1.0;
  }
  md::RouteStyleContext::RouteStyleContext((uint64_t)&v192, a2, *(void *)(a1 + 2456), *(unsigned __int8 *)(a1 + 2609), v5);
  if (!v194)
  {
    if (!*(unsigned char *)(*(void *)(a1 + 8) + 316))
    {
      if (GEOGetVectorKitRouteLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_33);
      }
      double v13 = (id)GEOGetVectorKitRouteLog_log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        double v14 = [*(id *)(a2 + 200) uniqueRouteID];
        uint64_t v15 = [v14 UUIDString];
        int v16 = *(_DWORD *)(a2 + 196);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        _os_log_impl(&dword_1A1780000, v13, OS_LOG_TYPE_INFO, "RouteLineBatch::layout failed due to style locker fail. Route ID %@, route leg %d", buf, 0x12u);
      }
      md::RouteLineSection::dumpStyleAttributes(*(md::RouteLineSection **)(a1 + 2456));
      *(unsigned char *)(*(void *)(a1 + 8) + 316) = 1;
    }
    *(unsigned char *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 264) = 0;
    *(unsigned char *)(a1 + 392) = 0;
    *(unsigned char *)(a1 + 520) = 0;
    *(unsigned char *)(a1 + 648) = 0;
    *(unsigned char *)(a1 + 776) = 0;
    *(unsigned char *)(a1 + 904) = 0;
    *(unsigned char *)(a1 + 1032) = 0;
    *(unsigned char *)(a1 + 1160) = 0;
    *(unsigned char *)(a1 + 1288) = 0;
    *(unsigned char *)(a1 + 1416) = 0;
    *(unsigned char *)(a1 + 1544) = 0;
    *(unsigned char *)(a1 + 1672) = 0;
    *(unsigned char *)(a1 + 1800) = 0;
    *(unsigned char *)(a1 + 1928) = 0;
    *(unsigned char *)(a1 + 2056) = 0;
    *(unsigned char *)(a1 + 2184) = 0;
    *(unsigned char *)(a1 + 2312) = 0;
    *(unsigned char *)(a1 + 2448) = 0;
    uint64_t v17 = v211;
    if (v211) {
      goto LABEL_222;
    }
    return;
  }
  if (!v192)
  {
    uint64_t v18 = 0;
    float32_t v19 = *(float *)(*(void *)(a1 + 2456) + 64);
    *(float32_t *)&uint64_t v228 = v19;
    int v20 = *(unsigned __int8 *)(a1 + 2609);
    int v21 = v193;
    uint64_t v22 = 2;
    uint64_t v23 = 4;
    uint64_t v24 = 6;
    if (!*(unsigned char *)(a1 + 2609) && v193)
    {
      uint64_t v18 = 1;
      uint64_t v22 = 3;
      uint64_t v23 = 5;
      uint64_t v24 = 7;
    }
    if (v193) {
      BOOL v25 = v20 != 0;
    }
    else {
      BOOL v25 = 1;
    }
    *(unsigned char *)(a1 + 136) = v25;
    *(unsigned char *)(a1 + 392) = v25;
    *(unsigned char *)(a1 + 648) = v25;
    *(unsigned char *)(a1 + 904) = v25;
    if (v20) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v21 != 0;
    }
    *(unsigned char *)(a1 + 264) = v26;
    *(unsigned char *)(a1 + 520) = v26;
    *(unsigned char *)(a1 + 776) = v26;
    *(unsigned char *)(a1 + 1032) = v26;
    if (!v20)
    {
      *(unsigned char *)(a1 + 1544) = v21 == 0;
      *(unsigned char *)(a1 + 1672) = v21;
    }
    *(unsigned char *)(a1 + 1928) = 0;
    *(unsigned char *)(a1 + 1160) = 0;
    *(unsigned char *)(a1 + 1800) = 0;
    *(unsigned char *)(a1 + 2312) = 0;
    if (v195)
    {
      uint64_t v27 = 0;
      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      __n128 v238 = 0uLL;
      if (!v20) {
        uint64_t v27 = *(void *)(a1 + 2520);
      }
      _setupRenderItems(&v199, (__int32 *)buf, &v202, (__int32 *)&v238, *(void *)(a1 + 2464), *(void *)(a1 + 2472), v27, a1 + 16 + (v18 << 7), v218, v219, *(float32_t *)(a2 + 124), v19, v220, v221, a1 + 16 + (v22 << 7), v20 != 0);
      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      __n128 v238 = 0uLL;
      _setupRenderItems((float32x4_t *)buf, v204, (float32x4_t *)&v238, v205, *(void *)(a1 + 2480), *(void *)(a1 + 2488), 0, a1 + 16 + (v23 << 7), v218, v219, *(float32_t *)(a2 + 124), *(float32_t *)&v228, v220, v221, a1 + 16 + (v24 << 7), *(unsigned char *)(a1 + 2609));
      goto LABEL_111;
    }
    uint64_t v124 = 0;
    uint64_t v125 = *(void *)(a1 + 2472);
    uint64_t v191 = *(void *)(a1 + 2496);
    uint64_t v189 = *(void *)(a1 + 2504);
    if (v197) {
      uint64_t v126 = 0;
    }
    else {
      uint64_t v126 = *(void *)(a1 + 2464);
    }
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    if (!v20) {
      uint64_t v124 = *(void *)(a1 + 2520);
    }
    uint64_t v188 = a1 + 16 + (v18 << 7);
    _setupRenderItems(&v199, v201, &v202, (__int32 *)buf, v126, v125, v124, v188, v218, v219, *(float32_t *)(a2 + 124), v19, v220, v221, a1 + 16 + (v22 << 7), v20 != 0);
    uint64_t v128 = *(void *)(a1 + 2456);
    uint64_t v129 = *(void *)(v128 + 280);
    int v130 = *(std::__shared_weak_count **)(v128 + 288);
    if (v130)
    {
      p_shared_owners = &v130->__shared_owners_;
      atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!v129)
      {
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
LABEL_231:
        if (!v197) {
          goto LABEL_277;
        }
        float v145 = *(float *)(a2 + 20) * v217;
        long double v146 = *(float **)(a1 + 2592);
        if (!v146) {
          goto LABEL_254;
        }
        unint64_t v147 = v214;
        double v148 = v211;
        long double v149 = v212;
        uint64_t v150 = v212 - v211;
        if (v212 == v211)
        {
          uint64_t v154 = 0;
          uint64_t v155 = 0;
          uint64_t v152 = 0;
        }
        else
        {
          if (v150 < 0) {
            goto LABEL_318;
          }
          uint64_t v151 = (*(uint64_t (**)(unint64_t, int64_t, uint64_t))(*(void *)v214 + 16))(v214, v212 - v211, 4);
          uint64_t v152 = v151;
          uint64_t v153 = 0;
          do
          {
            if (v151 + v153) {
              *(_DWORD *)(v151 + v153) = *(_DWORD *)&v148[v153];
            }
            v153 += 4;
          }
          while (&v148[v153] != v149);
          uint64_t v154 = v151 + v153;
          uint64_t v155 = v151 + 4 * (v150 >> 2);
        }
        v127.n128_f32[0] = v145 + 0.5;
        if (*((unsigned __int16 *)v146 + 23) == (int)(float)(v145 + 0.5)
          && (v127.n128_f32[0] = v215, v215 == v146[8])
          && (unint64_t v156 = (v154 - v152) >> 2,
              uint64_t v157 = *(void *)v146,
              v156 == (uint64_t)(*((void *)v146 + 1) - *(void *)v146) >> 2))
        {
          if (v154 == v152)
          {
            if (!v154) {
              goto LABEL_270;
            }
            BOOL v161 = 1;
            uint64_t v152 = v154;
          }
          else
          {
            unint64_t v158 = 0;
            unsigned int v159 = 1;
            v127.n128_u64[0] = 0x3400000034000000;
            do
            {
              float v160 = vabds_f32(*(float *)(v152 + 4 * v158), *(float *)(v157 + 4 * v158));
              BOOL v161 = v160 <= 0.00000011921;
              unint64_t v158 = v159++;
            }
            while (v160 <= 0.00000011921 && v156 > v158);
          }
        }
        else
        {
          if (!v152)
          {
LABEL_254:
            uint64_t v163 = *(void *)(*(void *)(a1 + 8) + 304);
            memset(buf, 0, sizeof(buf));
            unint64_t v243 = v214;
            double v165 = v211;
            double v164 = v212;
            uint64_t v166 = v212 - v211;
            if (v212 == v211)
            {
LABEL_261:
              float v244 = v215;
              md::DashTextureCache::textureForPattern(&v238, v163 + 256, (float *)buf, 0, v145);
              __n128 v127 = v238;
              __n128 v238 = 0uLL;
              uint8x8_t v168 = *(std::__shared_weak_count **)(a1 + 2600);
              *(__n128 *)(a1 + 2592) = v127;
              if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
              uint64_t v169 = (std::__shared_weak_count *)v238.n128_u64[1];
              if (v238.n128_u64[1]
                && !atomic_fetch_add((atomic_ullong *volatile)(v238.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                std::__shared_weak_count::__release_weak(v169);
              }
              if (*(void *)buf)
              {
                *(void *)&uint8_t buf[8] = *(void *)buf;
                (*(void (**)(unint64_t, void, void))(*(void *)v243 + 40))(v243, *(void *)buf, *(void *)&buf[16] - *(void *)buf);
              }
              **(void **)(*(void *)(a1 + 2496) + 96) = *(void *)(*(void *)(a1 + 2592) + 64);
              **(void **)(*(void *)(a1 + 2504) + 96) = *(void *)(*(void *)(a1 + 2592) + 64);
              goto LABEL_270;
            }
            if ((v166 & 0x8000000000000000) == 0)
            {
              unint64_t v167 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)v214 + 16))();
              *(void *)buf = v167;
              *(void *)&buf[16] = &v167[v166 >> 2];
              do
              {
                if (v167) {
                  *unint64_t v167 = *(_DWORD *)v165;
                }
                v165 += 4;
                ++v167;
              }
              while (v165 != v164);
              *(void *)&uint8_t buf[8] = v167;
              goto LABEL_261;
            }
LABEL_318:
            abort();
          }
          BOOL v161 = 0;
        }
        (*(void (**)(unint64_t, uint64_t, uint64_t, __n128))(*(void *)v147 + 40))(v147, v152, v155 - v152, v127);
        if (!v161) {
          goto LABEL_254;
        }
LABEL_270:
        uint64_t v170 = *(void *)(a1 + 2592);
        v127.n128_u16[0] = *(_WORD *)(v170 + 40);
        *(float *)&double v236 = (float)(*(float *)(a2 + 128) * (float)v127.n128_u32[0]) / *(float *)(a2 + 20);
        if (*(double *)(*(void *)(a1 + 2456) + 208) / *(float *)(a2 + 152) >= *(float *)(v170 + 48))
        {
          v238.n128_u64[0] = (unint64_t)&v236;
          v238.n128_u64[1] = a1;
          uint64_t v239 = a2;
          double v240 = &v228;
          unint64_t v241 = &v192;
          md::RouteLineBatch::layoutTwoPasses(md::RouteLayoutContext const&,md::RouteStyleContext const&)::$_0::operator()((uint64_t)&v238, v191, &v200, v201);
          *(void *)(v188 + 32) = v191;
          float v171 = fabsf(v219);
          if (v171 <= (float)(v171 * 0.000011921) || v171 < 1.1755e-38) {
            *(unsigned char *)(a1 + (v22 << 7) + 136) = 0;
          }
          if (*(unsigned char *)(a1 + 1928))
          {
            md::RouteLineBatch::layoutTwoPasses(md::RouteLayoutContext const&,md::RouteStyleContext const&)::$_0::operator()((uint64_t)&v238, v189, &v206, v207);
            *(void *)(a1 + 1840) = v189;
          }
        }
        else
        {
          *(unsigned char *)(a1 + 136) = 0;
          *(unsigned char *)(a1 + 264) = 0;
          *(unsigned char *)(a1 + 392) = 0;
          *(unsigned char *)(a1 + 520) = 0;
          *(unsigned char *)(a1 + 648) = 0;
          *(unsigned char *)(a1 + 776) = 0;
          *(unsigned char *)(a1 + 904) = 0;
          *(unsigned char *)(a1 + 1032) = 0;
          *(unsigned char *)(a1 + 1160) = 0;
          *(unsigned char *)(a1 + 1288) = 0;
          *(unsigned char *)(a1 + 1416) = 0;
          *(unsigned char *)(a1 + 1544) = 0;
          *(unsigned char *)(a1 + 1672) = 0;
          *(unsigned char *)(a1 + 1800) = 0;
          *(unsigned char *)(a1 + 1928) = 0;
          *(unsigned char *)(a1 + 2056) = 0;
          *(unsigned char *)(a1 + 2184) = 0;
          *(unsigned char *)(a1 + 2312) = 0;
          *(unsigned char *)(a1 + 2448) = 0;
        }
LABEL_277:
        *(unsigned char *)(a1 + 16 + (v23 << 7) + 120) = 0;
        *(unsigned char *)(a1 + 16 + (v24 << 7) + 120) = 0;
        if (*(unsigned char *)(a1 + 2609))
        {
          if (v197)
          {
            *(unsigned char *)(a1 + 1416) = 0;
          }
          else
          {
            uint64_t v172 = *(void *)(*(void *)(a1 + 2512) + 64);
            char v173 = *(void **)(v172 + 32);
            unint64_t v174 = v173[1];
            if (v174) {
              uint64_t v175 = v173[9];
            }
            else {
              uint64_t v175 = 0;
            }
            float v176 = v222 + (float)(v217 * 0.5);
            *(float *)(v175 + 16) = *(float *)(a2 + 128) * (float)(v176 + 2.0);
            uint64_t v177 = *(void *)(v172 + 48);
            unint64_t v178 = *(void *)(v177 + 8);
            **(float **)(v177 + 72) = v176 / (float)(v176 + 2.0);
            *(unsigned char *)(a1 + 1416) = 1;
            if (*(void *)(v177 + 64) > v178) {
              unint64_t v178 = *(void *)(v177 + 64);
            }
            *(void *)(v177 + 56) = 0;
            *(void *)(v177 + 64) = v178;
            if (v175 && v174)
            {
              if (v173[8] > v174) {
                unint64_t v174 = v173[8];
              }
              v173[7] = 0;
              v173[8] = v174;
            }
          }
        }
        *(unsigned char *)(a1 + 2056) = 0;
        *(unsigned char *)(a1 + 2184) = 0;
        if (v198)
        {
          uint64_t v179 = *(void **)(a1 + 2456);
          uint64_t v180 = v179[37];
          uint64_t v181 = v179[38];
          v238.n128_u64[0] = v180;
          v238.n128_u64[1] = v181;
          if (v181) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v181 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v182 = (std::__shared_weak_count *)v179[40];
          double v236 = (unsigned char *)v179[39];
          uint64_t v237 = v182;
          if (v182) {
            atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v184 = v179[41];
          unint64_t v183 = (std::__shared_weak_count *)v179[42];
          uint64_t v234 = v184;
          uint64_t v235 = v183;
          if (v183) {
            atomic_fetch_add_explicit(&v183->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v185 = (std::__shared_weak_count *)v179[44];
          uint64_t v232 = v179[43];
          unint64_t v233 = v185;
          if (v185) {
            atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v180) {
            setupTrafficRenderItem(a2, (uint64_t *)&v238, (uint64_t *)&v236, a1 + 1936, v218, v221, v220, *(float *)&v228);
          }
          if (v184 && *(unsigned char *)(a2 + 144)) {
            setupTrafficRenderItem(a2, &v234, &v232, a1 + 2064, v218, v221, v220, *(float *)&v228);
          }
          if (v185 && !atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
            std::__shared_weak_count::__release_weak(v185);
          }
          uint8x8_t v186 = v235;
          if (v235 && !atomic_fetch_add(&v235->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
            std::__shared_weak_count::__release_weak(v186);
          }
          unint64_t v187 = v237;
          if (v237 && !atomic_fetch_add(&v237->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
            std::__shared_weak_count::__release_weak(v187);
          }
          long double v76 = (std::__shared_weak_count *)v238.n128_u64[1];
          if (v238.n128_u64[1])
          {
            if (!atomic_fetch_add((atomic_ullong *volatile)(v238.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_110;
            }
          }
        }
        goto LABEL_111;
      }
      int v132 = *(unsigned __int8 *)(a2 + 144);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    else
    {
      if (!v129) {
        goto LABEL_231;
      }
      int v132 = *(unsigned __int8 *)(a2 + 144);
    }
    if (v132 && v196)
    {
      *(unsigned char *)(a1 + 1928) = 1;
      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      __n128 v238 = 0uLL;
      _setupRenderItems(&v206, v207, (float32x4_t *)buf, (__int32 *)&v238, *(void *)(a1 + 2528), 0, 0, a1 + 1808, v223, 0.0, *(float32_t *)(a2 + 124), *(float32_t *)&v228, v220, v221, 0, *(unsigned char *)(a1 + 2609));
    }
    goto LABEL_231;
  }
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(unsigned char *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 904) = 0;
  *(unsigned char *)(a1 + 1928) = 0;
  *(unsigned char *)(a1 + 2056) = 0;
  *(unsigned char *)(a1 + 2184) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 776) = 0;
  *(unsigned char *)(a1 + 1032) = 0;
  *(unsigned char *)(a1 + 1160) = 1;
  *(unsigned char *)(a1 + 1800) = 1;
  *(unsigned char *)(a1 + 2312) = 1;
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 304);
  v230[0] = *(unsigned char *)(v6 + 296);
  v230[1] = *(unsigned char *)(a2 + 195);
  v230[2] = *(unsigned char *)(a2 + 194);
  char v231 = 0;
  md::SinglePassRoutePipelineStateManager::pipelineStateForFunctionConstants((std::__shared_weak_count **)&v238, *(void *)(v6 + 208), v230);
  ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(a1 + 2560), v238.n128_i64[0], (std::__shared_weak_count *)v238.n128_u64[1]);
  ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(a1 + 2568), v238.n128_i64[0], (std::__shared_weak_count *)v238.n128_u64[1]);
  char v231 = 1;
  md::SinglePassRoutePipelineStateManager::pipelineStateForFunctionConstants((std::__shared_weak_count **)buf, *(void *)(v6 + 208), v230);
  float32x4_t v7 = *(float32x4_t *)buf;
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v8 = (std::__shared_weak_count *)v238.n128_u64[1];
  __n128 v238 = (__n128)v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  double v10 = *(float32x4_t **)(a1 + 2576);
  float32x4_t v11 = (float32x4_t)v238;
  if (v238.n128_u64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v238.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
  }
  if (!v11.i64[0] || **(void **)(v11.i64[0] + 40) != v10->i64[1])
  {
    long double v12 = (std::__shared_weak_count *)v10[1].i64[1];
    v10[1].i64[0] = 0;
    v10[1].i64[1] = 0;
    if (!v12) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  uint64_t v28 = v10[1].i64[0];
  if (v28 && v28 != v11.i64[0]) {
    ggl::PipelineSetup::resetData((uint64_t)v10);
  }
  if (v11.i64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11.i64[1] + 8), 1uLL, memory_order_relaxed);
  }
  long double v12 = (std::__shared_weak_count *)v10[1].i64[1];
  v10[1] = v11;
  if (v12)
  {
LABEL_48:
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_50:
  if (v11.i64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v11.i64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(uint64_t))(*(void *)v11.i64[1] + 16))(v11.i64[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11.i64[1]);
  }
  uint64_t v29 = *(void **)(*(void *)(*(void *)(a1 + 2560) + 64) + 64);
  unint64_t v30 = v29[1];
  uint64_t v31 = v29[9];
  *(_DWORD *)uint64_t v31 = *(_DWORD *)(a1 + 2584);
  unint64_t v32 = v29[8];
  if (v32 <= v30) {
    unint64_t v32 = v30;
  }
  v29[7] = 0;
  float v33 = *(double *)(*(void *)(a1 + 2456) + 208);
  *(float *)(v31 + 4) = v33;
  if (v32 > v30) {
    unint64_t v30 = v32;
  }
  v29[8] = v30;
  uint64_t v34 = *(void *)(*(void *)(a1 + 8) + 288);
  if ((*(unsigned char *)(v34 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    *(void *)buf = &v234;
    double v236 = buf;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v236, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  uint64_t v35 = *(_DWORD **)(v34 + 72);
  uint64_t v36 = *(void **)(*(void *)(*(void *)(a1 + 2560) + 64) + 48);
  unint64_t v37 = v36[1];
  __double2 v38 = (_DWORD *)v36[9];
  *__double2 v38 = *v35;
  v38[1] = v35[1];
  uint64_t v38[2] = v35[2];
  v38[3] = v35[3];
  v38[4] = v35[4];
  v38[5] = v35[5];
  v38[6] = v35[6];
  v38[7] = v35[7];
  v38[8] = v35[8];
  v38[9] = v35[9];
  v38[10] = v35[10];
  v38[11] = v35[11];
  v38[12] = v35[12];
  v38[13] = v35[13];
  v38[14] = v35[14];
  v38[15] = v35[15];
  unint64_t v39 = v36[8];
  uint64_t v40 = (_DWORD *)v36[9];
  if (v39 <= v37) {
    unint64_t v39 = v37;
  }
  v36[7] = 0;
  v36[8] = v39;
  v40[16] = v35[16];
  v40[17] = v35[17];
  v40[18] = v35[18];
  v40[19] = v35[19];
  if (v39 > v37) {
    unint64_t v37 = v39;
  }
  v36[8] = v37;
  uint64_t v41 = *(void *)(a1 + 2568);
  uint64_t v42 = *(void *)(v41 + 64);
  double v43 = *(void **)(v42 + 48);
  unint64_t v44 = v43[1];
  long double v45 = (_DWORD *)v43[9];
  *long double v45 = *v35;
  v45[1] = v35[1];
  void v45[2] = v35[2];
  v45[3] = v35[3];
  v45[4] = v35[4];
  v45[5] = v35[5];
  v45[6] = v35[6];
  v45[7] = v35[7];
  v45[8] = v35[8];
  v45[9] = v35[9];
  v45[10] = v35[10];
  v45[11] = v35[11];
  v45[12] = v35[12];
  v45[13] = v35[13];
  v45[14] = v35[14];
  v45[15] = v35[15];
  unint64_t v46 = v43[8];
  double v47 = (_DWORD *)v43[9];
  if (v46 <= v44) {
    unint64_t v46 = v44;
  }
  v43[7] = 0;
  v43[8] = v46;
  v47[16] = v35[16];
  v47[17] = v35[17];
  v47[18] = v35[18];
  v47[19] = v35[19];
  if (v46 > v44) {
    unint64_t v44 = v46;
  }
  v43[8] = v44;
  uint64_t v48 = *(void *)(a1 + 2576);
  long double v49 = *(void **)(*(void *)(v48 + 64) + 48);
  unint64_t v50 = v49[1];
  double v51 = (_DWORD *)v49[9];
  *double v51 = *v35;
  v51[1] = v35[1];
  v51[2] = v35[2];
  v51[3] = v35[3];
  v51[4] = v35[4];
  v51[5] = v35[5];
  v51[6] = v35[6];
  v51[7] = v35[7];
  v51[8] = v35[8];
  v51[9] = v35[9];
  v51[10] = v35[10];
  v51[11] = v35[11];
  v51[12] = v35[12];
  v51[13] = v35[13];
  v51[14] = v35[14];
  v51[15] = v35[15];
  unint64_t v52 = v49[8];
  long double v53 = (_DWORD *)v49[9];
  if (v52 <= v50) {
    unint64_t v52 = v50;
  }
  v49[7] = 0;
  v49[8] = v52;
  v53[16] = v35[16];
  v53[17] = v35[17];
  v53[18] = v35[18];
  v53[19] = v35[19];
  if (v52 <= v50) {
    unint64_t v54 = v50;
  }
  else {
    unint64_t v54 = v52;
  }
  v49[8] = v54;
  uint64_t v55 = *(void *)(v42 + 64);
  unint64_t v56 = *(void *)(v55 + 8);
  **(_DWORD **)(v55 + 72) = *(_DWORD *)(a1 + 2584);
  unint64_t v57 = *(void *)(v55 + 64);
  uint64_t v58 = *(void *)(v55 + 72);
  if (v57 <= v56) {
    unint64_t v57 = v56;
  }
  *(void *)(v55 + 56) = 0;
  *(void *)(v55 + 64) = v57;
  uint64_t v59 = *(void *)(a1 + 2456);
  float v60 = *(double *)(v59 + 208);
  *(float *)(v58 + 4) = v60;
  if (v57 > v56) {
    unint64_t v56 = v57;
  }
  *(void *)(v55 + 64) = v56;
  *(void *)(a1 + 1072) = *(void *)(a1 + 2560);
  *(void *)(a1 + 1712) = v41;
  *(void *)(a1 + 2224) = v48;
  double v61 = (unsigned int *)operator new(8uLL);
  double v62 = v61;
  *(void *)double v61 = 0x1100000008;
  long double v63 = *(std::__shared_weak_count **)(v59 + 304);
  double v236 = *(unsigned char **)(v59 + 296);
  uint64_t v237 = v63;
  if (v63) {
    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __double2 v64 = *(std::__shared_weak_count **)(v59 + 320);
  uint64_t v234 = *(void *)(v59 + 312);
  uint64_t v235 = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v66 = *(void *)(v59 + 328);
  long double v65 = *(std::__shared_weak_count **)(v59 + 336);
  uint64_t v232 = v66;
  unint64_t v233 = v65;
  if (v65) {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v67 = *(void *)(v59 + 344);
  long double v68 = *(std::__shared_weak_count **)(v59 + 352);
  uint64_t v228 = v67;
  size_t v229 = v68;
  if (v68) {
    atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  _setupSinglePassRenderItem(a2, (uint64_t *)&v236, &v234, *(void *)(*(void *)(*(void *)(a1 + ((unint64_t)*v61 << 7) + 48) + 64) + 32), v210, (uint64_t)&v202, v203, *(unsigned __int8 *)(*(void *)(a1 + 2456) + 237), v218, v219, v221, v220, *(float *)(a2 + 124), *(float *)(a2 + 124), *(float *)(*(void *)(a1 + 2456) + 64), a1);
  _setupSinglePassRenderItem(a2, (uint64_t *)&v236, &v234, *(void *)(*(void *)(*(void *)(a1 + ((unint64_t)v62[1] << 7) + 48) + 64) + 32), v210, (uint64_t)&v202, v203, *(unsigned __int8 *)(*(void *)(a1 + 2456) + 237), v218, v219, v221, v220, *(float *)(a2 + 124), *(float *)(a2 + 124), *(float *)(*(void *)(a1 + 2456) + 64), a1);
  if (v66 && *(unsigned char *)(a2 + 144))
  {
    uint64_t v69 = *(void *)(a1 + 2456);
    uint64_t v70 = *(void *)(v69 + 280);
    long double v71 = *(std::__shared_weak_count **)(v69 + 288);
    if (v71) {
      atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v226 = v70;
    size_t v227 = v71;
    uint64_t v224 = 0;
    uint64_t v225 = 0;
    gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)buf, v70, (uint64_t)v71);
    if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    double v72 = v225;
    if (v225 && !atomic_fetch_add(&v225->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
    _setupSinglePassRenderItem(a2, &v232, &v228, *(void *)(*(void *)(*(void *)(a1 + 1712) + 64) + 32), v210, (uint64_t)&v208, v209, *(unsigned __int8 *)(*(void *)(a1 + 2456) + 237), v218, v219, v221, v220, *(float *)(a2 + 124), *(float *)(a2 + 124), *(float *)(*(void *)(a1 + 2456) + 64), a1);
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)buf);
    long double v68 = v229;
  }
  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
  double v73 = v233;
  if (v233 && !atomic_fetch_add(&v233->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  long double v74 = v235;
  if (v235 && !atomic_fetch_add(&v235->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
  __double2 v75 = v237;
  if (v237 && !atomic_fetch_add(&v237->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
  operator delete(v62);
  long double v76 = (std::__shared_weak_count *)v238.n128_u64[1];
  if (v238.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v238.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_110:
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
LABEL_111:
  uint64_t v77 = *(void *)(a1 + 2552);
  unint64_t v78 = *(void *)(*(void *)(v77 + 64) + 32);
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  unint64_t v79 = *(void *)(v78 + 8);
  v80.n128_u64[0] = 0;
  v80.n128_u64[1] = v78;
  if (v79) {
    uint64_t v81 = *(void *)(v78 + 72);
  }
  else {
    uint64_t v81 = 0;
  }
  __n128 v190 = v80;
  *(__n128 *)buf = v80;
  *(void *)&buf[16] = 0;
  unint64_t v243 = v79;
  uint64_t v245 = v81;
  LOWORD(v244) = 1;
  __double2 v82 = +[VKDebugSettings sharedSettings];
  [v82 routeLineMaskWidth];
  float v84 = v83;
  [v82 routeLineMaskAlphaFalloff];
  float v86 = v85;
  uint64_t v87 = *(void *)(a1 + 2456);
  long double v88 = *(double **)(a2 + 160);
  if (v88)
  {
    double v89 = *v88;
    float v86 = v88[1];
  }
  else
  {
    double v89 = v84;
  }
  long double v90 = exp((*(double *)(v87 + 152) + (*(double *)(v87 + 176) - *(double *)(v87 + 152)) * 0.5) * 6.28318531 + -3.14159265);
  long double v91 = atan(v90) * 114.591559 + -90.0;
  long double v92 = tan(v91 * 0.00872664626 + 0.789761487);
  double v93 = log(v92);
  long double v94 = tan(v91 * 0.00872664626 + 0.78103484);
  double v95 = fabs((v93 - log(v94)) * 0.159154943);
  long double v96 = cos(v91 * 0.034906585) * -559.82 + 111132.92;
  long double v97 = v96 + cos(v91 * 0.0698131701) * 1.175;
  long double v98 = cos(v91 * 0.104719755);
  int v99 = *(_DWORD *)(v87 + 64);
  *(float *)&long double v98 = v89 * 0.5 * *(float *)(a2 + 128) * v95 / ((v97 + v98 * -0.0023) * *(float *)(a2 + 180));
  *(float *)(v81 + 100) = v86;
  *(_DWORD *)uint64_t v81 = LODWORD(v98);
  *(_DWORD *)(v81 + 32) = v99;
  *(_DWORD *)(v81 + 96) = 0;
  *(float32_t *)(v81 + 92) = v221;
  *(void *)(a1 + 1200) = v77;
  *(unsigned char *)(a1 + 1288) = 1;

  __n128 v100 = v190;
  if (v79)
  {
    if (v190.n128_u64[0] && *(unsigned char *)(v190.n128_u64[1] + 17) != 2) {
      (*(void (**)(__n128))(*(void *)v190.n128_u64[0] + 64))(v190);
    }
    unint64_t v101 = *(void *)(v190.n128_u64[1] + 64);
    if (v101 <= v79) {
      unint64_t v101 = v79;
    }
    *(void *)(v190.n128_u64[1] + 56) = 0;
    *(void *)(v190.n128_u64[1] + 64) = v101;
  }
  uint64_t v102 = *(void *)(a1 + 2456);
  unint64_t v103 = (*(void *)(v102 + 216) + *(void *)(a2 + 136)) | (v216 << 18);
  int v104 = *(_DWORD *)(a2 + 148);
  BOOL v105 = v104 == 1;
  int v106 = *(_DWORD *)(v102 + 192);
  if (v106 != 1) {
    BOOL v105 = 0;
  }
  BOOL v107 = v106 != 2 || v104 != 1;
  if (v106 == 2) {
    uint64_t v108 = v103 | 0x28000;
  }
  else {
    uint64_t v108 = v103 | 0x8000;
  }
  if (v106 == 2) {
    uint64_t v109 = v103 | 0x20000;
  }
  else {
    uint64_t v109 = (*(void *)(v102 + 216) + *(void *)(a2 + 136)) | (v216 << 18);
  }
  int v110 = *(unsigned __int8 *)(a2 + 57);
  int v111 = v110 + 2;
  if (v104 == 1)
  {
    if (v106 == 2)
    {
      if (v107)
      {
        uint64_t v119 = 0;
        uint64_t v120 = (uint64_t *)(a1 + 64);
        do
        {
          uint64_t v123 = v119;
          int v121 = v110;
          unint64_t v122 = v103 | 0x8000;
          switch((int)v119)
          {
            case 0:
            case 1:
            case 14:
              int v121 = v110 + 2;
              unint64_t v122 = v103 | 0x28000;
              goto LABEL_176;
            case 2:
            case 3:
              int v121 = v110;
              unint64_t v122 = v109;
              goto LABEL_176;
            case 4:
            case 5:
              int v121 = *(unsigned __int8 *)(a2 + 57) + v105;
              unint64_t v122 = v109;
              goto LABEL_176;
            case 6:
            case 7:
              int v121 = v110;
              unint64_t v122 = v108;
              goto LABEL_176;
            case 8:
              int v121 = v110;
              unint64_t v122 = v103 | 0x8000;
              uint64_t v123 = v103 | 0x2000;
              if (!*(unsigned char *)(a1 + 2609)) {
                goto LABEL_176;
              }
              break;
            case 9:
            case 11:
            case 12:
              int v121 = v110;
              unint64_t v122 = v103;
              goto LABEL_176;
            case 10:
              int v121 = v110;
              unint64_t v122 = v103 | 0xFFFFFFFF80000000;
              goto LABEL_176;
            case 13:
              int v121 = v110;
              unint64_t v122 = v103 | 0x8000;
              uint64_t v123 = v103 | 0x4000;
              if (!*(unsigned char *)(a1 + 2609)) {
                goto LABEL_176;
              }
              break;
            case 15:
            case 16:
              int v121 = v110;
              unint64_t v122 = v103 | 0x40000000;
              goto LABEL_176;
            case 17:
LABEL_176:
              *((_DWORD *)v120 - 2) = v121;
              uint64_t v123 = v122;
              break;
            default:
              break;
          }
          uint64_t *v120 = v123;
          v120 += 16;
          ++v119;
        }
        while (v119 != 18);
      }
      else
      {
        uint64_t v133 = 0;
        int v134 = (uint64_t *)(a1 + 64);
        do
        {
          uint64_t v137 = v133;
          int v135 = v110 + 2;
          unint64_t v136 = v103 | 0x28000;
          switch((int)v133)
          {
            case 0:
            case 1:
            case 14:
              goto LABEL_200;
            case 2:
            case 3:
              int v135 = v110;
              unint64_t v136 = v109;
              goto LABEL_200;
            case 4:
            case 5:
              int v135 = *(unsigned __int8 *)(a2 + 57) + v105;
              unint64_t v136 = v109;
              goto LABEL_200;
            case 6:
            case 7:
              int v135 = v110;
              unint64_t v136 = v108;
              goto LABEL_200;
            case 8:
              int v135 = v110;
              unint64_t v136 = v103 | 0x8000;
              uint64_t v137 = v103 | 0x2000;
              if (!*(unsigned char *)(a1 + 2609)) {
                goto LABEL_200;
              }
              break;
            case 9:
            case 11:
            case 12:
              int v135 = v110;
              unint64_t v136 = v103;
              goto LABEL_200;
            case 10:
              int v135 = v110;
              unint64_t v136 = v103 | 0xFFFFFFFF80000000;
              goto LABEL_200;
            case 13:
              int v135 = v110;
              unint64_t v136 = v103 | 0x8000;
              uint64_t v137 = v103 | 0x4000;
              if (!*(unsigned char *)(a1 + 2609)) {
                goto LABEL_200;
              }
              break;
            case 15:
            case 16:
              int v135 = v110 + 2;
              unint64_t v136 = v103 | 0x40000000;
              goto LABEL_200;
            case 17:
              int v135 = v110;
              unint64_t v136 = v103 | 0x8000;
LABEL_200:
              *((_DWORD *)v134 - 2) = v135;
              uint64_t v137 = v136;
              break;
            default:
              break;
          }
          *int v134 = v137;
          v134 += 16;
          ++v133;
        }
        while (v133 != 18);
      }
    }
    else
    {
      uint64_t v115 = 0;
      if (v106 == 1) {
        int v116 = v110 + 1;
      }
      else {
        int v116 = *(unsigned __int8 *)(a2 + 57);
      }
      uint64_t v117 = a1 + 56;
      do
      {
        unint64_t v118 = v115;
        switch((int)v115)
        {
          case 0:
          case 1:
          case 14:
            *(_DWORD *)uint64_t v117 = v116;
            goto LABEL_171;
          case 2:
          case 3:
            *(_DWORD *)uint64_t v117 = v110;
            unint64_t v118 = v109;
            break;
          case 4:
          case 5:
            *(_DWORD *)uint64_t v117 = *(unsigned __int8 *)(a2 + 57) + v105;
            unint64_t v118 = v109;
            break;
          case 6:
          case 7:
            *(_DWORD *)uint64_t v117 = v110;
            unint64_t v118 = v108;
            break;
          case 8:
            unint64_t v118 = v103 | 0x2000;
            if (!*(unsigned char *)(a1 + 2609)) {
              goto LABEL_170;
            }
            break;
          case 9:
          case 11:
          case 12:
            *(_DWORD *)uint64_t v117 = v110;
            unint64_t v118 = v103;
            break;
          case 10:
            *(_DWORD *)uint64_t v117 = v110;
            unint64_t v118 = v103 | 0xFFFFFFFF80000000;
            break;
          case 13:
            unint64_t v118 = v103 | 0x4000;
            if (!*(unsigned char *)(a1 + 2609)) {
              goto LABEL_170;
            }
            break;
          case 15:
          case 16:
            if (v107) {
              *(_DWORD *)uint64_t v117 = v110;
            }
            else {
              *(_DWORD *)uint64_t v117 = v111;
            }
            unint64_t v118 = v103 | 0x40000000;
            break;
          case 17:
LABEL_170:
            *(_DWORD *)uint64_t v117 = v110;
LABEL_171:
            unint64_t v118 = v103 | 0x8000;
            break;
          default:
            break;
        }
        *(void *)(v117 + 8) = v118;
        ++v115;
        v117 += 128;
      }
      while (v115 != 18);
    }
  }
  else
  {
    uint64_t v112 = 0;
    uint64_t v113 = a1 + 56;
    do
    {
      unint64_t v114 = v112;
      switch((int)v112)
      {
        case 0:
        case 1:
        case 6:
        case 7:
        case 14:
        case 17:
          goto LABEL_137;
        case 2:
        case 3:
        case 9:
        case 11:
        case 12:
          *(_DWORD *)uint64_t v113 = v110;
          unint64_t v114 = v103;
          break;
        case 4:
        case 5:
          *(_DWORD *)uint64_t v113 = *(unsigned __int8 *)(a2 + 57) + v105;
          unint64_t v114 = v103;
          break;
        case 8:
          unint64_t v114 = v103 | 0x2000;
          if (!*(unsigned char *)(a1 + 2609)) {
            goto LABEL_137;
          }
          break;
        case 10:
          *(_DWORD *)uint64_t v113 = v110;
          unint64_t v114 = v103 | 0xFFFFFFFF80000000;
          break;
        case 13:
          unint64_t v114 = v103 | 0x4000;
          if (!*(unsigned char *)(a1 + 2609))
          {
LABEL_137:
            *(_DWORD *)uint64_t v113 = v110;
            unint64_t v114 = v103 | 0x8000;
          }
          break;
        case 15:
        case 16:
          if (v107) {
            *(_DWORD *)uint64_t v113 = v110;
          }
          else {
            *(_DWORD *)uint64_t v113 = v111;
          }
          unint64_t v114 = v103 | 0x40000000;
          break;
        default:
          break;
      }
      *(void *)(v113 + 8) = v114;
      ++v112;
      v113 += 128;
    }
    while (v112 != 18);
  }
  float64_t v138 = *(void **)(a1 + 2400);
  if (v138)
  {
    do
    {
      if (v138[1])
      {
        unint64_t v140 = 0;
        float64_t v141 = v138 + 2;
        long double v142 = v138 + 2;
        uint64_t v143 = (void (***)(void, __n128))(v138 + 2);
        do
        {
          double v144 = (void (**)(void *, __n128))*v143;
          v143 += 15;
          (*v144)(v142, v100);
          ++v140;
          v141 += 15;
          long double v142 = v143;
        }
        while (v140 < v138[1]);
      }
      v138[1] = 0;
      float64_t v138 = (void *)*v138;
    }
    while (v138);
    uint64_t v139 = *(void *)(a1 + 2400);
  }
  else
  {
    uint64_t v139 = 0;
  }
  *(void *)(a1 + 2408) = v139;
  uint64_t v17 = v211;
  if (v211)
  {
LABEL_222:
    uint64_t v212 = v17;
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)v214 + 40))(v214, v17, v213 - (void)v17);
  }
}

void sub_1A262A69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a59);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a61);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a63);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v63 - 256);
  if (a42)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a45 + 40))(a45, a42, a44 - a42);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553A30;
  uint64_t v2 = *(uint64_t **)(a1 + 248);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 256);
    uint64_t v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
        std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](--v3, 0);
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 248);
    }
    *(void *)(a1 + 256) = v2;
    operator delete(v4);
  }
  float v5 = *(void **)(a1 + 224);
  do
  {
    if (v5[1])
    {
      unint64_t v6 = 0;
      float32x4_t v7 = v5 + 2;
      int v8 = v5 + 2;
      uint64_t v9 = (void (***)(void))(v5 + 2);
      do
      {
        double v10 = (void (**)(void *))*v9;
        v9 += 15;
        (*v10)(v8);
        ++v6;
        v7 += 15;
        int v8 = v9;
      }
      while (v6 < v5[1]);
    }
    v5[1] = 0;
    float v5 = (void *)*v5;
  }
  while (v5);
  float32x4_t v11 = *(void ***)(a1 + 224);
  *(void *)(a1 + 232) = v11;
  long double v12 = *v11;
  void *v11 = 0;
  if (v12)
  {
    do
    {
      double v13 = (void *)*v12;
      free(v12);
      long double v12 = v13;
    }
    while (v13);
    float32x4_t v11 = *(void ***)(a1 + 224);
  }
  free(v11);
  double v14 = *(void **)(a1 + 200);
  if (v14)
  {
    *(void *)(a1 + 208) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 168);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 176);
    uint64_t v17 = *(void *)(a1 + 168);
    if (v16 != v15)
    {
      uint64_t v18 = *(void *)(a1 + 176);
      do
      {
        int v20 = *(void **)(v18 - 24);
        v18 -= 24;
        float32_t v19 = v20;
        if (v20)
        {
          *(void *)(v16 - 16) = v19;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = *(void *)(a1 + 168);
    }
    *(void *)(a1 + 176) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 192) + 40))(*(void *)(a1 + 192), v17, *(void *)(a1 + 184) - v17);
  }
  int v21 = *(void **)(a1 + 144);
  if (v21)
  {
    *(void *)(a1 + 152) = v21;
    operator delete(v21);
  }
  *(void *)(a1 + 16) = &off_1EF55A458;
  *(void *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::ConstantDataTyped<ggl::TexturedAnimatedRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TexturedAnimatedRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedAnimatedRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedAnimatedRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TexturedAnimatedRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::RouteStyledOverlayBatch::~RouteStyledOverlayBatch(md::RouteStyledOverlayBatch *this)
{
  md::RouteStyledOverlayBatch::~RouteStyledOverlayBatch(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EF543C70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)this = &unk_1EF530FB8;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    float v5 = (std::__shared_weak_count *)*((void *)this + 37);
    if (!v5) {
      goto LABEL_12;
    }
  }
  else
  {
    float v5 = (std::__shared_weak_count *)*((void *)this + 37);
    if (!v5) {
      goto LABEL_12;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_12:
  md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)this);
}

void md::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch(void *a1)
{
  *a1 = &unk_1EF530FB8;
  uint64_t v2 = (std::__shared_weak_count *)a1[39];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[37];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[37];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch(void *a1)
{
  *a1 = &unk_1EF530FB8;
  uint64_t v2 = (std::__shared_weak_count *)a1[39];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[37];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[37];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonBatch<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

uint64_t md::RouteStyledOverlayBatch::StyleProperties::StyleProperties(uint64_t a1, uint64_t *a2, float a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  unint64_t v6 = (void **)(a1 + 56);
  *(_DWORD *)(a1 + 16) = 1092616192;
  *(_WORD *)(a1 + 79) = 0;
  *(unsigned char *)(a1 + 103) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  uint64_t v7 = *a2;
  int v8 = (std::__shared_weak_count *)a2[1];
  v102.__r_.__value_.__r.__words[0] = v7;
  v102.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void **)(a1 + 80);
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v103, v7, (uint64_t)v8);
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v104) {
      goto LABEL_6;
    }
LABEL_18:
    if (GEOGetVectorKitRouteLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_33);
    }
    uint64_t v16 = (id)GEOGetVectorKitRouteLog_log;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LOWORD(v102.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1A1780000, v16, OS_LOG_TYPE_INFO, "***RouteStyledOverlayBatch failed to get style for StyleProperties", (uint8_t *)&v102, 2u);
    }

    goto LABEL_203;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v104) {
    goto LABEL_18;
  }
LABEL_6:
  unint64_t v10 = *(void *)(v103[0] + 24);
  if ((int)a3 >= 0x17) {
    unsigned int v11 = 23;
  }
  else {
    unsigned int v11 = (int)a3;
  }
  long double v12 = *(float **)v10;
  if (!*(void *)v10)
  {
    BOOL v14 = 0;
    goto LABEL_24;
  }
  float v13 = *v12;
  BOOL v14 = *v12 == 1.0;
  if (!*(unsigned char *)(v10 + 10) || (v13 != 0.0 ? (BOOL v15 = v13 == 1.0) : (BOOL v15 = 1), v15))
  {
LABEL_24:
    unsigned int v17 = *(unsigned __int8 *)(v10 + v14 + 11);
    if (v17 != 2) {
      goto LABEL_27;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v103[0] + 24), 0x140u, v11, 0)) {
    goto LABEL_28;
  }
  unsigned int v17 = 1;
LABEL_27:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0x140u, v11, v17)) {
    goto LABEL_41;
  }
LABEL_28:
  float v18 = fminf(fmaxf(a3, 0.0), 23.0);
  if (v12)
  {
    float v19 = *v12;
    BOOL v20 = *v12 == 1.0;
    if (*(unsigned char *)(v10 + 10))
    {
      if (v19 != 0.0 && v19 != 1.0) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    BOOL v20 = 0;
  }
  unsigned int v22 = *(unsigned __int8 *)(v10 + v20 + 11);
  float v19 = 0.0;
  if (v22 != 2)
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x140u, v22, 0, v18);
    goto LABEL_40;
  }
LABEL_38:
  v102.__r_.__value_.__s.__data_[0] = 1;
  char v105 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x140u, 0, (BOOL *)&v102, v18);
  float v24 = v23;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x140u, 1u, (BOOL *)&v105, v18);
  float v26 = v24 + (float)((float)(v25 - v24) * v19);
LABEL_40:
  *(float *)a1 = v26;
  unint64_t v10 = *(void *)(v103[0] + 24);
  long double v12 = *(float **)v10;
LABEL_41:
  if (!v12)
  {
    BOOL v28 = 0;
    goto LABEL_50;
  }
  float v27 = *v12;
  BOOL v28 = *v12 == 1.0;
  if (!*(unsigned char *)(v10 + 10) || (v27 != 0.0 ? (BOOL v29 = v27 == 1.0) : (BOOL v29 = 1), v29))
  {
LABEL_50:
    unsigned int v30 = *(unsigned __int8 *)(v10 + v28 + 11);
    if (v30 != 2) {
      goto LABEL_53;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0xC2u, v11, 0)) {
    goto LABEL_54;
  }
  unsigned int v30 = 1;
LABEL_53:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0xC2u, v11, v30)) {
    goto LABEL_67;
  }
LABEL_54:
  float v31 = fminf(fmaxf(a3, 0.0), 23.0);
  if (v12)
  {
    float v32 = *v12;
    BOOL v33 = *v12 == 1.0;
    if (*(unsigned char *)(v10 + 10))
    {
      if (v32 != 0.0 && v32 != 1.0) {
        goto LABEL_64;
      }
    }
  }
  else
  {
    BOOL v33 = 0;
  }
  unsigned int v35 = *(unsigned __int8 *)(v10 + v33 + 11);
  float v32 = 0.0;
  if (v35 != 2)
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0xC2u, v35, 0, v31);
    goto LABEL_66;
  }
LABEL_64:
  v102.__r_.__value_.__s.__data_[0] = 1;
  char v105 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0xC2u, 0, (BOOL *)&v102, v31);
  float v37 = v36;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0xC2u, 1u, (BOOL *)&v105, v31);
  float v39 = v37 + (float)((float)(v38 - v37) * v32);
LABEL_66:
  *(float *)(a1 + 12) = v39;
  unint64_t v10 = *(void *)(v103[0] + 24);
  long double v12 = *(float **)v10;
LABEL_67:
  if (v12)
  {
    float v40 = *v12;
    BOOL v41 = *v12 == 1.0;
    if (*(unsigned char *)(v10 + 10))
    {
      if (v40 != 0.0 && v40 != 1.0) {
        goto LABEL_77;
      }
    }
  }
  else
  {
    BOOL v41 = 0;
  }
  unsigned int v43 = *(unsigned __int8 *)(v10 + v41 + 11);
  if (v43 != 2) {
    goto LABEL_79;
  }
LABEL_77:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v10, 0x88u, 0) & 1) == 0)
  {
    unsigned int v43 = 1;
LABEL_79:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v10, 0x88u, v43)) {
      goto LABEL_83;
    }
  }
  gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&v102, 0x88u, 2, v10, 0);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v6);
  }
  *(std::string *)unint64_t v6 = v102;
  unint64_t v10 = *(void *)(v103[0] + 24);
  long double v12 = *(float **)v10;
LABEL_83:
  if (v12)
  {
    float v44 = *v12;
    BOOL v45 = *v12 == 1.0;
    if (*(unsigned char *)(v10 + 10))
    {
      if (v44 != 0.0 && v44 != 1.0) {
        goto LABEL_93;
      }
    }
  }
  else
  {
    BOOL v45 = 0;
  }
  unsigned int v47 = *(unsigned __int8 *)(v10 + v45 + 11);
  if (v47 != 2) {
    goto LABEL_95;
  }
LABEL_93:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v10, 0x1A7u, 0) & 1) == 0)
  {
    unsigned int v47 = 1;
LABEL_95:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v10, 0x1A7u, v47)) {
      goto LABEL_97;
    }
  }
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<gm::Matrix<float,2,1>>(v10, 0x1A7u, fminf(fmaxf(a3, 0.0), 23.0));
  *(_DWORD *)(a1 + 20) = v48;
  *(_DWORD *)(a1 + 24) = v49;
  unint64_t v10 = *(void *)(v103[0] + 24);
  long double v12 = *(float **)v10;
LABEL_97:
  if (v12)
  {
    float v50 = *v12;
    BOOL v51 = *v12 == 1.0;
    if (*(unsigned char *)(v10 + 10) && v50 != 0.0 && v50 != 1.0) {
      goto LABEL_104;
    }
  }
  else
  {
    BOOL v51 = 0;
  }
  unsigned int v52 = *(unsigned __int8 *)(v10 + v51 + 11);
  if (v52 != 2) {
    goto LABEL_106;
  }
LABEL_104:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v10, 0x1ABu, 0) & 1) == 0)
  {
    unsigned int v52 = 1;
LABEL_106:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v10, 0x1ABu, v52)) {
      goto LABEL_110;
    }
  }
  gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&v102, 0x1ABu, 2, v10, 0);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
  *(void *)(a1 + 96) = *((void *)&v102.__r_.__value_.__l + 2);
  unint64_t v10 = *(void *)(v103[0] + 24);
  long double v12 = *(float **)v10;
LABEL_110:
  if (v12)
  {
    float v53 = *v12;
    BOOL v54 = *v12 == 1.0;
    if (*(unsigned char *)(v10 + 10) && v53 != 0.0 && v53 != 1.0) {
      goto LABEL_117;
    }
  }
  else
  {
    BOOL v54 = 0;
  }
  unsigned int v55 = *(unsigned __int8 *)(v10 + v54 + 11);
  if (v55 != 2) {
    goto LABEL_119;
  }
LABEL_117:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v10, 0x1A5u, 0) & 1) == 0)
  {
    unsigned int v55 = 1;
LABEL_119:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v10, 0x1A5u, v55)) {
      goto LABEL_121;
    }
  }
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<gm::Matrix<float,2,1>>(v10, 0x1A5u, fminf(fmaxf(a3, 0.0), 23.0));
  *(_DWORD *)(a1 + 36) = v56;
  *(_DWORD *)(a1 + 40) = v57;
  unint64_t v10 = *(void *)(v103[0] + 24);
  long double v12 = *(float **)v10;
LABEL_121:
  if (!v12)
  {
    BOOL v59 = 0;
    goto LABEL_127;
  }
  float v58 = *v12;
  BOOL v59 = *v12 == 1.0;
  if (!*(unsigned char *)(v10 + 10) || v58 == 0.0 || v58 == 1.0)
  {
LABEL_127:
    unsigned int v60 = *(unsigned __int8 *)(v10 + v59 + 11);
    if (v60 != 2) {
      goto LABEL_130;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0x1A9u, v11, 0)) {
    goto LABEL_131;
  }
  unsigned int v60 = 1;
LABEL_130:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0x1A9u, v11, v60)) {
    goto LABEL_141;
  }
LABEL_131:
  float v61 = fminf(fmaxf(a3, 0.0), 23.0);
  if (v12)
  {
    float v62 = *v12;
    BOOL v63 = *v12 == 1.0;
    if (*(unsigned char *)(v10 + 10) && v62 != 0.0 && v62 != 1.0) {
      goto LABEL_138;
    }
  }
  else
  {
    BOOL v63 = 0;
  }
  unsigned int v64 = *(unsigned __int8 *)(v10 + v63 + 11);
  float v62 = 0.0;
  if (v64 != 2)
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x1A9u, v64, 0, v61);
    goto LABEL_140;
  }
LABEL_138:
  v102.__r_.__value_.__s.__data_[0] = 1;
  char v105 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x1A9u, 0, (BOOL *)&v102, v61);
  float v66 = v65;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x1A9u, 1u, (BOOL *)&v105, v61);
  float v68 = v66 + (float)((float)(v67 - v66) * v62);
LABEL_140:
  *(float *)(a1 + 8) = v68;
  unint64_t v10 = *(void *)(v103[0] + 24);
  long double v12 = *(float **)v10;
LABEL_141:
  if (!v12)
  {
    BOOL v70 = 0;
    goto LABEL_147;
  }
  float v69 = *v12;
  BOOL v70 = *v12 == 1.0;
  if (!*(unsigned char *)(v10 + 10) || v69 == 0.0 || v69 == 1.0)
  {
LABEL_147:
    unsigned int v71 = *(unsigned __int8 *)(v10 + v70 + 11);
    if (v71 != 2) {
      goto LABEL_150;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0x1AAu, v11, 0)) {
    goto LABEL_151;
  }
  unsigned int v71 = 1;
LABEL_150:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0x1AAu, v11, v71)) {
    goto LABEL_161;
  }
LABEL_151:
  float v72 = fminf(fmaxf(a3, 0.0), 23.0);
  if (v12)
  {
    float v73 = *v12;
    BOOL v74 = *v12 == 1.0;
    if (*(unsigned char *)(v10 + 10) && v73 != 0.0 && v73 != 1.0) {
      goto LABEL_158;
    }
  }
  else
  {
    BOOL v74 = 0;
  }
  unsigned int v75 = *(unsigned __int8 *)(v10 + v74 + 11);
  float v73 = 0.0;
  if (v75 != 2)
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x1AAu, v75, 0, v72);
    goto LABEL_160;
  }
LABEL_158:
  v102.__r_.__value_.__s.__data_[0] = 1;
  char v105 = 1;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x1AAu, 0, (BOOL *)&v102, v72);
  float v77 = v76;
  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x1AAu, 1u, (BOOL *)&v105, v72);
  float v79 = v77 + (float)((float)(v78 - v77) * v73);
LABEL_160:
  *(float *)(a1 + 4) = v79;
  unint64_t v10 = *(void *)(v103[0] + 24);
  long double v12 = *(float **)v10;
LABEL_161:
  if (v12)
  {
    float v80 = *v12;
    BOOL v81 = *v12 == 1.0;
    if (*(unsigned char *)(v10 + 10) && v80 != 0.0 && v80 != 1.0) {
      goto LABEL_168;
    }
  }
  else
  {
    BOOL v81 = 0;
  }
  unsigned int v82 = *(unsigned __int8 *)(v10 + v81 + 11);
  if (v82 != 2) {
    goto LABEL_170;
  }
LABEL_168:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0x1A6u, v11, 0) & 1) == 0)
  {
    unsigned int v82 = 1;
LABEL_170:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0x1A6u, v11, v82)) {
      goto LABEL_172;
    }
  }
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<gm::Matrix<float,2,1>>(v10, 0x1A6u, fminf(fmaxf(a3, 0.0), 23.0));
  *(_DWORD *)(a1 + 44) = v83;
  *(_DWORD *)(a1 + 48) = v84;
  unint64_t v10 = *(void *)(v103[0] + 24);
  long double v12 = *(float **)v10;
LABEL_172:
  if (v12)
  {
    float v85 = *v12;
    BOOL v86 = *v12 == 1.0;
    if (*(unsigned char *)(v10 + 10) && v85 != 0.0 && v85 != 1.0) {
      goto LABEL_179;
    }
  }
  else
  {
    BOOL v86 = 0;
  }
  unsigned int v87 = *(unsigned __int8 *)(v10 + v86 + 11);
  if (v87 != 2) {
    goto LABEL_181;
  }
LABEL_179:
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0x1A8u, v11, 0) & 1) == 0)
  {
    unsigned int v87 = 1;
LABEL_181:
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0x1A8u, v11, v87)) {
      goto LABEL_183;
    }
  }
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<gm::Matrix<float,2,1>>(v10, 0x1A8u, fminf(fmaxf(a3, 0.0), 23.0));
  *(_DWORD *)(a1 + 28) = v88;
  *(_DWORD *)(a1 + 32) = v89;
  unint64_t v10 = *(void *)(v103[0] + 24);
  long double v12 = *(float **)v10;
LABEL_183:
  if (!v12)
  {
    BOOL v91 = 0;
    goto LABEL_189;
  }
  float v90 = *v12;
  BOOL v91 = *v12 == 1.0;
  if (!*(unsigned char *)(v10 + 10) || v90 == 0.0 || v90 == 1.0)
  {
LABEL_189:
    unsigned int v92 = *(unsigned __int8 *)(v10 + v91 + 11);
    if (v92 != 2) {
      goto LABEL_192;
    }
  }
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0x19Eu, v11, 0)) {
    goto LABEL_193;
  }
  unsigned int v92 = 1;
LABEL_192:
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v10, 0x19Eu, v11, v92))
  {
LABEL_193:
    float v93 = fminf(fmaxf(a3, 0.0), 23.0);
    if (v12)
    {
      float v94 = *v12;
      BOOL v95 = *v12 == 1.0;
      if (*(unsigned char *)(v10 + 10) && v94 != 0.0 && v94 != 1.0) {
        goto LABEL_200;
      }
    }
    else
    {
      BOOL v95 = 0;
    }
    unsigned int v96 = *(unsigned __int8 *)(v10 + v95 + 11);
    float v94 = 0.0;
    if (v96 != 2)
    {
      gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x19Eu, v96, 0, v93);
      goto LABEL_202;
    }
LABEL_200:
    v102.__r_.__value_.__s.__data_[0] = 1;
    char v105 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x19Eu, 0, (BOOL *)&v102, v93);
    float v98 = v97;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v10, 0x19Eu, 1u, (BOOL *)&v105, v93);
    float v100 = v98 + (float)((float)(v99 - v98) * v94);
LABEL_202:
    *(float *)(a1 + 16) = v100;
  }
LABEL_203:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v103);
  return a1;
}

void sub_1A262BC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  if (*(char *)(v5 + 103) < 0)
  {
    operator delete(*v7);
    if ((*(char *)(v5 + 79) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v5 + 79) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v6);
  _Unwind_Resume(a1);
}

unint64_t gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<gm::Matrix<float,2,1>>(unint64_t a1, unsigned int a2, float a3)
{
  unint64_t v6 = *(float **)a1;
  if (*(void *)a1
    && (float v7 = *v6, LODWORD(v6) = *v6 == 1.0, *(unsigned char *)(a1 + 10))
    && (v7 != 0.0 ? (BOOL v8 = v7 == 1.0) : (BOOL v8 = 1), !v8)
    || (unsigned int v9 = *(unsigned __int8 *)(a1 + v6 + 11), v9 == 2))
  {
    char v12 = 1;
    char v11 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<gm::Matrix<float,2,1>>(a1, a2, 0, (BOOL *)&v12, a3);
    return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<gm::Matrix<float,2,1>>(a1, a2, 1u, (BOOL *)&v11, a3);
  }
  else
  {
    return gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<gm::Matrix<float,2,1>>(a1, a2, v9, 0, a3);
  }
}

unint64_t gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<gm::Matrix<float,2,1>>(unint64_t result, unsigned int a2, unsigned int a3, BOOL *a4, float a5)
{
  LODWORD(v7) = (int)a5;
  if ((int)a5 >= 0x17) {
    uint64_t v8 = 23;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v7 >= 0x16) {
    uint64_t v7 = 22;
  }
  else {
    uint64_t v7 = v7;
  }
  unsigned int v9 = (uint64_t *)(result + 16 * a3);
  uint64_t v12 = v9[2];
  char v11 = v9 + 2;
  uint64_t v10 = v12;
  if (!v12)
  {
    if (a4) {
      *a4 = 0;
    }
    return (unint64_t)gss::defaultValueForKey<gss::PropertyID,gm::Matrix<float,2,1>>();
  }
  uint64_t v13 = v7 + 1;
  BOOL v14 = (uint64_t *)(result + 16 * a3);
  uint64_t v15 = *((unsigned __int16 *)v14 + 28);
  if (!*((_WORD *)v14 + 28))
  {
    unsigned __int8 v75 = 1;
    unsigned __int8 v74 = 1;
LABEL_125:
    gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<gm::Matrix<float,2,1>>(*(uint64_t **)(v10 + 72), a2, v8, &v75);
LABEL_126:
    __n128 result = (unint64_t)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<gm::Matrix<float,2,1>>(*(uint64_t **)(*v11 + 72), a2, v13, &v74);
    if (a4) {
LABEL_127:
    }
      *a4 = (v75 | v74) != 0;
    return result;
  }
  char v16 = 0;
  unsigned int v17 = (uint64_t *)v14[6];
  float v18 = &v17[v15];
  while (2)
  {
    LOBYTE(v19) = 0;
    while (1)
    {
      uint64_t v21 = *v17;
      if ((v19 & 1) == 0)
      {
        unsigned int v22 = *(uint64_t **)(v21 + 72);
        if (!v22) {
          goto LABEL_51;
        }
        unsigned int v23 = *((unsigned __int8 *)v22 + v8 + 16);
        uint64_t v24 = *v22;
        float v25 = (char **)(v24 + 80 * v23);
        unint64_t v26 = *((unsigned __int16 *)v25 + 5);
        if (!*((_WORD *)v25 + 5))
        {
          __n128 result = 0;
LABEL_51:
          int v19 = 0;
          if (v16)
          {
LABEL_88:
            if (v19) {
              goto LABEL_129;
            }
            goto LABEL_116;
          }
          goto LABEL_52;
        }
        __n128 result = (unint64_t)*v25;
        if (*((unsigned char *)v25 + 15))
        {
          if (v26 >= 0x1E)
          {
            float v31 = *v25;
            unint64_t v32 = v26;
            do
            {
              unint64_t v33 = v32 >> 1;
              uint64_t v34 = (unsigned __int16 *)&v31[2 * (v32 >> 1)];
              unsigned int v36 = *v34;
              unsigned int v35 = v34 + 1;
              v32 += ~(v32 >> 1);
              if (v36 < a2) {
                float v31 = (char *)v35;
              }
              else {
                unint64_t v32 = v33;
              }
            }
            while (v32);
            if (v31 == (char *)(result + 2 * v26)) {
              goto LABEL_51;
            }
            if (*(unsigned __int16 *)v31 != a2) {
              goto LABEL_51;
            }
            __n128 result = (unint64_t)&v31[-result] >> 1;
            if (v26 == (unsigned __int16)result) {
              goto LABEL_51;
            }
          }
          else
          {
            uint64_t v27 = 0;
            while (1)
            {
              unsigned int v28 = *(unsigned __int16 *)(result + 2 * v27);
              if (v28 >= a2) {
                break;
              }
              if (v26 == ++v27) {
                goto LABEL_51;
              }
            }
            if (v28 == a2) {
              __n128 result = v27;
            }
            else {
              __n128 result = v26;
            }
            if (v26 == (unsigned __int16)result) {
              goto LABEL_51;
            }
          }
        }
        else
        {
          uint64_t v29 = 2 * v26;
          unsigned int v30 = *v25;
          while (*(unsigned __int16 *)v30 != a2)
          {
            v30 += 2;
            v29 -= 2;
            if (!v29)
            {
              unsigned int v30 = (char *)(result + 2 * v26);
              break;
            }
          }
          __n128 result = (unint64_t)&v30[-result] >> 1;
          if (v26 == (unsigned __int16)result) {
            goto LABEL_51;
          }
        }
        uint64_t v37 = v24 + 80 * v23;
        __n128 result = *(unsigned __int16 *)(v37 + 58);
        if (*(_WORD *)(v37 + 58))
        {
          uint64_t v38 = v24 + 80 * v23;
          uint64_t v39 = *(void *)(v38 + 48);
          if (*(unsigned char *)(v38 + 63))
          {
            if (result >= 0x1E)
            {
              int v56 = *(unsigned __int16 **)(v38 + 48);
              unint64_t v57 = result;
              do
              {
                unint64_t v58 = v57 >> 1;
                BOOL v59 = &v56[v57 >> 1];
                unsigned int v61 = *v59;
                unsigned int v60 = v59 + 1;
                v57 += ~(v57 >> 1);
                if (v61 < a2) {
                  int v56 = v60;
                }
                else {
                  unint64_t v57 = v58;
                }
              }
              while (v57);
            }
            else
            {
              float v40 = 0;
              do
              {
                unsigned int v41 = *(unsigned __int16 *)(v39 + 2 * (void)v40);
                if (v41 >= a2) {
                  break;
                }
                float v40 = (uint64_t *)((char *)v40 + 1);
              }
              while ((uint64_t *)result != v40);
            }
          }
          else
          {
            uint64_t v54 = 2 * result;
            unsigned int v55 = *(unsigned __int16 **)(v38 + 48);
            do
            {
              if (*v55 == a2) {
                break;
              }
              ++v55;
              v54 -= 2;
            }
            while (v54);
          }
        }
      }
      int v19 = 1;
      if (v16) {
        goto LABEL_88;
      }
LABEL_52:
      uint64_t v42 = *(uint64_t **)(v21 + 72);
      if (v42)
      {
        unsigned int v43 = *((unsigned __int8 *)v42 + v13 + 16);
        uint64_t v44 = *v42;
        __n128 result = v44 + 80 * v43;
        unint64_t v45 = *(unsigned __int16 *)(result + 10);
        if (*(_WORD *)(result + 10))
        {
          unint64_t v46 = *(void *)result;
          if (*(unsigned char *)(result + 15))
          {
            if (v45 >= 0x1E)
            {
              __n128 result = *(void *)result;
              unint64_t v49 = v45;
              do
              {
                unint64_t v50 = v49 >> 1;
                BOOL v51 = (unsigned __int16 *)(result + 2 * (v49 >> 1));
                unsigned int v53 = *v51;
                unsigned int v52 = (uint64_t *)(v51 + 1);
                v49 += ~(v49 >> 1);
                if (v53 < a2) {
                  __n128 result = (unint64_t)v52;
                }
                else {
                  unint64_t v49 = v50;
                }
              }
              while (v49);
              if (result == v46 + 2 * v45 || *(unsigned __int16 *)result != a2) {
                goto LABEL_13;
              }
              unint64_t v20 = (result - v46) >> 1;
            }
            else
            {
              __n128 result = 0;
              while (1)
              {
                unsigned int v47 = *(unsigned __int16 *)(v46 + 2 * result);
                if (v47 >= a2) {
                  break;
                }
                if (v45 == ++result) {
                  goto LABEL_13;
                }
              }
              LOWORD(v20) = v47 == a2 ? result : (unsigned __int16)v45;
            }
          }
          else
          {
            uint64_t v48 = 2 * v45;
            __n128 result = *(void *)result;
            while (*(unsigned __int16 *)result != a2)
            {
              result += 2;
              v48 -= 2;
              if (!v48)
              {
                __n128 result = v46 + 2 * v45;
                break;
              }
            }
            unint64_t v20 = (result - v46) >> 1;
          }
        }
        else
        {
          LOWORD(v20) = 0;
        }
        if (v45 != (unsigned __int16)v20) {
          break;
        }
      }
LABEL_13:
      char v16 = 0;
      if (++v17 == v18)
      {
        unsigned __int8 v75 = 1;
        unsigned __int8 v74 = 1;
        if ((v19 & 1) == 0) {
          goto LABEL_125;
        }
        goto LABEL_126;
      }
    }
    uint64_t v62 = v44 + 80 * v43;
    unint64_t v63 = *(unsigned __int16 *)(v62 + 58);
    if (*(_WORD *)(v62 + 58))
    {
      uint64_t v64 = v44 + 80 * v43;
      uint64_t v65 = *(void *)(v64 + 48);
      if (!*(unsigned char *)(v64 + 63))
      {
        uint64_t v67 = 2 * v63;
        float v68 = *(unsigned __int16 **)(v64 + 48);
        while (*v68 != a2)
        {
          ++v68;
          v67 -= 2;
          if (!v67)
          {
            float v68 = (unsigned __int16 *)(v65 + 2 * v63);
            break;
          }
        }
        __n128 result = ((unint64_t)v68 - v65) >> 1;
LABEL_115:
        if (v19) {
          goto LABEL_129;
        }
        goto LABEL_116;
      }
      if (v63 < 0x1E)
      {
        __n128 result = 0;
        while (1)
        {
          unsigned int v66 = *(unsigned __int16 *)(v65 + 2 * result);
          if (v66 >= a2) {
            break;
          }
          if (v63 == ++result) {
            goto LABEL_110;
          }
        }
        if (v66 == a2) {
          __n128 result = result;
        }
        else {
          __n128 result = v63;
        }
        goto LABEL_115;
      }
      __n128 result = *(void *)(v64 + 48);
      float v69 = (uint64_t *)v63;
      do
      {
        BOOL v70 = (uint64_t *)((unint64_t)v69 >> 1);
        unsigned int v71 = (unsigned __int16 *)(result + 2 * ((unint64_t)v69 >> 1));
        unsigned int v73 = *v71;
        float v72 = (uint64_t *)(v71 + 1);
        float v69 = (uint64_t *)((char *)v69 + ~((unint64_t)v69 >> 1));
        if (v73 < a2) {
          __n128 result = (unint64_t)v72;
        }
        else {
          float v69 = v70;
        }
      }
      while (v69);
      if (result != v65 + 2 * v63)
      {
        if (*(unsigned __int16 *)result == a2) {
          __n128 result = (result - v65) >> 1;
        }
        goto LABEL_115;
      }
    }
LABEL_110:
    if (v19)
    {
LABEL_129:
      unsigned __int8 v75 = 1;
      unsigned __int8 v74 = 1;
      if (a4) {
        goto LABEL_127;
      }
      return result;
    }
LABEL_116:
    ++v17;
    char v16 = 1;
    if (v17 != v18) {
      continue;
    }
    break;
  }
  unsigned __int8 v75 = 1;
  unsigned __int8 v74 = 1;
  __n128 result = (unint64_t)gss::CartoStyle<gss::PropertyID>::valueForKeyAtZ<gm::Matrix<float,2,1>>(*(uint64_t **)(v10 + 72), a2, v8, &v75);
  if (a4) {
    goto LABEL_127;
  }
  return result;
}

void md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::RibbonLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    int v73 = a6[24];
    if (a6[24])
    {
      char v6 = a6[1];
      char v74 = *a6;
      uint64_t v8 = *(void *)(a6 + 4);
    }
    else
    {
      char v74 = 0;
    }
    *(void *)a1 = &unk_1EF553B70;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(void *)(a1 + 208) = 0;
    *(unsigned char *)(a1 + 216) = 0;
    *(unsigned char *)(a1 + 240) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 185) = 0u;
    if (v73)
    {
      *(unsigned char *)(a1 + 216) = v74;
      *(unsigned char *)(a1 + 217) = v6;
      *(void *)(a1 + 220) = v8;
      *(unsigned char *)(a1 + 240) = 1;
    }
    unsigned __int8 v75 = operator new(0xF8uLL);
    v75[1] = 0;
    v75[2] = 0;
    *unsigned __int8 v75 = &unk_1EF585378;
    ggl::BufferData::BufferData((uint64_t)(v75 + 3), 48, 0, 0, 1, 0);
    v75[29] = "BatchType/VData";
    v75[30] = &ggl::RouteLine::defaultVboReflection;
    v75[3] = &unk_1EF55D008;
    v75[28] = &unk_1EF55D028;
    float v76 = operator new(0xF8uLL);
    v76[1] = 0;
    v76[2] = 0;
    *float v76 = &unk_1EF583D28;
    ggl::BufferData::BufferData((uint64_t)(v76 + 3), 2, 1, 0, 1, 0);
    *((_DWORD *)v76 + 60) = 0;
    v76[3] = &unk_1EF55B630;
    v76[4] = 2;
    v76[28] = &unk_1EF55B650;
    v76[29] = "BatchType/IData";
    operator new();
  }
  long long v78 = 0uLL;
  {
    operator new();
  }
  uint64_t v79 = mdm::Allocator::instance(void)::alloc;
  uint64_t v80 = 0;
  {
    operator new();
  }
  uint64_t v81 = mdm::Allocator::instance(void)::alloc;
  unint64_t v82 = 0;
  float v83 = 1.0;
  unsigned int v9 = *(uint64_t **)(a3 + 24);
  uint64_t v10 = *(uint64_t **)(a3 + 32);
  if (v9 == v10) {
LABEL_5:
  }
    operator new();
  while (1)
  {
    unsigned int v12 = ggl::CullingGrid::intersectedCellsForRibbon(*(void *)(*v9 + 88), *(void **)(*v9 + 72));
    unsigned int v13 = v12;
    unint64_t v14 = v12;
    size_t v15 = *((void *)&v78 + 1);
    if (*((void *)&v78 + 1))
    {
      uint8x8_t v16 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v78 + 8));
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        unint64_t v7 = v12;
        if (*((void *)&v78 + 1) <= (unint64_t)v12) {
          unint64_t v7 = (unint64_t)v12 % *((void *)&v78 + 1);
        }
      }
      else
      {
        unint64_t v7 = (DWORD2(v78) - 1) & v12;
      }
      unsigned int v17 = *(uint64_t **)(v78 + 8 * v7);
      if (v17)
      {
        uint64_t v18 = *v17;
        if (*v17)
        {
          if (v16.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v20 = *(void *)(v18 + 8);
              if (v20 == v12)
              {
                if (*(_DWORD *)(v18 + 16) == v12) {
                  goto LABEL_88;
                }
              }
              else if ((v20 & (*((void *)&v78 + 1) - 1)) != v7)
              {
                goto LABEL_28;
              }
              uint64_t v18 = *(void *)v18;
              if (!v18) {
                goto LABEL_28;
              }
            }
          }
          do
          {
            unint64_t v19 = *(void *)(v18 + 8);
            if (v19 == v12)
            {
              if (*(_DWORD *)(v18 + 16) == v12) {
                goto LABEL_88;
              }
            }
            else
            {
              if (v19 >= *((void *)&v78 + 1)) {
                v19 %= *((void *)&v78 + 1);
              }
              if (v19 != v7) {
                break;
              }
            }
            uint64_t v18 = *(void *)v18;
          }
          while (v18);
        }
      }
    }
LABEL_28:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v81 + 16))(v81, 56, 8);
    *(void *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = v14;
    *(_DWORD *)(v18 + 16) = v13;
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 40) = 0;
    *(void *)(v18 + 24) = 0;
    {
      operator new();
    }
    *(void *)(v18 + 48) = mdm::Allocator::instance(void)::alloc;
    float v21 = (float)(v82 + 1);
    if (!*((void *)&v78 + 1) || (float)(v83 * (float)*((unint64_t *)&v78 + 1)) < v21) {
      break;
    }
LABEL_78:
    uint64_t v42 = *(uint64_t **)(v78 + 8 * v7);
    if (v42)
    {
      *(void *)uint64_t v18 = *v42;
LABEL_86:
      uint64_t *v42 = v18;
      goto LABEL_87;
    }
    *(void *)uint64_t v18 = v80;
    uint64_t v80 = v18;
    *(void *)(v78 + 8 * v7) = &v80;
    if (*(void *)v18)
    {
      size_t v43 = *(void *)(*(void *)v18 + 8);
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v43 >= v15) {
          v43 %= v15;
        }
      }
      else
      {
        v43 &= v15 - 1;
      }
      uint64_t v42 = (uint64_t *)(v78 + 8 * v43);
      goto LABEL_86;
    }
LABEL_87:
    ++v82;
LABEL_88:
    uint64_t v44 = *(void **)(v18 + 32);
    unint64_t v45 = *(void *)(v18 + 40);
    if ((unint64_t)v44 < v45)
    {
      if (v44)
      {
        uint64_t v46 = *v9;
        uint64_t *v9 = 0;
        *uint64_t v44 = v46;
      }
      char v11 = v44 + 1;
      goto LABEL_7;
    }
    uint64_t v47 = *(void *)(v18 + 24);
    uint64_t v48 = ((uint64_t)v44 - v47) >> 3;
    unint64_t v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 61) {
      abort();
    }
    uint64_t v50 = v45 - v47;
    if (v50 >> 2 > v49) {
      unint64_t v49 = v50 >> 2;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v51 = v49;
    }
    if (v51)
    {
      uint64_t v52 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v18 + 48) + 16))(*(void *)(v18 + 48), 8 * v51, 8);
      unsigned int v53 = (void *)(v52 + 8 * v48);
      uint64_t v54 = v52 + 8 * v51;
      if (v52)
      {
        uint64_t v55 = *v9;
        uint64_t *v9 = 0;
        *unsigned int v53 = v55;
      }
    }
    else
    {
      uint64_t v54 = 0;
      unsigned int v53 = (void *)(8 * v48);
    }
    char v11 = v53 + 1;
    int v56 = *(void **)(v18 + 24);
    unint64_t v57 = *(void *)(v18 + 32);
    if ((void *)v57 != v56)
    {
      unint64_t v58 = v57 - (void)v56 - 8;
      if (v58 > 0x47
        && ((unint64_t v59 = v58 >> 3, v57 - 8 * v59 - 8 >= (unint64_t)v53) || (unint64_t)&v53[-v59 - 1] >= v57))
      {
        unint64_t v65 = v59 + 1;
        uint64_t v66 = (v59 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        unsigned int v60 = (void *)(v57 - 8 * v66);
        uint64_t v67 = v53 - 2;
        float v68 = (long long *)(v57 - 32);
        uint64_t v69 = v66;
        do
        {
          long long v71 = *v68;
          long long v70 = v68[1];
          *float v68 = 0uLL;
          v68[1] = 0uLL;
          v68 -= 2;
          *(v67 - 1) = v71;
          *uint64_t v67 = v70;
          v67 -= 2;
          v69 -= 4;
        }
        while (v69);
        v53 -= v66;
        if (v65 == v66) {
          goto LABEL_107;
        }
      }
      else
      {
        unsigned int v60 = *(void **)(v18 + 32);
      }
      do
      {
        uint64_t v61 = *--v60;
        *unsigned int v60 = 0;
        *--unsigned int v53 = v61;
      }
      while (v60 != v56);
LABEL_107:
      unint64_t v57 = *(void *)(v18 + 24);
      uint64_t v62 = *(void **)(v18 + 32);
      *(void *)(v18 + 24) = v53;
      *(void *)(v18 + 32) = v11;
      uint64_t v63 = *(void *)(v18 + 40);
      *(void *)(v18 + 40) = v54;
      while (v62 != (void *)v57)
      {
        unint64_t v64 = *--v62;
        unint64_t v7 = v64;
        *uint64_t v62 = 0;
        if (v64)
        {
          (**(void (***)(unint64_t))v7)(v7);
          {
            operator new();
          }
          (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                     + 40))(mdm::Allocator::instance(void)::alloc, v7, 128);
        }
      }
      if (!v57) {
        goto LABEL_7;
      }
LABEL_117:
      (*(void (**)(void, unint64_t, unint64_t))(**(void **)(v18 + 48) + 40))(*(void *)(v18 + 48), v57, v63 - v57);
      goto LABEL_7;
    }
    *(void *)(v18 + 24) = v53;
    *(void *)(v18 + 32) = v11;
    uint64_t v63 = *(void *)(v18 + 40);
    *(void *)(v18 + 40) = v54;
    if (v57) {
      goto LABEL_117;
    }
LABEL_7:
    *(void *)(v18 + 32) = v11;
    if (++v9 == v10) {
      goto LABEL_5;
    }
  }
  BOOL v22 = (*((void *)&v78 + 1) & (*((void *)&v78 + 1) - 1)) != 0;
  if (*((void *)&v78 + 1) < 3uLL) {
    BOOL v22 = 1;
  }
  unint64_t v23 = v22 | (2 * *((void *)&v78 + 1));
  unint64_t v24 = vcvtps_u32_f32(v21 / v83);
  if (v23 <= v24) {
    size_t prime = v24;
  }
  else {
    size_t prime = v23;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
  }
  size_t v15 = *((void *)&v78 + 1);
  if (prime <= *((void *)&v78 + 1))
  {
    if (prime >= *((void *)&v78 + 1)) {
      goto LABEL_65;
    }
    unint64_t v36 = vcvtps_u32_f32((float)v82 / v83);
    if (*((void *)&v78 + 1) < 3uLL
      || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v78 + 8)), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
    {
      unint64_t v36 = std::__next_prime(v36);
    }
    else
    {
      uint64_t v38 = 1 << -(char)__clz(v36 - 1);
      if (v36 >= 2) {
        unint64_t v36 = v38;
      }
    }
    if (prime <= v36) {
      size_t prime = v36;
    }
    if (prime >= *((void *)&v78 + 1))
    {
      size_t v15 = *((void *)&v78 + 1);
LABEL_65:
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v15 <= v14) {
          unint64_t v7 = v14 % v15;
        }
        else {
          unint64_t v7 = v14;
        }
      }
      else
      {
        unint64_t v7 = (v15 - 1) & v14;
      }
      goto LABEL_78;
    }
    if (!prime)
    {
      uint64_t v72 = v78;
      *(void *)&long long v78 = 0;
      if (v72) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v79 + 40))(v79, v72, 8 * *((void *)&v78 + 1));
      }
      size_t v15 = 0;
      *((void *)&v78 + 1) = 0;
      goto LABEL_65;
    }
  }
  uint64_t v26 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(void *)v79 + 16))(v79, 8 * prime, 8);
  uint64_t v27 = v78;
  *(void *)&long long v78 = v26;
  if (v27) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v79 + 40))(v79, v27, 8 * *((void *)&v78 + 1));
  }
  uint64_t v28 = 0;
  *((void *)&v78 + 1) = prime;
  do
    *(void *)(v78 + 8 * v28++) = 0;
  while (prime != v28);
  uint64_t v29 = (void **)v80;
  if (!v80)
  {
LABEL_64:
    size_t v15 = prime;
    goto LABEL_65;
  }
  size_t v30 = *(void *)(v80 + 8);
  size_t v31 = prime - 1;
  if ((prime & (prime - 1)) == 0)
  {
    size_t v32 = v30 & v31;
    *(void *)(v78 + 8 * v32) = &v80;
    for (uint64_t i = *v29; *v29; uint64_t i = *v29)
    {
      size_t v34 = i[1] & v31;
      if (v34 == v32)
      {
        uint64_t v29 = (void **)i;
      }
      else if (*(void *)(v78 + 8 * v34))
      {
        void *v29 = (void *)*i;
        uint64_t v35 = 8 * v34;
        *uint64_t i = **(void **)(v78 + v35);
        **(void **)(v78 + v35) = i;
      }
      else
      {
        *(void *)(v78 + 8 * v34) = v29;
        uint64_t v29 = (void **)i;
        size_t v32 = v34;
      }
    }
    goto LABEL_64;
  }
  if (v30 >= prime) {
    v30 %= prime;
  }
  *(void *)(v78 + 8 * v30) = &v80;
  uint64_t v39 = *v29;
  if (!*v29) {
    goto LABEL_64;
  }
  while (1)
  {
    size_t v41 = v39[1];
    if (v41 >= prime) {
      v41 %= prime;
    }
    if (v41 != v30)
    {
      if (!*(void *)(v78 + 8 * v41))
      {
        *(void *)(v78 + 8 * v41) = v29;
        goto LABEL_69;
      }
      void *v29 = (void *)*v39;
      uint64_t v40 = 8 * v41;
      *uint64_t v39 = **(void **)(v78 + v40);
      **(void **)(v78 + v40) = v39;
      uint64_t v39 = v29;
    }
    size_t v41 = v30;
LABEL_69:
    uint64_t v29 = (void **)v39;
    uint64_t v39 = (void *)*v39;
    size_t v30 = v41;
    if (!v39) {
      goto LABEL_64;
    }
  }
}

void sub_1A2630A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,void **a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  MEMORY[0x1A6239270](v53, 0x1020C4007FF0C4BLL);
  if (v54) {
    operator delete(v54);
  }
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a39);
  int v56 = *a35;
  if (*a35)
  {
    *(void *)(a20 + 40) = v56;
    operator delete(v56);
  }
  unint64_t v57 = *a33;
  if (*a33)
  {
    *(void *)(a20 + 16) = v57;
    operator delete(v57);
    if (!a53) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!a53)
  {
    goto LABEL_8;
  }
  operator delete(a53);
  goto LABEL_8;
}

void md::RouteLineLayer::~RouteLineLayer(md::RouteLineLayer *this)
{
  md::RouteLineLayer::~RouteLineLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF5344C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF531038;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 32);
    if (!v4) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 32);
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_10:
  md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(this);
}

void *md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553B70;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[26];
  a1[26] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  unsigned int v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531038;
  uint64_t v2 = (std::__shared_weak_count *)a1[34];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[32];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[32];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531038;
  uint64_t v2 = (std::__shared_weak_count *)a1[34];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[32];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[32];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::~RibbonLayer(a1);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t v6 = (int8x16_t *)result;
LABEL_2:
  float v160 = &a2[-1].i64[1];
  uint64_t v7 = v6;
  while (1)
  {
    uint64_t v6 = v7;
    uint64_t v8 = (char *)a2 - (char *)v7;
    uint64_t v9 = ((char *)a2 - (char *)v7) >> 3;
    if (!(!v5 & v4))
    {
      switch(v9)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v65 = *v160;
          uint64_t v66 = v7->i64[0];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v7->i64[0]);
          if (result)
          {
            v7->i64[0] = v65;
            *float v160 = v66;
          }
          break;
        case 3:
          __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v160);
          break;
        case 4:
          uint64_t v67 = v7 + 1;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64);
          uint64_t v68 = *v160;
          uint64_t v69 = v7[1].i64[0];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v69);
          if (result)
          {
            v67->i64[0] = v68;
            *float v160 = v69;
            __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v67->i64[0] + 96), v7->i64[1]);
            if (result)
            {
              int8x16_t v70 = *(int8x16_t *)((char *)v7 + 8);
              *(int8x16_t *)((char *)v7 + 8) = vextq_s8(v70, v70, 8uLL);
              __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v70.i64[1] + 96), v7->i64[0]);
              if (result) {
                int8x16_t *v7 = vextq_s8(*v7, *v7, 8uLL);
              }
            }
          }
          break;
        case 5:
          __n128 result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64, &v7[1].i64[1], v160);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v8 <= 191)
    {
      long long v71 = (int8x16_t *)&v7->u64[1];
      BOOL v73 = v7 == a2 || v71 == a2;
      if (a4)
      {
        if (!v73)
        {
          char v74 = (uint64_t *)v7;
          do
          {
            float v76 = v71;
            uint64_t v77 = v74[1];
            __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v77 + 96), *v74);
            if (result)
            {
              long long v78 = (uint64_t *)v76;
              uint64_t v79 = 0;
              *long long v78 = 0;
              uint64_t v167 = v77;
              uint64_t v80 = *v74;
              uint64_t v163 = v78;
              for (uint64_t i = v78; ; v79 = *i)
              {
                *uint64_t i = v80;
                uint64_t i = v74;
                *char v74 = 0;
                if (v79)
                {
                  uint64_t v81 = *(void **)(v79 + 56);
                  if (v81)
                  {
                    unint64_t v82 = *(void **)(v79 + 64);
                    uint64_t v83 = *(void *)(v79 + 56);
                    if (v82 != v81)
                    {
                      do
                      {
                        float v85 = (void (***)(void, uint64_t))*--v82;
                        uint64_t v84 = v85;
                        void *v82 = 0;
                        if (v85)
                        {
                          (**v84)(v84, v83);
                          {
                            operator new();
                          }
                          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v84, 128);
                        }
                      }
                      while (v82 != v81);
                      uint64_t v83 = *(void *)(v79 + 56);
                    }
                    *(void *)(v79 + 64) = v81;
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v79 + 80) + 40))(*(void *)(v79 + 80), v83, *(void *)(v79 + 72) - v83);
                  }
                  MEMORY[0x1A6239270](v79, 0x1020C4010FC18DELL);
                }
                uint64_t v86 = v167;
                if (i == (uint64_t *)v6) {
                  break;
                }
                unint64_t v87 = *(unsigned int *)(v167 + 96);
                if ((v87 & 0xF000) != 0) {
                  uint64_t v88 = 3;
                }
                else {
                  uint64_t v88 = 0;
                }
                if ((v87 & 0xF00) != 0) {
                  uint64_t v88 = 2;
                }
                if ((v87 & 0xF0) != 0) {
                  uint64_t v88 = 1;
                }
                if ((v87 & 0xF) != 0) {
                  uint64_t v88 = 0;
                }
                int v89 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v88];
                int v90 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v87 >> 12];
                int v91 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v87 >> 8) & 0xF];
                int v92 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 >> 4];
                unsigned int v93 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 & 0xF];
                char v74 = i - 1;
                uint64_t v80 = *(i - 1);
                unint64_t v94 = *(unsigned int *)(v80 + 96);
                if ((v94 & 0xF000) != 0) {
                  uint64_t v95 = 3;
                }
                else {
                  uint64_t v95 = 0;
                }
                if ((v94 & 0xF00) != 0) {
                  uint64_t v95 = 2;
                }
                if ((v94 & 0xF0) != 0) {
                  uint64_t v95 = 1;
                }
                if ((v94 & 0xF) != 0) {
                  uint64_t v95 = 0;
                }
                if (((v90 << 12) | (v89 << 16) | (v91 << 8) | (16 * v92) | v93) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v94 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v95] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v94 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 & 0xF])) {
                  goto LABEL_128;
                }
              }
              uint64_t i = (uint64_t *)v6;
LABEL_128:
              uint64_t v167 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](i, v86);
              __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
              float v76 = (int8x16_t *)v163;
            }
            long long v71 = (int8x16_t *)&v76->u64[1];
            char v74 = (uint64_t *)v76;
          }
          while (&v76->u64[1] != (unint64_t *)a2);
        }
      }
      else if (!v73)
      {
        do
        {
          float64_t v138 = v71;
          uint64_t v139 = v6->i64[1];
          __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v139 + 96), v6->i64[0]);
          if (result)
          {
            unint64_t v140 = (uint64_t *)v138;
            uint64_t v141 = 0;
            uint64_t *v140 = 0;
            uint64_t v167 = v139;
            uint64_t v142 = v6->i64[0];
            double v164 = v140;
            for (uint64_t j = v140; ; v141 = *j)
            {
              *uint64_t j = v142;
              uint64_t j = (uint64_t *)v6;
              v6->i64[0] = 0;
              if (v141)
              {
                double v144 = *(void **)(v141 + 56);
                if (v144)
                {
                  float v145 = *(void **)(v141 + 64);
                  uint64_t v146 = *(void *)(v141 + 56);
                  if (v145 != v144)
                  {
                    do
                    {
                      double v148 = (void (***)(void, uint64_t))*--v145;
                      unint64_t v147 = v148;
                      *float v145 = 0;
                      if (v148)
                      {
                        (**v147)(v147, v146);
                        {
                          operator new();
                        }
                        (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v147, 128);
                      }
                    }
                    while (v145 != v144);
                    uint64_t v146 = *(void *)(v141 + 56);
                  }
                  *(void *)(v141 + 64) = v144;
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v141 + 80) + 40))(*(void *)(v141 + 80), v146, *(void *)(v141 + 72) - v146);
                }
                MEMORY[0x1A6239270](v141, 0x1020C4010FC18DELL);
              }
              uint64_t v149 = v167;
              unint64_t v150 = *(unsigned int *)(v167 + 96);
              if ((v150 & 0xF000) != 0) {
                uint64_t v151 = 3;
              }
              else {
                uint64_t v151 = 0;
              }
              if ((v150 & 0xF00) != 0) {
                uint64_t v151 = 2;
              }
              if ((v150 & 0xF0) != 0) {
                uint64_t v151 = 1;
              }
              if ((v150 & 0xF) != 0) {
                uint64_t v151 = 0;
              }
              int v152 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v151];
              int v153 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v150 >> 12];
              int v154 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v150 >> 8) & 0xF];
              int v155 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 >> 4];
              unsigned int v156 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 & 0xF];
              uint64_t v6 = (int8x16_t *)(j - 1);
              uint64_t v142 = *(j - 1);
              unint64_t v157 = *(unsigned int *)(v142 + 96);
              if ((v157 & 0xF000) != 0) {
                uint64_t v158 = 3;
              }
              else {
                uint64_t v158 = 0;
              }
              if ((v157 & 0xF00) != 0) {
                uint64_t v158 = 2;
              }
              if ((v157 & 0xF0) != 0) {
                uint64_t v158 = 1;
              }
              if ((v157 & 0xF) != 0) {
                uint64_t v158 = 0;
              }
              if (((v153 << 12) | (v152 << 16) | (v154 << 8) | (16 * v155) | v156) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v157 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v158] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v157 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 & 0xF])) {
                break;
              }
            }
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](j, v149);
            __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
            float64_t v138 = (int8x16_t *)v164;
          }
          long long v71 = (int8x16_t *)&v138->u64[1];
          uint64_t v6 = v138;
        }
        while (&v138->u64[1] != (unint64_t *)a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v10 = (unint64_t)v9 >> 1;
    char v11 = &v7->i64[(unint64_t)v9 >> 1];
    if ((unint64_t)v8 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11, v7->i64, v160);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, v11, v160);
      uint64_t v12 = v10;
      unsigned int v13 = &v7->i64[v10];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v7->i64[1], v13 - 1, a2[-1].i64);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7[1].i64, &v7->i64[v12 + 1], &a2[-2].i64[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v13 - 1, v11, &v7->i64[v12 + 1]);
      uint64_t v14 = v7->i64[0];
      v7->i64[0] = *v13;
      uint64_t *v13 = v14;
    }
    --a3;
    uint64_t v15 = v7->i64[0];
    if ((a4 & 1) != 0
      || md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v7[-1].i64[1] + 96), v7->i64[0]))
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      uint8x8_t v16 = v7;
      do
      {
        unsigned int v17 = v16;
        uint64_t v19 = v16->i64[1];
        uint8x8_t v16 = (int8x16_t *)((char *)v16 + 8);
        uint64_t v18 = v19;
      }
      while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v15));
      uint64_t v20 = (uint64_t *)a2;
      if (v17 == v6)
      {
        uint64_t v20 = (uint64_t *)a2;
        do
        {
          if (v16 >= (int8x16_t *)v20) {
            break;
          }
          uint64_t v22 = *--v20;
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v22 + 96), v15));
      }
      else
      {
        do
          uint64_t v21 = *--v20;
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v15));
      }
      if (v16 < (int8x16_t *)v20)
      {
        uint64_t v23 = *v20;
        unint64_t v24 = (uint64_t *)v16;
        float v25 = v20;
        do
        {
          *unint64_t v24 = v23;
          *float v25 = v18;
          uint64_t v15 = v167;
          unint64_t v26 = *(unsigned int *)(v167 + 96);
          int v27 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v26 >> 8) & 0xF];
          int v28 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v26 >> 12] << 12;
          int v29 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 >> 4];
          int v30 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 & 0xF];
          if ((v26 & 0xF000) != 0) {
            uint64_t v31 = 3;
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v26 & 0xF00) != 0) {
            uint64_t v31 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v32 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v32 = v31;
          }
          unsigned int v33 = v28 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v32] << 16) | (v27 << 8) | (16 * v29) | v30;
          do
          {
            uint64_t v34 = v24[1];
            ++v24;
            uint64_t v18 = v34;
            unint64_t v35 = *(unsigned int *)(v34 + 96);
            if ((v35 & 0xF000) != 0) {
              uint64_t v36 = 3;
            }
            else {
              uint64_t v36 = 0;
            }
            if ((v35 & 0xF00) != 0) {
              uint64_t v36 = 2;
            }
            if ((v35 & 0xF0) != 0) {
              uint64_t v36 = 1;
            }
            if ((v35 & 0xF) != 0) {
              uint64_t v36 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v35 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v35 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 & 0xF]) < v33);
          unsigned int v17 = (int8x16_t *)(v24 - 1);
          do
          {
            uint64_t v37 = *--v25;
            uint64_t v23 = v37;
            unint64_t v38 = *(unsigned int *)(v37 + 96);
            if ((v38 & 0xF000) != 0) {
              uint64_t v39 = 3;
            }
            else {
              uint64_t v39 = 0;
            }
            if ((v38 & 0xF00) != 0) {
              uint64_t v39 = 2;
            }
            if ((v38 & 0xF0) != 0) {
              uint64_t v39 = 1;
            }
            if ((v38 & 0xF) != 0) {
              uint64_t v39 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v38 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v39] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v38 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 & 0xF]) >= v33);
        }
        while (v24 < v25);
      }
      if (v17 != v6)
      {
        uint64_t v40 = v17->i64[0];
        v17->i64[0] = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v40);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v17->i64, v15);
      std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      if (v16 < (int8x16_t *)v20) {
        goto LABEL_58;
      }
      char v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6, v17);
      uint64_t v7 = (int8x16_t *)&v17->u64[1];
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v17->u64[1], a2);
      if (result)
      {
        a2 = v17;
        if (v41) {
          return result;
        }
        goto LABEL_2;
      }
      if ((v41 & 1) == 0)
      {
LABEL_58:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v6, v17, a3, a4 & 1);
        a4 = 0;
        uint64_t v7 = (int8x16_t *)&v17->u64[1];
      }
    }
    else
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      unint64_t v42 = *(unsigned int *)(v15 + 96);
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, *v160))
      {
        do
        {
          uint64_t v43 = v7->i64[1];
          uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v43));
      }
      else
      {
        uint64_t v44 = (int8x16_t *)&v7->u64[1];
        do
        {
          uint64_t v7 = v44;
          if (v44 >= a2) {
            break;
          }
          uint64_t v44 = (int8x16_t *)((char *)v44 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v7->i64[0]));
      }
      unint64_t v45 = a2;
      if (v7 < a2)
      {
        unint64_t v45 = a2;
        do
        {
          uint64_t v46 = v45[-1].i64[1];
          unint64_t v45 = (int8x16_t *)((char *)v45 - 8);
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v46));
      }
      if (v7 < v45)
      {
        uint64_t v47 = v7->i64[0];
        uint64_t v48 = v45->i64[0];
        do
        {
          v7->i64[0] = v48;
          v45->i64[0] = v47;
          uint64_t v15 = v167;
          unint64_t v49 = *(unsigned int *)(v167 + 96);
          int v50 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v49 >> 8) & 0xF];
          int v51 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 >> 4];
          int v52 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 & 0xF];
          int v53 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v49 >> 12] << 12;
          if ((v49 & 0xF000) != 0) {
            uint64_t v54 = 3;
          }
          else {
            uint64_t v54 = 0;
          }
          if ((v49 & 0xF00) != 0) {
            uint64_t v54 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v55 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v55 = v54;
          }
          unsigned int v56 = v53 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v55] << 16) | (v50 << 8) | (16 * v51) | v52;
          do
          {
            uint64_t v57 = v7->i64[1];
            uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
            uint64_t v47 = v57;
            unint64_t v58 = *(unsigned int *)(v57 + 96);
            if ((v58 & 0xF000) != 0) {
              uint64_t v59 = 3;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((v58 & 0xF00) != 0) {
              uint64_t v59 = 2;
            }
            if ((v58 & 0xF0) != 0) {
              uint64_t v59 = 1;
            }
            if ((v58 & 0xF) != 0) {
              uint64_t v59 = 0;
            }
          }
          while (v56 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v58 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v59] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v58 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 & 0xF]));
          do
          {
            uint64_t v60 = v45[-1].i64[1];
            unint64_t v45 = (int8x16_t *)((char *)v45 - 8);
            uint64_t v48 = v60;
            unint64_t v61 = *(unsigned int *)(v60 + 96);
            if ((v61 & 0xF000) != 0) {
              uint64_t v62 = 3;
            }
            else {
              uint64_t v62 = 0;
            }
            if ((v61 & 0xF00) != 0) {
              uint64_t v62 = 2;
            }
            if ((v61 & 0xF0) != 0) {
              uint64_t v62 = 1;
            }
            if ((v61 & 0xF) != 0) {
              uint64_t v62 = 0;
            }
          }
          while (v56 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v61 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v62] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v61 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 & 0xF]));
        }
        while (v7 < v45);
      }
      uint64_t v63 = &v7[-1].i64[1];
      if (&v7[-1].u64[1] != (unint64_t *)v6)
      {
        uint64_t v64 = *v63;
        *uint64_t v63 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v64);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v7[-1].i64[1], v15);
      __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      a4 = 0;
    }
  }
  if (v7 != a2)
  {
    unint64_t v161 = (char *)a2 - (char *)v7;
    int64_t v96 = (unint64_t)(v9 - 2) >> 1;
    int64_t v97 = v96;
    do
    {
      int64_t v98 = v97;
      if (v96 >= v97)
      {
        uint64_t v99 = (2 * v97) | 1;
        float v100 = &v6->i64[v99];
        if (2 * v97 + 2 < v9)
        {
          uint64_t v101 = *v100;
          uint64_t v102 = v100[1];
          BOOL v103 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v102);
          if (v103) {
            uint64_t v104 = v102;
          }
          else {
            uint64_t v104 = v101;
          }
          if (v103)
          {
            ++v100;
            uint64_t v99 = 2 * v98 + 2;
          }
        }
        else
        {
          uint64_t v104 = *v100;
        }
        char v105 = &v6->i64[v98];
        uint64_t v106 = *v105;
        __n128 result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v104 + 96), *v105);
        if ((result & 1) == 0)
        {
          *char v105 = 0;
          uint64_t v167 = v106;
          uint64_t v107 = *v100;
          while (1)
          {
            int v111 = v100;
            *float v100 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v105, v107);
            if (v96 < v99) {
              break;
            }
            uint64_t v112 = (2 * v99) | 1;
            float v100 = &v6->i64[v112];
            uint64_t v113 = 2 * v99 + 2;
            if (v113 < v9)
            {
              uint64_t v108 = *v100;
              uint64_t v107 = v100[1];
              BOOL v109 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v107);
              if (v109) {
                ++v100;
              }
              else {
                uint64_t v107 = v108;
              }
              if (v109) {
                uint64_t v99 = v113;
              }
              else {
                uint64_t v99 = v112;
              }
            }
            else
            {
              uint64_t v107 = *v100;
              uint64_t v99 = (2 * v99) | 1;
            }
            uint64_t v110 = v167;
            char v105 = v111;
            if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v107 + 96), v167))
            {
              goto LABEL_168;
            }
          }
          uint64_t v110 = v167;
LABEL_168:
          uint64_t v167 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v111, v110);
          __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
        }
      }
      int64_t v97 = v98 - 1;
    }
    while (v98);
    uint64_t v114 = v161 >> 3;
    while (2)
    {
      if (v114 >= 2)
      {
        uint64_t v118 = 0;
        uint64_t v119 = v6->i64[0];
        v6->i64[0] = 0;
        uint64_t v166 = v119;
        uint64_t v120 = (uint64_t *)v6;
        do
        {
          uint64_t v125 = &v120[v118 + 1];
          uint64_t v126 = (2 * v118) | 1;
          uint64_t v127 = 2 * v118 + 2;
          if (v127 < v114)
          {
            uint64_t v121 = *v125;
            uint64_t v122 = v120[v118 + 2];
            BOOL v123 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v125 + 96), v125[1]);
            if (v123) {
              uint64_t v124 = v122;
            }
            else {
              uint64_t v124 = v121;
            }
            if (v123)
            {
              ++v125;
              uint64_t v118 = v127;
            }
            else
            {
              uint64_t v118 = v126;
            }
          }
          else
          {
            uint64_t v124 = *v125;
            uint64_t v118 = (2 * v118) | 1;
          }
          *uint64_t v125 = 0;
          std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v120, v124);
          uint64_t v120 = v125;
        }
        while (v118 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
        uint64_t v128 = &a2[-1].i64[1];
        if (v125 == (uint64_t *)&a2[-1].u64[1])
        {
          uint64_t v115 = v166;
          uint64_t v166 = 0;
          int v116 = v125;
          goto LABEL_193;
        }
        uint64_t v129 = *v128;
        *uint64_t v128 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v125, v129);
        uint64_t v130 = v166;
        uint64_t v166 = 0;
        std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v128, v130);
        uint64_t v131 = (char *)v125 - (char *)v6 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (unint64_t)((v131 >> 3) - 2) >> 1;
          uint64_t v133 = &v6->i64[v132];
          uint64_t v134 = *v125;
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), *v125))
          {
            *uint64_t v125 = 0;
            uint64_t v167 = v134;
            uint64_t v135 = *v133;
            do
            {
              unint64_t v136 = v133;
              *uint64_t v133 = 0;
              std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v125, v135);
              uint64_t v137 = v167;
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              uint64_t v133 = &v6->i64[v132];
              uint64_t v135 = *v133;
              uint64_t v125 = v136;
            }
            while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), v167));
            uint64_t v167 = 0;
            std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v136, v137);
            int v116 = &v167;
            uint64_t v115 = 0;
LABEL_193:
            std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v116, v115);
          }
        }
        __n128 result = (uint64_t)std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v166, 0);
      }
      a2 = (int8x16_t *)((char *)a2 - 8);
      if ((unint64_t)v114-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::batch(std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteLineRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  BOOL v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2[-1].i64[1];
      uint64_t v6 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v5 + 96), a1->i64[0]))
      {
        a1->i64[0] = v5;
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return v4;
    case 4:
      uint8x8_t v16 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v17 = a2[-1].i64[1];
      uint64_t v18 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v18))
      {
        v16->i64[0] = v17;
        a2[-1].i64[1] = v18;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v16->i64[0] + 96), a1->i64[1]))
        {
          int8x16_t v19 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v19, v19, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return v4;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v8 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v8;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v8 + 96), *i64))
    {
      break;
    }
LABEL_6:
    i64 = v8;
    v9 += 8;
    if (++v8 == (uint64_t *)a2) {
      return 1;
    }
  }
  uint64_t *v8 = 0;
  uint64_t v21 = v11;
  uint64_t v12 = *i64;
  uint64_t v13 = v9;
  while (1)
  {
    *(uint64_t *)((char *)a1[1].i64 + v13) = 0;
    std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100]((uint64_t *)((char *)&a1[1].i64[1] + v13), v12);
    uint64_t v14 = v21;
    if (v13 == -16) {
      break;
    }
    uint64_t v12 = *(uint64_t *)((char *)&a1->i64[1] + v13);
    v13 -= 8;
    if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v12))
    {
      uint64_t v15 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
      goto LABEL_13;
    }
  }
  uint64_t v15 = (uint64_t *)a1;
LABEL_13:
  uint64_t v21 = 0;
  std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](v15, v14);
  if (++v10 != 8)
  {
    std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
    goto LABEL_6;
  }
  BOOL v4 = v8 + 1 == (uint64_t *)a2;
  std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
  return v4;
}

uint64_t ggl::FragmentedPool<ggl::DaVinci::ElevatedStrokeColorPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::DaVinci::ElevatedFillColorPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci42ElevatedFillColorWithDistancePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57C438;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci42ElevatedFillColorWithDistancePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5874F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5874F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3>,ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup * ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF5783C0;
  return result;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_3>,ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci30ElevatedFillColorPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57C3A8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci30ElevatedFillColorPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::ElevatedFillColorPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::ElevatedFillColorPipelineSetup * ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF578378;
  return result;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::ElevatedFillColorPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci44ElevatedStrokeColorWithDistancePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57C480;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci44ElevatedStrokeColorWithDistancePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5873D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5873D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup * ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF578330;
  return result;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci32ElevatedStrokeColorPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EF57C3F0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci32ElevatedStrokeColorPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::ElevatedStrokeColorPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::ElevatedStrokeColorPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5782E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::ElevatedPolygonRenderResources::ElevatedPolygonRenderResources(ggl::StandardLibrary const&,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::ElevatedStrokeColorPipelineSetup * ()(void)>::~__func()
{
}

void md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5752D0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__1NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5752D0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__1NS_9allocatorISH_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575288;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__0NS_9allocatorISH_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF575288;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md20SharedResourcesLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_22SharedResourcesContextEE3__0NS_9allocatorISH_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::SharedResourcesLogic,md::SharedResourcesContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xA60DDA5A69582425 && *(void *)(a3 + 32)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 160))(result, a2, v4);
  }
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t gdc::ObjectHolder<md::SharedResourcesContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::SharedResourcesContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555A00;
  uint64_t v1 = (id *)a1[4];
  if (v1)
  {

    MEMORY[0x1A6239270](v1, 0x80C40B8603338);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::SharedResourcesContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555A00;
  uint64_t v2 = (id *)a1[4];
  if (v2)
  {

    MEMORY[0x1A6239270](v2, 0x80C40B8603338);
  }
  return a1;
}

void md::SharedResourcesLogic::~SharedResourcesLogic(md::SharedResourcesLogic *this)
{
  *(void *)this = &unk_1EF53ECB0;
  *((void *)this + 15) = &unk_1EF559798;

  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF53ECB0;
  *((void *)this + 15) = &unk_1EF559798;

  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

uint64_t karo::Loader::uninitialize(karo::Loader *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

uint64_t karo::Loader::initialize(karo::Loader *this)
{
  return 1;
}

uint64_t karo::Loader::remove(uint64_t this, karo::Item *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = this;
    pthread_mutex_lock(*(pthread_mutex_t **)(this + 88));
    uint64_t v5 = *(karo::Item ***)(v3 + 8);
    uint64_t v4 = *(karo::Item ***)(v3 + 16);
    if (v5 != v4)
    {
      while (*v5 != a2)
      {
        if (++v5 == v4)
        {
          uint64_t v5 = *(karo::Item ***)(v3 + 16);
          break;
        }
      }
    }
    if (v5 == v4)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v13 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = (void *)((char *)a2 + 8);
        if (*((char *)a2 + 31) < 0) {
          uint64_t v14 = (void *)*v14;
        }
        int v15 = 136315138;
        uint8x8_t v16 = v14;
        _os_log_impl(&dword_1A1780000, v13, OS_LOG_TYPE_DEBUG, "This item is not added to loader %s", (uint8_t *)&v15, 0xCu);
      }
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      uint64_t v6 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        char v7 = (void *)((char *)a2 + 8);
        if (*((char *)a2 + 31) < 0) {
          char v7 = (void *)*v7;
        }
        int v15 = 136315138;
        uint8x8_t v16 = v7;
        _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_DEBUG, "Removing item: %s", (uint8_t *)&v15, 0xCu);
      }

      uint64_t v8 = *(karo::Item ***)(v3 + 16);
      int64_t v9 = (char *)v8 - (char *)(v5 + 1);
      if (v8 != v5 + 1) {
        memmove(v5, v5 + 1, (char *)v8 - (char *)(v5 + 1));
      }
      *(void *)(v3 + 16) = (char *)v5 + v9;
      uint64_t v11 = *(karo::Item ***)(v3 + 32);
      int v10 = *(karo::Item ***)(v3 + 40);
      if (v11 != v10)
      {
        while (*v11 != a2)
        {
          if (++v11 == v10)
          {
            uint64_t v11 = *(karo::Item ***)(v3 + 40);
            break;
          }
        }
      }
      if (v11 != v10)
      {
        int64_t v12 = (char *)v10 - (char *)(v11 + 1);
        if (v10 != v11 + 1) {
          memmove(v11, v11 + 1, (char *)v10 - (char *)(v11 + 1));
        }
        *(void *)(v3 + 40) = (char *)v11 + v12;
      }
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 88));
  }
  return this;
}

uint64_t karo::Loader::insert(pthread_mutex_t **this, karo::Item *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(this[11]);
  uint64_t v4 = (karo::Item **)this[1];
  uint64_t v5 = (karo::Item **)this[2];
  uint64_t v6 = v5;
  char v7 = v4;
  if (v4 != v5)
  {
    while (*v7 != a2)
    {
      if (++v7 == v5)
      {
        char v7 = (karo::Item **)this[2];
        break;
      }
    }
  }
  if (v7 == v5)
  {
    int v10 = this[3];
    if (v5 >= (karo::Item **)v10)
    {
      int64_t v12 = (char *)v5 - (char *)v4;
      uint64_t v13 = v5 - v4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        abort();
      }
      uint64_t v15 = (char *)v10 - (char *)v4;
      if (v15 >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v17 = operator new(8 * v16);
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v18 = (pthread_mutex_t *)&v17[8 * v13];
      int8x16_t v19 = (pthread_mutex_t *)&v17[8 * v16];
      v18->__sig = (uint64_t)a2;
      opaque = (pthread_mutex_t *)v18->__opaque;
      if (v4 != v5)
      {
        if ((unint64_t)(v12 - 8) < 0x58) {
          goto LABEL_41;
        }
        if ((unint64_t)((char *)v4 - v17) < 0x20) {
          goto LABEL_41;
        }
        unint64_t v20 = ((unint64_t)(v12 - 8) >> 3) + 1;
        uint64_t v6 = &v5[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v21 = &v17[8 * v13 - 16];
        uint64_t v22 = v5 - 2;
        uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *uint64_t v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        uint64_t v18 = (pthread_mutex_t *)((char *)v18 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_41:
          do
          {
            uint64_t v25 = (uint64_t)*--v6;
            *(void *)&v18[-1].__opaque[48] = v25;
            uint64_t v18 = (pthread_mutex_t *)((char *)v18 - 8);
          }
          while (v6 != v4);
          uint64_t v4 = (karo::Item **)this[1];
        }
      }
      this[1] = v18;
      this[2] = opaque;
      this[3] = v19;
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      void *v5 = a2;
      opaque = (pthread_mutex_t *)(v5 + 1);
    }
    this[2] = opaque;
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v8 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int64_t v9 = (void *)((char *)a2 + 8);
      if (*((char *)a2 + 31) < 0) {
        int64_t v9 = (void *)*v9;
      }
      int v27 = 136315138;
      int v28 = v9;
      _os_log_impl(&dword_1A1780000, v8, OS_LOG_TYPE_INFO, "This item already exist in mItems, skipping insert: %s", (uint8_t *)&v27, 0xCu);
    }
  }
  return pthread_mutex_unlock(this[11]);
}

void sub_1A263477C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 88));
  _Unwind_Resume(a1);
}

uint64_t karo::Loader::unmanage(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  uint64_t v5 = *(char **)(a1 + 32);
  uint64_t v4 = *(char **)(a1 + 40);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 40);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 40) = &v5[v6];
  }
  char v7 = *(pthread_mutex_t **)(a1 + 88);
  return pthread_mutex_unlock(v7);
}

uint64_t karo::Loader::manage(pthread_mutex_t **this, karo::Item *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(this[11]);
  uint64_t v4 = (karo::Item **)this[4];
  uint64_t v5 = (karo::Item **)this[5];
  int64_t v6 = v5;
  char v7 = v4;
  if (v4 != v5)
  {
    while (*v7 != a2)
    {
      if (++v7 == v5)
      {
        char v7 = (karo::Item **)this[5];
        break;
      }
    }
  }
  if (v7 == v5)
  {
    int v10 = this[6];
    if (v5 >= (karo::Item **)v10)
    {
      int64_t v12 = (char *)v5 - (char *)v4;
      uint64_t v13 = v5 - v4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        abort();
      }
      uint64_t v15 = (char *)v10 - (char *)v4;
      if (v15 >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v17 = operator new(8 * v16);
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v18 = (pthread_mutex_t *)&v17[8 * v13];
      int8x16_t v19 = (pthread_mutex_t *)&v17[8 * v16];
      v18->__sig = (uint64_t)a2;
      opaque = (pthread_mutex_t *)v18->__opaque;
      if (v4 != v5)
      {
        if ((unint64_t)(v12 - 8) < 0x58) {
          goto LABEL_41;
        }
        if ((unint64_t)((char *)v4 - v17) < 0x20) {
          goto LABEL_41;
        }
        unint64_t v20 = ((unint64_t)(v12 - 8) >> 3) + 1;
        int64_t v6 = &v5[-(v20 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v21 = &v17[8 * v13 - 16];
        uint64_t v22 = v5 - 2;
        uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *uint64_t v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        uint64_t v18 = (pthread_mutex_t *)((char *)v18 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_41:
          do
          {
            uint64_t v25 = (uint64_t)*--v6;
            *(void *)&v18[-1].__opaque[48] = v25;
            uint64_t v18 = (pthread_mutex_t *)((char *)v18 - 8);
          }
          while (v6 != v4);
          uint64_t v4 = (karo::Item **)this[4];
        }
      }
      this[4] = v18;
      this[5] = opaque;
      this[6] = v19;
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      char *v5 = a2;
      opaque = (pthread_mutex_t *)(v5 + 1);
    }
    this[5] = opaque;
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v8 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int64_t v9 = (void *)((char *)a2 + 8);
      if (*((char *)a2 + 31) < 0) {
        int64_t v9 = (void *)*v9;
      }
      int v27 = 136315138;
      int v28 = v9;
      _os_log_impl(&dword_1A1780000, v8, OS_LOG_TYPE_INFO, "This item is already managed, skipping add: %s", (uint8_t *)&v27, 0xCu);
    }
  }
  return pthread_mutex_unlock(this[11]);
}

void sub_1A2634A94(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 88));
  _Unwind_Resume(a1);
}

void *karo::Loader::unloadScene(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (this[5] - this[4]) >> 3;
  uint64_t v3 = (v2 - 1);
  if ((int)v2 - 1 >= 0)
  {
    do
    {
      uint64_t v6 = *(void *)(v1[4] + 8 * v3);
      this = (void *)(*(uint64_t (**)(void *, uint64_t))(*v1 + 48))(v1, v6);
      if (v6) {
        this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    while (v3-- > 0);
  }
  if ((int)(((v1[2] - v1[1]) >> 3) - 1) >= 0)
  {
    uint64_t v4 = 8 * (((v1[2] - v1[1]) >> 3) - 1);
    do
    {
      this = (void *)(*(uint64_t (**)(void *, void))(*v1 + 48))(v1, *(void *)(v1[1] + v4));
      v4 -= 8;
    }
    while (v4 != -8);
  }
  return this;
}

void karo::Loader::~Loader(karo::Loader *this)
{
  karo::Loader::~Loader(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *(void *)this = &unk_1EF5680C8;
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = (unint64_t)(*((void *)this + 5) - v2) >> 3;
  uint64_t v4 = (v3 - 1);
  if ((int)v3 - 1 >= 0)
  {
    do
    {
      uint64_t v6 = *(void *)(*((void *)this + 4) + 8 * v4);
      if (v6)
      {
        (*(void (**)(karo::Loader *, uint64_t))(*(void *)this + 48))(this, v6);
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    while (v4-- > 0);
    uint64_t v2 = *((void *)this + 4);
  }
  *((void *)this + 5) = v2;
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 11));
  char v7 = *((void *)this + 11);
  if (v7) {
    MEMORY[0x1A6239270](v7, 0x1000C40FA0F61DDLL);
  }
  *((void *)this + 11) = 0;
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(*((char **)this + 8));
  uint64_t v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 5) = v8;
    operator delete(v8);
  }
  int64_t v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    *((void *)this + 2) = v9;
    operator delete(v9);
  }
}

void sub_1A2634D10(_Unwind_Exception *a1)
{
  karo::Mutex::~Mutex((pthread_mutex_t **)(v1 + 88));
  std::__tree<std::__value_type<std::string,std::vector<unsigned char>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned char>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned char>>>>::destroy(*(char **)(v1 + 64));
  uint64_t v3 = *(void **)(v1 + 32);
  if (v3)
  {
    *(void *)(v1 + 40) = v3;
    operator delete(v3);
    uint64_t v4 = *(void **)(v1 + 8);
    if (!v4) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v4 = *(void **)(v1 + 8);
    if (!v4) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v4;
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t karo::Loader::getMemFile(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  p_p = &__p;
  karo::util::Path::purify(&__p, a2);
  uint64_t v8 = *(uint64_t **)(a1 + 64);
  uint64_t v6 = (uint64_t *)(a1 + 64);
  char v7 = v8;
  char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (!v8) {
    goto LABEL_36;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v11 = v6;
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      uint64_t v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      std::string::size_type v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = size >= v14 ? v14 : size;
      int v16 = memcmp(v13, p_p, v15);
      if (v16) {
        break;
      }
      if (v14 >= size) {
        goto LABEL_20;
      }
LABEL_6:
      char v7 = (uint64_t *)v7[1];
      if (!v7) {
        goto LABEL_21;
      }
    }
    if (v16 < 0) {
      goto LABEL_6;
    }
LABEL_20:
    uint64_t v11 = v7;
    char v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_21:
  if (v11 == v6) {
    goto LABEL_36;
  }
  int v17 = *((char *)v11 + 55);
  if (v17 >= 0) {
    uint64_t v18 = v11 + 4;
  }
  else {
    uint64_t v18 = (const void *)v11[4];
  }
  if (v17 >= 0) {
    size_t v19 = *((unsigned __int8 *)v11 + 55);
  }
  else {
    size_t v19 = v11[5];
  }
  if (v19 >= size) {
    size_t v20 = size;
  }
  else {
    size_t v20 = v19;
  }
  int v21 = memcmp(p_p, v18, v20);
  if (v21)
  {
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_33;
    }
LABEL_36:
    uint64_t v22 = 0;
    if (v9 < 0) {
LABEL_37:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (size < v19) {
      goto LABEL_36;
    }
LABEL_33:
    uint64_t v22 = v11[7];
    *a3 = *((_DWORD *)v11 + 16) - v22;
    if (v9 < 0) {
      goto LABEL_37;
    }
  }
  return v22;
}

void md::TrafficTileData::~TrafficTileData(md::TrafficTileData *this)
{
  md::TrafficTileData::~TrafficTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EF535750;
  *((void *)this + 79) = &unk_1EF535790;
  uint64_t v2 = *((void *)this + 94);
  if (v2)
  {
    *((void *)this + 95) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 97) + 40))(*((void *)this + 97), v2, *((void *)this + 96) - v2);
  }
  uint64_t v3 = *((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  md::MapTileData::~MapTileData(this);
}

void *md::TrafficTileData::TrafficTileData(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  v18[0] = 0;
  v18[1] = 0;
  int v12 = (gss::Allocator *)md::MapTileData::MapTileData((uint64_t)a1, a2, a7, v18, 1);
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  *(void *)int v12 = &unk_1EF535750;
  *((void *)v12 + 79) = &unk_1EF535790;
  *((void *)v12 + 90) = v14;
  *((void *)v12 + 91) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a4;
  *a4 = 0;
  a1[92] = v15;
  uint64_t v16 = *a5;
  *a5 = 0;
  a1[93] = v16;
  a1[94] = 0;
  a1[96] = 0;
  a1[95] = 0;
  a1[97] = gss::Allocator::instance(v12);
  if (a1 + 94 != (void *)a6) {
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(a1 + 94, *(void *)a6, *(void **)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3);
  }
  return a1;
}

void sub_1A263513C(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 760) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 776) + 40))(*(void *)(v1 + 776), v4, *(void *)(v1 + 768) - v4);
  }
  uint64_t v5 = *(void *)(v1 + 744);
  *(void *)(v1 + 744) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(v1 + 736);
  *(void *)(v1 + 736) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  char v7 = *(std::__shared_weak_count **)(v1 + 728);
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  md::MapTileData::~MapTileData((md::MapTileData *)v1);
  _Unwind_Resume(a1);
}

uint64_t md::NavRoadSign::type(md::NavRoadSign *this)
{
  return 0;
}

void md::NavRoadSign::~NavRoadSign(md::NavRoadSign *this)
{
  md::NavLabel::~NavLabel(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::NavRoadSign::NavRoadSign(uint64_t a1, void *a2, uint64_t *a3, void *a4, double a5, double a6, double a7)
{
  id v13 = a2;
  uint64_t v14 = a4;
  uint64_t v15 = *a3;
  uint64_t v16 = (std::__shared_weak_count *)a3[1];
  v28[0] = v15;
  v28[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::NavLabel::NavLabel(a1, v13, v28, a5, a6, a7);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(void *)a1 = &unk_1EF530C10;
  -[VKRoadSignArtwork offsetPixelForPixel:](v14, "offsetPixelForPixel:", 0.0, 0.0);
  *(_DWORD *)(a1 + 256) = v17;
  *(_DWORD *)(a1 + 260) = v18;
  size_t v19 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v19->__shared_owners_ = 0;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5804F0;
  unint64_t v26 = md::RoadSignLabelIcon::RoadSignLabelIcon((md::RoadSignLabelIcon *)&v19[1], v14);
  int v27 = v19;
  {
    operator new();
  }
  size_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 848, 8);
  md::IconLabelPart::IconLabelPart((uint64_t)v20, &v26);
  *(unsigned char *)(v21 + 766) = 9;
  *(unsigned char *)(v21 + 768) = 0;
  *(_OWORD *)(v21 + 816) = 0u;
  *(_OWORD *)(v21 + 832) = 0u;
  *(_OWORD *)(v21 + 776) = 0u;
  *(_OWORD *)(v21 + 792) = 0u;
  *(unsigned char *)(v21 + 808) = 0;
  *(unsigned char *)(v21 + 557) = 3;
  *(unsigned char *)(v21 + 656) = 3;
  *(unsigned char *)(v21 + 664) = 0;
  uint64_t v22 = (void (**)(void *, uint64_t))&unk_1EF53DFB8;
  *(void *)uint64_t v21 = &unk_1EF53DFB8;
  uint64_t v23 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = v20;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    uint64_t v22 = (void (**)(void *, uint64_t))*v20;
  }
  v22[3](v20, a1 + 176);
  long long v24 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }

  return a1;
}

void sub_1A263556C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count::~__shared_weak_count(v13);
  operator delete(v15);
  md::NavLabel::~NavLabel(v12);

  _Unwind_Resume(a1);
}

uint64_t md::NavCurrentRoadSign::type(md::NavCurrentRoadSign *this)
{
  return 0;
}

void md::NavCurrentRoadSign::~NavCurrentRoadSign(md::NavCurrentRoadSign *this)
{
  md::NavLabel::~NavLabel(this);
  JUMPOUT(0x1A6239270);
}

void md::NavRouteEtaLabelPart::debugString(char *a1@<X8>)
{
  a1[23] = 20;
  strcpy(a1, "NavRouteEtaLabelPart");
}

void md::NavRouteEtaLabelPart::~NavRouteEtaLabelPart(md::NavRouteEtaLabelPart *this)
{
  *(void *)this = &unk_1EF531878;
  uint64_t v2 = *((void *)this + 102);
  *((void *)this + 102) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40AE2C30F4);
  }
  uint64_t v3 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x1000C40AE2C30F4);
  }
  md::IconLabelPart::~IconLabelPart(this);
  uint64_t v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v4 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v6) {
      operator new();
    }
  }
  uint64_t v5 = *(void (**)(void))(**((void **)v4 + 91) + 40);
  v5();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF531878;
  uint64_t v2 = *((void *)this + 102);
  *((void *)this + 102) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40AE2C30F4);
  }
  uint64_t v3 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x1000C40AE2C30F4);
  }
  md::IconLabelPart::~IconLabelPart(this);
}

uint64_t md::NavRouteEta::type(md::NavRouteEta *this)
{
  return 6;
}

void md::NavRouteEta::~NavRouteEta(md::NavRouteEta *this)
{
  md::NavLabel::~NavLabel(this);
  JUMPOUT(0x1A6239270);
}

void md::ARWalkingMapEngineMode::willBecomeInactive(int a1, md::MapEngine *this)
{
  md::MapEngine::setDisplayRate((uint64_t)this, -1);
  uint64_t v3 = (int8x8_t *)*((void *)this + 140);
  int8x8_t v4 = v3[2];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0xF4B920F5F640B882 % *(void *)&v4;
    if (*(void *)&v4 > 0xF4B920F5F640B882) {
      unint64_t v6 = 0xF4B920F5F640B882;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0xF4B920F5F640B882;
  }
  int8x8_t v7 = v3[1];
  uint64_t v8 = *(void **)(*(void *)&v7 + 8 * v6);
  if (!v8 || (char v9 = (void *)*v8) == 0)
  {
LABEL_20:
    int v12 = 0;
    if (v5.u32[0] >= 2uLL) {
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0xF4B920F5F640B882)
      {
        if (v9[2] == 0xF4B920F5F640B882) {
          goto LABEL_25;
        }
      }
      else if ((v11 & (*(void *)&v4 - 1)) != v6)
      {
        goto LABEL_20;
      }
      char v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_20;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0xF4B920F5F640B882) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_20;
    }
LABEL_10:
    char v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_20;
    }
  }
  if (v9[2] != 0xF4B920F5F640B882) {
    goto LABEL_10;
  }
LABEL_25:
  int v12 = (md::ARDebugScene **)v9[5];
  if (v5.u32[0] < 2uLL)
  {
LABEL_21:
    id v13 = *(void **)(*(void *)&v7 + 8 * ((*(void *)&v4 - 1) & 0x69AB09C896BF94A7));
    do
    {
      do
        id v13 = (void *)*v13;
      while (v13[1] != 0x69AB09C896BF94A7);
    }
    while (v13[2] != 0x69AB09C896BF94A7);
    goto LABEL_31;
  }
LABEL_26:
  unint64_t v14 = 0x69AB09C896BF94A7;
  if (*(void *)&v4 <= 0x69AB09C896BF94A7uLL) {
    unint64_t v14 = 0x69AB09C896BF94A7uLL % *(void *)&v4;
  }
  id v13 = *(void **)(*(void *)&v7 + 8 * v14);
  do
  {
    do
      id v13 = (void *)*v13;
    while (v13[1] != 0x69AB09C896BF94A7);
  }
  while (v13[2] != 0x69AB09C896BF94A7);
LABEL_31:
  uint64_t v15 = v13[5];
  *(void *)(v15 + 264) = 0;
  md::ARLogic::setARSession((id *)v15, 0);
  md::ARFeatureInjectionLogic::setARDebugScene(v12, 0);
  md::ARWalkingMapEngineMode::updateRegistries(this, 0, 0, v16);
}

void md::ARWalkingMapEngineMode::updateRegistries(md::ARWalkingMapEngineMode *this, md::MapEngine *a2, gdc::Registry *a3, gdc::Registry *a4)
{
  uint64_t v7 = *((void *)this + 140);
  unint64_t v8 = *(void *)(v7 + 16);
  if ((v8 & (v8 - 1)) != 0)
  {
    unint64_t v10 = 0x69AB09C896BF94A7;
    if (v8 <= 0x69AB09C896BF94A7) {
      unint64_t v10 = 0x69AB09C896BF94A7 % v8;
    }
    char v9 = *(void **)(*(void *)(v7 + 8) + 8 * v10);
    do
    {
      do
        char v9 = (void *)*v9;
      while (v9[1] != 0x69AB09C896BF94A7);
    }
    while (v9[2] != 0x69AB09C896BF94A7);
  }
  else
  {
    char v9 = *(void **)(*(void *)(v7 + 8) + 8 * ((v8 - 1) & 0x69AB09C896BF94A7));
    do
    {
      do
        char v9 = (void *)*v9;
      while (v9[1] != 0x69AB09C896BF94A7);
    }
    while (v9[2] != 0x69AB09C896BF94A7);
  }
  *(void *)(v9[5] + 248) = a2;
  uint64_t v11 = *((void *)this + 140);
  unint64_t v12 = *(void *)(v11 + 16);
  if ((v12 & (v12 - 1)) != 0)
  {
    unint64_t v14 = 0xFB5C21263048A572;
    if (v12 <= 0xFB5C21263048A572) {
      unint64_t v14 = 0xFB5C21263048A572 % v12;
    }
    id v13 = *(void **)(*(void *)(v11 + 8) + 8 * v14);
    do
    {
      do
        id v13 = (void *)*v13;
      while (v13[1] != 0xFB5C21263048A572);
    }
    while (v13[2] != 0xFB5C21263048A572);
  }
  else
  {
    id v13 = *(void **)(*(void *)(v11 + 8) + 8 * ((v12 - 1) & 0xFB5C21263048A572));
    do
    {
      do
        id v13 = (void *)*v13;
      while (v13[1] != 0xFB5C21263048A572);
    }
    while (v13[2] != 0xFB5C21263048A572);
  }
  *(void *)(v13[5] + 120) = a2;
  uint64_t v15 = (int8x8_t *)*((void *)this + 140);
  int8x8_t v16 = v15[2];
  if (!*(void *)&v16) {
    goto LABEL_41;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0xED12839080614CEDLL;
    if (*(void *)&v16 <= 0xED12839080614CEDLL) {
      unint64_t v18 = 0xED12839080614CEDLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0xED12839080614CEDLL;
  }
  size_t v19 = *(void **)(*(void *)&v15[1] + 8 * v18);
  if (!v19 || (size_t v20 = (void *)*v19) == 0)
  {
LABEL_41:
    uint64_t v23 = 0;
    goto LABEL_42;
  }
  if (v17.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0xED12839080614CEDLL)
      {
        if (v20[2] == 0xED12839080614CEDLL) {
          goto LABEL_257;
        }
      }
      else if ((v22 & (*(void *)&v16 - 1)) != v18)
      {
        goto LABEL_41;
      }
      size_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_41;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == 0xED12839080614CEDLL) {
      break;
    }
    if (v21 >= *(void *)&v16) {
      v21 %= *(void *)&v16;
    }
    if (v21 != v18) {
      goto LABEL_41;
    }
LABEL_31:
    size_t v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_41;
    }
  }
  if (v20[2] != 0xED12839080614CEDLL) {
    goto LABEL_31;
  }
LABEL_257:
  uint64_t v23 = v20[5];
LABEL_42:
  if (*(md::MapEngine **)(v23 + 120) != a2)
  {
    *(void *)(v23 + 120) = a2;
    uint64_t v15 = (int8x8_t *)*((void *)this + 140);
    int8x8_t v16 = v15[2];
  }
  if ((*(void *)&v16 & (*(void *)&v16 - 1)) != 0)
  {
    unint64_t v25 = 0x98D5C8EC32AB5D9ELL;
    if (*(void *)&v16 <= 0x98D5C8EC32AB5D9ELL) {
      unint64_t v25 = 0x98D5C8EC32AB5D9ELL % *(void *)&v16;
    }
    long long v24 = *(void **)(*(void *)&v15[1] + 8 * v25);
    do
    {
      do
        long long v24 = (void *)*v24;
      while (v24[1] != 0x98D5C8EC32AB5D9ELL);
    }
    while (v24[2] != 0x98D5C8EC32AB5D9ELL);
  }
  else
  {
    long long v24 = *(void **)(*(void *)&v15[1] + 8 * ((*(void *)&v16 - 1) & 0x98D5C8EC32AB5D9ELL));
    do
    {
      do
        long long v24 = (void *)*v24;
      while (v24[1] != 0x98D5C8EC32AB5D9ELL);
    }
    while (v24[2] != 0x98D5C8EC32AB5D9ELL);
  }
  *(void *)(v24[5] + 120) = a2;
  unint64_t v26 = (int8x8_t *)*((void *)this + 140);
  int8x8_t v27 = v26[2];
  if (!*(void *)&v27) {
    goto LABEL_74;
  }
  uint8x8_t v28 = (uint8x8_t)vcnt_s8(v27);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    uint64_t v29 = 0x20A1ED17D78F322BLL;
    if (*(void *)&v27 <= 0x20A1ED17D78F322BuLL) {
      uint64_t v29 = 0x20A1ED17D78F322BuLL % *(void *)&v27;
    }
  }
  else
  {
    uint64_t v29 = (*(void *)&v27 - 1) & 0x20A1ED17D78F322BLL;
  }
  int v30 = *(void **)(*(void *)&v26[1] + 8 * v29);
  if (!v30 || (uint64_t v31 = (void *)*v30) == 0)
  {
LABEL_74:
    uint64_t v35 = 0;
    goto LABEL_75;
  }
  if (v28.u32[0] < 2uLL)
  {
    uint64_t v32 = *(void *)&v27 - 1;
    while (1)
    {
      uint64_t v34 = v31[1];
      if (v34 == 0x20A1ED17D78F322BLL)
      {
        if (v31[2] == 0x20A1ED17D78F322BLL) {
          goto LABEL_258;
        }
      }
      else if ((v34 & v32) != v29)
      {
        goto LABEL_74;
      }
      uint64_t v31 = (void *)*v31;
      if (!v31) {
        goto LABEL_74;
      }
    }
  }
  while (2)
  {
    unint64_t v33 = v31[1];
    if (v33 != 0x20A1ED17D78F322BLL)
    {
      if (v33 >= *(void *)&v27) {
        v33 %= *(void *)&v27;
      }
      if (v33 != v29) {
        goto LABEL_74;
      }
      goto LABEL_64;
    }
    if (v31[2] != 0x20A1ED17D78F322BLL)
    {
LABEL_64:
      uint64_t v31 = (void *)*v31;
      if (!v31) {
        goto LABEL_74;
      }
      continue;
    }
    break;
  }
LABEL_258:
  uint64_t v35 = v31[5];
LABEL_75:
  md::LabelsLogic::setWorldType(v35, 3u);
  uint64_t v36 = *((void *)this + 140);
  unint64_t v37 = *(void *)(v36 + 16);
  if ((v37 & (v37 - 1)) != 0)
  {
    unint64_t v39 = 0x123A864D0AA1A5ADLL;
    if (v37 <= 0x123A864D0AA1A5ADLL) {
      unint64_t v39 = 0x123A864D0AA1A5ADLL % v37;
    }
    uint64_t i = *(void **)(*(void *)(v36 + 8) + 8 * v39);
    do
    {
      do
        uint64_t i = (void *)*i;
      while (i[1] != 0x123A864D0AA1A5ADLL);
    }
    while (i[2] != 0x123A864D0AA1A5ADLL);
  }
  else
  {
    for (uint64_t i = **(void ***)(*(void *)(v36 + 8) + 8 * ((v37 - 1) & 0x123A864D0AA1A5ADLL));
          i[1] != 0x123A864D0AA1A5ADLL || i[2] != 0x123A864D0AA1A5ADLL;
  }
  *(void *)(i[5] + 528) = a2;
  uint64_t v40 = *((void *)this + 140);
  unint64_t v41 = *(void *)(v40 + 16);
  if ((v41 & (v41 - 1)) != 0)
  {
    unint64_t v43 = 0x14AF6A5C51A03795;
    if (v41 <= 0x14AF6A5C51A03795) {
      unint64_t v43 = 0x14AF6A5C51A03795 % v41;
    }
    unint64_t v42 = *(void **)(*(void *)(v40 + 8) + 8 * v43);
    do
    {
      do
        unint64_t v42 = (void *)*v42;
      while (v42[1] != 0x14AF6A5C51A03795);
    }
    while (v42[2] != 0x14AF6A5C51A03795);
  }
  else
  {
    unint64_t v42 = *(void **)(*(void *)(v40 + 8) + 8 * ((v41 - 1) & 0x14AF6A5C51A03795));
    do
    {
      do
        unint64_t v42 = (void *)*v42;
      while (v42[1] != 0x14AF6A5C51A03795);
    }
    while (v42[2] != 0x14AF6A5C51A03795);
  }
  *(void *)(v42[5] + 120) = a2;
  uint64_t v44 = *((void *)this + 140);
  unint64_t v45 = *(void *)(v44 + 16);
  if ((v45 & (v45 - 1)) != 0)
  {
    unint64_t v47 = 0xB922E53C3328A050;
    if (v45 <= 0xB922E53C3328A050) {
      unint64_t v47 = 0xB922E53C3328A050 % v45;
    }
    uint64_t v46 = *(void **)(*(void *)(v44 + 8) + 8 * v47);
    do
    {
      do
        uint64_t v46 = (void *)*v46;
      while (v46[1] != 0xB922E53C3328A050);
    }
    while (v46[2] != 0xB922E53C3328A050);
  }
  else
  {
    uint64_t v46 = *(void **)(*(void *)(v44 + 8) + 8 * ((v45 - 1) & 0xB922E53C3328A050));
    do
    {
      do
        uint64_t v46 = (void *)*v46;
      while (v46[1] != 0xB922E53C3328A050);
    }
    while (v46[2] != 0xB922E53C3328A050);
  }
  *(void *)(v46[5] + 168) = a2;
  uint64_t v48 = *((void *)this + 140);
  unint64_t v49 = *(void *)(v48 + 16);
  if ((v49 & (v49 - 1)) != 0)
  {
    unint64_t v51 = 0xBBE47937F4A9FFC3;
    if (v49 <= 0xBBE47937F4A9FFC3) {
      unint64_t v51 = 0xBBE47937F4A9FFC3 % v49;
    }
    int v50 = *(void **)(*(void *)(v48 + 8) + 8 * v51);
    do
    {
      do
        int v50 = (void *)*v50;
      while (v50[1] != 0xBBE47937F4A9FFC3);
    }
    while (v50[2] != 0xBBE47937F4A9FFC3);
  }
  else
  {
    int v50 = *(void **)(*(void *)(v48 + 8) + 8 * ((v49 - 1) & 0xBBE47937F4A9FFC3));
    do
    {
      do
        int v50 = (void *)*v50;
      while (v50[1] != 0xBBE47937F4A9FFC3);
    }
    while (v50[2] != 0xBBE47937F4A9FFC3);
  }
  *(void *)(v50[5] + 120) = a2;
  uint64_t v52 = *((void *)this + 140);
  unint64_t v53 = *(void *)(v52 + 16);
  if ((v53 & (v53 - 1)) != 0)
  {
    unint64_t v55 = 0x6604A2C36A6A9ABFLL;
    if (v53 <= 0x6604A2C36A6A9ABFLL) {
      unint64_t v55 = 0x6604A2C36A6A9ABFLL % v53;
    }
    uint64_t v54 = *(void **)(*(void *)(v52 + 8) + 8 * v55);
    do
    {
      do
        uint64_t v54 = (void *)*v54;
      while (v54[1] != 0x6604A2C36A6A9ABFLL);
    }
    while (v54[2] != 0x6604A2C36A6A9ABFLL);
  }
  else
  {
    uint64_t v54 = *(void **)(*(void *)(v52 + 8) + 8 * ((v53 - 1) & 0x6604A2C36A6A9ABFLL));
    do
    {
      do
        uint64_t v54 = (void *)*v54;
      while (v54[1] != 0x6604A2C36A6A9ABFLL);
    }
    while (v54[2] != 0x6604A2C36A6A9ABFLL);
  }
  *(void *)(v54[5] + 120) = a2;
  uint64_t v56 = *((void *)this + 140);
  unint64_t v57 = *(void *)(v56 + 16);
  if ((v57 & (v57 - 1)) != 0)
  {
    unint64_t v59 = 0xD20B76AD5FA2D0ADLL;
    if (v57 <= 0xD20B76AD5FA2D0ADLL) {
      unint64_t v59 = 0xD20B76AD5FA2D0ADLL % v57;
    }
    unint64_t v58 = *(void **)(*(void *)(v56 + 8) + 8 * v59);
    do
    {
      do
        unint64_t v58 = (void *)*v58;
      while (v58[1] != 0xD20B76AD5FA2D0ADLL);
    }
    while (v58[2] != 0xD20B76AD5FA2D0ADLL);
  }
  else
  {
    unint64_t v58 = *(void **)(*(void *)(v56 + 8) + 8 * ((v57 - 1) & 0xD20B76AD5FA2D0ADLL));
    do
    {
      do
        unint64_t v58 = (void *)*v58;
      while (v58[1] != 0xD20B76AD5FA2D0ADLL);
    }
    while (v58[2] != 0xD20B76AD5FA2D0ADLL);
  }
  *(void *)(v58[5] + 144) = a2;
  uint64_t v60 = *((void *)this + 140);
  unint64_t v61 = *(void *)(v60 + 16);
  if ((v61 & (v61 - 1)) != 0)
  {
    unint64_t v63 = 0x664391E400540AABLL;
    if (v61 <= 0x664391E400540AABLL) {
      unint64_t v63 = 0x664391E400540AABLL % v61;
    }
    uint64_t v62 = *(void **)(*(void *)(v60 + 8) + 8 * v63);
    do
    {
      do
        uint64_t v62 = (void *)*v62;
      while (v62[1] != 0x664391E400540AABLL);
    }
    while (v62[2] != 0x664391E400540AABLL);
  }
  else
  {
    uint64_t v62 = *(void **)(*(void *)(v60 + 8) + 8 * ((v61 - 1) & 0x664391E400540AABLL));
    do
    {
      do
        uint64_t v62 = (void *)*v62;
      while (v62[1] != 0x664391E400540AABLL);
    }
    while (v62[2] != 0x664391E400540AABLL);
  }
  *(void *)(v62[5] + 120) = a2;
  uint64_t v64 = *((void *)this + 140);
  unint64_t v65 = *(void *)(v64 + 16);
  if ((v65 & (v65 - 1)) != 0)
  {
    unint64_t v67 = 0x5AEC4ACCAEFFBF89;
    if (v65 <= 0x5AEC4ACCAEFFBF89) {
      unint64_t v67 = 0x5AEC4ACCAEFFBF89 % v65;
    }
    uint64_t v66 = *(void **)(*(void *)(v64 + 8) + 8 * v67);
    do
    {
      do
        uint64_t v66 = (void *)*v66;
      while (v66[1] != 0x5AEC4ACCAEFFBF89);
    }
    while (v66[2] != 0x5AEC4ACCAEFFBF89);
  }
  else
  {
    uint64_t v66 = *(void **)(*(void *)(v64 + 8) + 8 * ((v65 - 1) & 0x5AEC4ACCAEFFBF89));
    do
    {
      do
        uint64_t v66 = (void *)*v66;
      while (v66[1] != 0x5AEC4ACCAEFFBF89);
    }
    while (v66[2] != 0x5AEC4ACCAEFFBF89);
  }
  *(void *)(v66[5] + 128) = a2;
  uint64_t v68 = *((void *)this + 140);
  unint64_t v69 = *(void *)(v68 + 16);
  if ((v69 & (v69 - 1)) != 0)
  {
    unint64_t v71 = 0x740CC191D773D72BLL;
    if (v69 <= 0x740CC191D773D72BLL) {
      unint64_t v71 = 0x740CC191D773D72BLL % v69;
    }
    int8x16_t v70 = *(void **)(*(void *)(v68 + 8) + 8 * v71);
    do
    {
      do
        int8x16_t v70 = (void *)*v70;
      while (v70[1] != 0x740CC191D773D72BLL);
    }
    while (v70[2] != 0x740CC191D773D72BLL);
  }
  else
  {
    int8x16_t v70 = *(void **)(*(void *)(v68 + 8) + 8 * ((v69 - 1) & 0x740CC191D773D72BLL));
    do
    {
      do
        int8x16_t v70 = (void *)*v70;
      while (v70[1] != 0x740CC191D773D72BLL);
    }
    while (v70[2] != 0x740CC191D773D72BLL);
  }
  *(void *)(v70[5] + 120) = a2;
  uint64_t v72 = *((void *)this + 140);
  unint64_t v73 = *(void *)(v72 + 16);
  if ((v73 & (v73 - 1)) != 0)
  {
    unint64_t v75 = 0x40755F331E0AB142;
    if (v73 <= 0x40755F331E0AB142) {
      unint64_t v75 = 0x40755F331E0AB142 % v73;
    }
    char v74 = *(void **)(*(void *)(v72 + 8) + 8 * v75);
    do
    {
      do
        char v74 = (void *)*v74;
      while (v74[1] != 0x40755F331E0AB142);
    }
    while (v74[2] != 0x40755F331E0AB142);
  }
  else
  {
    char v74 = *(void **)(*(void *)(v72 + 8) + 8 * ((v73 - 1) & 0x40755F331E0AB142));
    do
    {
      do
        char v74 = (void *)*v74;
      while (v74[1] != 0x40755F331E0AB142);
    }
    while (v74[2] != 0x40755F331E0AB142);
  }
  *(void *)(v74[5] + 120) = a2;
  uint64_t v76 = *((void *)this + 140);
  unint64_t v77 = *(void *)(v76 + 16);
  if ((v77 & (v77 - 1)) != 0)
  {
    unint64_t v79 = 0x70FF69C50676D824;
    if (v77 <= 0x70FF69C50676D824) {
      unint64_t v79 = 0x70FF69C50676D824 % v77;
    }
    long long v78 = *(void **)(*(void *)(v76 + 8) + 8 * v79);
    do
    {
      do
        long long v78 = (void *)*v78;
      while (v78[1] != 0x70FF69C50676D824);
    }
    while (v78[2] != 0x70FF69C50676D824);
  }
  else
  {
    long long v78 = *(void **)(*(void *)(v76 + 8) + 8 * ((v77 - 1) & 0x70FF69C50676D824));
    do
    {
      do
        long long v78 = (void *)*v78;
      while (v78[1] != 0x70FF69C50676D824);
    }
    while (v78[2] != 0x70FF69C50676D824);
  }
  *(void *)(v78[5] + 120) = a2;
  uint64_t v80 = *((void *)this + 140);
  unint64_t v81 = *(void *)(v80 + 16);
  if ((v81 & (v81 - 1)) != 0)
  {
    unint64_t v83 = 0xF9FBA0FF1E09D6ALL;
    if (v81 <= 0xF9FBA0FF1E09D6ALL) {
      unint64_t v83 = 0xF9FBA0FF1E09D6ALL % v81;
    }
    unint64_t v82 = *(void **)(*(void *)(v80 + 8) + 8 * v83);
    do
    {
      do
        unint64_t v82 = (void *)*v82;
      while (v82[1] != 0xF9FBA0FF1E09D6ALL);
    }
    while (v82[2] != 0xF9FBA0FF1E09D6ALL);
  }
  else
  {
    unint64_t v82 = *(void **)(*(void *)(v80 + 8) + 8 * ((v81 - 1) & 0xF9FBA0FF1E09D6ALL));
    do
    {
      do
        unint64_t v82 = (void *)*v82;
      while (v82[1] != 0xF9FBA0FF1E09D6ALL);
    }
    while (v82[2] != 0xF9FBA0FF1E09D6ALL);
  }
  *(void *)(v82[5] + 120) = a2;
  uint64_t v84 = *((void *)this + 140);
  unint64_t v85 = *(void *)(v84 + 16);
  if ((v85 & (v85 - 1)) != 0)
  {
    unint64_t v87 = 0xD8AF9C2D0B889F8CLL;
    if (v85 <= 0xD8AF9C2D0B889F8CLL) {
      unint64_t v87 = 0xD8AF9C2D0B889F8CLL % v85;
    }
    uint64_t v86 = *(void **)(*(void *)(v84 + 8) + 8 * v87);
    do
    {
      do
        uint64_t v86 = (void *)*v86;
      while (v86[1] != 0xD8AF9C2D0B889F8CLL);
    }
    while (v86[2] != 0xD8AF9C2D0B889F8CLL);
  }
  else
  {
    uint64_t v86 = *(void **)(*(void *)(v84 + 8) + 8 * ((v85 - 1) & 0xD8AF9C2D0B889F8CLL));
    do
    {
      do
        uint64_t v86 = (void *)*v86;
      while (v86[1] != 0xD8AF9C2D0B889F8CLL);
    }
    while (v86[2] != 0xD8AF9C2D0B889F8CLL);
  }
  *(void *)(v86[5] + 120) = a2;
  uint64_t v88 = *((void *)this + 140);
  unint64_t v89 = *(void *)(v88 + 16);
  if ((v89 & (v89 - 1)) != 0)
  {
    unint64_t v91 = 0xAA8F0DAB5699C54BLL;
    if (v89 <= 0xAA8F0DAB5699C54BLL) {
      unint64_t v91 = 0xAA8F0DAB5699C54BLL % v89;
    }
    int v90 = *(void **)(*(void *)(v88 + 8) + 8 * v91);
    do
    {
      do
        int v90 = (void *)*v90;
      while (v90[1] != 0xAA8F0DAB5699C54BLL);
    }
    while (v90[2] != 0xAA8F0DAB5699C54BLL);
  }
  else
  {
    int v90 = *(void **)(*(void *)(v88 + 8) + 8 * ((v89 - 1) & 0xAA8F0DAB5699C54BLL));
    do
    {
      do
        int v90 = (void *)*v90;
      while (v90[1] != 0xAA8F0DAB5699C54BLL);
    }
    while (v90[2] != 0xAA8F0DAB5699C54BLL);
  }
  *(void *)(v90[5] + 120) = a2;
  uint64_t v92 = *((void *)this + 140);
  unint64_t v93 = *(void *)(v92 + 16);
  if ((v93 & (v93 - 1)) != 0)
  {
    unint64_t v95 = 0xB0E499CD21F9C854;
    if (v93 <= 0xB0E499CD21F9C854) {
      unint64_t v95 = 0xB0E499CD21F9C854 % v93;
    }
    unint64_t v94 = *(void **)(*(void *)(v92 + 8) + 8 * v95);
    do
    {
      do
        unint64_t v94 = (void *)*v94;
      while (v94[1] != 0xB0E499CD21F9C854);
    }
    while (v94[2] != 0xB0E499CD21F9C854);
  }
  else
  {
    unint64_t v94 = *(void **)(*(void *)(v92 + 8) + 8 * ((v93 - 1) & 0xB0E499CD21F9C854));
    do
    {
      do
        unint64_t v94 = (void *)*v94;
      while (v94[1] != 0xB0E499CD21F9C854);
    }
    while (v94[2] != 0xB0E499CD21F9C854);
  }
  uint64_t v96 = v94[5];
  *(void *)(v96 + 120) = a2;
  *(void *)(v96 + 128) = a3;
  uint64_t v97 = *((void *)this + 140);
  unint64_t v98 = *(void *)(v97 + 16);
  if ((v98 & (v98 - 1)) != 0)
  {
    unint64_t v100 = 0x8251BC418DB947FFLL;
    if (v98 <= 0x8251BC418DB947FFLL) {
      unint64_t v100 = 0x8251BC418DB947FFLL % v98;
    }
    uint64_t v99 = *(void **)(*(void *)(v97 + 8) + 8 * v100);
    do
    {
      do
        uint64_t v99 = (void *)*v99;
      while (v99[1] != 0x8251BC418DB947FFLL);
    }
    while (v99[2] != 0x8251BC418DB947FFLL);
  }
  else
  {
    uint64_t v99 = *(void **)(*(void *)(v97 + 8) + 8 * ((v98 - 1) & 0x8251BC418DB947FFLL));
    do
    {
      do
        uint64_t v99 = (void *)*v99;
      while (v99[1] != 0x8251BC418DB947FFLL);
    }
    while (v99[2] != 0x8251BC418DB947FFLL);
  }
  *(void *)(v99[5] + 120) = a2;
  uint64_t v101 = *((void *)this + 140);
  unint64_t v102 = *(void *)(v101 + 16);
  if ((v102 & (v102 - 1)) != 0)
  {
    unint64_t v104 = 0xE7C55C766FD99921;
    if (v102 <= 0xE7C55C766FD99921) {
      unint64_t v104 = 0xE7C55C766FD99921 % v102;
    }
    BOOL v103 = *(void **)(*(void *)(v101 + 8) + 8 * v104);
    do
    {
      do
        BOOL v103 = (void *)*v103;
      while (v103[1] != 0xE7C55C766FD99921);
    }
    while (v103[2] != 0xE7C55C766FD99921);
  }
  else
  {
    BOOL v103 = *(void **)(*(void *)(v101 + 8) + 8 * ((v102 - 1) & 0xE7C55C766FD99921));
    do
    {
      do
        BOOL v103 = (void *)*v103;
      while (v103[1] != 0xE7C55C766FD99921);
    }
    while (v103[2] != 0xE7C55C766FD99921);
  }
  *(void *)(v103[5] + 120) = a2;
  uint64_t v105 = *((void *)this + 140);
  unint64_t v106 = *(void *)(v105 + 16);
  if ((v106 & (v106 - 1)) != 0)
  {
    unint64_t v108 = 0x6CE28AC70D358CE7;
    if (v106 <= 0x6CE28AC70D358CE7) {
      unint64_t v108 = 0x6CE28AC70D358CE7 % v106;
    }
    uint64_t v107 = *(void **)(*(void *)(v105 + 8) + 8 * v108);
    do
    {
      do
        uint64_t v107 = (void *)*v107;
      while (v107[1] != 0x6CE28AC70D358CE7);
    }
    while (v107[2] != 0x6CE28AC70D358CE7);
  }
  else
  {
    uint64_t v107 = *(void **)(*(void *)(v105 + 8) + 8 * ((v106 - 1) & 0x6CE28AC70D358CE7));
    do
    {
      do
        uint64_t v107 = (void *)*v107;
      while (v107[1] != 0x6CE28AC70D358CE7);
    }
    while (v107[2] != 0x6CE28AC70D358CE7);
  }
  *(void *)(v107[5] + 120) = a2;
}

void md::ARWalkingMapEngineMode::didBecomeActive(uint64_t a1, md::MapEngine *this)
{
  md::MapEngine::setDisplayRate((uint64_t)this, -1);
  int8x8_t v4 = (uint64_t *)*((void *)this + 141);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 != v6)
  {
    while (*(unsigned char *)v5 != 27)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_7;
      }
    }
  }
  if (v5 == v6) {
LABEL_7:
  }
    LOBYTE(v7) = 0;
  else {
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = *((void *)this + 140);
  unint64_t v9 = *(void *)(v8 + 16);
  if ((v9 & (v9 - 1)) != 0)
  {
    unint64_t v11 = 0x3F812BA5755E8568;
    if (v9 <= 0x3F812BA5755E8568) {
      unint64_t v11 = 0x3F812BA5755E8568 % v9;
    }
    unint64_t v10 = *(void **)(*(void *)(v8 + 8) + 8 * v11);
    do
    {
      do
        unint64_t v10 = (void *)*v10;
      while (v10[1] != 0x3F812BA5755E8568);
    }
    while (v10[2] != 0x3F812BA5755E8568);
  }
  else
  {
    unint64_t v10 = *(void **)(*(void *)(v8 + 8) + 8 * ((v9 - 1) & 0x3F812BA5755E8568));
    do
    {
      do
        unint64_t v10 = (void *)*v10;
      while (v10[1] != 0x3F812BA5755E8568);
    }
    while (v10[2] != 0x3F812BA5755E8568);
  }
  id v12 = *(id *)(v10[5] + 128);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, md::MapEngine *))(*(void *)a1 + 56))(&v35, a1, this);
  uint64_t v13 = v35;
  uint64_t v35 = 0;
  uint64_t v14 = *(void *)(a1 + 576);
  *(void *)(a1 + 576) = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    uint64_t v15 = v35;
    uint64_t v35 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  *(void *)(a1 + 568) = (*(uint64_t (**)(uint64_t, void, id))(*(void *)a1 + 64))(a1, v7, v12);
  (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  uint8x8_t v17 = v16;
  if (v16) {
    id v18 = v16;
  }
  size_t v19 = *(void **)(a1 + 592);
  *(void *)(a1 + 592) = v17;

  size_t v20 = (int8x8_t *)*((void *)this + 140);
  int8x8_t v21 = v20[2];
  uint8x8_t v22 = (uint8x8_t)vcnt_s8(v21);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    unint64_t v23 = 0xF4B920F5F640B882 % *(void *)&v21;
    if (*(void *)&v21 > 0xF4B920F5F640B882) {
      unint64_t v23 = 0xF4B920F5F640B882;
    }
  }
  else
  {
    unint64_t v23 = (*(void *)&v21 - 1) & 0xF4B920F5F640B882;
  }
  int8x8_t v24 = v20[1];
  unint64_t v25 = *(void **)(*(void *)&v24 + 8 * v23);
  if (!v25 || (unint64_t v26 = (void *)*v25) == 0)
  {
LABEL_42:
    uint64_t v29 = 0;
    goto LABEL_43;
  }
  if (v22.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v28 = v26[1];
      if (v28 == 0xF4B920F5F640B882)
      {
        if (v26[2] == 0xF4B920F5F640B882) {
          goto LABEL_56;
        }
      }
      else if ((v28 & (*(void *)&v21 - 1)) != v23)
      {
        goto LABEL_42;
      }
      unint64_t v26 = (void *)*v26;
      if (!v26) {
        goto LABEL_42;
      }
    }
  }
  while (1)
  {
    unint64_t v27 = v26[1];
    if (v27 == 0xF4B920F5F640B882) {
      break;
    }
    if (v27 >= *(void *)&v21) {
      v27 %= *(void *)&v21;
    }
    if (v27 != v23) {
      goto LABEL_42;
    }
LABEL_32:
    unint64_t v26 = (void *)*v26;
    if (!v26) {
      goto LABEL_42;
    }
  }
  if (v26[2] != 0xF4B920F5F640B882) {
    goto LABEL_32;
  }
LABEL_56:
  uint64_t v29 = (md::ARDebugScene **)v26[5];
LABEL_43:
  if (v22.u32[0] >= 2uLL)
  {
    unint64_t v31 = 0x69AB09C896BF94A7;
    if (*(void *)&v21 <= 0x69AB09C896BF94A7uLL) {
      unint64_t v31 = 0x69AB09C896BF94A7uLL % *(void *)&v21;
    }
    int v30 = *(void **)(*(void *)&v24 + 8 * v31);
    do
    {
      do
        int v30 = (void *)*v30;
      while (v30[1] != 0x69AB09C896BF94A7);
    }
    while (v30[2] != 0x69AB09C896BF94A7);
  }
  else
  {
    int v30 = *(void **)(*(void *)&v24 + 8 * ((*(void *)&v21 - 1) & 0x69AB09C896BF94A7));
    do
    {
      do
        int v30 = (void *)*v30;
      while (v30[1] != 0x69AB09C896BF94A7);
    }
    while (v30[2] != 0x69AB09C896BF94A7);
  }
  uint64_t v32 = v30[5];
  *(void *)(v32 + 264) = *(void *)(a1 + 576);
  unint64_t v33 = *(ARSession **)(a1 + 592);
  if (v33) {
    md::ARLogic::setARSession((id *)v32, v33);
  }
  md::ARFeatureInjectionLogic::setARDebugScene(v29, *(md::ARDebugScene **)(a1 + 568));
  md::ARWalkingMapEngineMode::updateRegistries(this, *(md::MapEngine **)(a1 + 536), *(gdc::Registry **)(a1 + 552), v34);
}

void sub_1A2636D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::ARWalkingMapEngineMode::ARWalkingMapEngineMode(uint64_t a1, void *a2, void *a3, char a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)md::MapEngineMode::MapEngineMode(a1, a4);
  void *v7 = &unk_1EF540E58;
  v7[67] = *a2;
  uint64_t v8 = a2[1];
  v7[68] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 552) = *a3;
  uint64_t v9 = a3[1];
  *(void *)(a1 + 560) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 584) = &unk_1EF559F58;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 608) = 0;
  gdc::Registry::create(*(gdc::Registry **)(a1 + 536));
}

void sub_1A2638500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 584) = a10;

  uint64_t v12 = *(void *)(v10 + 576);
  *(void *)(v10 + 576) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v10 + 552);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a9);
  md::MapEngineMode::~MapEngineMode((md::MapEngineMode *)v10);
  _Unwind_Resume(a1);
}

void md::SharedResourcesManager::FrameReferences::~FrameReferences(md::SharedResourcesManager::FrameReferences *this)
{
  uint64_t v2 = (void *)*((void *)this + 23);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    int8x8_t v4 = (std::__shared_weak_count *)v3[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  uint64_t v5 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v5) {
    operator delete(v5);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 64));
  std::mutex::~mutex((std::mutex *)this);
}

void ___ZL33GEOGetVectorKitSharedResourcesLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "SharedResources");
  uint64_t v1 = (void *)GEOGetVectorKitSharedResourcesLog(void)::log;
  GEOGetVectorKitSharedResourcesLog(void)::log = (uint64_t)v0;
}

void std::__shared_ptr_emplace<md::MaskingOverlayRenderable>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[20];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (void *)a1[14];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = (void *)a1[14];
  if (v3) {
LABEL_4:
  }
    operator delete(v3);
LABEL_5:
  int8x8_t v4 = (void *)a1[11];
  if (v4)
  {
    uint64_t v5 = (void *)a1[12];
    uint64_t v6 = (void *)a1[11];
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        void *v5 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      while (v5 != v4);
      uint64_t v6 = (void *)a1[11];
    }
    a1[12] = v4;
    operator delete(v6);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[10];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = (std::__shared_weak_count *)a1[8];
    if (!v10) {
      return;
    }
  }
  else
  {
    uint64_t v10 = (std::__shared_weak_count *)a1[8];
    if (!v10) {
      return;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void std::__shared_ptr_emplace<md::MaskingOverlayRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::MaskingOverlayRenderable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::MaskingOverlayMeshProcessor::_buildTintBandOverlayStyle(uint64_t **this, uint64_t a2)
{
  int8x8_t v4 = (gss::Allocator *)[*(id *)a2 style];
  if (v4 == (gss::Allocator *)1) {
    uint64_t v5 = 0x7600000003;
  }
  else {
    uint64_t v5 = 3;
  }
  uint64_t v6 = gss::Allocator::instance(v4);
  uint64_t v12 = v6;
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, 24, 4);
  uint64_t v8 = v7;
  *(void *)&long long v10 = v7;
  unint64_t v11 = v7 + 3;
  if (v7) {
    void *v7 = 0x200000005;
  }
  v7[1] = v5;
  v7[2] = 0xA0001004BLL;
  *((void *)&v10 + 1) = v7 + 3;
  gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)v13, (uint64_t)&v10);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 40))(v6, v8, 24);
  uint64_t v9 = **(void **)(a2 + 32);
  *(void *)((char *)&v10 + 7) = 0;
  *(void *)&long long v10 = 0;
  HIBYTE(v10) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(this, v9, (gss::FeatureAttributeSet *)v13, (gss::QueryOverrides *)&v10);
  if (v13[0])
  {
    v13[1] = v13[0];
    (*(void (**)(uint64_t, void, void))(*(void *)v14 + 40))(v14, v13[0], v13[2] - v13[0]);
  }
}

void sub_1A2638A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a13)
  {
    a14 = a13;
    (*(void (**)(uint64_t))(*(void *)a16 + 40))(a16);
  }
  _Unwind_Resume(a1);
}

void md::MaskingOverlayMeshProcessor::_unionPolygons(uint64_t a1, uint64_t *a2)
{
  uint64_t v729 = *MEMORY[0x1E4F143B8];
  if ([*(id *)a1 style])
  {
    uint64_t v701 = 0;
    unint64_t v702 = 0;
    uint64_t v703 = 0;
    unint64_t v4 = a2[1];
    uint64_t v679 = a2;
    if ((uint64_t *)v4 != a2)
    {
      int64x2_t v685 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      int64x2_t v686 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      do
      {
        md::MaskingOverlayMeshProcessor::_buildTintBandOverlayStyle((uint64_t **)__p, a1);
        long long v716 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v5 = (std::__shared_weak_count *)*((void *)&v716 + 1);
        gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)&v720, v716, *((uint64_t *)&v716 + 1));
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          uint64_t v6 = (std::__shared_weak_count *)__p[1];
          if (!__p[1]) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v6 = (std::__shared_weak_count *)__p[1];
          if (!__p[1]) {
            goto LABEL_12;
          }
        }
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
LABEL_12:
        if (!(_BYTE)v723) {
          goto LABEL_39;
        }
        uint64_t v7 = *(char ***)(v4 + 16);
        uint64_t v8 = *v7;
        uint64_t v9 = v7[1];
        if (v8 == v9)
        {
          double v13 = 1.79769313e308;
          double v14 = -1.79769313e308;
          double v11 = 1.79769313e308;
          double v12 = -1.79769313e308;
          goto LABEL_22;
        }
        unint64_t v10 = v9 - v8 - 16;
        if (v10 < 0x30)
        {
          double v11 = 1.79769313e308;
          double v12 = -1.79769313e308;
          double v13 = 1.79769313e308;
          double v14 = -1.79769313e308;
          goto LABEL_21;
        }
        uint64_t v15 = (v10 >> 4) + 1;
        float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        float64x2_t v17 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        id v18 = (const double *)(v8 + 32);
        uint64_t v19 = v15 & 0x1FFFFFFFFFFFFFFCLL;
        float64x2_t v20 = v17;
        float64x2_t v21 = v16;
        float64x2_t v22 = v16;
        float64x2_t v23 = v16;
        float64x2_t v24 = v17;
        float64x2_t v25 = v17;
        do
        {
          unint64_t v26 = v18 - 4;
          float64x2x2_t v730 = vld2q_f64(v26);
          float64x2x2_t v733 = vld2q_f64(v18);
          float64x2_t v16 = vminnmq_f64(v730.val[0], v16);
          float64x2_t v21 = vminnmq_f64(v733.val[0], v21);
          float64x2_t v24 = vmaxnmq_f64(v24, v730.val[0]);
          float64x2_t v25 = vmaxnmq_f64(v25, v733.val[0]);
          float64x2_t v22 = vminnmq_f64(v730.val[1], v22);
          float64x2_t v23 = vminnmq_f64(v733.val[1], v23);
          float64x2_t v17 = vmaxnmq_f64(v17, v730.val[1]);
          float64x2_t v20 = vmaxnmq_f64(v20, v733.val[1]);
          v18 += 8;
          v19 -= 4;
        }
        while (v19);
        double v14 = vmaxnmvq_f64(vmaxnmq_f64(v24, v25));
        double v13 = vminnmvq_f64(vminnmq_f64(v22, v23));
        double v11 = vminnmvq_f64(vminnmq_f64(v16, v21));
        double v12 = vmaxnmvq_f64(vmaxnmq_f64(v17, v20));
        if (v15 != (v15 & 0x1FFFFFFFFFFFFFFCLL))
        {
          v8 += 16 * (v15 & 0x1FFFFFFFFFFFFFFCLL);
          do
          {
LABEL_21:
            double v27 = *(double *)v8;
            double v28 = *((double *)v8 + 1);
            v8 += 16;
            double v11 = fmin(v27, v11);
            double v14 = fmax(v14, v27);
            double v13 = fmin(v28, v13);
            double v12 = fmax(v12, v28);
          }
          while (v8 != v9);
        }
LABEL_22:
        double v29 = fmin(*(double *)(a1 + 48), *(double *)(a1 + 40)) * 0.001953125;
        if (v29 == 0.0) {
          goto LABEL_39;
        }
        char v30 = *(unsigned char *)(a1 + 57);
        int v31 = *(_DWORD *)(a1 + 64);
        int v32 = *(_DWORD *)(a1 + 60);
        uint64_t v33 = *(void *)(v720 + 24);
        unsigned int v34 = *(unsigned __int8 *)(v33 + 12);
        if (v34 != 2) {
          goto LABEL_26;
        }
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(v720 + 24), 0x1D7u, 0) & 1) == 0)
        {
          unsigned int v34 = 1;
LABEL_26:
          int hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v33, 0x1D7u, v34);
          double v36 = 0.0;
          if (!hasValueForKeyAtEnd) {
            goto LABEL_38;
          }
        }
        unint64_t v37 = *(float **)v33;
        if (*(void *)v33
          && (float v38 = *v37, LODWORD(v37) = *v37 == 1.0, *(unsigned char *)(v33 + 10))
          && (v38 != 0.0 ? (BOOL v39 = v38 == 1.0) : (BOOL v39 = 1), !v39)
          || (v40 = *(unsigned __int8 *)(v33 + v37 + 11), float v38 = 0.0, v40 == 2))
        {
          LOBYTE(v716) = 1;
          LOBYTE(__p[0]) = 1;
          unint64_t v41 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v33, 0x1D7u, 0, &v716);
          float v42 = *v41
              + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v33, 0x1D7u, 1u, __p)- *v41)* v38);
        }
        else
        {
          float v42 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v33, 0x1D7u, v40, 0);
        }
        double v36 = v42;
LABEL_38:
        double v43 = (double)(1 << v30);
        double v44 = 1.0 / v43 * (double)v31;
        double v45 = 1.0 / v43 * (double)((1 << v30) + ~v32);
        float v46 = (v14 - v44) * v43;
        float v47 = (v12 - v45) * v43;
        *(float *)&double v44 = (v44 - v11) * v43;
        *(float *)&double v43 = (v45 - v13) * v43;
        a2 = v679;
        if (fmax(v46 + *(float *)&v44, v47 + *(float *)&v43) / v29 > v36)
        {
LABEL_39:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v720);
          unint64_t v49 = *(char ***)(v4 + 16);
          uint64_t v48 = *(void *)(v4 + 24);
          *(void *)&long long v720 = v49;
          *((void *)&v720 + 1) = v48;
          if (v48)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
            unint64_t v49 = *(char ***)(v4 + 16);
          }
          LOWORD(v721) = *(_WORD *)(v4 + 32);
          int v50 = *v49;
          unint64_t v51 = v49[1];
          if (v50 == v51)
          {
            double v53 = 1.79769313e308;
          }
          else
          {
            unint64_t v52 = v51 - v50 - 16;
            if (v52 >= 0x40)
            {
              uint64_t v54 = (v52 >> 4) + 1;
              uint64_t v55 = v54 & 3;
              if ((v54 & 3) == 0) {
                uint64_t v55 = 4;
              }
              uint64_t v56 = v54 - v55;
              uint64_t v57 = 16 * v56;
              unint64_t v58 = (const double *)(v50 + 32);
              float64x2_t v59 = (float64x2_t)v686;
              float64x2_t v60 = (float64x2_t)v686;
              do
              {
                unint64_t v61 = v58 - 4;
                unsigned long long v62 = (unsigned __int128)vld2q_f64(v61);
                unsigned long long v63 = (unsigned __int128)vld2q_f64(v58);
                float64x2_t v60 = vminnmq_f64((float64x2_t)v62, v60);
                float64x2_t v59 = vminnmq_f64((float64x2_t)v63, v59);
                v58 += 8;
                v56 -= 4;
              }
              while (v56);
              v50 += v57;
              double v53 = vminnmvq_f64(vminnmq_f64(v60, v59));
            }
            else
            {
              double v53 = 1.79769313e308;
            }
            do
            {
              double v64 = *(double *)v50;
              v50 += 16;
              double v53 = fmin(v64, v53);
            }
            while (v50 != v51);
          }
          double v722 = v53;
          LOBYTE(v723) = 1;
          std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::push((uint64_t *)&v701, (uint64_t)&v720);
          unint64_t v65 = (std::__shared_weak_count *)*((void *)&v720 + 1);
          if (*((void *)&v720 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v720 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
          unint64_t v67 = *(char ***)(v4 + 16);
          uint64_t v66 = *(void *)(v4 + 24);
          *(void *)&long long v720 = v67;
          *((void *)&v720 + 1) = v66;
          if (v66)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v66 + 8), 1uLL, memory_order_relaxed);
            unint64_t v67 = *(char ***)(v4 + 16);
          }
          LOWORD(v721) = *(_WORD *)(v4 + 32);
          uint64_t v68 = *v67;
          unint64_t v69 = v67[1];
          if (v68 == v69)
          {
            double v71 = -1.79769313e308;
          }
          else
          {
            unint64_t v70 = v69 - v68 - 16;
            if (v70 >= 0x40)
            {
              uint64_t v72 = (v70 >> 4) + 1;
              uint64_t v73 = v72 & 3;
              if ((v72 & 3) == 0) {
                uint64_t v73 = 4;
              }
              uint64_t v74 = v72 - v73;
              uint64_t v75 = 16 * v74;
              uint64_t v76 = (const double *)(v68 + 32);
              float64x2_t v77 = (float64x2_t)v685;
              float64x2_t v78 = (float64x2_t)v685;
              do
              {
                unint64_t v79 = v76 - 4;
                unsigned long long v80 = (unsigned __int128)vld2q_f64(v79);
                unsigned long long v81 = (unsigned __int128)vld2q_f64(v76);
                float64x2_t v78 = vmaxnmq_f64(v78, (float64x2_t)v80);
                float64x2_t v77 = vmaxnmq_f64(v77, (float64x2_t)v81);
                v76 += 8;
                v74 -= 4;
              }
              while (v74);
              v68 += v75;
              double v71 = vmaxnmvq_f64(vmaxnmq_f64(v78, v77));
            }
            else
            {
              double v71 = -1.79769313e308;
            }
            do
            {
              double v82 = *(double *)v68;
              v68 += 16;
              double v71 = fmax(v71, v82);
            }
            while (v68 != v69);
          }
          double v722 = v71;
          LOBYTE(v723) = 0;
          std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::push((uint64_t *)&v701, (uint64_t)&v720);
          unint64_t v83 = (std::__shared_weak_count *)*((void *)&v720 + 1);
          if (*((void *)&v720 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v720 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
          goto LABEL_5;
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v720);
LABEL_5:
        unint64_t v4 = *(void *)(v4 + 8);
      }
      while ((uint64_t *)v4 != a2);
    }
    if (a2[2])
    {
      uint64_t v84 = *a2;
      unint64_t v85 = (uint64_t *)a2[1];
      uint64_t v86 = *v85;
      *(void *)(v86 + 8) = *(void *)(*a2 + 8);
      **(void **)(v84 + 8) = v86;
      a2[2] = 0;
      if (v85 != a2)
      {
        unint64_t v4 = -1;
        do
        {
          unint64_t v87 = (uint64_t *)v85[1];
          uint64_t v88 = (std::__shared_weak_count *)v85[3];
          if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
          operator delete(v85);
          unint64_t v85 = v87;
        }
        while (v87 != a2);
      }
    }
    *(_OWORD *)uint64_t v698 = 0u;
    *(_OWORD *)uint64_t v699 = 0u;
    float v700 = 1.0;
    unint64_t v696 = 0;
    long long v697 = 0uLL;
    int v90 = v701;
    unint64_t v89 = v702;
    if (v701 != v702)
    {
      int64x2_t v677 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      int64x2_t v678 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      while (1)
      {
        unint64_t v91 = (std::__shared_weak_count *)v90[1];
        uint64_t v692 = (uint64_t *)*v90;
        unint64_t v693 = v91;
        if (v91) {
          atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        __int16 v694 = *((_WORD *)v90 + 8);
        char v695 = *((unsigned char *)v90 + 32);
        if (v89 - (unsigned char *)v90 >= 41)
        {
          __int16 v687 = *((_WORD *)v90 + 8);
          uint64_t v92 = 0;
          int64_t v93 = 0xCCCCCCCCCCCCCCCDLL * ((v89 - (unsigned char *)v90) >> 3);
          unint64_t v681 = (char **)*v90;
          uint64_t v683 = (char **)v90[1];
          void *v90 = 0;
          v90[1] = 0;
          *(void *)((char *)&v720 + 6) = v90[3];
          BYTE14(v720) = *((unsigned char *)v90 + 32);
          unint64_t v94 = (char ***)v90;
          while (1)
          {
            uint64_t v96 = v94;
            uint64_t v97 = v92 + 1;
            v94 += 5 * v92 + 5;
            uint64_t v98 = 2 * v92;
            uint64_t v92 = (2 * v92) | 1;
            uint64_t v99 = v98 + 2;
            if (v98 + 2 < v93) {
              break;
            }
LABEL_117:
            long long v150 = *(_OWORD *)v94;
            *unint64_t v94 = 0;
            v94[1] = 0;
            uint64_t v151 = (std::__shared_weak_count *)v96[1];
            *(_OWORD *)uint64_t v96 = v150;
            if (v151 && !atomic_fetch_add(&v151->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
              std::__shared_weak_count::__release_weak(v151);
            }
            *((_WORD *)v96 + 8) = *((_WORD *)v94 + 8);
            unint64_t v4 = (unint64_t)(v94 + 3);
            unint64_t v95 = v94[3];
            *((unsigned char *)v96 + 32) = *((unsigned char *)v94 + 32);
            v96[3] = v95;
            if (v92 > (uint64_t)((unint64_t)(v93 - 2) >> 1))
            {
              if (v94 == (char ***)(v89 - 40))
              {
                unsigned int v156 = (std::__shared_weak_count *)v94[1];
                *unint64_t v94 = v681;
                v94[1] = v683;
                a2 = v679;
                if (v156 && !atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                  std::__shared_weak_count::__release_weak(v156);
                }
                *((_WORD *)v94 + 8) = v687;
                *(void *)unint64_t v4 = *(void *)((char *)&v720 + 6);
                *((unsigned char *)v94 + 32) = BYTE14(v720);
              }
              else
              {
                long long v152 = *(_OWORD *)(v89 - 40);
                *((void *)v89 - 5) = 0;
                *((void *)v89 - 4) = 0;
                int v153 = (std::__shared_weak_count *)v94[1];
                *(_OWORD *)unint64_t v94 = v152;
                a2 = v679;
                if (v153 && !atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                  std::__shared_weak_count::__release_weak(v153);
                }
                *((_WORD *)v94 + 8) = *((_WORD *)v89 - 12);
                uint64_t v154 = *((void *)v89 - 2);
                *((unsigned char *)v94 + 32) = *(v89 - 8);
                *(void *)unint64_t v4 = v154;
                int v155 = (std::__shared_weak_count *)*((void *)v89 - 4);
                *((void *)v89 - 5) = v681;
                *((void *)v89 - 4) = v683;
                if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                  std::__shared_weak_count::__release_weak(v155);
                }
                *((_WORD *)v89 - 12) = v687;
                *((void *)v89 - 2) = *(void *)((char *)&v720 + 6);
                *(v89 - 8) = BYTE14(v720);
                std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge> &,std::__wrap_iter<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge*>>((uint64_t)v90, (uint64_t)(v94 + 5), 0xCCCCCCCCCCCCCCCDLL * (v94 + 5 - (char ***)v90));
              }
              unint64_t v89 = v702;
              goto LABEL_133;
            }
          }
          unint64_t v100 = v94 + 5;
          double v101 = *(double *)&v96[5 * v97 + 3];
          double v102 = *((double *)v94 + 8);
          if (vabdd_f64(v101, v102) > 1.0e-12)
          {
            BOOL v103 = v101 > v102;
            goto LABEL_115;
          }
          unsigned int v104 = LOBYTE(v96[5 * v97 + 4]);
          unsigned int v105 = *((unsigned __int8 *)v94 + 72);
          if (v104 != v105)
          {
            BOOL v103 = v104 < v105;
LABEL_115:
            if (v103)
            {
              v94 += 5;
              uint64_t v92 = v99;
            }
            goto LABEL_117;
          }
          unint64_t v106 = **v94;
          uint64_t v107 = (*v94)[1];
          if (v106 == v107)
          {
            double v111 = 1.79769313e308;
            double v112 = -1.79769313e308;
            double v109 = 1.79769313e308;
            double v110 = -1.79769313e308;
            goto LABEL_98;
          }
          unint64_t v108 = v107 - v106 - 16;
          if (v108 >= 0x30)
          {
            uint64_t v113 = (v108 >> 4) + 1;
            float64x2_t v114 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
            float64x2_t v115 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
            int v116 = (const double *)(v106 + 32);
            uint64_t v117 = v113 & 0x1FFFFFFFFFFFFFFCLL;
            float64x2_t v118 = v115;
            float64x2_t v119 = v114;
            float64x2_t v120 = v114;
            float64x2_t v121 = v114;
            float64x2_t v122 = v115;
            float64x2_t v123 = v115;
            do
            {
              uint64_t v124 = v116 - 4;
              float64x2x2_t v731 = vld2q_f64(v124);
              float64x2x2_t v734 = vld2q_f64(v116);
              float64x2_t v114 = vminnmq_f64(v731.val[0], v114);
              float64x2_t v119 = vminnmq_f64(v734.val[0], v119);
              float64x2_t v122 = vmaxnmq_f64(v122, v731.val[0]);
              float64x2_t v123 = vmaxnmq_f64(v123, v734.val[0]);
              float64x2_t v120 = vminnmq_f64(v731.val[1], v120);
              float64x2_t v121 = vminnmq_f64(v734.val[1], v121);
              float64x2_t v115 = vmaxnmq_f64(v115, v731.val[1]);
              float64x2_t v118 = vmaxnmq_f64(v118, v734.val[1]);
              v116 += 8;
              v117 -= 4;
            }
            while (v117);
            double v112 = vmaxnmvq_f64(vmaxnmq_f64(v122, v123));
            double v111 = vminnmvq_f64(vminnmq_f64(v120, v121));
            double v109 = vminnmvq_f64(vminnmq_f64(v114, v119));
            double v110 = vmaxnmvq_f64(vmaxnmq_f64(v115, v118));
            if (v113 == (v113 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_98:
              uint64_t v127 = **v100;
              uint64_t v128 = (*v100)[1];
              if (v127 == v128)
              {
                double v132 = 1.79769313e308;
                double v133 = -1.79769313e308;
                double v130 = 1.79769313e308;
                double v131 = -1.79769313e308;
              }
              else
              {
                unint64_t v129 = v128 - v127 - 16;
                if (v129 >= 0x30)
                {
                  uint64_t v134 = (v129 >> 4) + 1;
                  uint64_t v135 = (const double *)(v127 + 32);
                  uint64_t v136 = v134 & 0x1FFFFFFFFFFFFFFCLL;
                  float64x2_t v138 = (float64x2_t)v677;
                  float64x2_t v137 = (float64x2_t)v678;
                  float64x2_t v139 = (float64x2_t)v677;
                  float64x2_t v140 = (float64x2_t)v677;
                  float64x2_t v141 = (float64x2_t)v678;
                  float64x2_t v142 = (float64x2_t)v678;
                  float64x2_t v143 = (float64x2_t)v678;
                  float64x2_t v144 = (float64x2_t)v677;
                  do
                  {
                    float v145 = v135 - 4;
                    float64x2x2_t v736 = vld2q_f64(v145);
                    float64x2x2_t v738 = vld2q_f64(v135);
                    float64x2_t v141 = vminnmq_f64(v736.val[0], v141);
                    float64x2_t v142 = vminnmq_f64(v738.val[0], v142);
                    float64x2_t v144 = vmaxnmq_f64(v144, v736.val[0]);
                    float64x2_t v138 = vmaxnmq_f64(v138, v738.val[0]);
                    float64x2_t v143 = vminnmq_f64(v736.val[1], v143);
                    float64x2_t v137 = vminnmq_f64(v738.val[1], v137);
                    float64x2_t v139 = vmaxnmq_f64(v139, v736.val[1]);
                    float64x2_t v140 = vmaxnmq_f64(v140, v738.val[1]);
                    v135 += 8;
                    v136 -= 4;
                  }
                  while (v136);
                  double v133 = vmaxnmvq_f64(vmaxnmq_f64(v144, v138));
                  double v132 = vminnmvq_f64(vminnmq_f64(v143, v137));
                  double v130 = vminnmvq_f64(vminnmq_f64(v141, v142));
                  double v131 = vmaxnmvq_f64(vmaxnmq_f64(v139, v140));
                  if (v134 == (v134 & 0x1FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_107;
                  }
                  v127 += 16 * (v134 & 0x1FFFFFFFFFFFFFFCLL);
                }
                else
                {
                  double v130 = 1.79769313e308;
                  double v131 = -1.79769313e308;
                  double v132 = 1.79769313e308;
                  double v133 = -1.79769313e308;
                }
                do
                {
                  double v146 = *(double *)v127;
                  double v147 = *((double *)v127 + 1);
                  v127 += 16;
                  double v130 = fmin(v146, v130);
                  double v133 = fmax(v133, v146);
                  double v132 = fmin(v147, v132);
                  double v131 = fmax(v131, v147);
                }
                while (v127 != v128);
              }
LABEL_107:
              if (v104) {
                double v148 = v112;
              }
              else {
                double v148 = v109;
              }
              if (v104) {
                double v149 = v133;
              }
              else {
                double v149 = v130;
              }
              BOOL v103 = v148 > v149;
              if (vabdd_f64(v148, v149) <= 1.0e-12) {
                BOOL v103 = (v110 - v111) * (v112 - v109) > (v131 - v132) * (v133 - v130);
              }
              goto LABEL_115;
            }
            v106 += 16 * (v113 & 0x1FFFFFFFFFFFFFFCLL);
          }
          else
          {
            double v109 = 1.79769313e308;
            double v110 = -1.79769313e308;
            double v111 = 1.79769313e308;
            double v112 = -1.79769313e308;
          }
          do
          {
            double v125 = *(double *)v106;
            double v126 = *((double *)v106 + 1);
            v106 += 16;
            double v109 = fmin(v125, v109);
            double v112 = fmax(v112, v125);
            double v111 = fmin(v126, v111);
            double v110 = fmax(v110, v126);
          }
          while (v106 != v107);
          goto LABEL_98;
        }
LABEL_133:
        unint64_t v157 = (std::__shared_weak_count *)*((void *)v89 - 4);
        if (v157 && !atomic_fetch_add(&v157->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
        unint64_t v702 = v89 - 40;
        if (v695) {
          break;
        }
        if (v698[1])
        {
          unint64_t v584 = 0x9DDFEA08EB382D69 * (((8 * v692) + 8) ^ ((unint64_t)v692 >> 32));
          unint64_t v585 = 0x9DDFEA08EB382D69 * (((unint64_t)v692 >> 32) ^ (v584 >> 47) ^ v584);
          unint64_t v586 = 0x9DDFEA08EB382D69 * (v585 ^ (v585 >> 47));
          uint8x8_t v587 = (uint8x8_t)vcnt_s8((int8x8_t)v698[1]);
          v587.i16[0] = vaddlv_u8(v587);
          if (v587.u32[0] > 1uLL)
          {
            unint64_t v588 = v586;
            if ((void *)v586 >= v698[1]) {
              unint64_t v588 = v586 % (unint64_t)v698[1];
            }
          }
          else
          {
            unint64_t v588 = v586 & ((unint64_t)v698[1] - 1);
          }
          uint64_t v613 = (uint64_t *)*((void *)v698[0] + v588);
          if (v613)
          {
            uint64_t v614 = *v613;
            if (*v613)
            {
              if (v587.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v616 = *(void *)(v614 + 8);
                  if (v616 == v586)
                  {
                    if (*(uint64_t **)(v614 + 16) == v692
                      && __PAIR64__(*(unsigned __int8 *)(v614 + 33), *(unsigned __int8 *)(v614 + 32)) == __PAIR64__(HIBYTE(v694), v694))
                    {
                      goto LABEL_840;
                    }
                  }
                  else if ((v616 & ((uint64_t)v698[1] - 1)) != v588)
                  {
                    goto LABEL_870;
                  }
                  uint64_t v614 = *(void *)v614;
                  if (!v614) {
                    goto LABEL_870;
                  }
                }
              }
              do
              {
                unint64_t v615 = *(void *)(v614 + 8);
                if (v615 == v586)
                {
                  if (*(uint64_t **)(v614 + 16) == v692
                    && __PAIR64__(*(unsigned __int8 *)(v614 + 33), *(unsigned __int8 *)(v614 + 32)) == __PAIR64__(HIBYTE(v694), v694))
                  {
LABEL_840:
                    unint64_t v617 = operator new(0x28uLL);
                    v617[2] = *(void *)(v614 + 16);
                    uint64_t v618 = *(void *)(v614 + 24);
                    v617[3] = v618;
                    if (v618) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v618 + 8), 1uLL, memory_order_relaxed);
                    }
                    *((_WORD *)v617 + 16) = *(_WORD *)(v614 + 32);
                    uint64_t v619 = *a2;
                    *unint64_t v617 = *a2;
                    v617[1] = a2;
                    *(void *)(v619 + 8) = v617;
                    *a2 = (uint64_t)v617;
                    ++a2[2];
                    std::unordered_set<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>,md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonPairHash,std::equal_to<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>,std::allocator<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>>::erase[abi:nn180100](v698, (uint64_t *)v614);
                    break;
                  }
                }
                else
                {
                  if ((void *)v615 >= v698[1]) {
                    v615 %= (unint64_t)v698[1];
                  }
                  if (v615 != v588) {
                    break;
                  }
                }
                uint64_t v614 = *(void *)v614;
              }
              while (v614);
            }
          }
        }
LABEL_870:
        if (v693 && !atomic_fetch_add(&v693->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v693->__on_zero_shared)(v693);
          std::__shared_weak_count::__release_weak(v693);
        }
        int v90 = v701;
        unint64_t v89 = v702;
        if (v701 == v702) {
          goto LABEL_882;
        }
      }
      uint64_t v158 = (uint64_t **)v699[0];
      if (!v699[0])
      {
LABEL_138:
        unint64_t v159 = 0x9DDFEA08EB382D69 * (((8 * v692) + 8) ^ ((unint64_t)v692 >> 32));
        unint64_t v160 = 0x9DDFEA08EB382D69 * (((unint64_t)v692 >> 32) ^ (v159 >> 47) ^ v159);
        unint64_t v161 = v160 ^ (v160 >> 47);
        unint64_t v162 = 0x9DDFEA08EB382D69 * v161;
        unint64_t v163 = (unint64_t)v698[1];
        if (v698[1])
        {
          uint8x8_t v164 = (uint8x8_t)vcnt_s8((int8x8_t)v698[1]);
          v164.i16[0] = vaddlv_u8(v164);
          if (v164.u32[0] > 1uLL)
          {
            unint64_t v4 = 0x9DDFEA08EB382D69 * v161;
            if ((void *)v162 >= v698[1]) {
              unint64_t v4 = v162 % (unint64_t)v698[1];
            }
          }
          else
          {
            unint64_t v4 = v162 & ((unint64_t)v698[1] - 1);
          }
          uint64_t v589 = (uint64_t ***)*((void *)v698[0] + v4);
          if (v589)
          {
            uint64_t v590 = *v589;
            if (v590)
            {
              if (v164.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v592 = v590[1];
                  if (v592 == (uint64_t *)v162)
                  {
                    if (v590[2] == v692
                      && __PAIR64__(*((unsigned __int8 *)v590 + 33), *((unsigned __int8 *)v590 + 32)) == __PAIR64__(HIBYTE(v694), v694))
                    {
                      goto LABEL_870;
                    }
                  }
                  else if (((unint64_t)v592 & ((unint64_t)v698[1] - 1)) != v4)
                  {
                    goto LABEL_786;
                  }
                  uint64_t v590 = (uint64_t **)*v590;
                  if (!v590) {
                    goto LABEL_786;
                  }
                }
              }
              do
              {
                unint64_t v591 = (unint64_t)v590[1];
                if (v591 == v162)
                {
                  if (v590[2] == v692
                    && __PAIR64__(*((unsigned __int8 *)v590 + 33), *((unsigned __int8 *)v590 + 32)) == __PAIR64__(HIBYTE(v694), v694))
                  {
                    goto LABEL_870;
                  }
                }
                else
                {
                  if ((void *)v591 >= v698[1]) {
                    v591 %= (unint64_t)v698[1];
                  }
                  if (v591 != v4) {
                    break;
                  }
                }
                uint64_t v590 = (uint64_t **)*v590;
              }
              while (v590);
            }
          }
        }
LABEL_786:
        int v593 = operator new(0x28uLL);
        uint64_t v594 = v593;
        *int v593 = 0;
        v593[1] = v162;
        v593[2] = v692;
        v593[3] = v693;
        if (v693) {
          atomic_fetch_add_explicit(&v693->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((_WORD *)v593 + 16) = v694;
        float v595 = (float)((unint64_t)v699[1] + 1);
        if (!v163 || (float)(v700 * (float)v163) < v595)
        {
          BOOL v596 = (v163 & (v163 - 1)) == 0;
          if (v163 < 3) {
            BOOL v596 = 0;
          }
          unint64_t v597 = (2 * v163) | !v596;
          unint64_t v598 = vcvtps_u32_f32(v595 / v700);
          if (v597 <= v598) {
            size_t prime = v598;
          }
          else {
            size_t prime = v597;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
          }
          unint64_t v163 = (unint64_t)v698[1];
          if ((void *)prime > v698[1])
          {
LABEL_800:
            if (prime >> 61) {
LABEL_941:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            uint64_t v600 = operator new(8 * prime);
            uint64_t v601 = v698[0];
            v698[0] = v600;
            if (v601) {
              operator delete(v601);
            }
            uint64_t v602 = 0;
            v698[1] = (void *)prime;
            do
              *((void *)v698[0] + v602++) = 0;
            while (prime != v602);
            v603 = (void **)v699[0];
            if (!v699[0]) {
              goto LABEL_846;
            }
            size_t v604 = *((void *)v699[0] + 1);
            size_t v605 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              size_t v606 = v604 & v605;
              *((void *)v698[0] + v606) = v699;
              for (uint64_t i = *v603; *v603; uint64_t i = *v603)
              {
                size_t v608 = i[1] & v605;
                if (v608 == v606)
                {
                  v603 = (void **)i;
                }
                else if (*((void *)v698[0] + v608))
                {
                  std::__shared_weak_count *v603 = (void *)*i;
                  uint64_t v609 = 8 * v608;
                  *uint64_t i = **(void **)((char *)v698[0] + v609);
                  **(void **)((char *)v698[0] + v609) = i;
                }
                else
                {
                  *((void *)v698[0] + v608) = v603;
                  v603 = (void **)i;
                  size_t v606 = v608;
                }
              }
              goto LABEL_846;
            }
            if (v604 >= prime) {
              v604 %= prime;
            }
            *((void *)v698[0] + v604) = v699;
            uint64_t v620 = *v603;
            if (!*v603)
            {
LABEL_846:
              unint64_t v163 = prime;
              goto LABEL_847;
            }
            while (2)
            {
              size_t v622 = v620[1];
              if (v622 >= prime) {
                v622 %= prime;
              }
              if (v622 != v604)
              {
                if (!*((void *)v698[0] + v622))
                {
                  *((void *)v698[0] + v622) = v603;
LABEL_851:
                  v603 = (void **)v620;
                  uint64_t v620 = (void *)*v620;
                  size_t v604 = v622;
                  if (!v620) {
                    goto LABEL_846;
                  }
                  continue;
                }
                std::__shared_weak_count *v603 = (void *)*v620;
                uint64_t v621 = 8 * v622;
                *uint64_t v620 = **(void **)((char *)v698[0] + v621);
                **(void **)((char *)v698[0] + v621) = v620;
                uint64_t v620 = v603;
              }
              break;
            }
            size_t v622 = v604;
            goto LABEL_851;
          }
          if ((void *)prime < v698[1])
          {
            unint64_t v610 = vcvtps_u32_f32((float)(unint64_t)v699[1] / v700);
            if (v698[1] < (void *)3
              || (uint8x8_t v611 = (uint8x8_t)vcnt_s8((int8x8_t)v698[1]), v611.i16[0] = vaddlv_u8(v611), v611.u32[0] > 1uLL))
            {
              unint64_t v610 = std::__next_prime(v610);
            }
            else
            {
              uint64_t v612 = 1 << -(char)__clz(v610 - 1);
              if (v610 >= 2) {
                unint64_t v610 = v612;
              }
            }
            if (prime <= v610) {
              size_t prime = v610;
            }
            if (prime >= v163)
            {
              unint64_t v163 = (unint64_t)v698[1];
            }
            else
            {
              if (prime) {
                goto LABEL_800;
              }
              uint64_t v626 = v698[0];
              v698[0] = 0;
              if (v626) {
                operator delete(v626);
              }
              unint64_t v163 = 0;
              v698[1] = 0;
            }
          }
LABEL_847:
          if ((v163 & (v163 - 1)) != 0)
          {
            if (v162 >= v163) {
              unint64_t v4 = v162 % v163;
            }
            else {
              unint64_t v4 = v162;
            }
          }
          else
          {
            unint64_t v4 = (v163 - 1) & v162;
          }
        }
        uint64_t v623 = v698[0];
        unint64_t v624 = (void *)*((void *)v698[0] + v4);
        if (v624)
        {
          *(void *)uint64_t v594 = *v624;
          goto LABEL_868;
        }
        *(void **)uint64_t v594 = v699[0];
        v699[0] = v594;
        v623[v4] = v699;
        if (*(void *)v594)
        {
          unint64_t v625 = *(void *)(*(void *)v594 + 8);
          if ((v163 & (v163 - 1)) != 0)
          {
            if (v625 >= v163) {
              v625 %= v163;
            }
          }
          else
          {
            v625 &= v163 - 1;
          }
          unint64_t v624 = (char *)v698[0] + 8 * v625;
LABEL_868:
          *unint64_t v624 = v594;
        }
        ++v699[1];
        goto LABEL_870;
      }
      while (1)
      {
        unint64_t v4 = (unint64_t)v696;
        uint64_t v172 = (char *)v697;
        if ((char *)v697 != v696)
        {
          char v173 = (char *)v697;
          do
          {
            uint64_t v175 = (void *)*((void *)v173 - 3);
            v173 -= 24;
            unint64_t v174 = v175;
            if (v175)
            {
              *((void *)v172 - 2) = v174;
              operator delete(v174);
            }
            uint64_t v172 = v173;
          }
          while (v173 != v696);
        }
        *(void *)&long long v697 = v696;
        float v176 = (char *)*v692;
        uint64_t v177 = (char *)v692[1];
        if ((char *)*v692 == v177)
        {
          double v181 = 1.79769313e308;
          double v182 = -1.79769313e308;
          double v179 = 1.79769313e308;
          double v180 = -1.79769313e308;
          goto LABEL_167;
        }
        unint64_t v178 = v177 - v176 - 16;
        if (v178 < 0x30) {
          break;
        }
        uint64_t v183 = (v178 >> 4) + 1;
        float64x2_t v184 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        float64x2_t v185 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        uint8x8_t v186 = (const double *)(v176 + 32);
        uint64_t v187 = v183 & 0x1FFFFFFFFFFFFFFCLL;
        float64x2_t v188 = v185;
        float64x2_t v189 = v184;
        float64x2_t v190 = v184;
        float64x2_t v191 = v184;
        float64x2_t v192 = v185;
        float64x2_t v193 = v185;
        do
        {
          char v194 = v186 - 4;
          float64x2x2_t v732 = vld2q_f64(v194);
          float64x2x2_t v735 = vld2q_f64(v186);
          float64x2_t v184 = vminnmq_f64(v732.val[0], v184);
          float64x2_t v189 = vminnmq_f64(v735.val[0], v189);
          float64x2_t v192 = vmaxnmq_f64(v192, v732.val[0]);
          float64x2_t v193 = vmaxnmq_f64(v193, v735.val[0]);
          float64x2_t v190 = vminnmq_f64(v732.val[1], v190);
          float64x2_t v191 = vminnmq_f64(v735.val[1], v191);
          float64x2_t v185 = vmaxnmq_f64(v185, v732.val[1]);
          float64x2_t v188 = vmaxnmq_f64(v188, v735.val[1]);
          v186 += 8;
          v187 -= 4;
        }
        while (v187);
        double v182 = vmaxnmvq_f64(vmaxnmq_f64(v192, v193));
        double v181 = vminnmvq_f64(vminnmq_f64(v190, v191));
        double v179 = vminnmvq_f64(vminnmq_f64(v184, v189));
        double v180 = vmaxnmvq_f64(vmaxnmq_f64(v185, v188));
        if (v183 != (v183 & 0x1FFFFFFFFFFFFFFCLL))
        {
          v176 += 16 * (v183 & 0x1FFFFFFFFFFFFFFCLL);
          do
          {
LABEL_166:
            double v195 = *(double *)v176;
            double v196 = *((double *)v176 + 1);
            v176 += 16;
            double v179 = fmin(v195, v179);
            double v182 = fmax(v182, v195);
            double v181 = fmin(v196, v181);
            double v180 = fmax(v180, v196);
          }
          while (v176 != v177);
        }
LABEL_167:
        unint64_t v682 = (uint64_t *)v158;
        char v197 = v158[2];
        char v198 = (char *)*v197;
        float32x4_t v199 = (char *)v197[1];
        if ((char *)*v197 == v199)
        {
          double v165 = 1.79769313e308;
          double v166 = -1.79769313e308;
          double v167 = 1.79769313e308;
          double v168 = -1.79769313e308;
          goto LABEL_142;
        }
        unint64_t v200 = v199 - v198 - 16;
        if (v200 < 0x30)
        {
          double v167 = 1.79769313e308;
          double v168 = -1.79769313e308;
          double v165 = 1.79769313e308;
          double v166 = -1.79769313e308;
          goto LABEL_174;
        }
        uint64_t v201 = (v200 >> 4) + 1;
        float64x2_t v202 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
        float64x2_t v203 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        uint64_t v204 = (const double *)(v198 + 32);
        uint64_t v205 = v201 & 0x1FFFFFFFFFFFFFFCLL;
        float64x2_t v206 = v203;
        float64x2_t v207 = v202;
        float64x2_t v208 = v202;
        float64x2_t v209 = v202;
        float64x2_t v210 = v203;
        float64x2_t v211 = v203;
        do
        {
          uint64_t v212 = v204 - 4;
          float64x2x2_t v737 = vld2q_f64(v212);
          float64x2x2_t v739 = vld2q_f64(v204);
          float64x2_t v202 = vminnmq_f64(v737.val[0], v202);
          float64x2_t v207 = vminnmq_f64(v739.val[0], v207);
          float64x2_t v210 = vmaxnmq_f64(v210, v737.val[0]);
          float64x2_t v211 = vmaxnmq_f64(v211, v739.val[0]);
          float64x2_t v208 = vminnmq_f64(v737.val[1], v208);
          float64x2_t v209 = vminnmq_f64(v739.val[1], v209);
          float64x2_t v203 = vmaxnmq_f64(v203, v737.val[1]);
          float64x2_t v206 = vmaxnmq_f64(v206, v739.val[1]);
          v204 += 8;
          v205 -= 4;
        }
        while (v205);
        double v166 = vmaxnmvq_f64(vmaxnmq_f64(v210, v211));
        double v165 = vminnmvq_f64(vminnmq_f64(v208, v209));
        double v167 = vminnmvq_f64(vminnmq_f64(v202, v207));
        double v168 = vmaxnmvq_f64(vmaxnmq_f64(v203, v206));
        if (v201 != (v201 & 0x1FFFFFFFFFFFFFFCLL))
        {
          v198 += 16 * (v201 & 0x1FFFFFFFFFFFFFFCLL);
          do
          {
LABEL_174:
            double v213 = *(double *)v198;
            double v214 = *((double *)v198 + 1);
            v198 += 16;
            double v167 = fmin(v213, v167);
            double v166 = fmax(v166, v213);
            double v165 = fmin(v214, v165);
            double v168 = fmax(v168, v214);
          }
          while (v198 != v199);
        }
LABEL_142:
        if (v182 <= v167 || v179 >= v166 || v180 <= v165 || v181 >= v168) {
          goto LABEL_152;
        }
        long long v720 = 0uLL;
        uint64_t v724 = 0;
        uint64_t v725 = 0;
        uint64_t v721 = 0;
        uint64_t v723 = (uint64_t *)&v724;
        uint64_t v727 = 0;
        uint64_t v728 = 0;
        uint64_t v726 = 0;
        unint64_t v707 = 0;
        unint64_t v708 = 0;
        uint64_t v709 = 0;
        uint64_t v704 = 0;
        unint64_t v705 = 0;
        unint64_t v706 = 0;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(0);
        uint64_t v724 = 0;
        uint64_t v725 = 0;
        uint64_t v723 = (uint64_t *)&v724;
        float v215 = v726;
        int v216 = v727;
        if (v726 != v727)
        {
          do
          {
            if (*v215) {
              MEMORY[0x1A6239270](*v215, 0x1020C406C923FA7);
            }
            ++v215;
          }
          while (v215 != v216);
          float v215 = v726;
        }
        uint64_t v727 = v215;
        uint64_t v713 = &v713;
        BOOL v714 = &v713;
        uint64_t v715 = 0;
        geo::MartinezPolygonUnion<double>::addPolygonPoints((uint64_t)&v720, v692);
        geo::MartinezPolygonUnion<double>::addPolygonPoints((uint64_t)&v720, v197);
LABEL_185:
        while (2)
        {
          uint64_t v219 = *((void *)&v720 + 1);
          unint64_t v218 = v720;
          if ((void)v720 != *((void *)&v720 + 1))
          {
            uint64_t v220 = *(void *)v720;
            uint64_t v221 = *((void *)&v720 + 1) - v720;
            if ((uint64_t)(*((void *)&v720 + 1) - v720) >= 9)
            {
              uint64_t v688 = *(void *)v720;
              uint64_t v222 = 0;
              uint64_t v223 = v221 >> 3;
              int64_t v224 = (unint64_t)((v221 >> 3) - 2) >> 1;
              uint64_t v225 = (uint64_t *)v720;
              do
              {
                uint64_t v226 = &v225[v222 + 1];
                uint64_t v227 = (2 * v222) | 1;
                uint64_t v228 = 2 * v222 + 2;
                if (v228 < v223
                  && !geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v226, v225[v222 + 2]))
                {
                  ++v226;
                  uint64_t v227 = v228;
                }
                *uint64_t v225 = *v226;
                uint64_t v225 = v226;
                uint64_t v222 = v227;
              }
              while (v227 <= v224);
              size_t v229 = (uint64_t *)(v219 - 8);
              if (v226 == (uint64_t *)(v219 - 8))
              {
                uint64_t v220 = v688;
                uint64_t *v226 = v688;
              }
              else
              {
                uint64_t *v226 = *v229;
                uint64_t v220 = v688;
                *size_t v229 = v688;
                uint64_t v230 = (uint64_t)v226 - v218 + 8;
                if (v230 >= 9)
                {
                  unint64_t v231 = (((unint64_t)v230 >> 3) - 2) >> 1;
                  uint64_t v232 = (uint64_t *)(v218 + 8 * v231);
                  uint64_t v233 = *v232;
                  uint64_t v234 = *v226;
                  if (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v232, *v226))
                  {
                    do
                    {
                      uint64_t v235 = v232;
                      uint64_t *v226 = v233;
                      if (!v231) {
                        break;
                      }
                      unint64_t v231 = (v231 - 1) >> 1;
                      uint64_t v232 = (uint64_t *)(v218 + 8 * v231);
                      uint64_t v233 = *v232;
                      uint64_t v226 = v235;
                    }
                    while (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v232, v234));
                    *uint64_t v235 = v234;
                  }
                }
              }
            }
            *((void *)&v720 + 1) -= 8;
            if (*(unsigned char *)(v220 + 36) == 1)
            {
              *(void *)&long long v716 = v220;
              std::__tree<geo::MartinezPolygonUnion<double>::VerticalIndex,std::less<geo::MartinezPolygonUnion<double>::VerticalIndex>,std::allocator<geo::MartinezPolygonUnion<double>::VerticalIndex>>::__emplace_unique_key_args<geo::MartinezPolygonUnion<double>::VerticalIndex,geo::MartinezPolygonUnion<double>::VerticalIndex>(&v723, (uint64_t *)&v716, v220);
              *(void *)&long long v716 = v220;
              double v236 = v724;
              uint64_t v237 = &v724;
              __n128 v238 = v724;
              if (v724)
              {
                do
                {
                  uint64_t v239 = v237;
                  double v240 = v238 + 4;
                  int v241 = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<((uint64_t *)&v716, v238 + 4);
                  if (v241) {
                    uint64_t v242 = v238;
                  }
                  else {
                    uint64_t v242 = v238 + 1;
                  }
                  if (v241) {
                    uint64_t v237 = (void **)v238;
                  }
                  else {
                    uint64_t v237 = v239;
                  }
                  __n128 v238 = (void *)*v242;
                }
                while (*v242);
                if (v237 == &v724)
                {
                  uint64_t v244 = 0;
                }
                else
                {
                  unint64_t v243 = (uint64_t *)(v239 + 4);
                  if (v241) {
                    unint64_t v243 = v240;
                  }
                  uint64_t v244 = *v243;
                }
                *(void *)&long long v716 = v220;
                uint64_t v246 = (uint64_t *)&v724;
                do
                {
                  int v319 = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(v236 + 4, (uint64_t *)&v716);
                  long long v320 = v236 + 1;
                  if (!v319)
                  {
                    long long v320 = v236;
                    uint64_t v246 = v236;
                  }
                  double v236 = (void *)*v320;
                }
                while (*v320);
              }
              else
              {
                uint64_t v244 = 0;
                uint64_t v246 = (uint64_t *)&v724;
              }
              if (v246 == v723)
              {
                uint64_t v323 = 0;
              }
              else
              {
                uint64_t v321 = *v246;
                if (*v246)
                {
                  do
                  {
                    long long v322 = (uint64_t *)v321;
                    uint64_t v321 = *(void *)(v321 + 8);
                  }
                  while (v321);
                }
                else
                {
                  do
                  {
                    long long v322 = (uint64_t *)v246[2];
                    BOOL v39 = *v322 == (void)v246;
                    uint64_t v246 = v322;
                  }
                  while (v39);
                }
                uint64_t v323 = v322[4];
                if (v323)
                {
                  if (*(_DWORD *)(v323 + 32) == *(_DWORD *)(v220 + 32))
                  {
                    *(unsigned char *)(v220 + 48) = *(unsigned char *)(v323 + 48);
                    char v324 = *(unsigned char *)(v323 + 49) ^ 1;
                  }
                  else
                  {
                    *(unsigned char *)(v220 + 48) = *(unsigned char *)(v323 + 49) ^ 1;
                    char v324 = *(unsigned char *)(v323 + 48);
                  }
                  *(unsigned char *)(v220 + 49) = v324;
                }
              }
              geo::MartinezPolygonUnion<double>::possibleIntersects((uint64_t)&v720, v220, v244);
              geo::MartinezPolygonUnion<double>::possibleIntersects((uint64_t)&v720, v220, v323);
              continue;
            }
            uint64_t v245 = *(void *)(v220 + 40);
            if (!v245) {
              continue;
            }
            if (*(unsigned char *)(v245 + 50))
            {
              if (*(unsigned char *)(v245 + 51) || !*(unsigned char *)(v245 + 52)) {
                goto LABEL_308;
              }
            }
            else if (*(unsigned char *)(v245 + 48))
            {
              goto LABEL_308;
            }
            int v247 = v714;
            if (v714 == &v713) {
              goto LABEL_307;
            }
            unsigned int v248 = &v713;
            uint64_t v689 = v220;
            while (v248 == &v713)
            {
              if (geo::MartinezPolygonUnion<double>::Chain::add((uint64_t)(v247 + 2), (double *)v245, *(_DWORD *)(v245 + 32)))
              {
                unsigned int v248 = v247;
              }
              else
              {
                unsigned int v248 = &v713;
              }
LABEL_305:
              int v247 = (void *)v247[1];
              if (v247 == &v713)
              {
LABEL_306:
                if (v248 == &v713)
                {
LABEL_307:
                  uint64_t v305 = operator new(0x30uLL);
                  void *v305 = 0;
                  v305[1] = 0;
                  int v306 = *(_DWORD *)(v245 + 32);
                  v305[2] = 0;
                  v305[3] = 0;
                  v305[4] = 0;
                  double v307 = operator new(0x20uLL);
                  v305[2] = v307;
                  v305[4] = v307 + 2;
                  long long v308 = *(_OWORD *)(v245 + 16);
                  _OWORD *v307 = *(_OWORD *)v245;
                  v307[1] = v308;
                  v305[3] = v307 + 2;
                  *((unsigned char *)v305 + 40) = 0;
                  *((_DWORD *)v305 + 11) = v306;
                  long long v309 = v713;
                  v713[1] = v305;
                  void *v305 = v309;
                  v305[1] = &v713;
                  uint64_t v713 = v305;
                  ++v715;
                }
LABEL_308:
                *(void *)&long long v716 = v220;
                float v310 = v724;
                long long v311 = &v724;
                char v312 = v724;
                if (v724)
                {
                  do
                  {
                    long long v313 = v311;
                    double v314 = v312 + 4;
                    int v315 = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<((uint64_t *)&v716, v312 + 4);
                    if (v315) {
                      long long v316 = v312;
                    }
                    else {
                      long long v316 = v312 + 1;
                    }
                    if (v315) {
                      long long v311 = (void **)v312;
                    }
                    else {
                      long long v311 = v313;
                    }
                    char v312 = (void *)*v316;
                  }
                  while (*v316);
                  if (v311 == &v724)
                  {
                    uint64_t v318 = 0;
                  }
                  else
                  {
                    long long v317 = (uint64_t *)(v313 + 4);
                    if (v315) {
                      long long v317 = v314;
                    }
                    uint64_t v318 = *v317;
                  }
                  *(void *)&long long v716 = v220;
                  char v325 = (uint64_t *)&v724;
                  do
                  {
                    int v326 = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(v310 + 4, (uint64_t *)&v716);
                    double v327 = v310 + 1;
                    if (!v326)
                    {
                      double v327 = v310;
                      char v325 = v310;
                    }
                    float v310 = (void *)*v327;
                  }
                  while (*v327);
                }
                else
                {
                  uint64_t v318 = 0;
                  char v325 = (uint64_t *)&v724;
                }
                if (v325 == v723)
                {
                  uint64_t v217 = 0;
                }
                else
                {
                  uint64_t v328 = *v325;
                  if (*v325)
                  {
                    do
                    {
                      long long v329 = (uint64_t *)v328;
                      uint64_t v328 = *(void *)(v328 + 8);
                    }
                    while (v328);
                  }
                  else
                  {
                    do
                    {
                      long long v329 = (uint64_t *)v325[2];
                      BOOL v39 = *v329 == (void)v325;
                      char v325 = v329;
                    }
                    while (v39);
                  }
                  uint64_t v217 = v329[4];
                }
                *(void *)&long long v716 = v245;
                std::__tree<geo::MartinezPolygonUnion<double>::VerticalIndex,std::less<geo::MartinezPolygonUnion<double>::VerticalIndex>,std::allocator<geo::MartinezPolygonUnion<double>::VerticalIndex>>::__erase_unique<geo::MartinezPolygonUnion<double>::VerticalIndex>(&v723, (uint64_t *)&v716);
                geo::MartinezPolygonUnion<double>::possibleIntersects((uint64_t)&v720, v217, v318);
                goto LABEL_185;
              }
            }
            unint64_t v684 = (void **)(v248 + 2);
            while (1)
            {
              uint64_t v249 = (double **)(v247 + 2);
              BOOL v250 = geo::MartinezPolygonUnion<double>::Chain::add((uint64_t)(v247 + 2), (double *)v245, *(_DWORD *)(v245 + 32));
              if (v248 == v247 || !v250) {
                goto LABEL_305;
              }
              if (!(*((unsigned __int8 *)v248 + 40) | *((unsigned __int8 *)v247 + 40))) {
                break;
              }
              long long v254 = *v249;
LABEL_297:
              uint64_t v302 = *v247;
              long long v303 = (void *)v247[1];
              *(void *)(v302 + 8) = v303;
              *(void *)v247[1] = v302;
              --v715;
              if (v254)
              {
                v247[3] = v254;
                operator delete(v254);
              }
              operator delete(v247);
              int v247 = v303;
              if (v303 == &v713) {
                goto LABEL_306;
              }
            }
            unint64_t v252 = (double *)v248[2];
            long long v253 = (double *)v248[3];
            long long v254 = *v249;
            if (v252 == v253 || (unint64_t v255 = (double *)v247[3], v254 == v255))
            {
LABEL_296:
              uint64_t v220 = v689;
              goto LABEL_297;
            }
            double v257 = *v254;
            double v256 = v254[1];
            double v258 = v254[2] + *v254;
            double v259 = v254[3] + v256;
            double v260 = *v252;
            if (vabdd_f64(*v252, v258) >= 1.0e-12
              || (double v261 = v252[1], vabdd_f64(v261, v259) >= 1.0e-12)
              || fabs(v260 - v257 + v252[2]) >= 1.0e-12
              || fabs(v252[3] - v256 + v261) >= 1.0e-12)
            {
              double v266 = *(v255 - 4);
              double v265 = *(v255 - 3);
              double v267 = *(v255 - 2) + v266;
              double v268 = *(v255 - 1) + v265;
              double v269 = *(v253 - 4);
              if (vabdd_f64(v269, v267) >= 1.0e-12
                || (double v270 = *(v253 - 3), vabdd_f64(v270, v268) >= 1.0e-12)
                || fabs(v269 - v266 + *(v253 - 2)) >= 1.0e-12
                || fabs(*(v253 - 1) - v265 + v270) >= 1.0e-12)
              {
                if (vabdd_f64(v260, v266) >= 1.0e-12
                  || (double v271 = v252[1], vabdd_f64(v271, v265) >= 1.0e-12)
                  || fabs(v260 - v267 + v252[2]) >= 1.0e-12
                  || fabs(v252[3] - v268 + v271) >= 1.0e-12)
                {
                  if (vabdd_f64(v269, v257) >= 1.0e-12
                    || (double v272 = *(v253 - 3), vabdd_f64(v272, v256) >= 1.0e-12)
                    || fabs(v269 - v258 + *(v253 - 2)) >= 1.0e-12
                    || fabs(*(v253 - 1) - v259 + v272) >= 1.0e-12)
                  {
                    char v279 = 1;
                    goto LABEL_292;
                  }
                  uint64_t v263 = 0;
                  int v262 = 0;
                  char v264 = 0;
                }
                else
                {
                  uint64_t v263 = 0;
                  int v262 = 1;
                  char v264 = 1;
                }
              }
              else
              {
                char v264 = 0;
                uint64_t v263 = 1;
                int v262 = 1;
              }
            }
            else
            {
              int v262 = 0;
              uint64_t v263 = 1;
              char v264 = 1;
            }
            if ((unint64_t)((char *)v255 - (char *)v254) >= 0x21)
            {
              unint64_t v273 = ((char *)v255 - (char *)v254) >> 5;
              if ((v264 & 1) == 0)
              {
                unint64_t v280 = 1;
                int v680 = v262;
                while (1)
                {
                  unint64_t v283 = v273 + ~v280;
                  if (!v262) {
                    unint64_t v283 = v280;
                  }
                  BOOL v284 = (float64x2_t *)&v254[4 * v283];
                  if (v263)
                  {
                    float64x2_t v285 = v284[1];
                    float64x2_t *v284 = vaddq_f64(v285, *v284);
                    v284[1] = vnegq_f64(v285);
                  }
                  unint64_t v286 = v248[4];
                  if ((unint64_t)v253 < v286)
                  {
                    float64x2_t v281 = v284[1];
                    *(float64x2_t *)long long v253 = *v284;
                    *((float64x2_t *)v253 + 1) = v281;
                    f64 = v253 + 4;
                  }
                  else
                  {
                    uint64_t v287 = (double *)*v684;
                    uint64_t v288 = ((char *)v253 - (unsigned char *)*v684) >> 5;
                    unint64_t v289 = v288 + 1;
                    if ((unint64_t)(v288 + 1) >> 59) {
                      abort();
                    }
                    uint64_t v290 = v263;
                    uint64_t v291 = v286 - (void)v287;
                    if (v291 >> 4 > v289) {
                      unint64_t v289 = v291 >> 4;
                    }
                    if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFE0) {
                      unint64_t v292 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v292 = v289;
                    }
                    if (v292)
                    {
                      if (v292 >> 59) {
                        goto LABEL_941;
                      }
                      unint64_t v293 = (char *)operator new(32 * v292);
                    }
                    else
                    {
                      unint64_t v293 = 0;
                    }
                    float64x2_t v294 = v284[1];
                    unint64_t v295 = (float64x2_t *)&v293[32 * v288];
                    *unint64_t v295 = *v284;
                    v295[1] = v294;
                    uint8x8_t v296 = v295;
                    if (v253 != v287)
                    {
                      do
                      {
                        float64x2_t v297 = *(float64x2_t *)(v253 - 2);
                        v296[-2] = *(float64x2_t *)(v253 - 4);
                        v296[-1] = v297;
                        v296 -= 2;
                        v253 -= 4;
                      }
                      while (v253 != v287);
                      long long v253 = (double *)*v684;
                    }
                    f64 = v295[2].f64;
                    v248[2] = v296;
                    v248[3] = v295 + 2;
                    v248[4] = &v293[32 * v292];
                    if (v253) {
                      operator delete(v253);
                    }
                    uint64_t v263 = v290;
                    int v262 = v680;
                  }
                  v248[3] = f64;
                  ++v280;
                  long long v254 = (double *)v247[2];
                  unint64_t v273 = (uint64_t)(v247[3] - (void)v254) >> 5;
                  long long v253 = f64;
                  if (v280 >= v273) {
                    goto LABEL_291;
                  }
                }
              }
              if (v263)
              {
                uint64_t v274 = -2;
                unint64_t v275 = 1;
                do
                {
                  unint64_t v276 = v273 + v274;
                  if (!v262) {
                    unint64_t v276 = v275;
                  }
                  uint64_t v277 = (float64x2_t *)&v254[4 * v276];
                  float64x2_t v278 = v277[1];
                  float64x2_t *v277 = vaddq_f64(v278, *v277);
                  v277[1] = vnegq_f64(v278);
                  std::vector<gm::LineSegment<double,2>>::insert(v684, *v684, v277);
                  ++v275;
                  long long v254 = (double *)v247[2];
                  unint64_t v273 = (uint64_t)(v247[3] - (void)v254) >> 5;
                  --v274;
                }
                while (v275 < v273);
              }
              else if (v262)
              {
                uint64_t v298 = -2;
                unint64_t v299 = 1;
                do
                {
                  std::vector<gm::LineSegment<double,2>>::insert(v684, *v684, &v254[4 * v273 + 4 * v298]);
                  ++v299;
                  long long v254 = (double *)v247[2];
                  unint64_t v273 = (uint64_t)(v247[3] - (void)v254) >> 5;
                  --v298;
                }
                while (v299 < v273);
              }
              else
              {
                uint64_t v300 = 4;
                unint64_t v301 = 1;
                do
                {
                  std::vector<gm::LineSegment<double,2>>::insert(v684, *v684, &v254[v300]);
                  ++v301;
                  long long v254 = (double *)v247[2];
                  v300 += 4;
                }
                while (v301 < (uint64_t)(v247[3] - (void)v254) >> 5);
              }
            }
LABEL_291:
            char v279 = 0;
            v247[3] = v254;
            unint64_t v252 = (double *)v248[2];
            long long v253 = (double *)v248[3];
            double v269 = *(v253 - 4);
            double v260 = *v252;
LABEL_292:
            if (vabdd_f64(v260, v269 + *(v253 - 2)) < 1.0e-12
              && vabdd_f64(v252[1], *(v253 - 1) + *(v253 - 3)) < 1.0e-12)
            {
              *((unsigned char *)v248 + 40) = 1;
            }
            if ((v279 & 1) == 0)
            {
              int v304 = *((_DWORD *)v248 + 11);
              uint64_t v220 = v689;
              if (v304 != 2 && v304 != *((_DWORD *)v247 + 11)) {
                *((_DWORD *)v248 + 11) = 2;
              }
              goto LABEL_297;
            }
            goto LABEL_296;
          }
          break;
        }
        *(_OWORD *)std::string __p = 0u;
        *(_OWORD *)uint64_t v711 = 0u;
        float v712 = 1.0;
        double v330 = v714;
        if (v714 != &v713)
        {
          while (!*((unsigned char *)v330 + 40))
          {
LABEL_353:
            double v330 = (void *)v330[1];
            if (v330 == &v713)
            {
              unsigned int v384 = v711[0];
              if (v711[0])
              {
                do
                {
                  double v387 = std::vector<std::vector<gm::Matrix<double,2,1>>>::emplace<>((char **)&v707, (uint64_t)v708);
                  int v388 = v704;
                  double v389 = v705;
                  uint64_t v390 = (char *)v705 - (char *)v704;
                  uint64_t v391 = ((char *)v705 - (char *)v704) / 24;
                  int v392 = &v704[3 * v391];
                  if ((unint64_t)v705 >= v706)
                  {
                    uint64_t v405 = v391 + 1;
                    if ((unint64_t)(v391 + 1) > 0xAAAAAAAAAAAAAAALL) {
                      abort();
                    }
                    unint64_t v406 = 0x5555555555555556 * ((uint64_t)(v706 - (void)v704) >> 3);
                    if (v406 <= v405) {
                      unint64_t v406 = v391 + 1;
                    }
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v706 - (void)v704) >> 3) >= 0x555555555555555) {
                      unint64_t v407 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v407 = v406;
                    }
                    v719 = &v706;
                    if (v407)
                    {
                      if (v407 > 0xAAAAAAAAAAAAAAALL) {
                        goto LABEL_941;
                      }
                      double v408 = (char *)operator new(24 * v407);
                    }
                    else
                    {
                      double v408 = 0;
                    }
                    float64x2_t v418 = &v408[24 * v391];
                    *(void *)&long long v716 = v408;
                    *((void *)&v716 + 1) = v418;
                    unint64_t v717 = v418;
                    uint64_t v718 = &v408[24 * v407];
                    if (v391 == v407)
                    {
                      if (v390 < 24)
                      {
                        if ((unint64_t)(v390 + 23) < 0x2F) {
                          unint64_t v420 = 1;
                        }
                        else {
                          unint64_t v420 = 2 * v391;
                        }
                        if (v420 > 0xAAAAAAAAAAAAAAALL) {
                          goto LABEL_941;
                        }
                        char v421 = (char *)operator new(24 * v420);
                        float64x2_t v418 = &v421[24 * (v420 >> 2)];
                        *(void *)&long long v716 = v421;
                        *((void *)&v716 + 1) = v418;
                        unint64_t v717 = v418;
                        uint64_t v718 = &v421[24 * v420];
                        if (v408)
                        {
                          operator delete(v408);
                          float64x2_t v418 = (char *)v717;
                        }
                      }
                      else
                      {
                        if (v405 >= 0) {
                          uint64_t v419 = v391 + 1;
                        }
                        else {
                          uint64_t v419 = v391 + 2;
                        }
                        v418 -= 24 * (v419 >> 1);
                        *((void *)&v716 + 1) = v418;
                        unint64_t v717 = v418;
                      }
                    }
                    *(void *)float64x2_t v418 = 0;
                    *((void *)v418 + 1) = 0;
                    *((void *)v418 + 2) = 0;
                    float64x2_t v422 = (uint64_t *)*((void *)&v716 + 1);
                    double v423 = v717 + 3;
                    v717 += 3;
                    double v424 = v704;
                    if (v704 == v392)
                    {
                      long long v426 = (uint64_t *)*((void *)&v716 + 1);
                    }
                    else
                    {
                      int8x8_t v425 = v392;
                      long long v426 = (uint64_t *)*((void *)&v716 + 1);
                      do
                      {
                        *(v426 - 3) = 0;
                        *(v426 - 2) = 0;
                        v426 -= 3;
                        v426[2] = 0;
                        long long v427 = *(_OWORD *)(v425 - 3);
                        v425 -= 3;
                        *(_OWORD *)long long v426 = v427;
                        v426[2] = v425[2];
                        *int8x8_t v425 = 0;
                        v425[1] = 0;
                        v425[2] = 0;
                      }
                      while (v425 != v424);
                      double v423 = v717;
                    }
                    *((void *)&v716 + 1) = v426;
                    double v428 = v705;
                    if (v705 != v392)
                    {
                      do
                      {
                        *double v423 = 0;
                        v423[1] = 0;
                        v423[2] = 0;
                        *(_OWORD *)double v423 = *(_OWORD *)v392;
                        v423[2] = v392[2];
                        *int v392 = 0;
                        v392[1] = 0;
                        v392[2] = 0;
                        v423 += 3;
                        v392 += 3;
                      }
                      while (v392 != v428);
                      long long v426 = (uint64_t *)*((void *)&v716 + 1);
                      int v392 = v705;
                    }
                    double v429 = (void **)v704;
                    uint64_t v430 = (char *)v706;
                    uint64_t v704 = v426;
                    unint64_t v705 = v423;
                    unint64_t v706 = (unint64_t)v718;
                    unint64_t v717 = v392;
                    uint64_t v718 = v430;
                    *(void *)&long long v716 = v429;
                    *((void *)&v716 + 1) = v429;
                    if (v392 != (uint64_t *)v429)
                    {
                      unsigned __int16 v431 = (void **)v392;
                      do
                      {
                        unint64_t v434 = (char *)*(v431 - 3);
                        v431 -= 3;
                        unint64_t v433 = v434;
                        unint64_t v717 = v431;
                        if (v434)
                        {
                          unsigned __int16 v435 = (char *)*(v392 - 2);
                          double v432 = v433;
                          if (v435 != v433)
                          {
                            unint64_t v436 = (char *)*(v392 - 2);
                            do
                            {
                              uint64_t v438 = (void *)*((void *)v436 - 3);
                              v436 -= 24;
                              double v437 = v438;
                              if (v438)
                              {
                                *((void *)v435 - 2) = v437;
                                operator delete(v437);
                              }
                              unsigned __int16 v435 = v436;
                            }
                            while (v436 != v433);
                            double v432 = *v431;
                          }
                          *(v392 - 2) = (uint64_t)v433;
                          operator delete(v432);
                          unsigned __int16 v431 = (void **)v717;
                        }
                        int v392 = (uint64_t *)v431;
                      }
                      while (v431 != v429);
                      int v392 = (uint64_t *)v716;
                    }
                    if (v392) {
                      operator delete(v392);
                    }
                    int v392 = v422;
                  }
                  else if (v392 == v705)
                  {
                    uint64_t *v705 = 0;
                    v389[1] = 0;
                    v389[2] = 0;
                    unint64_t v705 = v389 + 3;
                    int v392 = v389;
                  }
                  else
                  {
                    double v393 = v705 - 3;
                    char v394 = v705;
                    char v395 = v705 - 3;
                    if ((unint64_t)v705 >= 0x18)
                    {
                      do
                      {
                        *char v394 = 0;
                        v394[1] = 0;
                        v394[2] = 0;
                        *(_OWORD *)char v394 = *(_OWORD *)v395;
                        v394[2] = v395[2];
                        uint64_t *v395 = 0;
                        v395[1] = 0;
                        v395[2] = 0;
                        v394 += 3;
                        v395 += 3;
                      }
                      while (v395 < v389);
                    }
                    unint64_t v705 = v394;
                    if (v389 != v392 + 3)
                    {
                      uint64_t v396 = v389;
                      do
                      {
                        double v400 = (char *)*(v396 - 3);
                        v396 -= 3;
                        double v399 = v400;
                        if (v400)
                        {
                          double v401 = (char *)*(v389 - 2);
                          double v397 = v399;
                          if (v401 != v399)
                          {
                            int v402 = (char *)*(v389 - 2);
                            do
                            {
                              uint64_t v404 = (void *)*((void *)v402 - 3);
                              v402 -= 24;
                              double v403 = v404;
                              if (v404)
                              {
                                *((void *)v401 - 2) = v403;
                                operator delete(v403);
                              }
                              double v401 = v402;
                            }
                            while (v402 != v399);
                            double v397 = (void *)*v396;
                          }
                          *(v389 - 2) = (uint64_t)v399;
                          operator delete(v397);
                          *uint64_t v396 = 0;
                          v396[1] = 0;
                          v396[2] = 0;
                        }
                        *(_OWORD *)(v389 - 3) = *(_OWORD *)(v393 - 3);
                        unsigned int v398 = v393 - 3;
                        *(v389 - 1) = *(v393 - 1);
                        *unsigned int v398 = 0;
                        v398[1] = 0;
                        v398[2] = 0;
                        double v389 = v396;
                        v393 -= 3;
                      }
                      while (v398 != v392);
                    }
                    uint64_t v409 = *v392;
                    if (*v392)
                    {
                      double v410 = &v388[3 * v391];
                      uint64_t v413 = v410[1];
                      char v412 = v410 + 1;
                      uint64_t v411 = v413;
                      double v414 = (void *)*v392;
                      if (v413 != v409)
                      {
                        uint64_t v415 = v411;
                        do
                        {
                          double v417 = *(void **)(v415 - 24);
                          v415 -= 24;
                          long double v416 = v417;
                          if (v417)
                          {
                            *(void *)(v411 - 16) = v416;
                            operator delete(v416);
                          }
                          uint64_t v411 = v415;
                        }
                        while (v415 != v409);
                        double v414 = (void *)*v392;
                      }
                      *char v412 = v409;
                      operator delete(v414);
                      *int v392 = 0;
                      v392[1] = 0;
                      v392[2] = 0;
                    }
                    *int v392 = 0;
                    v392[1] = 0;
                    v392[2] = 0;
                  }
                  long long v439 = (uint64_t **)v384[3];
                  uint64_t v440 = **v439;
                  if ((*v439)[1] != v440)
                  {
                    unint64_t v441 = 0;
                    uint64_t v442 = (float64x2_t *)*((void *)v387 + 1);
                    do
                    {
                      uint64_t v444 = (float64x2_t *)(v440 + 32 * v441);
                      unint64_t v445 = *((void *)v387 + 2);
                      if (!v441)
                      {
                        if ((unint64_t)v442 >= v445)
                        {
                          v447 = *(float64x2_t **)v387;
                          uint64_t v448 = ((uint64_t)v442 - *(void *)v387) >> 4;
                          unint64_t v449 = v448 + 1;
                          if ((unint64_t)(v448 + 1) >> 60) {
                            abort();
                          }
                          uint64_t v450 = v445 - (void)v447;
                          if (v450 >> 3 > v449) {
                            unint64_t v449 = v450 >> 3;
                          }
                          if ((unint64_t)v450 >= 0x7FFFFFFFFFFFFFF0) {
                            unint64_t v451 = 0xFFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v451 = v449;
                          }
                          if (v451)
                          {
                            if (v451 >> 60) {
                              goto LABEL_941;
                            }
                            char v452 = (char *)operator new(16 * v451);
                          }
                          else
                          {
                            char v452 = 0;
                          }
                          int v453 = (float64x2_t *)&v452[16 * v448];
                          *int v453 = *v444;
                          uint64_t v454 = v453;
                          if (v442 != v447)
                          {
                            do
                            {
                              v454[-1] = v442[-1];
                              --v454;
                              --v442;
                            }
                            while (v442 != v447);
                            uint64_t v442 = *(float64x2_t **)v387;
                          }
                          char v446 = v453 + 1;
                          *(void *)double v387 = v454;
                          *((void *)v387 + 1) = v453 + 1;
                          *((void *)v387 + 2) = &v452[16 * v451];
                          if (v442) {
                            operator delete(v442);
                          }
                        }
                        else
                        {
                          *uint64_t v442 = *v444;
                          char v446 = v442 + 1;
                        }
                        *((void *)v387 + 1) = v446;
                        unint64_t v445 = *((void *)v387 + 2);
                        uint64_t v442 = v446;
                      }
                      float64x2_t v455 = vaddq_f64(v444[1], *v444);
                      if ((unint64_t)v442 < v445)
                      {
                        *uint64_t v442 = v455;
                        long long v443 = v442 + 1;
                      }
                      else
                      {
                        uint64_t v456 = *(float64x2_t **)v387;
                        uint64_t v457 = ((uint64_t)v442 - *(void *)v387) >> 4;
                        unint64_t v458 = v457 + 1;
                        if ((unint64_t)(v457 + 1) >> 60) {
                          abort();
                        }
                        uint64_t v459 = v445 - (void)v456;
                        if (v459 >> 3 > v458) {
                          unint64_t v458 = v459 >> 3;
                        }
                        if ((unint64_t)v459 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v460 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v460 = v458;
                        }
                        if (v460)
                        {
                          if (v460 >> 60) {
                            goto LABEL_941;
                          }
                          float64x2_t v690 = v455;
                          uint64_t v461 = (char *)operator new(16 * v460);
                          float64x2_t v455 = v690;
                        }
                        else
                        {
                          uint64_t v461 = 0;
                        }
                        uint64_t v462 = (float64x2_t *)&v461[16 * v457];
                        *uint64_t v462 = v455;
                        long long v443 = v462 + 1;
                        if (v442 != v456)
                        {
                          do
                          {
                            v462[-1] = v442[-1];
                            --v462;
                            --v442;
                          }
                          while (v442 != v456);
                          uint64_t v442 = *(float64x2_t **)v387;
                        }
                        *(void *)double v387 = v462;
                        *((void *)v387 + 1) = v443;
                        *((void *)v387 + 2) = &v461[16 * v460];
                        if (v442) {
                          operator delete(v442);
                        }
                      }
                      *((void *)v387 + 1) = v443;
                      ++v441;
                      long long v439 = (uint64_t **)v384[3];
                      uint64_t v440 = **v439;
                      uint64_t v442 = v443;
                    }
                    while (v441 < ((*v439)[1] - v440) >> 5);
                  }
                  if (v384[4] - (void)v439 >= 9uLL)
                  {
                    unint64_t v463 = 1;
                    do
                    {
                      char v464 = std::vector<std::vector<gm::Matrix<double,2,1>>>::emplace<>((char **)v392, v392[1]);
                      uint64_t v465 = v384[3];
                      uint64_t v466 = **(void **)(v465 + 8 * v463);
                      if (*(void *)(*(void *)(v465 + 8 * v463) + 8) != v466)
                      {
                        long long v467 = v464;
                        unint64_t v468 = 0;
                        long long v469 = (float64x2_t *)*((void *)v464 + 1);
                        do
                        {
                          uint64_t v471 = (float64x2_t *)(v466 + 32 * v468);
                          unint64_t v472 = *((void *)v467 + 2);
                          if (!v468)
                          {
                            if ((unint64_t)v469 >= v472)
                            {
                              unint64_t v474 = *(float64x2_t **)v467;
                              uint64_t v475 = ((uint64_t)v469 - *(void *)v467) >> 4;
                              unint64_t v476 = v475 + 1;
                              if ((unint64_t)(v475 + 1) >> 60) {
                                abort();
                              }
                              uint64_t v477 = v472 - (void)v474;
                              if (v477 >> 3 > v476) {
                                unint64_t v476 = v477 >> 3;
                              }
                              if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFF0) {
                                unint64_t v478 = 0xFFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v478 = v476;
                              }
                              if (v478)
                              {
                                if (v478 >> 60) {
                                  goto LABEL_941;
                                }
                                uint64_t v479 = (char *)operator new(16 * v478);
                              }
                              else
                              {
                                uint64_t v479 = 0;
                              }
                              unint64_t v480 = (float64x2_t *)&v479[16 * v475];
                              *unint64_t v480 = *v471;
                              uint64_t v481 = v480;
                              if (v469 != v474)
                              {
                                do
                                {
                                  v481[-1] = v469[-1];
                                  --v481;
                                  --v469;
                                }
                                while (v469 != v474);
                                long long v469 = *(float64x2_t **)v467;
                              }
                              uint64_t v473 = v480 + 1;
                              *(void *)long long v467 = v481;
                              *((void *)v467 + 1) = v480 + 1;
                              *((void *)v467 + 2) = &v479[16 * v478];
                              if (v469) {
                                operator delete(v469);
                              }
                            }
                            else
                            {
                              *long long v469 = *v471;
                              uint64_t v473 = v469 + 1;
                            }
                            *((void *)v467 + 1) = v473;
                            unint64_t v472 = *((void *)v467 + 2);
                            long long v469 = v473;
                          }
                          float64x2_t v482 = vaddq_f64(v471[1], *v471);
                          if ((unint64_t)v469 < v472)
                          {
                            *long long v469 = v482;
                            uint64_t v470 = v469 + 1;
                          }
                          else
                          {
                            char v483 = *(float64x2_t **)v467;
                            uint64_t v484 = ((uint64_t)v469 - *(void *)v467) >> 4;
                            unint64_t v485 = v484 + 1;
                            if ((unint64_t)(v484 + 1) >> 60) {
                              abort();
                            }
                            uint64_t v486 = v472 - (void)v483;
                            if (v486 >> 3 > v485) {
                              unint64_t v485 = v486 >> 3;
                            }
                            if ((unint64_t)v486 >= 0x7FFFFFFFFFFFFFF0) {
                              unint64_t v487 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v487 = v485;
                            }
                            if (v487)
                            {
                              if (v487 >> 60) {
                                goto LABEL_941;
                              }
                              float64x2_t v691 = v482;
                              int v488 = (char *)operator new(16 * v487);
                              float64x2_t v482 = v691;
                            }
                            else
                            {
                              int v488 = 0;
                            }
                            long long v489 = (float64x2_t *)&v488[16 * v484];
                            *long long v489 = v482;
                            uint64_t v470 = v489 + 1;
                            if (v469 != v483)
                            {
                              do
                              {
                                v489[-1] = v469[-1];
                                --v489;
                                --v469;
                              }
                              while (v469 != v483);
                              long long v469 = *(float64x2_t **)v467;
                            }
                            *(void *)long long v467 = v489;
                            *((void *)v467 + 1) = v470;
                            *((void *)v467 + 2) = &v488[16 * v487];
                            if (v469) {
                              operator delete(v469);
                            }
                          }
                          *((void *)v467 + 1) = v470;
                          uint64_t v465 = v384[3];
                          ++v468;
                          uint64_t v466 = **(void **)(v465 + 8 * v463);
                          long long v469 = v470;
                        }
                        while (v468 < (*(void *)(*(void *)(v465 + 8 * v463) + 8) - v466) >> 5);
                      }
                      ++v463;
                    }
                    while (v463 < (v384[4] - v465) >> 3);
                  }
                  unsigned int v384 = (void *)*v384;
                }
                while (v384);
              }
              goto LABEL_487;
            }
          }
          unint64_t v332 = *((unsigned int *)v330 + 11);
          unint64_t v333 = (unint64_t)__p[1];
          if (__p[1])
          {
            uint8x8_t v334 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v334.i16[0] = vaddlv_u8(v334);
            if (v334.u32[0] > 1uLL)
            {
              unint64_t v335 = *((unsigned int *)v330 + 11);
              if (__p[1] <= (void *)v332) {
                unint64_t v335 = v332 % (unint64_t)__p[1];
              }
            }
            else
            {
              unint64_t v335 = (LODWORD(__p[1]) - 1) & v332;
            }
            size_t v336 = (void **)*((void *)__p[0] + v335);
            if (v336)
            {
              uint64_t v337 = *v336;
              if (*v336)
              {
                if (v334.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    unint64_t v339 = v337[1];
                    if (v339 == v332)
                    {
                      if (*((_DWORD *)v337 + 4) == v332) {
                        goto LABEL_454;
                      }
                    }
                    else if ((v339 & ((unint64_t)__p[1] - 1)) != v335)
                    {
                      goto LABEL_375;
                    }
                    uint64_t v337 = (void *)*v337;
                    if (!v337) {
                      goto LABEL_375;
                    }
                  }
                }
                do
                {
                  unint64_t v338 = v337[1];
                  if (v338 == v332)
                  {
                    if (*((_DWORD *)v337 + 4) == v332) {
                      goto LABEL_454;
                    }
                  }
                  else
                  {
                    if ((void *)v338 >= __p[1]) {
                      v338 %= (unint64_t)__p[1];
                    }
                    if (v338 != v335) {
                      break;
                    }
                  }
                  uint64_t v337 = (void *)*v337;
                }
                while (v337);
              }
            }
LABEL_375:
            if (v334.u32[0] > 1uLL)
            {
              unint64_t v218 = *((unsigned int *)v330 + 11);
              if (__p[1] <= (void *)v332) {
                unint64_t v218 = v332 % (unint64_t)__p[1];
              }
            }
            else
            {
              unint64_t v218 = (LODWORD(__p[1]) - 1) & v332;
            }
            uint64_t v340 = (void **)*((void *)__p[0] + v218);
            if (v340)
            {
              uint64_t v337 = *v340;
              if (*v340)
              {
                if (v334.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    unint64_t v342 = v337[1];
                    if (v342 == v332)
                    {
                      if (*((_DWORD *)v337 + 4) == v332) {
                        goto LABEL_454;
                      }
                    }
                    else if ((v342 & ((unint64_t)__p[1] - 1)) != v218)
                    {
                      goto LABEL_394;
                    }
                    uint64_t v337 = (void *)*v337;
                    if (!v337) {
                      goto LABEL_394;
                    }
                  }
                }
                do
                {
                  unint64_t v341 = v337[1];
                  if (v341 == v332)
                  {
                    if (*((_DWORD *)v337 + 4) == v332) {
                      goto LABEL_454;
                    }
                  }
                  else
                  {
                    if ((void *)v341 >= __p[1]) {
                      v341 %= (unint64_t)__p[1];
                    }
                    if (v341 != v218) {
                      break;
                    }
                  }
                  uint64_t v337 = (void *)*v337;
                }
                while (v337);
              }
            }
          }
LABEL_394:
          uint64_t v337 = operator new(0x30uLL);
          *(void *)&long long v716 = v337;
          *((void *)&v716 + 1) = v711;
          *uint64_t v337 = 0;
          v337[1] = v332;
          *((_DWORD *)v337 + 4) = *((_DWORD *)v330 + 11);
          v337[4] = 0;
          v337[5] = 0;
          v337[3] = 0;
          LOBYTE(v717) = 1;
          float v343 = (float)((unint64_t)v711[1] + 1);
          if (v333 && (float)(v712 * (float)v333) >= v343)
          {
            unint64_t v332 = v218;
            goto LABEL_444;
          }
          BOOL v344 = (v333 & (v333 - 1)) != 0;
          if (v333 < 3) {
            BOOL v344 = 1;
          }
          unint64_t v345 = v344 | (2 * v333);
          unint64_t v346 = vcvtps_u32_f32(v343 / v712);
          if (v345 <= v346) {
            size_t v347 = v346;
          }
          else {
            size_t v347 = v345;
          }
          if (v347 == 1)
          {
            size_t v347 = 2;
          }
          else if ((v347 & (v347 - 1)) != 0)
          {
            size_t v347 = std::__next_prime(v347);
            unint64_t v333 = (unint64_t)__p[1];
          }
          if (v347 > v333)
          {
LABEL_407:
            if (v347 >> 61) {
              goto LABEL_941;
            }
            uint64_t v348 = operator new(8 * v347);
            uint64_t v349 = __p[0];
            __p[0] = v348;
            if (v349) {
              operator delete(v349);
            }
            uint64_t v350 = 0;
            __p[1] = (void *)v347;
            do
              *((void *)__p[0] + v350++) = 0;
            while (v347 != v350);
            unint64_t v351 = (void **)v711[0];
            if (!v711[0]) {
              goto LABEL_431;
            }
            size_t v352 = *((void *)v711[0] + 1);
            size_t v353 = v347 - 1;
            if ((v347 & (v347 - 1)) == 0)
            {
              size_t v354 = v352 & v353;
              *((void *)__p[0] + v354) = v711;
              for (uint64_t j = *v351; *v351; uint64_t j = *v351)
              {
                size_t v356 = j[1] & v353;
                if (v356 == v354)
                {
                  unint64_t v351 = (void **)j;
                }
                else if (*((void *)__p[0] + v356))
                {
                  *unint64_t v351 = (void *)*j;
                  uint64_t v357 = 8 * v356;
                  *uint64_t j = **(void **)((char *)__p[0] + v357);
                  **(void **)((char *)__p[0] + v357) = j;
                }
                else
                {
                  *((void *)__p[0] + v356) = v351;
                  unint64_t v351 = (void **)j;
                  size_t v354 = v356;
                }
              }
              goto LABEL_431;
            }
            if (v352 >= v347) {
              v352 %= v347;
            }
            *((void *)__p[0] + v352) = v711;
            size_t v361 = *v351;
            if (!*v351)
            {
LABEL_431:
              unint64_t v333 = v347;
              goto LABEL_432;
            }
            while (2)
            {
              size_t v363 = v361[1];
              if (v363 >= v347) {
                v363 %= v347;
              }
              if (v363 != v352)
              {
                if (!*((void *)__p[0] + v363))
                {
                  *((void *)__p[0] + v363) = v351;
LABEL_436:
                  unint64_t v351 = (void **)v361;
                  size_t v361 = (void *)*v361;
                  size_t v352 = v363;
                  if (!v361) {
                    goto LABEL_431;
                  }
                  continue;
                }
                *unint64_t v351 = (void *)*v361;
                uint64_t v362 = 8 * v363;
                *size_t v361 = **(void **)((char *)__p[0] + v362);
                **(void **)((char *)__p[0] + v362) = v361;
                size_t v361 = v351;
              }
              break;
            }
            size_t v363 = v352;
            goto LABEL_436;
          }
          if (v347 < v333)
          {
            unint64_t v358 = vcvtps_u32_f32((float)(unint64_t)v711[1] / v712);
            if (v333 < 3
              || (uint8x8_t v359 = (uint8x8_t)vcnt_s8((int8x8_t)v333), v359.i16[0] = vaddlv_u8(v359), v359.u32[0] > 1uLL))
            {
              unint64_t v358 = std::__next_prime(v358);
            }
            else
            {
              uint64_t v360 = 1 << -(char)__clz(v358 - 1);
              if (v358 >= 2) {
                unint64_t v358 = v360;
              }
            }
            if (v347 <= v358) {
              size_t v347 = v358;
            }
            if (v347 >= v333)
            {
              unint64_t v333 = (unint64_t)__p[1];
            }
            else
            {
              if (v347) {
                goto LABEL_407;
              }
              unsigned __int8 v383 = __p[0];
              __p[0] = 0;
              if (v383) {
                operator delete(v383);
              }
              unint64_t v333 = 0;
              __p[1] = 0;
            }
          }
LABEL_432:
          if ((v333 & (v333 - 1)) != 0)
          {
            if (v333 <= v332) {
              v332 %= v333;
            }
          }
          else
          {
            unint64_t v332 = (v333 - 1) & v332;
          }
LABEL_444:
          uint64_t v364 = __p[0];
          double v365 = (void *)*((void *)__p[0] + v332);
          if (v365)
          {
            *uint64_t v337 = *v365;
            goto LABEL_452;
          }
          *uint64_t v337 = v711[0];
          v711[0] = v337;
          v364[v332] = v711;
          if (*v337)
          {
            unint64_t v366 = *(void *)(*v337 + 8);
            if ((v333 & (v333 - 1)) != 0)
            {
              if (v366 >= v333) {
                v366 %= v333;
              }
            }
            else
            {
              v366 &= v333 - 1;
            }
            double v365 = (char *)__p[0] + 8 * v366;
LABEL_452:
            *double v365 = v337;
          }
          ++v711[1];
LABEL_454:
          uint64_t v367 = v330 + 2;
          unint64_t v369 = (char *)v337[4];
          unint64_t v368 = v337[5];
          if ((unint64_t)v369 < v368)
          {
            *(void *)unint64_t v369 = v367;
            size_t v331 = v369 + 8;
          }
          else
          {
            int v370 = (char *)v337[3];
            uint64_t v371 = (v369 - v370) >> 3;
            unint64_t v372 = v371 + 1;
            if ((unint64_t)(v371 + 1) >> 61) {
              abort();
            }
            uint64_t v373 = v368 - (void)v370;
            if (v373 >> 2 > v372) {
              unint64_t v372 = v373 >> 2;
            }
            if ((unint64_t)v373 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v218 = v372;
            }
            if (v218)
            {
              if (v218 >> 61) {
                goto LABEL_941;
              }
              uint64_t v374 = (char *)operator new(8 * v218);
            }
            else
            {
              uint64_t v374 = 0;
            }
            uint64_t v375 = &v374[8 * v371];
            *(void *)uint64_t v375 = v367;
            size_t v331 = v375 + 8;
            if (v369 != v370)
            {
              unint64_t v376 = v369 - 8 - v370;
              if (v376 < 0x58) {
                goto LABEL_955;
              }
              if ((unint64_t)(v370 - v374) < 0x20) {
                goto LABEL_955;
              }
              uint64_t v377 = (v376 >> 3) + 1;
              double v378 = &v374[8 * v371 - 16];
              int v379 = (long long *)(v369 - 16);
              uint64_t v380 = v377 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v381 = *v379;
                *((_OWORD *)v378 - 1) = *(v379 - 1);
                *(_OWORD *)double v378 = v381;
                v378 -= 32;
                v379 -= 2;
                v380 -= 4;
              }
              while (v380);
              v375 -= 8 * (v377 & 0x3FFFFFFFFFFFFFFCLL);
              v369 -= 8 * (v377 & 0x3FFFFFFFFFFFFFFCLL);
              if (v377 != (v377 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_955:
                do
                {
                  uint64_t v382 = *((void *)v369 - 1);
                  v369 -= 8;
                  *((void *)v375 - 1) = v382;
                  v375 -= 8;
                }
                while (v369 != v370);
              }
              unint64_t v369 = (char *)v337[3];
            }
            v337[3] = v375;
            v337[4] = v331;
            v337[5] = &v374[8 * v218];
            if (v369) {
              operator delete(v369);
            }
          }
          v337[4] = v331;
          goto LABEL_353;
        }
LABEL_487:
        uint64_t v386 = *((void *)&v720 + 1);
        double v385 = (uint64_t *)v720;
        while (v385 != (uint64_t *)v386)
        {
          uint64_t v490 = v386 - (void)v385;
          if (v386 - (uint64_t)v385 >= 9)
          {
            uint64_t v491 = 0;
            uint64_t v492 = v490 >> 3;
            uint64_t v493 = *v385;
            int64_t v494 = (unint64_t)((v490 >> 3) - 2) >> 1;
            char v495 = v385;
            do
            {
              uint64_t v496 = &v495[v491 + 1];
              uint64_t v497 = (2 * v491) | 1;
              uint64_t v498 = 2 * v491 + 2;
              if (v498 < v492 && !geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v496, v495[v491 + 2]))
              {
                ++v496;
                uint64_t v497 = v498;
              }
              uint64_t *v495 = *v496;
              char v495 = v496;
              uint64_t v491 = v497;
            }
            while (v497 <= v494);
            uint64_t v499 = (uint64_t *)(v386 - 8);
            if (v496 == (uint64_t *)(v386 - 8))
            {
              *uint64_t v496 = v493;
            }
            else
            {
              *uint64_t v496 = *v499;
              *uint64_t v499 = v493;
              uint64_t v500 = (char *)v496 - (char *)v385 + 8;
              if (v500 >= 9)
              {
                unint64_t v501 = (((unint64_t)v500 >> 3) - 2) >> 1;
                uint64_t v502 = &v385[v501];
                uint64_t v503 = *v502;
                uint64_t v504 = *v496;
                if (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v502, *v496))
                {
                  do
                  {
                    uint64_t v505 = v502;
                    *uint64_t v496 = v503;
                    if (!v501) {
                      break;
                    }
                    unint64_t v501 = (v501 - 1) >> 1;
                    uint64_t v502 = &v385[v501];
                    uint64_t v503 = *v502;
                    uint64_t v496 = v505;
                  }
                  while (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v502, v504));
                  *uint64_t v505 = v504;
                }
              }
            }
          }
          double v385 = (uint64_t *)v720;
          uint64_t v386 = *((void *)&v720 + 1) - 8;
          *((void *)&v720 + 1) -= 8;
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v724);
        uint64_t v724 = 0;
        uint64_t v725 = 0;
        uint64_t v723 = (uint64_t *)&v724;
        int v506 = v726;
        uint64_t v507 = v727;
        if (v726 != v727)
        {
          do
          {
            if (*v506) {
              MEMORY[0x1A6239270](*v506, 0x1020C406C923FA7);
            }
            ++v506;
          }
          while (v506 != v507);
          int v506 = v726;
        }
        uint64_t v727 = v506;
        char v508 = v711[0];
        if (v711[0])
        {
          do
          {
            long long v516 = (void *)*v508;
            __int16 v517 = (void *)v508[3];
            if (v517)
            {
              v508[4] = v517;
              operator delete(v517);
            }
            operator delete(v508);
            char v508 = v516;
          }
          while (v516);
        }
        unint64_t v509 = __p[0];
        __p[0] = 0;
        if (v509) {
          operator delete(v509);
        }
        if (v715)
        {
          uint64_t v510 = v713;
          __int16 v511 = v714;
          uint64_t v512 = *v714;
          *(void *)(v512 + 8) = v713[1];
          *(void *)v510[1] = v512;
          uint64_t v715 = 0;
          if (v511 != &v713)
          {
            do
            {
              long long v519 = (void *)v511[1];
              uint64_t v518 = (void *)v511[2];
              if (v518)
              {
                v511[3] = v518;
                operator delete(v518);
              }
              operator delete(v511);
              __int16 v511 = v519;
            }
            while (v519 != &v713);
          }
        }
        char v513 = (const void **)v707;
        char v514 = v708;
        if (v707 != v708)
        {
          uint64_t v515 = v696;
          do
          {
            if ((unint64_t)v515 >= *((void *)&v697 + 1))
            {
              unint64_t v526 = 0xAAAAAAAAAAAAAAABLL * ((v515 - v696) >> 3) + 1;
              if (v526 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              if (0x5555555555555556 * ((uint64_t)(*((void *)&v697 + 1) - (void)v696) >> 3) > v526) {
                unint64_t v526 = 0x5555555555555556 * ((uint64_t)(*((void *)&v697 + 1) - (void)v696) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v697 + 1) - (void)v696) >> 3) >= 0x555555555555555) {
                unint64_t v527 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v527 = v526;
              }
              v719 = (unint64_t *)&v697 + 1;
              if (v527)
              {
                if (v527 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_941;
                }
                uint64_t v528 = (char *)operator new(24 * v527);
              }
              else
              {
                uint64_t v528 = 0;
              }
              uint64_t v529 = &v528[8 * ((v515 - v696) >> 3)];
              *(void *)&long long v716 = v528;
              *((void *)&v716 + 1) = v529;
              int v530 = &v528[24 * v527];
              unint64_t v717 = v529;
              uint64_t v718 = v530;
              *((void *)v529 + 1) = 0;
              *((void *)v529 + 2) = 0;
              *(void *)uint64_t v529 = 0;
              double v532 = *v513;
              v531 = v513[1];
              uint64_t v533 = v531 - (unsigned char *)*v513;
              if (v531 != *v513)
              {
                if (v533 < 0) {
                  abort();
                }
                uint64_t v534 = (char *)operator new(v531 - (unsigned char *)*v513);
                *(void *)uint64_t v529 = v534;
                *((void *)v529 + 1) = v534;
                *((void *)v529 + 2) = &v534[16 * (v533 >> 4)];
                size_t v535 = v533 & 0xFFFFFFFFFFFFFFF0;
                memcpy(v534, v532, v535);
                *((void *)v529 + 1) = &v534[v535];
              }
              uint64_t v520 = v529 + 24;
              unint64_t v717 = v529 + 24;
              if (v515 == v696)
              {
                unint64_t v696 = v529;
                *((void *)&v697 + 1) = v530;
              }
              else
              {
                do
                {
                  int v536 = v529;
                  *((void *)v529 - 2) = 0;
                  *((void *)v529 - 1) = 0;
                  long long v537 = *(_OWORD *)(v515 - 24);
                  v515 -= 24;
                  *(_OWORD *)(v529 - 24) = v537;
                  v529 -= 24;
                  *((void *)v536 - 1) = *((void *)v515 + 2);
                  *(void *)uint64_t v515 = 0;
                  *((void *)v515 + 1) = 0;
                  *((void *)v515 + 2) = 0;
                }
                while (v515 != v696);
                uint64_t v515 = v696;
                uint64_t v538 = (char *)v697;
                unint64_t v696 = v529;
                *((void *)&v697 + 1) = v718;
                uint64_t v520 = (char *)v717;
                if ((char *)v697 != v515)
                {
                  uint64_t v539 = (char *)v697;
                  do
                  {
                    uint64_t v541 = (void *)*((void *)v539 - 3);
                    v539 -= 24;
                    uint64_t v540 = v541;
                    if (v541)
                    {
                      *((void *)v538 - 2) = v540;
                      operator delete(v540);
                    }
                    uint64_t v538 = v539;
                  }
                  while (v539 != v515);
                }
              }
              if (v515) {
                operator delete(v515);
              }
            }
            else
            {
              *(void *)uint64_t v515 = 0;
              *((void *)v515 + 1) = 0;
              *((void *)v515 + 2) = 0;
              uint64_t v522 = *v513;
              uint64_t v521 = v513[1];
              uint64_t v523 = v521 - (unsigned char *)*v513;
              if (v521 != *v513)
              {
                if (v523 < 0) {
                  abort();
                }
                int v524 = (char *)operator new(v521 - (unsigned char *)*v513);
                *(void *)uint64_t v515 = v524;
                *((void *)v515 + 1) = v524;
                *((void *)v515 + 2) = &v524[16 * (v523 >> 4)];
                size_t v525 = v523 & 0xFFFFFFFFFFFFFFF0;
                memcpy(v524, v522, v525);
                *((void *)v515 + 1) = &v524[v525];
              }
              uint64_t v520 = v515 + 24;
            }
            *(void *)&long long v697 = v520;
            v513 += 3;
            uint64_t v515 = v520;
          }
          while (v513 != v514);
        }
        int v542 = (void **)v704;
        uint64_t v543 = v705;
        if (v704 == v705)
        {
          unint64_t v4 = 0;
          v552 = v704;
          a2 = v679;
          if (!v704) {
            goto LABEL_724;
          }
          goto LABEL_723;
        }
        LOBYTE(v4) = 0;
        int v544 = v704;
        a2 = v679;
        do
        {
          unint64_t v4 = (v4 & 1) != 0 || *v544 != v544[1];
          v544 += 3;
        }
        while (v544 != v705);
        if (v704)
        {
          do
          {
            std::string v546 = (void **)(v543 - 3);
            uint64_t v547 = *(v543 - 3);
            if (v547)
            {
              uint64_t v548 = *(v543 - 2);
              v545 = (void *)*(v543 - 3);
              if (v548 != v547)
              {
                uint64_t v549 = *(v543 - 2);
                do
                {
                  uint64_t v551 = *(void **)(v549 - 24);
                  v549 -= 24;
                  int v550 = v551;
                  if (v551)
                  {
                    *(void *)(v548 - 16) = v550;
                    operator delete(v550);
                  }
                  uint64_t v548 = v549;
                }
                while (v549 != v547);
                v545 = *v546;
              }
              *(v543 - 2) = v547;
              operator delete(v545);
            }
            v543 -= 3;
          }
          while (v546 != v542);
          v552 = v704;
LABEL_723:
          unint64_t v705 = (uint64_t *)v542;
          operator delete(v552);
        }
LABEL_724:
        uint64_t v553 = (char *)v707;
        if (v707)
        {
          uint64_t v554 = v708;
          uint64_t v555 = v707;
          if (v708 != v707)
          {
            uint64_t v556 = (char *)v708;
            do
            {
              v558 = (void *)*((void *)v556 - 3);
              v556 -= 24;
              int v557 = v558;
              if (v558)
              {
                *(v554 - 2) = v557;
                operator delete(v557);
              }
              uint64_t v554 = (const void **)v556;
            }
            while (v556 != v553);
            uint64_t v555 = v707;
          }
          unint64_t v708 = (const void **)v553;
          operator delete(v555);
        }
        geo::MartinezPolygonUnion<double>::~MartinezPolygonUnion((uint64_t)&v720);
        if ((v4 & 1) != 0 || (void)v697 - (void)v696 != 24)
        {
LABEL_152:
          uint64_t v158 = (uint64_t **)*v682;
          if (!*v682) {
            goto LABEL_138;
          }
          continue;
        }
        char v559 = operator new(0x30uLL);
        v559[1] = 0;
        v559[2] = 0;
        v559[3] = 0;
        void *v559 = &unk_1EF582F98;
        v559[4] = 0;
        v559[5] = 0;
        uint64_t v561 = *(const void **)v696;
        uint64_t v560 = *((void *)v696 + 1);
        uint64_t v562 = v560 - *(void *)v696;
        if (v560 != *(void *)v696)
        {
          if (v562 < 0) {
            abort();
          }
          int v563 = (char *)operator new(v560 - *(void *)v696);
          v559[3] = v563;
          v559[4] = v563;
          v559[5] = &v563[16 * (v562 >> 4)];
          size_t v564 = v562 & 0xFFFFFFFFFFFFFFF0;
          memcpy(v563, v561, v564);
          v559[4] = &v563[v564];
        }
        unint64_t v565 = v693;
        uint64_t v692 = v559 + 3;
        unint64_t v693 = (std::__shared_weak_count *)v559;
        if (v565 && !atomic_fetch_add(&v565->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
          std::__shared_weak_count::__release_weak(v565);
        }
        if ((char)v694 >= *((char *)v682 + 32)) {
          unsigned __int8 v566 = *((unsigned char *)v682 + 32);
        }
        else {
          unsigned __int8 v566 = v694;
        }
        int v567 = *((char *)v682 + 33);
        if (v567 <= SHIBYTE(v694)) {
          int v567 = SHIBYTE(v694);
        }
        unint64_t v4 = v566 | (v567 << 8);
        __int16 v694 = v4;
        uint64_t v158 = (uint64_t **)std::unordered_set<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>,md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonPairHash,std::equal_to<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>,std::allocator<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>>::erase[abi:nn180100](v698, v682);
        *(void *)&long long v720 = v559 + 3;
        *((void *)&v720 + 1) = v559;
        if (v559) {
          atomic_fetch_add_explicit(v559 + 1, 1uLL, memory_order_relaxed);
        }
        LOWORD(v721) = v4;
        uint64_t v568 = (char *)*v692;
        uint64_t v569 = (char *)v559[4];
        if ((char *)*v692 == v569)
        {
          double v571 = -1.79769313e308;
        }
        else
        {
          unint64_t v570 = v569 - v568 - 16;
          if (v570 >= 0x40)
          {
            uint64_t v572 = (v570 >> 4) + 1;
            uint64_t v573 = v572 & 3;
            if ((v572 & 3) == 0) {
              uint64_t v573 = 4;
            }
            uint64_t v574 = v572 - v573;
            uint64_t v575 = 16 * v574;
            float64x2_t v576 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
            long long v577 = (const double *)(v568 + 32);
            float64x2_t v578 = v576;
            do
            {
              uint64_t v579 = v577 - 4;
              unsigned long long v580 = (unsigned __int128)vld2q_f64(v579);
              unsigned long long v581 = (unsigned __int128)vld2q_f64(v577);
              float64x2_t v576 = vmaxnmq_f64(v576, (float64x2_t)v580);
              float64x2_t v578 = vmaxnmq_f64(v578, (float64x2_t)v581);
              v577 += 8;
              v574 -= 4;
            }
            while (v574);
            v568 += v575;
            double v571 = vmaxnmvq_f64(vmaxnmq_f64(v576, v578));
          }
          else
          {
            double v571 = -1.79769313e308;
          }
          do
          {
            double v582 = *(double *)v568;
            v568 += 16;
            double v571 = fmax(v571, v582);
          }
          while (v568 != v569);
        }
        double v722 = v571;
        LOBYTE(v723) = 0;
        std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::push((uint64_t *)&v701, (uint64_t)&v720);
        unint64_t v583 = (std::__shared_weak_count *)*((void *)&v720 + 1);
        if (*((void *)&v720 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v720 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
          std::__shared_weak_count::__release_weak(v583);
          if (!v158) {
            goto LABEL_138;
          }
        }
        else if (!v158)
        {
          goto LABEL_138;
        }
      }
      double v179 = 1.79769313e308;
      double v180 = -1.79769313e308;
      double v181 = 1.79769313e308;
      double v182 = -1.79769313e308;
      goto LABEL_166;
    }
LABEL_882:
    unint64_t v627 = (uint64_t *)a2[1];
    if (v627 != a2)
    {
      while (1)
      {
        uint64_t v628 = v627[2];
        uint64_t v630 = *(double **)v628;
        uint64_t v629 = *(void *)(v628 + 8);
        int64_t v631 = v629 - *(void *)v628;
        if (v629 != *(void *)v628) {
          break;
        }
LABEL_884:
        unint64_t v627 = (uint64_t *)v627[1];
        if (v627 == a2) {
          goto LABEL_914;
        }
      }
      uint64_t v632 = v631 >> 4;
      uint64_t v633 = (v631 >> 4) - 1;
      if ((unint64_t)(v631 >> 4) <= 1) {
        unint64_t v634 = 1;
      }
      else {
        unint64_t v634 = v631 >> 4;
      }
      if (v634 > 1)
      {
        uint64_t v637 = 0;
        unint64_t v635 = v634 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v638 = v630 + 2;
        double v639 = 0.0;
        uint64_t v640 = (v631 >> 4) - 1;
        double v641 = 0.0;
        do
        {
          uint64_t v642 = v637 | 1;
          v637 += 2;
          if (v640) {
            uint64_t v643 = v642;
          }
          else {
            uint64_t v643 = 0;
          }
          if (v642 == v633) {
            uint64_t v644 = 0;
          }
          else {
            uint64_t v644 = v637;
          }
          uint64_t v645 = &v630[2 * v643];
          double v646 = *(v638 - 1);
          double v647 = *v645 - *(v638 - 2);
          double v648 = *v638;
          double v649 = v638[1];
          v638 += 4;
          double v639 = v639 + (v646 + v645[1]) * v647;
          double v641 = v641 + (v649 + v630[2 * v644 + 1]) * (v630[2 * v644] - v648);
          v640 -= 2;
        }
        while (v637 != v635);
        double v636 = v641 + v639;
        if (v634 == v635)
        {
LABEL_905:
          if (v636 > 0.0)
          {
            if (v631 < 0) {
              abort();
            }
            unint64_t v656 = (char *)operator new(v631);
            size_t v657 = v631 & 0xFFFFFFFFFFFFFFF0;
            memcpy(v656, v630, v657);
            uint64_t v658 = &v656[v657];
            if (v657)
            {
              unint64_t v659 = v658 - 16;
              if (v658 - 16 > v656)
              {
                uint64_t v660 = v656;
                do
                {
                  uint64_t v661 = *(void *)v660;
                  uint64_t v662 = *((void *)v660 + 1);
                  *(void *)uint64_t v660 = *(void *)v659;
                  *((void *)v660 + 1) = *((void *)v659 + 1);
                  *(void *)unint64_t v659 = v661;
                  *((void *)v659 + 1) = v662;
                  v659 -= 16;
                  v660 += 16;
                }
                while (v660 < v659);
              }
            }
            unint64_t v663 = operator new(0x30uLL);
            v663[1] = 0;
            v663[2] = 0;
            v663[3] = v656;
            void *v663 = &unk_1EF582F98;
            v663[4] = v658;
            v663[5] = &v656[16 * v632];
            unint64_t v664 = (std::__shared_weak_count *)v627[3];
            v627[2] = (uint64_t)(v663 + 3);
            v627[3] = (uint64_t)v663;
            if (v664 && !atomic_fetch_add(&v664->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v664->__on_zero_shared)(v664);
              std::__shared_weak_count::__release_weak(v664);
            }
          }
          goto LABEL_884;
        }
      }
      else
      {
        unint64_t v635 = 0;
        double v636 = 0.0;
      }
      unint64_t v650 = &v630[2 * v635 + 1];
      do
      {
        if (v633 == v635) {
          unint64_t v651 = 0;
        }
        else {
          unint64_t v651 = v635 + 1;
        }
        unint64_t v652 = v635 + 1;
        unint64_t v653 = &v630[2 * v651];
        double v654 = *v653 - *(v650 - 1);
        double v655 = *v650;
        v650 += 2;
        double v636 = v636 + (v655 + v653[1]) * v654;
        unint64_t v635 = v652;
      }
      while (v634 != v652);
      goto LABEL_905;
    }
LABEL_914:
    if (v696)
    {
      uint64_t v665 = (char *)v697;
      uint64_t v666 = v696;
      if ((char *)v697 != v696)
      {
        unint64_t v667 = (char *)v697;
        do
        {
          uint64_t v669 = (void *)*((void *)v667 - 3);
          v667 -= 24;
          uint64_t v668 = v669;
          if (v669)
          {
            *((void *)v665 - 2) = v668;
            operator delete(v668);
          }
          uint64_t v665 = v667;
        }
        while (v667 != v696);
        uint64_t v666 = v696;
      }
      operator delete(v666);
    }
    uint64_t v670 = v699[0];
    if (v699[0])
    {
      do
      {
        v671 = v670;
        uint64_t v670 = (void *)*v670;
        uint64_t v672 = (std::__shared_weak_count *)v671[3];
        if (v672 && !atomic_fetch_add(&v672->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v672->__on_zero_shared)(v672);
          std::__shared_weak_count::__release_weak(v672);
        }
        operator delete(v671);
      }
      while (v670);
    }
    unint64_t v673 = v698[0];
    v698[0] = 0;
    if (v673) {
      operator delete(v673);
    }
    uint64_t v674 = (char *)v701;
    if (v701)
    {
      unint64_t v675 = v702;
      if (v702 != v701)
      {
        do
        {
          uint64_t v676 = (std::__shared_weak_count *)*((void *)v675 - 4);
          if (v676)
          {
            if (!atomic_fetch_add(&v676->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
              std::__shared_weak_count::__release_weak(v676);
            }
          }
          v675 -= 40;
        }
        while (v675 != v674);
        uint64_t v674 = (char *)v701;
      }
      operator delete(v674);
    }
  }
}