void sub_1A2491D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,std::less<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,mdm::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    if (*(char *)(a2 + 55) < 0) {
      (*(void (**)(void, void, uint64_t))(**(void **)(a2 + 56) + 40))(*(void *)(a2 + 56), *(void *)(a2 + 32), *(void *)(a2 + 48) & 0x7FFFFFFFFFFFFFFFLL);
    }
    v4 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v4();
  }
  return result;
}

uint64_t *std::unique_ptr<std::__tree_node<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,void *>,std::__tree_node_destructor<geo::StdAllocator<std::__tree_node<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 55) < 0) {
      (*(void (**)(void, void, uint64_t))(**(void **)(v2 + 56) + 40))(*(void *)(v2 + 56), *(void *)(v2 + 32), *(void *)(v2 + 48) & 0x7FFFFFFFFFFFFFFFLL);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 64);
  }
  return a1;
}

uint64_t karo::AsyncRequestManager::RequestHandle::getStatus(karo::AsyncRequestManager::RequestHandle *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 152));
  int v3 = *(_DWORD *)(v1 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 152));
  if ((v3 & 2) != 0) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 88));
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(v4 + 72);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 88));
  if (v5 != v6) {
    return 3;
  }
  uint64_t v8 = *((void *)this + 1);
  pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
  int v9 = *(_DWORD *)(v8 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
  v10 = (unint64_t *)*((void *)this + 1);
  if (v9)
  {
    if ((*(unsigned int (**)(unint64_t *))(*v10 + 40))(v10)) {
      return 4;
    }
    else {
      return 0;
    }
  }
  else if (atomic_load(v10 + 21))
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

void karo::AsyncRequestManager::RequestHandle::~RequestHandle(karo::AsyncRequestManager::RequestHandle *this)
{
  *(void *)this = off_1EF5677B0;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    atomic_fetch_add((atomic_uint *volatile)(v1 + 128), 0xFFFFFFFF);
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v1;
  std::__shared_weak_count *v2;

  *(void *)this = off_1EF5677B0;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    atomic_fetch_add((atomic_uint *volatile)(v1 + 128), 0xFFFFFFFF);
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t karo::AsyncRequestManager::destroyRequest(uint64_t a1)
{
  return 1;
}

uint64_t karo::AsyncRequestManager::RequestHandle::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 128), 0xFFFFFFFF);
  }
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4) {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 1u);
  }
  return a1;
}

void karo::AsyncRequestManager::AsyncRequestManager(void *a1, long long *a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1EF567F78;
  uint64_t v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[4] = a3;
  a1[5] = 0;
  *a1 = &unk_1EF5677D8;
  pthread_mutexattr_init(&v7);
  pthread_mutexattr_settype(&v7, 2);
  operator new();
}

void karo::AsyncRequestManager::~AsyncRequestManager(karo::AsyncRequestManager *this)
{
  *(void *)this = &unk_1EF5677D8;
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 40);
    uint64_t v3 = *(void *)(v2 + 48);
    if (v3 != v4)
    {
      uint64_t v5 = 0;
      unint64_t v6 = (v3 - v4) >> 3;
      if (v6 <= 1) {
        unint64_t v6 = 1;
      }
      while (*(karo::AsyncRequestManager **)(v4 + 8 * v5) != this)
      {
        if (v6 == ++v5) {
          goto LABEL_12;
        }
      }
      *(void *)(v4 + 8 * v5) = *(void *)(v3 - 8);
      uint64_t v7 = *(void *)(v2 + 48);
      if (v7 == *(void *)(v2 + 40))
      {
        if (*(void *)(v2 + 56) - v7 != -8) {
          abort();
        }
        bzero(*(void **)(v2 + 48), 0xFFFFFFFFFFFFFFF8);
      }
      *(void *)(v2 + 48) = v7 - 8;
    }
  }
LABEL_12:
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 5));
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    MEMORY[0x1A6239270](v8, 0x1000C40FA0F61DDLL);
  }
  *((void *)this + 5) = 0;
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t altitude::GlobeTileComponent::onTileSetOperation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(**(void **)(**(void **)(*(void *)(a1 + 16) + 288) + 32) + 480)
                              + 64))();
}

uint64_t altitude::GlobeTileComponent::prepareTileSetOperation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(**(void **)(**(void **)(*(void *)(a1 + 16) + 288) + 32) + 480)
                              + 56))();
}

uint64_t altitude::GlobeTileComponent::collectRenderItems(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a1 + 232);
  if (v9)
  {
    if (v9 == 1)
    {
      if (*(void *)(*(void *)(a1 + 240) + 8) == a2) {
        uint64_t v10 = *(void *)(a1 + 240);
      }
      else {
        uint64_t v10 = 0;
      }
    }
    else
    {
      v11 = *(uint64_t **)(a1 + 248);
      while (1)
      {
        uint64_t v10 = *v11;
        if (*(void *)(*v11 + 8) == a2) {
          break;
        }
        ++v11;
        if (!--v9) {
          goto LABEL_9;
        }
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v10 = 0;
  }
  uint64_t result = *(void *)(v10 + 24);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 32))(result, a3, a6);
  }
  else
  {
    uint64_t v26 = *(void *)(v10 + 16);
    uint64_t v27 = *(void *)(v26 + 120);
    if (v27)
    {
      v28 = *(uint64_t **)(v27 + 48);
      v29 = *(uint64_t **)(v27 + 56);
      while (v28 != v29)
      {
        uint64_t v31 = *v28;
        if (*(unsigned char *)(*v28 + 180) && (*(_DWORD *)(v31 + 160) - 1) <= 6)
        {
          v32 = *(void **)(a3 + 8);
          uint64_t v34 = v32[3];
          uint64_t v33 = v32[4];
          uint64_t v35 = v33 - v34;
          if (v33 == v34) {
            goto LABEL_23;
          }
          uint64_t v36 = 0;
          uint64_t v37 = *(void *)(a6 + 8);
          unint64_t v38 = v35 >> 3;
          while (1)
          {
            v39 = *(unsigned __int8 **)(v34 + 8 * v36);
            if (*v39 == *(unsigned __int8 *)(v37 + 8))
            {
              unint64_t v40 = *((void *)v39 + 1);
              uint64_t v41 = v32[15];
              if (v40 < (v32[16] - v41) >> 3) {
                break;
              }
            }
            if (++v36 >= v38) {
              goto LABEL_23;
            }
          }
          uint64_t v42 = *(void *)(v41 + 8 * v40);
          if (!v42) {
LABEL_23:
          }
            uint64_t v30 = 0;
          else {
            uint64_t v30 = *(void *)(*(void *)(v42 + 24) + 8 * *(unsigned __int8 *)(v37 + 9));
          }
          uint64_t result = ggl::CommandBuffer::pushRenderItem(v30, *(void *)(v31 + 184));
        }
        ++v28;
      }
    }
    else
    {
      uint64_t v46 = *(void *)(v26 + 208);
      if (v46)
      {
        v47 = *(uint64_t **)(v46 + 48);
        v48 = *(uint64_t **)(v46 + 56);
        while (v47 != v48)
        {
          uint64_t v50 = *v47;
          if (*(unsigned char *)(*v47 + 180) && (*(_DWORD *)(v50 + 160) - 1) <= 6)
          {
            v51 = *(void **)(a3 + 8);
            uint64_t v53 = v51[3];
            uint64_t v52 = v51[4];
            uint64_t v54 = v52 - v53;
            if (v52 == v53) {
              goto LABEL_42;
            }
            uint64_t v55 = 0;
            uint64_t v56 = *(void *)(a6 + 8);
            unint64_t v57 = v54 >> 3;
            while (1)
            {
              v58 = *(unsigned __int8 **)(v53 + 8 * v55);
              if (*v58 == *(unsigned __int8 *)(v56 + 8))
              {
                unint64_t v59 = *((void *)v58 + 1);
                uint64_t v60 = v51[15];
                if (v59 < (v51[16] - v60) >> 3) {
                  break;
                }
              }
              if (++v55 >= v57) {
                goto LABEL_42;
              }
            }
            uint64_t v61 = *(void *)(v60 + 8 * v59);
            if (!v61) {
LABEL_42:
            }
              uint64_t v49 = 0;
            else {
              uint64_t v49 = *(void *)(*(void *)(v61 + 24) + 8 * *(unsigned __int8 *)(v56 + 9));
            }
            uint64_t result = ggl::CommandBuffer::pushRenderItem(v49, *(void *)(v50 + 184));
          }
          ++v47;
        }
      }
    }
    uint64_t v62 = *(void *)(*(void *)(v10 + 16) + 136);
    if (v62 && *(unsigned char *)(v10 + 32))
    {
      v63 = *(void **)(a3 + 8);
      uint64_t v65 = v63[3];
      uint64_t v64 = v63[4];
      uint64_t v66 = v64 - v65;
      if (v64 == v65) {
        goto LABEL_64;
      }
      uint64_t v67 = 0;
      uint64_t v68 = *(void *)(a6 + 8);
      unint64_t v69 = v66 >> 3;
      while (1)
      {
        v70 = *(unsigned __int8 **)(v65 + 8 * v67);
        if (*v70 == *(unsigned __int8 *)(v68 + 6))
        {
          unint64_t v71 = *((void *)v70 + 1);
          uint64_t v72 = v63[15];
          if (v71 < (v63[16] - v72) >> 3) {
            break;
          }
        }
        if (++v67 >= v69) {
          goto LABEL_64;
        }
      }
      uint64_t v73 = *(void *)(v72 + 8 * v71);
      if (!v73) {
LABEL_64:
      }
        uint64_t v74 = 0;
      else {
        uint64_t v74 = *(void *)(*(void *)(v73 + 24) + 8 * *(unsigned __int8 *)(v68 + 7));
      }
      uint64_t v75 = *(void *)(v62 + 48);
      uint64_t v76 = *(void *)(v62 + 56);
      while (v75 != v76)
      {
        if (*(unsigned char *)(*(void *)v75 + 180)) {
          uint64_t result = ggl::CommandBuffer::pushRenderItem(v74, *(void *)(*(void *)v75 + 184));
        }
        v75 += 8;
      }
    }
  }
  if (*(unsigned char *)(a1 + 281))
  {
    uint64_t v13 = *(void *)(a1 + 272);
    if (v13)
    {
      v14 = *(void **)(a3 + 8);
      uint64_t v16 = v14[3];
      uint64_t v15 = v14[4];
      uint64_t v17 = v15 - v16;
      if (v15 == v16) {
        goto LABEL_36;
      }
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a6 + 8);
      unint64_t v20 = v17 >> 3;
      while (1)
      {
        v21 = *(unsigned __int8 **)(v16 + 8 * v18);
        if (*v21 == *(unsigned __int8 *)(v19 + 40))
        {
          unint64_t v22 = *((void *)v21 + 1);
          uint64_t v23 = v14[15];
          if (v22 < (v14[16] - v23) >> 3) {
            break;
          }
        }
        if (++v18 >= v20) {
          goto LABEL_36;
        }
      }
      uint64_t v24 = *(void *)(v23 + 8 * v22);
      if (!v24) {
LABEL_36:
      }
        uint64_t v25 = 0;
      else {
        uint64_t v25 = *(void *)(*(void *)(v24 + 24) + 8 * *(unsigned __int8 *)(v19 + 41));
      }
      v43 = *(uint64_t **)(v13 + 48);
      for (i = *(uint64_t **)(v13 + 56); v43 != i; uint64_t result = ggl::CommandBuffer::pushRenderItem(v25, *(void *)(v45 + 184)))v45 = *v43++;
    }
  }
  return result;
}

void altitude::GlobeTileComponent::willBeDrawn(altitude::GlobeTileComponent *this, id *a2, altitude::View *a3, karo::graphics::Viewport *a4, uint64_t a5, altitude::StencilManager *a6)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((void *)this + 29);
  if (!v10) {
    goto LABEL_8;
  }
  if (v10 == 1)
  {
    uint64_t v11 = *((void *)this + 30);
    if (*(altitude::View **)(v11 + 8) == a3) {
      goto LABEL_9;
    }
LABEL_8:
    operator new();
  }
  v12 = (uint64_t *)*((void *)this + 31);
  while (1)
  {
    uint64_t v11 = *v12;
    if (*(altitude::View **)(*v12 + 8) == a3) {
      break;
    }
    ++v12;
    if (!--v10) {
      goto LABEL_8;
    }
  }
LABEL_9:
  uint64_t v13 = *(void **)(v11 + 16);
  uint64_t v14 = v13[15];
  if (v14)
  {
    *(unsigned char *)(v14 + 120) = *(unsigned char *)(v11 + 33);
    uint64_t v15 = *(altitude::Renderable ***)(v14 + 48);
    uint64_t v16 = *(altitude::Renderable ***)(v14 + 56);
    while (v15 != v16)
    {
      uint64_t v17 = *v15++;
      altitude::Renderable::setDrapesEnabled(v17, *(unsigned __int8 *)(v14 + 120));
    }
  }
  uint64_t v18 = v13[26];
  if (v18)
  {
    *(unsigned char *)(v18 + 120) = *(unsigned char *)(v11 + 33);
    uint64_t v19 = *(altitude::Renderable ***)(v18 + 48);
    unint64_t v20 = *(altitude::Renderable ***)(v18 + 56);
    while (v19 != v20)
    {
      v21 = *v19++;
      altitude::Renderable::setDrapesEnabled(v21, *(unsigned __int8 *)(v18 + 120));
    }
  }
  uint64_t v22 = v13[17];
  if (v22)
  {
    *(unsigned char *)(v22 + 120) = *(unsigned char *)(v11 + 33);
    uint64_t v23 = *(altitude::Renderable ***)(v22 + 48);
    uint64_t v24 = *(altitude::Renderable ***)(v22 + 56);
    while (v23 != v24)
    {
      uint64_t v25 = *v23++;
      altitude::Renderable::setDrapesEnabled(v25, *(unsigned __int8 *)(v22 + 120));
    }
  }
  uint64_t v26 = *(void *)(v11 + 24);
  if (v26)
  {
    (*(void (**)(uint64_t, karo::graphics::Viewport *, uint64_t, karo::graphics::Viewport *, uint64_t, altitude::StencilManager *))(*(void *)v26 + 24))(v26, a4, a5, a4, a5, a6);
    goto LABEL_20;
  }
  if (!v13[15])
  {
    *(unsigned char *)(v11 + 32) = 1;
    if (!v13[26]) {
      goto LABEL_46;
    }
LABEL_44:
    if (!v13[15]) {
      altitude::GlobeTileComponent::setupGlobeElement(a5, *(altitude::View **)(v11 + 8), *(void *)(*(void *)(v11 + 16) + 208), 1.0);
    }
    goto LABEL_46;
  }
  altitude::GlobeTileComponent::setupGlobeElement(a5, *(altitude::View **)(v11 + 8), *(void *)(*(void *)(v11 + 16) + 120), 1.0);
  if (v13[26]) {
    goto LABEL_44;
  }
LABEL_46:
  if (v13[17] && *(unsigned char *)(v11 + 32)) {
    altitude::GlobeTileComponent::setupSurfaceElement(*(altitude::GlobeTileComponent **)(*(void *)(v11 + 16) + 136), *(altitude::View **)(v11 + 8));
  }
  uint64_t v73 = *(void *)(*(void *)(*(void *)(v11 + 16) + 16) + 336);
  if (v73)
  {
    *(unsigned char *)(v73 + 122) = 1;
    if (*(float *)(v73 + 124) != 1.0)
    {
      uint64_t v74 = *(void *)(v73 + 88);
      if (v74)
      {
        *(_DWORD *)(v73 + 124) = 1065353216;
        *(unsigned char *)(v74 + 160) = 0;
      }
    }
  }
LABEL_20:
  char v27 = *((unsigned char *)a3 + 1291);
  if (v27)
  {
    uint64_t v28 = *((void *)a3 + 4);
    if (*((void *)this + 34))
    {
      if (!*((unsigned char *)this + 280) && altitude::Tile::hasLoadedData(*((altitude::Tile **)this + 2)))
      {
LABEL_81:
        *((unsigned char *)this + 280) = 0;
        goto LABEL_82;
      }
      v29 = (double *)(*(uint64_t (**)(void))(**((void **)this + 2) + 56))(*((void *)this + 2));
      if (*((unsigned char *)this + 282))
      {
        float v30 = 1.0;
        float v31 = 0.0;
      }
      else
      {
        uint64_t v75 = (altitude::Tile *)*((void *)this + 2);
        float v30 = 0.0;
        if (*((unsigned char *)v75 + 432))
        {
          if (altitude::Tile::hasLoadedData(v75))
          {
            float v32 = 1.0;
            float v31 = 0.0;
            if (((*(_DWORD *)(*((void *)this + 2) + 400)
                 + *(_DWORD *)(*((void *)this + 2) + 396)
                 + *(_DWORD *)(*((void *)this + 2) + 404)) & 1) != 0)
              float v31 = 1.0;
            float v30 = v31;
          }
          else
          {
            float v31 = 0.7;
            if ((*(_DWORD *)(v28 + 88) - *(_DWORD *)(*((void *)this + 2) + 388)) >= 2) {
              float v31 = 1.0;
            }
            float v32 = v31;
          }
          goto LABEL_27;
        }
        float v31 = 1.0;
      }
      float v32 = 0.0;
LABEL_27:
      uint64_t v33 = **(void **)(*((void *)this + 34) + 48);
      uint64_t v34 = **(void ***)(*(void *)(v33 + 192) + 64);
      unint64_t v35 = v34[1];
      uint64_t v36 = v34[9];
      *(float *)uint64_t v36 = v31;
      *(float *)(v36 + 4) = v32;
      *(float *)(v36 + 8) = v30;
      *(_DWORD *)(v36 + 12) = 1065353216;
      if (v34[8] > v35) {
        unint64_t v35 = v34[8];
      }
      v34[7] = 0;
      v34[8] = v35;
      double v37 = v29[4];
      double v38 = v29[5];
      double v40 = *v29;
      double v39 = v29[1];
      double v41 = v29[2];
      double v42 = v29[3];
      v43 = *(void **)(*(void *)(*(void *)(v33 + 184) + 64) + 64);
      v44 = (void *)*v43;
      uint64_t v45 = (std::__shared_weak_count *)v43[1];
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v46 = 8 * v44[1];
      if (v46) {
        uint64_t v47 = v44[9];
      }
      else {
        uint64_t v47 = 0;
      }
      float v76 = v42;
      float v77 = v37;
      float v78 = v38;
      *(float *)uint64_t v47 = v76;
      *(float *)(v47 + 4) = v77;
      *(float *)(v47 + 8) = v78;
      *(_DWORD *)(v47 + 12) = 1065353216;
      float v79 = v40;
      *(float *)(v47 + 16) = v79;
      *(float *)(v47 + 20) = v77;
      *(float *)(v47 + 24) = v78;
      *(_DWORD *)(v47 + 28) = 1065353216;
      float v80 = v39;
      *(float *)(v47 + 32) = v76;
      *(float *)(v47 + 36) = v80;
      *(float *)(v47 + 40) = v78;
      *(_DWORD *)(v47 + 44) = 1065353216;
      *(float *)(v47 + 48) = v79;
      *(float *)(v47 + 52) = v80;
      *(float *)(v47 + 56) = v78;
      *(_DWORD *)(v47 + 60) = 1065353216;
      float v81 = v41;
      *(float *)(v47 + 64) = v76;
      *(float *)(v47 + 68) = v77;
      *(float *)(v47 + 72) = v81;
      *(_DWORD *)(v47 + 76) = 1065353216;
      *(float *)(v47 + 80) = v79;
      *(float *)(v47 + 84) = v77;
      *(float *)(v47 + 88) = v81;
      *(_DWORD *)(v47 + 92) = 1065353216;
      *(float *)(v47 + 96) = v76;
      *(float *)(v47 + 100) = v80;
      *(float *)(v47 + 104) = v81;
      *(_DWORD *)(v47 + 108) = 1065353216;
      *(float *)(v47 + 112) = v79;
      *(float *)(v47 + 116) = v80;
      *(float *)(v47 + 120) = v81;
      *(_DWORD *)(v47 + 124) = 1065353216;
      if (v47 && v46)
      {
        if (v44[8] > v46) {
          unint64_t v46 = v44[8];
        }
        v44[7] = 0;
        v44[8] = v46;
      }
      if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
      goto LABEL_81;
    }
    v48 = (altitude::Tile *)*((void *)this + 2);
    if (*((unsigned char *)this + 282))
    {
      float v49 = 1.0;
      float v50 = 0.0;
    }
    else
    {
      float v49 = 0.0;
      if (*((unsigned char *)v48 + 432))
      {
        if (altitude::Tile::hasLoadedData(v48))
        {
          float v51 = 1.0;
          float v50 = 0.0;
          if (((*(_DWORD *)(*((void *)this + 2) + 400)
               + *(_DWORD *)(*((void *)this + 2) + 396)
               + *(_DWORD *)(*((void *)this + 2) + 404)) & 1) != 0)
            float v50 = 1.0;
          float v49 = v50;
        }
        else
        {
          float v50 = 0.7;
          if ((*(_DWORD *)(v28 + 88) - *(_DWORD *)(*((void *)this + 2) + 388)) >= 2) {
            float v50 = 1.0;
          }
          float v51 = v50;
        }
LABEL_39:
        double v165 = COERCE_DOUBLE(__PAIR64__(LODWORD(v51), LODWORD(v50)));
        *(void *)&double v166 = LODWORD(v49) | 0x3F80000000000000;
        uint64_t v52 = (*(uint64_t (**)(altitude::Tile *))(*(void *)v48 + 24))(v48);
        long long v53 = *(_OWORD *)v52;
        *(void *)&__str[16] = *(void *)(v52 + 16);
        *(_OWORD *)__str = v53;
        long long v54 = *(_OWORD *)(v52 + 24);
        *(void *)&__str[40] = *(void *)(v52 + 40);
        *(_OWORD *)&__str[24] = v54;
        *(void *)&__str[48] = *(void *)(v52 + 48);
        uint64_t v55 = (double *)(*(uint64_t (**)(altitude::Tile *))(*(void *)v48 + 56))(v48);
        double v57 = *v55;
        double v56 = v55[1];
        double v58 = v55[2];
        double v59 = v55[3];
        double v61 = v55[4];
        double v60 = v55[5];
        uint64_t v62 = operator new(4uLL);
        *uint64_t v62 = 393223;
        v63 = operator new(8uLL);
        v63[2] = 6;
        *(_DWORD *)v63 = *v62;
        operator delete(v62);
        v63[3] = 4;
        uint64_t v64 = (char *)operator new(0x10uLL);
        *((_WORD *)v64 + 4) = 4;
        *(void *)uint64_t v64 = *(void *)v63;
        operator delete(v63);
        *(_DWORD *)(v64 + 10) = 327685;
        *((_WORD *)v64 + 7) = 7;
        uint64_t v65 = (char *)operator new(0x20uLL);
        *((_WORD *)v65 + 8) = 3;
        *(_OWORD *)uint64_t v65 = *(_OWORD *)v64;
        operator delete(v64);
        *(void *)(v65 + 18) = 131074;
        *(_DWORD *)(v65 + 26) = 65537;
        *((_WORD *)v65 + 15) = 3;
        uint64_t v66 = (char *)operator new(0x40uLL);
        *((_WORD *)v66 + 16) = 7;
        long long v67 = *((_OWORD *)v65 + 1);
        *(_OWORD *)uint64_t v66 = *(_OWORD *)v65;
        *((_OWORD *)v66 + 1) = v67;
        operator delete(v65);
        *(void *)(v66 + 34) = 0x4000200060003;
        *(_DWORD *)(v66 + 42) = 327680;
        *((_WORD *)v66 + 23) = 1;
        uint64_t v68 = operator new(0xF8uLL);
        *((void *)v68 + 1) = 0;
        *(void *)uint64_t v68 = &unk_1EF5843F0;
        *((void *)v68 + 2) = 0;
        *((void *)v68 + 3) = &unk_1EF55A1F0;
        *((void *)v68 + 4) = 16;
        *((_DWORD *)v68 + 10) = 6;
        long long v69 = 0uLL;
        *((_OWORD *)v68 + 3) = 0u;
        *((_OWORD *)v68 + 4) = 0u;
        *((_OWORD *)v68 + 5) = 0u;
        *((_OWORD *)v68 + 6) = 0u;
        *((void *)v68 + 14) = 0;
        {
          long long v69 = 0uLL;
          if (v162) {
            operator new();
          }
        }
        uint64_t v70 = *((void *)v68 + 12);
        *((void *)v68 + 15) = ggl::Allocator::instance(void)::alloc;
        *((void *)v68 + 16) = 0;
        *((_OWORD *)v68 + 11) = v69;
        *((_OWORD *)v68 + 12) = v69;
        *((void *)v68 + 26) = 0;
        *((void *)v68 + 27) = -1;
        *((_OWORD *)v68 + 9) = xmmword_1A28FCCA0;
        *((_OWORD *)v68 + 10) = v69;
        *((_DWORD *)v68 + 34) = 0;
        *((void *)v68 + 29) = "DebugBoundsElement";
        *((void *)v68 + 30) = &ggl::CommonMesh::bufferPos4Reflection;
        *((void *)v68 + 3) = &unk_1EF55BFC8;
        *((void *)v68 + 28) = &unk_1EF55BFE8;
        unint64_t v71 = 8 * *((void *)v68 + 4);
        unint64_t v72 = *((void *)v68 + 13) - v70;
        if (v71 != v72)
        {
          if (v71 <= v72)
          {
            if (v71 < v72) {
              *((void *)v68 + 13) = v70 + v71;
            }
          }
          else
          {
            std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append((unint64_t)v68 + 96, v71 - v72);
          }
          v82 = (std::__shared_weak_count *)*((void *)v68 + 7);
          *((void *)v68 + 6) = 0;
          *((void *)v68 + 7) = 0;
          if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
          *((void *)v68 + 18) = 0;
          *((_DWORD *)v68 + 34) = 0;
          uint64_t v70 = *((void *)v68 + 12);
          uint64_t v83 = *((void *)v68 + 13) - v70;
          *((void *)v68 + 8) = 0;
          *((void *)v68 + 9) = v83;
          *((void *)v68 + 10) = 0;
          *((void *)v68 + 11) = v83;
          unint64_t v71 = 8 * *((void *)v68 + 4);
        }
        if (!v71) {
          uint64_t v70 = 0;
        }
        float v84 = v59;
        float v85 = v61;
        *(float *)uint64_t v70 = v84;
        *(float *)(v70 + 4) = v85;
        float v86 = v60;
        *(float *)(v70 + 8) = v86;
        *(_DWORD *)(v70 + 12) = 1065353216;
        float v87 = v57;
        *(float *)(v70 + 16) = v87;
        *(float *)(v70 + 20) = v85;
        *(float *)(v70 + 24) = v86;
        *(_DWORD *)(v70 + 28) = 1065353216;
        float v88 = v56;
        *(float *)(v70 + 32) = v84;
        *(float *)(v70 + 36) = v88;
        *(float *)(v70 + 40) = v86;
        *(_DWORD *)(v70 + 44) = 1065353216;
        *(float *)(v70 + 48) = v87;
        *(float *)(v70 + 52) = v88;
        *(float *)(v70 + 56) = v86;
        *(_DWORD *)(v70 + 60) = 1065353216;
        float v89 = v58;
        *(float *)(v70 + 64) = v84;
        *(float *)(v70 + 68) = v85;
        *(float *)(v70 + 72) = v89;
        *(_DWORD *)(v70 + 76) = 1065353216;
        *(float *)(v70 + 80) = v87;
        *(float *)(v70 + 84) = v85;
        *(float *)(v70 + 88) = v89;
        *(_DWORD *)(v70 + 92) = 1065353216;
        *(float *)(v70 + 96) = v84;
        *(float *)(v70 + 100) = v88;
        *(float *)(v70 + 104) = v89;
        *(_DWORD *)(v70 + 108) = 1065353216;
        *(float *)(v70 + 112) = v87;
        *(float *)(v70 + 116) = v88;
        *(float *)(v70 + 120) = v89;
        *(_DWORD *)(v70 + 124) = 1065353216;
        operator new();
      }
      float v50 = 1.0;
    }
    float v51 = 0.0;
    goto LABEL_39;
  }
LABEL_82:
  *((unsigned char *)this + 281) = v27;
  uint64_t v90 = *((void *)this + 34);
  if (v90 && *((unsigned char *)a3 + 1291))
  {
    v91 = a4;
    v92 = *(void ***)(v90 + 48);
    for (i = *(void ***)(v90 + 56); v92 != i; v143[8] = v144)
    {
      v94 = *v92++;
      double v95 = *((double *)a3 + 10);
      double v96 = *((double *)a3 + 11);
      double v97 = *((double *)a3 + 12);
      double v99 = *((double *)a3 + 8);
      double v98 = *((double *)a3 + 9);
      double v101 = *((double *)a3 + 6);
      double v100 = *((double *)a3 + 7);
      uint64_t v102 = v94[24];
      double v103 = -(v99 * v95 - v100 * v96) - (v99 * v95 - v100 * v96);
      double v104 = -(v101 * v96 - v99 * v98) - (v101 * v96 - v99 * v98);
      double v105 = -(v100 * v98 - v101 * v95) - (v100 * v98 - v101 * v95);
      double v106 = -(-(v100 - v103 * v96) - v104 * v97);
      double v107 = v99 + v103 * v95;
      double v108 = v101 + v103 * v97 + v104 * v96;
      double v109 = v107 + v105 * v97;
      double v110 = -(v96 * (v96 * -2.0));
      double v111 = v96 * -2.0 * v97;
      double v112 = -(v96 * (v98 * -2.0));
      double v113 = v97 * (v95 * -2.0);
      double v114 = -(v96 * (v95 * -2.0));
      double v115 = v97 * (v98 * -2.0);
      double v116 = v98 * -2.0 * v98 + 1.0;
      double v165 = 1.0 - (v110 - v95 * (v95 * -2.0));
      double v166 = v111 - v95 * (v98 * -2.0);
      double v169 = -(v95 * (v98 * -2.0)) - v111;
      double v170 = v116 - v110;
      double v173 = v113 + v112;
      double v174 = v114 - v115;
      double v167 = v112 - v113;
      double v171 = v115 + v114;
      double v175 = v116 - -(v95 * (v95 * -2.0));
      uint64_t v168 = 0;
      uint64_t v172 = 0;
      uint64_t v176 = 0;
      double v177 = -(v108 - v105 * v95);
      double v178 = -(v106 + v105 * v98);
      uint64_t v180 = 0x3FF0000000000000;
      double v179 = -(v109 - v104 * v98);
      double v117 = gm::operator*<double,4,4,4>((double *)&v181, (double *)a3 + 47, &v165);
      uint64_t v118 = (*(uint64_t (**)(void *, double))(*v94 + 24))(v94, v117);
      memset(&__str[8], 0, 112);
      *(void *)&__str[120] = 0x3FF0000000000000;
      uint64_t v119 = v94[30];
      *(void *)__str = v94[29];
      *(void *)&__str[40] = v119;
      *(void *)&__str[80] = v94[31];
      double v120 = *(double *)(v118 + 24);
      double v121 = *(double *)(v118 + 32);
      double v122 = *(double *)(v118 + 40);
      double v123 = *(double *)(v118 + 48);
      double v124 = v121 + v121;
      double v125 = (v121 + v121) * v121;
      double v126 = (v122 + v122) * v122;
      double v127 = v120 + v120;
      double v128 = (v120 + v120) * v121;
      double v129 = (v122 + v122) * v123;
      double v130 = v122 * (v120 + v120);
      double v131 = v123 * v124;
      double v132 = v123 * v124 + v130;
      double v133 = 1.0 - (v120 + v120) * v120;
      double v134 = v124 * v122;
      double v135 = v123 * v127;
      *(double *)&v182.__r_.__value_.__l.__data_ = 1.0 - (v125 + v126);
      *(double *)&v182.__r_.__value_.__l.__size_ = v129 + v128;
      double v184 = v128 - v129;
      double v185 = v133 - v126;
      double v188 = v132;
      double v189 = v134 - v135;
      *(double *)&v182.__r_.__value_.__r.__words[2] = v130 - v131;
      double v186 = v135 + v134;
      double v190 = v133 - v125;
      uint64_t v183 = 0;
      uint64_t v187 = 0;
      uint64_t v191 = 0;
      long long v192 = *(_OWORD *)v118;
      uint64_t v193 = *(void *)(v118 + 16);
      uint64_t v194 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(v164, (double *)&v182, (double *)__str);
      gm::operator*<double,4,4,4>((double *)__str, (double *)&v181, v164);
      float32x2_t v136 = vcvt_f32_f64(*(float64x2_t *)&__str[16]);
      float32x2_t v137 = vcvt_f32_f64(*(float64x2_t *)&__str[32]);
      float32x2_t v138 = vcvt_f32_f64(*(float64x2_t *)&__str[48]);
      float32x2_t v139 = vcvt_f32_f64(*(float64x2_t *)&__str[64]);
      float32x2_t v140 = vcvt_f32_f64(*(float64x2_t *)&__str[80]);
      float32x2_t v141 = vcvt_f32_f64(*(float64x2_t *)&__str[96]);
      float32x2_t v142 = vcvt_f32_f64(*(float64x2_t *)&__str[112]);
      v143 = *(void **)(*(void *)(v102 + 64) + 16);
      unint64_t v144 = v143[1];
      v145 = (float32x2_t *)v143[9];
      float32x2_t *v145 = vcvt_f32_f64(*(float64x2_t *)__str);
      v145[1] = v136;
      v145[2] = v137;
      v145[3] = v138;
      v145[4] = v139;
      v145[5] = v140;
      v145[6] = v141;
      v145[7] = v142;
      if (v143[8] > v144) {
        unint64_t v144 = v143[8];
      }
      v143[7] = 0;
    }
    int v146 = snprintf(__str, 0x400uLL, "(%i %i %i %i)", *(_DWORD *)(*((void *)this + 2) + 392), *(_DWORD *)(*((void *)this + 2) + 396), *(_DWORD *)(*((void *)this + 2) + 400), *(_DWORD *)(*((void *)this + 2) + 404));
    if (*a2 && (objc_opt_respondsToSelector() & 1) != 0) {
      uint64_t v147 = [*a2 debugConsoleForId:1];
    }
    else {
      uint64_t v147 = 0;
    }
    if (*((unsigned char *)this + 282))
    {
      LOBYTE(v148) = 0;
      float v149 = 0.0;
      LOBYTE(v150) = -1;
    }
    else
    {
      v160 = (altitude::Tile *)*((void *)this + 2);
      LOBYTE(v150) = *((unsigned char *)v160 + 432);
      if ((_BYTE)v150)
      {
        uint64_t v161 = *((void *)a3 + 4);
        if (altitude::Tile::hasLoadedData(v160))
        {
          float v149 = 1.0;
          if (((*(_DWORD *)(*((void *)this + 2) + 400)
               + *(_DWORD *)(*((void *)this + 2) + 396)
               + *(_DWORD *)(*((void *)this + 2) + 404)) & 1) == 0)
            float v149 = 0.0;
          int v150 = (int)(float)(v149 * 255.0);
          LOBYTE(v148) = -1;
        }
        else
        {
          LOBYTE(v150) = 0;
          float v149 = 0.7;
          if ((*(_DWORD *)(v161 + 88) - *(_DWORD *)(*((void *)this + 2) + 388)) >= 2) {
            float v149 = 1.0;
          }
          int v148 = (int)(float)(v149 * 255.0);
        }
      }
      else
      {
        LOBYTE(v148) = 0;
        float v149 = 1.0;
      }
    }
    *(unsigned char *)(v147 + 96) = (int)(float)(v149 * 255.0);
    *(unsigned char *)(v147 + 97) = v148;
    *(unsigned char *)(v147 + 98) = v150;
    *(unsigned char *)(v147 + 99) = -1;
    double v151 = (double)(*((_DWORD *)v91 + 12) - *((_DWORD *)v91 + 10));
    double v152 = (double)(*((_DWORD *)v91 + 13) - *((_DWORD *)v91 + 11));
    v153 = (double *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
    double v154 = v153[1];
    double v155 = v153[2];
    double v156 = 0.5
         / (*((double *)a3 + 30)
          + *((double *)a3 + 18) * *v153
          + *((double *)a3 + 22) * v154
          + *((double *)a3 + 26) * v155);
    double v157 = v156
         * (*((double *)a3 + 27)
          + *v153 * *((double *)a3 + 15)
          + v154 * *((double *)a3 + 19)
          + v155 * *((double *)a3 + 23))
         + 0.5;
    double v158 = (0.5
          - v156
          * (*((double *)a3 + 28)
           + *((double *)a3 + 16) * *v153
           + *((double *)a3 + 20) * v154
           + *((double *)a3 + 24) * v155))
         * v152;
    double v159 = (float)((float)v146 * (float)(-0.5 * *(float *)(v147 + 24))) + v157 * v151;
    *(float *)&double v159 = v159;
    *(float *)&double v158 = v158;
    *(_DWORD *)(v147 + 8) = LODWORD(v159);
    *(_DWORD *)(v147 + 12) = LODWORD(v158);
    ggl::DebugConsole::drawString(v147, (int8x16_t *)__str, v146, v158, *(int32x2_t *)&v159);
  }
}

void karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(void *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v7 = *a2;
    *a1 = 1;
    a1[1] = v7;
    return;
  }
  if (*a1 == 1)
  {
    uint64_t v5 = (char *)a1[3];
    unint64_t v4 = a1[4];
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v8 = (char *)a1[2];
      uint64_t v9 = (v5 - v8) >> 3;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        goto LABEL_55;
      }
      uint64_t v11 = v4 - (void)v8;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          goto LABEL_56;
        }
        uint64_t v13 = operator new(8 * v12);
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[8 * v9];
      uint64_t v15 = &v13[8 * v12];
      void *v14 = a1[1];
      unint64_t v6 = (char *)(v14 + 1);
      if (v5 == v8)
      {
        uint64_t v8 = v5;
      }
      else
      {
        unint64_t v16 = v5 - v8 - 8;
        if (v16 < 0x58) {
          goto LABEL_59;
        }
        if ((unint64_t)(v8 - v13) < 0x20) {
          goto LABEL_59;
        }
        uint64_t v17 = (v16 >> 3) + 1;
        uint64_t v18 = &v13[8 * v9 - 16];
        uint64_t v19 = v5 - 16;
        uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v21 = *(_OWORD *)v19;
          *(v18 - 1) = *((_OWORD *)v19 - 1);
          *uint64_t v18 = v21;
          v18 -= 2;
          v19 -= 32;
          v20 -= 4;
        }
        while (v20);
        v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
        v5 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
        if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_59:
          do
          {
            uint64_t v22 = *((void *)v5 - 1);
            v5 -= 8;
            *--uint64_t v14 = v22;
          }
          while (v5 != v8);
          uint64_t v8 = (char *)a1[2];
        }
      }
      a1[2] = v14;
      a1[3] = v6;
      a1[4] = v15;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *(void *)uint64_t v5 = a1[1];
      unint64_t v6 = v5 + 8;
    }
    a1[3] = v6;
  }
  else
  {
    unint64_t v6 = (char *)a1[3];
  }
  unint64_t v23 = a1[4];
  if ((unint64_t)v6 >= v23)
  {
    uint64_t v25 = (char *)a1[2];
    uint64_t v26 = (v6 - v25) >> 3;
    unint64_t v27 = v26 + 1;
    if (!((unint64_t)(v26 + 1) >> 61))
    {
      uint64_t v28 = v23 - (void)v25;
      if (v28 >> 2 > v27) {
        unint64_t v27 = v28 >> 2;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (!v29)
      {
        float v30 = 0;
LABEL_41:
        float v31 = (uint64_t *)&v30[8 * v26];
        *float v31 = *a2;
        uint64_t v24 = v31 + 1;
        if (v6 == v25)
        {
          uint64_t v25 = v6;
        }
        else
        {
          unint64_t v32 = v6 - v25 - 8;
          if (v32 < 0x58)
          {
            uint64_t v33 = v6;
            goto LABEL_50;
          }
          if ((unint64_t)(v25 - v30) < 0x20)
          {
            uint64_t v33 = v6;
            goto LABEL_50;
          }
          uint64_t v34 = (v32 >> 3) + 1;
          uint64_t v33 = &v6[-8 * (v34 & 0x3FFFFFFFFFFFFFFCLL)];
          unint64_t v35 = &v30[8 * v26 - 16];
          uint64_t v36 = v6 - 16;
          uint64_t v37 = v34 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v38 = *(_OWORD *)v36;
            *(v35 - 1) = *((_OWORD *)v36 - 1);
            *unint64_t v35 = v38;
            v35 -= 2;
            v36 -= 32;
            v37 -= 4;
          }
          while (v37);
          v31 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
          if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_50:
              uint64_t v39 = *((void *)v33 - 1);
              v33 -= 8;
              *--float v31 = v39;
            }
            while (v33 != v25);
            uint64_t v25 = (char *)a1[2];
          }
        }
        a1[2] = v31;
        a1[3] = v24;
        a1[4] = &v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
        goto LABEL_54;
      }
      if (!(v29 >> 61))
      {
        float v30 = operator new(8 * v29);
        goto LABEL_41;
      }
LABEL_56:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_55:
    abort();
  }
  *(void *)unint64_t v6 = *a2;
  uint64_t v24 = v6 + 8;
LABEL_54:
  a1[3] = v24;
  ++*a1;
}

void altitude::GlobeTileComponent::destroyFallback(altitude::GlobeTileComponent *this)
{
  if (*((void *)this + 26))
  {
    v1[0] = 0;
    v1[1] = 0;
    altitude::GlobeTileComponent::setFallbackElement((uint64_t)this, v1, 0);
  }
}

void altitude::GlobeTileComponent::setFallbackElement(uint64_t a1, uint64_t *a2, int a3)
{
  if (*(void *)(a1 + 208)) {
    (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(a1 + 16) + 424) + 24))(*(void *)(*(void *)(a1 + 16) + 424), *(void *)(a1 + 16), a1);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 216);
  *(void *)(a1 + 208) = v6;
  *(void *)(a1 + 216) = v7;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v6 = *(void *)(a1 + 208);
  }
  if (v6) {
    (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(a1 + 16) + 424) + 16))(*(void *)(*(void *)(a1 + 16) + 424), *(void *)(a1 + 16), a1);
  }
  if (*a2) {
    int v9 = *(_DWORD *)(*(void *)(a1 + 16) + 392) - a3;
  }
  else {
    int v9 = -1;
  }
  *(_DWORD *)(a1 + 224) = v9;
}

uint64_t altitude::GlobeTileComponent::needsFallbackData(altitude::GlobeTileComponent *this)
{
  return (*(unsigned int (**)(altitude::GlobeTileComponent *))(*(void *)this + 56))(this) ^ 1;
}

BOOL altitude::GlobeTileComponent::hasLoadedFallbackData(altitude::GlobeTileComponent *this)
{
  return *((void *)this + 26) != 0;
}

BOOL altitude::GlobeTileComponent::hasLoadedData(altitude::GlobeTileComponent *this)
{
  return *((void *)this + 15) != 0;
}

unint64_t altitude::GlobeTileComponent::renderStamp(altitude::GlobeTileComponent *this)
{
  unint64_t result = *((void *)this + 9);
  uint64_t v3 = *((void *)this + 15);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 48);
    uint64_t v5 = *(void *)(v3 + 56);
    while (1)
    {
      if (v4 == v5) {
        return result;
      }
      uint64_t v6 = *(char **)(*(void *)v4 + 256);
      uint64_t v7 = *(char **)(*(void *)v4 + 264);
      if (v6 != v7)
      {
        unint64_t v8 = v7 - v6 - 8;
        if (v8 <= 7) {
          goto LABEL_17;
        }
        uint64_t v9 = (v8 >> 3) + 1;
        unint64_t v10 = v6 + 8;
        uint64_t v11 = v9 & 0x3FFFFFFFFFFFFFFELL;
        unint64_t v12 = result;
        do
        {
          if (*(void *)(*(v10 - 1) + 88) > result) {
            unint64_t result = *(void *)(*(v10 - 1) + 88);
          }
          if (*(void *)(*v10 + 88) > v12) {
            unint64_t v12 = *(void *)(*v10 + 88);
          }
          v10 += 2;
          v11 -= 2;
        }
        while (v11);
        if (result <= v12) {
          unint64_t result = v12;
        }
        if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
          break;
        }
      }
LABEL_3:
      v4 += 8;
    }
    v6 += 8 * (v9 & 0x3FFFFFFFFFFFFFFELL);
    do
    {
LABEL_17:
      uint64_t v13 = *(void *)v6;
      v6 += 8;
      unint64_t v14 = *(void *)(v13 + 88);
      if (v14 > result) {
        unint64_t result = v14;
      }
    }
    while (v6 != v7);
    goto LABEL_3;
  }
  return result;
}

void altitude::GlobeTileComponent::~GlobeTileComponent(altitude::GlobeTileComponent *this)
{
  altitude::GlobeTileComponent::~GlobeTileComponent(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  void *v8;
  char *v9;
  char *v10;
  void *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *__p;
  char *v29;
  uint64_t v30;

  *(void *)this = &unk_1EF56A0C0;
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *((void *)this + 7);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *(void *)(v2 + 8);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      v2 += 16;
    }
    while (v2 != v3);
    uint64_t v2 = *((void *)this + 6);
  }
  *((void *)this + 7) = v2;
  uint64_t v5 = *((void *)this + 29);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (char *)this + 240;
    do
    {
      unint64_t v8 = v7;
      if (v5 >= 2) {
        unint64_t v8 = (void *)(*((void *)this + 31) + 8 * v6);
      }
      if (*v8)
      {
        (*(void (**)(void))(*(void *)*v8 + 8))(*v8);
        uint64_t v5 = *((void *)this + 29);
      }
      ++v6;
      v7 += 8;
    }
    while (v6 < v5);
  }
  *((void *)this + 29) = 0;
  *((void *)this + 32) = *((void *)this + 31);
  if (*((void *)this + 19) != *((void *)this + 20))
  {
    __p = 0;
    unint64_t v29 = 0;
    float v30 = 0;
    altitude::GlobeTileComponent::setHiresTextures(this, (uint64_t **)&__p);
    uint64_t v9 = (char *)__p;
    if (__p)
    {
      unint64_t v10 = v29;
      uint64_t v11 = __p;
      if (v29 != __p)
      {
        do
        {
          unint64_t v12 = (std::__shared_weak_count *)*((void *)v10 - 1);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v10 -= 16;
        }
        while (v10 != v9);
        uint64_t v11 = __p;
      }
      unint64_t v29 = v9;
      operator delete(v11);
    }
  }
  if (*((void *)this + 17))
  {
    (*(void (**)(void, void, altitude::GlobeTileComponent *))(**(void **)(*((void *)this + 2) + 424)
                                                                           + 24))(*(void *)(*((void *)this + 2) + 424), *((void *)this + 2), this);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 18);
    *((void *)this + 17) = 0;
    *((void *)this + 18) = 0;
    if (v13)
    {
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      if (*((void *)this + 17)) {
        (*(void (**)(void, void, altitude::GlobeTileComponent *))(**(void **)(*((void *)this + 2)
      }
                                                                                             + 424)
                                                                               + 16))(*(void *)(*((void *)this + 2) + 424), *((void *)this + 2), this);
    }
  }
  if (*((void *)this + 26))
  {
    __p = 0;
    unint64_t v29 = 0;
    altitude::GlobeTileComponent::setFallbackElement((uint64_t)this, (uint64_t *)&__p, 0);
  }
  altitude::GlobeTileComponent::destroyGeometryElement(this);
  unint64_t v14 = *((void *)this + 34);
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    *((void *)this + 34) = 0;
  }
  uint64_t v15 = (void *)*((void *)this + 31);
  if (v15)
  {
    *((void *)this + 32) = v15;
    operator delete(v15);
  }
  unint64_t v16 = (std::__shared_weak_count *)*((void *)this + 27);
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v17 = (void *)*((void *)this + 22);
    if (!v17) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  uint64_t v17 = (void *)*((void *)this + 22);
  if (v17)
  {
LABEL_39:
    *((void *)this + 23) = v17;
    operator delete(v17);
  }
LABEL_40:
  uint64_t v18 = *((void *)this + 19);
  if (v18)
  {
    uint64_t v19 = *((void *)this + 20);
    uint64_t v20 = (void *)*((void *)this + 19);
    if (v19 != v18)
    {
      do
      {
        long long v21 = *(std::__shared_weak_count **)(v19 - 8);
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        v19 -= 16;
      }
      while (v19 != v18);
      uint64_t v20 = (void *)*((void *)this + 19);
    }
    *((void *)this + 20) = v18;
    operator delete(v20);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    unint64_t v23 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v23) {
      goto LABEL_57;
    }
  }
  else
  {
    unint64_t v23 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v23) {
      goto LABEL_57;
    }
  }
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_57:
  uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 14);
  if (!v24 || atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 103) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (*((char *)this + 103) < 0) {
LABEL_60:
  }
    operator delete(*((void **)this + 10));
LABEL_61:
  *(void *)this = &unk_1EF568D88;
  uint64_t v25 = (void *)*((void *)this + 6);
  uint64_t v26 = (void *)*((void *)this + 7);
  if (v25 == v26)
  {
    if (v25)
    {
LABEL_63:
      *((void *)this + 7) = v25;
      operator delete(v25);
    }
  }
  else
  {
    do
    {
      unint64_t v27 = v25[1];
      if (v27) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
      v25 += 2;
    }
    while (v25 != v26);
    uint64_t v25 = (void *)*((void *)this + 6);
    if (v25) {
      goto LABEL_63;
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 4));
}

void altitude::GlobeTileComponent::setHiresTextures(altitude::GlobeTileComponent *a1, uint64_t **a2)
{
  uint64_t v4 = (uint64_t)a1 + 152;
  if (*((void *)a1 + 19) != *((void *)a1 + 20))
  {
    (*(void (**)(void, void, altitude::GlobeTileComponent *, uint64_t))(**(void **)(*((void *)a1 + 2)
                                                                                                  + 424)
                                                                                    + 24))(*(void *)(*((void *)a1 + 2) + 424), *((void *)a1 + 2), a1, v4);
    uint64_t v5 = *((void *)a1 + 15);
    if (v5)
    {
      if (*((void *)a1 + 19) != *((void *)a1 + 20))
      {
        uint64_t v6 = *((void *)a1 + 22);
        if (v6 != *((void *)a1 + 23))
        {
          uint64_t v7 = *(void *)(v5 + 48);
          uint64_t v8 = *(void *)(v5 + 56);
          if (v7 != v8)
          {
            do
            {
              uint64_t v9 = *(int *)(*(void *)v7 + 176);
              if (v9 != -1)
              {
                altitude::RenderableGroup::dropOwnership(*((void *)a1 + 15), *(void *)(*((void *)a1 + 19) + 16 * v9));
                int v10 = *(_DWORD *)(*(void *)v7 + 160);
                if (v10 == 7 || v10 == 1) {
                  **(void **)(*(void *)v7 + 256) = *(void *)(*((void *)a1 + 22) + 8 * v9);
                }
              }
              v7 += 8;
            }
            while (v7 != v8);
            uint64_t v6 = *((void *)a1 + 22);
          }
          *((void *)a1 + 23) = v6;
        }
      }
    }
  }
  if ((uint64_t **)v4 != a2) {
    std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>(v4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
  if (*((void *)a1 + 19) != *((void *)a1 + 20))
  {
    (*(void (**)(void, void, altitude::GlobeTileComponent *, uint64_t))(**(void **)(*((void *)a1 + 2)
                                                                                                  + 424)
                                                                                    + 16))(*(void *)(*((void *)a1 + 2) + 424), *((void *)a1 + 2), a1, v4);
    altitude::GlobeTileComponent::applyHiresTextures(a1);
  }
}

BOOL altitude::GlobeTileComponent::destroyGeometryElement(altitude::GlobeTileComponent *this)
{
  uint64_t v1 = *((void *)this + 15);
  if (v1)
  {
    __p = 0;
    uint64_t v9 = 0;
    altitude::GlobeTileComponent::setGeometryElement(this, (uint64_t *)&__p);
    if (*((void *)this + 19) != *((void *)this + 20))
    {
      __p = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      altitude::GlobeTileComponent::setHiresTextures(this, (uint64_t **)&__p);
      uint64_t v3 = (char *)__p;
      if (__p)
      {
        uint64_t v4 = v9;
        uint64_t v5 = __p;
        if (v9 != __p)
        {
          do
          {
            uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
            if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            v4 -= 16;
          }
          while (v4 != v3);
          uint64_t v5 = __p;
        }
        uint64_t v9 = v3;
        operator delete(v5);
      }
    }
  }
  return v1 != 0;
}

void altitude::GlobeTileComponent::setGeometryElement(altitude::GlobeTileComponent *a1, uint64_t *a2)
{
  uint64_t v4 = *((void *)a1 + 15);
  if (v4)
  {
    if (*((void *)a1 + 19) != *((void *)a1 + 20))
    {
      uint64_t v5 = *((void *)a1 + 22);
      if (v5 != *((void *)a1 + 23))
      {
        uint64_t v6 = *(void *)(v4 + 48);
        uint64_t v7 = *(void *)(v4 + 56);
        if (v6 != v7)
        {
          do
          {
            uint64_t v8 = *(int *)(*(void *)v6 + 176);
            if (v8 != -1)
            {
              altitude::RenderableGroup::dropOwnership(*((void *)a1 + 15), *(void *)(*((void *)a1 + 19) + 16 * v8));
              int v9 = *(_DWORD *)(*(void *)v6 + 160);
              if (v9 == 7 || v9 == 1) {
                **(void **)(*(void *)v6 + 256) = *(void *)(*((void *)a1 + 22) + 8 * v8);
              }
            }
            v6 += 8;
          }
          while (v6 != v7);
          uint64_t v5 = *((void *)a1 + 22);
          uint64_t v4 = *((void *)a1 + 15);
        }
        *((void *)a1 + 23) = v5;
      }
    }
    (*(void (**)(void, void, altitude::GlobeTileComponent *, uint64_t))(**(void **)(*((void *)a1 + 2)
                                                                                                  + 424)
                                                                                    + 24))(*(void *)(*((void *)a1 + 2) + 424), *((void *)a1 + 2), a1, v4);
  }
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 16);
  *((void *)a1 + 15) = v11;
  *((void *)a1 + 16) = v12;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v11 = *((void *)a1 + 15);
  }
  if (v11)
  {
    (*(void (**)(void, void, altitude::GlobeTileComponent *))(**(void **)(*((void *)a1 + 2) + 424)
                                                                           + 16))(*(void *)(*((void *)a1 + 2) + 424), *((void *)a1 + 2), a1);
    altitude::GlobeTileComponent::applyHiresTextures(a1);
  }
}

void altitude::GlobeTileComponent::applyHiresTextures(altitude::GlobeTileComponent *this)
{
  uint64_t v1 = *((void *)this + 15);
  if (v1)
  {
    uint64_t v3 = *((void *)this + 19);
    uint64_t v4 = *((void *)this + 20);
    if (v3 != v4)
    {
      unint64_t v5 = (v4 - v3) >> 4;
      uint64_t v7 = *((void *)this + 22);
      uint64_t v6 = (char *)this + 176;
      unint64_t v8 = (*((void *)this + 23) - v7) >> 3;
      if (v5 <= v8)
      {
        if (v5 < v8) {
          *((void *)this + 23) = v7 + 8 * v5;
        }
      }
      else
      {
        std::vector<altitude::TextureMap *>::__append((uint64_t)v6, v5 - v8);
        uint64_t v1 = *((void *)this + 15);
      }
      int v9 = *(uint64_t **)(v1 + 48);
      uint64_t v10 = *(uint64_t **)(v1 + 56);
      while (v9 != v10)
      {
        uint64_t v11 = *(int *)(*v9 + 176);
        if (v11 != -1)
        {
          altitude::RenderableGroup::takeOwnership(*((void **)this + 15), (long long *)(*((void *)this + 19) + 16 * v11));
          uint64_t v12 = *v9;
          int v13 = *(_DWORD *)(*v9 + 160);
          if (v13 == 7 || v13 == 1)
          {
            uint64_t v14 = **(void **)(v12 + 256);
            if (v14 != *(void *)(*((void *)this + 19) + 16 * v11))
            {
              *(void *)(*((void *)this + 22) + 8 * v11) = v14;
              **(void **)(v12 + 256) = *(void *)(*((void *)this + 19) + 16 * v11);
            }
          }
        }
        ++v9;
      }
    }
  }
}

altitude::GlobeTileComponent *altitude::GlobeTileComponent::GlobeTileComponent(altitude::GlobeTileComponent *this, altitude::Tile *a2)
{
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = (char *)this + 32;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(void *)this = &unk_1EF56A0C0;
  *((_OWORD *)this + 5) = 0u;
  uint64_t v3 = (char *)this + 80;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 185) = 0u;
  *((void *)this + 29) = 0;
  uint64_t v4 = (char *)this + 232;
  *((_DWORD *)this + 56) = -1;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_DWORD *)((char *)this + 279) = 0;
  *((void *)this + 36) = 0x3FF0000000000000;
  *((_DWORD *)this + 74) = 0;
  *((_WORD *)this + 150) = 0;
  altitude::Tile::createTileName(&v6, (unsigned int *)a2 + 98, (uint64_t *)(*((void *)a2 + 36) + 40), (uint64_t *)(*((void *)a2 + 36) + 136));
  if (*(v4 - 129) < 0) {
    operator delete(*(void **)v3);
  }
  *(_OWORD *)uint64_t v3 = v6;
  *((void *)v3 + 2) = v7;
  return this;
}

void altitude::GlobeTileComponent::resetTextures(altitude::GlobeTileComponent *this)
{
  uint64_t v1 = *((void *)this + 15);
  if (v1)
  {
    if (*((void *)this + 19) != *((void *)this + 20))
    {
      uint64_t v3 = *((void *)this + 22);
      if (v3 != *((void *)this + 23))
      {
        uint64_t v4 = *(void *)(v1 + 48);
        uint64_t v5 = *(void *)(v1 + 56);
        if (v4 != v5)
        {
          do
          {
            uint64_t v6 = *(int *)(*(void *)v4 + 176);
            if (v6 != -1)
            {
              altitude::RenderableGroup::dropOwnership(*((void *)this + 15), *(void *)(*((void *)this + 19) + 16 * v6));
              int v7 = *(_DWORD *)(*(void *)v4 + 160);
              if (v7 == 7 || v7 == 1) {
                **(void **)(*(void *)v4 + 256) = *(void *)(*((void *)this + 22) + 8 * v6);
              }
            }
            v4 += 8;
          }
          while (v4 != v5);
          uint64_t v3 = *((void *)this + 22);
        }
        *((void *)this + 23) = v3;
      }
    }
  }
}

void altitude::GlobeTileComponent::setupGlobeElement(uint64_t a1, altitude::View *a2, uint64_t a3, float a4)
{
  if (a3)
  {
    uint64_t v4 = *(altitude::FlyoverRenderable ***)(a3 + 48);
    uint64_t v5 = *(altitude::FlyoverRenderable ***)(a3 + 56);
    if (v4 != v5)
    {
      while (1)
      {
        int v9 = *v4;
        switch(*((_DWORD *)*v4 + 40))
        {
          case 1:
            altitude::FlyoverRenderable::setup(*v4, a2, a1, a4);
            goto LABEL_5;
          case 2:
            altitude::FlyoverNightRenderable::setup(*v4, a2, a1, a4);
            goto LABEL_5;
          case 3:
            altitude::FlyoverBorderRenderable::setup(*v4, a2, a1, a4);
            goto LABEL_5;
          case 7:
            if (*((unsigned char *)v9 + 312))
            {
              uint64_t v10 = (ggl::PipelineSetup *)*((void *)v9 + 24);
              uint64_t v11 = *((void *)v9 + 37);
              uint64_t v12 = (std::__shared_weak_count *)*((void *)v9 + 38);
LABEL_11:
              ggl::Flyover::FlyoverPipelineSetup::setState(v10, v11, v12);
              goto LABEL_12;
            }
            if (a4 < 1.0)
            {
              uint64_t v10 = (ggl::PipelineSetup *)*((void *)v9 + 24);
              uint64_t v11 = *((void *)v9 + 37);
              if (*((void *)v10 + 2) != v11)
              {
                uint64_t v12 = (std::__shared_weak_count *)*((void *)v9 + 38);
                goto LABEL_11;
              }
            }
            if (a4 >= 1.0)
            {
              uint64_t v10 = (ggl::PipelineSetup *)*((void *)v9 + 24);
              uint64_t v11 = *((void *)v9 + 35);
              if (*((void *)v10 + 2) != v11)
              {
                uint64_t v12 = (std::__shared_weak_count *)*((void *)v9 + 36);
                goto LABEL_11;
              }
            }
LABEL_12:
            double v13 = *((double *)a2 + 10);
            double v14 = *((double *)a2 + 11);
            double v15 = *((double *)a2 + 12);
            double v17 = *((double *)a2 + 8);
            double v16 = *((double *)a2 + 9);
            double v19 = *((double *)a2 + 6);
            double v18 = *((double *)a2 + 7);
            double v20 = -(v17 * v13 - v18 * v14) - (v17 * v13 - v18 * v14);
            double v21 = -(v19 * v14 - v17 * v16) - (v19 * v14 - v17 * v16);
            double v22 = -(v18 * v16 - v19 * v13) - (v18 * v16 - v19 * v13);
            double v23 = -(v22 * v16 - (-(v18 - v20 * v14) - v21 * v15));
            double v24 = -(v19 + v20 * v15 + v21 * v14 - v22 * v13);
            double v25 = -(v17 + v20 * v13 + v22 * v15 - v21 * v16);
            double v26 = v13 * -2.0;
            double v27 = -(v13 * (v13 * -2.0));
            double v28 = 1.0 - (v27 - v14 * (v14 * -2.0));
            double v29 = v16 * -2.0;
            double v30 = -(v13 * (v16 * -2.0));
            double v31 = v14 * -2.0 * v15;
            double v32 = v30 - v31;
            double v33 = -(v14 * (v16 * -2.0));
            double v34 = v15 * v26;
            double v35 = v15 * v26 - v14 * (v16 * -2.0);
            double v36 = v31 + v30;
            double v37 = v16 * -2.0 * v16 + 1.0;
            double v38 = v37 - -(v14 * (v14 * -2.0));
            double v39 = -(v14 * v26);
            double v40 = v15 * v29;
            v104.f64[0] = v28;
            v104.f64[1] = v36;
            v106.f64[0] = v32;
            v106.f64[1] = v38;
            v108.f64[0] = v35;
            v108.f64[1] = v39 - v40;
            v105.f64[0] = v33 - v34;
            float64x2_t v107 = (float64x2_t)COERCE_UNSIGNED_INT64(v40 + v39);
            v109.f64[0] = v37 - v27;
            v105.f64[1] = 0.0;
            v109.f64[1] = 0.0;
            v110.f64[0] = v24;
            v110.f64[1] = v23;
            v111.f64[0] = v25;
            v111.f64[1] = 1.0;
            uint64_t v41 = (*(uint64_t (**)(altitude::FlyoverRenderable *))(*(void *)v9 + 24))(v9);
            long long v135 = 0u;
            long long v136 = 0u;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v131 = 0u;
            long long v132 = 0u;
            long long v130 = 0u;
            uint64_t v137 = 0x3FF0000000000000;
            uint64_t v42 = *((void *)v9 + 30);
            uint64_t v129 = *((void *)v9 + 29);
            *(void *)&long long v132 = v42;
            *((void *)&v134 + 1) = *((void *)v9 + 31);
            double v43 = *(double *)(v41 + 32);
            double v44 = *(double *)(v41 + 40);
            double v45 = *(double *)(v41 + 48);
            double v46 = v43 + v43;
            double v47 = (v43 + v43) * v43;
            double v48 = (v44 + v44) * v44;
            uint64_t v50 = *(void *)(v41 + 16);
            double v49 = *(double *)(v41 + 24);
            double v51 = v49 + v49;
            double v52 = (v49 + v49) * v43;
            double v53 = (v44 + v44) * v45;
            double v54 = v52 - v53;
            double v55 = v44 * (v49 + v49);
            double v56 = v45 * v46;
            double v57 = v53 + v52;
            double v58 = v45 * v46 + v55;
            double v59 = 1.0 - (v49 + v49) * v49;
            double v60 = v46 * v44;
            double v61 = v45 * v51;
            double v114 = 1.0 - (v47 + v48);
            double v115 = v57;
            double v118 = v54;
            double v119 = v59 - v48;
            double v122 = v58;
            double v123 = v60 - v61;
            double v116 = v55 - v56;
            double v120 = v61 + v60;
            double v124 = v59 - v47;
            uint64_t v117 = 0;
            uint64_t v121 = 0;
            uint64_t v125 = 0;
            long long v126 = *(_OWORD *)v41;
            uint64_t v127 = v50;
            uint64_t v128 = 0x3FF0000000000000;
            gm::operator*<double,4,4,4>(v103, &v114, (double *)&v129);
            gm::operator*<double,4,4,4>(v112[0].f64, v104.f64, v103);
            if (*((unsigned char *)v9 + 312) || a4 < 1.0) {
              *(void *)(*((void *)v9 + 23) + 48) = (unint64_t)((v113.f64[0] + *((double *)a2 + 118) * -0.1)
            }
                                                                          * 1.84467441e19
                                                                          / (*((double *)a2 + 118)
                                                                           * 1.6)
                                                                          + 1.84467441e19);
            uint64_t v62 = *(void **)(*(void *)(*((void *)v9 + 24) + 64) + 16);
            unint64_t v63 = v62[1];
            if (v63) {
              uint64_t v64 = (float32x4_t *)v62[9];
            }
            else {
              uint64_t v64 = 0;
            }
            float32x4_t v65 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112[2]), v112[3]);
            *uint64_t v64 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112[0]), v112[1]);
            v64[1] = v65;
            float32x4_t v66 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112[6]), v113);
            v64[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112[4]), v112[5]);
            v64[3] = v66;
            uint64_t v67 = (*(uint64_t (**)(altitude::FlyoverRenderable *))(*(void *)v9 + 24))(v9);
            long long v135 = 0u;
            long long v136 = 0u;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v131 = 0u;
            long long v132 = 0u;
            long long v130 = 0u;
            uint64_t v137 = 0x3FF0000000000000;
            uint64_t v68 = *((void *)v9 + 30);
            uint64_t v129 = *((void *)v9 + 29);
            *(void *)&long long v132 = v68;
            *((void *)&v134 + 1) = *((void *)v9 + 31);
            double v69 = *(double *)(v67 + 32);
            double v70 = *(double *)(v67 + 40);
            double v71 = *(double *)(v67 + 48);
            double v72 = v69 + v69;
            double v73 = (v69 + v69) * v69;
            double v74 = (v70 + v70) * v70;
            uint64_t v76 = *(void *)(v67 + 16);
            double v75 = *(double *)(v67 + 24);
            double v77 = v75 + v75;
            double v78 = (v75 + v75) * v69;
            double v79 = (v70 + v70) * v71;
            double v80 = v78 - v79;
            double v81 = v70 * (v75 + v75);
            double v82 = v71 * v72;
            double v83 = v79 + v78;
            double v84 = v71 * v72 + v81;
            double v85 = 1.0 - (v75 + v75) * v75;
            double v86 = v72 * v70;
            double v87 = v71 * v77;
            double v114 = 1.0 - (v73 + v74);
            double v115 = v83;
            double v118 = v80;
            double v119 = v85 - v74;
            double v122 = v84;
            double v123 = v86 - v87;
            double v116 = v81 - v82;
            double v120 = v87 + v86;
            double v124 = v85 - v73;
            uint64_t v117 = 0;
            uint64_t v121 = 0;
            uint64_t v125 = 0;
            long long v126 = *(_OWORD *)v67;
            uint64_t v127 = v76;
            uint64_t v128 = 0x3FF0000000000000;
            gm::operator*<double,4,4,4>(v104.f64, &v114, (double *)&v129);
            float32x4_t v88 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v106), v107);
            v64[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v104), v105);
            v64[5] = v88;
            float32x4_t v89 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v110), v111);
            v64[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v108), v109);
            v64[7] = v89;
            if (v63)
            {
              unint64_t v90 = v62[8];
              if (v90 <= v63) {
                unint64_t v90 = v63;
              }
              v62[7] = 0;
              v62[8] = v90;
            }
            uint64_t v91 = *((void *)v9 + 24);
            uint64_t v92 = *(void *)(*(void *)(v91 + 64) + 48);
            unint64_t v93 = *(void *)(v92 + 8);
            **(float **)(v92 + 72) = a4;
            if (*(void *)(v92 + 64) > v93) {
              unint64_t v93 = *(void *)(v92 + 64);
            }
            *(void *)(v92 + 56) = 0;
            *(void *)(v92 + 64) = v93;
            v94 = (char *)*((void *)v9 + 32);
            double v95 = (char *)*((void *)v9 + 33);
            if (v94 == v95) {
              goto LABEL_34;
            }
            unint64_t v96 = v95 - v94 - 8;
            double v97 = (char *)*((void *)v9 + 32);
            if (v96 >= 8)
            {
              uint64_t v98 = (v96 >> 3) + 1;
              double v99 = (uint64_t *)(v94 + 8);
              uint64_t v100 = v98 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                uint64_t v101 = *v99;
                *(void *)(*(v99 - 1) + 88) = a1;
                *(void *)(v101 + 88) = a1;
                v99 += 2;
                v100 -= 2;
              }
              while (v100);
              if (v98 == (v98 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_34;
              }
              double v97 = &v94[8 * (v98 & 0x3FFFFFFFFFFFFFFELL)];
            }
            do
            {
              uint64_t v102 = *(void *)v97;
              v97 += 8;
              *(void *)(v102 + 88) = a1;
            }
            while (v97 != v95);
LABEL_34:
            *(void *)(*(void *)(v91 + 96) + 8) = *(void *)(*(void *)v94 + 16);
            *(void *)(*(void *)(*((void *)v9 + 24) + 96) + 16) = *(void *)(*(void *)(*((void *)v9 + 32)
                                                                                                 + 8)
                                                                                     + 16);
LABEL_5:
            if (++v4 == v5) {
              return;
            }
            break;
          default:
            goto LABEL_5;
        }
      }
    }
  }
}

void altitude::GlobeTileComponent::setupSurfaceElement(altitude::GlobeTileComponent *this, altitude::View *a2)
{
  if (this)
  {
    uint64_t v2 = (void **)*((void *)this + 6);
    for (i = (void **)*((void *)this + 7); v2 != i; v64[8] = v65)
    {
      uint64_t v5 = *v2++;
      double v6 = *((double *)a2 + 10);
      double v7 = *((double *)a2 + 11);
      double v8 = *((double *)a2 + 12);
      double v10 = *((double *)a2 + 8);
      double v9 = *((double *)a2 + 9);
      double v12 = *((double *)a2 + 6);
      double v11 = *((double *)a2 + 7);
      uint64_t v13 = v5[24];
      double v14 = -(v10 * v6 - v11 * v7) - (v10 * v6 - v11 * v7);
      double v15 = -(v12 * v7 - v10 * v9) - (v12 * v7 - v10 * v9);
      double v16 = -(v11 * v9 - v12 * v6) - (v11 * v9 - v12 * v6);
      double v17 = -(-(v11 - v14 * v7) - v15 * v8);
      double v18 = v12 + v14 * v8 + v15 * v7;
      double v19 = v10 + v14 * v6 + v16 * v8;
      double v20 = v6 * -2.0;
      double v21 = -(v6 * (v6 * -2.0));
      double v22 = -(v17 + v16 * v9);
      double v23 = -(v7 * (v7 * -2.0));
      double v24 = 1.0 - (v21 - v7 * (v7 * -2.0));
      double v25 = v9 * -2.0;
      double v26 = -(v18 - v16 * v6);
      double v27 = -(v6 * (v9 * -2.0));
      double v28 = v7 * -2.0 * v8;
      double v29 = -(v7 * (v9 * -2.0));
      double v30 = v8 * v20;
      double v31 = -(v19 - v15 * v9);
      double v32 = v8 * v20 - v7 * (v9 * -2.0);
      double v33 = v9 * -2.0 * v9 + 1.0;
      double v34 = -(v7 * v20);
      double v35 = v8 * v25;
      v68[0] = v24;
      v68[1] = v28 + v27;
      v68[8] = v32;
      v68[9] = v34 - v35;
      v68[2] = v29 - v30;
      v68[5] = v33 - v23;
      v68[6] = v35 + v34;
      v68[4] = v27 - v28;
      v68[10] = v33 - v21;
      v68[3] = 0.0;
      v68[7] = 0.0;
      v68[11] = 0.0;
      v68[12] = v26;
      v68[13] = v22;
      v68[14] = v31;
      v68[15] = 1.0;
      uint64_t v36 = (*(uint64_t (**)(void *))(*v5 + 24))(v5);
      memset(&v73[8], 0, 112);
      *(void *)&v73[120] = 0x3FF0000000000000;
      uint64_t v37 = v5[30];
      *(void *)double v73 = v5[29];
      *(void *)&v73[40] = v37;
      *(void *)&v73[80] = v5[31];
      double v38 = *(double *)(v36 + 32);
      double v39 = *(double *)(v36 + 40);
      double v40 = *(double *)(v36 + 48);
      double v41 = v38 + v38;
      double v42 = (v38 + v38) * v38;
      double v43 = (v39 + v39) * v39;
      uint64_t v45 = *(void *)(v36 + 16);
      double v44 = *(double *)(v36 + 24);
      double v46 = v44 + v44;
      double v47 = (v44 + v44) * v38;
      double v48 = (v39 + v39) * v40;
      double v49 = v47 - v48;
      double v50 = v39 * (v44 + v44);
      double v51 = v40 * v41;
      double v52 = v48 + v47;
      double v53 = v40 * v41 + v50;
      double v54 = 1.0 - (v44 + v44) * v44;
      double v55 = v41 * v39;
      double v56 = v40 * v46;
      v69[0] = 1.0 - (v42 + v43);
      v69[1] = v52;
      v69[4] = v49;
      v69[5] = v54 - v43;
      v69[8] = v53;
      v69[9] = v55 - v56;
      v69[2] = v50 - v51;
      v69[6] = v56 + v55;
      v69[10] = v54 - v42;
      v69[3] = 0.0;
      v69[7] = 0.0;
      v69[11] = 0.0;
      long long v70 = *(_OWORD *)v36;
      uint64_t v71 = v45;
      uint64_t v72 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>(v67, v69, (double *)v73);
      gm::operator*<double,4,4,4>((double *)v73, v68, v67);
      float32x2_t v57 = vcvt_f32_f64(*(float64x2_t *)&v73[16]);
      float32x2_t v58 = vcvt_f32_f64(*(float64x2_t *)&v73[32]);
      float32x2_t v59 = vcvt_f32_f64(*(float64x2_t *)&v73[48]);
      float32x2_t v60 = vcvt_f32_f64(*(float64x2_t *)&v73[64]);
      float32x2_t v61 = vcvt_f32_f64(*(float64x2_t *)&v73[80]);
      float32x2_t v62 = vcvt_f32_f64(*(float64x2_t *)&v73[96]);
      float32x2_t v63 = vcvt_f32_f64(*(float64x2_t *)&v73[112]);
      uint64_t v64 = **(void ***)(v13 + 64);
      unint64_t v65 = v64[1];
      float32x4_t v66 = (float32x2_t *)v64[9];
      *float32x4_t v66 = vcvt_f32_f64(*(float64x2_t *)v73);
      v66[1] = v57;
      v66[2] = v58;
      v66[3] = v59;
      v66[4] = v60;
      v66[5] = v61;
      v66[6] = v62;
      v66[7] = v63;
      if (v64[8] > v65) {
        unint64_t v65 = v64[8];
      }
      v64[7] = 0;
    }
  }
}

void md::RasterOverlayData::~RasterOverlayData(md::RasterOverlayData *this)
{
  uint64_t v2 = (CGContext *)*((void *)this + 3);
  if (v2) {
    CGContextRelease(v2);
  }
  if (*(void *)this) {
    (*(void (**)(void))(**(void **)this + 8))(*(void *)this);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t md::RasterOverlayData::drawContext(md::RasterOverlayData *this)
{
  uint64_t result = *((void *)this + 3);
  if (!result)
  {
    int v3 = (float)(*((float *)this + 9) * (float)*((int *)this + 8));
    uint64_t v4 = operator new(0x60uLL);
    v4[1] = 0;
    v4[2] = 0;
    *uint64_t v4 = &unk_1EF583AF8;
    uint64_t v5 = ggl::TextureData2D::TextureData2D((uint64_t)(v4 + 3), v3, v3, 1u, 12, 1);
    double v6 = (std::__shared_weak_count *)*((void *)this + 2);
    *((void *)this + 1) = v5;
    *((void *)this + 2) = v4;
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    double v7 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
    double v8 = (void *)(*(uint64_t (**)(void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), 0);
    *((void *)this + 3) = CGBitmapContextCreate(v8, v3, v3, 8uLL, 4 * v3, v7, 1u);
    CGColorSpaceRelease(v7);
    memset(&v14, 0, sizeof(v14));
    CGContextGetBaseCTM();
    CGContextTranslateCTM(*((CGContextRef *)this + 3), 0.0, (double)v3);
    CGContextScaleCTM(*((CGContextRef *)this + 3), 1.0, -1.0);
    memset(&v12, 0, sizeof(v12));
    CGAffineTransformTranslate(&v13, &v12, 0.0, (double)v3);
    CGAffineTransform v14 = v13;
    CGAffineTransform v11 = v13;
    CGAffineTransformScale(&v13, &v11, 1.0, -1.0);
    CGAffineTransform v14 = v13;
    CGAffineTransform v10 = v13;
    CGFloat v9 = *((float *)this + 9);
    CGAffineTransformScale(&v13, &v10, v9, v9);
    CGAffineTransform v14 = v13;
    CGContextScaleCTM(*((CGContextRef *)this + 3), v9, v9);
    CGContextSetBaseCTM();
    return *((void *)this + 3);
  }
  return result;
}

void std::__shared_ptr_emplace<md::TransitInterTileMediator>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<md::TransitInterTileMediator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitInterTileMediator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::CTransitRenderResources::~CTransitRenderResources(md::CTransitRenderResources *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    uint64_t v4 = v2 + 16;
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(*(void *)(v4 + 8) + 32) = 0;
    if (v3) {
      uint64_t v5 = (void *)(v3 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    *uint64_t v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::__unordered_map_hasher<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,md::DashTextureCache::KeyHasher,std::equal_to<md::DashTextureCache::Key>,true>,std::__unordered_map_equal<md::DashTextureCache::Key,std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>,std::equal_to<md::DashTextureCache::Key>,md::DashTextureCache::KeyHasher,true>,std::allocator<std::__hash_value_type<md::DashTextureCache::Key,std::shared_ptr<md::DashTexture>>>>::~__hash_table((uint64_t)this + 328);
  double v6 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    double v7 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v7) {
      goto LABEL_12;
    }
  }
  else
  {
    double v7 = (std::__shared_weak_count *)*((void *)this + 16);
    if (!v7) {
      goto LABEL_12;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_12:

  double v8 = (md::TransitNodeFeaturePool *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v8)
  {
    md::TransitNodeFeaturePool::~TransitNodeFeaturePool(v8);
    MEMORY[0x1A6239270]();
  }
  CGFloat v9 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
}

uint64_t md::MuninRoadLabelPart::debugCompositeClassName@<X0>(unsigned char *a1@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"MuninRoadLabelPart", 18);
  uint64_t v3 = v12[0];
  *(_DWORD *)((char *)&v12[1] + *(void *)(v12[0] - 24)) = *(_DWORD *)((unsigned char *)&v12[1] + *(void *)(v12[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v12[2] + *(void *)(v3 - 24)) = 1;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n  padding:", 11);
  std::ostream::operator<<();
  if ((v19 & 0x10) != 0)
  {
    unint64_t v5 = v18;
    if (v18 < v15)
    {
      unint64_t v18 = v15;
      unint64_t v5 = v15;
    }
    double v6 = (const void **)&v14;
  }
  else
  {
    if ((v19 & 8) == 0)
    {
      size_t v4 = 0;
      a1[23] = 0;
      goto LABEL_16;
    }
    double v6 = (const void **)v13;
    unint64_t v5 = v13[2];
  }
  double v7 = *v6;
  size_t v4 = v5 - (void)*v6;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = operator new(v8 + 1);
    *((void *)a1 + 1) = v4;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v10;
    a1 = v10;
    goto LABEL_15;
  }
  a1[23] = v4;
  if (v4) {
LABEL_15:
  }
    memmove(a1, v7, v4);
LABEL_16:
  a1[v4] = 0;
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v20);
}

void sub_1A2495C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::MuninRoadLabelPart::modelMatrix(md::MuninRoadLabelPart *this)
{
  return *((void *)this + 79);
}

float md::MuninRoadLabelPart::layoutForDisplay(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = **(void ***)(a1 + 576);
  uint64_t v41 = 0;
  if ((*(unsigned int (**)(void *, double *, uint64_t, uint64_t, uint64_t *))(*v8 + 120))(v8, a2, a3, a4, &v41) == 37)
  {
    uint64_t v10 = (float *)v8[3];
    float result = v10[80];
    float v11 = v10[78];
    if (result >= v11 && v10[81] >= v10[79])
    {
      uint64_t v12 = *(void *)(a1 + 32);
      double v13 = *(double *)(v12 + 32);
      double v14 = *(double *)(v12 + 40);
      double v15 = *(double *)(v12 + 48);
      double v16 = 1.0 / sqrt(v13 * v13 + v14 * v14 + v15 * v15);
      double v17 = v16 * v13;
      double v18 = v16 * v14;
      _D6 = v16 * v15;
      _Q17 = *(float64x2_t *)(a1 + 640);
      double v21 = *(double *)(a1 + 656);
      __asm { FMLA            D5, D6, V17.D[1] }
      double v27 = -(_D6 * _Q17.f64[0] - v17 * v21);
      double v28 = vmlad_n_f64(-(v17 * _Q17.f64[1]), v18, _Q17.f64[0]);
      if (*(unsigned char *)(a1 + 665) == 2
        || !*(unsigned char *)(a1 + 665)
        && (double v29 = a2[73] - v14,
            double v30 = a2[72] - v13,
            double v31 = a2[74] - v15,
            double v32 = 1.0 / sqrt(v29 * v29 + v30 * v30 + v31 * v31),
            double v33 = v32 * v31,
            double v34 = v32 * v30,
            double v35 = v32 * v29,
            -(-(v34 * _D6 - v33 * v17) * _D6 - -(v35 * v17 - v34 * v18) * v18) * _D5
          + -(-(v35 * v17 - v34 * v18) * v17 - -(v33 * v18 - v35 * _D6) * _D6) * v27
          + -(-(v33 * v18 - v35 * _D6) * v18 - -(v34 * _D6 - v33 * v17) * v17) * v28 < 0.0))
      {
        _Q17 = vnegq_f64(_Q17);
        double v21 = -v21;
        _D5 = -_D5;
        double v27 = -v27;
        double v28 = -v28;
      }
      double v36 = a2[95] * *(float *)(v12 + 72) * *(float *)(v12 + 68);
      uint64_t v37 = *(void *)(a1 + 632);
      *(float64x2_t *)uint64_t v37 = vmulq_n_f64(_Q17, v36);
      *(double *)(v37 + 16) = v36 * v21;
      *(void *)(v37 + 24) = 0;
      *(double *)(v37 + 32) = v36 * v17;
      *(double *)(v37 + 40) = v36 * v18;
      *(double *)(v37 + 48) = v36 * _D6;
      *(void *)(v37 + 56) = 0;
      *(double *)(v37 + 64) = _D5;
      *(double *)(v37 + 72) = v27;
      *(double *)(v37 + 80) = v28;
      *(void *)(v37 + 88) = 0;
      *(double *)(v37 + 96) = v13;
      *(double *)(v37 + 104) = v14;
      *(double *)(v37 + 112) = v15;
      *(void *)(v37 + 120) = 0x3FF0000000000000;
      if (*(unsigned char *)(a1 + 664))
      {
        float v38 = 0.0;
        if (*(unsigned char *)(a1 + 664) != 4) {
          goto LABEL_14;
        }
        float v39 = -0.5;
      }
      else
      {
        float v39 = 0.5;
      }
      float v38 = (float)(result - v11) * v39;
LABEL_14:
      uint64_t v41 = LODWORD(v38);
      if ((*(unsigned int (**)(void *, double *, uint64_t, uint64_t, uint64_t *))(*v8 + 120))(v8, a2, a3, a4, &v41) == 37)
      {
        uint64_t v40 = v8[3];
        *(_DWORD *)(a1 + 392) = *(_DWORD *)(v40 + 392);
        *(_DWORD *)(a1 + 396) = *(_DWORD *)(v40 + 396);
        *(_DWORD *)(a1 + 400) = *(_DWORD *)(v40 + 400);
        float result = *(float *)(v40 + 404);
        *(float *)(a1 + 404) = result;
      }
    }
  }
  return result;
}

uint64_t md::MuninRoadLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = **(void ***)(a1 + 576);
  uint64_t v15 = 0;
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t *))(*v6 + 80))(v6, a2, a3, &v15);
  if (result == 37)
  {
    uint64_t v8 = (float *)v6[3];
    float v9 = v8[20];
    float v10 = v8[18];
    if (v9 >= v10 && v8[21] >= v8[19])
    {
      float v11 = v9 - v10;
      float v12 = v11 * -0.5;
      float v13 = v11 * 0.5;
      if (*(unsigned char *)(a1 + 664)) {
        float v13 = 0.0;
      }
      if (*(unsigned char *)(a1 + 664) == 4) {
        float v13 = v12;
      }
      uint64_t v15 = LODWORD(v13);
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t *))(*v6 + 80))(v6, a2, a3, &v15);
      if (result == 37)
      {
        double v14 = (_DWORD *)(*(uint64_t (**)(void *))(*v6 + 248))(v6);
        *(_DWORD *)(a1 + 152) = *v14;
        *(_DWORD *)(a1 + 156) = v14[1];
        *(_DWORD *)(a1 + 160) = v14[2];
        *(_DWORD *)(a1 + 164) = v14[3];
        return 37;
      }
    }
    else
    {
      return 14;
    }
  }
  return result;
}

void md::MuninRoadLabelPart::~MuninRoadLabelPart(md::MuninRoadLabelPart *this)
{
  *(void *)this = &unk_1EF539640;
  uint64_t v2 = *((void *)this + 79);
  *((void *)this + 79) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40AE2C30F4);
  }
  md::CompositeLabelPart::~CompositeLabelPart(this);
  uint64_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v5) {
      operator new();
    }
  }
  size_t v4 = *(void (**)(void))(**((void **)v3 + 91) + 40);
  v4();
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF539640;
  uint64_t v2 = *((void *)this + 79);
  *((void *)this + 79) = 0;
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40AE2C30F4);
  }
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

void std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF51E650;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1EF51E650;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF51E650;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF51E650;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<ggl::RenderBuffer *,std::shared_ptr<ggl::Texture>::__shared_ptr_default_delete<ggl::Texture,ggl::RenderBuffer>,std::allocator<ggl::RenderBuffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::RenderBuffer *,std::shared_ptr<ggl::Texture>::__shared_ptr_default_delete<ggl::Texture,ggl::RenderBuffer>,std::allocator<ggl::RenderBuffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  (*(void (**)(void))(***(void ***)(a1 + 8) + 32))(**(void **)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = **(void **)(a1 + 16);
  int v5 = *(char **)(v2 + 96);
  double v6 = *(char **)(v2 + 104);
  uint64_t v4 = v2 + 96;
  if (v5 != v6)
  {
    while (*v5 != 2)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_6;
      }
    }
  }
  if (v5 == v6)
  {
LABEL_6:
    v10[0] = 2;
    uint64_t v11 = 0;
    int v5 = geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(v4, v10);
  }
  uint64_t v7 = *((void *)v5 + 1);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 56);
  return v8(v3, v7);
}

__n128 std::__function::__func<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF51E5C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF51E5C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::presentDrawable(geo::handle<void>)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF51E608;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0,std::allocator<md::MapEngineFrameService::makeDrawableReady(geo::handle<void>)::$_0>,void ()(void)>::~__func()
{
}

void *md::MapEngineFrameService::dispatchAsync(void *result, uint64_t a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = result[11];
  if (a2 < (unint64_t)((result[12] - v3) >> 3))
  {
    uint64_t v4 = *(void *)(v3 + 8 * a2);
    if (v4 && HIDWORD(a2) == HIDWORD(v4))
    {
      uint64_t v6 = result[14] + 8 * v4;
      if (v6 != result[15])
      {
        ++*(void *)(*(void *)v6 + 120);
        uint64_t v7 = result[21];
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 3321888768;
        v23[2] = ___ZN2md21MapEngineFrameService13dispatchAsyncEN3geo6handleIvEENSt3__18functionIFvvEEE_block_invoke;
        v23[3] = &__block_descriptor_80_ea8_48c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
        v23[4] = result;
        v23[5] = a2;
        uint64_t v8 = (void *)a3[3];
        if (v8)
        {
          if (v8 == a3)
          {
            double v25 = v24;
            (*(void (**)(void *, void *))(*a3 + 24))(a3, v24);
          }
          else
          {
            double v25 = (void *)(*(uint64_t (**)(void *))(*v8 + 16))(v8);
          }
        }
        else
        {
          double v25 = 0;
        }
        float v9 = v23;
        double v21 = &unk_1EF55A0B8;
        id v22 = 0;
        float v10 = (void *)[v9 copy];
        id v11 = v22;
        id v22 = v10;

        geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(&v19, (uint64_t)&v21);
        double v27 = 0;
        float v12 = operator new(0x20uLL);
        void *v12 = &unk_1EF57A9C8;
        v12[1] = &unk_1EF55A0B8;
        v12[2] = 0;
        uint64_t v13 = MEMORY[0x1A6239EB0](v20);
        double v14 = (void *)v12[2];
        v12[2] = v13;

        id v15 = v20;
        id v20 = 0;

        double v27 = v12;
        geo::TaskQueue::barrierAsync(&v17, v7, v26);
        if (v27 == v26)
        {
          (*(void (**)(void *))(v26[0] + 32))(v26);
        }
        else if (v27)
        {
          (*(void (**)(void))(*v27 + 40))();
        }
        int v19 = &unk_1EF55A0B8;

        double v21 = &unk_1EF55A0B8;
        double v16 = v18;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        __n128 result = (void *)v9[9];
        if (result == v24)
        {
          return (void *)(*(uint64_t (**)(void *))(v24[0] + 32))(v24);
        }
        else if (result)
        {
          return (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
        }
      }
    }
  }
  return result;
}

void sub_1A2496DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  std::function<void ()(void)>::~function((void *)(v18 - 104));

  std::function<void ()(void)>::~function(v16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2md21MapEngineFrameService13dispatchAsyncEN3geo6handleIvEENSt3__18functionIFvvEEE_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = (void *)a1[9];
  if (v4)
  {
    if (v4 == a1 + 6)
    {
      uint64_t v7 = v6;
      (*(void (**)(void *, void *))(*v4 + 24))(v4, v6);
    }
    else
    {
      uint64_t v7 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v2 + 32))(v2, v3, v6);
  uint64_t result = (uint64_t)v7;
  if (v7 == v6) {
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
  if (v7) {
    return (*(uint64_t (**)(void))(*v7 + 40))();
  }
  return result;
}

void sub_1A2496FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF55A0B8;
  a1[1] = 0;
  uint64_t v3 = (void *)MEMORY[0x1A6239EB0](*(void *)(a2 + 8));
  if (v3)
  {
    uint64_t v4 = v3;
    int v5 = (void *)[v3 copy];
  }
  else
  {
    int v5 = 0;
  }
  uint64_t v6 = MEMORY[0x1A6239EB0](v5);
  uint64_t v7 = (void *)a1[1];
  a1[1] = v6;

  return a1;
}

void sub_1A2497054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A0B8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A0B8;

  return a1;
}

void std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = (void (**)(void))MEMORY[0x1A6239EB0](*(void *)(a1 + 16));
  v1[2]();
}

void sub_1A249716C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EF55A0B8;

  operator delete((void *)a1);
}

void std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EF55A0B8;
}

void *std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57A9C8;
  return geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(a2 + 1, a1 + 8);
}

void *std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_1EF57A9C8;
  geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(v2 + 1, v1);
  return v2;
}

void sub_1A2497284(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57A9C8;
  *(void *)(a1 + 8) = &unk_1EF55A0B8;

  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1},std::allocator<geo::TaskQueue::barrierAsync_b(void({block_pointer})(void))::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57A9C8;
  *(void *)(a1 + 8) = &unk_1EF55A0B8;

  return a1;
}

uint64_t __destroy_helper_block_ea8_48c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  uint64_t result = *(void *)(a1 + 72);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t __copy_helper_block_ea8_48c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 72);
  if (result)
  {
    if (result == a2 + 48)
    {
      *(void *)(a1 + 72) = a1 + 48;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 72) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 72) = result;
    }
  }
  else
  {
    *(void *)(a1 + 72) = 0;
  }
  return result;
}

void md::MapEngineFrameService::Data::~Data(md::MapEngineFrameService::Data *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (ggl::RenderQueue *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4)
  {
    ggl::RenderQueue::~RenderQueue(v4);
    MEMORY[0x1A6239270]();
  }
}

uint64_t md::MapEngineFrameService::Data::{unnamed type#2}::~Data(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(ggl::RenderQueue **)a1;
  *(void *)a1 = 0;
  if (v3)
  {
    ggl::RenderQueue::~RenderQueue(v3);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

void md::MapEngineFrameService::~MapEngineFrameService(md::MapEngineFrameService *this)
{
  md::MapEngineFrameService::~MapEngineFrameService(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t **v27;
  void *v28;
  uint64_t v29;
  ggl::RenderQueue *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;

  *(void *)this = &unk_1EF5134A0;
  gdc::tf::Executor::~Executor((md::MapEngineFrameService *)((char *)this + 192));
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  double v36 = 0;
  uint64_t v37 = 0;
  double v35 = &v36;
  uint64_t v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = &v36;
      float v9 = &v36;
      if (v36)
      {
        float v10 = v36;
        while (1)
        {
          while (1)
          {
            float v9 = (uint64_t **)v10;
            id v11 = v10[4];
            if ((unint64_t)v6 >= v11) {
              break;
            }
            float v10 = *v9;
            uint64_t v8 = v9;
            if (!*v9) {
              goto LABEL_20;
            }
          }
          if (v11 >= (unint64_t)v6) {
            break;
          }
          float v10 = v9[1];
          if (!v10)
          {
            uint64_t v8 = v9 + 1;
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        float v12 = (uint64_t *)operator new(0x28uLL);
        v12[4] = (uint64_t)v6;
        void *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v9;
        *uint64_t v8 = v12;
        if (*v35)
        {
          double v35 = (uint64_t **)*v35;
          float v12 = *v8;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v36, v12);
        uint64_t v7 = ++v37;
        uint64_t v6 = (void *)*((void *)this + 7);
      }
      uint64_t v6 = (void *)*v6;
      *((void *)this + 7) = v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v13 = *((void *)this + 5);
  double v14 = (char *)*((void *)this + 2);
  id v15 = (char *)this + 24;
  double v16 = v7 == *((void *)this + 4) * v13 || v14 == v15;
  if (v16 || v13 == 0)
  {
    if (v14 == v15) {
      goto LABEL_59;
    }
    goto LABEL_61;
  }
  uint64_t v18 = 1;
  do
  {
    if (v18)
    {
      int v19 = 0;
      id v20 = *((void *)v14 + 4);
      do
      {
        double v21 = (void *)(v20 + (v19 << 7));
        id v22 = v36;
        if (!v36) {
          goto LABEL_46;
        }
        double v23 = &v36;
        do
        {
          double v24 = v22;
          double v25 = v23;
          double v26 = v22[4];
          double v27 = (uint64_t **)(v22 + 1);
          if (v26 >= (unint64_t)v21)
          {
            double v27 = (uint64_t **)v24;
            double v23 = (uint64_t **)v24;
          }
          id v22 = *v27;
        }
        while (v22);
        if (v23 == &v36) {
          goto LABEL_46;
        }
        if (v26 < (unint64_t)v21) {
          double v24 = (uint64_t *)v25;
        }
        if ((unint64_t)v21 < v24[4])
        {
LABEL_46:
          uint64_t v28 = (void *)v21[12];
          if (v28)
          {
            v21[13] = v28;
            operator delete(v28);
          }
          double v29 = v21[11];
          v21[11] = 0;
          if (v29) {
            (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
          }
          double v30 = (ggl::RenderQueue *)v21[10];
          v21[10] = 0;
          if (v30)
          {
            ggl::RenderQueue::~RenderQueue(v30);
            MEMORY[0x1A6239270]();
          }
        }
        ++v19;
        uint64_t v18 = *((void *)this + 5);
      }
      while (v19 < v18);
    }
    double v31 = (char *)*((void *)v14 + 1);
    if (v31)
    {
      do
      {
        double v32 = v31;
        double v31 = *(char **)v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        double v32 = (char *)*((void *)v14 + 2);
        double v16 = *(void *)v32 == (void)v14;
        double v14 = v32;
      }
      while (!v16);
    }
    double v14 = v32;
  }
  while (v32 != v15);
  double v14 = (char *)*((void *)this + 2);
  if (v14 != v15)
  {
    do
    {
LABEL_61:
      free(*((void **)v14 + 4));
      double v33 = (char *)*((void *)v14 + 1);
      if (v33)
      {
        do
        {
          double v34 = v33;
          double v33 = *(char **)v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          double v34 = (char *)*((void *)v14 + 2);
          double v16 = *(void *)v34 == (void)v14;
          double v14 = v34;
        }
        while (!v16);
      }
      double v14 = v34;
    }
    while (v34 != v15);
  }
LABEL_59:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 3));
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = v15;
  *((void *)this + 7) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v36);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 3));
}

void sub_1A24978F8(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v2);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 24));
  _Unwind_Resume(a1);
}

void md::MapEngineCompatabilityServiceImpl::~MapEngineCompatabilityServiceImpl(md::MapEngineCompatabilityServiceImpl *this)
{
}

uint64_t md::MapEngineCallbackGraphService::get(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 248);
  if (a2 >= (unint64_t)((*(void *)(a1 + 256) - v5) >> 3)
    || ((uint64_t v6 = *(void *)(v5 + 8 * a2)) != 0 ? (v7 = HIDWORD(a2) == HIDWORD(v6)) : (v7 = 0),
        !v7 || (float v10 = (uint64_t **)(*(void *)(a1 + 272) + 16 * v6), v10 == *(uint64_t ***)(a1 + 280))))
  {
    std::__shared_mutex_base::unlock_shared(v4);
    return 0;
  }
  else
  {
    float v12 = *v10;
    id v11 = (std::__shared_weak_count *)v10[1];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__shared_mutex_base::unlock_shared(v4);
    uint64_t v8 = *v12;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v8;
}

void sub_1A2497A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__shared_ptr_pointer<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource *,std::shared_ptr<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>::__shared_ptr_default_delete<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource,md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>,std::allocator<md::TrackedWeakPtr<gdc::tf::Taskflow>::Resource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::MapEngineCallbackGraphService::~MapEngineCallbackGraphService(md::MapEngineCallbackGraphService *this)
{
  md::MapEngineCallbackGraphService::~MapEngineCallbackGraphService(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t **v28;
  unint64_t v29;
  uint64_t **v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;

  *(void *)this = &unk_1EF513D40;
  uint64_t v2 = (void *)*((void *)this + 37);
  if (v2)
  {
    *((void *)this + 38) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 34);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 35);
    uint64_t v5 = (void *)*((void *)this + 34);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 16;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 34);
    }
    *((void *)this + 35) = v3;
    operator delete(v5);
  }
  BOOL v7 = (void *)*((void *)this + 31);
  if (v7)
  {
    *((void *)this + 32) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 28);
  if (v8)
  {
    *((void *)this + 29) = v8;
    operator delete(v8);
  }
  double v42 = 0;
  double v43 = 0;
  uint64_t v41 = &v42;
  float v9 = (void *)*((void *)this + 27);
  if (v9)
  {
    float v10 = 0;
    do
    {
      id v11 = &v42;
      float v12 = &v42;
      if (v42)
      {
        uint64_t v13 = v42;
        while (1)
        {
          while (1)
          {
            float v12 = (uint64_t **)v13;
            double v14 = v13[4];
            if ((unint64_t)v9 >= v14) {
              break;
            }
            uint64_t v13 = *v12;
            id v11 = v12;
            if (!*v12) {
              goto LABEL_27;
            }
          }
          if (v14 >= (unint64_t)v9) {
            break;
          }
          uint64_t v13 = v12[1];
          if (!v13)
          {
            id v11 = v12 + 1;
            goto LABEL_27;
          }
        }
      }
      else
      {
LABEL_27:
        id v15 = (uint64_t *)operator new(0x28uLL);
        v15[4] = (uint64_t)v9;
        *id v15 = 0;
        v15[1] = 0;
        v15[2] = (uint64_t)v12;
        std::__shared_weak_count *v11 = v15;
        if (*v41)
        {
          uint64_t v41 = (uint64_t **)*v41;
          id v15 = *v11;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v42, v15);
        float v10 = ++v43;
        float v9 = (void *)*((void *)this + 27);
      }
      float v9 = (void *)*v9;
      *((void *)this + 27) = v9;
    }
    while (v9);
  }
  else
  {
    float v10 = 0;
  }
  double v16 = *((void *)this + 25);
  double v17 = (char *)*((void *)this + 22);
  uint64_t v18 = (char *)this + 184;
  int v19 = v10 == *((void *)this + 24) * v16 || v17 == v18;
  if (v19 || v16 == 0)
  {
    if (v17 == v18) {
      goto LABEL_39;
    }
    goto LABEL_72;
  }
  double v21 = 1;
  do
  {
    if (v21)
    {
      id v22 = 0;
      double v23 = *((void *)v17 + 4);
      do
      {
        double v24 = (void *)(v23 + 88 * v22);
        double v25 = v42;
        if (!v42) {
          goto LABEL_53;
        }
        double v26 = &v42;
        do
        {
          double v27 = v25;
          uint64_t v28 = v26;
          double v29 = v25[4];
          double v30 = (uint64_t **)(v25 + 1);
          if (v29 >= (unint64_t)v24)
          {
            double v30 = (uint64_t **)v27;
            double v26 = (uint64_t **)v27;
          }
          double v25 = *v30;
        }
        while (v25);
        if (v26 == &v42) {
          goto LABEL_53;
        }
        if (v29 < (unint64_t)v24) {
          double v27 = (uint64_t *)v28;
        }
        if ((unint64_t)v24 < v27[4])
        {
LABEL_53:
          double v31 = v24[10];
          v24[10] = 0;
          if (v31)
          {
            geo::Pool<geo::IntrusiveNode<gdc::tf::TaskData>>::disposeElements(v31);
            std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v31 + 8));
            MEMORY[0x1A6239270](v31, 0x1020C407A7143E5);
          }
          double v32 = (void *)v24[7];
          if (v32)
          {
            v24[8] = v32;
            operator delete(v32);
          }
          double v33 = (void *)v24[4];
          if (v33)
          {
            do
            {
              double v35 = (void *)*v33;
              double v36 = v33[5];
              v33[5] = 0;
              if (v36) {
                (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
              }
              operator delete(v33);
              double v33 = v35;
            }
            while (v35);
          }
          double v34 = (void *)v24[2];
          v24[2] = 0;
          if (v34) {
            operator delete(v34);
          }
        }
        ++v22;
        double v21 = *((void *)this + 25);
      }
      while (v22 < v21);
    }
    uint64_t v37 = (char *)*((void *)v17 + 1);
    if (v37)
    {
      do
      {
        float v38 = v37;
        uint64_t v37 = *(char **)v37;
      }
      while (v37);
    }
    else
    {
      do
      {
        float v38 = (char *)*((void *)v17 + 2);
        int v19 = *(void *)v38 == (void)v17;
        double v17 = v38;
      }
      while (!v19);
    }
    double v17 = v38;
  }
  while (v38 != v18);
  double v17 = (char *)*((void *)this + 22);
  if (v17 != v18)
  {
    do
    {
LABEL_72:
      free(*((void **)v17 + 4));
      float v39 = (char *)*((void *)v17 + 1);
      if (v39)
      {
        do
        {
          uint64_t v40 = v39;
          float v39 = *(char **)v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          uint64_t v40 = (char *)*((void *)v17 + 2);
          int v19 = *(void *)v40 == (void)v17;
          double v17 = v40;
        }
        while (!v19);
      }
      double v17 = v40;
    }
    while (v40 != v18);
  }
LABEL_39:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 23));
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = v18;
  *((void *)this + 27) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v42);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 23));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void sub_1A2497EAC(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v2);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 184));
  _Unwind_Resume(a1);
}

uint64_t md::OverlayLayerDataSource::createLayerData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *(int32x2_t **)(a2 + 16);
  __int32 v9 = v8[1].i32[0];
  LOBYTE(v99[0]) = v8[1].i32[1];
  HIBYTE(v99[0]) = v9;
  int32x2_t v100 = vrev64_s32(*v8);
  id v10 = *(id *)(a1 + 608);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)[v10 gglDevice] + 24))(&v98);

  id v11 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586DB8;
  uint64_t v12 = ggl::BufferData::BufferData((uint64_t)&v11[1], qword_1E9552208, 2, 1, 6, 1);
  v11[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E258;
  uint64_t v96 = v12;
  double v97 = v11;
  md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)&v94);
  float v13 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 624)));
  if (v13 <= 1.9) {
    float v14 = v13;
  }
  else {
    float v14 = 1.0;
  }
  std::__shared_count v92 = (std::__shared_count)0;
  uint64_t v93 = 0;
  uint64_t v89 = (uint64_t)&v89;
  unint64_t v90 = &v89;
  uint64_t v91 = 0;
  [*(id *)(a1 + 904) size];
  *(void *)&long long v88 = v15;
  *((void *)&v88 + 1) = v16;
  unsigned int v17 = *(unsigned __int16 *)(a2 + 8);
  if (v17 > 0x46)
  {
    if (v17 != 81 && v17 != 72)
    {
      if (v17 != 71) {
        goto LABEL_35;
      }
      goto LABEL_22;
    }
    goto LABEL_11;
  }
  if (v17 == 11)
  {
LABEL_22:
    id v18 = *(id *)(a1 + 608);
    uint64_t v28 = *(void *)(a1 + 632);
    std::mutex::lock((std::mutex *)(v28 + 232));
    __p = 0;
    double v86 = 0;
    uint64_t v87 = 0;
    std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&__p, *(void *)(v28 + 160), *(void *)(v28 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 168) - *(void *)(v28 + 160)) >> 3));
    std::mutex::unlock((std::mutex *)(v28 + 232));
    uint64_t v83 = v96;
    double v84 = v97;
    if (v97) {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned __int8 v29 = *(unsigned __int16 *)(a1 + 32) - 71 < 2;
    long long v80 = 0u;
    long long v81 = 0u;
    int v82 = 1065353216;
    _processOverlays((uint64_t)v99, &v88, v18, &v98, (uint64_t)&__p, &v89, v14, a3, &v83, &v94, (md::MaskingOverlayRenderable **)(a1 + 832), 0, v29, &v80);
    double v30 = v84;
    if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    id v22 = (std::__shared_weak_count *)__p;
    if (!__p) {
      goto LABEL_34;
    }
    if (v86 == __p)
    {
LABEL_33:
      operator delete(v22);
LABEL_34:

      goto LABEL_35;
    }
    double v31 = v86 - 1;
    double v32 = v86 - 1;
    double v33 = (void (***)(char *))&v86[-1];
    do
    {
      double v34 = *v33;
      v33 -= 3;
      (*v34)((char *)v32);
      --v31;
      BOOL v27 = v32 == v22;
      double v32 = (std::__shared_weak_count *)v33;
    }
    while (!v27);
LABEL_32:
    id v22 = (std::__shared_weak_count *)__p;
    goto LABEL_33;
  }
  if (v17 == 12)
  {
LABEL_11:
    id v18 = *(id *)(a1 + 608);
    uint64_t v19 = *(void *)(a1 + 632);
    std::mutex::lock((std::mutex *)(v19 + 232));
    __p = 0;
    double v86 = 0;
    uint64_t v87 = 0;
    std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&__p, *(void *)(v19 + 184), *(void *)(v19 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v19 + 192) - *(void *)(v19 + 184)) >> 3));
    std::mutex::unlock((std::mutex *)(v19 + 232));
    uint64_t v78 = v96;
    double v79 = v97;
    if (v97) {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned __int8 v20 = *(unsigned __int16 *)(a1 + 32) - 71 < 2;
    long long v80 = 0u;
    long long v81 = 0u;
    int v82 = 1065353216;
    _processOverlays((uint64_t)v99, &v88, v18, &v98, (uint64_t)&__p, &v89, v14, a3, &v78, &v94, (md::MaskingOverlayRenderable **)(a1 + 832), (uint64_t)&v92, v20, &v80);
    double v21 = v79;
    if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    id v22 = (std::__shared_weak_count *)__p;
    if (!__p) {
      goto LABEL_34;
    }
    if (v86 == __p) {
      goto LABEL_33;
    }
    double v23 = v86 - 1;
    double v24 = v86 - 1;
    double v25 = (void (***)(char *))&v86[-1];
    do
    {
      double v26 = *v25;
      v25 -= 3;
      (*v26)((char *)v24);
      --v23;
      BOOL v27 = v24 == v22;
      double v24 = (std::__shared_weak_count *)v25;
    }
    while (!v27);
    goto LABEL_32;
  }
LABEL_35:
  uint64_t v76 = 0;
  double v77 = 0;
  if (v92.__vftable == (std::__shared_count_vtbl *)v92.__shared_owners_) {
    goto LABEL_51;
  }
  *(void *)&long long v80 = 0;
  double v35 = *(std::__shared_weak_count **)(a1 + 888);
  if (!v35) {
    goto LABEL_51;
  }
  double v36 = std::__shared_weak_count::lock(v35);
  *((void *)&v80 + 1) = v36;
  if (!v36) {
    goto LABEL_51;
  }
  *(void *)&long long v80 = *(void *)(a1 + 880);
  if (!(void)v80)
  {
    double v44 = v36;
LABEL_49:
    if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
    goto LABEL_51;
  }
  uint64_t v37 = (std::__shared_weak_count *)operator new(0x48uLL);
  v37->__shared_owners_ = 0;
  v37->__shared_weak_owners_ = 0;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FF08;
  LOWORD(v37[1].__vftable) = v99[0];
  *(int32x2_t *)((char *)&v37[1].__vftable + 4) = v100;
  __p = &v37[1];
  double v86 = v37;
  std::__shared_count v38 = v92;
  v37[2].std::__shared_count = v92;
  v37[2].__shared_weak_owners_ = v93;
  std::__shared_count v92 = (std::__shared_count)0;
  uint64_t v93 = 0;
  shared_owners = (std::__shared_count_vtbl *)v38.__shared_owners_;
  for (i = v38.__vftable; i != shared_owners; i = (std::__shared_count_vtbl *)((char *)i + 56))
  {
    atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v41 = (std::__shared_weak_count *)i->~__shared_count_0;
    i->~__shared_count = (void (__cdecl *)(std::__shared_count *__hidden))&v37[1];
    i->~__shared_count_0 = (void (__cdecl *)(std::__shared_count *__hidden))v37;
    if (v41) {
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  double v42 = (std::__shared_weak_count *)operator new(0x170uLL);
  v42->__shared_owners_ = 0;
  v42->__shared_weak_owners_ = 0;
  v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582AC8;
  md::LabelTile::LabelTile((uint64_t)&v42[1], (uint64_t)v99, (unint64_t *)&__p, &v80);
  uint64_t v76 = v43;
  double v77 = v42;
  if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  double v44 = (std::__shared_weak_count *)*((void *)&v80 + 1);
  if (*((void *)&v80 + 1)) {
    goto LABEL_49;
  }
LABEL_51:
  uint64_t v45 = (char *)operator new(0x448uLL);
  *((void *)v45 + 1) = 0;
  *((void *)v45 + 2) = 0;
  *(void *)uint64_t v45 = &unk_1EF57FFB0;
  uint64_t v46 = *(void *)(a1 + 824);
  long long v80 = 0uLL;
  *(void *)&long long v81 = 0;
  __p = 0;
  double v86 = 0;
  md::MapTileData::MapTileData((uint64_t)(v45 + 24), a2, (uint64_t)&v80, (uint64_t *)&__p, 1);
  *((void *)v45 + 3) = &unk_1EF535150;
  *((void *)v45 + 82) = &unk_1EF535190;
  double v47 = v97;
  *((void *)v45 + 93) = v96;
  *((void *)v45 + 94) = v47;
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v48 = v95;
  *((void *)v45 + 95) = v94;
  *((void *)v45 + 96) = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v45 + 97) = v45 + 776;
  *((void *)v45 + 98) = v45 + 776;
  *((void *)v45 + 99) = 0;
  uint64_t v49 = v91;
  if (v91)
  {
    uint64_t v51 = v89;
    double v50 = v90;
    uint64_t v52 = *v90;
    *(void *)(v52 + 8) = *(void *)(v89 + 8);
    **(void **)(v51 + 8) = v52;
    uint64_t v53 = *((void *)v45 + 97);
    *(void *)(v53 + 8) = v50;
    *double v50 = v53;
    *((void *)v45 + 97) = v51;
    *(void *)(v51 + 8) = v45 + 776;
    *((void *)v45 + 99) = v49;
    uint64_t v91 = 0;
  }
  *((void *)v45 + 100) = v45 + 800;
  *((void *)v45 + 101) = v45 + 800;
  *((void *)v45 + 102) = 0;
  *((void *)v45 + 103) = v45 + 824;
  *((void *)v45 + 104) = v45 + 824;
  *((void *)v45 + 105) = 0;
  *((void *)v45 + 106) = v76;
  *((void *)v45 + 107) = v77;
  if (v77) {
    atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v45 + 108) = v46;
  *(_OWORD *)(v45 + 872) = 0u;
  *(_OWORD *)(v45 + 888) = 0u;
  *(_OWORD *)(v45 + 904) = 0u;
  *(_OWORD *)(v45 + 920) = 0u;
  *(_OWORD *)(v45 + 936) = 0u;
  *(_OWORD *)(v45 + 952) = 0u;
  *(_OWORD *)(v45 + 968) = 0u;
  *(_OWORD *)(v45 + 984) = 0u;
  *(_OWORD *)(v45 + 1000) = 0u;
  *(_OWORD *)(v45 + 1016) = 0u;
  *(_OWORD *)(v45 + 1032) = 0u;
  *(_OWORD *)(v45 + 1048) = 0u;
  *(_OWORD *)(v45 + 1064) = 0u;
  *(_OWORD *)(v45 + 1080) = 0u;
  double v54 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v45 + 896), 0);
  if (v54) {
    geo::read_write_lock::logFailure(v54, (uint64_t)"initialization", v55);
  }
  *a4 = v45 + 24;
  a4[1] = v45;
  if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
  if (v91)
  {
    uint64_t v56 = v89;
    float32x2_t v57 = v90;
    uint64_t v58 = *v90;
    *(void *)(v58 + 8) = *(void *)(v89 + 8);
    **(void **)(v56 + 8) = v58;
    uint64_t v91 = 0;
    if (v57 != &v89)
    {
      do
      {
        float32x2_t v59 = (uint64_t *)v57[1];
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v57 + 2));
        operator delete(v57);
        float32x2_t v57 = v59;
      }
      while (v59 != &v89);
    }
  }
  float32x2_t v60 = v92.__vftable;
  if (v92.__vftable)
  {
    uint64_t v61 = v92.__shared_owners_;
    float32x2_t v62 = v92.__vftable;
    if ((std::__shared_count_vtbl *)v92.__shared_owners_ != v92.__vftable)
    {
      do
      {
        uint64_t v63 = *(void *)(v61 - 24);
        if (v63)
        {
          uint64_t v64 = *(void *)(v61 - 16);
          unint64_t v65 = *(void **)(v61 - 24);
          if (v64 != v63)
          {
            uint64_t v66 = *(void *)(v61 - 16);
            do
            {
              uint64_t v68 = *(void **)(v66 - 24);
              v66 -= 24;
              uint64_t v67 = v68;
              if (v68)
              {
                *(void *)(v64 - 16) = v67;
                operator delete(v67);
              }
              uint64_t v64 = v66;
            }
            while (v66 != v63);
            unint64_t v65 = *(void **)(v61 - 24);
          }
          *(void *)(v61 - 16) = v63;
          operator delete(v65);
        }
        double v69 = *(std::__shared_weak_count **)(v61 - 48);
        if (v69) {
          std::__shared_weak_count::__release_weak(v69);
        }
        v61 -= 56;
      }
      while ((std::__shared_count_vtbl *)v61 != v60);
      float32x2_t v62 = v92.__vftable;
    }
    v92.__shared_owners_ = (uint64_t)v60;
    operator delete(v62);
  }
  long long v70 = v95;
  if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
  uint64_t v71 = v97;
  if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
  }
  uint64_t result = v98;
  if (v98)
  {
    uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)v98 + 24))(v98);
    uint64_t v74 = v98;
    uint64_t v98 = 0;
    *(void *)&long long v80 = v74;
    (*(void (**)(uint64_t, long long *))(*(void *)v73 + 48))(v73, &v80);
    uint64_t v75 = v80;
    *(void *)&long long v80 = 0;
    if (v75) {
      (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
    }
    uint64_t result = v98;
    uint64_t v98 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1A24989D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v35);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a27);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a19);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a15);
  std::list<md::OverlayTileData::OverlayTileResource>::~list(&a32);
  std::vector<md::LabelClientTileOverlay>::~vector[abi:nn180100]((void **)(v33 - 192));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v33 - 160);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v33 - 144);
  ggl::Loader::~Loader((ggl::Loader *)(v33 - 128));
  _Unwind_Resume(a1);
}

void sub_1A2498CA8()
{
}

void sub_1A2498CB0()
{
}

void sub_1A2498CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _processOverlays(uint64_t a1, long long *a2, void *a3, void *a4, uint64_t a5, uint64_t *a6, float a7, uint64_t a8, uint64_t *a9, uint64_t *a10, md::MaskingOverlayRenderable **a11, uint64_t a12, unsigned __int8 a13, void *a14)
{
  uint64_t v741 = *MEMORY[0x1E4F143B8];
  id v615 = a3;
  uint64_t v686 = a1;
  uint64_t v16 = *(unsigned __int8 *)(a1 + 1) | 0x200000000;
  v695[0] = *(_DWORD *)(a1 + 8);
  v695[1] = *(_DWORD *)(a1 + 4);
  uint64_t v696 = v16;
  unsigned int v17 = *(std::__shared_weak_count **)a5;
  double v690 = *(double *)(a5 + 8);
  if (*(void *)a5 == *(void *)&v690)
  {
    unsigned __int8 v20 = 0;
    uint64_t v19 = 0;
LABEL_753:
    if (v20) {
      goto LABEL_754;
    }
    goto LABEL_756;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unsigned __int8 v20 = 0;
  v683 = 0;
  do
  {
    v627 = v20;
    __p = v19;
    id v21 = (id)v17->__shared_owners_;
    if ([v21 areResourcesRequired] != a13) {
      goto LABEL_67;
    }
    id v22 = v21;
    if ([v22 canProvideVectorData])
    {
      int v23 = 2;
    }
    else
    {
      double v24 = [v22 rasterTileProvider];
      BOOL v25 = v24 == 0;

      if (v25)
      {
        double v26 = [v22 customTileProvider];
        BOOL v27 = v26 == 0;

        if (v27) {
          int v23 = 1;
        }
        else {
          int v23 = 4;
        }
      }
      else
      {
        int v23 = 3;
      }
    }

    uint64_t v28 = v19;
    unsigned __int8 v29 = v20;
    if (v19 == v20 || LOBYTE(v20[-2].__shared_weak_owners_) != v23 || [v22 blendMode] != v18)
    {
      if (v20 >= v683)
      {
        uint64_t v30 = ((char *)v20 - (char *)v19) >> 5;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        if (((char *)v683 - (char *)v19) >> 4 > v31) {
          unint64_t v31 = ((char *)v683 - (char *)v19) >> 4;
        }
        unint64_t v32 = 0x7FFFFFFFFFFFFFFLL;
        if ((unint64_t)((char *)v683 - (char *)v19) < 0x7FFFFFFFFFFFFFE0) {
          unint64_t v32 = v31;
        }
        unint64_t v684 = v32;
        if (v32)
        {
          if (v32 >> 59) {
            goto LABEL_767;
          }
          uint64_t v33 = (char *)operator new(32 * v32);
        }
        else
        {
          uint64_t v33 = 0;
        }
        double v34 = &v33[32 * v30];
        *double v34 = v23;
        *((void *)v34 + 2) = 0;
        *((void *)v34 + 3) = 0;
        *((void *)v34 + 1) = 0;
        if (v19 == v627)
        {
          uint64_t v28 = (std::__shared_weak_count *)&v33[32 * v30];
        }
        else
        {
          uint64_t v35 = 0;
          double v36 = v627;
          do
          {
            uint64_t v37 = &v34[v35];
            std::__shared_count v38 = (char *)v627 + v35;
            *(v37 - 32) = *((unsigned char *)&v627[-1] + v35 - 8);
            *((void *)v37 - 2) = 0;
            *((void *)v37 - 1) = 0;
            *(std::__shared_count *)(v37 - 24) = *(std::__shared_count *)((char *)&v627[-1].std::__shared_count + v35);
            *((void *)v37 - 1) = *(void *)((char *)v627 + v35 - 8);
            *((void *)v38 - 3) = 0;
            *((void *)v38 - 2) = 0;
            *((void *)v38 - 1) = 0;
            v35 -= 32;
          }
          while ((std::__shared_weak_count *)((char *)v627 + v35) != __p);
          v678 = (std::__shared_weak_count *)&v34[v35];
          do
          {
            float v39 = v36[-1].__vftable;
            if (v39)
            {
              shared_owners = (std::__shared_weak_count_vtbl *)v36[-1].__shared_owners_;
              uint64_t v41 = v36[-1].__vftable;
              if (shared_owners != v39)
              {
                p_on_zero_shared = &shared_owners[-1].__on_zero_shared;
                uint64_t v43 = (std::__shared_weak_count_vtbl *)((char *)shared_owners - 24);
                double v44 = (std::__shared_weak_count_vtbl *)((char *)shared_owners - 24);
                do
                {
                  uint64_t v45 = (void (**)(std::__shared_weak_count_vtbl *))v44->~__shared_weak_count;
                  double v44 = (std::__shared_weak_count_vtbl *)((char *)v44 - 24);
                  (*v45)(v43);
                  p_on_zero_shared -= 3;
                  _ZF = v43 == v39;
                  uint64_t v43 = v44;
                }
                while (!_ZF);
                uint64_t v41 = v36[-1].__vftable;
              }
              v36[-1].__shared_owners_ = (uint64_t)v39;
              operator delete(v41);
            }
            double v36 = (std::__shared_weak_count *)((char *)v36 - 32);
          }
          while (v36 != __p);
          uint64_t v28 = v678;
        }
        v683 = (std::__shared_weak_count *)&v33[32 * v684];
        unsigned __int8 v29 = (std::__shared_weak_count *)(v34 + 32);
        if (__p) {
          operator delete(__p);
        }
      }
      else
      {
        LOBYTE(v20->__vftable) = v23;
        v20->__shared_weak_owners_ = 0;
        v20[1].__vftable = 0;
        v20->__shared_owners_ = 0;
        unsigned __int8 v29 = (std::__shared_weak_count *)((char *)v20 + 32);
      }
    }
    uint64_t v18 = [v22 blendMode];
    __p = v28;
    v627 = v29;
    if (([v22 canProvideVectorData] & 1) == 0)
    {
      double v47 = [v22 rasterTileProvider];
      if (v47)
      {
      }
      else if (![v22 canDrawKey:v695])
      {
        goto LABEL_67;
      }
    }
    uint64_t v49 = (void *)v29[-1].__shared_owners_;
    unint64_t shared_weak_owners = v29[-1].__shared_weak_owners_;
    if ((unint64_t)v49 >= shared_weak_owners)
    {
      uint64_t v53 = v29[-1].__vftable;
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v53) >> 3);
      unint64_t v55 = v54 + 1;
      if (v54 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(shared_weak_owners - (void)v53) >> 3);
      if (2 * v56 > v55) {
        unint64_t v55 = 2 * v56;
      }
      if (v56 >= 0x555555555555555) {
        unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57)
      {
        if (v57 > 0xAAAAAAAAAAAAAAALL) {
LABEL_767:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        uint64_t v58 = (char *)operator new(24 * v57);
      }
      else
      {
        uint64_t v58 = 0;
      }
      float32x2_t v59 = (std::__shared_weak_count_vtbl *)&v58[24 * v54];
      v59->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1EF559F78;
      v59->~__shared_weak_count_0 = 0;
      float32x2_t v60 = (void (__cdecl *)(std::__shared_weak_count *__hidden))(id)v17->__shared_owners_;
      uint64_t v61 = v59->~__shared_weak_count_0;
      v59->~__shared_weak_count_0 = v60;

      float32x2_t v62 = &v58[24 * v57];
      p_get_deleter = &v59->__get_deleter;
      uint64_t v64 = v627[-1].__vftable;
      uint64_t v63 = (void **)v627[-1].__shared_owners_;
      if (v63 == (void **)v64)
      {
        v627[-1].__vftable = v59;
        v627[-1].__shared_owners_ = (uint64_t)p_get_deleter;
        v627[-1].__shared_weak_owners_ = (uint64_t)v62;
        if (!v63) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v65 = (uint64_t)&v58[24 * v54 - 24];
        do
        {
          v59[-1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&unk_1EF559F78;
          float32x2_t v59 = (std::__shared_weak_count_vtbl *)((char *)v59 - 24);
          v59->~__shared_weak_count_0 = 0;
          uint64_t v67 = *(v63 - 2);
          uint64_t v66 = v63 - 2;
          objc_storeStrong((id *)&v59->~__shared_weak_count_0, v67);
          uint64_t v68 = *v66;
          *uint64_t v66 = 0;

          uint64_t v63 = v66 - 1;
          v65 -= 24;
        }
        while (v63 != (void **)v64);
        uint64_t v63 = (void **)&v627[-1].~__shared_weak_count;
        double v69 = (void **)v627[-1].__shared_owners_;
        v627[-1].__vftable = v59;
        v627[-1].__shared_owners_ = (uint64_t)p_get_deleter;
        v627[-1].__shared_weak_owners_ = (uint64_t)v62;
        if (v69 != v63)
        {
          long long v70 = v69 - 3;
          uint64_t v71 = v69 - 3;
          uint64_t v72 = v69 - 3;
          do
          {
            uint64_t v73 = (void (**)(void **))*v72;
            v72 -= 3;
            (*v73)(v71);
            v70 -= 3;
            _ZF = v71 == v63;
            uint64_t v71 = v72;
          }
          while (!_ZF);
        }
        if (!v63) {
          goto LABEL_66;
        }
      }
      operator delete(v63);
    }
    else
    {
      *uint64_t v49 = &unk_1EF559F78;
      v49[1] = 0;
      id v50 = (id)v17->__shared_owners_;
      uint64_t v51 = (void *)v49[1];
      v49[1] = v50;

      p_get_deleter = (const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *))(v49 + 3);
    }
LABEL_66:
    v627[-1].__shared_owners_ = (uint64_t)p_get_deleter;
LABEL_67:

    ++v17;
    uint64_t v19 = __p;
    unsigned __int8 v20 = v627;
  }
  while (v17 != *(std::__shared_weak_count **)&v690);
  if (__p == v627) {
    goto LABEL_753;
  }
  int v74 = 1 << *(unsigned char *)(v686 + 1);
  double v75 = 1.0 / (double)v74;
  double v623 = v75 * (double)*(int *)(v686 + 8);
  double v618 = v75 * (double)(v74 + ~*(_DWORD *)(v686 + 4));
  double v619 = v623 + v75;
  double v617 = v618 + v75;
  v626 = (unsigned __int8 *)__p;
  do
  {
    if (!a14[3])
    {
LABEL_96:
      switch(*v626)
      {
        case 1u:
          uint64_t v86 = *((void *)v626 + 1);
          uint64_t v85 = *((void *)v626 + 2);
          if (v85 == v86) {
            goto LABEL_73;
          }
          while (1)
          {
            id v87 = *(id *)(v86 + 8);
            [v87 replaceMapContentInRect];
            double v89 = v88;
            double v91 = v90;
            double v93 = v92;
            double v95 = v94;
            if ((GEOMapRectIsNull() & 1) == 0)
            {
              double v96 = *(double *)(MEMORY[0x1E4F63F08] + 16);
              if (v623 >= v89 / v96 && v619 <= (v93 + v89) / v96)
              {
                double v97 = *(double *)(MEMORY[0x1E4F63F08] + 24);
                BOOL v98 = v618 >= 1.0 - (v95 + v91) / v97 && v617 <= 1.0 - v91 / v97;
                if (v98) {
                  break;
                }
              }
            }

            v86 += 24;
            if (v86 == v85) {
              goto LABEL_702;
            }
          }

LABEL_702:
          *(_OWORD *)v697 = 0u;
          *(_OWORD *)c = 0u;
          LODWORD(v699) = 512;
          *((float *)&v699 + 1) = a7;
          LODWORD(v700) = 0;
          uint64_t v579 = *((void *)v626 + 1);
          double v578 = *((double *)v626 + 2);
          v580 = (md::PolygonOverlayRenderable *)(*(unsigned __int8 *)(v686 + 1) | 0x200000000);
          LODWORD(v719[0]) = *(_DWORD *)(v686 + 8);
          HIDWORD(v719[0]) = *(_DWORD *)(v686 + 4);
          v719[1] = v580;
          if (v579 == *(void *)&v578) {
            goto LABEL_737;
          }
          unsigned int v17 = 0;
          v581 = 0;
          v582 = 0;
          double v690 = v578;
          while (1)
          {
            id v583 = *(id *)(v579 + 8);
            if ([v583 canDrawKey:v719]) {
              break;
            }
LABEL_725:

            v579 += 24;
            if (v579 == *(void *)&v578)
            {
              if (v581 != v582)
              {
                generateTexture((uint64_t *)&v738, (uint64_t)&v697[1], v615);
                id v601 = *(id *)(*((void *)v626 + 1) + 8);
                v602 = v601;
                if (v601)
                {
                  [v601 rasterStyle];
                }
                else
                {
                  v724[1] = 0;
                  v724[0] = 0;
                }

                operator new();
              }
              if (c[1]) {
                CGContextRelease(c[1]);
              }
              unsigned __int8 v20 = v627;
              if (v697[0]) {
                (*(void (**)(md::PolygonOverlayRenderable *))(*(void *)v697[0] + 8))(v697[0]);
              }
              v603 = (std::__shared_weak_count *)c[0];
              if (c[0] && !atomic_fetch_add((atomic_ullong *volatile)c[0] + 1, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
                std::__shared_weak_count::__release_weak(v603);
              }
              if (v581) {
                operator delete(v581);
              }
              goto LABEL_73;
            }
          }
          v584 = (CGContext *)md::RasterOverlayData::drawContext((md::RasterOverlayData *)v697);
          long long v740 = 0u;
          long long v739 = 0u;
          long long v738 = 0u;
          CGContextGetBaseCTM();
          CGContextSaveGState(v584);
          [v583 drawKey:v719 inContext:v584];
          CGContextRestoreGState(v584);
          *(_OWORD *)v724 = v738;
          *(_OWORD *)v725 = v739;
          long long v726 = v740;
          CGContextSetBaseCTM();
          int v585 = [v583 identifier];
          int v586 = v585;
          if (v581 < v17)
          {
            LODWORD(v581->__vftable) = v585;
            v587 = (std::__shared_weak_count *)((char *)&v581->__vftable + 4);
LABEL_724:
            v581 = v587;
            goto LABEL_725;
          }
          uint64_t v588 = ((char *)v581 - (char *)v582) >> 2;
          unint64_t v589 = v588 + 1;
          if ((unint64_t)(v588 + 1) >> 62) {
            abort();
          }
          if (((char *)v17 - (char *)v582) >> 1 > v589) {
            unint64_t v589 = ((char *)v17 - (char *)v582) >> 1;
          }
          if ((unint64_t)((char *)v17 - (char *)v582) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v590 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v590 = v589;
          }
          if (v590)
          {
            if (v590 >> 62) {
              goto LABEL_767;
            }
            v591 = operator new(4 * v590);
          }
          else
          {
            v591 = 0;
          }
          v592 = &v591[4 * v588];
          _DWORD *v592 = v586;
          v587 = (std::__shared_weak_count *)(v592 + 1);
          if (v581 == v582) {
            goto LABEL_721;
          }
          unint64_t v593 = (char *)&v581[-1].__shared_weak_owners_ + 4 - (char *)v582;
          if (v593 >= 0xBC)
          {
            if (&v591[(char *)v581 - (char *)v582 - 4 - (v593 & 0xFFFFFFFFFFFFFFFCLL)] > &v591[(char *)v581
                                                                                              - (char *)v582
                                                                                              - 4])
            {
              v594 = v581;
            }
            else if ((char *)&v581[-1].__shared_weak_owners_ - (v593 & 0xFFFFFFFFFFFFFFFCLL) + 4 > (char *)&v581[-1].__shared_weak_owners_ + 4)
            {
              v594 = v581;
            }
            else if ((unint64_t)((char *)v582 - v591) >= 0x20)
            {
              uint64_t v596 = (v593 >> 2) + 1;
              v594 = (std::__shared_weak_count *)((char *)v581 - 4 * (v596 & 0x7FFFFFFFFFFFFFF8));
              v597 = &v591[4 * v588 - 16];
              p_shared_owners = &v581[-1].__shared_owners_;
              uint64_t v599 = v596 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v600 = *(_OWORD *)p_shared_owners;
                *(v597 - 1) = *((_OWORD *)p_shared_owners - 1);
                _OWORD *v597 = v600;
                v597 -= 2;
                p_shared_owners -= 4;
                v599 -= 8;
              }
              while (v599);
              v592 -= v596 & 0x7FFFFFFFFFFFFFF8;
              if (v596 == (v596 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_721;
              }
            }
            else
            {
              v594 = v581;
            }
          }
          else
          {
            v594 = v581;
          }
          do
          {
            int shared_weak_owners_high = HIDWORD(v594[-1].__shared_weak_owners_);
            v594 = (std::__shared_weak_count *)((char *)v594 - 4);
            *--v592 = shared_weak_owners_high;
          }
          while (v594 != v582);
LABEL_721:
          unsigned int v17 = (std::__shared_weak_count *)&v591[4 * v590];
          if (v582) {
            operator delete(v582);
          }
          v582 = (std::__shared_weak_count *)v592;
          double v578 = v690;
          goto LABEL_724;
        case 2u:
          uint64_t v620 = *((void *)v626 + 2);
          if (*((void *)v626 + 1) == v620) {
            goto LABEL_73;
          }
          uint64_t v103 = *((void *)v626 + 1);
          while (1)
          {
            id v104 = *(id *)(v103 + 8);
            float64x2_t v105 = [v104 vectorData];
            if (!v105 || ([v104 canDrawKey:v695] & 1) == 0) {
              goto LABEL_696;
            }
            objc_opt_class();
            id v651 = v104;
            v614 = v105;
            uint64_t v625 = v103;
            if (objc_opt_isKindOfClass()) {
              break;
            }
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v326 = v105;
              char v327 = *(unsigned char *)(v686 + 1);
              int v328 = *(_DWORD *)(v686 + 8);
              int v329 = *(_DWORD *)(v686 + 4);
              [v326 _bounds];
              double v333 = 1.0 / (double)(1 << v327);
              double v334 = v333 * (double)v328;
              double v335 = v333 * (double)((1 << v327) + ~v329);
              double v336 = v334 + v333;
              double v337 = v335 + v333;
              if (v334 + v333 > v338 && v334 < v331 && v337 > v330 && v335 < v332)
              {
                v724[0] = 0;
                operator new();
              }
              [v326 _bounds];
              double v343 = v342;
              [v326 _bounds];
              if ((vcvtmd_s64_f64(v343) & 0x80000000) == 0) {
                int v348 = -1;
              }
              else {
                int v348 = 1;
              }
              double v349 = v344 - (double)v348;
              double v350 = v346 - (double)v348;
              if (v347 < v345)
              {
                double v347 = -1.79769313e308;
                double v350 = -1.79769313e308;
                double v345 = 1.79769313e308;
                double v349 = 1.79769313e308;
              }
              BOOL v351 = v346 < v344;
              if (v346 >= v344) {
                double v352 = v347;
              }
              else {
                double v352 = -1.79769313e308;
              }
              if (v351) {
                double v353 = -1.79769313e308;
              }
              else {
                double v353 = v350;
              }
              if (v351)
              {
                double v345 = 1.79769313e308;
                double v354 = 1.79769313e308;
              }
              else
              {
                double v354 = v349;
              }
              if (v336 > v354 && v334 < v353 && v337 > v345 && v335 < v352)
              {
                v724[0] = 0;
                operator new();
              }

              goto LABEL_696;
            }
            objc_opt_class();
            if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
            {
              v717[1] = 0;
              v717[0] = 0;
              unsigned int v662 = [v104 identifier];
              v730[1] = 0;
              v730[0] = 0;
              v731 = 0;
              int v358 = [v104 identifier];
              v359 = operator new(4uLL);
              _DWORD *v359 = v358;
              v658 = v359;
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v719[1] = 0;
                v719[0] = 0;
                *(void *)&long long v720 = 0;
                id v360 = v105;
                id v361 = [v360 polygons];
                v697[0] = (md::PolygonOverlayRenderable *)v697;
                v697[1] = (md::PolygonOverlayRenderable *)v697;
                c[0] = 0;
                *(_OWORD *)v724 = 0u;
                *(_OWORD *)v725 = 0u;
                long long v726 = 0u;
                long long v727 = 0u;
                id v362 = v361;
                uint64_t v363 = [v362 countByEnumeratingWithState:v724 objects:&v738 count:16];
                if (v363)
                {
                  unsigned int v17 = *(std::__shared_weak_count **)v725[0];
                  do
                  {
                    for (uint64_t i = 0; i != v363; ++i)
                    {
                      if (*(std::__shared_weak_count **)v725[0] != v17) {
                        objc_enumerationMutation(v362);
                      }
                      v365 = (void *)*((void *)v724[1] + i);
                      if (v365)
                      {
                        [*((id *)v724[1] + i) simplifiedGeometryAtZoomLevel:*(unsigned __int8 *)(v686 + 1)];
                      }
                      else
                      {
                        v707[1] = 0;
                        v707[0] = 0;
                      }
                      __int16 v366 = [v365 worldIndexes];
                      v367 = (void **)operator new(0x28uLL);
                      v368 = (atomic_ullong *)v707[1];
                      v367[2] = v707[0];
                      v367[3] = v368;
                      if (v368)
                      {
                        atomic_fetch_add_explicit(v368 + 1, 1uLL, memory_order_relaxed);
                        uint64_t v19 = (std::__shared_weak_count *)v707[1];
                      }
                      else
                      {
                        uint64_t v19 = 0;
                      }
                      *((_WORD *)v367 + 16) = v366;
                      v369 = v697[0];
                      *v367 = v697[0];
                      v367[1] = v697;
                      *((void *)v369 + 1) = v367;
                      v697[0] = (md::PolygonOverlayRenderable *)v367;
                      ++c[0];
                      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                        std::__shared_weak_count::__release_weak(v19);
                      }
                    }
                    uint64_t v363 = [v362 countByEnumeratingWithState:v724 objects:&v738 count:16];
                  }
                  while (v363);
                }

                uint64_t v103 = v625;
                md::PolygonOverlayMeshBuilder::buildMesh((char **)v719, v686, (uint64_t)v697, v662);
                if (c[0])
                {
                  v370 = v697[1];
                  v371 = v697[0];
                  uint64_t v372 = *(void *)v697[1];
                  *(void *)(v372 + 8) = *((void *)v697[0] + 1);
                  **((void **)v371 + 1) = v372;
                  c[0] = 0;
                  if (v370 != (md::PolygonOverlayRenderable *)v697)
                  {
                    do
                    {
                      uint64_t v19 = (std::__shared_weak_count *)*((void *)v370 + 1);
                      v383 = (std::__shared_weak_count *)*((void *)v370 + 3);
                      if (v383 && !atomic_fetch_add(&v383->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                        std::__shared_weak_count::__release_weak(v383);
                      }
                      operator delete(v370);
                      v370 = (md::PolygonOverlayRenderable *)v19;
                    }
                    while (v19 != (std::__shared_weak_count *)v697);
                  }
                }

                [v360 _style];
                long long v373 = v738;
                long long v738 = 0uLL;
                v374 = (std::__shared_weak_count *)v717[1];
                *(_OWORD *)v717 = v373;
                if (v374 && !atomic_fetch_add(&v374->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                  std::__shared_weak_count::__release_weak(v374);
                }
                v375 = (std::__shared_weak_count *)*((void *)&v738 + 1);
                if (*((void *)&v738 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v738 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                  std::__shared_weak_count::__release_weak(v375);
                }
                [v360 miterLimit];
                double v377 = v376;
                uint64_t v378 = [v360 lineJoin];
                [v360 _style];
                long long v379 = v738;
                long long v738 = 0uLL;
                v380 = (std::__shared_weak_count *)v717[1];
                *(_OWORD *)v717 = v379;
                if (v380 && !atomic_fetch_add(&v380->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                  std::__shared_weak_count::__release_weak(v380);
                }
                v381 = (std::__shared_weak_count *)*((void *)&v738 + 1);
                if (*((void *)&v738 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v738 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                  std::__shared_weak_count::__release_weak(v381);
                }
                if (v719[0] != v719[1])
                {
                  int v694 = 1043511491;
                  float v382 = v377;
                  v724[1] = 0;
                  v724[0] = 0;
                  LOBYTE(v738) = 0;
                  LOBYTE(v740) = 0;
                  md::PolygonOverlayMeshBuilder::buildOverlayRenderableFromMeshInfos(v382, (uint64_t)v697, v686, (uint64_t **)v719, a4, a9, a10, (uint64_t *)v717, v378, &v694);
                }

                v555 = v719[0];
                v553 = v658;
                if (v719[0])
                {
                  v556 = v719[1];
                  v557 = v719[0];
                  if (v719[1] != v719[0])
                  {
                    do
                    {
                      v558 = (void *)*((void *)v556 - 8);
                      if (v558)
                      {
                        *((void *)v556 - 7) = v558;
                        operator delete(v558);
                      }
                      v559 = (void *)*((void *)v556 - 11);
                      if (v559)
                      {
                        *((void *)v556 - 10) = v559;
                        operator delete(v559);
                      }
                      v556 = (md::PolygonOverlayRenderable *)((char *)v556 - 88);
                    }
                    while (v556 != v555);
                    v557 = v719[0];
                  }
                  v719[1] = v555;
                  operator delete(v557);
                  v554 = v730[0];
                  if (!v730[0]) {
                    goto LABEL_691;
                  }
LABEL_684:
                  v573 = v730[1];
                  v574 = v554;
                  if (v730[1] != v554)
                  {
                    do
                    {
                      v576 = (md::PolygonOverlayRenderable *)*--v573;
                      v575 = v576;
                      void *v573 = 0;
                      if (v576)
                      {
                        md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v575);
                        MEMORY[0x1A6239270]();
                      }
                    }
                    while (v573 != v554);
                    v574 = v730[0];
                  }
                  v730[1] = v554;
                  operator delete(v574);
                }
                else
                {
                  v554 = v730[0];
                  if (v730[0]) {
                    goto LABEL_684;
                  }
                }
LABEL_691:
                if (v553) {
                  operator delete(v553);
                }
                v577 = (std::__shared_weak_count *)v717[1];
                if (v717[1] && !atomic_fetch_add((atomic_ullong *volatile)v717[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
                  std::__shared_weak_count::__release_weak(v577);
                }
                goto LABEL_696;
              }
              v397 = v105;
              c[0] = 0;
              c[1] = 0;
              v697[1] = 0;
              v697[0] = v397;
              v699 = a11;
              long long v700 = *a2;
              *(_WORD *)v701 = *(_WORD *)v686;
              *(void *)&v701[4] = *(void *)(v686 + 4);
              v656 = v397;
              if (![(md::PolygonOverlayRenderable *)v397 style])
              {

                v553 = v658;
                v554 = v730[0];
                if (v730[0]) {
                  goto LABEL_684;
                }
                goto LABEL_691;
              }
              c[0] = 0;
              v707[0] = v707;
              v707[1] = v707;
              *(void *)&long long v708 = 0;
              *(_OWORD *)v719 = 0u;
              long long v720 = 0u;
              memset(v721, 0, 32);
              v398 = [(md::PolygonOverlayRenderable *)v656 polygons];
              uint64_t v399 = [v398 countByEnumeratingWithState:v719 objects:&v738 count:16];
              if (v399)
              {
                uint64_t v400 = *(void *)v720;
                do
                {
                  for (uint64_t j = 0; j != v399; ++j)
                  {
                    if (*(void *)v720 != v400) {
                      objc_enumerationMutation(v398);
                    }
                    v402 = (void *)*((void *)v719[1] + j);
                    if (v402)
                    {
                      [*((id *)v719[1] + j) simplifiedGeometryAtZoomLevel:v701[1]];
                    }
                    else
                    {
                      v724[1] = 0;
                      v724[0] = 0;
                    }
                    __int16 v403 = [v402 worldIndexes];
                    v404 = (void **)operator new(0x28uLL);
                    v405 = (atomic_ullong *)v724[1];
                    v404[2] = v724[0];
                    v404[3] = v405;
                    if (v405)
                    {
                      atomic_fetch_add_explicit(v405 + 1, 1uLL, memory_order_relaxed);
                      v406 = (std::__shared_weak_count *)v724[1];
                    }
                    else
                    {
                      v406 = 0;
                    }
                    *((_WORD *)v404 + 16) = v403;
                    v407 = v707[0];
                    *v404 = v707[0];
                    v404[1] = v707;
                    v407[1] = v404;
                    v707[0] = v404;
                    *(void *)&long long v708 = v708 + 1;
                    if (v406 && !atomic_fetch_add(&v406->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                      std::__shared_weak_count::__release_weak(v406);
                    }
                  }
                  uint64_t v399 = [v398 countByEnumeratingWithState:v719 objects:&v738 count:16];
                }
                while (v399);
              }

              md::MaskingOverlayMeshProcessor::_unionPolygons((uint64_t)v697, (uint64_t *)v707);
              v408 = (void **)v707[1];
              while (2)
              {
                v673 = v408;
                if (v408 == v707)
                {
                  if ((void)v708)
                  {
                    v532 = (void **)v707[1];
                    v533 = (void **)v707[0];
                    uint64_t v534 = *(void *)v707[1];
                    *(void *)(v534 + 8) = *((void *)v707[0] + 1);
                    *v533[1] = v534;
                    *(void *)&long long v708 = 0;
                    if (v532 != v707)
                    {
                      do
                      {
                        v545 = (void **)v532[1];
                        v546 = (std::__shared_weak_count *)v532[3];
                        if (v546 && !atomic_fetch_add(&v546->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
                          std::__shared_weak_count::__release_weak(v546);
                        }
                        operator delete(v532);
                        v532 = v545;
                      }
                      while (v545 != v707);
                    }
                  }
                  uint64_t v535 = a9[1];
                  uint64_t v692 = *a9;
                  uint64_t v693 = v535;
                  if (v535) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v535 + 8), 1uLL, memory_order_relaxed);
                  }
                  v536 = v697[0];
                  v537 = (void *)gss::Allocator::instance((gss::Allocator *)[(md::PolygonOverlayRenderable *)v697[0] style]);
                  v725[1] = v537;
                  v538 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v537 + 16))(v537, 16, 4);
                  v539 = v538;
                  v724[0] = v538;
                  v725[0] = v538 + 2;
                  if (v538) {
                    void *v538 = 0x1700000005;
                  }
                  v538[1] = 181;
                  v724[1] = v538 + 2;
                  gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)&v738, (uint64_t)v724);
                  (*(void (**)(void *, void *, uint64_t))(*(void *)v537 + 40))(v537, v539, 16);
                  uint64_t v540 = (uint64_t)*v699;
                  *(void **)((char *)v724 + 7) = 0;
                  v724[0] = 0;
                  HIBYTE(v724[1]) = 1;
                  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)v707, v540, (gss::FeatureAttributeSet *)&v738, (gss::QueryOverrides *)v724);
                  v541 = (md::PolygonOverlayRenderable *)[(md::PolygonOverlayRenderable *)v536 fillMode];
                  v542 = (md::PolygonOverlayRenderable *)[(md::PolygonOverlayRenderable *)v536 style];
                  v543 = v707[0];
                  v544 = (std::__shared_weak_count *)v707[1];
                  if (v707[1])
                  {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)v707[1] + 1, 1uLL, memory_order_relaxed);
                    v719[0] = v541;
                    v719[1] = v542;
                    *(void *)&long long v720 = v543;
                    *((void *)&v720 + 1) = v544;
                    atomic_fetch_add_explicit(&v544->__shared_owners_, 1uLL, memory_order_relaxed);
                    if (!atomic_fetch_add(&v544->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v544->__on_zero_shared)(v544);
                      std::__shared_weak_count::__release_weak(v544);
                    }
                  }
                  else
                  {
                    v719[0] = v541;
                    v719[1] = v542;
                    long long v720 = (unint64_t)v707[0];
                  }
                  v569 = (std::__shared_weak_count *)v707[1];
                  if (v707[1] && !atomic_fetch_add((atomic_ullong *volatile)v707[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
                    std::__shared_weak_count::__release_weak(v569);
                  }
                  if ((void)v738)
                  {
                    *((void *)&v738 + 1) = v738;
                    (*(void (**)(void, void, void))(**((void **)&v739 + 1) + 40))(*((void *)&v739 + 1), v738, v739 - v738);
                  }
                  v570 = (char *)operator new(0xC8uLL);
                  *((void *)v570 + 1) = 0;
                  *((void *)v570 + 2) = 0;
                  *(void *)v570 = &unk_1EF581BB0;
                  if (v693) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v693 + 8), 1uLL, memory_order_relaxed);
                  }
                  *((_WORD *)v570 + 12) = *(_WORD *)v686;
                  *(void *)(v570 + 28) = *(void *)(v686 + 4);
                  *((void *)v570 + 6) = 0;
                  *((void *)v570 + 7) = v692;
                  *((void *)v570 + 8) = v693;
                  if (v693) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v693 + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v571 = a10[1];
                  *((void *)v570 + 9) = *a10;
                  *((void *)v570 + 10) = v571;
                  if (v571) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v571 + 8), 1uLL, memory_order_relaxed);
                  }
                  *(_OWORD *)(v570 + 88) = 0u;
                  *(_OWORD *)(v570 + 104) = 0u;
                  *(_OWORD *)(v570 + 120) = 0u;
                  *(_OWORD *)(v570 + 136) = *(_OWORD *)v719;
                  uint64_t v572 = *((void *)&v720 + 1);
                  *((void *)v570 + 19) = v720;
                  *((void *)v570 + 20) = v572;
                  if (v572) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v572 + 8), 1uLL, memory_order_relaxed);
                  }
                  *(_OWORD *)(v570 + 184) = 0u;
                  *(_OWORD *)(v570 + 168) = 0u;
                  md::MaskingOverlayRenderable::buildRenderItems((md::MaskingOverlayRenderable *)(v570 + 24));
                }
                if ([(md::PolygonOverlayRenderable *)v697[0] style])
                {
                  unsigned int v409 = v701[1];
                  v410 = +[VKDebugSettings sharedSettings];
                  [v410 maskingOverlayRadiusEdgeRatio];
                  float v412 = v411;

                  v413 = +[VKDebugSettings sharedSettings];
                  [v413 maskingOverlayRadiusZoomCorrectionStep];
                  float v415 = v414;

                  double v416 = 1.0;
                  if (v409 >= 8) {
                    double v416 = fmax(-(v415 * (double)(int)(v409 - 8) + -1.0), 0.01);
                  }
                  v417 = (float64x2_t **)v673[2];
                  v418 = *v417;
                  uint64_t v419 = v417[1] - *v417;
                  uint64_t v420 = v419 - 1;
                  if (v419 == 1)
                  {
                    v422 = 0;
                    v423 = 0;
                    v424 = 0;
                  }
                  else
                  {
                    unint64_t v421 = 0;
                    v422 = 0;
                    v423 = 0;
                    v424 = 0;
                    double v425 = (double)(int)(4 * v409);
                    double v669 = v416 * v412;
                    unint64_t v426 = v419 - 2;
                    int v427 = 2 * v409;
                    _Q5 = vsubq_f64(*v418, v418[v419 - 2]);
                    _Q4 = vsubq_f64(v418[1], *v418);
                    double v682 = 1.0 / v425;
                    do
                    {
                      while (1)
                      {
                        _D1 = _Q5.f64[1];
                        __asm { FMLA            D0, D1, V5.D[1] }
                        double v436 = sqrt(_D0);
                        _D2 = _Q4.f64[1];
                        __asm { FMLA            D1, D2, V4.D[1] }
                        double v439 = sqrt(_D1);
                        double v440 = v669 * fmin(v439, v436);
                        double v441 = 1.0 / v436;
                        float64x2_t v671 = _Q5;
                        *(float64x2_t *)v677 = _Q4;
                        v442 = (double *)(*(void *)v673[2] + 16 * v421);
                        double v691 = v441 * _Q5.f64[0];
                        double v443 = 1.0 / v439 * _Q4.f64[0];
                        double v689 = v443 - v441 * _Q5.f64[0];
                        double v444 = vmuld_lane_f64(v441, _Q5, 1);
                        double v445 = vmuld_lane_f64(1.0 / v439, _Q4, 1);
                        double v446 = *v442;
                        double v447 = v442[1];
                        int v448 = v427;
                        do
                        {
                          __double2 v449 = __sincos_stret((double)v448 * 3.14159265 * v682);
                          double v450 = v446 + (v689 - (v449.__sinval * v443 - v449.__cosval * v691)) * v440;
                          double v451 = v447 + (v445 - v444 - (v449.__sinval * v445 - v449.__cosval * v444)) * v440;
                          if (v423 < (double *)v424)
                          {
                            double *v423 = v450;
                            v423[1] = v451;
                            v423 += 2;
                          }
                          else
                          {
                            uint64_t v452 = ((char *)v423 - (char *)v422) >> 4;
                            unint64_t v453 = v452 + 1;
                            if ((unint64_t)(v452 + 1) >> 60) {
                              abort();
                            }
                            if ((v424 - (char *)v422) >> 3 > v453) {
                              unint64_t v453 = (v424 - (char *)v422) >> 3;
                            }
                            if ((unint64_t)(v424 - (char *)v422) >= 0x7FFFFFFFFFFFFFF0) {
                              unint64_t v454 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v454 = v453;
                            }
                            if (v454)
                            {
                              if (v454 >> 60) {
                                goto LABEL_767;
                              }
                              v455 = (char *)operator new(16 * v454);
                            }
                            else
                            {
                              v455 = 0;
                            }
                            v456 = (double *)&v455[16 * v452];
                            double *v456 = v450;
                            v456[1] = v451;
                            if (v423 == v422)
                            {
                              v458 = &v455[16 * v452];
                            }
                            else
                            {
                              v457 = &v455[16 * v452];
                              do
                              {
                                v458 = v457 - 16;
                                *((_OWORD *)v457 - 1) = *((_OWORD *)v423 - 1);
                                v423 -= 2;
                                v457 -= 16;
                              }
                              while (v423 != v422);
                            }
                            v424 = &v455[16 * v454];
                            v423 = v456 + 2;
                            if (v422) {
                              operator delete(v422);
                            }
                            v422 = (double *)v458;
                          }
                          BOOL v98 = v448-- <= 0;
                        }
                        while (!v98);
                        if (v421 >= v426) {
                          break;
                        }
                        v430 = &(*v417)[v421++];
                        _Q5 = *(float64x2_t *)v677;
                        _Q4 = vsubq_f64(v430[2], (*v417)[v421]);
                        if (v421 == v420) {
                          goto LABEL_555;
                        }
                      }
                      ++v421;
                      _Q4 = *(float64x2_t *)v677;
                      _Q5 = v671;
                    }
                    while (v421 != v420);
LABEL_555:
                    if (v423 < (double *)v424)
                    {
                      *(_OWORD *)v423 = *(_OWORD *)v422;
                      v459 = v423 + 2;
                      goto LABEL_573;
                    }
                  }
                  uint64_t v460 = ((char *)v423 - (char *)v422) >> 4;
                  unint64_t v461 = v460 + 1;
                  if ((unint64_t)(v460 + 1) >> 60) {
                    abort();
                  }
                  if ((v424 - (char *)v422) >> 3 > v461) {
                    unint64_t v461 = (v424 - (char *)v422) >> 3;
                  }
                  if ((unint64_t)(v424 - (char *)v422) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v462 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v462 = v461;
                  }
                  if (v462)
                  {
                    if (v462 >> 60) {
                      goto LABEL_767;
                    }
                    v463 = (char *)operator new(16 * v462);
                  }
                  else
                  {
                    v463 = 0;
                  }
                  v464 = (double *)&v463[16 * v460];
                  v424 = &v463[16 * v462];
                  *(_OWORD *)v464 = *(_OWORD *)v422;
                  v459 = v464 + 2;
                  if (v423 == v422) {
                    goto LABEL_571;
                  }
                  do
                  {
                    *((_OWORD *)v464 - 1) = *((_OWORD *)v423 - 1);
                    v464 -= 2;
                    v423 -= 2;
                  }
                  while (v423 != v422);
                  if (v422) {
LABEL_571:
                  }
                    operator delete(v422);
                  v422 = v464;
LABEL_573:
                  v465 = operator new(0x30uLL);
                  v465[1] = 0;
                  v465[2] = 0;
                  v465[3] = v422;
                  void *v465 = &unk_1EF582F98;
                  v465[4] = v459;
                  v465[5] = v424;
                  v466 = (std::__shared_weak_count *)v673[3];
                  v673[2] = v465 + 3;
                  v673[3] = v465;
                  if (v466 && !atomic_fetch_add(&v466->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
                    std::__shared_weak_count::__release_weak(v466);
                  }
                }
                v467 = (atomic_ullong *)v673[3];
                v733[0] = (md::MaskingOverlayRenderable *)v673[2];
                v733[1] = (md::MaskingOverlayRenderable *)v467;
                if (v467) {
                  atomic_fetch_add_explicit(v467 + 1, 1uLL, memory_order_relaxed);
                }
                LOWORD(v734) = *((_WORD *)v673 + 16);
                v724[0] = v724;
                v724[1] = v724;
                v725[0] = 0;
                v468 = (md::MaskingOverlayRenderable **)operator new(0x28uLL);
                v469 = v733[1];
                v468[2] = v733[0];
                v468[3] = v469;
                if (v469)
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)v469 + 1, 1uLL, memory_order_relaxed);
                  v469 = (md::MaskingOverlayRenderable *)v725[0];
                }
                *((_WORD *)v468 + 16) = v734;
                *v468 = (md::MaskingOverlayRenderable *)v724;
                v468[1] = (md::MaskingOverlayRenderable *)v724;
                v724[1] = v468;
                v724[0] = v468;
                v725[0] = (char *)v469 + 1;
                LOBYTE(v725[1]) = [(md::PolygonOverlayRenderable *)v697[0] style] == 1;
                _ZNSt3__115allocate_sharedB8nn180100IN2md24PolygonOverlayRenderable5StyleENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v726);
                v470 = *(os_unfair_lock_s **)(v726 + 32);
                os_unfair_lock_lock(v470 + 49);
                v470[33]._os_unfair_lock_opaque = 0;
                os_unfair_lock_unlock(v470 + 49);
                uint64_t v471 = v726;
                v472 = (os_unfair_lock_s *)(v726 + 24);
                os_unfair_lock_lock((os_unfair_lock_t)(v726 + 24));
                *(_DWORD *)(v471 + 16) = 0;
                v473 = *(os_unfair_lock_s **)(v471 + 32);
                os_unfair_lock_lock(v473 + 49);
                v473[40]._os_unfair_lock_opaque = 0;
                os_unfair_lock_unlock(v473 + 49);
                os_unfair_lock_unlock(v472);
                md::MaskingOverlayMeshProcessor::_buildTintBandOverlayStyle((uint64_t **)&v727, (uint64_t)v697);
                v474 = (char **)v673[2];
                v475 = *v474;
                v476 = v474[1];
                if (v475 == v476)
                {
                  double v480 = 1.79769313e308;
                  double v481 = -1.79769313e308;
                  double v478 = 1.79769313e308;
                  double v479 = -1.79769313e308;
                }
                else
                {
                  unint64_t v477 = v476 - v475 - 16;
                  if (v477 >= 0x30)
                  {
                    uint64_t v482 = (v477 >> 4) + 1;
                    float64x2_t v483 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
                    float64x2_t v484 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
                    v485 = (const double *)(v475 + 32);
                    uint64_t v486 = v482 & 0x1FFFFFFFFFFFFFFCLL;
                    float64x2_t v487 = v484;
                    float64x2_t v488 = v483;
                    float64x2_t v489 = v483;
                    float64x2_t v490 = v483;
                    float64x2_t v491 = v484;
                    float64x2_t v492 = v484;
                    do
                    {
                      v493 = v485 - 4;
                      float64x2x2_t v743 = vld2q_f64(v493);
                      float64x2x2_t v744 = vld2q_f64(v485);
                      float64x2_t v483 = vminnmq_f64(v743.val[0], v483);
                      float64x2_t v488 = vminnmq_f64(v744.val[0], v488);
                      float64x2_t v491 = vmaxnmq_f64(v491, v743.val[0]);
                      float64x2_t v492 = vmaxnmq_f64(v492, v744.val[0]);
                      float64x2_t v489 = vminnmq_f64(v743.val[1], v489);
                      float64x2_t v490 = vminnmq_f64(v744.val[1], v490);
                      float64x2_t v484 = vmaxnmq_f64(v484, v743.val[1]);
                      float64x2_t v487 = vmaxnmq_f64(v487, v744.val[1]);
                      v485 += 8;
                      v486 -= 4;
                    }
                    while (v486);
                    double v481 = vmaxnmvq_f64(vmaxnmq_f64(v491, v492));
                    double v480 = vminnmvq_f64(vminnmq_f64(v489, v490));
                    double v478 = vminnmvq_f64(vminnmq_f64(v483, v488));
                    double v479 = vmaxnmvq_f64(vmaxnmq_f64(v484, v487));
                    if (v482 != (v482 & 0x1FFFFFFFFFFFFFFCLL))
                    {
                      v475 += 16 * (v482 & 0x1FFFFFFFFFFFFFFCLL);
                      goto LABEL_588;
                    }
                  }
                  else
                  {
                    double v478 = 1.79769313e308;
                    double v479 = -1.79769313e308;
                    double v480 = 1.79769313e308;
                    double v481 = -1.79769313e308;
                    do
                    {
LABEL_588:
                      double v494 = *(double *)v475;
                      double v495 = *((double *)v475 + 1);
                      v475 += 16;
                      double v478 = fmin(v494, v478);
                      double v481 = fmax(v481, v494);
                      double v480 = fmin(v495, v480);
                      double v479 = fmax(v479, v495);
                    }
                    while (v475 != v476);
                  }
                }
                *(double *)&long long v728 = v478;
                *((double *)&v728 + 1) = v480;
                *(double *)&long long v729 = v481;
                *((double *)&v729 + 1) = v479;
                v496 = c[0];
                if (c[0] < c[1])
                {
                  *(void *)c[0] = c[0];
                  *((void *)v496 + 1) = v496;
                  *((void *)v496 + 2) = 0;
                  v497 = v725[0];
                  if (v725[0])
                  {
                    v498 = v724[1];
                    v499 = (void **)v724[0];
                    uint64_t v500 = *(void *)v724[1];
                    *(void *)(v500 + 8) = *((void *)v724[0] + 1);
                    *v499[1] = v500;
                    uint64_t v501 = *(void *)v496;
                    *(void *)(v501 + 8) = v498;
                    void *v498 = v501;
                    *(void *)v496 = v499;
                    v499[1] = v496;
                    *((void *)v496 + 2) = v497;
                    v725[0] = 0;
                  }
                  *((unsigned char *)v496 + 24) = v725[1];
                  *((_OWORD *)v496 + 2) = v726;
                  long long v726 = 0uLL;
                  *((_OWORD *)v496 + 3) = v727;
                  long long v727 = 0uLL;
                  long long v502 = v729;
                  *((_OWORD *)v496 + 4) = v728;
                  *((_OWORD *)v496 + 5) = v502;
                  v503 = (md::PolygonOverlayRenderable *)((char *)v496 + 96);
                  goto LABEL_614;
                }
                v504 = v697[1];
                unint64_t v505 = 0xAAAAAAAAAAAAAAABLL * ((c[0] - v697[1]) >> 5);
                unint64_t v506 = v505 + 1;
                if (v505 + 1 > 0x2AAAAAAAAAAAAAALL) {
                  abort();
                }
                if (0x5555555555555556 * ((c[1] - v697[1]) >> 5) > v506) {
                  unint64_t v506 = 0x5555555555555556 * ((c[1] - v697[1]) >> 5);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((c[1] - v697[1]) >> 5) >= 0x155555555555555) {
                  unint64_t v507 = 0x2AAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v507 = v506;
                }
                if (v507)
                {
                  if (v507 > 0x2AAAAAAAAAAAAAALL) {
                    goto LABEL_767;
                  }
                  v508 = (char *)operator new(96 * v507);
                }
                else
                {
                  v508 = 0;
                }
                v509 = &v508[96 * v505];
                *(void *)v509 = v509;
                *((void *)v509 + 1) = v509;
                *((void *)v509 + 2) = 0;
                v510 = v725[0];
                if (v725[0])
                {
                  v511 = v724[1];
                  v512 = (void **)v724[0];
                  uint64_t v513 = *(void *)v724[1];
                  *(void *)(v513 + 8) = *((void *)v724[0] + 1);
                  *v512[1] = v513;
                  uint64_t v514 = *(void *)v509;
                  *(void *)(v514 + 8) = v511;
                  void *v511 = v514;
                  *(void *)v509 = v512;
                  v512[1] = v509;
                  *((void *)v509 + 2) = v510;
                  v725[0] = 0;
                }
                v515 = &v508[96 * v505];
                v515[24] = (char)v725[1];
                long long v516 = v726;
                long long v517 = v727;
                v518 = (CGContext *)&v508[96 * v507];
                long long v726 = 0uLL;
                *((_OWORD *)v515 + 2) = v516;
                *((_OWORD *)v515 + 3) = v517;
                long long v727 = 0uLL;
                long long v519 = v729;
                v503 = (CGContext *)(v509 + 96);
                *((_OWORD *)v515 + 4) = v728;
                *((_OWORD *)v515 + 5) = v519;
                if (v496 == v504)
                {
                  v697[1] = (md::PolygonOverlayRenderable *)v509;
                  c[0] = (CGContextRef)(v509 + 96);
                  c[1] = (CGContextRef)&v508[96 * v507];
                  if (v496) {
                    goto LABEL_613;
                  }
                }
                else
                {
                  uint64_t v520 = 0;
                  do
                  {
                    v522 = &v509[v520];
                    v523 = (uint64_t *)(v522 - 96);
                    v524 = (char *)v496 + v520;
                    *((void *)v522 - 12) = v522 - 96;
                    *((void *)v522 - 11) = v522 - 96;
                    *((void *)v522 - 10) = 0;
                    uint64_t v525 = *(void *)((char *)v496 + v520 - 80);
                    if (v525)
                    {
                      uint64_t v527 = *((void *)v524 - 12);
                      v526 = (uint64_t *)*((void *)v524 - 11);
                      uint64_t v528 = *v526;
                      *(void *)(v528 + 8) = *(void *)(v527 + 8);
                      **(void **)(v527 + 8) = v528;
                      uint64_t v529 = *v523;
                      *(void *)(v529 + 8) = v526;
                      uint64_t *v526 = v529;
                      uint64_t *v523 = v527;
                      *(void *)(v527 + 8) = v523;
                      *((void *)v522 - 10) = v525;
                      *((void *)v524 - 10) = 0;
                    }
                    *(v522 - 72) = *(v524 - 72);
                    *((_OWORD *)v522 - 4) = *((_OWORD *)v524 - 4);
                    *((void *)v524 - 8) = 0;
                    *((void *)v524 - 7) = 0;
                    *((_OWORD *)v522 - 3) = *((_OWORD *)v524 - 3);
                    *((void *)v524 - 6) = 0;
                    *((void *)v524 - 5) = 0;
                    long long v521 = *((_OWORD *)v524 - 1);
                    *((_OWORD *)v522 - 2) = *((_OWORD *)v524 - 2);
                    *((_OWORD *)v522 - 1) = v521;
                    v520 -= 96;
                  }
                  while ((md::PolygonOverlayRenderable *)((char *)v496 + v520) != v504);
                  v496 = v697[1];
                  CGContextRef v530 = c[0];
                  v697[1] = (md::PolygonOverlayRenderable *)&v509[v520];
                  c[0] = (CGContextRef)(v509 + 96);
                  c[1] = v518;
                  while (v530 != v496)
                    md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData::~MaskingOverlayPolygonData((CGContextRef)((char *)v530 - 96));
                  if (!v496) {
                    goto LABEL_614;
                  }
LABEL_613:
                  operator delete(v496);
                }
LABEL_614:
                c[0] = v503;
                md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData::~MaskingOverlayPolygonData((md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData *)v724);
                v531 = (std::__shared_weak_count *)v733[1];
                if (v733[1] && !atomic_fetch_add((atomic_ullong *volatile)v733[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
                  std::__shared_weak_count::__release_weak(v531);
                }
                v408 = (void **)v673[1];
                continue;
              }
            }
LABEL_696:

            v103 += 24;
            if (v103 == v620)
            {
LABEL_737:
              unsigned __int8 v20 = v627;
              goto LABEL_73;
            }
          }
          id v106 = v105;
          int v612 = [v104 identifier];
          id v107 = v106;
          v719[0] = 0;
          v719[1] = (md::PolygonOverlayRenderable *)v719;
          *(void *)&long long v720 = 0x5812000000;
          *((void *)&v720 + 1) = __Block_byref_object_copy__30355;
          *(void *)v721 = __Block_byref_object_dispose__30356;
          memset(&v721[8], 0, 32);
          uint64_t v722 = 0;
          int v723 = 1065353216;
          v717[1] = 0;
          v717[0] = 0;
          uint64_t v718 = 0;
          v715 = 0;
          v714 = 0;
          uint64_t v716 = 0;
          v712 = 0;
          v711 = 0;
          uint64_t v713 = 0;
          long long v709 = 0u;
          long long v710 = 0u;
          *(_OWORD *)v707 = 0u;
          long long v708 = 0u;
          id v624 = v107;
          float64x2_t v108 = [v107 polylines];
          uint64_t v109 = [v108 countByEnumeratingWithState:v707 objects:&v738 count:16];
          if (!v109) {
            goto LABEL_392;
          }
          uint64_t v629 = *(void *)v708;
          v634 = v108;
LABEL_124:
          uint64_t v630 = v109;
          uint64_t v631 = 0;
LABEL_126:
          if (*(void *)v708 != v629) {
            objc_enumerationMutation(v108);
          }
          float64x2_t v110 = (void *)*((void *)v707[1] + v631);
          if (v110)
          {
            [*((id *)v707[1] + v631) simplifiedGeometryAtZoomLevel:*(unsigned __int8 *)(v686 + 1)];
          }
          else
          {
            long long v734 = 0u;
            *(_OWORD *)v733 = 0u;
          }
          int v111 = [v110 worldIndexes];
          v635 = v110;
          break;
        case 3u:
          uint64_t v99 = *((void *)v626 + 1);
          uint64_t v687 = *((void *)v626 + 2);
          if (v99 != v687)
          {
            do
            {
              id v100 = *(id *)(v99 + 8);
              uint64_t v101 = [v100 rasterTileProvider];
              if (v101)
              {
                [v101 keyframesCount];
                operator new();
              }

              v99 += 24;
            }
            while (v99 != v687);
            unsigned __int8 v20 = v627;
          }
          goto LABEL_73;
        case 4u:
          uint64_t v102 = *((void *)v626 + 1);
          uint64_t v674 = *((void *)v626 + 2);
          if (v102 != v674)
          {
            do
            {
              double v690 = COERCE_DOUBLE(*(id *)(v102 + 8));
              [*(id *)&v690 customTileProvider];
              uint64_t v679 = v102;
              if (objc_claimAutoreleasedReturnValue()) {
                operator new();
              }

              v102 += 24;
              unsigned __int8 v20 = v627;
            }
            while (v679 + 24 != v674);
          }
          goto LABEL_73;
        default:
          goto LABEL_73;
      }
LABEL_133:
      if ((char)v111 >= (char)((unsigned __int16)[v110 worldIndexes] >> 8))
      {
        v321 = (std::__shared_weak_count *)*((void *)&v734 + 1);
        if (*((void *)&v734 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v734 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
          std::__shared_weak_count::__release_weak(v321);
          v322 = (std::__shared_weak_count *)v733[1];
          if (v733[1]) {
            goto LABEL_387;
          }
        }
        else
        {
          v322 = (std::__shared_weak_count *)v733[1];
          if (v733[1])
          {
LABEL_387:
            if (!atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
              std::__shared_weak_count::__release_weak(v322);
            }
          }
        }
        if (++v631 == v630)
        {
          uint64_t v109 = [v108 countByEnumeratingWithState:v707 objects:&v738 count:16];
          if (!v109)
          {
LABEL_392:

            v323 = v715;
            v324 = v714;
            if (v715 == v714)
            {
              char v325 = 0;
            }
            else
            {
              LOBYTE(v690) = *(unsigned char *)(v686 + 1);
              LODWORD(v19) = *(_DWORD *)(v686 + 4);
              LODWORD(v17) = *(_DWORD *)(v686 + 8);
              char v325 = *(unsigned char *)v686;
            }
            [v624 style];
            v384 = v733[0];
            v385 = (os_unfair_lock_s *)((char *)v733[0] + 196);
            os_unfair_lock_lock((os_unfair_lock_t)v733[0] + 49);
            os_unfair_lock_unlock(v385);
            uint64_t v387 = *((void *)v384 + 21);
            uint64_t v386 = *((void *)v384 + 22);
            v388 = (std::__shared_weak_count *)v733[1];
            if (v733[1] && !atomic_fetch_add((atomic_ullong *volatile)v733[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
              std::__shared_weak_count::__release_weak(v388);
            }
            v389 = (char *)v711;
            v390 = v712;
            if (v386 == v387)
            {
              float64x2_t v105 = v614;
              if (v711 != v712)
              {
                v394 = v717[0];
                do
                {
                  if (v715 == v714) {
                    v395 = 0;
                  }
                  else {
                    v395 = (char *)v714 + 4 * *(void *)v389;
                  }
                  PolylineOverlayRibbonBuilder::addPolylineRibbonTo((uint64_t *)v719[1] + 6, *((_DWORD *)v389 + 10), v624, *((void *)v389 + 1), (uint64_t)v394 + 8 * *(void *)v389, (uint64_t)v395, v389[16], v389[17], *((double *)v389 + 3), *((double *)v389 + 4));
                  v389 += 48;
                }
                while (v389 != v390);
              }
              id v104 = v651;
              if (*((void *)v719[1] + 9))
              {
                v733[0] = 0;
                v733[1] = (md::MaskingOverlayRenderable *)v733;
                *(void *)&long long v734 = 0x3812000000;
                *((void *)&v734 + 1) = __Block_byref_object_copy__73;
                v735 = __Block_byref_object_dispose__74;
                uint64_t v736 = 0;
                uint64_t v737 = 0;
                v697[0] = (md::PolygonOverlayRenderable *)MEMORY[0x1E4F143A8];
                v697[1] = (md::PolygonOverlayRenderable *)3321888768;
                c[0] = (CGContextRef)___ZN28PolylineOverlayRibbonBuilder11buildRibbonERKN3geo8QuadTileEP28VKVectorOverlayPolylineGroupRN3ggl6LoaderERNSt3__14listIN2md15OverlayTileData19OverlayTileResourceENS9_9allocatorISD_EEEEjRKNS9_10shared_ptrINS6_17ConstantDataTypedINS6_4Tile4ViewEEEEERKNSI_INSJ_INSK_9TransformEEEEE_block_invoke_75;
                c[1] = (CGContextRef)&unk_1EF5909A0;
                v699 = v733;
                *(void *)&long long v700 = v719;
                *((void *)&v700 + 1) = a9;
                *(void *)v701 = a10;
                v701[8] = 0;
                char v704 = 0;
                if (v323 != v324)
                {
                  v701[8] = v325;
                  v701[9] = LOBYTE(v690);
                  int v702 = (int)v19;
                  int v703 = (int)v17;
                  char v704 = 1;
                }
                v732 = 0;
                v730[0] = &unk_1EF56BC58;
                v730[1] = (void *)MEMORY[0x1A6239EB0](v697);
                v732 = v730;
                v706 = 0;
                uint64_t v705 = 0;
                (*(void (**)(void, void **, uint64_t *))(*(void *)*a4 + 16))(*a4, v730, &v705);
                v396 = v706;
                if (v706 && !atomic_fetch_add(&v706->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                  std::__shared_weak_count::__release_weak(v396);
                }
                if (v732 == v730)
                {
                  (*((void (**)(void **))v730[0] + 4))(v730);
                }
                else if (v732)
                {
                  (*((void (**)(void))*v732 + 5))();
                }
                if (v323 == v324)
                {
                  uint64_t v561 = *((void *)v733[1] + 6);
                  if (v561)
                  {
                    if (*(void *)(v561 + 40) != *(void *)(v561 + 32))
                    {
                      uint64_t v705 = 0;
                      operator new();
                    }
                  }
                }
                v560 = operator new(4uLL);
                _DWORD *v560 = v612;
                uint64_t v19 = (std::__shared_weak_count *)(v560 + 1);
                float64x2_t v105 = v614;
                if (v323 != v324)
                {
                  v730[0] = 0;
                  operator new();
                }
                v562 = v733[1];
                v563 = operator new(0xA8uLL);
                uint64_t v564 = *((void *)v562 + 6);
                *((void *)v562 + 6) = 0;
                v563[2] = 0;
                v563[3] = v564;
                *((_OWORD *)v563 + 2) = 0u;
                *((_OWORD *)v563 + 3) = 0u;
                *((_OWORD *)v563 + 4) = 0u;
                *((_OWORD *)v563 + 5) = 0u;
                *((_OWORD *)v563 + 6) = 0u;
                *((_OWORD *)v563 + 7) = 0u;
                v563[16] = v560;
                v563[17] = v19;
                v563[18] = v19;
                *((_WORD *)v563 + 76) = 2;
                v563[20] = 0;
                uint64_t v565 = *a6;
                void *v563 = *a6;
                v563[1] = a6;
                *(void *)(v565 + 8) = v563;
                *a6 = (uint64_t)v563;
                ++a6[2];
                _Block_object_dispose(v733, 8);
                uint64_t v552 = v737;
                uint64_t v737 = 0;
                if (v552) {
LABEL_656:
                }
                  (*(void (**)(uint64_t))(*(void *)v552 + 8))(v552);
              }
            }
            else
            {
              float64x2_t v105 = v614;
              if (v711 != v712)
              {
                v391 = v717[0];
                do
                {
                  if (v715 == v714) {
                    v392 = 0;
                  }
                  else {
                    v392 = (char *)v714 + 4 * *(void *)v389;
                  }
                  PolylineOverlayRibbonBuilder::addPolylineRibbonTo((uint64_t *)v719[1] + 6, *((_DWORD *)v389 + 10), v624, *((void *)v389 + 1), (uint64_t)v391 + 8 * *(void *)v389, (uint64_t)v392, v389[16], v389[17], *((double *)v389 + 3), *((double *)v389 + 4));
                  v389 += 48;
                }
                while (v389 != v390);
              }
              id v104 = v651;
              if (*((void *)v719[1] + 9))
              {
                v733[0] = 0;
                v733[1] = (md::MaskingOverlayRenderable *)v733;
                *(void *)&long long v734 = 0x3812000000;
                *((void *)&v734 + 1) = __Block_byref_object_copy__70;
                v735 = __Block_byref_object_dispose__71;
                uint64_t v736 = 0;
                uint64_t v737 = 0;
                v724[0] = (void *)MEMORY[0x1E4F143A8];
                v724[1] = (void *)3321888768;
                v725[0] = ___ZN28PolylineOverlayRibbonBuilder11buildRibbonERKN3geo8QuadTileEP28VKVectorOverlayPolylineGroupRN3ggl6LoaderERNSt3__14listIN2md15OverlayTileData19OverlayTileResourceENS9_9allocatorISD_EEEEjRKNS9_10shared_ptrINS6_17ConstantDataTypedINS6_4Tile4ViewEEEEERKNSI_INSJ_INSK_9TransformEEEEE_block_invoke;
                v725[1] = &unk_1EF5909A0;
                *(void *)&long long v726 = v733;
                *((void *)&v726 + 1) = v719;
                *(void *)&long long v727 = a9;
                *((void *)&v727 + 1) = a10;
                LOBYTE(v728) = 0;
                BYTE8(v729) = 0;
                if (v323 != v324)
                {
                  LOBYTE(v728) = v325;
                  BYTE1(v728) = LOBYTE(v690);
                  *(void *)((char *)&v728 + 4) = __PAIR64__(v17, v19);
                  BYTE8(v729) = 1;
                }
                v732 = 0;
                v730[0] = &unk_1EF56BC58;
                v730[1] = (void *)MEMORY[0x1A6239EB0](v724);
                v732 = v730;
                v706 = 0;
                uint64_t v705 = 0;
                (*(void (**)(void, void **, uint64_t *))(*(void *)*a4 + 16))(*a4, v730, &v705);
                v393 = v706;
                if (v706 && !atomic_fetch_add(&v706->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
                  std::__shared_weak_count::__release_weak(v393);
                }
                if (v732 == v730)
                {
                  (*((void (**)(void **))v730[0] + 4))(v730);
                }
                else if (v732)
                {
                  (*((void (**)(void))*v732 + 5))();
                }
                v547 = operator new(4uLL);
                _DWORD *v547 = v612;
                uint64_t v19 = (std::__shared_weak_count *)(v547 + 1);
                if (v323 != v324)
                {
                  v730[0] = 0;
                  operator new();
                }
                v548 = v733[1];
                v549 = (char *)operator new(0xA8uLL);
                uint64_t v550 = *((void *)v548 + 6);
                *((void *)v548 + 6) = 0;
                *((void *)v549 + 2) = 0;
                *((void *)v549 + 3) = 0;
                *((void *)v549 + 4) = v550;
                *(_OWORD *)(v549 + 40) = 0u;
                *(_OWORD *)(v549 + 56) = 0u;
                *(_OWORD *)(v549 + 72) = 0u;
                *(_OWORD *)(v549 + 88) = 0u;
                *(_OWORD *)(v549 + 104) = 0u;
                *((void *)v549 + 15) = 0;
                *((void *)v549 + 16) = v547;
                *((void *)v549 + 17) = v19;
                *((void *)v549 + 18) = v19;
                *((_WORD *)v549 + 76) = 2;
                *((void *)v549 + 20) = 0;
                uint64_t v551 = *a6;
                *(void *)v549 = *a6;
                *((void *)v549 + 1) = a6;
                *(void *)(v551 + 8) = v549;
                *a6 = (uint64_t)v549;
                ++a6[2];
                _Block_object_dispose(v733, 8);
                uint64_t v552 = v737;
                uint64_t v737 = 0;
                if (v552) {
                  goto LABEL_656;
                }
              }
            }
            if (v711) {
              operator delete(v711);
            }
            uint64_t v103 = v625;
            if (v714)
            {
              v715 = v714;
              operator delete(v714);
            }
            if (v717[0]) {
              operator delete(v717[0]);
            }
            _Block_object_dispose(v719, 8);
            v566 = *(void **)&v721[32];
            if (*(void *)&v721[32])
            {
              do
              {
                v567 = (void *)*v566;
                std::__destroy_at[abi:nn180100]<std::pair<md::PolylineOverlayBatchKey const,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v566 + 2));
                operator delete(v566);
                v566 = v567;
              }
              while (v567);
            }
            v568 = *(void **)&v721[16];
            *(void *)&v721[16] = 0;
            if (v568) {
              operator delete(v568);
            }

            goto LABEL_696;
          }
          goto LABEL_124;
        }
        goto LABEL_126;
      }
      v650 = v733[0];
      float64x2_t v113 = (std::__shared_weak_count *)v733[1];
      if (v733[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v733[1] + 1, 1uLL, memory_order_relaxed);
      }
      unsigned int v17 = (std::__shared_weak_count *)*((void *)&v734 + 1);
      double v114 = (void *)v734;
      if (*((void *)&v734 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v734 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      char v115 = *(unsigned char *)(v686 + 1);
      v112.n128_u32[0] = *(_DWORD *)(v686 + 8);
      int v116 = *(_DWORD *)(v686 + 4);
      v730[1] = 0;
      v730[0] = 0;
      v731 = 0;
      if (v114)
      {
        BOOL v657 = v114[1] != *v114;
        if (v114[1] == *v114) {
          uint64_t v117 = 0;
        }
        else {
          uint64_t v117 = v730;
        }
        double v118 = &v714;
        if (v114[1] == *v114) {
          double v118 = 0;
        }
        uint64_t v647 = (uint64_t)v118;
        v648 = (char **)v117;
      }
      else
      {
        uint64_t v647 = 0;
        v648 = 0;
        BOOL v657 = 0;
      }
      double v120 = *(double **)v650;
      double v119 = (double *)*((void *)v650 + 1);
      if (*(double **)v650 == v119)
      {
        uint64_t v19 = 0;
        goto LABEL_371;
      }
      double v121 = (double)(char)v111;
      double v122 = v120 + 2;
      double v123 = 0.0;
      double v124 = 0.0;
      if (v120 + 2 == v119) {
        goto LABEL_152;
      }
      uint64_t v125 = *((uint64_t *)v120 + 1);
      double v126 = *v120 - v121;
      unint64_t v127 = (char *)v119 - (char *)v120 - 32;
      if (v127 > 0x2F)
      {
        uint64_t v128 = (v127 >> 4) + 1;
        float64x2_t v129 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v126, 0);
        int8x16_t v130 = (int8x16_t)vdupq_lane_s64(v125, 0);
        float64x2_t v131 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v121, 0);
        int64x2_t v132 = vdupq_n_s64((unint64_t)v120);
        uint64_t v133 = (uint64_t)(v120 + 4);
        float64x2_t v134 = 0uLL;
        uint64_t v135 = v128 & 0x1FFFFFFFFFFFFFFCLL;
        float64x2_t v136 = 0uLL;
        do
        {
          uint64_t v137 = (const double *)(v133 - 16);
          float64x2x2_t v742 = vld2q_f64(v137);
          v138.i64[0] = v133 - 16;
          int64x2_t v139 = *(int64x2_t *)(v133 + 16);
          v138.i64[1] = v133;
          v140.i64[0] = v133 + 16;
          int64x2_t v141 = *(int64x2_t *)(v133 + 32);
          v140.i64[1] = v133 + 32;
          float64x2_t v142 = (float64x2_t)vzip1q_s64(v139, v141);
          float64x2_t v143 = (float64x2_t)vzip2q_s64(v139, v141);
          float64x2_t v144 = vsubq_f64(v742.val[0], v131);
          float64x2_t v145 = (float64x2_t)vextq_s8((int8x16_t)v129, (int8x16_t)v144, 8uLL);
          float64x2_t v129 = vsubq_f64(v142, v131);
          float64x2_t v146 = (float64x2_t)vextq_s8((int8x16_t)v144, (int8x16_t)v129, 8uLL);
          float64x2_t v147 = vsubq_f64(v144, v145);
          float64x2_t v148 = vsubq_f64(v129, v146);
          float64x2_t v149 = vsubq_f64(v742.val[1], (float64x2_t)vextq_s8(v130, (int8x16_t)v742.val[1], 8uLL));
          v742.val[0] = vsubq_f64(v143, (float64x2_t)vextq_s8((int8x16_t)v742.val[1], (int8x16_t)v143, 8uLL));
          v742.val[1] = (float64x2_t)vdupq_n_s64(0x8000000000000000);
          float64x2_t v134 = vaddq_f64(v134, (float64x2_t)vbslq_s8((int8x16_t)vceqq_s64(v138, v132), (int8x16_t)v742.val[1], (int8x16_t)vsqrtq_f64(vmlaq_f64(vmulq_f64(v147, v147), v149, v149))));
          float64x2_t v136 = vaddq_f64(v136, (float64x2_t)vbslq_s8((int8x16_t)vceqq_s64(v140, v132), (int8x16_t)v742.val[1], (int8x16_t)vsqrtq_f64(vmlaq_f64(vmulq_f64(v148, v148), v742.val[0], v742.val[0]))));
          v133 += 64;
          int8x16_t v130 = (int8x16_t)v143;
          v135 -= 4;
        }
        while (v135);
        double v124 = vaddvq_f64(vaddq_f64(v136, v134));
        if (v128 == (v128 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_152:
          v649 = v114;
          int v637 = v111;
          v638 = v17;
          v639 = v113;
          v665 = 0;
          int v150 = 0;
          uint64_t v19 = 0;
          double v151 = 0;
          double v152 = 0;
          v153 = 0;
          unsigned int v154 = 0;
          int v155 = 0;
          int v156 = 0;
          int v157 = 1 << v115;
          double v158 = 1.0 / (double)v157;
          v112.n128_u64[1] = v112.n128_i32[1];
          double v672 = v158 * (double)v112.n128_i32[0];
          double v670 = v672 + v158;
          double v636 = v124;
          double v646 = 1.0 / v124;
          double v668 = v158 * (double)(v157 + ~v116);
          double v661 = v668 + v158;
          double v688 = 0.0;
          int v159 = 1;
          double v690 = 0.0;
          double v685 = 0.0;
          double v160 = 0.0;
          double v161 = 0.0;
          double v663 = 0.0;
          double v162 = 0.0;
          v163 = *(double **)v650;
          v164 = v650;
          double v655 = v121;
          while (1)
          {
            double v165 = *v163;
            double v166 = v163[1];
            double v167 = 0.0;
            if (v657)
            {
              if (v154 >= (unint64_t)((uint64_t)(v649[1] - *v649) >> 3)) {
                abort();
              }
              double v167 = *(double *)(*v649 + 8 * v154);
            }
            double v168 = v165 - v121;
            BOOL v170 = v165 - v121 < v672 || v168 >= v670 || v166 < v668;
            v112.n128_f64[0] = v661;
            if (!v170 && v166 < v661)
            {
              int v177 = 1;
              if (v163 == v120) {
                goto LABEL_181;
              }
            }
            else
            {
              int v172 = 1 << *(unsigned char *)(v686 + 1);
              double v173 = -1.0 / (double)v172;
              float v174 = (v168 + v173 * (double)*(int *)(v686 + 8)) * (double)v172;
              v112.n128_f64[0] = (v166 + v173 * (double)(v172 + ~*(_DWORD *)(v686 + 4))) * (double)v172;
              v112.n128_f32[0] = v112.n128_f64[0];
              BOOL v175 = fabsf(v174 + -1.0) <= 0.00000011921;
              if (v112.n128_f32[0] <= 0.0) {
                BOOL v175 = 0;
              }
              if (v112.n128_f32[0] > 1.0) {
                BOOL v175 = 0;
              }
              v112.n128_f32[0] = fabsf(v112.n128_f32[0] + -1.0);
              BOOL v176 = v112.n128_f32[0] <= 0.00000011921;
              if (v174 <= 0.0) {
                BOOL v176 = 0;
              }
              if (v174 > 1.0) {
                BOOL v176 = 0;
              }
              int v177 = v175 || v176;
              if (v163 == v120) {
                goto LABEL_181;
              }
            }
            if (v155 & v177) {
              goto LABEL_181;
            }
            double v189 = v168 - v160;
            v112.n128_u64[0] = 0x3DDB7CDFD9D7BDBBLL;
            if (fabs(v168 - v160) >= 1.0e-10)
            {
              double v196 = 1.0 / v189 * (v672 - v160);
              double v197 = 1.0 / v189 * (v670 - v160);
              double v190 = fmax(fmin(v196, v197), 0.0);
              double v191 = fmin(fmax(v196, v197), 1.0);
              if (v190 > v191) {
                goto LABEL_181;
              }
            }
            else
            {
              if (v160 < v672 || v160 > v670) {
                goto LABEL_181;
              }
              double v190 = 0.0;
              double v191 = 1.0;
            }
            double v198 = v166 - v161;
            if (fabs(v166 - v161) >= 1.0e-10)
            {
              double v218 = 1.0 / v198 * (v668 - v161);
              double v219 = 1.0 / v198 * (v661 - v161);
              double v220 = fmin(v218, v219);
              v112.n128_f64[0] = fmax(v218, v219);
              double v190 = fmax(v190, v220);
              double v191 = fmin(v112.n128_f64[0], v191);
              if (v190 > v191) {
                goto LABEL_181;
              }
LABEL_238:
              v112.n128_u64[0] = 1.0;
              BOOL v221 = v190 > 0.0 && v190 < 1.0;
              int v660 = v156;
              int v681 = v159;
              int v676 = v177;
              if (!v221)
              {
                double v222 = v663;
                if (v191 <= 0.0) {
                  goto LABEL_316;
                }
                goto LABEL_313;
              }
              double v664 = v190 * v189;
              double v640 = v190 * v198;
              int v233 = 1 << *(unsigned char *)(v686 + 1);
              double v234 = -1.0 / (double)v233;
              double v653 = v190 * v189 + v160;
              float v235 = (v653 + v234 * (double)*(int *)(v686 + 8)) * (double)v233;
              double v642 = v191;
              double v644 = v190 * v198 + v161;
              float v236 = (v644 + v234 * (double)(v233 + ~*(_DWORD *)(v686 + 4))) * (double)v233;
              if (v153 < v665)
              {
                float *v153 = v235;
                v153[1] = v236;
                int v150 = (char *)(v153 + 2);
                goto LABEL_282;
              }
              uint64_t v237 = ((char *)v153 - (char *)v19) >> 3;
              unint64_t v238 = v237 + 1;
              if ((unint64_t)(v237 + 1) >> 61) {
                abort();
              }
              if (((char *)v665 - (char *)v19) >> 2 > v238) {
                unint64_t v238 = ((char *)v665 - (char *)v19) >> 2;
              }
              if ((unint64_t)((char *)v665 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v239 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v239 = v238;
              }
              if (v239)
              {
                if (v239 >> 61) {
                  goto LABEL_767;
                }
                float v632 = v236;
                float v666 = v235;
                v240 = operator new(8 * v239);
                float v235 = v666;
                float v236 = v632;
              }
              else
              {
                v240 = 0;
              }
              v241 = (float *)&v240[8 * v237];
              float *v241 = v235;
              v241[1] = v236;
              if (v153 == (float *)v19)
              {
                v244 = (std::__shared_weak_count *)&v240[8 * v237];
              }
              else
              {
                unint64_t v242 = (char *)(v153 - 2) - (char *)v19;
                if (v242 < 0x168
                  || &v240[(char *)v153 - (char *)v19 - 8 - (v242 & 0xFFFFFFFFFFFFFFF8)] > &v240[(char *)v153
                                                                                                 - (char *)v19
                                                                                                 - 8]
                  || (float *)((char *)v153 - (v242 & 0xFFFFFFFFFFFFFFF8) - 8) > v153 - 2
                  || (unint64_t)((char *)v19 - v240) < 0x20)
                {
                  v243 = v153;
                  v244 = (std::__shared_weak_count *)&v240[8 * v237];
                }
                else
                {
                  uint64_t v262 = (v242 >> 3) + 1;
                  v243 = &v153[-2 * (v262 & 0x3FFFFFFFFFFFFFFCLL)];
                  v263 = &v240[8 * v237 - 16];
                  v264 = v153 - 4;
                  uint64_t v265 = v262 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v266 = *(_OWORD *)v264;
                    *(v263 - 1) = *((_OWORD *)v264 - 1);
                    _OWORD *v263 = v266;
                    v263 -= 2;
                    v264 -= 8;
                    v265 -= 4;
                  }
                  while (v265);
                  v244 = (std::__shared_weak_count *)&v241[-2 * (v262 & 0x3FFFFFFFFFFFFFFCLL)];
                  if (v262 == (v262 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_279;
                  }
                }
                do
                {
                  uint64_t v245 = *((void *)v243 - 1);
                  v243 -= 2;
                  v244[-1].__shared_weak_owners_ = v245;
                  v244 = (std::__shared_weak_count *)((char *)v244 - 8);
                }
                while (v243 != (float *)v19);
              }
LABEL_279:
              v665 = (float *)&v240[8 * v239];
              int v150 = (char *)(v241 + 2);
              if (v19) {
                operator delete(v19);
              }
              uint64_t v19 = v244;
              int v156 = v660;
LABEL_282:
              __powidf2();
              v112.n128_f32[0] = v112.n128_f64[0] * 0.0000000249532021;
              double v246 = (v123 + v190 * (v167 - v123)) * v112.n128_f32[0];
              v247 = (char *)v730[1];
              if (v730[1] < v731)
              {
                float v248 = v246;
                *(float *)v730[1] = v248;
                v249 = v247 + 4;
                goto LABEL_312;
              }
              v250 = (char *)v730[0];
              int64_t v251 = (char *)v730[1] - (char *)v730[0];
              int64_t v252 = ((char *)v730[1] - (char *)v730[0]) >> 2;
              unint64_t v253 = v252 + 1;
              if ((unint64_t)(v252 + 1) >> 62) {
                abort();
              }
              uint64_t v254 = v731 - (char *)v730[0];
              if ((v731 - (char *)v730[0]) >> 1 > v253) {
                unint64_t v253 = v254 >> 1;
              }
              if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v255 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v255 = v253;
              }
              if (v255)
              {
                if (v255 >> 62) {
                  goto LABEL_767;
                }
                int64_t v633 = (char *)v730[1] - (char *)v730[0];
                int64_t v256 = ((char *)v730[1] - (char *)v730[0]) >> 2;
                unint64_t v257 = v255;
                v258 = operator new(4 * v255);
                unint64_t v255 = v257;
                int64_t v252 = v256;
                int64_t v251 = v633;
              }
              else
              {
                v258 = 0;
              }
              v259 = (float *)&v258[4 * v252];
              float v260 = v246;
              float *v259 = v260;
              v249 = v259 + 1;
              if (v247 == v250)
              {
                int v156 = v660;
              }
              else
              {
                unint64_t v261 = v247 - 4 - v250;
                if (v261 < 0x2C)
                {
                  int v156 = v660;
                  goto LABEL_309;
                }
                int v156 = v660;
                if ((unint64_t)(v247 - &v258[v251]) < 0x20) {
                  goto LABEL_780;
                }
                uint64_t v267 = (v261 >> 2) + 1;
                v268 = (__n128 *)&v258[4 * v252 - 16];
                v269 = (__n128 *)(v247 - 16);
                uint64_t v270 = v267 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  __n128 v112 = *v269;
                  v268[-1] = v269[-1];
                  __n128 *v268 = v112;
                  v268 -= 2;
                  v269 -= 2;
                  v270 -= 8;
                }
                while (v270);
                v259 -= v267 & 0x7FFFFFFFFFFFFFF8;
                v247 -= 4 * (v267 & 0x7FFFFFFFFFFFFFF8);
                if (v267 != (v267 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_780:
                  do
                  {
LABEL_309:
                    int v271 = *((_DWORD *)v247 - 1);
                    v247 -= 4;
                    *((_DWORD *)v259-- - 1) = v271;
                  }
                  while (v247 != v250);
                }
              }
              v730[0] = v259;
              v731 = &v258[4 * v255];
              if (v250) {
                operator delete(v250);
              }
LABEL_312:
              int v159 = v681;
              int v177 = v676;
              double v222 = v653;
              double v191 = v642;
              double v189 = v168 - v160;
              double v198 = v166 - v161;
              v730[1] = v249;
              double v685 = sqrt(v664 * v664 + v640 * v640) + v690;
              v112.n128_u64[0] = 0;
              double v688 = 0.0;
              double v151 = (float *)v150;
              double v152 = (std::__shared_weak_count *)v150;
              v153 = (float *)v150;
              double v162 = v644;
              if (v642 <= 0.0) {
                goto LABEL_316;
              }
LABEL_313:
              v112.n128_u64[0] = 1.0;
              if (v191 >= 1.0)
              {
LABEL_316:
                double v663 = v222;
                goto LABEL_181;
              }
              double v645 = v162;
              double v654 = v222;
              int v272 = 1 << *(unsigned char *)(v686 + 1);
              double v273 = -1.0 / (double)v272;
              double v663 = v160 + v191 * v189;
              float v274 = (v663 + v273 * (double)*(int *)(v686 + 8)) * (double)v272;
              double v641 = v161 + v191 * v198;
              float v275 = (v641 + v273 * (double)(v272 + ~*(_DWORD *)(v686 + 4))) * (double)v272;
              if (v153 < v665)
              {
                float *v153 = v274;
                v153[1] = v275;
                v276 = (char *)(v153 + 2);
                double v162 = v161 + v191 * v198;
                goto LABEL_337;
              }
              uint64_t v277 = ((char *)v153 - (char *)v19) >> 3;
              unint64_t v278 = v277 + 1;
              if ((unint64_t)(v277 + 1) >> 61) {
                abort();
              }
              if (((char *)v665 - (char *)v19) >> 2 > v278) {
                unint64_t v278 = ((char *)v665 - (char *)v19) >> 2;
              }
              if ((unint64_t)((char *)v665 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v279 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v279 = v278;
              }
              if (v279)
              {
                if (v279 >> 61) {
                  goto LABEL_767;
                }
                float v667 = v275;
                double v280 = v191;
                v281 = operator new(8 * v279);
                double v191 = v280;
                float v275 = v667;
              }
              else
              {
                v281 = 0;
              }
              v282 = (float *)&v281[8 * v277];
              float *v282 = v274;
              v282[1] = v275;
              if (v153 == (float *)v19)
              {
                v285 = (std::__shared_weak_count *)&v281[8 * v277];
                double v162 = v641;
              }
              else
              {
                unint64_t v283 = (char *)(v153 - 2) - (char *)v19;
                double v162 = v641;
                if (v283 < 0x58 || (unint64_t)((char *)v19 - v281) < 0x20)
                {
                  v284 = v153;
                  v285 = (std::__shared_weak_count *)&v281[8 * v277];
                  goto LABEL_331;
                }
                uint64_t v314 = (v283 >> 3) + 1;
                v284 = &v153[-2 * (v314 & 0x3FFFFFFFFFFFFFFCLL)];
                v315 = &v281[8 * v277 - 16];
                v316 = v153 - 4;
                uint64_t v317 = v314 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v318 = *(_OWORD *)v316;
                  *(v315 - 1) = *((_OWORD *)v316 - 1);
                  _OWORD *v315 = v318;
                  v315 -= 2;
                  v316 -= 8;
                  v317 -= 4;
                }
                while (v317);
                v285 = (std::__shared_weak_count *)&v282[-2 * (v314 & 0x3FFFFFFFFFFFFFFCLL)];
                if (v314 != (v314 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_331:
                    uint64_t v286 = *((void *)v284 - 1);
                    v284 -= 2;
                    v285[-1].__shared_weak_owners_ = v286;
                    v285 = (std::__shared_weak_count *)((char *)v285 - 8);
                  }
                  while (v284 != (float *)v19);
                }
              }
              v665 = (float *)&v281[8 * v279];
              v276 = (char *)(v282 + 2);
              if (v19)
              {
                double v287 = v191;
                operator delete(v19);
                double v191 = v287;
              }
              uint64_t v19 = v285;
              int v156 = v660;
LABEL_337:
              double v288 = v123 + v191 * (v167 - v123);
              __powidf2();
              *(float *)&double v289 = v289 * 0.0000000249532021;
              double v290 = v288 * *(float *)&v289;
              v291 = (char *)v730[1];
              if (v730[1] < v731)
              {
                float v292 = v290;
                *(float *)v730[1] = v292;
                v293 = v291 + 4;
                char v294 = v681;
                double v295 = v654;
LABEL_361:
                v730[1] = v293;
                PolylineOverlayRibbonBuilder::finalizePolylineBatch((char *)v19, v276, v648, v717, v647, (char **)&v711, v294 & 1, v156 & 1, v685 * v646, (sqrt((v162 - v645) * (v162 - v645) + (v663 - v295) * (v663 - v295)) + v688) * v646);
                int v159 = 0;
                v730[1] = v730[0];
                v112.n128_u64[0] = 0;
                double v688 = 0.0;
                int v150 = (char *)v19;
                double v151 = (float *)v19;
                double v152 = v19;
                v153 = (float *)v19;
                int v177 = v676;
                goto LABEL_181;
              }
              v643 = v276;
              v296 = (char *)v730[0];
              int64_t v297 = (char *)v730[1] - (char *)v730[0];
              int64_t v298 = ((char *)v730[1] - (char *)v730[0]) >> 2;
              unint64_t v299 = v298 + 1;
              if ((unint64_t)(v298 + 1) >> 62) {
                abort();
              }
              uint64_t v300 = v731 - (char *)v730[0];
              if ((v731 - (char *)v730[0]) >> 1 > v299) {
                unint64_t v299 = v300 >> 1;
              }
              if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v301 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v301 = v299;
              }
              if (v301)
              {
                if (v301 >> 62) {
                  goto LABEL_767;
                }
                unint64_t v302 = v301;
                v303 = operator new(4 * v301);
                unint64_t v301 = v302;
              }
              else
              {
                v303 = 0;
              }
              v304 = (float *)&v303[4 * v298];
              float v305 = v290;
              float *v304 = v305;
              v293 = v304 + 1;
              if (v291 == v296)
              {
                int v156 = v660;
              }
              else
              {
                unint64_t v306 = v291 - 4 - v296;
                if (v306 < 0x2C)
                {
                  int v156 = v660;
                  goto LABEL_357;
                }
                unint64_t v307 = v291 - &v303[v297];
                int v156 = v660;
                if (v307 < 0x20) {
                  goto LABEL_781;
                }
                uint64_t v308 = (v306 >> 2) + 1;
                v309 = &v303[4 * v298 - 16];
                v310 = v291 - 16;
                uint64_t v311 = v308 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v312 = *(_OWORD *)v310;
                  *(v309 - 1) = *((_OWORD *)v310 - 1);
                  _OWORD *v309 = v312;
                  v309 -= 2;
                  v310 -= 32;
                  v311 -= 8;
                }
                while (v311);
                v304 -= v308 & 0x7FFFFFFFFFFFFFF8;
                v291 -= 4 * (v308 & 0x7FFFFFFFFFFFFFF8);
                if (v308 != (v308 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_781:
                  do
                  {
LABEL_357:
                    int v313 = *((_DWORD *)v291 - 1);
                    v291 -= 4;
                    *((_DWORD *)v304-- - 1) = v313;
                  }
                  while (v291 != v296);
                }
              }
              v730[0] = v304;
              v731 = &v303[4 * v301];
              if (v296) {
                operator delete(v296);
              }
              char v294 = v681;
              double v295 = v654;
              v276 = v643;
              goto LABEL_361;
            }
            v112.n128_f64[0] = v668;
            if (v161 >= v668)
            {
              v112.n128_f64[0] = v661;
              if (v161 <= v661) {
                goto LABEL_238;
              }
            }
LABEL_181:
            if (v177 & 1 | ((v155 & 1) == 0)) {
              goto LABEL_184;
            }
            if (v152 != v19)
            {
              int v178 = v177;
              PolylineOverlayRibbonBuilder::finalizePolylineBatch((char *)v19, v150, v648, v717, v647, (char **)&v711, v159 & 1, v156 & 1, v685 * v646, v688 * v646);
              int v159 = 0;
              v730[1] = v730[0];
              v112.n128_u64[0] = 0;
              double v688 = 0.0;
              int v150 = (char *)v19;
              double v151 = (float *)v19;
              double v152 = v19;
              v153 = (float *)v19;
              int v177 = v178;
LABEL_184:
              if (v177) {
                goto LABEL_185;
              }
              goto LABEL_153;
            }
            double v152 = v19;
            v153 = (float *)v19;
            if (v177)
            {
LABEL_185:
              double v652 = v160;
              double v179 = v161;
              double v180 = v167;
              int v675 = v177;
              int v680 = v159;
              int v659 = v156;
              char v181 = *(unsigned char *)(v686 + 1);
              double v182 = (double)(1 << v181);
              float v183 = (v168 + -1.0 / v182 * (double)*(int *)(v686 + 8)) * v182;
              float v184 = (v166 + -1.0 / v182 * (double)((1 << v181) + ~*(_DWORD *)(v686 + 4))) * v182;
              __powidf2();
              double v185 = v112.n128_f64[0];
              uint64_t v186 = (char *)v151 - (char *)v19;
              double v187 = v688;
              v112.n128_f64[0] = v688 + sqrt((v166 - v162) * (v166 - v162) + (v168 - v663) * (v168 - v663));
              double v188 = v685;
              if (v151 == (float *)v19) {
                double v188 = v690;
              }
              double v685 = v188;
              if (v151 != (float *)v19) {
                double v187 = v112.n128_f64[0];
              }
              double v688 = v187;
              if (v151 < v665)
              {
                *double v151 = v183;
                v151[1] = v184;
                int v150 = (char *)(v151 + 2);
                int v177 = v675;
                double v167 = v180;
                goto LABEL_221;
              }
              uint64_t v192 = v186 >> 3;
              unint64_t v193 = (v186 >> 3) + 1;
              if (v193 >> 61) {
                goto LABEL_766;
              }
              if (((char *)v665 - (char *)v19) >> 2 > v193) {
                unint64_t v193 = ((char *)v665 - (char *)v19) >> 2;
              }
              if ((unint64_t)((char *)v665 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v194 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v194 = v193;
              }
              if (v194)
              {
                if (v194 >> 61) {
                  goto LABEL_767;
                }
                v195 = operator new(8 * v194);
                v164 = v650;
              }
              else
              {
                v195 = 0;
              }
              v199 = (float *)&v195[8 * v192];
              float *v199 = v183;
              v199[1] = v184;
              if (v151 == (float *)v19)
              {
                v202 = (std::__shared_weak_count *)&v195[8 * v192];
                double v167 = v180;
              }
              else
              {
                unint64_t v200 = (char *)(v151 - 2) - (char *)v19;
                double v167 = v180;
                if (v200 < 0x168
                  || &v195[(v186 & 0xFFFFFFFFFFFFFFF8) - 8 - (v200 & 0xFFFFFFFFFFFFFFF8)] > &v195[(v186 & 0xFFFFFFFFFFFFFFF8) - 8]
                  || (float *)((char *)v151 - (v200 & 0xFFFFFFFFFFFFFFF8) - 8) > v151 - 2
                  || (char *)v151 - v195 - (v186 & 0xFFFFFFFFFFFFFFF8) < 0x20)
                {
                  v201 = v151;
                  v202 = (std::__shared_weak_count *)&v195[8 * v192];
                }
                else
                {
                  uint64_t v223 = (v200 >> 3) + 1;
                  v201 = &v151[-2 * (v223 & 0x3FFFFFFFFFFFFFFCLL)];
                  v224 = (__n128 *)&v195[8 * v192 - 16];
                  v225 = (__n128 *)(v151 - 4);
                  uint64_t v226 = v223 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    __n128 v112 = *v225;
                    v224[-1] = v225[-1];
                    __n128 *v224 = v112;
                    v224 -= 2;
                    v225 -= 2;
                    v226 -= 4;
                  }
                  while (v226);
                  v202 = (std::__shared_weak_count *)&v199[-2 * (v223 & 0x3FFFFFFFFFFFFFFCLL)];
                  if (v223 == (v223 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_218;
                  }
                }
                do
                {
                  uint64_t v203 = *((void *)v201 - 1);
                  v201 -= 2;
                  v202[-1].__shared_weak_owners_ = v203;
                  v202 = (std::__shared_weak_count *)((char *)v202 - 8);
                }
                while (v201 != (float *)v19);
              }
LABEL_218:
              v665 = (float *)&v195[8 * v194];
              int v150 = (char *)(v199 + 2);
              if (v19) {
                operator delete(v19);
              }
              uint64_t v19 = v202;
              int v177 = v675;
LABEL_221:
              float v204 = v185 * 0.0000000249532021;
              v112.n128_f64[0] = v167 * v204;
              float v205 = v112.n128_f64[0];
              v206 = (char *)v730[1];
              int v159 = v680;
              if (v730[1] < v731)
              {
                *(float *)v730[1] = v205;
                v207 = v206 + 4;
                int v208 = v659;
                double v161 = v179;
                double v160 = v652;
                goto LABEL_259;
              }
              v209 = (char *)v730[0];
              int64_t v210 = (char *)v730[1] - (char *)v730[0];
              int64_t v211 = ((char *)v730[1] - (char *)v730[0]) >> 2;
              unint64_t v212 = v211 + 1;
              if ((unint64_t)(v211 + 1) >> 62) {
LABEL_766:
              }
                abort();
              uint64_t v213 = v731 - (char *)v730[0];
              if ((v731 - (char *)v730[0]) >> 1 > v212) {
                unint64_t v212 = v213 >> 1;
              }
              if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v214 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v214 = v212;
              }
              if (v214)
              {
                if (v214 >> 62) {
                  goto LABEL_767;
                }
                v215 = operator new(4 * v214);
                double v167 = v180;
              }
              else
              {
                v215 = 0;
              }
              v216 = (float *)&v215[4 * v211];
              float *v216 = v205;
              v207 = v216 + 1;
              double v161 = v179;
              if (v206 == v209)
              {
                v164 = v650;
                double v160 = v652;
              }
              else
              {
                unint64_t v217 = v206 - 4 - v209;
                double v160 = v652;
                if (v217 < 0x2C)
                {
                  v164 = v650;
                  goto LABEL_255;
                }
                unint64_t v227 = v206 - &v215[v210];
                v164 = v650;
                if (v227 < 0x20) {
                  goto LABEL_782;
                }
                uint64_t v228 = (v217 >> 2) + 1;
                v229 = (__n128 *)&v215[4 * v211 - 16];
                v230 = (__n128 *)(v206 - 16);
                uint64_t v231 = v228 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  __n128 v112 = *v230;
                  v229[-1] = v230[-1];
                  __n128 *v229 = v112;
                  v229 -= 2;
                  v230 -= 2;
                  v231 -= 8;
                }
                while (v231);
                v216 -= v228 & 0x7FFFFFFFFFFFFFF8;
                v206 -= 4 * (v228 & 0x7FFFFFFFFFFFFFF8);
                if (v228 != (v228 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_782:
                  do
                  {
LABEL_255:
                    unsigned __int32 v232 = *((_DWORD *)v206 - 1);
                    v206 -= 4;
                    v112.n128_u32[0] = v232;
                    *((_DWORD *)v216-- - 1) = v232;
                  }
                  while (v206 != v209);
                }
              }
              v730[0] = v216;
              v731 = &v215[4 * v214];
              if (v209) {
                operator delete(v209);
              }
              int v208 = v659;
              int v159 = v680;
              int v177 = v675;
LABEL_259:
              v730[1] = v207;
              double v120 = *(double **)v164;
              int v156 = (v163 == (double *)(*((void *)v164 + 1) - 16)) | v208;
              double v151 = (float *)v150;
              double v152 = (std::__shared_weak_count *)v150;
              v153 = (float *)v150;
              double v162 = v166;
              double v663 = v168;
              if (v163 == *(double **)v164) {
                goto LABEL_155;
              }
LABEL_154:
              v112.n128_f64[0] = sqrt((v168 - v160) * (v168 - v160) + (v166 - v161) * (v166 - v161));
              double v690 = v112.n128_f64[0] + v690;
              goto LABEL_155;
            }
LABEL_153:
            double v120 = *(double **)v164;
            int v159 = (v163 != *(double **)v164) & v159;
            if (v163 != *(double **)v164) {
              goto LABEL_154;
            }
LABEL_155:
            v163 += 2;
            ++v154;
            double v123 = v167;
            int v155 = v177;
            double v160 = v168;
            double v161 = v166;
            double v121 = v655;
            if (v163 == *((double **)v164 + 1))
            {
              float64x2_t v108 = v634;
              unsigned int v17 = v638;
              float64x2_t v113 = v639;
              if (v151 != (float *)v19) {
                PolylineOverlayRibbonBuilder::finalizePolylineBatch((char *)v19, v150, v648, v717, v647, (char **)&v711, v159 & 1, v156 & 1, v685 / v636, v688 / v636);
              }
              float64x2_t v110 = v635;
              int v111 = v637;
              if (v730[0]) {
                operator delete(v730[0]);
              }
LABEL_371:
              if (v19) {
                operator delete(v19);
              }
              if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v112);
                std::__shared_weak_count::__release_weak(v17);
                if (v113) {
                  goto LABEL_376;
                }
              }
              else if (v113)
              {
LABEL_376:
                if (!atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v113->__on_zero_shared)(v113, v112);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              ++v111;
              goto LABEL_133;
            }
          }
        }
        v122 += 2 * (v128 & 0x1FFFFFFFFFFFFFFCLL);
        double v126 = v129.f64[1];
        uint64_t v125 = v141.i64[1];
      }
      do
      {
        double v319 = v122[1];
        double v320 = *v122 - v121;
        if (v122 != v120) {
          double v124 = sqrt((v320 - v126) * (v320 - v126) + (v319 - *(double *)&v125) * (v319 - *(double *)&v125)) + v124;
        }
        v122 += 2;
        double v126 = v320;
        *(double *)&uint64_t v125 = v319;
      }
      while (v122 != v119);
      goto LABEL_152;
    }
    int8x8_t v76 = (int8x8_t)a14[1];
    if (v76)
    {
      unint64_t v77 = *v626;
      uint8x8_t v78 = (uint8x8_t)vcnt_s8(v76);
      v78.i16[0] = vaddlv_u8(v78);
      if (v78.u32[0] > 1uLL)
      {
        unint64_t v79 = *v626;
        if (*(void *)&v76 <= v77) {
          unint64_t v79 = v77 % *(void *)&v76;
        }
      }
      else
      {
        unint64_t v79 = (v76.i32[0] - 1) & v77;
      }
      long long v80 = *(uint64_t ****)(*a14 + 8 * v79);
      if (v80)
      {
        long long v81 = *v80;
        if (v81)
        {
          if (v78.u32[0] < 2uLL)
          {
            uint64_t v82 = *(void *)&v76 - 1;
            while (1)
            {
              double v84 = v81[1];
              if (v84 == (uint64_t *)v77)
              {
                if (*((unsigned __int8 *)v81 + 16) == v77) {
                  goto LABEL_96;
                }
              }
              else if (((unint64_t)v84 & v82) != v79)
              {
                goto LABEL_73;
              }
              long long v81 = (uint64_t **)*v81;
              if (!v81) {
                goto LABEL_73;
              }
            }
          }
          do
          {
            unint64_t v83 = (unint64_t)v81[1];
            if (v83 == v77)
            {
              if (*((unsigned __int8 *)v81 + 16) == v77) {
                goto LABEL_96;
              }
            }
            else
            {
              if (v83 >= *(void *)&v76) {
                v83 %= *(void *)&v76;
              }
              if (v83 != v79) {
                break;
              }
            }
            long long v81 = (uint64_t **)*v81;
          }
          while (v81);
        }
      }
    }
LABEL_73:
    v626 += 32;
    uint64_t v19 = __p;
  }
  while (v626 != (unsigned __int8 *)v20);
  if (!__p) {
    goto LABEL_756;
  }
  do
  {
    v604 = v20[-1].__vftable;
    if (v604)
    {
      uint64_t v605 = v20[-1].__shared_owners_;
      v606 = v20[-1].__vftable;
      if ((std::__shared_weak_count_vtbl *)v605 != v604)
      {
        uint64_t v607 = v605 - 24;
        v608 = (std::__shared_weak_count_vtbl *)(v605 - 24);
        v609 = (std::__shared_weak_count_vtbl *)(v605 - 24);
        do
        {
          v610 = (void (**)(std::__shared_weak_count_vtbl *))v609->~__shared_weak_count;
          v609 = (std::__shared_weak_count_vtbl *)((char *)v609 - 24);
          (*v610)(v608);
          v607 -= 24;
          _ZF = v608 == v604;
          v608 = v609;
        }
        while (!_ZF);
        v606 = v20[-1].__vftable;
      }
      v20[-1].__shared_owners_ = (uint64_t)v604;
      operator delete(v606);
    }
    unsigned __int8 v20 = (std::__shared_weak_count *)((char *)v20 - 32);
  }
  while (v20 != __p);
LABEL_754:
  operator delete(v19);
LABEL_756:
}

void sub_1A24A09DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  operator delete(v71);
  std::unique_ptr<std::vector<md::PolylineOverlayRenderable>>::reset[abi:nn180100]((void ***)&STACK[0x350], 0);
  _Block_object_dispose(&STACK[0x4D0], 8);
  unint64_t v73 = STACK[0x500];
  STACK[0x500] = 0;
  if (v73) {
    (*(void (**)(unint64_t))(*(void *)v73 + 8))(v73);
  }
  if (STACK[0x3A0])
  {
    operator delete((void *)STACK[0x3A0]);
    int v74 = (void *)STACK[0x3B8];
    if (!STACK[0x3B8])
    {
LABEL_5:
      double v75 = (void *)STACK[0x3D0];
      if (!STACK[0x3D0]) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    int v74 = (void *)STACK[0x3B8];
    if (!STACK[0x3B8]) {
      goto LABEL_5;
    }
  }
  STACK[0x3C0] = (unint64_t)v74;
  operator delete(v74);
  double v75 = (void *)STACK[0x3D0];
  if (!STACK[0x3D0])
  {
LABEL_7:
    _Block_object_dispose(&STACK[0x3F0], 8);
    int8x8_t v76 = (void *)STACK[0x430];
    if (STACK[0x430])
    {
      do
      {
        unint64_t v77 = (void *)*v76;
        std::__destroy_at[abi:nn180100]<std::pair<md::PolylineOverlayBatchKey const,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v76 + 2));
        operator delete(v76);
        int8x8_t v76 = v77;
      }
      while (v77);
    }
    uint8x8_t v78 = (void *)STACK[0x420];
    STACK[0x420] = 0;
    if (v78) {
      operator delete(v78);
    }

    if (a52)
    {
      while ((void *)a50 != a52)
      {
        long long v80 = *(void (****)(void))(a50 - 24);
        if (v80)
        {
          long long v81 = *(void (****)(void))(a50 - 16);
          uint64_t v82 = *(void **)(a50 - 24);
          if (v81 != v80)
          {
            unint64_t v83 = v81 - 3;
            double v84 = v81 - 3;
            uint64_t v85 = v81 - 3;
            do
            {
              uint64_t v86 = *v85;
              v85 -= 3;
              (*v86)(v84);
              v83 -= 3;
              BOOL v87 = v84 == v80;
              double v84 = v85;
            }
            while (!v87);
            uint64_t v82 = *(void **)(a50 - 24);
          }
          *(void *)(a50 - 16) = v80;
          operator delete(v82);
        }
        a50 -= 32;
      }
      operator delete(a52);
    }

    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(v75);
  goto LABEL_7;
}

void **std::vector<md::LabelClientTileOverlay>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 3);
        if (v5)
        {
          uint64_t v6 = *((void *)v3 - 2);
          BOOL v7 = (void *)*((void *)v3 - 3);
          if (v6 != v5)
          {
            uint64_t v8 = *((void *)v3 - 2);
            do
            {
              id v10 = *(void **)(v8 - 24);
              v8 -= 24;
              __int32 v9 = v10;
              if (v10)
              {
                *(void *)(v6 - 16) = v9;
                operator delete(v9);
              }
              uint64_t v6 = v8;
            }
            while (v8 != v5);
            BOOL v7 = (void *)*((void *)v3 - 3);
          }
          *((void *)v3 - 2) = v5;
          operator delete(v7);
        }
        id v11 = (std::__shared_weak_count *)*((void *)v3 - 6);
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::OverlayTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::OverlayTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FFB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::OverlayTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FFB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelClientTile>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void **)(a1 + 48);
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = *(void *)(v3 - 24);
        if (v5)
        {
          uint64_t v6 = *(void *)(v3 - 16);
          BOOL v7 = *(void **)(v3 - 24);
          if (v6 != v5)
          {
            uint64_t v8 = *(void *)(v3 - 16);
            do
            {
              id v10 = *(void **)(v8 - 24);
              v8 -= 24;
              __int32 v9 = v10;
              if (v10)
              {
                *(void *)(v6 - 16) = v9;
                operator delete(v9);
              }
              uint64_t v6 = v8;
            }
            while (v8 != v5);
            BOOL v7 = *(void **)(v3 - 24);
          }
          *(void *)(v3 - 16) = v5;
          operator delete(v7);
        }
        id v11 = *(std::__shared_weak_count **)(v3 - 48);
        if (v11) {
          std::__shared_weak_count::__release_weak(v11);
        }
        v3 -= 56;
      }
      while (v3 != v1);
      uint64_t v4 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v1;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<md::LabelClientTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelClientTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void generateTexture(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v6 = *(void *)a2;
  if (!*(void *)a2) {
    goto LABEL_21;
  }
  BOOL v7 = (char *)operator new(0x58uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)BOOL v7 = &unk_1EF583858;
  *((void *)v7 + 5) = 0;
  *((void *)v7 + 6) = 0;
  *((_DWORD *)v7 + 14) = 0;
  *((void *)v7 + 3) = &unk_1EF55AE58;
  *((void *)v7 + 4) = 0;
  *(void *)&long long v8 = 0x100000001;
  *((void *)&v8 + 1) = 0x100000001;
  *(_OWORD *)(v7 + 60) = v8;
  *(void *)(v7 + 76) = 0x100000001;
  *((_DWORD *)v7 + 21) = 0;
  id v22 = v7 + 24;
  int v23 = (std::__shared_weak_count *)v7;
  __int32 v9 = operator new(0xB0uLL);
  v9[1] = 0;
  v9[2] = 0;
  *__int32 v9 = &unk_1EF589EF0;
  uint64_t v10 = std::construct_at[abi:nn180100]<ggl::Texture2D,std::shared_ptr<ggl::TextureData2D> &,std::shared_ptr<ggl::SamplerState> &,ggl::Texture2D*>((uint64_t)(v9 + 3), v6, *(std::__shared_weak_count **)(a2 + 8), &v22);
  id v11 = (std::__shared_weak_count *)a1[1];
  *a1 = v10;
  a1[1] = (uint64_t)v9;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)[v5 gglDevice] + 24))(&v21);
  v24[0] = &unk_1EF56CCF0;
  v24[1] = a1;
  BOOL v25 = v24;
  uint64_t v19 = 0;
  unsigned __int8 v20 = 0;
  (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v21 + 16))(v21, v24, &v19);
  uint64_t v12 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v25 != v24)
  {
    if (v25) {
      (*(void (**)(void))(*v25 + 40))();
    }
    uint64_t v13 = v21;
    if (!v21) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  (*(void (**)(void *))(v24[0] + 32))(v24);
  uint64_t v13 = v21;
  if (v21)
  {
LABEL_14:
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
    uint64_t v15 = v21;
    uint64_t v21 = 0;
    v24[0] = v15;
    (*(void (**)(uint64_t, void *))(*(void *)v14 + 48))(v14, v24);
    uint64_t v16 = v24[0];
    v24[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = v21;
    uint64_t v21 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
LABEL_18:
  uint64_t v18 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_21:
}

void sub_1A24A1DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v13);

  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<md::PolygonOverlayRenderable>>::__emplace_back_slow_path<std::unique_ptr<md::PolygonOverlayRenderable>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    __int32 v9 = (char *)operator new(8 * v8);
  }
  else
  {
    __int32 v9 = 0;
  }
  uint64_t v10 = &v9[8 * v3];
  id v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  uint64_t v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 <= 0x77
      || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = &v9[8 * v3 - 16];
    uint64_t v19 = v15 - 32;
    uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v22 = *(_OWORD *)v19;
      long long v21 = *((_OWORD *)v19 + 1);
      *(_OWORD *)uint64_t v19 = 0uLL;
      *((_OWORD *)v19 + 1) = 0uLL;
      v19 -= 32;
      *((_OWORD *)v18 - 1) = v22;
      *(_OWORD *)uint64_t v18 = v21;
      v18 -= 32;
      v20 -= 4;
    }
    while (v20);
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v15 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v23 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)uint64_t v15 = 0;
        *((void *)v10 - 1) = v23;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    double v24 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v24 != v15)
    {
      uint64_t v26 = (md::PolygonOverlayRenderable *)*((void *)v24 - 1);
      v24 -= 8;
      BOOL v25 = v26;
      *(void *)double v24 = 0;
      if (v26)
      {
        md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v25);
        MEMORY[0x1A6239270]();
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

md::PolygonOverlayRenderable **std::unique_ptr<md::PolygonOverlayRenderable>::~unique_ptr[abi:nn180100](md::PolygonOverlayRenderable **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

void md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData::~MaskingOverlayPolygonData(md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  if (*((void *)this + 2))
  {
    uint64_t v4 = *(void *)this;
    id v5 = (md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData *)*((void *)this + 1);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(*(void *)this + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 2) = 0;
    if (v5 != this)
    {
      do
      {
        uint64_t v7 = (md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData *)*((void *)v5 + 1);
        unint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 3);
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v5);
        id v5 = v7;
      }
      while (v7 != this);
    }
  }
}

void md::MaskingOverlayMeshProcessor::~MaskingOverlayMeshProcessor(md::MaskingOverlayMeshProcessor *this)
{
  uint64_t v2 = (char *)*((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = (char *)*((void *)this + 2);
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData::~MaskingOverlayPolygonData((md::MaskingOverlayMeshProcessor::MaskingOverlayPolygonData *)(v3 - 96));
      while (v3 != v2);
      uint64_t v4 = (char *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }
}

uint64_t md::OverlayTileData::OverlayTileResource::CustomTile::CustomTile(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, char a8, uint64_t a9)
{
  id v16 = a3;
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(void *)(a1 + 24) = a7;
  id v17 = v16;
  *(void *)(a1 + 56) = *a4;
  *(void *)(a1 + 32) = off_1EF559478;
  *(void *)(a1 + 40) = v17;
  uint64_t v18 = a4[1];
  *(void *)(a1 + 64) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = a5[1];
  *(void *)(a1 + 72) = *a5;
  *(void *)(a1 + 80) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = a6[1];
  *(void *)(a1 + 88) = *a6;
  *(void *)(a1 + 96) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  long long v21 = operator new(0xE8uLL);
  v21[1] = 0;
  v21[2] = 0;
  void *v21 = &unk_1EF587640;
  uint64_t v22 = ggl::BufferData::BufferData((uint64_t)(v21 + 3), qword_1E957BF58, 2, 1, 6, 1);
  v21[28] = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
  v21[3] = &unk_1EF55E898;
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v21;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(unsigned char *)(a1 + 124) = a8;
  *(void *)(a1 + 128) = a9;
  unint64_t v23 = v21[4];
  unint64_t v24 = v21[11];
  *(_DWORD *)(v21[12] + 8) = 4;
  if (v24 > v23) {
    unint64_t v23 = v24;
  }
  v21[10] = 0;
  v21[11] = v23;

  return a1;
}

void sub_1A24A2340(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v6);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v5);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3);
  *(void *)(v1 + 32) = v4;

  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<md::OverlayTileData::OverlayTileResource::CustomTile>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    md::OverlayTileData::OverlayTileResource::CustomTile::~CustomTile((md::OverlayTileData::OverlayTileResource::CustomTile *)(i - 136));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<geo::QuadTile,unsigned long>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,unsigned long>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,unsigned long>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,unsigned long>>>::__emplace_unique_key_args<geo::QuadTile,std::piecewise_construct_t const&,std::tuple<geo::QuadTile const&>,std::tuple<>>(float *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  uint64_t v9 = *((int *)a2 + 1);
  uint64_t v10 = *((int *)a2 + 2);
  unint64_t v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  unint64_t v12 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
  unint64_t v13 = *((void *)a1 + 1);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      uint64_t v3 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
      if (v12 >= v13) {
        uint64_t v3 = v12 % v13;
      }
    }
    else
    {
      uint64_t v3 = v12 & (v13 - 1);
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v15)
    {
      id v16 = *v15;
      if (*v15)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v16[1];
            if (v18 == v12)
            {
              if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
                && *(void *)((char *)v16 + 20) == __PAIR64__(v10, v9))
              {
                return v16;
              }
            }
            else if ((v18 & (v13 - 1)) != v3)
            {
              goto LABEL_25;
            }
            id v16 = (void *)*v16;
            if (!v16) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v17 = v16[1];
          if (v17 == v12)
          {
            if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
              && *(void *)((char *)v16 + 20) == __PAIR64__(v10, v9))
            {
              return v16;
            }
          }
          else
          {
            if (v17 >= v13) {
              v17 %= v13;
            }
            if (v17 != v3) {
              break;
            }
          }
          id v16 = (void *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_25:
  id v16 = operator new(0x30uLL);
  *id v16 = 0;
  v16[1] = v12;
  *((_WORD *)v16 + 8) = *(_WORD *)a3;
  *(void *)((char *)v16 + 20) = *(void *)(a3 + 4);
  v16[5] = 0;
  float v19 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v20 = a1[8];
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    BOOL v21 = 1;
    if (v13 >= 3) {
      BOOL v21 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v13);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v13 = *((void *)a1 + 1);
    }
    if (prime <= v13)
    {
      if (prime >= v13) {
        goto LABEL_62;
      }
      unint64_t v36 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v13 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime >= v13)
      {
        unint64_t v13 = *((void *)a1 + 1);
LABEL_62:
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v12 >= v13) {
            uint64_t v3 = v12 % v13;
          }
          else {
            uint64_t v3 = v12;
          }
        }
        else
        {
          uint64_t v3 = (v13 - 1) & v12;
        }
        goto LABEL_75;
      }
      if (!prime)
      {
        uint64_t v46 = *(void **)a1;
        *(void *)a1 = 0;
        if (v46) {
          operator delete(v46);
        }
        unint64_t v13 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_62;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    BOOL v25 = operator new(8 * prime);
    uint64_t v26 = *(void **)a1;
    *(void *)a1 = v25;
    if (v26) {
      operator delete(v26);
    }
    uint64_t v27 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v27++) = 0;
    while (prime != v27);
    unsigned __int8 v29 = (uint64_t *)(a1 + 4);
    uint64_t v28 = (void *)*((void *)a1 + 2);
    if (!v28)
    {
LABEL_61:
      unint64_t v13 = prime;
      goto LABEL_62;
    }
    size_t v30 = v28[1];
    size_t v31 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v32 = v30 & v31;
      *(void *)(*(void *)a1 + 8 * v32) = v29;
      for (uint64_t i = (void *)*v28; *v28; uint64_t i = (void *)*v28)
      {
        size_t v34 = i[1] & v31;
        if (v34 == v32)
        {
          uint64_t v28 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v34))
        {
          void *v28 = *i;
          uint64_t v35 = 8 * v34;
          void *i = **(void **)(*(void *)a1 + v35);
          **(void **)(*(void *)a1 + v35) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v34) = v28;
          uint64_t v28 = i;
          size_t v32 = v34;
        }
      }
      goto LABEL_61;
    }
    if (v30 >= prime) {
      v30 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v30) = v29;
    float v39 = (void *)*v28;
    if (!*v28) {
      goto LABEL_61;
    }
    while (1)
    {
      size_t v41 = v39[1];
      if (v41 >= prime) {
        v41 %= prime;
      }
      if (v41 != v30)
      {
        if (!*(void *)(*(void *)a1 + 8 * v41))
        {
          *(void *)(*(void *)a1 + 8 * v41) = v28;
          goto LABEL_66;
        }
        void *v28 = *v39;
        uint64_t v40 = 8 * v41;
        void *v39 = **(void **)(*(void *)a1 + v40);
        **(void **)(*(void *)a1 + v40) = v39;
        float v39 = v28;
      }
      size_t v41 = v30;
LABEL_66:
      uint64_t v28 = v39;
      float v39 = (void *)*v39;
      size_t v30 = v41;
      if (!v39) {
        goto LABEL_61;
      }
    }
  }
LABEL_75:
  double v42 = *(void **)a1;
  uint64_t v43 = *(void **)(*(void *)a1 + 8 * v3);
  if (v43)
  {
    *id v16 = *v43;
LABEL_83:
    void *v43 = v16;
    goto LABEL_84;
  }
  *id v16 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v16;
  v42[v3] = a1 + 4;
  if (*v16)
  {
    unint64_t v44 = *(void *)(*v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v44 >= v13) {
        v44 %= v13;
      }
    }
    else
    {
      v44 &= v13 - 1;
    }
    uint64_t v43 = (void *)(*(void *)a1 + 8 * v44);
    goto LABEL_83;
  }
LABEL_84:
  ++*((void *)a1 + 3);
  return v16;
}

void sub_1A24A28C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::OverlayTileData::OverlayTileResource::RasterTile::RasterTile(uint64_t a1, __int16 *a2, void *a3, __int16 a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)a1 = a8;
  *(void *)(a1 + 8) = a9;
  if (a9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = a3[1];
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v13 = *a2;
  *(void *)(a1 + 64) = *a5;
  *(_WORD *)(a1 + 32) = v13;
  *(void *)(a1 + 36) = *(void *)(a2 + 2);
  *(_WORD *)(a1 + 56) = a4;
  uint64_t v14 = a5[1];
  *(void *)(a1 + 72) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = a6[1];
  *(void *)(a1 + 80) = *a6;
  *(void *)(a1 + 88) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = a7[1];
  *(void *)(a1 + 96) = *a7;
  *(void *)(a1 + 104) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v17 = operator new(0xE8uLL);
  v17[1] = 0;
  v17[2] = 0;
  *unint64_t v17 = &unk_1EF587640;
  int v18 = 1;
  uint64_t v19 = ggl::BufferData::BufferData((uint64_t)(v17 + 3), qword_1E957BF58, 2, 1, 6, 1);
  v17[28] = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
  v17[3] = &unk_1EF55E898;
  *(void *)(a1 + 112) = v19;
  *(void *)(a1 + 120) = v17;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(unsigned char *)(a1 + 132) = a10;
  uint64_t v20 = *(unsigned int *)(*a3 + 68);
  if (v20 <= 0x3A) {
    int v18 = dword_1A29C37D4[v20];
  }
  unint64_t v21 = v17[4];
  unint64_t v22 = v17[11];
  *(_DWORD *)(v17[12] + 8) = v18;
  if (v22 > v21) {
    unint64_t v21 = v22;
  }
  v17[10] = 0;
  v17[11] = v21;
  return a1;
}

void sub_1A24A2A70(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v5);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v4);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<md::OverlayTileData::OverlayTileResource::RasterTile>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    md::OverlayTileData::OverlayTileResource::RasterTile::~RasterTile((md::OverlayTileData::OverlayTileResource::RasterTile *)(i - 136));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__function::__func<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0,std::allocator<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  ggl::Texture2D::vendImplicitLoadItem((ggl::Texture2D *)v4, **(void **)(a1 + 8));
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 24))(v2, v4);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_1A24A2E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19 == v19 + 48)
  {
    (*(void (**)(uint64_t))(a16 + 32))(v19 + 48);
    _Unwind_Resume(exception_object);
  }
  if (a19) {
    (*(void (**)(void))(*(void *)a19 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0,std::allocator<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56CD38;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0,std::allocator<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56CD38;
  result[1] = v3;
  return result;
}

void std::__function::__func<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0,std::allocator<_processOverlays(geo::QuadTile const&,unsigned int,float,CGSize const&,VKSharedResources const*,ggl::Loader &,std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>> const&,std::list<md::OverlayTileData::OverlayTileResource> &,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>>,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>> const&,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&,std::vector<md::LabelClientTileOverlay> *,BOOL,std::unordered_set<md::OverlayTileDataType> const&)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

uint64_t __Block_byref_object_copy__30355(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__30356(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<md::PolylineOverlayBatchKey const,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void PolylineOverlayRibbonBuilder::addPolylineRibbonTo(uint64_t *a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, double a9, double a10)
{
  id v19 = a3;
  uint64_t v20 = [v19 lineCap];
  uint64_t v21 = [v19 lineJoin];
  uint64_t v38 = a1;
  uint64_t v39 = a5;
  if (v21 == 2) {
    char v22 = 2;
  }
  else {
    char v22 = v21 == 1;
  }
  BOOL v23 = (unint64_t)([v19 lineCap] - 1) < 2;
  [v19 miterLimit];
  double v25 = v24;
  uint64_t v26 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v26 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v37) {
      operator new();
    }
  }
  uint64_t v27 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v26 + 91) + 16))(*((void *)v26 + 91), 136, 8);
  uint64_t v28 = v27;
  *(_OWORD *)(v27 + 49) = 0u;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_OWORD *)(v27 + 24) = 0u;
  *(_OWORD *)(v27 + 8) = 0u;
  float v29 = v25;
  *(void *)uint64_t v27 = &unk_1EF540150;
  *(double *)(v27 + 104) = a9;
  *(double *)(v27 + 112) = a10;
  *(unsigned char *)(v27 + 120) = v23;
  *(unsigned char *)(v27 + 121) = v22;
  *(float *)(v27 + 124) = v29;
  *(_DWORD *)(v27 + 128) = 1043511491;
  unint64_t v44 = (void (***)(void))v27;
  if (v20 == 1) {
    char v30 = 0;
  }
  else {
    char v30 = a7;
  }
  *(unsigned char *)(v27 + 96) = v30;
  if (v20 == 1) {
    char v31 = 0;
  }
  else {
    char v31 = a8;
  }
  *(unsigned char *)(v27 + 97) = v31;
  *(void *)(v27 + 80) = a6;
  *(void *)(v27 + 88) = a4;
  *(void *)(v27 + 72) = v39;
  long long v42 = 0uLL;
  BOOL v43 = 0;
  unsigned int v41 = a2;
  [v19 style];
  long long v42 = v40;
  BOOL v43 = a6 != 0;
  size_t v32 = std::__hash_table<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<md::PolylineOverlayBatchKey>,std::equal_to<md::PolylineOverlayBatchKey>,true>,std::__unordered_map_equal<md::PolylineOverlayBatchKey,std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<md::PolylineOverlayBatchKey>,std::hash<md::PolylineOverlayBatchKey>,true>,std::allocator<std::__hash_value_type<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::PolylineOverlayBatchKey,std::piecewise_construct_t const&,std::tuple<md::PolylineOverlayBatchKey const&>,std::tuple<>>(v38, a2, a6 != 0, (uint64_t)&v41);
  uint64_t v33 = v32;
  size_t v34 = (uint64_t *)v32[7];
  if ((unint64_t)v34 >= v32[8])
  {
    uint64_t v35 = std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>>((uint64_t)(v32 + 6), (uint64_t *)&v44);
  }
  else
  {
    if (v34)
    {
      unint64_t v44 = 0;
      *size_t v34 = v28;
    }
    uint64_t v35 = v34 + 1;
  }
  v33[7] = v35;
  if (*((void *)&v40 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)())(**((void **)&v40 + 1) + 16))();
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v40 + 1));
  }
  unint64_t v36 = v44;
  unint64_t v44 = 0;
  if (v36)
  {
    (**v36)(v36);
    {
      operator new();
    }
    (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v36, 136);
  }
}

void sub_1A24A3390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  md::components::Material::~Material((md::components::Material *)va);
  std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>::~unique_ptr[abi:nn180100]((void (****)(void))va1);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__70(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__71(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZN28PolylineOverlayRibbonBuilder11buildRibbonERKN3geo8QuadTileEP28VKVectorOverlayPolylineGroupRN3ggl6LoaderERNSt3__14listIN2md15OverlayTileData19OverlayTileResourceENS9_9allocatorISD_EEEEjRKNS9_10shared_ptrINS6_17ConstantDataTypedINS6_4Tile4ViewEEEEERKNSI_INSJ_INSK_9TransformEEEEE_block_invoke()
{
}

void sub_1A24A3590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  MEMORY[0x1A6239270](v9, 0x10A1C4043A4375DLL);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__73(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZN28PolylineOverlayRibbonBuilder11buildRibbonERKN3geo8QuadTileEP28VKVectorOverlayPolylineGroupRN3ggl6LoaderERNSt3__14listIN2md15OverlayTileData19OverlayTileResourceENS9_9allocatorISD_EEEEjRKNS9_10shared_ptrINS6_17ConstantDataTypedINS6_4Tile4ViewEEEEERKNSI_INSJ_INSK_9TransformEEEEE_block_invoke_75()
{
}

void sub_1A24A3784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  MEMORY[0x1A6239270](v9, 0x10A1C4043A4375DLL);
  _Unwind_Resume(a1);
}

double __copy_helper_block_ea8_64c38_ZTSNSt3__18optionalIN3geo8QuadTileEEE(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    double result = *(double *)(a2 + 68);
    *(double *)(a1 + 68) = result;
    *(unsigned char *)(a1 + 88) = 1;
  }
  return result;
}

void PolylineOverlayRibbonBuilder::finalizePolylineBatch(char *a1, char *a2, char **a3, void *a4, uint64_t a5, char **a6, char a7, char a8, double a9, double a10)
{
  unint64_t v11 = a4;
  uint64_t v12 = a3;
  uint64_t v15 = (char *)*a4;
  unint64_t v16 = a4[1];
  uint64_t v17 = v16 - *a4;
  uint64_t v18 = v17 >> 3;
  uint64_t v19 = a2 - a1;
  uint64_t v203 = v17 >> 3;
  if (a2 - a1 < 1) {
    goto LABEL_82;
  }
  uint64_t v20 = a1;
  uint64_t v21 = v19 >> 3;
  char v22 = &v15[v17 & 0xFFFFFFFFFFFFFFF8];
  uint64_t v23 = v11[2];
  if (v19 >> 3 <= (uint64_t)(v23 - v16) >> 3)
  {
    uint64_t v32 = v16 - (void)v22;
    uint64_t v33 = (uint64_t)(v16 - (void)v22) >> 3;
    if (v33 >= v21)
    {
      size_t v34 = &a1[8 * v21];
      int v37 = (void *)v16;
      goto LABEL_54;
    }
    size_t v34 = &a1[8 * v33];
    if (v34 == a2)
    {
      int v37 = (void *)v16;
      goto LABEL_53;
    }
    unint64_t v35 = a2 - &a1[v32] - 8;
    if (v35 < 0x38)
    {
      unint64_t v36 = &a1[8 * v33];
      int v37 = (void *)v16;
    }
    else
    {
      unint64_t v36 = &a1[8 * v33];
      int v37 = (void *)v16;
      if ((unint64_t)(v22 - a1) >= 0x20)
      {
        uint64_t v38 = (v35 >> 3) + 1;
        uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v36 = &v34[v39];
        long long v40 = (_OWORD *)(v16 + 16);
        unsigned int v41 = &a1[8 * v33 + 16];
        uint64_t v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v43 = *(_OWORD *)v41;
          *(v40 - 1) = *((_OWORD *)v41 - 1);
          *long long v40 = v43;
          v40 += 2;
          v41 += 32;
          v42 -= 4;
        }
        while (v42);
        int v37 = (void *)(v16 + v39);
        if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_53:
          v11[1] = v37;
          if (v32 < 1) {
            goto LABEL_82;
          }
LABEL_54:
          long long v80 = &v22[8 * v21];
          uint64_t v81 = (char *)v37 - v80;
          uint64_t v82 = (char *)&v37[-v21];
          unint64_t v83 = v37;
          if ((unint64_t)v82 < v16)
          {
            unint64_t v84 = (v17 & 0xFFFFFFFFFFFFFFF8) + v81;
            unint64_t v85 = (unint64_t)&v15[v84 + 8];
            if (v16 > v85) {
              unint64_t v85 = v16;
            }
            unint64_t v86 = v85 + ~(unint64_t)v15 - v84;
            unint64_t v87 = (char *)v37 - &v15[v84];
            BOOL v88 = v86 >= 0x58 && v87 > 0x1F;
            double v89 = &v37[-v21];
            unint64_t v83 = v37;
            if (!v88) {
              goto LABEL_162;
            }
            uint64_t v90 = (v86 >> 3) + 1;
            uint64_t v91 = v90 & 0x3FFFFFFFFFFFFFFCLL;
            double v89 = (uint64_t *)&v82[v91 * 8];
            double v92 = v37 + 2;
            double v93 = (long long *)&v15[8 * (v81 >> 3) + 16 + 8 * v18];
            uint64_t v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v95 = *v93;
              *(v92 - 1) = *(v93 - 1);
              *double v92 = v95;
              v92 += 2;
              v93 += 2;
              v94 -= 4;
            }
            while (v94);
            unint64_t v83 = &v37[v91];
            if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_162:
              do
              {
                uint64_t v96 = *v89++;
                *v83++ = v96;
              }
              while ((unint64_t)v89 < v16);
            }
          }
          v11[1] = v83;
          if (v37 != (void *)v80)
          {
            if ((unint64_t)(v81 - 8) < 0x78
              || (char *)v37 - (v81 & 0xFFFFFFFFFFFFFFF8) < v82
              && &v15[v81 + (v17 & 0xFFFFFFFFFFFFFFF8) - (v81 & 0xFFFFFFFFFFFFFFF8)] < (char *)v37)
            {
              double v97 = v37;
              goto LABEL_71;
            }
            unint64_t v192 = ((unint64_t)(v81 - 8) >> 3) + 1;
            double v97 = &v37[-(v192 & 0x3FFFFFFFFFFFFFFCLL)];
            unint64_t v193 = (const float *)(v82 - 32);
            unint64_t v194 = (float *)(v37 - 4);
            uint64_t v195 = v192 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              float32x4x2_t v204 = vld2q_f32(v193);
              v193 -= 8;
              vst2q_f32(v194, v204);
              v194 -= 8;
              v195 -= 4;
            }
            while (v195);
            if (v192 != (v192 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v82 -= 8 * (v192 & 0x3FFFFFFFFFFFFFFCLL);
LABEL_71:
              BOOL v98 = (_DWORD *)v97 - 1;
              do
              {
                int v99 = *((_DWORD *)v82 - 2);
                v82 -= 8;
                *(v98 - 1) = v99;
                *BOOL v98 = *((_DWORD *)v82 + 1);
                v98 -= 2;
              }
              while (v82 != v22);
            }
          }
          if (v34 == v20) {
            goto LABEL_82;
          }
          unint64_t v100 = v34 - v20 - 8;
          if (v100 >= 0x78
            && (v22 >= &v20[(v100 & 0xFFFFFFFFFFFFFFF8) + 8]
             || &v15[(v17 & 0xFFFFFFFFFFFFFFF8) + 8 + (v100 & 0xFFFFFFFFFFFFFFF8)] <= v20))
          {
            uint64_t v101 = (v100 >> 3) + 1;
            uint64_t v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFF8);
            v22 += v102;
            uint64_t v103 = (long long *)(v20 + 32);
            id v104 = &v15[8 * v18 + 32];
            uint64_t v105 = v101 & 0x3FFFFFFFFFFFFFF8;
            do
            {
              long long v107 = *(v103 - 2);
              long long v106 = *(v103 - 1);
              long long v109 = *v103;
              long long v108 = v103[1];
              v103 += 4;
              *((_OWORD *)v104 - 2) = v107;
              *((_OWORD *)v104 - 1) = v106;
              *(_OWORD *)id v104 = v109;
              *((_OWORD *)v104 + 1) = v108;
              v104 += 64;
              v105 -= 8;
            }
            while (v105);
            if (v101 == (v101 & 0x3FFFFFFFFFFFFFF8)) {
              goto LABEL_82;
            }
            v20 += v102;
          }
          do
          {
            *(_DWORD *)char v22 = *(_DWORD *)v20;
            *((_DWORD *)v22 + 1) = *((_DWORD *)v20 + 1);
            v20 += 8;
            v22 += 8;
          }
          while (v20 != v34);
          goto LABEL_82;
        }
      }
    }
    do
    {
      uint64_t v79 = *(void *)v36;
      v36 += 8;
      *v37++ = v79;
    }
    while (v36 != a2);
    goto LABEL_53;
  }
  unint64_t v24 = v18 + v21;
  if ((unint64_t)(v18 + v21) >> 61) {
    goto LABEL_158;
  }
  uint64_t v25 = v23 - (void)v15;
  if (v25 >> 2 > v24) {
    unint64_t v24 = v25 >> 2;
  }
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v26 = v24;
  }
  if (v26)
  {
    double v197 = v11;
    if (v26 >> 61) {
      goto LABEL_159;
    }
    uint64_t v27 = v15;
    float v29 = a6;
    uint64_t v30 = a5;
    char v31 = operator new(8 * v26);
    uint64_t v18 = v17 >> 3;
    a5 = v30;
    a6 = v29;
    uint64_t v12 = a3;
    uint64_t v15 = v27;
    unint64_t v11 = v197;
    uint64_t v21 = v19 >> 3;
  }
  else
  {
    char v31 = 0;
  }
  unint64_t v44 = &v31[8 * v18];
  uint64_t v45 = &v44[8 * v21];
  unint64_t v46 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v46 >= 7)
  {
    if ((unint64_t)(&v31[v17 & 0xFFFFFFFFFFFFFFF8] - v20) >= 0x20)
    {
      double v48 = v15;
      unint64_t v49 = v46 + 1;
      uint64_t v50 = (v46 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      double v47 = &v44[8 * v50];
      uint64_t v51 = (long long *)(v20 + 16);
      uint64_t v52 = &v31[8 * v18 + 16];
      uint64_t v53 = v50;
      do
      {
        long long v54 = *v51;
        *(v52 - 1) = *(v51 - 1);
        *uint64_t v52 = v54;
        v51 += 2;
        v52 += 2;
        v53 -= 4;
      }
      while (v53);
      if (v49 == v50) {
        goto LABEL_32;
      }
      v20 += 8 * v50;
    }
    else
    {
      double v47 = &v31[8 * v18];
    }
  }
  else
  {
    double v47 = &v31[8 * v18];
  }
  do
  {
    uint64_t v55 = *(void *)v20;
    v20 += 8;
    *(void *)double v47 = v55;
    v47 += 8;
  }
  while (v47 != v45);
  double v48 = (char *)*v11;
LABEL_32:
  if (v48 != v22)
  {
    unint64_t v56 = &v15[v17 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v57 = v56 - v48 - 8;
    if (v57 < 0x68)
    {
      uint64_t v58 = v22;
      goto LABEL_39;
    }
    uint64_t v58 = v22;
    if ((unint64_t)(v56 - &v31[v17 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
      goto LABEL_163;
    }
    uint64_t v59 = (v57 >> 3) + 1;
    uint64_t v58 = &v22[-8 * (v59 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v60 = 8 * v18 - 16;
    uint64_t v61 = (long long *)&v15[v60];
    float32x2_t v62 = &v31[v60];
    uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v64 = *v61;
      *(v62 - 1) = *(v61 - 1);
      *float32x2_t v62 = v64;
      v61 -= 2;
      v62 -= 2;
      v63 -= 4;
    }
    while (v63);
    v44 -= 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
    if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_163:
      do
      {
LABEL_39:
        uint64_t v65 = *((void *)v58 - 1);
        v58 -= 8;
        *((void *)v44 - 1) = v65;
        v44 -= 8;
      }
      while (v58 != v48);
      unint64_t v16 = v11[1];
    }
  }
  uint64_t v66 = &v31[8 * v26];
  if ((char *)v16 != v22)
  {
    uint64_t v67 = &v15[v17 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v68 = v16 - (void)v67 - 8;
    if (v68 < 0x68) {
      goto LABEL_164;
    }
    if ((unint64_t)(&v31[(v17 & 0xFFFFFFFFFFFFFFF8) + v19] - v67) < 0x20) {
      goto LABEL_164;
    }
    uint64_t v69 = (v68 >> 3) + 1;
    uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
    v22 += v70;
    uint64_t v71 = &v31[8 * v18 + 16 + 8 * v21];
    uint64_t v72 = (long long *)&v15[8 * v18 + 16];
    uint64_t v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v74 = *v72;
      *(v71 - 1) = *(v72 - 1);
      *uint64_t v71 = v74;
      v71 += 2;
      v72 += 2;
      v73 -= 4;
    }
    while (v73);
    v45 += v70;
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_164:
      do
      {
        uint64_t v75 = *(void *)v22;
        v22 += 8;
        *(void *)uint64_t v45 = v75;
        v45 += 8;
      }
      while (v22 != (char *)v16);
    }
  }
  int8x8_t v76 = (void *)*v11;
  void *v11 = v44;
  v11[1] = v45;
  v11[2] = v66;
  if (v76)
  {
    unint64_t v77 = a6;
    uint64_t v78 = a5;
    operator delete(v76);
    a5 = v78;
    a6 = v77;
    uint64_t v18 = v17 >> 3;
  }
LABEL_82:
  if (!a5) {
    goto LABEL_138;
  }
  int v111 = *v12;
  float64x2_t v110 = v12[1];
  uint64_t v112 = v110 - *v12;
  if (v112 < 1) {
    goto LABEL_138;
  }
  uint64_t v113 = v112 >> 2;
  unint64_t v115 = *(void *)a5;
  double v114 = *(char **)(a5 + 8);
  uint64_t v116 = (uint64_t)&v114[-*(void *)a5];
  uint64_t v117 = v116 >> 2;
  double v118 = (char *)(*(void *)a5 + (v116 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v119 = *(void *)(a5 + 16);
  if (v113 > (v119 - (uint64_t)v114) >> 2)
  {
    unint64_t v120 = v117 + v113;
    if ((unint64_t)(v117 + v113) >> 62) {
      goto LABEL_158;
    }
    uint64_t v121 = v119 - v115;
    if (v121 >> 1 > v120) {
      unint64_t v120 = v121 >> 1;
    }
    BOOL v122 = (unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v122) {
      unint64_t v123 = v120;
    }
    unint64_t v199 = v123;
    if (v123)
    {
      if (v123 >> 62) {
        goto LABEL_159;
      }
      unint64_t v124 = *(void *)a5 + (v116 & 0xFFFFFFFFFFFFFFFCLL);
      uint64_t v125 = a6;
      uint64_t v126 = a5;
      unint64_t v127 = operator new(4 * v123);
      a5 = v126;
      a6 = v125;
      double v118 = (char *)v124;
      uint64_t v117 = v116 >> 2;
    }
    else
    {
      unint64_t v127 = 0;
    }
    v153 = &v127[4 * v117];
    unsigned int v154 = &v153[4 * v113];
    unint64_t v155 = (v113 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v155 >= 7)
    {
      int v156 = &v127[4 * v117];
      if ((unint64_t)(&v127[v116 & 0xFFFFFFFFFFFFFFFCLL] - v111) >= 0x20)
      {
        unint64_t v157 = v155 + 1;
        uint64_t v158 = 4 * (v157 & 0x7FFFFFFFFFFFFFF8);
        int v156 = &v153[v158];
        int v159 = (long long *)(v111 + 16);
        double v160 = &v127[4 * v117 + 16];
        uint64_t v161 = v157 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v162 = *v159;
          *(v160 - 1) = *(v159 - 1);
          _OWORD *v160 = v162;
          v159 += 2;
          v160 += 2;
          v161 -= 8;
        }
        while (v161);
        if (v157 == (v157 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_124:
          if ((char *)v115 == v114)
          {
            v164 = a6;
            goto LABEL_133;
          }
          v164 = a6;
          if ((unint64_t)(v116 - 4) >= 0x3C)
          {
            double v165 = v118;
            if ((v116 & 0xFFFFFFFFFFFFFFFCLL) + v115 - (unint64_t)&v127[v116 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
            {
              unint64_t v166 = ((unint64_t)(v116 - 4) >> 2) + 1;
              double v165 = &v118[-4 * (v166 & 0x7FFFFFFFFFFFFFF8)];
              uint64_t v167 = 4 * v117 - 16;
              double v168 = (long long *)(v115 + v167);
              double v169 = &v127[v167];
              uint64_t v170 = v166 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v171 = *v168;
                *(v169 - 1) = *(v168 - 1);
                *double v169 = v171;
                v168 -= 2;
                v169 -= 2;
                v170 -= 8;
              }
              while (v170);
              v153 -= 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
              if (v166 == (v166 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_133:
                double v173 = &v127[4 * v199];
                size_t v174 = v114 - v118;
                if (v174)
                {
                  uint64_t v175 = a5;
                  memmove(v154, v118, v174);
                  a5 = v175;
                }
                *(void *)a5 = v153;
                *(void *)(a5 + 8) = &v154[v174];
                *(void *)(a5 + 16) = v173;
                uint64_t v18 = v203;
                a6 = v164;
                if (v115)
                {
                  operator delete((void *)v115);
                  goto LABEL_137;
                }
                goto LABEL_138;
              }
            }
          }
          else
          {
            double v165 = v118;
          }
          do
          {
            int v172 = *((_DWORD *)v165 - 1);
            v165 -= 4;
            *((_DWORD *)v153 - 1) = v172;
            v153 -= 4;
          }
          while (v165 != (char *)v115);
          goto LABEL_133;
        }
        v111 += v158;
      }
    }
    else
    {
      int v156 = &v127[4 * v117];
    }
    do
    {
      int v163 = *(_DWORD *)v111;
      v111 += 4;
      *(_DWORD *)int v156 = v163;
      v156 += 4;
    }
    while (v156 != v154);
    goto LABEL_124;
  }
  uint64_t v128 = v114 - v118;
  uint64_t v129 = (v114 - v118) >> 2;
  if (v129 >= v113)
  {
    int8x16_t v130 = &v111[4 * v113];
    uint64_t v133 = *(char **)(a5 + 8);
  }
  else
  {
    int8x16_t v130 = &v111[4 * v129];
    int64_t v131 = v110 - v130;
    if (v110 != v130)
    {
      double v198 = a6;
      unint64_t v200 = *(void *)a5 + (v116 & 0xFFFFFFFFFFFFFFFCLL);
      uint64_t v132 = a5;
      double v196 = &v111[4 * v129];
      memmove(*(void **)(a5 + 8), v196, v110 - v130);
      uint64_t v117 = v116 >> 2;
      double v118 = (char *)v200;
      a5 = v132;
      int8x16_t v130 = v196;
      a6 = v198;
      uint64_t v18 = v203;
    }
    uint64_t v133 = &v114[v131];
    *(void *)(a5 + 8) = &v114[v131];
    if (v128 < 1) {
      goto LABEL_138;
    }
  }
  float64x2_t v134 = &v118[4 * v113];
  size_t v135 = v133 - v134;
  uint64_t v136 = (v133 - v134) >> 2;
  uint64_t v137 = &v133[-4 * v113];
  int64x2_t v138 = v133;
  if (v137 < v114)
  {
    unint64_t v139 = (v116 & 0xFFFFFFFFFFFFFFFCLL) + v135;
    int64x2_t v140 = (char *)(v139 + v115);
    unint64_t v141 = v139 + v115 + 4;
    if ((unint64_t)v114 > v141) {
      unint64_t v141 = (unint64_t)v114;
    }
    unint64_t v142 = v141 + ~v115 - v139;
    unint64_t v143 = v133 - v140;
    BOOL v144 = v142 >= 0x2C && v143 > 0x1F;
    int64x2_t v138 = v133;
    if (!v144) {
      goto LABEL_165;
    }
    uint64_t v145 = (v142 >> 2) + 1;
    uint64_t v146 = 4 * (v145 & 0x7FFFFFFFFFFFFFF8);
    v137 += v146;
    float64x2_t v147 = v133 + 16;
    float64x2_t v148 = (long long *)(4 * v136 + 4 * v117 + v115 + 16);
    uint64_t v149 = v145 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v150 = *v148;
      *(v147 - 1) = *(v148 - 1);
      *float64x2_t v147 = v150;
      v147 += 2;
      v148 += 2;
      v149 -= 8;
    }
    while (v149);
    int64x2_t v138 = &v133[v146];
    if (v145 != (v145 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_165:
      do
      {
        int v151 = *(_DWORD *)v137;
        v137 += 4;
        *(_DWORD *)int64x2_t v138 = v151;
        v138 += 4;
      }
      while (v137 < v114);
    }
  }
  *(void *)(a5 + 8) = v138;
  if (v133 != v134)
  {
    double v152 = v118;
    memmove(&v133[-4 * v136], v118, v135);
    double v118 = v152;
  }
  uint64_t v18 = v203;
  if (v130 != v111)
  {
    memmove(v118, v111, v130 - v111);
LABEL_137:
    uint64_t v18 = v203;
  }
LABEL_138:
  uint64_t v176 = ((uint64_t)(v11[1] - *v11) >> 3) - v18;
  int v178 = a6[1];
  unint64_t v177 = (unint64_t)a6[2];
  if ((unint64_t)v178 < v177)
  {
    *(void *)int v178 = v18;
    *((void *)v178 + 1) = v176;
    v178[16] = a7;
    v178[17] = a8;
    *((double *)v178 + 3) = a9;
    *((double *)v178 + 4) = a10;
    double v179 = v178 + 48;
    *((_DWORD *)v178 + 10) = 0;
    goto LABEL_153;
  }
  double v180 = *a6;
  unint64_t v181 = 0xAAAAAAAAAAAAAAABLL * ((v178 - *a6) >> 4);
  unint64_t v182 = v181 + 1;
  if (v181 + 1 > 0x555555555555555) {
LABEL_158:
  }
    abort();
  unint64_t v183 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177 - (void)v180) >> 4);
  if (2 * v183 > v182) {
    unint64_t v182 = 2 * v183;
  }
  if (v183 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v184 = 0x555555555555555;
  }
  else {
    unint64_t v184 = v182;
  }
  if (v184 > 0x555555555555555) {
LABEL_159:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v185 = 48 * v184;
  uint64_t v186 = (char *)operator new(48 * v184);
  double v187 = &v186[48 * v181];
  *(void *)double v187 = v203;
  *((void *)v187 + 1) = v176;
  double v188 = &v186[v185];
  v187[16] = a7;
  v187[17] = a8;
  *((double *)v187 + 3) = a9;
  *((double *)v187 + 4) = a10;
  *((_DWORD *)v187 + 10) = 0;
  double v179 = v187 + 48;
  if (v178 == v180)
  {
    double v191 = &v186[48 * v181];
  }
  else
  {
    do
    {
      long long v189 = *((_OWORD *)v178 - 3);
      long long v190 = *((_OWORD *)v178 - 2);
      double v191 = v187 - 48;
      *(_OWORD *)(v187 - 20) = *(_OWORD *)(v178 - 20);
      *((_OWORD *)v187 - 3) = v189;
      *((_OWORD *)v187 - 2) = v190;
      v178 -= 48;
      v187 -= 48;
    }
    while (v178 != v180);
  }
  *a6 = v191;
  a6[1] = v179;
  a6[2] = v188;
  if (v180) {
    operator delete(v180);
  }
LABEL_153:
  a6[1] = v179;
}

uint64_t std::__function::__func<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0,std::allocator<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  ggl::Texture2D::vendImplicitLoadItem((ggl::Texture2D *)v4, **(void **)(a1 + 8));
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 24))(v2, v4);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_1A24A4370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19 == v19 + 48)
  {
    (*(void (**)(uint64_t))(a16 + 32))(v19 + 48);
    _Unwind_Resume(exception_object);
  }
  if (a19) {
    (*(void (**)(void))(*(void *)a19 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0,std::allocator<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56CCF0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0,std::allocator<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56CCF0;
  result[1] = v3;
  return result;
}

void std::__function::__func<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0,std::allocator<generateTexture(std::shared_ptr<ggl::TextureData2D> const&,VKSharedResources const*)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

uint64_t md::OverlayLayerDataSource::fallbackSettings(md::OverlayLayerDataSource *this)
{
  return 65537;
}

void md::OverlayLayerDataSource::constructRequests(uint64_t a1, void **a2, void **a3)
{
  double v89 = a3;
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1;
LABEL_5:
    uint64_t v5 = (int32x2_t *)(*v3)[2];
    __int32 v6 = v5[1].i32[0];
    v112[0] = v5[1].i32[1];
    v112[1] = v6;
    int32x2_t v113 = vrev64_s32(*v5);
    int v7 = *(unsigned __int16 *)(v4 + 32);
    BOOL v8 = v7 == 71 || v7 == 11;
    uint64_t v9 = *(void *)(v4 + 632);
    if (v8)
    {
      std::mutex::lock((std::mutex *)(v9 + 232));
      uint64_t v117 = 0;
      double v118 = 0;
      uint64_t v119 = 0;
      std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v117, *(void *)(v9 + 160), *(void *)(v9 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9 + 168) - *(void *)(v9 + 160)) >> 3));
    }
    else
    {
      std::mutex::lock((std::mutex *)(v9 + 232));
      uint64_t v117 = 0;
      double v118 = 0;
      uint64_t v119 = 0;
      std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&v117, *(void *)(v9 + 184), *(void *)(v9 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9 + 192) - *(void *)(v9 + 184)) >> 3));
    }
    std::mutex::unlock((std::mutex *)(v9 + 232));
    uint64_t v10 = v117;
    uint64_t v94 = v118;
    if (v117 == v118) {
      goto LABEL_127;
    }
    unsigned int v93 = *(unsigned __int16 *)(v4 + 32) - 71;
    uint64_t v91 = v3;
    while (1)
    {
      id v11 = v10[1];
      int v96 = [v11 areResourcesRequired];

      if (((v93 < 2) ^ v96)) {
        goto LABEL_16;
      }
      double v114 = 0;
      unint64_t v115 = 0;
      unint64_t v116 = 0;
      id v12 = v10[1];
      uint64_t v13 = [v12 customTileProvider];

      long long v109 = v13;
      long long v95 = v10;
      if (v13)
      {
        uint64_t v14 = *v3;
        if (*((unsigned char *)*v3 + 96)) {
          int v15 = *((_DWORD *)v14 + 25);
        }
        else {
          int v15 = 2147483646;
        }
        int v103 = v15;
        uint64_t v101 = *((void *)v14 + 14);
        id v17 = v13;
        unsigned int v105 = [v17 tileSize];
        uint64_t v18 = [v17 minimumZ];
        id v107 = v17;
        unsigned int v19 = [v17 maximumZ];
        uint64_t v126 = 0;
        uint64_t v127 = 0;
        uint64_t v128 = 0;
        md::TileAdjustmentHelpers::adjustTileForSize(0x200u, v105, (uint64_t)v112, &v126);
        uint64_t v21 = v126;
        uint64_t v20 = v127;
        if (v126 != v127)
        {
          unint64_t v16 = 0;
          char v22 = v17;
          uint64_t v99 = v127;
          while (1)
          {
            unsigned int v23 = *(unsigned __int8 *)(v21 + 1);
            if (v18 <= v23 && v19 >= v23) {
              break;
            }
LABEL_26:
            v21 += 24;
            if (v21 == v20)
            {
              uint64_t v21 = v126;
              if (v126) {
                goto LABEL_62;
              }
              goto LABEL_63;
            }
          }
          uint64_t v25 = v18;
          uint64_t v110 = *(void *)(v21 + 4);
          unsigned int v26 = [v22 providerID];
          LOBYTE(v120) = 0;
          WORD1(v120) = 41;
          HIDWORD(v120) = v103;
          *(void *)&long long v121 = v123;
          *((void *)&v121 + 1) = v123;
          *(void *)&long long v122 = v123;
          *((void *)&v122 + 1) = 32;
          unint64_t v124 = 0;
          unsigned int v129 = HIDWORD(v110);
          geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, v123, (char *)&v129, v130);
          unsigned int v129 = v110;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
          unsigned int v129 = v23;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
          unsigned int v129 = v26;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
          unsigned int v129 = v105;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
          uint64_t v27 = (unsigned __int8 *)v121;
          unint64_t v28 = *((void *)&v121 + 1) - v121;
          if (*((void *)&v121 + 1) == (void)v121)
          {
            unint64_t v29 = 0;
            uint64_t v18 = v25;
          }
          else
          {
            unint64_t v29 = 0;
            if (v28 <= 1) {
              unint64_t v28 = 1;
            }
            uint64_t v18 = v25;
            do
            {
              unsigned int v30 = *v27++;
              v29 ^= (v29 << 6) - 0x61C8864680B583EBLL + (v29 >> 2) + v30;
              --v28;
            }
            while (v28);
          }
          unint64_t v124 = v29;
          *((void *)&v125 + 1) = v101;
          if ((unint64_t)v16 < v116)
          {
            char v31 = v16 + 5;
            *unint64_t v16 = v120;
            v16[1] = v16 + 5;
            v16[2] = v16 + 5;
            v16[3] = v16 + 5;
            uint64_t v32 = v122;
            v16[4] = *((void *)&v122 + 1);
            uint64_t v33 = (char *)v121;
            if ((void)v121 != v32)
            {
              *(_OWORD *)(v16 + 1) = v121;
              long long v121 = 0u;
              long long v122 = 0u;
              goto LABEL_58;
            }
            v16[2] = &v31[*((void *)&v121 + 1) - v121];
            size_t v34 = (char *)*((void *)&v121 + 1);
            if (v33 == *((char **)&v121 + 1)) {
              goto LABEL_58;
            }
            unint64_t v35 = *((void *)&v121 + 1) - (void)v33;
            if (*((void *)&v121 + 1) - (void)v33 >= 8uLL && (unint64_t)((char *)v16 - v33 + 40) >= 0x20)
            {
              if (v35 < 0x20)
              {
                uint64_t v36 = 0;
LABEL_52:
                unint64_t v41 = v35 & 0xFFFFFFFFFFFFFFF8;
                v31 += v35 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v42 = v36 - (v35 & 0xFFFFFFFFFFFFFFF8);
                long long v43 = (uint64_t *)&v33[v36];
                unint64_t v44 = (void *)((char *)v16 + v36 + 40);
                do
                {
                  uint64_t v45 = *v43++;
                  *v44++ = v45;
                  v42 += 8;
                }
                while (v42);
                if (v35 != v41)
                {
                  v33 += v41;
                  goto LABEL_57;
                }
LABEL_58:
                v16[9] = v124;
                *((_OWORD *)v16 + 5) = v125;
                v16 += 12;
LABEL_59:
                unint64_t v115 = v16;
                if ((void)v121 != (void)v122) {
                  free((void *)v121);
                }
                char v22 = v107;
                uint64_t v20 = v99;
                goto LABEL_26;
              }
              uint64_t v36 = v35 & 0xFFFFFFFFFFFFFFE0;
              int v37 = (long long *)(v33 + 16);
              uint64_t v38 = v16 + 7;
              unint64_t v39 = v35 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v40 = *v37;
                *(v38 - 1) = *(v37 - 1);
                *uint64_t v38 = v40;
                v37 += 2;
                v38 += 2;
                v39 -= 32;
              }
              while (v39);
              if (v35 == v36) {
                goto LABEL_58;
              }
              if ((v35 & 0x18) != 0) {
                goto LABEL_52;
              }
              v33 += v36;
              v31 += v36;
            }
            do
            {
LABEL_57:
              char v46 = *v33++;
              *v31++ = v46;
            }
            while (v33 != v34);
            goto LABEL_58;
          }
          unint64_t v16 = std::vector<gdc::ResourceKey>::__emplace_back_slow_path<gdc::ResourceKey>(&v114, (uint64_t)&v120);
          goto LABEL_59;
        }
        unint64_t v16 = 0;
        char v22 = v17;
        if (v126)
        {
LABEL_62:
          operator delete((void *)v21);
          char v22 = v107;
        }
LABEL_63:

        uint64_t v4 = a1;
        uint64_t v3 = v91;
      }
      else
      {
        unint64_t v16 = 0;
      }
      id v47 = v95[1];
      double v48 = [v47 rasterTileProvider];

      double v92 = v48;
      if (v48)
      {
        unint64_t v49 = *v3;
        if (*((unsigned char *)*v3 + 96)) {
          int v50 = *((_DWORD *)v49 + 25);
        }
        else {
          int v50 = 2147483646;
        }
        int v106 = v50;
        uint64_t v104 = v49[14];
        id v51 = v48;
        unsigned int v108 = [v51 tileSize];
        unsigned int v52 = [v51 minimumZ];
        unsigned int v100 = [v51 maximumZ];
        uint64_t v53 = [v51 colorMap];
        uint64_t v126 = 0;
        uint64_t v127 = 0;
        uint64_t v128 = 0;
        md::TileAdjustmentHelpers::adjustTileForSize(0x200u, v108, (uint64_t)v112, &v126);
        uint64_t v54 = v126;
        uint64_t v98 = v127;
        if (v126 != v127)
        {
          BOOL v102 = v53 != 0;
          unsigned int v97 = v52;
          while (1)
          {
            unsigned int v55 = *(unsigned __int8 *)(v54 + 1);
            if (v52 <= v55 && v100 >= v55) {
              break;
            }
LABEL_73:
            v54 += 24;
            if (v54 == v98)
            {
              uint64_t v54 = v126;
              goto LABEL_111;
            }
          }
          unsigned int v57 = 0;
          while (2)
          {
            if (v57 >= objc_msgSend(v51, "keyframesCount", v89))
            {
              unsigned int v52 = v97;
              goto LABEL_73;
            }
            uint64_t v111 = *(void *)(v54 + 4);
            unsigned int v58 = *(unsigned __int8 *)(v54 + 1);
            unsigned int v59 = [v51 providerID];
            LOBYTE(v120) = 0;
            WORD1(v120) = 35;
            HIDWORD(v120) = v106;
            *(void *)&long long v121 = v123;
            *((void *)&v121 + 1) = v123;
            *(void *)&long long v122 = v123;
            *((void *)&v122 + 1) = 32;
            unint64_t v124 = 0;
            unsigned int v129 = HIDWORD(v111);
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, v123, (char *)&v129, v130);
            unsigned int v129 = v111;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            unsigned int v129 = v58;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            unsigned int v129 = v59;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            unsigned int v129 = v108;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            unsigned int v129 = v57;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            unsigned int v129 = v102;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v121, *((char **)&v121 + 1), (char *)&v129, v130);
            uint64_t v60 = (unsigned __int8 *)v121;
            unint64_t v61 = *((void *)&v121 + 1) - v121;
            if (*((void *)&v121 + 1) == (void)v121)
            {
              unint64_t v62 = 0;
            }
            else
            {
              unint64_t v62 = 0;
              if (v61 <= 1) {
                unint64_t v61 = 1;
              }
              do
              {
                unsigned int v63 = *v60++;
                v62 ^= (v62 << 6) - 0x61C8864680B583EBLL + (v62 >> 2) + v63;
                --v61;
              }
              while (v61);
            }
            unint64_t v124 = v62;
            *((void *)&v125 + 1) = v104;
            if ((unint64_t)v16 < v116)
            {
              long long v64 = v16 + 5;
              *unint64_t v16 = v120;
              v16[1] = v16 + 5;
              v16[2] = v16 + 5;
              v16[3] = v16 + 5;
              uint64_t v65 = v122;
              v16[4] = *((void *)&v122 + 1);
              uint64_t v66 = (char *)v121;
              if ((void)v121 != v65)
              {
                *(_OWORD *)(v16 + 1) = v121;
                long long v121 = 0u;
                long long v122 = 0u;
                goto LABEL_107;
              }
              v16[2] = &v64[*((void *)&v121 + 1) - v121];
              uint64_t v67 = (char *)*((void *)&v121 + 1);
              if (v66 == *((char **)&v121 + 1)) {
                goto LABEL_107;
              }
              unint64_t v68 = *((void *)&v121 + 1) - (void)v66;
              if (*((void *)&v121 + 1) - (void)v66 >= 8uLL && (unint64_t)((char *)v16 - v66 + 40) >= 0x20)
              {
                if (v68 < 0x20)
                {
                  uint64_t v69 = 0;
LABEL_101:
                  unint64_t v74 = v68 & 0xFFFFFFFFFFFFFFF8;
                  v64 += v68 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v75 = v69 - (v68 & 0xFFFFFFFFFFFFFFF8);
                  int8x8_t v76 = (uint64_t *)&v66[v69];
                  unint64_t v77 = (void *)((char *)v16 + v69 + 40);
                  do
                  {
                    uint64_t v78 = *v76++;
                    *v77++ = v78;
                    v75 += 8;
                  }
                  while (v75);
                  if (v68 != v74)
                  {
                    v66 += v74;
                    goto LABEL_106;
                  }
LABEL_107:
                  v16[9] = v124;
                  *((_OWORD *)v16 + 5) = v125;
                  v16 += 12;
LABEL_108:
                  unint64_t v115 = v16;
                  if ((void)v121 != (void)v122) {
                    free((void *)v121);
                  }
                  ++v57;
                  continue;
                }
                uint64_t v69 = v68 & 0xFFFFFFFFFFFFFFE0;
                uint64_t v70 = (long long *)(v66 + 16);
                uint64_t v71 = v16 + 7;
                unint64_t v72 = v68 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v73 = *v70;
                  *(v71 - 1) = *(v70 - 1);
                  *uint64_t v71 = v73;
                  v70 += 2;
                  v71 += 2;
                  v72 -= 32;
                }
                while (v72);
                if (v68 == v69) {
                  goto LABEL_107;
                }
                if ((v68 & 0x18) != 0) {
                  goto LABEL_101;
                }
                v66 += v69;
                v64 += v69;
              }
              do
              {
LABEL_106:
                char v79 = *v66++;
                *v64++ = v79;
              }
              while (v66 != v67);
              goto LABEL_107;
            }
            break;
          }
          unint64_t v16 = std::vector<gdc::ResourceKey>::__emplace_back_slow_path<gdc::ResourceKey>(&v114, (uint64_t)&v120);
          goto LABEL_108;
        }
LABEL_111:
        if (v54) {
          operator delete((void *)v54);
        }

        uint64_t v4 = a1;
        uint64_t v3 = v91;
      }
      long long v80 = v114;
      if (v114 != v16) {
        break;
      }

      if (v80) {
        goto LABEL_14;
      }
LABEL_15:
      uint64_t v10 = v95;
LABEL_16:
      v10 += 3;
      if (v10 == v94)
      {
        uint64_t v10 = v117;
LABEL_127:
        if (v10)
        {
          unint64_t v84 = v10;
          if (v118 != v10)
          {
            unint64_t v85 = v118 - 3;
            unint64_t v86 = v118 - 3;
            unint64_t v87 = v118 - 3;
            do
            {
              BOOL v88 = (void (**)(id *))*v87;
              v87 -= 3;
              (*v88)(v86);
              v85 -= 3;
              BOOL v8 = v86 == v10;
              unint64_t v86 = v87;
            }
            while (!v8);
            unint64_t v84 = v117;
          }
          double v118 = v10;
          operator delete(v84);
        }
        v3 += 2;
        if (v3 == v89) {
          return;
        }
        goto LABEL_5;
      }
    }
    uint64_t v81 = (uint64_t)v114;
    if (v96)
    {
      uint64_t v82 = (uint64_t)v114;
      do
      {
        gdc::LayerDataRequest::request(*v3, v82, 0);
        v82 += 96;
      }
      while ((void *)v82 != v16);
    }
    else
    {
      do
      {
        gdc::LayerDataRequest::request(*v3, v81, *(unsigned char *)(v4 + 628) == 0);
        v81 += 96;
      }
      while ((void *)v81 != v16);
    }

    if (!v80) {
      goto LABEL_15;
    }
    for (; v16 != v80; v16 -= 12)
    {
      unint64_t v83 = (void *)*(v16 - 11);
      if (v83 != (void *)*(v16 - 9)) {
        free(v83);
      }
    }
LABEL_14:
    operator delete(v80);
    goto LABEL_15;
  }
}

void sub_1A24A4E9C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A24A4EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *__p,char *a31,uint64_t a32,char *a33,char *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39)
{
  long long v43 = *(void **)(v41 - 120);
  if (v43) {
    operator delete(v43);
  }

  if (__p)
  {
    while (a31 != __p)
    {
      char v46 = (void *)*((void *)a31 - 11);
      if (v46 != *((void **)a31 - 9)) {
        free(v46);
      }
      a31 -= 96;
    }
    operator delete(__p);
    unint64_t v44 = a33;
    if (!a33) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    unint64_t v44 = a33;
    if (!a33) {
      goto LABEL_5;
    }
  }
  if (a34 != v44)
  {
    id v47 = a34 - 24;
    double v48 = a34 - 24;
    unint64_t v49 = a34 - 24;
    do
    {
      int v50 = *(void (***)(char *))v49;
      v49 -= 24;
      (*v50)(v48);
      v47 -= 24;
      BOOL v51 = v48 == v44;
      double v48 = v49;
    }
    while (!v51);
    unint64_t v44 = a33;
  }
  operator delete(v44);
  _Unwind_Resume(a1);
}

void *std::vector<gdc::ResourceKey>::__emplace_back_slow_path<gdc::ResourceKey>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (uint64_t)v2 - *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 5) + 1;
  if (v4 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x155555555555555) {
    unint64_t v7 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    BOOL v8 = operator new(96 * v7);
  }
  else
  {
    BOOL v8 = 0;
  }
  uint64_t v9 = &v8[32 * (v3 >> 5)];
  *uint64_t v9 = *(void *)a2;
  uint64_t v10 = v9 + 5;
  v9[1] = v9 + 5;
  id v11 = *(char **)(a2 + 8);
  uint64_t v13 = *(char **)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  v9[3] = v9 + 5;
  v9[4] = v12;
  uint64_t v14 = v9 + 2;
  if (v11 == v13)
  {
    int v15 = *(char **)(a2 + 16);
    unint64_t v16 = v15 - v11;
    void *v14 = &v10[v15 - v11];
    if (v15 == v11) {
      goto LABEL_28;
    }
    if (v16 >= 8 && (unint64_t)(&v8[v3] - v11 + 40) >= 0x20)
    {
      if (v16 < 0x20)
      {
        uint64_t v17 = 0;
LABEL_22:
        unint64_t v22 = v16 & 0xFFFFFFFFFFFFFFF8;
        v10 += v16 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v23 = v17 - (v16 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v24 = (uint64_t *)&v11[v17];
        uint64_t v25 = &v8[32 * (v3 >> 5) + 40 + v17];
        do
        {
          uint64_t v26 = *v24++;
          *v25++ = v26;
          v23 += 8;
        }
        while (v23);
        if (v16 == v22) {
          goto LABEL_28;
        }
        v11 += v22;
        goto LABEL_27;
      }
      uint64_t v17 = v16 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v18 = (long long *)(v11 + 16);
      unsigned int v19 = &v8[32 * (v3 >> 5) + 56];
      unint64_t v20 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *unsigned int v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 32;
      }
      while (v20);
      if (v16 == v17) {
        goto LABEL_28;
      }
      if ((v16 & 0x18) != 0) {
        goto LABEL_22;
      }
      v11 += v17;
      v10 += v17;
    }
    do
    {
LABEL_27:
      char v27 = *v11++;
      *v10++ = v27;
    }
    while (v11 != v15);
    goto LABEL_28;
  }
  v9[1] = v11;
  void *v14 = *(void *)(a2 + 16);
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  uint64_t v2 = (void *)a1[1];
LABEL_28:
  unint64_t v28 = &v8[96 * v7];
  unint64_t v29 = &v8[32 * (v3 >> 5)];
  *((void *)v29 + 9) = *(void *)(a2 + 72);
  *((_OWORD *)v29 + 5) = *(_OWORD *)(a2 + 80);
  unsigned int v30 = v9 + 12;
  char v31 = (void *)*a1;
  if (v2 == (void *)*a1)
  {
    *a1 = v9;
    a1[1] = v30;
    a1[2] = v28;
    goto LABEL_55;
  }
  uint64_t v32 = 0;
  uint64_t v33 = (uint64_t)&v8[v3 - 56];
  size_t v34 = v2;
  do
  {
    uint64_t v36 = v9;
    uint64_t v37 = *(v34 - 12);
    v34 -= 12;
    *(v9 - 12) = v37;
    v9 -= 12;
    uint64_t v38 = v9 + 5;
    v9[1] = v9 + 5;
    unint64_t v39 = (char *)*(v2 - 11);
    v9[2] = v9 + 5;
    v9[3] = v9 + 5;
    long long v40 = (char *)*(v2 - 9);
    v9[4] = *(v2 - 8);
    if (v39 != v40)
    {
      uint64_t v35 = *(v2 - 10);
      *(v36 - 11) = v39;
      *(v36 - 10) = v35;
      *(_OWORD *)(v2 - 11) = 0uLL;
      *(_OWORD *)(v2 - 9) = 0uLL;
      goto LABEL_31;
    }
    *(v36 - 10) = &v38[*(v2 - 10) - (void)v39];
    uint64_t v41 = (char *)*(v2 - 10);
    if (v39 != v41)
    {
      unint64_t v42 = v41 - v39;
      if ((unint64_t)(v41 - v39) < 8 || (unint64_t)(v33 - 96 * v32 - (void)v39) < 0x20) {
        goto LABEL_47;
      }
      if (v42 >= 0x20)
      {
        unint64_t v44 = 0;
        unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          uint64_t v45 = &v36[v44 / 8];
          long long v46 = *(_OWORD *)&v39[v44 + 16];
          *(_OWORD *)(v45 - 7) = *(_OWORD *)&v39[v44];
          *(_OWORD *)(v45 - 5) = v46;
          v44 += 32;
        }
        while (v43 != v44);
        if (v42 == v43) {
          goto LABEL_31;
        }
        if ((v42 & 0x18) == 0)
        {
          v39 += v43;
          v38 += v43;
          do
          {
LABEL_47:
            char v48 = *v39++;
            *v38++ = v48;
          }
          while (v39 != v41);
          goto LABEL_31;
        }
      }
      else
      {
        unint64_t v43 = 0;
      }
      unint64_t v47 = v42 & 0xFFFFFFFFFFFFFFF8;
      v38 += v42 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        *(void *)((char *)v36 + v43 - 56) = *(void *)&v39[v43];
        v43 += 8;
      }
      while (v47 != v43);
      if (v42 != v47)
      {
        v39 += v47;
        goto LABEL_47;
      }
    }
LABEL_31:
    *(v36 - 3) = *(v2 - 3);
    *((_OWORD *)v36 - 1) = *((_OWORD *)v2 - 1);
    ++v32;
    uint64_t v2 = v34;
  }
  while (v34 != v31);
  uint64_t v2 = (void *)*a1;
  unint64_t v49 = (void *)a1[1];
  *a1 = v9;
  a1[1] = v30;
  a1[2] = v28;
  while (v49 != v2)
  {
    int v50 = (void *)*(v49 - 11);
    if (v50 != (void *)*(v49 - 9)) {
      free(v50);
    }
    v49 -= 12;
  }
LABEL_55:
  if (v2) {
    operator delete(v2);
  }
  return v30;
}

void md::OverlayLayerDataSource::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  gdc::LayerDataSource::createDebugNode((void *)a1, a2);
  char v13 = 13;
  strcpy(v12, "Content Scale");
  float v4 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 624)));
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 2;
  double v7 = v4;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v12, (uint64_t)v6);
  if (v13 < 0)
  {
    uint64_t v5 = *(void **)v12;
    operator delete(v5);
  }
}

void md::OverlayLayerDataSource::addFallbackData(md::OverlayLayerDataSource *this, const gdc::SelectionContext *a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unint64_t *)*((void *)a2 + 1);
  long long v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v42 = (uint64_t)v3;
  gdc::LayerDataCollector::missingData((gdc::LayerDataCollector *)&v49, v3, *((unsigned __int16 *)this + 16));
  int v4 = v49;
  __int32 v6 = v50;
  uint64_t v5 = (char *)v51;
  uint64_t v7 = v52;
  int v45 = (unsigned __int16)v53;
  uint64_t v8 = (char *)this + 640;
  unint64_t v44 = v54;
  uint64_t v43 = v55;
LABEL_3:
  while (v4 != v45 || v6 != v44 || v7 != v43)
  {
    char v9 = v6[113];
    uint64_t v10 = *(void *)(v6 + 116);
    char v11 = v6[112];
    uint64_t v12 = (_DWORD *)*((void *)v6 + 2);
    int v13 = v12[2];
    int v14 = v12[3];
    unsigned int v15 = v13;
    LODWORD(v12) = *v12;
    int v16 = 1 << v13;
    int v17 = (*(_DWORD *)(*((void *)v6 + 2) + 4) % v16 + v16) % v16;
    v61[0] = v14;
    v61[1] = v13;
    int v18 = ((int)v12 % v16 + v16) % v16;
    int v62 = v17;
    int v63 = v18;
    if (v15 <= 0x1E)
    {
      int v19 = vcvtmd_s64_f64((double)v18 / (double)v16);
      unsigned int v20 = v19 >= 0 ? v19 : -v19;
      if (v20 <= 0x7F)
      {
        v27.i64[0] = ((v18 + v16) % v16) | ((unint64_t)((v18 + v16) % v16) << 16);
        v27.i64[1] = ((v17 + v16) % v16) | ((unint64_t)((v17 + v16) % v16) << 16);
        v28.i64[0] = 0xFFFF0000FFFFLL;
        v28.i64[1] = 0xFFFF0000FFFFLL;
        int64x2_t v29 = (int64x2_t)vandq_s8(v27, v28);
        unsigned long long v30 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v29, 8uLL), (int8x16_t)v29) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
        unsigned long long v31 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v30, 4uLL), (int8x16_t)v30) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
        v28.i64[0] = 0x3333333333333333;
        v28.i64[1] = 0x3333333333333333;
        int8x16_t v32 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v31, 2uLL), (int8x16_t)v31), v28);
        int8x16_t v33 = (int8x16_t)vshlq_u64((uint64x2_t)v32, (uint64x2_t)xmmword_1A28FC6E0);
        v32.i64[1] *= 2;
        int64x2_t v34 = (int64x2_t)vandq_s8(vorrq_s8(v33, v32), (int8x16_t)xmmword_1A28FC6F0);
        unint64_t v21 = vorrq_s8((int8x16_t)v34, (int8x16_t)vdupq_laneq_s64(v34, 1)).u64[0];
        if (*v8) {
          goto LABEL_13;
        }
LABEL_12:
        *uint64_t v8 = 1;
        goto LABEL_13;
      }
    }
    LOBYTE(v19) = 0;
    LOBYTE(v15) = 0;
    unint64_t v21 = 0;
    if (!*v8) {
      goto LABEL_12;
    }
LABEL_13:
    *((void *)this + 81) = v21;
    *((unsigned char *)this + 656) = v15;
    *((unsigned char *)this + 657) = v19;
    __int16 v22 = *((_WORD *)this + 16);
    uint64_t v23 = (const gdc::LayerDataRequestKey *)*((void *)this + 2);
    v67[0] = &unk_1EF56BA40;
    v67[1] = md::TileAdjustmentHelpers::dataKeyForTile;
    unint64_t v68 = v67;
    md::TileAdjustmentHelpers::getFallbackDataForTile((int64x2_t *)((char *)this + 744), v22, v61, v23, (uint64_t)v67, (uint64_t)this + 640);
    if (v68 == v67)
    {
      (*(void (**)(void *))(v67[0] + 32))(v67);
    }
    else if (v68)
    {
      (*(void (**)(void))(*v68 + 40))();
    }
    LOBYTE(v59) = v11;
    HIBYTE(v59) = v9;
    uint64_t v60 = v10;
    gdc::FallbackCollector::collectFallbackData((uint64_t)this + 640, (void **)&v64, 1, 0, &v59);
    gdc::FallbackCollector::end((md::OverlayLayerDataSource *)((char *)this + 640), v24);
    uint64_t v25 = v6 + 144;
    __int32 v6 = v5;
    if (v25 != v5)
    {
      __int32 v6 = v25;
      while (1)
      {
        if (*((unsigned __int16 *)v6 + 4) == v4)
        {
          uint64_t v26 = *((void *)v6 + 17);
          if (!*(void *)(v7 + 144 * v26 + 112) || *(unsigned char *)(v7 + 144 * v26 + 136)) {
            break;
          }
        }
        v6 += 144;
        if (v6 == v5)
        {
          __int32 v6 = v5;
          goto LABEL_3;
        }
      }
    }
  }
  uint64_t v35 = v64;
  uint64_t v36 = (__int16 *)v65;
  if (v64 == (__int16 *)v65)
  {
    if (v64) {
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v37 = v64 + 56;
    do
    {
      char v39 = *(unsigned char *)(*(void *)v37 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v46, (uint64_t)(v37 - 44));
      LOBYTE(v49) = v39;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v50, (uint64_t)v46);
      char v57 = 0;
      unint64_t v58 = (v56
           - 0x61C8864680B583EBLL
           + ((v49 - 0x61C8864680B583EBLL) << 6)
           + (((unint64_t)v49 - 0x61C8864680B583EBLL) >> 2)) ^ (v49
                                                                                      - 0x61C8864680B583EBLL);
      gdc::LayerDataCollector::addFallbackData(v42, (uint64_t)&v49, v37 - 56, v37);
      if (v57) {
        char v57 = 0;
      }
      if (v51 != v53) {
        free(v51);
      }
      if (v47 != v48) {
        free(v47);
      }
      uint64_t v38 = v37 + 8;
      v37 += 64;
    }
    while (v38 != v36);
    if (v35)
    {
      if (v35 != v36)
      {
        do
        {
          long long v40 = (std::__shared_weak_count *)*((void *)v36 - 1);
          if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
          uint64_t v41 = (void *)*((void *)v36 - 12);
          if (v41 != *((void **)v36 - 10)) {
            free(v41);
          }
          v36 -= 64;
        }
        while (v36 != v35);
        uint64_t v35 = v64;
      }
LABEL_47:
      operator delete(v35);
    }
  }
}

void sub_1A24A5990(_Unwind_Exception *a1)
{
  std::function<gdc::LayerDataRequestKey ()(gdc::RequestType,unsigned short const&,geo::QuadTile const&)>::~function((void *)(v1 - 144));
  std::vector<gdc::FallbackData>::~vector[abi:nn180100]((void **)(v1 - 168));
  _Unwind_Resume(a1);
}

void md::OverlayLayerDataSource::didDeactivate(md::OverlayLayerDataSource *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 111);
  *((_OWORD *)this + 55) = 0u;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void md::OverlayLayerDataSource::didActivate(md::OverlayLayerDataSource *this)
{
  uint64_t v2 = *((void *)this + 109);
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 48))(&v7);
    uint64_t v3 = v7;
    int v4 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)this + 110) = v3;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 111);
    *((void *)this + 111) = v4;
    if (v5)
    {
      std::__shared_weak_count::__release_weak(v5);
      int v4 = v8;
    }
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    md::OverlayLayerDataSource::~OverlayLayerDataSource(v6);
  }
}

void md::OverlayLayerDataSource::~OverlayLayerDataSource(md::OverlayLayerDataSource *this)
{
  md::OverlayLayerDataSource::~OverlayLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void *v5;
  std::__shared_weak_count *v6;
  md::OverlayLayerDataSource *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  void v14[3];
  void *v15;
  uint64_t v16;

  int v16 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EF541F10;
  uint64_t v2 = *(void *)(*((void *)this + 73) + 56);
  v14[0] = &unk_1EF575AF8;
  unsigned int v15 = v14;
  geo::TaskQueue::barrierSync(v2, v14);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  uint64_t v3 = *((void *)this + 99);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 8));
  *(void *)uint64_t v3 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 8));
  int v4 = (std::__shared_weak_count *)*((void *)this + 100);
  *(_OWORD *)((char *)this + 792) = 0u;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 113);
  *((void *)this + 113) = 0;

  *((void *)this + 112) = &unk_1EF559D58;
  __int32 v6 = (std::__shared_weak_count *)*((void *)this + 111);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (md::OverlayLayerDataSource *)*((void *)this + 109);
  if (v7 == (md::OverlayLayerDataSource *)((char *)this + 848))
  {
    (*(void (**)(char *))(*((void *)this + 106) + 32))((char *)this + 848);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 105);
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (v7) {
    (*(void (**)(md::OverlayLayerDataSource *))(*(void *)v7 + 40))(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 105);
  if (v8)
  {
LABEL_16:
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_18:
  char v9 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  char v11 = (void *)*((void *)this + 96);
  if (v11)
  {
    *((void *)this + 97) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 93);
  if (v12)
  {
    *((void *)this + 94) = v12;
    operator delete(v12);
  }
  geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)this + 696);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 88));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 84));
  if (*((unsigned char *)this + 640)) {
    *((unsigned char *)this + 640) = 0;
  }
  *((void *)this + 75) = &unk_1EF559798;

  int v13 = (std::__shared_weak_count *)*((void *)this + 74);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  gdc::LayerDataSource::~LayerDataSource(this);
}

void sub_1A24A5ED4(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 704));
  _Unwind_Resume(a1);
}

void sub_1A24A5EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(void)>::~function((uint64_t *)va);
  *(void *)(v4 + 896) = &unk_1EF559D58;

  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 888);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  std::function<std::shared_ptr<md::LabelManager> ()(void)>::~function((void *)(v4 + 848));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v4 + 832);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v4 + 808);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v4 + 792);
  md::TileAdjustmentHelpers::~TileAdjustmentHelpers((md::TileAdjustmentHelpers *)(v4 + 744));
  gdc::FallbackCollector::~FallbackCollector((gdc::FallbackCollector *)(v4 + 640));
  *(void *)(v4 + 600) = &unk_1EF559798;

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v5);
  gdc::LayerDataSource::~LayerDataSource((gdc::LayerDataSource *)v4);
  _Unwind_Resume(a1);
}

void geo::_retain_ptr<OverlayLayerDataSourceRenderTargetSizeObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559D58;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<OverlayLayerDataSourceRenderTargetSizeObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559D58;

  return a1;
}

void std::__function::__func<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0,std::allocator<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF575AF8;
}

void *std::__function::__func<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0,std::allocator<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF575AF8;
  return result;
}

void std::__function::__func<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0,std::allocator<md::OverlayLayerDataSource::~OverlayLayerDataSource()::$_0>,void ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_pointer<md::RasterTileOverlayStyle *,std::shared_ptr<md::RasterTileOverlayStyle>::__shared_ptr_default_delete<md::RasterTileOverlayStyle,md::RasterTileOverlayStyle>,std::allocator<md::RasterTileOverlayStyle>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::RasterTileOverlayStyle *,std::shared_ptr<md::RasterTileOverlayStyle>::__shared_ptr_default_delete<md::RasterTileOverlayStyle,md::RasterTileOverlayStyle>,std::allocator<md::RasterTileOverlayStyle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__shared_ptr_pointer<md::CallbackHolder<md::OverlayLayerDataSource> *,std::shared_ptr<md::CallbackHolder<md::OverlayLayerDataSource>>::__shared_ptr_default_delete<md::CallbackHolder<md::OverlayLayerDataSource>,md::CallbackHolder<md::OverlayLayerDataSource>>,std::allocator<md::CallbackHolder<md::OverlayLayerDataSource>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 24);
  if (result)
  {
    *uint64_t result = 0;
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::CallbackHolder<md::OverlayLayerDataSource> *,std::shared_ptr<md::CallbackHolder<md::OverlayLayerDataSource>>::__shared_ptr_default_delete<md::CallbackHolder<md::OverlayLayerDataSource>,md::CallbackHolder<md::OverlayLayerDataSource>>,std::allocator<md::CallbackHolder<md::OverlayLayerDataSource>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::OverlayLayerDataSource::conditionalInvalidate(uint64_t a1, void *a2, void *a3, char a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 792);
  char v11 = *(std::__shared_weak_count **)(a1 + 800);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = **(id **)(a1 + 584);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3321888768;
  v24[2] = ___ZN2md22OverlayLayerDataSource21conditionalInvalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEES9_bNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEE_block_invoke;
  void v24[3] = &__block_descriptor_161_ea8_40c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE56c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE88c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE120c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE_e5_v8__0l;
  v24[4] = a1;
  v24[5] = v10;
  uint64_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a2[3];
  if (!v13) {
    goto LABEL_8;
  }
  if ((void *)v13 != a2)
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
LABEL_8:
    int8x16_t v27 = (void *)v13;
    goto LABEL_10;
  }
  int8x16_t v27 = v26;
  (*(void (**)(void *, void *))(*a2 + 24))(a2, v26);
LABEL_10:
  uint64_t v14 = a3[3];
  if (!v14)
  {
LABEL_13:
    int64x2_t v29 = (void *)v14;
    goto LABEL_15;
  }
  if ((void *)v14 != a3)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
    goto LABEL_13;
  }
  int64x2_t v29 = v28;
  (*(void (**)(void *, void *))(*a3 + 24))(a3, v28);
LABEL_15:
  char v32 = a4;
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)&v30, a5);
  dispatch_async(v12, v24);

  unsigned int v20 = __p;
  if (__p)
  {
    do
    {
      unint64_t v21 = (void *)*v20;
      operator delete(v20);
      unsigned int v20 = v21;
    }
    while (v21);
  }
  __int16 v22 = v30;
  unsigned long long v30 = 0;
  if (v22) {
    operator delete(v22);
  }
  if (v29 == v28)
  {
    (*(void (**)(void *))(v28[0] + 32))(v28);
  }
  else if (v29)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v29 + 40))(v29, v15, v16, v17, v18, v19);
  }
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
    uint64_t v23 = v25;
    if (v25) {
LABEL_27:
    }
      std::__shared_weak_count::__release_weak(v23);
  }
  else
  {
    if (v27) {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v27 + 40))(v27, v15, v16, v17, v18, v19);
    }
    uint64_t v23 = v25;
    if (v25) {
      goto LABEL_27;
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1A24A64A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::function<BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~function(v16);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }

  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN2md22OverlayLayerDataSource21conditionalInvalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEES9_bNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      __int32 v6 = *(os_unfair_lock_s **)(a1 + 40);
      if (!v6)
      {
LABEL_49:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      uint64_t v7 = *(void *)(*(void *)(v2 + 584) + 8);
      v29[0] = &unk_1EF57EAC0;
      unsigned long long v30 = v29;
      geo::TaskQueue::barrierSync(v7, v29);
      if (v30 == v29)
      {
        (*(void (**)(void *))(v29[0] + 32))(v29);
        uint64_t v8 = *(void *)(a1 + 80);
        if (!v8) {
          goto LABEL_12;
        }
      }
      else
      {
        if (v30) {
          (*(void (**)(void *))(*v30 + 40))(v30);
        }
        uint64_t v8 = *(void *)(a1 + 80);
        if (!v8) {
          goto LABEL_12;
        }
      }
      if (v8 == a1 + 56)
      {
        unint64_t v21 = v20;
        (*(void (**)(uint64_t, void *))(*(void *)v8 + 24))(v8, v20);
LABEL_14:
        uint64_t v9 = *(void *)(a1 + 112);
        if (v9)
        {
          if (v9 == a1 + 88)
          {
            uint64_t v23 = v22;
            (*(void (**)(uint64_t, void *))(*(void *)v9 + 24))(v9, v22);
LABEL_19:
            char v24 = *(unsigned char *)(a1 + 160);
            std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v25, a1 + 120);
            int8x16_t v28 = 0;
            char v11 = operator new(0x78uLL);
            void *v11 = &unk_1EF57EB08;
            uint64_t v12 = (char *)(v11 + 1);
            uint64_t v13 = (uint64_t)v21;
            if (v21)
            {
              if (v21 == v20)
              {
                v11[4] = v12;
                (*(void (**)(void *, char *))(v20[0] + 24))(v20, v12);
LABEL_24:
                uint64_t v14 = (uint64_t)v23;
                if (v23)
                {
                  if (v23 == v22)
                  {
                    v11[8] = v11 + 5;
                    (*(void (**)(void *, void *))(v22[0] + 24))(v22, v11 + 5);
LABEL_29:
                    *((unsigned char *)v11 + 72) = v24;
                    std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v11 + 10), (uint64_t)v25);
                    int8x16_t v28 = v11;
                    os_unfair_lock_lock(v6 + 2);
                    if (*(void *)&v6->_os_unfair_lock_opaque)
                    {
                      uint64_t v19 = *(void *)&v6->_os_unfair_lock_opaque;
                      (*(void (**)(void *, uint64_t *))(*v11 + 48))(v11, &v19);
                    }
                    os_unfair_lock_unlock(v6 + 2);
                    if (v28 == v27)
                    {
                      (*(void (**)(void *))(v27[0] + 32))(v27);
                      uint64_t v16 = __p;
                      if (!__p)
                      {
LABEL_36:
                        uint64_t v18 = v25[0];
                        v25[0] = 0;
                        if (v18) {
                          operator delete(v18);
                        }
                        if (v23 == v22)
                        {
                          (*(void (**)(void *))(v22[0] + 32))(v22);
                        }
                        else if (v23)
                        {
                          (*(void (**)(void *, uint64_t))(*v23 + 40))(v23, v15);
                        }
                        if (v21 == v20)
                        {
                          (*(void (**)(void *))(v20[0] + 32))(v20);
                        }
                        else if (v21)
                        {
                          (*(void (**)(void *, uint64_t))(*v21 + 40))(v21, v15);
                        }
                        goto LABEL_49;
                      }
                    }
                    else
                    {
                      if (v28) {
                        (*(void (**)(void *, uint64_t))(*v28 + 40))(v28, v15);
                      }
                      uint64_t v16 = __p;
                      if (!__p) {
                        goto LABEL_36;
                      }
                    }
                    do
                    {
                      uint64_t v17 = (void *)*v16;
                      operator delete(v16);
                      uint64_t v16 = v17;
                    }
                    while (v17);
                    goto LABEL_36;
                  }
                  uint64_t v14 = (*(uint64_t (**)(void *, uint64_t))(*v23 + 16))(v23, v10);
                }
                v11[8] = v14;
                goto LABEL_29;
              }
              uint64_t v13 = (*(uint64_t (**)(void *, uint64_t))(*v21 + 16))(v21, v10);
            }
            v11[4] = v13;
            goto LABEL_24;
          }
          uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        uint64_t v23 = (void *)v9;
        goto LABEL_19;
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
LABEL_12:
      unint64_t v21 = (void *)v8;
      goto LABEL_14;
    }
  }
}

void sub_1A24A6A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  os_unfair_lock_unlock(v26);
  std::function<void ()(md::OverlayLayerDataSource *)>::~function(&a26);
  _ZZZN2md22OverlayLayerDataSource21conditionalInvalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEES9_bNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEEEUb_EN3__2D1Ev(&a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE56c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE88c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE120c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE(void *a1)
{
  uint64_t v2 = (void *)a1[17];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = a1 + 11;
  uint64_t v5 = (void *)a1[15];
  a1[15] = 0;
  if (v5) {
    operator delete(v5);
  }
  __int32 v6 = a1 + 7;
  uint64_t v7 = (void *)a1[14];
  if (v7 == v4)
  {
    (*(void (**)(void *))(*v4 + 32))(a1 + 11);
  }
  else if (v7)
  {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
  uint64_t v8 = (void *)a1[10];
  if (v8 == v6)
  {
    (*(void (**)(void *))(*v6 + 32))(a1 + 7);
    uint64_t v9 = (std::__shared_weak_count *)a1[6];
    if (!v9) {
      return;
    }
    goto LABEL_13;
  }
  if (v8) {
    (*(void (**)(void *))(*v8 + 40))(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[6];
  if (v9)
  {
LABEL_13:
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t __copy_helper_block_ea8_40c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE56c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE88c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE120c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1 + 7;
  uint64_t v6 = a2[10];
  if (!v6) {
    goto LABEL_6;
  }
  if ((void *)v6 != a2 + 7)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
LABEL_6:
    a1[10] = v6;
    goto LABEL_8;
  }
  a1[10] = v5;
  (*(void (**)(void, void *))(*(void *)a2[10] + 24))(a2[10], a1 + 7);
LABEL_8:
  uint64_t v7 = a2[14];
  if (v7)
  {
    if ((void *)v7 == a2 + 11)
    {
      a1[14] = a1 + 11;
      (*(void (**)(void, void *))(*(void *)a2[14] + 24))(a2[14], a1 + 11);
      return std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(a1 + 15), (uint64_t)(a2 + 15));
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  a1[14] = v7;
  return std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(a1 + 15), (uint64_t)(a2 + 15));
}

void sub_1A24A6E18(_Unwind_Exception *a1)
{
  std::function<BOOL ()(std::shared_ptr<md::OverlayTileData> const&)>::~function(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void *std::function<void ()(md::OverlayLayerDataSource *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *_ZZZN2md22OverlayLayerDataSource21conditionalInvalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEES9_bNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEEEUb_EN3__2D1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[9];
  a1[9] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[7];
  if (v5 == a1 + 4)
  {
    (*(void (**)(void *))(a1[4] + 32))(a1 + 4);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  uint64_t v6 = (void *)a1[3];
  if (v6 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EEclEOSN_(uint64_t a1, uint64_t *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    if (v4 == a1 + 8)
    {
      __int16 v59 = v58;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 24))(v5, v58);
    }
    else
    {
      __int16 v59 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    __int16 v59 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (!v6) {
    goto LABEL_9;
  }
  if (v6 != a1 + 40)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
LABEL_9:
    char v57 = (void *)v6;
    goto LABEL_11;
  }
  char v57 = v56;
  (*(void (**)(uint64_t, void *))(*(void *)v6 + 24))(v6, v56);
LABEL_11:
  int v7 = *(unsigned __int8 *)(a1 + 72);
  gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)v3);
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  unint64_t v55 = 0;
  BOOL v51 = 0;
  unint64_t v52 = 0;
  int v50 = 0;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v8 + 8);
  if (v9 == v8) {
    goto LABEL_46;
  }
  do
  {
    uint64_t v10 = *(atomic_ullong **)(v9 + 136);
    v48[0] = *(md::OverlayTileData **)(v9 + 128);
    v48[1] = (md::OverlayTileData *)v10;
    if (v10) {
      atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
    }
    if (!v59)
    {
LABEL_113:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_115;
    }
    if (!(*(unsigned int (**)(void *, md::OverlayTileData **))(*v59 + 48))(v59, v48)) {
      goto LABEL_38;
    }
    gdc::LayerDataSource::cancelLayerDataRequest((gdc::LayerDataSource *)v3, (const gdc::LayerDataRequestKey *)(v9 + 16));
    if (!v57) {
      goto LABEL_113;
    }
    char v11 = (*(uint64_t (**)(void *, md::OverlayTileData **))(*v57 + 48))(v57, v48);
    if (v7) {
      char v12 = v11;
    }
    else {
      char v12 = 1;
    }
    if ((v12 & 1) != 0 || !md::OverlayTileData::hasTileData(v48[0]))
    {
      if (!v57) {
        goto LABEL_113;
      }
      if (!(*(unsigned int (**)(void *, md::OverlayTileData **))(*v57 + 48))(v57, v48))
      {
        *((void *)v48[0] + 19) = 1;
        uint64_t v17 = (std::__shared_weak_count *)v48[1];
        if (!v48[1]) {
          goto LABEL_13;
        }
        goto LABEL_39;
      }
      uint64_t v16 = v54;
      if ((unint64_t)v54 >= v55)
      {
        uint64_t v54 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>(&v53, v9 + 16);
LABEL_38:
        uint64_t v17 = (std::__shared_weak_count *)v48[1];
        if (!v48[1]) {
          goto LABEL_13;
        }
LABEL_39:
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        goto LABEL_13;
      }
      *uint64_t v54 = *(unsigned char *)(v9 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v16 + 8), v9 + 24);
      v16[96] = 0;
      if (*(unsigned char *)(v9 + 112))
      {
        *((_DWORD *)v16 + 25) = *(_DWORD *)(v9 + 116);
        v16[96] = 1;
      }
      *((void *)v16 + 13) = *(void *)(v9 + 120);
      uint64_t v54 = v16 + 112;
      uint64_t v17 = (std::__shared_weak_count *)v48[1];
      if (v48[1]) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v13 = v51;
      if ((unint64_t)v51 >= v52)
      {
        uint64_t v15 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v50, *(__n128 *)v48);
      }
      else
      {
        void *v51 = v48[0];
        uint64_t v14 = v48[1];
        v13[1] = v48[1];
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = (__n128 *)(v13 + 2);
      }
      BOOL v51 = (md::OverlayTileData **)v15;
      uint64_t v17 = (std::__shared_weak_count *)v48[1];
      if (v48[1]) {
        goto LABEL_39;
      }
    }
LABEL_13:
    uint64_t v9 = *(void *)(v9 + 8);
  }
  while (v9 != v8);
  uint64_t v18 = (unsigned __int8 *)v53;
  uint64_t v19 = v54;
  if (v53 != v54)
  {
    do
    {
      gdc::LayerDataStore::remove(*(void **)(v3 + 16), v18);
      v18 += 112;
    }
    while (v18 != v19);
  }
LABEL_46:
  if (v7)
  {
    unsigned int v20 = (md::OverlayTileData **)v50;
    unint64_t v21 = v51;
    if (v50 != v51)
    {
      uint64_t v22 = a1 + 80;
      do
      {
        uint64_t v24 = (uint64_t)*v20;
        uint64_t v23 = (std::__shared_weak_count *)v20[1];
        long long v46 = *v20;
        unint64_t v47 = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v48, v22);
        md::OverlayLayerDataSource::_updateNonTileOverlays(v3, v24, v23, (uint64_t)v48);
        uint64_t v25 = __p;
        if (__p)
        {
          do
          {
            uint64_t v26 = (void *)*v25;
            operator delete(v25);
            uint64_t v25 = v26;
          }
          while (v26);
        }
        int8x16_t v27 = v48[0];
        v48[0] = 0;
        if (v27) {
          operator delete(v27);
        }
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v20 += 2;
      }
      while (v20 != v21);
    }
  }
  gdc::LayerDataStore::pending((gdc::LayerDataStore *)&v46, *(void *)(v3 + 16));
  int8x16_t v28 = (const gdc::LayerDataRequestKey *)v46;
  int64x2_t v29 = v47;
  if (v46 != v47)
  {
    while (1)
    {
      uint64_t v44 = *((void *)v28 + 14);
      unsigned long long v30 = (std::__shared_weak_count *)*((void *)v28 + 15);
      int v45 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v59) {
        break;
      }
      if ((*(unsigned int (**)(void *, uint64_t *))(*v59 + 48))(v59, &v44))
      {
        gdc::LayerDataSource::cancelLayerDataRequest((gdc::LayerDataSource *)v3, v28);
        *(void *)(v44 + 152) = 1;
      }
      uint64_t v31 = v45;
      if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      int8x16_t v28 = (const gdc::LayerDataRequestKey *)((char *)v28 + 128);
      if (v28 == (const gdc::LayerDataRequestKey *)v29) {
        goto LABEL_70;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_115:
    __break(1u);
  }
LABEL_70:
  std::mutex::lock((std::mutex *)(v3 + 376));
  uint64_t v32 = *(void *)(v3 + 464);
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 48))(v32);
  }
  std::mutex::unlock((std::mutex *)(v3 + 376));
  uint64_t v33 = (std::__shared_weak_count *)v46;
  if (!v46) {
    goto LABEL_86;
  }
  int64x2_t v34 = v47;
  if (v47 == v46) {
    goto LABEL_85;
  }
  while (2)
  {
    unint64_t shared_weak_owners = (std::__shared_weak_count *)v34[-1].__shared_weak_owners_;
    if (shared_weak_owners && !atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
      if (LOBYTE(v34[-2].__shared_weak_owners_)) {
LABEL_79:
      }
        LOBYTE(v34[-2].__shared_weak_owners_) = 0;
    }
    else if (LOBYTE(v34[-2].__shared_weak_owners_))
    {
      goto LABEL_79;
    }
    shared_owners = (std::__shared_weak_count_vtbl *)v34[-5].__shared_owners_;
    if (shared_owners != v34[-4].__vftable) {
      free(shared_owners);
    }
    int64x2_t v34 = (std::__shared_weak_count *)((char *)v34 - 128);
    if (v34 != v33) {
      continue;
    }
    break;
  }
  uint64_t v33 = (std::__shared_weak_count *)v46;
LABEL_85:
  operator delete(v33);
LABEL_86:
  uint64_t v37 = (md::OverlayTileData **)v50;
  if (v50)
  {
    uint64_t v38 = v51;
    if (v51 != v50)
    {
      do
      {
        char v39 = (std::__shared_weak_count *)*(v38 - 1);
        if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
        v38 -= 2;
      }
      while (v38 != v37);
      uint64_t v37 = (md::OverlayTileData **)v50;
    }
    operator delete(v37);
  }
  long long v40 = v53;
  if (v53)
  {
    for (uint64_t i = v54; i != v40; i -= 112)
    {
      if (*(i - 16)) {
        *(i - 16) = 0;
      }
      uint64_t v42 = (void *)*((void *)i - 12);
      if (v42 != *((void **)i - 10)) {
        free(v42);
      }
    }
    uint64_t v54 = v40;
    operator delete(v40);
  }
  if (v57 == v56)
  {
    (*(void (**)(void *))(v56[0] + 32))(v56);
  }
  else if (v57)
  {
    (*(void (**)(void))(*v57 + 40))();
  }
  uint64_t result = (uint64_t)v59;
  if (v59 == v58) {
    return (*(uint64_t (**)(void *))(v58[0] + 32))(v58);
  }
  if (v59) {
    return (*(uint64_t (**)(void))(*v59 + 40))();
  }
  return result;
}

void sub_1A24A77C0(_Unwind_Exception *exception_object)
{
}

void sub_1A24A77CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v31 = *(void *)(v29 - 96);
  if (v31 == v29 - 120)
  {
    (*(void (**)(uint64_t))(*(void *)(v29 - 120) + 32))(v29 - 120);
    _Unwind_Resume(exception_object);
  }
  if (!v31) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)v31 + 40))(v31);
  _Unwind_Resume(exception_object);
}

void md::OverlayLayerDataSource::_updateNonTileOverlays(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *(void *)(*(void *)(a1 + 584) + 56);
    *(void *)&long long v11 = a1;
    *((void *)&v11 + 1) = a2;
    char v12 = a3;
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 584) + 56);
    *(void *)&long long v11 = a1;
    *((void *)&v11 + 1) = a2;
    char v12 = 0;
  }
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v13, a4);
  uint64_t v18 = 0;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v6 = &unk_1EF575AB0;
  *(_OWORD *)(v6 + 8) = v11;
  *((void *)v6 + 3) = v12;
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v6 + 32), (uint64_t)v13);
  uint64_t v18 = v6;
  geo::TaskQueue::async(&v15, v5, v17);
  int v7 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
    uint64_t v8 = __p;
    if (!__p) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v18) {
    (*(void (**)(void))(*v18 + 40))();
  }
  uint64_t v8 = __p;
  if (__p)
  {
    do
    {
LABEL_11:
      uint64_t v9 = (void *)*v8;
      operator delete(v8);
      uint64_t v8 = v9;
    }
    while (v9);
  }
LABEL_12:
  uint64_t v10 = v13[0];
  v13[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
}

void sub_1A24A7B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::function<void ()(void)>::~function((uint64_t *)va1);
  md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0::~$_0((uint64_t *)va);
  if (!v2) {
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}

void sub_1A24A7B70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  JUMPOUT(0x1A24A7B54);
}

void **std::vector<std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (!*a1) {
    return a1;
  }
  uint64_t v3 = (char *)a1[1];
  uint64_t v4 = *a1;
  if (v3 == v2) {
    goto LABEL_14;
  }
  do
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
    if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (!*(v3 - 32)) {
        goto LABEL_9;
      }
LABEL_8:
      *(v3 - 32) = 0;
      goto LABEL_9;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (*(v3 - 32)) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v6 = (void *)*((void *)v3 - 14);
    if (v6 != *((void **)v3 - 12)) {
      free(v6);
    }
    v3 -= 128;
  }
  while (v3 != v2);
  uint64_t v4 = *a1;
LABEL_14:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

void *md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[1];
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  uint64_t v6 = a1[2];
  if (!v6) {
    goto LABEL_202;
  }
  id v7 = *(id *)(v3 + 608);
  (*(void (**)(void *__return_ptr))(*(void *)[v7 gglDevice] + 24))(v134);

  uint64_t v131 = (uint64_t)&v131;
  uint64_t v132 = &v131;
  uint64_t v133 = 0;
  memset(v130, 0, sizeof(v130));
  [*(id *)(v3 + 904) size];
  *(void *)&long long v129 = v8;
  *((void *)&v129 + 1) = v9;
  unsigned int v10 = *(unsigned __int16 *)(v6 + 24);
  if (v10 > 0x46)
  {
    if (v10 == 72) {
      goto LABEL_21;
    }
    if (v10 != 71) {
      goto LABEL_34;
    }
LABEL_10:
    id v11 = *(id *)(v3 + 608);
    uint64_t v12 = *(void *)(v3 + 632);
    std::mutex::lock((std::mutex *)(v12 + 232));
    __p = 0;
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&__p, *(void *)(v12 + 160), *(void *)(v12 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v12 + 168) - *(void *)(v12 + 160)) >> 3));
    std::mutex::unlock((std::mutex *)(v12 + 232));
    uint64_t v13 = *(std::__shared_weak_count **)(v6 + 728);
    uint64_t v124 = *(void *)(v6 + 720);
    long long v125 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    _processOverlays(v6 + 168, &v129, v11, v134, (uint64_t)&__p, &v131, 1.0, (uint64_t)v130, &v124, (uint64_t *)(v6 + 736), (md::MaskingOverlayRenderable **)(v3 + 832), 0, *(unsigned __int16 *)(v3 + 32) - 71 < 2, a1 + 4);
    uint64_t v14 = v125;
    if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    uint64_t v15 = (char *)__p;
    if (!__p) {
      goto LABEL_33;
    }
    if (v127 == __p) {
      goto LABEL_32;
    }
    uint64_t v16 = v127 - 24;
    uint64_t v17 = v127 - 24;
    uint64_t v18 = (void (***)(char *))(v127 - 24);
    do
    {
      uint64_t v19 = *v18;
      v18 -= 3;
      (*v19)(v17);
      v16 -= 24;
      BOOL v20 = v17 == v15;
      uint64_t v17 = (char *)v18;
    }
    while (!v20);
    goto LABEL_31;
  }
  if (v10 == 11) {
    goto LABEL_10;
  }
  if (v10 == 12)
  {
LABEL_21:
    id v11 = *(id *)(v3 + 608);
    uint64_t v21 = *(void *)(v3 + 632);
    std::mutex::lock((std::mutex *)(v21 + 232));
    __p = 0;
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    std::vector<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__init_with_size[abi:nn180100]<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*,geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>*>(&__p, *(void *)(v21 + 184), *(void *)(v21 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v21 + 192) - *(void *)(v21 + 184)) >> 3));
    std::mutex::unlock((std::mutex *)(v21 + 232));
    uint64_t v22 = *(std::__shared_weak_count **)(v6 + 728);
    uint64_t v124 = *(void *)(v6 + 720);
    long long v125 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    _processOverlays(v6 + 168, &v129, v11, v134, (uint64_t)&__p, &v131, 1.0, (uint64_t)v130, &v124, (uint64_t *)(v6 + 736), (md::MaskingOverlayRenderable **)(v3 + 832), 0, *(unsigned __int16 *)(v3 + 32) - 71 < 2, a1 + 4);
    uint64_t v23 = v125;
    if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v15 = (char *)__p;
    if (!__p) {
      goto LABEL_33;
    }
    if (v127 == __p)
    {
LABEL_32:
      operator delete(v15);
LABEL_33:

      goto LABEL_34;
    }
    uint64_t v24 = v127 - 24;
    uint64_t v25 = v127 - 24;
    uint64_t v26 = (void (***)(char *))(v127 - 24);
    do
    {
      int8x16_t v27 = *v26;
      v26 -= 3;
      (*v27)(v25);
      v24 -= 24;
      BOOL v20 = v25 == v15;
      uint64_t v25 = (char *)v26;
    }
    while (!v20);
LABEL_31:
    uint64_t v15 = (char *)__p;
    goto LABEL_32;
  }
LABEL_34:
  int8x16_t v28 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v6 + 872));
  if (v28) {
    geo::read_write_lock::logFailure(v28, (uint64_t)"write lock", v29);
  }
  uint64_t v30 = v6 + 752;
  uint64_t v31 = *(void *)(v6 + 760);
  if (v31 != v6 + 752)
  {
    int8x8_t v32 = (int8x8_t)a1[5];
    if (v32)
    {
LABEL_40:
      unint64_t v33 = *(unsigned __int8 *)(v31 + 152);
      uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.u32[0] > 1uLL)
      {
        unint64_t v35 = *(unsigned __int8 *)(v31 + 152);
        if (*(void *)&v32 <= v33) {
          unint64_t v35 = v33 % *(void *)&v32;
        }
      }
      else
      {
        unint64_t v35 = (v32.i32[0] - 1) & v33;
      }
      uint64_t v36 = *(uint64_t ****)(a1[4] + 8 * v35);
      if (v36)
      {
        uint64_t v37 = *v36;
        if (v37)
        {
          if (v34.u32[0] < 2uLL)
          {
            uint64_t v38 = *(void *)&v32 - 1;
            while (1)
            {
              long long v40 = v37[1];
              if (v40 == (uint64_t *)v33)
              {
                if (*((unsigned __int8 *)v37 + 16) == v33) {
                  goto LABEL_60;
                }
              }
              else if (((unint64_t)v40 & v38) != v35)
              {
                goto LABEL_61;
              }
              uint64_t v37 = (uint64_t **)*v37;
              if (!v37) {
                goto LABEL_61;
              }
            }
          }
          do
          {
            unint64_t v39 = (unint64_t)v37[1];
            if (v39 == v33)
            {
              if (*((unsigned __int8 *)v37 + 16) == v33)
              {
LABEL_60:
                atomic_store(1u, (unsigned __int8 *)(v31 + 153));
                break;
              }
            }
            else
            {
              if (v39 >= *(void *)&v32) {
                v39 %= *(void *)&v32;
              }
              if (v39 != v35) {
                break;
              }
            }
            uint64_t v37 = (uint64_t **)*v37;
          }
          while (v37);
        }
      }
LABEL_61:
      while (1)
      {
        uint64_t v31 = *(void *)(v31 + 8);
        if (v31 == v30) {
          break;
        }
        int8x8_t v32 = (int8x8_t)a1[5];
        if (v32) {
          goto LABEL_40;
        }
      }
    }
    else
    {
      do
        uint64_t v31 = *(void *)(v31 + 8);
      while (v31 != v30);
    }
  }
  uint64_t v41 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v6 + 872));
  if (v41) {
    geo::read_write_lock::logFailure(v41, (uint64_t)"unlock", v42);
  }
  if (!a1[7]) {
    goto LABEL_192;
  }
  __p = (void *)(v6 + 872);
  uint64_t v43 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v6 + 872));
  if (v43) {
    geo::read_write_lock::logFailure(v43, (uint64_t)"write lock", v44);
  }
  uint64_t v45 = a1[7];
  if (v45 == 2)
  {
    unsigned __int16 v49 = (uint64_t *)(v6 + 776);
    if (*(void *)(v6 + 792))
    {
      int v50 = *(uint64_t **)(v6 + 784);
      uint64_t v51 = *(void *)(v6 + 776);
      uint64_t v52 = *v50;
      *(void *)(v52 + 8) = *(void *)(v51 + 8);
      **(void **)(v51 + 8) = v52;
      *(void *)(v6 + 792) = 0;
      if (v50 != v49)
      {
        do
        {
          uint64_t v53 = (uint64_t *)v50[1];
          md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v50 + 2));
          operator delete(v50);
          int v50 = v53;
        }
        while (v53 != v49);
      }
    }
    uint64_t v54 = (uint64_t *)(v6 + 800);
    if (*(void *)(v6 + 816))
    {
      unint64_t v55 = *(uint64_t **)(v6 + 808);
      uint64_t v56 = *(void *)(v6 + 800);
      uint64_t v57 = *v55;
      *(void *)(v57 + 8) = *(void *)(v56 + 8);
      **(void **)(v56 + 8) = v57;
      *(void *)(v6 + 816) = 0;
      if (v55 != v54)
      {
        do
        {
          unint64_t v58 = (uint64_t *)v55[1];
          md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v55 + 2));
          operator delete(v55);
          unint64_t v55 = v58;
        }
        while (v58 != v54);
      }
    }
    int8x8_t v59 = (int8x8_t)a1[5];
    if (!*(void *)&v59) {
      goto LABEL_190;
    }
    uint8x8_t v60 = (uint8x8_t)vcnt_s8(v59);
    v60.i16[0] = vaddlv_u8(v60);
    unint64_t v61 = v60.u32[0];
    if (v60.u32[0] > 1uLL)
    {
      uint64_t v62 = 2;
      if (*(void *)&v59 <= 2uLL) {
        uint64_t v62 = 2u % a1[5];
      }
    }
    else
    {
      uint64_t v62 = (v59.i8[0] - 1) & 2;
    }
    uint64_t v74 = a1[4];
    uint64_t v75 = *(uint64_t ***)(v74 + 8 * v62);
    if (!v75 || (int8x8_t v76 = *v75) == 0)
    {
LABEL_167:
      uint64_t v104 = (v59.i8[0] & 1) == 0;
      uint64_t v105 = *(void *)&v59 - 1;
      if (v61 >= 2) {
        uint64_t v104 = *(void *)&v59 != 1;
      }
      int v106 = *(uint64_t ***)(v74 + 8 * v104);
      if (!v106) {
        goto LABEL_190;
      }
      id v107 = *v106;
      if (!v107) {
        goto LABEL_190;
      }
      if (v61 < 2)
      {
        while (1)
        {
          uint64_t v108 = v107[1];
          if (v108 == 1)
          {
            if (*((unsigned char *)v107 + 16) == 1) {
              goto LABEL_185;
            }
          }
          else if ((v108 & v105) != v104)
          {
            goto LABEL_190;
          }
          id v107 = (uint64_t *)*v107;
          if (!v107) {
            goto LABEL_190;
          }
        }
      }
      while (1)
      {
        unint64_t v109 = v107[1];
        if (v109 == 1)
        {
          if (*((unsigned char *)v107 + 16) == 1)
          {
LABEL_185:
            for (uint64_t i = v132; i != &v131; uint64_t i = (uint64_t *)i[1])
            {
              if (i[2])
              {
                int32x2_t v113 = (char *)operator new(0xA8uLL);
                uint64_t v111 = i[2];
                i[2] = 0;
                *((void *)v113 + 2) = v111;
                *(_OWORD *)(v113 + 24) = 0u;
                *(_OWORD *)(v113 + 40) = 0u;
                *(_OWORD *)(v113 + 56) = 0u;
                *(_OWORD *)(v113 + 72) = 0u;
                *(_OWORD *)(v113 + 88) = 0u;
                *(_OWORD *)(v113 + 104) = 0u;
                *((void *)v113 + 15) = 0;
                *((_OWORD *)v113 + 8) = *((_OWORD *)i + 8);
                *((void *)v113 + 18) = i[18];
                i[16] = 0;
                i[17] = 0;
                i[18] = 0;
                *((_WORD *)v113 + 76) = 1;
                *((void *)v113 + 20) = 0;
                *((void *)v113 + 1) = v54;
                uint64_t v112 = *(void *)(v6 + 800);
                *(void *)int32x2_t v113 = v112;
                *(void *)(v112 + 8) = v113;
                *(void *)(v6 + 800) = v113;
                ++*(void *)(v6 + 816);
              }
            }
            goto LABEL_190;
          }
        }
        else
        {
          if (v109 >= *(void *)&v59) {
            v109 %= *(void *)&v59;
          }
          if (v109 != v104) {
            goto LABEL_190;
          }
        }
        id v107 = (uint64_t *)*v107;
        if (!v107) {
          goto LABEL_190;
        }
      }
    }
    if (v60.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v78 = v76[1];
        if (v78 == 2)
        {
          if (*((unsigned char *)v76 + 16) == 2) {
            goto LABEL_141;
          }
        }
        else if ((v78 & (*(void *)&v59 - 1)) != v62)
        {
          goto LABEL_165;
        }
        int8x8_t v76 = (uint64_t *)*v76;
        if (!v76) {
          goto LABEL_165;
        }
      }
    }
    while (1)
    {
      unint64_t v77 = v76[1];
      if (v77 == 2) {
        break;
      }
      if (v77 >= *(void *)&v59) {
        v77 %= *(void *)&v59;
      }
      if (v77 != v62)
      {
LABEL_165:
        if (!*(void *)&v59) {
          goto LABEL_190;
        }
        uint64_t v74 = a1[4];
        uint8x8_t v103 = (uint8x8_t)vcnt_s8(v59);
        v103.i16[0] = vaddlv_u8(v103);
        unint64_t v61 = v103.u32[0];
        goto LABEL_167;
      }
LABEL_125:
      int8x8_t v76 = (uint64_t *)*v76;
      if (!v76) {
        goto LABEL_165;
      }
    }
    if (*((unsigned char *)v76 + 16) != 2) {
      goto LABEL_125;
    }
LABEL_141:
    unint64_t v86 = v132;
    if (v132 == &v131) {
      goto LABEL_165;
    }
    while (1)
    {
      if (v86[3])
      {
        unint64_t v87 = (char *)operator new(0xA8uLL);
        uint64_t v88 = v86[3];
        v86[3] = 0;
        *((void *)v87 + 2) = 0;
        *((void *)v87 + 3) = v88;
        long long v89 = 0uLL;
        *((_OWORD *)v87 + 2) = 0u;
        goto LABEL_144;
      }
      if (v86[4])
      {
        unint64_t v87 = (char *)operator new(0xA8uLL);
        uint64_t v90 = v86[4];
        v86[4] = 0;
        *((void *)v87 + 2) = 0;
        *((void *)v87 + 3) = 0;
        *((void *)v87 + 4) = v90;
        *(_OWORD *)(v87 + 40) = 0u;
        *(_OWORD *)(v87 + 56) = 0u;
        *(_OWORD *)(v87 + 72) = 0u;
        *(_OWORD *)(v87 + 88) = 0u;
        *(_OWORD *)(v87 + 104) = 0u;
        *((void *)v87 + 15) = 0;
        goto LABEL_148;
      }
      if (v86[5]) {
        break;
      }
      if (v86[6] != v86[7])
      {
        unint64_t v87 = (char *)operator new(0xA8uLL);
        *((_OWORD *)v87 + 1) = 0u;
        *((_OWORD *)v87 + 2) = 0u;
        *((_OWORD *)v87 + 3) = *((_OWORD *)v86 + 3);
        *((void *)v87 + 8) = v86[8];
        v86[6] = 0;
        v86[7] = 0;
        v86[8] = 0;
        *((void *)v87 + 15) = 0;
        *(_OWORD *)(v87 + 104) = 0u;
        *(_OWORD *)(v87 + 88) = 0u;
        *(_OWORD *)(v87 + 72) = 0u;
        goto LABEL_148;
      }
      if (v86[11])
      {
        unint64_t v87 = (char *)operator new(0xA8uLL);
        uint64_t v93 = v86[11];
        v86[11] = 0;
        long long v89 = 0uLL;
        *((_OWORD *)v87 + 3) = 0u;
        *((_OWORD *)v87 + 4) = 0u;
        *((_OWORD *)v87 + 1) = 0u;
        *((_OWORD *)v87 + 2) = 0u;
        *((void *)v87 + 10) = 0;
        *((void *)v87 + 11) = v93;
        goto LABEL_145;
      }
      if (!v86[12]) {
        goto LABEL_149;
      }
      unint64_t v87 = (char *)operator new(0xA8uLL);
      uint64_t v94 = v86[12];
      v86[12] = 0;
      *((_OWORD *)v87 + 4) = 0u;
      *((_OWORD *)v87 + 5) = 0u;
      *((_OWORD *)v87 + 2) = 0u;
      *((_OWORD *)v87 + 3) = 0u;
      *((_OWORD *)v87 + 1) = 0u;
      *((void *)v87 + 12) = v94;
      *((void *)v87 + 13) = 0;
      *((void *)v87 + 14) = 0;
      *((void *)v87 + 15) = 0;
LABEL_148:
      *((_OWORD *)v87 + 8) = *((_OWORD *)v86 + 8);
      *((void *)v87 + 18) = v86[18];
      v86[16] = 0;
      v86[17] = 0;
      v86[18] = 0;
      *((_WORD *)v87 + 76) = 2;
      *((void *)v87 + 20) = 0;
      *((void *)v87 + 1) = v49;
      uint64_t v91 = *v49;
      *(void *)unint64_t v87 = *v49;
      *(void *)(v91 + 8) = v87;
      *(void *)(v6 + 776) = v87;
      ++*(void *)(v6 + 792);
LABEL_149:
      unint64_t v86 = (uint64_t *)v86[1];
      if (v86 == &v131)
      {
        int8x8_t v59 = (int8x8_t)a1[5];
        goto LABEL_165;
      }
    }
    unint64_t v87 = (char *)operator new(0xA8uLL);
    uint64_t v92 = v86[5];
    v86[5] = 0;
    *((void *)v87 + 2) = 0;
    *((void *)v87 + 3) = 0;
    *((void *)v87 + 4) = 0;
    *((void *)v87 + 5) = v92;
    long long v89 = 0uLL;
LABEL_144:
    *((_OWORD *)v87 + 3) = v89;
    *((_OWORD *)v87 + 4) = v89;
    *((_OWORD *)v87 + 5) = v89;
LABEL_145:
    *((_OWORD *)v87 + 6) = v89;
    *((_OWORD *)v87 + 7) = v89;
    goto LABEL_148;
  }
  if (v45 != 1) {
    goto LABEL_190;
  }
  int8x8_t v46 = (int8x8_t)a1[5];
  if (!*(void *)&v46) {
    goto LABEL_190;
  }
  uint8x8_t v47 = (uint8x8_t)vcnt_s8(v46);
  v47.i16[0] = vaddlv_u8(v47);
  if (v47.u32[0] > 1uLL)
  {
    uint64_t v48 = 2;
    if (*(void *)&v46 <= 2uLL) {
      uint64_t v48 = 2u % a1[5];
    }
  }
  else
  {
    uint64_t v48 = (v46.i8[0] - 1) & 2;
  }
  uint64_t v63 = a1[4];
  long long v64 = *(uint64_t ***)(v63 + 8 * v48);
  if (!v64 || (uint64_t v65 = *v64) == 0)
  {
LABEL_100:
    uint64_t v68 = (v46.i8[0] & 1) == 0;
    uint64_t v69 = *(void *)&v46 - 1;
    if (v47.u32[0] >= 2uLL) {
      uint64_t v68 = *(void *)&v46 > 1uLL;
    }
    uint64_t v70 = *(uint64_t ***)(v63 + 8 * v68);
    if (!v70) {
      goto LABEL_190;
    }
    uint64_t v71 = *v70;
    if (!v71) {
      goto LABEL_190;
    }
    if (v47.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v72 = v71[1];
        if (v72 == 1)
        {
          if (*((unsigned char *)v71 + 16) == 1) {
            goto LABEL_159;
          }
        }
        else if ((v72 & v69) != v68)
        {
          goto LABEL_190;
        }
        uint64_t v71 = (uint64_t *)*v71;
        if (!v71) {
          goto LABEL_190;
        }
      }
    }
    while (1)
    {
      unint64_t v73 = v71[1];
      if (v73 == 1)
      {
        if (*((unsigned char *)v71 + 16) == 1)
        {
LABEL_159:
          char v79 = (uint64_t *)(v6 + 800);
          if (*(void *)(v6 + 816))
          {
            long long v95 = *(uint64_t **)(v6 + 808);
            uint64_t v96 = *(void *)(v6 + 800);
            uint64_t v97 = *v95;
            *(void *)(v97 + 8) = *(void *)(v96 + 8);
            **(void **)(v96 + 8) = v97;
            *(void *)(v6 + 816) = 0;
            if (v95 != v79)
            {
              do
              {
                uint64_t v98 = (uint64_t *)v95[1];
                md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v95 + 2));
                operator delete(v95);
                long long v95 = v98;
              }
              while (v98 != v79);
            }
          }
          uint64_t v84 = v133;
          if (v133)
          {
            unint64_t v85 = (void *)(v6 + 816);
LABEL_164:
            uint64_t v100 = v131;
            uint64_t v99 = v132;
            uint64_t v101 = *v132;
            *(void *)(v101 + 8) = *(void *)(v131 + 8);
            **(void **)(v100 + 8) = v101;
            uint64_t v102 = *v79;
            *(void *)(v102 + 8) = v99;
            *uint64_t v99 = v102;
            *char v79 = v100;
            *(void *)(v100 + 8) = v79;
            *v85 += v84;
            uint64_t v133 = 0;
          }
          goto LABEL_190;
        }
      }
      else
      {
        if (v73 >= *(void *)&v46) {
          v73 %= *(void *)&v46;
        }
        if (v73 != v68) {
          goto LABEL_190;
        }
      }
      uint64_t v71 = (uint64_t *)*v71;
      if (!v71) {
        goto LABEL_190;
      }
    }
  }
  if (v47.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v67 = v65[1];
      if (v67 == 2)
      {
        if (*((unsigned char *)v65 + 16) == 2) {
          goto LABEL_136;
        }
      }
      else if ((v67 & (*(void *)&v46 - 1)) != v48)
      {
        goto LABEL_100;
      }
      uint64_t v65 = (uint64_t *)*v65;
      if (!v65) {
        goto LABEL_100;
      }
    }
  }
  while (1)
  {
    unint64_t v66 = v65[1];
    if (v66 == 2) {
      break;
    }
    if (v66 >= *(void *)&v46) {
      v66 %= *(void *)&v46;
    }
    if (v66 != v48) {
      goto LABEL_100;
    }
LABEL_90:
    uint64_t v65 = (uint64_t *)*v65;
    if (!v65) {
      goto LABEL_100;
    }
  }
  if (*((unsigned char *)v65 + 16) != 2) {
    goto LABEL_90;
  }
LABEL_136:
  char v79 = (uint64_t *)(v6 + 776);
  if (*(void *)(v6 + 792))
  {
    long long v80 = *(uint64_t **)(v6 + 784);
    uint64_t v81 = *(void *)(v6 + 776);
    uint64_t v82 = *v80;
    *(void *)(v82 + 8) = *(void *)(v81 + 8);
    **(void **)(v81 + 8) = v82;
    *(void *)(v6 + 792) = 0;
    if (v80 != v79)
    {
      do
      {
        unint64_t v83 = (uint64_t *)v80[1];
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v80 + 2));
        operator delete(v80);
        long long v80 = v83;
      }
      while (v83 != v79);
    }
  }
  uint64_t v84 = v133;
  if (v133)
  {
    unint64_t v85 = (void *)(v6 + 792);
    goto LABEL_164;
  }
LABEL_190:
  double v114 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v6 + 872));
  if (v114) {
    geo::read_write_lock::logFailure(v114, (uint64_t)"unlock", v115);
  }
LABEL_192:
  if (v130[0])
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100]((uint64_t)v130, (uint64_t)v130[0]);
    operator delete(v130[0]);
  }
  if (v133)
  {
    uint64_t v116 = v131;
    uint64_t v117 = v132;
    uint64_t v118 = *v132;
    *(void *)(v118 + 8) = *(void *)(v131 + 8);
    **(void **)(v116 + 8) = v118;
    uint64_t v133 = 0;
    if (v117 != &v131)
    {
      do
      {
        uint64_t v119 = (uint64_t *)v117[1];
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v117 + 2));
        operator delete(v117);
        uint64_t v117 = v119;
      }
      while (v119 != &v131);
    }
  }
  if (v134[0])
  {
    uint64_t v120 = (*(uint64_t (**)(void))(*(void *)v134[0] + 24))(v134[0]);
    uint64_t v121 = v134[0];
    v134[0] = 0;
    uint64_t v131 = v121;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v120 + 48))(v120, &v131);
    uint64_t v122 = v131;
    uint64_t v131 = 0;
    if (v122) {
      (*(void (**)(uint64_t))(*(void *)v122 + 8))(v122);
    }
    uint64_t v123 = v134[0];
    v134[0] = 0;
    if (v123) {
      (*(void (**)(uint64_t))(*(void *)v123 + 8))(v123);
    }
  }
LABEL_202:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1A24A8A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25,uint64_t a26)
{
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)&a16);
  if (__p)
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100]((uint64_t)&__p, (uint64_t)__p);
    operator delete(__p);
  }
  if (a26)
  {
    uint64_t v29 = a24;
    uint64_t v30 = a25;
    uint64_t v31 = *a25;
    *(void *)(v31 + 8) = *(void *)(a24 + 8);
    **(void **)(v29 + 8) = v31;
    a26 = 0;
    if (v30 != &a24)
    {
      do
      {
        int8x8_t v32 = (uint64_t *)v30[1];
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v30 + 2));
        operator delete(v30);
        uint64_t v30 = v32;
      }
      while (v32 != &a24);
    }
  }
  ggl::Loader::~Loader((ggl::Loader *)(v27 - 96));
  if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[6];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)__p[4];
  __p[4] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)__p[3];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(__p);
}

void std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[4];
  a1[4] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF575AB0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return std::unordered_set<md::OverlayTileDataType>::unordered_set(a2 + 32, a1 + 32);
}

void sub_1A24A8E28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  uint64_t v3 = v2;
  *(void *)uint64_t v2 = &unk_1EF575AB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  *((void *)v2 + 3) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v2 + 32), a1 + 32);
  return v3;
}

void sub_1A24A8EB8(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF575AB0;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[4];
  a1[4] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0,std::allocator<md::OverlayLayerDataSource::_updateNonTileOverlays(std::shared_ptr<md::OverlayTileData> const&,std::unordered_set<md::OverlayTileDataType>)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF575AB0;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[4];
  a1[4] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EE18destroy_deallocateEv(void *a1)
{
  _ZNSt3__110__function12__alloc_funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EE7destroyB8nn180100Ev(a1 + 1);
  operator delete(a1);
}

uint64_t _ZNSt3__110__function12__alloc_funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EE7destroyB8nn180100Ev(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[9];
  a1[9] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[7];
  if (v5 == a1 + 4)
  {
    (*(void (**)(void *))(a1[4] + 32))(a1 + 4);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  uint64_t result = a1[3];
  if ((void *)result == a1)
  {
    uint64_t v8 = *(uint64_t (**)(void *))(*a1 + 32);
    return v8(a1);
  }
  else if (result)
  {
    id v7 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v7();
  }
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EE7destroyEv(uint64_t a1)
{
  return _ZNSt3__110__function12__alloc_funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EE7destroyB8nn180100Ev((void *)(a1 + 8));
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57EB08;
  return _ZNSt3__122__compressed_pair_elemIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS1_15OverlayTileDataEEEEEESA_bNS_13unordered_setINS1_19OverlayTileDataTypeENS_4hashISC_EENS_8equal_toISC_EENS_9allocatorISC_EEEEEUb_E3__2Li0ELb0EEC2B8nn180100IJRKSK_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t _ZNSt3__122__compressed_pair_elemIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS1_15OverlayTileDataEEEEEESA_bNS_13unordered_setINS1_19OverlayTileDataTypeENS_4hashISC_EENS_8equal_toISC_EENS_9allocatorISC_EEEEEUb_E3__2Li0ELb0EEC2B8nn180100IJRKSK_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v5 = *(void *)(a2 + 56);
  if (v5)
  {
    if (v5 == a2 + 32)
    {
      *(void *)(a1 + 56) = a1 + 32;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 56) + 24))(*(void *)(a2 + 56), a1 + 32);
      goto LABEL_11;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  *(void *)(a1 + 56) = v5;
LABEL_11:
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  std::unordered_set<md::OverlayTileDataType>::unordered_set(a1 + 72, a2 + 72);
  return a1;
}

void sub_1A24A92B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[3];
  if (v3 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
    _Unwind_Resume(exception_object);
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x78uLL);
  *uint64_t v2 = &unk_1EF57EB08;
  _ZNSt3__122__compressed_pair_elemIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS1_15OverlayTileDataEEEEEESA_bNS_13unordered_setINS1_19OverlayTileDataTypeENS_4hashISC_EENS_8equal_toISC_EENS_9allocatorISC_EEEEEUb_E3__2Li0ELb0EEC2B8nn180100IJRKSK_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1A24A93E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EED0Ev(void *a1)
{
  *a1 = &unk_1EF57EB08;
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[10];
  a1[10] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = a1 + 1;
  uint64_t v6 = (void *)a1[8];
  if (v6 == a1 + 5)
  {
    (*(void (**)(void *))(a1[5] + 32))(a1 + 5);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  id v7 = (void *)a1[4];
  if (v7 == v5)
  {
    (*(void (**)(void *))(*v5 + 32))(a1 + 1);
  }
  else if (v7)
  {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
  JUMPOUT(0x1A6239270);
}

void *_ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__2NSI_ISL_EEFvPS3_EED1Ev(void *a1)
{
  *a1 = &unk_1EF57EB08;
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[10];
  a1[10] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = a1 + 1;
  uint64_t v6 = (void *)a1[8];
  if (v6 == a1 + 5)
  {
    (*(void (**)(void *))(a1[5] + 32))(a1 + 5);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  id v7 = (void *)a1[4];
  if (v7 == v5)
  {
    (*(void (**)(void *))(*v5 + 32))(a1 + 1);
  }
  else if (v7)
  {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
  return a1;
}

void _ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__1NSI_ISL_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57EAC0;
}

void *_ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__1NSI_ISL_EEFvvEE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57EAC0;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource21conditionalInvalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEESB_bNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb_E3__1NSI_ISL_EEFvvEED0Ev()
{
}

void md::OverlayLayerDataSource::invalidateRect(uint64_t a1, long long *a2, unsigned char *a3, void *a4, char a5, uint64_t a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v17 = *a2;
  long long v18 = a2[1];
  uint64_t v10 = *(void *)(a1 + 792);
  id v11 = *(std::__shared_weak_count **)(a1 + 800);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = **(id **)(a1 + 584);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENSt3__18functionIFbRKNS9_10shared_ptrINS_15OverlayTileDataEEEEEEbNS9_13unordered_setINS_19OverlayTileDataTypeENS9_4hashISJ_EENS9_8equal_toISJ_EENS9_9allocatorISJ_EEEE_block_invoke;
  block[3] = &__block_descriptor_155_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE80c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE112c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE152c22_ZTSN3geo8optionalIhEE_e5_v8__0l;
  block[4] = v10;
  BOOL v20 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v21 = v17;
  long long v22 = v18;
  char v27 = 0;
  if (*a3)
  {
    char v28 = a3[1];
    char v27 = 1;
  }
  uint64_t v13 = a4[3];
  if (!v13) {
    goto LABEL_10;
  }
  if ((void *)v13 != a4)
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
LABEL_10:
    uint64_t v24 = (void *)v13;
    goto LABEL_12;
  }
  uint64_t v24 = v23;
  (*(void (**)(void *, void *))(*a4 + 24))(a4, v23);
LABEL_12:
  char v29 = a5;
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)&v25, a6);
  dispatch_async(v12, block);

  uint64_t v14 = __p;
  if (__p)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = v25;
  uint64_t v25 = 0;
  if (v16) {
    operator delete(v16);
  }
  if (v24 == v23)
  {
    (*(void (**)(void *))(v23[0] + 32))(v23);
    if (v27) {
LABEL_20:
    }
      char v27 = 0;
  }
  else
  {
    if (v24) {
      (*(void (**)(void))(*v24 + 40))();
    }
    if (v27) {
      goto LABEL_20;
    }
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1A24A9964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }

  if (v33)
  {
    std::__shared_weak_count::__release_weak(v33);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENSt3__18functionIFbRKNS9_10shared_ptrINS_15OverlayTileDataEEEEEEbNS9_13unordered_setINS_19OverlayTileDataTypeENS9_4hashISJ_EENS9_8equal_toISJ_EENS9_9allocatorISJ_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(os_unfair_lock_s **)(a1 + 32);
      if (!v5) {
        goto LABEL_32;
      }
      long long v6 = *(_OWORD *)(a1 + 64);
      long long v17 = *(_OWORD *)(a1 + 48);
      long long v18 = v6;
      char v19 = 0;
      if (*(unsigned char *)(a1 + 152))
      {
        char v20 = *(unsigned char *)(a1 + 153);
        char v19 = 1;
      }
      uint64_t v7 = *(void *)(a1 + 104);
      if (v7)
      {
        if (v7 == a1 + 80)
        {
          long long v22 = v21;
          (*(void (**)(uint64_t, void *))(*(void *)v7 + 24))(v7, v21);
LABEL_11:
          char v23 = *(unsigned char *)(a1 + 154);
          std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v24, a1 + 112);
          char v27 = 0;
          uint64_t v8 = (char *)operator new(0x80uLL);
          uint64_t v9 = v8;
          *(void *)uint64_t v8 = &unk_1EF57EA78;
          long long v10 = v18;
          *(_OWORD *)(v8 + 8) = v17;
          *(_OWORD *)(v8 + 24) = v10;
          v8[40] = 0;
          if (v19)
          {
            v8[41] = v20;
            v8[40] = 1;
          }
          id v11 = v8 + 48;
          uint64_t v12 = (uint64_t)v22;
          if (v22)
          {
            if (v22 == v21)
            {
              *((void *)v9 + 9) = v11;
              (*(void (**)(void *, char *))(v21[0] + 24))(v21, v9 + 48);
LABEL_18:
              v9[80] = v23;
              std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v9 + 88), (uint64_t)v24);
              char v27 = v9;
              os_unfair_lock_lock(v5 + 2);
              if (*(void *)&v5->_os_unfair_lock_opaque)
              {
                uint64_t v16 = *(void *)&v5->_os_unfair_lock_opaque;
                (*(void (**)(char *, uint64_t *))(*(void *)v9 + 48))(v9, &v16);
              }
              os_unfair_lock_unlock(v5 + 2);
              if (v27 == (char *)v26)
              {
                (*(void (**)(void *))(v26[0] + 32))(v26);
                uint64_t v13 = __p;
                if (!__p) {
                  goto LABEL_25;
                }
              }
              else
              {
                if (v27) {
                  (*(void (**)(void))(*(void *)v27 + 40))();
                }
                uint64_t v13 = __p;
                if (!__p)
                {
LABEL_25:
                  uint64_t v15 = v24[0];
                  v24[0] = 0;
                  if (v15) {
                    operator delete(v15);
                  }
                  if (v22 == v21)
                  {
                    (*(void (**)(void *))(v21[0] + 32))(v21);
                    if (!v19)
                    {
LABEL_32:
                      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
                        std::__shared_weak_count::__release_weak(v4);
                      }
                      return;
                    }
                  }
                  else
                  {
                    if (v22) {
                      (*(void (**)(void))(*v22 + 40))();
                    }
                    if (!v19) {
                      goto LABEL_32;
                    }
                  }
                  char v19 = 0;
                  goto LABEL_32;
                }
              }
              do
              {
                uint64_t v14 = (void *)*v13;
                operator delete(v13);
                uint64_t v13 = v14;
              }
              while (v14);
              goto LABEL_25;
            }
            uint64_t v12 = (*(uint64_t (**)(void))(*v22 + 16))();
          }
          *((void *)v9 + 9) = v12;
          goto LABEL_18;
        }
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
      }
      long long v22 = (void *)v7;
      goto LABEL_11;
    }
  }
}

void sub_1A24A9D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_unlock(v17);
  std::function<void ()(md::OverlayLayerDataSource *)>::~function((void *)(v18 - 104));
  _ZZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENSt3__18functionIFbRKNS9_10shared_ptrINS_15OverlayTileDataEEEEEEbNS9_13unordered_setINS_19OverlayTileDataTypeENS9_4hashISJ_EENS9_8equal_toISJ_EENS9_9allocatorISJ_EEEEEUb0_EN3__4D1Ev((uint64_t)&a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE80c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE112c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE152c22_ZTSN3geo8optionalIhEE(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152)) {
    *(unsigned char *)(a1 + 152) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = a1 + 80;
  uint64_t v5 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6 == v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(a1 + 80);
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v7) {
      return;
    }
    goto LABEL_11;
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7)
  {
LABEL_11:
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t __copy_helper_block_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE80c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE112c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE152c22_ZTSN3geo8optionalIhEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1 + 80;
  uint64_t v6 = *(void *)(a2 + 104);
  if (!v6) {
    goto LABEL_6;
  }
  if (v6 != a2 + 80)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
LABEL_6:
    *(void *)(a1 + 104) = v6;
    goto LABEL_8;
  }
  *(void *)(a1 + 104) = v5;
  (*(void (**)(void, uint64_t))(**(void **)(a2 + 104) + 24))(*(void *)(a2 + 104), a1 + 80);
LABEL_8:
  uint64_t result = std::unordered_set<md::OverlayTileDataType>::unordered_set(a1 + 112, a2 + 112);
  *(unsigned char *)(a1 + 152) = 0;
  if (*(unsigned char *)(a2 + 152))
  {
    *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
    *(unsigned char *)(a1 + 152) = 1;
  }
  return result;
}

void sub_1A24AA014(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENSt3__18functionIFbRKNS9_10shared_ptrINS_15OverlayTileDataEEEEEEbNS9_13unordered_setINS_19OverlayTileDataTypeENS9_4hashISJ_EENS9_8equal_toISJ_EENS9_9allocatorISJ_EEEEEUb0_EN3__4D1Ev(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5 == a1 + 40)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 32))(a1 + 40);
    if (!*(unsigned char *)(a1 + 32)) {
      return a1;
    }
    goto LABEL_9;
  }
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  if (*(unsigned char *)(a1 + 32)) {
LABEL_9:
  }
    *(unsigned char *)(a1 + 32) = 0;
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EEclEOSV_(uint64_t a1, gdc::LayerDataSource **a2)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40)) {
    int v4 = *(unsigned __int8 *)(a1 + 41);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6)
  {
    if (v6 == a1 + 48)
    {
      uint64_t v127 = v126;
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 24))(v6, v126);
      goto LABEL_9;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  uint64_t v127 = (void *)v6;
LABEL_9:
  int v110 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  long long v125 = 0;
  uint64_t v7 = (uint64_t *)*((void *)v5 + 7);
  uint64_t v112 = v5;
  if (!v7) {
    goto LABEL_61;
  }
  uint64_t v8 = 0;
  do
  {
    uint64_t v9 = v7[4];
    int v10 = *(unsigned __int8 *)(v9 + 8);
    int v11 = *(_DWORD *)v9;
    if (!v3 || (BOOL v12 = v4 == v10, LOBYTE(v10) = v4, v12))
    {
      int v13 = 1 << v10;
      double v14 = 1.0 / (double)v13;
      double v15 = v14 * (double)v11;
      if (v15 + v14 > *(double *)(a1 + 8))
      {
        double v16 = v14 * (double)(v13 + ~*(_DWORD *)(v7[4] + 4));
        double v17 = v16 + v14;
        BOOL v18 = v15 >= *(double *)(a1 + 24) || v17 <= *(double *)(a1 + 16);
        if (!v18 && v16 < *(double *)(a1 + 32))
        {
          if (v8 < v125)
          {
            *(unsigned char *)uint64_t v8 = *((unsigned char *)v7 + 16);
            gdc::LayerDataKey::LayerDataKey((uint64_t)v8 + 8, (uint64_t)(v7 + 3));
            *((unsigned char *)v8 + 96) = 0;
            if (*((unsigned char *)v7 + 112))
            {
              *((_DWORD *)v8 + 25) = *((_DWORD *)v7 + 29);
              *((unsigned char *)v8 + 96) = 1;
            }
            *((void *)v8 + 13) = v7[15];
            goto LABEL_12;
          }
          uint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v123) >> 4);
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) > 0x249249249249249) {
            abort();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((v125 - v123) >> 4) > v21) {
            unint64_t v21 = 0xDB6DB6DB6DB6DB6ELL * ((v125 - v123) >> 4);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v125 - v123) >> 4)) >= 0x124924924924924) {
            unint64_t v22 = 0x249249249249249;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22)
          {
            if (v22 > 0x249249249249249) {
              goto LABEL_206;
            }
            char v23 = operator new(112 * v22);
          }
          else
          {
            char v23 = 0;
          }
          uint64_t v8 = (gdc::LayerDataRequestKey *)&v23[4 * ((v8 - v123) >> 4)];
          uint64_t v24 = &v23[28 * v20];
          *uint64_t v24 = *((unsigned char *)v7 + 16);
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v24 + 8), (uint64_t)(v7 + 3));
          *((unsigned char *)v8 + 96) = 0;
          if (*((unsigned char *)v7 + 112))
          {
            v23[28 * v20 + 25] = *((_DWORD *)v7 + 29);
            *((unsigned char *)v8 + 96) = 1;
          }
          uint64_t v25 = (gdc::LayerDataRequestKey *)&v23[28 * v22];
          *(void *)&v23[28 * v20 + 26] = v7[15];
          char v27 = v123;
          uint64_t v26 = v124;
          if (v124 == v123)
          {
            uint64_t v123 = v8;
            long long v125 = v25;
          }
          else
          {
            uint64_t v111 = v25;
            uint64_t v28 = 0;
            do
            {
              char v29 = (char *)v8 + v28;
              uint64_t v30 = (char *)v26 + v28;
              *((unsigned char *)v8 + v28 - 112) = *((unsigned char *)v26 + v28 - 112);
              gdc::LayerDataKey::LayerDataKey((uint64_t)v8 + v28 - 104, (uint64_t)v26 + v28 - 104);
              *((unsigned char *)v8 + v28 - 16) = 0;
              if (*((unsigned char *)v26 + v28 - 16))
              {
                *((_DWORD *)v29 - 3) = *((_DWORD *)v30 - 3);
                *(v29 - 16) = 1;
              }
              *((void *)v29 - 1) = *((void *)v30 - 1);
              v28 -= 112;
            }
            while ((gdc::LayerDataRequestKey *)((char *)v26 + v28) != v27);
            uint64_t v31 = (gdc::LayerDataRequestKey *)((char *)v8 + v28);
            uint64_t v26 = v123;
            int8x8_t v32 = v124;
            uint64_t v123 = v31;
            long long v125 = v111;
            if (v124 == v26)
            {
              uint64_t v5 = v112;
              if (!v26) {
                goto LABEL_12;
              }
              goto LABEL_55;
            }
            uint64_t v5 = v112;
            do
            {
              if (*((unsigned char *)v32 - 16)) {
                *((unsigned char *)v32 - 16) = 0;
              }
              unint64_t v33 = (void *)*((void *)v32 - 12);
              if (v33 != *((void **)v32 - 10)) {
                free(v33);
              }
              int8x8_t v32 = (gdc::LayerDataRequestKey *)((char *)v32 - 112);
            }
            while (v32 != v26);
          }
          if (!v26)
          {
LABEL_12:
            uint64_t v8 = (gdc::LayerDataRequestKey *)((char *)v8 + 112);
            uint64_t v124 = v8;
            goto LABEL_13;
          }
LABEL_55:
          operator delete(v26);
          goto LABEL_12;
        }
      }
    }
LABEL_13:
    uint64_t v7 = (uint64_t *)*v7;
  }
  while (v7);
  for (uint64_t i = v123; i != v8; uint64_t i = (gdc::LayerDataRequestKey *)((char *)i + 112))
    gdc::LayerDataSource::cancelLayerDataRequest(v5, i);
LABEL_61:
  for (uint64_t j = (void *)*((void *)v5 + 12);
        j;
        uint64_t j = (void *)std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::erase((void *)v5 + 10, j))
  {
    while (1)
    {
      uint64_t v36 = j[4];
      int v37 = *(unsigned __int8 *)(v36 + 8);
      int v38 = *(_DWORD *)v36;
      if (!v3 || (BOOL v12 = v4 == v37, LOBYTE(v37) = v4, v12))
      {
        int v39 = 1 << v37;
        double v40 = 1.0 / (double)v39;
        double v41 = v40 * (double)v38;
        if (v41 + v40 > *(double *)(a1 + 8))
        {
          double v42 = v40 * (double)(v39 + ~*(_DWORD *)(j[4] + 4));
          double v43 = v42 + v40;
          BOOL v44 = v41 >= *(double *)(a1 + 24) || v43 <= *(double *)(a1 + 16);
          if (!v44 && v42 < *(double *)(a1 + 32)) {
            break;
          }
        }
      }
      uint64_t j = (void *)*j;
      if (!j) {
        goto LABEL_77;
      }
    }
  }
LABEL_77:
  for (k = (void *)*((void *)v5 + 17);
        k;
        k = (void *)std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::erase((void *)v5 + 15, k))
  {
    while (1)
    {
      uint64_t v47 = k[4];
      int v48 = *(unsigned __int8 *)(v47 + 8);
      int v49 = *(_DWORD *)v47;
      if (!v3 || (BOOL v12 = v4 == v48, LOBYTE(v48) = v4, v12))
      {
        int v50 = 1 << v48;
        double v51 = 1.0 / (double)v50;
        double v52 = v51 * (double)v49;
        if (v52 + v51 > *(double *)(a1 + 8))
        {
          double v53 = v51 * (double)(v50 + ~*(_DWORD *)(k[4] + 4));
          double v54 = v53 + v51;
          BOOL v55 = v52 >= *(double *)(a1 + 24) || v54 <= *(double *)(a1 + 16);
          if (!v55 && v53 < *(double *)(a1 + 32)) {
            break;
          }
        }
      }
      k = (void *)*k;
      if (!k) {
        goto LABEL_93;
      }
    }
  }
LABEL_93:
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  unint64_t v122 = 0;
  uint64_t v118 = 0;
  unint64_t v119 = 0;
  uint64_t v117 = 0;
  uint64_t v57 = *((void *)v5 + 2);
  uint64_t v58 = *(void *)(v57 + 8);
  if (v58 != v57)
  {
    while (2)
    {
      uint64_t v59 = *(void *)(v58 + 32);
      int v60 = *(unsigned __int8 *)(v59 + 8);
      int v61 = *(_DWORD *)v59;
      if (v3)
      {
        BOOL v12 = v4 == v60;
        LOBYTE(v60) = v4;
        if (!v12) {
          goto LABEL_95;
        }
      }
      int v62 = 1 << v60;
      double v63 = 1.0 / (double)v62;
      double v64 = v63 * (double)v61;
      if (v64 + v63 <= *(double *)(a1 + 8)) {
        goto LABEL_95;
      }
      double v65 = v63 * (double)(v62 + ~*(_DWORD *)(*(void *)(v58 + 32) + 4));
      double v66 = v65 + v63;
      BOOL v67 = v64 >= *(double *)(a1 + 24) || v66 <= *(double *)(a1 + 16);
      if (v67 || v65 >= *(double *)(a1 + 32)) {
        goto LABEL_95;
      }
      uint64_t v69 = *(atomic_ullong **)(v58 + 136);
      v115[0] = *(void **)(v58 + 128);
      v115[1] = v69;
      if (v69) {
        atomic_fetch_add_explicit(v69 + 1, 1uLL, memory_order_relaxed);
      }
      gdc::LayerDataSource::cancelLayerDataRequest(v112, (const gdc::LayerDataRequestKey *)(v58 + 16));
      if (!v127)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_206:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      if ((*(unsigned int (**)(void *, void **))(*v127 + 48))(v127, v115))
      {
        uint64_t v70 = v121;
        if ((unint64_t)v121 >= v122)
        {
          uint64_t v71 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>(&v120, v58 + 16);
        }
        else
        {
          *uint64_t v121 = *(unsigned char *)(v58 + 16);
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v70 + 8), v58 + 24);
          v70[96] = 0;
          if (*(unsigned char *)(v58 + 112))
          {
            *((_DWORD *)v70 + 25) = *(_DWORD *)(v58 + 116);
            v70[96] = 1;
          }
          *((void *)v70 + 13) = *(void *)(v58 + 120);
          uint64_t v71 = v70 + 112;
        }
        uint64_t v121 = v71;
        uint64_t v75 = (std::__shared_weak_count *)v115[1];
        if (!v115[1]) {
          goto LABEL_95;
        }
      }
      else if (v110)
      {
        uint64_t v72 = v118;
        if ((unint64_t)v118 >= v119)
        {
          uint64_t v74 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v117, *(__n128 *)v115);
        }
        else
        {
          *uint64_t v118 = v115[0];
          unint64_t v73 = (atomic_ullong *)v115[1];
          v72[1] = v115[1];
          if (v73) {
            atomic_fetch_add_explicit(v73 + 1, 1uLL, memory_order_relaxed);
          }
          uint64_t v74 = (__n128 *)(v72 + 2);
        }
        uint64_t v118 = (void **)v74;
        uint64_t v75 = (std::__shared_weak_count *)v115[1];
        if (!v115[1])
        {
LABEL_95:
          uint64_t v58 = *(void *)(v58 + 8);
          if (v58 == v57) {
            goto LABEL_130;
          }
          continue;
        }
      }
      else
      {
        *((void *)v115[0] + 19) = 1;
        uint64_t v75 = (std::__shared_weak_count *)v115[1];
        if (!v115[1]) {
          goto LABEL_95;
        }
      }
      break;
    }
    if (!atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
    goto LABEL_95;
  }
LABEL_130:
  if (v110)
  {
    int8x8_t v76 = (std::__shared_weak_count **)v117;
    unint64_t v77 = v118;
    if (v117 != v118)
    {
      do
      {
        std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v115, a1 + 88);
        md::OverlayLayerDataSource::_updateNonTileOverlays((uint64_t)v112, (uint64_t)*v76, v76[1], (uint64_t)v115);
        uint64_t v78 = __p;
        if (__p)
        {
          do
          {
            char v79 = (void *)*v78;
            operator delete(v78);
            uint64_t v78 = v79;
          }
          while (v79);
        }
        long long v80 = v115[0];
        v115[0] = 0;
        if (v80) {
          operator delete(v80);
        }
        v76 += 2;
      }
      while (v76 != (std::__shared_weak_count **)v77);
    }
  }
  uint64_t v82 = (unsigned __int8 *)v120;
  uint64_t v81 = v121;
  if (v120 != v121)
  {
    do
    {
      gdc::LayerDataStore::remove(*((void **)v112 + 2), v82);
      v82 += 112;
    }
    while (v82 != v81);
  }
  gdc::LayerDataStore::pending((gdc::LayerDataStore *)&v113, *((void *)v112 + 2));
  unint64_t v83 = v113;
  uint64_t v84 = v114;
  if (v113 != v114)
  {
    unint64_t v85 = v113;
    do
    {
      uint64_t v86 = *((void *)v85 + 2);
      int v87 = *(unsigned __int8 *)(v86 + 8);
      int v88 = *(_DWORD *)v86;
      if (!v3 || (BOOL v12 = v4 == v87, LOBYTE(v87) = v4, v12))
      {
        int v89 = 1 << v87;
        double v90 = 1.0 / (double)v89;
        double v91 = v90 * (double)v88;
        if (v91 + v90 > *(double *)(a1 + 8))
        {
          double v92 = v90 * (double)(v89 + ~*(_DWORD *)(*((void *)v85 + 2) + 4));
          double v93 = v92 + v90;
          BOOL v94 = v91 >= *(double *)(a1 + 24) || v93 <= *(double *)(a1 + 16);
          if (!v94 && v92 < *(double *)(a1 + 32))
          {
            uint64_t v96 = *((void *)v85 + 14);
            gdc::LayerDataSource::cancelLayerDataRequest(v112, v85);
            *(void *)(v96 + 152) = 1;
          }
        }
      }
      unint64_t v85 = (const gdc::LayerDataRequestKey *)((char *)v85 + 128);
    }
    while (v85 != v84);
  }
  std::mutex::lock((std::mutex *)((char *)v112 + 376));
  uint64_t v97 = *((void *)v112 + 58);
  if (v97) {
    (*(void (**)(uint64_t))(*(void *)v97 + 48))(v97);
  }
  std::mutex::unlock((std::mutex *)((char *)v112 + 376));
  if (!v83) {
    goto LABEL_172;
  }
  if (v83 == v84) {
    goto LABEL_171;
  }
  while (2)
  {
    uint64_t v98 = (std::__shared_weak_count *)*((void *)v84 - 1);
    if (v98 && !atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
      if (*((unsigned char *)v84 - 32)) {
LABEL_165:
      }
        *((unsigned char *)v84 - 32) = 0;
    }
    else if (*((unsigned char *)v84 - 32))
    {
      goto LABEL_165;
    }
    uint64_t v99 = (void *)*((void *)v84 - 14);
    if (v99 != *((void **)v84 - 12)) {
      free(v99);
    }
    uint64_t v84 = (const gdc::LayerDataRequestKey *)((char *)v84 - 128);
    if (v84 != v83) {
      continue;
    }
    break;
  }
  unint64_t v83 = v113;
LABEL_171:
  operator delete(v83);
LABEL_172:
  uint64_t v100 = (void **)v117;
  if (v117)
  {
    uint64_t v101 = v118;
    if (v118 != v117)
    {
      do
      {
        uint64_t v102 = (std::__shared_weak_count *)*(v101 - 1);
        if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
        v101 -= 2;
      }
      while (v101 != v100);
      uint64_t v100 = (void **)v117;
    }
    operator delete(v100);
  }
  uint8x8_t v103 = v120;
  if (v120)
  {
    for (m = v121; m != v103; m -= 112)
    {
      if (*(m - 16)) {
        *(m - 16) = 0;
      }
      uint64_t v105 = (void *)*((void *)m - 12);
      if (v105 != *((void **)m - 10)) {
        free(v105);
      }
    }
    operator delete(v103);
  }
  int v106 = v123;
  if (v123)
  {
    for (n = v124; n != v106; n = (gdc::LayerDataRequestKey *)((char *)n - 112))
    {
      if (*((unsigned char *)n - 16)) {
        *((unsigned char *)n - 16) = 0;
      }
      uint64_t v108 = (void *)*((void *)n - 12);
      if (v108 != *((void **)n - 10)) {
        free(v108);
      }
    }
    uint64_t v124 = v106;
    operator delete(v106);
  }
  uint64_t result = (uint64_t)v127;
  if (v127 == v126) {
    return (*(uint64_t (**)(void *))(v126[0] + 32))(v126);
  }
  if (v127) {
    return (*(uint64_t (**)(void))(*v127 + 40))();
  }
  return result;
}

void sub_1A24AAC10(_Unwind_Exception *exception_object)
{
}

void sub_1A24AAC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  std::vector<gdc::LayerDataRequestKey>::~vector[abi:nn180100](&a26);
  uint64_t v28 = *(void *)(v26 - 120);
  if (v28 == v26 - 144)
  {
    (*(void (**)(uint64_t))(*(void *)(v26 - 144) + 32))(v26 - 144);
    _Unwind_Resume(a1);
  }
  if (!v28) {
    _Unwind_Resume(a1);
  }
  (*(void (**)(uint64_t))(*(void *)v28 + 40))(v28);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EE18destroy_deallocateEv(char *__p)
{
  uint64_t v2 = (void *)*((void *)__p + 13);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = (void *)*((void *)__p + 11);
  *((void *)__p + 11) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (char *)*((void *)__p + 9);
  if (v5 == __p + 48)
  {
    (*(void (**)(char *))(*((void *)__p + 6) + 32))(__p + 48);
  }
  else if (v5)
  {
    (*(void (**)(char *))(*(void *)v5 + 40))(v5);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EE7destroyEv(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result == a1 + 48)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 48) + 32))(a1 + 48);
    if (!*(unsigned char *)(a1 + 40)) {
      return result;
    }
    goto LABEL_9;
  }
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  if (*(unsigned char *)(a1 + 40)) {
LABEL_9:
  }
    *(unsigned char *)(a1 + 40) = 0;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EE7__cloneEPNS0_6__baseISW_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57EA78;
  return _ZNSt3__122__compressed_pair_elemIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS1_15OverlayTileDataEEEEEEbNS_13unordered_setINS1_19OverlayTileDataTypeENS_4hashISK_EENS_8equal_toISK_EENS_9allocatorISK_EEEEEUb0_E3__4Li0ELb0EEC2B8nn180100IJRKSS_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t _ZNSt3__122__compressed_pair_elemIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS1_15OverlayTileDataEEEEEEbNS_13unordered_setINS1_19OverlayTileDataTypeENS_4hashISK_EENS_8equal_toISK_EENS_9allocatorISK_EEEEEUb0_E3__4Li0ELb0EEC2B8nn180100IJRKSS_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
    *(unsigned char *)(a1 + 32) = 1;
  }
  uint64_t v5 = a1 + 40;
  uint64_t v6 = *(void *)(a2 + 64);
  if (v6)
  {
    if (v6 == a2 + 40)
    {
      *(void *)(a1 + 64) = v5;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 64) + 24))(*(void *)(a2 + 64), a1 + 40);
      goto LABEL_8;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  *(void *)(a1 + 64) = v6;
LABEL_8:
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  std::unordered_set<md::OverlayTileDataType>::unordered_set(a1 + 80, a2 + 80);
  return a1;
}

void sub_1A24AAF68(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 + 32)) {
    _Unwind_Resume(exception_object);
  }
  *(unsigned char *)(v1 + 32) = 0;
  _Unwind_Resume(exception_object);
}

void *_ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x80uLL);
  *uint64_t v2 = &unk_1EF57EA78;
  _ZNSt3__122__compressed_pair_elemIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS1_15OverlayTileDataEEEEEEbNS_13unordered_setINS1_19OverlayTileDataTypeENS_4hashISK_EENS_8equal_toISK_EENS_9allocatorISK_EEEEEUb0_E3__4Li0ELb0EEC2B8nn180100IJRKSS_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1A24AB05C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57EA78;
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  long long v4 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5 == a1 + 48)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 32))(a1 + 48);
    if (*(unsigned char *)(a1 + 40)) {
LABEL_9:
    }
      *(unsigned char *)(a1 + 40) = 0;
  }
  else
  {
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    }
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_9;
    }
  }
  JUMPOUT(0x1A6239270);
}

uint64_t _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource14invalidateRectERKN2gm3BoxIdLi2EEEN3geo8optionalIhEENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISL_EENS_8equal_toISL_EENS_9allocatorISL_EEEEEUb0_E3__4NSQ_IST_EEFvPS3_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57EA78;
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  long long v4 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5 == a1 + 48)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 32))(a1 + 48);
    if (!*(unsigned char *)(a1 + 40)) {
      return a1;
    }
    goto LABEL_9;
  }
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  if (*(unsigned char *)(a1 + 40)) {
LABEL_9:
  }
    *(unsigned char *)(a1 + 40) = 0;
  return a1;
}

void md::OverlayLayerDataSource::invalidate(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 792);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 800);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = **(id **)(a1 + 584);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN2md22OverlayLayerDataSource10invalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEEbNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEE_block_invoke;
  block[3] = &__block_descriptor_121_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE48c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE80c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE_e5_v8__0l;
  block[4] = v7;
  double v16 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a2[3];
  if (!v10) {
    goto LABEL_8;
  }
  if ((void *)v10 != a2)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
LABEL_8:
    BOOL v18 = (void *)v10;
    goto LABEL_10;
  }
  BOOL v18 = v17;
  (*(void (**)(void *, void *))(*a2 + 24))(a2, v17);
LABEL_10:
  char v21 = a3;
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)&v19, a4);
  dispatch_async(v9, block);

  int v11 = __p;
  if (__p)
  {
    do
    {
      BOOL v12 = (void *)*v11;
      operator delete(v11);
      int v11 = v12;
    }
    while (v12);
  }
  int v13 = v19;
  char v19 = 0;
  if (v13) {
    operator delete(v13);
  }
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
    double v14 = v16;
    if (v16) {
LABEL_18:
    }
      std::__shared_weak_count::__release_weak(v14);
  }
  else
  {
    if (v18) {
      (*(void (**)(void))(*v18 + 40))();
    }
    double v14 = v16;
    if (v16) {
      goto LABEL_18;
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1A24AB478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }

  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN2md22OverlayLayerDataSource10invalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEEbNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      long long v4 = v3;
      uint64_t v5 = *(os_unfair_lock_s **)(a1 + 32);
      if (!v5)
      {
LABEL_30:
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      uint64_t v6 = *(void *)(a1 + 72);
      if (v6)
      {
        if (v6 == a1 + 48)
        {
          double v17 = v16;
          (*(void (**)(uint64_t, void *))(*(void *)v6 + 24))(v6, v16);
LABEL_9:
          char v18 = *(unsigned char *)(a1 + 120);
          std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v19, a1 + 80);
          uint64_t v22 = 0;
          uint64_t v8 = operator new(0x58uLL);
          *uint64_t v8 = &unk_1EF57EA30;
          uint64_t v9 = (char *)(v8 + 1);
          uint64_t v10 = (uint64_t)v17;
          if (v17)
          {
            if (v17 == v16)
            {
              v8[4] = v9;
              (*(void (**)(void *, char *))(v16[0] + 24))(v16, v9);
LABEL_14:
              *((unsigned char *)v8 + 40) = v18;
              std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v8 + 6), (uint64_t)v19);
              uint64_t v22 = v8;
              os_unfair_lock_lock(v5 + 2);
              if (*(void *)&v5->_os_unfair_lock_opaque)
              {
                uint64_t v15 = *(void *)&v5->_os_unfair_lock_opaque;
                (*(void (**)(void *, uint64_t *))(*v8 + 48))(v8, &v15);
              }
              os_unfair_lock_unlock(v5 + 2);
              if (v22 == v21)
              {
                (*(void (**)(void *))(v21[0] + 32))(v21);
                BOOL v12 = __p;
                if (!__p)
                {
LABEL_21:
                  double v14 = v19[0];
                  v19[0] = 0;
                  if (v14) {
                    operator delete(v14);
                  }
                  if (v17 == v16)
                  {
                    (*(void (**)(void *))(v16[0] + 32))(v16);
                  }
                  else if (v17)
                  {
                    (*(void (**)(void *, uint64_t))(*v17 + 40))(v17, v11);
                  }
                  goto LABEL_30;
                }
              }
              else
              {
                if (v22) {
                  (*(void (**)(void *, uint64_t))(*v22 + 40))(v22, v11);
                }
                BOOL v12 = __p;
                if (!__p) {
                  goto LABEL_21;
                }
              }
              do
              {
                int v13 = (void *)*v12;
                operator delete(v12);
                BOOL v12 = v13;
              }
              while (v13);
              goto LABEL_21;
            }
            uint64_t v10 = (*(uint64_t (**)(void *, uint64_t))(*v17 + 16))(v17, v7);
          }
          v8[4] = v10;
          goto LABEL_14;
        }
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
      }
      double v17 = (void *)v6;
      goto LABEL_9;
    }
  }
}

void sub_1A24AB820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  os_unfair_lock_unlock(v12);
  std::function<void ()(md::OverlayLayerDataSource *)>::~function((void *)(v13 - 88));
  _ZZZN2md22OverlayLayerDataSource10invalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEEbNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEEEUb1_EN3__6D1Ev(&a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE48c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE80c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  long long v4 = a1 + 6;
  uint64_t v5 = (void *)a1[10];
  a1[10] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[9];
  if (v6 == v4)
  {
    (*(void (**)(void *))(*v4 + 32))(a1 + 6);
    uint64_t v7 = (std::__shared_weak_count *)a1[5];
    if (!v7) {
      return;
    }
    goto LABEL_9;
  }
  if (v6) {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[5];
  if (v7)
  {
LABEL_9:
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t __copy_helper_block_ea8_32c75_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_22OverlayLayerDataSourceEEEEE48c68_ZTSNSt3__18functionIFbRKNS_10shared_ptrIN2md15OverlayTileDataEEEEEE80c107_ZTSKNSt3__113unordered_setIN2md19OverlayTileDataTypeENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1 + 6;
  uint64_t v6 = a2[9];
  if (v6)
  {
    if ((void *)v6 == a2 + 6)
    {
      a1[9] = v5;
      (*(void (**)(void, void *))(*(void *)a2[9] + 24))(a2[9], a1 + 6);
      return std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  a1[9] = v6;
  return std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
}

void sub_1A24ABA7C(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void *_ZZZN2md22OverlayLayerDataSource10invalidateENSt3__18functionIFbRKNS1_10shared_ptrINS_15OverlayTileDataEEEEEEbNS1_13unordered_setINS_19OverlayTileDataTypeENS1_4hashISB_EENS1_8equal_toISB_EENS1_9allocatorISB_EEEEEUb1_EN3__6D1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[5];
  a1[5] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[3];
  if (v5 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EEclEOSN_(uint64_t a1, uint64_t *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    if (v4 == a1 + 8)
    {
      double v41 = v40;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 24))(v5, v40);
    }
    else
    {
      double v41 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    double v41 = 0;
  }
  int v6 = *(unsigned __int8 *)(a1 + 40);
  gdc::LayerDataSource::cancelAllLayerDataRequests((gdc::LayerDataSource *)v3);
  int v37 = 0;
  int v38 = 0;
  unint64_t v39 = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  uint8x8_t v34 = 0;
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v7 + 8);
  if (v8 != v7)
  {
    while (1)
    {
      uint64_t v9 = *(atomic_ullong **)(v8 + 136);
      v32[0] = *(void **)(v8 + 128);
      v32[1] = v9;
      if (v9) {
        atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
      }
      if (!v41)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
      if ((*(unsigned int (**)(void *, void **))(*v41 + 48))(v41, v32)) {
        break;
      }
      if (v6)
      {
        BOOL v12 = v35;
        if ((unint64_t)v35 >= v36)
        {
          double v14 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)&v34, *(__n128 *)v32);
        }
        else
        {
          *unint64_t v35 = v32[0];
          uint64_t v13 = (atomic_ullong *)v32[1];
          v12[1] = v32[1];
          if (v13) {
            atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
          }
          double v14 = (__n128 *)(v12 + 2);
        }
        unint64_t v35 = (void **)v14;
        uint64_t v15 = (std::__shared_weak_count *)v32[1];
        if (!v32[1]) {
          goto LABEL_8;
        }
LABEL_29:
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        goto LABEL_8;
      }
      *((void *)v32[0] + 19) = 1;
      uint64_t v15 = (std::__shared_weak_count *)v32[1];
      if (v32[1]) {
        goto LABEL_29;
      }
LABEL_8:
      uint64_t v8 = *(void *)(v8 + 8);
      if (v8 == v7) {
        goto LABEL_31;
      }
    }
    uint64_t v10 = v38;
    if ((unint64_t)v38 >= v39)
    {
      uint64_t v11 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>((void **)&v37, v8 + 16);
    }
    else
    {
      *int v38 = *(unsigned char *)(v8 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v10 + 8), v8 + 24);
      v10[96] = 0;
      if (*(unsigned char *)(v8 + 112))
      {
        *((_DWORD *)v10 + 25) = *(_DWORD *)(v8 + 116);
        v10[96] = 1;
      }
      *((void *)v10 + 13) = *(void *)(v8 + 120);
      uint64_t v11 = v10 + 112;
    }
    int v38 = v11;
    uint64_t v15 = (std::__shared_weak_count *)v32[1];
    if (!v32[1]) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_31:
  if (v6)
  {
    double v16 = (std::__shared_weak_count **)v34;
    double v17 = v35;
    if (v34 != v35)
    {
      uint64_t v18 = a1 + 48;
      do
      {
        std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)v32, v18);
        md::OverlayLayerDataSource::_updateNonTileOverlays(v3, (uint64_t)*v16, v16[1], (uint64_t)v32);
        char v19 = __p;
        if (__p)
        {
          do
          {
            uint64_t v20 = (void *)*v19;
            operator delete(v19);
            char v19 = v20;
          }
          while (v20);
        }
        char v21 = v32[0];
        v32[0] = 0;
        if (v21) {
          operator delete(v21);
        }
        v16 += 2;
      }
      while (v16 != (std::__shared_weak_count **)v17);
    }
  }
  uint64_t v22 = v37;
  uint64_t v23 = v38;
  if (v37 != v38)
  {
    uint64_t v24 = v37;
    do
    {
      gdc::LayerDataStore::remove(*(void **)(v3 + 16), v24);
      v24 += 112;
    }
    while (v24 != v23);
  }
  std::mutex::lock((std::mutex *)(v3 + 376));
  uint64_t v25 = *(void *)(v3 + 464);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 48))(v25);
  }
  std::mutex::unlock((std::mutex *)(v3 + 376));
  uint64_t v26 = (void **)v34;
  if (v34)
  {
    char v27 = v35;
    if (v35 != v34)
    {
      do
      {
        uint64_t v28 = (std::__shared_weak_count *)*(v27 - 1);
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        v27 -= 2;
      }
      while (v27 != v26);
      uint64_t v26 = (void **)v34;
      uint64_t v22 = v37;
    }
    operator delete(v26);
  }
  if (v22)
  {
    for (uint64_t i = v38; i != v22; i -= 112)
    {
      if (*(i - 16)) {
        *(i - 16) = 0;
      }
      uint64_t v30 = (void *)*((void *)i - 12);
      if (v30 != *((void **)i - 10)) {
        free(v30);
      }
    }
    int v38 = v22;
    operator delete(v22);
  }
  uint64_t result = (uint64_t)v41;
  if (v41 == v40) {
    return (*(uint64_t (**)(void *))(v40[0] + 32))(v40);
  }
  if (v41) {
    return (*(uint64_t (**)(void))(*v41 + 40))();
  }
  return result;
}

void sub_1A24ABFD4(_Unwind_Exception *exception_object)
{
}

void sub_1A24ABFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23)
{
  if (a23 == &a20)
  {
    (*(void (**)(uint64_t *))(a20 + 32))(&a20);
    _Unwind_Resume(a1);
  }
  if (!a23) {
    _Unwind_Resume(a1);
  }
  (*(void (**)(void))(*a23 + 40))();
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EE18destroy_deallocateEv(char *__p)
{
  uint64_t v2 = (void *)*((void *)__p + 8);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = __p + 8;
  uint64_t v5 = (void *)*((void *)__p + 6);
  *((void *)__p + 6) = 0;
  if (v5) {
    operator delete(v5);
  }
  int v6 = (char *)*((void *)__p + 4);
  if (v6 == v4)
  {
    (*(void (**)(char *))(*(void *)v4 + 32))(__p + 8);
  }
  else if (v6)
  {
    (*(void (**)(char *))(*(void *)v6 + 40))(v6);
  }
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EE7destroyEv(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (void *)a1[6];
  a1[6] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t result = a1[4];
  if ((void *)result == v4)
  {
    uint64_t v8 = *(uint64_t (**)(void *))(*v4 + 32);
    return v8(a1 + 1);
  }
  else if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v7();
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57EA30;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      *(void *)(a2 + 32) = a2 + 8;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2 + 8);
    }
    else
    {
      *(void *)(a2 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a2 + 32) = 0;
  }
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return std::unordered_set<md::OverlayTileDataType>::unordered_set(a2 + 48, a1 + 48);
}

void sub_1A24AC300(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 == v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 32))(v1);
    _Unwind_Resume(exception_object);
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNKSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = operator new(0x58uLL);
  *uint64_t v2 = &unk_1EF57EA30;
  uint64_t v3 = (char *)(v2 + 1);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t, char *))(*(void *)v4 + 24))(v4, v3);
      goto LABEL_6;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  v2[4] = v4;
LABEL_6:
  *((unsigned char *)v2 + 40) = *(unsigned char *)(a1 + 40);
  std::unordered_set<md::OverlayTileDataType>::unordered_set((uint64_t)(v2 + 6), a1 + 48);
  return v2;
}

void sub_1A24AC448(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EED0Ev(void *a1)
{
  *a1 = &unk_1EF57EA30;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (void *)a1[6];
  a1[6] = 0;
  if (v5) {
    operator delete(v5);
  }
  int v6 = (void *)a1[4];
  if (v6 == v4)
  {
    (*(void (**)(void *))(*v4 + 32))(a1 + 1);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  JUMPOUT(0x1A6239270);
}

void *_ZNSt3__110__function6__funcIZZN2md22OverlayLayerDataSource10invalidateENS_8functionIFbRKNS_10shared_ptrINS2_15OverlayTileDataEEEEEEbNS_13unordered_setINS2_19OverlayTileDataTypeENS_4hashISD_EENS_8equal_toISD_EENS_9allocatorISD_EEEEEUb1_E3__6NSI_ISL_EEFvPS3_EED1Ev(void *a1)
{
  *a1 = &unk_1EF57EA30;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (void *)a1[6];
  a1[6] = 0;
  if (v5) {
    operator delete(v5);
  }
  int v6 = (void *)a1[4];
  if (v6 == v4)
  {
    (*(void (**)(void *))(*v4 + 32))(a1 + 1);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  return a1;
}

void md::LabelLineSegment::LabelLineSegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF536348;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a3 + 88);
  *(_WORD *)(a1 + 34) = *(_WORD *)(a3 + 8);
  *(_WORD *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 38) = *(_DWORD *)(a3 + 72);
  *(_DWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 44) = *(_DWORD *)(a3 + 4);
  *(_WORD *)(a1 + 46) = *(_DWORD *)(a3 + 60);
  operator new();
}

{
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF536348;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a3 + 88);
  *(_WORD *)(a1 + 34) = *(_WORD *)(a3 + 8);
  *(_WORD *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 38) = *(_DWORD *)(a3 + 72);
  *(_DWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 46) = *(_DWORD *)(a3 + 60);
  operator new();
}

void sub_1A24AC820(_Unwind_Exception *a1)
{
  std::unique_ptr<md::LabelLineSegment::ExtendedData>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<md::LabelLineSegment::ExtendedData>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x1A6239270](v2, 0x1020C40457A241BLL);
  }
  return a1;
}

void sub_1A24ACA6C(_Unwind_Exception *a1)
{
  std::unique_ptr<md::LabelLineSegment::ExtendedData>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A24ACE08(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 104);
  _Unwind_Resume(a1);
}

void md::LabelLineSegment::createLists(unsigned __int16 *a1, uint64_t a2)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  if (a1[23] >= 2u)
  {
    md::LabelLineSegment::createPointList((uint64_t)a1, a2);
    uint64_t v4 = (*(uint64_t (**)(unsigned __int16 *))(*(void *)a1 + 64))(a1);
    uint64_t v5 = (_DWORD *)v4;
    size_t v6 = a1[23];
    if (v6 > 0x2000)
    {
      uint64_t v9 = (char *)malloc_type_malloc(a1[23], 0x100004077774924uLL);
      if (!v9) {
        return;
      }
      uint64_t v8 = v9;
      size_t v10 = a1[23];
      unsigned int v11 = a1[23];
    }
    else
    {
      MEMORY[0x1F4188790](v4);
      uint64_t v8 = (char *)v25 - v7;
      bzero((char *)v25 - v7, v6);
      size_t v10 = v6;
      unsigned int v11 = v6;
    }
    uint64_t v12 = *(void *)(a2 + 32);
    uint64_t v13 = *(unsigned int *)(a2 + 56);
    size_t v14 = 8 * v10;
    if (v11 > 0x400)
    {
      double v16 = (double *)malloc_type_malloc(8 * v10, 0x100004000313F17uLL);
      if (!v16)
      {
LABEL_13:
        free(v16);
LABEL_14:
        if (v6 > 0x2000) {
          free(v8);
        }
        return;
      }
      size_t v14 = 8 * a1[23];
    }
    else
    {
      MEMORY[0x1F4188790](v9);
      double v16 = (double *)((char *)v25 - v15);
      bzero((char *)v25 - v15, v14);
    }
    bzero(v16, v14);
    md::LabelLineSegment::computeRadiusOfCurvature((float *)(v12 + 8 * v13), a1[23], *(double **)(a2 + 16), (uint64_t)v16);
    uint64_t v17 = a1[23];
    if (a1[23])
    {
      *uint64_t v5 = 32512;
      if (v17 != 1)
      {
        uint64_t v18 = v17 - 1;
        char v19 = v16 + 1;
        uint64_t v20 = (char *)v5 + 7;
        do
        {
          double v24 = 1.0;
          if (v18 != 1) {
            double v24 = *v19;
          }
          *(_WORD *)(v20 - 3) = 32512;
          *uint64_t v20 = 0;
          double v21 = 0.05078125 / v24;
          unsigned int v22 = 31 - __clz(v21);
          if (v21) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          *(v20 - 1) = v23;
          ++v19;
          v20 += 4;
          --v18;
        }
        while (v18);
      }
    }
    if (v11 < 0x401) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
}

{
  uint64_t v4;
  _DWORD *v5;
  size_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  unsigned char *v20;
  double v21;
  unsigned int v22;
  char v23;
  double v24;
  void v25[2];

  v25[1] = *MEMORY[0x1E4F143B8];
  if (a1[23] >= 2u)
  {
    md::LabelLineSegment::createPointList((uint64_t)a1, a2);
    uint64_t v4 = (*(uint64_t (**)(unsigned __int16 *))(*(void *)a1 + 64))(a1);
    uint64_t v5 = (_DWORD *)v4;
    size_t v6 = a1[23];
    if (v6 > 0x2000)
    {
      uint64_t v9 = (char *)malloc_type_malloc(a1[23], 0x100004077774924uLL);
      if (!v9) {
        return;
      }
      uint64_t v8 = v9;
      size_t v10 = a1[23];
      unsigned int v11 = a1[23];
    }
    else
    {
      MEMORY[0x1F4188790](v4);
      uint64_t v8 = (char *)v25 - v7;
      bzero((char *)v25 - v7, v6);
      size_t v10 = v6;
      unsigned int v11 = v6;
    }
    uint64_t v12 = *(void *)(a2 + 32);
    uint64_t v13 = *(unsigned int *)(a2 + 56);
    size_t v14 = 8 * v10;
    if (v11 > 0x400)
    {
      double v16 = (double *)malloc_type_malloc(8 * v10, 0x100004000313F17uLL);
      if (!v16)
      {
LABEL_13:
        free(v16);
LABEL_14:
        if (v6 > 0x2000) {
          free(v8);
        }
        return;
      }
      size_t v14 = 8 * a1[23];
    }
    else
    {
      MEMORY[0x1F4188790](v9);
      double v16 = (double *)((char *)v25 - v15);
      bzero((char *)v25 - v15, v14);
    }
    bzero(v16, v14);
    md::LabelLineSegment::computeRadiusOfCurvature((float *)(v12 + 8 * v13), a1[23], *(double **)(a2 + 16), (uint64_t)v16);
    uint64_t v17 = a1[23];
    if (a1[23])
    {
      *uint64_t v5 = 32512;
      if (v17 != 1)
      {
        uint64_t v18 = v17 - 1;
        char v19 = v16 + 1;
        uint64_t v20 = (char *)v5 + 7;
        do
        {
          double v24 = 1.0;
          if (v18 != 1) {
            double v24 = *v19;
          }
          *(_WORD *)(v20 - 3) = 32512;
          *uint64_t v20 = 0;
          double v21 = 1.953125 / v24;
          unsigned int v22 = 31 - __clz(v21);
          if (v21) {
            char v23 = v22;
          }
          else {
            char v23 = 0;
          }
          *(v20 - 1) = v23;
          ++v19;
          v20 += 4;
          --v18;
        }
        while (v18);
      }
    }
    if (v11 < 0x401) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double *v21;
  char *v22;
  unsigned char *v23;
  char v24;
  double v25;
  unsigned int v26;
  char v27;
  double v28;
  void v29[2];

  v29[1] = *MEMORY[0x1E4F143B8];
  if (a1[23] >= 2u)
  {
    md::LabelLineSegment::createPointList((uint64_t)a1, a2);
    uint64_t v4 = (*(uint64_t (**)(unsigned __int16 *))(*(void *)a1 + 64))(a1);
    uint64_t v5 = v4;
    size_t v6 = a1[23];
    if (v6 > 0x2000)
    {
      size_t v10 = (char *)malloc_type_malloc(a1[23], 0x100004077774924uLL);
      if (!v10) {
        return;
      }
      uint64_t v8 = v10;
      uint64_t v9 = a1[23];
    }
    else
    {
      MEMORY[0x1F4188790](v4);
      uint64_t v8 = (char *)v29 - v7;
      bzero((char *)v29 - v7, v6);
      uint64_t v9 = v6;
    }
    unsigned int v11 = memset(v8, 127, v9);
    v8[a1[23] - 1] = 1;
    *uint64_t v8 = 1;
    uint64_t v12 = *(void *)(a2 + 32);
    uint64_t v13 = *(unsigned int *)(a2 + 56);
    size_t v14 = a1[23];
    uint64_t v15 = 8 * v14;
    if (v14 > 0x400)
    {
      uint64_t v17 = (double *)malloc_type_malloc(8 * v14, 0x100004000313F17uLL);
      if (!v17)
      {
LABEL_13:
        free(v17);
LABEL_14:
        if (v6 > 0x2000) {
          free(v8);
        }
        return;
      }
      uint64_t v15 = 8 * a1[23];
    }
    else
    {
      MEMORY[0x1F4188790](v11);
      uint64_t v17 = (double *)((char *)v29 - v16);
      bzero((char *)v29 - v16, 8 * v14);
    }
    bzero(v17, v15);
    md::LabelLineSegment::computeRadiusOfCurvature((float *)(v12 + 8 * v13), a1[23], *(double **)(a2 + 16), (uint64_t)v17);
    uint64_t v18 = a1[23];
    if (a1[23])
    {
      char v19 = *v8;
      *(unsigned char *)uint64_t v5 = *v8;
      *(unsigned char *)(v5 + 1) = v19;
      *(_WORD *)(v5 + 2) = 0;
      if (v18 != 1)
      {
        uint64_t v20 = v18 - 1;
        double v21 = v17 + 1;
        unsigned int v22 = v8 + 1;
        char v23 = (unsigned char *)(v5 + 7);
        do
        {
          uint64_t v28 = 1.0;
          if (v20 != 1) {
            uint64_t v28 = *v21;
          }
          double v24 = *v22++;
          *(v23 - 3) = v24;
          *(v23 - 2) = v24;
          *char v23 = 0;
          uint64_t v25 = 0.05078125 / v28;
          uint64_t v26 = 31 - __clz(v25);
          if (v25) {
            char v27 = v26;
          }
          else {
            char v27 = 0;
          }
          *(v23 - 1) = v27;
          ++v21;
          v23 += 4;
          --v20;
        }
        while (v20);
      }
    }
    if (v14 < 0x401) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
}

void md::LabelTextStyleGroup::~LabelTextStyleGroup(void **this)
{
  *this = &unk_1EF53BBA0;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  JUMPOUT(0x1A6239270);
}

{
  *this = &unk_1EF53BBA0;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
}

void md::LabelIconStyleGroup::~LabelIconStyleGroup(md::LabelIconStyleGroup *this)
{
  *(void *)this = &unk_1EF53BB60;
  if (*((unsigned char *)this + 100)) {
    *((unsigned char *)this + 100) = 0;
  }
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF53BB60;
  if (*((unsigned char *)this + 100)) {
    *((unsigned char *)this + 100) = 0;
  }
}

void md::LabelLineStyleGroup::~LabelLineStyleGroup(md::LabelLineStyleGroup *this)
{
  *(void *)this = &unk_1EF53BB80;
  if (*((char *)this + 95) < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 12) + 40))(*((void *)this + 12), *((void *)this + 9), *((void *)this + 11) & 0x7FFFFFFFFFFFFFFFLL);
  }
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF53BB80;
  if (*((char *)this + 95) < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 12) + 40))(*((void *)this + 12), *((void *)this + 9), *((void *)this + 11) & 0x7FFFFFFFFFFFFFFFLL);
  }
}

void md::LabelPointStyleGroup::~LabelPointStyleGroup(md::LabelPointStyleGroup *this)
{
  md::LabelPointStyleGroup::~LabelPointStyleGroup(this);
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF53D9A8;
  if (*((char *)this + 263) < 0)
  {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 33) + 40))(*((void *)this + 33), *((void *)this + 30), *((void *)this + 32) & 0x7FFFFFFFFFFFFFFFLL);
    if ((*((char *)this + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 199) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*((char *)this + 231) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  (*(void (**)(void, void, uint64_t))(**((void **)this + 29) + 40))(*((void *)this + 29), *((void *)this + 26), *((void *)this + 28) & 0x7FFFFFFFFFFFFFFFLL);
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 167) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  (*(void (**)(void, void, uint64_t))(**((void **)this + 25) + 40))(*((void *)this + 25), *((void *)this + 22), *((void *)this + 24) & 0x7FFFFFFFFFFFFFFFLL);
  if ((*((char *)this + 167) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*((char *)this + 135) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  (*(void (**)(void, void, uint64_t))(**((void **)this + 21) + 40))(*((void *)this + 21), *((void *)this + 18), *((void *)this + 20) & 0x7FFFFFFFFFFFFFFFLL);
  if ((*((char *)this + 135) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*((char *)this + 103) & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    (*(void (**)(void, void, uint64_t))(**((void **)this + 13) + 40))(*((void *)this + 13), *((void *)this + 10), *((void *)this + 12) & 0x7FFFFFFFFFFFFFFFLL);
    return;
  }
LABEL_12:
  (*(void (**)(void, void, uint64_t))(**((void **)this + 17) + 40))(*((void *)this + 17), *((void *)this + 14), *((void *)this + 16) & 0x7FFFFFFFFFFFFFFFLL);
  if (*((char *)this + 103) < 0) {
    goto LABEL_13;
  }
}

void md::LabelComponentStyleGroup::~LabelComponentStyleGroup(md::LabelComponentStyleGroup *this)
{
}

void md::LabelAnnotationStyleGroup::~LabelAnnotationStyleGroup(md::LabelAnnotationStyleGroup *this)
{
}

void md::LabelAnimationStyleGroup::~LabelAnimationStyleGroup(md::LabelAnimationStyleGroup *this)
{
}

float md::LabelDisplayCoreStyleGroup::setZoom(md::LabelDisplayCoreStyleGroup *this, float a2)
{
  float v2 = fminf(fmaxf(a2, 0.0), 23.0);
  unsigned int v3 = (int)v2;
  if ((int)v2 >= 0x17) {
    unsigned int v4 = 23;
  }
  else {
    unsigned int v4 = (int)v2;
  }
  float v5 = *((float *)this + v4);
  if ((*((void *)this + 12) >> v4))
  {
    if (v3 >= 0x16) {
      unsigned int v3 = 22;
    }
    float v6 = *((float *)this + v3 + 1);
    if (*((unsigned char *)this + 104) || (float v7 = 0.0, v5 != 0.0) && v6 != 0.0) {
      float v7 = v5 + (float)((float)(v6 - v5) * (float)(v2 - (float)v4));
    }
  }
  else
  {
    float v7 = *((float *)this + v4);
  }
  float result = fmaxf(v7, 0.01);
  *((float *)this + 28) = result;
  return result;
}

void altitude::TileSetNode::~TileSetNode(altitude::TileSetNode *this)
{
  *(void *)this = &unk_1EF5688D0;
  float v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(void *)this = &unk_1EF5688D0;
  float v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void altitude::RefineTileSet::~RefineTileSet(altitude::RefineTileSet *this)
{
  *(void *)this = &unk_1EF568C98;
  float v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;

  *(void *)this = &unk_1EF568C98;
  float v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void altitude::TileSetNode::collectSubTreeInSet(altitude::TileSetNode *a1, uint64_t a2, altitude::CoarsenTileSet *a3)
{
  float v7 = (void *)*((void *)a1 + 5);
  float v6 = (void *)*((void *)a1 + 6);
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      if (++v7 == v6)
      {
        float v7 = (void *)*((void *)a1 + 6);
        goto LABEL_5;
      }
    }
  }
  if (v7 != v6) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v9 = (void *)*((void *)a1 + 8);
  uint64_t v8 = (void *)*((void *)a1 + 9);
  if (v9 != v8)
  {
    while (*v9 != a2)
    {
      if (++v9 == v8)
      {
        uint64_t v9 = (void *)*((void *)a1 + 9);
        break;
      }
    }
  }
  if (v9 == v8)
  {
    uint64_t v29 = *(void *)(a2 + 304);
    uint64_t v28 = *(void *)(a2 + 312);
    if (v28 != v29)
    {
      unint64_t v30 = 0;
      unsigned int v31 = 1;
      do
      {
        int8x8_t v32 = *(altitude::Tile **)(v29 + 32 * v30);
        if (v32)
        {
          altitude::TileSetNode::collectSubTreeInSet(a1, v32, a3);
          uint64_t v29 = *(void *)(a2 + 304);
          uint64_t v28 = *(void *)(a2 + 312);
        }
        unint64_t v30 = v31++;
      }
      while (v30 < (v28 - v29) >> 5);
    }
  }
  else
  {
LABEL_11:
    unsigned int v11 = (char *)*((void *)a3 + 3);
    unint64_t v10 = *((void *)a3 + 4);
    if ((unint64_t)v11 >= v10)
    {
      uint64_t v12 = (char *)*((void *)a3 + 2);
      uint64_t v13 = (v11 - v12) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        abort();
      }
      uint64_t v15 = v10 - (void)v12;
      if (v15 >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v17 = operator new(8 * v16);
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v18 = &v17[8 * v13];
      char v19 = &v17[8 * v16];
      *uint64_t v18 = a2;
      uint64_t v20 = v18 + 1;
      if (v11 == v12)
      {
        uint64_t v12 = v11;
      }
      else
      {
        unint64_t v21 = v11 - v12 - 8;
        if (v21 < 0x58) {
          goto LABEL_45;
        }
        if ((unint64_t)(v12 - v17) < 0x20) {
          goto LABEL_45;
        }
        uint64_t v22 = (v21 >> 3) + 1;
        char v23 = &v17[8 * v13 - 16];
        double v24 = v11 - 16;
        uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *char v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        v18 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
        v11 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_45:
          do
          {
            uint64_t v27 = *((void *)v11 - 1);
            v11 -= 8;
            *--uint64_t v18 = v27;
          }
          while (v11 != v12);
          uint64_t v12 = (char *)*((void *)a3 + 2);
        }
      }
      *((void *)a3 + 2) = v18;
      *((void *)a3 + 3) = v20;
      *((void *)a3 + 4) = v19;
      if (v12) {
        operator delete(v12);
      }
      *((void *)a3 + 3) = v20;
    }
    else
    {
      *(void *)unsigned int v11 = a2;
      *((void *)a3 + 3) = v11 + 8;
    }
  }
}

void altitude::CoarsenTileSet::~CoarsenTileSet(altitude::CoarsenTileSet *this)
{
  *(void *)this = &unk_1EF568E18;
  float v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;

  *(void *)this = &unk_1EF568E18;
  float v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

void altitude::QuickSurfaceManager::~QuickSurfaceManager(void **this)
{
  *this = &unk_1EF56A2E8;
  altitude::QuickSurfaceManager::clear((altitude::QuickSurfaceManager *)this);
  unint64_t v10 = this + 13;
  std::vector<altitude::QuickSurfaceManager::Tile>::__destroy_vector::operator()[abi:nn180100](&v10);
  float v2 = (char *)this[10];
  if (v2)
  {
    unsigned int v3 = (char *)this[11];
    unsigned int v4 = this[10];
    if (v3 != v2)
    {
      float v5 = v3 - 24;
      float v6 = v3 - 24;
      float v7 = v3 - 24;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v2;
        float v6 = v7;
      }
      while (!v9);
      unsigned int v4 = this[10];
    }
    this[11] = v2;
    operator delete(v4);
  }
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;
  void **v10;

  *this = &unk_1EF56A2E8;
  altitude::QuickSurfaceManager::clear((altitude::QuickSurfaceManager *)this);
  unint64_t v10 = this + 13;
  std::vector<altitude::QuickSurfaceManager::Tile>::__destroy_vector::operator()[abi:nn180100](&v10);
  float v2 = (char *)this[10];
  if (v2)
  {
    unsigned int v3 = (char *)this[11];
    unsigned int v4 = this[10];
    if (v3 != v2)
    {
      float v5 = v3 - 24;
      float v6 = v3 - 24;
      float v7 = v3 - 24;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v2;
        float v6 = v7;
      }
      while (!v9);
      unsigned int v4 = this[10];
    }
    this[11] = v2;
    operator delete(v4);
  }
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void altitude::QuickSurfaceManager::clear(altitude::QuickSurfaceManager *this)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(*((void *)this + 4) + 8) + 40) + 8);
  if (v2)
  {
    unsigned int v3 = (uint64_t *)*((void *)this + 13);
    unsigned int v4 = (uint64_t *)*((void *)this + 14);
    while (v3 != v4)
    {
      uint64_t v5 = *v3;
      float v6 = (std::__shared_weak_count *)v3[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v7 = (std::__shared_weak_count *)v3[3];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(void **)(v5 + 48);
      BOOL v9 = *(void **)(v5 + 56);
      if (v8 != v9)
      {
        unint64_t v10 = *(char **)(v2 + 224);
        unsigned int v11 = *(char **)(v2 + 232);
        do
        {
          unint64_t v14 = v10;
          if (v11 != v10)
          {
            uint64_t v16 = 0;
            unint64_t v17 = (v11 - v10) >> 4;
            if (v17 <= 1) {
              uint64_t v18 = 1;
            }
            else {
              uint64_t v18 = (v11 - v10) >> 4;
            }
            char v19 = v10;
            do
            {
              if (*(void *)v19 == *v8)
              {
                uint64_t v12 = &v10[16 * v16];
                uint64_t v13 = &v10[16 * v17];
                uint64_t v15 = *((void *)v13 - 2);
                unint64_t v14 = v13 - 16;
                *(void *)uint64_t v12 = v15;
                v12[8] = v14[8];
                *(void *)(v2 + 232) = v14;
                goto LABEL_12;
              }
              ++v16;
              v19 += 16;
            }
            while (v18 != v16);
            unint64_t v14 = v11;
          }
LABEL_12:
          ++v8;
          unsigned int v11 = v14;
        }
        while (v8 != v9);
      }
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (v6)
        {
LABEL_24:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      else if (v6)
      {
        goto LABEL_24;
      }
      v3 += 4;
    }
  }
  uint64_t v20 = *((void *)this + 13);
  for (uint64_t i = *((void *)this + 14); i != v20; i -= 32)
  {
    uint64_t v22 = *(std::__shared_weak_count **)(i - 8);
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      char v23 = *(std::__shared_weak_count **)(i - 24);
      if (v23)
      {
LABEL_34:
        if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    else
    {
      char v23 = *(std::__shared_weak_count **)(i - 24);
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *((void *)this + 14) = v20;
  uint64_t v25 = (void (***)(void))*((void *)this + 10);
  double v24 = (void (***)(void))*((void *)this + 11);
  if (v24 != v25)
  {
    long long v26 = v24 - 3;
    uint64_t v27 = v24 - 3;
    uint64_t v28 = v24 - 3;
    do
    {
      uint64_t v29 = *v28;
      v28 -= 3;
      (*v29)(v27);
      v26 -= 3;
      BOOL v30 = v27 == v25;
      uint64_t v27 = v28;
    }
    while (!v30);
  }
  *((void *)this + 11) = v25;
}

void std::vector<altitude::QuickSurfaceManager::Tile>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  unsigned int v4 = (char *)v1[1];
  uint64_t v5 = **a1;
  if (v4 == v2) {
    goto LABEL_14;
  }
  do
  {
    float v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      float v7 = (std::__shared_weak_count *)*((void *)v4 - 3);
      if (!v7) {
        goto LABEL_4;
      }
    }
    else
    {
      float v7 = (std::__shared_weak_count *)*((void *)v4 - 3);
      if (!v7) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v4 -= 32;
  }
  while (v4 != v2);
  uint64_t v5 = **a1;
LABEL_14:
  v1[1] = v2;
  operator delete(v5);
}

void altitude::QuickSurfaceManager::update(altitude::QuickSurfaceManager *this)
{
  if (!*((unsigned char *)this + 64))
  {
    altitude::QuickSurfaceManager::clear(this);
    return;
  }
  uint64_t v2 = **((void **)this + 4);
  uint64_t v3 = *(void *)(v2 + 72);
  double v4 = *(double *)(v3 + 32);
  double v5 = cos(3.14159265 - *(double *)(v3 + 40));
  uint64_t v6 = *((void *)this + 10);
  uint64_t v7 = *((void *)this + 11);
  if (v6 != v7) {
    goto LABEL_3;
  }
  if (*((void *)this + 13) == *((void *)this + 14))
  {
    double v54 = sqrt((v4 + v5 * -12756274.0) * v4 + 4.06806316e13);
    double v55 = sqrt((v54 + 6378137.0) * (v54 + -6378137.0));
    uint64_t v56 = *(void *)(v3 + 24);
    *(_OWORD *)((char *)this + 40) = *(_OWORD *)(v3 + 8);
    *((void *)this + 7) = v56;
    for (uint64_t i = *(void *)(*(void *)(v2 + 688) + 96); ; i += 8)
    {
      if (*(unsigned char *)(*(void *)i + 164))
      {
        uint64_t v58 = *(void *)(*(void *)i + 32);
        if (v58) {
          break;
        }
      }
    }
    uint64_t v59 = *(void *)(v58 + 288);
    double v60 = *((double *)this + 5);
    long double v61 = cos(v60 + v60) * -559.82 + 111132.92;
    long double v62 = v61 + cos(v60 * 4.0) * 1.175;
    long double v63 = v62 + cos(v60 * 6.0) * -0.0023;
    long double v64 = tan(v60 * 0.5 + 0.78103484);
    double v65 = log(v64);
    long double v66 = tan(v60 * 0.5 + 0.789761487);
    long double v67 = fabs((log(v66) - v65) * 0.159154943) * v55 / v63;
    unsigned int v68 = log2(trunc(31.4159265 / v67));
    *((_DWORD *)this + 32) = v68;
    double v69 = *((double *)this + 6) + 3.14159265;
    long double v70 = fmod(v69 + v67, 6.28318531);
    double v71 = fmod(v70 + 6.28318531, 6.28318531) + -3.14159265;
    long double v72 = fmod(v69 - v67, 6.28318531);
    double v73 = fmod(v72 + 6.28318531, 6.28318531) + -3.14159265;
    long double v74 = v67 + v60;
    double v75 = fmax(v71, v73);
    double v76 = v60 - v67;
    double v77 = fmin(v73, v71);
    double v78 = v74 * 0.5 + 0.785398163;
    if (v74 > 1.57079633) {
      double v78 = 1.57079633;
    }
    long double v79 = tan(v78);
    double v80 = v75 * 0.159154943 + 0.5;
    double v81 = log(v79) * 0.159154943 + 0.5;
    double v82 = v76 * 0.5 + 0.785398163;
    if (v76 < -1.57079633) {
      double v82 = 0.0;
    }
    long double v83 = tan(v82);
    long double v84 = log(v83);
    double v85 = (double)(1 << v68);
    unsigned int v86 = vcvtmd_s64_f64(v80 * v85);
    int v87 = ~(-1 << v68) - (1 << v68);
    unsigned int v88 = vcvtmd_s64_f64((v77 * 0.159154943 + 0.5) * v85);
    unsigned int v89 = vcvtmd_s64_f64(v81 * v85) + v87 + 1;
    unsigned int v90 = vcvtmd_s64_f64((v84 * 0.159154943 + 0.5) * v85) + v87 + 1;
    if (v90 > v89 || v88 > v86)
    {
LABEL_78:
      altitude::QuickSurfaceManager::clear(this);
      *((unsigned char *)this + 64) = 0;
      return;
    }
    unsigned int v125 = v86;
    unsigned int v121 = v89;
    unsigned int v122 = v88;
    uint64_t v123 = v59;
    while (1)
    {
      uint64_t v93 = *((void *)this + 9);
      LODWORD(v127) = *((_DWORD *)this + 32);
      DWORD1(v127) = v90;
      *((void *)&v127 + 1) = v88;
      uint64_t v128 = v59;
      __int16 v129 = 256;
      char v130 = 1;
      int v131 = -1007026176;
      (*(void (**)(void *__return_ptr))(*(void *)v93 + 104))(&v132);
      BOOL v94 = (void *)*((void *)this + 11);
      unint64_t v95 = *((void *)this + 12);
      if ((unint64_t)v94 < v95)
      {
        void *v94 = off_1EF5677B0;
        uint64_t v96 = v133;
        v94[1] = v133;
        uint64_t v97 = v134;
        v94[2] = v134;
        if (v97)
        {
          atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v96 = v94[1];
        }
        if (v96) {
          atomic_fetch_add((atomic_uint *volatile)(v96 + 128), 1u);
        }
        uint64_t v98 = v94 + 3;
        goto LABEL_114;
      }
      uint64_t v99 = *((void *)this + 10);
      unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v94 - v99) >> 3);
      unint64_t v101 = v100 + 1;
      if (v100 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_124;
      }
      unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - v99) >> 3);
      if (2 * v102 > v101) {
        unint64_t v101 = 2 * v102;
      }
      if (v102 >= 0x555555555555555) {
        unint64_t v101 = 0xAAAAAAAAAAAAAAALL;
      }
      if (v101 > 0xAAAAAAAAAAAAAAALL) {
LABEL_125:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v103 = 24 * v101;
      uint64_t v104 = (char *)operator new(24 * v101);
      uint64_t v105 = &v104[24 * v100];
      *(void *)uint64_t v105 = off_1EF5677B0;
      uint64_t v106 = v133;
      id v107 = v134;
      *((void *)v105 + 1) = v133;
      *((void *)v105 + 2) = v107;
      if (v107)
      {
        atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v106 = *((void *)v105 + 1);
      }
      if (v106) {
        atomic_fetch_add((atomic_uint *volatile)(v106 + 128), 1u);
      }
      uint64_t v108 = &v104[v103];
      uint64_t v98 = v105 + 24;
      unint64_t v109 = (char *)*((void *)this + 10);
      int v110 = (char *)*((void *)this + 11);
      if (v110 == v109)
      {
        *((void *)this + 10) = v105;
        *((void *)this + 11) = v98;
        *((void *)this + 12) = v108;
        if (!v110) {
          goto LABEL_114;
        }
      }
      else
      {
        uint64_t v111 = (uint64_t)&v104[24 * v100 - 24];
        uint64_t v112 = &v104[24 * v100];
        do
        {
          *((void *)v112 - 3) = off_1EF5677B0;
          v112 -= 24;
          uint64_t v113 = *((void *)v110 - 2);
          *((void *)v112 + 1) = v113;
          uint64_t v114 = *((void *)v110 - 1);
          *((void *)v112 + 2) = v114;
          if (v114)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v114 + 8), 1uLL, memory_order_relaxed);
            uint64_t v113 = *((void *)v105 - 2);
          }
          if (v113) {
            atomic_fetch_add((atomic_uint *volatile)(v113 + 128), 1u);
          }
          v110 -= 24;
          v111 -= 24;
          uint64_t v105 = v112;
        }
        while (v110 != v109);
        int v110 = (char *)*((void *)this + 10);
        unint64_t v115 = (char *)*((void *)this + 11);
        *((void *)this + 10) = v112;
        *((void *)this + 11) = v98;
        *((void *)this + 12) = v108;
        if (v115 != v110)
        {
          uint64_t v116 = v115 - 24;
          uint64_t v117 = v115 - 24;
          uint64_t v118 = (void (***)(char *))(v115 - 24);
          do
          {
            unint64_t v119 = *v118;
            v118 -= 3;
            (*v119)(v117);
            v116 -= 24;
            BOOL v53 = v117 == v110;
            uint64_t v117 = (char *)v118;
          }
          while (!v53);
          uint64_t v59 = v123;
          unsigned int v86 = v125;
        }
        if (!v110) {
          goto LABEL_114;
        }
      }
      operator delete(v110);
LABEL_114:
      *((void *)this + 11) = v98;
      uint64_t v132 = off_1EF5677B0;
      if (v133) {
        atomic_fetch_add((atomic_uint *volatile)(v133 + 128), 0xFFFFFFFF);
      }
      uint64_t v120 = v134;
      if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
      if (++v88 > v86)
      {
        ++v90;
        unsigned int v88 = v122;
        if (v90 > v121)
        {
          uint64_t v6 = *((void *)this + 10);
          uint64_t v7 = *((void *)this + 11);
          if (v6 == v7) {
            goto LABEL_78;
          }
LABEL_3:
          if (v7 != v6)
          {
            unint64_t v8 = 0;
            while (1)
            {
              uint64_t v10 = *(void *)(v6 + 24 * v8 + 8);
              pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
              int v11 = *(_DWORD *)(v10 + 160);
              pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
              if (v11)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 40))(v10))
                {
                  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v10 + 48))(&v127, v10);
                  uint64_t v12 = *(void *)(v10 + 280);
                  uint64_t v13 = *(std::__shared_weak_count **)(v10 + 288);
                  if (v13) {
                    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  long long v14 = v127;
                  if (*((void *)&v127 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v127 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  if (v13) {
                    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  *(void *)&long long v15 = v12;
                  *((void *)&v15 + 1) = v13;
                  unint64_t v17 = (char *)*((void *)this + 14);
                  unint64_t v16 = *((void *)this + 15);
                  if ((unint64_t)v17 >= v16)
                  {
                    char v19 = (char *)*((void *)this + 13);
                    uint64_t v20 = (v17 - v19) >> 5;
                    unint64_t v21 = v20 + 1;
                    if ((unint64_t)(v20 + 1) >> 59) {
                      goto LABEL_124;
                    }
                    long long v124 = v15;
                    long long v126 = v14;
                    uint64_t v22 = v16 - (void)v19;
                    if (v22 >> 4 > v21) {
                      unint64_t v21 = v22 >> 4;
                    }
                    BOOL v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0;
                    unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
                    if (!v23) {
                      unint64_t v24 = v21;
                    }
                    if (v24 >> 59) {
                      goto LABEL_125;
                    }
                    uint64_t v25 = 32 * v24;
                    long long v26 = (char *)operator new(32 * v24);
                    uint64_t v27 = &v26[32 * v20];
                    uint64_t v28 = &v26[v25];
                    *(_OWORD *)uint64_t v27 = v126;
                    *((_OWORD *)v27 + 1) = v124;
                    uint64_t v18 = v27 + 32;
                    if (v17 != v19)
                    {
                      do
                      {
                        long long v29 = *((_OWORD *)v17 - 2);
                        v17 -= 32;
                        *((_OWORD *)v27 - 2) = v29;
                        v27 -= 32;
                        *(void *)unint64_t v17 = 0;
                        *((void *)v17 + 1) = 0;
                        *((_OWORD *)v27 + 1) = *((_OWORD *)v17 + 1);
                        *((void *)v17 + 2) = 0;
                        *((void *)v17 + 3) = 0;
                      }
                      while (v17 != v19);
                      unint64_t v17 = (char *)*((void *)this + 13);
                      BOOL v30 = (char *)*((void *)this + 14);
                      *((void *)this + 13) = v27;
                      *((void *)this + 14) = v18;
                      *((void *)this + 15) = v28;
                      while (2)
                      {
                        if (v30 == v17) {
                          goto LABEL_36;
                        }
                        unsigned int v31 = (std::__shared_weak_count *)*((void *)v30 - 1);
                        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                          std::__shared_weak_count::__release_weak(v31);
                          int8x8_t v32 = (std::__shared_weak_count *)*((void *)v30 - 3);
                          if (v32) {
                            goto LABEL_31;
                          }
                        }
                        else
                        {
                          int8x8_t v32 = (std::__shared_weak_count *)*((void *)v30 - 3);
                          if (v32)
                          {
LABEL_31:
                            if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                              std::__shared_weak_count::__release_weak(v32);
                            }
                          }
                        }
                        v30 -= 32;
                        continue;
                      }
                    }
                    *((void *)this + 13) = v27;
                    *((void *)this + 14) = v18;
                    *((void *)this + 15) = v28;
LABEL_36:
                    if (v17) {
                      operator delete(v17);
                    }
                  }
                  else
                  {
                    *(_OWORD *)unint64_t v17 = v14;
                    *((_OWORD *)v17 + 1) = v15;
                    uint64_t v18 = v17 + 32;
                  }
                  *((void *)this + 14) = v18;
                  unint64_t v33 = *(uint64_t **)(v127 + 48);
                  uint8x8_t v34 = *(uint64_t **)(v127 + 56);
                  while (v33 != v34)
                  {
                    uint64_t v35 = *v33++;
                    md::realistic::GlobeRenderLayer::registerNoCullingRenderable(*(void **)(*(void *)(*(void *)(*((void *)this + 4) + 8) + 40) + 8), v35, 3);
                  }
                  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                    std::__shared_weak_count::__release_weak(v13);
                  }
                  unint64_t v36 = (std::__shared_weak_count *)*((void *)&v127 + 1);
                  if (*((void *)&v127 + 1)
                    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v127 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                    std::__shared_weak_count::__release_weak(v36);
                  }
                }
                uint64_t v37 = *((void *)this + 10);
                uint64_t v38 = *((void *)this + 11);
                uint64_t v39 = v37 + 24 * v8;
                uint64_t v42 = *(void *)(v39 + 8);
                double v41 = (uint64_t *)(v39 + 8);
                uint64_t v40 = v42;
                if (v42) {
                  atomic_fetch_add((atomic_uint *volatile)(v40 + 128), 0xFFFFFFFF);
                }
                uint64_t v43 = v37 + 24 * (0xAAAAAAAAAAAAAAABLL * ((v38 - v37) >> 3) - 1);
                uint64_t v44 = *(void *)(v43 + 8);
                uint64_t v45 = *(void *)(v43 + 16);
                if (v45) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
                }
                *double v41 = v44;
                uint64_t v46 = v37 + 24 * v8;
                uint64_t v47 = *(std::__shared_weak_count **)(v46 + 16);
                *(void *)(v46 + 16) = v45;
                if (v47)
                {
                  if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                    std::__shared_weak_count::__release_weak(v47);
                  }
                  uint64_t v44 = *v41;
                }
                if (v44) {
                  atomic_fetch_add((atomic_uint *volatile)(v44 + 128), 1u);
                }
                uint64_t v48 = *((void *)this + 11);
                if (v48 == *((void *)this + 10))
                {
                  if (*((void *)this + 12) - v48 == -24)
                  {
                    for (uint64_t j = (void *)(v48 + 8); ; j += 3)
                    {
                      *(j - 1) = off_1EF5677B0;
                      *uint64_t j = 0;
                      j[1] = 0;
                      v48 += 24;
                    }
                  }
LABEL_124:
                  abort();
                }
                BOOL v9 = (void (***)(void))(v48 - 24);
                uint64_t v49 = v48 - 24;
                int v50 = (void (***)(void))(v48 - 24);
                double v51 = (void (***)(void))(v48 - 24);
                do
                {
                  double v52 = *v51;
                  v51 -= 3;
                  (*v52)(v50);
                  v49 -= 24;
                  BOOL v53 = v50 == v9;
                  int v50 = v51;
                }
                while (!v53);
                *((void *)this + 11) = v9;
              }
              else
              {
                ++v8;
                BOOL v9 = (void (***)(void))*((void *)this + 11);
              }
              uint64_t v6 = *((void *)this + 10);
              if (v8 >= 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v6) >> 3)) {
                return;
              }
            }
          }
          return;
        }
      }
    }
  }
}

void md::StandardCommandBufferSelector::~StandardCommandBufferSelector(md::StandardCommandBufferSelector *this)
{
  *(void *)this = &unk_1EF53F0B8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1EF53F0B8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void non-virtual thunk to'altitude::LabelDataManagerPrivate::onTileComponentDataLoaded(altitude::LabelDataManagerPrivate *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
}

void altitude::LabelDataManagerPrivate::onTileComponentDataLoaded(altitude::LabelDataManagerPrivate *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  if (!*((void *)this + 10) || *((_DWORD *)a3 + 2) != 3) {
    return;
  }
  uint64_t v7 = *((void *)a3 + 11);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a3 + 12);
  if (v6
    && (atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *, altitude::Tile *))v6->__on_zero_shared)(v6, a2);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7) {
      goto LABEL_13;
    }
  }
  else if (!v7)
  {
    goto LABEL_13;
  }
  long long v8 = *(_OWORD *)((char *)a3 + 88);
  uint64_t v9 = *((void *)a3 + 12);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  long long v20 = v8;
  uint64_t v10 = *((void *)this + 10);
  if (!v10) {
    goto LABEL_27;
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v10 + 48))(v10, &v20);
  int v11 = (std::__shared_weak_count *)*((void *)&v20 + 1);
  if (*((void *)&v20 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_13:
  uint64_t v13 = *((void *)a3 + 13);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a3 + 14);
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (!v13) {
        return;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *, altitude::Tile *))v12->__on_zero_shared)(v12, a2);
      std::__shared_weak_count::__release_weak(v12);
      if (!v13) {
        return;
      }
    }
    long long v14 = (std::__shared_weak_count *)*((void *)a3 + 14);
    uint64_t v18 = *((void *)a3 + 13);
    char v19 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (!v13) {
      return;
    }
    uint64_t v18 = *((void *)a3 + 13);
    char v19 = 0;
  }
  uint64_t v15 = *((void *)this + 10);
  if (!v15)
  {
LABEL_27:
    std::__throw_bad_function_call[abi:nn180100]();
    return;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v18);
  unint64_t v16 = v19;
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void non-virtual thunk to'altitude::LabelDataManagerPrivate::~LabelDataManagerPrivate(altitude::LabelDataManagerPrivate *this)
{
}

{
  uint64_t v2;
  altitude::LabelDataManagerPrivate *v3;
  altitude::LabelDataManagerPrivate *v4;

  *((void *)this - 1) = &unk_1EF56ACF0;
  *(void *)this = &unk_1EF56AD30;
  uint64_t v2 = *(void *)(*((void *)this + 1) + 688);
  if (v2) {
    altitude::TileManager::unregisterTileListener(v2, (uint64_t)this);
  }
  uint64_t v3 = (altitude::LabelDataManagerPrivate *)*((void *)this + 9);
  if (v3 == (altitude::LabelDataManagerPrivate *)((char *)this + 48))
  {
    (*(void (**)(char *))(*((void *)this + 6) + 32))((char *)this + 48);
  }
  else if (v3)
  {
    (*(void (**)(altitude::LabelDataManagerPrivate *))(*(void *)v3 + 40))(v3);
  }
  double v4 = (altitude::LabelDataManagerPrivate *)*((void *)this + 5);
  if (v4 == (altitude::LabelDataManagerPrivate *)((char *)this + 16))
  {
    (*(void (**)(char *))(*((void *)this + 2) + 32))((char *)this + 16);
  }
  else if (v4)
  {
    (*(void (**)(altitude::LabelDataManagerPrivate *))(*(void *)v4 + 40))(v4);
  }
}

void altitude::LabelDataManagerPrivate::~LabelDataManagerPrivate(altitude::LabelDataManagerPrivate *this)
{
  *(void *)this = &unk_1EF56ACF0;
  uint64_t v2 = (char *)this + 8;
  *((void *)this + 1) = &unk_1EF56AD30;
  uint64_t v3 = *(void *)(*((void *)this + 2) + 688);
  if (v3) {
    altitude::TileManager::unregisterTileListener(v3, (uint64_t)v2);
  }
  double v4 = (altitude::LabelDataManagerPrivate *)*((void *)this + 10);
  if (v4 == (altitude::LabelDataManagerPrivate *)((char *)this + 56))
  {
    (*(void (**)(char *))(*((void *)this + 7) + 32))((char *)this + 56);
  }
  else if (v4)
  {
    (*(void (**)(altitude::LabelDataManagerPrivate *))(*(void *)v4 + 40))(v4);
  }
  double v5 = (altitude::LabelDataManagerPrivate *)*((void *)this + 6);
  if (v5 == (altitude::LabelDataManagerPrivate *)((char *)this + 24))
  {
    (*(void (**)(char *))(*((void *)this + 3) + 32))((char *)this + 24);
  }
  else if (v5)
  {
    (*(void (**)(altitude::LabelDataManagerPrivate *))(*(void *)v5 + 40))(v5);
  }
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  uint64_t v3;
  altitude::LabelDataManagerPrivate *v4;
  altitude::LabelDataManagerPrivate *v5;

  *(void *)this = &unk_1EF56ACF0;
  uint64_t v2 = (char *)this + 8;
  *((void *)this + 1) = &unk_1EF56AD30;
  uint64_t v3 = *(void *)(*((void *)this + 2) + 688);
  if (v3) {
    altitude::TileManager::unregisterTileListener(v3, (uint64_t)v2);
  }
  double v4 = (altitude::LabelDataManagerPrivate *)*((void *)this + 10);
  if (v4 == (altitude::LabelDataManagerPrivate *)((char *)this + 56))
  {
    (*(void (**)(char *))(*((void *)this + 7) + 32))((char *)this + 56);
  }
  else if (v4)
  {
    (*(void (**)(altitude::LabelDataManagerPrivate *))(*(void *)v4 + 40))(v4);
  }
  double v5 = (altitude::LabelDataManagerPrivate *)*((void *)this + 6);
  if (v5 == (altitude::LabelDataManagerPrivate *)((char *)this + 24))
  {
    (*(void (**)(char *))(*((void *)this + 3) + 32))((char *)this + 24);
  }
  else if (v5)
  {
    (*(void (**)(altitude::LabelDataManagerPrivate *))(*(void *)v5 + 40))(v5);
  }
}

uint64_t altitude::LabelDataManagerPrivate::flushLabelTiles(uint64_t this)
{
  *(unsigned char *)(this + 88) = 1;
  return this;
}

uint64_t altitude::LabelDataManagerPrivate::setLabelDataCallback(uint64_t a1, void *a2)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)(a1 + 56);
  double v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      uint64_t v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      uint64_t v9 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v3 != v8)
  {
    double v5 = v9;
    uint64_t v6 = *(void **)(a1 + 80);
    if (v9 == v8)
    {
      if (v6 == v3)
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), v8);
        (*(void (**)(void))(**(void **)(a1 + 80) + 32))(*(void *)(a1 + 80));
        *(void *)(a1 + 80) = 0;
        uint64_t v9 = v8;
        (*(void (**)(void *, void *))(v10[0] + 24))(v10, v3);
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v3);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = *(void **)(a1 + 80);
      }
      *(void *)(a1 + 80) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(void *, void *))(*(void *)(a1 + 56) + 24))(v3, v8);
      (*(void (**)(void))(**(void **)(a1 + 80) + 32))(*(void *)(a1 + 80));
      *(void *)(a1 + 80) = v9;
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = v5;
    }
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

uint64_t altitude::LabelDataManagerPrivate::setCreateLabelTileCallback(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 3;
  double v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      uint64_t v28 = v27;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v27);
    }
    else
    {
      uint64_t v28 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  std::__function::__value_func<std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::swap[abi:nn180100](v27, v3);
  uint64_t result = (uint64_t)v28;
  if (v28 == v27)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v27[0] + 32))(v27);
  }
  else if (v28)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v28 + 40))(v28);
  }
  uint64_t v6 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(a1[2] + 856) + 136) + 8) + 40)
                              + 40)
                  + 56);
  if (v6)
  {
    uint64_t v7 = (void *)a1[6];
    if (!v7)
    {
      long long v20 = 0;
      uint64_t v9 = v6 + 18;
      uint64_t v28 = 0;
      goto LABEL_20;
    }
    if (v7 == v3)
    {
      long long v20 = v19;
      (*(void (**)(void *, void *))(*v3 + 24))(v3, v19);
      long long v8 = v20;
      uint64_t v9 = v6 + 18;
      if (v20)
      {
LABEL_14:
        if (v8 == v19)
        {
          uint64_t v28 = v27;
          (*(void (**)(void *, void *))(v19[0] + 24))(v19, v27);
        }
        else
        {
          uint64_t v28 = (void *)(*(uint64_t (**)(void *))(*v8 + 16))(v8);
        }
LABEL_20:
        std::__function::__value_func<std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::swap[abi:nn180100](v27, v9);
        if (v28 == v27)
        {
          (*(void (**)(void *))(v27[0] + 32))(v27);
        }
        else if (v28)
        {
          (*(void (**)(void *))(*v28 + 40))(v28);
        }
        uint64_t v10 = v6[13];
        int v11 = (void *)v6[21];
        if (v11)
        {
          if (v11 == v9)
          {
            long long v26 = v25;
            (*(void (**)(void *, void *))(*v9 + 24))(v9, v25);
            int v11 = v26;
            uint64_t v12 = (void *)(v10 + 192);
            if (!v26) {
              goto LABEL_32;
            }
          }
          else
          {
            int v11 = (void *)(*(uint64_t (**)(void *))(*v11 + 16))(v11);
            long long v26 = v11;
            uint64_t v12 = (void *)(v10 + 192);
            if (!v11) {
              goto LABEL_32;
            }
          }
          if (v11 == v25)
          {
            uint64_t v28 = v27;
            (*(void (**)(void *, void *))(v25[0] + 24))(v25, v27);
LABEL_33:
            std::__function::__value_func<std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::swap[abi:nn180100](v27, v12);
            if (v28 == v27)
            {
              (*(void (**)(void *))(v27[0] + 32))(v27);
            }
            else if (v28)
            {
              (*(void (**)(void *))(*v28 + 40))(v28);
            }
            if (v26 == v25)
            {
              (*(void (**)(void *))(v25[0] + 32))(v25);
            }
            else if (v26)
            {
              (*(void (**)(void))(*v26 + 40))();
            }
            uint64_t v13 = v6[14];
            long long v14 = (void *)v6[21];
            if (v14)
            {
              if (v14 == v9)
              {
                unint64_t v24 = v23;
                (*(void (**)(void *, void *))(*v9 + 24))(v9, v23);
                long long v14 = v24;
                uint64_t v15 = (void *)(v13 + 192);
                if (!v24) {
                  goto LABEL_49;
                }
              }
              else
              {
                long long v14 = (void *)(*(uint64_t (**)(void *))(*v14 + 16))(v14);
                unint64_t v24 = v14;
                uint64_t v15 = (void *)(v13 + 192);
                if (!v14) {
                  goto LABEL_49;
                }
              }
              if (v14 == v23)
              {
                uint64_t v28 = v27;
                (*(void (**)(void *, void *))(v23[0] + 24))(v23, v27);
LABEL_50:
                std::__function::__value_func<std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::swap[abi:nn180100](v27, v15);
                if (v28 == v27)
                {
                  (*(void (**)(void *))(v27[0] + 32))(v27);
                }
                else if (v28)
                {
                  (*(void (**)(void *))(*v28 + 40))(v28);
                }
                if (v24 == v23)
                {
                  (*(void (**)(void *))(v23[0] + 32))(v23);
                }
                else if (v24)
                {
                  (*(void (**)(void))(*v24 + 40))();
                }
                uint64_t v16 = v6[15];
                unint64_t v17 = (void *)v6[21];
                if (v17)
                {
                  if (v17 == v9)
                  {
                    uint64_t v22 = v21;
                    (*(void (**)(void *, void *))(*v9 + 24))(v9, v21);
                    unint64_t v17 = v22;
                    uint64_t v18 = (void *)(v16 + 192);
                    if (!v22) {
                      goto LABEL_66;
                    }
                  }
                  else
                  {
                    unint64_t v17 = (void *)(*(uint64_t (**)(void *))(*v17 + 16))(v17);
                    uint64_t v22 = v17;
                    uint64_t v18 = (void *)(v16 + 192);
                    if (!v17) {
                      goto LABEL_66;
                    }
                  }
                  if (v17 == v21)
                  {
                    uint64_t v28 = v27;
                    (*(void (**)(void *, void *))(v21[0] + 24))(v21, v27);
                    goto LABEL_67;
                  }
                  unint64_t v17 = (void *)(*(uint64_t (**)(void *))(*v17 + 16))(v17);
                }
                else
                {
                  uint64_t v22 = 0;
                  uint64_t v18 = (void *)(v16 + 192);
                }
LABEL_66:
                uint64_t v28 = v17;
LABEL_67:
                std::__function::__value_func<std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::swap[abi:nn180100](v27, v18);
                if (v28 == v27)
                {
                  (*(void (**)(void *))(v27[0] + 32))(v27);
                }
                else if (v28)
                {
                  (*(void (**)(void *))(*v28 + 40))(v28);
                }
                if (v22 == v21)
                {
                  (*(void (**)(void *))(v21[0] + 32))(v21);
                }
                else if (v22)
                {
                  (*(void (**)(void))(*v22 + 40))();
                }
                uint64_t result = (uint64_t)v20;
                if (v20 == v19) {
                  return (*(uint64_t (**)(void *))(v19[0] + 32))(v19);
                }
                if (v20) {
                  return (*(uint64_t (**)(void))(*v20 + 40))();
                }
                return result;
              }
              long long v14 = (void *)(*(uint64_t (**)(void *))(*v14 + 16))(v14);
            }
            else
            {
              unint64_t v24 = 0;
              uint64_t v15 = (void *)(v13 + 192);
            }
LABEL_49:
            uint64_t v28 = v14;
            goto LABEL_50;
          }
          int v11 = (void *)(*(uint64_t (**)(void *))(*v11 + 16))(v11);
        }
        else
        {
          long long v26 = 0;
          uint64_t v12 = (void *)(v10 + 192);
        }
LABEL_32:
        uint64_t v28 = v11;
        goto LABEL_33;
      }
    }
    else
    {
      long long v8 = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
      long long v20 = v8;
      uint64_t v9 = v6 + 18;
      if (v8) {
        goto LABEL_14;
      }
    }
    uint64_t v28 = 0;
    goto LABEL_20;
  }
  return result;
}

void sub_1A24B0248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<std::shared_ptr<md::LabelTile> ()(void *,altitude::LabelData::TileType)>::~function(va);
  _Unwind_Resume(a1);
}

void altitude::LabelDataManagerPrivate::initialize(altitude::LabelDataManagerPrivate *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (altitude::LabelDataManagerPrivate *)*((void *)this + 6);
  if (v2)
  {
    if (v2 == (altitude::LabelDataManagerPrivate *)((char *)this + 24))
    {
      double v4 = v3;
      (*(void (**)(altitude::LabelDataManagerPrivate *, void *))(*(void *)v2 + 24))(v2, v3);
    }
    else
    {
      double v4 = (void *)(*(uint64_t (**)(altitude::LabelDataManagerPrivate *))(*(void *)v2 + 16))(v2);
    }
    (*(void (**)(altitude::LabelDataManagerPrivate *, void *))(*(void *)this + 16))(this, v3);
    if (v4 == v3)
    {
      (*(void (**)(void *))(v3[0] + 32))(v3);
    }
    else if (v4)
    {
      (*(void (**)(void))(*v4 + 40))();
    }
  }
  altitude::TileManager::registerTileListener(*(void **)(*((void *)this + 2) + 688), (uint64_t)this + 8);
}

void sub_1A24B0BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24B0C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24B0ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24B0EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24B1328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKScreenCameraController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void *altitude::TrafficTilePrivate::vk_tile(altitude::TrafficTilePrivate *this, void *a2)
{
  double v4 = (void *)*((void *)this + 12);
  if (v4)
  {
    *((void *)this + 12) = 0;
  }
  uint64_t result = a2;
  *((void *)this + 12) = result;
  return result;
}

uint64_t altitude::TrafficTilePrivate::setRenderStamp(uint64_t this, uint64_t a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

void altitude::TrafficTilePrivate::~TrafficTilePrivate(altitude::TrafficTilePrivate *this)
{
  altitude::TrafficTilePrivate::~TrafficTilePrivate(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_1EF56A220;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 12) = 0;
  }
  uint64_t v3 = *((void *)this + 9);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t altitude::TrafficTilePrivate::vk_tile(altitude::TrafficTilePrivate *this)
{
  return *((void *)this + 12);
}

uint64_t altitude::TrafficTilePrivate::geoTileKey(altitude::TrafficTilePrivate *this)
{
  return *((void *)this + 3);
}

uint64_t altitude::TrafficTilePrivate::renderStamp(altitude::TrafficTilePrivate *this)
{
  return *((void *)this + 2);
}

void ggl::MaskingOverlay::FillPipelineState::~FillPipelineState(ggl::MaskingOverlay::FillPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::MaskingOverlay::FillPipelineSetup::textureIsEnabled(ggl::MaskingOverlay::FillPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::MaskingOverlay::FillPipelineSetup::constantDataIsEnabled(ggl::MaskingOverlay::FillPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::MaskingOverlay::FillPipelineSetup::~FillPipelineSetup(ggl::MaskingOverlay::FillPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::MaskingOverlay::MaskingPipelineState::~MaskingPipelineState(ggl::MaskingOverlay::MaskingPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::MaskingOverlay::MaskingPipelineSetup::textureIsEnabled(ggl::MaskingOverlay::MaskingPipelineSetup *this)
{
  return 0;
}

BOOL ggl::MaskingOverlay::MaskingPipelineSetup::constantDataIsEnabled(ggl::MaskingOverlay::MaskingPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::MaskingOverlay::MaskingPipelineSetup::~MaskingPipelineSetup(ggl::MaskingOverlay::MaskingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::FlyoverDsmDataRequester::requestDataKeys(md::SingleGEOResourceDataRequester *this, const gdc::SelectionContext *a2, char a3)
{
  if (*((unsigned char *)a2 + 82) != 1) {
    md::SingleGEOResourceDataRequester::requestDataKeys(this, a2, a3);
  }
}

uint64_t md::FlyoverDsmManifestInformer::tileSize(md::FlyoverDsmManifestInformer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

void *md::FlyoverDsmManifestInformer::downloadZoomRange@<X0>(md::FlyoverDsmManifestInformer *this@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(char *__return_ptr))(**((void **)this + 1) + 24))(v10);
  uint64_t result = (*(void *(**)(char *__return_ptr))(**((void **)this + 1) + 24))(v8);
  if (!v10[0])
  {
    if (!v8[0])
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
    uint64_t v7 = v9;
LABEL_13:
    *(void *)(a2 + 4) = v7;
    *(unsigned char *)a2 = 1;
    return result;
  }
  if (!v8[0])
  {
    uint64_t v7 = v11;
    goto LABEL_13;
  }
  if (v9 >= v11) {
    uint64_t v5 = v11;
  }
  else {
    uint64_t v5 = v9;
  }
  if (HIDWORD(v11) <= HIDWORD(v9)) {
    uint64_t v6 = HIDWORD(v9);
  }
  else {
    uint64_t v6 = HIDWORD(v11);
  }
  *(unsigned char *)a2 = 1;
  *(void *)(a2 + 4) = v5 | (v6 << 32);
  return result;
}

uint64_t md::FlyoverDsmManifestInformer::resourceTileForTile(md::FlyoverDsmManifestInformer *this, unsigned __int16 a2, const QuadTile *a3)
{
  uint64_t v3 = *((void *)this + 1);
  if (a3->_level <= 0xDu) {
    uint64_t v4 = 50;
  }
  else {
    uint64_t v4 = 20;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v4);
}

void md::FlyoverDsmManifestInformer::~FlyoverDsmManifestInformer(md::FlyoverDsmManifestInformer *this)
{
}

void md::FlyoverDsmDataRequester::~FlyoverDsmDataRequester(md::FlyoverDsmDataRequester *this)
{
  *(void *)this = &unk_1EF542F58;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1EF54C560;
  if (*((unsigned char *)this + 36)) {
    *((unsigned char *)this + 36) = 0;
  }
  if (*((unsigned char *)this + 28)) {
    *((unsigned char *)this + 28) = 0;
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EF542F58;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1EF54C560;
  if (*((unsigned char *)this + 36)) {
    *((unsigned char *)this + 36) = 0;
  }
  if (*((unsigned char *)this + 28)) {
    *((unsigned char *)this + 28) = 0;
  }
}

void md::RoadTileDataRenderable::~RoadTileDataRenderable(md::RoadTileDataRenderable *this)
{
  *(void *)this = &unk_1EF5136E8;
  uint64_t v2 = (md::TrailJunctionsResource *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v2)
  {
    md::TrailJunctionsResource::~TrailJunctionsResource(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = &unk_1EF513528;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  md::TrailJunctionsResource *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF5136E8;
  uint64_t v2 = (md::TrailJunctionsResource *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v2)
  {
    md::TrailJunctionsResource::~TrailJunctionsResource(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = &unk_1EF513528;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

void md::MapTileDataRenderable<md::RoadTileData>::~MapTileDataRenderable(md::BaseMapTileDataRenderable *this)
{
  *(void *)this = &unk_1EF513528;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF513528;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::BaseMapTileDataRenderable::~BaseMapTileDataRenderable(this);
}

md::VenueLevel *md::VenueLevel::VenueLevel(md::VenueLevel *this, uint64_t a2, __int16 a3, const char *__s, const char *a5, const char *a6, const char *a7, char a8, double a9)
{
  *(void *)this = a2;
  *((_WORD *)this + 4) = a3;
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 48) = 0;
  *((unsigned char *)this + 80) = 0;
  *((unsigned char *)this + 112) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 18) = 0;
  *((unsigned char *)this + 168) = a8;
  *((double *)this + 22) = a9;
  if (!__s) {
    goto LABEL_14;
  }
  size_t v14 = strlen(__s);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_61;
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v15;
    unint64_t v40 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v40) = v14;
  p_dst = &__dst;
  if (v14) {
LABEL_9:
  }
    memcpy(p_dst, __s, v15);
  *((unsigned char *)p_dst + v15) = 0;
  char v19 = (void **)((char *)this + 24);
  if (*((unsigned char *)this + 16))
  {
    if (*((char *)this + 47) < 0) {
      operator delete(*v19);
    }
    *(_OWORD *)char v19 = __dst;
    *((void *)this + 5) = v40;
LABEL_14:
    if (a5) {
      goto LABEL_15;
    }
LABEL_29:
    if (!a6) {
      goto LABEL_44;
    }
    goto LABEL_30;
  }
  *(_OWORD *)char v19 = __dst;
  *((void *)this + 5) = v40;
  *((unsigned char *)this + 16) = 1;
  if (!a5) {
    goto LABEL_29;
  }
LABEL_15:
  size_t v20 = strlen(a5);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_61;
  }
  size_t v21 = v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = (long long *)operator new(v23 + 1);
    *((void *)&__dst + 1) = v21;
    unint64_t v40 = v24 | 0x8000000000000000;
    *(void *)&long long __dst = v22;
    goto LABEL_22;
  }
  HIBYTE(v40) = v20;
  uint64_t v22 = &__dst;
  if (v20) {
LABEL_22:
  }
    memcpy(v22, a5, v21);
  *((unsigned char *)v22 + v21) = 0;
  uint64_t v25 = (void **)((char *)this + 56);
  if (*((unsigned char *)this + 48))
  {
    if (*((char *)this + 79) < 0) {
      operator delete(*v25);
    }
    *(_OWORD *)uint64_t v25 = __dst;
    *((void *)this + 9) = v40;
    if (!a6)
    {
LABEL_44:
      if (!a7) {
        return this;
      }
LABEL_45:
      size_t v32 = strlen(a7);
      if (v32 <= 0x7FFFFFFFFFFFFFF7)
      {
        size_t v33 = v32;
        if (v32 >= 0x17)
        {
          uint64_t v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v32 | 7) != 0x17) {
            uint64_t v35 = v32 | 7;
          }
          uint64_t v36 = v35 + 1;
          uint8x8_t v34 = (long long *)operator new(v35 + 1);
          *((void *)&__dst + 1) = v33;
          unint64_t v40 = v36 | 0x8000000000000000;
          *(void *)&long long __dst = v34;
        }
        else
        {
          HIBYTE(v40) = v32;
          uint8x8_t v34 = &__dst;
          if (!v32)
          {
LABEL_53:
            *((unsigned char *)v34 + v33) = 0;
            uint64_t v37 = (void **)((char *)this + 120);
            if (*((unsigned char *)this + 112))
            {
              if (*((char *)this + 143) < 0) {
                operator delete(*v37);
              }
              *(_OWORD *)uint64_t v37 = __dst;
              *((void *)this + 17) = v40;
            }
            else
            {
              *(_OWORD *)uint64_t v37 = __dst;
              *((void *)this + 17) = v40;
              *((unsigned char *)this + 112) = 1;
            }
            return this;
          }
        }
        memcpy(v34, a7, v33);
        goto LABEL_53;
      }
LABEL_61:
      abort();
    }
  }
  else
  {
    *(_OWORD *)uint64_t v25 = __dst;
    *((void *)this + 9) = v40;
    *((unsigned char *)this + 48) = 1;
    if (!a6) {
      goto LABEL_44;
    }
  }
LABEL_30:
  size_t v26 = strlen(a6);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_61;
  }
  size_t v27 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    uint64_t v28 = (long long *)operator new(v29 + 1);
    *((void *)&__dst + 1) = v27;
    unint64_t v40 = v30 | 0x8000000000000000;
    *(void *)&long long __dst = v28;
    goto LABEL_37;
  }
  HIBYTE(v40) = v26;
  uint64_t v28 = &__dst;
  if (v26) {
LABEL_37:
  }
    memcpy(v28, a6, v27);
  *((unsigned char *)v28 + v27) = 0;
  unsigned int v31 = (void **)((char *)this + 88);
  if (!*((unsigned char *)this + 80))
  {
    *(_OWORD *)unsigned int v31 = __dst;
    *((void *)this + 13) = v40;
    *((unsigned char *)this + 80) = 1;
    if (!a7) {
      return this;
    }
    goto LABEL_45;
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*v31);
  }
  *(_OWORD *)unsigned int v31 = __dst;
  *((void *)this + 13) = v40;
  if (a7) {
    goto LABEL_45;
  }
  return this;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanUpdateWithStyleZChange>(gdc::Entity,md::ls::CanUpdateWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  CanUpdateWithStyle = (void *)gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(CanUpdateWithStyle + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)CanUpdateWithStyle[11];
    unint64_t v12 = CanUpdateWithStyle[12];
    if ((unint64_t)v13 >= v12)
    {
      size_t v15 = (char *)CanUpdateWithStyle[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        size_t v20 = operator new(4 * v19);
      }
      else
      {
        size_t v20 = 0;
      }
      size_t v21 = &v20[4 * v16];
      uint64_t v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      size_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        uint64_t v25 = &v20[4 * v16 - 16];
        size_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--size_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      CanUpdateWithStyle[10] = v21;
      CanUpdateWithStyle[11] = v14;
      CanUpdateWithStyle[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      size_t v14 = v13 + 4;
    }
    CanUpdateWithStyle[11] = v14;
    uint64_t v9 = CanUpdateWithStyle[31];
  }
  else
  {
    long long v8 = (_DWORD *)(CanUpdateWithStyle[10] + (((uint64_t)v6 - CanUpdateWithStyle[7]) >> 1));
    *long long v8 = v5;
    uint64_t v9 = CanUpdateWithStyle[31];
    if (v8 != (_DWORD *)CanUpdateWithStyle[11])
    {
      uint64_t v10 = (void *)CanUpdateWithStyle[16];
      if (v10)
      {
        while (1)
        {
          uint8x8_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)CanUpdateWithStyle[22];
  if (v30)
  {
    while (1)
    {
      uint8x8_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanUpdateWithStyleZChange>(gdc::Entity,md::ls::CanUpdateWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5244D0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanUpdateWithStyleZChange>(gdc::Entity,md::ls::CanUpdateWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5244D0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanUpdateWithStyleZChange>(gdc::Entity,md::ls::CanUpdateWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

uint64_t std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1>,void ()(md::ls::UniqueMaterialData const&)>::operator()(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v4 = HIDWORD(*v3);
  uint64_t v5 = *v3 << 32;
  unint64_t v12 = (void (**)(void **))&unk_1EF524560;
  uint64_t v13 = v5;
  int v14 = v4;
  unint64_t v19 = &v16;
  size_t v15 = (void **)&v12;
  uint64_t v16 = &unk_1EF524560;
  uint64_t v17 = v5;
  int v18 = v4;
  int v20 = 0;
  ecs2::Runtime::queueCommand(v6, (uint64_t)&v16);
  if (v20 != -1) {
    ((void (*)(char *, void **))off_1EF5909D0[v20])(&v11, &v16);
  }
  int v20 = -1;
  if (v15 == (void **)&v12)
  {
    v12[4]((void **)&v12);
  }
  else if (v15)
  {
    (*((void (**)(void))*v15 + 5))();
  }
  char v7 = *v2;
  uint64_t v8 = HIDWORD(*v3);
  uint64_t v9 = **(unsigned int **)(a1 + 16) | (*v3 << 32);
  unint64_t v12 = (void (**)(void **))&unk_1EF5244D0;
  uint64_t v13 = v9;
  int v14 = v8;
  unint64_t v19 = &v16;
  size_t v15 = (void **)&v12;
  uint64_t v16 = &unk_1EF5244D0;
  uint64_t v17 = v9;
  int v18 = v8;
  int v20 = 0;
  ecs2::Runtime::queueCommand(v7, (uint64_t)&v16);
  if (v20 != -1) {
    ((void (*)(char *, void **))off_1EF5909D0[v20])(&v11, &v16);
  }
  int v20 = -1;
  uint64_t result = (uint64_t)v15;
  if (v15 == (void **)&v12) {
    return ((uint64_t (*)(void **))v12[4])((void **)&v12);
  }
  if (v15) {
    return (*((uint64_t (**)(void))*v15 + 5))();
  }
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialPendingProcessing>(gdc::Entity,md::ls::MaterialPendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MaterialPendingProcessing>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if (v7)
  {
    uint64_t v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *uint64_t v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      uint64_t v9 = v4[31];
      goto LABEL_38;
    }
    size_t v15 = (unsigned char *)v4[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_43;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      int v20 = (char *)operator new(v19);
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = &v20[v16];
    uint64_t v22 = &v20[v19];
    v20[v16] = v5;
    uint64_t v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20) {
      goto LABEL_32;
    }
    if (v16 >= 0x20)
    {
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v24 = (long long *)(v13 - 16);
      uint64_t v25 = &v20[v13 - 16 - v15];
      unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)uint64_t v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23) {
        goto LABEL_34;
      }
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v23 = 0;
    }
    unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    int v29 = &v13[-v23 - 8];
    int64_t v30 = v29 - v15;
    do
    {
      uint64_t v31 = *(void *)v29;
      v29 -= 8;
      *(void *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    uint64_t v21 = v20;
    goto LABEL_35;
  }
  uint64_t v8 = (unsigned char *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *uint64_t v8 = v5;
  uint64_t v9 = v4[31];
  if (v8 != (unsigned char *)v4[11])
  {
    uint64_t v10 = (void *)v4[16];
    if (v10)
    {
      while (1)
      {
        uint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        uint64_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  uint8x8_t v34 = (void *)v4[22];
  if (v34)
  {
    while (1)
    {
      uint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      uint8x8_t v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_42;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialPendingProcessing>(gdc::Entity,md::ls::MaterialPendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524560;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialPendingProcessing>(gdc::Entity,md::ls::MaterialPendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF524560;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialPendingProcessing>(gdc::Entity,md::ls::MaterialPendingProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1>,void ()(md::ls::UniqueMaterialData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF51FDA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1>,void ()(md::ls::UniqueMaterialData const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF51FDA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_1>,void ()(md::ls::UniqueMaterialData const&)>::~__func()
{
}

uint64_t std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::StyleManagerEvent)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51FD60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF51FD60;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0,std::allocator<md::ita::CheckIfMaterialNeedsUpdate::operator()(ecs2::Query<md::ls::UniqueMaterialData const&>)::$_0>,void ()(md::StyleManagerEvent)>::~__func()
{
}

void *std::function<void ()(md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0,std::allocator<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  uint64_t v8 = *(void ***)(a1 + 24);
  uint64_t v9 = **(void **)(a1 + 8);
  uint8x8_t v34 = (void (**)(void **))v5;
  uint64_t v10 = *(void *)(v9 + 120);
  if (v5 >= (unint64_t)((*(void *)(v9 + 128) - v10) >> 3)) {
    goto LABEL_9;
  }
  uint64_t v11 = *(void **)(v10 + 8 * v5);
  if (!v11) {
    goto LABEL_10;
  }
  if (HIDWORD(v5) != HIDWORD(v11)
    || ((v12 = *(void *)(v9 + 144), uint64_t v13 = (void **)(v12 + 8 * v11), v13 != *(void ***)(v9 + 152))
      ? (BOOL v14 = v12 == 0)
      : (BOOL v14 = 1),
        v14))
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    int v29 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v9 + 56, v5, &v34);
    ++v29[3];
    uint64_t v11 = *v13;
  }
LABEL_10:
  size_t v15 = *(int8x8_t **)v9;
  uint64_t v37 = v11;
  *(void *)&long long v38 = 0;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v31, v15, (uint64_t *)&v37, 0);
  v16.n128_u32[0] = **(_DWORD **)(a1 + 16);
  (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v31 + 264))(&v30, v16);
  if ((_BYTE)v30)
  {
    uint64_t v17 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v18 = *v17;
    size_t v19 = *v8;
    uint8x8_t v34 = (void (**)(void **))&unk_1EF525FD0;
    *(void *)&long long v35 = v20;
    *((void *)&v35 + 1) = v18;
    uint64_t v36 = (void **)&v34;
    uint64_t v39 = &v37;
    uint64_t v37 = &unk_1EF525FD0;
    long long v38 = v35;
    int v40 = 0;
    ecs2::Runtime::queueCommand(v19, (uint64_t)&v37);
    if (v40 != -1) {
      ((void (*)(char *, void **))off_1EF5909D0[v40])(&v33, &v37);
    }
    int v40 = -1;
    if (v36 == (void **)&v34)
    {
      v34[4]((void **)&v34);
      if (!v6) {
        goto LABEL_34;
      }
    }
    else
    {
      if (v36) {
        (*((void (**)(void))*v36 + 5))();
      }
      if (!v6) {
        goto LABEL_34;
      }
    }
    uint64_t v24 = *v17;
    uint64_t v25 = *v8;
    uint8x8_t v34 = (void (**)(void **))&unk_1EF526768;
    *(void *)&long long v35 = v24;
    uint64_t v39 = &v37;
    uint64_t v36 = (void **)&v34;
    uint64_t v37 = &unk_1EF526768;
    *(void *)&long long v38 = v24;
    int v40 = 1;
    ecs2::Runtime::queueCommand(v25, (uint64_t)&v37);
    if (v40 == -1) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v21 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v22 = *v21;
  unint64_t v23 = *v8;
  uint8x8_t v34 = (void (**)(void **))&unk_1EF521D28;
  *(void *)&long long v35 = v22 << 32;
  DWORD2(v35) = HIDWORD(v22);
  uint64_t v39 = &v37;
  uint64_t v36 = (void **)&v34;
  uint64_t v37 = &unk_1EF521D28;
  *(void *)&long long v38 = v22 << 32;
  DWORD2(v38) = HIDWORD(v22);
  int v40 = 0;
  ecs2::Runtime::queueCommand(v23, (uint64_t)&v37);
  if (v40 != -1) {
    ((void (*)(char *, void **))off_1EF5909D0[v40])(&v33, &v37);
  }
  int v40 = -1;
  if (v36 == (void **)&v34)
  {
    v34[4]((void **)&v34);
    if (!v7) {
      goto LABEL_34;
    }
  }
  else
  {
    if (v36) {
      (*((void (**)(void))*v36 + 5))();
    }
    if (!v7) {
      goto LABEL_34;
    }
  }
  uint64_t v26 = *v21;
  long long v27 = *v8;
  uint8x8_t v34 = (void (**)(void **))&unk_1EF526B58;
  *(void *)&long long v35 = v26;
  uint64_t v39 = &v37;
  uint64_t v36 = (void **)&v34;
  uint64_t v37 = &unk_1EF526B58;
  *(void *)&long long v38 = v26;
  int v40 = 1;
  ecs2::Runtime::queueCommand(v27, (uint64_t)&v37);
  if (v40 != -1) {
LABEL_30:
  }
    ((void (*)(char *, void **))off_1EF5909D0[v40])(&v33, &v37);
LABEL_31:
  int v40 = -1;
  if (v36 == (void **)&v34)
  {
    v34[4]((void **)&v34);
    unint64_t v28 = v32;
    if (!v32) {
      return;
    }
    goto LABEL_35;
  }
  if (v36) {
    (*((void (**)(void))*v36 + 5))();
  }
LABEL_34:
  unint64_t v28 = v32;
  if (!v32) {
    return;
  }
LABEL_35:
  if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
}

void sub_1A24B33EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    if (!atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::ZIndex>(a2);
  unint64_t v4 = *(void *)(a1 + 8);
  gdc::ComponentStorageWrapper<md::ls::ZIndex>::remove(v3, v4);
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF526B58;
  a2[1] = *(void *)(result + 8);
  return result;
}

void *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF526B58;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::ZIndex>(gdc::Entity,std::type_identity<md::ls::ZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DefaultZIndex>(gdc::Entity,md::ls::DefaultZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::DefaultZIndex>(a2);
  uint64_t v22 = v2;
  unint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    uint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      size_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        size_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      uint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          uint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DefaultZIndex>(gdc::Entity,md::ls::DefaultZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521D28;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DefaultZIndex>(gdc::Entity,md::ls::DefaultZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF521D28;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DefaultZIndex>(gdc::Entity,md::ls::DefaultZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::DefaultZIndex>(a2);
  unint64_t v4 = *(void *)(a1 + 8);
  gdc::ComponentStorageWrapper<md::ls::DefaultZIndex>::remove(v3, v4);
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF526768;
  a2[1] = *(void *)(result + 8);
  return result;
}

void *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF526768;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::DefaultZIndex>(gdc::Entity,std::type_identity<md::ls::DefaultZIndex>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ZIndex>(gdc::Entity,md::ls::ZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::ZIndex>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint8x8_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint8x8_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ZIndex>(gdc::Entity,md::ls::ZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525FD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ZIndex>(gdc::Entity,md::ls::ZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF525FD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ZIndex>(gdc::Entity,md::ls::ZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0,std::allocator<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF51FD18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0,std::allocator<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF51FD18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0,std::allocator<md::ita::ProcessMaterialsForZIndex::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*)>::~__func()
{
}

void std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = *a2;
  uint64_t v6 = **(void **)(a1 + 8);
  unint64_t v28 = v5;
  uint64_t v7 = *(void *)(v6 + 120);
  if (v5 >= (unint64_t)((*(void *)(v6 + 128) - v7) >> 3)) {
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(v7 + 8 * v5);
  if (v8)
  {
    if (HIDWORD(v5) == HIDWORD(v8))
    {
      uint64_t v9 = *(void *)(v6 + 144);
      uint64_t v10 = (uint64_t *)(v9 + 8 * v8);
      if (v10 != *(uint64_t **)(v6 + 152) && v9 != 0)
      {
        uint64_t v25 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v6 + 56, v5, &v28);
        ++v25[3];
        uint64_t v8 = *v10;
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v8 = 0;
  }
LABEL_10:
  unint64_t v12 = *(int8x8_t **)v6;
  v29[0] = v8;
  v29[1] = 0;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v26, v12, v29, 0);
  uint64_t v13 = **(void ***)(a1 + 8);
  unint64_t v14 = *a3;
  unint64_t v15 = *a3;
  uint64_t v16 = v13[89];
  if (v15 < (v13[90] - v16) >> 3
    && ((uint64_t v17 = *(void *)(v16 + 8 * v15)) != 0 ? (v18 = HIDWORD(v14) == HIDWORD(v17)) : (v18 = 0), v18))
  {
    uint64_t v20 = v13[92] + 8 * v17;
    uint64_t v19 = v13[93];
  }
  else
  {
    uint64_t v19 = v13[93];
    uint64_t v20 = v19;
  }
  if (v20 == v19) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v20;
  }
  if (v21)
  {
    uint64_t v22 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v13 + 81), v14, a3);
    ++v22[3];
  }
  (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v26 + 264))(v29, **(float **)(a1 + 16));
  if (LOBYTE(v29[0]))
  {
    char v23 = 0;
    *(_DWORD *)uint64_t v21 = HIDWORD(v29[0]);
  }
  else
  {
    char v23 = 1;
  }
  *(unsigned char *)(v21 + 4) = v23;
  uint64_t v24 = v27;
  if (v27)
  {
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1A24B3DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    if (!atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF520618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF520618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_1>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &)>::~__func()
{
}

void std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = *a2;
  uint64_t v6 = **(void **)(a1 + 8);
  unint64_t v34 = v5;
  uint64_t v7 = *(void *)(v6 + 120);
  if (v5 >= (unint64_t)((*(void *)(v6 + 128) - v7) >> 3)) {
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(v7 + 8 * v5);
  if (v8)
  {
    if (HIDWORD(v5) == HIDWORD(v8))
    {
      uint64_t v9 = *(void *)(v6 + 144);
      uint64_t v10 = (uint64_t *)(v9 + 8 * v8);
      if (v10 != *(uint64_t **)(v6 + 152) && v9 != 0)
      {
        uint64_t v31 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v6 + 56, v5, &v34);
        ++v31[3];
        uint64_t v8 = *v10;
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v8 = 0;
  }
LABEL_10:
  unint64_t v12 = *(int8x8_t **)v6;
  v35[0] = v8;
  v35[1] = 0;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v32, v12, v35, 0);
  uint64_t v13 = **(void ***)(a1 + 8);
  unint64_t v14 = *a3;
  unint64_t v15 = *a3;
  uint64_t v16 = v13[52];
  if (v15 < (v13[53] - v16) >> 3
    && ((uint64_t v17 = *(void *)(v16 + 8 * v15)) != 0 ? (v18 = HIDWORD(v14) == HIDWORD(v17)) : (v18 = 0), v18))
  {
    uint64_t v30 = 3 * v17;
    uint64_t v19 = (char *)v13[56];
    uint64_t v20 = (char *)(v13[55] + v30);
  }
  else
  {
    uint64_t v19 = (char *)v13[56];
    uint64_t v20 = v19;
  }
  if (v20 == v19) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v20;
  }
  if (v21)
  {
    uint64_t v22 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v13 + 44), v14, a3);
    ++v22[3];
  }
  uint64_t v23 = v32;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, float))(*(void *)v32 + 848))(v35, v32, **(float **)(a1 + 16));
  if (LOBYTE(v35[0])) {
    BOOL v25 = BYTE1(v35[0]) == 0;
  }
  else {
    BOOL v25 = 1;
  }
  char v26 = !v25;
  v21[1] = v26;
  v24.n128_u32[0] = **(_DWORD **)(a1 + 16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __n128))(*(void *)v23 + 360))(v35, v23, v24);
  if (LOBYTE(v35[0])) {
    BOOL v27 = BYTE1(v35[0]) == 0;
  }
  else {
    BOOL v27 = 0;
  }
  char v28 = !v27;
  char *v21 = v28;
  uint64_t v29 = v33;
  if (v33)
  {
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1A24B40C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    if (!atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5205D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5205D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0,std::allocator<md::ita::ProcessMaterialsForUpdatedStyle::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>,ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &)>::~__func()
{
}

void ggl::FoggedSpecularBuilding::BuildingPipelineState::~BuildingPipelineState(ggl::FoggedSpecularBuilding::BuildingPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ppred_decompress(float **a1, unsigned int *a2, float **a3, unsigned int *a4, uint64_t *a5, void *a6, unsigned int **a7, void *a8, void *a9, int *a10, uint64_t a11)
{
  *(_OWORD *)(a11 + 116) = 0u;
  *(_OWORD *)(a11 + 104) = 0u;
  *(_OWORD *)(a11 + 88) = 0u;
  unint64_t v12 = *(unsigned int **)(a11 + 16);
  uint64_t v13 = *(int **)(a11 + 40);
  unint64_t v14 = *(__int32 **)a11;
  __int32 v15 = **(_DWORD **)a11;
  *(_DWORD *)(a11 + 88) = 32;
  uint64_t v16 = *(void *)(v14 + 5);
  float64x2_t v17 = *(float64x2_t *)(v14 + 1);
  *(_DWORD *)(a11 + 88) = 224;
  float32x2_t v18 = *(float32x2_t *)(v14 + 7);
  float v19 = *((float *)v14 + 9);
  *(_DWORD *)(a11 + 88) = 320;
  int v20 = *((unsigned __int8 *)v14 + 40);
  *(_DWORD *)(a11 + 88) = 328;
  *a4 = *(__int32 *)((char *)v14 + 41);
  int v21 = *(_DWORD *)(a11 + 88);
  int v22 = v21 + 32;
  *(_DWORD *)(a11 + 88) = v21 + 32;
  uint64_t v23 = *(__int32 **)a11;
  if (v21 < -32) {
    int v22 = v21 + 39;
  }
  uint64_t v24 = *(unsigned int *)((char *)v23 + (v22 >> 3));
  int v25 = v21 + 64;
  *(_DWORD *)(a11 + 88) = v21 + 64;
  if (v21 < -64) {
    int v25 = v21 + 71;
  }
  char v26 = (char *)*(unsigned int *)((char *)v23 + (v25 >> 3));
  int v27 = v21 + 96;
  *(_DWORD *)(a11 + 88) = v21 + 96;
  if (v21 < -96) {
    int v27 = v21 + 103;
  }
  int v28 = *((unsigned __int8 *)v23 + (v27 >> 3));
  int v29 = v21 + 104;
  *(_DWORD *)(a11 + 88) = v21 + 104;
  if (v21 < -104) {
    int v29 = v21 + 111;
  }
  uint64_t v30 = *(unsigned int *)((char *)v23 + (v29 >> 3));
  int v31 = v21 + 136;
  *(_DWORD *)(a11 + 88) = v21 + 136;
  if (v21 < -136) {
    int v31 = v21 + 143;
  }
  int v32 = *(__int32 *)((char *)v23 + (v31 >> 3));
  *(_DWORD *)(a11 + 88) = v21 + 168;
  uint64_t result = 1;
  if ((v15 & 0x80000000) == 0)
  {
    if (v20)
    {
      if ((v24 & 0x80000000) == 0 && (v26 & 0x80000000) == 0)
      {
        if (v28)
        {
          if ((v32 & 0x80000000) == 0)
          {
            uint64_t v34 = *v13;
            *a10 = v34;
            if ((v34 & 0x80000000) == 0)
            {
              v392 = v26;
              int v386 = v28;
              int v395 = v32;
              long long v373 = a1;
              float64x2_t v374 = v17;
              uint64_t v375 = v16;
              char v372 = v20;
              v35.i32[0] = 0;
              v35.i32[1] = v15;
              int32x2_t v403 = vadd_s32(v35, (int32x2_t)0xFFFFFFE000000020);
              size_t v36 = 3 * v34;
              size_t v37 = 12 * v34;
              long long v38 = (char *)malloc_type_malloc(12 * v34, 0x100004052888210uLL);
              uint64_t v39 = malloc_type_malloc(v37, 0x100004052888210uLL);
              memset(v38, 255, v37);
              memset(v39, 255, v37);
              __int32 v40 = v403.i32[0];
              unsigned int v41 = v403.u32[1];
              if (v403.i32[1] >= 0x80u)
              {
                do
                {
                  uint64_t v57 = *(unsigned int *)((char *)v13 + v40 / 8);
                  int v58 = v40 + 32;
                  if (v40 + 32 < 0) {
                    int v58 = v40 + 39;
                  }
                  uint64_t v59 = *(unsigned int *)((char *)v13 + (v58 >> 3));
                  if ((v57 & 0x80000000) == 0) {
                    *(_DWORD *)&v38[4 * v57] = v59;
                  }
                  if ((v59 & 0x80000000) == 0) {
                    *(_DWORD *)&v38[4 * v59] = v57;
                  }
                  v41 -= 64;
                  v40 += 64;
                }
                while (v41 > 0x7F);
              }
              int v42 = 0;
              uint64_t v43 = 0;
              unsigned int v44 = *(int *)((char *)v13 + v40 / 8);
              *a2 = v44;
              int v45 = v40 + 39;
              if (v40 + 32 >= 0) {
                int v45 = v40 + 32;
              }
              if ((v44 & 0x80000000) != 0 || (int v46 = *(int *)((char *)v13 + (v45 >> 3)), v46 < 0))
              {
                uint64_t v47 = (int *)v38;
                uint64_t v49 = v39;
                goto LABEL_173;
              }
              uint64_t v47 = (int *)malloc_type_calloc(*a10, 4uLL, 0x100004052888210uLL);
              uint64_t v48 = malloc_type_malloc(v36, 0x100004077774924uLL);
              uint64_t v49 = v48;
              int v50 = *a10;
              if (v46) {
                BOOL v51 = 1;
              }
              else {
                BOOL v51 = v50 < 1;
              }
              if (v51)
              {
                LODWORD(v52) = 0;
                if (v50 > 0) {
                  goto LABEL_41;
                }
              }
              else
              {
                unsigned char *v48 = 80;
                LODWORD(v52) = 1;
                if (*a10 > 1)
                {
LABEL_41:
                  int v60 = 0;
                  unint64_t v61 = 0;
                  int v62 = 0;
                  int v53 = 0;
                  int v63 = v52;
                  do
                  {
                    if (v60 <= 0)
                    {
                      unsigned int v65 = *v12++;
                      v61 |= (unint64_t)bswap32(v65) << (32 - v60);
                      v60 += 32;
                    }
                    unint64_t v66 = v61;
                    int v67 = v60 - 1;
                    v61 *= 2;
                    if ((v66 & 0x8000000000000000) != 0)
                    {
                      if (v60 <= 2)
                      {
                        unsigned int v68 = *v12++;
                        v61 |= (unint64_t)bswap32(v68) << (33 - v60);
                        int v67 = v60 + 31;
                      }
                      unint64_t v69 = v61 >> 62;
                      v67 -= 2;
                      v61 *= 4;
                      char v64 = 76;
                      switch(v69)
                      {
                        case 1uLL:
                          char v64 = 82;
                          goto LABEL_43;
                        case 2uLL:
                          goto LABEL_43;
                        case 3uLL:
                          uint64_t v52 = v63 + 1;
                          v49[v63] = 69;
                          if (v62 < 1)
                          {
                            ++v53;
                            if ((int)v52 < *a10)
                            {
                              if (v53 >= v46)
                              {
                                v49[v52] = 80;
                                LODWORD(v52) = v63 + 2;
                              }
                              else
                              {
                                v47[v53] = v52;
                              }
                            }
                          }
                          else
                          {
                            --v62;
                          }
                          break;
                        default:
                          LODWORD(v52) = v63 + 1;
                          v49[v63] = 83;
                          if (*(_DWORD *)&v38[12 * v63 + 4 * ((3 * v63 + 2) % 3)] == -1) {
                            ++v62;
                          }
                          break;
                      }
                    }
                    else
                    {
                      char v64 = 67;
LABEL_43:
                      LODWORD(v52) = v63 + 1;
                      v49[v63] = v64;
                    }
                    int v60 = v67;
                    int v63 = v52;
                  }
                  while ((int)v52 < *a10);
                  goto LABEL_30;
                }
              }
              int v53 = 0;
LABEL_30:
              unsigned int v54 = *a2;
              LODWORD(v55) = v52 - 1;
              if ((int)v52 < 1) {
                uint64_t v56 = 0;
              }
              else {
                uint64_t v56 = malloc_type_malloc(12 * v52, 0x100004052888210uLL);
              }
              unsigned int v70 = v54 - 1;
              if (v53 >= 1)
              {
                int v71 = 0;
                do
                {
                  --v53;
                  uint64_t v55 = (int)v55;
                  unsigned int v72 = -1;
                  while (v53 >= v46 || (v53 & 0x80000000) == 0 && v55 >= v47[v53])
                  {
                    switch(v49[v55])
                    {
                      case 'C':
                        int v73 = 3 * v55;
                        int v74 = 3 * v55 + 1;
                        if ((v72 & 0x80000000) == 0) {
                          *(_DWORD *)&v38[4 * v72] = v74;
                        }
                        if ((v55 & 0x8000000000000000) == 0) {
                          *(_DWORD *)&v38[4 * v74] = v72;
                        }
                        int v75 = v73 + 2;
                        int v76 = 3 * ((v73 + 2) / 3);
                        unsigned int v77 = v76 + (v73 + 4) % 3;
                        double v78 = &v38[4 * v77];
                        if ((*(_DWORD *)v78 & 0x80000000) != 0 || *(_DWORD *)v78 == v75)
                        {
                          int v79 = v75;
                        }
                        else
                        {
                          int v79 = v75;
                          do
                          {
                            *((_DWORD *)v39 + (v79 + 1) % 3 + v76) = v70;
                            int v79 = *(_DWORD *)v78;
                            int v76 = 3 * (*(_DWORD *)v78 / 3);
                            unsigned int v77 = v76 + (*(_DWORD *)v78 + 2) % 3;
                            double v78 = &v38[4 * v77];
                          }
                          while ((*(_DWORD *)v78 & 0x80000000) == 0 && *(_DWORD *)v78 != v75);
                        }
                        *((_DWORD *)v39 + (v79 + 1) % 3 + v76) = v70;
                        if ((v77 & 0x80000000) == 0) {
                          *(_DWORD *)&v38[4 * v77] = v75;
                        }
                        --v70;
                        if ((v55 & 0x8000000000000000) == 0) {
                          *(_DWORD *)&v38[4 * v75] = v77;
                        }
                        break;
                      case 'E':
                        if ((int)v72 >= 1 && v56) {
                          v56[v71++] = v72;
                        }
                        break;
                      case 'L':
                        int v80 = 3 * v55 + 1;
                        if ((v72 & 0x80000000) != 0) {
                          goto LABEL_88;
                        }
                        goto LABEL_87;
                      case 'P':
                        int v81 = 3 * v55;
                        if ((v72 & 0x80000000) == 0) {
                          *(_DWORD *)&v38[4 * v72] = v81;
                        }
                        if ((v55 & 0x8000000000000000) == 0) {
                          *(_DWORD *)&v38[4 * v81] = v72;
                        }
                        unsigned int v82 = v70 - 2;
                        int v83 = v81 + 1;
                        int v84 = 3 * ((v81 + 1) / 3);
                        unsigned int v85 = v84 + (v81 + 3) % 3;
                        unsigned int v86 = &v38[4 * v85];
                        if ((*(_DWORD *)v86 & 0x80000000) != 0 || *(_DWORD *)v86 == v83)
                        {
                          int v88 = v81 + 1;
                          int v87 = 3 * (v83 / 3);
                        }
                        else
                        {
                          int v87 = 3 * (v83 / 3);
                          int v88 = v81 + 1;
                          do
                          {
                            *((_DWORD *)v39 + (v88 + 1) % 3 + v87) = v82;
                            int v88 = *(_DWORD *)v86;
                            int v87 = 3 * (*(_DWORD *)v86 / 3);
                            unsigned int v85 = v87 + (*(_DWORD *)v86 + 2) % 3;
                            unsigned int v86 = &v38[4 * v85];
                          }
                          while ((*(_DWORD *)v86 & 0x80000000) == 0 && *(_DWORD *)v86 != v83);
                        }
                        *((_DWORD *)v39 + (v88 + 1) % 3 + v87) = v82;
                        if ((v85 & 0x80000000) == 0) {
                          *(_DWORD *)&v38[4 * v85] = v83;
                        }
                        if ((v55 & 0x8000000000000000) == 0) {
                          *(_DWORD *)&v38[4 * v83] = v85;
                        }
                        unsigned int v101 = v70 - 1;
                        int v102 = v81 + 2;
                        int v103 = 3 * ((v81 + 2) / 3);
                        unsigned int v104 = v103 + (v81 + 4) % 3;
                        uint64_t v105 = &v38[4 * v104];
                        if ((*(_DWORD *)v105 & 0x80000000) != 0 || *(_DWORD *)v105 == v102)
                        {
                          int v107 = v81 + 2;
                          int v106 = 3 * (v102 / 3);
                        }
                        else
                        {
                          int v106 = 3 * (v102 / 3);
                          int v107 = v81 + 2;
                          do
                          {
                            *((_DWORD *)v39 + (v107 + 1) % 3 + v106) = v101;
                            int v107 = *(_DWORD *)v105;
                            int v106 = 3 * (*(_DWORD *)v105 / 3);
                            unsigned int v104 = v106 + (*(_DWORD *)v105 + 2) % 3;
                            uint64_t v105 = &v38[4 * v104];
                          }
                          while ((*(_DWORD *)v105 & 0x80000000) == 0 && *(_DWORD *)v105 != v102);
                        }
                        *((_DWORD *)v39 + (v107 + 1) % 3 + v106) = v101;
                        if ((v104 & 0x80000000) == 0) {
                          *(_DWORD *)&v38[4 * v104] = v102;
                        }
                        if ((v55 & 0x8000000000000000) == 0) {
                          *(_DWORD *)&v38[4 * v102] = v104;
                        }
                        int v109 = v83 - v84;
                        unsigned int v110 = v102 - v103 + v81;
                        uint64_t v111 = &v38[4 * v110];
                        if ((*(_DWORD *)v111 & 0x80000000) != 0)
                        {
                          int v112 = 3 * v55;
                        }
                        else
                        {
                          int v112 = 3 * v55;
                          if (*(_DWORD *)v111 != v81)
                          {
                            int v112 = 3 * v55;
                            int v113 = 3 * v55;
                            do
                            {
                              *((_DWORD *)v39 + (v113 + 1) % 3 + v112) = v70;
                              int v113 = *(_DWORD *)v111;
                              int v112 = 3 * (*(_DWORD *)v111 / 3);
                              unsigned int v110 = v112 + (*(_DWORD *)v111 + 2) % 3;
                              uint64_t v111 = &v38[4 * v110];
                            }
                            while ((*(_DWORD *)v111 & 0x80000000) == 0 && *(_DWORD *)v111 != v81);
                            int v109 = (v113 + 1) % 3;
                          }
                        }
                        *((_DWORD *)v39 + v109 + v112) = v70;
                        if ((v110 & 0x80000000) == 0) {
                          *(_DWORD *)&v38[4 * v110] = v81;
                        }
                        if ((v55 & 0x8000000000000000) == 0) {
                          *(_DWORD *)&v38[4 * v81] = v110;
                        }
                        v70 -= 3;
                        --v53;
                        break;
                      case 'R':
                        int v80 = 3 * v55 + 2;
                        if ((v72 & 0x80000000) == 0) {
LABEL_87:
                        }
                          *(_DWORD *)&v38[4 * v72] = v80;
LABEL_88:
                        if ((v55 & 0x8000000000000000) == 0) {
                          *(_DWORD *)&v38[4 * v80] = v72;
                        }
                        break;
                      case 'S':
                        int v89 = 3 * v55 + 1;
                        if ((v72 & 0x80000000) == 0) {
                          *(_DWORD *)&v38[4 * v72] = v89;
                        }
                        if ((v55 & 0x8000000000000000) == 0) {
                          *(_DWORD *)&v38[4 * v89] = v72;
                        }
                        uint64_t v90 = 3 * v55 + 2;
                        int v91 = *(_DWORD *)&v38[4 * v90];
                        if (v91 != -1 || v56 == 0 || v71 < 1)
                        {
                          if (v91 <= -2)
                          {
                            unsigned int v94 = -v91;
                            if ((v55 & 0x8000000000000000) == 0) {
                              *(_DWORD *)&v38[4 * v90] = v94;
                            }
                            *(_DWORD *)&v38[4 * v94] = v90;
                            do
                            {
                              int v95 = 3 * ((int)v90 / 3) + ((int)v90 + 1) % 3;
                              LODWORD(v90) = *(_DWORD *)&v38[4 * v95];
                            }
                            while ((v90 & 0x80000000) == 0);
                            int v96 = 3 * (v95 / 3) + (v95 + 1) % 3;
                            do
                            {
                              int v97 = 3 * (v96 / 3) + (v96 + 1) % 3;
                              int v96 = *(_DWORD *)&v38[4 * v97];
                            }
                            while ((v96 & 0x80000000) == 0);
                            do
                            {
                              int v98 = 3 * (v97 / 3);
                              *((_DWORD *)v39 + v98 + (v97 + 1) % 3) = v70;
                              int v97 = v98 + (v97 + 2) % 3;
                              for (unsigned int i = *(_DWORD *)&v38[4 * v97]; (i & 0x80000000) == 0; unsigned int i = *(_DWORD *)&v38[4 * v97])
                              {
                                unsigned int v100 = 3 * (i / 3);
                                *((_DWORD *)v39 + v100 + (i + 1) % 3) = v70;
                                int v97 = v100 + (i + 2) % 3;
                              }
                              --v70;
                            }
                            while (*((_DWORD *)v39 + 3 * (v97 / 3) + (v97 + 1) % 3) == -1);
                          }
                        }
                        else
                        {
                          uint64_t v108 = v56[--v71];
                          if ((v55 & 0x8000000000000000) == 0) {
                            *(_DWORD *)&v38[4 * v90] = v108;
                          }
                          if ((v108 & 0x80000000) == 0) {
                            *(_DWORD *)&v38[4 * v108] = v90;
                          }
                        }
                        break;
                      default:
                        break;
                    }
                    unsigned int v72 = 3 * v55--;
                  }
                  if (v46)
                  {
                    int v114 = 3 * v47[v53];
                    int v115 = 3 * ((v114 + 1) / 3) + (v114 + 2) % 3;
                    do
                    {
                      int v116 = 3 * (v115 / 3) + (v115 + 1) % 3;
                      int v115 = *(_DWORD *)&v38[4 * v116];
                    }
                    while ((v115 & 0x80000000) == 0);
                    do
                    {
                      int v117 = 3 * (v116 / 3);
                      *((_DWORD *)v39 + v117 + (v116 + 1) % 3) = v70;
                      int v116 = v117 + (v116 + 2) % 3;
                      for (unsigned int j = *(_DWORD *)&v38[4 * v116]; (j & 0x80000000) == 0; unsigned int j = *(_DWORD *)&v38[4 * v116])
                      {
                        unsigned int v119 = 3 * (j / 3);
                        *((_DWORD *)v39 + v119 + (j + 1) % 3) = v70;
                        int v116 = v119 + (j + 2) % 3;
                      }
                      --v70;
                    }
                    while (*((_DWORD *)v39 + 3 * (v116 / 3) + (v116 + 1) % 3) == -1);
                    --v46;
                  }
                }
                while (v53 > 0);
              }
              free(v56);
              if (v70 == -1)
              {
                *a5 = (uint64_t)v39;
                int v42 = 1;
                uint64_t v43 = (int *)v38;
              }
              else
              {
                free(v38);
                free(v39);
                uint64_t v43 = 0;
                int v42 = 0;
              }
LABEL_173:
              free(v47);
              free(v49);
              if (!v42) {
                return 1;
              }
              uint64_t v120 = malloc_type_calloc(*a10, 4uLL, 0x100004052888210uLL);
              unsigned int v121 = v120;
              *a8 = v120;
              uint64_t v122 = *(void *)(a11 + 24);
              if (v24)
              {
                unint64_t v123 = 0;
                int v124 = 0;
                unsigned int v125 = v120;
                long long v126 = *(unsigned int **)(a11 + 24);
                long long v127 = a5;
                do
                {
                  if (v124 <= 0)
                  {
                    unsigned int v129 = *v126++;
                    v123 |= (unint64_t)bswap32(v129) << 32;
                    int v124 = 32;
                  }
                  unint64_t v128 = v123 >> 63;
                  --v124;
                  v123 *= 2;
                  *v125++ = v128;
                  --v24;
                }
                while (v24);
              }
              else
              {
                int v124 = 0;
                long long v126 = *(unsigned int **)(a11 + 24);
                long long v127 = a5;
              }
              *(_DWORD *)(a11 + 100) = *(_DWORD *)(a11 + 100) - v124 + 8 * (v126 - v122);
              size_t v130 = *a10;
              int v131 = malloc_type_calloc(v130, 4uLL, 0x100004052888210uLL);
              uint64_t v132 = v131;
              if ((int)v130 >= 1)
              {
                uint64_t v133 = 0;
                int v134 = 0;
                size_t v135 = v131;
                while (1)
                {
                  if (*v135) {
                    goto LABEL_185;
                  }
                  LODWORD(v136) = v133;
                  if (v43[v133] == -1) {
                    goto LABEL_192;
                  }
                  if (v43[v133 + 1] == -1) {
                    break;
                  }
                  uint64_t v136 = v133 + 2;
                  if (v43[v136] == -1) {
                    goto LABEL_192;
                  }
                  int v137 = 0;
LABEL_184:
                  *size_t v135 = v137;
LABEL_185:
                  v133 += 3;
                  ++v135;
                  if (3 * v130 == v133) {
                    goto LABEL_194;
                  }
                }
                LODWORD(v136) = v133 + 1;
LABEL_192:
                int v138 = v134 + 1;
                int v137 = v121[v134];
                if (v137)
                {
                  unint64_t v139 = 1431655766 * v43[3 * (v136 / 3) + ((int)v136 + 2) % 3u];
                  *((_DWORD *)v131 + (int)(HIDWORD(v139) + (v139 >> 63))) = v137;
                }
                int v134 = v138;
                goto LABEL_184;
              }
LABEL_194:
              memcpy(v121, v131, 4 * v130);
              free(v132);
              int64x2_t v140 = (unsigned int *)malloc_type_calloc(*a10, 4uLL, 0x100004052888210uLL);
              *a7 = v140;
              uint64_t v141 = *(void *)(a11 + 32);
              if ((int)v392 < 1)
              {
                int v143 = 0;
                uint64_t v146 = *(unsigned int **)(a11 + 32);
              }
              else
              {
                unint64_t v142 = 0;
                int v143 = 0;
                BOOL v144 = v140;
                uint64_t v145 = v392;
                uint64_t v146 = *(unsigned int **)(a11 + 32);
                do
                {
                  if (v143 < v386)
                  {
                    unsigned int v148 = *v146++;
                    v142 |= (unint64_t)bswap32(v148) << (32 - v143);
                    v143 += 32;
                  }
                  unint64_t v147 = v142 >> (64 - v386);
                  v143 -= v386;
                  v142 <<= v386;
                  *v144++ = v147;
                  --v145;
                }
                while (v145);
              }
              *(_DWORD *)(a11 + 104) = *(_DWORD *)(a11 + 104) - v143 + 8 * (v146 - v141);
              if (v392 != 1) {
                goto LABEL_210;
              }
              uint64_t v149 = *a10;
              if ((int)v149 <= 1) {
                goto LABEL_210;
              }
              unsigned int v150 = *v140;
              if (v149 >= 9)
              {
                unint64_t v152 = (v149 - 1) & 0xFFFFFFFFFFFFFFF8;
                int32x4_t v153 = vdupq_n_s32(v150);
                unsigned int v154 = (int32x4_t *)(v140 + 5);
                unint64_t v155 = v152;
                do
                {
                  v154[-1] = v153;
                  *unsigned int v154 = v153;
                  v154 += 2;
                  v155 -= 8;
                }
                while (v155);
                if (v149 - 1 == v152) {
                  goto LABEL_210;
                }
                uint64_t v151 = v152 | 1;
              }
              else
              {
                uint64_t v151 = 1;
              }
              uint64_t v156 = v149 - v151;
              unint64_t v157 = &v140[v151];
              do
              {
                *v157++ = v150;
                --v156;
              }
              while (v156);
LABEL_210:
              uint64_t v158 = malloc_type_calloc((int)*a2, 4uLL, 0x100004052888210uLL);
              int v159 = v158;
              *a9 = v158;
              uint64_t v160 = *(void *)(a11 + 72);
              if ((int)v30 < 1)
              {
                int v162 = 0;
                v164 = *(unsigned int **)(a11 + 72);
              }
              else
              {
                unint64_t v161 = 0;
                int v162 = 0;
                int v163 = v158;
                v164 = *(unsigned int **)(a11 + 72);
                do
                {
                  if (v162 <= 0)
                  {
                    unsigned int v166 = *v164++;
                    v161 |= (unint64_t)bswap32(v166) << 32;
                    int v162 = 32;
                  }
                  unint64_t v165 = v161 >> 63;
                  --v162;
                  v161 *= 2;
                  *v163++ = v165;
                  --v30;
                }
                while (v30);
              }
              *(_DWORD *)(a11 + 124) = *(_DWORD *)(a11 + 124) - v162 + 8 * (v164 - v160);
              size_t v167 = (int)*a2;
              int v168 = *a10;
              uint64_t v169 = *v127;
              uint64_t v170 = malloc_type_calloc(v167, 4uLL, 0x100004052888210uLL);
              long long v171 = malloc_type_calloc(v167, 4uLL, 0x100004052888210uLL);
              int v172 = v171;
              if (v168 >= 1)
              {
                uint64_t v173 = 0;
                LODWORD(v174) = 3 * v168;
                if (3 * v168 <= 1) {
                  uint64_t v174 = 1;
                }
                else {
                  uint64_t v174 = v174;
                }
                do
                {
                  while (v43[v173] == -1)
                  {
                    unsigned int v175 = 3 * (v173 / 3);
                    *((_DWORD *)v171 + *(int *)(v169 + 4 * (int)(v175 + ((int)v173++ + 2) % 3u))) = 1;
                    *((_DWORD *)v171 + *(int *)(v169 + 4 * (int)(v175 + v173 % 3))) = 1;
                    if (v173 == v174) {
                      goto LABEL_223;
                    }
                  }
                  ++v173;
                }
                while (v173 != v174);
              }
LABEL_223:
              if ((int)v167 >= 1)
              {
                int v176 = 0;
                uint64_t v177 = v167;
                int v178 = v171;
                double v179 = v170;
                do
                {
                  if (*v178++)
                  {
                    int v181 = v159[v176++];
                    *double v179 = v181;
                  }
                  ++v179;
                  --v177;
                }
                while (v177);
              }
              memcpy(v159, v170, 4 * v167);
              free(v170);
              free(v172);
              unint64_t v182 = malloc_type_malloc(4 * (int)*a2, 0x100004052888210uLL);
              uint64_t v183 = *a2;
              uint64_t v184 = *(void *)(a11 + 64);
              float v382 = v182;
              if ((int)v183 < 1)
              {
                int v186 = 0;
                LODWORD(v188) = *(void *)(a11 + 64);
                long long v189 = a5;
              }
              else
              {
                unint64_t v185 = 0;
                int v186 = 0;
                double v187 = v182;
                double v188 = *(unsigned int **)(a11 + 64);
                long long v189 = a5;
                do
                {
                  if (v186 <= 0)
                  {
                    unsigned int v191 = *v188++;
                    v185 |= (unint64_t)bswap32(v191) << 32;
                    int v186 = 32;
                  }
                  unint64_t v190 = v185 >> 63;
                  --v186;
                  v185 *= 2;
                  *v187++ = v190;
                  --v183;
                }
                while (v183);
              }
              *(_DWORD *)(a11 + 120) = *(_DWORD *)(a11 + 120) - v186 + 8 * (v188 - v184);
              unint64_t v192 = malloc_type_calloc(v395, 4uLL, 0x100004052888210uLL);
              uint64_t v193 = *(void *)(a11 + 8);
              if (v395 < 1)
              {
                int v195 = 0;
                double v198 = *(unsigned int **)(a11 + 8);
                unint64_t v199 = a6;
              }
              else
              {
                unint64_t v194 = 0;
                int v195 = 0;
                uint64_t v196 = v395;
                double v197 = v192;
                double v198 = *(unsigned int **)(a11 + 8);
                unint64_t v199 = a6;
                do
                {
                  if (v195 <= 0)
                  {
                    unsigned int v201 = *v198++;
                    v194 |= (unint64_t)bswap32(v201) << 32;
                    int v195 = 32;
                  }
                  unint64_t v200 = v194 >> 63;
                  --v195;
                  v194 *= 2;
                  *v197++ = v200;
                  --v196;
                }
                while (v196);
              }
              *(_DWORD *)(a11 + 92) = *(_DWORD *)(a11 + 92) - v195 + 8 * (v198 - v193);
              v384 = *(char **)(a11 + 56);
              uint64_t v391 = *(void *)(a11 + 48);
              v389 = v192;
              v393 = (__int16 *)malloc_type_calloc((int)*a4, 4uLL, 0x100004052888210uLL);
              v202 = malloc_type_malloc(12 * *a10, 0x100004052888210uLL);
              void *v199 = v202;
              uint64_t v203 = *v189;
              size_t v204 = *a10;
              size_t v205 = (int)*a2;
              uint64_t v387 = *a7;
              v385 = malloc_type_calloc(v205, 4uLL, 0x100004052888210uLL);
              v206 = malloc_type_malloc(4 * v205, 0x100004052888210uLL);
              uint64_t __len = 4 * v205;
              memset(v206, 255, 4 * v205);
              v207 = malloc_type_calloc(v204, 4uLL, 0x100004052888210uLL);
              int v208 = malloc_type_malloc(12 * v204, 0x100004052888210uLL);
              v209 = (char *)malloc_type_malloc(12 * v204, 0x100004052888210uLL);
              size_t v371 = v205;
              v383 = (char *)malloc_type_calloc(v205, 6uLL, 0x1000040274DC3F3uLL);
              uint64_t __n = 4 * v204;
              int64_t v210 = (char *)malloc_type_malloc(4 * v204, 0x100004052888210uLL);
              v215 = v208;
              unint64_t v217 = v385;
              v216 = v387;
              double v218 = v206;
              double v219 = v389;
              v402 = v210;
              size_t v220 = v204;
              uint64_t v221 = 0;
              int v222 = 0;
              int v223 = 0;
              uint64_t v224 = 0;
              *a4 = 0;
              v380 = v209 - 4;
              v381 = v209;
              v225 = v382;
              uint64_t v399 = v218;
              v401 = v215;
              if ((int)v204 > 0)
              {
LABEL_241:
                uint64_t v226 = (int)v224;
                do
                {
                  if (!v207[v226])
                  {
                    uint64_t v224 = v226;
                    goto LABEL_246;
                  }
                  ++v226;
                }
                while (v220 != v226);
LABEL_277:
                v309 = v216;
                v310 = v215;
                memcpy(v384, v383, 6 * v371);
                memcpy(v309, v402, __n);
                free(v217);
                free(v218);
                free(v207);
                free(v310);
                free(v381);
                free(v383);
                free(v402);
                uint64_t v311 = (float *)malloc_type_malloc(12 * (int)*a2, 0x10000403E1C8BA9uLL);
                *long long v373 = v311;
                uint64_t v312 = *a2;
                if ((int)v312 >= 1)
                {
                  float64x2_t v313 = vcvtq_f64_f32(v18);
                  *(double *)&uint64_t v314 = v19;
                  if (v312 < 8)
                  {
                    uint64_t v315 = 0;
LABEL_283:
                    uint64_t v341 = v312 - v315;
                    double v342 = (int16x4_t *)&v311[3 * v315 + 2];
                    double v343 = (__int16 *)&v384[6 * v315 + 4];
                    do
                    {
                      v344.i64[0] = *(v343 - 2);
                      v344.i64[1] = *(v343 - 1);
                      int16x4_t v345 = (int16x4_t)vcvt_f32_f64(vmlaq_f64(v313, vcvtq_f64_s64(v344), v374));
                      v342[-1] = v345;
                      v345.i16[0] = *v343;
                      *(float *)v345.i32 = *(double *)&v314 + *(double *)&v375 * (double)vmovl_s16(v345).i32[0];
                      v342->i32[0] = v345.i32[0];
                      double v342 = (int16x4_t *)((char *)v342 + 12);
                      v343 += 3;
                      --v341;
                    }
                    while (v341);
                    goto LABEL_285;
                  }
                  float64x2_t v316 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v374.f64[0], 0);
                  float64x2_t v317 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v313.f64[0], 0);
                  float64x2_t v318 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v374, 1);
                  float64x2_t v319 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v313, 1);
                  float64x2_t v320 = (float64x2_t)vdupq_lane_s64(v375, 0);
                  uint64_t v315 = v312 & 0xFFFFFFF8;
                  v321 = (const __int16 *)v384;
                  v322 = v311;
                  uint64_t v323 = v315;
                  float64x2_t v324 = (float64x2_t)vdupq_lane_s64(v314, 0);
                  do
                  {
                    int16x8x3_t v409 = vld3q_s16(v321);
                    v321 += 24;
                    int32x4_t v325 = vmovl_high_s16(v409.val[0]);
                    v326.i64[0] = v325.i32[0];
                    v326.i64[1] = v325.i32[1];
                    float64x2_t v327 = vcvtq_f64_s64(v326);
                    v326.i64[0] = v325.i32[2];
                    v326.i64[1] = v325.i32[3];
                    float64x2_t v328 = vcvtq_f64_s64(v326);
                    int32x4_t v329 = vmovl_s16(*(int16x4_t *)v409.val[0].i8);
                    v326.i64[0] = v329.i32[0];
                    v326.i64[1] = v329.i32[1];
                    float64x2_t v330 = vcvtq_f64_s64(v326);
                    v326.i64[0] = v329.i32[2];
                    v326.i64[1] = v329.i32[3];
                    float64x2_t v331 = vmlaq_f64(v317, vcvtq_f64_s64(v326), v316);
                    float64x2_t v332 = vmlaq_f64(v317, v330, v316);
                    v410.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v317, v327, v316)), vmlaq_f64(v317, v328, v316));
                    int32x4_t v333 = vmovl_high_s16(v409.val[1]);
                    v326.i64[0] = v333.i32[0];
                    v326.i64[1] = v333.i32[1];
                    float64x2_t v334 = vcvtq_f64_s64(v326);
                    v326.i64[0] = v333.i32[2];
                    v326.i64[1] = v333.i32[3];
                    v410.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v319, v334, v318)), vmlaq_f64(v319, vcvtq_f64_s64(v326), v318));
                    int32x4_t v335 = vmovl_high_s16(v409.val[2]);
                    v326.i64[0] = v335.i32[0];
                    v326.i64[1] = v335.i32[1];
                    float64x2_t v336 = vcvtq_f64_s64(v326);
                    v326.i64[0] = v335.i32[2];
                    v326.i64[1] = v335.i32[3];
                    v410.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v324, v336, v320)), vmlaq_f64(v324, vcvtq_f64_s64(v326), v320));
                    v411.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v332), v331);
                    int32x4_t v337 = vmovl_s16(*(int16x4_t *)v409.val[1].i8);
                    v326.i64[0] = v337.i32[0];
                    v326.i64[1] = v337.i32[1];
                    float64x2_t v338 = vcvtq_f64_s64(v326);
                    v326.i64[0] = v337.i32[2];
                    v326.i64[1] = v337.i32[3];
                    v411.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v319, v338, v318)), vmlaq_f64(v319, vcvtq_f64_s64(v326), v318));
                    v409.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v409.val[2].i8);
                    v326.i64[0] = v409.val[0].i32[0];
                    v326.i64[1] = v409.val[0].i32[1];
                    v409.val[1] = (int16x8_t)vcvtq_f64_s64(v326);
                    v326.i64[0] = v409.val[0].i32[2];
                    v326.i64[1] = v409.val[0].i32[3];
                    v411.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v324, (float64x2_t)v409.val[1], v320)), vmlaq_f64(v324, vcvtq_f64_s64(v326), v320));
                    v339 = v322 + 24;
                    vst3q_f32(v322, v411);
                    v340 = v322 + 12;
                    vst3q_f32(v340, v410);
                    v322 = v339;
                    v323 -= 8;
                  }
                  while (v323);
                  if (v315 != v312) {
                    goto LABEL_283;
                  }
                }
LABEL_285:
                double v346 = (float *)malloc_type_malloc(8 * (int)*a4, 0x100004000313F17uLL);
                *a3 = v346;
                uint64_t v347 = *a4;
                if ((int)v347 >= 1)
                {
                  double v348 = (double)~(-1 << v372);
                  if (v347 >= 8)
                  {
                    uint64_t v349 = v347 & 0x7FFFFFF8;
                    double v350 = v393;
                    BOOL v351 = v346;
                    uint64_t v352 = v347 & 0xFFFFFFF8;
                    double v353 = 1.0 / v348;
                    do
                    {
                      int16x8x2_t v406 = vld2q_s16(v350);
                      v350 += 16;
                      int32x4_t v354 = vmovl_high_s16(v406.val[0]);
                      v355.i64[0] = v354.i32[0];
                      v355.i64[1] = v354.i32[1];
                      float64x2_t v356 = vcvtq_f64_s64(v355);
                      v355.i64[0] = v354.i32[2];
                      v355.i64[1] = v354.i32[3];
                      float64x2_t v357 = vcvtq_f64_s64(v355);
                      int32x4_t v358 = vmovl_s16(*(int16x4_t *)v406.val[0].i8);
                      v355.i64[0] = v358.i32[0];
                      v355.i64[1] = v358.i32[1];
                      float64x2_t v359 = vcvtq_f64_s64(v355);
                      v355.i64[0] = v358.i32[2];
                      v355.i64[1] = v358.i32[3];
                      float64x2_t v360 = vmulq_n_f64(vcvtq_f64_s64(v355), v353);
                      v408.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v356, v353)), vmulq_n_f64(v357, v353));
                      int32x4_t v361 = vmovl_high_s16(v406.val[1]);
                      v355.i64[0] = v361.i32[0];
                      v355.i64[1] = v361.i32[1];
                      float64x2_t v362 = vcvtq_f64_s64(v355);
                      v355.i64[0] = v361.i32[2];
                      v355.i64[1] = v361.i32[3];
                      v408.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v362, v353)), vmulq_n_f64(vcvtq_f64_s64(v355), v353));
                      v407.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v359, v353)), v360);
                      v406.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v406.val[1].i8);
                      v355.i64[0] = v406.val[0].i32[0];
                      v355.i64[1] = v406.val[0].i32[1];
                      v406.val[1] = (int16x8_t)vcvtq_f64_s64(v355);
                      v355.i64[0] = v406.val[0].i32[2];
                      v355.i64[1] = v406.val[0].i32[3];
                      v407.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64((float64x2_t)v406.val[1], v353)), vmulq_n_f64(vcvtq_f64_s64(v355), v353));
                      uint64_t v363 = v351 + 16;
                      vst2q_f32(v351, v407);
                      v364 = v351 + 8;
                      vst2q_f32(v364, v408);
                      BOOL v351 = v363;
                      v352 -= 8;
                    }
                    while (v352);
                    if (v349 == v347) {
                      goto LABEL_293;
                    }
                  }
                  else
                  {
                    uint64_t v349 = 0;
                  }
                  uint64_t v365 = v347 - v349;
                  __int16 v366 = (float32x2_t *)&v346[2 * v349];
                  v367 = &v393[2 * v349];
                  double v368 = 1.0 / v348;
                  do
                  {
                    v369.i64[0] = *v367;
                    v369.i64[1] = v367[1];
                    *v366++ = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_s64(v369), v368));
                    v367 += 2;
                    --v365;
                  }
                  while (v365);
                }
LABEL_293:
                free(v382);
                free(v389);
                free(v393);
                free(v43);
                return 0;
              }
              while (1)
              {
LABEL_246:
                if (v224 == v220) {
                  goto LABEL_277;
                }
                int v227 = v224;
                uint64_t v377 = v224;
                int v228 = 3 * v224;
                _DWORD *v215 = 3 * v224;
                int v229 = v222;
                uint64_t v230 = (v228 + 2) % 3 + v228;
                uint64_t v231 = *(int *)(v203 + v230 * 4);
                uint64_t v232 = 3 * (int)v224;
                uint64_t v233 = *(int *)(v203 + v232 * 4);
                uint64_t v234 = (v228 + 1) % 3 + v228;
                uint64_t v235 = *(int *)(v203 + v234 * 4);
                float v236 = &v383[6 * v231];
                uint64_t v237 = &v384[6 * v231];
                int v238 = *(_DWORD *)v237;
                *((_WORD *)v236 + 2) = *((_WORD *)v237 + 2);
                *(_DWORD *)float v236 = v238;
                unint64_t v239 = &v383[6 * v233];
                v240 = &v384[6 * v233];
                int v241 = *(_DWORD *)v240;
                *((_WORD *)v239 + 2) = *((_WORD *)v240 + 2);
                *(_DWORD *)unint64_t v239 = v241;
                unint64_t v242 = &v383[6 * v235];
                v243 = &v384[6 * v235];
                int v244 = *(_DWORD *)v243;
                *((_WORD *)v242 + 2) = *((_WORD *)v243 + 2);
                *(_DWORD *)unint64_t v242 = v244;
                int v245 = 1;
                *((_DWORD *)v217 + v235) = 1;
                *((_DWORD *)v217 + v233) = 1;
                *((_DWORD *)v217 + v231) = 1;
                *(_DWORD *)&v393[2 * *a4] = *(_DWORD *)(v391 + 4 * (int)*a4);
                LODWORD(v231) = (*a4)++;
                v202[v230] = v231;
                *(_DWORD *)&v393[2 * *a4] = *(_DWORD *)(v391 + 4 * (int)*a4);
                LODWORD(v231) = (*a4)++;
                v202[v232] = v231;
                *(_DWORD *)&v393[2 * *a4] = *(_DWORD *)(v391 + 4 * (int)*a4);
                LODWORD(v231) = (*a4)++;
                v202[v234] = v231;
                *((_DWORD *)v218 + *(int *)(v203 + v230 * 4)) = v202[v230];
                *((_DWORD *)v218 + *(int *)(v203 + v232 * 4)) = v202[v232];
                *((_DWORD *)v218 + *(int *)(v203 + v234 * 4)) = v202[v234];
                uint64_t v246 = v227;
                v207[v246] = 1;
                int v222 = v229 + 1;
                *(_DWORD *)&v402[v246 * 4] = v216[v229];
LABEL_249:
                if (v245) {
                  goto LABEL_257;
                }
                v247 = &v380[4 * v223];
                do
                {
                  int v249 = *(_DWORD *)v247;
                  v247 -= 4;
                  int v248 = v249;
                  int v250 = v249 / 3;
                  int v251 = v207[v249 / 3];
                  --v223;
                }
                while (v223 && v251);
                if (!v251) {
                  break;
                }
                double v218 = v399;
LABEL_275:
                size_t v220 = v204;
                uint64_t v224 = v377;
                if ((int)v377 < (int)v204) {
                  goto LABEL_241;
                }
              }
              uint64_t v404 = v250;
              int v396 = v222;
              memset(v399, 255, __len);
              unint64_t v217 = v385;
              uint64_t v252 = *(int *)(v203 + 4 * v248);
              if (!*((_DWORD *)v385 + v252))
              {
                uint64_t v253 = v43[v248];
                int v254 = *(_DWORD *)(v203 + 4 * v253);
                int v255 = 3 * ((int)v253 / 3);
                int v256 = *(_DWORD *)(v203 + 4 * (v255 + ((int)v253 + 2) % 3));
                unint64_t v257 = &v383[6 * *(int *)(v203 + 4 * (v255 + ((int)v253 + 1) % 3))];
                v258 = &v383[6 * v256];
                v259 = &v383[6 * v254];
                float v260 = &v384[6 * v252];
                v211.i32[0] = *(_DWORD *)v257;
                v211.i16[2] = *((_WORD *)v257 + 2);
                v212.i32[0] = *(_DWORD *)v258;
                v212.i16[2] = *((_WORD *)v258 + 2);
                unint64_t v261 = &v383[6 * v252];
                v213.i32[0] = *(_DWORD *)v259;
                v213.i16[2] = *((_WORD *)v259 + 2);
                v214.i32[0] = *(_DWORD *)v260;
                v214.i16[2] = *((_WORD *)v260 + 2);
                int16x4_t v262 = vadd_s16(v212, v211);
                int16x4_t v212 = vadd_s16(v213, v214);
                int16x4_t v211 = vsub_s16(v262, v212);
                *((_WORD *)v261 + 2) = v211.i16[2];
                *(_DWORD *)unint64_t v261 = v211.i32[0];
                *((_DWORD *)v385 + v252) = 1;
              }
              *(_DWORD *)&v393[2 * *a4] = *(_DWORD *)(v391 + 4 * (int)*a4);
              int v263 = (*a4)++;
              uint64_t v264 = 3 * (int)v404 + (v248 + 2) % 3;
              v202[v264] = v263;
              *(_DWORD *)&v393[2 * *a4] = *(_DWORD *)(v391 + 4 * (int)*a4);
              int v265 = (*a4)++;
              uint64_t v266 = v248;
              v202[v266] = v265;
              *(_DWORD *)&v393[2 * *a4] = *(_DWORD *)(v391 + 4 * (int)*a4);
              int v267 = (*a4)++;
              uint64_t v268 = 3 * (int)v404 + (v248 + 1) % 3;
              v202[v268] = v267;
              v215 = v401;
              *((_DWORD *)v399 + *(int *)(v203 + v264 * 4)) = v202[v264];
              *((_DWORD *)v399 + *(int *)(v203 + v266 * 4)) = v202[v266];
              *((_DWORD *)v399 + *(int *)(v203 + v268 * 4)) = v202[v268];
              uint64_t v269 = v404;
              int v245 = 1;
              v207[v269] = 1;
              v216 = v387;
              double v219 = v389;
              int v222 = v396 + 1;
              *(_DWORD *)&v402[v269 * 4] = v387[v396];
              _DWORD *v401 = v248;
              double v218 = v399;
LABEL_257:
              int v270 = v215[--v245];
              int v397 = v222;
              uint64_t v405 = v222 - 1;
              int v271 = v270;
              while (1)
              {
                uint64_t v276 = v43[v271];
                if ((v276 & 0x80000000) != 0) {
                  goto LABEL_261;
                }
                unint64_t v277 = v276 / 3uLL;
                if (v207[v277]) {
                  goto LABEL_261;
                }
                uint64_t v278 = *(int *)(v203 + 4 * v276);
                int v279 = 3 * (v271 / 3);
                int v280 = v279 + (v271 + 2) % 3;
                int v281 = v279 + (v271 + 1) % 3;
                if (!v225[*(int *)(v203 + 4 * v280)] || !v225[*(int *)(v203 + 4 * v281)]) {
                  break;
                }
                uint64_t v282 = (v221 + 1);
                if (!v219[(int)v221]) {
                  goto LABEL_269;
                }
                int v274 = v223++;
                float v275 = v381;
LABEL_260:
                v275[v274] = v276;
                uint64_t v221 = v282;
LABEL_261:
                int v271 = 3 * (v271 / 3) + (v271 + 1) % 3;
                if (v271 == v270)
                {
                  int v222 = v397;
                  if (!(v245 | v223))
                  {
                    int v223 = 0;
                    goto LABEL_275;
                  }
                  goto LABEL_249;
                }
              }
              uint64_t v282 = v221;
LABEL_269:
              if (!*((_DWORD *)v217 + v278))
              {
                uint64_t v283 = v43[v276];
                int v284 = *(_DWORD *)(v203 + 4 * v283);
                int v285 = 3 * ((int)v283 / 3);
                int v286 = *(_DWORD *)(v203 + 4 * (v285 + ((int)v283 + 2) % 3));
                double v287 = &v383[6 * *(int *)(v203 + 4 * (v285 + ((int)v283 + 1) % 3))];
                double v288 = &v383[6 * v286];
                double v289 = &v383[6 * v284];
                double v290 = &v384[6 * v278];
                v211.i32[0] = *(_DWORD *)v287;
                v211.i16[2] = *((_WORD *)v287 + 2);
                v212.i32[0] = *(_DWORD *)v288;
                v212.i16[2] = *((_WORD *)v288 + 2);
                v291 = &v383[6 * v278];
                v215 = v401;
                v213.i32[0] = *(_DWORD *)v289;
                v213.i16[2] = *((_WORD *)v289 + 2);
                v214.i32[0] = *(_DWORD *)v290;
                v214.i16[2] = *((_WORD *)v290 + 2);
                int16x4_t v292 = vadd_s16(v212, v211);
                int16x4_t v212 = vadd_s16(v213, v214);
                int16x4_t v211 = vsub_s16(v292, v212);
                *((_WORD *)v291 + 2) = v211.i16[2];
                *(_DWORD *)v291 = v211.i32[0];
                *((_DWORD *)v217 + v278) = 1;
              }
              int v293 = *((_DWORD *)v218 + v278);
              if (v293 == -1)
              {
                uint64_t v294 = v43[v276];
                int v295 = 3 * ((int)v294 / 3);
                uint64_t v296 = *(int *)(v203 + 4 * v276);
                int64_t v297 = &v393[2 * v202[v295 + ((int)v294 + 1) % 3]];
                __int16 v298 = *v297;
                unint64_t v299 = &v393[2 * v202[v295 + ((int)v294 + 2) % 3]];
                __int16 v300 = *v299;
                unint64_t v301 = &v393[2 * v202[v294]];
                __int16 v302 = *v301;
                LOWORD(v297) = v297[1];
                LOWORD(v299) = v299[1];
                LOWORD(v301) = v301[1];
                uint64_t v303 = (int)*a4;
                v304 = (_WORD *)(v391 + 4 * v303);
                __int16 v305 = v300 + v298;
                __int16 v306 = v302 + *v304;
                double v219 = v389;
                __int16 v307 = v305 - v306;
                uint64_t v308 = &v393[2 * v303];
                double v218 = v399;
                *uint64_t v308 = v307;
                v308[1] = (_WORD)v299 + (_WORD)v297 - ((_WORD)v301 + v304[1]);
                v202[v276] = v303;
                unint64_t v217 = v385;
                v216 = v387;
                ++*a4;
                v225 = v382;
                *((_DWORD *)v399 + v296) = v202[v276];
                v215 = v401;
              }
              else
              {
                v202[v276] = v293;
              }
              int v272 = 3 * v277;
              v202[v272 + ((int)v276 + 2) % 3u] = v202[v281];
              v202[v272 + ((int)v276 + 1) % 3u] = v202[v280];
              uint64_t v273 = v277;
              v207[v273] = 1;
              *(_DWORD *)&v402[v273 * 4] = v216[v405];
              int v274 = v245++;
              float v275 = v215;
              goto LABEL_260;
            }
          }
        }
      }
    }
  }
  return result;
}

void ppred_decompress_free(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  free(a1);
  free(a2);
  free(a3);
  free(a4);
  free(a5);
  free(a6);
  free(a7);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::Draping::FoundationVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::Draping::FoundationVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    unint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      unint64_t v5 = __p;
    }
    unint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573B30;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF573B30;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573AE8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF573AE8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0,std::allocator<md::LoadingStatusLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::ResolvedDependencies const&,md::LoadingStatusContext &)::$_0>,void ()(void)>::~__func()
{
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::LoadingStatusLogic,md::LoadingStatusContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x90B6813830DCB581 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<md::IdentifiedResourceContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::LoadingStatusContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::LoadingStatusContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555820;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::LoadingStatusContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555820;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::LoadingStatusLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  strcpy((char *)a2, "LoadingStatusLogic");
  *(_WORD *)(a2 + 23) = 18;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(unsigned char *)(a2 + 95) = 0;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 128);
  v11[23] = 21;
  strcpy(v11, "skipFullyLoadedReport");
  int v10 = 0;
  memset(&v9[4], 0, 24);
  v9[0] = v4;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v11, (uint64_t)v9);
  if (!*(unsigned char *)(a1 + 128))
  {
    v11[23] = 11;
    strcpy(v11, "sceneStatus");
    uint64_t v5 = *(void *)(a1 + 120);
    if (*(unsigned char *)(v5 + 88)) {
      uint64_t v6 = *(unsigned __int8 *)(v5 + 89);
    }
    else {
      uint64_t v6 = 0;
    }
    int v8 = 0;
    memset(&v7[4], 0, 24);
    v7[0] = v6;
    gdc::DebugTreeNode::addProperty(a2, (uint64_t)v11, (uint64_t)v7);
  }
}

void md::LoadingStatusLogic::~LoadingStatusLogic(md::LoadingStatusLogic *this)
{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void md::realistic::TrafficRenderLayer::setActive(md::realistic::TrafficRenderLayer *this, int a2)
{
  *((unsigned char *)this + 32) = a2;
  uint64_t v2 = *((void *)this + 19);
  if (a2) {
    *(unsigned char *)(v2 + 92) = 1;
  }
  else {
    altitude::SkeletonRequestManager::disable((pthread_mutex_t **)v2);
  }
}

uint64_t *md::realistic::TrafficRenderLayer::layout(md::realistic::TrafficRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v4 = (void *)*((void *)this + 5);
  uint64_t v5 = *(unsigned int *)(v4[17] + 88);
  uint64_t v6 = *(void *)(*((void *)a2 + 92) + 16);
  uint64_t v7 = *(void *)(v4[5] + 32);
  if (!*(unsigned char *)(v7 + 32) || *(void *)(v7 + 304) == *(void *)(v7 + 296))
  {
    char v9 = (unsigned __int8 *)v4[18];
    unsigned int v8 = v9[8];
    if (v8 >= v9[9])
    {
      LOBYTE(v8) = 1;
      v9[8] = 1;
      v9[9] = v9[10];
    }
    v9[8] = v8 + 1;
  }
  else
  {
    LOBYTE(v8) = *(unsigned char *)(v6 + 1289);
  }
  float32x4_t v10 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 376)), *(float64x2_t *)(v6 + 392));
  float32x4_t v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 408)), *(float64x2_t *)(v6 + 424));
  float32x4_t v12 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 440)), *(float64x2_t *)(v6 + 456));
  float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 472)), *(float64x2_t *)(v6 + 488));
  unint64_t v14 = (void *)*((void *)this + 14);
  __int32 v15 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = v14[1];
  float64x2_t v17 = (float32x4_t *)v14[9];
  *float64x2_t v17 = v10;
  v17[1] = v11;
  v17[2] = v12;
  void v17[3] = v13;
  if (v14[8] > v16) {
    unint64_t v16 = v14[8];
  }
  v14[7] = 0;
  v14[8] = v16;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  *(unsigned char *)(*((void *)this + 8) + 55) = v8;
  *(unsigned char *)(*((void *)this + 9) + 55) = v8;
  float32x2_t v18 = (uint64_t *)(*(uint64_t (**)(void))(**((void **)this + 18) + 56))(*((void *)this + 18));
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  while (v19 != v20)
  {
    uint64_t v21 = *(void *)(*(void *)v19 + 344);
    if (v21) {
      (*(void (**)(uint64_t, const md::LayoutContext *, uint64_t, void, uint64_t, void))(*(void *)v21 + 80))(v21, a2, v6, *(void *)(*((void *)a2 + 92) + 24), v5, 0);
    }
    v19 += 8;
  }
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**((void **)this + 18) + 56))(*((void *)this + 18));
  uint64_t v25 = *result;
  uint64_t v26 = result[1];
  while (v25 != v26)
  {
    uint64_t result = *(uint64_t **)(*(void *)v25 + 344);
    if (result) {
      uint64_t result = (uint64_t *)altitude::TrafficTileComponent::collectRenderItems((uint64_t)result, v24, v23, *(void *)(*((void *)this + 5) + 24), v5, 4, *(void *)(*((void *)this + 5) + 120));
    }
    v25 += 8;
  }
  if (*((unsigned char *)this + 178))
  {
    int v27 = *(void **)(*(void *)(*((void *)this + 5) + 24) + 8);
    uint64_t v28 = v27[3];
    uint64_t v29 = v27[4];
    uint64_t v30 = v29 - v28;
    if (v29 == v28) {
      goto LABEL_33;
    }
    uint64_t v31 = 0;
    unint64_t v32 = v30 >> 3;
    while (1)
    {
      uint64_t v33 = *(unsigned __int8 **)(v28 + 8 * v31);
      if (*v33 == *((unsigned __int8 *)this + 176))
      {
        unint64_t v34 = *((void *)v33 + 1);
        uint64_t v35 = v27[15];
        if (v34 < (v27[16] - v35) >> 3) {
          break;
        }
      }
      if (++v31 >= v32) {
        goto LABEL_33;
      }
    }
    uint64_t v36 = *(void *)(v35 + 8 * v34);
    if (!v36)
    {
LABEL_33:
      uint64_t v37 = 0;
      uint64_t v38 = *((void *)this + 7);
      if (!v38) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v37 = *(void *)(*(void *)(v36 + 24) + 8 * *((unsigned __int8 *)this + 177));
      uint64_t v38 = *((void *)this + 7);
      if (!v38) {
LABEL_34:
      }
        operator new();
    }
    uint64_t v39 = *(void *)(**(void **)(v38 + 48) + 184);
    return (uint64_t *)ggl::CommandBuffer::pushRenderItem(v37, v39);
  }
  return result;
}

void sub_1A24B77D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, atomic_ullong *a11, unint64_t a12, uint64_t a13, atomic_ullong *a14)
{
  if (atomic_fetch_add(a14, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(v16, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_3:
      if (!v17) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
    if (atomic_fetch_add(v16, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_3;
    }
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!v17) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_9:
  if (!atomic_fetch_add(a14, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  unint64_t shared_weak_owners = v15[3].__shared_weak_owners_;
  if (shared_weak_owners <= 0xC) {
    unint64_t shared_weak_owners = 12;
  }
  v15[3].__shared_owners_ = 0;
  v15[3].__shared_weak_owners_ = shared_weak_owners;
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (a12)
  {
    unint64_t v21 = v14[3].__shared_weak_owners_;
    if (v21 <= a12) {
      unint64_t v21 = a12;
    }
    v14[3].__shared_owners_ = 0;
    v14[3].__shared_weak_owners_ = v21;
  }
  if (!atomic_fetch_add(a11, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(a1);
}

void md::realistic::TrafficRenderLayer::~TrafficRenderLayer(md::realistic::TrafficRenderLayer *this)
{
  md::realistic::TrafficRenderLayer::~TrafficRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  void *v12;

  *(void *)this = &unk_1EF554938;
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 7) = 0;
  }
  uint64_t v3 = *((void *)this + 9);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  unsigned int v8 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    char v9 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    char v9 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v9) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_19:
  float32x4_t v10 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    float32x4_t v11 = (std::__shared_weak_count *)*((void *)this + 11);
    if (!v11) {
      goto LABEL_25;
    }
  }
  else
  {
    float32x4_t v11 = (std::__shared_weak_count *)*((void *)this + 11);
    if (!v11) {
      goto LABEL_25;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_25:
  *(void *)this = &unk_1EF530C60;
  float32x4_t v12 = (void *)*((void *)this + 1);
  if (v12)
  {
    *((void *)this + 2) = v12;
    operator delete(v12);
  }
}

void ggl::FlyoverLibrary::~FlyoverLibrary(ggl::FlyoverLibrary *this)
{
  ggl::ShaderLibrary::~ShaderLibrary(this);
  JUMPOUT(0x1A6239270);
}

void ggl::FlyoverLibraryBundleMTLData::~FlyoverLibraryBundleMTLData(ggl::FlyoverLibraryBundleMTLData *this)
{
  ggl::MTLShaderLibraryData::~MTLShaderLibraryData(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::ElevationTileData::fallbackRaster(md::ElevationTileData *this)
{
  return 0;
}

uint64_t md::DaVinciElevationRaster::primaryRaster(md::DaVinciElevationRaster *this)
{
  return *((void *)this + 90);
}

uint64_t md::DaVinciElevationRaster::containsWorldPoint(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 720);
  int v3 = 1 << *(unsigned char *)(v2 + 57);
  v4.i64[0] = *(int *)(v2 + 64);
  v4.i64[1] = v3 + ~*(_DWORD *)(v2 + 60);
  float64x2_t v5 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v4), 1.0 / (double)v3, 0), (double)v3);
  float32x4_t v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v5);
  v7.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_1A28FD160, v6)).u32[0];
  v7.i32[1] = vmovn_s32(vcgeq_f32(v6, (float32x4_t)xmmword_1A28FD160)).i32[1];
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v7, 0xFuLL))) & 1;
}

void md::DaVinciElevationRaster::~DaVinciElevationRaster(md::DaVinciElevationRaster *this)
{
  *(void *)this = &unk_1EF541330;
  *((void *)this + 79) = &unk_1EF541398;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF541330;
  *((void *)this + 79) = &unk_1EF541398;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::MapTileData::~MapTileData(this);
}

void md::CartographicGlobeMapEngineConfiguration::~CartographicGlobeMapEngineConfiguration(md::CartographicGlobeMapEngineConfiguration *this)
{
  *(void *)this = &unk_1EF54E0A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF5416A8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF54E0A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF5416A8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t md::RenderBatch::remove(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2 = a1[31];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v5 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & a2;
  }
  int8x8_t v6 = a1[30];
  int16x4_t v7 = *(uint64_t **)(*(void *)&v6 + 8 * v5);
  if (!v7) {
    return 0;
  }
  uint64_t result = *v7;
  if (!*v7) {
    return result;
  }
  uint64_t v9 = *(void *)&v2 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = *(void *)(result + 8);
      if (v10 == a2)
      {
        if (__PAIR64__(*(unsigned __int16 *)(result + 18), *(unsigned __int16 *)(result + 16)) == __PAIR64__(WORD1(a2), (unsigned __int16)a2)&& *(_DWORD *)(result + 20) == HIDWORD(a2))
        {
          goto LABEL_15;
        }
      }
      else if ((v10 & v9) != v5)
      {
        return 0;
      }
      uint64_t result = *(void *)result;
      if (!result) {
        return result;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = *(void *)(result + 8);
    if (v11 == a2) {
      break;
    }
    if (v11 >= *(void *)&v2) {
      v11 %= *(void *)&v2;
    }
    if (v11 != v5) {
      return 0;
    }
LABEL_18:
    uint64_t result = *(void *)result;
    if (!result) {
      return result;
    }
  }
  if (__PAIR64__(*(unsigned __int16 *)(result + 18), *(unsigned __int16 *)(result + 16)) != __PAIR64__(WORD1(a2), (unsigned __int16)a2)|| *(_DWORD *)(result + 20) != HIDWORD(a2))
  {
    goto LABEL_18;
  }
LABEL_15:
  if (v4.u32[0] > 1uLL)
  {
    if (*(void *)&v2 <= a2) {
      a2 %= *(void *)&v2;
    }
  }
  else
  {
    a2 &= v9;
  }
  float32x4_t v12 = *(uint64_t **)(*(void *)&v6 + 8 * a2);
  do
  {
    float32x4_t v13 = v12;
    float32x4_t v12 = (uint64_t *)*v12;
  }
  while (v12 != (uint64_t *)result);
  if (v13 == (uint64_t *)&a1[32]) {
    goto LABEL_42;
  }
  unint64_t v14 = v13[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v14 >= *(void *)&v2) {
      v14 %= *(void *)&v2;
    }
  }
  else
  {
    v14 &= v9;
  }
  if (v14 != a2)
  {
LABEL_42:
    if (!*(void *)result) {
      goto LABEL_43;
    }
    unint64_t v15 = *(void *)(*(void *)result + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v15 >= *(void *)&v2) {
        v15 %= *(void *)&v2;
      }
    }
    else
    {
      v15 &= v9;
    }
    if (v15 != a2) {
LABEL_43:
    }
      *(void *)(*(void *)&v6 + 8 * a2) = 0;
  }
  uint64_t v16 = *(void *)result;
  if (*(void *)result)
  {
    unint64_t v17 = *(void *)(v16 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v17 >= *(void *)&v2) {
        v17 %= *(void *)&v2;
      }
    }
    else
    {
      v17 &= v9;
    }
    if (v17 != a2)
    {
      *(void *)(*(void *)&a1[30] + 8 * v17) = v13;
      uint64_t v16 = *(void *)result;
    }
  }
  *float32x4_t v13 = v16;
  *(void *)uint64_t result = 0;
  --*(void *)&a1[33];
  operator delete((void *)result);
  uint64_t result = 1;
  if (!a1[44].i8[0])
  {
    a1[44].i8[0] = 1;
    if (a1[46].i8[0]) {
      a1[46].i8[0] = 0;
    }
    ++*(void *)&a1[47];
  }
  return result;
}

uint64_t std::__construct_at[abi:nn180100]<md::MeshRenderable,std::shared_ptr<md::InstanceData> const&,md::MeshRenderableType,md::Mesh *,gm::Box<float,3> &,md::MeshRenderable*>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, _DWORD *a5)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a4;
  *(void *)a1 = &unk_1EF534030;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 76) = xmmword_1A28FC710;
  *(void *)(a1 + 92) = 0x80000000800000;
  *(unsigned char *)(a1 + 100) = 0;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 144) = 65537;
  *(_WORD *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 188) = 0;
  *(_WORD *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 196) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = atomic_fetch_add(&md::MeshRenderable::generateId(void)::sId, 1uLL);
  *(void *)(a1 + 216) = 0;
  if (v7)
  {
    *(void *)(a1 + 216) = v7;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 + 16);
    *(_DWORD *)(a1 + 76) = *a5;
    *(_DWORD *)(a1 + 80) = a5[1];
    *(_DWORD *)(a1 + 84) = a5[2];
    *(_DWORD *)(a1 + 88) = a5[3];
    *(_DWORD *)(a1 + 92) = a5[4];
    *(_DWORD *)(a1 + 96) = a5[5];
  }
  if (a3 && !atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
  }
  return a1;
}

void md::MeshBatcher::~MeshBatcher(md::MeshBatcher *this)
{
  int8x8_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
  uint8x8_t v4 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    int8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v6) {
      goto LABEL_11;
    }
  }
  else
  {
    int8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
    if (!v6) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    unsigned int v8 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v8) {
      return;
    }
  }
  else
  {
    unsigned int v8 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v8) {
      return;
    }
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void **std::vector<md::MeshRenderable>::~vector[abi:nn180100](void **a1)
{
  int8x8_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint8x8_t v4 = *a1;
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 224;
      int8x8_t v6 = v3 - 224;
      uint64_t v7 = v3 - 224;
      do
      {
        unsigned int v8 = *(void (***)(char *))v7;
        v7 -= 224;
        (*v8)(v6);
        v5 -= 224;
        BOOL v9 = v6 == v2;
        int8x8_t v6 = v7;
      }
      while (!v9);
      uint8x8_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__split_buffer<md::MeshRenderable>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint8x8_t v4 = *(void (***)(void))(i - 224);
    *(void *)(a1 + 16) = i - 224;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<getBase(std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<getBase(std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<getBase(std::variant<md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,md::MaterialRenderBatchKey,md::DynamicTypedRenderBatchKey,md::MaterialDecalRenderBatchKey> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1A24B88E8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A24B89AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void non-virtual thunk to'md::GeoResourceProvider::onTileGroupChange(md::GeoResourceProvider *this)
{
}

void md::GeoResourceProvider::onTileGroupChange(md::GeoResourceProvider *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int8x8_t v2 = (std::mutex *)((char *)this + 112);
  std::mutex::lock((std::mutex *)((char *)this + 112));
  if (GEOGetVectorKitVKGeoResourceProviderLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKGeoResourceProviderLog(void)::onceToken, &__block_literal_global_85);
  }
  uint64_t v3 = GEOGetVectorKitVKGeoResourceProviderLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKGeoResourceProviderLog(void)::log, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 41) - *((void *)this + 40)) >> 3);
    int v8 = 134217984;
    unint64_t v9 = v4;
    _os_log_impl(&dword_1A1780000, v3, OS_LOG_TYPE_INFO, "Received tileGroupChange - clearing cached resource names (count:%lu)", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v5 = *((void *)this + 40);
  for (uint64_t i = *((void *)this + 41); i != v5; i -= 24)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(i - 8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *((void *)this + 41) = v5;
  grl::ResourceProvider::clearResourceNamesCache(this);
  std::mutex::unlock(v2);
}

void sub_1A24B8B40(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'md::GeoResourceProvider::~GeoResourceProvider(md::GeoResourceProvider *this)
{
  md::GeoResourceProvider::~GeoResourceProvider((md::GeoResourceProvider *)((char *)this - 264));
  JUMPOUT(0x1A6239270);
}

{
  md::GeoResourceProvider::~GeoResourceProvider((md::GeoResourceProvider *)((char *)this - 264));
}

void md::GeoResourceProvider::~GeoResourceProvider(md::GeoResourceProvider *this)
{
  *(void *)this = &unk_1EF53B960;
  *((void *)this + 33) = &unk_1EF53B9B8;
  grl::ResourceProvider::removeObserver((uint64_t)this, (uint64_t)this + 264);
  [*((id *)this + 38) clearProvider];
  [*((id *)this + 35) clearProvider];
  int8x8_t v2 = [MEMORY[0x1E4F64918] modernManager];
  [v2 removeTileGroupObserver:*((void *)this + 35)];

  uint64_t v3 = *((void *)this + 40);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 41);
    uint64_t v5 = (void *)*((void *)this + 40);
    if (v4 != v3)
    {
      do
      {
        int8x8_t v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 24;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 40);
    }
    *((void *)this + 41) = v3;
    operator delete(v5);
  }
  *((void *)this + 37) = &unk_1EF559B38;

  *((void *)this + 34) = &unk_1EF559B18;
  grl::ResourceProvider::~ResourceProvider(this);
}

{
  uint64_t vars8;

  md::GeoResourceProvider::~GeoResourceProvider(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A24B8D14(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map((void **)(v1 + 320));
  *(void *)(v1 + 296) = &unk_1EF559B38;

  *(void *)(v1 + 272) = &unk_1EF559B18;
  grl::ResourceProvider::~ResourceProvider((grl::ResourceProvider *)v1);
  _Unwind_Resume(a1);
}

void grl::ResourceProvider::~ResourceProvider(grl::ResourceProvider *this)
{
  *(void *)this = &unk_1EF567078;
  std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*((void **)this + 31));
  std::mutex::~mutex((std::mutex *)((char *)this + 176));
  std::mutex::~mutex((std::mutex *)((char *)this + 112));
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
  int8x8_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    operator delete(v4);
  }
}

void **geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map(void **a1)
{
  int8x8_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void geo::_retain_ptr<GRLResourceGroupObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559B18;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<GRLResourceGroupObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559B18;

  return a1;
}

void geo::_retain_ptr<RegionalResourceObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559B38;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<RegionalResourceObserver * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559B38;

  return a1;
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<std::ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__CFString *___ZN2md19GeoResourceProvider21streamForResourceNameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke()
{
  return @" ";
}

__CFString *___ZN2md19GeoResourceProvider21nsdataForResourceNameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke()
{
  return @" ";
}

char *std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__emplace_back_slow_path<char const*&>(uint64_t *a1, const char **a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    uint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    uint64_t v6 = v3;
  }
  uint64_t v26 = a1 + 3;
  if (v6) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 24 * v6, 8);
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = (char *)(v7 + 24 * v2);
  uint64_t v23 = v8;
  __n128 v24 = v8;
  uint64_t v25 = v7 + 24 * v6;
  if (!v7)
  {
    float32x4_t v12 = v8;
    goto LABEL_21;
  }
  unint64_t v9 = *a2;
  size_t v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    unint64_t v15 = (char *)operator new(v13 + 1);
    *((void *)v8 + 1) = v11;
    *((void *)v8 + 2) = v14 | 0x8000000000000000;
    *(void *)int v8 = v15;
    int v8 = v15;
  }
  else
  {
    v8[23] = v10;
    if (!v10) {
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
LABEL_20:
  v8[v11] = 0;
  int v8 = v23;
  float32x4_t v12 = v24;
LABEL_21:
  uint64_t v16 = v12 + 24;
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  if (v18 == *a1)
  {
    *a1 = (uint64_t)v8;
    a1[1] = (uint64_t)v16;
    uint64_t v21 = a1[2];
    a1[2] = v25;
  }
  else
  {
    do
    {
      long long v19 = *(_OWORD *)(v18 - 24);
      *((void *)v8 - 1) = *(void *)(v18 - 8);
      *(_OWORD *)(v8 - 24) = v19;
      v8 -= 24;
      *(void *)(v18 - 16) = 0;
      *(void *)(v18 - 8) = 0;
      *(void *)(v18 - 24) = 0;
      v18 -= 24;
    }
    while (v18 != v17);
    uint64_t v18 = *a1;
    uint64_t v20 = a1[1];
    *a1 = (uint64_t)v8;
    a1[1] = (uint64_t)v16;
    uint64_t v21 = a1[2];
    a1[2] = v25;
    while (v20 != v18)
    {
      if (*(char *)(v20 - 1) < 0) {
        operator delete(*(void **)(v20 - 24));
      }
      v20 -= 24;
    }
  }
  if (v18) {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v26 + 40))(*v26, v18, v21 - v18);
  }
  return v16;
}

void sub_1A24B9308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::string,geo::StdAllocator<std::string,grl::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = result;
    for (uint64_t i = *(void *)(result + 32); i != v1; i -= 24)
    {
      if (*(char *)(i - 1) < 0) {
        operator delete(*(void **)(i - 24));
      }
    }
    *(void *)(v2 + 32) = v1;
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v2 + 48) + 40);
    return v4();
  }
  return result;
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B2A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B2A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t grl::ResourceProvider::supportsResource()
{
  return 1;
}

{
  return 1;
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelTextDataLoader>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelTextDataLoader>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::weak_interface_ptr<md::LabelTextDataLoader>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::LabelTextDataLoader::~LabelTextDataLoader(std::mutex **this)
{
  uint64_t v2 = *this;
  if (*this)
  {
    std::mutex::lock(*this);
    uint64_t sig = v2[1].__m_.__sig;
    std::mutex::unlock(v2);
    if (sig)
    {
      uint64_t v4 = *this;
      std::mutex::lock(*this);
      v4[1].__m_.__uint64_t sig = 0;
      std::mutex::unlock(v4);
    }
  }
  uint64_t v5 = this[3];
  if (v5)
  {
    uint64_t v6 = this[4];
    uint64_t v7 = this[3];
    if (v6 != v5)
    {
      do
      {
        int v8 = *(std::__shared_weak_count **)&v6[-1].__m_.__opaque[48];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, std::mutex *))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
        uint64_t v6 = (std::mutex *)((char *)v6 - 16);
      }
      while (v6 != v5);
      uint64_t v7 = this[3];
    }
    this[4] = v5;
    (*(void (**)(std::mutex *, std::mutex *, int64_t))(this[6]->__m_.__sig + 40))(this[6], v7, (char *)this[5] - (char *)v7);
  }
  unint64_t v9 = (std::__shared_weak_count *)this[1];
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1A24B9798(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v5 = *(void *)(v1 + 24);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v6->__on_zero_shared)(v6, v5);
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 16;
      }
      while (v4 != v3);
      uint64_t v5 = *(void *)(v1 + 24);
    }
    *(void *)(v1 + 32) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 48) + 40))(*(void *)(v1 + 48), v5, *(void *)(v1 + 40) - v5);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 8);
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1EF57E7A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[4];
  a2[3] = result[3];
  a2[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57E7A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[2];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[2];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF57E7A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[2];
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[2];
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57E760;
}

void *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57E760;
  return result;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsGenerateGlyphInfos", "", v1, 2u);
  }
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57E7F0;
}

void *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57E7F0;
  return result;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

uint64_t *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return md::LabelTextDataLoader::finishBatch(void)::$_0::~$_0((uint64_t *)(a1 + 8));
}

void *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5748B0;
  return std::__compressed_pair_elem<md::LabelTextDataLoader::finishBatch(void)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelTextDataLoader::finishBatch(void)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF5748B0;
  md::LabelTextDataLoader::finishBatch(void)::$_0::~$_0(a1 + 1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF5748B0;
  md::LabelTextDataLoader::finishBatch(void)::$_0::~$_0(a1 + 1);
  return a1;
}

void md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::featureMarker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v7 = *(void *)(a1 + 280);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 384);
        int v10 = 1 << *(unsigned char *)(v9 + 169);
        v11.i64[0] = *(int *)(v9 + 176);
        v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
        float64x2_t v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
        LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_1A28FD160)).u32[0];
        HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FD160, v13)).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_5:
        v6 += 8;
        if (v6 == v7) {
          return;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 208))(&v17, a1);
      long long v14 = v17;
      long long v17 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (*a3) {
        return;
      }
      goto LABEL_5;
    }
  }
}

void sub_1A24B9FF8(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::featureMarker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v7 = *(void *)(a1 + 280);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 384);
        int v10 = 1 << *(unsigned char *)(v9 + 169);
        v11.i64[0] = *(int *)(v9 + 176);
        v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
        float64x2_t v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
        LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_1A28FD160)).u32[0];
        HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FD160, v13)).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_5:
        v6 += 8;
        if (v6 == v7) {
          return;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 208))(&v17, a1);
      long long v14 = v17;
      long long v17 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (*a3) {
        return;
      }
      goto LABEL_5;
    }
  }
}

void sub_1A24BA218(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::featureMarker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v7 = *(void *)(a1 + 280);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 384);
        int v10 = 1 << *(unsigned char *)(v9 + 169);
        v11.i64[0] = *(int *)(v9 + 176);
        v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
        float64x2_t v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
        LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_1A28FD160)).u32[0];
        HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FD160, v13)).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_5:
        v6 += 8;
        if (v6 == v7) {
          return;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 208))(&v17, a1);
      long long v14 = v17;
      long long v17 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (*a3) {
        return;
      }
      goto LABEL_5;
    }
  }
}

void sub_1A24BA438(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::featureMarker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v7 = *(void *)(a1 + 280);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 384);
        int v10 = 1 << *(unsigned char *)(v9 + 169);
        v11.i64[0] = *(int *)(v9 + 176);
        v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
        float64x2_t v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
        LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_1A28FD160)).u32[0];
        HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FD160, v13)).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_5:
        v6 += 8;
        if (v6 == v7) {
          return;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 208))(&v17, a1);
      long long v14 = v17;
      long long v17 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (*a3) {
        return;
      }
      goto LABEL_5;
    }
  }
}

void sub_1A24BA658(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::BuildingTileDataRenderable>::featureMarker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::BuildingTileDataRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v7 = *(void *)(a1 + 280);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 384);
        int v10 = 1 << *(unsigned char *)(v9 + 169);
        v11.i64[0] = *(int *)(v9 + 176);
        v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
        float64x2_t v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
        LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_1A28FD160)).u32[0];
        HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FD160, v13)).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_5:
        v6 += 8;
        if (v6 == v7) {
          return;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 208))(&v17, a1);
      long long v14 = v17;
      long long v17 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (*a3) {
        return;
      }
      goto LABEL_5;
    }
  }
}

void sub_1A24BA878(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::featureMarker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v7 = *(void *)(a1 + 280);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 384);
        int v10 = 1 << *(unsigned char *)(v9 + 169);
        v11.i64[0] = *(int *)(v9 + 176);
        v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
        float64x2_t v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
        LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_1A28FD160)).u32[0];
        HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FD160, v13)).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_5:
        v6 += 8;
        if (v6 == v7) {
          return;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 208))(&v17, a1);
      long long v14 = v17;
      long long v17 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (*a3) {
        return;
      }
      goto LABEL_5;
    }
  }
}

void sub_1A24BAA98(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::featureMarker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v7 = *(void *)(a1 + 280);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 384);
        int v10 = 1 << *(unsigned char *)(v9 + 169);
        v11.i64[0] = *(int *)(v9 + 176);
        v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
        float64x2_t v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
        LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_1A28FD160)).u32[0];
        HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FD160, v13)).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_5:
        v6 += 8;
        if (v6 == v7) {
          return;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 208))(&v17, a1);
      long long v14 = v17;
      long long v17 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (*a3) {
        return;
      }
      goto LABEL_5;
    }
  }
}

void sub_1A24BACB8(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::DaVinciGroundRenderable>::featureMarker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::DaVinciGroundRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v7 = *(void *)(a1 + 280);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 384);
        int v10 = 1 << *(unsigned char *)(v9 + 169);
        v11.i64[0] = *(int *)(v9 + 176);
        v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
        float64x2_t v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
        LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_1A28FD160)).u32[0];
        HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FD160, v13)).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_5:
        v6 += 8;
        if (v6 == v7) {
          return;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 208))(&v17, a1);
      long long v14 = v17;
      long long v17 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (*a3) {
        return;
      }
      goto LABEL_5;
    }
  }
}

void sub_1A24BAED8(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::featureMarker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v7 = *(void *)(a1 + 280);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 384);
        int v10 = 1 << *(unsigned char *)(v9 + 169);
        v11.i64[0] = *(int *)(v9 + 176);
        v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
        float64x2_t v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
        LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_1A28FD160)).u32[0];
        HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FD160, v13)).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_5:
        v6 += 8;
        if (v6 == v7) {
          return;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 208))(&v17, a1);
      long long v14 = v17;
      long long v17 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (*a3) {
        return;
      }
      goto LABEL_5;
    }
  }
}

void sub_1A24BB0F8(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::featureMarker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v7 = *(void *)(a1 + 280);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 384);
        int v10 = 1 << *(unsigned char *)(v9 + 169);
        v11.i64[0] = *(int *)(v9 + 176);
        v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
        float64x2_t v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
        LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_1A28FD160)).u32[0];
        HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FD160, v13)).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_5:
        v6 += 8;
        if (v6 == v7) {
          return;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 208))(&v17, a1);
      long long v14 = v17;
      long long v17 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (*a3) {
        return;
      }
      goto LABEL_5;
    }
  }
}

void sub_1A24BB318(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledVectorRenderLayer<md::FlyoverRenderable>::featureMarker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::CartographicTiledVectorRenderLayer<md::FlyoverRenderable>::featureMarkerAt(uint64_t a1@<X0>, float64x2_t *a2@<X1>, void *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v7 = *(void *)(a1 + 280);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)v6 + 384);
        int v10 = 1 << *(unsigned char *)(v9 + 169);
        v11.i64[0] = *(int *)(v9 + 176);
        v11.i64[1] = v10 + ~*(_DWORD *)(v9 + 172);
        float64x2_t v12 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v11), 1.0 / (double)v10, 0), (double)v10);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v12);
        LODWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32(v13, (float32x4_t)xmmword_1A28FD160)).u32[0];
        HIDWORD(v12.f64[0]) = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1A28FD160, v13)).i32[1];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v12.f64[0], 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_5:
        v6 += 8;
        if (v6 == v7) {
          return;
        }
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 208))(&v17, a1);
      long long v14 = v17;
      long long v17 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
        if (!*((void *)&v17 + 1)) {
          goto LABEL_4;
        }
      }
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (*a3) {
        return;
      }
      goto LABEL_5;
    }
  }
}

void sub_1A24BB538(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::PolygonSolidFill::MeshPipelineSetup *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF51F2F8;
  return result;
}

void std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::PolygonSolidFill::MeshPipelineSetup *)>::~__func()
{
}

void std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::operator()()
{
  v0 = operator new(0xE8uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = &unk_1EF586DB8;
  uint64_t v1 = ggl::BufferData::BufferData((uint64_t)(v0 + 3), qword_1E9552208, 2, 1, 6, 1);
  v0[28] = ggl::Tile::View::reflection(void)::reflection;
  v0[3] = &unk_1EF55E258;
  uint64_t v6 = v1;
  uint64_t v7 = v0;
  uint64_t v2 = operator new(0xE8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1EF586568;
  uint64_t v3 = ggl::BufferData::BufferData((uint64_t)(v2 + 3), qword_1E9564050, 2, 1, 6, 1);
  v2[28] = ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
  v2[3] = &unk_1EF55DD78;
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  operator new();
}

void sub_1A24BB780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (!atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (a14)
  {
    if (!atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51F2B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::CartographicTiledRenderResources::CartographicTiledRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonSolidFill::MeshPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonSolidFill::S2MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PolygonSolidFill::S2MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5857A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PolygonSolidFill::S2MeshPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5857A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::~CartographicTiledVectorRenderLayer(void *a1)
{
  *a1 = &unk_1EF54E688;
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  uint64_t v3 = (uint64_t **)*((void *)v2 + 7);
  uint64_t v4 = (uint64_t **)*((void *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = **v3;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5[1] = (uint64_t)&off_1EF55A458;
      void v5[3] = 3131955885;
      MEMORY[0x1A6239270](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  uint64_t v7 = (uint64_t **)*((void *)v2 + 10);
  int v8 = (uint64_t **)*((void *)v2 + 11);
  if (v7 == v8) {
    goto LABEL_13;
  }
  do
  {
    uint64_t v9 = *v7;
    uint64_t v10 = **v7;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v9[1] = (uint64_t)&off_1EF55A458;
    v9[3] = 3131955885;
    MEMORY[0x1A6239270](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

void *std::function<BOOL ()(md::RoadTileDataRenderable const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(uint64_t a1, md::LayoutContext *a2, uint64_t a3, int a4, unsigned char *a5)
{
  uint64_t v238 = *MEMORY[0x1E4F143B8];
  v236[0] = &unk_1EF578960;
  uint64_t v237 = v236;
  uint64_t v6 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v7 = (int8x8_t)v6[1];
  if (!*(void *)&v7) {
    return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
  }
  int v8 = (void *)a1;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    uint64_t v10 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v7 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v10 = 0x3070CB6B3C7F21D3uLL % *(void *)&v7;
    }
  }
  else
  {
    uint64_t v10 = (*(void *)&v7 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v11 = *v6;
  float64x2_t v12 = *(void **)(v11 + 8 * v10);
  if (!v12) {
    goto LABEL_24;
  }
  float32x4_t v13 = (void *)*v12;
  if (!v13) {
    goto LABEL_24;
  }
  if (v9.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x3070CB6B3C7F21D3)
      {
        if (v13[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_22;
        }
      }
      else if ((v15 & (*(void *)&v7 - 1)) != v10)
      {
        goto LABEL_24;
      }
      float32x4_t v13 = (void *)*v13;
      if (!v13) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v14 = v13[1];
    if (v14 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v14 >= *(void *)&v7) {
      v14 %= *(void *)&v7;
    }
    if (v14 != v10) {
      goto LABEL_24;
    }
LABEL_11:
    float32x4_t v13 = (void *)*v13;
    if (!v13) {
      goto LABEL_24;
    }
  }
  if (v13[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v16 = v13[5];
  if (*(void *)(v16 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v183 = *(void *)(v16 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v183 = 0;
LABEL_25:
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v17 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v7 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v17 = 0x99BED48DEFBBD82BLL % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v17 = (*(void *)&v7 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v18 = *(void **)(v11 + 8 * v17);
  if (!v18) {
    goto LABEL_48;
  }
  long long v19 = (void *)*v18;
  if (!v19) {
    goto LABEL_48;
  }
  if (v9.u32[0] < 2uLL)
  {
    uint64_t v20 = *(void *)&v7 - 1;
    while (1)
    {
      uint64_t v22 = v19[1];
      if (v22 == 0x99BED48DEFBBD82BLL)
      {
        if (v19[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_45;
        }
      }
      else if ((v22 & v20) != v17)
      {
        goto LABEL_48;
      }
      long long v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v21 = v19[1];
    if (v21 != 0x99BED48DEFBBD82BLL)
    {
      if (v21 >= *(void *)&v7) {
        v21 %= *(void *)&v7;
      }
      if (v21 != v17) {
        goto LABEL_48;
      }
      goto LABEL_34;
    }
    if (v19[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_34:
      long long v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_45:
  uint64_t v23 = v19[5];
  if (*(void *)(v23 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v177 = *(void *)(v23 + 32);
    if (!v183) {
      return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v177 = 0;
  if (!v183) {
    return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
  }
LABEL_49:
  __n128 v24 = *(void **)v177;
  uint64_t v25 = *(unsigned __int16 **)(*(void *)v177 + 184);
  uint64_t v26 = *(unsigned __int16 **)(*(void *)v177 + 192);
  if (v25 == v26)
  {
LABEL_58:
    uint64_t v29 = (unsigned __int16 *)v24[26];
    uint64_t v30 = (unsigned __int16 *)v24[27];
    if (v29 != v30)
    {
      unint64_t v32 = (unsigned __int16 *)v24[14];
      uint64_t v31 = (unsigned __int16 *)v24[15];
      do
      {
        uint64_t v35 = v32;
        if (v32 != v31)
        {
          uint64_t v35 = v32;
          while (*v35 != *v29)
          {
            v35 += 56;
            if (v35 == v31)
            {
              uint64_t v35 = v31;
              break;
            }
          }
        }
        int v33 = *((unsigned __int8 *)v35 + 8);
        ++v29;
        if (v33) {
          _ZF = v29 == v30;
        }
        else {
          _ZF = 1;
        }
      }
      while (!_ZF);
      if (!v33) {
        goto LABEL_72;
      }
    }
    int v36 = *(unsigned __int8 *)(a1 + 48);
    int v37 = *(unsigned __int8 *)(a1 + 49);
    *(unsigned char *)(a1 + 360) = v36 != v37;
    if (v36 == v37) {
      return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
    }
  }
  else
  {
    int v27 = (unsigned __int16 *)v24[15];
    while (1)
    {
      uint64_t v28 = (unsigned __int16 *)v24[14];
      if (v28 != v27)
      {
        uint64_t v28 = (unsigned __int16 *)v24[14];
        while (*v28 != *v25)
        {
          v28 += 56;
          if (v28 == v27)
          {
            uint64_t v28 = (unsigned __int16 *)v24[15];
            break;
          }
        }
      }
      if (!*((unsigned char *)v28 + 8)) {
        break;
      }
      if (++v25 == v26) {
        goto LABEL_58;
      }
    }
LABEL_72:
    *(unsigned char *)(a1 + 360) = 1;
  }
  uint64_t v38 = *(void **)(a1 + 352);
  unint64_t v39 = v38[14];
  unint64_t v186 = v38[15];
  __int32 v40 = *(uint64_t **)(a1 + 272);
  unsigned int v41 = *(uint64_t **)(a1 + 280);
  if (v40 != v41)
  {
    do
    {
      uint64_t v42 = *v40;
      if (!v237
        || (*(void *)uint64_t v232 = *v40, (*(unsigned int (**)(void *, unsigned char *))(*v237 + 48))(v237, v232)))
      {
        uint64_t v43 = *(void *)(v42 + 384);
        unsigned int v44 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(*(void *)v177 + 8), (unsigned __int8 *)(v43 + 16));
        if (v44)
        {
          unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (v44[17] - v44[16]);
          if (*(unsigned __int8 *)(v43 + 168) == 255) {
            v39 += v45;
          }
          else {
            v186 += v45;
          }
        }
      }
      ++v40;
    }
    while (v40 != v41);
    uint64_t v38 = (void *)v8[44];
  }
  uint64_t v46 = v183 + 144;
  uint64_t v47 = 128;
  if (*(unsigned __int8 *)(v183 + 320) - 1 >= 3) {
    uint64_t v46 = v183 + 128;
  }
  else {
    uint64_t v47 = 144;
  }
  uint64_t v48 = *(void *)(v183 + v47);
  uint64_t v49 = *(std::__shared_weak_count **)(v46 + 8);
  uint64_t v215 = v48;
  v216 = v49;
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v181 = v8;
  double v188 = v38;
  if (v39 > (uint64_t)(v38[8] - v38[7]) >> 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    operator new();
  }
  if (v186 > (uint64_t)(v38[11] - v38[10]) >> 3) {
    operator new();
  }
  unsigned int v54 = (void *)*((void *)a2 + 1);
  int8x8_t v55 = (int8x8_t)v54[1];
  if (!*(void *)&v55)
  {
    uint64_t v59 = 0;
    uint64_t v57 = v38;
    goto LABEL_117;
  }
  uint8x8_t v56 = (uint8x8_t)vcnt_s8(v55);
  v56.i16[0] = vaddlv_u8(v56);
  uint64_t v57 = v38;
  if (v56.u32[0] > 1uLL)
  {
    uint64_t v58 = 0x1AF456233693CD46;
    if (*(void *)&v55 <= 0x1AF456233693CD46uLL) {
      uint64_t v58 = 0x1AF456233693CD46uLL % *(void *)&v55;
    }
  }
  else
  {
    uint64_t v58 = (*(void *)&v55 - 1) & 0x1AF456233693CD46;
  }
  int v60 = *(void **)(*v54 + 8 * v58);
  if (!v60) {
    goto LABEL_116;
  }
  unint64_t v61 = (void *)*v60;
  if (!v61) {
    goto LABEL_116;
  }
  if (v56.u32[0] < 2uLL)
  {
    uint64_t v62 = *(void *)&v55 - 1;
    while (1)
    {
      uint64_t v64 = v61[1];
      if (v64 == 0x1AF456233693CD46)
      {
        if (v61[2] == 0x1AF456233693CD46) {
          goto LABEL_114;
        }
      }
      else if ((v64 & v62) != v58)
      {
        goto LABEL_116;
      }
      unint64_t v61 = (void *)*v61;
      if (!v61) {
        goto LABEL_116;
      }
    }
  }
  while (2)
  {
    unint64_t v63 = v61[1];
    if (v63 != 0x1AF456233693CD46)
    {
      if (v63 >= *(void *)&v55) {
        v63 %= *(void *)&v55;
      }
      if (v63 != v58) {
        goto LABEL_116;
      }
      goto LABEL_103;
    }
    if (v61[2] != 0x1AF456233693CD46)
    {
LABEL_103:
      unint64_t v61 = (void *)*v61;
      if (!v61) {
        goto LABEL_116;
      }
      continue;
    }
    break;
  }
LABEL_114:
  uint64_t v65 = v61[5];
  if (*(void *)(v65 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v59 = *(void *)(v65 + 32);
    goto LABEL_117;
  }
LABEL_116:
  uint64_t v59 = 0;
LABEL_117:
  int v182 = *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128);
  unint64_t v66 = (float64x2_t *)(v59 + 808);
  if (*a5) {
    unint64_t v66 = (float64x2_t *)(a5 + 8);
  }
  float64x2_t v67 = v66[5];
  float64x2_t v211 = v66[4];
  float64x2_t v212 = v67;
  float64x2_t v68 = v66[7];
  float64x2_t v213 = v66[6];
  float64x2_t v214 = v68;
  float64x2_t v69 = v66[1];
  float64x2_t v207 = *v66;
  float64x2_t v208 = v69;
  float64x2_t v70 = v66[3];
  float64x2_t v209 = v66[2];
  float64x2_t v210 = v70;
  int v71 = (md::LayoutContext *)v8[34];
  int v176 = (md::LayoutContext *)v8[35];
  if (v71 != v176)
  {
    while (1)
    {
      double v180 = v71;
      uint64_t v72 = *(void *)v71;
      if (!v237
        || (*(void *)uint64_t v232 = *(void *)v71,
            ((*(uint64_t (**)(void *, unsigned char *))(*v237 + 48))(v237, v232) & 1) != 0))
      {
        uint64_t v73 = *(void *)(v72 + 384);
        int v74 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(*(void *)v177 + 8), (unsigned __int8 *)(v73 + 16));
        if (v74)
        {
          int v75 = v74[16];
          double v187 = v74[17];
          if (v187 != v75) {
            break;
          }
        }
      }
LABEL_121:
      int v71 = (md::LayoutContext *)((char *)v180 + 8);
      if ((md::LayoutContext *)((char *)v180 + 8) == v176) {
        goto LABEL_202;
      }
    }
    uint64_t v184 = (unsigned __int8 *)(v73 + 168);
    while (2)
    {
      int v76 = *(unsigned __int8 **)(v72 + 384);
      unsigned int v77 = (void *)v8[44];
      if (v76[168] != 255)
      {
        uint64_t v78 = v77[15];
        uint64_t v79 = v57[10];
        uint64_t v80 = *(void *)(*(void *)(**(void **)(v79 + 8 * v78) + 64) + 32);
        *(_OWORD *)uint64_t v232 = 0uLL;
        uint64_t v81 = *(void *)(v80 + 8);
        if (v81) {
          unsigned int v82 = *(_DWORD **)(v80 + 72);
        }
        else {
          unsigned int v82 = 0;
        }
        *(void *)&long long v107 = 0;
        *((void *)&v107 + 1) = v80;
        *(_OWORD *)uint64_t v232 = v107;
        *(void *)&v232[16] = 0;
        *(void *)&v232[24] = v81;
        *(void *)&v232[40] = v82;
        *(_WORD *)&v232[32] = 1;
        uint64_t v108 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v76 + 32))(v76);
        v82[8] = *v108;
        v82[9] = v108[1];
        v82[10] = v108[2];
        int v109 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(v72 + 384) + 32))(*(void *)(v72 + 384));
        v82[12] = v109[3];
        v82[13] = v109[4];
        v82[14] = v109[5];
        *(void *)(*(void *)(v79 + 8 * v78) + 32) = *(void *)v8[44];
        *(void *)(*(void *)(v79 + 8 * v78) + 40) = **(void **)(v79 + 8 * v78);
        unsigned int v110 = *(uint64_t **)(v79 + 8 * v78);
        v110[7] = 0;
        *((_DWORD *)v110 + 12) = *(unsigned __int8 *)(v73 + 169) + a4;
        uint64_t v111 = *v110;
        md::GeometryContext::transformConstantData(&v217, (uint64_t *)v183, v184, v182, 0.0, 0.0);
        uint64_t v112 = *(void *)(v111 + 64);
        double v113 = v217;
        double v114 = v218;
        *(double *)(v112 + 16) = v217;
        *(void *)(v112 + 24) = 0;
        uint64_t v115 = *(void *)(v111 + 160);
        if (v114 != 0.0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v114 + 8), 1uLL, memory_order_relaxed);
        }
        int v116 = *(std::__shared_weak_count **)(v115 + 24);
        *(double *)(v115 + 16) = v113;
        *(double *)(v115 + 24) = v114;
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
          int v117 = *(std::__shared_weak_count **)&v218;
          if (v218 != 0.0) {
            goto LABEL_147;
          }
        }
        else
        {
          int v117 = *(std::__shared_weak_count **)&v218;
          if (v218 != 0.0)
          {
LABEL_147:
            if (!atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
        }
        float32x4_t v136 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v209), v210);
        float32x4_t v137 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v211), v212);
        float32x4_t v138 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v213), v214);
        unint64_t v139 = *(uint64_t **)(v79 + 8 * v78);
        uint64_t v141 = *v139;
        int64x2_t v140 = v139 + 1;
        unint64_t v142 = **(void ***)(v141 + 64);
        unint64_t v143 = v142[1];
        BOOL v144 = (float32x4_t *)v142[9];
        *BOOL v144 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v207), v208);
        v144[1] = v136;
        v144[2] = v137;
        v144[3] = v138;
        if (v142[8] > v143) {
          unint64_t v143 = v142[8];
        }
        v142[7] = 0;
        v142[8] = v143;
        uint64_t v145 = *(void **)(a3 + 80);
        unint64_t v146 = *(void *)(a3 + 88);
        if ((unint64_t)v145 < v146)
        {
          if (v145) {
            void *v145 = v140;
          }
          unint64_t v147 = v145 + 1;
          goto LABEL_187;
        }
        uint64_t v148 = *(void *)(a3 + 72);
        uint64_t v149 = ((uint64_t)v145 - v148) >> 3;
        unint64_t v150 = v149 + 1;
        if ((unint64_t)(v149 + 1) >> 61) {
          abort();
        }
        uint64_t v151 = v146 - v148;
        if (v151 >> 2 > v150) {
          unint64_t v150 = v151 >> 2;
        }
        if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v152 = v150;
        }
        if (v152)
        {
          uint64_t v153 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 16))(*(void *)(a3 + 96), 8 * v152, 8);
          unsigned int v154 = (void *)(v153 + 8 * v149);
          uint64_t v155 = v153 + 8 * v152;
          if (v153) {
            *unsigned int v154 = v140;
          }
        }
        else
        {
          uint64_t v155 = 0;
          unsigned int v154 = (void *)(8 * v149);
        }
        uint64_t v157 = *(void *)(a3 + 72);
        uint64_t v156 = *(void *)(a3 + 80);
        uint64_t v158 = v156 - v157;
        if (v156 == v157)
        {
          uint64_t v160 = v154;
          goto LABEL_185;
        }
        unint64_t v159 = v158 - 8;
        if ((unint64_t)(v158 - 8) < 0x38)
        {
          uint64_t v160 = v154;
        }
        else
        {
          uint64_t v160 = v154;
          if ((unint64_t)(v156 - (void)v154) >= 0x20)
          {
            uint64_t v161 = (v159 >> 3) + 1;
            int v162 = v154 - 2;
            int v163 = (long long *)(v156 - 16);
            uint64_t v164 = v161 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v165 = *v163;
              *(v162 - 1) = *(v163 - 1);
              *int v162 = v165;
              v162 -= 2;
              v163 -= 2;
              v164 -= 4;
            }
            while (v164);
            uint64_t v160 = &v154[-(v161 & 0x3FFFFFFFFFFFFFFCLL)];
            v156 -= 8 * (v161 & 0x3FFFFFFFFFFFFFFCLL);
            if (v161 == (v161 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_184:
              uint64_t v156 = *(void *)(a3 + 72);
LABEL_185:
              unint64_t v147 = v154 + 1;
              *(void *)(a3 + 72) = v160;
              *(void *)(a3 + 80) = v154 + 1;
              uint64_t v167 = *(void *)(a3 + 88);
              *(void *)(a3 + 88) = v155;
              if (v156) {
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 40))(*(void *)(a3 + 96), v156, v167 - v156);
              }
LABEL_187:
              *(void *)(a3 + 80) = v147;
              ++*(void *)(v8[44] + 120);
              if (*(void *)&v232[40])
              {
                long long v168 = *(_OWORD *)&v232[16];
                if (*(void *)&v232[24] != *(void *)&v232[16])
                {
                  uint64_t v169 = *(void **)&v232[8];
                  int v170 = v232[32];
                  int v171 = v232[33];
                  if (*(void *)v232 && *(unsigned char *)(*(void *)&v232[8] + 17) != 2) {
                    (*(void (**)(void))(**(void **)v232 + 64))();
                  }
                  if (v170 && !v171)
                  {
                    unint64_t v172 = v169[7];
                    unint64_t v173 = v169[8];
                    if (v173 == v172) {
                      unint64_t v172 = v169[10] - v169[9];
                    }
                    if ((unint64_t)v168 < v172) {
                      unint64_t v172 = v168;
                    }
                    if (v173 <= *((void *)&v168 + 1)) {
                      unint64_t v173 = *((void *)&v168 + 1);
                    }
                    if (v173 == v172) {
                      unint64_t v173 = v172 + v169[10] - v169[9];
                    }
                    v169[7] = v172;
                    v169[8] = v173;
                  }
                }
              }
              int v8 = v181;
              uint64_t v57 = v188;
LABEL_129:
              v75 += 3;
              if (v75 == v187) {
                goto LABEL_121;
              }
              continue;
            }
          }
        }
        do
        {
          uint64_t v166 = *(void *)(v156 - 8);
          v156 -= 8;
          *--uint64_t v160 = v166;
        }
        while (v156 != v157);
        goto LABEL_184;
      }
      break;
    }
    uint64_t v83 = v77[14];
    uint64_t v84 = v57[7];
    *(void *)(*(void *)(v84 + 8 * v83) + 32) = *v77;
    *(void *)(*(void *)(v84 + 8 * v83) + 40) = **(void **)(v84 + 8 * v83);
    unsigned int v85 = *(uint64_t **)(v84 + 8 * v83);
    v85[7] = 0;
    *((_DWORD *)v85 + 12) = *(unsigned __int8 *)(v73 + 169) + a4;
    if ((v182 - 1) > 2u)
    {
      int v118 = 1 << *((unsigned char *)v75 + 1);
      double v119 = 1.0 / (double)v118;
      double v120 = v119 * (double)*((int *)v75 + 2);
      double v121 = v119 * (double)(v118 + ~*((_DWORD *)v75 + 1));
      memset(&v201[8], 0, 32);
      *(double *)unsigned int v201 = v119;
      *(double *)&v201[40] = v119;
      long long v202 = 0u;
      long long v203 = 0u;
      long long v204 = *(unint64_t *)&v119;
      *(double *)&long long v205 = v120;
      *((double *)&v205 + 1) = v121;
      long long v206 = xmmword_1A28FCCC0;
      uint64_t v122 = *v85;
      uint64_t v123 = *(void *)(*v85 + 64);
      *(void *)(v123 + 24) = 0;
      uint64_t v124 = v77[1];
      *(void *)(v123 + 16) = v124;
      uint64_t v125 = *(void *)(v122 + 160);
      uint64_t v126 = v77[2];
      if (v126) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v126 + 8), 1uLL, memory_order_relaxed);
      }
      int v106 = *(std::__shared_weak_count **)(v125 + 24);
      *(void *)(v125 + 16) = v124;
      *(void *)(v125 + 24) = v126;
      if (!v106) {
        goto LABEL_154;
      }
    }
    else
    {
      int v86 = 1 << *(unsigned char *)(v73 + 169);
      double v87 = 1.0 / (double)v86;
      uint64_t v88 = *(int *)(v73 + 176);
      int v89 = v86 + ~*(_DWORD *)(v73 + 172);
      *(double *)uint64_t v232 = v87 * (double)v88;
      *(double *)&v232[8] = v87 * (double)v89;
      *(double *)&v232[16] = v87 + (double)v88 * v87;
      *(double *)&v232[24] = v87 + (double)v89 * v87;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v190, (double *)v232, 0.0, 0.0);
      v233.f64[1] = 0.0;
      memset(&v232[8], 0, 72);
      v235.f64[1] = 1.0;
      float64x2_t v234 = v196;
      v235.f64[0] = v197;
      *(double *)uint64_t v232 = v198 - v196.f64[0];
      *(double *)&v232[40] = v199 - v196.f64[1];
      v233.f64[0] = v200 - v197;
      double v90 = v193;
      double v91 = v194;
      double v92 = v90 + v90;
      double v93 = (v90 + v90) * v90;
      double v94 = (v91 + v91) * v91;
      double v95 = v192;
      double v96 = v95 + v95;
      double v97 = (v95 + v95) * v193;
      double v98 = (v91 + v91) * v195;
      double v99 = v194 * (v95 + v95);
      double v100 = 1.0 - (v95 + v95) * v95;
      double v217 = 1.0 - (v93 + v94);
      double v218 = v98 + v97;
      double v221 = v97 - v98;
      double v222 = v100 - v94;
      double v225 = v195 * v92 + v99;
      double v226 = v92 * v194 - v195 * v96;
      double v219 = v99 - v195 * v92;
      double v223 = v195 * v96 + v92 * v194;
      double v227 = v100 - v93;
      uint64_t v220 = 0;
      uint64_t v224 = 0;
      uint64_t v228 = 0;
      long long v229 = v190;
      uint64_t v230 = v191;
      uint64_t v231 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v189, &v217, (double *)v232);
      *(_OWORD *)unsigned int v201 = v189[0];
      *(_OWORD *)&v201[16] = v189[1];
      *(_OWORD *)&v201[32] = v189[2];
      long long v202 = v189[3];
      long long v203 = v189[4];
      long long v204 = v189[5];
      long long v205 = v189[6];
      long long v206 = v189[7];
      uint64_t v101 = **(void **)(v84 + 8 * v83);
      md::GeometryContext::transformConstantData((double *)v232, (uint64_t *)v183, v184, v182, 0.0, 0.0);
      uint64_t v102 = *(void *)(v101 + 64);
      long long v103 = *(_OWORD *)v232;
      *(void *)(v102 + 16) = *(void *)v232;
      *(void *)(v102 + 24) = 0;
      uint64_t v104 = *(void *)(v101 + 160);
      if (*((void *)&v103 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v105 = *(std::__shared_weak_count **)(v104 + 24);
      *(_OWORD *)(v104 + 16) = v103;
      if (v105 && !atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
      int v106 = *(std::__shared_weak_count **)&v232[8];
      if (!*(void *)&v232[8]) {
        goto LABEL_154;
      }
    }
    if (!atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
LABEL_154:
    gm::operator*<double,4,4,4>((double *)v232, v207.f64, (double *)v201);
    float32x4_t v127 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v232[32]), *(float64x2_t *)&v232[48]);
    float32x4_t v128 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v232[64]), v233);
    float32x4_t v129 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v234), v235);
    size_t v130 = *(uint64_t **)(v84 + 8 * v83);
    uint64_t v132 = *v130;
    uint64_t v131 = (uint64_t)(v130 + 1);
    uint64_t v133 = **(void ***)(v132 + 64);
    unint64_t v134 = v133[1];
    size_t v135 = (float32x4_t *)v133[9];
    *size_t v135 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v232), *(float64x2_t *)&v232[16]);
    v135[1] = v127;
    v135[2] = v128;
    v135[3] = v129;
    if (v133[8] > v134) {
      unint64_t v134 = v133[8];
    }
    v133[7] = 0;
    v133[8] = v134;
    ggl::CommandBuffer::pushRenderItem(a3, v131);
    ++*(void *)(v8[44] + 112);
    goto LABEL_129;
  }
LABEL_202:
  uint64_t v174 = v216;
  if (v216 && !atomic_fetch_add(&v216->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
    std::__shared_weak_count::__release_weak(v174);
  }
  uint64_t result = (uint64_t)v237;
  if (v237 == v236) {
    return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
  }
  if (v237) {
    return (*(uint64_t (**)(void))(*v237 + 40))();
  }
  return result;
}

void sub_1A24BD404(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x2B0]);
  std::function<BOOL ()(md::RoadTileDataRenderable const*)>::~function((void *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1}>,BOOL ()(md::RoadTileDataRenderable const*)>::operator()()
{
  return 1;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1}>,BOOL ()(md::RoadTileDataRenderable const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578960;
}

void *std::__function::__func<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1}>,BOOL ()(md::RoadTileDataRenderable const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF578960;
  return result;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::RoadTileDataRenderable const*)#1}>,BOOL ()(md::RoadTileDataRenderable const*)>::~__func()
{
}

uint64_t md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::~CartographicTiledVectorRenderLayer(void *a1)
{
  *a1 = &unk_1EF54EA28;
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  uint64_t v3 = (uint64_t **)*((void *)v2 + 7);
  uint64_t v4 = (uint64_t **)*((void *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = **v3;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5[1] = (uint64_t)&off_1EF55A458;
      void v5[3] = 3131955885;
      MEMORY[0x1A6239270](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  int8x8_t v7 = (uint64_t **)*((void *)v2 + 10);
  int v8 = (uint64_t **)*((void *)v2 + 11);
  if (v7 == v8) {
    goto LABEL_13;
  }
  do
  {
    uint8x8_t v9 = *v7;
    uint64_t v10 = **v7;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v9[1] = (uint64_t)&off_1EF55A458;
    v9[3] = 3131955885;
    MEMORY[0x1A6239270](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(void *a1)
{
  *a1 = &unk_1EF54E3D0;
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  uint64_t v3 = (uint64_t **)*((void *)v2 + 7);
  uint64_t v4 = (uint64_t **)*((void *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = **v3;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5[1] = (uint64_t)&off_1EF55A458;
      void v5[3] = 3131955885;
      MEMORY[0x1A6239270](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  int8x8_t v7 = (uint64_t **)*((void *)v2 + 10);
  int v8 = (uint64_t **)*((void *)v2 + 11);
  if (v7 == v8) {
    goto LABEL_13;
  }
  do
  {
    uint8x8_t v9 = *v7;
    uint64_t v10 = **v7;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v9[1] = (uint64_t)&off_1EF55A458;
    v9[3] = 3131955885;
    MEMORY[0x1A6239270](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledRenderLayer((uint64_t)a1);
}

void *std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(uint64_t a1, md::LayoutContext *a2, uint64_t a3, int a4, char a5, unsigned char *a6)
{
  uint64_t v239 = *MEMORY[0x1E4F143B8];
  v237[0] = &unk_1EF5788D0;
  uint64_t v238 = v237;
  int8x8_t v7 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v8 = (int8x8_t)v7[1];
  if (!*(void *)&v8) {
    return (*(uint64_t (**)(void *))(v237[0] + 32))(v237);
  }
  uint8x8_t v9 = (void *)a1;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v8 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v11 = 0x3070CB6B3C7F21D3uLL % *(void *)&v8;
    }
  }
  else
  {
    uint64_t v11 = (*(void *)&v8 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v12 = *v7;
  float32x4_t v13 = *(void **)(v12 + 8 * v11);
  if (!v13) {
    goto LABEL_24;
  }
  unint64_t v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_24;
  }
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x3070CB6B3C7F21D3)
      {
        if (v14[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_22;
        }
      }
      else if ((v16 & (*(void *)&v8 - 1)) != v11)
      {
        goto LABEL_24;
      }
      unint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v15 >= *(void *)&v8) {
      v15 %= *(void *)&v8;
    }
    if (v15 != v11) {
      goto LABEL_24;
    }
LABEL_11:
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_24;
    }
  }
  if (v14[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v184 = *(void *)(v17 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v184 = 0;
LABEL_25:
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v8 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v8 - 1) & 0x99BED48DEFBBD82BLL;
  }
  long long v19 = *(void **)(v12 + 8 * v18);
  if (!v19) {
    goto LABEL_48;
  }
  uint64_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_48;
  }
  if (v10.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v8 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_45;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_48;
      }
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v8) {
        v22 %= *(void *)&v8;
      }
      if (v22 != v18) {
        goto LABEL_48;
      }
      goto LABEL_34;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_34:
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_45:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v178 = *(void *)(v24 + 32);
    if (!v184) {
      return (*(uint64_t (**)(void *))(v237[0] + 32))(v237);
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v178 = 0;
  if (!v184) {
    return (*(uint64_t (**)(void *))(v237[0] + 32))(v237);
  }
LABEL_49:
  if (a5)
  {
LABEL_50:
    *(unsigned char *)(a1 + 360) = 1;
  }
  else
  {
    uint64_t v46 = *(void **)v178;
    uint64_t v47 = *(unsigned __int16 **)(*(void *)v178 + 184);
    uint64_t v48 = *(unsigned __int16 **)(*(void *)v178 + 192);
    if (v47 != v48)
    {
      uint64_t v49 = (unsigned __int16 *)v46[15];
      do
      {
        int v50 = (unsigned __int16 *)v46[14];
        if (v50 != v49)
        {
          int v50 = (unsigned __int16 *)v46[14];
          while (*v50 != *v47)
          {
            v50 += 56;
            if (v50 == v49)
            {
              int v50 = (unsigned __int16 *)v46[15];
              break;
            }
          }
        }
        if (!*((unsigned char *)v50 + 8)) {
          goto LABEL_50;
        }
        ++v47;
      }
      while (v47 != v48);
    }
    BOOL v51 = (unsigned __int16 *)v46[26];
    uint64_t v52 = (unsigned __int16 *)v46[27];
    if (v51 != v52)
    {
      unsigned int v54 = (unsigned __int16 *)v46[14];
      int v53 = (unsigned __int16 *)v46[15];
      do
      {
        uint64_t v57 = v54;
        if (v54 != v53)
        {
          uint64_t v57 = v54;
          while (*v57 != *v51)
          {
            v57 += 56;
            if (v57 == v53)
            {
              uint64_t v57 = v53;
              break;
            }
          }
        }
        int v55 = *((unsigned __int8 *)v57 + 8);
        ++v51;
        if (v55) {
          _ZF = v51 == v52;
        }
        else {
          _ZF = 1;
        }
      }
      while (!_ZF);
      if (!v55) {
        goto LABEL_50;
      }
    }
    int v64 = *(unsigned __int8 *)(a1 + 48);
    int v65 = *(unsigned __int8 *)(a1 + 49);
    *(unsigned char *)(a1 + 360) = v64 != v65;
    if (v64 == v65) {
      return (*(uint64_t (**)(void *))(v237[0] + 32))(v237);
    }
  }
  uint64_t v25 = *(void **)(a1 + 352);
  unint64_t v26 = v25[14];
  unint64_t v187 = v25[15];
  int v27 = *(uint64_t **)(a1 + 272);
  uint64_t v28 = *(uint64_t **)(a1 + 280);
  if (v27 != v28)
  {
    do
    {
      uint64_t v29 = *v27;
      if (!v238
        || (*(void *)float64x2_t v233 = *v27, (*(unsigned int (**)(void *, unsigned char *))(*v238 + 48))(v238, v233)))
      {
        uint64_t v30 = *(void *)(v29 + 384);
        uint64_t v31 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(*(void *)v178 + 8), (unsigned __int8 *)(v30 + 16));
        if (v31)
        {
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31[17] - v31[16]);
          if (*(unsigned __int8 *)(v30 + 168) == 255) {
            v26 += v32;
          }
          else {
            v187 += v32;
          }
        }
      }
      ++v27;
    }
    while (v27 != v28);
    uint64_t v25 = (void *)v9[44];
  }
  uint64_t v33 = v184 + 144;
  uint64_t v34 = 128;
  if (*(unsigned __int8 *)(v184 + 320) - 1 >= 3) {
    uint64_t v33 = v184 + 128;
  }
  else {
    uint64_t v34 = 144;
  }
  uint64_t v35 = *(void *)(v184 + v34);
  int v36 = *(std::__shared_weak_count **)(v33 + 8);
  uint64_t v216 = v35;
  double v217 = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v182 = v9;
  long long v189 = v25;
  if (v26 > (uint64_t)(v25[8] - v25[7]) >> 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    operator new();
  }
  if (v187 > (uint64_t)(v25[11] - v25[10]) >> 3) {
    operator new();
  }
  unsigned int v41 = (void *)*((void *)a2 + 1);
  int8x8_t v42 = (int8x8_t)v41[1];
  if (!*(void *)&v42)
  {
    uint64_t v58 = 0;
    unsigned int v44 = v25;
    goto LABEL_118;
  }
  uint8x8_t v43 = (uint8x8_t)vcnt_s8(v42);
  v43.i16[0] = vaddlv_u8(v43);
  unsigned int v44 = v25;
  if (v43.u32[0] > 1uLL)
  {
    uint64_t v45 = 0x1AF456233693CD46;
    if (*(void *)&v42 <= 0x1AF456233693CD46uLL) {
      uint64_t v45 = 0x1AF456233693CD46uLL % *(void *)&v42;
    }
  }
  else
  {
    uint64_t v45 = (*(void *)&v42 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v59 = *(void **)(*v41 + 8 * v45);
  if (!v59) {
    goto LABEL_117;
  }
  int v60 = (void *)*v59;
  if (!v60) {
    goto LABEL_117;
  }
  if (v43.u32[0] < 2uLL)
  {
    uint64_t v61 = *(void *)&v42 - 1;
    while (1)
    {
      uint64_t v63 = v60[1];
      if (v63 == 0x1AF456233693CD46)
      {
        if (v60[2] == 0x1AF456233693CD46) {
          goto LABEL_115;
        }
      }
      else if ((v63 & v61) != v45)
      {
        goto LABEL_117;
      }
      int v60 = (void *)*v60;
      if (!v60) {
        goto LABEL_117;
      }
    }
  }
  while (2)
  {
    unint64_t v62 = v60[1];
    if (v62 != 0x1AF456233693CD46)
    {
      if (v62 >= *(void *)&v42) {
        v62 %= *(void *)&v42;
      }
      if (v62 != v45) {
        goto LABEL_117;
      }
      goto LABEL_101;
    }
    if (v60[2] != 0x1AF456233693CD46)
    {
LABEL_101:
      int v60 = (void *)*v60;
      if (!v60) {
        goto LABEL_117;
      }
      continue;
    }
    break;
  }
LABEL_115:
  uint64_t v66 = v60[5];
  if (*(void *)(v66 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v58 = *(void *)(v66 + 32);
    goto LABEL_118;
  }
LABEL_117:
  uint64_t v58 = 0;
LABEL_118:
  int v183 = *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128);
  float64x2_t v67 = (float64x2_t *)(v58 + 808);
  if (*a6) {
    float64x2_t v67 = (float64x2_t *)(a6 + 8);
  }
  float64x2_t v68 = v67[5];
  float64x2_t v212 = v67[4];
  float64x2_t v213 = v68;
  float64x2_t v69 = v67[7];
  float64x2_t v214 = v67[6];
  float64x2_t v215 = v69;
  float64x2_t v70 = v67[1];
  float64x2_t v208 = *v67;
  float64x2_t v209 = v70;
  float64x2_t v71 = v67[3];
  float64x2_t v210 = v67[2];
  float64x2_t v211 = v71;
  uint64_t v72 = (md::LayoutContext *)v9[34];
  uint64_t v177 = (md::LayoutContext *)v9[35];
  if (v72 != v177)
  {
    while (1)
    {
      int v181 = v72;
      uint64_t v73 = *(void *)v72;
      if (!v238
        || (*(void *)float64x2_t v233 = *(void *)v72,
            ((*(uint64_t (**)(void *, unsigned char *))(*v238 + 48))(v238, v233) & 1) != 0))
      {
        uint64_t v74 = *(void *)(v73 + 384);
        int v75 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(*(void *)v178 + 8), (unsigned __int8 *)(v74 + 16));
        if (v75)
        {
          int v76 = v75[16];
          double v188 = v75[17];
          if (v188 != v76) {
            break;
          }
        }
      }
LABEL_122:
      uint64_t v72 = (md::LayoutContext *)((char *)v181 + 8);
      if ((md::LayoutContext *)((char *)v181 + 8) == v177) {
        goto LABEL_203;
      }
    }
    unint64_t v185 = (unsigned __int8 *)(v74 + 168);
    while (2)
    {
      unsigned int v77 = *(unsigned __int8 **)(v73 + 384);
      uint64_t v78 = (void *)v9[44];
      if (v77[168] != 255)
      {
        uint64_t v79 = v78[15];
        uint64_t v80 = v44[10];
        uint64_t v81 = *(void *)(*(void *)(**(void **)(v80 + 8 * v79) + 64) + 32);
        *(_OWORD *)float64x2_t v233 = 0uLL;
        uint64_t v82 = *(void *)(v81 + 8);
        if (v82) {
          uint64_t v83 = *(_DWORD **)(v81 + 72);
        }
        else {
          uint64_t v83 = 0;
        }
        *(void *)&long long v108 = 0;
        *((void *)&v108 + 1) = v81;
        *(_OWORD *)float64x2_t v233 = v108;
        *(void *)&v233[16] = 0;
        *(void *)&v233[24] = v82;
        *(void *)&v233[40] = v83;
        *(_WORD *)&v233[32] = 1;
        int v109 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v77 + 32))(v77);
        v83[8] = *v109;
        v83[9] = v109[1];
        v83[10] = v109[2];
        unsigned int v110 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(v73 + 384) + 32))(*(void *)(v73 + 384));
        v83[12] = v110[3];
        v83[13] = v110[4];
        v83[14] = v110[5];
        *(void *)(*(void *)(v80 + 8 * v79) + 32) = *(void *)v9[44];
        *(void *)(*(void *)(v80 + 8 * v79) + 40) = **(void **)(v80 + 8 * v79);
        uint64_t v111 = *(uint64_t **)(v80 + 8 * v79);
        v111[7] = 0;
        *((_DWORD *)v111 + 12) = *(unsigned __int8 *)(v74 + 169) + a4;
        uint64_t v112 = *v111;
        md::GeometryContext::transformConstantData(&v218, (uint64_t *)v184, v185, v183, 0.0, 0.0);
        uint64_t v113 = *(void *)(v112 + 64);
        double v114 = v218;
        double v115 = v219;
        *(double *)(v113 + 16) = v218;
        *(void *)(v113 + 24) = 0;
        uint64_t v116 = *(void *)(v112 + 160);
        if (v115 != 0.0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v115 + 8), 1uLL, memory_order_relaxed);
        }
        int v117 = *(std::__shared_weak_count **)(v116 + 24);
        *(double *)(v116 + 16) = v114;
        *(double *)(v116 + 24) = v115;
        if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
          int v118 = *(std::__shared_weak_count **)&v219;
          if (v219 != 0.0) {
            goto LABEL_148;
          }
        }
        else
        {
          int v118 = *(std::__shared_weak_count **)&v219;
          if (v219 != 0.0)
          {
LABEL_148:
            if (!atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
        }
        float32x4_t v137 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v210), v211);
        float32x4_t v138 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v212), v213);
        float32x4_t v139 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v214), v215);
        int64x2_t v140 = *(uint64_t **)(v80 + 8 * v79);
        uint64_t v142 = *v140;
        uint64_t v141 = v140 + 1;
        unint64_t v143 = **(void ***)(v142 + 64);
        unint64_t v144 = v143[1];
        uint64_t v145 = (float32x4_t *)v143[9];
        float32x4_t *v145 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v208), v209);
        v145[1] = v137;
        v145[2] = v138;
        v145[3] = v139;
        if (v143[8] > v144) {
          unint64_t v144 = v143[8];
        }
        v143[7] = 0;
        v143[8] = v144;
        unint64_t v146 = *(void **)(a3 + 80);
        unint64_t v147 = *(void *)(a3 + 88);
        if ((unint64_t)v146 < v147)
        {
          if (v146) {
            *unint64_t v146 = v141;
          }
          uint64_t v148 = v146 + 1;
          goto LABEL_188;
        }
        uint64_t v149 = *(void *)(a3 + 72);
        uint64_t v150 = ((uint64_t)v146 - v149) >> 3;
        unint64_t v151 = v150 + 1;
        if ((unint64_t)(v150 + 1) >> 61) {
          abort();
        }
        uint64_t v152 = v147 - v149;
        if (v152 >> 2 > v151) {
          unint64_t v151 = v152 >> 2;
        }
        if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v153 = v151;
        }
        if (v153)
        {
          uint64_t v154 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 16))(*(void *)(a3 + 96), 8 * v153, 8);
          uint64_t v155 = (void *)(v154 + 8 * v150);
          uint64_t v156 = v154 + 8 * v153;
          if (v154) {
            *uint64_t v155 = v141;
          }
        }
        else
        {
          uint64_t v156 = 0;
          uint64_t v155 = (void *)(8 * v150);
        }
        uint64_t v158 = *(void *)(a3 + 72);
        uint64_t v157 = *(void *)(a3 + 80);
        uint64_t v159 = v157 - v158;
        if (v157 == v158)
        {
          uint64_t v161 = v155;
          goto LABEL_186;
        }
        unint64_t v160 = v159 - 8;
        if ((unint64_t)(v159 - 8) < 0x38)
        {
          uint64_t v161 = v155;
        }
        else
        {
          uint64_t v161 = v155;
          if ((unint64_t)(v157 - (void)v155) >= 0x20)
          {
            uint64_t v162 = (v160 >> 3) + 1;
            int v163 = v155 - 2;
            uint64_t v164 = (long long *)(v157 - 16);
            uint64_t v165 = v162 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v166 = *v164;
              *(v163 - 1) = *(v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 2;
              v165 -= 4;
            }
            while (v165);
            uint64_t v161 = &v155[-(v162 & 0x3FFFFFFFFFFFFFFCLL)];
            v157 -= 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
            if (v162 == (v162 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_185:
              uint64_t v157 = *(void *)(a3 + 72);
LABEL_186:
              uint64_t v148 = v155 + 1;
              *(void *)(a3 + 72) = v161;
              *(void *)(a3 + 80) = v155 + 1;
              uint64_t v168 = *(void *)(a3 + 88);
              *(void *)(a3 + 88) = v156;
              if (v157) {
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 40))(*(void *)(a3 + 96), v157, v168 - v157);
              }
LABEL_188:
              *(void *)(a3 + 80) = v148;
              ++*(void *)(v9[44] + 120);
              if (*(void *)&v233[40])
              {
                long long v169 = *(_OWORD *)&v233[16];
                if (*(void *)&v233[24] != *(void *)&v233[16])
                {
                  int v170 = *(void **)&v233[8];
                  int v171 = v233[32];
                  int v172 = v233[33];
                  if (*(void *)v233 && *(unsigned char *)(*(void *)&v233[8] + 17) != 2) {
                    (*(void (**)(void))(**(void **)v233 + 64))();
                  }
                  if (v171 && !v172)
                  {
                    unint64_t v173 = v170[7];
                    unint64_t v174 = v170[8];
                    if (v174 == v173) {
                      unint64_t v173 = v170[10] - v170[9];
                    }
                    if ((unint64_t)v169 < v173) {
                      unint64_t v173 = v169;
                    }
                    if (v174 <= *((void *)&v169 + 1)) {
                      unint64_t v174 = *((void *)&v169 + 1);
                    }
                    if (v174 == v173) {
                      unint64_t v174 = v173 + v170[10] - v170[9];
                    }
                    v170[7] = v173;
                    v170[8] = v174;
                  }
                }
              }
              uint8x8_t v9 = v182;
              unsigned int v44 = v189;
LABEL_130:
              v76 += 3;
              if (v76 == v188) {
                goto LABEL_122;
              }
              continue;
            }
          }
        }
        do
        {
          uint64_t v167 = *(void *)(v157 - 8);
          v157 -= 8;
          *--uint64_t v161 = v167;
        }
        while (v157 != v158);
        goto LABEL_185;
      }
      break;
    }
    uint64_t v84 = v78[14];
    uint64_t v85 = v44[7];
    *(void *)(*(void *)(v85 + 8 * v84) + 32) = *v78;
    *(void *)(*(void *)(v85 + 8 * v84) + 40) = **(void **)(v85 + 8 * v84);
    int v86 = *(uint64_t **)(v85 + 8 * v84);
    v86[7] = 0;
    *((_DWORD *)v86 + 12) = *(unsigned __int8 *)(v74 + 169) + a4;
    if ((v183 - 1) > 2u)
    {
      int v119 = 1 << *((unsigned char *)v76 + 1);
      double v120 = 1.0 / (double)v119;
      double v121 = v120 * (double)*((int *)v76 + 2);
      double v122 = v120 * (double)(v119 + ~*((_DWORD *)v76 + 1));
      memset(&v202[8], 0, 32);
      *(double *)long long v202 = v120;
      *(double *)&v202[40] = v120;
      long long v203 = 0u;
      long long v204 = 0u;
      long long v205 = *(unint64_t *)&v120;
      *(double *)&long long v206 = v121;
      *((double *)&v206 + 1) = v122;
      long long v207 = xmmword_1A28FCCC0;
      uint64_t v123 = *v86;
      uint64_t v124 = *(void *)(*v86 + 64);
      *(void *)(v124 + 24) = 0;
      uint64_t v125 = v78[1];
      *(void *)(v124 + 16) = v125;
      uint64_t v126 = *(void *)(v123 + 160);
      uint64_t v127 = v78[2];
      if (v127) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v127 + 8), 1uLL, memory_order_relaxed);
      }
      long long v107 = *(std::__shared_weak_count **)(v126 + 24);
      *(void *)(v126 + 16) = v125;
      *(void *)(v126 + 24) = v127;
      if (!v107) {
        goto LABEL_155;
      }
    }
    else
    {
      int v87 = 1 << *(unsigned char *)(v74 + 169);
      double v88 = 1.0 / (double)v87;
      uint64_t v89 = *(int *)(v74 + 176);
      int v90 = v87 + ~*(_DWORD *)(v74 + 172);
      *(double *)float64x2_t v233 = v88 * (double)v89;
      *(double *)&v233[8] = v88 * (double)v90;
      *(double *)&v233[16] = v88 + (double)v89 * v88;
      *(double *)&v233[24] = v88 + (double)v90 * v88;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v191, (double *)v233, 0.0, 0.0);
      v234.f64[1] = 0.0;
      memset(&v233[8], 0, 72);
      v236.f64[1] = 1.0;
      float64x2_t v235 = v197;
      v236.f64[0] = v198;
      *(double *)float64x2_t v233 = v199 - v197.f64[0];
      *(double *)&v233[40] = v200 - v197.f64[1];
      v234.f64[0] = v201 - v198;
      double v91 = v194;
      double v92 = v195;
      double v93 = v91 + v91;
      double v94 = (v91 + v91) * v91;
      double v95 = (v92 + v92) * v92;
      double v96 = v193;
      double v97 = v96 + v96;
      double v98 = (v96 + v96) * v194;
      double v99 = (v92 + v92) * v196;
      double v100 = v195 * (v96 + v96);
      double v101 = 1.0 - (v96 + v96) * v96;
      double v218 = 1.0 - (v94 + v95);
      double v219 = v99 + v98;
      double v222 = v98 - v99;
      double v223 = v101 - v95;
      double v226 = v196 * v93 + v100;
      double v227 = v93 * v195 - v196 * v97;
      double v220 = v100 - v196 * v93;
      double v224 = v196 * v97 + v93 * v195;
      double v228 = v101 - v94;
      uint64_t v221 = 0;
      uint64_t v225 = 0;
      uint64_t v229 = 0;
      long long v230 = v191;
      uint64_t v231 = v192;
      uint64_t v232 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v190, &v218, (double *)v233);
      *(_OWORD *)long long v202 = v190[0];
      *(_OWORD *)&v202[16] = v190[1];
      *(_OWORD *)&v202[32] = v190[2];
      long long v203 = v190[3];
      long long v204 = v190[4];
      long long v205 = v190[5];
      long long v206 = v190[6];
      long long v207 = v190[7];
      uint64_t v102 = **(void **)(v85 + 8 * v84);
      md::GeometryContext::transformConstantData((double *)v233, (uint64_t *)v184, v185, v183, 0.0, 0.0);
      uint64_t v103 = *(void *)(v102 + 64);
      long long v104 = *(_OWORD *)v233;
      *(void *)(v103 + 16) = *(void *)v233;
      *(void *)(v103 + 24) = 0;
      uint64_t v105 = *(void *)(v102 + 160);
      if (*((void *)&v104 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v104 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      int v106 = *(std::__shared_weak_count **)(v105 + 24);
      *(_OWORD *)(v105 + 16) = v104;
      if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
      long long v107 = *(std::__shared_weak_count **)&v233[8];
      if (!*(void *)&v233[8]) {
        goto LABEL_155;
      }
    }
    if (!atomic_fetch_add(&v107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
LABEL_155:
    gm::operator*<double,4,4,4>((double *)v233, v208.f64, (double *)v202);
    float32x4_t v128 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v233[32]), *(float64x2_t *)&v233[48]);
    float32x4_t v129 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v233[64]), v234);
    float32x4_t v130 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v235), v236);
    uint64_t v131 = *(uint64_t **)(v85 + 8 * v84);
    uint64_t v133 = *v131;
    uint64_t v132 = (uint64_t)(v131 + 1);
    unint64_t v134 = **(void ***)(v133 + 64);
    unint64_t v135 = v134[1];
    float32x4_t v136 = (float32x4_t *)v134[9];
    *float32x4_t v136 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v233), *(float64x2_t *)&v233[16]);
    v136[1] = v128;
    v136[2] = v129;
    v136[3] = v130;
    if (v134[8] > v135) {
      unint64_t v135 = v134[8];
    }
    v134[7] = 0;
    v134[8] = v135;
    ggl::CommandBuffer::pushRenderItem(a3, v132);
    ++*(void *)(v9[44] + 112);
    goto LABEL_130;
  }
LABEL_203:
  unsigned int v175 = v217;
  if (v217 && !atomic_fetch_add(&v217->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
    std::__shared_weak_count::__release_weak(v175);
  }
  uint64_t result = (uint64_t)v238;
  if (v238 == v237) {
    return (*(uint64_t (**)(void *))(v237[0] + 32))(v237);
  }
  if (v238) {
    return (*(uint64_t (**)(void))(*v238 + 40))();
  }
  return result;
}

void sub_1A24BF1C4(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x2B0]);
  std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::~function((void *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::operator()()
{
  return 1;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5788D0;
}

void *std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF5788D0;
  return result;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::PolygonTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> const*)>::~__func()
{
}

uint64_t md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::~CartographicTiledVectorRenderLayer(void *a1)
{
  *a1 = &unk_1EF54E2E8;
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  uint64_t v3 = (uint64_t **)*((void *)v2 + 7);
  uint64_t v4 = (uint64_t **)*((void *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = **v3;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5[1] = (uint64_t)&off_1EF55A458;
      void v5[3] = 3131955885;
      MEMORY[0x1A6239270](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  int8x8_t v7 = (uint64_t **)*((void *)v2 + 10);
  int8x8_t v8 = (uint64_t **)*((void *)v2 + 11);
  if (v7 == v8) {
    goto LABEL_13;
  }
  do
  {
    uint8x8_t v9 = *v7;
    uint64_t v10 = **v7;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v9[1] = (uint64_t)&off_1EF55A458;
    v9[3] = 3131955885;
    MEMORY[0x1A6239270](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::~CartographicTiledRenderLayer((uint64_t)a1);
}

void *std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::CartographicTiledVectorRenderLayer<md::BuildingTileDataRenderable>::~CartographicTiledVectorRenderLayer(void *a1)
{
  *a1 = &unk_1EF54E940;
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  uint64_t v3 = (uint64_t **)*((void *)v2 + 7);
  uint64_t v4 = (uint64_t **)*((void *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = **v3;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5[1] = (uint64_t)&off_1EF55A458;
      void v5[3] = 3131955885;
      MEMORY[0x1A6239270](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  int8x8_t v7 = (uint64_t **)*((void *)v2 + 10);
  int8x8_t v8 = (uint64_t **)*((void *)v2 + 11);
  if (v7 == v8) {
    goto LABEL_13;
  }
  do
  {
    uint8x8_t v9 = *v7;
    uint64_t v10 = **v7;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v9[1] = (uint64_t)&off_1EF55A458;
    v9[3] = 3131955885;
    MEMORY[0x1A6239270](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::~CartographicTiledVectorRenderLayer(void *a1)
{
  *a1 = &unk_1EF54E4B8;
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  uint64_t v3 = (uint64_t **)*((void *)v2 + 7);
  uint64_t v4 = (uint64_t **)*((void *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = **v3;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5[1] = (uint64_t)&off_1EF55A458;
      void v5[3] = 3131955885;
      MEMORY[0x1A6239270](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  int8x8_t v7 = (uint64_t **)*((void *)v2 + 10);
  int8x8_t v8 = (uint64_t **)*((void *)v2 + 11);
  if (v7 == v8) {
    goto LABEL_13;
  }
  do
  {
    uint8x8_t v9 = *v7;
    uint64_t v10 = **v7;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v9[1] = (uint64_t)&off_1EF55A458;
    v9[3] = 3131955885;
    MEMORY[0x1A6239270](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::~CartographicTiledRenderLayer((uint64_t)a1);
}

void *std::function<BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> const*)>::operator()()
{
  return 1;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578918;
}

void *std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF578918;
  return result;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::MapTileDataRenderable<md::TrafficTileData> const*)#1}>,BOOL ()(md::MapTileDataRenderable<md::TrafficTileData> const*)>::~__func()
{
}

uint64_t md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledVectorRenderLayer(void *a1)
{
  *a1 = &unk_1EF54E858;
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  uint64_t v3 = (uint64_t **)*((void *)v2 + 7);
  uint64_t v4 = (uint64_t **)*((void *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = **v3;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5[1] = (uint64_t)&off_1EF55A458;
      void v5[3] = 3131955885;
      MEMORY[0x1A6239270](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  int8x8_t v7 = (uint64_t **)*((void *)v2 + 10);
  int8x8_t v8 = (uint64_t **)*((void *)v2 + 11);
  if (v7 == v8) {
    goto LABEL_13;
  }
  do
  {
    uint8x8_t v9 = *v7;
    uint64_t v10 = **v7;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v9[1] = (uint64_t)&off_1EF55A458;
    v9[3] = 3131955885;
    MEMORY[0x1A6239270](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledRenderLayer<md::TransitTileDataRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

void *std::function<BOOL ()(md::TransitTileDataRenderable const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(uint64_t a1, md::LayoutContext *a2, uint64_t a3, int a4, unsigned char *a5)
{
  uint64_t v238 = *MEMORY[0x1E4F143B8];
  v236[0] = &unk_1EF5789A8;
  uint64_t v237 = v236;
  uint64_t v6 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v7 = (int8x8_t)v6[1];
  if (!*(void *)&v7) {
    return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
  }
  int8x8_t v8 = (void *)a1;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    uint64_t v10 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v7 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v10 = 0x3070CB6B3C7F21D3uLL % *(void *)&v7;
    }
  }
  else
  {
    uint64_t v10 = (*(void *)&v7 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v11 = *v6;
  uint64_t v12 = *(void **)(v11 + 8 * v10);
  if (!v12) {
    goto LABEL_24;
  }
  float32x4_t v13 = (void *)*v12;
  if (!v13) {
    goto LABEL_24;
  }
  if (v9.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x3070CB6B3C7F21D3)
      {
        if (v13[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_22;
        }
      }
      else if ((v15 & (*(void *)&v7 - 1)) != v10)
      {
        goto LABEL_24;
      }
      float32x4_t v13 = (void *)*v13;
      if (!v13) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v14 = v13[1];
    if (v14 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v14 >= *(void *)&v7) {
      v14 %= *(void *)&v7;
    }
    if (v14 != v10) {
      goto LABEL_24;
    }
LABEL_11:
    float32x4_t v13 = (void *)*v13;
    if (!v13) {
      goto LABEL_24;
    }
  }
  if (v13[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v16 = v13[5];
  if (*(void *)(v16 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v183 = *(void *)(v16 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v183 = 0;
LABEL_25:
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v17 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v7 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v17 = 0x99BED48DEFBBD82BLL % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v17 = (*(void *)&v7 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v18 = *(void **)(v11 + 8 * v17);
  if (!v18) {
    goto LABEL_48;
  }
  long long v19 = (void *)*v18;
  if (!v19) {
    goto LABEL_48;
  }
  if (v9.u32[0] < 2uLL)
  {
    uint64_t v20 = *(void *)&v7 - 1;
    while (1)
    {
      uint64_t v22 = v19[1];
      if (v22 == 0x99BED48DEFBBD82BLL)
      {
        if (v19[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_45;
        }
      }
      else if ((v22 & v20) != v17)
      {
        goto LABEL_48;
      }
      long long v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v21 = v19[1];
    if (v21 != 0x99BED48DEFBBD82BLL)
    {
      if (v21 >= *(void *)&v7) {
        v21 %= *(void *)&v7;
      }
      if (v21 != v17) {
        goto LABEL_48;
      }
      goto LABEL_34;
    }
    if (v19[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_34:
      long long v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_45:
  uint64_t v23 = v19[5];
  if (*(void *)(v23 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v177 = *(void *)(v23 + 32);
    if (!v183) {
      return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v177 = 0;
  if (!v183) {
    return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
  }
LABEL_49:
  uint64_t v24 = *(void **)v177;
  uint64_t v25 = *(unsigned __int16 **)(*(void *)v177 + 184);
  unint64_t v26 = *(unsigned __int16 **)(*(void *)v177 + 192);
  if (v25 == v26)
  {
LABEL_58:
    uint64_t v29 = (unsigned __int16 *)v24[26];
    uint64_t v30 = (unsigned __int16 *)v24[27];
    if (v29 != v30)
    {
      unint64_t v32 = (unsigned __int16 *)v24[14];
      uint64_t v31 = (unsigned __int16 *)v24[15];
      do
      {
        uint64_t v35 = v32;
        if (v32 != v31)
        {
          uint64_t v35 = v32;
          while (*v35 != *v29)
          {
            v35 += 56;
            if (v35 == v31)
            {
              uint64_t v35 = v31;
              break;
            }
          }
        }
        int v33 = *((unsigned __int8 *)v35 + 8);
        ++v29;
        if (v33) {
          _ZF = v29 == v30;
        }
        else {
          _ZF = 1;
        }
      }
      while (!_ZF);
      if (!v33) {
        goto LABEL_72;
      }
    }
    int v36 = *(unsigned __int8 *)(a1 + 48);
    int v37 = *(unsigned __int8 *)(a1 + 49);
    *(unsigned char *)(a1 + 360) = v36 != v37;
    if (v36 == v37) {
      return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
    }
  }
  else
  {
    int v27 = (unsigned __int16 *)v24[15];
    while (1)
    {
      uint64_t v28 = (unsigned __int16 *)v24[14];
      if (v28 != v27)
      {
        uint64_t v28 = (unsigned __int16 *)v24[14];
        while (*v28 != *v25)
        {
          v28 += 56;
          if (v28 == v27)
          {
            uint64_t v28 = (unsigned __int16 *)v24[15];
            break;
          }
        }
      }
      if (!*((unsigned char *)v28 + 8)) {
        break;
      }
      if (++v25 == v26) {
        goto LABEL_58;
      }
    }
LABEL_72:
    *(unsigned char *)(a1 + 360) = 1;
  }
  uint64_t v38 = *(void **)(a1 + 352);
  unint64_t v39 = v38[14];
  unint64_t v186 = v38[15];
  __int32 v40 = *(uint64_t **)(a1 + 272);
  unsigned int v41 = *(uint64_t **)(a1 + 280);
  if (v40 != v41)
  {
    do
    {
      uint64_t v42 = *v40;
      if (!v237
        || (*(void *)uint64_t v232 = *v40, (*(unsigned int (**)(void *, unsigned char *))(*v237 + 48))(v237, v232)))
      {
        uint64_t v43 = *(void *)(v42 + 384);
        unsigned int v44 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(*(void *)v177 + 8), (unsigned __int8 *)(v43 + 16));
        if (v44)
        {
          unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (v44[17] - v44[16]);
          if (*(unsigned __int8 *)(v43 + 168) == 255) {
            v39 += v45;
          }
          else {
            v186 += v45;
          }
        }
      }
      ++v40;
    }
    while (v40 != v41);
    uint64_t v38 = (void *)v8[44];
  }
  uint64_t v46 = v183 + 144;
  uint64_t v47 = 128;
  if (*(unsigned __int8 *)(v183 + 320) - 1 >= 3) {
    uint64_t v46 = v183 + 128;
  }
  else {
    uint64_t v47 = 144;
  }
  uint64_t v48 = *(void *)(v183 + v47);
  uint64_t v49 = *(std::__shared_weak_count **)(v46 + 8);
  uint64_t v215 = v48;
  uint64_t v216 = v49;
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v181 = v8;
  double v188 = v38;
  if (v39 > (uint64_t)(v38[8] - v38[7]) >> 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    operator new();
  }
  if (v186 > (uint64_t)(v38[11] - v38[10]) >> 3) {
    operator new();
  }
  unsigned int v54 = (void *)*((void *)a2 + 1);
  int8x8_t v55 = (int8x8_t)v54[1];
  if (!*(void *)&v55)
  {
    uint64_t v59 = 0;
    uint64_t v57 = v38;
    goto LABEL_117;
  }
  uint8x8_t v56 = (uint8x8_t)vcnt_s8(v55);
  v56.i16[0] = vaddlv_u8(v56);
  uint64_t v57 = v38;
  if (v56.u32[0] > 1uLL)
  {
    uint64_t v58 = 0x1AF456233693CD46;
    if (*(void *)&v55 <= 0x1AF456233693CD46uLL) {
      uint64_t v58 = 0x1AF456233693CD46uLL % *(void *)&v55;
    }
  }
  else
  {
    uint64_t v58 = (*(void *)&v55 - 1) & 0x1AF456233693CD46;
  }
  int v60 = *(void **)(*v54 + 8 * v58);
  if (!v60) {
    goto LABEL_116;
  }
  uint64_t v61 = (void *)*v60;
  if (!v61) {
    goto LABEL_116;
  }
  if (v56.u32[0] < 2uLL)
  {
    uint64_t v62 = *(void *)&v55 - 1;
    while (1)
    {
      uint64_t v64 = v61[1];
      if (v64 == 0x1AF456233693CD46)
      {
        if (v61[2] == 0x1AF456233693CD46) {
          goto LABEL_114;
        }
      }
      else if ((v64 & v62) != v58)
      {
        goto LABEL_116;
      }
      uint64_t v61 = (void *)*v61;
      if (!v61) {
        goto LABEL_116;
      }
    }
  }
  while (2)
  {
    unint64_t v63 = v61[1];
    if (v63 != 0x1AF456233693CD46)
    {
      if (v63 >= *(void *)&v55) {
        v63 %= *(void *)&v55;
      }
      if (v63 != v58) {
        goto LABEL_116;
      }
      goto LABEL_103;
    }
    if (v61[2] != 0x1AF456233693CD46)
    {
LABEL_103:
      uint64_t v61 = (void *)*v61;
      if (!v61) {
        goto LABEL_116;
      }
      continue;
    }
    break;
  }
LABEL_114:
  uint64_t v65 = v61[5];
  if (*(void *)(v65 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v59 = *(void *)(v65 + 32);
    goto LABEL_117;
  }
LABEL_116:
  uint64_t v59 = 0;
LABEL_117:
  int v182 = *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128);
  uint64_t v66 = (float64x2_t *)(v59 + 808);
  if (*a5) {
    uint64_t v66 = (float64x2_t *)(a5 + 8);
  }
  float64x2_t v67 = v66[5];
  float64x2_t v211 = v66[4];
  float64x2_t v212 = v67;
  float64x2_t v68 = v66[7];
  float64x2_t v213 = v66[6];
  float64x2_t v214 = v68;
  float64x2_t v69 = v66[1];
  float64x2_t v207 = *v66;
  float64x2_t v208 = v69;
  float64x2_t v70 = v66[3];
  float64x2_t v209 = v66[2];
  float64x2_t v210 = v70;
  float64x2_t v71 = (md::LayoutContext *)v8[34];
  int v176 = (md::LayoutContext *)v8[35];
  if (v71 != v176)
  {
    while (1)
    {
      double v180 = v71;
      uint64_t v72 = *(void *)v71;
      if (!v237
        || (*(void *)uint64_t v232 = *(void *)v71,
            ((*(uint64_t (**)(void *, unsigned char *))(*v237 + 48))(v237, v232) & 1) != 0))
      {
        uint64_t v73 = *(void *)(v72 + 384);
        uint64_t v74 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(*(void *)v177 + 8), (unsigned __int8 *)(v73 + 16));
        if (v74)
        {
          int v75 = v74[16];
          unint64_t v187 = v74[17];
          if (v187 != v75) {
            break;
          }
        }
      }
LABEL_121:
      float64x2_t v71 = (md::LayoutContext *)((char *)v180 + 8);
      if ((md::LayoutContext *)((char *)v180 + 8) == v176) {
        goto LABEL_202;
      }
    }
    uint64_t v184 = (unsigned __int8 *)(v73 + 168);
    while (2)
    {
      int v76 = *(unsigned __int8 **)(v72 + 384);
      unsigned int v77 = (void *)v8[44];
      if (v76[168] != 255)
      {
        uint64_t v78 = v77[15];
        uint64_t v79 = v57[10];
        uint64_t v80 = *(void *)(*(void *)(**(void **)(v79 + 8 * v78) + 64) + 32);
        *(_OWORD *)uint64_t v232 = 0uLL;
        uint64_t v81 = *(void *)(v80 + 8);
        if (v81) {
          uint64_t v82 = *(_DWORD **)(v80 + 72);
        }
        else {
          uint64_t v82 = 0;
        }
        *(void *)&long long v107 = 0;
        *((void *)&v107 + 1) = v80;
        *(_OWORD *)uint64_t v232 = v107;
        *(void *)&v232[16] = 0;
        *(void *)&v232[24] = v81;
        *(void *)&v232[40] = v82;
        *(_WORD *)&v232[32] = 1;
        long long v108 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v76 + 32))(v76);
        v82[8] = *v108;
        v82[9] = v108[1];
        v82[10] = v108[2];
        int v109 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(v72 + 384) + 32))(*(void *)(v72 + 384));
        v82[12] = v109[3];
        v82[13] = v109[4];
        v82[14] = v109[5];
        *(void *)(*(void *)(v79 + 8 * v78) + 32) = *(void *)v8[44];
        *(void *)(*(void *)(v79 + 8 * v78) + 40) = **(void **)(v79 + 8 * v78);
        unsigned int v110 = *(uint64_t **)(v79 + 8 * v78);
        v110[7] = 0;
        *((_DWORD *)v110 + 12) = *(unsigned __int8 *)(v73 + 169) + a4;
        uint64_t v111 = *v110;
        md::GeometryContext::transformConstantData(&v217, (uint64_t *)v183, v184, v182, 0.0, 0.0);
        uint64_t v112 = *(void *)(v111 + 64);
        double v113 = v217;
        double v114 = v218;
        *(double *)(v112 + 16) = v217;
        *(void *)(v112 + 24) = 0;
        uint64_t v115 = *(void *)(v111 + 160);
        if (v114 != 0.0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v114 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v116 = *(std::__shared_weak_count **)(v115 + 24);
        *(double *)(v115 + 16) = v113;
        *(double *)(v115 + 24) = v114;
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
          int v117 = *(std::__shared_weak_count **)&v218;
          if (v218 != 0.0) {
            goto LABEL_147;
          }
        }
        else
        {
          int v117 = *(std::__shared_weak_count **)&v218;
          if (v218 != 0.0)
          {
LABEL_147:
            if (!atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
        }
        float32x4_t v136 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v209), v210);
        float32x4_t v137 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v211), v212);
        float32x4_t v138 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v213), v214);
        float32x4_t v139 = *(uint64_t **)(v79 + 8 * v78);
        uint64_t v141 = *v139;
        int64x2_t v140 = v139 + 1;
        uint64_t v142 = **(void ***)(v141 + 64);
        unint64_t v143 = v142[1];
        unint64_t v144 = (float32x4_t *)v142[9];
        *unint64_t v144 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v207), v208);
        v144[1] = v136;
        v144[2] = v137;
        v144[3] = v138;
        if (v142[8] > v143) {
          unint64_t v143 = v142[8];
        }
        v142[7] = 0;
        v142[8] = v143;
        uint64_t v145 = *(void **)(a3 + 80);
        unint64_t v146 = *(void *)(a3 + 88);
        if ((unint64_t)v145 < v146)
        {
          if (v145) {
            void *v145 = v140;
          }
          unint64_t v147 = v145 + 1;
          goto LABEL_187;
        }
        uint64_t v148 = *(void *)(a3 + 72);
        uint64_t v149 = ((uint64_t)v145 - v148) >> 3;
        unint64_t v150 = v149 + 1;
        if ((unint64_t)(v149 + 1) >> 61) {
          abort();
        }
        uint64_t v151 = v146 - v148;
        if (v151 >> 2 > v150) {
          unint64_t v150 = v151 >> 2;
        }
        if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v152 = v150;
        }
        if (v152)
        {
          uint64_t v153 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 16))(*(void *)(a3 + 96), 8 * v152, 8);
          uint64_t v154 = (void *)(v153 + 8 * v149);
          uint64_t v155 = v153 + 8 * v152;
          if (v153) {
            *uint64_t v154 = v140;
          }
        }
        else
        {
          uint64_t v155 = 0;
          uint64_t v154 = (void *)(8 * v149);
        }
        uint64_t v157 = *(void *)(a3 + 72);
        uint64_t v156 = *(void *)(a3 + 80);
        uint64_t v158 = v156 - v157;
        if (v156 == v157)
        {
          unint64_t v160 = v154;
          goto LABEL_185;
        }
        unint64_t v159 = v158 - 8;
        if ((unint64_t)(v158 - 8) < 0x38)
        {
          unint64_t v160 = v154;
        }
        else
        {
          unint64_t v160 = v154;
          if ((unint64_t)(v156 - (void)v154) >= 0x20)
          {
            uint64_t v161 = (v159 >> 3) + 1;
            uint64_t v162 = v154 - 2;
            int v163 = (long long *)(v156 - 16);
            uint64_t v164 = v161 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v165 = *v163;
              *(v162 - 1) = *(v163 - 1);
              *uint64_t v162 = v165;
              v162 -= 2;
              v163 -= 2;
              v164 -= 4;
            }
            while (v164);
            unint64_t v160 = &v154[-(v161 & 0x3FFFFFFFFFFFFFFCLL)];
            v156 -= 8 * (v161 & 0x3FFFFFFFFFFFFFFCLL);
            if (v161 == (v161 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_184:
              uint64_t v156 = *(void *)(a3 + 72);
LABEL_185:
              unint64_t v147 = v154 + 1;
              *(void *)(a3 + 72) = v160;
              *(void *)(a3 + 80) = v154 + 1;
              uint64_t v167 = *(void *)(a3 + 88);
              *(void *)(a3 + 88) = v155;
              if (v156) {
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 40))(*(void *)(a3 + 96), v156, v167 - v156);
              }
LABEL_187:
              *(void *)(a3 + 80) = v147;
              ++*(void *)(v8[44] + 120);
              if (*(void *)&v232[40])
              {
                long long v168 = *(_OWORD *)&v232[16];
                if (*(void *)&v232[24] != *(void *)&v232[16])
                {
                  long long v169 = *(void **)&v232[8];
                  int v170 = v232[32];
                  int v171 = v232[33];
                  if (*(void *)v232 && *(unsigned char *)(*(void *)&v232[8] + 17) != 2) {
                    (*(void (**)(void))(**(void **)v232 + 64))();
                  }
                  if (v170 && !v171)
                  {
                    unint64_t v172 = v169[7];
                    unint64_t v173 = v169[8];
                    if (v173 == v172) {
                      unint64_t v172 = v169[10] - v169[9];
                    }
                    if ((unint64_t)v168 < v172) {
                      unint64_t v172 = v168;
                    }
                    if (v173 <= *((void *)&v168 + 1)) {
                      unint64_t v173 = *((void *)&v168 + 1);
                    }
                    if (v173 == v172) {
                      unint64_t v173 = v172 + v169[10] - v169[9];
                    }
                    v169[7] = v172;
                    v169[8] = v173;
                  }
                }
              }
              int8x8_t v8 = v181;
              uint64_t v57 = v188;
LABEL_129:
              v75 += 3;
              if (v75 == v187) {
                goto LABEL_121;
              }
              continue;
            }
          }
        }
        do
        {
          uint64_t v166 = *(void *)(v156 - 8);
          v156 -= 8;
          *--unint64_t v160 = v166;
        }
        while (v156 != v157);
        goto LABEL_184;
      }
      break;
    }
    uint64_t v83 = v77[14];
    uint64_t v84 = v57[7];
    *(void *)(*(void *)(v84 + 8 * v83) + 32) = *v77;
    *(void *)(*(void *)(v84 + 8 * v83) + 40) = **(void **)(v84 + 8 * v83);
    uint64_t v85 = *(uint64_t **)(v84 + 8 * v83);
    v85[7] = 0;
    *((_DWORD *)v85 + 12) = *(unsigned __int8 *)(v73 + 169) + a4;
    if ((v182 - 1) > 2u)
    {
      int v118 = 1 << *((unsigned char *)v75 + 1);
      double v119 = 1.0 / (double)v118;
      double v120 = v119 * (double)*((int *)v75 + 2);
      double v121 = v119 * (double)(v118 + ~*((_DWORD *)v75 + 1));
      memset(&v201[8], 0, 32);
      *(double *)double v201 = v119;
      *(double *)&v201[40] = v119;
      long long v202 = 0u;
      long long v203 = 0u;
      long long v204 = *(unint64_t *)&v119;
      *(double *)&long long v205 = v120;
      *((double *)&v205 + 1) = v121;
      long long v206 = xmmword_1A28FCCC0;
      uint64_t v122 = *v85;
      uint64_t v123 = *(void *)(*v85 + 64);
      *(void *)(v123 + 24) = 0;
      uint64_t v124 = v77[1];
      *(void *)(v123 + 16) = v124;
      uint64_t v125 = *(void *)(v122 + 160);
      uint64_t v126 = v77[2];
      if (v126) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v126 + 8), 1uLL, memory_order_relaxed);
      }
      int v106 = *(std::__shared_weak_count **)(v125 + 24);
      *(void *)(v125 + 16) = v124;
      *(void *)(v125 + 24) = v126;
      if (!v106) {
        goto LABEL_154;
      }
    }
    else
    {
      int v86 = 1 << *(unsigned char *)(v73 + 169);
      double v87 = 1.0 / (double)v86;
      uint64_t v88 = *(int *)(v73 + 176);
      int v89 = v86 + ~*(_DWORD *)(v73 + 172);
      *(double *)uint64_t v232 = v87 * (double)v88;
      *(double *)&v232[8] = v87 * (double)v89;
      *(double *)&v232[16] = v87 + (double)v88 * v87;
      *(double *)&v232[24] = v87 + (double)v89 * v87;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v190, (double *)v232, 0.0, 0.0);
      v233.f64[1] = 0.0;
      memset(&v232[8], 0, 72);
      v235.f64[1] = 1.0;
      float64x2_t v234 = v196;
      v235.f64[0] = v197;
      *(double *)uint64_t v232 = v198 - v196.f64[0];
      *(double *)&v232[40] = v199 - v196.f64[1];
      v233.f64[0] = v200 - v197;
      double v90 = v193;
      double v91 = v194;
      double v92 = v90 + v90;
      double v93 = (v90 + v90) * v90;
      double v94 = (v91 + v91) * v91;
      double v95 = v192;
      double v96 = v95 + v95;
      double v97 = (v95 + v95) * v193;
      double v98 = (v91 + v91) * v195;
      double v99 = v194 * (v95 + v95);
      double v100 = 1.0 - (v95 + v95) * v95;
      double v217 = 1.0 - (v93 + v94);
      double v218 = v98 + v97;
      double v221 = v97 - v98;
      double v222 = v100 - v94;
      double v225 = v195 * v92 + v99;
      double v226 = v92 * v194 - v195 * v96;
      double v219 = v99 - v195 * v92;
      double v223 = v195 * v96 + v92 * v194;
      double v227 = v100 - v93;
      uint64_t v220 = 0;
      uint64_t v224 = 0;
      uint64_t v228 = 0;
      long long v229 = v190;
      uint64_t v230 = v191;
      uint64_t v231 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v189, &v217, (double *)v232);
      *(_OWORD *)double v201 = v189[0];
      *(_OWORD *)&v201[16] = v189[1];
      *(_OWORD *)&v201[32] = v189[2];
      long long v202 = v189[3];
      long long v203 = v189[4];
      long long v204 = v189[5];
      long long v205 = v189[6];
      long long v206 = v189[7];
      uint64_t v101 = **(void **)(v84 + 8 * v83);
      md::GeometryContext::transformConstantData((double *)v232, (uint64_t *)v183, v184, v182, 0.0, 0.0);
      uint64_t v102 = *(void *)(v101 + 64);
      long long v103 = *(_OWORD *)v232;
      *(void *)(v102 + 16) = *(void *)v232;
      *(void *)(v102 + 24) = 0;
      uint64_t v104 = *(void *)(v101 + 160);
      if (*((void *)&v103 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v105 = *(std::__shared_weak_count **)(v104 + 24);
      *(_OWORD *)(v104 + 16) = v103;
      if (v105 && !atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
      int v106 = *(std::__shared_weak_count **)&v232[8];
      if (!*(void *)&v232[8]) {
        goto LABEL_154;
      }
    }
    if (!atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
LABEL_154:
    gm::operator*<double,4,4,4>((double *)v232, v207.f64, (double *)v201);
    float32x4_t v127 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v232[32]), *(float64x2_t *)&v232[48]);
    float32x4_t v128 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v232[64]), v233);
    float32x4_t v129 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v234), v235);
    float32x4_t v130 = *(uint64_t **)(v84 + 8 * v83);
    uint64_t v132 = *v130;
    uint64_t v131 = (uint64_t)(v130 + 1);
    uint64_t v133 = **(void ***)(v132 + 64);
    unint64_t v134 = v133[1];
    unint64_t v135 = (float32x4_t *)v133[9];
    *unint64_t v135 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v232), *(float64x2_t *)&v232[16]);
    v135[1] = v127;
    v135[2] = v128;
    v135[3] = v129;
    if (v133[8] > v134) {
      unint64_t v134 = v133[8];
    }
    v133[7] = 0;
    v133[8] = v134;
    ggl::CommandBuffer::pushRenderItem(a3, v131);
    ++*(void *)(v8[44] + 112);
    goto LABEL_129;
  }
LABEL_202:
  unint64_t v174 = v216;
  if (v216 && !atomic_fetch_add(&v216->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
    std::__shared_weak_count::__release_weak(v174);
  }
  uint64_t result = (uint64_t)v237;
  if (v237 == v236) {
    return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
  }
  if (v237) {
    return (*(uint64_t (**)(void))(*v237 + 40))();
  }
  return result;
}

void sub_1A24C1458(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x2B0]);
  std::function<BOOL ()(md::TransitTileDataRenderable const*)>::~function((void *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1}>,BOOL ()(md::TransitTileDataRenderable const*)>::operator()()
{
  return 1;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1}>,BOOL ()(md::TransitTileDataRenderable const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5789A8;
}

void *std::__function::__func<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1}>,BOOL ()(md::TransitTileDataRenderable const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF5789A8;
  return result;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<md::TransitTileDataRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(md::TransitTileDataRenderable const*)#1}>,BOOL ()(md::TransitTileDataRenderable const*)>::~__func()
{
}

uint64_t md::CartographicTiledVectorRenderLayer<md::DaVinciGroundRenderable>::~CartographicTiledVectorRenderLayer(void *a1)
{
  *a1 = &unk_1EF54E770;
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  uint64_t v3 = (uint64_t **)*((void *)v2 + 7);
  uint64_t v4 = (uint64_t **)*((void *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = **v3;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5[1] = (uint64_t)&off_1EF55A458;
      void v5[3] = 3131955885;
      MEMORY[0x1A6239270](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  int8x8_t v7 = (uint64_t **)*((void *)v2 + 10);
  int8x8_t v8 = (uint64_t **)*((void *)v2 + 11);
  if (v7 == v8) {
    goto LABEL_13;
  }
  do
  {
    uint8x8_t v9 = *v7;
    uint64_t v10 = **v7;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v9[1] = (uint64_t)&off_1EF55A458;
    v9[3] = 3131955885;
    MEMORY[0x1A6239270](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

uint64_t md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledVectorRenderLayer(void *a1)
{
  *a1 = &unk_1EF54E5A0;
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  uint64_t v3 = (uint64_t **)*((void *)v2 + 7);
  uint64_t v4 = (uint64_t **)*((void *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = **v3;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5[1] = (uint64_t)&off_1EF55A458;
      void v5[3] = 3131955885;
      MEMORY[0x1A6239270](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  int8x8_t v7 = (uint64_t **)*((void *)v2 + 10);
  int8x8_t v8 = (uint64_t **)*((void *)v2 + 11);
  if (v7 == v8) {
    goto LABEL_13;
  }
  do
  {
    uint8x8_t v9 = *v7;
    uint64_t v10 = **v7;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v9[1] = (uint64_t)&off_1EF55A458;
    v9[3] = 3131955885;
    MEMORY[0x1A6239270](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledRenderLayer((uint64_t)a1);
}

uint64_t md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::~CartographicTiledVectorRenderLayer(void *a1)
{
  *a1 = &unk_1EF54E118;
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  uint64_t v3 = (uint64_t **)*((void *)v2 + 7);
  uint64_t v4 = (uint64_t **)*((void *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = **v3;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5[1] = (uint64_t)&off_1EF55A458;
      void v5[3] = 3131955885;
      MEMORY[0x1A6239270](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  int8x8_t v7 = (uint64_t **)*((void *)v2 + 10);
  int8x8_t v8 = (uint64_t **)*((void *)v2 + 11);
  if (v7 == v8) {
    goto LABEL_13;
  }
  do
  {
    uint8x8_t v9 = *v7;
    uint64_t v10 = **v7;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v9[1] = (uint64_t)&off_1EF55A458;
    v9[3] = 3131955885;
    MEMORY[0x1A6239270](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledRenderLayer<HillshadeRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

void *std::function<BOOL ()(HillshadeRenderable const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(uint64_t a1, md::LayoutContext *a2, uint64_t a3, int a4, unsigned char *a5)
{
  uint64_t v238 = *MEMORY[0x1E4F143B8];
  v236[0] = &unk_1EF578888;
  uint64_t v237 = v236;
  uint64_t v6 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v7 = (int8x8_t)v6[1];
  if (!*(void *)&v7) {
    return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
  }
  int8x8_t v8 = (void *)a1;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    uint64_t v10 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v7 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v10 = 0x3070CB6B3C7F21D3uLL % *(void *)&v7;
    }
  }
  else
  {
    uint64_t v10 = (*(void *)&v7 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v11 = *v6;
  uint64_t v12 = *(void **)(v11 + 8 * v10);
  if (!v12) {
    goto LABEL_24;
  }
  float32x4_t v13 = (void *)*v12;
  if (!v13) {
    goto LABEL_24;
  }
  if (v9.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x3070CB6B3C7F21D3)
      {
        if (v13[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_22;
        }
      }
      else if ((v15 & (*(void *)&v7 - 1)) != v10)
      {
        goto LABEL_24;
      }
      float32x4_t v13 = (void *)*v13;
      if (!v13) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v14 = v13[1];
    if (v14 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v14 >= *(void *)&v7) {
      v14 %= *(void *)&v7;
    }
    if (v14 != v10) {
      goto LABEL_24;
    }
LABEL_11:
    float32x4_t v13 = (void *)*v13;
    if (!v13) {
      goto LABEL_24;
    }
  }
  if (v13[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v16 = v13[5];
  if (*(void *)(v16 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v183 = *(void *)(v16 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v183 = 0;
LABEL_25:
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v17 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v7 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v17 = 0x99BED48DEFBBD82BLL % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v17 = (*(void *)&v7 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v18 = *(void **)(v11 + 8 * v17);
  if (!v18) {
    goto LABEL_48;
  }
  long long v19 = (void *)*v18;
  if (!v19) {
    goto LABEL_48;
  }
  if (v9.u32[0] < 2uLL)
  {
    uint64_t v20 = *(void *)&v7 - 1;
    while (1)
    {
      uint64_t v22 = v19[1];
      if (v22 == 0x99BED48DEFBBD82BLL)
      {
        if (v19[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_45;
        }
      }
      else if ((v22 & v20) != v17)
      {
        goto LABEL_48;
      }
      long long v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v21 = v19[1];
    if (v21 != 0x99BED48DEFBBD82BLL)
    {
      if (v21 >= *(void *)&v7) {
        v21 %= *(void *)&v7;
      }
      if (v21 != v17) {
        goto LABEL_48;
      }
      goto LABEL_34;
    }
    if (v19[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_34:
      long long v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_45:
  uint64_t v23 = v19[5];
  if (*(void *)(v23 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v177 = *(void *)(v23 + 32);
    if (!v183) {
      return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v177 = 0;
  if (!v183) {
    return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
  }
LABEL_49:
  uint64_t v24 = *(void **)v177;
  uint64_t v25 = *(unsigned __int16 **)(*(void *)v177 + 184);
  unint64_t v26 = *(unsigned __int16 **)(*(void *)v177 + 192);
  if (v25 == v26)
  {
LABEL_58:
    uint64_t v29 = (unsigned __int16 *)v24[26];
    uint64_t v30 = (unsigned __int16 *)v24[27];
    if (v29 != v30)
    {
      unint64_t v32 = (unsigned __int16 *)v24[14];
      uint64_t v31 = (unsigned __int16 *)v24[15];
      do
      {
        uint64_t v35 = v32;
        if (v32 != v31)
        {
          uint64_t v35 = v32;
          while (*v35 != *v29)
          {
            v35 += 56;
            if (v35 == v31)
            {
              uint64_t v35 = v31;
              break;
            }
          }
        }
        int v33 = *((unsigned __int8 *)v35 + 8);
        ++v29;
        if (v33) {
          _ZF = v29 == v30;
        }
        else {
          _ZF = 1;
        }
      }
      while (!_ZF);
      if (!v33) {
        goto LABEL_72;
      }
    }
    int v36 = *(unsigned __int8 *)(a1 + 48);
    int v37 = *(unsigned __int8 *)(a1 + 49);
    *(unsigned char *)(a1 + 360) = v36 != v37;
    if (v36 == v37) {
      return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
    }
  }
  else
  {
    int v27 = (unsigned __int16 *)v24[15];
    while (1)
    {
      uint64_t v28 = (unsigned __int16 *)v24[14];
      if (v28 != v27)
      {
        uint64_t v28 = (unsigned __int16 *)v24[14];
        while (*v28 != *v25)
        {
          v28 += 56;
          if (v28 == v27)
          {
            uint64_t v28 = (unsigned __int16 *)v24[15];
            break;
          }
        }
      }
      if (!*((unsigned char *)v28 + 8)) {
        break;
      }
      if (++v25 == v26) {
        goto LABEL_58;
      }
    }
LABEL_72:
    *(unsigned char *)(a1 + 360) = 1;
  }
  uint64_t v38 = *(void **)(a1 + 352);
  unint64_t v39 = v38[14];
  unint64_t v186 = v38[15];
  __int32 v40 = *(uint64_t **)(a1 + 272);
  unsigned int v41 = *(uint64_t **)(a1 + 280);
  if (v40 != v41)
  {
    do
    {
      uint64_t v42 = *v40;
      if (!v237
        || (*(void *)uint64_t v232 = *v40, (*(unsigned int (**)(void *, unsigned char *))(*v237 + 48))(v237, v232)))
      {
        uint64_t v43 = *(void *)(v42 + 384);
        unsigned int v44 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(*(void *)v177 + 8), (unsigned __int8 *)(v43 + 16));
        if (v44)
        {
          unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (v44[17] - v44[16]);
          if (*(unsigned __int8 *)(v43 + 168) == 255) {
            v39 += v45;
          }
          else {
            v186 += v45;
          }
        }
      }
      ++v40;
    }
    while (v40 != v41);
    uint64_t v38 = (void *)v8[44];
  }
  uint64_t v46 = v183 + 144;
  uint64_t v47 = 128;
  if (*(unsigned __int8 *)(v183 + 320) - 1 >= 3) {
    uint64_t v46 = v183 + 128;
  }
  else {
    uint64_t v47 = 144;
  }
  uint64_t v48 = *(void *)(v183 + v47);
  uint64_t v49 = *(std::__shared_weak_count **)(v46 + 8);
  uint64_t v215 = v48;
  uint64_t v216 = v49;
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v181 = v8;
  double v188 = v38;
  if (v39 > (uint64_t)(v38[8] - v38[7]) >> 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    operator new();
  }
  if (v186 > (uint64_t)(v38[11] - v38[10]) >> 3) {
    operator new();
  }
  unsigned int v54 = (void *)*((void *)a2 + 1);
  int8x8_t v55 = (int8x8_t)v54[1];
  if (!*(void *)&v55)
  {
    uint64_t v59 = 0;
    uint64_t v57 = v38;
    goto LABEL_117;
  }
  uint8x8_t v56 = (uint8x8_t)vcnt_s8(v55);
  v56.i16[0] = vaddlv_u8(v56);
  uint64_t v57 = v38;
  if (v56.u32[0] > 1uLL)
  {
    uint64_t v58 = 0x1AF456233693CD46;
    if (*(void *)&v55 <= 0x1AF456233693CD46uLL) {
      uint64_t v58 = 0x1AF456233693CD46uLL % *(void *)&v55;
    }
  }
  else
  {
    uint64_t v58 = (*(void *)&v55 - 1) & 0x1AF456233693CD46;
  }
  int v60 = *(void **)(*v54 + 8 * v58);
  if (!v60) {
    goto LABEL_116;
  }
  uint64_t v61 = (void *)*v60;
  if (!v61) {
    goto LABEL_116;
  }
  if (v56.u32[0] < 2uLL)
  {
    uint64_t v62 = *(void *)&v55 - 1;
    while (1)
    {
      uint64_t v64 = v61[1];
      if (v64 == 0x1AF456233693CD46)
      {
        if (v61[2] == 0x1AF456233693CD46) {
          goto LABEL_114;
        }
      }
      else if ((v64 & v62) != v58)
      {
        goto LABEL_116;
      }
      uint64_t v61 = (void *)*v61;
      if (!v61) {
        goto LABEL_116;
      }
    }
  }
  while (2)
  {
    unint64_t v63 = v61[1];
    if (v63 != 0x1AF456233693CD46)
    {
      if (v63 >= *(void *)&v55) {
        v63 %= *(void *)&v55;
      }
      if (v63 != v58) {
        goto LABEL_116;
      }
      goto LABEL_103;
    }
    if (v61[2] != 0x1AF456233693CD46)
    {
LABEL_103:
      uint64_t v61 = (void *)*v61;
      if (!v61) {
        goto LABEL_116;
      }
      continue;
    }
    break;
  }
LABEL_114:
  uint64_t v65 = v61[5];
  if (*(void *)(v65 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v59 = *(void *)(v65 + 32);
    goto LABEL_117;
  }
LABEL_116:
  uint64_t v59 = 0;
LABEL_117:
  int v182 = *(unsigned __int8 *)(md::LayoutContext::frameState(a2) + 128);
  uint64_t v66 = (float64x2_t *)(v59 + 808);
  if (*a5) {
    uint64_t v66 = (float64x2_t *)(a5 + 8);
  }
  float64x2_t v67 = v66[5];
  float64x2_t v211 = v66[4];
  float64x2_t v212 = v67;
  float64x2_t v68 = v66[7];
  float64x2_t v213 = v66[6];
  float64x2_t v214 = v68;
  float64x2_t v69 = v66[1];
  float64x2_t v207 = *v66;
  float64x2_t v208 = v69;
  float64x2_t v70 = v66[3];
  float64x2_t v209 = v66[2];
  float64x2_t v210 = v70;
  float64x2_t v71 = (md::LayoutContext *)v8[34];
  int v176 = (md::LayoutContext *)v8[35];
  if (v71 != v176)
  {
    while (1)
    {
      double v180 = v71;
      uint64_t v72 = *(void *)v71;
      if (!v237
        || (*(void *)uint64_t v232 = *(void *)v71,
            ((*(uint64_t (**)(void *, unsigned char *))(*v237 + 48))(v237, v232) & 1) != 0))
      {
        uint64_t v73 = *(void *)(v72 + 384);
        uint64_t v74 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(*(void *)v177 + 8), (unsigned __int8 *)(v73 + 16));
        if (v74)
        {
          int v75 = v74[16];
          unint64_t v187 = v74[17];
          if (v187 != v75) {
            break;
          }
        }
      }
LABEL_121:
      float64x2_t v71 = (md::LayoutContext *)((char *)v180 + 8);
      if ((md::LayoutContext *)((char *)v180 + 8) == v176) {
        goto LABEL_202;
      }
    }
    uint64_t v184 = (unsigned __int8 *)(v73 + 168);
    while (2)
    {
      int v76 = *(unsigned __int8 **)(v72 + 384);
      unsigned int v77 = (void *)v8[44];
      if (v76[168] != 255)
      {
        uint64_t v78 = v77[15];
        uint64_t v79 = v57[10];
        uint64_t v80 = *(void *)(*(void *)(**(void **)(v79 + 8 * v78) + 64) + 32);
        *(_OWORD *)uint64_t v232 = 0uLL;
        uint64_t v81 = *(void *)(v80 + 8);
        if (v81) {
          uint64_t v82 = *(_DWORD **)(v80 + 72);
        }
        else {
          uint64_t v82 = 0;
        }
        *(void *)&long long v107 = 0;
        *((void *)&v107 + 1) = v80;
        *(_OWORD *)uint64_t v232 = v107;
        *(void *)&v232[16] = 0;
        *(void *)&v232[24] = v81;
        *(void *)&v232[40] = v82;
        *(_WORD *)&v232[32] = 1;
        long long v108 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v76 + 32))(v76);
        v82[8] = *v108;
        v82[9] = v108[1];
        v82[10] = v108[2];
        int v109 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)(v72 + 384) + 32))(*(void *)(v72 + 384));
        v82[12] = v109[3];
        v82[13] = v109[4];
        v82[14] = v109[5];
        *(void *)(*(void *)(v79 + 8 * v78) + 32) = *(void *)v8[44];
        *(void *)(*(void *)(v79 + 8 * v78) + 40) = **(void **)(v79 + 8 * v78);
        unsigned int v110 = *(uint64_t **)(v79 + 8 * v78);
        v110[7] = 0;
        *((_DWORD *)v110 + 12) = *(unsigned __int8 *)(v73 + 169) + a4;
        uint64_t v111 = *v110;
        md::GeometryContext::transformConstantData(&v217, (uint64_t *)v183, v184, v182, 0.0, 0.0);
        uint64_t v112 = *(void *)(v111 + 64);
        double v113 = v217;
        double v114 = v218;
        *(double *)(v112 + 16) = v217;
        *(void *)(v112 + 24) = 0;
        uint64_t v115 = *(void *)(v111 + 160);
        if (v114 != 0.0) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v114 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v116 = *(std::__shared_weak_count **)(v115 + 24);
        *(double *)(v115 + 16) = v113;
        *(double *)(v115 + 24) = v114;
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
          int v117 = *(std::__shared_weak_count **)&v218;
          if (v218 != 0.0) {
            goto LABEL_147;
          }
        }
        else
        {
          int v117 = *(std::__shared_weak_count **)&v218;
          if (v218 != 0.0)
          {
LABEL_147:
            if (!atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
        }
        float32x4_t v136 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v209), v210);
        float32x4_t v137 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v211), v212);
        float32x4_t v138 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v213), v214);
        float32x4_t v139 = *(uint64_t **)(v79 + 8 * v78);
        uint64_t v141 = *v139;
        int64x2_t v140 = v139 + 1;
        uint64_t v142 = **(void ***)(v141 + 64);
        unint64_t v143 = v142[1];
        unint64_t v144 = (float32x4_t *)v142[9];
        *unint64_t v144 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v207), v208);
        v144[1] = v136;
        v144[2] = v137;
        v144[3] = v138;
        if (v142[8] > v143) {
          unint64_t v143 = v142[8];
        }
        v142[7] = 0;
        v142[8] = v143;
        uint64_t v145 = *(void **)(a3 + 80);
        unint64_t v146 = *(void *)(a3 + 88);
        if ((unint64_t)v145 < v146)
        {
          if (v145) {
            void *v145 = v140;
          }
          unint64_t v147 = v145 + 1;
          goto LABEL_187;
        }
        uint64_t v148 = *(void *)(a3 + 72);
        uint64_t v149 = ((uint64_t)v145 - v148) >> 3;
        unint64_t v150 = v149 + 1;
        if ((unint64_t)(v149 + 1) >> 61) {
          abort();
        }
        uint64_t v151 = v146 - v148;
        if (v151 >> 2 > v150) {
          unint64_t v150 = v151 >> 2;
        }
        if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8) {
          uint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v152 = v150;
        }
        if (v152)
        {
          uint64_t v153 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 16))(*(void *)(a3 + 96), 8 * v152, 8);
          uint64_t v154 = (void *)(v153 + 8 * v149);
          uint64_t v155 = v153 + 8 * v152;
          if (v153) {
            *uint64_t v154 = v140;
          }
        }
        else
        {
          uint64_t v155 = 0;
          uint64_t v154 = (void *)(8 * v149);
        }
        uint64_t v157 = *(void *)(a3 + 72);
        uint64_t v156 = *(void *)(a3 + 80);
        uint64_t v158 = v156 - v157;
        if (v156 == v157)
        {
          unint64_t v160 = v154;
          goto LABEL_185;
        }
        unint64_t v159 = v158 - 8;
        if ((unint64_t)(v158 - 8) < 0x38)
        {
          unint64_t v160 = v154;
        }
        else
        {
          unint64_t v160 = v154;
          if ((unint64_t)(v156 - (void)v154) >= 0x20)
          {
            uint64_t v161 = (v159 >> 3) + 1;
            uint64_t v162 = v154 - 2;
            int v163 = (long long *)(v156 - 16);
            uint64_t v164 = v161 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v165 = *v163;
              *(v162 - 1) = *(v163 - 1);
              *uint64_t v162 = v165;
              v162 -= 2;
              v163 -= 2;
              v164 -= 4;
            }
            while (v164);
            unint64_t v160 = &v154[-(v161 & 0x3FFFFFFFFFFFFFFCLL)];
            v156 -= 8 * (v161 & 0x3FFFFFFFFFFFFFFCLL);
            if (v161 == (v161 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_184:
              uint64_t v156 = *(void *)(a3 + 72);
LABEL_185:
              unint64_t v147 = v154 + 1;
              *(void *)(a3 + 72) = v160;
              *(void *)(a3 + 80) = v154 + 1;
              uint64_t v167 = *(void *)(a3 + 88);
              *(void *)(a3 + 88) = v155;
              if (v156) {
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 96) + 40))(*(void *)(a3 + 96), v156, v167 - v156);
              }
LABEL_187:
              *(void *)(a3 + 80) = v147;
              ++*(void *)(v8[44] + 120);
              if (*(void *)&v232[40])
              {
                long long v168 = *(_OWORD *)&v232[16];
                if (*(void *)&v232[24] != *(void *)&v232[16])
                {
                  long long v169 = *(void **)&v232[8];
                  int v170 = v232[32];
                  int v171 = v232[33];
                  if (*(void *)v232 && *(unsigned char *)(*(void *)&v232[8] + 17) != 2) {
                    (*(void (**)(void))(**(void **)v232 + 64))();
                  }
                  if (v170 && !v171)
                  {
                    unint64_t v172 = v169[7];
                    unint64_t v173 = v169[8];
                    if (v173 == v172) {
                      unint64_t v172 = v169[10] - v169[9];
                    }
                    if ((unint64_t)v168 < v172) {
                      unint64_t v172 = v168;
                    }
                    if (v173 <= *((void *)&v168 + 1)) {
                      unint64_t v173 = *((void *)&v168 + 1);
                    }
                    if (v173 == v172) {
                      unint64_t v173 = v172 + v169[10] - v169[9];
                    }
                    v169[7] = v172;
                    v169[8] = v173;
                  }
                }
              }
              int8x8_t v8 = v181;
              uint64_t v57 = v188;
LABEL_129:
              v75 += 3;
              if (v75 == v187) {
                goto LABEL_121;
              }
              continue;
            }
          }
        }
        do
        {
          uint64_t v166 = *(void *)(v156 - 8);
          v156 -= 8;
          *--unint64_t v160 = v166;
        }
        while (v156 != v157);
        goto LABEL_184;
      }
      break;
    }
    uint64_t v83 = v77[14];
    uint64_t v84 = v57[7];
    *(void *)(*(void *)(v84 + 8 * v83) + 32) = *v77;
    *(void *)(*(void *)(v84 + 8 * v83) + 40) = **(void **)(v84 + 8 * v83);
    uint64_t v85 = *(uint64_t **)(v84 + 8 * v83);
    v85[7] = 0;
    *((_DWORD *)v85 + 12) = *(unsigned __int8 *)(v73 + 169) + a4;
    if ((v182 - 1) > 2u)
    {
      int v118 = 1 << *((unsigned char *)v75 + 1);
      double v119 = 1.0 / (double)v118;
      double v120 = v119 * (double)*((int *)v75 + 2);
      double v121 = v119 * (double)(v118 + ~*((_DWORD *)v75 + 1));
      memset(&v201[8], 0, 32);
      *(double *)double v201 = v119;
      *(double *)&v201[40] = v119;
      long long v202 = 0u;
      long long v203 = 0u;
      long long v204 = *(unint64_t *)&v119;
      *(double *)&long long v205 = v120;
      *((double *)&v205 + 1) = v121;
      long long v206 = xmmword_1A28FCCC0;
      uint64_t v122 = *v85;
      uint64_t v123 = *(void *)(*v85 + 64);
      *(void *)(v123 + 24) = 0;
      uint64_t v124 = v77[1];
      *(void *)(v123 + 16) = v124;
      uint64_t v125 = *(void *)(v122 + 160);
      uint64_t v126 = v77[2];
      if (v126) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v126 + 8), 1uLL, memory_order_relaxed);
      }
      int v106 = *(std::__shared_weak_count **)(v125 + 24);
      *(void *)(v125 + 16) = v124;
      *(void *)(v125 + 24) = v126;
      if (!v106) {
        goto LABEL_154;
      }
    }
    else
    {
      int v86 = 1 << *(unsigned char *)(v73 + 169);
      double v87 = 1.0 / (double)v86;
      uint64_t v88 = *(int *)(v73 + 176);
      int v89 = v86 + ~*(_DWORD *)(v73 + 172);
      *(double *)uint64_t v232 = v87 * (double)v88;
      *(double *)&v232[8] = v87 * (double)v89;
      *(double *)&v232[16] = v87 + (double)v88 * v87;
      *(double *)&v232[24] = v87 + (double)v89 * v87;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v190, (double *)v232, 0.0, 0.0);
      v233.f64[1] = 0.0;
      memset(&v232[8], 0, 72);
      v235.f64[1] = 1.0;
      float64x2_t v234 = v196;
      v235.f64[0] = v197;
      *(double *)uint64_t v232 = v198 - v196.f64[0];
      *(double *)&v232[40] = v199 - v196.f64[1];
      v233.f64[0] = v200 - v197;
      double v90 = v193;
      double v91 = v194;
      double v92 = v90 + v90;
      double v93 = (v90 + v90) * v90;
      double v94 = (v91 + v91) * v91;
      double v95 = v192;
      double v96 = v95 + v95;
      double v97 = (v95 + v95) * v193;
      double v98 = (v91 + v91) * v195;
      double v99 = v194 * (v95 + v95);
      double v100 = 1.0 - (v95 + v95) * v95;
      double v217 = 1.0 - (v93 + v94);
      double v218 = v98 + v97;
      double v221 = v97 - v98;
      double v222 = v100 - v94;
      double v225 = v195 * v92 + v99;
      double v226 = v92 * v194 - v195 * v96;
      double v219 = v99 - v195 * v92;
      double v223 = v195 * v96 + v92 * v194;
      double v227 = v100 - v93;
      uint64_t v220 = 0;
      uint64_t v224 = 0;
      uint64_t v228 = 0;
      long long v229 = v190;
      uint64_t v230 = v191;
      uint64_t v231 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v189, &v217, (double *)v232);
      *(_OWORD *)double v201 = v189[0];
      *(_OWORD *)&v201[16] = v189[1];
      *(_OWORD *)&v201[32] = v189[2];
      long long v202 = v189[3];
      long long v203 = v189[4];
      long long v204 = v189[5];
      long long v205 = v189[6];
      long long v206 = v189[7];
      uint64_t v101 = **(void **)(v84 + 8 * v83);
      md::GeometryContext::transformConstantData((double *)v232, (uint64_t *)v183, v184, v182, 0.0, 0.0);
      uint64_t v102 = *(void *)(v101 + 64);
      long long v103 = *(_OWORD *)v232;
      *(void *)(v102 + 16) = *(void *)v232;
      *(void *)(v102 + 24) = 0;
      uint64_t v104 = *(void *)(v101 + 160);
      if (*((void *)&v103 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v105 = *(std::__shared_weak_count **)(v104 + 24);
      *(_OWORD *)(v104 + 16) = v103;
      if (v105 && !atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
      int v106 = *(std::__shared_weak_count **)&v232[8];
      if (!*(void *)&v232[8]) {
        goto LABEL_154;
      }
    }
    if (!atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
LABEL_154:
    gm::operator*<double,4,4,4>((double *)v232, v207.f64, (double *)v201);
    float32x4_t v127 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v232[32]), *(float64x2_t *)&v232[48]);
    float32x4_t v128 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v232[64]), v233);
    float32x4_t v129 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v234), v235);
    float32x4_t v130 = *(uint64_t **)(v84 + 8 * v83);
    uint64_t v132 = *v130;
    uint64_t v131 = (uint64_t)(v130 + 1);
    uint64_t v133 = **(void ***)(v132 + 64);
    unint64_t v134 = v133[1];
    unint64_t v135 = (float32x4_t *)v133[9];
    *unint64_t v135 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v232), *(float64x2_t *)&v232[16]);
    v135[1] = v127;
    v135[2] = v128;
    v135[3] = v129;
    if (v133[8] > v134) {
      unint64_t v134 = v133[8];
    }
    v133[7] = 0;
    v133[8] = v134;
    ggl::CommandBuffer::pushRenderItem(a3, v131);
    ++*(void *)(v8[44] + 112);
    goto LABEL_129;
  }
LABEL_202:
  unint64_t v174 = v216;
  if (v216 && !atomic_fetch_add(&v216->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
    std::__shared_weak_count::__release_weak(v174);
  }
  uint64_t result = (uint64_t)v237;
  if (v237 == v236) {
    return (*(uint64_t (**)(void *))(v236[0] + 32))(v236);
  }
  if (v237) {
    return (*(uint64_t (**)(void))(*v237 + 40))();
  }
  return result;
}

void sub_1A24C33BC(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x2B0]);
  std::function<BOOL ()(HillshadeRenderable const*)>::~function((void *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1}>,BOOL ()(HillshadeRenderable const*)>::operator()()
{
  return 1;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1}>,BOOL ()(HillshadeRenderable const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF578888;
}

void *std::__function::__func<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1}>,BOOL ()(HillshadeRenderable const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF578888;
  return result;
}

void std::__function::__func<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1},std::allocator<md::CartographicTiledVectorRenderLayer<HillshadeRenderable>::layoutStencilTiles(md::LayoutContext const&,ggl::CommandBuffer *,int,BOOL,geo::optional<gm::Matrix<double,4,4>> const&)::{lambda(HillshadeRenderable const*)#1}>,BOOL ()(HillshadeRenderable const*)>::~__func()
{
}

uint64_t md::CartographicTiledVectorRenderLayer<md::FlyoverRenderable>::~CartographicTiledVectorRenderLayer(void *a1)
{
  *a1 = &unk_1EF54E200;
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  uint64_t v3 = (uint64_t **)*((void *)v2 + 7);
  uint64_t v4 = (uint64_t **)*((void *)v2 + 8);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = **v3;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v5[1] = (uint64_t)&off_1EF55A458;
      void v5[3] = 3131955885;
      MEMORY[0x1A6239270](v5, 0x10F0C40137B0629);
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  }
  int8x8_t v7 = (uint64_t **)*((void *)v2 + 10);
  int8x8_t v8 = (uint64_t **)*((void *)v2 + 11);
  if (v7 == v8) {
    goto LABEL_13;
  }
  do
  {
    uint8x8_t v9 = *v7;
    uint64_t v10 = **v7;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v9[1] = (uint64_t)&off_1EF55A458;
    v9[3] = 3131955885;
    MEMORY[0x1A6239270](v9, 0x10F0C40137B0629);
    ++v7;
  }
  while (v7 != v8);
  uint64_t v2 = (md::CartographicTiledRenderResources *)a1[44];
  if (v2)
  {
LABEL_13:
    md::CartographicTiledRenderResources::~CartographicTiledRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledRenderLayer<md::FlyoverRenderable>::~CartographicTiledRenderLayer((uint64_t)a1);
}

void std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56F258;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF56F258;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF56F258;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void *std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1EF56E760;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1EF56E760;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelManager::updateStyleManager(void)::$_0,std::allocator<md::LabelManager::updateStyleManager(void)::$_0>,void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1EF56E760;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56EE20;
}

void *std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF56EE20;
  return result;
}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_1>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetAnimation", "", v1, 2u);
  }
}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56EDD8;
}

void *std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF56EDD8;
  return result;
}

void std::__function::__func<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::startStylesheetAnimation(gss::DisplayStyle)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF56F018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0,std::allocator<md::LabelManager::prepareForStylesheetTransition(gss::DisplayStyle)::$_0>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_1,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56F138;
}

void *std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_1,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_1>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EF56F138;
  return result;
}

void std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_1,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_1>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_0,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_0>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetLabelAnimations", "", v1, 2u);
  }
}

void std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_0,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56F0F0;
}

void *std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_0,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_0>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EF56F0F0;
  return result;
}

void std::__function::__func<md::LabelManager::startStylesheetLabelAnimations(void)::$_0,std::allocator<md::LabelManager::startStylesheetLabelAnimations(void)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0,std::allocator<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56EE68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0,std::allocator<md::LabelManager::stylesheetWillTransition(gss::DisplayStyle,BOOL)::$_0>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57E2E0;
}

void *std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EF57E2E0;
  return result;
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsStylesheetDidChange", "", v1, 2u);
  }
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57E328;
}

void *std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EF57E328;
  return result;
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0,std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF56E910;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelManager::stylesheetDidChange(void)::$_0,std::allocator<md::LabelManager::stylesheetDidChange(void)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<md::LabelManager::stylesheetDidTransition(void)::$_0,std::allocator<md::LabelManager::stylesheetDidTransition(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF56ECB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelManager::stylesheetDidTransition(void)::$_0,std::allocator<md::LabelManager::stylesheetDidTransition(void)::$_0>,void ()(void)>::~__func()
{
}

void md::LabelManager::resolveLabelScaleFactor(md::LabelManager *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v1 = *((unsigned __int8 *)this + 3368);
  unint64_t v2 = 0x505040302uLL >> (8 * (v1 - 1));
  if ((v1 - 1) > 4) {
    LOBYTE(v2) = 1;
  }
  if (*((unsigned char *)this + 3370)) {
    unsigned __int8 v3 = v2;
  }
  else {
    unsigned __int8 v3 = *((unsigned char *)this + 3368);
  }
  *((unsigned char *)this + 3369) = v3;
  uint64_t v4 = *((void *)this + 42);
  std::mutex::lock((std::mutex *)v4);
  if (*(unsigned __int8 *)(v4 + 159) != v1)
  {
    *(unsigned char *)(v4 + 159) = v1;
    md::LabelStyleCache::updateNavRoadSignScale((md::LabelStyleCache *)v4);
  }
  if (*(unsigned __int8 *)(v4 + 158) != v3)
  {
    *(unsigned char *)(v4 + 158) = v3;
    uint64_t v12 = (void (**)(void **))&unk_1EF570FE0;
    unsigned __int8 v13 = v3;
    unint64_t v14 = (void **)&v12;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)(v4 + 264), (uint64_t)&v12);
    if (v14 == (void **)&v12)
    {
      v12[4]((void **)&v12);
    }
    else if (v14)
    {
      (*((void (**)(void))*v14 + 5))();
    }
    uint8x8_t v9 = (void (**)(void **))&unk_1EF570FE0;
    unsigned __int8 v10 = v3;
    uint64_t v11 = (void **)&v9;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)(v4 + 376), (uint64_t)&v9);
    if (v11 == (void **)&v9)
    {
      v9[4]((void **)&v9);
    }
    else if (v11)
    {
      (*((void (**)(void))*v11 + 5))();
    }
    uint64_t v5 = *(void *)(v4 + 432);
    int v6 = *(unsigned __int8 *)(v4 + 158);
    if (*(unsigned __int8 *)(v5 + 93) != v6)
    {
      *(unsigned char *)(v5 + 93) = v6;
      *(unsigned char *)(v5 + 136) = -1;
      *(unsigned char *)(v5 + 125) = 0;
      int8x8_t v7 = *(std::__shared_weak_count **)(v5 + 416);
      *(void *)(v5 + 408) = 0;
      *(void *)(v5 + 416) = 0;
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      int8x8_t v8 = *(std::__shared_weak_count **)(v5 + 432);
      *(void *)(v5 + 424) = 0;
      *(void *)(v5 + 432) = 0;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  std::mutex::unlock((std::mutex *)v4);
}

void sub_1A24C42AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v14)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  }
  else if (a13)
  {
    (*(void (**)(void))(*(void *)a13 + 40))();
  }
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned char,std::unique_ptr<md::MaterialRaster>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      int v6 = (md::MaterialRaster *)v2[3];
      v2[3] = 0;
      if (v6)
      {
        md::MaterialRaster::~MaterialRaster(v6);
        MEMORY[0x1A6239270]();
      }
      operator delete(v2);
      unint64_t v2 = v5;
    }
    while (v5);
  }
  unsigned __int8 v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void md::MaterialRaster::~MaterialRaster(md::MaterialRaster *this)
{
  unint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  unsigned __int8 v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    int v6 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v6) {
      goto LABEL_13;
    }
  }
  else
  {
    int v6 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v6) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  int8x8_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t altitude::TransitionTileJob::getElement@<X0>(altitude::TransitionTileJob *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(altitude::TransitionTileJob *))(*(void *)this + 40))(this);
  if (result)
  {
    uint64_t v5 = *((void *)this + 29);
    *a2 = *((void *)this + 28);
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

BOOL altitude::TransitionTileJob::succeeded(pthread_mutex_t **this)
{
  pthread_mutex_lock(this[19]);
  BOOL v2 = (this[20] & 2) == 0;
  pthread_mutex_unlock(this[19]);
  return v2;
}

void altitude::TransitionTileJob::jobStep(altitude::TransitionTileJob *this)
{
  *((double *)this + 36) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  if (*((_DWORD *)this + 60) <= *((_DWORD *)this + 64)) {
    uint64_t v2 = 192;
  }
  else {
    uint64_t v2 = 208;
  }
  uint64_t v3 = *(void *)(*(void *)(*(void *)(**(void **)(*(void *)((char *)this + v2) + 48) + 216) + 64) + 8);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorphBorder::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverMorph::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<altitude::RenderableGroup *,std::shared_ptr<altitude::RenderableGroup>::__shared_ptr_default_delete<altitude::RenderableGroup,altitude::RenderableGroup>,std::allocator<altitude::RenderableGroup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::RenderableGroup *,std::shared_ptr<altitude::RenderableGroup>::__shared_ptr_default_delete<altitude::RenderableGroup,altitude::RenderableGroup>,std::allocator<altitude::RenderableGroup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void altitude::TransitionTileJob::~TransitionTileJob(altitude::TransitionTileJob *this)
{
  altitude::TransitionTileJob::~TransitionTileJob(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF569DF8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  karo::Job::~Job(this);
}

uint64_t altitude::TransitionTileRequestManager::getElement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  (*(void (**)(double **__return_ptr, uint64_t, uint64_t, void))(*(void *)a1 + 96))(&v13, a1, a2, 0);
  int8x8_t v7 = v13;
  int v6 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(uint64_t (**)(double *))(*(void *)v7 + 40))(v7))
  {
    (*(void (**)(double *))(*(void *)v7 + 48))(v7);
    uint64_t v8 = *(void *)(a1 + 96);
    if (v8)
    {
      double v9 = v7[37];
      double v10 = (v9 - v7[36]) * 1000.0;
      gdc::Statistics::addSampleValue(v8, "TransitionTileLoadJobTotalTime", 0x3FD9A88F0000001EuLL, (v9 - v7[35]) * 1000.0);
      gdc::Statistics::addSampleValue(*(void *)(a1 + 96), "TransitionTileLoadJobMainTime", 0x1E8C1E970000001DuLL, v10);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v11 = v14;
    if (!v14) {
      return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
  }
  else
  {
    uint64_t v11 = v14;
    if (!v14) {
      return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  uint64_t v6 = *(void *)(a1 + 72);
  if (!v6) {
    goto LABEL_8;
  }
  uint64_t v7 = a1 + 72;
  do
  {
    BOOL v8 = altitude::TransitionTileRequestId::operator<((_DWORD *)(v6 + 32), a2);
    double v9 = (uint64_t *)(v6 + 8);
    if (!v8)
    {
      double v9 = (uint64_t *)v6;
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v9;
  }
  while (*v9);
  if (v7 == a1 + 72 || altitude::TransitionTileRequestId::operator<(a2, (_DWORD *)(v7 + 32)))
  {
LABEL_8:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v7 + 96);
    uint64_t v12 = *(std::__shared_weak_count **)(v7 + 104);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v13)
    {
      karo::Job::waitToFinish((karo::Job *)v13, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v13 + 152));
      uint64_t v10 = *(_DWORD *)(v13 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 152));
      if (!v12) {
        return v10;
      }
    }
    else
    {
      uint64_t v10 = 0;
      if (!v12) {
        return v10;
      }
    }
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v10;
}

BOOL altitude::TransitionTileRequestId::operator<(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2 = a1[4];
  unsigned int v3 = a2[4];
  if (v2 < v3) {
    return 1;
  }
  if (v2 > v3) {
    return 0;
  }
  unsigned int v5 = a1[5];
  unsigned int v6 = a2[5];
  if (v5 < v6) {
    return 1;
  }
  if (v5 > v6) {
    return 0;
  }
  unsigned int v7 = a1[6];
  unsigned int v8 = a2[6];
  if (v7 < v8) {
    return 1;
  }
  if (v7 <= v8)
  {
    unsigned int v9 = a1[7];
    unsigned int v10 = a2[7];
    BOOL v11 = v9 >= v10;
    BOOL v12 = v9 < v10;
    if (!v11) {
      return v12;
    }
  }
  unsigned int v13 = a2[6];
  unsigned int v14 = a1[6];
  if (v13 < v14) {
    return 0;
  }
  if (v13 <= v14 && a2[7] < a1[7]) {
    return 0;
  }
  unsigned int v15 = a1[8];
  unsigned int v16 = a2[8];
  if (v15 < v16) {
    return 1;
  }
  if (v15 > v16) {
    return 0;
  }
  unsigned int v17 = a1[9];
  unsigned int v18 = a2[9];
  if (v17 < v18) {
    return 1;
  }
  if (v17 > v18) {
    return 0;
  }
  unsigned int v19 = a1[10];
  unsigned int v20 = a2[10];
  if (v19 < v20) {
    return 1;
  }
  if (v19 > v20) {
    return 0;
  }
  return a1[11] < a2[11];
}

uint64_t altitude::TransitionTileRequestManager::request(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, a3, a4, a5, a6, 0);
}

void karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::getRequest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  unsigned int v9 = (void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 72);
  if (v8)
  {
    uint64_t v10 = a1 + 72;
    do
    {
      BOOL v11 = altitude::TransitionTileRequestId::operator<((_DWORD *)(v8 + 32), (_DWORD *)a2);
      BOOL v12 = (uint64_t *)(v8 + 8);
      if (!v11)
      {
        BOOL v12 = (uint64_t *)v8;
        uint64_t v10 = v8;
      }
      uint64_t v8 = *v12;
    }
    while (*v12);
    if ((void *)v10 != v9 && !altitude::TransitionTileRequestId::operator<((_DWORD *)a2, (_DWORD *)(v10 + 32)))
    {
      uint64_t v29 = *(void *)(v10 + 96);
      uint64_t v28 = *(void *)(v10 + 104);
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      *a4 = v29;
      a4[1] = v28;
      return;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(&v30, a1, a2, a3);
  uint64_t v14 = v30;
  unsigned int v13 = v31;
  *a4 = v30;
  a4[1] = (uint64_t)v13;
  uint64_t v15 = *(void *)(a1 + 72);
  unsigned int v16 = v9;
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v16 = (void *)v15;
        unsigned int v17 = (_DWORD *)(v15 + 32);
        if (!altitude::TransitionTileRequestId::operator<((_DWORD *)a2, (_DWORD *)(v15 + 32))) {
          break;
        }
        uint64_t v15 = *v16;
        unsigned int v9 = v16;
        if (!*v16) {
          goto LABEL_15;
        }
      }
      if (!altitude::TransitionTileRequestId::operator<(v17, (_DWORD *)a2)) {
        break;
      }
      uint64_t v15 = v16[1];
      if (!v15)
      {
        unsigned int v9 = v16 + 1;
        goto LABEL_15;
      }
    }
    unsigned int v19 = v16;
    if (!v13) {
      goto LABEL_21;
    }
  }
  else
  {
LABEL_15:
    unsigned int v18 = operator new(0x70uLL);
    unsigned int v19 = v18;
    long long v20 = *(_OWORD *)(a2 + 16);
    v18[2] = *(_OWORD *)a2;
    v18[3] = v20;
    v18[4] = *(_OWORD *)(a2 + 32);
    uint64_t v21 = *(void *)(a2 + 56);
    *((void *)v18 + 10) = *(void *)(a2 + 48);
    *((void *)v18 + 11) = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v18 + 12) = 0;
    *((void *)v18 + 13) = 0;
    *(void *)unsigned int v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = v16;
    *unsigned int v9 = v18;
    uint64_t v22 = **(void **)(a1 + 64);
    uint64_t v23 = (uint64_t *)v18;
    if (v22)
    {
      *(void *)(a1 + 64) = v22;
      uint64_t v23 = (uint64_t *)*v9;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v23);
    ++*(void *)(a1 + 80);
    if (!v13) {
      goto LABEL_21;
    }
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_21:
  uint64_t v24 = (std::__shared_weak_count *)*((void *)v19 + 13);
  *((void *)v19 + 12) = v14;
  *((void *)v19 + 13) = v13;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    unint64_t v25 = *(void *)(a1 + 48);
    if (!v25) {
      return;
    }
  }
  else
  {
    unint64_t v25 = *(void *)(a1 + 48);
    if (!v25) {
      return;
    }
  }
  uint64_t v26 = *a4;
  int v27 = (std::__shared_weak_count *)a4[1];
  uint64_t v30 = v26;
  uint64_t v31 = v27;
  if (v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    karo::JobManager::queueJob(v25, &v30);
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  else
  {
    karo::JobManager::queueJob(v25, &v30);
  }
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3) {
    a3 = *(_DWORD *)(a1 + 88) + 1;
  }
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, a2, a7);
  unsigned int v16 = v22;
  unsigned int v17 = atomic_load(v22 + 4);
  if (v17 != a4) {
    (*(void (**)(unsigned int *, uint64_t))(*(void *)v22 + 24))(v22, a4);
  }
  v16[45] = a3;
  v16[46] = a5;
  *((unsigned char *)v16 + 176) = a6;
  unsigned int v18 = v22;
  unsigned int v19 = v23;
  *a8 = off_1EF5677B0;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v18 = (unsigned int *)a8[1];
  }
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)v18 + 32, 1u);
  }
  long long v20 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4) {
    a4 = *(_DWORD *)(a1 + 88) + 1;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      uint64_t v10 = v8 + 64;
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, v8, v8 + 64);
      BOOL v11 = v22;
      int v12 = *(_DWORD *)(v8 + 68);
      unsigned int v13 = *(_DWORD *)(v8 + 72);
      char v14 = *(unsigned char *)(v8 + 76);
      unsigned int v15 = atomic_load(v22 + 4);
      if (v15 != v12) {
        (*(void (**)(unsigned int *))(*(void *)v22 + 24))(v22);
      }
      v11[45] = a4;
      v11[46] = v13;
      *((unsigned char *)v11 + 176) = v14;
      unsigned int v16 = *(void **)(a3 + 8);
      if ((unint64_t)v16 >= *(void *)(a3 + 16))
      {
        unsigned int v19 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v22, (uint64_t)v23);
      }
      else
      {
        *unsigned int v16 = off_1EF5677B0;
        unsigned int v17 = v22;
        v16[1] = v22;
        uint64_t v18 = (uint64_t)v23;
        v16[2] = v23;
        if (v18)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
          unsigned int v17 = (unsigned int *)v16[1];
        }
        if (v17) {
          atomic_fetch_add((atomic_uint *volatile)v17 + 32, 1u);
        }
        unsigned int v19 = v16 + 3;
      }
      *(void *)(a3 + 8) = v19;
      long long v20 = v23;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v8 = v10 + 16;
    }
    while (v10 + 16 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void altitude::TransitionTileRequestManager::createRequest()
{
}

uint64_t std::__shared_ptr_pointer<altitude::TransitionTileJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::TransitionTileJob>,std::allocator<altitude::TransitionTileJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::TransitionTileJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::TransitionTileJob>,std::allocator<altitude::TransitionTileJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(void *a1@<X0>, uint64_t *a2@<X8>)
{
  (*(void (**)(void *))(*a1 + 64))(a1);
  unint64_t v4 = a1[6];
  if (v4)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = (std::__shared_weak_count *)a2[1];
    v7[0] = v5;
    v7[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v4, v7);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v7);
    }
  }
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, _DWORD *a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4)
  {
    uint64_t v5 = a1 + 72;
    do
    {
      BOOL v6 = altitude::TransitionTileRequestId::operator<((_DWORD *)(v4 + 32), a2);
      unsigned int v7 = (uint64_t *)(v4 + 8);
      if (!v6)
      {
        unsigned int v7 = (uint64_t *)v4;
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v7;
    }
    while (*v7);
    if (v5 != a1 + 72 && !altitude::TransitionTileRequestId::operator<(a2, (_DWORD *)(v5 + 32)))
    {
      (*(void (**)(void))(**(void **)(v5 + 96) + 16))(*(void *)(v5 + 96));
      std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), (uint64_t *)v5);
    }
  }
  uint64_t v8 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v8);
}

void std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  unsigned int v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      unsigned int v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = a2;
    do
    {
      uint64_t v4 = (uint64_t *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      uint64_t v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  unsigned int v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, a2);
  uint64_t v8 = (std::__shared_weak_count *)a2[13];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v9 = (std::__shared_weak_count *)a2[11];
    if (!v9) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v9 = (std::__shared_weak_count *)a2[11];
    if (!v9) {
      goto LABEL_15;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_15:
  operator delete(a2);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  uint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    while (v4[12] != a2)
    {
      uint64_t v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (uint64_t *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
      if (v6 == (uint64_t *)(a1 + 72)) {
        goto LABEL_12;
      }
    }
    std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), v4);
  }
LABEL_12:
  uint64_t v8 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v8);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TransitionTileRequestId,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  uint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      BOOL v7 = (uint64_t *)v4[1];
      uint64_t v8 = v4;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          BOOL v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v8[2];
          BOOL v10 = *v9 == (void)v8;
          uint64_t v8 = v9;
        }
        while (!v10);
      }
      uint64_t v11 = v4[12];
      if (atomic_load((unsigned int *)(v11 + 128))) {
        *(_DWORD *)(v11 + 180) = a2;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(v11 + 152));
      int v13 = *(_DWORD *)(v11 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 152));
      if ((v13 & 1) != 0 && *(unsigned char *)(v11 + 176) && *(_DWORD *)(v11 + 180) != a2
        || (a2 - *(_DWORD *)(v11 + 180)) > *(_DWORD *)(v11 + 184))
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((uint64_t **)(a1 + 64), v4);
      }
      uint64_t v4 = v9;
    }
    while (v9 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v5);
}

void altitude::TransitionTileRequestManager::~TransitionTileRequestManager(altitude::TransitionTileRequestManager *this)
{
  *(void *)this = &unk_1EF567A18;
  while (*((void *)this + 10))
    (*(void (**)(altitude::TransitionTileRequestManager *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF567A18;
  while (*((void *)this + 10))
    (*(void (**)(altitude::TransitionTileRequestManager *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

void std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TransitionTileRequestId,std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TransitionTileRequestId>,true>,std::allocator<std::__value_type<altitude::TransitionTileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(a1[1]);
    unsigned int v2 = (std::__shared_weak_count *)a1[13];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    unsigned int v3 = (std::__shared_weak_count *)a1[11];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(a1);
  }
}

void md::MapTileData::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  gdc::LayerData::createDebugNode((unsigned __int8 *)a1, a2);
  if (!*(void *)(a1 + 680)) {
    return;
  }
  strcpy(v90, "Debug Model Tile");
  *(_WORD *)double v91 = 16;
  memset(v92, 0, sizeof(v92));
  char v93 = 0;
  uint64_t v4 = *(void *)(a1 + 120);
  *((unsigned char *)&v60.__r_.__value_.__s + 23) = 3;
  LODWORD(v60.__r_.__value_.__l.__data_) = 7955787;
  uint64_t v88 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  int v89 = 1;
  uint64_t v85 = v4;
  gdc::DebugTreeNode::addProperty((uint64_t)v90, (uint64_t)&v60, (uint64_t)v84);
  int v5 = *(_DWORD *)(a1 + 176);
  v83[23] = 8;
  strcpy(v83, "Tile Key");
  uint64_t v47 = (void *)a2;
  std::to_string(&v96, v5);
  BOOL v6 = std::string::insert(&v96, 0, "x: ", 3uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v97.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v97, ", y: ", 5uLL);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v95, *(_DWORD *)(a1 + 172));
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v10 = &v95;
  }
  else {
    BOOL v10 = (std::string *)v95.__r_.__value_.__r.__words[0];
  }
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v95.__r_.__value_.__l.__size_;
  }
  int v12 = std::string::append(&v98, (const std::string::value_type *)v10, size);
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  char v14 = std::string::append(&__dst, ", z: ", 5uLL);
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v94, *(unsigned __int8 *)(a1 + 169));
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v16 = &v94;
  }
  else {
    unsigned int v16 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v94.__r_.__value_.__l.__size_;
  }
  uint64_t v18 = std::string::append(&v60, (const std::string::value_type *)v16, v17);
  unsigned int v19 = (void *)v18->__r_.__value_.__r.__words[0];
  size_t v20 = v18->__r_.__value_.__l.__size_;
  v77[0] = v18->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v77 + 3) = *(_DWORD *)((char *)&v18->__r_.__value_.__r.__words[2] + 3);
  int v21 = SHIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v94.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v60.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v95.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_28:
    operator delete(v97.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
LABEL_20:
  if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_21;
  }
LABEL_29:
  operator delete(v96.__r_.__value_.__l.__data_);
LABEL_21:
  size_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = 0;
  int v82 = 4;
  if (v21 < 0)
  {
    std::string::__assign_no_alias<true>(&v79, v19, v20);
  }
  else
  {
    uint64_t v79 = v19;
    size_t v80 = v20;
    LODWORD(v81) = v77[0];
    *(_DWORD *)((char *)&v81 + 3) = *(_DWORD *)((char *)v77 + 3);
    HIBYTE(v81) = v21;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)v90, (uint64_t)v83, (uint64_t)v78);
  if (SHIBYTE(v81) < 0)
  {
    operator delete(v79);
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_33;
    }
LABEL_85:
    operator delete(v19);
    goto LABEL_33;
  }
  if (v21 < 0) {
    goto LABEL_85;
  }
LABEL_33:
  uint64_t v22 = *(void *)(*(void *)(a1 + 680) + 48);
  *((unsigned char *)&v60.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v60, "Style");
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  int v76 = 1;
  uint64_t v73 = 0;
  uint64_t v72 = v22;
  gdc::DebugTreeNode::addProperty((uint64_t)v90, (uint64_t)&v60, (uint64_t)v71);
  uint64_t v23 = *(void *)(*(void *)(a1 + 680) + 40);
  *((unsigned char *)&v60.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v60, "Byte Count");
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  int v70 = 1;
  uint64_t v67 = 0;
  uint64_t v66 = v23;
  gdc::DebugTreeNode::addProperty((uint64_t)v90, (uint64_t)&v60, (uint64_t)v65);
  uint64_t v24 = *(void **)(*(void *)(a1 + 680) + 16);
  if (v24)
  {
    while (1)
    {
      unint64_t v25 = (const char *)v24[2];
      uint64_t v26 = v24[3];
      uint64_t v27 = v24[4];
      size_t v28 = strlen(v25);
      if (v28 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      std::string::size_type v29 = v28;
      if (v28 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v28;
      p_dst = &__dst;
      if (v28) {
        goto LABEL_43;
      }
LABEL_44:
      p_dst[v29] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        int v33 = (void *)__dst.__r_.__value_.__r.__words[0];
        std::string::__init_copy_ctor_external(&v60, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        LOBYTE(v61) = 0;
        long long v62 = 0u;
        memset(v63, 0, sizeof(v63));
        char v64 = 0;
        operator delete(v33);
      }
      else
      {
        std::string v60 = __dst;
        LOBYTE(v61) = 0;
        long long v62 = 0u;
        memset(v63, 0, sizeof(v63));
        char v64 = 0;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&__dst, "Byte Count");
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v56 = 0;
      int v59 = 1;
      uint64_t v55 = v26;
      gdc::DebugTreeNode::addProperty((uint64_t)&v60, (uint64_t)&__dst, (uint64_t)v54);
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&__dst, "Decode Time");
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v50 = 0;
      int v53 = 2;
      uint64_t v49 = v27;
      gdc::DebugTreeNode::addProperty((uint64_t)&v60, (uint64_t)&__dst, (uint64_t)v48);
      gdc::DebugTreeNode::addChildNode(v90, (long long *)&v60);
      uint64_t v34 = *(void ***)&v63[9];
      if (*(void *)&v63[9])
      {
        uint64_t v35 = *(void *)&v63[17];
        int v36 = *(void **)&v63[9];
        if (*(void *)&v63[17] != *(void *)&v63[9])
        {
          do
          {
            uint64_t v37 = *(void *)(v35 - 24);
            if (v37)
            {
              uint64_t v38 = *(void *)(v35 - 16);
              unint64_t v39 = *(void **)(v35 - 24);
              if (v38 != v37)
              {
                do
                {
                  if (*(char *)(v38 - 1) < 0) {
                    operator delete(*(void **)(v38 - 24));
                  }
                  v38 -= 24;
                }
                while (v38 != v37);
                unint64_t v39 = *(void **)(v35 - 24);
              }
              *(void *)(v35 - 16) = v37;
              operator delete(v39);
            }
            uint64_t v40 = *(void *)(v35 - 48);
            if (v40)
            {
              uint64_t v41 = *(void *)(v35 - 40);
              uint64_t v42 = *(void **)(v35 - 48);
              if (v41 != v40)
              {
                do
                {
                  if (*(char *)(v41 - 9) < 0) {
                    operator delete(*(void **)(v41 - 32));
                  }
                  v41 -= 64;
                }
                while (v41 != v40);
                uint64_t v42 = *(void **)(v35 - 48);
              }
              *(void *)(v35 - 40) = v40;
              operator delete(v42);
            }
            uint64_t v43 = (void **)(v35 - 80);
            if (*(char *)(v35 - 57) < 0) {
              operator delete(*v43);
            }
            v35 -= 80;
          }
          while (v43 != v34);
          int v36 = *(void **)&v63[9];
        }
        *(void *)&v63[17] = v34;
        operator delete(v36);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)&v62 + 1));
      if ((char)v62 < 0)
      {
        operator delete(v61);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
LABEL_75:
        }
          operator delete(v60.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_75;
      }
      uint64_t v24 = (void *)*v24;
      if (!v24) {
        goto LABEL_76;
      }
    }
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    p_dst = operator new(v31 + 1);
    __dst.__r_.__value_.__l.__size_ = v29;
    __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_43:
    memmove(p_dst, v25, v29);
    goto LABEL_44;
  }
LABEL_76:
  gdc::DebugTreeNode::addChildNode(v47, (long long *)v90);
  uint64_t v44 = *(void *)((char *)&v92[1] + 9);
  if (*(void *)((char *)&v92[1] + 9))
  {
    uint64_t v45 = *(void *)((char *)&v92[2] + 1);
    uint64_t v46 = *(void **)((char *)&v92[1] + 9);
    if (*(void *)((char *)&v92[2] + 1) != *(void *)((char *)&v92[1] + 9))
    {
      do
      {
        v45 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v45);
      }
      while (v45 != v44);
      uint64_t v46 = *(void **)((char *)&v92[1] + 9);
    }
    *(void *)((char *)&v92[2] + 1) = v44;
    operator delete(v46);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)((char *)v92 + 1));
  if ((SLOBYTE(v92[0]) & 0x80000000) == 0)
  {
    if ((v91[0] & 0x80000000) == 0) {
      return;
    }
LABEL_87:
    operator delete(*(void **)v90);
    return;
  }
  operator delete(*(void **)&v91[1]);
  if ((v91[0] & 0x80000000) != 0) {
    goto LABEL_87;
  }
}

void sub_1A24CB8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, gdc::DebugTreeNode *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v32 - 121) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v32 - 233) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v32 - 121) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v32 - 144));
  if ((*(char *)(v32 - 233) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v32 - 153) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v32 - 256));
  if ((*(char *)(v32 - 153) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v32 - 185) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(v32 - 176));
  if ((*(char *)(v32 - 185) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v32 - 209) & 0x80000000) == 0)
    {
LABEL_14:
      gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)&STACK[0x218]);
      gdc::DebugTreeNode::~DebugTreeNode(a9);
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*(void **)(v32 - 232));
    goto LABEL_14;
  }
LABEL_12:
  operator delete(*(void **)(v32 - 208));
  if ((*(char *)(v32 - 209) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void md::MapTileData::~MapTileData(md::MapTileData *this)
{
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  void *v8;

  *(void *)this = &unk_1EF530BB8;
  *((void *)this + 79) = &unk_1EF530BF8;
  unsigned int v2 = *((void *)this + 85);
  if (v2)
  {
    unsigned int v3 = *(void **)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v4 = (void *)*v3;
        operator delete(v3);
        unsigned int v3 = v4;
      }
      while (v4);
    }
    int v5 = *(void **)v2;
    *(void *)unsigned int v2 = 0;
    if (v5) {
      operator delete(v5);
    }
    MEMORY[0x1A6239270](v2, 0x10A0C40FDD25D6FLL);
    *((void *)this + 85) = 0;
  }
  BOOL v6 = (void *)*((void *)this + 82);
  if (v6)
  {
    *((void *)this + 83) = v6;
    operator delete(v6);
  }
  long long v7 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)this = &unk_1EF558F70;
  if (*((unsigned char *)this + 112)) {
    *((unsigned char *)this + 112) = 0;
  }
  uint64_t v8 = (void *)*((void *)this + 4);
  if (v8 != *((void **)this + 6)) {
    free(v8);
  }
}

uint64_t md::DaVinciAssetLayerDataSource::descriptionForKey@<X0>(const gdc::LayerDataRequestKey *a1@<X1>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v17);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"gdc::LayerDataRequestKey<Type:", 30);
  unint64_t v5 = *((unsigned __int16 *)a1 + 4);
  if (v5 > 0x51) {
    BOOL v6 = "<Invalid>";
  }
  else {
    BOOL v6 = off_1E5A95780[v5];
  }
  size_t v7 = strlen(v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)", Asset ID: ", 12);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  if ((v24 & 0x10) != 0)
  {
    unint64_t v10 = v23;
    if (v23 < v20)
    {
      unint64_t v23 = v20;
      unint64_t v10 = v20;
    }
    uint64_t v11 = (const void **)&v19;
  }
  else
  {
    if ((v24 & 8) == 0)
    {
      size_t v9 = 0;
      a2[23] = 0;
      goto LABEL_19;
    }
    uint64_t v11 = (const void **)v18;
    unint64_t v10 = v18[2];
  }
  int v12 = *v11;
  size_t v9 = v10 - (void)*v11;
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    std::string::size_type v15 = operator new(v13 + 1);
    *((void *)a2 + 1) = v9;
    *((void *)a2 + 2) = v14 | 0x8000000000000000;
    *(void *)a2 = v15;
    a2 = v15;
    goto LABEL_18;
  }
  a2[23] = v9;
  if (v9) {
LABEL_18:
  }
    memmove(a2, v12, v9);
LABEL_19:
  a2[v9] = 0;
  v17[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v25);
}

void sub_1A24CBDA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::DaVinciAssetLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (*a3 != v8)
  {
    while (*(_WORD *)v7 != 28)
    {
      v7 += 48;
      if (v7 == v8) {
        goto LABEL_10;
      }
    }
  }
  if (v7 == v8 || *(void *)(v7 + 32) != 1)
  {
LABEL_10:
    uint64_t v10 = 0;
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t v10 = *(void *)(v9 + 112);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 120);
  if (!v11)
  {
LABEL_11:
    uint64_t v25 = v10;
    uint64_t v26 = 0;
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v25 = v10;
  uint64_t v26 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_12:
  id v24 = *(id *)(a1 + 592);
  int v12 = (char *)operator new(0x220uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)int v12 = &unk_1EF582A20;
  id v13 = v24;
  *((void *)v12 + 3) = &unk_1EF558F70;
  *((_DWORD *)v12 + 8) = atomic_fetch_add(gdc::LayerData::nextId(void)::idGenerator, 1u) + 1;
  v12[40] = *(unsigned char *)a2;
  uint64_t v14 = (geo::codec::Allocator *)gdc::LayerDataKey::LayerDataKey((uint64_t)(v12 + 48), a2 + 8);
  v12[136] = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    *((_DWORD *)v12 + 35) = *(_DWORD *)(a2 + 100);
    v12[136] = 1;
  }
  uint64_t v15 = *(void *)(a2 + 104);
  *((void *)v12 + 3) = &unk_1EF553F28;
  *((void *)v12 + 18) = v15;
  *((void *)v12 + 19) = 0;
  v12[184] = 1;
  *((void *)v12 + 21) = 0;
  *((void *)v12 + 22) = 0;
  *((void *)v12 + 20) = 0;
  *((void *)v12 + 24) = **(void **)(a2 + 16);
  *((void *)v12 + 36) = 0;
  *((void *)v12 + 37) = 0;
  *(_OWORD *)(v12 + 248) = 0u;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_OWORD *)(v12 + 232) = 0u;
  *(_OWORD *)(v12 + 200) = 0u;
  *((void *)v12 + 35) = v12 + 288;
  *((_OWORD *)v12 + 21) = 0u;
  *((_OWORD *)v12 + 22) = 0u;
  *((_DWORD *)v12 + 92) = 1065353216;
  *((void *)v12 + 48) = 0;
  *((void *)v12 + 49) = 0;
  *((void *)v12 + 47) = v12 + 384;
  *((_DWORD *)v12 + 100) = 1065353216;
  *(_OWORD *)(v12 + 408) = 0u;
  *(_OWORD *)(v12 + 424) = 0u;
  *((_DWORD *)v12 + 110) = 1065353216;
  *((void *)v12 + 57) = 0;
  *((void *)v12 + 58) = 0;
  *((void *)v12 + 56) = 0;
  *((void *)v12 + 61) = 0;
  *((void *)v12 + 62) = 0;
  unsigned int v16 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v14);
  *((void *)v12 + 63) = v16;
  *((void *)v12 + 64) = 0;
  *((void *)v12 + 65) = geo::codec::Allocator::instance(v16);
  *((void *)v12 + 66) = 0;
  *((_DWORD *)v12 + 134) = 1065353216;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)[v13 gglDevice] + 24))(&v29);
  v30[0] = &unk_1EF579338;
  v30[1] = &v25;
  v30[2] = v12 + 24;
  uint64_t v31 = v30;
  uint64_t v27 = 0;
  size_t v28 = 0;
  (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v29 + 16))(v29, v30, &v27);
  std::string::size_type v17 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v31 == v30)
  {
    (*(void (**)(void *))(v30[0] + 32))(v30);
    uint64_t v18 = v29;
    if (!v29) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  if (v31) {
    (*(void (**)(void))(*v31 + 40))();
  }
  uint64_t v18 = v29;
  if (v29)
  {
LABEL_23:
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18);
    uint64_t v20 = v29;
    uint64_t v29 = 0;
    v30[0] = v20;
    (*(void (**)(uint64_t, void *))(*(void *)v19 + 48))(v19, v30);
    uint64_t v21 = v30[0];
    v30[0] = 0;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = v29;
    uint64_t v29 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
LABEL_27:

  *a4 = v12 + 24;
  a4[1] = v12;

  unint64_t v23 = v26;
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1A24CC298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, ...)
{
  va_start(va, a7);

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::AssetData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::AssetData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::AssetData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::DaVinciAssetLayerDataSource::~DaVinciAssetLayerDataSource(md::DaVinciAssetLayerDataSource *this)
{
  *(void *)this = &unk_1EF548320;
  *((void *)this + 73) = &unk_1EF559798;

  gdc::LayerDataSource::~LayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF548320;
  *((void *)this + 73) = &unk_1EF559798;

  gdc::LayerDataSource::~LayerDataSource(this);
}

void ggl::SinglePassRouteLine::BasePipelineState::~BasePipelineState(ggl::SinglePassRouteLine::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::SinglePassRouteLine::BasePipelineSetup::textureIsEnabled(ggl::SinglePassRouteLine::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::SinglePassRouteLine::BasePipelineSetup::constantDataIsEnabled(ggl::SinglePassRouteLine::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

void ggl::SinglePassRouteLine::BasePipelineSetup::~BasePipelineSetup(ggl::SinglePassRouteLine::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::SinglePassRouteLine::BasePipelineSetup::BasePipelineSetup(ggl::SinglePassRouteLine::BasePipelineSetup *this)
{
  {
    {
      {
        ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
      unk_1EB32B798 = 1;
    }
    ggl::SinglePassRouteLine::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
    unk_1E958D4B0 = &ggl::SinglePassRouteLine::pipelineDataBasePipelineDeviceStructs(void)::ref;
    qword_1E958D4B8 = 0;
    {
      ggl::SinglePassRouteLine::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      *(void *)algn_1E958D4E8 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1E958D4F0 = (uint64_t)ggl::SinglePassRouteLine::Style::reflection(void)::reflection;
      unk_1E958D4F8 = ggl::SinglePassRouteLine::ClipParams::reflection(void)::reflection;
      qword_1E958D500 = (uint64_t)ggl::SinglePassRouteLine::DrawAnimationDescription::reflection(void)::reflection;
    }
    qword_1E958D4C0 = (uint64_t)&ggl::SinglePassRouteLine::pipelineDataBasePipelineConstantStructs(void)::ref;
    *(_OWORD *)algn_1E958D4C8 = xmmword_1A28FC940;
  }
  uint64_t result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::SinglePassRouteLine::BasePipelineSetup::typedReflection(void)::ref);
  *(void *)this = &unk_1EF55F490;
  return result;
}

void geo::_retain_ptr<GEOVectorTileDecoder * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5598F8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<GEOVectorTileDecoder * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5598F8;

  return a1;
}

void sub_1A24CD084(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 104));
  _Unwind_Resume(a1);
}

void sub_1A24CD138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24CD1E4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 104));
  _Unwind_Resume(a1);
}

void sub_1A24CD4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,GEOTileKeyHashFunc,GEOTileKeyEqualsFunc,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,GEOTileKeyEqualsFunc,GEOTileKeyHashFunc,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>>>::find<_GEOTileKey>(void *a1)
{
  unint64_t v2 = GEOTileKeyHash();
  int8x8_t v3 = (int8x8_t)a1[1];
  if (!*(void *)&v3) {
    return 0;
  }
  unint64_t v4 = v2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v2;
    if (v2 >= *(void *)&v3) {
      unint64_t v6 = v2 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v3 - 1) & v2;
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = (void *)*v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      uint64_t v9 = *(void *)&v3 - 1;
      while (1)
      {
        uint64_t v11 = v8[1];
        if (v11 == v4)
        {
          if (GEOTileKeyEquals()) {
            return v8;
          }
        }
        else if ((v11 & v9) != v6)
        {
          return 0;
        }
        uint64_t v8 = (void *)*v8;
        if (!v8) {
          return v8;
        }
      }
    }
    do
    {
      unint64_t v10 = v8[1];
      if (v10 == v4)
      {
        if (GEOTileKeyEquals()) {
          return v8;
        }
      }
      else
      {
        if (v10 >= *(void *)&v3) {
          v10 %= *(void *)&v3;
        }
        if (v10 != v6) {
          return 0;
        }
      }
      uint64_t v8 = (void *)*v8;
    }
    while (v8);
  }
  return v8;
}

void *std::__hash_table<std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,GEOTileKeyHashFunc,GEOTileKeyEqualsFunc,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>,GEOTileKeyEqualsFunc,GEOTileKeyHashFunc,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::shared_ptr<altitude::GeoServicesLoadJob>>>>::__emplace_unique_key_args<_GEOTileKey,std::piecewise_construct_t const&,std::tuple<_GEOTileKey const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, _OWORD **a3)
{
  unint64_t v6 = GEOTileKeyHash();
  unint64_t v7 = v6;
  unint64_t v8 = a1[1];
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v8) {
        unint64_t v3 = v6 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v6;
    }
    unint64_t v10 = *(void ***)(*a1 + 8 * v3);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (GEOTileKeyEquals()) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (GEOTileKeyEquals()) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v3) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_22:
  uint64_t v14 = a1 + 2;
  uint64_t v11 = operator new(0x30uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = **a3;
  v11[4] = 0;
  v11[5] = 0;
  float v15 = (float)(unint64_t)(a1[3] + 1);
  float v16 = *((float *)a1 + 8);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v8 = a1[1];
    if (prime <= v8)
    {
      if (prime >= v8) {
        goto LABEL_59;
      }
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime >= v8)
      {
        unint64_t v8 = a1[1];
LABEL_59:
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8) {
            unint64_t v3 = v7 % v8;
          }
          else {
            unint64_t v3 = v7;
          }
        }
        else
        {
          unint64_t v3 = (v8 - 1) & v7;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        uint64_t v41 = (void *)*a1;
        *a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v8 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = operator new(8 * prime);
    uint64_t v22 = (void *)*a1;
    *a1 = (uint64_t)v21;
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v23++) = 0;
    while (prime != v23);
    id v24 = (void *)*v14;
    if (!*v14)
    {
LABEL_58:
      unint64_t v8 = prime;
      goto LABEL_59;
    }
    size_t v25 = v24[1];
    size_t v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v27 = v25 & v26;
      *(void *)(*a1 + 8 * v27) = v14;
      for (uint64_t i = (void *)*v24; *v24; uint64_t i = (void *)*v24)
      {
        size_t v29 = i[1] & v26;
        if (v29 == v27)
        {
          id v24 = i;
        }
        else if (*(void *)(*a1 + 8 * v29))
        {
          *id v24 = *i;
          uint64_t v30 = 8 * v29;
          void *i = **(void **)(*a1 + v30);
          **(void **)(*a1 + v30) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v29) = v24;
          id v24 = i;
          size_t v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime) {
      v25 %= prime;
    }
    *(void *)(*a1 + 8 * v25) = v14;
    uint64_t v34 = (void *)*v24;
    if (!*v24) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v25)
      {
        if (!*(void *)(*a1 + 8 * v36))
        {
          *(void *)(*a1 + 8 * v36) = v24;
          goto LABEL_63;
        }
        *id v24 = *v34;
        uint64_t v35 = 8 * v36;
        *uint64_t v34 = **(void **)(*a1 + v35);
        **(void **)(*a1 + v35) = v34;
        uint64_t v34 = v24;
      }
      size_t v36 = v25;
LABEL_63:
      id v24 = v34;
      uint64_t v34 = (void *)*v34;
      size_t v25 = v36;
      if (!v34) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v37 = *a1;
  uint64_t v38 = *(void **)(*a1 + 8 * v3);
  if (v38)
  {
    void *v11 = *v38;
LABEL_80:
    *uint64_t v38 = v11;
    goto LABEL_81;
  }
  void *v11 = *v14;
  void *v14 = v11;
  *(void *)(v37 + 8 * v3) = v14;
  if (*v11)
  {
    unint64_t v39 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v39 >= v8) {
        v39 %= v8;
      }
    }
    else
    {
      v39 &= v8 - 1;
    }
    uint64_t v38 = (void *)(*a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v11;
}

void sub_1A24CDA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::MaterialTextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::MaterialTextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A24CDF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void altitude::GeoServicesLoadJob::setData(altitude::GeoServicesLoadJob *this, NSObject *a2)
{
  unint64_t v8 = a2;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  int v4 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  BOOL v6 = (v4 & 2) == 0 && v8 != 0;
  *((unsigned char *)this + 244) = v6;
  objc_storeStrong((id *)this + 29, a2);
  *((_DWORD *)this + 60) = 1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((_DWORD *)this + 60) = [*((id *)this + 29) length];
  }
  unint64_t v7 = (altitude::GeoServicesLoadJob *)*((void *)this + 34);
  if (v7) {
    altitude::GeoServicesLoadJob::setData(v7, v8);
  }
}

void sub_1A24CE074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24CE104(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 104));
  _Unwind_Resume(a1);
}

void sub_1A24CE24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *altitude::GeoServicesLoadJob::getData(altitude::GeoServicesLoadJob *this)
{
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  uint64_t result = (void *)*((void *)this + 29);
  if (isKindOfClass)
  {
    id v4 = result;
    return (void *)[v4 bytes];
  }
  return result;
}

uint64_t altitude::GeoServicesLoadJob::getDataSize(altitude::GeoServicesLoadJob *this)
{
  return *((unsigned int *)this + 60);
}

uint64_t altitude::GeoServicesLoadJob::succeeded(altitude::GeoServicesLoadJob *this)
{
  return *((unsigned __int8 *)this + 244);
}

uint64_t altitude::GeoServicesLoadJob::jobStep(altitude::GeoServicesLoadJob *this)
{
  double v2 = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *((double *)this + 33) = v2;
  uint64_t v3 = *((void *)this + 31);
  if (v3)
  {
    gdc::Statistics::addSampleValue(v3, "GeoServicesLoadJobTotalTime (ms)", 0xF3A2BAA200000020, (v2 - *((double *)this + 32)) * 1000.0);
    LODWORD(v4) = *((_DWORD *)this + 60);
    gdc::Statistics::addSampleValue(*((void *)this + 31), "GeoServicesLoadJobDataSize (bytes)", 0xC4CC103000000022, (double)v4);
  }
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  uint64_t result = *((void *)this + 34);
  if (result)
  {
    BOOL v6 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v6();
  }
  return result;
}

void altitude::GeoServicesLoadJob::setPriority(altitude::GeoServicesLoadJob *this, uint64_t a2)
{
  unsigned int v2 = atomic_load((unsigned int *)this + 4);
  if (v2 != a2)
  {
    if (a2 <= 1) {
      a2 = 1;
    }
    else {
      a2 = a2;
    }
    karo::Job::setPriority((uint64_t)this, a2);
    unint64_t v4 = (void *)**((void **)this + 36);
    if (v4)
    {
      [v4 getJobForKey:(char *)this + 216];
      if (v6) {
        [**((id **)this + 36) updateJobPriority:&v6];
      }
      uint8x8_t v5 = v7;
      if (v7)
      {
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
    }
  }
}

void sub_1A24CE4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void altitude::GeoServicesLoadJob::cancel(altitude::GeoServicesLoadJob *this)
{
  unsigned int v2 = (void *)**((void **)this + 36);
  if (v2)
  {
    [v2 getJobForKey:(char *)this + 216];
    if (v6) {
      [**((id **)this + 36) cancelJob:&v6];
    }
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
  }
  karo::Job::cancel(this);
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  int v3 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v3 & 1) == 0) {
    karo::Job::step(this);
  }
  uint64_t v4 = *((void *)this + 34);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  uint8x8_t v5 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1A24CE5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void altitude::GeoServicesLoadJob::~GeoServicesLoadJob(altitude::GeoServicesLoadJob *this)
{
  altitude::GeoServicesLoadJob::~GeoServicesLoadJob(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF569FA0;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = (std::__shared_weak_count *)*((void *)this + 35);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    int v3 = (std::__shared_weak_count *)*((void *)this + 35);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:

  *(void *)this = &unk_1EF567700;
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  karo::Job::~Job(this);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::waitOnRequest(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  uint64_t v6 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((_DWORD *)(a1 + 72) == v6)
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    uint64_t v8 = *((void *)v6 + 8);
    unint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 9);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v8)
    {
      karo::Job::waitToFinish((karo::Job *)v8, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
      uint64_t v9 = *(_DWORD *)(v8 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
      if (!v7) {
        return v9;
      }
    }
    else
    {
      uint64_t v9 = 0;
      if (!v7) {
        return v9;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v9;
}

void sub_1A24CE83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t altitude::GeoServicesLoader::invalidateTile(uint64_t a1, unsigned int *a2)
{
  v5[2] = *MEMORY[0x1E4F143B8];
  v5[0] = altitude::TileKey::getGEOTileKey(a2, *(void *)(a1 + 32));
  v5[1] = v3;
  return [**(id **)(a1 + 96) reportCorruptTile:v5];
}

double altitude::GeoServicesLoader::createAndQueueTileRequest@<D0>(void *a1@<X0>, int a2@<W2>, _OWORD *a3@<X8>)
{
  int v9 = a2;
  (*(void (**)(double *__return_ptr))(*a1 + 64))(v8);
  unint64_t v5 = a1[6];
  if (v5)
  {
    uint64_t v6 = *(std::__shared_weak_count **)&v8[1];
    long long v10 = *(_OWORD *)v8;
    if (*(void *)&v8[1])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v8[1] + 8), 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v5, &v10);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v5, &v10);
    }
  }
  double result = v8[0];
  *a3 = *(_OWORD *)v8;
  return result;
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::createAndQueueRequest(void *a1@<X0>, uint64_t *a2@<X8>)
{
  (*(void (**)(void *))(*a1 + 64))(a1);
  unint64_t v4 = a1[6];
  if (v4)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v7[0] = v5;
    v7[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v4, v7);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v7);
    }
  }
}

void altitude::GeoServicesLoader::requestTile(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, void *a7@<X8>)
{
  int v16 = a4;
  karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::requestT(a1, a2, a3, a4, a5, a6, (uint64_t)&v16, &v13);
  uint64_t v8 = v14;
  int v9 = v15;
  *a7 = off_1EF5677B0;
  a7[1] = v8;
  a7[2] = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = a7[1];
  }
  if (v8)
  {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 128), 1u);
    uint64_t v8 = a7[1];
  }
  *a7 = off_1EF5676C0;
  a7[3] = 0;
  a7[4] = 0;
  uint64_t v10 = a7[2];
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = (std::__shared_weak_count *)a7[4];
    a7[3] = v8;
    a7[4] = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    a7[3] = v8;
    a7[4] = 0;
  }
  uint64_t v13 = off_1EF5677B0;
  if (v14) {
    atomic_fetch_add((atomic_uint *volatile)(v14 + 128), 0xFFFFFFFF);
  }
  unint64_t v12 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3) {
    a3 = *(_DWORD *)(a1 + 88) + 1;
  }
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, a2, a7);
  int v16 = v22;
  unsigned int v17 = atomic_load(v22 + 4);
  if (v17 != a4) {
    (*(void (**)(unsigned int *, uint64_t))(*(void *)v22 + 24))(v22, a4);
  }
  v16[45] = a3;
  v16[46] = a5;
  *((unsigned char *)v16 + 176) = a6;
  unint64_t v18 = v22;
  unint64_t v19 = v23;
  *a8 = off_1EF5677B0;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v18 = (unsigned int *)a8[1];
  }
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)v18 + 32, 1u);
  }
  uint64_t v20 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_1A24CED70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

double altitude::GeoServicesLoader::getRequest@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::getRequest(a1, a2, a3, (uint64_t **)&v6);
  double result = *(double *)&v6;
  *a4 = v6;
  return result;
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::getRequest(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  uint64_t v8 = (void **)(a1 + 8);
  uint64_t v9 = (uint64_t **)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>((uint64_t)(a1 + 8), (unsigned int *)a2);
  uint64_t v10 = v9;
  if (a1 + 9 == v9)
  {
    (*(void (**)(uint64_t **__return_ptr, void *, uint64_t, uint64_t))(*a1 + 64))(&v26, a1, a2, a3);
    uint64_t v14 = v26;
    uint64_t v13 = v27;
    *a4 = v26;
    a4[1] = (uint64_t *)v13;
    float v15 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::__find_equal<altitude::TileKey>((uint64_t)v8, &v26, (unsigned int *)a2);
    uint64_t v16 = *v15;
    if (!*v15)
    {
      unsigned int v17 = v15;
      uint64_t v16 = (uint64_t)operator new(0x50uLL);
      long long v18 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v16 + 32) = *(_OWORD *)a2;
      *(_OWORD *)(v16 + 48) = v18;
      *(void *)(v16 + 64) = 0;
      *(void *)(v16 + 72) = 0;
      unint64_t v19 = v26;
      *(void *)uint64_t v16 = 0;
      *(void *)(v16 + 8) = 0;
      *(void *)(v16 + 16) = v19;
      *unsigned int v17 = v16;
      uint64_t v20 = (void *)**v8;
      uint64_t v21 = (uint64_t *)v16;
      if (v20)
      {
        *uint64_t v8 = v20;
        uint64_t v21 = (uint64_t *)*v17;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v10, v21);
      ++a1[10];
    }
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = *(std::__shared_weak_count **)(v16 + 72);
    *(void *)(v16 + 64) = v14;
    *(void *)(v16 + 72) = v13;
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    unint64_t v23 = a1[6];
    if (v23)
    {
      id v24 = *a4;
      size_t v25 = (std::__shared_weak_count *)a4[1];
      size_t v26 = v24;
      size_t v27 = v25;
      if (v25)
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        karo::JobManager::queueJob(v23, &v26);
        if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      else
      {
        karo::JobManager::queueJob(v23, &v26);
      }
    }
  }
  else
  {
    unint64_t v12 = v9[8];
    uint64_t v11 = v9[9];
    if (v11) {
      atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
    }
    *a4 = v12;
    a4[1] = v11;
  }
}

void sub_1A24CEFD4(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4) {
    a4 = *(_DWORD *)(a1 + 88) + 1;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      uint64_t v10 = v8 + 32;
      (*(void (**)(unsigned int **__return_ptr, uint64_t))(*(void *)a1 + 96))(&v22, a1);
      uint64_t v11 = v22;
      int v12 = *(_DWORD *)(v10 + 4);
      unsigned int v13 = *(_DWORD *)(v10 + 8);
      char v14 = *(unsigned char *)(v10 + 12);
      unsigned int v15 = atomic_load(v22 + 4);
      if (v15 != v12) {
        (*(void (**)(unsigned int *))(*(void *)v22 + 24))(v22);
      }
      v11[45] = a4;
      v11[46] = v13;
      *((unsigned char *)v11 + 176) = v14;
      uint64_t v16 = *(void **)(a3 + 8);
      if ((unint64_t)v16 >= *(void *)(a3 + 16))
      {
        unint64_t v19 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v22, (uint64_t)v23);
      }
      else
      {
        *uint64_t v16 = off_1EF5677B0;
        unsigned int v17 = v22;
        v16[1] = v22;
        uint64_t v18 = (uint64_t)v23;
        v16[2] = v23;
        if (v18)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
          unsigned int v17 = (unsigned int *)v16[1];
        }
        if (v17) {
          atomic_fetch_add((atomic_uint *volatile)v17 + 32, 1u);
        }
        unint64_t v19 = v16 + 3;
        *(void *)(a3 + 8) = v16 + 3;
      }
      *(void *)(a3 + 8) = v19;
      uint64_t v20 = v23;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v8 = v10 + 16;
    }
    while (v10 + 16 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void sub_1A24CF1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 40));
  _Unwind_Resume(a1);
}

void altitude::GeoServicesLoader::createRequest()
{
}

void sub_1A24CF490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A24CF4A8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A24CF4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v25);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v24);

  karo::AsyncFileLoader::LoadJob::~LoadJob(v23);
  MEMORY[0x1A6239270](v23, 0x10B3C40FD76E06ALL);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<altitude::GeoServicesLoadJob *,std::shared_ptr<altitude::GeoServicesLoadJob>::__shared_ptr_default_delete<altitude::GeoServicesLoadJob,altitude::GeoServicesLoadJob>,std::allocator<altitude::GeoServicesLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::GeoServicesLoadJob *,std::shared_ptr<altitude::GeoServicesLoadJob>::__shared_ptr_default_delete<altitude::GeoServicesLoadJob,altitude::GeoServicesLoadJob>,std::allocator<altitude::GeoServicesLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::clearRequest(uint64_t a1, unsigned int *a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = (uint64_t **)(a1 + 64);
  uint64_t v5 = (uint64_t *)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v5)
  {
    long long v6 = v5;
    (*(void (**)(uint64_t))(*(void *)v5[8] + 16))(v5[8]);
    unint64_t v7 = (uint64_t *)v6[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        unint64_t v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      uint64_t v9 = v6;
      do
      {
        uint64_t v8 = (uint64_t *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        uint64_t v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v6) {
      *unint64_t v4 = v8;
    }
    uint64_t v11 = *(uint64_t **)(a1 + 72);
    --*(void *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v6);
    int v12 = (std::__shared_weak_count *)v6[9];
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    operator delete(v6);
  }
  unsigned int v13 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v13);
}

void sub_1A24CF6F0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    uint64_t v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      long long v6 = (uint64_t *)v5[1];
      if (v5[8] == a2) {
        break;
      }
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          long long v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (uint64_t *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72)) {
        goto LABEL_23;
      }
    }
    if (v6)
    {
      do
      {
        uint64_t v9 = v6;
        long long v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      BOOL v10 = v5;
      do
      {
        uint64_t v9 = (uint64_t *)v10[2];
        BOOL v8 = *v9 == (void)v10;
        BOOL v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5) {
      *(void *)(a1 + 64) = v9;
    }
    uint64_t v11 = *(uint64_t **)(a1 + 72);
    --*(void *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    int v12 = (std::__shared_weak_count *)v5[9];
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    operator delete(v5);
  }
LABEL_23:
  unsigned int v13 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v13);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::pruneRequests(uint64_t a1, int a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      uint64_t v5 = (uint64_t *)v4[1];
      long long v6 = v4;
      if (v5)
      {
        do
        {
          unint64_t v7 = v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unint64_t v7 = (uint64_t *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          long long v6 = v7;
        }
        while (!v8);
      }
      uint64_t v9 = v4[8];
      if (atomic_load((unsigned int *)(v9 + 128))) {
        *(_DWORD *)(v9 + 180) = a2;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 152));
      int v11 = *(_DWORD *)(v9 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 152));
      if ((v11 & 1) != 0 && *(unsigned char *)(v9 + 176) && *(_DWORD *)(v9 + 180) != a2
        || (a2 - *(_DWORD *)(v9 + 180)) > *(_DWORD *)(v9 + 184))
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        int v12 = (uint64_t *)v4[1];
        unsigned int v13 = v4;
        if (v12)
        {
          do
          {
            char v14 = v12;
            int v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            char v14 = (uint64_t *)v13[2];
            BOOL v8 = *v14 == (void)v13;
            unsigned int v13 = v14;
          }
          while (!v8);
        }
        if (*(uint64_t **)(a1 + 64) == v4) {
          *(void *)(a1 + 64) = v14;
        }
        unsigned int v15 = *(uint64_t **)(a1 + 72);
        --*(void *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v15, v4);
        uint64_t v16 = (std::__shared_weak_count *)v4[9];
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        operator delete(v4);
      }
      unint64_t v4 = v7;
    }
    while (v7 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  unsigned int v17 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v17);
}

void sub_1A24CFA14(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
  _Unwind_Resume(a1);
}

void altitude::GeoServicesLoader::~GeoServicesLoader(altitude::GeoServicesLoader *this)
{
  altitude::GeoServicesLoader::~GeoServicesLoader(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF569AA0;
  while (*((void *)this + 10))
    (*(void (**)(altitude::GeoServicesLoader *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  [**((id **)this + 12) cancelRequests];
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF567D60;
  while (*((void *)this + 10))
    (*(void (**)(altitude::GeoServicesLoader *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

void sub_1A24CFBA4(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v1 + 96);
  altitude::TileKeyLoader::~TileKeyLoader(v1);
  _Unwind_Resume(a1);
}

void sub_1A24CFBC4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void altitude::TileKeyLoader::~TileKeyLoader(altitude::TileKeyLoader *this)
{
  *(void *)this = &unk_1EF567D60;
  while (*((void *)this + 10))
    (*(void (**)(altitude::TileKeyLoader *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

void sub_1A24CFC74(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<altitude::TileFetcherContainer *,std::shared_ptr<altitude::TileFetcherContainer>::__shared_ptr_default_delete<altitude::TileFetcherContainer,altitude::TileFetcherContainer>,std::allocator<altitude::TileFetcherContainer>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(id **)(result + 24);
  if (v1)
  {

    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::TileFetcherContainer *,std::shared_ptr<altitude::TileFetcherContainer>::__shared_ptr_default_delete<altitude::TileFetcherContainer,altitude::TileFetcherContainer>,std::allocator<altitude::TileFetcherContainer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::FlyoverTraffic::DefaultMesh::~DefaultMesh(ggl::FlyoverTraffic::DefaultMesh *this)
{
  ggl::Mesh::~Mesh((ggl::FlyoverTraffic::DefaultMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::FlyoverTraffic::DefaultMesh *)((char *)this - 16));
}

void ggl::FlyoverTraffic::DefaultMesh::~DefaultMesh(ggl::FlyoverTraffic::DefaultMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::FlyoverTraffic::Default>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::FlyoverTraffic::Default>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::FlyoverTraffic::DefaultPipelineState::~DefaultPipelineState(ggl::FlyoverTraffic::DefaultPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::FlyoverTraffic::DefaultPipelineState::DefaultPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    uint64_t v84 = a4;
    uint64_t v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::FlyoverTraffic::Default>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverTraffic::defaultReflection;
            }
            ggl::MeshTyped<ggl::FlyoverTraffic::Default>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverTraffic::Default>::attributesReflection(void)::r;
            unk_1E957D5E8 = 1;
          }
          ggl::FlyoverTraffic::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverTraffic::Default>::typedReflection(void)::r;
          unk_1E9591A90 = &ggl::FlyoverTraffic::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
          qword_1E9591A98 = 0;
          {
            ggl::FlyoverTraffic::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverRibbon::View::reflection(void)::reflection;
            *(void *)algn_1E9591C18 = ggl::FlyoverTraffic::Displacement::reflection(void)::reflection;
            qword_1E9591C20 = (uint64_t)ggl::FlyoverTraffic::Pattern::reflection(void)::reflection;
            unk_1E9591C28 = ggl::FlyoverTraffic::Style::reflection(void)::reflection;
            qword_1E9591C30 = (uint64_t)ggl::FlyoverTraffic::Shared::reflection(void)::reflection;
          }
          qword_1E9591AA0 = (uint64_t)&ggl::FlyoverTraffic::pipelineDataDefaultPipelineConstantStructs(void)::ref;
          unk_1E9591AA8 = xmmword_1A28FE2F0;
        }
      }
      ggl::FlyoverTraffic::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverTraffic::DefaultPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverTrafficShader::typedReflection(v85);
      qword_1E9591A38 = (uint64_t)&ggl::FlyoverTrafficShader::typedReflection(void)::ref;
      {
        ggl::FlyoverTraffic::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9591AD8 = 0;
        qword_1E9591AE0 = (uint64_t)"";
        dword_1E9591AE8 = 0;
        qword_1E9591AF0 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
        unk_1E9591AF8 = 8;
      }
      qword_1E9591A40 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E9591A48 = 1;
      qword_1E9591A50 = 0;
      unk_1E9591A58 = 0;
      qword_1E9591A60 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
      unk_1E9591A68 = 0;
      {
        ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9591B18 = 0;
        qword_1E9591B20 = (uint64_t)"view";
        dword_1E9591B28 = 3;
        qword_1E9591B30 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantViewBinding(void)::reflection;
        unk_1E9591B38 = vdupq_n_s64(1uLL);
        qword_1E9591B48 = 1;
        unk_1E9591B50 = "displacement";
        dword_1E9591B58 = 3;
        qword_1E9591B60 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantDisplacementBinding(void)::reflection;
        unk_1E9591B68 = xmmword_1A28FD580;
        qword_1E9591B78 = 2;
        unk_1E9591B80 = "pattern";
        dword_1E9591B88 = 3;
        qword_1E9591B90 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantPatternBinding(void)::reflection;
        unk_1E9591B98 = xmmword_1A28FC950;
        qword_1E9591BA8 = 3;
        unk_1E9591BB0 = "style";
        dword_1E9591BB8 = 3;
        qword_1E9591BC0 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantStyleBinding(void)::reflection;
        unk_1E9591BC8 = xmmword_1A28FCD60;
        qword_1E9591BD8 = 4;
        unk_1E9591BE0 = "sharedConstants";
        dword_1E9591BE8 = 3;
        qword_1E9591BF0 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1E9591BF8 = 1;
      }
      qword_1E9591A70 = (uint64_t)&ggl::FlyoverTraffic::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
      *(void *)algn_1E9591A78 = 5;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  BOOL v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)double v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FlyoverTraffic::DefaultPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  *(void *)a1 = &unk_1EF55B610;
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::FlyoverTraffic::DefaultPipelineSetup::textureIsEnabled(ggl::FlyoverTraffic::DefaultPipelineSetup *this)
{
  return 0;
}

BOOL ggl::FlyoverTraffic::DefaultPipelineSetup::constantDataIsEnabled(ggl::FlyoverTraffic::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

void ggl::FlyoverTraffic::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::FlyoverTraffic::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void *ggl::FlyoverTraffic::DefaultPipelineSetup::DefaultPipelineSetup(void *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(a1, a2, 0);
  }
  *a1 = &unk_1EF55B5E0;
  int8x16_t v15 = (uint64_t *)a1[8];
  uint64_t v16 = *a4;
  uint64_t v17 = a4[1];
  *int8x16_t v15 = *a4;
  v15[1] = 0;
  int32x4_t v18 = (void *)a1[20];
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  int8x16_t v19 = (std::__shared_weak_count *)v18[1];
  *int32x4_t v18 = v16;
  v18[1] = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = a1[8];
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1];
  *(void *)(v20 + 16) = *a5;
  *(void *)(v20 + 24) = 0;
  uint64_t v23 = a1[20];
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  int8x16_t v24 = *(std::__shared_weak_count **)(v23 + 24);
  *(void *)(v23 + 16) = v21;
  *(void *)(v23 + 24) = v22;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = a1[8];
  uint64_t v26 = *a6;
  uint64_t v27 = a6[1];
  *(void *)(v25 + 32) = *a6;
  *(void *)(v25 + 40) = 0;
  uint64_t v28 = a1[20];
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  int8x16_t v29 = *(std::__shared_weak_count **)(v28 + 40);
  *(void *)(v28 + 32) = v26;
  *(void *)(v28 + 40) = v27;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = a1[8];
  uint64_t v31 = *a7;
  uint64_t v32 = a7[1];
  *(void *)(v30 + 48) = *a7;
  *(void *)(v30 + 56) = 0;
  uint64_t v33 = a1[20];
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  int8x16_t v34 = *(std::__shared_weak_count **)(v33 + 56);
  *(void *)(v33 + 48) = v31;
  *(void *)(v33 + 56) = v32;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  uint64_t v35 = a1[8];
  uint64_t v36 = *a8;
  uint64_t v37 = a8[1];
  *(void *)(v35 + 64) = *a8;
  *(void *)(v35 + 72) = 0;
  uint64_t v38 = a1[20];
  if (v37) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
  }
  int8x16_t v39 = *(std::__shared_weak_count **)(v38 + 72);
  *(void *)(v38 + 64) = v36;
  *(void *)(v38 + 72) = v37;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  return a1;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::DaVinci::ScreenMesh::~ScreenMesh(ggl::DaVinci::ScreenMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::ScreenMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::ScreenMesh *)((char *)this - 16));
}

void ggl::DaVinci::ScreenMesh::~ScreenMesh(ggl::DaVinci::ScreenMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::ScreenVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::DaVinci::ScreenVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

unint64_t md::RouteLineSection::vertexCount(md::RouteLineSection *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 4);
}

uint64_t md::RouteLineSection::size(md::RouteLineSection *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 24))();
}

uint64_t md::RouteLineSection::operator[](uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 32))();
}

uint64_t md::RouteLineSection::polylineEnd(md::RouteLineSection *this)
{
  return *(void *)(*((void *)this + 2) - 36);
}

uint64_t md::RouteLineSection::polylineStart(md::RouteLineSection *this)
{
  return *(void *)(*((void *)this + 1) + 12);
}

BOOL md::RouteLineSection::isMatchingCandidate(md::RouteLineSection *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 4) > 1;
}

void md::RouteLineSection::~RouteLineSection(md::RouteLineSection *this)
{
  md::RouteLineSection::~RouteLineSection(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  void *v12;

  *(void *)this = &unk_1EF536928;
  *((_DWORD *)this + 16) = -1082130432;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    free(v2);
    *((void *)this + 13) = 0;
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0xBFF0000000000000;
  uint64_t v3 = *((void *)this + 9);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 44);
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 44);
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  long long v6 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 40);
    if (!v7) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 40);
    if (!v7) {
      goto LABEL_17;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_17:
  BOOL v8 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    long long v9 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v9) {
      goto LABEL_23;
    }
  }
  else
  {
    long long v9 = (std::__shared_weak_count *)*((void *)this + 36);
    if (!v9) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_23:
  char v10 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    int8x16_t v11 = (std::__shared_weak_count *)*((void *)this + 32);
    if (!v11) {
      goto LABEL_29;
    }
  }
  else
  {
    int8x16_t v11 = (std::__shared_weak_count *)*((void *)this + 32);
    if (!v11) {
      goto LABEL_29;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_29:
  objc_destroyWeak((id *)this + 25);
  *((void *)this + 4) = &unk_1EF5597B8;

  int8x16_t v12 = (void *)*((void *)this + 1);
  if (v12)
  {
    *((void *)this + 2) = v12;
    operator delete(v12);
  }
}

void geo::_retain_ptr<GEOStyleAttributes * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5597B8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<GEOStyleAttributes * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5597B8;

  return a1;
}

void ___ZN2md16RouteLineSectionC2EffP23GEOComposedRouteSectionm16GEOTransportTypeP18GEOStyleAttributesmb_block_invoke()
{
}

void md::RouteLineSection::updateStyleQueryIfNecessary(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, int a4, int a5, int a6, gss::FeatureAttributeSet *a7, gss::FeatureAttributeSet *a8, float a9, unsigned __int8 a10, unsigned int a11, unsigned int a12)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 200));
  __int32 v20 = [WeakRetained composedRouteSegmentIndex];

  uint64_t v21 = *(void *)(a1 + 248);
  if (v21)
  {
    if (v20 != a11 || (uint64_t v21 = *(void *)(a1 + 264)) != 0)
    {
      if (*(unsigned __int8 *)(a1 + 233) == a4
        && *(unsigned __int8 *)(a1 + 234) == a5
        && *(unsigned __int8 *)(a1 + 235) == a6
        && *a3 == *(unsigned __int8 *)(a1 + 238)
        && a3[1] == *(unsigned __int8 *)(a1 + 239)
        && a3[2] == *(unsigned __int8 *)(a1 + 240)
        && a3[3] == *(unsigned __int8 *)(a1 + 241)
        && a3[4] == *(unsigned __int8 *)(a1 + 242)
        && a3[5] == *(unsigned __int8 *)(a1 + 243)
        && a3[6] == *(unsigned __int8 *)(a1 + 244)
        && a3[7] == *(unsigned __int8 *)(a1 + 245)
        && *(_DWORD *)(a1 + 376) == a11
        && *(_DWORD *)(a1 + 380) == a12
        && (((*(void *)(a1 + 312) == 0) ^ a10) & 1) != 0)
      {
        return;
      }
      LODWORD(v21) = 1;
    }
  }
  v22.i32[0] = v20;
  v22.i32[1] = *(_DWORD *)(a1 + 224);
  int32x2_t v23 = (int32x2_t)vbic_s8((int8x8_t)__PAIR64__(a12, a11), (int8x8_t)vceq_s32((int32x2_t)__PAIR64__(a12, a11), (int32x2_t)-1));
  int8x8_t v24 = (int8x8_t)vcgt_s32(v23, v22);
  int8x8_t v191 = (int8x8_t)vsub_s32((int32x2_t)vand_s8(v24, (int8x8_t)0x200000002), (int32x2_t)vbic_s8((int8x8_t)vcge_s32(v23, v22), v24));
  if (v21)
  {
    if (*(unsigned __int8 *)(a1 + 233) == a4
      && *(unsigned __int8 *)(a1 + 234) == a5
      && *(unsigned __int8 *)(a1 + 235) == a6
      && *a3 == *(unsigned __int8 *)(a1 + 238)
      && a3[1] == *(unsigned __int8 *)(a1 + 239)
      && a3[2] == *(unsigned __int8 *)(a1 + 240)
      && a3[3] == *(unsigned __int8 *)(a1 + 241)
      && a3[4] == *(unsigned __int8 *)(a1 + 242)
      && a3[5] == *(unsigned __int8 *)(a1 + 243)
      && a3[6] == *(unsigned __int8 *)(a1 + 244)
      && a3[7] == *(unsigned __int8 *)(a1 + 245))
    {
      int32x2_t v25 = (int32x2_t)vbic_s8(*(int8x8_t *)(a1 + 376), (int8x8_t)vceq_s32(*(int32x2_t *)(a1 + 376), (int32x2_t)-1));
      int8x8_t v26 = (int8x8_t)vcgt_s32(v25, v22);
      int8x8_t v27 = vmvn_s8((int8x8_t)vceq_s32((int32x2_t)vand_s8((int8x8_t)vsub_s32((int32x2_t)vand_s8(v26, (int8x8_t)0x200000002), (int32x2_t)vbic_s8((int8x8_t)vcge_s32(v25, v22), v26)), (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8(v191, (int8x8_t)0xFF000000FFLL)));
      if (((v27.i32[0] | v27.i32[1]) & 1) == 0) {
        return;
      }
    }
  }
  uint64_t v29 = *a2;
  uint64_t v28 = a2[1];
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(a1 + 368);
  *(void *)(a1 + 360) = v29;
  *(void *)(a1 + 368) = v28;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  *(unsigned char *)(a1 + 233) = a4;
  *(unsigned char *)(a1 + 234) = a5;
  *(unsigned char *)(a1 + 235) = a6;
  *(void *)(a1 + 238) = *(void *)a3;
  *(unsigned char *)(a1 + 384) = v191.i8[4];
  memset(v213, 0, sizeof(v213));
  char v214 = 1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v213, 0x10002u) = a4;
  if (a6) {
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v213, 0x10002u) = 3;
  }
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v213, 0x1004Du) = a5;
  uint64_t v31 = *(void *)(a1 + 238);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v213, 0x10001u) = v31;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v213, 0x1000Du) = BYTE1(v31);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v213, 0x1000Eu) = BYTE2(v31);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v213, 0x10033u) = BYTE4(v31);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v213, 0x1003Cu) = BYTE5(v31);
  *(_DWORD *)(a1 + 376) = a11;
  *(_DWORD *)(a1 + 380) = a12;
  id v32 = *(id *)(a1 + 40);
  if (v32)
  {
    uint64_t v33 = (const GEOStyleAttributes *)*(id *)(a1 + 40);
    md::createFeatureAttributeSet((md *)&v209, v33);
  }
  else
  {
    uint64_t v209 = 0;
    uint64_t v210 = 0;
    uint64_t v211 = 0;
    uint64_t v212 = gss::Allocator::instance(0);
  }
  int8x16_t v34 = (_OWORD *)(a1 + 264);

  uint64_t v36 = *(std::__shared_weak_count **)(a1 + 272);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  long long v205 = 0;
  long long v206 = 0;
  unint64_t v207 = 0;
  uint64_t v208 = gss::Allocator::instance(v35);
  char v200 = 0;
  uint64_t v37 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v208 + 16))(v208, 8, 4);
  uint64_t v38 = v37 + 2;
  if (v37) {
    *(void *)uint64_t v37 = 0xB00000005;
  }
  int8x16_t v39 = v37 + 2;
  int8x16_t v41 = v205;
  int32x4_t v40 = v206;
  if (v206 != v205)
  {
    unint64_t v42 = (char *)v206 - (char *)v205 - 8;
    if (v42 < 0x38)
    {
      int8x16_t v44 = v206;
    }
    else if ((unint64_t)((char *)v206 - (char *)v37) < 0x20)
    {
      int8x16_t v44 = v206;
    }
    else
    {
      uint64_t v43 = (v42 >> 3) + 1;
      int8x16_t v44 = &v206[-2 * (v43 & 0x3FFFFFFFFFFFFFFCLL)];
      int8x16_t v45 = v37 - 4;
      int8x16_t v46 = v206 - 4;
      uint64_t v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v48 = *(_OWORD *)v46;
        *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
        *(_OWORD *)int8x16_t v45 = v48;
        v45 -= 8;
        v46 -= 8;
        v47 -= 4;
      }
      while (v47);
      v37 -= 2 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
      if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_57;
      }
    }
    do
    {
      uint64_t v49 = *((void *)v44 - 1);
      v44 -= 2;
      *((void *)v37 - 1) = v49;
      v37 -= 2;
    }
    while (v44 != v41);
LABEL_57:
    int32x4_t v40 = v205;
  }
  long long v205 = v37;
  long long v206 = v39;
  unint64_t v50 = v207;
  unint64_t v207 = (unint64_t)v38;
  if (v40) {
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(void *)v208 + 40))(v208, v40, v50 - (void)v40);
  }
  long long v206 = v39;
  uint64_t v51 = *(unsigned __int16 *)(a1 + 192);
  if ((unint64_t)v39 < v207)
  {
    *(void *)int8x16_t v39 = ((v51 << 32) | 0x10009) + 7;
    int8x16_t v52 = v39 + 2;
    goto LABEL_85;
  }
  uint64_t v53 = ((char *)v39 - (char *)v205) >> 3;
  if ((unint64_t)(v53 + 1) >> 61) {
    abort();
  }
  unint64_t v54 = (uint64_t)(v207 - (void)v205) >> 2;
  if (v54 <= v53 + 1) {
    unint64_t v54 = v53 + 1;
  }
  if (v207 - (unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v55 = v54;
  }
  if (v55)
  {
    uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v208 + 16))(v208, 8 * v55, 4);
    int8x16_t v57 = (unsigned int *)(v56 + 8 * v53);
    uint64_t v58 = v56 + 8 * v55;
    if (v56) {
      *(void *)int8x16_t v57 = ((v51 << 32) | 0x10009) + 7;
    }
  }
  else
  {
    uint64_t v58 = 0;
    int8x16_t v57 = (unsigned int *)(8 * v53);
  }
  int8x16_t v52 = v57 + 2;
  int8x16_t v60 = v205;
  int32x4_t v59 = v206;
  if (v206 != v205)
  {
    unint64_t v61 = (char *)v206 - (char *)v205 - 8;
    if (v61 < 0x38)
    {
      int32x4_t v63 = v206;
    }
    else if ((unint64_t)((char *)v206 - (char *)v57) < 0x20)
    {
      int32x4_t v63 = v206;
    }
    else
    {
      uint64_t v62 = (v61 >> 3) + 1;
      int32x4_t v63 = &v206[-2 * (v62 & 0x3FFFFFFFFFFFFFFCLL)];
      int8x16_t v64 = v57 - 4;
      int8x16_t v65 = v206 - 4;
      uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v67 = *(_OWORD *)v65;
        *((_OWORD *)v64 - 1) = *((_OWORD *)v65 - 1);
        *(_OWORD *)int8x16_t v64 = v67;
        v64 -= 8;
        v65 -= 8;
        v66 -= 4;
      }
      while (v66);
      v57 -= 2 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
      if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_82;
      }
    }
    do
    {
      uint64_t v68 = *((void *)v63 - 1);
      v63 -= 2;
      *((void *)v57 - 1) = v68;
      v57 -= 2;
    }
    while (v63 != v60);
LABEL_82:
    int32x4_t v59 = v205;
  }
  long long v205 = v57;
  long long v206 = v52;
  unint64_t v69 = v207;
  unint64_t v207 = v58;
  if (v59) {
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(void *)v208 + 40))(v208, v59, v69 - (void)v59);
  }
LABEL_85:
  long long v206 = v52;
  if ((unint64_t)v52 < v207)
  {
    *(void *)int8x16_t v52 = (((unint64_t)v191.u8[4] << 32) | 0x10009) + 75;
    int16x8_t v70 = v52 + 2;
    goto LABEL_110;
  }
  uint64_t v71 = ((char *)v52 - (char *)v205) >> 3;
  if ((unint64_t)(v71 + 1) >> 61) {
    abort();
  }
  unint64_t v72 = (uint64_t)(v207 - (void)v205) >> 2;
  if (v72 <= v71 + 1) {
    unint64_t v72 = v71 + 1;
  }
  if (v207 - (unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v73 = v72;
  }
  if (v73)
  {
    uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v208 + 16))(v208, 8 * v73, 4);
    int8x16_t v75 = (unsigned int *)(v74 + 8 * v71);
    uint64_t v76 = v74 + 8 * v73;
    if (v74) {
      *(void *)int8x16_t v75 = (((unint64_t)v191.u8[4] << 32) | 0x10009) + 75;
    }
  }
  else
  {
    uint64_t v76 = 0;
    int8x16_t v75 = (unsigned int *)(8 * v71);
  }
  int16x8_t v70 = v75 + 2;
  int32x4_t v78 = v205;
  int8x16_t v77 = v206;
  if (v206 != v205)
  {
    unint64_t v79 = (char *)v206 - (char *)v205 - 8;
    if (v79 < 0x38)
    {
      int8x16_t v81 = v206;
    }
    else if ((unint64_t)((char *)v206 - (char *)v75) < 0x20)
    {
      int8x16_t v81 = v206;
    }
    else
    {
      uint64_t v80 = (v79 >> 3) + 1;
      int8x16_t v81 = &v206[-2 * (v80 & 0x3FFFFFFFFFFFFFFCLL)];
      int8x16_t v82 = v75 - 4;
      uint64_t v83 = v206 - 4;
      uint64_t v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v85 = *(_OWORD *)v83;
        *((_OWORD *)v82 - 1) = *((_OWORD *)v83 - 1);
        *(_OWORD *)int8x16_t v82 = v85;
        v82 -= 8;
        v83 -= 8;
        v84 -= 4;
      }
      while (v84);
      v75 -= 2 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
      if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_107;
      }
    }
    do
    {
      uint64_t v86 = *((void *)v81 - 1);
      v81 -= 2;
      *((void *)v75 - 1) = v86;
      v75 -= 2;
    }
    while (v81 != v78);
LABEL_107:
    int8x16_t v77 = v205;
  }
  long long v205 = v75;
  long long v206 = v70;
  unint64_t v87 = v207;
  unint64_t v207 = v76;
  if (v77) {
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(void *)v208 + 40))(v208, v77, v87 - (void)v77);
  }
LABEL_110:
  long long v206 = v70;
  if ((unint64_t)v70 < v207)
  {
    *(void *)int16x8_t v70 = (((unint64_t)v191.u8[0] << 32) | 0x10009) + 11;
    long long v88 = v70 + 2;
    goto LABEL_135;
  }
  uint64_t v89 = ((char *)v70 - (char *)v205) >> 3;
  if ((unint64_t)(v89 + 1) >> 61) {
    abort();
  }
  unint64_t v90 = (uint64_t)(v207 - (void)v205) >> 2;
  if (v90 <= v89 + 1) {
    unint64_t v90 = v89 + 1;
  }
  if (v207 - (unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v91 = v90;
  }
  if (v91)
  {
    uint64_t v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v208 + 16))(v208, 8 * v91, 4);
    char v93 = (unsigned int *)(v92 + 8 * v89);
    uint64_t v94 = v92 + 8 * v91;
    if (v92) {
      *(void *)char v93 = (((unint64_t)v191.u8[0] << 32) | 0x10009) + 11;
    }
  }
  else
  {
    uint64_t v94 = 0;
    char v93 = (unsigned int *)(8 * v89);
  }
  long long v88 = v93 + 2;
  std::string v96 = v205;
  std::string v95 = v206;
  if (v206 != v205)
  {
    unint64_t v97 = (char *)v206 - (char *)v205 - 8;
    if (v97 < 0x38)
    {
      double v99 = v206;
    }
    else if ((unint64_t)((char *)v206 - (char *)v93) < 0x20)
    {
      double v99 = v206;
    }
    else
    {
      uint64_t v98 = (v97 >> 3) + 1;
      double v99 = &v206[-2 * (v98 & 0x3FFFFFFFFFFFFFFCLL)];
      double v100 = v93 - 4;
      uint64_t v101 = v206 - 4;
      uint64_t v102 = v98 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v103 = *(_OWORD *)v101;
        *((_OWORD *)v100 - 1) = *((_OWORD *)v101 - 1);
        *(_OWORD *)double v100 = v103;
        v100 -= 8;
        v101 -= 8;
        v102 -= 4;
      }
      while (v102);
      v93 -= 2 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
      if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_132;
      }
    }
    do
    {
      uint64_t v104 = *((void *)v99 - 1);
      v99 -= 2;
      *((void *)v93 - 1) = v104;
      v93 -= 2;
    }
    while (v99 != v96);
LABEL_132:
    std::string v95 = v205;
  }
  long long v205 = v93;
  long long v206 = v88;
  unint64_t v105 = v207;
  unint64_t v207 = v94;
  if (v95) {
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(void *)v208 + 40))(v208, v95, v105 - (void)v95);
  }
LABEL_135:
  long long v206 = v88;
  if (v20 != a11) {
    goto LABEL_203;
  }
  uint64_t v106 = v208;
  long long v107 = v205;
  uint64_t v108 = (char *)v88 - (char *)v205;
  if (v88 != v205)
  {
    if (v108 < 0) {
      abort();
    }
    uint64_t v109 = (*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v208 + 16))(v208, (char *)v88 - (char *)v205, 4);
    unsigned int v110 = (unsigned int *)v109;
    uint64_t v111 = 0;
    do
    {
      if (v109 + v111 * 4) {
        *(void *)(v109 + v111 * 4) = *(void *)&v107[v111];
      }
      v111 += 2;
    }
    while (&v107[v111] != v88);
    uint64_t v112 = (unsigned int *)(v109 + v111 * 4);
    uint64_t v113 = v109 + 8 * (v108 >> 3);
    if (v200) {
      goto LABEL_143;
    }
LABEL_147:
    double v201 = v110;
    long long v202 = v112;
    unint64_t v203 = v113;
    uint64_t v204 = v106;
    char v200 = 1;
    goto LABEL_148;
  }
  uint64_t v112 = 0;
  unsigned int v110 = 0;
  uint64_t v113 = 0;
  if (!v200) {
    goto LABEL_147;
  }
LABEL_143:
  if (v201)
  {
    long long v202 = v201;
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(void *)v204 + 40))(v204, v201, v203 - (void)v201);
  }
  double v201 = v110;
  long long v202 = v112;
  unint64_t v203 = v113;
LABEL_148:
  double v114 = v206;
  if ((unint64_t)v206 < v207)
  {
    if (v206) {
      *(void *)long long v206 = 65545;
    }
    uint64_t v115 = v114 + 2;
    goto LABEL_175;
  }
  uint64_t v116 = ((char *)v206 - (char *)v205) >> 3;
  unint64_t v117 = v116 + 1;
  if ((unint64_t)(v116 + 1) >> 61) {
    abort();
  }
  uint64_t v118 = v207 - (void)v205;
  if ((uint64_t)(v207 - (void)v205) >> 2 > v117) {
    unint64_t v117 = v118 >> 2;
  }
  if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v119 = v117;
  }
  if (v119)
  {
    uint64_t v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v208 + 16))(v208, 8 * v119, 4);
    double v121 = (unsigned int *)(v120 + 8 * v116);
    uint64_t v122 = v120 + 8 * v119;
    if (v120) {
      *(void *)double v121 = 65545;
    }
  }
  else
  {
    uint64_t v122 = 0;
    double v121 = (unsigned int *)(8 * v116);
  }
  uint64_t v115 = v121 + 2;
  uint64_t v124 = v205;
  uint64_t v123 = v206;
  if (v206 != v205)
  {
    unint64_t v125 = (char *)v206 - (char *)v205 - 8;
    if (v125 < 0x38)
    {
      float32x4_t v127 = v206;
    }
    else if ((unint64_t)((char *)v206 - (char *)v121) < 0x20)
    {
      float32x4_t v127 = v206;
    }
    else
    {
      uint64_t v126 = (v125 >> 3) + 1;
      float32x4_t v127 = &v206[-2 * (v126 & 0x3FFFFFFFFFFFFFFCLL)];
      float32x4_t v128 = v121 - 4;
      float32x4_t v129 = v206 - 4;
      uint64_t v130 = v126 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v131 = *(_OWORD *)v129;
        *((_OWORD *)v128 - 1) = *((_OWORD *)v129 - 1);
        *(_OWORD *)float32x4_t v128 = v131;
        v128 -= 8;
        v129 -= 8;
        v130 -= 4;
      }
      while (v130);
      v121 -= 2 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
      if (v126 == (v126 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_172;
      }
    }
    do
    {
      uint64_t v132 = *((void *)v127 - 1);
      v127 -= 2;
      *((void *)v121 - 1) = v132;
      v121 -= 2;
    }
    while (v127 != v124);
LABEL_172:
    uint64_t v123 = v205;
  }
  long long v205 = v121;
  long long v206 = v115;
  unint64_t v133 = v207;
  unint64_t v207 = v122;
  if (v123) {
    (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(void *)v208 + 40))(v208, v123, v133 - (void)v123);
  }
LABEL_175:
  long long v206 = v115;
  unint64_t v134 = v202;
  if ((unint64_t)v202 >= v203)
  {
    uint64_t v136 = ((char *)v202 - (char *)v201) >> 3;
    unint64_t v137 = v136 + 1;
    if ((unint64_t)(v136 + 1) >> 61) {
      abort();
    }
    uint64_t v138 = v203 - (void)v201;
    if ((uint64_t)(v203 - (void)v201) >> 2 > v137) {
      unint64_t v137 = v138 >> 2;
    }
    if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v139 = v137;
    }
    if (v139)
    {
      uint64_t v140 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v204 + 16))(v204, 8 * v139, 4);
      uint64_t v141 = (unsigned int *)(v140 + 8 * v136);
      uint64_t v142 = v140 + 8 * v139;
      if (v140) {
        *(void *)uint64_t v141 = 0x200010009;
      }
    }
    else
    {
      uint64_t v142 = 0;
      uint64_t v141 = (unsigned int *)(8 * v136);
    }
    unint64_t v135 = v141 + 2;
    unint64_t v144 = v201;
    unint64_t v143 = v202;
    if (v202 == v201) {
      goto LABEL_200;
    }
    unint64_t v145 = (char *)v202 - (char *)v201 - 8;
    if (v145 < 0x38)
    {
      unint64_t v147 = v202;
    }
    else if ((unint64_t)((char *)v202 - (char *)v141) < 0x20)
    {
      unint64_t v147 = v202;
    }
    else
    {
      uint64_t v146 = (v145 >> 3) + 1;
      unint64_t v147 = &v202[-2 * (v146 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v148 = v141 - 4;
      uint64_t v149 = v202 - 4;
      uint64_t v150 = v146 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v151 = *(_OWORD *)v149;
        *((_OWORD *)v148 - 1) = *((_OWORD *)v149 - 1);
        *(_OWORD *)uint64_t v148 = v151;
        v148 -= 8;
        v149 -= 8;
        v150 -= 4;
      }
      while (v150);
      v141 -= 2 * (v146 & 0x3FFFFFFFFFFFFFFCLL);
      if (v146 == (v146 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_199;
      }
    }
    do
    {
      uint64_t v152 = *((void *)v147 - 1);
      v147 -= 2;
      *((void *)v141 - 1) = v152;
      v141 -= 2;
    }
    while (v147 != v144);
LABEL_199:
    unint64_t v143 = v201;
LABEL_200:
    double v201 = v141;
    long long v202 = v135;
    unint64_t v153 = v203;
    unint64_t v203 = v142;
    if (v143) {
      (*(void (**)(uint64_t, unsigned int *, unint64_t))(*(void *)v204 + 40))(v204, v143, v153 - (void)v143);
    }
    goto LABEL_202;
  }
  if (v202) {
    *(void *)long long v202 = 0x200010009;
  }
  unint64_t v135 = v134 + 2;
LABEL_202:
  long long v202 = v135;
LABEL_203:
  if (v200)
  {
    gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)&v209, &v201, (unsigned int **)&v193);
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v197, *a2, (gss::FeatureAttributeSet *)&v193, (gss::QueryOverrides *)v213);
    long long v154 = v197;
    long long v197 = 0uLL;
    uint64_t v155 = *(std::__shared_weak_count **)(a1 + 272);
    *int8x16_t v34 = v154;
    if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
    uint64_t v156 = (std::__shared_weak_count *)*((void *)&v197 + 1);
    if (*((void *)&v197 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v197 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
    if ((void)v193)
    {
      *((void *)&v193 + 1) = v193;
      (*(void (**)(uint64_t, void, void))(*(void *)v195 + 40))(v195, v193, v194 - v193);
    }
  }
  gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)&v209, &v205, (unsigned int **)&v197);
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v193, *a2, (gss::FeatureAttributeSet *)&v197, (gss::QueryOverrides *)v213);
  long long v157 = v193;
  long long v193 = 0uLL;
  uint64_t v158 = *(std::__shared_weak_count **)(a1 + 256);
  *(_OWORD *)(a1 + 248) = v157;
  if (v158 && !atomic_fetch_add(&v158->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
  }
  unint64_t v159 = (std::__shared_weak_count *)*((void *)&v193 + 1);
  if (*((void *)&v193 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v193 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
    std::__shared_weak_count::__release_weak(v159);
  }
  *(unsigned char *)(a1 + 236) = 0;
  uint64_t v160 = *(void *)(a1 + 248);
  if (v160)
  {
    uint64_t v161 = *(std::__shared_weak_count **)(a1 + 256);
    *(void *)&long long v192 = *(void *)(a1 + 248);
    *((void *)&v192 + 1) = v161;
    if (v161) {
      atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)&v193, v160, (uint64_t)v161);
    if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
    if (v196)
    {
      uint64_t v162 = *(void *)(v193 + 24);
      if ((int)a9 >= 0x17) {
        unsigned int v163 = 23;
      }
      else {
        unsigned int v163 = (int)a9;
      }
      unsigned int v164 = *(unsigned __int8 *)(v162 + 11);
      if (v164 != 2
        || (hasValueForKeyAtZAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v193 + 24), 0x1D0u, v163, 0), unsigned int v164 = 1, (hasValueForKeyAtZAtEnd & 1) == 0))
      {
        LOBYTE(v164) = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v162, 0x1D0u, v163, v164);
      }
      *(unsigned char *)(a1 + 236) = v164;
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v193);
  }
  uint64_t v166 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
    if ((*(_DWORD *)(a1 + 376) & 0x80000000) == 0) {
      goto LABEL_236;
    }
  }
  else if ((*(_DWORD *)(a1 + 376) & 0x80000000) == 0)
  {
    goto LABEL_236;
  }
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)v213, 0x1003Au) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v193, *a2, (gss::FeatureAttributeSet *)&v197, (gss::QueryOverrides *)v213);
  long long v186 = v193;
  long long v193 = 0uLL;
  unint64_t v187 = *(std::__shared_weak_count **)(a1 + 288);
  *(_OWORD *)(a1 + 280) = v186;
  if (v187 && !atomic_fetch_add(&v187->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
    std::__shared_weak_count::__release_weak(v187);
  }
  double v188 = (std::__shared_weak_count *)*((void *)&v193 + 1);
  if (*((void *)&v193 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v193 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
    std::__shared_weak_count::__release_weak(v188);
  }
LABEL_236:
  *(void *)((char *)&v193 + 7) = 0;
  *(void *)&long long v193 = 0;
  HIBYTE(v193) = 1;
  __int16 v167 = *(unsigned __int8 *)(a1 + 233);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)&v193, 0x10002u) = v167;
  __int16 v168 = *(unsigned __int8 *)(a1 + 234);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)&v193, 0x1004Du) = v168;
  if (*(unsigned char *)(a1 + 235)) {
    *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)&v193, 0x10002u) = 3;
  }
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)&v193, 0x10054u) = v191.u8[4];
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v192, *a2, a7, (gss::QueryOverrides *)&v193);
  long long v169 = v192;
  long long v192 = 0uLL;
  int v170 = *(std::__shared_weak_count **)(a1 + 304);
  *(_OWORD *)(a1 + 296) = v169;
  if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
    std::__shared_weak_count::__release_weak(v170);
  }
  int v171 = (std::__shared_weak_count *)*((void *)&v192 + 1);
  if (*((void *)&v192 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v192 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
    std::__shared_weak_count::__release_weak(v171);
    long long v172 = 0uLL;
    if (!a10) {
      goto LABEL_245;
    }
    goto LABEL_244;
  }
  long long v172 = 0uLL;
  if (a10)
  {
LABEL_244:
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v192, *a2, a8, (gss::QueryOverrides *)&v193);
    long long v172 = v192;
  }
LABEL_245:
  long long v192 = 0uLL;
  unint64_t v173 = *(std::__shared_weak_count **)(a1 + 320);
  *(_OWORD *)(a1 + 312) = v172;
  if (v173 && !atomic_fetch_add(&v173->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
    std::__shared_weak_count::__release_weak(v173);
  }
  unint64_t v174 = (std::__shared_weak_count *)*((void *)&v192 + 1);
  if (*((void *)&v192 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v192 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
    std::__shared_weak_count::__release_weak(v174);
  }
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[]((uint64_t *)&v193, 0x1003Au) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v192, *a2, a7, (gss::QueryOverrides *)&v193);
  long long v176 = v192;
  long long v192 = 0uLL;
  uint64_t v177 = *(std::__shared_weak_count **)(a1 + 336);
  *(_OWORD *)(a1 + 328) = v176;
  if (v177 && !atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
    std::__shared_weak_count::__release_weak(v177);
  }
  uint64_t v178 = (std::__shared_weak_count *)*((void *)&v192 + 1);
  if (!*((void *)&v192 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v192 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v179 = 0uLL;
    if (!a10) {
      goto LABEL_258;
    }
    goto LABEL_257;
  }
  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
  std::__shared_weak_count::__release_weak(v178);
  long long v179 = 0uLL;
  if (a10)
  {
LABEL_257:
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v192, *a2, a8, (gss::QueryOverrides *)&v193);
    long long v179 = v192;
  }
LABEL_258:
  long long v192 = 0uLL;
  double v180 = *(std::__shared_weak_count **)(a1 + 352);
  v34[5] = v179;
  if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
    std::__shared_weak_count::__release_weak(v180);
  }
  int v181 = (std::__shared_weak_count *)*((void *)&v192 + 1);
  if (*((void *)&v192 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v192 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
    std::__shared_weak_count::__release_weak(v181);
  }
  if (!BYTE14(v193))
  {
    uint64_t v182 = v193;
    if ((void)v193)
    {
      uint64_t v183 = gss::Allocator::instance(v175);
      unsigned int v175 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v183 + 40))(v183, v182, WORD6(v193));
    }
  }
  if ((void)v197)
  {
    *((void *)&v197 + 1) = v197;
    unsigned int v175 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v199 + 40))(v199, v197, v198 - v197);
  }
  if (v200 && v201)
  {
    long long v202 = v201;
    unsigned int v175 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unsigned int *, unint64_t))(*(void *)v204
                                                                                                  + 40))(v204, v201, v203 - (void)v201);
  }
  if (v205)
  {
    long long v206 = v205;
    unsigned int v175 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unsigned int *, unint64_t))(*(void *)v208
                                                                                                  + 40))(v208, v205, v207 - (void)v205);
  }
  if (v209)
  {
    uint64_t v210 = v209;
    unsigned int v175 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v212 + 40))(v212, v209, v211 - v209);
  }
  if (!v213[14])
  {
    uint64_t v184 = *(void *)v213;
    if (*(void *)v213)
    {
      uint64_t v185 = gss::Allocator::instance(v175);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v185 + 40))(v185, v184, *(unsigned __int16 *)&v213[12]);
    }
  }
}

void sub_1A24D2E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a23) {
    (*(void (**)(void))(*(void *)a26 + 40))();
  }
  if (a27 && a28) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a31 + 40))(a31, a28, a30 - a28);
  }
  if (a32) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a35 + 40))(a35, a32, a34 - a32);
  }
  uint64_t v37 = *(void *)(v35 - 152);
  if (v37)
  {
    *(void *)(v35 - 144) = v37;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v35 - 128) + 40))(*(void *)(v35 - 128), v37, *(void *)(v35 - 136) - v37);
  }
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)(v35 - 120));
  _Unwind_Resume(a1);
}

uint64_t md::RouteLineSection::SingleLayerVertexSource::operator[](uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) + 48 * a2;
}

unint64_t md::RouteLineSection::SingleLayerVertexSource::size(md::RouteLineSection::SingleLayerVertexSource *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*((void *)this + 1) + 8) - **((void **)this + 1)) >> 4);
}

__n128 md::RouteLineSection::SingleLayerVertexSource::operator[]@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 8) + 48 * a2;
  long long v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v4;
  __n128 result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a3 + 32) = result;
  return result;
}

void md::RouteLineSection::SingleLayerVertexSource::~SingleLayerVertexSource(md::RouteLineSection::SingleLayerVertexSource *this)
{
}

uint64_t md::RouteLineSection::DoubleLayerVertexSource::operator[](uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) + 48 * *(void *)(*(void *)(a1 + 16) + 8 * a2);
}

uint64_t md::RouteLineSection::DoubleLayerVertexSource::size(md::RouteLineSection::DoubleLayerVertexSource *this)
{
  return *((void *)this + 3);
}

__n128 md::RouteLineSection::DoubleLayerVertexSource::operator[]@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 8) + 48 * *(void *)(*(void *)(a1 + 16) + 8 * a2);
  long long v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v3;
  *(_OWORD *)(a3 + 16) = v4;
  __n128 result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a3 + 32) = result;
  return result;
}

void md::RouteLineSection::DoubleLayerVertexSource::~DoubleLayerVertexSource(md::RouteLineSection::DoubleLayerVertexSource *this)
{
}

uint64_t ___ZN2md16RouteLineSection19simplifyWithEpsilonERKd_block_invoke(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v4 = *a2;
  if (*(unsigned __int8 *)(*a2 + 48 * a3 + 44) != *(unsigned __int8 *)(*a2 + 48 * a3 + 45))
  {
    float v5 = *(float *)(v4 + 48 * a3 + 40);
    if (v5 == 0.0 || v5 == 1.0) {
      return 1;
    }
  }
  uint64_t v8 = v4 + 48 * a3;
  float v9 = *(float *)(v8 + 36);
  float v10 = *(float *)(v8 - 12);
  uint64_t result = v9 != v10;
  if (v9 == v10 && (a4 & 1) == 0) {
    return v9 != *(float *)(v4 + 48 * a3 + 84);
  }
  return result;
}

BOOL ___ZN2md16RouteLineSection19simplifyWithEpsilonERKd_block_invoke_2(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4 = *a2 + 48 * a3;
  int v5 = *(unsigned __int8 *)(v4 - 4);
  LODWORD(v4) = *(unsigned __int8 *)(v4 + 44);
  BOOL result = v5 != v4;
  if (v5 == v4 && (a4 & 1) == 0) {
    return v5 != *(unsigned __int8 *)(*a2 + 48 * a3 + 92);
  }
  return result;
}

unint64_t md::RouteLineSection::simplifiedCoordinate(md::RouteLineSection *this, VKPolylineOverlay *a2, PolylineCoordinate a3)
{
  int v5 = a2;
  long long v6 = v5;
  float v7 = fabsf(*((float *)this + 15));
  if (v7 > (float)(v7 * 0.000011921) && v7 >= 1.1755e-38)
  {
    int8x16_t v11 = [(VKPolylineOverlay *)v5 composedRoute];
    [v11 distanceFromPoint:*(void *)(*((void *)this + 1) + 12) toPoint:a3];
    double v13 = v12;

    float v14 = v13 * *((float *)this + 14);
    if (v14 <= 0.0)
    {
      float v16 = 0.0;
      if (v14 < 0.0) {
        (*(void (**)(void))(**((void **)this + 10) + 24))(*((void *)this + 10));
      }
      unsigned int v17 = 0;
      goto LABEL_20;
    }
    if ((*(uint64_t (**)(void))(**((void **)this + 10) + 24))(*((void *)this + 10)) == 1)
    {
      int v15 = (*(uint64_t (**)(void))(**((void **)this + 10) + 24))(*((void *)this + 10));
    }
    else
    {
      (*(void (**)(float32x2_t *__return_ptr))(**((void **)this + 10) + 16))(&v28);
      (*(void (**)(float32x2_t *__return_ptr))(**((void **)this + 10) + 16))(v27);
      float32x2_t v18 = vsub_f32(v28, v27[0]);
      float v19 = v14 - sqrtf(vaddv_f32(vmul_f32(v18, v18)));
      unsigned int v17 = 0;
      if (v19 <= 0.0)
      {
LABEL_16:
        (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 10) + 16))(v24);
        int v29 = *(_DWORD *)&v24[8];
        float32x2_t v28 = *(float32x2_t *)v24;
        long long v30 = *(_OWORD *)&v24[12];
        long long v31 = v25;
        int v32 = v26;
        (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 10) + 16))(v24);
        float32x2_t v21 = vsub_f32(v28, *(float32x2_t *)v24);
        float v16 = (float)(v19 / sqrtf(vaddv_f32(vmul_f32(v21, v21)))) + 1.0;
        if (v16 >= 1.0)
        {
          v17 += vcvtms_u32_f32(v16);
          float v16 = v16 - floorf(v16);
        }
        goto LABEL_20;
      }
      while ((*(uint64_t (**)(void))(**((void **)this + 10) + 24))(*((void *)this + 10)) - 1 > (unint64_t)(v17 + 1))
      {
        (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 10) + 16))(v24);
        (*(void (**)(float32x2_t *__return_ptr))(**((void **)this + 10) + 16))(v23);
        float32x2_t v20 = vsub_f32(*(float32x2_t *)v24, v23[0]);
        float v19 = v19 - sqrtf(vaddv_f32(vmul_f32(v20, v20)));
        ++v17;
        if (v19 <= 0.0) {
          goto LABEL_16;
        }
      }
      int v15 = (*(uint64_t (**)(void))(**((void **)this + 10) + 24))(*((void *)this + 10));
    }
    unsigned int v17 = v15 - 1;
    float v16 = 0.0;
LABEL_20:
    unint64_t v10 = (unint64_t)LODWORD(v16) << 32;
    uint64_t v9 = v17;
    goto LABEL_21;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
LABEL_21:

  return v10 | v9;
}

void sub_1A24D351C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::RouteLineSection::split(md::RouteLineSection *this, const PolylineCoordinate *a2)
{
  unint64_t index = a2->index;
  if (index == *(_DWORD *)md::RouteLineSection::kSplitLocationAfterSection
    && vabds_f32(a2->offset, *(float *)(md::RouteLineSection::kSplitLocationAfterSection + 4)) < 0.00000011921
    || (*(uint64_t (**)(void))(**((void **)this + 9) + 24))(*((void *)this + 9)) - 1 <= index)
  {
    float v5 = 3.4028e38;
  }
  else if (a2->index != *(_DWORD *)md::RouteLineSection::kSplitLocationBeforeSection {
         || (float v5 = -1.0,
  }
             vabds_f32(a2->offset, *(float *)(md::RouteLineSection::kSplitLocationBeforeSection + 4)) >= 0.00000011921))
  {
    float v6 = *(float *)((*(uint64_t (**)(void, unint64_t))(**((void **)this + 9) + 32))(*((void *)this + 9), index)+ 32);
    float v5 = v6
       + (float)((float)(*(float *)((*(uint64_t (**)(void, unint64_t))(**((void **)this + 9) + 32))(*((void *)this + 9), index + 1)+ 32)- v6)* a2->offset);
  }
  *((float *)this + 16) = v5;
  int v7 = *((_DWORD *)this + 94);
  if ((v7 & 0x80000000) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 25);
    int v9 = [WeakRetained composedRouteSegmentIndex];

    if (v7 != v9) {
      *((_DWORD *)this + 16) = -1082130432;
    }
  }
}

void sub_1A24D36B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__32280(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  unint64_t v3 = a2[4].n128_u64[0];
  a1[4].n128_u32[2] = a2[4].n128_u32[2];
  a1[4].n128_u64[0] = v3;
  return result;
}

void __Block_byref_object_dispose__32281(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

float *___ZNK2md16RouteLineSection17addTrafficRibbonsERNSt3__113unordered_mapINS_15TrafficBatchKeyENS1_6vectorINS1_10unique_ptrINS_13TrafficRibbonEN3mdm11TypeDeleterIS6_EEEEN3geo12StdAllocatorISA_NS7_9AllocatorEEEEENS1_4hashIS3_EENS1_8equal_toIS3_EENS1_9allocatorINS1_4pairIKS3_SF_EEEEEERNS2_IS3_NS4_INS5_INS_18SolidTrafficRibbonENS8_ISR_EEEENSC_IST_SD_EEEESH_SJ_NSK_INSL_ISM_SV_EEEEEERKNS1_10shared_ptrIN3gss15StylesheetQueryINS11_10PropertyIDEEEEERKNS_16TrafficMeshStyleE_block_invoke(float *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a2 > 3) {
    return result;
  }
  float v6 = result;
  uint64_t v7 = *((void *)result + 5);
  *(unsigned char *)(*(void *)(*((void *)result + 4) + 8) + 68) = a2;
  int v8 = *(_DWORD *)(*((void *)result + 6)
                 + 4 * *(unsigned __int8 *)(*(void *)(*((void *)result + 4) + 8) + 68));
  if ((v8 - 1) < 2)
  {
    {
      operator new();
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
    uint64_t v10 = v9;
    *(_OWORD *)(v9 + 49) = 0u;
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(void *)(v9 + 56) = a4;
    *(void *)uint64_t v9 = &unk_1EF553D70;
    *(void *)(v9 + 72) = 0;
    int8x16_t v11 = (void *)(v9 + 72);
    *(void *)(v9 + 80) = 0;
    *(void *)(v9 + 88) = 0;
    if (a4)
    {
      *(void *)(v9 + 88) = a4;
      {
        operator new();
      }
      uint64_t v12 = 0;
      *(void *)(v10 + 72) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 8 * a4, 8);
      *(unsigned char *)(v10 + 64) = 1;
      *(void *)uint64_t v10 = &unk_1EF53A9A0;
      int8x16_t v77 = (void (***)(void))v10;
      do
      {
        *(void *)(*v11 + 8 * v12) = *(void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 72)
                                                                                            + 32))(*(void *)(v7 + 72), a3 + v12);
        ++v12;
      }
      while (a4 != v12);
    }
    else
    {
      *(void *)uint64_t v9 = &unk_1EF53A9A0;
      int8x16_t v77 = (void (***)(void))v9;
    }
    unsigned int v17 = (md::TrafficBatchKey *)(*(void *)(*((void *)v6 + 4) + 8) + 48);
    __n128 result = std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::SolidTrafficRibbon,mdm::TypeDeleter<md::SolidTrafficRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::TrafficBatchKey,std::piecewise_construct_t const&,std::tuple<md::TrafficBatchKey const&>,std::tuple<>>(*((uint64_t **)v6 + 8), v17, (uint64_t)v17);
    float32x2_t v18 = result;
    float v19 = (void *)*((void *)result + 7);
    unint64_t v20 = *((void *)result + 8);
    if ((unint64_t)v19 >= v20)
    {
      uint64_t v21 = *((void *)result + 6);
      uint64_t v22 = ((uint64_t)v19 - v21) >> 3;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        abort();
      }
      uint64_t v24 = v20 - v21;
      if (v24 >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v25 = v23;
      }
      if (v25)
      {
        __n128 result = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)result + 9) + 16))(*((void *)result + 9), 8 * v25, 8);
        int v26 = &result[2 * v22];
        int8x8_t v27 = &result[2 * v25];
        if (result)
        {
          float32x2_t v28 = v77;
          int8x16_t v77 = 0;
          *(void *)int v26 = v28;
        }
      }
      else
      {
        int8x8_t v27 = 0;
        int v26 = (float *)(8 * v22);
      }
      int v32 = v26 + 2;
      int8x16_t v41 = (char *)*((void *)v18 + 6);
      unint64_t v42 = (char *)*((void *)v18 + 7);
      if (v42 == v41)
      {
        *((void *)v18 + 6) = v26;
        *((void *)v18 + 7) = v32;
        uint64_t v57 = *((void *)v18 + 8);
        *((void *)v18 + 8) = v27;
        goto LABEL_86;
      }
      unint64_t v43 = v42 - v41 - 8;
      if (v43 > 0x57
        && ((unint64_t v44 = (v41 - v42 + 7) & 0xFFFFFFFFFFFFFFF8,
             unint64_t v45 = (unint64_t)&v42[v44],
             int8x16_t v46 = (char *)v26 + v44,
             v45 < (unint64_t)v26)
          ? (BOOL v47 = v46 >= v42)
          : (BOOL v47 = 1),
            v47))
      {
        uint64_t v48 = (v43 >> 3) + 1;
        uint64_t v49 = &v42[-8 * (v48 & 0x3FFFFFFFFFFFFFFCLL)];
        unint64_t v50 = v26 - 4;
        uint64_t v51 = v42 - 32;
        uint64_t v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v54 = *(_OWORD *)v51;
          long long v53 = *((_OWORD *)v51 + 1);
          *(_OWORD *)uint64_t v51 = 0uLL;
          *((_OWORD *)v51 + 1) = 0uLL;
          v51 -= 32;
          *((_OWORD *)v50 - 1) = v54;
          *(_OWORD *)unint64_t v50 = v53;
          v50 -= 8;
          v52 -= 4;
        }
        while (v52);
        v26 -= 2 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_55:
          unint64_t v42 = (char *)*((void *)v18 + 6);
          uint64_t v56 = (char *)*((void *)v18 + 7);
          *((void *)v18 + 6) = v26;
          *((void *)v18 + 7) = v32;
          uint64_t v57 = *((void *)v18 + 8);
          *((void *)v18 + 8) = v27;
          while (v56 != v42)
          {
            int32x4_t v59 = (void (***)(void))*((void *)v56 - 1);
            v56 -= 8;
            uint64_t v58 = v59;
            *(void *)uint64_t v56 = 0;
            if (v59)
            {
              (**v58)(v58);
              {
                operator new();
              }
              __n128 result = (float *)(*(uint64_t (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v58, 104);
            }
          }
          goto LABEL_86;
        }
      }
      else
      {
        uint64_t v49 = (char *)*((void *)v18 + 7);
      }
      do
      {
        uint64_t v55 = *((void *)v49 - 1);
        v49 -= 8;
        *(void *)uint64_t v49 = 0;
        *((void *)v26 - 1) = v55;
        v26 -= 2;
      }
      while (v49 != v41);
      goto LABEL_55;
    }
LABEL_29:
    if (v19)
    {
      long long v31 = v77;
      int8x16_t v77 = 0;
      *float v19 = v31;
    }
    int v32 = v19 + 1;
    goto LABEL_88;
  }
  if (v8) {
    return result;
  }
  {
    operator new();
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
  uint64_t v14 = v13;
  *(_OWORD *)(v13 + 49) = 0u;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(void *)(v13 + 56) = a4;
  *(void *)uint64_t v13 = &unk_1EF553D70;
  *(void *)(v13 + 72) = 0;
  int v15 = (void *)(v13 + 72);
  *(void *)(v13 + 80) = 0;
  *(void *)(v13 + 88) = 0;
  if (a4)
  {
    *(void *)(v13 + 88) = a4;
    {
      operator new();
    }
    uint64_t v16 = 0;
    *(void *)(v14 + 72) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 8 * a4, 8);
    *(unsigned char *)(v14 + 64) = 1;
    *(void *)uint64_t v14 = &unk_1EF533428;
    int8x16_t v77 = (void (***)(void))v14;
    do
    {
      *(void *)(*v15 + 8 * v16) = *(void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 72) + 32))(*(void *)(v7 + 72), a3 + v16);
      ++v16;
    }
    while (a4 != v16);
  }
  else
  {
    *(void *)uint64_t v13 = &unk_1EF533428;
    int8x16_t v77 = (void (***)(void))v13;
  }
  int v29 = (md::TrafficBatchKey *)(*(void *)(*((void *)v6 + 4) + 8) + 48);
  __n128 result = std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::TrafficBatchKey,std::piecewise_construct_t const&,std::tuple<md::TrafficBatchKey const&>,std::tuple<>>(*((uint64_t **)v6 + 7), v29, (uint64_t)v29);
  float32x2_t v18 = result;
  float v19 = (void *)*((void *)result + 7);
  unint64_t v30 = *((void *)result + 8);
  if ((unint64_t)v19 < v30) {
    goto LABEL_29;
  }
  uint64_t v33 = *((void *)result + 6);
  uint64_t v34 = ((uint64_t)v19 - v33) >> 3;
  unint64_t v35 = v34 + 1;
  if ((unint64_t)(v34 + 1) >> 61) {
    abort();
  }
  uint64_t v36 = v30 - v33;
  if (v36 >> 2 > v35) {
    unint64_t v35 = v36 >> 2;
  }
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v37 = v35;
  }
  if (v37)
  {
    __n128 result = (float *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)result + 9) + 16))(*((void *)result + 9), 8 * v37, 8);
    uint64_t v38 = &result[2 * v34];
    int8x16_t v39 = &result[2 * v37];
    if (result)
    {
      int32x4_t v40 = v77;
      int8x16_t v77 = 0;
      *(void *)uint64_t v38 = v40;
    }
  }
  else
  {
    int8x16_t v39 = 0;
    uint64_t v38 = (float *)(8 * v34);
  }
  int v32 = v38 + 2;
  int8x16_t v60 = (char *)*((void *)v18 + 6);
  unint64_t v42 = (char *)*((void *)v18 + 7);
  if (v42 != v60)
  {
    unint64_t v61 = v42 - v60 - 8;
    if (v61 > 0x57
      && ((unint64_t v62 = (v60 - v42 + 7) & 0xFFFFFFFFFFFFFFF8,
           unint64_t v63 = (unint64_t)&v42[v62],
           int8x16_t v64 = (char *)v38 + v62,
           v63 < (unint64_t)v38)
        ? (BOOL v65 = v64 >= v42)
        : (BOOL v65 = 1),
          v65))
    {
      uint64_t v66 = (v61 >> 3) + 1;
      long long v67 = &v42[-8 * (v66 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v68 = v38 - 4;
      unint64_t v69 = v42 - 32;
      uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v72 = *(_OWORD *)v69;
        long long v71 = *((_OWORD *)v69 + 1);
        *(_OWORD *)unint64_t v69 = 0uLL;
        *((_OWORD *)v69 + 1) = 0uLL;
        v69 -= 32;
        *((_OWORD *)v68 - 1) = v72;
        *(_OWORD *)uint64_t v68 = v71;
        v68 -= 8;
        v70 -= 4;
      }
      while (v70);
      v38 -= 2 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
      if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_78:
        unint64_t v42 = (char *)*((void *)v18 + 6);
        uint64_t v74 = (char *)*((void *)v18 + 7);
        *((void *)v18 + 6) = v38;
        *((void *)v18 + 7) = v32;
        uint64_t v57 = *((void *)v18 + 8);
        *((void *)v18 + 8) = v39;
        while (v74 != v42)
        {
          uint64_t v76 = (void (***)(void))*((void *)v74 - 1);
          v74 -= 8;
          int8x16_t v75 = v76;
          *(void *)uint64_t v74 = 0;
          if (v76)
          {
            (**v75)(v75);
            {
              operator new();
            }
            __n128 result = (float *)(*(uint64_t (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v75, 104);
          }
        }
LABEL_86:
        if (!v42) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      long long v67 = (char *)*((void *)v18 + 7);
    }
    do
    {
      uint64_t v73 = *((void *)v67 - 1);
      v67 -= 8;
      *(void *)long long v67 = 0;
      *((void *)v38 - 1) = v73;
      v38 -= 2;
    }
    while (v67 != v60);
    goto LABEL_78;
  }
  *((void *)v18 + 6) = v38;
  *((void *)v18 + 7) = v32;
  uint64_t v57 = *((void *)v18 + 8);
  *((void *)v18 + 8) = v39;
  if (v42) {
LABEL_87:
  }
    __n128 result = (float *)(*(uint64_t (**)(void, char *, uint64_t))(**((void **)v18 + 9) + 40))(*((void *)v18 + 9), v42, v57 - (void)v42);
LABEL_88:
  *((void *)v18 + 7) = v32;
  if (v77)
  {
    (**v77)(v77);
    {
        operator new();
    }
    return (float *)(*(uint64_t (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v77, 104);
  }
  return result;
}

void sub_1A24D41B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<md::TrafficRibbon,mdm::TypeDeleter<md::TrafficRibbon>>::~unique_ptr[abi:nn180100]((void (****)(void))va);
  _Unwind_Resume(a1);
}

void (****std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>::~unique_ptr[abi:nn180100](void (****a1)(void)))(void)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    (**v2)(v2);
    unint64_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      unint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v5) {
        operator new();
      }
    }
    (*(void (**)(void, void (***)(void), uint64_t))(**((void **)v3 + 91) + 40))(*((void *)v3 + 91), v2, 112);
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      uint64_t v4 = (void *)__p[4];
      uint64_t v5 = __p[3];
      if (v4 != v3)
      {
        do
        {
          uint64_t v7 = (void (***)(void, uint64_t))*--v4;
          float v6 = v7;
          *uint64_t v4 = 0;
          if (v7)
          {
            (**v6)(v6, v5);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v6, 112);
          }
        }
        while (v4 != v3);
        uint64_t v5 = __p[3];
      }
      __p[4] = v3;
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)__p[6] + 40))(__p[6], v5, __p[5] - v5);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void md::DottedRouteLineRibbon::~DottedRouteLineRibbon(md::DottedRouteLineRibbon *this)
{
  *(void *)this = &unk_1EF553D90;
  if (*((unsigned char *)this + 64))
  {
    uint64_t v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
  JUMPOUT(0x1A6239270);
}

{
  float *v2;
  int v3;

  *(void *)this = &unk_1EF553D90;
  if (*((unsigned char *)this + 64))
  {
    uint64_t v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v3) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v2 + 91) + 40))(*((void *)v2 + 91), *((void *)this + 9), 0);
  }
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<md::RouteStyledOverlayBatchKey const,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>>::~pair((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void md::RouteStyledOverlayRibbon::~RouteStyledOverlayRibbon(md::RouteStyledOverlayRibbon *this)
{
  *(void *)this = &unk_1EF545860;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF553D90;
  if (*((unsigned char *)this + 64))
  {
    int v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v4) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v3 + 91) + 40))(*((void *)v3 + 91), *((void *)this + 9), 0);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  float *v3;
  int v4;

  *(void *)this = &unk_1EF545860;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF553D90;
  if (*((unsigned char *)this + 64))
  {
    int v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      int v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v4) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v3 + 91) + 40))(*((void *)v3 + 91), *((void *)this + 9), 0);
  }
}

void md::RouteLineSection::dumpStyleAttributes(md::RouteLineSection *this)
{
  v40[19] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 45);
  uint64_t v3 = *(void *)(v2 + 520);
  int v4 = *(std::__shared_weak_count **)(v2 + 528);
  *(void *)&long long v32 = v3;
  *((void *)&v32 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __dst[0] = (void *)(v3 + 16);
  uint64_t v5 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(v3 + 16));
  if (v5) {
    geo::read_write_lock::logFailure(v5, (uint64_t)"read lock", v6);
  }
  gss::attributesToString((unsigned __int16 *)(v3 + 216), 1, 0, 0, v28);
  uint64_t v7 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v3 + 16));
  if (v7) {
    geo::read_write_lock::logFailure(v7, (uint64_t)"unlock", v8);
  }
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (GEOGetVectorKitRouteLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_33);
  }
  uint64_t v9 = (id)GEOGetVectorKitRouteLog_log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *((void *)this + 31);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 32);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v32);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"{\n", 2);
    uint64_t v12 = *(void *)(v11 + 240);
    for (uint64_t i = *(void *)(v11 + 248); v12 != i; v12 += 8)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"  ", 2);
      uint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" = ", 3);
      int v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)";\n", 2);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"}", 1);
    if ((v39 & 0x10) != 0)
    {
      unint64_t v18 = v38;
      if (v38 < v35)
      {
        unint64_t v38 = v35;
        unint64_t v18 = v35;
      }
      float v19 = (const void **)&v34;
    }
    else
    {
      if ((v39 & 8) == 0)
      {
        size_t v16 = 0;
        HIBYTE(v27) = 0;
        unsigned int v17 = __dst;
        goto LABEL_32;
      }
      float v19 = (const void **)v33;
      unint64_t v18 = v33[2];
    }
    unint64_t v20 = *v19;
    size_t v16 = v18 - (void)*v19;
    if (v16 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v16 >= 0x17)
    {
      uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v21 = v16 | 7;
      }
      uint64_t v22 = v21 + 1;
      unsigned int v17 = (void **)operator new(v21 + 1);
      __dst[1] = (void *)v16;
      int64_t v27 = v22 | 0x8000000000000000;
      __dst[0] = v17;
    }
    else
    {
      HIBYTE(v27) = v18 - *(unsigned char *)v19;
      unsigned int v17 = __dst;
      if (!v16) {
        goto LABEL_32;
      }
    }
    memmove(v17, v20, v16);
LABEL_32:
    *((unsigned char *)v17 + v16) = 0;
    *(void *)&long long v32 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v33[-1] + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&v32 + 1) = MEMORY[0x1E4FBA470] + 16;
    if (v37 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A62391A0](v40);
    unint64_t v23 = __dst;
    if (v27 < 0) {
      unint64_t v23 = (void **)__dst[0];
    }
    *(_DWORD *)buf = 136315138;
    long long v31 = v23;
    _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_INFO, "Feature Attributes\n %s", buf, 0xCu);
    if (SHIBYTE(v27) < 0) {
      operator delete(__dst[0]);
    }
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  if (GEOGetVectorKitRouteLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_33);
  }
  uint64_t v24 = (id)GEOGetVectorKitRouteLog_log;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    uint64_t v25 = v28;
    if (v29 < 0) {
      uint64_t v25 = (void **)v28[0];
    }
    LODWORD(v32) = 136315138;
    *(void *)((char *)&v32 + 4) = v25;
    _os_log_impl(&dword_1A1780000, v24, OS_LOG_TYPE_INFO, "Client Attributes\n %s", (uint8_t *)&v32, 0xCu);
  }

  if (v29 < 0) {
    operator delete(v28[0]);
  }
}

void sub_1A24D4DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);

  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t md::IdentifiedGEOResourceFetcher::tileSetInfo@<X0>(void **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = 0;
  uint64_t result = geo::_retain_ptr<GEOActiveTileSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(this[65], &v7);
  if (result)
  {
    char v5 = 0;
  }
  else
  {
    uint64_t v6 = [this[65] style];
    uint64_t result = [this[65] version];
    *(void *)(a2 + 4) = result | (unint64_t)(v6 << 32);
    char v5 = 1;
  }
  *(unsigned char *)a2 = v5;
  return result;
}

void sub_1A24D4EE4(_Unwind_Exception *exception_object)
{
}

void md::IdentifiedGEOResourceFetcher::createDebugNode(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1;
  gdc::ResourceFetcher::createDebugNode(a1, a2, a3);
  v28[23] = 12;
  strcpy(v28, "Preload Only");
  uint64_t v5 = *((unsigned __int8 *)v3 + 504);
  int v27 = 0;
  memset(&v26[4], 0, 24);
  v26[0] = v5;
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v28, (uint64_t)v26);
  uint64_t v6 = *((unsigned __int8 *)v3 + 505);
  v28[23] = 12;
  strcpy(v28, "Require Wifi");
  int v25 = 0;
  memset(&v24[4], 0, 24);
  v24[0] = v6;
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v28, (uint64_t)v24);
  uint64_t v7 = (char *)operator new(0x20uLL);
  *(void *)float32x2_t v28 = v7;
  *(_OWORD *)&v28[8] = xmmword_1A28FCDC0;
  strcpy(v7, "Tile Loader Client Identifier");
  int v8 = (void *)v3[56];
  if (v8)
  {
    uint64_t v9 = (const std::string::value_type *)[v8 UTF8String];
    memset(&__p, 0, sizeof(__p));
    int v23 = 4;
    if (v9)
    {
      std::string::__assign_external(&__p, v9);
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
      qmemcpy(&__p, "<null>", 6);
    }
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    int v23 = 4;
    std::string::__assign_external(&__p, "null");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v28, (uint64_t)v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8) {

  }
  operator delete(v7);
  v28[23] = 10;
  strcpy(v28, "Tile Style");
  uint64_t v10 = @"RASTER_STANDARD";
  switch(*((_DWORD *)v3 + 127))
  {
    case 0:
      break;
    case 1:
      uint64_t v10 = @"VECTOR_STANDARD";
      break;
    case 2:
      uint64_t v10 = @"VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER";
      break;
    case 3:
      uint64_t v10 = @"VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER";
      break;
    case 4:
      uint64_t v10 = @"VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER";
      break;
    case 5:
      uint64_t v10 = @"RASTER_STANDARD_BACKGROUND";
      break;
    case 6:
      uint64_t v10 = @"RASTER_HYBRID";
      break;
    case 7:
      uint64_t v10 = @"RASTER_SATELLITE";
      break;
    case 8:
      uint64_t v10 = @"RASTER_TERRAIN";
      break;
    case 0xB:
      uint64_t v10 = @"VECTOR_BUILDINGS";
      break;
    case 0xC:
      uint64_t v10 = @"VECTOR_TRAFFIC";
      break;
    case 0xD:
      uint64_t v10 = @"VECTOR_POI";
      break;
    case 0xE:
      uint64_t v10 = @"SPUTNIK_METADATA";
      break;
    case 0xF:
      uint64_t v10 = @"SPUTNIK_C3M";
      break;
    case 0x10:
      uint64_t v10 = @"SPUTNIK_DSM";
      break;
    case 0x11:
      uint64_t v10 = @"SPUTNIK_DSM_GLOBAL";
      break;
    case 0x12:
      uint64_t v10 = @"VECTOR_REALISTIC";
      break;
    case 0x13:
      uint64_t v10 = @"VECTOR_LEGACY_REALISTIC";
      break;
    case 0x14:
      uint64_t v10 = @"VECTOR_ROADS";
      break;
    case 0x15:
      uint64_t v10 = @"RASTER_VEGETATION";
      break;
    case 0x16:
      uint64_t v10 = @"VECTOR_TRAFFIC_SKELETON";
      break;
    case 0x17:
      uint64_t v10 = @"RASTER_COASTLINE_MASK";
      break;
    case 0x18:
      uint64_t v10 = @"RASTER_HILLSHADE";
      break;
    case 0x19:
      uint64_t v10 = @"VECTOR_TRAFFIC_WITH_GREEN";
      break;
    case 0x1A:
      uint64_t v10 = @"VECTOR_TRAFFIC_STATIC";
      break;
    case 0x1B:
      uint64_t v10 = @"RASTER_COASTLINE_DROP_MASK";
      break;
    case 0x1C:
      uint64_t v10 = @"VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL";
      break;
    case 0x1D:
      uint64_t v10 = @"VECTOR_SPEED_PROFILES";
      break;
    case 0x1E:
      uint64_t v10 = @"VECTOR_VENUES";
      break;
    case 0x1F:
      uint64_t v10 = @"RASTER_DOWN_SAMPLED";
      break;
    case 0x20:
      uint64_t v10 = @"RASTER_COLOR_BALANCED";
      break;
    case 0x21:
      uint64_t v10 = @"RASTER_SATELLITE_NIGHT";
      break;
    case 0x22:
      uint64_t v10 = @"SPUTNIK_VECTOR_BORDER";
      break;
    case 0x23:
      uint64_t v10 = @"RASTER_SATELLITE_DIGITIZE";
      break;
    case 0x24:
      uint64_t v10 = @"RASTER_HILLSHADE_PARKS";
      break;
    case 0x25:
      uint64_t v10 = @"VECTOR_TRANSIT";
      break;
    case 0x26:
      uint64_t v10 = @"RASTER_STANDARD_BASE";
      break;
    case 0x27:
      uint64_t v10 = @"RASTER_STANDARD_LABELS";
      break;
    case 0x28:
      uint64_t v10 = @"RASTER_HYBRID_ROADS";
      break;
    case 0x29:
      uint64_t v10 = @"RASTER_HYBRID_LABELS";
      break;
    case 0x2A:
      uint64_t v10 = @"FLYOVER_C3M_MESH";
      break;
    case 0x2B:
      uint64_t v10 = @"FLYOVER_C3M_JPEG_TEXTURE";
      break;
    case 0x2C:
      uint64_t v10 = @"FLYOVER_C3M_ASTC_TEXTURE";
      break;
    case 0x2D:
      uint64_t v10 = @"RASTER_SATELLITE_ASTC";
      break;
    case 0x2E:
      uint64_t v10 = @"RASTER_HYBRID_ROADS_AND_LABELS";
      break;
    case 0x2F:
      uint64_t v10 = @"VECTOR_TRANSIT_SELECTION";
      break;
    case 0x30:
      uint64_t v10 = @"VECTOR_COVERAGE";
      break;
    case 0x34:
      uint64_t v10 = @"FLYOVER_METADATA";
      break;
    case 0x35:
      uint64_t v10 = @"VECTOR_ROAD_NETWORK";
      break;
    case 0x36:
      uint64_t v10 = @"VECTOR_LAND_COVER";
      break;
    case 0x37:
      uint64_t v10 = @"VECTOR_DEBUG";
      break;
    case 0x38:
      uint64_t v10 = @"VECTOR_STREET_POI";
      break;
    case 0x39:
      uint64_t v10 = @"MUNIN_METADATA";
      break;
    case 0x3A:
      uint64_t v10 = @"VECTOR_SPR_MERCATOR";
      break;
    case 0x3B:
      uint64_t v10 = @"VECTOR_SPR_MODELS";
      break;
    case 0x3C:
      uint64_t v10 = @"VECTOR_SPR_MATERIALS";
      break;
    case 0x3D:
      uint64_t v10 = @"VECTOR_SPR_METADATA";
      break;
    case 0x3E:
      uint64_t v10 = @"VECTOR_TRACKS";
      break;
    case 0x3F:
      uint64_t v10 = @"VECTOR_RESERVED_2";
      break;
    case 0x40:
      uint64_t v10 = @"VECTOR_STREET_LANDMARKS";
      break;
    case 0x41:
      uint64_t v10 = @"COARSE_LOCATION_POLYGONS";
      break;
    case 0x42:
      uint64_t v10 = @"VECTOR_SPR_ROADS";
      break;
    case 0x43:
      uint64_t v10 = @"VECTOR_SPR_STANDARD";
      break;
    case 0x44:
      uint64_t v10 = @"VECTOR_POI_V2";
      break;
    case 0x45:
      uint64_t v10 = @"VECTOR_POLYGON_SELECTION";
      break;
    case 0x46:
      uint64_t v10 = @"VL_METADATA";
      break;
    case 0x47:
      uint64_t v10 = @"VL_DATA";
      break;
    case 0x48:
      uint64_t v10 = @"PROACTIVE_APP_CLIP";
      break;
    case 0x49:
      uint64_t v10 = @"VECTOR_BUILDINGS_V2";
      break;
    case 0x4A:
      uint64_t v10 = @"POI_BUSYNESS";
      break;
    case 0x4B:
      uint64_t v10 = @"POI_DP_BUSYNESS";
      break;
    case 0x4C:
      uint64_t v10 = @"SMART_INTERFACE_SELECTION";
      break;
    case 0x4D:
      uint64_t v10 = @"VECTOR_ASSETS";
      break;
    case 0x4E:
      uint64_t v10 = @"SPR_ASSET_METADATA";
      break;
    case 0x4F:
      uint64_t v10 = @"VECTOR_SPR_POLAR";
      break;
    case 0x50:
      uint64_t v10 = @"SMART_DATA_MODE";
      break;
    case 0x51:
      uint64_t v10 = @"CELLULAR_PERFORMANCE_SCORE";
      break;
    case 0x52:
      uint64_t v10 = @"VECTOR_SPR_MODELS_OCCLUSION";
      break;
    case 0x53:
      uint64_t v10 = @"VECTOR_TOPOGRAPHIC";
      break;
    case 0x54:
      uint64_t v10 = @"VECTOR_POI_V2_UPDATE";
      break;
    case 0x55:
      uint64_t v10 = @"VECTOR_LIVE_DATA_UPDATES";
      break;
    case 0x56:
      uint64_t v10 = @"VECTOR_TRAFFIC_V2";
      break;
    case 0x57:
      uint64_t v10 = @"VECTOR_ROAD_SELECTION";
      break;
    case 0x58:
      uint64_t v10 = @"VECTOR_REGION_METADATA";
      break;
    case 0x59:
      uint64_t v10 = @"RAY_TRACING";
      break;
    case 0x5A:
      uint64_t v10 = @"VECTOR_CONTOURS";
      break;
    case 0x5B:
      uint64_t v10 = @"RASTER_SATELLITE_POLAR";
      break;
    case 0x5C:
      uint64_t v10 = @"VMAP4_ELEVATION";
      break;
    case 0x5D:
      uint64_t v10 = @"VMAP4_ELEVATION_POLAR";
      break;
    case 0x5E:
      uint64_t v10 = @"CELLULAR_COVERAGE_PLMN";
      break;
    case 0x5F:
      uint64_t v10 = @"RASTER_SATELLITE_POLAR_NIGHT";
      break;
    case 0x60:
      uint64_t v10 = @"UNUSED_96";
      break;
    case 0x61:
      uint64_t v10 = @"UNUSED_97";
      break;
    case 0x62:
      uint64_t v10 = @"UNUSED_98";
      break;
    case 0x63:
      uint64_t v10 = @"UNUSED_99";
      break;
    case 0x64:
      uint64_t v10 = @"UNUSED_100";
      break;
    case 0x65:
      uint64_t v10 = @"UNUSED_101";
      break;
    case 0x66:
      uint64_t v10 = @"UNUSED_102";
      break;
    case 0x67:
      uint64_t v10 = @"UNUSED_103";
      break;
    case 0x68:
      uint64_t v10 = @"UNUSED_104";
      break;
    case 0x69:
      uint64_t v10 = @"UNUSED_105";
      break;
    case 0x6A:
      uint64_t v10 = @"UNUSED_106";
      break;
    case 0x6B:
      uint64_t v10 = @"UNUSED_107";
      break;
    case 0x6C:
      uint64_t v10 = @"UNUSED_108";
      break;
    case 0x6D:
      uint64_t v10 = @"UNUSED_109";
      break;
    case 0x6E:
      uint64_t v10 = @"UNUSED_110";
      break;
    case 0x6F:
      uint64_t v10 = @"UNUSED_111";
      break;
    case 0x70:
      uint64_t v10 = @"UNUSED_112";
      break;
    case 0x71:
      uint64_t v10 = @"UNUSED_113";
      break;
    case 0x72:
      uint64_t v10 = @"UNUSED_114";
      break;
    case 0x73:
      uint64_t v10 = @"UNUSED_115";
      break;
    case 0x74:
      uint64_t v10 = @"UNUSED_116";
      break;
    case 0x75:
      uint64_t v10 = @"UNUSED_117";
      break;
    case 0x76:
      uint64_t v10 = @"UNUSED_118";
      break;
    case 0x77:
      uint64_t v10 = @"UNUSED_119";
      break;
    default:
      objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", *((unsigned int *)v3 + 127));
      uint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
  }
  uint64_t v11 = v10;
  uint64_t v12 = (const std::string::value_type *)[(__CFString *)v11 UTF8String];
  memset(&v19, 0, sizeof(v19));
  int v20 = 4;
  if (v12)
  {
    std::string::__assign_external(&v19, v12);
  }
  else
  {
    *((unsigned char *)&v19.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v19, "<null>");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v28, (uint64_t)v18);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }

  uint64_t v13 = (void *)v3[65];
  v28[23] = 8;
  strcpy(v28, "Tile Set");
  if (v13)
  {
    uint64_t v3 = [v13 description];
    uint64_t v14 = (const std::string::value_type *)[v3 UTF8String];
    memset(&v16, 0, sizeof(v16));
    int v17 = 4;
    if (v14)
    {
      std::string::__assign_external(&v16, v14);
    }
    else
    {
      *((unsigned char *)&v16.__r_.__value_.__s + 23) = 6;
      qmemcpy(&v16, "<null>", 6);
    }
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    int v17 = 4;
    std::string::__assign_external(&v16, "null");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v28, (uint64_t)v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v13)
  {

    if ((v28[23] & 0x80000000) != 0) {
      operator delete(*(void **)v28);
    }
  }
}

void sub_1A24D57E4(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::expireResource(md::IdentifiedGEOResourceFetcher *this, const gdc::ResourceKey *a2)
{
  v6[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*(uint64_t (**)(md::IdentifiedGEOResourceFetcher *, void, const gdc::ResourceKey *))(*(void *)this + 136))(this, *((void *)this + 65), a2);
  uint64_t v4 = v3;
  uint64_t v5 = [MEMORY[0x1E4F64AC8] modernLoader];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___ZN2md28IdentifiedGEOResourceFetcher14expireResourceERKN3gdc11ResourceKeyE_block_invoke;
  void v6[3] = &__block_descriptor_48_e723_B24__0r___GEOTileKey_b7b1_____GEOStandardTileKey_b40b6b26b26b14b4b4___GEOGloriaQuadIDTileKey_b6b64b14b4______b10b10b12_I____GEORegionalResourceKey_b32b8b6b8b8b1b57___GEOSputnikMetadataKey_b32b24b14b8b42___GEOFlyoverKey_b6b26b26b8b24b14b8b8___GEOTransitLineSelectionKey_b6b25b25b64___GEOPolygonSelectionKey_b6b25b25b64___GEORoadSelectionKey_b6b25b25b64___GEOContourLinesKey_b6b26b26b4b8b50___GEOTileOverlayKey_b6b26b26b8b32b16b6___GEOIdentifiedResourceKey_QCCb1b39___GEOMuninMeshKey_b64b32b16b5b3___GEOVisualLocalizationTrackKey_SCb16b6b26b26b22___GEOVisualLocalizationMetadataKey_b6b9b25b6b26b26b22___GEOVisualLocalizationDataKey_QCb5b21b21b1___GEOS2TileKey_b6b26b26b3b14b4b4b37___GEOLiveTileKey_b6b26b26b14b4b4b4b36___8d16l;
  v6[4] = v2;
  v6[5] = v4;
  [v5 expireTilesWithPredicate:v6];
}

void sub_1A24D5B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN2md28IdentifiedGEOResourceFetcher14expireResourceERKN3gdc11ResourceKeyE_block_invoke()
{
  return GEOTileKeyEquals();
}

void md::IdentifiedGEOResourceFetcher::cancelAllResources(md::IdentifiedGEOResourceFetcher *this)
{
  id v2 = [MEMORY[0x1E4F64AC8] modernLoader];
  [v2 cancelAllForClientSynchronous:*((void *)this + 56)];
}

void sub_1A24D5B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::cancelResources(id *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [MEMORY[0x1E4F64AC8] modernLoader];
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    id v6 = a1[65];
    uint64_t v9 = (*((uint64_t (**)(id *, id, void *))*a1 + 17))(a1, v6, i + 2);
    uint64_t v10 = v7;

    id v8 = a1[56];
    [v4 cancelKey:&v9 forClient:v8];
  }
}

void sub_1A24D5C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::~$_0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 16);
  if (v2 != *(void **)(a1 + 32)) {
    free(v2);
  }
  return a1;
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__2NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57ED90;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__2NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57ED90;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__2NSA_ISO_EEFvvEED0Ev()
{
}

void _ZNSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = *(void *)(v4 + 88);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57ED48;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57ED48;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEED0Ev()
{
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unint64_t **)(a1 + 8);
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v3 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = [*(id *)(a1 + 136) UTF8String];
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_1A1780000, v3, OS_LOG_TYPE_INFO, "Loading DevResource resource from: %s", (uint8_t *)&buf, 0xCu);
  }

  os_signpost_id_t v5 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:*(void *)(a1 + 136)];
  if (v5)
  {
    uint64_t v6 = operator new(0x38uLL);
    v6[1] = 0;
    v6[2] = 0;
    *uint64_t v6 = &unk_1EF582C50;
    *(void *)&long long buf = gdc::DataObject::DataObject((gdc::DataObject *)(v6 + 3), v5);
    *((void *)&buf + 1) = v6;
    gdc::ResourceKey::ResourceKey((uint64_t)&v41, 0xFFFF, a1 + 120, 0x10uLL, 0, 2147483646);
    char v48 = 1;
    int v7 = v53;
    uint64_t v8 = (char *)v42;
    uint64_t v49 = v41;
    *(void *)&long long __p = v53;
    uint64_t v51 = v53;
    uint64_t v52 = v44;
    if ((void **)v42 != v43)
    {
      long long __p = v42;
      goto LABEL_30;
    }
    uint64_t v11 = (char *)*((void *)&v42 + 1);
    unint64_t v12 = *((void *)&v42 + 1) - v42;
    *((void *)&__p + 1) = &v53[*((void *)&v42 + 1) - v42];
    if (*((void *)&v42 + 1) != (void)v42)
    {
      if (v12 < 8 || (unint64_t)((unint64_t)&buf - v42 + 64) < 0x20) {
        goto LABEL_29;
      }
      if (v12 >= 0x20)
      {
        unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v14 = (long long *)(v42 + 16);
        int v15 = v54;
        unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v17 = *v14;
          *(v15 - 1) = *(v14 - 1);
          *int v15 = v17;
          v14 += 2;
          v15 += 2;
          v16 -= 32;
        }
        while (v16);
        if (v12 == v13) {
          goto LABEL_30;
        }
        if ((v12 & 0x18) == 0)
        {
          v8 += v13;
          int v7 = &v53[v13];
          do
          {
LABEL_29:
            char v23 = *v8++;
            *v7++ = v23;
          }
          while (v8 != v11);
          goto LABEL_30;
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      unint64_t v18 = v12 & 0xFFFFFFFFFFFFFFF8;
      int v7 = &v53[v12 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v19 = v13 - (v12 & 0xFFFFFFFFFFFFFFF8);
      int v20 = (uint64_t *)&v8[v13];
      uint64_t v21 = (void *)((char *)&buf + v13 + 64);
      do
      {
        uint64_t v22 = *v20++;
        *v21++ = v22;
        v19 += 8;
      }
      while (v19);
      if (v12 != v18)
      {
        v8 += v18;
        goto LABEL_29;
      }
    }
LABEL_30:
    v54[2] = v45;
    long long v55 = v46;
    unint64_t v38 = (void (**)(void **))&unk_1EF57ED00;
    uint64_t v39 = a1 + 16;
    int32x4_t v40 = (void **)&v38;
    v36[0] = &unk_1EF57ECB8;
    v36[1] = a1 + 16;
    char v37 = v36;
    unint64_t v43 = (void **)&v41;
    int8x16_t v41 = (char *)&unk_1EF57ECB8;
    *(void *)&long long v42 = a1 + 16;
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    uint64_t v24 = (id)GEOGetVectorKitResourceLoadingLog_log;
    int v25 = v24;
    uint64_t v26 = v39;
    os_signpost_id_t v27 = *(void *)(v39 + 80);
    if (v27 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
    {
      uint64_t v28 = *(void *)(v26 + 88);
      *(_DWORD *)uint64_t v56 = 134217984;
      uint64_t v57 = v28;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v25, OS_SIGNPOST_INTERVAL_BEGIN, v27, "CreateResource", "parent_signpost=%llu", v56, 0xCu);
    }

    if (v37 == v36)
    {
      (*(void (**)(void *))(v36[0] + 32))(v36);
    }
    else if (v37)
    {
      (*(void (**)(void))(*v37 + 40))();
    }
    if (v40 == (void **)&v38)
    {
      v38[4]((void **)&v38);
    }
    else if (v40)
    {
      (*((void (**)(void))*v40 + 5))();
    }
    if ((*(uint64_t (**)(unint64_t *, void, uint64_t, uint64_t, void, void, void, long long *))(*v2 + 128))(v2, *(void *)(a1 + 112), a1 + 16, 1, 0, 0, 0, &buf))
    {
      char v29 = 0;
    }
    else
    {
      unint64_t v30 = (void *)MEMORY[0x1E4F28C58];
      long long v31 = GEOErrorDomain();
      char v29 = [v30 errorWithDomain:v31 code:-11 userInfo:0];
    }
    id v32 = v29;
    unint64_t v33 = atomic_load(v2 + 13);
    if (v33) {
      (*(void (**)(unint64_t, id))(*(void *)v33 + 24))(v33, v32);
    }

    if (!v43)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      JUMPOUT(0x1A24D66BCLL);
    }
    (*((void (**)(void **))*v43 + 6))(v43);
    if (v43 == (void **)&v41)
    {
      (*((void (**)(char **))v41 + 4))(&v41);
      if (v48) {
        goto LABEL_53;
      }
    }
    else
    {
      if (v43) {
        (*((void (**)(void))*v43 + 5))();
      }
      if (v48)
      {
LABEL_53:
        if ((unsigned char *)__p != v51) {
          free((void *)__p);
        }
        char v48 = 0;
        uint64_t v34 = (std::__shared_weak_count *)*((void *)&buf + 1);
        if (!*((void *)&buf + 1)) {
          goto LABEL_61;
        }
        goto LABEL_59;
      }
    }
    uint64_t v34 = (std::__shared_weak_count *)*((void *)&buf + 1);
    if (!*((void *)&buf + 1))
    {
LABEL_61:

      goto LABEL_62;
    }
LABEL_59:
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    goto LABEL_61;
  }
  uint64_t v9 = (char *)operator new(0x30uLL);
  int8x16_t v41 = v9;
  long long v42 = xmmword_1A28FD510;
  strcpy(v9, "Failed to load resource from dev resouces");
  gdc::Error::Error((uint64_t)&buf, 42, "IdentifiedGEOResourceFetcher", (long long *)&v41);
  operator delete(v9);
  (*(void (**)(unint64_t *, void, uint64_t, long long *))(*v2 + 112))(v2, *(void *)(a1 + 112), a1 + 16, &buf);
  unint64_t v10 = atomic_load(v2 + 13);
  if (v10) {
    (*(void (**)(unint64_t, void))(*(void *)v10 + 24))(v10, 0);
  }
  if (SHIBYTE(v51) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      goto LABEL_62;
    }
  }
  else if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(*((void **)&buf + 1));
LABEL_62:
  unint64_t v35 = *(NSObject **)(a1 + 144);
  if (v35) {
    dispatch_semaphore_signal(v35);
  }
}

void sub_1A24D67CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20)
{
  if (a20 == &a17)
  {
    (*(void (**)(uint64_t *))(a17 + 32))(&a17);
    _Unwind_Resume(a1);
  }
  if (a20)
  {
    (*(void (**)(void))(*a20 + 40))();
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = *(void *)(v4 + 88);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57ECB8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57ECB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = *(void *)(v4 + 88);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57ED00;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57ED00;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::destroy_deallocate(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != *(void **)(a1 + 40)) {
    free(v2);
  }
  operator delete((void *)a1);
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != *(void **)(a1 + 40))
  {
    free(v2);
  }
}

uint64_t std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5780F0;
  return std::__compressed_pair_elem<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (char *)(a1 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 32;
  os_signpost_id_t v5 = *(char **)(a2 + 16);
  uint64_t v6 = *(char **)(a2 + 24);
  unint64_t v7 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x21)
  {
    if (v7 <= 0x40) {
      size_t v8 = 64;
    }
    else {
      size_t v8 = v6 - v5;
    }
    uint64_t v4 = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    uint64_t v9 = *(char **)(a1 + 16);
    unint64_t v10 = *(char **)(a1 + 24);
    if (v9 == v10) {
      goto LABEL_21;
    }
    unint64_t v11 = v10 - v9;
    if ((unint64_t)(v10 - v9) < 8)
    {
      unint64_t v12 = v4;
      goto LABEL_20;
    }
    unint64_t v12 = v4;
    if ((unint64_t)(v4 - v9) < 0x20) {
      goto LABEL_20;
    }
    if (v11 >= 0x20)
    {
      unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v14 = (long long *)(v9 + 16);
      int v15 = v4 + 16;
      unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *int v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v11 == v13) {
        goto LABEL_21;
      }
      if ((v11 & 0x18) == 0)
      {
        v9 += v13;
        unint64_t v12 = &v4[v13];
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = &v4[v11 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v19 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    int v20 = (uint64_t *)&v9[v13];
    uint64_t v21 = &v4[v13];
    do
    {
      uint64_t v22 = *v20++;
      *(void *)uint64_t v21 = v22;
      v21 += 8;
      v19 += 8;
    }
    while (v19);
    if (v11 == v18) {
      goto LABEL_21;
    }
    v9 += v18;
    do
    {
LABEL_20:
      char v23 = *v9++;
      *v12++ = v23;
    }
    while (v9 != v10);
LABEL_21:
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 40) = v8;
  }
  if (v5 != v6)
  {
    if (v7 < 8)
    {
      int v25 = v4;
      goto LABEL_38;
    }
    if ((unint64_t)(v4 - v5) < 0x20)
    {
      int v25 = v4;
      goto LABEL_38;
    }
    if (v7 >= 0x20)
    {
      unint64_t v24 = v7 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v26 = (long long *)(v5 + 16);
      os_signpost_id_t v27 = v4 + 16;
      unint64_t v28 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *os_signpost_id_t v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32;
      }
      while (v28);
      if (v7 == v24) {
        goto LABEL_39;
      }
      if ((v7 & 0x18) == 0)
      {
        v5 += v24;
        int v25 = &v4[v24];
        goto LABEL_38;
      }
    }
    else
    {
      unint64_t v24 = 0;
    }
    unint64_t v30 = v7 & 0xFFFFFFFFFFFFFFF8;
    int v25 = &v4[v7 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v31 = v24 - (v7 & 0xFFFFFFFFFFFFFFF8);
    id v32 = (uint64_t *)&v5[v24];
    unint64_t v33 = &v4[v24];
    do
    {
      uint64_t v34 = *v32++;
      *(void *)unint64_t v33 = v34;
      v33 += 8;
      v31 += 8;
    }
    while (v31);
    if (v7 == v30) {
      goto LABEL_39;
    }
    v5 += v30;
    do
    {
LABEL_38:
      char v35 = *v5++;
      *v25++ = v35;
    }
    while (v5 != v6);
LABEL_39:
    uint64_t v4 = *(char **)(a1 + 24);
  }
  *(void *)(a1 + 24) = &v4[v7];
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  long long v36 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v36;
  *(void *)(a1 + 128) = *(id *)(a2 + 128);
  *(void *)(a1 + 136) = *(id *)(a2 + 136);
  return a1;
}

void *std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x98uLL);
  *uint64_t v2 = &unk_1EF5780F0;
  std::__compressed_pair_elem<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1A24D6EEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5780F0;

  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != *(void **)(a1 + 40)) {
    free(v2);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0,std::allocator<md::IdentifiedGEOResourceFetcher::fetchResources(std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>> const&,geo::TaskQueue *,NSObject  {objcproto21OS_dispatch_semaphore}*)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5780F0;

  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != *(void **)(a1 + 40)) {
    free(v2);
  }
  return a1;
}

void geo::_retain_ptr<GEOActiveTileSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559658;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<GEOActiveTileSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559658;

  return a1;
}

void md::IdentifiedGEOResourceFetcher::~IdentifiedGEOResourceFetcher(md::IdentifiedGEOResourceFetcher *this)
{
  *(void *)this = &unk_1EF54A318;
  uint64_t v2 = [MEMORY[0x1E4F64AC8] modernLoader];
  [v2 cancelAllForClient:*((void *)this + 56)];
  [v2 closeForClient:*((void *)this + 56)];

  *((void *)this + 64) = &unk_1EF559658;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 62);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *((void *)this + 58) = &unk_1EF559AF8;

  *((void *)this + 55) = &unk_1EF559F18;
  gdc::ResourceFetcher::~ResourceFetcher(this);
}

void sub_1A24D71E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 512) = &unk_1EF559658;
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 488);
  *(void *)(v1 + 464) = &unk_1EF559AF8;

  *(void *)(v1 + 440) = &unk_1EF559F18;
  gdc::ResourceFetcher::~ResourceFetcher((gdc::ResourceFetcher *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTextureCube>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = *(unsigned char **)v2;
      uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 7);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      if (v2[40]) {
        goto LABEL_7;
      }
LABEL_8:
      if ((char)v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v3;
      if (!v3) {
        goto LABEL_12;
      }
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v2[40]) {
      goto LABEL_8;
    }
LABEL_7:
    v2[40] = 0;
    goto LABEL_8;
  }
LABEL_12:
  os_signpost_id_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void md::TextureManager::purge(md::TextureManager *this)
{
  uint64_t v2 = (pthread_rwlock_t *)((char *)this + 64);
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 64));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  }
  if (*((void *)this + 61))
  {
    os_signpost_id_t v5 = (unsigned char *)*((void *)this + 60);
    if (v5)
    {
      while (1)
      {
        uint64_t v6 = *(unsigned char **)v5;
        unint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 7);
        if (v7)
        {
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v5[40]) {
          goto LABEL_10;
        }
LABEL_11:
        if ((char)v5[39] < 0) {
          operator delete(*((void **)v5 + 2));
        }
        operator delete(v5);
        os_signpost_id_t v5 = v6;
        if (!v6) {
          goto LABEL_15;
        }
      }
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v5[40]) {
        goto LABEL_11;
      }
LABEL_10:
      v5[40] = 0;
      goto LABEL_11;
    }
LABEL_15:
    *((void *)this + 60) = 0;
    uint64_t v8 = *((void *)this + 59);
    if (v8)
    {
      for (uint64_t i = 0; i != v8; ++i)
        *(void *)(*((void *)this + 58) + 8 * i) = 0;
    }
    *((void *)this + 61) = 0;
  }
  unint64_t v10 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if (v10) {
    geo::read_write_lock::logFailure(v10, (uint64_t)"unlock", v11);
  }
  unint64_t v12 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 264));
  if (v12) {
    geo::read_write_lock::logFailure(v12, (uint64_t)"write lock", v13);
  }
  if (*((void *)this + 66))
  {
    uint64_t v14 = (unsigned char *)*((void *)this + 65);
    if (v14)
    {
      while (1)
      {
        int v15 = *(unsigned char **)v14;
        unint64_t v16 = (std::__shared_weak_count *)*((void *)v14 + 7);
        if (v16)
        {
          if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v14[40]) {
          goto LABEL_30;
        }
LABEL_31:
        if ((char)v14[39] < 0) {
          operator delete(*((void **)v14 + 2));
        }
        operator delete(v14);
        uint64_t v14 = v15;
        if (!v15) {
          goto LABEL_35;
        }
      }
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (!v14[40]) {
        goto LABEL_31;
      }
LABEL_30:
      v14[40] = 0;
      goto LABEL_31;
    }
LABEL_35:
    *((void *)this + 65) = 0;
    uint64_t v17 = *((void *)this + 64);
    if (v17)
    {
      for (uint64_t j = 0; j != v17; ++j)
        *(void *)(*((void *)this + 63) + 8 * j) = 0;
    }
    *((void *)this + 66) = 0;
  }
  unint64_t v19 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)((char *)this + 264));
  if (v19)
  {
    geo::read_write_lock::logFailure(v19, (uint64_t)"unlock", v20);
  }
}

void md::TextureManager::texture(void *a1, void *a2, uint64_t a3, uint64_t *a4, int a5, float a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unsigned int v11 = vcvtps_s32_f32(a6);
  if (v11 >= 2)
  {
    do
    {
      v40[0] = 1;
      unsigned int v41 = v11;
      md::TextureManager::_texture(a1, (uint64_t)a2, a3, a4, a5, (uint64_t)v40);
      v40[0] = 0;
      unint64_t v12 = (void *)*a1;
      if (*a1)
      {
        if (v12[2])
        {
          unint64_t v13 = (std::__shared_weak_count *)v12[1];
          if (!v13 || (uint64_t v14 = std::__shared_weak_count::lock(v13)) == 0)
          {
            std::__throw_bad_weak_ptr[abi:nn180100]();
            goto LABEL_55;
          }
          int v15 = v14;
          if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (v12[4]) {
          return;
        }
      }
      unint64_t v16 = (std::__shared_weak_count *)a1[1];
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      --v11;
    }
    while (v11 > 1);
  }
  v37[0] = 0;
  md::TextureManager::_texture(&v38, (uint64_t)a2, a3, a4, a5, (uint64_t)v37);
  uint64_t v17 = v38;
  if (!v38) {
    goto LABEL_20;
  }
  if (!*(void *)(v38 + 16)) {
    goto LABEL_19;
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v38 + 8);
  if (v18)
  {
    unint64_t v19 = std::__shared_weak_count::lock(v18);
    if (v19)
    {
      int v20 = v19;
      if (atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_19:
        if (!*(void *)(v17 + 32)) {
          goto LABEL_20;
        }
LABEL_38:
        long long v29 = v39;
        *a1 = v17;
        a1[1] = v29;
        return;
      }
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
      if (*(void *)(v17 + 32)) {
        goto LABEL_38;
      }
LABEL_20:
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
      int v22 = (char)v21;
      if ((v21 & 0x80u) != 0) {
        uint64_t v21 = *(void *)(a3 + 8);
      }
      if (v21 != 5
        || (v22 >= 0 ? (uint64_t v23 = a3) : (uint64_t v23 = *(void *)a3),
            (int v24 = *(_DWORD *)v23, v25 = *(unsigned __int8 *)(v23 + 4), v24 == 1953065079)
          ? (BOOL v26 = v25 == 101)
          : (BOOL v26 = 0),
            !v26))
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        os_signpost_id_t v27 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a3 + 23) >= 0) {
            uint64_t v28 = a3;
          }
          else {
            uint64_t v28 = *(void *)a3;
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v43 = v28;
          _os_log_impl(&dword_1A1780000, v27, OS_LOG_TYPE_ERROR, "Missing texture: '%s'", buf, 0xCu);
        }

        goto LABEL_38;
      }
      unint64_t v30 = (char *)operator new(0x48uLL);
      unint64_t v31 = (std::__shared_weak_count *)v30;
      *((void *)v30 + 1) = 0;
      id v32 = (atomic_ullong *)(v30 + 8);
      *((void *)v30 + 2) = 0;
      *(void *)unint64_t v30 = &unk_1EF580020;
      *((void *)v30 + 3) = 0;
      unint64_t v33 = v30 + 24;
      *((void *)v30 + 4) = 0;
      *((void *)v30 + 5) = 0;
      *((_DWORD *)v30 + 12) = 0;
      uint64_t v34 = a2[1];
      *((void *)v30 + 7) = *a2;
      *((void *)v30 + 8) = v34;
      if (v34)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
        char v35 = (std::__shared_weak_count *)*((void *)v30 + 4);
        *a1 = v33;
        a1[1] = v31;
        if (v35)
        {
          if (v35->__shared_owners_ != -1)
          {
LABEL_50:
            long long v36 = v39;
            if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
            return;
          }
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v31[1].__vftable = (std::__shared_weak_count_vtbl *)&v31[1];
          v31[1].__shared_owners_ = (uint64_t)v31;
          std::__shared_weak_count::__release_weak(v35);
LABEL_48:
          if (!atomic_fetch_add(v32, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          goto LABEL_50;
        }
      }
      else
      {
        *a1 = v33;
        a1[1] = v30;
      }
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v31[1].__vftable = (std::__shared_weak_count_vtbl *)&v31[1];
      v31[1].__shared_owners_ = (uint64_t)v31;
      goto LABEL_48;
    }
  }
  std::__throw_bad_weak_ptr[abi:nn180100]();
LABEL_55:
  __break(1u);
}

void sub_1A24D79E4(_Unwind_Exception *a1, _Unwind_Exception *exception_object, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t exception_objecta)
{
}

void md::TextureManager::_texture(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v126 = *(std::string *)a3;
  }
  unsigned __int8 v127 = 0;
  if (*(unsigned char *)a6)
  {
    unsigned int v128 = *(_DWORD *)(a6 + 4);
    unsigned __int8 v127 = 1;
  }
  unint64_t v12 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a2 + 64));
  if (v12) {
    geo::read_write_lock::logFailure(v12, (uint64_t)"read lock", v13);
  }
  uint64_t v14 = (void **)(a2 + 464);
  int v15 = std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>>>::find<md::TextureManager::TextureKey>((void *)(a2 + 464), (uint64_t)&v126);
  if (v15)
  {
    uint64_t v16 = v15[7];
    *a1 = v15[6];
    a1[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 64));
    if (v17) {
      geo::read_write_lock::logFailure(v17, (uint64_t)"unlock", v18);
    }
    goto LABEL_222;
  }
  unint64_t v19 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 64));
  if (v19) {
    geo::read_write_lock::logFailure(v19, (uint64_t)"unlock", v20);
  }
  v124[0] = 0;
  if (*(unsigned char *)a6)
  {
    int v125 = *(_DWORD *)(a6 + 4);
    v124[0] = 1;
  }
  v123[0] = 0;
  uint64_t v21 = md::TextureManager::_loadData(a2, (uint64_t *)a3, (uint64_t)v124, (uint64_t)v123);
  v123[0] = 0;
  v124[0] = 0;
  uint64_t v22 = *a4;
  uint64_t v23 = (std::__shared_weak_count *)a4[1];
  v120[0] = v22;
  v120[1] = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  textureWithData(&v121, (void *)v21, v120, a5);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  long long v119 = 0uLL;
  uint64_t v118 = (pthread_rwlock_t *)(a2 + 64);
  int v24 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a2 + 64));
  if (v24) {
    geo::read_write_lock::logFailure(v24, (uint64_t)"write lock", v25);
  }
  BOOL v26 = std::__hash_table<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::__unordered_map_hasher<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,md::TextureManager::TextureKeyHash,std::equal_to<md::TextureManager::TextureKey>,true>,std::__unordered_map_equal<md::TextureManager::TextureKey,std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,std::equal_to<md::TextureManager::TextureKey>,md::TextureManager::TextureKeyHash,true>,std::allocator<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>>>::find<md::TextureManager::TextureKey>((void *)(a2 + 464), (uint64_t)&v126);
  os_signpost_id_t v27 = v26;
  if (!v26)
  {
    uint64_t v114 = v21;
    long long v29 = (char *)operator new(0x48uLL);
    unint64_t v30 = (std::__shared_weak_count *)v29;
    *((void *)v29 + 1) = 0;
    unint64_t v31 = (atomic_ullong *)(v29 + 8);
    *((void *)v29 + 2) = 0;
    *(void *)long long v29 = &unk_1EF580020;
    *((void *)v29 + 3) = 0;
    id v32 = v29 + 24;
    uint64_t v33 = *(void *)(a2 + 576);
    *((void *)v29 + 4) = 0;
    *((void *)v29 + 5) = v33;
    *((_DWORD *)v29 + 12) = 0;
    uint64_t v34 = v122;
    *((void *)v29 + 7) = v121;
    *((void *)v29 + 8) = v34;
    if (v34
      && (atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed),
          (char v35 = (std::__shared_weak_count *)*((void *)v29 + 4)) != 0))
    {
      if (v35->__shared_owners_ != -1) {
        goto LABEL_34;
      }
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v30[1].__vftable = (std::__shared_weak_count_vtbl *)&v30[1];
      v30[1].__shared_owners_ = (uint64_t)v30;
      std::__shared_weak_count::__release_weak(v35);
    }
    else
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v30[1].__vftable = (std::__shared_weak_count_vtbl *)&v30[1];
      v30[1].__shared_owners_ = (uint64_t)v30;
    }
    if (!atomic_fetch_add(v31, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
LABEL_34:
    long long v36 = (std::__shared_weak_count *)*((void *)&v119 + 1);
    *(void *)&long long v119 = v32;
    *((void *)&v119 + 1) = v30;
    if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    char v37 = (const std::string::value_type *)v126.__r_.__value_.__r.__words[0];
    int v113 = SHIBYTE(v126.__r_.__value_.__r.__words[2]);
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v38 = &v126;
    }
    else {
      uint64_t v38 = (std::string *)v126.__r_.__value_.__r.__words[0];
    }
    std::string::size_type __sz = v126.__r_.__value_.__l.__size_;
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v126.__r_.__value_.__l.__size_;
    }
    __s2 = v38;
    unint64_t v40 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v38, size);
    uint64_t v41 = ((v128 - 0x61C8864680B583ABLL) ^ 1) - 0x61C8864680B583EBLL;
    int v111 = v127;
    if (!v127) {
      uint64_t v41 = 0x9E3779B97F4A7C15;
    }
    unint64_t v42 = ((v40 >> 2) + (v40 << 6) + v41) ^ v40;
    unint64_t v43 = *(void *)(a2 + 472);
    if (v43)
    {
      uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
      v44.i16[0] = vaddlv_u8(v44);
      if (v44.u32[0] > 1uLL)
      {
        uint64_t v21 = ((v40 >> 2) + (v40 << 6) + v41) ^ v40;
        if (v42 >= v43) {
          uint64_t v21 = v42 % v43;
        }
      }
      else
      {
        uint64_t v21 = (v43 - 1) & v42;
      }
      uint64_t v45 = (void *)*((void *)*v14 + v21);
      if (v45)
      {
        long long v46 = (void (**)(void))*v45;
        if (*v45)
        {
          unsigned int v109 = v128;
          if (v44.u32[0] <= 1uLL)
          {
            uint64_t v108 = v37;
            unint64_t v47 = v43 - 1;
            if (!v127)
            {
              while (1)
              {
                unint64_t v53 = (unint64_t)v46[1];
                if (v53 != v42)
                {
                  if ((v53 & v47) != v21) {
                    goto LABEL_128;
                  }
                  goto LABEL_74;
                }
                uint64_t v54 = *((unsigned __int8 *)v46 + 39);
                if ((v54 & 0x80u) == 0) {
                  long long v55 = (void (*)(void))*((unsigned __int8 *)v46 + 39);
                }
                else {
                  long long v55 = v46[3];
                }
                if (v55 == (void (*)(void))size)
                {
                  uint64_t v56 = (const void **)(v46 + 2);
                  if ((v54 & 0x80) != 0)
                  {
                    if (memcmp(*v56, __s2, (size_t)v46[3])) {
                      goto LABEL_74;
                    }
                  }
                  else if (*((unsigned char *)v46 + 39))
                  {
                    uint64_t v57 = __s2;
                    while (*(unsigned __int8 *)v56 == v57->__r_.__value_.__s.__data_[0])
                    {
                      uint64_t v56 = (const void **)((char *)v56 + 1);
                      uint64_t v57 = (std::string *)((char *)v57 + 1);
                      if (!--v54) {
                        goto LABEL_87;
                      }
                    }
                    goto LABEL_74;
                  }
LABEL_87:
                  if (!*((unsigned char *)v46 + 40)) {
                    goto LABEL_127;
                  }
                }
LABEL_74:
                long long v46 = (void (**)(void))*v46;
                if (!v46) {
                  goto LABEL_128;
                }
              }
            }
            while (1)
            {
              unint64_t v48 = (unint64_t)v46[1];
              if (v48 == v42)
              {
                uint64_t v49 = *((unsigned __int8 *)v46 + 39);
                if ((v49 & 0x80u) == 0) {
                  unint64_t v50 = (void (*)(void))*((unsigned __int8 *)v46 + 39);
                }
                else {
                  unint64_t v50 = v46[3];
                }
                if (v50 == (void (*)(void))size)
                {
                  uint64_t v51 = (const void **)(v46 + 2);
                  if ((v49 & 0x80) != 0)
                  {
                    if (!memcmp(*v51, __s2, (size_t)v46[3]))
                    {
LABEL_70:
                      if (*((unsigned char *)v46 + 40) && *((_DWORD *)v46 + 11) == v109) {
                        goto LABEL_127;
                      }
                    }
                  }
                  else
                  {
                    if (!*((unsigned char *)v46 + 39)) {
                      goto LABEL_70;
                    }
                    uint64_t v52 = __s2;
                    while (*(unsigned __int8 *)v51 == v52->__r_.__value_.__s.__data_[0])
                    {
                      uint64_t v51 = (const void **)((char *)v51 + 1);
                      uint64_t v52 = (std::string *)((char *)v52 + 1);
                      if (!--v49) {
                        goto LABEL_70;
                      }
                    }
                  }
                }
              }
              else if ((v48 & v47) != v21)
              {
                goto LABEL_128;
              }
              long long v46 = (void (**)(void))*v46;
              if (!v46)
              {
LABEL_128:
                char v37 = v108;
                goto LABEL_129;
              }
            }
          }
          if (!v127)
          {
            while (1)
            {
              unint64_t v63 = (unint64_t)v46[1];
              if (v63 == v42)
              {
                uint64_t v64 = *((unsigned __int8 *)v46 + 39);
                if ((v64 & 0x80u) == 0) {
                  BOOL v65 = (void (*)(void))*((unsigned __int8 *)v46 + 39);
                }
                else {
                  BOOL v65 = v46[3];
                }
                if (v65 != (void (*)(void))size) {
                  goto LABEL_111;
                }
                uint64_t v66 = (const void **)(v46 + 2);
                if ((v64 & 0x80) != 0)
                {
                  if (memcmp(*v66, __s2, (size_t)v46[3])) {
                    goto LABEL_111;
                  }
                }
                else if (*((unsigned char *)v46 + 39))
                {
                  long long v67 = __s2;
                  while (*(unsigned __int8 *)v66 == v67->__r_.__value_.__s.__data_[0])
                  {
                    uint64_t v66 = (const void **)((char *)v66 + 1);
                    long long v67 = (std::string *)((char *)v67 + 1);
                    if (!--v64) {
                      goto LABEL_126;
                    }
                  }
                  goto LABEL_111;
                }
LABEL_126:
                if (!*((unsigned char *)v46 + 40)) {
                  goto LABEL_127;
                }
              }
              else
              {
                if (v63 >= v43) {
                  v63 %= v43;
                }
                if (v63 != v21) {
                  goto LABEL_129;
                }
              }
LABEL_111:
              long long v46 = (void (**)(void))*v46;
              if (!v46) {
                goto LABEL_129;
              }
            }
          }
          do
          {
            unint64_t v58 = (unint64_t)v46[1];
            if (v58 == v42)
            {
              uint64_t v59 = *((unsigned __int8 *)v46 + 39);
              if ((v59 & 0x80u) == 0) {
                int8x16_t v60 = (void (*)(void))*((unsigned __int8 *)v46 + 39);
              }
              else {
                int8x16_t v60 = v46[3];
              }
              if (v60 != (void (*)(void))size) {
                goto LABEL_92;
              }
              unint64_t v61 = (const void **)(v46 + 2);
              if ((v59 & 0x80) != 0)
              {
                if (memcmp(*v61, __s2, (size_t)v46[3])) {
                  goto LABEL_92;
                }
              }
              else if (*((unsigned char *)v46 + 39))
              {
                unint64_t v62 = __s2;
                while (*(unsigned __int8 *)v61 == v62->__r_.__value_.__s.__data_[0])
                {
                  unint64_t v61 = (const void **)((char *)v61 + 1);
                  unint64_t v62 = (std::string *)((char *)v62 + 1);
                  if (!--v59) {
                    goto LABEL_107;
                  }
                }
                goto LABEL_92;
              }
LABEL_107:
              if (*((unsigned char *)v46 + 40) && *((_DWORD *)v46 + 11) == v109)
              {
LABEL_127:
                uint64_t v21 = v114;
                goto LABEL_193;
              }
            }
            else
            {
              if (v58 >= v43) {
                v58 %= v43;
              }
              if (v58 != v21) {
                break;
              }
            }
LABEL_92:
            long long v46 = (void (**)(void))*v46;
          }
          while (v46);
        }
      }
    }
LABEL_129:
    uint64_t v68 = (char *)operator new(0x40uLL);
    unint64_t v69 = (void *)(a2 + 480);
    float32x4_t v129 = (void (**)(void))v68;
    uint64_t v130 = (uint64_t *)(a2 + 480);
    char v131 = 0;
    uint64_t v70 = (std::string *)(v68 + 16);
    *(void *)uint64_t v68 = 0;
    *((void *)v68 + 1) = v42;
    if (v113 < 0)
    {
      std::string::__init_copy_ctor_external(v70, v37, __sz);
      int v77 = v127;
      v68[40] = 0;
      if (!v77)
      {
LABEL_132:
        *((void *)v68 + 6) = 0;
        *((void *)v68 + 7) = 0;
        char v131 = 1;
        float v71 = (float)(unint64_t)(*(void *)(a2 + 488) + 1);
        float v72 = *(float *)(a2 + 496);
        if (v43 && (float)(v72 * (float)v43) >= v71)
        {
LABEL_184:
          uint64_t v94 = (void *)*((void *)*v14 + v21);
          if (v94)
          {
            *float32x4_t v129 = (void (*)(void))*v94;
            void *v94 = v129;
            uint64_t v21 = v114;
          }
          else
          {
            *float32x4_t v129 = (void (*)(void))*v69;
            *unint64_t v69 = v129;
            *((void *)*v14 + v21) = v69;
            uint64_t v21 = v114;
            if (*v129)
            {
              unint64_t v95 = *((void *)*v129 + 1);
              if ((v43 & (v43 - 1)) != 0)
              {
                if (v95 >= v43) {
                  v95 %= v43;
                }
              }
              else
              {
                v95 &= v43 - 1;
              }
              *((void *)*v14 + v95) = v129;
            }
          }
          long long v46 = v129;
          ++*(void *)(a2 + 488);
LABEL_193:
          std::string v96 = (void (*)(void))*((void *)&v119 + 1);
          if (*((void *)&v119 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v119 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v97 = (std::__shared_weak_count *)v46[7];
          v46[6] = (void (*)(void))v119;
          v46[7] = v96;
          if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
          if (v121)
          {
            (*(void (**)(void *__return_ptr))(**(void **)(a2 + 568) + 24))(&v117);
            float32x4_t v129 = (void (**)(void))&unk_1EF570DE8;
            uint64_t v130 = &v121;
            uint64_t v132 = &v129;
            uint64_t v115 = 0;
            uint64_t v116 = 0;
            (*((void (**)(void (**)(void), void (***)(void), uint64_t *))*v117 + 2))(v117, &v129, &v115);
            uint64_t v98 = v116;
            if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
            if (v132 == &v129)
            {
              v129[4](&v129);
            }
            else if (v132)
            {
              (*(void (**)(void))(*v132 + 40))();
            }
            if (v117)
            {
              uint64_t v99 = (*((uint64_t (**)(void))*v117 + 3))(v117);
              double v100 = v117;
              unint64_t v117 = 0;
              float32x4_t v129 = v100;
              (*(void (**)(uint64_t, void (***)(void)))(*(void *)v99 + 48))(v99, &v129);
              uint64_t v101 = v129;
              float32x4_t v129 = 0;
              if (v101) {
                (*((void (**)(void))*v101 + 1))(v101);
              }
              uint64_t v102 = v117;
              unint64_t v117 = 0;
              if (v102) {
                (*((void (**)(void))*v102 + 1))(v102);
              }
            }
          }
          goto LABEL_211;
        }
        BOOL v73 = 1;
        if (v43 >= 3) {
          BOOL v73 = (v43 & (v43 - 1)) != 0;
        }
        unint64_t v74 = v73 | (2 * v43);
        unint64_t v75 = vcvtps_u32_f32(v71 / v72);
        if (v74 <= v75) {
          size_t prime = v75;
        }
        else {
          size_t prime = v74;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
        }
        unint64_t v43 = *(void *)(a2 + 472);
        if (prime <= v43)
        {
          if (prime >= v43) {
            goto LABEL_171;
          }
          unint64_t v88 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 488) / *(float *)(a2 + 496));
          if (v43 < 3 || (uint8x8_t v89 = (uint8x8_t)vcnt_s8((int8x8_t)v43), v89.i16[0] = vaddlv_u8(v89), v89.u32[0] > 1uLL))
          {
            unint64_t v88 = std::__next_prime(v88);
          }
          else
          {
            uint64_t v90 = 1 << -(char)__clz(v88 - 1);
            if (v88 >= 2) {
              unint64_t v88 = v90;
            }
          }
          if (prime <= v88) {
            size_t prime = v88;
          }
          if (prime >= v43)
          {
            unint64_t v43 = *(void *)(a2 + 472);
LABEL_171:
            if ((v43 & (v43 - 1)) != 0)
            {
              if (v42 >= v43) {
                uint64_t v21 = v42 % v43;
              }
              else {
                uint64_t v21 = v42;
              }
            }
            else
            {
              uint64_t v21 = (v43 - 1) & v42;
            }
            goto LABEL_184;
          }
          if (!prime)
          {
            long long v107 = *v14;
            std::__shared_weak_count *v14 = 0;
            if (v107) {
              operator delete(v107);
            }
            unint64_t v43 = 0;
            *(void *)(a2 + 472) = 0;
            goto LABEL_171;
          }
        }
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        int32x4_t v78 = operator new(8 * prime);
        unint64_t v79 = *v14;
        std::__shared_weak_count *v14 = v78;
        if (v79) {
          operator delete(v79);
        }
        uint64_t v80 = 0;
        *(void *)(a2 + 472) = prime;
        do
          *((void *)*v14 + v80++) = 0;
        while (prime != v80);
        int8x16_t v81 = (void *)*v69;
        if (!*v69)
        {
LABEL_170:
          unint64_t v43 = prime;
          goto LABEL_171;
        }
        size_t v82 = v81[1];
        size_t v83 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v84 = v82 & v83;
          *((void *)*v14 + v84) = v69;
          for (uint64_t i = (void *)*v81; *v81; uint64_t i = (void *)*v81)
          {
            size_t v86 = i[1] & v83;
            if (v86 == v84)
            {
              int8x16_t v81 = i;
            }
            else if (*((void *)*v14 + v86))
            {
              *int8x16_t v81 = *i;
              uint64_t v87 = 8 * v86;
              void *i = **(void **)((char *)*v14 + v87);
              **(void **)((char *)*v14 + v87) = i;
            }
            else
            {
              *((void *)*v14 + v86) = v81;
              int8x16_t v81 = i;
              size_t v84 = v86;
            }
          }
          goto LABEL_170;
        }
        if (v82 >= prime) {
          v82 %= prime;
        }
        *((void *)*v14 + v82) = v69;
        uint64_t v91 = (void *)*v81;
        if (!*v81) {
          goto LABEL_170;
        }
        while (1)
        {
          size_t v93 = v91[1];
          if (v93 >= prime) {
            v93 %= prime;
          }
          if (v93 != v82)
          {
            if (!*((void *)*v14 + v93))
            {
              *((void *)*v14 + v93) = v81;
              goto LABEL_175;
            }
            *int8x16_t v81 = *v91;
            uint64_t v92 = 8 * v93;
            void *v91 = **(void **)((char *)*v14 + v92);
            **(void **)((char *)*v14 + v92) = v91;
            uint64_t v91 = v81;
          }
          size_t v93 = v82;
LABEL_175:
          int8x16_t v81 = v91;
          uint64_t v91 = (void *)*v91;
          size_t v82 = v93;
          if (!v91) {
            goto LABEL_170;
          }
        }
      }
    }
    else
    {
      *(_OWORD *)&v70->__r_.__value_.__l.__data_ = *(_OWORD *)&v126.__r_.__value_.__l.__data_;
      *((void *)v68 + 4) = *((void *)&v126.__r_.__value_.__l + 2);
      v68[40] = 0;
      if (!v111) {
        goto LABEL_132;
      }
    }
    *((_DWORD *)v68 + 11) = v128;
    v68[40] = 1;
    goto LABEL_132;
  }
  uint64_t v28 = v26[7];
  *a1 = v26[6];
  a1[1] = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_211:
  long long v103 = (geo::read_write_lock *)pthread_rwlock_unlock(v118);
  if (v103) {
    geo::read_write_lock::logFailure(v103, (uint64_t)"unlock", v104);
  }
  if (v27)
  {
    unint64_t v105 = (std::__shared_weak_count *)*((void *)&v119 + 1);
    if (*((void *)&v119 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v119 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  else
  {
    *(_OWORD *)a1 = v119;
  }
  uint64_t v106 = v122;
  if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
  }

LABEL_222:
  if (v127) {
    unsigned __int8 v127 = 0;
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
}

void sub_1A24D8800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, pthread_rwlock_t *a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v37 - 128));
  geo::write_lock_guard::~write_lock_guard(&a20);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a21);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a27);

  if (a37) {
    a37 = 0;
  }
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  ggl::Texture2D::vendImplicitLoadItem((ggl::Texture2D *)v4, **(void **)(a1 + 8));
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 24))(v2, v4);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_1A24D8994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19 == v19 + 48)
  {
    (*(void (**)(uint64_t))(a16 + 32))(v19 + 48);
    _Unwind_Resume(exception_object);
  }
  if (a19) {
    (*(void (**)(void))(*(void *)a19 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF570DE8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF570DE8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_texture(std::string const&,std::shared_ptr<ggl::SamplerState> &,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::TextureManager::TextureKey,std::shared_ptr<md::SharedTexture2D>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(std::__shared_weak_count **)(v2 + 56);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      if (*(unsigned char *)(v2 + 40)) {
        *(unsigned char *)(v2 + 40) = 0;
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF570DA0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF570DA0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

void std::__shared_ptr_emplace<md::SharedTextureCube>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
}

void std::__shared_ptr_emplace<md::SharedTextureCube>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::SharedTextureCube>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void XmlNode::~XmlNode(XmlNode *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        os_signpost_id_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

xmlChar *XmlNode::Attribute(const xmlNode **this, const xmlChar *a2)
{
  uint64_t v2 = *this;
  if (!v2) {
    return 0;
  }
  Prop = xmlGetProp(v2, a2);
  uint64_t v4 = Prop;
  if (Prop)
  {
    uint64_t v6 = Prop;
    operator new();
  }
  return v4;
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char>::__shared_ptr_default_delete<unsigned char,unsigned char>,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char>::__shared_ptr_default_delete<unsigned char,unsigned char>,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

xmlChar *XmlNode::Attribute(const xmlNode **this, const xmlChar *a2, int *a3)
{
  uint64_t v3 = *this;
  if (!v3) {
    return 0;
  }
  Prop = xmlGetProp(v3, a2);
  uint64_t v6 = Prop;
  if (Prop)
  {
    *a3 = atoi((const char *)Prop);
    uint64_t v8 = v6;
    operator new();
  }
  return v6;
}

xmlChar *XmlNode::Attribute(const xmlNode **this, const xmlChar *a2, double *a3)
{
  uint64_t v3 = *this;
  if (!v3) {
    return 0;
  }
  Prop = xmlGetProp(v3, a2);
  uint64_t v6 = Prop;
  if (Prop)
  {
    *a3 = atof((const char *)Prop);
    uint64_t v8 = v6;
    operator new();
  }
  return v6;
}

uint64_t std::__shared_ptr_pointer<_xmlDoc *,void (*)(_xmlDoc *),std::allocator<_xmlDoc>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<_xmlDoc *,void (*)(_xmlDoc *),std::allocator<_xmlDoc>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::FrameGraphResourceRegistry::~FrameGraphResourceRegistry(md::FrameGraphResourceRegistry *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    os_signpost_id_t v5 = (void *)*((void *)this + 2);
    if (!v5) {
      goto LABEL_12;
    }
  }
  else
  {
    os_signpost_id_t v5 = (void *)*((void *)this + 2);
    if (!v5) {
      goto LABEL_12;
    }
  }
  do
  {
    uint64_t v8 = (void *)*v5;
    uint64_t v9 = (void *)v5[8];
    if (v9)
    {
      unint64_t v10 = (void *)v5[9];
      uint64_t v7 = (void *)v5[8];
      if (v10 != v9)
      {
        do
        {
          unint64_t v12 = (uint64_t *)*--v10;
          unsigned int v11 = v12;
          void *v10 = 0;
          if (v12)
          {
            if (*((unsigned char *)v11 + 40)) {
              *((unsigned char *)v11 + 40) = 0;
            }
            if (*((unsigned char *)v11 + 16)) {
              *((unsigned char *)v11 + 16) = 0;
            }
            uint64_t v13 = *v11;
            uint64_t *v11 = 0;
            if (v13) {
              (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
            }
            MEMORY[0x1A6239270](v11, 0x1020C40BC9DCD72);
          }
        }
        while (v10 != v9);
        uint64_t v7 = (void *)v5[8];
      }
      v5[9] = v9;
      operator delete(v7);
    }
    operator delete(v5);
    os_signpost_id_t v5 = v8;
  }
  while (v8);
LABEL_12:
  uint64_t v6 = *(void **)this;
  *(void *)this = 0;
  if (v6) {
    operator delete(v6);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::__unordered_map_hasher<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::hash<md::ResourceKey>,std::equal_to<md::ResourceKey>,true>,std::__unordered_map_equal<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::equal_to<md::ResourceKey>,std::hash<md::ResourceKey>,true>,std::allocator<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>>>::find<md::ResourceKey>(void *a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*a2)
  {
    unint64_t v3 = *((void *)a2 + 1);
    uint64_t v4 = (v3 << 6) + (v3 >> 2) + *((unsigned int *)a2 + 4) - 0x61C8864680B583EBLL;
    goto LABEL_5;
  }
  if (a2[24])
  {
    unint64_t v5 = (((unint64_t)*((unsigned int *)a2 + 7) << 6)
        + ((unint64_t)*((unsigned int *)a2 + 7) >> 2)
        + *((unsigned int *)a2 + 8)
        - 0x61C8864680B583EBLL) ^ *((unsigned int *)a2 + 7);
    unint64_t v6 = (*((unsigned int *)a2 + 11) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
    unint64_t v3 = (*((unsigned int *)a2 + 10) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
    uint64_t v4 = *((unsigned int *)a2 + 9) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583EBLL;
LABEL_5:
    unint64_t v7 = v4 ^ v3;
    int8x8_t v8 = (int8x8_t)a1[1];
    if (!*(void *)&v8) {
      return 0;
    }
    goto LABEL_6;
  }
  unint64_t v7 = 0;
  int8x8_t v8 = (int8x8_t)a1[1];
  if (!*(void *)&v8) {
    return 0;
  }
LABEL_6:
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v10 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v8 - 1) & v7;
  }
  unsigned int v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v11)
  {
    unint64_t v12 = *v11;
    if (v12)
    {
      uint64_t v13 = *(void *)&v8 - 1;
      uint64_t v14 = *((void *)a2 + 1);
      int v15 = *((_DWORD *)a2 + 4);
      if (a2[24])
      {
        int v16 = *((_DWORD *)a2 + 7);
        int v17 = *((_DWORD *)a2 + 8);
        int v18 = *((_DWORD *)a2 + 9);
        int v19 = *((_DWORD *)a2 + 10);
        int v20 = *((_DWORD *)a2 + 11);
        if (v9.u32[0] > 1uLL)
        {
          if (!v2)
          {
            while (1)
            {
              unint64_t v24 = v12[1];
              if (v24 == v7)
              {
                if (*((unsigned char *)v12 + 40)
                  && *((_DWORD *)v12 + 11) == v16
                  && *((_DWORD *)v12 + 12) == v17
                  && *((_DWORD *)v12 + 13) == v18
                  && *((_DWORD *)v12 + 14) == v19
                  && *((_DWORD *)v12 + 15) == v20)
                {
                  return v12;
                }
              }
              else
              {
                if (v24 >= *(void *)&v8) {
                  v24 %= *(void *)&v8;
                }
                if (v24 != v10) {
                  return 0;
                }
              }
              uint64_t result = 0;
              unint64_t v12 = (uint64_t *)*v12;
              if (!v12) {
                return result;
              }
            }
          }
          while (1)
          {
            unint64_t v23 = v12[1];
            if (v23 == v7)
            {
              if (*((unsigned char *)v12 + 16))
              {
                if (v12[3] == v14 && *((_DWORD *)v12 + 8) == v15) {
                  return v12;
                }
              }
              else if (*((unsigned char *)v12 + 40) {
                     && *((_DWORD *)v12 + 11) == v16
              }
                     && *((_DWORD *)v12 + 12) == v17
                     && *((_DWORD *)v12 + 13) == v18
                     && *((_DWORD *)v12 + 14) == v19
                     && *((_DWORD *)v12 + 15) == v20)
              {
                return v12;
              }
            }
            else
            {
              if (v23 >= *(void *)&v8) {
                v23 %= *(void *)&v8;
              }
              if (v23 != v10) {
                return 0;
              }
            }
            uint64_t result = 0;
            unint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              return result;
            }
          }
        }
        while (1)
        {
          uint64_t v21 = v12[1];
          if (v21 == v7)
          {
            if (v2 && *((unsigned char *)v12 + 16))
            {
              if (v12[3] == v14 && *((_DWORD *)v12 + 8) == v15) {
                return v12;
              }
            }
            else if (*((unsigned char *)v12 + 40) {
                   && *((_DWORD *)v12 + 11) == v16
            }
                   && *((_DWORD *)v12 + 12) == v17
                   && *((_DWORD *)v12 + 13) == v18
                   && *((_DWORD *)v12 + 14) == v19
                   && *((_DWORD *)v12 + 15) == v20)
            {
              return v12;
            }
          }
          else if ((v21 & v13) != v10)
          {
            return 0;
          }
          unint64_t v12 = (uint64_t *)*v12;
          if (!v12) {
            return 0;
          }
        }
      }
      if (v9.u32[0] > 1uLL)
      {
        if (*a2)
        {
          while (1)
          {
            unint64_t v26 = v12[1];
            if (v26 == v7)
            {
              if (*((unsigned char *)v12 + 16) && v12[3] == v14 && *((_DWORD *)v12 + 8) == v15) {
                return v12;
              }
            }
            else
            {
              if (v26 >= *(void *)&v8) {
                v26 %= *(void *)&v8;
              }
              if (v26 != v10) {
                return 0;
              }
            }
            uint64_t result = 0;
            unint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              return result;
            }
          }
        }
      }
      else if (*a2)
      {
        while (1)
        {
          uint64_t v25 = v12[1];
          if (v25 == v7)
          {
            if (*((unsigned char *)v12 + 16) && v12[3] == v14 && *((_DWORD *)v12 + 8) == v15) {
              return v12;
            }
          }
          else if ((v25 & v13) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          unint64_t v12 = (uint64_t *)*v12;
          if (!v12) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

char *std::__hash_table<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::__unordered_map_hasher<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::hash<md::ResourceKey>,std::equal_to<md::ResourceKey>,true>,std::__unordered_map_equal<md::ResourceKey,std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>,std::equal_to<md::ResourceKey>,std::hash<md::ResourceKey>,true>,std::allocator<std::__hash_value_type<md::ResourceKey,std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>>>>::__emplace_unique_key_args<md::ResourceKey,std::piecewise_construct_t const&,std::tuple<md::ResourceKey const&>,std::tuple<>>(float *a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)a2)
  {
    unint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = (v6 << 6) + (v6 >> 2) + *(unsigned int *)(a2 + 16) - 0x61C8864680B583EBLL;
  }
  else
  {
    if (!*(unsigned char *)(a2 + 24))
    {
      unint64_t v10 = 0;
      unint64_t v11 = *((void *)a1 + 1);
      if (!v11) {
        goto LABEL_60;
      }
      goto LABEL_6;
    }
    unint64_t v8 = (((unint64_t)*(unsigned int *)(a2 + 28) << 6)
        + ((unint64_t)*(unsigned int *)(a2 + 28) >> 2)
        + *(unsigned int *)(a2 + 32)
        - 0x61C8864680B583EBLL) ^ *(unsigned int *)(a2 + 28);
    unint64_t v9 = (*(unsigned int *)(a2 + 44) + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
    unint64_t v6 = (*(unsigned int *)(a2 + 40) + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
    uint64_t v7 = *(unsigned int *)(a2 + 36) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL;
  }
  unint64_t v10 = v7 ^ v6;
  unint64_t v11 = *((void *)a1 + 1);
  if (!v11) {
    goto LABEL_60;
  }
LABEL_6:
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v3 = v10;
    if (v10 >= v11) {
      unint64_t v3 = v10 % v11;
    }
  }
  else
  {
    unint64_t v3 = (v11 - 1) & v10;
  }
  uint64_t v13 = *(char ***)(*(void *)a1 + 8 * v3);
  if (v13)
  {
    uint64_t v14 = *v13;
    if (*v13)
    {
      unint64_t v15 = v11 - 1;
      uint64_t v16 = *(void *)(a2 + 8);
      int v17 = *(_DWORD *)(a2 + 16);
      if (*(unsigned char *)(a2 + 24))
      {
        int v18 = *(_DWORD *)(a2 + 28);
        int v19 = *(_DWORD *)(a2 + 32);
        int v20 = *(_DWORD *)(a2 + 36);
        int v21 = *(_DWORD *)(a2 + 40);
        int v22 = *(_DWORD *)(a2 + 44);
        if (v12.u32[0] > 1uLL)
        {
          if (!*(unsigned char *)a2)
          {
            while (1)
            {
              unint64_t v25 = *((void *)v14 + 1);
              if (v25 == v10)
              {
                if (v14[40]
                  && *((_DWORD *)v14 + 11) == v18
                  && *((_DWORD *)v14 + 12) == v19
                  && *((_DWORD *)v14 + 13) == v20
                  && *((_DWORD *)v14 + 14) == v21
                  && *((_DWORD *)v14 + 15) == v22)
                {
                  return v14;
                }
              }
              else
              {
                if (v25 >= v11) {
                  v25 %= v11;
                }
                if (v25 != v3) {
                  goto LABEL_60;
                }
              }
              uint64_t v14 = *(char **)v14;
              if (!v14) {
                goto LABEL_60;
              }
            }
          }
          while (1)
          {
            unint64_t v24 = *((void *)v14 + 1);
            if (v24 == v10)
            {
              if (v14[16])
              {
                if (*((void *)v14 + 3) == v16 && *((_DWORD *)v14 + 8) == v17) {
                  return v14;
                }
              }
              else if (v14[40] {
                     && *((_DWORD *)v14 + 11) == v18
              }
                     && *((_DWORD *)v14 + 12) == v19
                     && *((_DWORD *)v14 + 13) == v20
                     && *((_DWORD *)v14 + 14) == v21
                     && *((_DWORD *)v14 + 15) == v22)
              {
                return v14;
              }
            }
            else
            {
              if (v24 >= v11) {
                v24 %= v11;
              }
              if (v24 != v3) {
                goto LABEL_60;
              }
            }
            uint64_t v14 = *(char **)v14;
            if (!v14) {
              goto LABEL_60;
            }
          }
        }
        while (1)
        {
          uint64_t v23 = *((void *)v14 + 1);
          if (v23 == v10)
          {
            if (*(unsigned char *)a2 && v14[16])
            {
              if (*((void *)v14 + 3) == v16 && *((_DWORD *)v14 + 8) == v17) {
                return v14;
              }
            }
            else if (v14[40] {
                   && *((_DWORD *)v14 + 11) == v18
            }
                   && *((_DWORD *)v14 + 12) == v19
                   && *((_DWORD *)v14 + 13) == v20
                   && *((_DWORD *)v14 + 14) == v21
                   && *((_DWORD *)v14 + 15) == v22)
            {
              return v14;
            }
          }
          else if ((v23 & v15) != v3)
          {
            goto LABEL_60;
          }
          uint64_t v14 = *(char **)v14;
          if (!v14) {
            goto LABEL_60;
          }
        }
      }
      if (v12.u32[0] > 1uLL)
      {
        if (*(unsigned char *)a2)
        {
          do
          {
            unint64_t v56 = *((void *)v14 + 1);
            if (v56 == v10)
            {
              if (v14[16] && *((void *)v14 + 3) == v16 && *((_DWORD *)v14 + 8) == v17) {
                return v14;
              }
            }
            else
            {
              if (v56 >= v11) {
                v56 %= v11;
              }
              if (v56 != v3) {
                break;
              }
            }
            uint64_t v14 = *(char **)v14;
          }
          while (v14);
        }
      }
      else if (*(unsigned char *)a2)
      {
        do
        {
          uint64_t v47 = *((void *)v14 + 1);
          if (v47 == v10)
          {
            if (v14[16] && *((void *)v14 + 3) == v16 && *((_DWORD *)v14 + 8) == v17) {
              return v14;
            }
          }
          else if ((v47 & v15) != v3)
          {
            break;
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_60:
  unint64_t v26 = (char *)operator new(0x58uLL);
  uint64_t v14 = v26;
  *(void *)unint64_t v26 = 0;
  *((void *)v26 + 1) = v10;
  v26[16] = 0;
  if (*(unsigned char *)a3)
  {
    *(_OWORD *)(v26 + 24) = *(_OWORD *)(a3 + 8);
    v26[16] = 1;
  }
  v26[40] = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    *(_OWORD *)(v26 + 44) = *(_OWORD *)(a3 + 28);
    *((_DWORD *)v26 + 15) = *(_DWORD *)(a3 + 44);
    v26[40] = 1;
  }
  *((void *)v26 + 8) = 0;
  *((void *)v26 + 9) = 0;
  *((void *)v26 + 10) = 0;
  float v27 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v28 = a1[8];
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v29 = 1;
    if (v11 >= 3) {
      BOOL v29 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v11);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *((void *)a1 + 1);
    }
    if (prime <= v11)
    {
      if (prime >= v11) {
        goto LABEL_111;
      }
      unint64_t v44 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v11 < 3 || (uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        unint64_t v44 = std::__next_prime(v44);
      }
      else
      {
        uint64_t v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2) {
          unint64_t v44 = v46;
        }
      }
      if (prime <= v44) {
        size_t prime = v44;
      }
      if (prime >= v11)
      {
        unint64_t v11 = *((void *)a1 + 1);
LABEL_111:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11) {
            unint64_t v3 = v10 % v11;
          }
          else {
            unint64_t v3 = v10;
          }
        }
        else
        {
          unint64_t v3 = (v11 - 1) & v10;
        }
        goto LABEL_124;
      }
      if (!prime)
      {
        long long v55 = *(void **)a1;
        *(void *)a1 = 0;
        if (v55) {
          operator delete(v55);
        }
        unint64_t v11 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_111;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v33 = operator new(8 * prime);
    uint64_t v34 = *(void **)a1;
    *(void *)a1 = v33;
    if (v34) {
      operator delete(v34);
    }
    uint64_t v35 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v35++) = 0;
    while (prime != v35);
    uint64_t v37 = (uint64_t *)(a1 + 4);
    long long v36 = (void *)*((void *)a1 + 2);
    if (!v36)
    {
LABEL_110:
      unint64_t v11 = prime;
      goto LABEL_111;
    }
    size_t v38 = v36[1];
    size_t v39 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v40 = v38 & v39;
      *(void *)(*(void *)a1 + 8 * v40) = v37;
      for (uint64_t i = (void *)*v36; *v36; uint64_t i = (void *)*v36)
      {
        size_t v42 = i[1] & v39;
        if (v42 == v40)
        {
          long long v36 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v42))
        {
          *long long v36 = *i;
          uint64_t v43 = 8 * v42;
          void *i = **(void **)(*(void *)a1 + v43);
          **(void **)(*(void *)a1 + v43) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v42) = v36;
          long long v36 = i;
          size_t v40 = v42;
        }
      }
      goto LABEL_110;
    }
    if (v38 >= prime) {
      v38 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v38) = v37;
    unint64_t v48 = (void *)*v36;
    if (!*v36) {
      goto LABEL_110;
    }
    while (1)
    {
      size_t v50 = v48[1];
      if (v50 >= prime) {
        v50 %= prime;
      }
      if (v50 != v38)
      {
        if (!*(void *)(*(void *)a1 + 8 * v50))
        {
          *(void *)(*(void *)a1 + 8 * v50) = v36;
          goto LABEL_115;
        }
        *long long v36 = *v48;
        uint64_t v49 = 8 * v50;
        void *v48 = **(void **)(*(void *)a1 + v49);
        **(void **)(*(void *)a1 + v49) = v48;
        unint64_t v48 = v36;
      }
      size_t v50 = v38;
LABEL_115:
      long long v36 = v48;
      unint64_t v48 = (void *)*v48;
      size_t v38 = v50;
      if (!v48) {
        goto LABEL_110;
      }
    }
  }
LABEL_124:
  uint64_t v51 = *(void **)a1;
  uint64_t v52 = *(void **)(*(void *)a1 + 8 * v3);
  if (v52)
  {
    *(void *)uint64_t v14 = *v52;
LABEL_132:
    *uint64_t v52 = v14;
    goto LABEL_133;
  }
  *(void *)uint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v51[v3] = a1 + 4;
  if (*(void *)v14)
  {
    unint64_t v53 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v53 >= v11) {
        v53 %= v11;
      }
    }
    else
    {
      v53 &= v11 - 1;
    }
    uint64_t v52 = (void *)(*(void *)a1 + 8 * v53);
    goto LABEL_132;
  }
LABEL_133:
  ++*((void *)a1 + 3);
  return v14;
}

char *std::vector<std::unique_ptr<md::FrameGraphResourceRegistry::ResourceHolder>>::__emplace_back_slow_path<md::FrameGraphResourceRegistry::ResourceHolder*&>(char **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  int v2 = a1[1];
  uint64_t v4 = v2 - *a1;
  uint64_t v5 = v4 >> 3;
  unint64_t v6 = (v4 >> 3) + 1;
  if (v6 >> 61) {
    abort();
  }
  uint64_t v9 = a1[2] - v3;
  if (v9 >> 2 > v6) {
    unint64_t v6 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v11 = (char *)operator new(8 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint8x8_t v12 = &v11[8 * v5];
  uint64_t v13 = &v11[8 * v10];
  *(void *)uint8x8_t v12 = a2;
  uint64_t v14 = v12 + 8;
  if (v2 == v3)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    unint64_t v15 = v2 - v3 - 8;
    if (v15 <= 0x77 || &v2[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v2) {
      goto LABEL_37;
    }
    uint64_t v16 = (v15 >> 3) + 1;
    int v17 = &v11[8 * v5 - 16];
    int v18 = v2 - 32;
    uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v21 = *(_OWORD *)v18;
      long long v20 = *((_OWORD *)v18 + 1);
      *(_OWORD *)int v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      *((_OWORD *)v17 - 1) = v21;
      *(_OWORD *)int v17 = v20;
      v17 -= 32;
      v19 -= 4;
    }
    while (v19);
    v12 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v2 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_37:
      do
      {
        uint64_t v22 = *((void *)v2 - 1);
        v2 -= 8;
        *(void *)int v2 = 0;
        *((void *)v12 - 1) = v22;
        v12 -= 8;
      }
      while (v2 != v3);
    }
    int v2 = *a1;
    uint64_t v23 = a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    while (v23 != v2)
    {
      unint64_t v25 = (uint64_t *)*((void *)v23 - 1);
      v23 -= 8;
      unint64_t v24 = v25;
      *(void *)uint64_t v23 = 0;
      if (v25)
      {
        if (*((unsigned char *)v24 + 40)) {
          *((unsigned char *)v24 + 40) = 0;
        }
        if (*((unsigned char *)v24 + 16)) {
          *((unsigned char *)v24 + 16) = 0;
        }
        uint64_t v26 = *v24;
        *unint64_t v24 = 0;
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
        }
        MEMORY[0x1A6239270](v24, 0x1020C40BC9DCD72);
      }
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v14;
}

void md::FrameGraphPhysicalResourceOwner<ggl::DeviceData>::~FrameGraphPhysicalResourceOwner(void *a1)
{
  *a1 = &unk_1EF54D1E0;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *md::FrameGraphPhysicalResourceOwner<ggl::DeviceData>::~FrameGraphPhysicalResourceOwner(void *a1)
{
  *a1 = &unk_1EF54D1E0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::Buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::FrameGraphPhysicalResourceOwner<ggl::Texture>::~FrameGraphPhysicalResourceOwner(void *a1)
{
  *a1 = &unk_1EF54D200;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *md::FrameGraphPhysicalResourceOwner<ggl::Texture>::~FrameGraphPhysicalResourceOwner(void *a1)
{
  *a1 = &unk_1EF54D200;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void ggl::ARMesh::ARMeshPipelineState::~ARMeshPipelineState(ggl::ARMesh::ARMeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::ARMesh::ARMeshPipelineSetup::textureIsEnabled(ggl::ARMesh::ARMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::ARMesh::ARMeshPipelineSetup::constantDataIsEnabled(ggl::ARMesh::ARMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

void ggl::ARMesh::ARMeshPipelineSetup::~ARMeshPipelineSetup(ggl::ARMesh::ARMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::ARMesh::ARDepthMeshPipelineState::~ARDepthMeshPipelineState(ggl::ARMesh::ARDepthMeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::ARMesh::ARDepthMeshPipelineSetup::textureIsEnabled(ggl::ARMesh::ARDepthMeshPipelineSetup *this)
{
  return 0;
}

BOOL ggl::ARMesh::ARDepthMeshPipelineSetup::constantDataIsEnabled(ggl::ARMesh::ARDepthMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::ARMesh::ARDepthMeshPipelineSetup::~ARDepthMeshPipelineSetup(ggl::ARMesh::ARDepthMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::ARMesh::ARShadowPipelineState::~ARShadowPipelineState(ggl::ARMesh::ARShadowPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::ARMesh::ARShadowPipelineSetup::textureIsEnabled(ggl::ARMesh::ARShadowPipelineSetup *this)
{
  return 0;
}

BOOL ggl::ARMesh::ARShadowPipelineSetup::constantDataIsEnabled(ggl::ARMesh::ARShadowPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

void ggl::ARMesh::ARShadowPipelineSetup::~ARShadowPipelineSetup(ggl::ARMesh::ARShadowPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::MuninPassList::buildFrameGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = 0xC83717EF586624DCLL;
  uint64_t v9 = *(void **)(a2 + 8);
  int8x8_t v10 = (int8x8_t)v9[1];
  if (!*(void *)&v10) {
    goto LABEL_25;
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v12 = 0xC83717EF586624DCLL;
    if (*(void *)&v10 <= 0xC83717EF586624DCLL) {
      unint64_t v12 = 0xC83717EF586624DCLL % *(void *)&v10;
    }
  }
  else
  {
    unint64_t v12 = (*(void *)&v10 - 1) & 0xC83717EF586624DCLL;
  }
  uint64_t v13 = *(void **)(*v9 + 8 * v12);
  if (!v13) {
    goto LABEL_24;
  }
  uint64_t v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_24;
  }
  if (v11.u32[0] < 2uLL)
  {
    uint64_t v15 = *(void *)&v10 - 1;
    while (1)
    {
      uint64_t v17 = v14[1];
      if (v17 == 0xC83717EF586624DCLL)
      {
        if (v14[2] == 0xC83717EF586624DCLL) {
          goto LABEL_22;
        }
      }
      else if ((v17 & v15) != v12)
      {
        goto LABEL_24;
      }
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v16 = v14[1];
    if (v16 == 0xC83717EF586624DCLL)
    {
      if (v14[2] == 0xC83717EF586624DCLL)
      {
LABEL_22:
        int v18 = (int8x8_t *)v14[5];
        if (*(void *)&v18[1] == 0xC83717EF586624DCLL)
        {
          int8x8_t v10 = v18[4];
          goto LABEL_25;
        }
LABEL_24:
        int8x8_t v10 = 0;
LABEL_25:
        int8x8_t v84 = v10;
        uint64_t v19 = *(void *)(*(void *)&v10 + 200) - *(void *)(*(void *)&v10 + 192);
        *(void *)(a1 + 32) = v19 >> 3;
        BOOL v86 = (unint64_t)v19 > 8;
        int8x8_t v20 = (int8x8_t)v9[1];
        if (!*(void *)&v20) {
          goto LABEL_48;
        }
        uint8x8_t v21 = (uint8x8_t)vcnt_s8(v20);
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.u32[0] > 1uLL)
        {
          if (*(void *)&v20 <= 0xC83717EF586624DCLL) {
            unint64_t v8 = 0xC83717EF586624DCLL % *(void *)&v20;
          }
        }
        else
        {
          unint64_t v8 = (*(void *)&v20 - 1) & 0xC83717EF586624DCLL;
        }
        uint64_t v22 = *(void **)(*v9 + 8 * v8);
        if (!v22) {
          goto LABEL_48;
        }
        uint64_t v23 = (void *)*v22;
        if (!v23) {
          goto LABEL_48;
        }
        if (v21.u32[0] < 2uLL)
        {
          uint64_t v24 = *(void *)&v20 - 1;
          while (1)
          {
            uint64_t v26 = v23[1];
            if (v26 == 0xC83717EF586624DCLL)
            {
              if (v23[2] == 0xC83717EF586624DCLL) {
                goto LABEL_46;
              }
            }
            else if ((v26 & v24) != v8)
            {
              goto LABEL_48;
            }
            uint64_t v23 = (void *)*v23;
            if (!v23) {
              goto LABEL_48;
            }
          }
        }
        while (1)
        {
          unint64_t v25 = v23[1];
          if (v25 == 0xC83717EF586624DCLL)
          {
            if (v23[2] == 0xC83717EF586624DCLL)
            {
LABEL_46:
              uint64_t v27 = v23[5];
              if (*(void *)(v27 + 8) == 0xC83717EF586624DCLL)
              {
                float v28 = *(void **)(v27 + 32);
                goto LABEL_49;
              }
LABEL_48:
              float v28 = 0;
LABEL_49:
              uint64_t v30 = v28[24];
              uint64_t v29 = v28[25];
              uint64_t v31 = *(void *)(a1 + 40);
              *(_OWORD *)(a1 + 112) = 0u;
              *(_OWORD *)(a1 + 128) = 0u;
              *(void *)(a1 + 48) = v31;
              uint64_t v32 = v29 - v30;
              unint64_t v33 = v32 >> 3;
              *(void *)(a1 + 32) = v32 >> 3;
              if (v32)
              {
                std::vector<altitude::TextureMap *>::__append(a1 + 40, v33);
                unint64_t v33 = *(void *)(a1 + 32);
              }
              *(void *)(a1 + 72) = *(void *)(a1 + 64);
              if (v33)
              {
                std::vector<altitude::TextureMap *>::__append(a1 + 64, v33);
                uint64_t v34 = *(void *)(a1 + 32);
                *(void *)(a1 + 96) = *(void *)(a1 + 88);
                if (v34) {
                  std::vector<altitude::TextureMap *>::__append(a1 + 88, 3 * v34);
                }
              }
              else
              {
                *(void *)(a1 + 96) = *(void *)(a1 + 88);
              }
              uint64_t v35 = v28[4];
              if (v35)
              {
                *(unsigned char *)(a1 + 168) = *(void *)(a1 + 160) != v35;
                *(_WORD *)uint64_t v108 = 1;
                *(void *)&v108[4] = 0x3F80000000000000;
                uint64_t v109 = 0x3F80000000000000;
                LOBYTE(v110) = 0;
                BYTE4(v110) = 0;
                char v111 = 0;
                char v112 = 0;
                int v114 = 1;
                uint64_t v113 = 0x100000000;
                char v115 = 0;
                LOWORD(v97[0]) = 1;
                *(void *)&v97[1] = 0x3F80000000000000;
                uint64_t v98 = 0x3F80000000000000;
                uint64_t v99 = 0;
                char v100 = 0;
                char v101 = 0;
                uint64_t v102 = 0x100000001;
                int v103 = 1;
                char v104 = 1;
                *(void *)(a1 + 128) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v108, "CrossFade ColorBuffer", 0xCF8B314100000015, 0);
                *(void *)(a1 + 136) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v97, "CrossFade DepthBuffer", 0x5919EB9300000015uLL, 0);
                if (!*(void *)(a1 + 144)) {
                  operator new();
                }
                if (!*(void *)(a1 + 152)) {
                  operator new();
                }
                uint64_t v87 = *(void *)(a1 + 128);
                operator new();
              }
              *(unsigned char *)(a1 + 168) = 0;
              uint64_t v36 = *(void *)(a1 + 144);
              *(void *)(a1 + 144) = 0;
              if (v36) {
                (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
              }
              uint64_t v37 = *(void *)(a1 + 152);
              *(void *)(a1 + 152) = 0;
              if (v37) {
                (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
              }
              *(void *)(a1 + 160) = v28[4];
              if (*(void *)(a1 + 32) >= 2uLL)
              {
                size_t v38 = +[VKDebugSettings sharedSettings];
                [*(id *)a2 sizeInPixels];
                double v40 = v39;
                [*(id *)a2 sizeInPixels];
                double v42 = v41;
                [*(id *)a2 contentScale];
                double v44 = v43;
                [v38 muninTransitionMinResolution];
                float v46 = v45;
                [v38 muninTransitionMaxResolution];
                unint64_t v48 = (unint64_t *)v28[24];
                uint64_t v49 = (unint64_t *)v28[25];
                if (v48 == v49)
                {
                  unsigned int v58 = 16;
                  unsigned int v57 = 16;
                }
                else
                {
                  float v50 = fmin(v44, 2.0);
                  float v51 = (float)v40;
                  unsigned int v52 = vcvtps_u32_f32((float)(v46 * v51) / v50);
                  unsigned int v53 = vcvtps_u32_f32((float)(v47 * v51) / v50);
                  uint64_t v55 = v28[19];
                  int8x8_t v54 = (int8x8_t)v28[20];
                  uint8x8_t v56 = (uint8x8_t)vcnt_s8(v54);
                  v56.i16[0] = vaddlv_u8(v56);
                  unsigned int v57 = 16;
                  unsigned int v58 = 16;
                  do
                  {
                    unint64_t v64 = *v48;
                    if (v56.u32[0] >= 2uLL)
                    {
                      unint64_t v66 = *v48;
                      if (v64 >= *(void *)&v54) {
                        unint64_t v66 = v64 % *(void *)&v54;
                      }
                      BOOL v65 = *(double **)(v55 + 8 * v66);
                      do
                      {
                        do
                          BOOL v65 = *(double **)v65;
                        while (v64 != *((void *)v65 + 1));
                      }
                      while (*((void *)v65 + 2) != v64);
                    }
                    else
                    {
                      BOOL v65 = *(double **)(v55 + 8 * ((*(void *)&v54 - 1) & v64));
                      do
                      {
                        do
                          BOOL v65 = *(double **)v65;
                        while (v64 != *((void *)v65 + 1));
                      }
                      while (*((void *)v65 + 2) != v64);
                    }
                    uint64_t v67 = *((void *)v65 + 3);
                    uint64_t v68 = *((void *)v65 + 4);
                    if (v67 == v68)
                    {
                      unsigned int v59 = 0;
                    }
                    else
                    {
                      unsigned int v59 = 0;
                      double v69 = v65[17];
                      do
                      {
                        uint64_t v70 = *(void *)(*(void *)v67 + 176);
                        double v71 = 0.0;
                        if (*(void *)(*(void *)v67 + 184) != v70)
                        {
                          float v72 = *(float *)(*(void *)v67 + 468);
                          if (v72 < 3.14159265) {
                            double v71 = (float)((float)*(unsigned int *)(*(void *)(v70 + 16) + 80) / v72);
                          }
                        }
                        if (v59 <= (v69 * v71)) {
                          unsigned int v59 = (v69 * v71);
                        }
                        v67 += 16;
                      }
                      while (v67 != v68);
                    }
                    unsigned int v60 = (float)((float)v59 * 1.25);
                    if (v60 <= v52) {
                      unsigned int v60 = v52;
                    }
                    if (v60 >= v53) {
                      unsigned int v60 = v53;
                    }
                    unsigned int v61 = vcvtas_u32_f32((float)v60 * (float)((float)v42 * (float)(1.0 / v51)));
                    unsigned int v62 = (v60 + 3) & 0xFFFFFFFC;
                    unsigned int v63 = (v61 + 3) & 0xFFFFFFFC;
                    if (v57 <= v62) {
                      unsigned int v57 = v62;
                    }
                    if (v58 <= v63) {
                      unsigned int v58 = v63;
                    }
                    ++v48;
                  }
                  while (v48 != v49);
                }
                uint64_t v73 = *(unsigned int *)(a1 + 176);
                if (v73) {
                  uint64_t v74 = v73 | 0x100000000;
                }
                else {
                  uint64_t v74 = 0;
                }
                *(_WORD *)uint64_t v108 = 0;
                *(_DWORD *)&v108[4] = v57;
                *(_DWORD *)&v108[8] = 0;
                uint64_t v109 = v58;
                uint64_t v110 = v74;
                char v111 = 0;
                char v112 = 0;
                uint64_t v113 = 0x100000000;
                int v114 = 1;
                char v115 = 0;
                LOWORD(v97[0]) = 0;
                *(void *)&v97[1] = v57 >> 2;
                uint64_t v98 = v58 >> 2;
                uint64_t v99 = v74;
                char v100 = 0;
                char v101 = 0;
                uint64_t v102 = 0x100000000;
                int v103 = 1;
                char v104 = 0;
                uint64_t v75 = *(unsigned int *)(a1 + 204);
                if (v75) {
                  uint64_t v76 = v75 | 0x100000000;
                }
                else {
                  uint64_t v76 = 0;
                }
                LOWORD(v87) = 0;
                HIDWORD(v87) = v57;
                int v88 = 0;
                unsigned int v89 = v58;
                int v90 = 0;
                uint64_t v91 = v76;
                char v92 = 0;
                char v93 = 0;
                uint64_t v94 = 0x100000000;
                int v95 = 1;
                char v96 = 1;
                *(void *)(a1 + 112) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v108, "Munin Composite Color", 0xE9FE168700000015, 0);
                *(void *)(a1 + 120) = md::FrameGraphBuilder::createResource(a5, (uint64_t)&v87, "Munin Composite Depth", 0x750B420700000015uLL, 0);
                if (*(void *)(a1 + 32))
                {
                  unint64_t v77 = 0;
                  unint64_t v78 = 0;
                  do
                  {
                    uint64_t Resource = md::FrameGraphBuilder::createResource(a5, (uint64_t)v108, "Munin rig color", 0x7BC3714D0000000FuLL, v78);
                    uint64_t v80 = md::FrameGraphBuilder::createResource(a5, (uint64_t)&v87, "Munin rig depth", 0xE73625CD0000000FLL, v78);
                    uint64_t v81 = 8 * v78;
                    *(void *)(*(void *)(a1 + 40) + v81) = Resource;
                    *(void *)(*(void *)(a1 + 64) + v81) = v80;
                    uint64_t v82 = 8 * v77;
                    *(void *)(*(void *)(a1 + 88) + 8 * v77) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v97, "Blur buffer", 0x351C8D860000000BuLL, v77);
                    *(void *)(*(void *)(a1 + 88) + v82 + 8) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v97, "Blur buffer", 0x351C8D860000000BuLL, v77 + 1);
                    *(void *)(*(void *)(a1 + 88) + v82 + 16) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v97, "Blur buffer", 0x351C8D860000000BuLL, v77 + 2);
                    ++v78;
                    v77 += 3;
                  }
                  while (v78 < *(void *)(a1 + 32));
                }
              }
              if (*(void *)(*(void *)&v84 + 200) - *(void *)(*(void *)&v84 + 192) >= 9uLL)
              {
                *(void *)uint64_t v108 = 0;
                if (*(void *)(a1 + 32))
                {
                  v107[0] = &unk_1EF56FE28;
                  v107[1] = v108;
                  v107[2] = a1;
                  v107[3] = v107;
                  md::FrameGraphBuilder::addRenderPass<md::MuninDynamicCommandBufferIdInfo>();
                }
                v106[0] = &unk_1EF56FEB8;
                v106[1] = a1;
                v106[3] = v106;
                md::FrameGraphBuilder::addRenderPass<md::MuninDynamicCommandBufferIdInfo>();
              }
              size_t v83 = operator new(0x20uLL);
              *size_t v83 = &unk_1EF56FF00;
              v83[1] = &v86;
              v83[2] = a1;
              v83[3] = a4;
              unint64_t v105 = v83;
              operator new();
            }
          }
          else
          {
            if (v25 >= *(void *)&v20) {
              v25 %= *(void *)&v20;
            }
            if (v25 != v8) {
              goto LABEL_48;
            }
          }
          uint64_t v23 = (void *)*v23;
          if (!v23) {
            goto LABEL_48;
          }
        }
      }
    }
    else
    {
      if (v16 >= *(void *)&v10) {
        v16 %= *(void *)&v10;
      }
      if (v16 != v12) {
        goto LABEL_24;
      }
    }
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_24;
    }
  }
}

void sub_1A24DBF68(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40BE47B5E1);
  _Unwind_Resume(a1);
}

void sub_1A24DBF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
}

void md::FrameGraphBuilder::addRenderPass<md::MuninDynamicCommandBufferIdInfo>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1A24DC328(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A24DC35C(_Unwind_Exception *a1)
{
  md::RenderQueueBase::~RenderQueueBase(v1);
  MEMORY[0x1A6239270](v1, 0xA1C4084DA3AFDLL);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  HIBYTE(v11) = 9;
  strcpy((char *)&__src, "crossfade");
  uint64_t v5 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v5, &__src, 9uLL);
  }
  else
  {
    *(_OWORD *)uint64_t v5 = __src;
    *(void *)(a2 + 48) = v11;
  }
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v4 + 128));
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v4 + 136));
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 16));
  uint64_t v6 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v6;
  __n128 result = *(__n128 *)(v6 + 16);
  long long v8 = *(_OWORD *)(v6 + 32);
  long long v9 = *(_OWORD *)(v6 + 48);
  *(void *)(a2 + 168) = *(void *)(v6 + 64);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  if (*(unsigned char *)(v6 + 72))
  {
    __n128 result = *(__n128 *)(v6 + 76);
    if (*(unsigned char *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(unsigned char *)(a2 + 176) = 1;
    }
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    *(unsigned char *)(a2 + 176) = 0;
  }
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56FF48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF56FF48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

void md::RenderQueue<md::MuninCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  JUMPOUT(0x1A6239270);
}

void *md::RenderQueue<md::MuninCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2, __n128 result)
{
  uint64_t v5 = *(void *)(a1 + 16);
  HIBYTE(v12) = 4;
  strcpy((char *)&__src, "main");
  uint64_t v6 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v6, &__src, 4uLL);
  }
  else
  {
    result.n128_u64[0] = __src;
    *(_OWORD *)uint64_t v6 = __src;
    *(void *)(a2 + 48) = v12;
  }
  if (**(unsigned char **)(a1 + 8))
  {
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v5 + 112));
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v5 + 120));
  }
  if (*(unsigned char *)(v5 + 168))
  {
    uint64_t v7 = *(void *)(v5 + 128);
    *(void *)(a2 + 104) = v7;
    if (!*(unsigned char *)(a2 + 176))
    {
      __n128 result = *(__n128 *)(v7 + 88);
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v7 + 104);
      *(__n128 *)(a2 + 180) = result;
      *(unsigned char *)(a2 + 176) = 1;
    }
    *(void *)(a2 + 168) = *(void *)(v5 + 136);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 24);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)v8;
    __n128 result = *(__n128 *)(v8 + 16);
    long long v9 = *(_OWORD *)(v8 + 32);
    long long v10 = *(_OWORD *)(v8 + 48);
    *(void *)(a2 + 168) = *(void *)(v8 + 64);
    *(_OWORD *)(a2 + 136) = v9;
    *(_OWORD *)(a2 + 152) = v10;
    *(__n128 *)(a2 + 120) = result;
    if (*(unsigned char *)(v8 + 72))
    {
      __n128 result = *(__n128 *)(v8 + 76);
      if (*(unsigned char *)(a2 + 176))
      {
        *(_DWORD *)(a2 + 196) = *(_DWORD *)(v8 + 92);
        *(__n128 *)(a2 + 180) = result;
      }
      else
      {
        *(_DWORD *)(a2 + 196) = *(_DWORD *)(v8 + 92);
        *(__n128 *)(a2 + 180) = result;
        *(unsigned char *)(a2 + 176) = 1;
      }
    }
    else if (*(unsigned char *)(a2 + 176))
    {
      *(unsigned char *)(a2 + 176) = 0;
    }
  }
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56FF00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF56FF00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  std::to_string(&v19, **(void **)(a1 + 8));
  uint64_t v5 = std::string::insert(&v19, 0, "rig_pass_", 9uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v20, "_downsample_pass_", 0x11uLL);
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, **(void **)(a1 + 16));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v21, (const std::string::value_type *)p_p, size);
  std::string v22 = *v11;
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  uint64_t v12 = (void **)(a2 + 32);
  char v13 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 55) < 0)
  {
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v22;
    }
    else {
      uint64_t v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v15 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v15 = v22.__r_.__value_.__l.__size_;
    }
    std::string::__assign_no_alias<false>(v12, v14, v15);
    if ((v13 & 0x80) == 0)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
LABEL_26:
    operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_27;
    }
LABEL_19:
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_28;
    }
LABEL_20:
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  if ((*((unsigned char *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v12, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    goto LABEL_26;
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
  *(void *)(a2 + 48) = *((void *)&v22.__r_.__value_.__l + 2);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_19;
  }
LABEL_27:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_20;
  }
LABEL_28:
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_29:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
LABEL_21:
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_22;
  }
LABEL_30:
  operator delete(v19.__r_.__value_.__l.__data_);
LABEL_22:
  md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 24));
  uint64_t v17 = *(void *)(*(void *)(v4 + 88) + 8 * **(void **)(a1 + 40));
  *(void *)(a2 + 104) = v17;
  if (!*(unsigned char *)(a2 + 176))
  {
    __n128 result = *(__n128 *)(v17 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v17 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(unsigned char *)(a2 + 176) = 1;
  }
  return result;
}

void sub_1A24DCB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a17 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a12);
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56FE70;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EF56FE70;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

void md::RenderQueue<md::MuninDynamicCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    long long v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *long long v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  JUMPOUT(0x1A6239270);
}

void *md::RenderQueue<md::MuninDynamicCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    long long v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *long long v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

void **std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)(a1 + 8);
  HIBYTE(v10) = 9;
  strcpy((char *)&__src, "composite");
  __n128 result = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    __n128 result = std::string::__assign_no_alias<false>(result, &__src, 9uLL);
    if (!v3[4]) {
      goto LABEL_7;
    }
  }
  else
  {
    *(_OWORD *)__n128 result = __src;
    *(void *)(a2 + 48) = v10;
    if (!v3[4]) {
      goto LABEL_7;
    }
  }
  unint64_t v5 = 0;
  uint64_t v6 = 16;
  do
  {
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3[5] + 8 * v5));
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3[8] + 8 * v5++));
    __n128 result = (void **)md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, *(unsigned __int8 **)(v3[11] + v6));
    v6 += 24;
  }
  while (v5 < v3[4]);
LABEL_7:
  uint64_t v7 = v3[14];
  *(void *)(a2 + 104) = v7;
  if (!*(unsigned char *)(a2 + 176))
  {
    long long v8 = *(_OWORD *)(v7 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v7 + 104);
    *(_OWORD *)(a2 + 180) = v8;
    *(unsigned char *)(a2 + 176) = 1;
  }
  *(void *)(a2 + 168) = v3[15];
  return result;
}

uint64_t std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56FEB8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF56FEB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  std::to_string(&v12, **(void **)(a1 + 8));
  unint64_t v5 = std::string::insert(&v12, 0, "rig_pass", 8uLL);
  std::string __p = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = (void **)(a2 + 32);
  char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 55) < 0)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    std::string::__assign_no_alias<false>(v6, p_p, size);
    if ((v7 & 0x80) == 0)
    {
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_18;
    }
LABEL_17:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    goto LABEL_17;
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(a2 + 48) = *((void *)&__p.__r_.__value_.__l + 2);
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_18:
  operator delete(v12.__r_.__value_.__l.__data_);
LABEL_13:
  uint64_t v10 = *(void *)(*(void *)(v4 + 40) + 8 * **(void **)(a1 + 8));
  *(void *)(a2 + 104) = v10;
  if (!*(unsigned char *)(a2 + 176))
  {
    long long v11 = *(_OWORD *)(v10 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v10 + 104);
    *(_OWORD *)(a2 + 180) = v11;
    *(unsigned char *)(a2 + 176) = 1;
  }
  *(void *)(a2 + 168) = *(void *)(*(void *)(v4 + 64) + 8 * **(void **)(a1 + 8));
}

void sub_1A24DD14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56FE28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF56FE28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::MuninPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

void md::MuninPassList::~MuninPassList(md::MuninPassList *this)
{
  *(void *)this = &unk_1EF5328E0;
  uint64_t v2 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    *((void *)this + 6) = v6;
    operator delete(v6);
  }
  *(void *)this = &unk_1EF553DD8;
  char v7 = (ggl::RenderQueue *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7)
  {
    ggl::RenderQueue::~RenderQueue(v7);
    MEMORY[0x1A6239270]();
  }
  long long v8 = (md::FrameGraph *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v8)
  {
    md::FrameGraph::~FrameGraph(v8);
    MEMORY[0x1A6239270]();
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  ggl::RenderQueue *v7;
  md::FrameGraph *v8;

  *(void *)this = &unk_1EF5328E0;
  uint64_t v2 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    *((void *)this + 6) = v6;
    operator delete(v6);
  }
  *(void *)this = &unk_1EF553DD8;
  char v7 = (ggl::RenderQueue *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7)
  {
    ggl::RenderQueue::~RenderQueue(v7);
    MEMORY[0x1A6239270]();
  }
  long long v8 = (md::FrameGraph *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v8)
  {
    md::FrameGraph::~FrameGraph(v8);
    MEMORY[0x1A6239270]();
  }
}

uint64_t md::GEOFlyoverMetadataResourceFetcher::tileKey(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  unint64_t v5 = *(int **)(a3 + 8);
  int v7 = v5[1];
  int v6 = v5[2];
  int v8 = *v5;
  [v4 size];
  [v4 scale];
  LOBYTE(v10) = GEOTileKeyMakeEmpty();
  *(void *)((char *)&v10 + 1) = v6 & 0x3F | ((unint64_t)(v7 & 0x3FFFFFF) << 32) | (v8 << 6);

  return v10;
}

void sub_1A24DD57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::GEOFlyoverMetadataResourceFetcher::resourceTileForTile(md::FlyoverRegionManager ***this@<X0>, const QuadTile *a2@<X1>, uint64_t a3@<X8>)
{
  if (this[76])
  {
    RegionAreas = md::FlyoverRegionManager::getRegionAreas(*this[78], a2);
    int v6 = v19;
    size_t v15 = v19;
    unint64_t v16 = v19;
    uint64_t v17 = v19;
    uint64_t v18 = 2;
    uint64_t v7 = *RegionAreas;
    uint64_t v8 = RegionAreas[1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *RegionAreas) >> 3);
    if (v9 >= 3)
    {
      geo::small_vector_base<md::FlyoverRegionManager::RegionArea>::grow(&v15, v9);
      int v6 = v16;
    }
    if (v7 != v8)
    {
      do
      {
        *(void *)int v6 = *(void *)v7;
        uint64_t v10 = *(void *)(v7 + 8);
        *((void *)v6 + 1) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v6 + 4) = *(_DWORD *)(v7 + 16);
        v7 += 24;
        v6 += 24;
      }
      while (v7 != v8);
      int v6 = v16;
    }
    long long v11 = &v6[24 * v9];
    unint64_t v16 = v11;
    std::string v12 = (char *)v15;
    if (v15 == v11)
    {
      *(unsigned char *)a3 = 0;
    }
    else
    {
      __int16 v13 = *(_WORD *)&a2->_type;
      *(unsigned char *)a3 = 1;
      *(_WORD *)(a3 + 8) = v13;
      *(void *)(a3 + 12) = *(void *)&a2->_yIdx;
      do
      {
        uint64_t v14 = (std::__shared_weak_count *)*((void *)v12 + 1);
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        v12 += 24;
      }
      while (v12 != v11);
      long long v11 = (char *)v15;
    }
    if (v11 != v17) {
      free(v11);
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void md::GEOFlyoverMetadataResourceFetcher::~GEOFlyoverMetadataResourceFetcher(md::GEOFlyoverMetadataResourceFetcher *this)
{
  *(void *)this = &unk_1EF54DD30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher((id *)this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF54DD30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher((id *)this);
}

void std::__function::__func<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0,std::allocator<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0>,std::shared_ptr<geo::c3mm::C3mmArea> ()(unsigned int)>::operator()(uint64_t a1@<X0>, unsigned int *a2@<X1>, md::FlyoverRegionManager *a3@<X8>)
{
}

void *std::__function::__func<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0,std::allocator<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0>,std::shared_ptr<geo::c3mm::C3mmArea> ()(unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5787F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0,std::allocator<md::GEOFlyoverMetadataResourceFetcher::GEOFlyoverMetadataResourceFetcher(GEOApplicationAuditToken *,GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>,std::shared_ptr<md::FlyoverRegionManager> const&)::$_0>,std::shared_ptr<geo::c3mm::C3mmArea> ()(unsigned int)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<md::GEOFlyoverMetadataResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::GEOFlyoverMetadataResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::GEOFlyoverMetadataResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::FlyoverPostchain::CompositePipelineState::~CompositePipelineState(ggl::FlyoverPostchain::CompositePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::FlyoverPostchain::CompositePipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::CompositePipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::FlyoverPostchain::CompositePipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::CompositePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::FlyoverPostchain::CompositePipelineSetup::~CompositePipelineSetup(ggl::FlyoverPostchain::CompositePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::FlyoverPostchain::DepthSplitPipelineState::~DepthSplitPipelineState(ggl::FlyoverPostchain::DepthSplitPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::FlyoverPostchain::DepthSplitPipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::DepthSplitPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::FlyoverPostchain::DepthSplitPipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::DepthSplitPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::FlyoverPostchain::DepthSplitPipelineSetup::~DepthSplitPipelineSetup(ggl::FlyoverPostchain::DepthSplitPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::FlyoverPostchain::DownsampleCoCPipelineState::~DownsampleCoCPipelineState(ggl::FlyoverPostchain::DownsampleCoCPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::FlyoverPostchain::DownsampleCoCPipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::DownsampleCoCPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::FlyoverPostchain::DownsampleCoCPipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::DownsampleCoCPipelineSetup *this)
{
  return 0;
}

void ggl::FlyoverPostchain::DownsampleCoCPipelineSetup::~DownsampleCoCPipelineSetup(ggl::FlyoverPostchain::DownsampleCoCPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::FlyoverPostchain::FGBlurPipelineState::~FGBlurPipelineState(ggl::FlyoverPostchain::FGBlurPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::FlyoverPostchain::FGBlurPipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::FGBlurPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::FlyoverPostchain::FGBlurPipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::FGBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::FlyoverPostchain::FGBlurPipelineSetup::~FGBlurPipelineSetup(ggl::FlyoverPostchain::FGBlurPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::FlyoverPostchain::BGBlurPipelineState::~BGBlurPipelineState(ggl::FlyoverPostchain::BGBlurPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::FlyoverPostchain::BGBlurPipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::BGBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::FlyoverPostchain::BGBlurPipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::BGBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::FlyoverPostchain::BGBlurPipelineSetup::~BGBlurPipelineSetup(ggl::FlyoverPostchain::BGBlurPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::FlyoverPostchain::TentBlurPipelineState::~TentBlurPipelineState(ggl::FlyoverPostchain::TentBlurPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::FlyoverPostchain::TentBlurPipelineState::TentBlurPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    uint64_t v10 = a4;
    __int16 v13 = a2;
    uint64_t v14 = a3;
    a2 = v13;
    a3 = v14;
    a4 = v10;
    if (v11)
    {
      {
        {
          {
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
          }
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
          unk_1EB32B448 = 1;
        }
        ggl::FlyoverPostchain::TentBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
        unk_1E9592660 = &ggl::FlyoverPostchain::pipelineDataTentBlurPipelineDeviceStructs(void)::ref;
        qword_1E9592668 = 0;
        unk_1E9592670 = &ggl::FlyoverPostchain::pipelineDataTentBlurPipelineConstantStructs(void)::ref;
        xmmword_1E9592678 = xmmword_1A28FC760;
      }
      ggl::FlyoverPostchain::TentBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverPostchain::TentBlurPipelineSetup::typedReflection(void)::ref;
      {
        ggl::FlyoverPostchainTentBlurShader::typedReflection(void)::ref = (uint64_t)"FlyoverPostchainTentBlurShader";
        {
          int v12 = ggl::crc32::compute<37ul>("FlyoverPostchainTentBlurShaderVertex");
          qword_1EB31CCC8 = (uint64_t)"FlyoverPostchainTentBlurShader";
          unk_1EB31CCD0 = ggl::flyoverPostchainTentBlurShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB31CCD8 = 1;
          unk_1EB31CCE0 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB31CCE8 = 0;
          unk_1EB31CCF0 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB31CCF8 = 0;
          unk_1EB31CD00 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::flyoverPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref = v12;
          *(_DWORD *)algn_1EB31CCC4 = 0;
          qword_1EB31CD08 = 0;
          unk_1EB31CD10 = &ggl::flyoverPostchainTentBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31CD20 = 0;
          unk_1EB31CD28 = 0;
          qword_1EB31CD18 = 0;
        }
        qword_1EB31C0C8 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB31C0D0 = ggl::crc32::compute<37ul>("FlyoverPostchainTentBlurShaderVertex");
        {
          ggl::flyoverPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref = 0x1F63B14D0;
          qword_1EB31CFF0 = (uint64_t)"FlyoverPostchainTentBlurShader";
          unk_1EB31CFF8 = 0;
          qword_1EB31D000 = 0;
          unk_1EB31D008 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB31D010 = 0;
          unk_1EB31D018 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB31D020 = 0;
          unk_1EB31D028 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB31D030 = 1;
          unk_1EB31D038 = &ggl::flyoverPostchainTentBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB31D048 = 0;
          unk_1EB31D050 = 0;
          qword_1EB31D040 = 1;
        }
        qword_1EB31C0D8 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB31C0E0 = -163900208;
        qword_1EB31C0E8 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderShaderConstants(void)::ref;
        unk_1EB31C0F0 = 0;
        qword_1EB31C0F8 = (uint64_t)ggl::flyoverPostchainTentBlurShaderShaderTextures(void)::ref;
        unk_1EB31C100 = 1;
        qword_1EB31C108 = (uint64_t)&ggl::flyoverPostchainTentBlurShaderShaderSamplers(void)::ref;
        unk_1EB31C110 = 1;
      }
      qword_1E9592608 = (uint64_t)&ggl::FlyoverPostchainTentBlurShader::typedReflection(void)::ref;
      {
        ggl::FlyoverPostchain::pipelineStateTentBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9592930 = 0;
        qword_1E9592938 = (uint64_t)"";
        dword_1E9592940 = 0;
        qword_1E9592948 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateTentBlurPipelineAttributeBinding_0(void)::attr;
        unk_1E9592950 = 2;
      }
      qword_1E9592610 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateTentBlurPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E9592618 = 1;
      qword_1E9592620 = 0;
      unk_1E9592628 = 1;
      qword_1E9592630 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateTentBlurPipelineDeviceStructBinding(void)::ref;
      unk_1E9592638 = 0;
      qword_1E9592640 = (uint64_t)&ggl::FlyoverPostchain::pipelineStateTentBlurPipelineConstantStructBinding(void)::ref;
      unk_1E9592648 = 0;
      a4 = v10;
      a2 = v13;
      a3 = v14;
    }
  }
  uint64_t v5 = *a2;
  int v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)a3;
  *(_OWORD *)&v17[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v15 = *a4;
  long long v16 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FlyoverPostchain::TentBlurPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v15;
  *(_OWORD *)(a1 + 272) = v16;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v17;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v17[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_1EF55D1E8;
  return a1;
}

BOOL ggl::FlyoverPostchain::TentBlurPipelineSetup::textureIsEnabled(ggl::FlyoverPostchain::TentBlurPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::FlyoverPostchain::TentBlurPipelineSetup::constantDataIsEnabled(ggl::FlyoverPostchain::TentBlurPipelineSetup *this)
{
  return 0;
}

void ggl::FlyoverPostchain::TentBlurPipelineSetup::~TentBlurPipelineSetup(ggl::FlyoverPostchain::TentBlurPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::RasterLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = 2147483646;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  __int16 v13 = *(unsigned __int8 **)(a6 + 16);
  uint64_t v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

void md::RasterLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  __int16 v8 = *(int32x2_t **)(a2 + 16);
  __int32 v9 = v8[1].i32[0];
  unsigned __int8 v49 = v8[1].i32[1];
  unsigned __int8 v50 = v9;
  int32x2_t v51 = vrev64_s32(*v8);
  uint64_t v10 = (unsigned __int16 *)*a3;
  int v11 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v11)
  {
    while (*v10 != *(unsigned __int16 *)(a1 + 584))
    {
      v10 += 24;
      if (v10 == v11) {
        goto LABEL_11;
      }
    }
  }
  if (v10 == v11 || *((void *)v10 + 4) != 1)
  {
LABEL_11:
    uint64_t v14 = 0;
LABEL_12:
    uint64_t v47 = v14;
    unint64_t v48 = 0;
    if (!v14) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  uint64_t v12 = *((void *)v10 + 3);
  uint64_t v14 = *(void *)(v12 + 112);
  __int16 v13 = *(std::__shared_weak_count **)(v12 + 120);
  if (!v13) {
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v47 = v14;
  unint64_t v48 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v14 = v47;
    if (!v47)
    {
LABEL_10:
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_49;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    uint64_t v14 = v47;
    if (!v47) {
      goto LABEL_10;
    }
  }
LABEL_13:
  memset(__p, 0, sizeof(__p));
  gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
  if (*(unsigned char *)(v14 + 160))
  {
    int v15 = v50;
    if (v50)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 776));
      unint64_t v16 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>((void *)(a1 + 792), &v49);
      if (!v16) {
        goto LABEL_20;
      }
      unsigned int v17 = *(uint64_t **)(a1 + 840);
      int v18 = (uint64_t *)v16[5];
      if (v17 != v18)
      {
        int v19 = (uint64_t *)v18[1];
        if (v19 != v17)
        {
          uint64_t v20 = *v18;
          *(void *)(v20 + 8) = v19;
          *(void *)v18[1] = v20;
          uint64_t v21 = *v17;
          *(void *)(v21 + 8) = v18;
          *int v18 = v21;
          *unsigned int v17 = (uint64_t)v18;
          v18[1] = (uint64_t)v17;
          unsigned int v17 = *(uint64_t **)(a1 + 840);
        }
      }
      if (v17 == (uint64_t *)(a1 + 832))
      {
LABEL_20:
        char v22 = v15 - 1;
        if (!v15) {
          char v22 = 0;
        }
        LOBYTE(v52) = v49;
        BYTE1(v52) = v22;
        *(int32x2_t *)((char *)&v52 + 4) = vshr_n_s32(v51, 1uLL);
        geo::LRUPolicy<geo::QuadTile,geo::QuadTile,geo::QuadTileHash>::insert(a1 + 832, (float *)(a1 + 792), &v49, (uint64_t)&v52);
        while (*(void *)(a1 + 848) > *(void *)(a1 + 784))
          geo::Cache<geo::QuadTile,geo::QuadTile,geo::QuadTileHash,geo::LRUPolicy>::_pop((void *)(a1 + 784));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 776));
    }
  }
  if (*(void *)(v14 + 144))
  {
    uint64_t v23 = (char *)operator new(0x58uLL);
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = 0;
    *(void *)uint64_t v23 = &unk_1EF583858;
    *((void *)v23 + 5) = 0;
    *((void *)v23 + 6) = 0;
    *((_DWORD *)v23 + 14) = 0;
    *((void *)v23 + 3) = &unk_1EF55AE58;
    *((void *)v23 + 4) = 0;
    *(void *)&long long v24 = 0x100000001;
    *((void *)&v24 + 1) = 0x100000001;
    *(_OWORD *)(v23 + 60) = v24;
    *(void *)(v23 + 76) = 0x100000001;
    *((_DWORD *)v23 + 21) = 0;
    double v44 = v23 + 24;
    float v45 = (std::__shared_weak_count *)v23;
    unint64_t v25 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v25->__shared_owners_ = 0;
    v25->__shared_weak_owners_ = 0;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589EF0;
    uint64_t v42 = std::construct_at[abi:nn180100]<ggl::Texture2D,std::shared_ptr<ggl::TextureData2D> &,std::shared_ptr<ggl::SamplerState> &,ggl::Texture2D*>((uint64_t)&v25[1], *(void *)(v14 + 144), *(std::__shared_weak_count **)(v14 + 152), &v44);
    double v43 = v25;
    id v26 = *(id *)(a1 + 760);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)[v26 gglDevice] + 24))(&v41);

    *(void *)&long long v52 = &unk_1EF57DD88;
    *((void *)&v52 + 1) = &v42;
    unsigned int v53 = &v52;
    uint64_t v39 = 0;
    double v40 = 0;
    (*(void (**)(uint64_t, long long *, uint64_t *))(*(void *)v41 + 16))(v41, &v52, &v39);
    uint64_t v27 = v40;
    if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    if (v53 == &v52)
    {
      (*(void (**)(long long *))(v52 + 32))(&v52);
    }
    else if (v53)
    {
      (*(void (**)(void))(*(void *)v53 + 40))();
    }
    float v28 = operator new(0x2F8uLL);
    v28[1] = 0;
    v28[2] = 0;
    void *v28 = &unk_1EF57FDB8;
    long long v52 = 0uLL;
    uint64_t v29 = md::MapTileData::MapTileData((uint64_t)(v28 + 3), a2, (uint64_t)__p, (uint64_t *)&v52, 1);
    uint64_t v31 = v42;
    uint64_t v30 = v43;
    void v28[3] = &unk_1EF534448;
    v28[82] = &unk_1EF534488;
    v28[93] = v31;
    v28[94] = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a4 = v29;
    a4[1] = (uint64_t)v28;
    if (v41)
    {
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 24))(v41);
      uint64_t v33 = v41;
      uint64_t v41 = 0;
      *(void *)&long long v52 = v33;
      (*(void (**)(uint64_t, long long *))(*(void *)v32 + 48))(v32, &v52);
      uint64_t v34 = v52;
      *(void *)&long long v52 = 0;
      if (v34) {
        (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
      }
      uint64_t v35 = v41;
      uint64_t v41 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
    }
    uint64_t v36 = v43;
    if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    uint64_t v37 = v45;
    if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
LABEL_49:
  size_t v38 = v48;
  if (v48)
  {
    if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1A24DF704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  os_unfair_lock_unlock(v22);
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void geo::LRUPolicy<geo::QuadTile,geo::QuadTile,geo::QuadTileHash>::insert(uint64_t a1, float *a2, unsigned __int8 *a3, uint64_t a4)
{
  __int32 v9 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(a2, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    int v11 = (uint64_t *)v9[5];
    uint64_t v12 = *v11;
    *(void *)(v12 + 8) = v11[1];
    *(void *)v11[1] = v12;
    --*(void *)(a1 + 16);
    operator delete(v11);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, a2, v10);
    if (__p) {
      operator delete(__p);
    }
  }
  __int16 v13 = (char *)operator new(0x40uLL);
  unsigned __int8 v14 = a3[1];
  uint64_t v15 = *a3;
  v13[16] = v15;
  v13[17] = v14;
  uint64_t v16 = *(void *)(a3 + 4);
  *(void *)(v13 + 20) = v16;
  *((_WORD *)v13 + 20) = *(_WORD *)a4;
  *(void *)(v13 + 44) = *(void *)(a4 + 4);
  unsigned int v17 = *(void **)(a1 + 8);
  *(void *)__int16 v13 = a1;
  *((void *)v13 + 1) = v17;
  *unsigned int v17 = v13;
  uint64_t v18 = *(void *)(a1 + 16) + 1;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v18;
  uint64_t v19 = a3[1];
  unint64_t v20 = (v19
       + ((v15 - 0x61C8864680B583EBLL) << 6)
       + ((unint64_t)(v15 - 0x61C8864680B583EBLL) >> 2)
       - 0x61C8864680B583EBLL) ^ (v15 - 0x61C8864680B583EBLL);
  unint64_t v21 = ((v20 << 6) + (int)v16 + (v20 >> 2) - 0x61C8864680B583EBLL) ^ v20;
  unint64_t v22 = ((v21 << 6) + SHIDWORD(v16) + (v21 >> 2) - 0x61C8864680B583EBLL) ^ v21;
  unint64_t v23 = *((void *)a2 + 1);
  uint64_t v57 = v16;
  if (v23)
  {
    uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      uint64_t v4 = ((v21 << 6) + SHIDWORD(v16) + (v21 >> 2) - 0x61C8864680B583EBLL) ^ v21;
      if (v22 >= v23) {
        uint64_t v4 = v22 % v23;
      }
    }
    else
    {
      uint64_t v4 = v22 & (v23 - 1);
    }
    unint64_t v25 = *(uint64_t ***)(*(void *)a2 + 8 * v4);
    if (v25)
    {
      id v26 = *v25;
      if (v26)
      {
        if (v24.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v28 = v26[1];
            if (v28 == v22)
            {
              if (__PAIR64__(*((unsigned __int8 *)v26 + 17), *((unsigned __int8 *)v26 + 16)) == __PAIR64__(v19, v15)
                && *(uint64_t *)((char *)v26 + 20) == v16)
              {
                return;
              }
            }
            else if ((v28 & (v23 - 1)) != v4)
            {
              goto LABEL_28;
            }
            id v26 = (uint64_t *)*v26;
            if (!v26) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v27 = v26[1];
          if (v27 == v22)
          {
            if (__PAIR64__(*((unsigned __int8 *)v26 + 17), *((unsigned __int8 *)v26 + 16)) == __PAIR64__(v19, v15)
              && *(uint64_t *)((char *)v26 + 20) == v16)
            {
              return;
            }
          }
          else
          {
            if (v27 >= v23) {
              v27 %= v23;
            }
            if (v27 != v4) {
              break;
            }
          }
          id v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
    }
  }
LABEL_28:
  uint64_t v29 = operator new(0x30uLL);
  void *v29 = 0;
  v29[1] = v22;
  *((unsigned char *)v29 + 16) = *a3;
  *((unsigned char *)v29 + 17) = v19;
  *(void *)((char *)v29 + 20) = v57;
  v29[5] = v13;
  float v30 = (float)(unint64_t)(*((void *)a2 + 3) + 1);
  float v31 = a2[8];
  if (!v23 || (float)(v31 * (float)v23) < v30)
  {
    BOOL v32 = 1;
    if (v23 >= 3) {
      BOOL v32 = (v23 & (v23 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v23);
    unint64_t v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v23 = *((void *)a2 + 1);
    }
    if (prime <= v23)
    {
      if (prime >= v23) {
        goto LABEL_65;
      }
      unint64_t v47 = vcvtps_u32_f32((float)*((unint64_t *)a2 + 3) / a2[8]);
      if (v23 < 3 || (uint8x8_t v48 = (uint8x8_t)vcnt_s8((int8x8_t)v23), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
      {
        unint64_t v47 = std::__next_prime(v47);
      }
      else
      {
        uint64_t v49 = 1 << -(char)__clz(v47 - 1);
        if (v47 >= 2) {
          unint64_t v47 = v49;
        }
      }
      if (prime <= v47) {
        size_t prime = v47;
      }
      if (prime >= v23)
      {
        unint64_t v23 = *((void *)a2 + 1);
LABEL_65:
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v22 >= v23) {
            uint64_t v4 = v22 % v23;
          }
          else {
            uint64_t v4 = v22;
          }
        }
        else
        {
          uint64_t v4 = (v23 - 1) & v22;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        uint8x8_t v56 = *(void **)a2;
        *(void *)a2 = 0;
        if (v56) {
          operator delete(v56);
        }
        unint64_t v23 = 0;
        *((void *)a2 + 1) = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v36 = operator new(8 * prime);
    uint64_t v37 = *(void **)a2;
    *(void *)a2 = v36;
    if (v37) {
      operator delete(v37);
    }
    uint64_t v38 = 0;
    *((void *)a2 + 1) = prime;
    do
      *(void *)(*(void *)a2 + 8 * v38++) = 0;
    while (prime != v38);
    double v40 = (uint64_t *)(a2 + 4);
    uint64_t v39 = (void *)*((void *)a2 + 2);
    if (!v39)
    {
LABEL_64:
      unint64_t v23 = prime;
      goto LABEL_65;
    }
    size_t v41 = v39[1];
    size_t v42 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v43 = v41 & v42;
      *(void *)(*(void *)a2 + 8 * v43) = v40;
      for (uint64_t i = (void *)*v39; *v39; uint64_t i = (void *)*v39)
      {
        size_t v45 = i[1] & v42;
        if (v45 == v43)
        {
          uint64_t v39 = i;
        }
        else if (*(void *)(*(void *)a2 + 8 * v45))
        {
          void *v39 = *i;
          uint64_t v46 = 8 * v45;
          void *i = **(void **)(*(void *)a2 + v46);
          **(void **)(*(void *)a2 + v46) = i;
        }
        else
        {
          *(void *)(*(void *)a2 + 8 * v45) = v39;
          uint64_t v39 = i;
          size_t v43 = v45;
        }
      }
      goto LABEL_64;
    }
    if (v41 >= prime) {
      v41 %= prime;
    }
    *(void *)(*(void *)a2 + 8 * v41) = v40;
    unsigned __int8 v50 = (void *)*v39;
    if (!*v39) {
      goto LABEL_64;
    }
    while (1)
    {
      size_t v52 = v50[1];
      if (v52 >= prime) {
        v52 %= prime;
      }
      if (v52 != v41)
      {
        if (!*(void *)(*(void *)a2 + 8 * v52))
        {
          *(void *)(*(void *)a2 + 8 * v52) = v39;
          goto LABEL_69;
        }
        void *v39 = *v50;
        uint64_t v51 = 8 * v52;
        *unsigned __int8 v50 = **(void **)(*(void *)a2 + v51);
        **(void **)(*(void *)a2 + v51) = v50;
        unsigned __int8 v50 = v39;
      }
      size_t v52 = v41;
LABEL_69:
      uint64_t v39 = v50;
      unsigned __int8 v50 = (void *)*v50;
      size_t v41 = v52;
      if (!v50) {
        goto LABEL_64;
      }
    }
  }
LABEL_78:
  unsigned int v53 = *(void **)a2;
  uint64_t v54 = *(void **)(*(void *)a2 + 8 * v4);
  if (v54)
  {
    void *v29 = *v54;
LABEL_86:
    *uint64_t v54 = v29;
    goto LABEL_87;
  }
  void *v29 = *((void *)a2 + 2);
  *((void *)a2 + 2) = v29;
  v53[v4] = a2 + 4;
  if (*v29)
  {
    unint64_t v55 = *(void *)(*v29 + 8);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v55 >= v23) {
        v55 %= v23;
      }
    }
    else
    {
      v55 &= v23 - 1;
    }
    uint64_t v54 = (void *)(*(void *)a2 + 8 * v55);
    goto LABEL_86;
  }
LABEL_87:
  ++*((void *)a2 + 3);
}

void sub_1A24DFD54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void geo::Cache<geo::QuadTile,geo::QuadTile,geo::QuadTileHash,geo::LRUPolicy>::_pop(void *a1)
{
  uint64_t v2 = (char *)a1[6];
  *(_WORD *)int v6 = *((_WORD *)v2 + 8);
  uint64_t v7 = *(void *)(v2 + 20);
  __int16 v8 = *((_WORD *)v2 + 20);
  uint64_t v9 = *(void *)(v2 + 44);
  uint64_t v3 = *(void *)v2;
  *(void *)(v3 + 8) = *((void *)v2 + 1);
  **((void **)v2 + 1) = v3;
  --a1[8];
  operator delete(v2);
  uint64_t v4 = a1 + 1;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v4, v6);
  if (v5)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v10, v4, v5);
    if (v10) {
      operator delete(v10);
    }
  }
}

uint64_t std::__shared_ptr_emplace<md::RasterTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::RasterTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FDB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RasterTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FDB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__function::__func<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  ggl::Texture2D::vendImplicitLoadItem((ggl::Texture2D *)v4, **(void **)(a1 + 8));
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 24))(v2, v4);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_1A24DFF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19 == v19 + 48)
  {
    (*(void (**)(uint64_t))(a16 + 32))(v19 + 48);
    _Unwind_Resume(exception_object);
  }
  if (a19) {
    (*(void (**)(void))(*(void *)a19 + 40))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57DD88;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57DD88;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::RasterLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

void md::RasterLayerDataSource::~RasterLayerDataSource(md::RasterLayerDataSource *this)
{
  md::RasterLayerDataSource::~RasterLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t vars8;

  *(void *)this = &unk_1EF540170;
  if (*((void *)this + 106))
  {
    uint64_t v2 = (char *)this + 832;
    uint64_t v3 = (char *)*((void *)this + 105);
    uint64_t v4 = *((void *)this + 104);
    uint64_t v5 = *(void *)v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    *((void *)this + 106) = 0;
    if (v3 != (char *)this + 832)
    {
      do
      {
        int v6 = (char *)*((void *)v3 + 1);
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != v2);
    }
  }
  uint64_t v7 = (void *)*((void *)this + 101);
  if (v7)
  {
    do
    {
      __int16 v8 = (void *)*v7;
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  uint64_t v9 = (void *)*((void *)this + 99);
  *((void *)this + 99) = 0;
  if (v9) {
    operator delete(v9);
  }
  *((void *)this + 94) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5850A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::GlobeTextured>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5850A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::DaVinci::GlobeTexturedMesh::~GlobeTexturedMesh(ggl::DaVinci::GlobeTexturedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::GlobeTexturedMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::GlobeTexturedMesh *)((char *)this - 16));
}

void ggl::DaVinci::GlobeTexturedMesh::~GlobeTexturedMesh(ggl::DaVinci::GlobeTexturedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::DaVinci::GlobeTextured>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::DaVinci::GlobeTexturedPipelineState::~GlobeTexturedPipelineState(ggl::DaVinci::GlobeTexturedPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::DaVinci::GlobeTexturedPipelineSetup::textureIsEnabled(ggl::DaVinci::GlobeTexturedPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::DaVinci::GlobeTexturedPipelineSetup::constantDataIsEnabled(ggl::DaVinci::GlobeTexturedPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::DaVinci::GlobeTexturedPipelineSetup::~GlobeTexturedPipelineSetup(ggl::DaVinci::GlobeTexturedPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A24E0CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E1110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1A24E11E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E1454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E1610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A24E16F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E1A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E1C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E210C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E24AC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A24E25B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E2B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1A24E2E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E2FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E3024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E3D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E57AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,uint64_t a27,uint64_t a28,id *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *__p,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  std::vector<md::AnimationData::LabelEntry>::~vector[abi:nn180100](a26);
  std::vector<geo::_retain_ptr<CAMediaTimingFunction * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100](a20);
  unsigned int v63 = *(void **)(v61 + 72);
  if (v63)
  {
    *(void *)(v61 + 80) = v63;
    operator delete(v63);
    unint64_t v64 = *(void **)(v61 + 48);
    if (!v64)
    {
LABEL_3:
      BOOL v65 = *(void **)(v61 + 24);
      if (!v65) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v64 = *(void **)(v61 + 48);
    if (!v64) {
      goto LABEL_3;
    }
  }
  *(void *)(v61 + 56) = v64;
  operator delete(v64);
  BOOL v65 = *(void **)(v61 + 24);
  if (!v65)
  {
LABEL_4:
    unint64_t v66 = *(void **)v61;
    if (!*(void *)v61) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  *(void *)(v61 + 32) = v65;
  operator delete(v65);
  unint64_t v66 = *(void **)v61;
  if (!*(void *)v61)
  {
LABEL_6:

    MEMORY[0x1A6239270](v61, 0x10A0C400168CBFELL);
    MEMORY[0x1A6239270](a29, 0x10E0C402FD04164);

    std::function<void ()(VKFlyoverTourState)>::~function(&a57);
    _ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_EN3__1D1Ev((uint64_t)&a36);
    std::function<void ()(std::string const&)>::~function(&a61);
    _ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_EN3__0D1Ev((uint64_t)&a47);
    geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(&a51);

    geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(&a54);
    _Unwind_Resume(a1);
  }
LABEL_5:
  *(void *)(v61 + 8) = v66;
  operator delete(v66);
  goto LABEL_6;
}

double __copy_helper_block_ea8_72c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  double result = *(double *)(a2 + 120);
  *(double *)(a1 + 120) = result;
  return result;
}

uint64_t _ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_EN3__1D1Ev(uint64_t a1)
{
  *(void *)(a1 + 64) = &unk_1EF55A058;
  if (*(void *)(a1 + 72))
  {

    uint64_t v2 = *(void **)(a1 + 72);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return a1;
}

uint64_t _ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_EN3__0D1Ev(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EF55A078;
  if (*(void *)(a1 + 16))
  {

    uint64_t v2 = *(void **)(a1 + 16);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return a1;
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEEclEOS5_(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **(void ***)(v3 + 792);
  uint64_t v16 = MEMORY[0x1E4F143A8];
  uint64_t v17 = 3321888768;
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v21 = *(_OWORD *)(a1 + 16);
  uint64_t v18 = ___ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_ENK3__1clE18VKFlyoverTourState_block_invoke;
  uint64_t v19 = &unk_1EF58DCD0;
  int v27 = v2;
  uint64_t v20 = v3;
  long long v22 = v5;
  long long v23 = *(_OWORD *)(a1 + 48);
  uint64_t v24 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 72;
  uint64_t v7 = v4;
  geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(&v25, v6);
  dispatch_async(v7, &v16);

  unint64_t v25 = &unk_1EF55A058;
  if (v26)
  {

    uint64_t v15 = v26;
  }
  else
  {
    uint64_t v15 = 0;
  }
}

void ___ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_ENK3__1clE18VKFlyoverTourState_block_invoke(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 120) - 3) <= 2)
  {
    [*(id *)(a1 + 32) endRegionChange];
    if (*(_DWORD *)(a1 + 120) == 3) {
      objc_msgSend(*(id *)(a1 + 32), "moveTo:height:useHeight:zoom:rotation:tilt:duration:timingCurve:completion:", 1, VKAnimationCurveEaseOut, 0, *(double *)(a1 + 40) * 57.2957795, *(double *)(a1 + 48) * 57.2957795, *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 80), *(double *)(a1 + 72), 1.0);
    }
  }
  int v2 = (void *)MEMORY[0x1A6239EB0](*(void *)(a1 + 104));

  if (v2)
  {
    uint64_t v3 = (void (**)(id, void))MEMORY[0x1A6239EB0](*(void *)(a1 + 104));
    v3[2](v3, *(unsigned int *)(a1 + 120));
  }
}

void sub_1A24E5CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_4096c152_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFv18VKFlyoverTourStateENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(uint64_t a1)
{
  *(void *)(a1 + 96) = &unk_1EF55A058;
  int v2 = *(void **)(a1 + 104);
  if (v2)
  {

    int v2 = *(void **)(a1 + 104);
  }
}

void *__copy_helper_block_ea8_40c40_ZTSN3gdc11CameraFrameIN3geo7RadiansEdEE96c152_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFv18VKFlyoverTourStateENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((void *)(a1 + 96), a2 + 96);
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEE18destroy_deallocateEv(uint64_t a1)
{
  *(void *)(a1 + 72) = &unk_1EF55A058;
  if (*(void *)(a1 + 80))
  {

    int v2 = *(void **)(a1 + 80);
  }
  else
  {
    int v2 = 0;
  }

  operator delete((void *)a1);
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEE7destroyEv(void *a1)
{
  a1[9] = &unk_1EF55A058;
  if (a1[10])
  {

    int v2 = (void *)a1[10];
  }
  else
  {
    int v2 = 0;
  }

  uint64_t v3 = (void *)a1[1];
}

void *_ZNKSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEE7__cloneEPNS0_6__baseIS6_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57E058;
  *(void *)(a2 + 8) = *(id *)(a1 + 8);
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  return geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((void *)(a2 + 72), a1 + 72);
}

void *_ZNKSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEE7__cloneEv(uint64_t a1)
{
  int v2 = operator new(0x60uLL);
  *int v2 = &unk_1EF57E058;
  v2[1] = *(id *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v2 + 2) = v3;
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  v2[8] = *(void *)(a1 + 64);
  geo::_retain_ptr<void({block_pointer} {__strong})(VKFlyoverTourState),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(v2 + 9, a1 + 72);
  return v2;
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57E058;
  *(void *)(a1 + 72) = &unk_1EF55A058;
  if (*(void *)(a1 + 80))
  {

    int v2 = *(void **)(a1 + 80);
  }
  else
  {
    int v2 = 0;
  }

  JUMPOUT(0x1A6239270);
}

uint64_t _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__1NS_9allocatorIS2_EEFv18VKFlyoverTourStateEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57E058;
  *(void *)(a1 + 72) = &unk_1EF55A058;
  if (*(void *)(a1 + 80))
  {

    int v2 = *(void **)(a1 + 80);
  }
  else
  {
    int v2 = 0;
  }

  return a1;
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEEclESB_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(id **)(*(void *)(a1 + 8) + 792);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3321888768;
  v10[2] = ___ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_ENK3__0clERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v10[3] = &__block_descriptor_64_ea8_32c142_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFvP8NSStringENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE_e5_v8__0l;
  geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(&v11, a1 + 16);
  uint64_t v13 = a2;
  dispatch_async(v4, v10);

  uint64_t v11 = &unk_1EF55A078;
  if (v12)
  {

    uint64_t v9 = v12;
  }
  else
  {
    uint64_t v9 = 0;
  }
}

void ___ZZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_ENK3__0clERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  int v2 = (void *)MEMORY[0x1A6239EB0](*(void *)(a1 + 40));

  if (v2)
  {
    uint64_t v5 = (void (**)(id, void *))MEMORY[0x1A6239EB0](*(void *)(a1 + 40));
    long long v3 = *(uint64_t **)(a1 + 56);
    if (*((char *)v3 + 23) < 0) {
      long long v3 = (uint64_t *)*v3;
    }
    uint64_t v4 = [NSString stringWithUTF8String:v3];
    v5[2](v5, v4);
  }
}

void sub_1A24E6210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c142_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFvP8NSStringENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1EF55A078;
  int v2 = *(void **)(a1 + 40);
  if (v2)
  {

    int v2 = *(void **)(a1 + 40);
  }
}

void *__copy_helper_block_ea8_32c142_ZTSN3geo11_retain_ptrIU8__strongU13block_pointerFvP8NSStringENS_16_retain_objc_arcENS_17_release_objc_arcENS_10_hash_objcENS_11_equal_objcEEE(uint64_t a1, uint64_t a2)
{
  return geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((void *)(a1 + 32), a2 + 32);
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEE18destroy_deallocateEv(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EF55A078;
  if (*(void *)(a1 + 24))
  {

    int v2 = *(void **)(a1 + 24);
  }
  else
  {
    int v2 = 0;
  }

  operator delete((void *)a1);
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEE7destroyEv(void *a1)
{
  a1[2] = &unk_1EF55A078;
  if (a1[3])
  {

    int v2 = (void *)a1[3];
  }
  else
  {
    int v2 = 0;
  }

  long long v3 = (void *)a1[1];
}

void *_ZNKSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEE7__cloneEPNS0_6__baseISC_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57E010;
  a2[1] = *(id *)(a1 + 8);
  return geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(a2 + 2, a1 + 16);
}

void *_ZNKSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEE7__cloneEv(uint64_t a1)
{
  int v2 = operator new(0x28uLL);
  *int v2 = &unk_1EF57E010;
  v2[1] = *(id *)(a1 + 8);
  geo::_retain_ptr<void({block_pointer} {__strong})(NSString *),geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(v2 + 2, a1 + 16);
  return v2;
}

void _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57E010;
  *(void *)(a1 + 16) = &unk_1EF55A078;
  if (*(void *)(a1 + 24))
  {

    int v2 = *(void **)(a1 + 24);
  }
  else
  {
    int v2 = 0;
  }

  JUMPOUT(0x1A6239270);
}

uint64_t _ZNSt3__110__function6__funcIZZ88__VKGlobeCameraController_flyoverTourAnimation_animateToStart_labelChanged_stateChange__EUb_E3__0NS_9allocatorIS2_EEFvRKNS_12basic_stringIcNS_11char_traitsIcEENS3_IcEEEEEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EF57E010;
  *(void *)(a1 + 16) = &unk_1EF55A078;
  if (*(void *)(a1 + 24))
  {

    int v2 = *(void **)(a1 + 24);
  }
  else
  {
    int v2 = 0;
  }

  return a1;
}

void sub_1A24E6D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  objc_destroyWeak(v39);
  objc_destroyWeak((id *)(v40 - 192));

  _Block_object_dispose((const void *)(v40 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1A24E6FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

void sub_1A24E70C0(_Unwind_Exception *a1)
{
  long long v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A24E7198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E7F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id location,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);

  _Unwind_Resume(a1);
}

void sub_1A24E8360(_Unwind_Exception *a1)
{
  long long v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A24E843C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E86BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E8778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E8A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_1A24E8B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E8C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E8EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_1A24E8FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E908C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E938C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E939C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_1A24E9490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E9544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E9848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24E9858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A24E99B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E9A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E9D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24E9E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A24EA0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24EA260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A24EA6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A24EA940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciCenterLineRoadsTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::DaVinciCenterLineRoadsTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DaVinciCenterLineRoadsTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::DaVinciCenterLineRoadsLayerDataSource::~DaVinciCenterLineRoadsLayerDataSource(md::DaVinciCenterLineRoadsLayerDataSource *this)
{
  md::DaVinciCenterLineRoadsLayerDataSource::~DaVinciCenterLineRoadsLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  md::DaVinciCenterLineRoadsLayerDataSource *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EF54FA60;
  int v2 = *((void *)this + 103);
  *((void *)this + 103) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x1A6239270](v2, 0x1020C40509EF904);
  }
  uint64_t v5 = (md::DaVinciCenterLineRoadsLayerDataSource *)*((void *)this + 101);
  if (v5 == (md::DaVinciCenterLineRoadsLayerDataSource *)((char *)this + 784))
  {
    (*(void (**)(char *))(*((void *)this + 98) + 32))((char *)this + 784);
  }
  else if (v5)
  {
    (*(void (**)(md::DaVinciCenterLineRoadsLayerDataSource *))(*(void *)v5 + 40))(v5);
  }

  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 95);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

uint64_t std::__shared_ptr_emplace<md::DsmDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::DsmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DsmDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

_DWORD *md::TransitInterTileMediator::updateTileInfos(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *(void *)(a3 + 8) != *(void *)(a3 + 16);
  uint64_t v6 = *(_DWORD **)(a1 + 8);
  double result = (_DWORD *)(a1 + 8);
  uint64_t v5 = v6;
  if (!v6)
  {
    *(_DWORD *)a3 = 0;
    return result;
  }
  int v8 = *a2;
  int v7 = a2[1];
  unsigned int v9 = a2[2];
  int v10 = 1 << v9;
  uint64_t v11 = result;
  int v12 = v7 - 1;
  if (*a2 >= 1 << v9) {
    int v13 = 1 << v9;
  }
  else {
    int v13 = 0;
  }
  if (v8 >= 0) {
    int v14 = -v13;
  }
  else {
    int v14 = 1 << v9;
  }
  int v15 = v14 + v8;
  uint64_t v16 = result;
  uint64_t v17 = v5;
  do
  {
    int v21 = v17[8];
    BOOL v22 = v21 < v15;
    if (v21 == v15 && (v23 = v17[9], BOOL v22 = v23 < v12, v23 == v12)) {
      BOOL v18 = v17[10] < v9;
    }
    else {
      BOOL v18 = v22;
    }
    BOOL v19 = !v18;
    if (v18) {
      uint64_t v20 = v17 + 2;
    }
    else {
      uint64_t v20 = v17;
    }
    if (v19) {
      uint64_t v16 = v17;
    }
    uint64_t v17 = (_DWORD *)*v20;
  }
  while (*v20);
  if (v16 == result) {
    goto LABEL_29;
  }
  int v24 = v16[8];
  if (v15 == v24)
  {
    int v25 = v16[9];
    if (v12 == v25)
    {
      if (v9 >= v16[10]) {
        goto LABEL_131;
      }
LABEL_29:
      *(unsigned char *)a3 = 0;
      goto LABEL_30;
    }
    if (v7 <= v25) {
      goto LABEL_29;
    }
  }
  else if (v15 < v24)
  {
    goto LABEL_29;
  }
LABEL_131:
  *(unsigned char *)a3 = 1;
  if (*((unsigned __int8 *)v16 + 50) != v3)
  {
    *((unsigned char *)v16 + 50) = v3;
    uint64_t v87 = (char *)*((void *)v16 + 7);
    BOOL v86 = (char *)*((void *)v16 + 8);
    if (v87 != v86)
    {
      unint64_t v88 = v86 - v87 - 8;
      if (v88 < 8) {
        goto LABEL_138;
      }
      uint64_t v89 = (v88 >> 3) + 1;
      int v90 = (uint64_t *)(v87 + 8);
      uint64_t v91 = v89 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v92 = *v90;
        *(unsigned char *)(*(v90 - 1) + 1369) = 1;
        *(unsigned char *)(v92 + 1369) = 1;
        v90 += 2;
        v91 -= 2;
      }
      while (v91);
      if (v89 != (v89 & 0x3FFFFFFFFFFFFFFELL))
      {
        v87 += 8 * (v89 & 0x3FFFFFFFFFFFFFFELL);
        do
        {
LABEL_138:
          uint64_t v93 = *(void *)v87;
          v87 += 8;
          *(unsigned char *)(v93 + 1369) = 1;
        }
        while (v87 != v86);
      }
    }
  }
LABEL_30:
  if (v8 + 1 >= v10) {
    int v26 = 1 << v9;
  }
  else {
    int v26 = 0;
  }
  if (v8 >= -1) {
    int v27 = -v26;
  }
  else {
    int v27 = 1 << v9;
  }
  int v28 = v27 + v8 + 1;
  uint64_t v29 = result;
  float v30 = v5;
  do
  {
    int v34 = v30[8];
    BOOL v35 = v34 < v28;
    if (v34 == v28 && (v36 = v30[9], BOOL v35 = v36 < v7, v36 == v7)) {
      BOOL v31 = v30[10] < v9;
    }
    else {
      BOOL v31 = v35;
    }
    BOOL v32 = !v31;
    if (v31) {
      unint64_t v33 = v30 + 2;
    }
    else {
      unint64_t v33 = v30;
    }
    if (v32) {
      uint64_t v29 = v30;
    }
    float v30 = (_DWORD *)*v33;
  }
  while (*v33);
  if (v29 == result) {
    goto LABEL_65;
  }
  int v37 = v29[8];
  BOOL v38 = v28 < v37;
  if (v28 == v37)
  {
    int v39 = v29[9];
    BOOL v38 = v7 < v39;
    if (v7 == v39)
    {
      if (v9 >= v29[10]) {
        goto LABEL_54;
      }
LABEL_65:
      *(unsigned char *)(a3 + 1) = 0;
      goto LABEL_66;
    }
  }
  if (v38) {
    goto LABEL_65;
  }
LABEL_54:
  *(unsigned char *)(a3 + 1) = 1;
  if (*((unsigned __int8 *)v29 + 51) == v3) {
    goto LABEL_66;
  }
  *((unsigned char *)v29 + 51) = v3;
  size_t v41 = (char *)*((void *)v29 + 7);
  uint64_t v40 = (char *)*((void *)v29 + 8);
  if (v41 == v40) {
    goto LABEL_66;
  }
  unint64_t v42 = v40 - v41 - 8;
  if (v42 >= 8)
  {
    uint64_t v43 = (v42 >> 3) + 1;
    double v44 = (uint64_t *)(v41 + 8);
    uint64_t v45 = v43 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v46 = *v44;
      *(unsigned char *)(*(v44 - 1) + 1369) = 1;
      *(unsigned char *)(v46 + 1369) = 1;
      v44 += 2;
      v45 -= 2;
    }
    while (v45);
    if (v43 == (v43 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_66;
    }
    v41 += 8 * (v43 & 0x3FFFFFFFFFFFFFFELL);
  }
  do
  {
    uint64_t v47 = *(void *)v41;
    v41 += 8;
    *(unsigned char *)(v47 + 1369) = 1;
  }
  while (v41 != v40);
LABEL_66:
  int v48 = v7 + 1;
  uint64_t v49 = result;
  unsigned __int8 v50 = v5;
  do
  {
    int v54 = v50[8];
    if (v54 == v15)
    {
      int v55 = v50[9];
      if (v55 == v48) {
        BOOL v51 = v50[10] < v9;
      }
      else {
        BOOL v51 = v55 <= v7;
      }
    }
    else
    {
      BOOL v51 = v54 < v15;
    }
    BOOL v52 = !v51;
    if (v51) {
      unsigned int v53 = v50 + 2;
    }
    else {
      unsigned int v53 = v50;
    }
    if (v52) {
      uint64_t v49 = v50;
    }
    unsigned __int8 v50 = (_DWORD *)*v53;
  }
  while (*v53);
  if (v49 == result) {
    goto LABEL_94;
  }
  int v56 = v49[8];
  BOOL v57 = v15 < v56;
  if (v15 == v56)
  {
    int v58 = v49[9];
    BOOL v57 = v48 < v58;
    if (v48 == v58)
    {
      if (v9 >= v49[10]) {
        goto LABEL_83;
      }
LABEL_94:
      *(unsigned char *)(a3 + 2) = 0;
      goto LABEL_95;
    }
  }
  if (v57) {
    goto LABEL_94;
  }
LABEL_83:
  *(unsigned char *)(a3 + 2) = 1;
  if (*((unsigned __int8 *)v49 + 48) == v3) {
    goto LABEL_95;
  }
  *((unsigned char *)v49 + 48) = v3;
  unsigned int v59 = (char *)*((void *)v49 + 7);
  unsigned int v60 = (char *)*((void *)v49 + 8);
  if (v59 == v60) {
    goto LABEL_95;
  }
  unint64_t v61 = v60 - v59 - 8;
  if (v61 >= 8)
  {
    uint64_t v62 = (v61 >> 3) + 1;
    unsigned int v63 = (uint64_t *)(v59 + 8);
    uint64_t v64 = v62 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v65 = *v63;
      *(unsigned char *)(*(v63 - 1) + 1369) = 1;
      *(unsigned char *)(v65 + 1369) = 1;
      v63 += 2;
      v64 -= 2;
    }
    while (v64);
    if (v62 == (v62 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_95;
    }
    v59 += 8 * (v62 & 0x3FFFFFFFFFFFFFFELL);
  }
  do
  {
    uint64_t v66 = *(void *)v59;
    v59 += 8;
    *(unsigned char *)(v66 + 1369) = 1;
  }
  while (v59 != v60);
LABEL_95:
  if (v8 <= v10) {
    int v67 = 0;
  }
  else {
    int v67 = 1 << v9;
  }
  if (v8 >= 1) {
    int v10 = -v67;
  }
  int v68 = v8 + v10 - 1;
  do
  {
    int v72 = v5[8];
    BOOL v73 = v72 < v68;
    if (v72 == v68 && (v74 = v5[9], BOOL v73 = v74 < v7, v74 == v7)) {
      BOOL v69 = v5[10] < v9;
    }
    else {
      BOOL v69 = v73;
    }
    BOOL v70 = !v69;
    if (v69) {
      double v71 = v5 + 2;
    }
    else {
      double v71 = v5;
    }
    if (v70) {
      uint64_t v11 = v5;
    }
    uint64_t v5 = (_DWORD *)*v71;
  }
  while (*v71);
  if (v11 == result) {
    goto LABEL_129;
  }
  int v75 = v11[8];
  BOOL v76 = v68 < v75;
  if (v68 != v75 || (v77 = v11[9], BOOL v76 = v7 < v77, v7 != v77))
  {
    if (!v76) {
      goto LABEL_118;
    }
LABEL_129:
    *(unsigned char *)(a3 + 3) = 0;
    return result;
  }
  if (v9 < v11[10]) {
    goto LABEL_129;
  }
LABEL_118:
  *(unsigned char *)(a3 + 3) = 1;
  if (*((unsigned __int8 *)v11 + 49) != v3)
  {
    *((unsigned char *)v11 + 49) = v3;
    unint64_t v78 = (char *)*((void *)v11 + 7);
    unint64_t v79 = (char *)*((void *)v11 + 8);
    if (v78 != v79)
    {
      unint64_t v80 = v79 - v78 - 8;
      if (v80 < 8) {
        goto LABEL_125;
      }
      uint64_t v81 = (v80 >> 3) + 1;
      uint64_t v82 = (uint64_t *)(v78 + 8);
      uint64_t v83 = v81 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v84 = *v82;
        *(unsigned char *)(*(v82 - 1) + 1369) = 1;
        *(unsigned char *)(v84 + 1369) = 1;
        v82 += 2;
        v83 -= 2;
      }
      while (v83);
      if (v81 != (v81 & 0x3FFFFFFFFFFFFFFELL))
      {
        v78 += 8 * (v81 & 0x3FFFFFFFFFFFFFFELL);
        do
        {
LABEL_125:
          uint64_t v85 = *(void *)v78;
          v78 += 8;
          *(unsigned char *)(v85 + 1369) = 1;
        }
        while (v78 != v79);
      }
    }
  }
  return result;
}

void md::TransitInterTileMediator::populateSectionTerminusPaths(int a1, uint64_t a2, void *a3, void *a4)
{
  if (a3 != a4)
  {
    uint64_t v4 = a3;
    do
    {
      int v7 = (unsigned char *)v4[7];
      int v8 = (unsigned char *)v4[8];
      while (v7 != v8)
      {
        if (v7[93])
        {
          if (v7[32] == 2 && v7[33] == a1)
          {
            uint64_t v16 = *(void **)(a2 + 8);
            unint64_t v15 = *(void *)(a2 + 16);
            if ((unint64_t)v16 >= v15)
            {
              BOOL v22 = *(void **)a2;
              unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v16 - *(void *)a2) >> 3);
              unint64_t v24 = v23 + 1;
              if (v23 + 1 > 0x666666666666666) {
                goto LABEL_72;
              }
              unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - (void)v22) >> 3);
              if (2 * v25 > v24) {
                unint64_t v24 = 2 * v25;
              }
              if (v25 >= 0x333333333333333) {
                unint64_t v26 = 0x666666666666666;
              }
              else {
                unint64_t v26 = v24;
              }
              if (v26 > 0x666666666666666) {
                goto LABEL_73;
              }
              uint64_t v27 = 40 * v26;
              int v28 = (char *)operator new(40 * v26);
              uint64_t v29 = &v28[40 * v23];
              *(void *)uint64_t v29 = v4;
              unint64_t v30 = *(void *)(*v4 + 56);
              unint64_t v31 = *(void *)(*v4 + 64);
              if (v31 >= v30) {
                uint64_t v32 = *(void *)(*v4 + 56);
              }
              else {
                uint64_t v32 = *(void *)(*v4 + 64);
              }
              if (v31 > v30) {
                unint64_t v30 = *(void *)(*v4 + 64);
              }
              *((void *)v29 + 1) = v32;
              *((void *)v29 + 2) = v30;
              *(int64x2_t *)(v29 + 24) = vdupq_n_s64((unint64_t)v7);
              if (v16 == v22)
              {
                int v34 = &v28[40 * v23];
              }
              else
              {
                unint64_t v33 = &v28[40 * v23];
                do
                {
                  int v34 = v33 - 40;
                  long long v35 = *(_OWORD *)(v16 - 5);
                  long long v36 = *(_OWORD *)(v16 - 3);
                  *((void *)v33 - 1) = *(v16 - 1);
                  *(_OWORD *)(v33 - 24) = v36;
                  *(_OWORD *)(v33 - 40) = v35;
                  v16 -= 5;
                  v33 -= 40;
                }
                while (v16 != v22);
              }
              int v37 = &v28[v27];
              int v21 = v29 + 40;
              *(void *)a2 = v34;
              *(void *)(a2 + 8) = v29 + 40;
              *(void *)(a2 + 16) = v37;
              if (v22) {
                operator delete(v22);
              }
            }
            else
            {
              *uint64_t v16 = v4;
              uint64_t v17 = (uint64_t *)(*v4 + 64);
              uint64_t v18 = *v17;
              BOOL v19 = (uint64_t *)(*v4 + 56);
              BOOL v20 = *v17 >= (unint64_t)*v19;
              if (*v17 >= (unint64_t)*v19) {
                uint64_t v18 = *(void *)(*v4 + 56);
              }
              v16[1] = v18;
              if (!v20) {
                uint64_t v17 = v19;
              }
              v16[2] = *v17;
              void v16[3] = v7;
              v16[4] = v7;
              int v21 = v16 + 5;
            }
            *(void *)(a2 + 8) = v21;
          }
          if (v7[72] == 2 && v7[73] == a1)
          {
            int v39 = v7 + 40;
            size_t v41 = *(void **)(a2 + 8);
            unint64_t v40 = *(void *)(a2 + 16);
            if ((unint64_t)v41 < v40)
            {
              *size_t v41 = v4;
              unsigned int v9 = (uint64_t *)(*v4 + 64);
              uint64_t v10 = *v9;
              uint64_t v11 = (uint64_t *)(*v4 + 56);
              BOOL v12 = *v9 >= (unint64_t)*v11;
              if (*v9 >= (unint64_t)*v11) {
                uint64_t v10 = *(void *)(*v4 + 56);
              }
              v41[1] = v10;
              if (!v12) {
                unsigned int v9 = v11;
              }
              v41[2] = *v9;
              v41[3] = v7;
              v41[4] = v39;
              int v13 = v41 + 5;
            }
            else
            {
              unint64_t v42 = *(void **)a2;
              unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v41 - *(void *)a2) >> 3);
              unint64_t v44 = v43 + 1;
              if (v43 + 1 > 0x666666666666666) {
LABEL_72:
              }
                abort();
              unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - (void)v42) >> 3);
              if (2 * v45 > v44) {
                unint64_t v44 = 2 * v45;
              }
              if (v45 >= 0x333333333333333) {
                unint64_t v46 = 0x666666666666666;
              }
              else {
                unint64_t v46 = v44;
              }
              if (v46 > 0x666666666666666) {
LABEL_73:
              }
                std::__throw_bad_array_new_length[abi:nn180100]();
              uint64_t v47 = 40 * v46;
              int v48 = (char *)operator new(40 * v46);
              uint64_t v49 = &v48[40 * v43];
              *(void *)uint64_t v49 = v4;
              unint64_t v50 = *(void *)(*v4 + 56);
              unint64_t v51 = *(void *)(*v4 + 64);
              if (v51 >= v50) {
                uint64_t v52 = *(void *)(*v4 + 56);
              }
              else {
                uint64_t v52 = *(void *)(*v4 + 64);
              }
              if (v51 > v50) {
                unint64_t v50 = *(void *)(*v4 + 64);
              }
              *((void *)v49 + 1) = v52;
              *((void *)v49 + 2) = v50;
              *((void *)v49 + 3) = v7;
              *((void *)v49 + 4) = v39;
              if (v41 == v42)
              {
                int v54 = &v48[40 * v43];
              }
              else
              {
                unsigned int v53 = &v48[40 * v43];
                do
                {
                  int v54 = v53 - 40;
                  long long v55 = *(_OWORD *)(v41 - 5);
                  long long v56 = *(_OWORD *)(v41 - 3);
                  *((void *)v53 - 1) = *(v41 - 1);
                  *(_OWORD *)(v53 - 24) = v56;
                  *(_OWORD *)(v53 - 40) = v55;
                  v41 -= 5;
                  v53 -= 40;
                }
                while (v41 != v42);
              }
              BOOL v57 = &v48[v47];
              int v13 = v49 + 40;
              *(void *)a2 = v54;
              *(void *)(a2 + 8) = v49 + 40;
              *(void *)(a2 + 16) = v57;
              if (v42) {
                operator delete(v42);
              }
            }
            *(void *)(a2 + 8) = v13;
          }
        }
        v7 += 96;
      }
      v4 += 31;
    }
    while (v4 != a4);
  }
}

void md::LabelLayerData::~LabelLayerData(md::LabelLayerData *this)
{
  *(void *)this = &unk_1EF533EA0;
  *((void *)this + 79) = &unk_1EF533EE0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF533EA0;
  *((void *)this + 79) = &unk_1EF533EE0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::MapTileData::~MapTileData(this);
}

BOOL md::LabelLineResolvedPosition::hasText(md::LabelLineResolvedPosition *this, double a2)
{
  if ((*(void *)this
     && *((_DWORD *)this + 10) == *(_DWORD *)(*(void *)this + 252)
     && *((void *)this + 3)
     && (*((__int16 *)this + 17) & 0x80000000) == 0
     || (md::LabelLineResolvedPosition::moveOntoPathForZoom(this, *((unsigned __int8 *)this + 164), a2), *(void *)this)
     && *((_DWORD *)this + 10) == *(_DWORD *)(*(void *)this + 252))
    && (int v3 = (uint64_t *)*((void *)this + 3)) != 0
    && (*((__int16 *)this + 17) & 0x80000000) == 0
    && (uint64_t v4 = *v3) != 0)
  {
    return *(unsigned __int8 *)(v4 + 38) != 255;
  }
  else
  {
    return 0;
  }
}

double altitude::GeoRegionalResourceLoader::createAndQueueTileRequest@<D0>(void *a1@<X0>, int a2@<W2>, _OWORD *a3@<X8>)
{
  int v9 = a2;
  (*(void (**)(double *__return_ptr))(*a1 + 64))(v8);
  unint64_t v5 = a1[6];
  if (v5)
  {
    uint64_t v6 = *(std::__shared_weak_count **)&v8[1];
    long long v10 = *(_OWORD *)v8;
    if (*(void *)&v8[1])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v8[1] + 8), 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v5, &v10);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v5, &v10);
    }
  }
  double result = v8[0];
  *a3 = *(_OWORD *)v8;
  return result;
}

void altitude::GeoRegionalResourceLoader::requestTile(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, void *a7@<X8>)
{
  karo::AsyncRequestManagerTemplate<altitude::TileKey,unsigned int>::requestT(a1, a2, a3, a4, a5, a6, 0, &v13);
  uint64_t v8 = v14;
  int v9 = v15;
  *a7 = off_1EF5677B0;
  a7[1] = v8;
  a7[2] = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = a7[1];
  }
  if (v8)
  {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 128), 1u);
    uint64_t v8 = a7[1];
  }
  *a7 = off_1EF5676C0;
  a7[3] = 0;
  a7[4] = 0;
  uint64_t v10 = a7[2];
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = (std::__shared_weak_count *)a7[4];
    a7[3] = v8;
    a7[4] = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    a7[3] = v8;
    a7[4] = 0;
  }
  int v13 = off_1EF5677B0;
  if (v14) {
    atomic_fetch_add((atomic_uint *volatile)(v14 + 128), 0xFFFFFFFF);
  }
  BOOL v12 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void altitude::GeoRegionalResourceLoader::createRequest()
{
}

void sub_1A24EC0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, karo::AsyncFileLoader::LoadJob *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);

  _Block_object_dispose(&a49, 8);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a55);
  _Block_object_dispose(&a57, 8);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a63);
  _Block_object_dispose(&a65, 8);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__33382(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__33383(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

__n128 __Block_byref_object_copy__34(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN8altitude26GeoRegionalResourceLoadJob8startJobEv_block_invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v10 = a3;
  id v11 = a5;
  id v12 = a6;
  int v13 = [v10 decodedRepresentation];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v14 = objc_alloc_init(MEMORY[0x1E4F648F8]);
    char v21 = 1;
    if ([v14 canDecodeTile:a2 quickly:&v21])
    {
      unint64_t v15 = [v10 data];
      uint64_t v16 = [v14 decodeTile:v15 forKey:a2];

      int v13 = (void *)v16;
    }
  }
  uint64_t v17 = *(pthread_mutex_t ***)(*(void *)(*(void *)(a1 + 40) + 8) + 48);
  pthread_mutex_lock(*v17);
  if (!**(unsigned char **)(*(void *)(*(void *)(a1 + 48) + 8) + 48))
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    if (!*(unsigned char *)(v18 + 24))
    {
      if (v11)
      {
        *(unsigned char *)(v18 + 24) = 1;
        BOOL v19 = GEOStringFromTileKey();
        NSLog((NSString *)@"Regional resource download failed: %@ Error: %@", v19, v11);

        uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
      }
      else
      {
        [*(id *)(a1 + 32) addObject:v13];
        if (!--*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + 224), *(id *)(a1 + 32));
          karo::Job::step(*(karo::Job **)(*(void *)(*(void *)(a1 + 64) + 8) + 24));
        }
      }
    }
  }
  pthread_mutex_unlock(*v17);
}

void sub_1A24EC5A4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*v6);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<altitude::GeoRegionalResourceLoadJob *,std::shared_ptr<altitude::GeoRegionalResourceLoadJob>::__shared_ptr_default_delete<altitude::GeoRegionalResourceLoadJob,altitude::GeoRegionalResourceLoadJob>,std::allocator<altitude::GeoRegionalResourceLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::GeoRegionalResourceLoadJob *,std::shared_ptr<altitude::GeoRegionalResourceLoadJob>::__shared_ptr_default_delete<altitude::GeoRegionalResourceLoadJob,altitude::GeoRegionalResourceLoadJob>,std::allocator<altitude::GeoRegionalResourceLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<karo::Mutex *,std::shared_ptr<karo::Mutex>::__shared_ptr_default_delete<karo::Mutex,karo::Mutex>,std::allocator<karo::Mutex>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(pthread_mutex_t ***)(result + 24);
  if (v1)
  {
    pthread_mutex_destroy(*v1);
    if (*v1) {
      MEMORY[0x1A6239270](*v1, 0x1000C40FA0F61DDLL);
    }
    *uint64_t v1 = 0;
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::Mutex *,std::shared_ptr<karo::Mutex>::__shared_ptr_default_delete<karo::Mutex,karo::Mutex>,std::allocator<karo::Mutex>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t altitude::GeoRegionalResourceLoadJob::getData(altitude::GeoRegionalResourceLoadJob *this)
{
  return *((void *)this + 28);
}

BOOL altitude::GeoRegionalResourceLoadJob::getDataSize(altitude::GeoRegionalResourceLoadJob *this)
{
  return *((void *)this + 28) != 0;
}

uint64_t altitude::GeoRegionalResourceLoadJob::succeeded(altitude::GeoRegionalResourceLoadJob *this)
{
  return *((unsigned __int8 *)this + 216);
}

uint64_t altitude::GeoRegionalResourceLoadJob::jobStep(altitude::GeoRegionalResourceLoadJob *this)
{
  *((unsigned char *)this + 216) = *((void *)this + 28) != 0;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  int v2 = (pthread_mutex_t *)*((void *)this + 19);
  return pthread_mutex_unlock(v2);
}

uint64_t altitude::GeoRegionalResourceLoadJob::cancel(pthread_mutex_t **this)
{
  pthread_mutex_lock(this[19]);
  int v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(this[19]);
  if ((v2 & 2) == 0)
  {
    pthread_mutex_lock(this[19]);
    int v3 = *((_DWORD *)this + 40);
    pthread_mutex_unlock(this[19]);
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = [MEMORY[0x1E4F64AC8] modernLoader];
      unint64_t v5 = objc_msgSend(NSString, "stringWithFormat:", @"<altitude::GeoRegionalResourceLoader> %p", this);
      [v4 cancelAllForClient:v5];
    }
  }
  karo::Job::cancel((karo::Job *)this);
  pthread_mutex_lock(this[19]);
  int v6 = *((_DWORD *)this + 40);
  uint64_t result = pthread_mutex_unlock(this[19]);
  if ((v6 & 1) == 0)
  {
    return karo::Job::step((karo::Job *)this);
  }
  return result;
}

void sub_1A24EC898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void altitude::GeoRegionalResourceLoadJob::~GeoRegionalResourceLoadJob(altitude::GeoRegionalResourceLoadJob *this)
{
  altitude::GeoRegionalResourceLoadJob::~GeoRegionalResourceLoadJob(this);
  JUMPOUT(0x1A6239270);
}

{
  pthread_mutex_t **v2;
  int v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EF56AF88;
  int v2 = (pthread_mutex_t **)*((void *)this + 31);
  pthread_mutex_lock(*v2);
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  int v3 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v3 & 1) == 0) {
    (*(void (**)(altitude::GeoRegionalResourceLoadJob *))(*(void *)this + 16))(this);
  }
  **((unsigned char **)this + 33) = 1;
  pthread_mutex_unlock(*v2);
  *((void *)this + 36) = &unk_1EF559AF8;

  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }

  *(void *)this = &unk_1EF567700;
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  karo::Job::~Job(this);
}

void sub_1A24ECA94(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  pthread_mutex_unlock(*v4);
  *(void *)(v1 + 288) = &unk_1EF559AF8;

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 264);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);

  karo::AsyncFileLoader::LoadJob::~LoadJob((void **)v1);
  _Unwind_Resume(a1);
}

void altitude::GeoRegionalResourceLoader::~GeoRegionalResourceLoader(altitude::GeoRegionalResourceLoader *this)
{
  *(void *)this = &unk_1EF567D60;
  while (*((void *)this + 10))
    (*(void (**)(altitude::GeoRegionalResourceLoader *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF567D60;
  while (*((void *)this + 10))
    (*(void (**)(altitude::GeoRegionalResourceLoader *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

void sub_1A24ECBA0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void sub_1A24ECC50(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)v1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(v1);
  _Unwind_Resume(a1);
}

void md::FlyoverRouteBatch::~FlyoverRouteBatch(md::FlyoverRouteBatch *this)
{
  md::Ribbons::RibbonBatch<md::FlyoverRouteTypeDesc>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Ribbons::RibbonBatch<md::FlyoverRouteTypeDesc>::~RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553A90;
  uint64_t v2 = *(void **)(a1 + 376);
  if (v2)
  {
    int v3 = *(void **)(a1 + 384);
    uint64_t v4 = *(void **)(a1 + 376);
    if (v3 != v2)
    {
      do
      {
        uint64_t v7 = *--v3;
        uint64_t v6 = v7;
        *int v3 = 0;
        if (v7)
        {
          uint64_t v8 = *(void **)(v6 + 56);
          if (v8)
          {
            int v9 = *(void **)(v6 + 64);
            uint64_t v5 = *(void *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                uint64_t v10 = *--v9;
                *int v9 = 0;
                if (v10)
                {
                  {
                    operator new();
                  }
                  (*(void (**)(uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc);
                }
              }
              while (v9 != v8);
              uint64_t v5 = *(void *)(v6 + 56);
            }
            *(void *)(v6 + 64) = v8;
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 80) + 40))(*(void *)(v6 + 80), v5, *(void *)(v6 + 72) - v5);
          }
          MEMORY[0x1A6239270](v6, 0x1020C4097AEC518);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 376);
    }
    *(void *)(a1 + 384) = v2;
    operator delete(v4);
  }
  id v11 = *(void **)(a1 + 352);
  do
  {
    if (v11[1])
    {
      unint64_t v12 = 0;
      int v13 = v11 + 2;
      id v14 = v11 + 2;
      unint64_t v15 = (void (***)(void))(v11 + 2);
      do
      {
        uint64_t v16 = (void (**)(void *))*v15;
        v15 += 15;
        (*v16)(v14);
        ++v12;
        v13 += 15;
        id v14 = v15;
      }
      while (v12 < v11[1]);
    }
    v11[1] = 0;
    id v11 = (void *)*v11;
  }
  while (v11);
  uint64_t v17 = *(void ***)(a1 + 352);
  *(void *)(a1 + 360) = v17;
  uint64_t v18 = *v17;
  *uint64_t v17 = 0;
  if (v18)
  {
    do
    {
      BOOL v19 = (void *)*v18;
      free(v18);
      uint64_t v18 = v19;
    }
    while (v19);
    uint64_t v17 = *(void ***)(a1 + 352);
  }
  free(v17);
  uint64_t v20 = *(void **)(a1 + 328);
  if (v20)
  {
    *(void *)(a1 + 336) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void *)(a1 + 296);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 304);
    uint64_t v23 = *(void *)(a1 + 296);
    if (v22 != v21)
    {
      uint64_t v24 = *(void *)(a1 + 304);
      do
      {
        unint64_t v26 = *(void **)(v24 - 24);
        v24 -= 24;
        unint64_t v25 = v26;
        if (v26)
        {
          *(void *)(v22 - 16) = v25;
          operator delete(v25);
        }
        uint64_t v22 = v24;
      }
      while (v24 != v21);
      uint64_t v23 = *(void *)(a1 + 296);
    }
    *(void *)(a1 + 304) = v21;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320), v23, *(void *)(a1 + 312) - v23);
  }
  uint64_t v27 = *(void **)(a1 + 272);
  if (v27)
  {
    *(void *)(a1 + 280) = v27;
    operator delete(v27);
  }
  *(void *)(a1 + 144) = &off_1EF55A458;
  *(void *)(a1 + 160) = 3131955885;
  *(void *)(a1 + 16) = &off_1EF55A458;
  *(void *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::FlyoverRouteTypeDesc>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::FlyoverRouteTypeDesc>::~RibbonBatch(a1);
  JUMPOUT(0x1A6239270);
}

void md::FlyoverRouteLayer::~FlyoverRouteLayer(md::FlyoverRouteLayer *this)
{
  md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::~RibbonLayer(this);
  JUMPOUT(0x1A6239270);
}

void *md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553CD0;
  uint64_t v2 = (void *)a1[1];
  int v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[10];
  a1[10] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  int v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::FlyoverRouteTypeDesc>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverRoute::Default>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::FlyoverRoute::Default>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverRoute::Default>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverRoute::Default>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverRoute::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverRoute::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::SatelliteGridMapEngineMode::~SatelliteGridMapEngineMode(md::SatelliteGridMapEngineMode *this)
{
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

md::SatelliteGridMapEngineMode *md::SatelliteGridMapEngineMode::SatelliteGridMapEngineMode(md::SatelliteGridMapEngineMode *this)
{
  uint64_t v2 = md::MapEngineMode::MapEngineMode((uint64_t)this, 4);
  *(void *)uint64_t v2 = &unk_1EF547DA0;
  *(unsigned char *)(v2 + 49) = 1;
  *(_DWORD *)(v2 + 52) = 21;
  LOWORD(v6) = 5376;
  *((void *)&v6 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(v2 + 384), (unsigned __int8 *)&v6);
  LOWORD(v6) = 5376;
  *((void *)&v6 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 54, (unsigned __int8 *)&v6);
  LOWORD(v6) = 5376;
  *((void *)&v6 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 51, (unsigned __int8 *)&v6);
  LOBYTE(v6) = 0;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0, &v6)+ 17) = 0;
  LOBYTE(v6) = 51;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x33u, &v6)+ 17) = 0;
  LOBYTE(v6) = 2;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 2u, &v6)+ 17) = 0;
  uint64_t v21 = 0x4AC7AB7561675F6;
  uint64_t v22 = "md::GridLogic]";
  v23[0] = 13;
  *(void *)&long long v18 = 0x336A901A15BB7353;
  *((void *)&v18 + 1) = "md::GridContext]";
  uint64_t v19 = 15;
  char v20 = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 1;
  long long v7 = xmmword_1E5A97DD0;
  *(void *)&long long v8 = 21;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A97CE0;
  uint64_t v17 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  uint64_t v21 = 0x79FE0BD9535D5C4DLL;
  uint64_t v22 = "md::AnchorLogic]";
  v23[0] = 15;
  *(void *)&long long v18 = 0x63B6FE00C0848868;
  *((void *)&v18 + 1) = "md::AnchorContext]";
  uint64_t v19 = 17;
  char v20 = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 2;
  long long v7 = xmmword_1E5A97998;
  long long v8 = unk_1E5A979A8;
  long long v9 = xmmword_1E5A979B8;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A98030;
  uint64_t v17 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(void *)&long long v18 = 0x8E629317B3523E63;
  *((void *)&v18 + 1) = "md::CameraLogic]";
  uint64_t v19 = 15;
  *(void *)&long long v15 = 0x1AF456233693CD46;
  *((void *)&v15 + 1) = "md::CameraContext]";
  *(void *)&long long v16 = 17;
  BYTE8(v16) = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 1;
  long long v7 = xmmword_1E5A979C8;
  *(void *)&long long v8 = 20;
  uint64_t v21 = (uint64_t)v23;
  uint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  uint64_t v21 = 0x17767EADC5B287BLL;
  uint64_t v22 = "md::ElevationLogic]";
  v23[0] = 18;
  *(void *)&long long v18 = 0x8BD499FBD96FBB9ELL;
  *((void *)&v18 + 1) = "md::ElevationContext]";
  uint64_t v19 = 20;
  char v20 = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 2;
  long long v7 = xmmword_1E5A97A70;
  long long v8 = unk_1E5A97A80;
  long long v9 = xmmword_1E5A97A90;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A97AA0;
  uint64_t v17 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(void *)&long long v15 = 0xD2443A61CED86C69;
  *((void *)&v15 + 1) = "md::SettingsLogic]";
  *(void *)&long long v16 = 17;
  *(void *)&long long v6 = 0xC97B9E962ADF4AD4;
  *((void *)&v6 + 1) = "md::SettingsContext]";
  *(void *)&long long v7 = 19;
  BYTE8(v7) = 1;
  *(void *)&long long v18 = &v19;
  *((void *)&v18 + 1) = 0;
  uint64_t v21 = (uint64_t)v23;
  uint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(void *)&long long v15 = 0x2FED70A4459DFCA1;
  *((void *)&v15 + 1) = "md::StyleLogic]";
  *(void *)&long long v16 = 14;
  *(void *)&long long v6 = 0xE42D19AFCA302E68;
  *((void *)&v6 + 1) = "md::StyleLogicContext]";
  *(void *)&long long v7 = 21;
  BYTE8(v7) = 1;
  *(void *)&long long v18 = &v19;
  *((void *)&v18 + 1) = 0;
  uint64_t v21 = (uint64_t)v23;
  uint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(void *)&long long v15 = 0x90C2E4CBBB63E301;
  *((void *)&v15 + 1) = "md::LayerDataLogic]";
  *(void *)&long long v16 = 18;
  *(void *)&long long v6 = 0x7851AF310F49C988;
  *((void *)&v6 + 1) = "md::LayerDataLogicContext]";
  *(void *)&long long v7 = 25;
  BYTE8(v7) = 1;
  *(void *)&long long v18 = &v19;
  *((void *)&v18 + 1) = 0;
  uint64_t v21 = (uint64_t)v23;
  uint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  *(void *)&long long v18 = 0xAF46DE79C836B0D8;
  *((void *)&v18 + 1) = "md::TileSelectionLogic]";
  uint64_t v19 = 22;
  *(void *)&long long v15 = 0x64780CBD71DF7CF5;
  *((void *)&v15 + 1) = "md::TileSelectionContext]";
  *(void *)&long long v16 = 24;
  BYTE8(v16) = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 3;
  long long v9 = xmmword_1E5A97CB8;
  long long v10 = unk_1E5A97CC8;
  *(void *)&long long v11 = 21;
  long long v7 = xmmword_1E5A97C98;
  long long v8 = unk_1E5A97CA8;
  uint64_t v21 = (uint64_t)v23;
  uint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  uint64_t v3 = 0xCBF29CE484222325;
  uint64_t v4 = 0x26u;
  do
    uint64_t v3 = 0x100000001B3 * (v3 ^ aStdStringViewG_928[v4++]);
  while (v4 != 368);
  uint64_t v21 = v3;
  uint64_t v22 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v23[0] = 330;
  *(void *)&long long v18 = 0x8677AD8BA9352C1DLL;
  *((void *)&v18 + 1) = "md::ResolvedTileSelectionContext]";
  uint64_t v19 = 32;
  char v20 = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 1;
  long long v7 = xmmword_1E5A97CE0;
  *(void *)&long long v8 = 24;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A97CF8;
  uint64_t v17 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(void *)&long long v18 = 0x87BA2765F9E38E05;
  *((void *)&v18 + 1) = "md::PendingSceneLogic]";
  uint64_t v19 = 21;
  *(void *)&long long v15 = 0x9F2276D081C2CB20;
  *((void *)&v15 + 1) = "md::PendingSceneContext]";
  *(void *)&long long v16 = 23;
  BYTE8(v16) = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 5;
  long long v11 = xmmword_1E5A97D50;
  long long v12 = *(_OWORD *)&off_1E5A97D60;
  long long v13 = xmmword_1E5A97D70;
  uint64_t v14 = 25;
  long long v7 = xmmword_1E5A97D10;
  long long v8 = unk_1E5A97D20;
  long long v9 = xmmword_1E5A97D30;
  long long v10 = unk_1E5A97D40;
  uint64_t v21 = (uint64_t)v23;
  uint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v18, &v15, 0, (uint64_t)&v6, (uint64_t)&v21);
  uint64_t v21 = 0x20A1ED17D78F322BLL;
  uint64_t v22 = "md::LabelsLogic]";
  v23[0] = 15;
  *(void *)&long long v18 = 0xA588623CD4116DAELL;
  *((void *)&v18 + 1) = "md::LabelsContext]";
  uint64_t v19 = 17;
  char v20 = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 1;
  long long v7 = xmmword_1E5A97DD0;
  *(void *)&long long v8 = 21;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A97DE8;
  uint64_t v17 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  uint64_t v21 = 0x653D1F33EF15EF04;
  uint64_t v22 = "md::LoadingStatusLogic]";
  v23[0] = 22;
  *(void *)&long long v18 = 0x90B6813830DCB581;
  *((void *)&v18 + 1) = "md::LoadingStatusContext]";
  uint64_t v19 = 24;
  char v20 = 1;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 1;
  long long v7 = xmmword_1E5A97E00;
  *(void *)&long long v8 = 16;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A97E18;
  uint64_t v17 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v6, (uint64_t)&v15);
  *(void *)&long long v15 = 0x701C95861FC50076;
  *((void *)&v15 + 1) = "md::GeometryLogic]";
  *(void *)&long long v16 = 17;
  *(void *)&long long v6 = 0x3070CB6B3C7F21D3;
  *((void *)&v6 + 1) = "md::GeometryContext]";
  *(void *)&long long v7 = 19;
  BYTE8(v7) = 1;
  *(void *)&long long v18 = &v19;
  *((void *)&v18 + 1) = 0;
  uint64_t v21 = (uint64_t)v23;
  uint64_t v22 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v15, &v6, 0, (uint64_t)&v18, (uint64_t)&v21);
  uint64_t v21 = 0x2B7C4502BD3C99C6;
  uint64_t v22 = "md::ResolvedSceneLogic]";
  v23[0] = 22;
  *(void *)&long long v18 = 0x99BED48DEFBBD82BLL;
  *((void *)&v18 + 1) = "md::SceneContext]";
  uint64_t v19 = 16;
  char v20 = 1;
  *(void *)&long long v15 = &v16;
  *((void *)&v15 + 1) = 1;
  long long v16 = xmmword_1E5A97DB8;
  uint64_t v17 = 23;
  *(void *)&long long v6 = &v7;
  *((void *)&v6 + 1) = 2;
  long long v7 = xmmword_1E5A97D88;
  long long v8 = unk_1E5A97D98;
  long long v9 = xmmword_1E5A97DA8;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v18, 0, (uint64_t)&v15, (uint64_t)&v6);
  LODWORD(v6) = 28;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x1Cu, &v6)+ 18) = 1;
  return this;
}

void sub_1A24EDFA8(_Unwind_Exception *a1)
{
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void md::MuninSceneContext::~MuninSceneContext(md::MuninSceneContext *this)
{
  md::MuninSceneContext::~MuninSceneContext(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF537380;
  uint64_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::~__hash_table((uint64_t)this + 152);
  std::unique_ptr<md::MuninTapContext>::reset[abi:nn180100]((uint64_t *)this + 8, 0);
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 40, v3);
    operator delete(*((void **)this + 5));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      uint64_t v5 = (void *)v2[4];
      if (v4 != v5)
      {
        do
        {
          long long v6 = (std::__shared_weak_count *)v4[1];
          if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          v4 += 2;
        }
        while (v4 != v5);
        uint64_t v4 = (void *)v2[3];
      }
      if (v4 != (void *)v2[5]) {
        free(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  long long v7 = *(void **)a1;
  *(void *)a1 = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

uint64_t *std::unique_ptr<md::MuninTapContext>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void ***)(v2 + 88);
    *(void *)(v2 + 88) = 0;
    if (v3)
    {
      uint64_t v4 = (char *)*v3;
      if (*v3)
      {
        uint64_t v5 = (char *)v3[1];
        long long v6 = *v3;
        if (v5 != v4)
        {
          do
          {
            long long v7 = (std::__shared_weak_count *)*((void *)v5 - 1);
            if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
            v5 -= 16;
          }
          while (v5 != v4);
          long long v6 = *v3;
        }
        v3[1] = v4;
        operator delete(v6);
      }
      MEMORY[0x1A6239270](v3, 0x1020C402AA1BF7ELL);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 272)
  {
    if (*(unsigned char *)(i - 104))
    {
      uint64_t v5 = *(void **)(i - 96);
      if (v5)
      {
        *(void *)(i - 88) = v5;
        operator delete(v5);
      }
      *(unsigned char *)(i - 104) = 0;
    }
    if (*(unsigned char *)(i - 144))
    {
      uint64_t v6 = *(void *)(i - 136);
      if (v6)
      {
        uint64_t v7 = *(void *)(i - 128);
        long long v8 = *(void **)(i - 136);
        if (v7 != v6)
        {
          do
          {
            long long v9 = *(void **)(v7 - 80);
            if (v9 != *(void **)(v7 - 64)) {
              free(v9);
            }
            long long v10 = *(void **)(v7 - 104);
            if (v10)
            {
              *(void *)(v7 - 96) = v10;
              operator delete(v10);
            }
            long long v11 = *(void **)(v7 - 128);
            if (v11)
            {
              *(void *)(v7 - 120) = v11;
              operator delete(v11);
            }
            uint64_t v12 = v7 - 1992;
            long long v13 = *(void **)(v7 - 1904);
            uint64_t v14 = *(void **)(v7 - 1896);
            if (v13 != v14)
            {
              do
              {
                long long v15 = (void *)v13[31];
                if (v15 != (void *)v13[33]) {
                  free(v15);
                }
                v13 += 36;
              }
              while (v13 != v14);
              long long v13 = *(void **)(v7 - 1904);
            }
            if (v13 != *(void **)(v7 - 1888)) {
              free(v13);
            }
            v7 -= 1992;
          }
          while (v12 != v6);
          long long v8 = *(void **)(i - 136);
        }
        *(void *)(i - 128) = v6;
        operator delete(v8);
      }
      *(unsigned char *)(i - 144) = 0;
    }
    if (*(unsigned char *)(i - 264)) {
      *(unsigned char *)(i - 264) = 0;
    }
  }
  *(void *)(a1 + 8) = a2;
}

void md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::MuninSceneLogic::runAfterLayout(md::MuninSceneLogic *a1, md::LayoutContext *this, uint64_t a3)
{
  uint64_t v5 = md::LayoutContext::frameState(this);
  md::MuninSceneLogic::requestData(a1, *(const md::CameraContext **)(a3 + 8), (md::MuninSceneContext *)(uint64_t)(*(double *)(v5 + 88) * 1000.0));
}

void md::MuninSceneLogic::requestData(md::MuninSceneLogic *this, const md::CameraContext *a2, md::MuninSceneContext *a3)
{
  v15[17] = *(std::__shared_weak_count **)MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 18);
  uint64_t v6 = *(void *)(v5 + 56);
  if (v6 != *(void *)(v5 + 64))
  {
    while (*(_WORD *)v6 != 37)
      v6 += 16;
  }
  (*(void (**)(std::__shared_weak_count **__return_ptr))(**(void **)(v6 + 8) + 64))(v15);
  uint64_t v7 = 632;
  if (!*((unsigned char *)this + 832)) {
    uint64_t v7 = 640;
  }
  md::mun::MuninMetadataContainer::nearestMetadataTiles((uint64_t)v14, *((void *)this + 21), (double *)a2 + 1, *(double *)((char *)this + v7));
  memset(&v13[5], 0, 24);
  uint64_t v8 = *((void *)this + 121);
  long long v10 = *(_WORD **)(v8 + 112);
  for (uint64_t i = *(_WORD **)(v8 + 120); v10 != i; v10 += 56)
  {
    if (!*v10) {
      break;
    }
  }
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)v13, (uint64_t)v14);
  v15[10] = (std::__shared_weak_count *)((char *)this + 208);
  long long v11 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 208));
  if (v11) {
    geo::read_write_lock::logFailure(v11, (uint64_t)"read lock", v12);
  }
  operator new();
}

void sub_1A24EF6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29)
{
  std::function<void ()(void)>::~function((void *)(v30 - 128));
  md::mun::MuninMetadataContainer::updateCurrentMetadata(gdc::LayerDataCollector const*)::$_0::~$_0((uint64_t)&a27);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v30 - 144));
  std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~pair((uint64_t)&a12);
  geo::linear_map<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>,std::vector<std::pair<unsigned short,std::list<std::unique_ptr<gdc::SelectionContext>>>>>::~linear_map(&a18);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void md::MuninSceneLogic::runBeforeLayout(uint64_t a1, md::LayoutContext *a2, void *a3, uint64_t a4)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)*a3;
  uint64_t v6 = (const md::CameraContext *)a3[1];
  v98[0] = &unk_1EF571268;
  v98[1] = a2;
  v96[0] = &unk_1EF5712B0;
  v96[1] = a2;
  unint64_t v97 = v96;
  v100[3] = v100;
  uint64_t v99 = v98;
  v100[0] = &unk_1EF5712B0;
  unint64_t v88 = a2;
  v100[1] = a2;
  _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v98);
  if (v97 == v96)
  {
    (*(void (**)(void *))(v96[0] + 32))(v96);
  }
  else if (v97)
  {
    (*(void (**)(void *))(*v97 + 40))(v97);
  }
  if (v99 == v98)
  {
    (*(void (**)(void *))(v98[0] + 32))(v98);
  }
  else if (v99)
  {
    (*(void (**)(void *))(*v99 + 40))(v99);
  }
  v94[0] = &unk_1EF5712F8;
  v94[1] = a1;
  int v95 = (gss::Allocator *)v94;
  uint64_t v7 = (unsigned char *)v5[6];
  uint64_t v8 = (unsigned char *)v5[7];
  if (v7 == v8) {
    goto LABEL_15;
  }
  while (1)
  {
    LOBYTE(__p) = *v7;
    if (!v95) {
      break;
    }
    (*(void (**)(gss::Allocator *, void **))(*(void *)v95 + 48))(v95, &__p);
    if (++v7 == v8)
    {
      char v9 = v95;
      if (v95 != (gss::Allocator *)v94)
      {
        if (v95) {
          char v9 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *))(*(void *)v95 + 40))(v95);
        }
LABEL_16:
        uint64_t v11 = v5[2];
        uint64_t v10 = v5[3];
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        if (!v11) {
          goto LABEL_114;
        }
        std::string __p = 0;
        uint64_t v102 = 0;
        int v103 = 0;
        char v104 = (void *)gss::Allocator::instance(v9);
        *(void **)((char *)v93 + 7) = 0;
        v93[0] = 0;
        HIBYTE(v93[1]) = 1;
        gss::StylesheetManager<gss::ScenePropertyID>::styleQueryForFeatureAttributes((uint64_t *)&v91, v11, (gss::FeatureAttributeSet *)&__p, (gss::QueryOverrides *)v93);
        if (__p)
        {
          uint64_t v102 = (uint64_t)__p;
          (*(void (**)(void *, void *, int64_t))(*(void *)v104 + 40))(v104, __p, (char *)v103 - (char *)__p);
        }
        uint64_t v12 = v91;
        uint64_t v13 = (std::__shared_weak_count *)v92;
        v93[0] = v91;
        v93[1] = v92;
        if (v92) {
          atomic_fetch_add_explicit(v92 + 1, 1uLL, memory_order_relaxed);
        }
        gss::QueryableLocker<gss::ScenePropertyID>::QueryableLocker((uint64_t *)&__p, (uint64_t)v12, (uint64_t)v13);
        if (!v13 || atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if ((_BYTE)v105) {
            goto LABEL_26;
          }
LABEL_111:
          gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker((uint64_t)&__p);
          uint64_t v49 = (std::__shared_weak_count *)v92;
          if (v92 && !atomic_fetch_add(v92 + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
LABEL_114:
          md::SceneStateManager::clear(*(md::SceneStateManager **)(a1 + 968));
          uint64_t v50 = *(void *)(a1 + 544);
          if (v50)
          {
            uint64_t v51 = *(void *)(a1 + 552);
            if (v51)
            {
              objc_msgSend(*(id *)(v51 + 48), "stop", v88);
              uint64_t v52 = *(void *)(a1 + 552);
              uint64_t v50 = *(void *)(a1 + 544);
              *(void *)(a1 + 544) = 0;
              *(void *)(a1 + 552) = v50;
              if (v52)
              {
                *(void *)(v52 + 40) = &unk_1EF5596D8;

                uint64_t v53 = *(void *)(v52 + 32);
                if (v53 == v52 + 8)
                {
                  (*(void (**)(uint64_t))(*(void *)(v52 + 8) + 32))(v52 + 8);
                }
                else if (v53)
                {
                  (*(void (**)(uint64_t))(*(void *)v53 + 40))(v53);
                }
                MEMORY[0x1A6239270](v52, 0x10A0C401B67C7C3);
                uint64_t v50 = *(void *)(a1 + 552);
              }
            }
            else
            {
              *(void *)(a1 + 544) = 0;
              *(void *)(a1 + 552) = v50;
            }
            int v54 = *(md::MapEngine ***)(a1 + 136);
            long long v55 = [[VKTimedAnimation alloc] initWithDuration:*(float *)(v50 + 4)];
            long long v56 = *(void **)(v50 + 48);
            *(void *)(v50 + 48) = v55;

            std::string __p = (void *)MEMORY[0x1E4F143A8];
            uint64_t v102 = 3221225472;
            int v103 = ___ZN2md15FadeEffectBlock3runEPNS_15AnimationRunnerE_block_invoke;
            char v104 = &__block_descriptor_40_e8_v12__0f8l;
            uint64_t v105 = v50;
            [*(id *)(v50 + 48) setStepHandler:&__p];
            [*(id *)(v50 + 48) setCompletionHandler:&__block_literal_global_16552];
            md::AnimationRunner::runAnimation(v54, *(VKAnimation **)(v50 + 48));
          }
          uint64_t v57 = *(void *)(a1 + 552);
          if (v57)
          {
            if (([*(id *)(v57 + 48) running] & 1) == 0)
            {
              uint64_t v58 = *(void *)(a1 + 552);
              *(void *)(a1 + 552) = 0;
              if (v58)
              {
                *(void *)(v58 + 40) = &unk_1EF5596D8;

                uint64_t v59 = *(void *)(v58 + 32);
                if (v59 == v58 + 8)
                {
                  (*(void (**)(uint64_t))(*(void *)(v58 + 8) + 32))(v58 + 8);
                }
                else if (v59)
                {
                  (*(void (**)(uint64_t))(*(void *)v59 + 40))(v59);
                }
                MEMORY[0x1A6239270](v58, 0x10A0C401B67C7C3);
              }
            }
          }
          uint64_t v60 = *(void *)(a1 + 968);
          uint64_t v61 = *(void *)(a1 + 144);
          if (v60 + 184 != v61 + 168)
          {
            uint64_t v62 = *(unsigned char **)(v61 + 168);
            unint64_t v63 = (uint64_t)(*(void *)(v61 + 176) - (void)v62) >> 1;
            uint64_t v64 = *(void *)(v60 + 184);
            unint64_t v65 = (*(void *)(v60 + 192) - v64) >> 1;
            BOOL v66 = v63 >= v65;
            unint64_t v67 = v63 - v65;
            if (v67 != 0 && v66)
            {
              std::vector<md::TileSelectionTileSetType>::__append(v60 + 184, v67);
              uint64_t v62 = *(unsigned char **)(v61 + 168);
            }
            else if (!v66)
            {
              *(void *)(v60 + 192) = v64 + 2 * v63;
            }
            int v68 = *(unsigned char **)(v61 + 176);
            if (v68 != v62) {
              memmove(*(void **)(v60 + 184), v62, v68 - v62);
            }
          }
          md::SceneStateManager::updateMerged((md::SceneStateManager *)v60);
          BOOL v70 = (void **)(a4 + 40);
          uint64_t v69 = *(void *)(a4 + 40);
          *(unsigned char *)(a4 + 240) = *(unsigned char *)(a1 + 833);
          *(void *)(a4 + 32) = *(void *)(a1 + 552);
          if (v69)
          {
            std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100]((uint64_t)v70, v69);
            operator delete(*v70);
            std::string *v70 = 0;
            *(void *)(a4 + 48) = 0;
            *(void *)(a4 + 56) = 0;
          }
          *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 560);
          *(void *)(a4 + 56) = *(void *)(a1 + 576);
          *(void *)(a1 + 560) = 0;
          *(void *)(a1 + 568) = 0;
          *(void *)(a1 + 576) = 0;
          std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100](a1 + 560, 0);
          int v72 = *(unsigned char **)(a4 + 40);
          double v71 = *(unsigned char **)(a4 + 48);
          if (v72 == v71)
          {
            unint64_t v74 = 0;
            unint64_t v73 = 0;
LABEL_163:
            int v72 = 0;
          }
          else
          {
            unint64_t v73 = *(void *)(a4 + 40);
            do
            {
              if (*(unsigned char *)v73 == 2) {
                goto LABEL_155;
              }
              v73 += 272;
            }
            while ((unsigned char *)v73 != v71);
            unint64_t v73 = 0;
LABEL_155:
            unint64_t v74 = *(void *)(a4 + 40);
            do
            {
              if (*(unsigned char *)v74 == 4) {
                goto LABEL_159;
              }
              v74 += 272;
            }
            while ((unsigned char *)v74 != v71);
            unint64_t v74 = 0;
LABEL_159:
            while (*v72)
            {
              v72 += 272;
              if (v72 == v71) {
                goto LABEL_163;
              }
            }
          }
          BOOL v76 = (uint64_t *)(a4 + 64);
          uint64_t v75 = *(void *)(a4 + 64);
          if (!v75)
          {
            if (v74 | v73) {
              goto LABEL_175;
            }
            goto LABEL_173;
          }
          if (*(unsigned char *)(v75 + 64) == 1)
          {
            BOOL v77 = *(double *)(*(void *)(v75 + 88) + 64) >= *(double *)(*(void *)(v75 + 88) + 56);
            if (v74) {
              goto LABEL_175;
            }
          }
          else
          {
            BOOL v77 = 0;
            if (v74) {
              goto LABEL_175;
            }
          }
          if (v73 || v77)
          {
LABEL_175:
            std::unique_ptr<md::MuninTapContext>::reset[abi:nn180100]((uint64_t *)(a4 + 64), 0);
            if (!v72) {
              goto LABEL_180;
            }
          }
          else
          {
LABEL_173:
            if (!v72) {
              goto LABEL_180;
            }
          }
          if (!v74 && !v73 && v72[8]) {
            operator new();
          }
LABEL_180:
          uint64_t v78 = *v76;
          if (*v76)
          {
            double v79 = *(double *)(md::LayoutContext::frameState(v88) + 88);
            float v80 = v79 - *(double *)(v78 + 56);
            *(float *)(v78 + 80) = v80;
            uint64_t v81 = *(void *)(v78 + 88);
            if (*(unsigned char *)(v78 + 104))
            {
              double v82 = v79 + 0.883333333;
              *(double *)(v81 + 48) = v79;
              *(double *)(v81 + 56) = v79 + 0.883333333;
              *(double *)(v81 + 64) = v79;
              *(_OWORD *)(v81 + 80) = xmmword_1A28FF450;
              *(void *)(v81 + 72) = 0x404E000000000000;
              *(unsigned char *)(v78 + 104) = 0;
              double v83 = v79;
              double v84 = v79;
            }
            else
            {
              double v82 = *(double *)(v81 + 56);
              double v84 = *(double *)(v81 + 64);
              double v83 = *(double *)(v81 + 48);
            }
            double v85 = fmax(v84, v79);
            *(double *)(v81 + 64) = v85;
            if (v85 - v83 >= v82 - v83 && !*(unsigned char *)(v78 + 64)) {
              *(unsigned char *)(v78 + 104) = 1;
            }
            uint64_t v86 = **(void **)(v78 + 96);
            if (v86)
            {
              LOBYTE(__p) = 8;
              md::MapEngine::setNeedsTick(v86, &__p);
            }
          }
          uint64_t v87 = md::LayoutContext::frameState(v88);
          md::MuninSceneLogic::requestData((md::MuninSceneLogic *)a1, v6, (md::MuninSceneContext *)(uint64_t)(*(double *)(v87 + 88) * 1000.0));
        }
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (!(_BYTE)v105) {
          goto LABEL_111;
        }
LABEL_26:
        uint64_t v14 = *((void *)__p + 3);
        long long v15 = *(float **)v14;
        if (*(void *)v14)
        {
          float v16 = *v15;
          BOOL v17 = *v15 == 1.0;
          if (*(unsigned char *)(v14 + 10))
          {
            if (v16 != 0.0 && v16 != 1.0)
            {
LABEL_38:
              if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*((void *)__p + 3), 0x49u, 0) & 1) == 0)
              {
                unsigned int v19 = 1;
                goto LABEL_40;
              }
              goto LABEL_41;
            }
          }
        }
        else
        {
          BOOL v17 = 0;
        }
        unsigned int v19 = *(unsigned __int8 *)(v14 + v17 + 11);
        if (v19 == 2) {
          goto LABEL_38;
        }
LABEL_40:
        if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v14, 0x49u, v19))
        {
LABEL_41:
          if (!v15)
          {
            BOOL v21 = 0;
            goto LABEL_47;
          }
          float v20 = *v15;
          BOOL v21 = *v15 == 1.0;
          if (!*(unsigned char *)(v14 + 10) || v20 == 0.0 || v20 == 1.0)
          {
LABEL_47:
            unsigned int v22 = *(unsigned __int8 *)(v14 + v21 + 11);
            float v20 = 0.0;
            if (v22 == 2) {
              goto LABEL_48;
            }
            float v24 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x49u, v22, 0);
            if (!*(unsigned char *)(a1 + 584)) {
LABEL_49:
            }
              *(unsigned char *)(a1 + 584) = 1;
          }
          else
          {
LABEL_48:
            LOBYTE(v93[0]) = 1;
            LOBYTE(v90) = 1;
            uint64_t v23 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x49u, 0, v93);
            float v24 = *v23
                + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x49u, 1u, &v90)- *v23)* v20);
            if (!*(unsigned char *)(a1 + 584)) {
              goto LABEL_49;
            }
          }
          *(float *)(a1 + 588) = v24;
          uint64_t v14 = *((void *)__p + 3);
          long long v15 = *(float **)v14;
        }
        if (!v15)
        {
          BOOL v26 = 0;
          goto LABEL_57;
        }
        float v25 = *v15;
        BOOL v26 = *v15 == 1.0;
        if (!*(unsigned char *)(v14 + 10) || v25 == 0.0 || v25 == 1.0)
        {
LABEL_57:
          unsigned int v27 = *(unsigned __int8 *)(v14 + v26 + 11);
          if (v27 == 2) {
            goto LABEL_58;
          }
LABEL_60:
          if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v14, 0x4Au, v27)) {
            goto LABEL_61;
          }
LABEL_71:
          if (!v15)
          {
            BOOL v34 = 0;
            goto LABEL_77;
          }
          float v33 = *v15;
          BOOL v34 = *v15 == 1.0;
          if (!*(unsigned char *)(v14 + 10) || v33 == 0.0 || v33 == 1.0)
          {
LABEL_77:
            unsigned int v35 = *(unsigned __int8 *)(v14 + v34 + 11);
            if (v35 == 2) {
              goto LABEL_78;
            }
LABEL_80:
            if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v14, 0x4Bu, v35)) {
              goto LABEL_81;
            }
LABEL_91:
            if (!v15)
            {
              BOOL v42 = 0;
              goto LABEL_97;
            }
            float v41 = *v15;
            BOOL v42 = *v15 == 1.0;
            if (!*(unsigned char *)(v14 + 10) || v41 == 0.0 || v41 == 1.0)
            {
LABEL_97:
              unsigned int v43 = *(unsigned __int8 *)(v14 + v42 + 11);
              if (v43 == 2) {
                goto LABEL_98;
              }
LABEL_100:
              if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v14, 0x4Cu, v43)) {
                goto LABEL_111;
              }
            }
            else
            {
LABEL_98:
              if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v14, 0x4Cu, 0) & 1) == 0)
              {
                unsigned int v43 = 1;
                goto LABEL_100;
              }
            }
            if (!v15)
            {
              BOOL v45 = 0;
              goto LABEL_107;
            }
            float v44 = *v15;
            BOOL v45 = *v15 == 1.0;
            if (!*(unsigned char *)(v14 + 10) || v44 == 0.0 || v44 == 1.0)
            {
LABEL_107:
              unsigned int v46 = *(unsigned __int8 *)(v14 + v45 + 11);
              float v44 = 0.0;
              if (v46 == 2) {
                goto LABEL_108;
              }
              float v48 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x4Cu, v46, 0);
              if (!*(unsigned char *)(a1 + 608)) {
LABEL_109:
              }
                *(unsigned char *)(a1 + 608) = 1;
            }
            else
            {
LABEL_108:
              LOBYTE(v93[0]) = 1;
              LOBYTE(v90) = 1;
              uint64_t v47 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x4Cu, 0, v93);
              float v48 = *v47
                  + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x4Cu, 1u, &v90)- *v47)* v44);
              if (!*(unsigned char *)(a1 + 608)) {
                goto LABEL_109;
              }
            }
            *(float *)(a1 + 612) = v48;
            goto LABEL_111;
          }
LABEL_78:
          if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v14, 0x4Bu, 0) & 1) == 0)
          {
            unsigned int v35 = 1;
            goto LABEL_80;
          }
LABEL_81:
          if (!v15)
          {
            BOOL v37 = 0;
            goto LABEL_87;
          }
          float v36 = *v15;
          BOOL v37 = *v15 == 1.0;
          if (!*(unsigned char *)(v14 + 10) || v36 == 0.0 || v36 == 1.0)
          {
LABEL_87:
            unsigned int v38 = *(unsigned __int8 *)(v14 + v37 + 11);
            float v36 = 0.0;
            if (v38 == 2) {
              goto LABEL_88;
            }
            float v40 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x4Bu, v38, 0);
            if (!*(unsigned char *)(a1 + 600)) {
LABEL_89:
            }
              *(unsigned char *)(a1 + 600) = 1;
          }
          else
          {
LABEL_88:
            LOBYTE(v93[0]) = 1;
            LOBYTE(v90) = 1;
            int v39 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x4Bu, 0, v93);
            float v40 = *v39
                + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x4Bu, 1u, &v90)- *v39)* v36);
            if (!*(unsigned char *)(a1 + 600)) {
              goto LABEL_89;
            }
          }
          *(float *)(a1 + 604) = v40;
          uint64_t v14 = *((void *)__p + 3);
          long long v15 = *(float **)v14;
          goto LABEL_91;
        }
LABEL_58:
        if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v14, 0x4Au, 0) & 1) == 0)
        {
          unsigned int v27 = 1;
          goto LABEL_60;
        }
LABEL_61:
        if (!v15)
        {
          BOOL v29 = 0;
          goto LABEL_67;
        }
        float v28 = *v15;
        BOOL v29 = *v15 == 1.0;
        if (!*(unsigned char *)(v14 + 10) || v28 == 0.0 || v28 == 1.0)
        {
LABEL_67:
          unsigned int v30 = *(unsigned __int8 *)(v14 + v29 + 11);
          float v28 = 0.0;
          if (v30 == 2) {
            goto LABEL_68;
          }
          float v32 = *(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x4Au, v30, 0);
          if (!*(unsigned char *)(a1 + 592)) {
LABEL_69:
          }
            *(unsigned char *)(a1 + 592) = 1;
        }
        else
        {
LABEL_68:
          LOBYTE(v93[0]) = 1;
          LOBYTE(v90) = 1;
          unint64_t v31 = (float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x4Au, 0, v93);
          float v32 = *v31
              + (float)((float)(*(float *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(v14, 0x4Au, 1u, &v90)- *v31)* v28);
          if (!*(unsigned char *)(a1 + 592)) {
            goto LABEL_69;
          }
        }
        *(float *)(a1 + 596) = v32;
        uint64_t v14 = *((void *)__p + 3);
        long long v15 = *(float **)v14;
        goto LABEL_71;
      }
LABEL_15:
      char v9 = (gss::Allocator *)(*(uint64_t (**)(void *))(v94[0] + 32))(v94);
      goto LABEL_16;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A24F2578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MuninSceneLogic", "", v5, 2u);
  }
}

void std::__stable_sort<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      float v8 = a2[-2].n128_f32[2];
      float v9 = *(float *)a1;
      if (v8 < *(float *)a1)
      {
        *(float *)a1 = v8;
        a2[-2].n128_f32[2] = v9;
        unint64_t v10 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = a2[-1].n128_u64[0];
        a2[-1].n128_u64[0] = v10;
        unint64_t v11 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v11;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((__n128 *)a1 != a2)
      {
        long long v18 = (float *)(a1 + 24);
        if ((__n128 *)(a1 + 24) != a2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = a1;
          do
          {
            uint64_t v21 = v20;
            uint64_t v20 = (uint64_t)v18;
            float v22 = *v18;
            float v23 = *(float *)v21;
            if (*v18 < *(float *)v21)
            {
              uint64_t v24 = *(void *)(v21 + 32);
              uint64_t v25 = *(void *)(v21 + 40);
              uint64_t v26 = v19;
              *(void *)(v21 + 32) = 0;
              *(void *)(v21 + 40) = 0;
              while (1)
              {
                uint64_t v27 = a1 + v26;
                *(float *)(v27 + 24) = v23;
                long long v28 = *(_OWORD *)(a1 + v26 + 8);
                *(void *)(v27 + 8) = 0;
                *(void *)(v27 + 16) = 0;
                BOOL v29 = *(std::__shared_weak_count **)(a1 + v26 + 40);
                *(_OWORD *)(v27 + 32) = v28;
                if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
                if (!v26) {
                  break;
                }
                uint64_t v30 = a1 + v26;
                float v23 = *(float *)(a1 + v26 - 24);
                v26 -= 24;
                if (v22 >= v23)
                {
                  uint64_t v31 = a1 + v26 + 24;
                  float v32 = (void *)(v30 + 8);
                  goto LABEL_24;
                }
              }
              float v32 = (void *)(a1 + 8);
              uint64_t v31 = a1;
LABEL_24:
              *(float *)uint64_t v31 = v22;
              void *v32 = v24;
              float v33 = *(std::__shared_weak_count **)(v31 + 16);
              *(void *)(v31 + 16) = v25;
              if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            long long v18 = (float *)(v20 + 24);
            v19 += 24;
          }
          while ((__n128 *)(v20 + 24) != a2);
        }
      }
    }
    else
    {
      uint64_t v14 = a4;
      uint64_t v15 = a3 >> 1;
      float v16 = (float *)(a1 + 24 * (a3 >> 1));
      if ((uint64_t)a3 <= a5)
      {
        __n128 v34 = std::__stable_sort_move<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(a1, (__n128 *)(a1 + 24 * (a3 >> 1)), a3 >> 1, a4, a6);
        unint64_t v35 = a3 - v15;
        uint64_t v36 = v14 + 24 * v15;
        __n128 v37 = std::__stable_sort_move<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(a1 + 24 * (a3 >> 1), a2, v35, v36, v34);
        unint64_t v55 = a3;
        unint64_t v38 = v14 + 24 * a3;
        int v39 = (__n128 *)(a1 + 8);
        uint64_t v40 = v36;
        while (v40 != v38)
        {
          if (*(float *)v40 >= *(float *)v14)
          {
            v39[-1].n128_u32[2] = *(_DWORD *)v14;
            __n128 v37 = *(__n128 *)(v14 + 8);
            *(void *)(v14 + 8) = 0;
            *(void *)(v14 + 16) = 0;
            BOOL v42 = (std::__shared_weak_count *)v39->n128_u64[1];
            __n128 *v39 = v37;
            if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
            v14 += 24;
          }
          else
          {
            v39[-1].n128_u32[2] = *(_DWORD *)v40;
            __n128 v37 = *(__n128 *)(v40 + 8);
            *(void *)(v40 + 8) = 0;
            *(void *)(v40 + 16) = 0;
            float v41 = (std::__shared_weak_count *)v39->n128_u64[1];
            __n128 *v39 = v37;
            if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
            v40 += 24;
          }
          int v39 = (__n128 *)((char *)v39 + 24);
          if (v14 == v36)
          {
            if (v40 != v38)
            {
              unint64_t v47 = 0;
              do
              {
                unint64_t v48 = v40 + v47;
                uint64_t v49 = (__n128 *)((char *)v39 + v47);
                v49[-1].n128_u32[2] = *(_DWORD *)(v40 + v47);
                __n128 v37 = *(__n128 *)(v40 + v47 + 8);
                *(void *)(v48 + 8) = 0;
                *(void *)(v48 + 16) = 0;
                uint64_t v50 = (std::__shared_weak_count *)v39->n128_u64[v47 / 8 + 1];
                *uint64_t v49 = v37;
                if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                  std::__shared_weak_count::__release_weak(v50);
                }
                v47 += 24;
              }
              while (v48 + 24 != v38);
            }
            goto LABEL_51;
          }
        }
        if (v14 != v36)
        {
          unint64_t v43 = 0;
          do
          {
            unint64_t v44 = v14 + v43;
            BOOL v45 = (__n128 *)((char *)v39 + v43);
            v45[-1].n128_u32[2] = *(_DWORD *)(v14 + v43);
            __n128 v37 = *(__n128 *)(v14 + v43 + 8);
            *(void *)(v44 + 8) = 0;
            *(void *)(v44 + 16) = 0;
            unsigned int v46 = (std::__shared_weak_count *)v39->n128_u64[v43 / 8 + 1];
            *BOOL v45 = v37;
            if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
            v43 += 24;
          }
          while (v44 + 24 != v36);
        }
LABEL_51:
        if (a4)
        {
          unint64_t v51 = 0;
          uint64_t v52 = (std::__shared_weak_count **)(a4 + 16);
          do
          {
            uint64_t v53 = *v52;
            if (*v52 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, __n128))v53->__on_zero_shared)(v53, v37);
              std::__shared_weak_count::__release_weak(v53);
            }
            ++v51;
            v52 += 3;
          }
          while (v51 < v55);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(a1, a1 + 24 * (a3 >> 1), a3 >> 1, a4, a5);
        uint64_t v17 = a3 - v15;
        std::__stable_sort<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(v16, a2, v17, v14, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>((float *)a1, v16, (float *)a2, v15, v17, v14, a5);
      }
    }
  }
}

void sub_1A24F2E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::pair<float,std::shared_ptr<md::mun::MuninViewData>>,std::__destruct_n &>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::erase(void *a1, void *__p)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  unint64_t v4 = __p[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != __p);
  if (v7 == a1 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*__p) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*__p + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a1 + 8 * v4) = 0;
  }
  uint64_t v10 = *__p;
  if (*__p)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a1 + 8 * v11) = v7;
      uint64_t v10 = *__p;
    }
  }
  *uint64_t v7 = v10;
  void *__p = 0;
  --a1[3];
  uint64_t v12 = (void *)__p[3];
  uint64_t v13 = (void *)__p[4];
  if (v12 != v13)
  {
    do
    {
      uint64_t v14 = (std::__shared_weak_count *)v12[1];
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      v12 += 2;
    }
    while (v12 != v13);
    uint64_t v12 = (void *)__p[3];
  }
  if (v12 != (void *)__p[5]) {
    free(v12);
  }
  operator delete(__p);
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = *((void *)v10 + 1);
            if (v12 == a2)
            {
              if (*((void *)v10 + 2) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = *(char **)v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((void *)v10 + 2) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v10 = (char *)operator new(0x90uLL);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = v5;
  uint64_t v14 = *a3;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *((void *)v10 + 17) = 0;
  *(_OWORD *)(v10 + 56) = 0u;
  *((void *)v10 + 2) = v14;
  *((void *)v10 + 3) = v10 + 56;
  *((void *)v10 + 4) = v10 + 56;
  *((void *)v10 + 5) = v10 + 56;
  *((void *)v10 + 6) = 5;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_35:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v5);
  if (v25)
  {
    *(void *)uint64_t v10 = *v25;
LABEL_58:
    *uint64_t v25 = v10;
    goto LABEL_59;
  }
  *(void *)uint64_t v10 = *v13;
  *uint64_t v13 = v10;
  *(void *)(v24 + 8 * v5) = v13;
  if (*(void *)v10)
  {
    unint64_t v26 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A24F3360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void geo::small_vector_base<std::shared_ptr<md::mun::MuninViewData>>::grow(void **a1, unint64_t a2)
{
  unint64_t v3 = (char *)*a1;
  unint64_t v4 = (char *)a1[1];
  uint64_t v6 = (char *)a1[2];
  unint64_t v5 = (unint64_t)a1[3];
  unint64_t v7 = (1 << -(char)__clz(v5 + 1));
  if (v5 >= 0xFFFFFFFFFFFFFFFELL) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = v7;
  }
  if (v8 <= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v8;
  }
  uint64_t v10 = malloc_type_malloc(16 * v9, 0x20040A4A59CD2uLL);
  unint64_t v11 = v10;
  uint64_t v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (*a1 != v13)
  {
    uint64_t v14 = v10;
    do
    {
      *v14++ = *(_OWORD *)v12;
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = 0;
      v12 += 16;
    }
    while (v12 != v13);
    float v15 = (char *)*a1;
    float v16 = (char *)a1[1];
    if (*a1 != v16)
    {
      do
      {
        BOOL v17 = (std::__shared_weak_count *)*((void *)v15 + 1);
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  if (v3 != v6) {
    free(*a1);
  }
  *a1 = v11;
  a1[1] = (char *)v11 + v4 - v3;
  a1[3] = (void *)v9;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[3];
      unint64_t v4 = (void *)v2[4];
      if (v3 != v4)
      {
        do
        {
          unint64_t v5 = (std::__shared_weak_count *)v3[1];
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          v3 += 2;
        }
        while (v3 != v4);
        unint64_t v3 = (void *)v2[3];
      }
      if (v3 != (void *)v2[5]) {
        free(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (a3)
  {
    uint64_t v5 = a4;
    unint64_t v8 = (_DWORD *)a1;
    if (a3 == 2)
    {
      float v12 = a2[-2].n128_f32[2];
      unint64_t v11 = (unint64_t *)(a4 + 40);
      if (v12 >= *(float *)a1)
      {
        *(_DWORD *)a4 = *(_DWORD *)a1;
        uint64_t result = *(__n128 *)(a1 + 8);
        *(__n128 *)(a4 + 8) = result;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        uint64_t v26 = a2[-1].n128_i64[0];
        result.n128_u32[0] = a2[-2].n128_u32[2];
        *(_DWORD *)(a4 + 24) = result.n128_u32[0];
        *(void *)(a4 + 32) = v26;
        unint64_t v9 = &a2[-1].n128_u64[1];
        uint64_t v10 = a2 - 1;
      }
      else
      {
        *(float *)a4 = v12;
        uint64_t result = a2[-1];
        *(__n128 *)(a4 + 8) = result;
        a2[-1].n128_u64[0] = 0;
        a2[-1].n128_u64[1] = 0;
        unint64_t v9 = (unint64_t *)(a1 + 16);
        result.n128_u32[0] = *(_DWORD *)a1;
        *(_DWORD *)(a4 + 24) = *(_DWORD *)a1;
        uint64_t v10 = (__n128 *)(a1 + 8);
        *(void *)(a4 + 32) = *(void *)(a1 + 8);
      }
      goto LABEL_26;
    }
    if (a3 == 1)
    {
      unint64_t v9 = (unint64_t *)(a1 + 16);
      result.n128_u32[0] = *(_DWORD *)a1;
      *(_DWORD *)a4 = *(_DWORD *)a1;
      uint64_t v10 = (__n128 *)(a1 + 8);
      *(void *)(a4 + 8) = *(void *)(a1 + 8);
      unint64_t v11 = (unint64_t *)(a4 + 16);
LABEL_26:
      unint64_t *v11 = *v9;
      v10->n128_u64[0] = 0;
      v10->n128_u64[1] = 0;
      return result;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v27 = a3 >> 1;
      uint64_t v28 = 24 * (a3 >> 1);
      BOOL v29 = (_DWORD *)(a1 + v28);
      std::__stable_sort<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(a1, a1 + v28, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(&v8[(unint64_t)v28 / 4], a2, a3 - v27, v5 + v28, a3 - v27);
      uint64_t v30 = (__n128 *)&v8[(unint64_t)v28 / 4];
      while (v30 != a2)
      {
        if (v30->n128_f32[0] >= *(float *)v8)
        {
          *(_DWORD *)uint64_t v5 = *v8;
          uint64_t result = *(__n128 *)(v8 + 2);
          *(__n128 *)(v5 + 8) = result;
          *((void *)v8 + 1) = 0;
          *((void *)v8 + 2) = 0;
          v8 += 6;
        }
        else
        {
          *(_DWORD *)uint64_t v5 = v30->n128_u32[0];
          uint64_t result = *(__n128 *)((char *)v30 + 8);
          *(__n128 *)(v5 + 8) = result;
          v30->n128_u64[1] = 0;
          v30[1].n128_u64[0] = 0;
          uint64_t v30 = (__n128 *)((char *)v30 + 24);
        }
        v5 += 24;
        if (v8 == v29)
        {
          if (v30 != a2)
          {
            unint64_t v34 = 0;
            do
            {
              unint64_t v35 = (__n128 *)((char *)v30 + v34);
              uint64_t v36 = v5 + v34;
              *(_DWORD *)uint64_t v36 = v30->n128_u32[v34 / 4];
              uint64_t result = *(__n128 *)((char *)v30 + v34 + 8);
              *(__n128 *)(v36 + 8) = result;
              v35->n128_u64[1] = 0;
              v35[1].n128_u64[0] = 0;
              v34 += 24;
            }
            while (&v35[1].n128_i8[8] != (__int8 *)a2);
          }
          return result;
        }
      }
      if (v8 != v29)
      {
        uint64_t v31 = 0;
        do
        {
          uint64_t v32 = v5 + v31 * 4;
          float v33 = &v8[v31];
          *(_DWORD *)uint64_t v32 = v8[v31];
          uint64_t result = *(__n128 *)&v8[v31 + 2];
          *(__n128 *)(v32 + 8) = result;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = 0;
          v31 += 6;
        }
        while (v33 + 6 != v29);
      }
    }
    else if ((__n128 *)a1 != a2)
    {
      *(_DWORD *)a4 = *(_DWORD *)a1;
      uint64_t result = *(__n128 *)(a1 + 8);
      *(__n128 *)(a4 + 8) = result;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      uint64_t v13 = (_DWORD *)(a1 + 24);
      if ((__n128 *)(a1 + 24) != a2)
      {
        uint64_t v14 = 0;
        float v15 = (float *)a4;
        float v16 = (float *)a4;
        do
        {
          BOOL v17 = (__n128 *)v8;
          unint64_t v8 = v13;
          float v18 = *v16;
          v16 += 6;
          float v19 = v18;
          if (*(float *)v13 >= v18)
          {
            v15[6] = *(float *)v13;
            uint64_t result = v17[2];
            *((__n128 *)v15 + 2) = result;
            v17[2].n128_u64[0] = 0;
            v17[2].n128_u64[1] = 0;
          }
          else
          {
            v15[6] = v19;
            *((_OWORD *)v15 + 2) = *(_OWORD *)(v15 + 2);
            *((void *)v15 + 1) = 0;
            *((void *)v15 + 2) = 0;
            uint64_t v20 = v5;
            if (v15 != (float *)v5)
            {
              uint64_t v21 = v14;
              while (1)
              {
                uint64_t v20 = v5 + v21;
                float v22 = *(float *)(v5 + v21 - 24);
                if (*(float *)v8 >= v22) {
                  break;
                }
                *(float *)uint64_t v20 = v22;
                long long v23 = *(_OWORD *)(v20 - 16);
                *(void *)(v20 - 16) = 0;
                *(void *)(v20 - 8) = 0;
                uint64_t v24 = *(std::__shared_weak_count **)(v20 + 16);
                *(_OWORD *)(v20 + 8) = v23;
                if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
                v21 -= 24;
                if (!v21)
                {
                  uint64_t v20 = v5;
                  break;
                }
              }
            }
            *(_DWORD *)uint64_t v20 = *v8;
            uint64_t result = v17[2];
            v17[2].n128_u64[0] = 0;
            v17[2].n128_u64[1] = 0;
            uint64_t v25 = *(std::__shared_weak_count **)(v20 + 16);
            *(__n128 *)(v20 + 8) = result;
            if (v25)
            {
              if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
          }
          uint64_t v13 = v8 + 6;
          v14 += 24;
          float v15 = v16;
        }
        while (v8 + 6 != (_DWORD *)a2);
      }
    }
  }
  return result;
}

uint64_t *std::unique_ptr<std::pair<float,std::shared_ptr<md::mun::MuninViewData>>,std::__destruct_n &>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = (std::__shared_weak_count **)(v2 + 16);
      do
      {
        uint64_t v6 = *v5;
        if (*v5 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        ++v4;
        v5 += 3;
      }
      while (v4 < *v3);
    }
  }
  return a1;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(float *a1, float *a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  uint64_t v8 = a5;
  uint64_t v10 = a2;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4) {
      return;
    }
    float v12 = *v10;
    while (1)
    {
      float v13 = *a1;
      if (v12 < *a1) {
        break;
      }
      a1 += 6;
      if (!--a4) {
        return;
      }
    }
    if (a4 >= v8)
    {
      if (a4 == 1)
      {
        *a1 = v12;
        float *v10 = v13;
        uint64_t v81 = *((void *)a1 + 1);
        *((void *)a1 + 1) = *((void *)v10 + 1);
        *((void *)v10 + 1) = v81;
        uint64_t v82 = *((void *)a1 + 2);
        *((void *)a1 + 2) = *((void *)v10 + 2);
        *((void *)v10 + 2) = v82;
        return;
      }
      if (a4 >= 0) {
        uint64_t v42 = a4;
      }
      else {
        uint64_t v42 = a4 + 1;
      }
      uint64_t v23 = v42 >> 1;
      BOOL v17 = &a1[6 * (v42 >> 1)];
      float v16 = v10;
      if (v10 != a3)
      {
        unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)v10) >> 3);
        float v16 = v10;
        do
        {
          unint64_t v44 = v43 >> 1;
          BOOL v45 = &v16[6 * (v43 >> 1)];
          float v47 = *v45;
          unsigned int v46 = v45 + 6;
          v43 += ~(v43 >> 1);
          if (v47 < *v17) {
            float v16 = v46;
          }
          else {
            unint64_t v43 = v44;
          }
        }
        while (v43);
      }
      uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v10) >> 3);
      if (v17 != v10)
      {
LABEL_21:
        if (v16 == v10)
        {
          unint64_t v27 = v17;
        }
        else
        {
          float v24 = *v17;
          *BOOL v17 = v12;
          float *v10 = v24;
          uint64_t v25 = *((void *)v17 + 1);
          *((void *)v17 + 1) = *((void *)v10 + 1);
          *((void *)v10 + 1) = v25;
          uint64_t v26 = *((void *)v17 + 2);
          *((void *)v17 + 2) = *((void *)v10 + 2);
          *((void *)v10 + 2) = v26;
          unint64_t v27 = v17 + 6;
          for (uint64_t i = v10 + 6; i != v16; i += 6)
          {
            if (v27 == v10) {
              uint64_t v10 = i;
            }
            int v29 = *(_DWORD *)v27;
            *unint64_t v27 = *i;
            *(_DWORD *)uint64_t i = v29;
            uint64_t v30 = *((void *)v27 + 1);
            *((void *)v27 + 1) = *((void *)i + 1);
            *((void *)i + 1) = v30;
            uint64_t v31 = *((void *)v27 + 2);
            *((void *)v27 + 2) = *((void *)i + 2);
            *((void *)i + 2) = v31;
            v27 += 6;
          }
          if (v27 != v10)
          {
            uint64_t v32 = v27;
            float v33 = v10;
            while (1)
            {
              float v34 = *v32;
              float *v32 = *v33;
              *float v33 = v34;
              uint64_t v35 = *((void *)v32 + 1);
              *((void *)v32 + 1) = *((void *)v33 + 1);
              *((void *)v33 + 1) = v35;
              uint64_t v36 = *((void *)v32 + 2);
              *((void *)v32 + 2) = *((void *)v33 + 2);
              *((void *)v33 + 2) = v36;
              v32 += 6;
              v33 += 6;
              BOOL v37 = v32 == v10;
              if (v33 == v16)
              {
                if (v32 == v10) {
                  goto LABEL_49;
                }
                float v33 = v10 + 6;
                float v38 = *v10;
                while (1)
                {
                  float v39 = v38;
                  float v38 = *v32;
                  float *v32 = v39;
                  float *v10 = v38;
                  uint64_t v40 = *((void *)v32 + 1);
                  *((void *)v32 + 1) = *((void *)v10 + 1);
                  *((void *)v10 + 1) = v40;
                  uint64_t v41 = *((void *)v32 + 2);
                  *((void *)v32 + 2) = *((void *)v10 + 2);
                  *((void *)v10 + 2) = v41;
                  v32 += 6;
                  BOOL v37 = v32 == v10;
                  if (v33 != v16) {
                    break;
                  }
                  if (v32 == v10) {
                    goto LABEL_49;
                  }
                }
              }
              if (v37) {
                uint64_t v10 = v33;
              }
            }
          }
        }
        goto LABEL_49;
      }
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v14 = v8;
      }
      else {
        uint64_t v14 = v8 + 1;
      }
      uint64_t v15 = v14 >> 1;
      float v16 = &v10[6 * (v14 >> 1)];
      BOOL v17 = v10;
      if (v10 != a1)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)a1) >> 3);
        BOOL v17 = a1;
        do
        {
          unint64_t v19 = v18 >> 1;
          uint64_t v20 = &v17[6 * (v18 >> 1)];
          float v22 = *v20;
          uint64_t v21 = v20 + 6;
          v18 += ~(v18 >> 1);
          if (v22 > *v16) {
            unint64_t v18 = v19;
          }
          else {
            BOOL v17 = v21;
          }
        }
        while (v18);
      }
      uint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)a1) >> 3);
      if (v17 != v10) {
        goto LABEL_21;
      }
    }
    unint64_t v27 = v16;
LABEL_49:
    a4 -= v23;
    v8 -= v15;
    if (v23 + v15 >= a4 + v8)
    {
      uint64_t v52 = v16;
      uint64_t v53 = v23;
      uint64_t v54 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(v27, v52, a3, a4, v8, a6, a7);
      a6 = v54;
      uint64_t v10 = v17;
      uint64_t v8 = v15;
      a4 = v53;
      a3 = v27;
      if (!v15) {
        return;
      }
    }
    else
    {
      unint64_t v48 = a1;
      uint64_t v49 = a3;
      uint64_t v50 = v15;
      uint64_t v51 = a6;
      std::__inplace_merge<std::_ClassicAlgPolicy,md::MuninSceneLogic::_computeOrderedVisibleViews(md::LayoutContext const&,md::MuninSceneContext &)::$_0 &,std::__wrap_iter<std::pair<float,std::shared_ptr<md::mun::MuninViewData>> *>>(v48, v17, v27, v23, v50, a6, a7);
      a3 = v49;
      a6 = v51;
      a1 = v27;
      uint64_t v10 = v16;
      if (!v8) {
        return;
      }
    }
  }
  if (a4 > v8)
  {
    if (a3 == v10) {
      return;
    }
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    do
    {
      uint64_t v57 = a6 + v55 * 4;
      uint64_t v58 = &v10[v55];
      *(float *)uint64_t v57 = v10[v55];
      *(_OWORD *)(v57 + 8) = *(_OWORD *)&v10[v55 + 2];
      *((void *)v58 + 1) = 0;
      *((void *)v58 + 2) = 0;
      ++v56;
      v55 += 6;
    }
    while (v58 + 6 != a3);
    uint64_t v59 = a6 + v55 * 4;
    if (a6 + v55 * 4 == a6) {
      goto LABEL_98;
    }
    while (2)
    {
      if (v10 == a1)
      {
        unint64_t v83 = 0;
        do
        {
          uint64_t v84 = v59 + v83;
          double v85 = &a3[v83 / 4];
          *(v85 - 6) = *(float *)(v59 + v83 - 24);
          long long v86 = *(_OWORD *)(v59 + v83 - 16);
          *(void *)(v84 - 16) = 0;
          *(void *)(v84 - 8) = 0;
          uint64_t v87 = *(std::__shared_weak_count **)&a3[v83 / 4 - 2];
          *((_OWORD *)v85 - 1) = v86;
          if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v88 = a6;
            uint64_t v89 = a3;
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
            a3 = v89;
            a6 = v88;
          }
          v83 -= 24;
        }
        while (v59 + v83 != a6);
        goto LABEL_98;
      }
      float v61 = *(v10 - 6);
      uint64_t v60 = v59 - 24;
      float v62 = *(float *)(v59 - 24);
      if (v62 >= v61)
      {
        *(a3 - 6) = v62;
        long long v67 = *(_OWORD *)(v59 - 16);
        *(void *)(v59 - 16) = 0;
        *(void *)(v59 - 8) = 0;
        uint64_t v64 = (std::__shared_weak_count *)*((void *)a3 - 1);
        *((_OWORD *)a3 - 1) = v67;
        if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          unint64_t v65 = a3;
          uint64_t v66 = a6;
LABEL_70:
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
          a6 = v66;
          a3 = v65;
        }
      }
      else
      {
        *(a3 - 6) = v61;
        long long v63 = *((_OWORD *)v10 - 1);
        *((void *)v10 - 2) = 0;
        *((void *)v10 - 1) = 0;
        uint64_t v64 = (std::__shared_weak_count *)*((void *)a3 - 1);
        *((_OWORD *)a3 - 1) = v63;
        if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          unint64_t v65 = a3;
          uint64_t v66 = a6;
          v10 -= 6;
          uint64_t v60 = v59;
          goto LABEL_70;
        }
        v10 -= 6;
        uint64_t v60 = v59;
      }
      a3 -= 6;
      uint64_t v59 = v60;
      if (v60 == a6) {
        goto LABEL_98;
      }
      continue;
    }
  }
  if (a1 != v10)
  {
    uint64_t v68 = 0;
    uint64_t v56 = 0;
    do
    {
      uint64_t v69 = a6 + v68 * 4;
      BOOL v70 = &a1[v68];
      *(float *)uint64_t v69 = a1[v68];
      *(_OWORD *)(v69 + 8) = *(_OWORD *)&a1[v68 + 2];
      *((void *)v70 + 1) = 0;
      *((void *)v70 + 2) = 0;
      ++v56;
      v68 += 6;
    }
    while (v70 + 6 != v10);
    uint64_t v71 = a6 + v68 * 4;
    if (a6 + v68 * 4 == a6) {
      goto LABEL_98;
    }
    uint64_t v72 = a6;
    while (v10 != a3)
    {
      if (*v10 >= *(float *)v72)
      {
        *a1 = *(float *)v72;
        long long v77 = *(_OWORD *)(v72 + 8);
        *(void *)(v72 + 8) = 0;
        *(void *)(v72 + 16) = 0;
        uint64_t v78 = (std::__shared_weak_count *)*((void *)a1 + 2);
        *(_OWORD *)(a1 + 2) = v77;
        if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v79 = a6;
          float v80 = a3;
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
          a3 = v80;
          a6 = v79;
        }
        v72 += 24;
      }
      else
      {
        *a1 = *v10;
        long long v73 = *(_OWORD *)(v10 + 2);
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        unint64_t v74 = (std::__shared_weak_count *)*((void *)a1 + 2);
        *(_OWORD *)(a1 + 2) = v73;
        if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v75 = a6;
          BOOL v76 = a3;
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
          a3 = v76;
          a6 = v75;
        }
        v10 += 6;
      }
      a1 += 6;
      if (v72 == v71) {
        goto LABEL_98;
      }
    }
    uint64_t v90 = 0;
    do
    {
      uint64_t v91 = &a1[v90];
      uint64_t v92 = v72 + v90 * 4;
      float *v91 = *(float *)(v72 + v90 * 4);
      long long v93 = *(_OWORD *)(v72 + v90 * 4 + 8);
      *(void *)(v92 + 8) = 0;
      *(void *)(v92 + 16) = 0;
      uint64_t v94 = *(std::__shared_weak_count **)&a1[v90 + 4];
      *(_OWORD *)(v91 + 2) = v93;
      if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v95 = a6;
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
        a6 = v95;
      }
      v90 += 6;
    }
    while (v92 != v71 - 24);
LABEL_98:
    if (a6)
    {
      char v96 = (std::__shared_weak_count **)(a6 + 16);
      do
      {
        unint64_t v97 = *v96;
        if (*v96 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, float *, float *))v97->__on_zero_shared)(v97, a2, a3);
          std::__shared_weak_count::__release_weak(v97);
        }
        v96 += 3;
        --v56;
      }
      while (v56);
    }
  }
}

void ***std::unique_ptr<md::SpriteSheet>::~unique_ptr[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = (char *)*v2;
    if (*v2)
    {
      unint64_t v4 = (char *)v2[1];
      uint64_t v5 = *v2;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
          if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          v4 -= 16;
        }
        while (v4 != v3);
        uint64_t v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x1A6239270](v2, 0x1020C402AA1BF7ELL);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEEclEOSO_(uint64_t a1, unsigned char *a2)
{
  if (!*a2)
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 968);
    md::SceneStateManager::clear((md::SceneStateManager *)v2);
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v3 = *(void *)(v2 + 56);
    if (v3 != v4)
    {
      do
      {
        uint64_t v5 = v3 - 32;
        std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v3 - 16));
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
    *(void *)(v2 + 56) = v4;
    *(unsigned char *)(v2 + 280) = 0;
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5712F8;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5712F8;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEED0Ev()
{
}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "MuninSceneLogic", "", v5, 2u);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5712B0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5712B0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571268;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF571268;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15MuninSceneLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_13CameraContextENS2_21LayerDataLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17MuninSceneContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void md::MuninSceneLogic::allocateContext(md::MuninSceneLogic *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 121);
  os_signpost_id_t v4 = (std::__shared_weak_count *)*((void *)this + 122);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *((void *)this + 67);
    uint64_t v6 = (char *)this + 480;
    unint64_t v7 = (char *)this + 616;
    uint64_t v8 = *((void *)this + 21);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a2 + 8) = v3;
    *(void *)(a2 + 16) = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 67);
    uint64_t v6 = (char *)this + 480;
    unint64_t v7 = (char *)this + 616;
    uint64_t v8 = *((void *)this + 21);
    *(void *)(a2 + 8) = v3;
    *(void *)(a2 + 16) = 0;
  }
  *(void *)a2 = &unk_1EF537380;
  *(void *)(a2 + 24) = v5;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 184) = 1065353216;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = v6;
  *(void *)(a2 + 224) = v7;
  *(void *)(a2 + 232) = v8;
  *(unsigned char *)(a2 + 240) = 1;
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 116) = 0u;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xC83717EF586624DCLL && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_71;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68) {
      unint64_t v4 = 0xE42D19AFCA302E68 % a3;
    }
  }
  else
  {
    unint64_t v4 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  unint64_t v7 = *(void **)(a2 + 8 * v4);
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0xE42D19AFCA302E68)
      {
        if (v8[2] == 0xE42D19AFCA302E68) {
          goto LABEL_23;
        }
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v9 >= a3) {
      v9 %= a3;
    }
    if (v9 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_25;
    }
  }
  if (v8[2] != 0xE42D19AFCA302E68) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v11 = v8[5];
  if (*(void *)(v11 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v6 = *(void *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v12 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v12 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v12 = (a3 - 1) & 0x1AF456233693CD46;
  }
  float v13 = *(void **)(a2 + 8 * v12);
  if (!v13) {
    goto LABEL_48;
  }
  uint64_t v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v14[2] == 0x1AF456233693CD46) {
          goto LABEL_46;
        }
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v15 = v14[1];
    if (v15 != 0x1AF456233693CD46)
    {
      if (v15 >= a3) {
        v15 %= a3;
      }
      if (v15 != v12) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v14[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v5 = *(void *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v18 = 0x7851AF310F49C988;
    if (a3 <= 0x7851AF310F49C988) {
      uint64_t v18 = 0x7851AF310F49C988 % a3;
    }
  }
  else
  {
    uint64_t v18 = (a3 - 1) & 0x7851AF310F49C988;
  }
  unint64_t v19 = *(void **)(a2 + 8 * v18);
  if (!v19) {
    goto LABEL_71;
  }
  uint64_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0x7851AF310F49C988)
      {
        if (v20[2] == 0x7851AF310F49C988) {
          goto LABEL_69;
        }
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == 0x7851AF310F49C988) {
      break;
    }
    if (v21 >= a3) {
      v21 %= a3;
    }
    if (v21 != v18) {
      goto LABEL_71;
    }
LABEL_58:
    uint64_t v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_71;
    }
  }
  if (v20[2] != 0x7851AF310F49C988) {
    goto LABEL_58;
  }
LABEL_69:
  uint64_t v23 = v20[5];
  if (*(void *)(v23 + 8) != 0x7851AF310F49C988)
  {
LABEL_71:
    uint64_t v24 = 0;
    goto LABEL_72;
  }
  uint64_t v24 = *(void *)(v23 + 32);
LABEL_72:
  *uint64_t result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC83717EF586624DCLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC83717EF586624DCLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC83717EF586624DCLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xC83717EF586624DCLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A24F52C4(_Unwind_Exception *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,md::mun::RigPointPass>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,md::mun::RigPointPass>>>::~__hash_table(a7);
  std::unique_ptr<md::MuninTapContext>::reset[abi:nn180100](a3, 0);
  std::vector<md::MuninSceneEvent>::~vector[abi:nn180100](a4);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v8 + 8);
  MEMORY[0x1A6239270](v8, 0x10F1C40E4F88C75);
  md::MuninSceneContext::~MuninSceneContext((md::MuninSceneContext *)va);
  MEMORY[0x1A6239270](a6, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::MuninSceneContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::MuninSceneContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555668;
  uint64_t v1 = a1[4];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::MuninSceneContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555668;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t *std::vector<md::MuninSceneEvent>::~vector[abi:nn180100](uint64_t *a1)
{
  if (*a1)
  {
    std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void md::MuninSceneLogic::didBecomeActive(md::MuninSceneLogic *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 832))
  {
    uint64_t v2 = (std::__shared_weak_count_vtbl *)((char *)this + 864);
    if (std::mutex::try_lock((std::mutex *)((char *)this + 864)))
    {
      uint64_t v3 = (std::__shared_weak_count *)operator new(0x20uLL);
      unint64_t v4 = v3;
      v3->__shared_owners_ = 0;
      v3->__shared_weak_owners_ = 0;
      v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B0E0;
      v3[1].__vftable = v2;
      uint64_t v5 = &v3[1].__vftable;
      unint64_t v21 = &v3[1].__vftable;
      uint64_t v22 = v3;
      if (*((void *)this + 116) && *((void *)this + 118))
      {
        if (GEOGetVectorKitMuninSceneLogicLog(void)::onceToken != -1) {
          dispatch_once(&GEOGetVectorKitMuninSceneLogicLog(void)::onceToken, &__block_literal_global_34_33488);
        }
        uint64_t v6 = GEOGetVectorKitMuninSceneLogicLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitMuninSceneLogicLog(void)::log, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_INFO, "tapSdfTexture and tapAlphaTexture are already loaded at this point!", buf, 2u);
        }
LABEL_26:
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      *(void *)long long buf = this;
      unint64_t v19 = &v3[1].__vftable;
      uint64_t v20 = v3;
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v7 = *(void *)(*((void *)this + 15) + 72);
      if (v7)
      {
        float v13 = this;
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v8 = operator new(0x20uLL);
        *uint64_t v8 = &unk_1EF571220;
        v8[1] = this;
        void v8[2] = v5;
        double v8[3] = v4;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v24 = v8;
        geo::TaskQueue::async(&v16, v7, v23);
        unint64_t v9 = v17;
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        if (v24 == v23)
        {
          (*(void (**)(void *))(v23[0] + 32))(v23);
        }
        else if (v24)
        {
          (*(void (**)(void *))(*v24 + 40))(v24);
        }
      }
      else
      {
        md::MuninSceneLogic::didBecomeActive(void)::$_0::operator()((uint64_t *)buf);
      }
      if (GEOGetVectorKitMuninSceneLogicLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitMuninSceneLogicLog(void)::onceToken, &__block_literal_global_34_33488);
      }
      uint64_t v10 = GEOGetVectorKitMuninSceneLogicLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitMuninSceneLogicLog(void)::log, OS_LOG_TYPE_INFO))
      {
        __int16 v12 = 0;
        _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_INFO, "tapSdfTexture and tapAlphaTexture are successfully loaded.", (uint8_t *)&v12, 2u);
      }
      uint64_t v11 = v20;
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      unint64_t v4 = v22;
      if (v22) {
        goto LABEL_26;
      }
    }
  }
}

void sub_1A24F5834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  md::components::Material::~Material((md::components::Material *)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void md::MuninSceneLogic::didBecomeActive(void)::$_0::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*a1 + 960));
  if ((v2 & 1) == 0)
  {
    id v19 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.VectorKit"];
    uint64_t v3 = [NSString stringWithUTF8String:"tap_sheet_sdf_4k"];
    unint64_t v4 = [NSString stringWithUTF8String:"png"];
    uint64_t v5 = (char *)operator new(0x58uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)uint64_t v5 = &unk_1EF583858;
    *((void *)v5 + 5) = 0;
    *((void *)v5 + 6) = 0;
    *((_DWORD *)v5 + 14) = 0;
    *((void *)v5 + 3) = &unk_1EF55AE58;
    *((void *)v5 + 4) = 0;
    *(void *)&long long v6 = 0x100000001;
    *((void *)&v6 + 1) = 0x100000001;
    *(_OWORD *)(v5 + 60) = v6;
    *(void *)(v5 + 76) = 0x100000001;
    *((_DWORD *)v5 + 21) = 0;
    uint64_t v22 = v5 + 24;
    uint64_t v23 = (std::__shared_weak_count *)v5;
    loadTexture(&v24, v19, v3, v4, (uint64_t *)&v22);
    long long v7 = v24;
    long long v24 = 0uLL;
    uint64_t v8 = *(std::__shared_weak_count **)(v1 + 936);
    *(_OWORD *)(v1 + 928) = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    unint64_t v9 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = v23;
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }

    uint64_t v11 = [NSString stringWithUTF8String:"tap_sheet_alpha_1k"];
    __int16 v12 = [NSString stringWithUTF8String:"png"];
    float v13 = (char *)operator new(0x58uLL);
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)float v13 = &unk_1EF583858;
    *((void *)v13 + 5) = 0;
    *((void *)v13 + 6) = 0;
    *((_DWORD *)v13 + 14) = 0;
    *((void *)v13 + 3) = &unk_1EF55AE58;
    *((void *)v13 + 4) = 0;
    *(void *)&long long v14 = 0x100000001;
    *((void *)&v14 + 1) = 0x100000001;
    *(_OWORD *)(v13 + 60) = v14;
    *(void *)(v13 + 76) = 0x100000001;
    *((_DWORD *)v13 + 21) = 0;
    uint64_t v20 = v13 + 24;
    unint64_t v21 = (std::__shared_weak_count *)v13;
    loadTexture(&v24, v19, v11, v12, (uint64_t *)&v20);
    long long v15 = v24;
    long long v24 = 0uLL;
    uint64_t v16 = *(std::__shared_weak_count **)(v1 + 952);
    *(_OWORD *)(v1 + 944) = v15;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v18 = v21;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1A24F5C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_1A24F5C88()
{
}

void ___ZL33GEOGetVectorKitMuninSceneLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "MuninSceneLogic");
  uint64_t v1 = (void *)GEOGetVectorKitMuninSceneLogicLog(void)::log;
  GEOGetVectorKitMuninSceneLogicLog(void)::log = (uint64_t)v0;
}

void std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
}

void std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  unsigned __int8 v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF571220;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1EF571220;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF571220;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::MuninSceneLogic::didBecomeActive(void)::$_0,std::allocator<md::MuninSceneLogic::didBecomeActive(void)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF571220;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<std::lock_guard<std::mutex>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<std::lock_guard<std::mutex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B0E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<std::lock_guard<std::mutex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58B0E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::MuninSceneLogic::~MuninSceneLogic(md::MuninSceneLogic *this)
{
  md::MuninSceneLogic::~MuninSceneLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::mutex *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned char *v26;
  void *v27;
  unsigned char *v28;
  void *v29;
  unsigned char *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  geo::read_write_lock *v35;
  const char *v36;
  void *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  void v40[3];
  void *v41;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EF534FE0;
  atomic_store(1u, (unsigned __int8 *)this + 960);
  uint64_t v2 = *(void *)(*((void *)this + 15) + 72);
  v40[0] = &unk_1EF571340;
  uint64_t v41 = v40;
  geo::TaskQueue::barrierSync(v2, v40);
  if (v41 == v40)
  {
    (*(void (**)(void *))(v40[0] + 32))(v40);
  }
  else if (v41)
  {
    (*(void (**)(void))(*v41 + 40))();
  }
  uint64_t v3 = (std::mutex *)*((void *)this + 106);
  std::mutex::lock(v3);
  *(unsigned char *)(*((void *)this + 106) + 64) = 0;
  std::mutex::unlock(v3);
  std::mutex::lock((std::mutex *)((char *)this + 864));
  std::mutex::unlock((std::mutex *)((char *)this + 864));
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 122);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 119);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 117);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 864));
  long long v7 = (std::__shared_weak_count *)*((void *)this + 107);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 101);
  if (v8)
  {
    *((void *)this + 102) = v8;
    operator delete(v8);
  }
  if (*((unsigned char *)this + 608)) {
    *((unsigned char *)this + 608) = 0;
  }
  if (*((unsigned char *)this + 600)) {
    *((unsigned char *)this + 600) = 0;
  }
  if (*((unsigned char *)this + 592)) {
    *((unsigned char *)this + 592) = 0;
  }
  if (*((unsigned char *)this + 584)) {
    *((unsigned char *)this + 584) = 0;
  }
  unint64_t v9 = *((void *)this + 70);
  if (v9)
  {
    std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 560, v9);
    operator delete(*((void **)this + 70));
  }
  uint64_t v10 = *((void *)this + 69);
  *((void *)this + 69) = 0;
  if (v10)
  {
    *(void *)(v10 + 40) = &unk_1EF5596D8;

    uint64_t v11 = *(void *)(v10 + 32);
    if (v11 == v10 + 8)
    {
      (*(void (**)(uint64_t))(*(void *)(v10 + 8) + 32))(v10 + 8);
    }
    else if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
    }
    MEMORY[0x1A6239270](v10, 0x10A0C401B67C7C3);
  }
  __int16 v12 = *((void *)this + 68);
  *((void *)this + 68) = 0;
  if (v12)
  {
    *(void *)(v12 + 40) = &unk_1EF5596D8;

    float v13 = *(void *)(v12 + 32);
    if (v13 == v12 + 8)
    {
      (*(void (**)(uint64_t))(*(void *)(v12 + 8) + 32))(v12 + 8);
    }
    else if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
    }
    MEMORY[0x1A6239270](v12, 0x10A0C401B67C7C3);
  }
  long long v14 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v14)
  {
    long long v15 = *(unsigned char **)(v14 + 24);
    if (v15)
    {
      do
      {
        if (v15[112]) {
          v15[112] = 0;
        }
        uint64_t v26 = *(unsigned char **)v15;
        unint64_t v27 = (void *)*((void *)v15 + 4);
        if (v27 != *((void **)v15 + 6)) {
          free(v27);
        }
        operator delete(v15);
        long long v15 = v26;
      }
      while (v26);
    }
    uint64_t v16 = *(void **)(v14 + 8);
    *(void *)(v14 + 8) = 0;
    if (v16) {
      operator delete(v16);
    }
    MEMORY[0x1A6239270](v14, 0x10A0C402A8DDD12);
  }
  uint64_t v17 = *((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v17) {
    MEMORY[0x1A6239270](v17, 0x60C4044C4A2DFLL);
  }
  uint64_t v18 = *((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v18)
  {
    id v19 = *(void **)(v18 + 80);
    if (v19)
    {
      do
      {
        uint64_t v20 = (void *)*v19;
        operator delete(v19);
        id v19 = v20;
      }
      while (v20);
    }
    unint64_t v21 = *(void **)(v18 + 64);
    *(void *)(v18 + 64) = 0;
    if (v21) {
      operator delete(v21);
    }
    MEMORY[0x1A6239270](v18, 0x10A0C40091BD0E7);
  }
  uint64_t v22 = (void *)*((void *)this + 60);
  if (v22)
  {
    *((void *)this + 61) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *((void *)this + 56);
  if (v23)
  {
    long long v24 = *((void *)this + 57);
    uint64_t v25 = (void *)*((void *)this + 56);
    if (v24 != v23)
    {
      do
      {
        uint64_t v28 = *(unsigned char **)(v24 - 24);
        if (v28)
        {
          do
          {
            if (v28[112]) {
              v28[112] = 0;
            }
            uint64_t v30 = *(unsigned char **)v28;
            uint64_t v31 = (void *)*((void *)v28 + 4);
            if (v31 != *((void **)v28 + 6)) {
              free(v31);
            }
            operator delete(v28);
            uint64_t v28 = v30;
          }
          while (v30);
        }
        int v29 = *(void **)(v24 - 40);
        *(void *)(v24 - 40) = 0;
        if (v29) {
          operator delete(v29);
        }
        v24 -= 48;
      }
      while (v24 != v23);
      uint64_t v25 = (void *)*((void *)this + 56);
    }
    *((void *)this + 57) = v23;
    operator delete(v25);
  }
  uint64_t v32 = (void *)*((void *)this + 53);
  if (v32)
  {
    do
    {
      float v33 = (void *)*v32;
      operator delete(v32);
      uint64_t v32 = v33;
    }
    while (v33);
  }
  float v34 = (void *)*((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v34) {
    operator delete(v34);
  }
  uint64_t v35 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 208));
  if (v35) {
    geo::read_write_lock::logFailure(v35, (uint64_t)"destruction", v36);
  }
  BOOL v37 = (void *)*((void *)this + 23);
  if (v37)
  {
    *((void *)this + 24) = v37;
    operator delete(v37);
  }
  float v38 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  float v39 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void sub_1A24F6724(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 968);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 944);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 928);
  std::mutex::~mutex((std::mutex *)(v1 + 864));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 848);
  unint64_t v4 = *(void **)(v1 + 808);
  if (v4)
  {
    *(void *)(v1 + 816) = v4;
    operator delete(v4);
    if (!*(unsigned char *)(v1 + 608))
    {
LABEL_3:
      if (!*(unsigned char *)(v1 + 600)) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if (!*(unsigned char *)(v1 + 608))
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v1 + 608) = 0;
  if (!*(unsigned char *)(v1 + 600))
  {
LABEL_4:
    if (!*(unsigned char *)(v1 + 592)) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(unsigned char *)(v1 + 600) = 0;
  if (!*(unsigned char *)(v1 + 592))
  {
LABEL_5:
    if (!*(unsigned char *)(v1 + 584)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  *(unsigned char *)(v1 + 592) = 0;
  if (!*(unsigned char *)(v1 + 584))
  {
LABEL_7:
    std::vector<md::MuninSceneEvent>::~vector[abi:nn180100]((uint64_t *)(v1 + 560));
    std::unique_ptr<md::FadeEffectBlock>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 552));
    std::unique_ptr<md::FadeEffectBlock>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 544));
    std::unique_ptr<md::mun::MuninIntersector>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 536));
    uint64_t v5 = *(void *)(v1 + 528);
    *(void *)(v1 + 528) = 0;
    if (v5) {
      MEMORY[0x1A6239270](v5, 0x60C4044C4A2DFLL);
    }
    std::unique_ptr<md::mun::MuninDisplayAnalytic>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 520));
    long long v6 = *(void **)(v1 + 480);
    if (v6)
    {
      *(void *)(v1 + 488) = v6;
      operator delete(v6);
    }
    geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::~linear_map((void **)(v1 + 448));
    std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 408);
    geo::read_write_lock::~read_write_lock((pthread_rwlock_t *)(v1 + 208));
    long long v7 = *(void **)(v1 + 184);
    if (v7)
    {
      *(void *)(v1 + 192) = v7;
      operator delete(v7);
    }
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 168);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
    md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
    _Unwind_Resume(a1);
  }
LABEL_6:
  *(unsigned char *)(v1 + 584) = 0;
  goto LABEL_7;
}

uint64_t *std::unique_ptr<md::FadeEffectBlock>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(void *)(v2 + 40) = &unk_1EF5596D8;

    uint64_t v3 = *(void *)(v2 + 32);
    if (v3 == v2 + 8)
    {
      (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 32))(v2 + 8);
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    MEMORY[0x1A6239270](v2, 0x10A0C401B67C7C3);
  }
  return a1;
}

uint64_t *std::unique_ptr<md::mun::MuninIntersector>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned char **)(v2 + 24);
    if (v3)
    {
      do
      {
        if (v3[112]) {
          v3[112] = 0;
        }
        long long v6 = *(unsigned char **)v3;
        long long v7 = (void *)*((void *)v3 + 4);
        if (v7 != *((void **)v3 + 6)) {
          free(v7);
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6);
    }
    unint64_t v4 = *(void **)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v4) {
      operator delete(v4);
    }
    MEMORY[0x1A6239270](v2, 0x10A0C402A8DDD12);
  }
  return a1;
}

uint64_t *std::unique_ptr<md::mun::MuninDisplayAnalytic>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 80);
    if (v3)
    {
      do
      {
        unint64_t v4 = (void *)*v3;
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
    uint64_t v5 = *(void **)(v2 + 64);
    *(void *)(v2 + 64) = 0;
    if (v5) {
      operator delete(v5);
    }
    MEMORY[0x1A6239270](v2, 0x10A0C40091BD0E7);
  }
  return a1;
}

void std::__function::__func<md::MuninSceneLogic::~MuninSceneLogic()::$_0,std::allocator<md::MuninSceneLogic::~MuninSceneLogic()::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF571340;
}

void *std::__function::__func<md::MuninSceneLogic::~MuninSceneLogic()::$_0,std::allocator<md::MuninSceneLogic::~MuninSceneLogic()::$_0>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF571340;
  return result;
}

void std::__function::__func<md::MuninSceneLogic::~MuninSceneLogic()::$_0,std::allocator<md::MuninSceneLogic::~MuninSceneLogic()::$_0>,void ()(void)>::~__func()
{
}

std::mutex *std::__shared_ptr_pointer<md::MuninSceneLogic::ValidState *,std::shared_ptr<md::MuninSceneLogic::ValidState>::__shared_ptr_default_delete<md::MuninSceneLogic::ValidState,md::MuninSceneLogic::ValidState>,std::allocator<md::MuninSceneLogic::ValidState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    std::mutex::~mutex(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::MuninSceneLogic::ValidState *,std::shared_ptr<md::MuninSceneLogic::ValidState>::__shared_ptr_default_delete<md::MuninSceneLogic::ValidState,md::MuninSceneLogic::ValidState>,std::allocator<md::MuninSceneLogic::ValidState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

md::mun::MuninMetadataContainer *std::__shared_ptr_pointer<md::mun::MuninMetadataContainer *,std::shared_ptr<md::mun::MuninMetadataContainer>::__shared_ptr_default_delete<md::mun::MuninMetadataContainer,md::mun::MuninMetadataContainer>,std::allocator<md::mun::MuninMetadataContainer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(md::mun::MuninMetadataContainer **)(a1 + 24);
  if (result)
  {
    md::mun::MuninMetadataContainer::~MuninMetadataContainer(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<md::mun::MuninMetadataContainer *,std::shared_ptr<md::mun::MuninMetadataContainer>::__shared_ptr_default_delete<md::mun::MuninMetadataContainer,md::mun::MuninMetadataContainer>,std::allocator<md::mun::MuninMetadataContainer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

double md::Logic<md::MuninSceneLogic,md::MuninSceneContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::CameraContext,md::LayerDataLogicContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EF537380;
  double result = 0.0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(unsigned char *)(a1 + 240) = 1;
  return result;
}

uint64_t md::MuninSceneLogic::getLodForCavasSize(md::MuninSceneLogic *this, CGSize a2)
{
  double height = a2.height;
  double width = a2.width;
  uint64_t v5 = +[VKDebugSettings sharedSettings];
  if ([v5 overrideLod])
  {
    uint64_t v6 = [v5 lodOverride];
  }
  else
  {
    BOOL v7 = width == 0.0 && height == 0.0;
    if (v7)
    {
      uint64_t v6 = 4;
    }
    else
    {
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v56 = &v57;
      uint64_t v8 = (unsigned __int16 *)*((void *)this + 102);
      unint64_t v9 = (unsigned __int16 *)*((void *)this + 101);
      if (v8 == v9)
      {
        long long v14 = 0;
        uint64_t v15 = 0;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        uint64_t v59 = &v60;
        uint64_t v16 = &v60;
        while (1)
        {
          uint64_t v17 = (char *)&unk_1A29C3B3C + 6 * v15;
          uint64_t v18 = &v60;
          if (v16 == &v60) {
            goto LABEL_23;
          }
          id v19 = v14;
          uint64_t v20 = &v60;
          if (v14)
          {
            do
            {
              uint64_t v18 = (uint64_t **)v19;
              id v19 = (uint64_t *)v19[1];
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v18 = (uint64_t **)v20[2];
              BOOL v7 = *v18 == (uint64_t *)v20;
              uint64_t v20 = v18;
            }
            while (v7);
          }
          unsigned int v21 = *((unsigned __int16 *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 14) < v21)
          {
LABEL_23:
            uint64_t v22 = v14 ? v18 : &v60;
            uint64_t v23 = v14 ? v18 + 1 : &v60;
          }
          else
          {
            uint64_t v22 = &v60;
            uint64_t v23 = &v60;
            if (v14)
            {
              uint64_t v25 = v14;
              uint64_t v23 = &v60;
              while (1)
              {
                while (1)
                {
                  uint64_t v22 = (uint64_t **)v25;
                  unsigned int v26 = *((unsigned __int16 *)v25 + 14);
                  if (v21 >= v26) {
                    break;
                  }
                  uint64_t v25 = *v22;
                  uint64_t v23 = v22;
                  if (!*v22) {
                    goto LABEL_30;
                  }
                }
                if (v26 >= v21) {
                  break;
                }
                uint64_t v23 = v22 + 1;
                uint64_t v25 = v22[1];
                if (!v25) {
                  goto LABEL_30;
                }
              }
            }
          }
          if (!*v23)
          {
LABEL_30:
            long long v24 = (char *)operator new(0x20uLL);
            *(_DWORD *)(v24 + 26) = *(_DWORD *)v17;
            *((_WORD *)v24 + 15) = *((_WORD *)v17 + 2);
            *(void *)long long v24 = 0;
            *((void *)v24 + 1) = 0;
            *((void *)v24 + 2) = v22;
            *uint64_t v23 = (uint64_t *)v24;
            if (*v59)
            {
              uint64_t v59 = (uint64_t **)*v59;
              long long v24 = (char *)*v23;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v60, (uint64_t *)v24);
            ++v61;
          }
          if (++v15 == 8) {
            break;
          }
          uint64_t v16 = v59;
          long long v14 = v60;
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v57);
        unint64_t v27 = v60;
        uint64_t v56 = v59;
        uint64_t v57 = v60;
        uint64_t v58 = v61;
        if (v61)
        {
          v60[2] = (uint64_t)&v57;
          uint64_t v59 = &v60;
          uint64_t v60 = 0;
          uint64_t v61 = 0;
          unint64_t v27 = 0;
        }
        else
        {
          uint64_t v56 = &v57;
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v27);
      }
      else
      {
        int v10 = 0;
        int v11 = 7;
        do
        {
          int v12 = *v9;
          LODWORD(v59) = v10 | (v12 << 16);
          BYTE4(v59) = v11;
          geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::insert((uint64_t *)&v56, (unsigned __int16 *)&v59);
          if (v11 <= 1) {
            int v13 = 1;
          }
          else {
            int v13 = v11;
          }
          int v11 = v13 - 1;
          ++v9;
          int v10 = v12;
        }
        while (v9 != v8);
        LODWORD(v59) = v12 | 0xFFFF0000;
        BYTE4(v59) = v11;
        geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::insert((uint64_t *)&v56, (unsigned __int16 *)&v59);
      }
      uint64_t v28 = v56;
      if (v56 == &v57) {
        goto LABEL_79;
      }
      unint64_t v29 = 0;
      unsigned int v30 = (int)fmax(width, height);
      uint64_t v31 = (uint64_t)v56;
      do
      {
        uint64_t v32 = *(void **)(v31 + 8);
        if (v32)
        {
          do
          {
            float v33 = (void **)v32;
            uint64_t v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            float v33 = *(void ***)(v31 + 16);
            BOOL v7 = *v33 == (void *)v31;
            uint64_t v31 = (uint64_t)v33;
          }
          while (!v7);
        }
        ++v29;
        uint64_t v31 = (uint64_t)v33;
      }
      while (v33 != &v57);
      uint64_t v34 = (uint64_t)v56;
      do
      {
        unint64_t v35 = v29 >> 1;
        uint64_t v36 = (void *)v34;
        if (v29 != 1)
        {
          uint64_t v38 = v29 >> 1;
          uint64_t v39 = v34;
          do
          {
            uint64_t v40 = *(void **)(v39 + 8);
            if (v40)
            {
              do
              {
                uint64_t v36 = v40;
                uint64_t v40 = (void *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                uint64_t v36 = *(void **)(v39 + 16);
                BOOL v7 = *v36 == v39;
                uint64_t v39 = (uint64_t)v36;
              }
              while (!v7);
            }
            uint64_t v39 = (uint64_t)v36;
            BOOL v43 = v38-- <= 1;
          }
          while (!v43);
        }
        if (*((unsigned __int16 *)v36 + 14) <= v30)
        {
          BOOL v37 = (void *)v36[1];
          if (v37)
          {
            do
            {
              uint64_t v34 = (uint64_t)v37;
              BOOL v37 = (void *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              uint64_t v34 = v36[2];
              BOOL v7 = *(void *)v34 == (void)v36;
              uint64_t v36 = (void *)v34;
            }
            while (!v7);
          }
          unint64_t v35 = v29 + ~v35;
        }
        unint64_t v29 = v35;
      }
      while (v35);
      if ((void **)v34 == &v57
        || ((unsigned int v41 = *(unsigned __int16 *)(v34 + 26), v42 = *(unsigned __int16 *)(v34 + 28), v41 <= v30)
          ? (BOOL v43 = v42 > v30)
          : (BOOL v43 = 0),
            !v43))
      {
LABEL_79:
        uint64_t v6 = 2;
      }
      else
      {
        unint64_t v45 = 0;
        uint64_t v46 = (uint64_t)v56;
        do
        {
          float v47 = *(void **)(v46 + 8);
          if (v47)
          {
            do
            {
              unint64_t v48 = (void **)v47;
              float v47 = (void *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              unint64_t v48 = *(void ***)(v46 + 16);
              BOOL v7 = *v48 == (void *)v46;
              uint64_t v46 = (uint64_t)v48;
            }
            while (!v7);
          }
          ++v45;
          uint64_t v46 = (uint64_t)v48;
        }
        while (v48 != &v57);
        do
        {
          unint64_t v49 = v45 >> 1;
          uint64_t v50 = (uint64_t *)v28;
          if (v45 != 1)
          {
            uint64_t v52 = v45 >> 1;
            uint64_t v53 = v28;
            do
            {
              uint64_t v54 = v53[1];
              if (v54)
              {
                do
                {
                  uint64_t v50 = v54;
                  uint64_t v54 = (uint64_t *)*v54;
                }
                while (v54);
              }
              else
              {
                do
                {
                  uint64_t v50 = v53[2];
                  BOOL v7 = *v50 == (void)v53;
                  uint64_t v53 = (uint64_t **)v50;
                }
                while (!v7);
              }
              uint64_t v53 = (uint64_t **)v50;
              BOOL v43 = v52-- <= 1;
            }
            while (!v43);
          }
          if (*((unsigned __int16 *)v50 + 14) <= v30)
          {
            uint64_t v51 = (uint64_t *)v50[1];
            if (v51)
            {
              do
              {
                uint64_t v28 = (uint64_t **)v51;
                uint64_t v51 = (uint64_t *)*v51;
              }
              while (v51);
            }
            else
            {
              do
              {
                uint64_t v28 = (uint64_t **)v50[2];
                BOOL v7 = *v28 == v50;
                uint64_t v50 = (uint64_t *)v28;
              }
              while (!v7);
            }
            unint64_t v49 = v45 + ~v49;
          }
          unint64_t v45 = v49;
        }
        while (v49);
        if (v28 == &v57
          || (*((unsigned __int16 *)v28 + 13) <= v30 ? (BOOL v55 = *((unsigned __int16 *)v28 + 14) > v30) : (BOOL v55 = 0), !v55))
        {
          uint64_t v28 = &v57;
        }
        uint64_t v6 = *((unsigned __int8 *)v28 + 30);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v57);
    }
  }

  return v6;
}

void sub_1A24F712C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a10);

  _Unwind_Resume(a1);
}

uint64_t *geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::insert(uint64_t *result, unsigned __int16 *a2)
{
  uint64_t v3 = result;
  if (result[2])
  {
    unint64_t v4 = (uint64_t **)(result + 1);
    if ((uint64_t *)*result == result + 1)
    {
      int v10 = (uint64_t **)*result;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = (uint64_t *)*result;
      do
      {
        BOOL v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = (uint64_t **)v7;
            BOOL v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (uint64_t **)v6[2];
            BOOL v9 = *v8 == v6;
            uint64_t v6 = (uint64_t *)v8;
          }
          while (!v9);
        }
        ++v5;
        uint64_t v6 = (uint64_t *)v8;
      }
      while (v8 != v4);
      int v10 = (uint64_t **)*result;
      do
      {
        unint64_t v11 = v5 >> 1;
        int v12 = (uint64_t *)v10;
        if (v5 != 1)
        {
          uint64_t v14 = v5 >> 1;
          uint64_t v15 = v10;
          do
          {
            uint64_t v17 = v15[1];
            if (v17)
            {
              do
              {
                int v12 = v17;
                uint64_t v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                int v12 = v15[2];
                BOOL v9 = *v12 == (void)v15;
                uint64_t v15 = (uint64_t **)v12;
              }
              while (!v9);
            }
            uint64_t v15 = (uint64_t **)v12;
          }
          while (v14-- > 1);
        }
        if (*((unsigned __int16 *)v12 + 14) < a2[1])
        {
          int v13 = (uint64_t *)v12[1];
          if (v13)
          {
            do
            {
              int v10 = (uint64_t **)v13;
              int v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              int v10 = (uint64_t **)v12[2];
              BOOL v9 = *v10 == v12;
              int v12 = (uint64_t *)v10;
            }
            while (!v9);
          }
          unint64_t v11 = v5 + ~v11;
        }
        unint64_t v5 = v11;
      }
      while (v11);
    }
    if (v10 != v4 && *((unsigned __int16 *)v10 + 13) < a2[1]) {
      return result;
    }
    if (v10 != (uint64_t **)*result)
    {
      uint64_t v22 = *v10;
      if (*v10)
      {
        do
        {
          uint64_t v23 = v22;
          uint64_t v22 = (uint64_t *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = v10[2];
          BOOL v9 = *v23 == (void)v10;
          int v10 = (uint64_t **)v23;
        }
        while (v9);
      }
      if (*a2 < *((unsigned __int16 *)v23 + 14)) {
        return result;
      }
    }
    long long v24 = *v4;
    uint64_t v20 = (uint64_t **)(result + 1);
    if (*v4)
    {
      unsigned int v25 = a2[1];
      while (1)
      {
        while (1)
        {
          uint64_t v20 = (uint64_t **)v24;
          unsigned int v26 = *((unsigned __int16 *)v24 + 14);
          if (v25 >= v26) {
            break;
          }
          long long v24 = *v20;
          unint64_t v4 = v20;
          if (!*v20) {
            goto LABEL_54;
          }
        }
        if (v26 >= v25) {
          return result;
        }
        long long v24 = v20[1];
        if (!v24) {
          goto LABEL_52;
        }
      }
    }
LABEL_54:
    unint64_t v27 = (char *)operator new(0x20uLL);
    *(_DWORD *)(v27 + 26) = *(_DWORD *)a2;
    *((_WORD *)v27 + 15) = a2[2];
    *(void *)unint64_t v27 = 0;
    *((void *)v27 + 1) = 0;
    *((void *)v27 + 2) = v20;
    *unint64_t v4 = (uint64_t *)v27;
    uint64_t v28 = *(void *)*v3;
    if (v28)
    {
      *uint64_t v3 = v28;
      unint64_t v29 = *v4;
    }
    else
    {
      unint64_t v29 = (uint64_t *)v27;
    }
    double result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[1], v29);
    ++v3[2];
    return result;
  }
  unint64_t v4 = (uint64_t **)(result + 1);
  uint64_t v18 = result[1];
  if (!v18)
  {
    uint64_t v20 = (uint64_t **)(result + 1);
    goto LABEL_54;
  }
  unsigned int v19 = a2[1];
  while (1)
  {
    while (1)
    {
      uint64_t v20 = (uint64_t **)v18;
      unsigned int v21 = *(unsigned __int16 *)(v18 + 28);
      if (v19 >= v21) {
        break;
      }
      uint64_t v18 = (uint64_t)*v20;
      unint64_t v4 = v20;
      if (!*v20) {
        goto LABEL_54;
      }
    }
    if (v21 >= v19) {
      return result;
    }
    uint64_t v18 = (uint64_t)v20[1];
    if (!v18)
    {
LABEL_52:
      unint64_t v4 = v20 + 1;
      goto LABEL_54;
    }
  }
}

void md::MuninSceneLogic::addActiveViews(void *a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    unint64_t v4 = (pthread_rwlock_t *)(a1 + 26);
    unint64_t v5 = &v33;
    unsigned int v30 = (pthread_rwlock_t *)(a1 + 26);
    while (1)
    {
      LOBYTE(v32) = *((unsigned char *)v2 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v5, (uint64_t)(v2 + 3));
      char v36 = 0;
      if (*((unsigned char *)v2 + 112))
      {
        int v37 = *((_DWORD *)v2 + 29);
        char v36 = 1;
      }
      uint64_t v6 = v2[16];
      uint64_t v38 = v2[15];
      uint64_t v39 = v6;
      BOOL v7 = (std::__shared_weak_count *)v2[17];
      uint64_t v40 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)v31, &v32);
      uint64_t v8 = *((void *)v31[0] + 1);
      uint64_t v9 = *((void *)v31[0] + 2);
      char v10 = *((unsigned char *)v31[0] + 24);
      if (v31[0] != v31[2]) {
        free(v31[0]);
      }
      v31[0] = v4;
      unint64_t v11 = (geo::read_write_lock *)pthread_rwlock_wrlock(v4);
      if (v11) {
        geo::read_write_lock::logFailure(v11, (uint64_t)"write lock", v12);
      }
      uint64_t v14 = (char *)a1[24];
      unint64_t v13 = a1[25];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = v5;
        uint64_t v17 = (char *)a1[23];
        uint64_t v18 = (v14 - v17) >> 4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60) {
          abort();
        }
        uint64_t v20 = v13 - (void)v17;
        if (v20 >> 3 > v19) {
          unint64_t v19 = v20 >> 3;
        }
        unint64_t v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v19;
        if (v21)
        {
          if (v21 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v22 = (char *)operator new(16 * v21);
        }
        else
        {
          uint64_t v22 = 0;
        }
        uint64_t v23 = &v22[16 * v18];
        *(void *)uint64_t v23 = v8;
        v23[8] = BYTE2(v9);
        v23[9] = v9;
        v23[10] = v10;
        long long v24 = v23;
        if (v14 != v17)
        {
          do
          {
            uint64_t v25 = *((void *)v14 - 2);
            v14 -= 16;
            int v26 = *(_DWORD *)(v14 + 7);
            *((void *)v24 - 2) = v25;
            v24 -= 16;
            *(_DWORD *)(v24 + 7) = v26;
          }
          while (v14 != v17);
          uint64_t v14 = (char *)a1[23];
        }
        uint64_t v15 = v23 + 16;
        a1[23] = v24;
        a1[24] = v23 + 16;
        a1[25] = &v22[16 * v21];
        unint64_t v5 = v16;
        if (v14) {
          operator delete(v14);
        }
        unint64_t v4 = v30;
      }
      else
      {
        *(void *)uint64_t v14 = v8;
        v14[8] = BYTE2(v9);
        v14[9] = v9;
        v14[10] = v10;
        uint64_t v15 = v14 + 16;
      }
      a1[24] = v15;
      unint64_t v27 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
      if (v27) {
        geo::read_write_lock::logFailure(v27, (uint64_t)"unlock", v28);
      }
      unint64_t v29 = v40;
      if (v40)
      {
        if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      if (v36) {
        goto LABEL_35;
      }
LABEL_36:
      if (v34 != v35) {
        free(v34);
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        return;
      }
    }
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!v36) {
      goto LABEL_36;
    }
LABEL_35:
    char v36 = 0;
    goto LABEL_36;
  }
}

void sub_1A24F7668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, pthread_rwlock_t *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(unsigned char *)(a1 + 96)) {
LABEL_4:
  }
    *(unsigned char *)(a1 + 96) = 0;
LABEL_5:
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3 != *(void **)(a1 + 32)) {
    free(v3);
  }
  return a1;
}

void md::MuninSceneLogic::addPreloadViews(uint64_t a1, const void **a2, void *a3)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 504))
  {
    *(void *)(a1 + 488) = *(void *)(a1 + 480);
    *(unsigned char *)(a1 + 504) = 0;
  }
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)long long v86 = 0u;
  float v6 = (float)(unint64_t)(*(void *)(a1 + 432) - 0x5555555555555555 * (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3));
  int v87 = 1065353216;
  unint64_t prime = vcvtps_u32_f32(v6 / *(float *)(a1 + 440));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  uint64_t v79 = a1 + 408;
  int8x8_t v8 = *(int8x8_t *)(a1 + 416);
  if (prime > *(void *)&v8) {
    goto LABEL_8;
  }
  if (prime < *(void *)&v8)
  {
    unint64_t v9 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 432) / *(float *)(a1 + 440));
    if (*(void *)&v8 < 3uLL || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8), v10.i16[0] = vaddlv_u8(v10), v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      unint64_t prime = v9;
    }
    if (prime < *(void *)&v8) {
LABEL_8:
    }
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v79, prime);
  }
  uint64_t v13 = *(unsigned char **)(a1 + 480);
  uint64_t v12 = *(unsigned char **)(a1 + 488);
  uint64_t v14 = (v12 - v13) >> 5;
  unint64_t v15 = v14 - 0x5555555555555555 * (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3);
  if (v15 > (uint64_t)(*(void *)(a1 + 496) - (void)v13) >> 5)
  {
    if (v15 >> 59) {
      abort();
    }
    uint64_t v16 = (char *)operator new(32 * v15);
    uint64_t v17 = &v16[32 * v14];
    if (v12 != v13)
    {
      uint64_t v18 = &v16[32 * v14];
      do
      {
        uint64_t v17 = v18 - 32;
        long long v19 = *((_OWORD *)v12 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v12 - 2);
        *((_OWORD *)v18 - 1) = v19;
        v12 -= 32;
        v18 -= 32;
      }
      while (v12 != v13);
    }
    *(void *)(a1 + 480) = v17;
    *(void *)(a1 + 488) = &v16[32 * v14];
    *(void *)(a1 + 496) = &v16[32 * v15];
    if (v13) {
      operator delete(v13);
    }
  }
  long long v77 = a2;
  uint64_t v78 = a3;
  uint64_t v20 = (long long *)*a2;
  float v80 = (long long *)a2[1];
  if (*a2 != v80)
  {
    do
    {
      md::mun::MuninMetadataContainer::activePoint((md::mun::MuninMetadataContainer *)v104, *(void *)(a1 + 168), *(void *)v20);
      uint64_t v21 = *(void *)(a1 + 480);
      uint64_t v22 = *(void *)(a1 + 488);
      if (v21 == v22)
      {
        uint64_t v23 = 0;
      }
      else
      {
        uint64_t v23 = 0;
        do
        {
          if (*(void *)v21 == *(void *)v20
            && *(unsigned __int8 *)(v21 + 8) == *((unsigned __int8 *)v20 + 8)
            && *(unsigned __int8 *)(v21 + 9) == *((unsigned __int8 *)v20 + 9))
          {
            v23 += *(unsigned __int8 *)(v21 + 10) == *((unsigned __int8 *)v20 + 10);
          }
          v21 += 32;
        }
        while (v21 != v22);
      }
      if (LOBYTE(v104[0]))
      {
        int v24 = *((_DWORD *)v20 + 4);
        unint64_t v25 = *(void *)v20;
        uint64_t v26 = *((unsigned __int8 *)v20 + 8);
        uint64_t v27 = *((unsigned __int8 *)v20 + 9);
        unint64_t v28 = *((unsigned __int8 *)v20 + 10);
        uint64_t v88 = v92;
        uint64_t v89 = v92;
        uint64_t v90 = v92;
        uint64_t v91 = 32;
        unint64_t v93 = 0;
        unint64_t v94 = v110;
        unint64_t v29 = ((unint64_t)v109 << 32) | (v26 << 16) | v27;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v88, v92, (char *)&v94, v95);
        unint64_t v94 = v25;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v88, v89, (char *)&v94, v95);
        unint64_t v94 = v29;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v88, v89, (char *)&v94, v95);
        unint64_t v94 = v28;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v88, v89, (char *)&v94, v95);
        unsigned int v30 = (unsigned __int8 *)v88;
        unint64_t v31 = v89 - (unsigned char *)v88;
        if (v89 == v88)
        {
          unint64_t v32 = 0;
        }
        else
        {
          unint64_t v32 = 0;
          if (v31 <= 1) {
            unint64_t v31 = 1;
          }
          do
          {
            unsigned int v33 = *v30++;
            v32 ^= (v32 << 6) + (v32 >> 2) - 0x61C8864680B583EBLL + v33;
            --v31;
          }
          while (v31);
        }
        unint64_t v93 = v32;
        gdc::LayerDataRequestKey::LayerDataRequestKey(buf, 0, 0x24u, (uint64_t)&v88, v24);
        if (v88 != v90) {
          free(v88);
        }
        std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey>((uint64_t)__p, buf, (uint64_t)buf);
        if (v84) {
          char v84 = 0;
        }
        if (v82 != v83) {
          free(v82);
        }
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(v79, *(void *)v20, *(void *)v20);
        if (v23 > 0) {
          goto LABEL_89;
        }
        *(_OWORD *)long long buf = *v20;
        uint64_t v82 = (void *)*((void *)v20 + 2);
        unint64_t v36 = *(void *)(a1 + 488);
        unint64_t v39 = *(void *)(a1 + 496);
        if (v36 >= v39)
        {
          uint64_t v41 = *(void *)(a1 + 480);
          uint64_t v42 = (uint64_t)(v36 - v41) >> 5;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 59) {
            abort();
          }
          uint64_t v44 = v39 - v41;
          if (v44 >> 4 > v43) {
            unint64_t v43 = v44 >> 4;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v45 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            if (v45 >> 59) {
              goto LABEL_145;
            }
            uint64_t v46 = (char *)operator new(32 * v45);
          }
          else
          {
            uint64_t v46 = 0;
          }
          uint64_t v51 = &v46[32 * v42];
          *(_OWORD *)uint64_t v51 = *(_OWORD *)buf;
          *((void *)v51 + 2) = v82;
          *((_DWORD *)v51 + 6) = 0;
          uint64_t v52 = v51;
          if (v36 != v41)
          {
            do
            {
              long long v53 = *(_OWORD *)(v36 - 16);
              *((_OWORD *)v52 - 2) = *(_OWORD *)(v36 - 32);
              *((_OWORD *)v52 - 1) = v53;
              v52 -= 32;
              v36 -= 32;
            }
            while (v36 != v41);
            goto LABEL_85;
          }
          goto LABEL_86;
        }
        long long v40 = *v20;
        *(void *)(v36 + 16) = *((void *)v20 + 2);
        *(_OWORD *)unint64_t v36 = v40;
        *(_DWORD *)(v36 + 24) = 0;
        uint64_t v38 = (char *)(v36 + 32);
      }
      else
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        uint64_t v34 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1A1780000, v34, OS_LOG_TYPE_ERROR, "Missing metadata point for preload view", buf, 2u);
        }

        if (v23 > 0) {
          goto LABEL_89;
        }
        *(_OWORD *)long long buf = *v20;
        uint64_t v82 = (void *)*((void *)v20 + 2);
        unint64_t v36 = *(void *)(a1 + 488);
        unint64_t v35 = *(void *)(a1 + 496);
        if (v36 >= v35)
        {
          uint64_t v47 = *(void *)(a1 + 480);
          uint64_t v48 = (uint64_t)(v36 - v47) >> 5;
          unint64_t v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 59) {
            abort();
          }
          uint64_t v50 = v35 - v47;
          if (v50 >> 4 > v49) {
            unint64_t v49 = v50 >> 4;
          }
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v45 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v49;
          }
          if (v45)
          {
            if (v45 >> 59) {
LABEL_145:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            uint64_t v46 = (char *)operator new(32 * v45);
          }
          else
          {
            uint64_t v46 = 0;
          }
          uint64_t v51 = &v46[32 * v48];
          *(_OWORD *)uint64_t v51 = *(_OWORD *)buf;
          *((void *)v51 + 2) = v82;
          *((_DWORD *)v51 + 6) = 3;
          uint64_t v52 = v51;
          if (v36 != v47)
          {
            do
            {
              long long v54 = *(_OWORD *)(v36 - 16);
              *((_OWORD *)v52 - 2) = *(_OWORD *)(v36 - 32);
              *((_OWORD *)v52 - 1) = v54;
              v52 -= 32;
              v36 -= 32;
            }
            while (v36 != v47);
LABEL_85:
            unint64_t v36 = *(void *)(a1 + 480);
          }
LABEL_86:
          uint64_t v38 = v51 + 32;
          *(void *)(a1 + 480) = v52;
          *(void *)(a1 + 488) = v51 + 32;
          *(void *)(a1 + 496) = &v46[32 * v45];
          if (v36) {
            operator delete((void *)v36);
          }
          goto LABEL_88;
        }
        long long v37 = *v20;
        *(void *)(v36 + 16) = *((void *)v20 + 2);
        *(_OWORD *)unint64_t v36 = v37;
        *(_DWORD *)(v36 + 24) = 3;
        uint64_t v38 = (char *)(v36 + 32);
      }
LABEL_88:
      *(void *)(a1 + 488) = v38;
LABEL_89:
      if (LOBYTE(v104[0]))
      {
        uint64_t v56 = v106;
        BOOL v55 = v107;
        if (v106 != v107)
        {
          do
          {
            uint64_t v57 = (void *)v56[31];
            if (v57 != (void *)v56[33]) {
              free(v57);
            }
            v56 += 36;
          }
          while (v56 != v55);
          uint64_t v56 = v106;
        }
        if (v56 != v108) {
          free(v56);
        }
      }
      uint64_t v20 = (long long *)((char *)v20 + 24);
    }
    while (v20 != v80);
  }
  uint64_t v58 = *(void *)(a1 + 848);
  uint64_t v59 = *(std::__shared_weak_count **)(a1 + 856);
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v60 = v78[3];
  if (!v60) {
    goto LABEL_103;
  }
  if ((void *)v60 != v78)
  {
    uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 16))(v60);
LABEL_103:
    uint64_t v98 = (void *)v60;
    goto LABEL_105;
  }
  uint64_t v98 = v97;
  (*(void (**)(void *, void *))(*v78 + 24))(v78, v97);
LABEL_105:
  uint64_t v99 = 0;
  char v100 = 0;
  char v101 = 0;
  float v62 = *v77;
  uint64_t v61 = v77[1];
  int64_t v63 = v61 - (unsigned char *)*v77;
  if (v61 != *v77)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v63 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    uint64_t v64 = (char *)operator new(v63);
    uint64_t v99 = v64;
    char v100 = v64;
    char v101 = &v64[8 * (v63 >> 3)];
    size_t v65 = 24 * ((v63 - 24) / 0x18uLL) + 24;
    memcpy(v64, v62, v65);
    char v100 = &v64[v65];
  }
  *(void *)&long long v102 = v58;
  *((void *)&v102 + 1) = v59;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v103 = a1;
  uint64_t v66 = operator new(0x58uLL);
  long long v67 = v66;
  *uint64_t v66 = &unk_1EF5711D8;
  uint64_t v68 = v66 + 1;
  if (v98)
  {
    if (v98 == v97)
    {
      v66[4] = v68;
      (*(void (**)(void *, void *))(v97[0] + 24))(v97, v68);
    }
    else
    {
      v66[4] = v98;
      uint64_t v98 = 0;
    }
  }
  else
  {
    v66[4] = 0;
  }
  v67[5] = 0;
  v67[6] = 0;
  v67[7] = 0;
  uint64_t v69 = v99;
  uint64_t v70 = v100 - v99;
  if (v100 != v99)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v70 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    uint64_t v71 = (char *)operator new(v100 - v99);
    v67[5] = v71;
    v67[6] = v71;
    v67[7] = &v71[8 * (v70 >> 3)];
    memcpy(v71, v69, 24 * ((v70 - 24) / 0x18uLL) + 24);
    v67[6] = &v71[24 * ((v70 - 24) / 0x18uLL) + 24];
  }
  *((_OWORD *)v67 + 4) = v102;
  long long v102 = 0uLL;
  v67[10] = v103;
  uint64_t v105 = v67;
  if (v69)
  {
    char v100 = v69;
    operator delete(v69);
  }
  if (v98 == v97)
  {
    (*(void (**)(void *))(v97[0] + 32))(v97);
  }
  else if (v98)
  {
    (*(void (**)(void))(*v98 + 40))();
  }
  uint64_t v72 = *(void *)(*(void *)(a1 + 144) + 24);
  char v96 = (char *)(*(uint64_t (**)(void *))(*v67 + 16))(v67);
  gdc::LayerDataManager::requestLayerDataKeys(v72, (uint64_t)__p, v95);
  if (v96 == v95)
  {
    (*(void (**)(char *))(*(void *)v95 + 32))(v95);
  }
  else if (v96)
  {
    (*(void (**)(void))(*(void *)v96 + 40))();
  }
  if (v105 == v104)
  {
    (*(void (**)(void *))(v104[0] + 32))(v104);
    if (v59) {
LABEL_132:
    }
      std::__shared_weak_count::__release_weak(v59);
  }
  else
  {
    if (v105) {
      (*(void (**)(void))(*v105 + 40))();
    }
    if (v59) {
      goto LABEL_132;
    }
  }
  long long v73 = v86[0];
  if (v86[0])
  {
    do
    {
      if (v73[112]) {
        v73[112] = 0;
      }
      uint64_t v75 = *(unsigned char **)v73;
      BOOL v76 = (void *)*((void *)v73 + 4);
      if (v76 != *((void **)v73 + 6)) {
        free(v76);
      }
      operator delete(v73);
      long long v73 = v75;
    }
    while (v75);
  }
  unint64_t v74 = __p[0];
  __p[0] = 0;
  if (v74) {
    operator delete(v74);
  }
}

void sub_1A24F8234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (v57) {
    std::__shared_weak_count::__release_weak(v57);
  }
  std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::~unordered_set[abi:nn180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6 = *((void *)a2 + 13);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *((void *)a2 + 13);
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint8x8_t v10 = *v9;
      if (*v9)
      {
        int v11 = *a2;
        int v12 = *((unsigned __int16 *)a2 + 4);
        uint64_t v13 = (uint64_t *)*((void *)a2 + 10);
        uint64_t v14 = (const void *)*((void *)a2 + 2);
        size_t v15 = *((void *)a2 + 3) - (void)v14;
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v10[1];
            if (v20 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
              {
                uint64_t v21 = v10[4];
                if ((char *)v10[5] - (char *)v21 == v15)
                {
                  long long v40 = v14;
                  uint64_t v42 = v13;
                  uint64_t v22 = v14;
                  size_t v23 = v15;
                  int v24 = memcmp(v21, v22, v15);
                  size_t v15 = v23;
                  uint64_t v14 = v40;
                  uint64_t v13 = v42;
                  if (!v24) {
                    return;
                  }
                }
              }
            }
            else if (((unint64_t)v20 & (v7 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint8x8_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = (unint64_t)v10[1];
          if (v16 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
            {
              uint64_t v17 = v10[4];
              if ((char *)v10[5] - (char *)v17 == v15)
              {
                size_t v18 = v15;
                uint64_t v41 = v13;
                int v19 = memcmp(v17, v14, v15);
                size_t v15 = v18;
                uint64_t v13 = v41;
                if (!v19) {
                  return;
                }
              }
            }
          }
          else
          {
            if (v16 >= v7) {
              v16 %= v7;
            }
            if (v16 != v3) {
              break;
            }
          }
          uint8x8_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  unint64_t v25 = (void *)(a1 + 16);
  uint64_t v26 = operator new(0x80uLL);
  *uint64_t v26 = 0;
  v26[1] = v6;
  *((unsigned char *)v26 + 16) = *(unsigned char *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v26 + 3), a3 + 8);
  *((unsigned char *)v26 + 112) = 0;
  if (*(unsigned char *)(a3 + 96))
  {
    *((_DWORD *)v26 + 29) = *(_DWORD *)(a3 + 100);
    *((unsigned char *)v26 + 112) = 1;
  }
  v26[15] = *(void *)(a3 + 104);
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v7 || (float)(v28 * (float)v7) < v27)
  {
    BOOL v29 = 1;
    if (v7 >= 3) {
      BOOL v29 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v7);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v33) {
      goto LABEL_45;
    }
    if (prime < *(void *)&v33)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v33 < 3uLL || (uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime < *(void *)&v33) {
LABEL_45:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v37 = *(void *)a1;
  uint64_t v38 = *(void **)(*(void *)a1 + 8 * v3);
  if (v38)
  {
    *uint64_t v26 = *v38;
LABEL_69:
    *uint64_t v38 = v26;
    goto LABEL_70;
  }
  *uint64_t v26 = *v25;
  *unint64_t v25 = v26;
  *(void *)(v37 + 8 * v3) = v25;
  if (*v26)
  {
    unint64_t v39 = *(void *)(*v26 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7) {
        v39 %= v7;
      }
    }
    else
    {
      v39 &= v7 - 1;
    }
    uint64_t v38 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
}

void sub_1A24F870C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<gdc::LayerDataRequestKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::LayerDataRequestKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::~$_1(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[3];
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

void std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::operator()(void *a1, char *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1 + 1;
  char v12 = *a2;
  unint64_t v6 = a1 + 5;
  unint64_t v7 = operator new(0x28uLL);
  *unint64_t v7 = &unk_1EF57E4D8;
  v7[1] = &v12;
  void v7[2] = a3;
  v7[3] = v6;
  void v7[4] = v5;
  uint64_t v17 = v7;
  uint8x8_t v8 = (std::__shared_weak_count *)a1[9];
  if (v8)
  {
    unint64_t v9 = std::__shared_weak_count::lock(v8);
    uint64_t v14 = v9;
    if (v9)
    {
      uint8x8_t v10 = v9;
      uint64_t v11 = a1[8];
      uint64_t v13 = v11;
      if (v11)
      {
        std::mutex::lock((std::mutex *)v11);
        if (*(unsigned char *)(v11 + 64))
        {
          uint64_t v15 = a1[10];
          if (!v17)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
            return;
          }
          (*(void (**)(void *, uint64_t *))(*v17 + 48))(v17, &v15);
        }
        std::mutex::unlock((std::mutex *)v11);
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void))(*v17 + 40))();
  }
}

void sub_1A24F8984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  if (a17 == &a14)
  {
    (*(void (**)(uint64_t *))(a14 + 32))(&a14);
    _Unwind_Resume(a1);
  }
  if (a17) {
    (*(void (**)(void))(*a17 + 40))();
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)::{lambda(md::MuninSceneLogic*)#1},std::allocator<md::MuninSceneLogic*>,void ()($_1)>::operator()(void *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t **)result[3];
  unint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  if (v3 != v4)
  {
    uint64_t v5 = *(void *)(*(void *)a2 + 480);
    uint64_t v6 = *(void *)(*(void *)a2 + 488);
    if (v5 != v6)
    {
      do
      {
        uint64_t v7 = *v3;
        uint8x8_t v8 = (unsigned __int8 *)result[1];
        uint64_t v9 = v5;
        do
        {
          if (*(void *)v9 == v7
            && *(unsigned __int8 *)(v9 + 8) == *((unsigned __int8 *)v3 + 8)
            && *(unsigned __int8 *)(v9 + 9) == *((unsigned __int8 *)v3 + 9)
            && *(unsigned __int8 *)(v9 + 10) == *((unsigned __int8 *)v3 + 10)
            && !*(_DWORD *)(v9 + 24))
          {
            unint64_t v10 = *v8;
            if (v10 <= 2) {
              *(_DWORD *)(v9 + 24) = dword_1A29C3B6C[v10];
            }
          }
          v9 += 32;
        }
        while (v9 != v6);
        v3 += 3;
      }
      while (v3 != v4);
    }
  }
  uint64_t v11 = *(void *)(result[4] + 24);
  if (v11)
  {
    uint64_t v12 = result[2];
    char v13 = *(unsigned char *)result[1];
    return (void *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v11 + 48))(v11, &v13, v12);
  }
  return result;
}

__n128 std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)::{lambda(md::MuninSceneLogic*)#1},std::allocator<md::MuninSceneLogic*>,void ()($_1)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57E4D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)::{lambda(md::MuninSceneLogic*)#1},std::allocator<md::MuninSceneLogic*>,void ()($_1)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF57E4D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1::operator() const(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &)::{lambda(md::MuninSceneLogic*)#1},std::allocator<md::MuninSceneLogic*>,void ()($_1)>::~__func()
{
}

void std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::destroy_deallocate(char *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 9);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = __p + 8;
  unint64_t v4 = (void *)*((void *)__p + 5);
  if (v4)
  {
    *((void *)__p + 6) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (char *)*((void *)__p + 4);
  if (v5 == v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 32))(__p + 8);
  }
  else if (v5)
  {
    (*(void (**)(char *))(*(void *)v5 + 40))(v5);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::destroy(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = a1 + 1;
  unint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  uint64_t result = a1[4];
  if ((void *)result == v3)
  {
    uint64_t v7 = *(uint64_t (**)(void *))(*v3 + 32);
    return v7(a1 + 1);
  }
  else if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v6();
  }
  return result;
}

void *std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5711D8;
  return std::__compressed_pair_elem<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,0,false>::__compressed_pair_elem[abi:nn180100]<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)> const&,0ul>(a2 + 1, (void *)(a1 + 8));
}

void *std::__compressed_pair_elem<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,0,false>::__compressed_pair_elem[abi:nn180100]<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)> const&,0ul>(void *a1, void *a2)
{
  unint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], a1);
    }
    else
    {
      a1[3] = (*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    a1[3] = 0;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  uint64_t v6 = (unsigned char *)a2[4];
  uint64_t v5 = (unsigned char *)a2[5];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    uint8x8_t v8 = (char *)operator new(v7);
    a1[4] = v8;
    a1[5] = v8;
    a1[6] = &v8[8 * (v7 >> 3)];
    size_t v9 = 24 * ((v7 - 24) / 0x18uLL) + 24;
    memcpy(v8, v6, v9);
    a1[5] = &v8[v9];
  }
  uint64_t v10 = a2[8];
  a1[7] = a2[7];
  a1[8] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  a1[9] = a2[9];
  return a1;
}

void sub_1A24F8EC8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = (void *)v1[3];
  if (v3 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
    _Unwind_Resume(exception_object);
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x58uLL);
  *uint64_t v2 = &unk_1EF5711D8;
  std::__compressed_pair_elem<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,0,false>::__compressed_pair_elem[abi:nn180100]<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)> const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1A24F8F8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::~__func(void *a1)
{
  *a1 = &unk_1EF5711D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = a1 + 1;
  unint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(a1 + 1);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::MuninSceneLogic::addPreloadViews(std::vector<std::pair<md::mun::ViewId,unsigned int>> const&,std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>)::$_1,std::allocator<std::function<void ()(gdc::RequestCompletionStatus,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&)>>,std::unordered_map<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerData>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<std::pair<gdc::LayerDataRequestKey const,std::shared_ptr<gdc::LayerData>>>> &&>::~__func(void *a1)
{
  *a1 = &unk_1EF5711D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = a1 + 1;
  unint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(a1 + 1);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void md::MuninSceneLogic::cancelViewPreloads(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint8x8_t v35 = 0u;
  int v36 = 1065353216;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = a1 + 51;
    do
    {
      md::mun::MuninMetadataContainer::activePoint((md::mun::MuninMetadataContainer *)v44, a1[21], *(void *)v4);
      if (v44[0])
      {
        unint64_t v7 = *(void *)v4;
        uint64_t v8 = *(unsigned __int8 *)(v4 + 8);
        uint64_t v9 = *(unsigned __int8 *)(v4 + 9);
        unint64_t v10 = *(unsigned __int8 *)(v4 + 10);
        uint64_t v37 = v41;
        uint64_t v38 = v41;
        unint64_t v39 = v41;
        uint64_t v40 = 32;
        unint64_t v42 = 0;
        unint64_t v43 = v49;
        unint64_t v11 = ((unint64_t)v48 << 32) | (v8 << 16) | v9;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v37, v41, (char *)&v43, v44);
        unint64_t v43 = v7;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v37, v38, (char *)&v43, v44);
        unint64_t v43 = v11;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v37, v38, (char *)&v43, v44);
        unint64_t v43 = v10;
        geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v37, v38, (char *)&v43, v44);
        uint64_t v12 = (unsigned __int8 *)v37;
        unint64_t v13 = v38 - (unsigned char *)v37;
        if (v38 == v37)
        {
          unint64_t v14 = 0;
        }
        else
        {
          unint64_t v14 = 0;
          if (v13 <= 1) {
            unint64_t v13 = 1;
          }
          do
          {
            unsigned int v15 = *v12++;
            v14 ^= (v14 << 6) + (v14 >> 2) - 0x61C8864680B583EBLL + v15;
            --v13;
          }
          while (v13);
        }
        unint64_t v42 = v14;
        gdc::LayerDataRequestKey::LayerDataRequestKey(v30, 0, 0x24u, (uint64_t)&v37, 2147483646);
        if (v37 != v39) {
          free(v37);
        }
        std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey>((uint64_t)__p, v30, (uint64_t)v30);
        if (v33) {
          char v33 = 0;
        }
        if (v31 != v32) {
          free(v31);
        }
      }
      std::__hash_table<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::hash<geo::handle<md::AssociationItem>>,std::equal_to<geo::handle<md::AssociationItem>>,true>,std::__unordered_map_equal<geo::handle<md::AssociationItem>,std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>,std::equal_to<geo::handle<md::AssociationItem>>,std::hash<geo::handle<md::AssociationItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::AssociationItem>,md::Counter>>>::__erase_unique<geo::handle<md::AssociationItem>>(v6, *(void *)v4);
      uint64_t v16 = a1[60];
      uint64_t v17 = a1[61];
      if (v16 != v17)
      {
        unint64_t v18 = *(void *)v4;
        do
        {
          if (*(void *)v16 == v18
            && *(unsigned __int8 *)(v16 + 8) == *(unsigned __int8 *)(v4 + 8)
            && *(unsigned __int8 *)(v16 + 9) == *(unsigned __int8 *)(v4 + 9)
            && *(unsigned __int8 *)(v16 + 10) == *(unsigned __int8 *)(v4 + 10)
            && !*(_DWORD *)(v16 + 24))
          {
            *(_DWORD *)(v16 + 24) = 2;
          }
          v16 += 32;
        }
        while (v16 != v17);
      }
      if (v44[0])
      {
        int v19 = v45;
        uint64_t v20 = v46;
        if (v45 != v46)
        {
          do
          {
            uint64_t v21 = (void *)v19[31];
            if (v21 != (void *)v19[33]) {
              free(v21);
            }
            v19 += 36;
          }
          while (v19 != v20);
          int v19 = v45;
        }
        if (v19 != v47) {
          free(v19);
        }
      }
      v4 += 16;
    }
    while (v4 != a3);
    uint64_t v22 = (void **)v35[0];
    if (v35[0])
    {
      uint64_t v23 = *(void *)(a1[18] + 24);
      do
      {
        int v24 = *(gdc::LayerDataSource ***)(v23 + 8);
        unint64_t v25 = *(unsigned __int16 **)(v23 + 16);
        if (v24 != (gdc::LayerDataSource **)v25)
        {
          while (*((unsigned __int16 *)v22 + 12) != *(unsigned __int16 *)v24)
          {
            v24 += 3;
            if (v24 == (gdc::LayerDataSource **)v25) {
              goto LABEL_37;
            }
          }
        }
        if (v24 != (gdc::LayerDataSource **)v25) {
          gdc::LayerDataSource::cancelLayerDataRequest(v24[1], (const gdc::LayerDataRequestKey *)(v22 + 2));
        }
LABEL_37:
        uint64_t v22 = (void **)*v22;
      }
      while (v22);
      uint64_t v26 = v35[0];
      if (v35[0])
      {
        do
        {
          if (v26[112]) {
            v26[112] = 0;
          }
          float v28 = *(unsigned char **)v26;
          BOOL v29 = (void *)*((void *)v26 + 4);
          if (v29 != *((void **)v26 + 6)) {
            free(v29);
          }
          operator delete(v26);
          uint64_t v26 = v28;
        }
        while (v28);
      }
    }
    float v27 = __p[0];
    __p[0] = 0;
    if (v27) {
      operator delete(v27);
    }
  }
}

void sub_1A24F94E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a11 != a13) {
    free(a11);
  }
  geo::optional<md::mun::CollectionPoint>::~optional((uint64_t)&a39);
  std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::~unordered_set[abi:nn180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void md::MuninSceneLogic::cancelAllViewPreloads(md::MuninSceneLogic *this)
{
  if (*((void *)this + 54))
  {
    uint64_t v2 = (void *)*((void *)this + 53);
    if (v2)
    {
      do
      {
        unint64_t v3 = (void *)*v2;
        operator delete(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    *((void *)this + 53) = 0;
    uint64_t v4 = *((void *)this + 52);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*((void *)this + 51) + 8 * i) = 0;
    }
    *((void *)this + 54) = 0;
  }
  uint64_t v6 = *(uint64_t **)(*(void *)(*((void *)this + 18) + 24) + 64);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  std::vector<gdc::LayerDataRequestKey>::reserve((uint64_t)&v40, v6[6]);
  unint64_t v7 = (uint64_t *)v6[5];
  if (v7)
  {
    do
    {
      LOBYTE(v30) = *((unsigned char *)v7 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v31, (uint64_t)(v7 + 3));
      char v34 = 0;
      if (*((unsigned char *)v7 + 112))
      {
        int v35 = *((_DWORD *)v7 + 29);
        char v34 = 1;
      }
      uint64_t v36 = v7[15];
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      std::string __p = 0;
      uint64_t v9 = (unsigned char *)v7[16];
      uint64_t v8 = (unsigned char *)v7[17];
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0) {
          abort();
        }
        std::string __p = operator new(v8 - v9);
        uint64_t v38 = __p;
        unint64_t v11 = (char *)__p + 8 * (v10 >> 3);
        unint64_t v39 = v11;
        memcpy(__p, v9, v10);
        uint64_t v38 = v11;
      }
      uint64_t v12 = v41;
      if ((unint64_t)v41 >= v42)
      {
        unint64_t v13 = std::vector<gdc::LayerDataRequestKey>::__push_back_slow_path<gdc::LayerDataRequestKey const&>((void **)&v40, (uint64_t)&v30);
      }
      else
      {
        *uint64_t v41 = v30;
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v12 + 8), (uint64_t)&v31);
        v12[96] = 0;
        if (v34)
        {
          *((_DWORD *)v12 + 25) = v35;
          v12[96] = 1;
        }
        *((void *)v12 + 13) = v36;
        unint64_t v13 = v12 + 112;
      }
      uint64_t v41 = v13;
      if (__p)
      {
        uint64_t v38 = __p;
        operator delete(__p);
      }
      if (v34) {
        char v34 = 0;
      }
      if (v32 != v33) {
        free(v32);
      }
      unint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  else
  {
    unint64_t v13 = v41;
  }
  unint64_t v14 = v40;
  if (v40 != v13)
  {
    unsigned int v15 = v40;
    do
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      gdc::LayerDataRequestTracker::_processKey(v6, v15, &v30, 1);
      v15 += 112;
    }
    while (v15 != v13);
  }
  if (v6[6])
  {
    uint64_t v16 = (void *)v6[5];
    if (v16)
    {
      do
      {
        unint64_t v25 = (void *)*v16;
        uint64_t v26 = (void *)v16[16];
        if (v26)
        {
          v16[17] = v26;
          operator delete(v26);
        }
        if (*((unsigned char *)v16 + 112)) {
          *((unsigned char *)v16 + 112) = 0;
        }
        float v27 = (void *)v16[4];
        if (v27 != (void *)v16[6]) {
          free(v27);
        }
        operator delete(v16);
        uint64_t v16 = v25;
      }
      while (v25);
    }
    v6[5] = 0;
    uint64_t v17 = v6[4];
    if (v17)
    {
      for (uint64_t j = 0; j != v17; ++j)
        *(void *)(v6[3] + 8 * j) = 0;
    }
    v6[6] = 0;
  }
  if (v6[2])
  {
    uint64_t v19 = *v6;
    uint64_t v20 = (uint64_t *)v6[1];
    uint64_t v21 = *v20;
    *(void *)(v21 + 8) = *(void *)(*v6 + 8);
    **(void **)(v19 + 8) = v21;
    v6[2] = 0;
    if (v20 != v6)
    {
      do
      {
        uint64_t v22 = (uint64_t *)v20[1];
        std::__destroy_at[abi:nn180100]<gdc::LayerDataRequestTracker::RequestStatus,0>(v20 + 2);
        operator delete(v20);
        uint64_t v20 = v22;
      }
      while (v22 != v6);
      unint64_t v14 = v40;
    }
  }
  if (v14)
  {
    for (k = v41; k != v14; k -= 112)
    {
      if (*(k - 16)) {
        *(k - 16) = 0;
      }
      int v24 = (void *)*((void *)k - 12);
      if (v24 != *((void **)k - 10)) {
        free(v24);
      }
    }
    operator delete(v14);
  }
  uint64_t v28 = *((void *)this + 60);
  for (uint64_t m = *((void *)this + 61); v28 != m; v28 += 32)
  {
    if (!*(_DWORD *)(v28 + 24)) {
      *(_DWORD *)(v28 + 24) = 2;
    }
  }
}

void md::MuninSceneLogic::addSceneEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  switch(*(unsigned char *)a2)
  {
    case 0:
      *(std::chrono::steady_clock::time_point *)(a1 + 512) = std::chrono::steady_clock::now();
      break;
    case 1:
      if (*(unsigned char *)(a2 + 128)) {
        BOOL v4 = *(unsigned char *)(a2 + 160) == 0;
      }
      else {
        BOOL v4 = 1;
      }
      if (!v4)
      {
        uint64_t v5 = *(void *)(*(void *)(a1 + 120) + 8);
        v62[0] = &unk_1EF571190;
        v62[1] = a1;
        int64_t v63 = v62;
        geo::TaskQueue::barrierAsync(&v60, v5, v62);
        uint64_t v6 = v61;
        if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        if (v63 == v62)
        {
          (*(void (**)(void *))(v62[0] + 32))(v62);
        }
        else if (v63)
        {
          (*(void (**)(void))(*v63 + 40))();
        }
      }
      break;
    case 4:
    case 6:
      *(unsigned char *)(a1 + 504) = 1;
      break;
    default:
      break;
  }
  unint64_t v7 = *(void *)(a1 + 568);
  unint64_t v8 = *(void *)(a1 + 576);
  if (v7 < v8)
  {
    *(unsigned char *)unint64_t v7 = *(unsigned char *)a2;
    *(unsigned char *)(v7 + 8) = 0;
    if (*(unsigned char *)(a2 + 8))
    {
      *(unsigned char *)(v7 + 16) = *(unsigned char *)(a2 + 16);
      long long v9 = *(_OWORD *)(a2 + 24);
      *(void *)(v7 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(v7 + 24) = v9;
      long long v10 = *(_OWORD *)(a2 + 48);
      *(void *)(v7 + 64) = *(void *)(a2 + 64);
      *(_OWORD *)(v7 + 48) = v10;
      *(void *)(v7 + 72) = *(void *)(a2 + 72);
      long long v11 = *(_OWORD *)(a2 + 80);
      long long v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(v7 + 112) = v12;
      *(_OWORD *)(v7 + 80) = v11;
      *(unsigned char *)(v7 + 8) = 1;
    }
    *(unsigned char *)(v7 + 128) = 0;
    if (*(unsigned char *)(a2 + 128))
    {
      *(void *)(v7 + 136) = 0;
      *(void *)(v7 + 144) = 0;
      *(void *)(v7 + 152) = 0;
      *(_OWORD *)(v7 + 136) = *(_OWORD *)(a2 + 136);
      *(void *)(v7 + 152) = *(void *)(a2 + 152);
      *(void *)(a2 + 144) = 0;
      *(void *)(a2 + 152) = 0;
      *(void *)(a2 + 136) = 0;
      *(unsigned char *)(v7 + 160) = *(unsigned char *)(a2 + 160);
      *(unsigned char *)(v7 + 128) = 1;
    }
    *(unsigned char *)(v7 + 168) = 0;
    if (*(unsigned char *)(a2 + 168))
    {
      *(void *)(v7 + 176) = 0;
      *(void *)(v7 + 184) = 0;
      *(void *)(v7 + 192) = 0;
      *(_OWORD *)(v7 + 176) = *(_OWORD *)(a2 + 176);
      *(void *)(v7 + 192) = *(void *)(a2 + 192);
      *(void *)(a2 + 176) = 0;
      *(void *)(a2 + 184) = 0;
      *(void *)(a2 + 192) = 0;
      long long v13 = *(_OWORD *)(a2 + 200);
      *(void *)(v7 + 216) = *(void *)(a2 + 216);
      *(_OWORD *)(v7 + 200) = v13;
      long long v14 = *(_OWORD *)(a2 + 224);
      *(void *)(v7 + 240) = *(void *)(a2 + 240);
      *(_OWORD *)(v7 + 224) = v14;
      *(void *)(v7 + 248) = *(void *)(a2 + 248);
      *(_OWORD *)(v7 + 256) = *(_OWORD *)(a2 + 256);
      *(unsigned char *)(v7 + 168) = 1;
    }
    unsigned int v15 = (unsigned char *)(v7 + 272);
    goto LABEL_81;
  }
  uint64_t v16 = *(void *)(a1 + 560);
  unint64_t v17 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v7 - v16) >> 4);
  unint64_t v18 = v17 + 1;
  if (v17 + 1 > 0xF0F0F0F0F0F0F0) {
    abort();
  }
  unint64_t v19 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v8 - v16) >> 4);
  if (2 * v19 > v18) {
    unint64_t v18 = 2 * v19;
  }
  if (v19 >= 0x78787878787878) {
    unint64_t v20 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 > 0xF0F0F0F0F0F0F0) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = (char *)operator new(272 * v20);
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v22 = &v21[272 * v17];
  *uint64_t v22 = *(unsigned char *)a2;
  v22[8] = 0;
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v23 = &v21[272 * v17];
    v23[16] = *(unsigned char *)(a2 + 16);
    *(_OWORD *)(v23 + 24) = *(_OWORD *)(a2 + 24);
    *((void *)v23 + 5) = *(void *)(a2 + 40);
    *((_OWORD *)v23 + 3) = *(_OWORD *)(a2 + 48);
    *((void *)v23 + 8) = *(void *)(a2 + 64);
    *((void *)v23 + 9) = *(void *)(a2 + 72);
    long long v24 = *(_OWORD *)(a2 + 96);
    *((_OWORD *)v23 + 5) = *(_OWORD *)(a2 + 80);
    *((_OWORD *)v23 + 6) = v24;
    *((_OWORD *)v23 + 7) = *(_OWORD *)(a2 + 112);
    v22[8] = 1;
  }
  unint64_t v25 = &v21[272 * v17];
  v25[128] = 0;
  uint64_t v26 = v25 + 128;
  if (*(unsigned char *)(a2 + 128))
  {
    float v27 = &v21[272 * v17];
    *(_OWORD *)(v27 + 136) = *(_OWORD *)(a2 + 136);
    *((void *)v27 + 19) = *(void *)(a2 + 152);
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 152) = 0;
    v27[160] = *(unsigned char *)(a2 + 160);
    *uint64_t v26 = 1;
  }
  uint64_t v28 = &v21[272 * v17];
  v28[168] = 0;
  BOOL v29 = v28 + 168;
  if (*(unsigned char *)(a2 + 168))
  {
    uint64_t v30 = &v21[272 * v17];
    *((_OWORD *)v30 + 11) = *(_OWORD *)(a2 + 176);
    *((void *)v30 + 24) = *(void *)(a2 + 192);
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 192) = 0;
    *(_OWORD *)(v30 + 200) = *(_OWORD *)(a2 + 200);
    *((void *)v30 + 27) = *(void *)(a2 + 216);
    *((_OWORD *)v30 + 14) = *(_OWORD *)(a2 + 224);
    *((void *)v30 + 30) = *(void *)(a2 + 240);
    *((void *)v30 + 31) = *(void *)(a2 + 248);
    *((_OWORD *)v30 + 16) = *(_OWORD *)(a2 + 256);
    unsigned char *v29 = 1;
  }
  uint64_t v31 = &v21[272 * v20];
  unsigned int v15 = v22 + 272;
  unint64_t v32 = *(char **)(a1 + 568);
  char v33 = *(char **)(a1 + 560);
  if (v32 == v33)
  {
    *(void *)(a1 + 560) = v22;
    *(void *)(a1 + 568) = v15;
    *(void *)(a1 + 576) = v31;
    if (!v32) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  uint64_t v34 = 0;
  do
  {
    int v35 = &v22[v34];
    uint64_t v36 = &v32[v34];
    v22[v34 - 272] = v32[v34 - 272];
    uint64_t v37 = &v22[v34 - 264];
    *uint64_t v37 = 0;
    if (v32[v34 - 264])
    {
      *(v35 - 256) = *(v36 - 256);
      long long v38 = *(_OWORD *)(v36 - 248);
      *((void *)v35 - 29) = *((void *)v36 - 29);
      *(_OWORD *)(v35 - 248) = v38;
      long long v39 = *((_OWORD *)v36 - 14);
      *((void *)v35 - 26) = *((void *)v36 - 26);
      *((_OWORD *)v35 - 14) = v39;
      *((void *)v35 - 25) = *((void *)v36 - 25);
      long long v40 = *((_OWORD *)v36 - 12);
      long long v41 = *((_OWORD *)v36 - 10);
      *((_OWORD *)v35 - 11) = *((_OWORD *)v36 - 11);
      *((_OWORD *)v35 - 10) = v41;
      *((_OWORD *)v35 - 12) = v40;
      *uint64_t v37 = 1;
    }
    *(v35 - 144) = 0;
    if (*(v36 - 144))
    {
      unint64_t v42 = &v22[v34];
      unint64_t v43 = &v32[v34];
      *((void *)v42 - 17) = 0;
      *((void *)v42 - 16) = 0;
      *((void *)v42 - 15) = 0;
      *(_OWORD *)(v42 - 136) = *(_OWORD *)&v32[v34 - 136];
      *((void *)v42 - 15) = *(void *)&v32[v34 - 120];
      *((void *)v43 - 16) = 0;
      *((void *)v43 - 15) = 0;
      *((void *)v43 - 17) = 0;
      *(v42 - 112) = v32[v34 - 112];
      *(v35 - 144) = 1;
    }
    uint64_t v44 = &v22[v34];
    unint64_t v45 = &v32[v34];
    v22[v34 - 104] = 0;
    if (v32[v34 - 104])
    {
      *((void *)v44 - 12) = 0;
      *((void *)v44 - 11) = 0;
      *((void *)v44 - 10) = 0;
      *((_OWORD *)v44 - 6) = *((_OWORD *)v45 - 6);
      *((void *)v44 - 10) = *((void *)v45 - 10);
      *((void *)v45 - 12) = 0;
      *((void *)v45 - 11) = 0;
      *((void *)v45 - 10) = 0;
      long long v46 = *(_OWORD *)(v45 - 72);
      *((void *)v44 - 7) = *((void *)v45 - 7);
      *(_OWORD *)(v44 - 72) = v46;
      long long v47 = *((_OWORD *)v45 - 3);
      *((void *)v44 - 4) = *((void *)v45 - 4);
      *((_OWORD *)v44 - 3) = v47;
      *((void *)v44 - 3) = *((void *)v45 - 3);
      *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
      *(v44 - 104) = 1;
    }
    v34 -= 272;
  }
  while (&v32[v34] != v33);
  unsigned int v48 = *(char **)(a1 + 560);
  unint64_t v32 = *(char **)(a1 + 568);
  *(void *)(a1 + 560) = &v22[v34];
  *(void *)(a1 + 568) = v15;
  *(void *)(a1 + 576) = v31;
  if (v32 != v48)
  {
    do
    {
      if (*(v32 - 104))
      {
        unsigned __int16 v49 = (void *)*((void *)v32 - 12);
        if (v49)
        {
          *((void *)v32 - 11) = v49;
          operator delete(v49);
        }
        *(v32 - 104) = 0;
      }
      if (*(v32 - 144))
      {
        uint64_t v50 = *((void *)v32 - 17);
        if (v50)
        {
          uint64_t v51 = *((void *)v32 - 16);
          uint64_t v52 = (void *)*((void *)v32 - 17);
          if (v51 != v50)
          {
            do
            {
              long long v53 = *(void **)(v51 - 80);
              if (v53 != *(void **)(v51 - 64)) {
                free(v53);
              }
              long long v54 = *(void **)(v51 - 104);
              if (v54)
              {
                *(void *)(v51 - 96) = v54;
                operator delete(v54);
              }
              BOOL v55 = *(void **)(v51 - 128);
              if (v55)
              {
                *(void *)(v51 - 120) = v55;
                operator delete(v55);
              }
              uint64_t v56 = v51 - 1992;
              uint64_t v57 = *(void **)(v51 - 1904);
              uint64_t v58 = *(void **)(v51 - 1896);
              if (v57 != v58)
              {
                do
                {
                  uint64_t v59 = (void *)v57[31];
                  if (v59 != (void *)v57[33]) {
                    free(v59);
                  }
                  v57 += 36;
                }
                while (v57 != v58);
                uint64_t v57 = *(void **)(v51 - 1904);
              }
              if (v57 != *(void **)(v51 - 1888)) {
                free(v57);
              }
              v51 -= 1992;
            }
            while (v56 != v50);
            uint64_t v52 = (void *)*((void *)v32 - 17);
          }
          *((void *)v32 - 16) = v50;
          operator delete(v52);
        }
        *(v32 - 144) = 0;
      }
      if (*(v32 - 264)) {
        *(v32 - 264) = 0;
      }
      v32 -= 272;
    }
    while (v32 != v48);
    unint64_t v32 = v48;
  }
  if (v32) {
LABEL_80:
  }
    operator delete(v32);
LABEL_81:
  *(void *)(a1 + 568) = v15;
}

void sub_1A24F9F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MuninSceneLogic::addSceneEvent(md::MuninSceneEvent &&)::$_0,std::allocator<md::MuninSceneEvent &&>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 144);
  uint64_t v2 = *(gdc::LayerDataStore ***)(v1 + 80);
  for (uint64_t i = *(unsigned __int16 **)(v1 + 88); v2 != (gdc::LayerDataStore **)i; v2 += 2)
  {
    unsigned int v5 = *(unsigned __int16 *)v2 - 11;
    BOOL v6 = v5 > 0x3D;
    uint64_t v7 = (1 << v5) & 0x3000000000000003;
    if (v6 || v7 == 0) {
      double v4 = 31457280.0;
    }
    else {
      double v4 = 41943040.0;
    }
    gdc::LayerDataStore::purge(v2[1], 0, (unint64_t)(v4 * *(double *)(v1 + 384)));
  }
  gdc::ResourceManager::cleanupResources(*(gdc::ResourceManager **)(*(void *)(v1 + 24) + 56));
  id v9 = +[VKSharedResourcesManager sharedResources];
  [v9 prune:1];
}

void sub_1A24FA0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::MuninSceneLogic::addSceneEvent(md::MuninSceneEvent &&)::$_0,std::allocator<md::MuninSceneEvent &&>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571190;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::MuninSceneLogic::addSceneEvent(md::MuninSceneEvent &&)::$_0,std::allocator<md::MuninSceneEvent &&>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF571190;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MuninSceneLogic::addSceneEvent(md::MuninSceneEvent &&)::$_0,std::allocator<md::MuninSceneEvent &&>,void ()(void)>::~__func()
{
}

void sub_1A24FB284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a13);
  if (a17)
  {
    a18 = a17;
    (*(void (**)(void))(*(void *)a20 + 40))();
  }
  if (a21)
  {
    a22 = a21;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a24 + 40))(a24, a21, a23 - a21);
  }
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)(v24 - 96));
  _Unwind_Resume(a1);
}

void sub_1A24FBD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a39);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)(v39 - 240));
  _Unwind_Resume(a1);
}

void sub_1A24FBD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _computeScaleRotationTranslation(uint64_t a1, unint64_t a2, float *a3, float *a4, float *a5)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  bzero(v90, 0x40uLL);
  bzero(v89, 0x600uLL);
  if (a2)
  {
    uint64_t v7 = 0;
    uint64_t v86 = a1;
    unint64_t v87 = a2;
    do
    {
      uint64_t v9 = v7++;
      float32x2_t v10 = *(float32x2_t *)(a1 + 8 * v9);
      if (v7 == a2) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v9 + 1;
      }
      float32x2_t v12 = vsub_f32(*(float32x2_t *)(a1 + 8 * v11), v10);
      if (v12.f32[1] >= 0.0)
      {
        if (v12.f32[1] == 0.0) {
          v12.i32[0] = fabsf(v12.f32[0]);
        }
      }
      else
      {
        float32x2_t v12 = vneg_f32(v12);
      }
      float32x2_t v88 = v12;
      float v13 = atan2f(v12.f32[1], v12.f32[0]);
      if (v13 < 0.0 || v13 >= 3.14159265) {
        NSLog((NSString *)@"problem computing angle histogram for building roof, quitting");
      }
      unint64_t v14 = (unint64_t)(float)(v13 * 10.186);
      ++v90[v14];
      unsigned int v15 = &v89[3 * v14];
      uint64_t v16 = (float32x2_t *)*((void *)v15 + 1);
      unint64_t v17 = *((void *)v15 + 2);
      if ((unint64_t)v16 < v17)
      {
        *uint64_t v16 = v88;
        unint64_t v8 = v16 + 1;
      }
      else
      {
        unint64_t v18 = *(float32x2_t **)v15;
        uint64_t v19 = (uint64_t)v16 - *(void *)v15;
        uint64_t v20 = v19 >> 3;
        unint64_t v21 = (v19 >> 3) + 1;
        float32x2_t v22 = v88;
        if (v21 >> 61) {
          abort();
        }
        uint64_t v23 = v17 - (void)v18;
        if (v23 >> 2 > v21) {
          unint64_t v21 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v21;
        }
        if (v24)
        {
          if (v24 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v25 = operator new(8 * v24);
          float32x2_t v22 = v88;
        }
        else
        {
          unint64_t v25 = 0;
        }
        uint64_t v26 = (float32x2_t *)&v25[8 * v20];
        *uint64_t v26 = v22;
        unint64_t v8 = v26 + 1;
        if (v16 == v18)
        {
          unint64_t v18 = v16;
        }
        else
        {
          unint64_t v27 = (char *)&v16[-1] - (char *)v18;
          if (v27 < 0x58) {
            goto LABEL_81;
          }
          if ((unint64_t)((char *)v16 - &v25[v19]) < 0x20) {
            goto LABEL_81;
          }
          uint64_t v28 = (v27 >> 3) + 1;
          BOOL v29 = &v25[8 * v20 - 16];
          uint64_t v30 = v16 - 2;
          uint64_t v31 = v28 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v32 = *(_OWORD *)v30->f32;
            *(v29 - 1) = *(_OWORD *)v30[-2].f32;
            _OWORD *v29 = v32;
            v29 -= 2;
            v30 -= 4;
            v31 -= 4;
          }
          while (v31);
          v26 -= v28 & 0x3FFFFFFFFFFFFFFCLL;
          v16 -= v28 & 0x3FFFFFFFFFFFFFFCLL;
          if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_81:
            do
            {
              float32x2_t v33 = v16[-1];
              --v16;
              v26[-1] = v33;
              --v26;
            }
            while (v16 != v18);
            unint64_t v18 = *(float32x2_t **)v15;
          }
        }
        *(void *)unsigned int v15 = v26;
        *((void *)v15 + 2) = &v25[8 * v24];
        if (v18) {
          operator delete(v18);
        }
        a1 = v86;
        a2 = v87;
      }
      *((void *)v15 + 1) = v8;
    }
    while (v7 != a2);
  }
  unint64_t v34 = 0;
  for (uint64_t i = 1; i != 64; ++i)
  {
    if (v90[i] > v90[v34]) {
      unint64_t v34 = i;
    }
  }
  uint64_t v36 = v89[3 * v34];
  float v37 = 0.0;
  float v38 = 0.0;
  uint64_t v39 = v89[3 * v34 + 1] - v36;
  if (v39)
  {
    unint64_t v40 = v39 >> 3;
    if (v40 <= 1) {
      unint64_t v40 = 1;
    }
    if (v40 <= 7)
    {
      unint64_t v41 = 0;
LABEL_51:
      unint64_t v47 = v40 - v41;
      unsigned int v48 = (float32x2_t *)(v36 + 8 * v41);
      do
      {
        float32x2_t v49 = *v48++;
        float v38 = fmaxf(v38, sqrtf(vaddv_f32(vmul_f32(v49, v49))));
        --v47;
      }
      while (v47);
      goto LABEL_53;
    }
    unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = (const float *)(v36 + 32);
    float32x4_t v43 = 0uLL;
    unint64_t v44 = v40 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v45 = 0uLL;
    do
    {
      long long v46 = v42 - 8;
      float32x4x2_t v93 = vld2q_f32(v46);
      float32x4x2_t v96 = vld2q_f32(v42);
      float32x4_t v43 = vmaxnmq_f32(v43, vsqrtq_f32(vmlaq_f32(vmulq_f32(v93.val[0], v93.val[0]), v93.val[1], v93.val[1])));
      float32x4_t v45 = vmaxnmq_f32(v45, vsqrtq_f32(vmlaq_f32(vmulq_f32(v96.val[0], v96.val[0]), v96.val[1], v96.val[1])));
      v42 += 16;
      v44 -= 8;
    }
    while (v44);
    float v38 = vmaxnmvq_f32(vmaxnmq_f32(v43, v45));
    if (v40 != v41) {
      goto LABEL_51;
    }
  }
LABEL_53:
  *a3 = v38;
  float v50 = (float)v34 * 0.098175;
  float v51 = dbl_1A28FF460[v50 < 1.57079633] + v50;
  float v52 = v51 * 10.186;
  *a4 = v50;
  uint64_t v53 = v89[3 * (unint64_t)v52];
  uint64_t v54 = v89[3 * (unint64_t)v52 + 1] - v53;
  if (!v54) {
    goto LABEL_63;
  }
  unint64_t v55 = v54 >> 3;
  if (v55 <= 1) {
    unint64_t v55 = 1;
  }
  if (v55 <= 7)
  {
    unint64_t v56 = 0;
    float v37 = 0.0;
LABEL_61:
    unint64_t v62 = v55 - v56;
    int64_t v63 = (float32x2_t *)(v53 + 8 * v56);
    do
    {
      float32x2_t v64 = *v63++;
      float v37 = fmaxf(v37, sqrtf(vaddv_f32(vmul_f32(v64, v64))));
      --v62;
    }
    while (v62);
    goto LABEL_63;
  }
  unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v57 = (const float *)(v53 + 32);
  float32x4_t v58 = 0uLL;
  unint64_t v59 = v55 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v60 = 0uLL;
  do
  {
    uint64_t v61 = v57 - 8;
    float32x4x2_t v92 = vld2q_f32(v61);
    float32x4x2_t v94 = vld2q_f32(v57);
    float32x4_t v58 = vmaxnmq_f32(v58, vsqrtq_f32(vmlaq_f32(vmulq_f32(v92.val[0], v92.val[0]), v92.val[1], v92.val[1])));
    float32x4_t v60 = vmaxnmq_f32(v60, vsqrtq_f32(vmlaq_f32(vmulq_f32(v94.val[0], v94.val[0]), v94.val[1], v94.val[1])));
    v57 += 16;
    v59 -= 8;
  }
  while (v59);
  float v37 = vmaxnmvq_f32(vmaxnmq_f32(v58, v60));
  if (v55 != v56) {
    goto LABEL_61;
  }
LABEL_63:
  a3[1] = v37;
  if (a2)
  {
    if (a2 > 7)
    {
      unint64_t v65 = a2 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v69 = (const float *)(a1 + 32);
      float32x4_t v70 = 0uLL;
      unint64_t v71 = a2 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v72 = 0uLL;
      float32x4_t v73 = 0uLL;
      float32x4_t v74 = 0uLL;
      do
      {
        uint64_t v75 = v69 - 8;
        float32x4x2_t v95 = vld2q_f32(v75);
        float32x4x2_t v97 = vld2q_f32(v69);
        float32x4_t v73 = vaddq_f32(v95.val[0], v73);
        float32x4_t v74 = vaddq_f32(v97.val[0], v74);
        float32x4_t v70 = vaddq_f32(v95.val[1], v70);
        float32x4_t v72 = vaddq_f32(v97.val[1], v72);
        v69 += 16;
        v71 -= 8;
      }
      while (v71);
      float32x4_t v76 = vaddq_f32(v74, v73);
      float v67 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v76, v76));
      float32x4_t v77 = vaddq_f32(v72, v70);
      float v66 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v77, v77));
      uint64_t v68 = a5;
      if (v65 == a2) {
        goto LABEL_72;
      }
    }
    else
    {
      unint64_t v65 = 0;
      float v66 = 0.0;
      float v67 = 0.0;
      uint64_t v68 = a5;
    }
    unint64_t v78 = a2 - v65;
    uint64_t v79 = (float *)(a1 + 8 * v65 + 4);
    do
    {
      float v67 = *(v79 - 1) + v67;
      float v80 = *v79;
      v79 += 2;
      float v66 = v80 + v66;
      --v78;
    }
    while (v78);
  }
  else
  {
    float v67 = 0.0;
    float v66 = 0.0;
    uint64_t v68 = a5;
  }
LABEL_72:
  *uint64_t v68 = v67 / (float)a2;
  v68[1] = v66 / (float)a2;
  uint64_t v81 = 192;
  do
  {
    uint64_t v82 = (void *)v89[v81 - 3];
    if (v82)
    {
      v89[v81 - 2] = v82;
      operator delete(v82);
    }
    v81 -= 3;
  }
  while (v81 * 8);
}

void sub_1A24FC318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v18 = 1536;
  while (1)
  {
    uint64_t v19 = *(void **)(&a17 + v18 - 24);
    if (v19)
    {
      *(void *)(&a17 + v18 - 16) = v19;
      operator delete(v19);
    }
    v18 -= 24;
    if (!v18) {
      _Unwind_Resume(exception_object);
    }
  }
}

void _transformAndAddMesh(uint64_t a1, uint64_t a2, int16x8_t *a3, unint64_t a4, float *a5, int *a6, uint64_t a7, __int16 a8, float a9, uint64_t a10, float *a11, float *a12, float *a13)
{
  uint64_t v14 = a2;
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *((void *)a6 + 1);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = **(void **)(v16 + 64);
  unint64_t v18 = *(void *)(v17 + 8);
  unint64_t v19 = (*(void *)(v17 + 48) - *(void *)(v17 + 40)) / v18;
  uint64_t v20 = v19 + a2;
  unint64_t v125 = a4;
  if (v19 + a2 >= 0x10000) {
    ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>::_allocateNewMesh();
  }
  int v21 = *a6;
  unint64_t v22 = v18 * v20;
  uint64_t v23 = *(void *)(v17 + 72);
  unint64_t v24 = *(void *)(v17 + 80) - v23;
  if (v22 != v24)
  {
    if (v22 <= v24)
    {
      if (v22 < v24) {
        *(void *)(v17 + 80) = v23 + v22;
      }
    }
    else
    {
      int v25 = *a6;
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v17 + 72, v22 - v24);
      int v21 = v25;
      a4 = v125;
    }
    uint64_t v26 = *(std::__shared_weak_count **)(v17 + 32);
    *(void *)(v17 + 24) = 0;
    *(void *)(v17 + 32) = 0;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int v27 = v21;
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      int v21 = v27;
      a4 = v125;
    }
    *(void *)(v17 + 120) = 0;
    *(_DWORD *)(v17 + 112) = 0;
    uint64_t v28 = *(void *)(v17 + 80) - *(void *)(v17 + 72);
    *(void *)(v17 + 40) = 0;
    *(void *)(v17 + 48) = v28;
    *(void *)(v17 + 56) = 0;
    *(void *)(v17 + 64) = v28;
    uint64_t v17 = **(void **)(v16 + 64);
  }
  uint64_t v29 = 0;
  long long v132 = 0uLL;
  uint64_t v30 = *(void *)(v17 + 8);
  uint64_t v31 = v30 * v19;
  uint64_t v32 = v30 * v20;
  *(void *)&long long v33 = 0;
  *((void *)&v33 + 1) = v17;
  if (v32 != v31) {
    uint64_t v29 = *(void *)(v17 + 72) + v31;
  }
  unsigned int v34 = v15 - v21;
  long long v132 = v33;
  unint64_t v133 = v31;
  unint64_t v134 = v32;
  uint64_t v136 = v29;
  __int16 v135 = 1;
  uint64_t v35 = *(void *)(v16 + 96);
  unint64_t v36 = *(void *)(v35 + 8);
  unint64_t v37 = (*(void *)(v35 + 48) - *(void *)(v35 + 40)) / v36;
  unint64_t v123 = v37 + a4;
  unint64_t v38 = v36 * (v37 + a4);
  uint64_t v39 = *(void *)(v35 + 72);
  unint64_t v40 = *(void *)(v35 + 80) - v39;
  if (v38 != v40)
  {
    if (v38 <= v40)
    {
      if (v38 < v40) {
        *(void *)(v35 + 80) = v39 + v38;
      }
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v35 + 72, v38 - v40);
      a4 = v125;
    }
    unint64_t v41 = *(std::__shared_weak_count **)(v35 + 32);
    *(void *)(v35 + 24) = 0;
    *(void *)(v35 + 32) = 0;
    if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      a4 = v125;
    }
    *(void *)(v35 + 120) = 0;
    *(_DWORD *)(v35 + 112) = 0;
    uint64_t v39 = *(void *)(v35 + 72);
    uint64_t v42 = *(void *)(v35 + 80) - v39;
    *(void *)(v35 + 40) = 0;
    *(void *)(v35 + 48) = v42;
    *(void *)(v35 + 56) = 0;
    *(void *)(v35 + 64) = v42;
    unint64_t v36 = *(void *)(v35 + 8);
    unint64_t v38 = v36 * v123;
  }
  unsigned int v43 = v34 >> 3;
  long long v127 = 0uLL;
  unint64_t v119 = v37;
  unint64_t v44 = v36 * v37;
  *(void *)&long long v45 = 0;
  *((void *)&v45 + 1) = v35;
  long long v46 = (int16x8_t *)(v39 + v36 * v37);
  if (v38 == v36 * v37) {
    unint64_t v47 = 0;
  }
  else {
    unint64_t v47 = v46;
  }
  long long v127 = v45;
  unint64_t v128 = v44;
  unint64_t v129 = v38;
  char v131 = v47;
  __int16 v130 = 1;
  float v49 = *a12;
  float v48 = a12[1];
  float v50 = a13[2];
  float v52 = *a13;
  float v51 = a13[1];
  float v53 = a13[3] - *a13;
  float v54 = a13[4] - v51;
  float v55 = a13[5] - v50;
  if (v53 >= 0.0) {
    float v56 = 65535.0 / v53;
  }
  else {
    float v56 = INFINITY;
  }
  if (v54 >= 0.0) {
    float v57 = 65535.0 / v54;
  }
  else {
    float v57 = INFINITY;
  }
  if (v55 >= 0.0) {
    float v58 = 65535.0 / v55;
  }
  else {
    float v58 = INFINITY;
  }
  if (v14)
  {
    char v59 = v43;
    __float2 v60 = __sincosf_stret(a9);
    LOBYTE(v43) = v59;
    a4 = v125;
    uint64_t v61 = v136 + 4;
    unint64_t v62 = (float32x2_t *)(a1 + 12);
    do
    {
      float32x2_t v63 = v62[1];
      float v64 = *a11 * v62[-2].f32[1];
      float32x2_t v65 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*v62, v60.__sinval));
      float32x2_t v66 = vmul_n_f32(*v62, v60.__cosval);
      v67.i32[0] = vsub_f32(v66, v65).u32[0];
      float v68 = a11[1] * v62[-1].f32[0];
      v67.i32[1] = vadd_f32(v66, v65).i32[1];
      float32x2_t v69 = vmul_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32);
      float v70 = (float)(v49 + (float)(v64 * v60.__cosval)) - (float)(v52 + (float)(v68 * v60.__sinval));
      float v71 = (float)((float)(v48 - v51) + (float)(v64 * v60.__sinval)) + (float)(v68 * v60.__cosval);
      int v72 = (int)fminf(fmaxf((float)-(float)(v50 - (float)(a11[2] * v62[-1].f32[1])) * v58, 0.0), 65535.0);
      int32x2_t v73 = (int32x2_t)vadd_f32(vmla_f32(v69, v63, v63), (float32x2_t)vdup_lane_s32((int32x2_t)v69, 1));
      int v74 = (int)fminf(fmaxf(v71 * v57, 0.0), 65535.0);
      float v75 = sqrtf(*(float *)v73.i32);
      v73.i32[0] = 1123942400;
      float v76 = 127.0 / v75;
      int32x4_t v77 = vdupq_lane_s32(v73, 0);
      *(_WORD *)(v61 - 4) = (int)fminf(fmaxf(v70 * v56, 0.0), 65535.0);
      *(_WORD *)uint64_t v61 = v72;
      *(float *)v77.i32 = v76;
      float32x4_t v78 = (float32x4_t)vzip1q_s32(v77, v77);
      v78.f32[2] = v76;
      *(_WORD *)(v61 + 2) = a8;
      *(float32x2_t *)&v67.u32[2] = v63;
      int16x8_t v79 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(v78, v67));
      *(_WORD *)(v61 - 2) = v74;
      *(int16x4_t *)v79.i8 = vmovn_s32((int32x4_t)v79);
      *(_DWORD *)(v61 + 4) = vmovn_s16(v79).u32[0];
      v61 += 16;
      unint64_t v62 = (float32x2_t *)((char *)v62 + 28);
      --v14;
    }
    while (v14);
  }
  unsigned __int8 v80 = v43 - 1;
  if (a4)
  {
    unint64_t v81 = 0;
    if (a4 < 0x10) {
      goto LABEL_44;
    }
    if ((unint64_t)((char *)v47 - (char *)a3) <= 0x1F) {
      goto LABEL_44;
    }
    unint64_t v81 = a4 & 0xFFFFFFFFFFFFFFF0;
    int16x8_t v82 = vdupq_n_s16(v19);
    unint64_t v83 = v47 + 1;
    char v84 = a3 + 1;
    unint64_t v85 = a4 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v86 = vaddq_s16(*v84, v82);
      v83[-1] = vaddq_s16(v84[-1], v82);
      *unint64_t v83 = v86;
      v83 += 2;
      v84 += 2;
      v85 -= 16;
    }
    while (v85);
    if (v81 != a4)
    {
LABEL_44:
      unint64_t v87 = a4 - v81;
      uint64_t v88 = v81;
      uint64_t v89 = &v47->i16[v81];
      uint64_t v90 = &a3->i16[v88];
      do
      {
        __int16 v91 = *v90++;
        *v89++ = v91 + v19;
        --v87;
      }
      while (v87);
    }
  }
  float v92 = *a5;
  float v93 = a5[1];
  float v94 = a5[3];
  float v95 = a5[4];
  __float2 v96 = __sincosf_stret(a9);
  float v97 = a11[1];
  float v98 = *a11 * v92;
  float v99 = (float)(v97 * v93) * v96.__cosval;
  float v100 = v49 + (float)(v98 * v96.__cosval);
  float v101 = v100 - (float)(v96.__sinval * (float)(v97 * v93));
  float v102 = v48 + (float)(v98 * v96.__sinval);
  float v103 = *a11 * v94;
  float v104 = v49 + (float)(v103 * v96.__cosval);
  float v105 = v104 - (float)(v96.__sinval * (float)(v97 * v93));
  float v106 = v48 + (float)(v103 * v96.__sinval);
  float v107 = v97 * v95;
  v137[0] = v101;
  v137[1] = v102 + v99;
  v137[2] = v105;
  v137[3] = v106 + v99;
  v137[4] = v104 - (float)(v96.__sinval * v107);
  v137[5] = v106 + (float)(v107 * v96.__cosval);
  v137[6] = v100 - (float)(v96.__sinval * v107);
  v137[7] = v102 + (float)(v107 * v96.__cosval);
  __int16 v108 = ggl::CullingGrid::intersectedCellsForRibbon(4uLL, v137, 1);
  v126[0] = v119;
  v126[1] = v123;
  v126[2] = a10;
  _addRangeToList(a7, v108, v80, v126);
  if (v47 && v38 != v44)
  {
    unint64_t v110 = *(void *)(v35 + 56);
    unint64_t v109 = *(void *)(v35 + 64);
    if (v109 == v110) {
      unint64_t v110 = *(void *)(v35 + 80) - *(void *)(v35 + 72);
    }
    if (v44 < v110) {
      unint64_t v110 = v44;
    }
    if (v109 <= v38) {
      unint64_t v109 = v38;
    }
    if (v109 == v110) {
      unint64_t v109 = v110 + *(void *)(v35 + 80) - *(void *)(v35 + 72);
    }
    *(void *)(v35 + 56) = v110;
    *(void *)(v35 + 64) = v109;
  }
  if (v136)
  {
    unint64_t v112 = v133;
    unint64_t v111 = v134;
    if (v134 != v133)
    {
      uint64_t v113 = (void *)*((void *)&v132 + 1);
      int v114 = v135;
      int v115 = HIBYTE(v135);
      if ((void)v132 && *(unsigned char *)(*((void *)&v132 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v132 + 64))();
      }
      if (v114 && !v115)
      {
        unint64_t v117 = v113[7];
        unint64_t v116 = v113[8];
        if (v116 == v117) {
          unint64_t v117 = v113[10] - v113[9];
        }
        if (v112 < v117) {
          unint64_t v117 = v112;
        }
        if (v116 <= v111) {
          unint64_t v116 = v111;
        }
        if (v116 == v117) {
          unint64_t v116 = v117 + v113[10] - v113[9];
        }
        v113[7] = v117;
        v113[8] = v116;
      }
    }
  }
}

void sub_1A24FCA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>::_allocateNewMesh()
{
}

void ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>::_allocateNewMesh()
{
}

void sub_1A24FF290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t *a48,uint64_t a49)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a35);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a41);
  if (a49)
  {
    uint64_t v52 = a47;
    float v51 = a48;
    uint64_t v53 = *a48;
    *(void *)(v53 + 8) = *(void *)(a47 + 8);
    **(void **)(v52 + 8) = v53;
    a49 = 0;
    if (v51 != &a47)
    {
      do
      {
        float v54 = (uint64_t *)v51[1];
        operator delete(v51);
        float v51 = v54;
      }
      while (v54 != &a47);
    }
  }
  if (*(void *)(v49 - 232))
  {
    uint64_t v56 = *(void *)(v49 - 248);
    float v55 = *(uint64_t **)(v49 - 240);
    uint64_t v57 = *v55;
    *(void *)(v57 + 8) = *(void *)(v56 + 8);
    **(void **)(v56 + 8) = v57;
    *(void *)(v49 - 232) = 0;
    if (v55 != (uint64_t *)(v49 - 248))
    {
      do
      {
        float v58 = (uint64_t *)v55[1];
        operator delete(v55);
        float v55 = v58;
      }
      while (v58 != (uint64_t *)(v49 - 248));
    }
  }
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>::_allocateNewMesh()
{
}

void sub_1A2500624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::BuildingFlatStroke::DefaultVbo> &,ggl::DataWrite<unsigned short> &)>::~function((void *)(v10 - 184));
  md::PolygonSection::~PolygonSection((md::PolygonSection *)va);
  _Unwind_Resume(a1);
}

void sub_1A2500650(_Unwind_Exception *a1)
{
  std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::PolygonBase::CompressedVbo> &,ggl::DataWrite<unsigned short> &)>::~function((void *)(v1 - 152));
  _Unwind_Resume(a1);
}

BOOL _shouldMakePointyRoofForBuilding(uint64_t a1)
{
  {
    uint64_t v23 = a1;
    a1 = v23;
    if (v22)
    {
      _shouldMakePointyRoofForBuilding(GeoCodecsBuildingFootprintFeature *)::kMaxCos = 1048871919;
      a1 = v23;
    }
  }
  if (*(_DWORD *)(a1 + 100) != 1) {
    return 0;
  }
  uint64_t v24 = 0;
  uint64_t v1 = (float *)geo::codec::multiSectionFeaturePoints((void *)a1, 0, &v24);
  if (v24 != 4) {
    return 0;
  }
  float v3 = v1[6];
  float v2 = v1[7];
  float v4 = v1[4];
  float v5 = v1[5];
  float v6 = v3 - v4;
  float v7 = v2 - v5;
  float v8 = (float)(v6 * v6) + (float)(v7 * v7);
  float v9 = v1[1];
  float v10 = *v1 - v3;
  float v11 = v9 - v2;
  float v12 = (float)(v10 * v10) + (float)(v11 * v11);
  if (fabsf(fminf(fmaxf((float)((float)(v10 * v6) + (float)(v11 * v7)) / sqrtf(v8 * v12), -1.0), 1.0)) > *(float *)&_shouldMakePointyRoofForBuilding(GeoCodecsBuildingFootprintFeature *)::kMaxCos) {
    return 0;
  }
  float v13 = v1[2];
  float v14 = v1[3];
  float v15 = v13 - *v1;
  float v16 = v14 - v9;
  float v17 = (float)(v15 * v15) + (float)(v16 * v16);
  if (fabsf(fminf(fmaxf((float)((float)(v15 * v10) + (float)(v16 * v11)) / sqrtf(v12 * v17), -1.0), 1.0)) > *(float *)&_shouldMakePointyRoofForBuilding(GeoCodecsBuildingFootprintFeature *)::kMaxCos) {
    return 0;
  }
  float v18 = v4 - v13;
  float v19 = v5 - v14;
  float v20 = (float)(v18 * v18) + (float)(v19 * v19);
  return fabsf(fminf(fmaxf((float)((float)(v18 * v15) + (float)(v19 * v16)) / sqrtf(v17 * v20), -1.0), 1.0)) <= *(float *)&_shouldMakePointyRoofForBuilding(GeoCodecsBuildingFootprintFeature *)::kMaxCos
      && fabsf(fminf(fmaxf((float)((float)(v6 * v18) + (float)(v7 * v19)) / sqrtf(v20 * v8), -1.0), 1.0)) <= *(float *)&_shouldMakePointyRoofForBuilding(GeoCodecsBuildingFootprintFeature *)::kMaxCos;
}

void md::Triangulator<float>::triangulate(uint64_t a1, uint64_t a2, unint64_t a3, float32x4_t a4, double a5, float32x4_t a6, double a7, double a8, float32x4_t a9)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 72) = 0;
  if ((geo::Triangulator<float,unsigned short>::_triangulatePolygon(a1, a2, a3, a1 + 88, a4, a5, a6, a7, a8, a9) & 1) == 0)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    float v11 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      md::Triangulator<float>::_describePoints(__p, a2, a3);
      if (v14 >= 0) {
        float v12 = __p;
      }
      else {
        float v12 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315138;
      float v16 = v12;
      _os_log_impl(&dword_1A1780000, v11, OS_LOG_TYPE_ERROR, "Triangulator failed to fully triangulate polygon: %s", buf, 0xCu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1A2500930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::writePoints(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  if (a2 < 0x10000)
  {
    unsigned int v11 = *(unsigned __int16 *)(a1 + 146);
    if (a2 > (unsigned __int16)~(_WORD)v11)
    {
      unsigned __int8 v13 = *(unsigned char *)(a1 + 144) + 1;
      *(unsigned char *)(a1 + 144) = v13;
      *(_WORD *)(a1 + 146) = 0;
      *(_DWORD *)(a1 + 148) = 0;
      uint64_t v14 = **(void **)(*(void *)(*(void *)(a1 + 24) + 16 * v13) + 64);
      uint64_t v15 = *(unsigned __int16 *)(*(void *)a1 + 8 * v13);
      memset(buf, 0, sizeof(buf));
      uint64_t v16 = *(void *)(v14 + 8) * v15;
      a6.n128_u64[0] = a4;
      *(void *)&long long v17 = a4;
      *((void *)&v17 + 1) = v14;
      __n128 v42 = a6;
      if (v16)
      {
        if (a4 && *(unsigned char *)(v14 + 17) != 2)
        {
          long long v41 = v17;
          uint64_t v18 = (*(uint64_t (**)(unint64_t))(*(void *)a4 + 56))(a4);
          long long v17 = v41;
        }
        else
        {
          uint64_t v18 = *(void *)(v14 + 72);
        }
      }
      else
      {
        uint64_t v18 = 0;
      }
      *(_OWORD *)long long buf = v17;
      unint64_t v46 = 0;
      unint64_t v47 = v16;
      uint64_t v49 = v18;
      __int16 v48 = 257;
      ggl::BufferMemory::operator=((uint64_t *)(a1 + 48), (uint64_t)buf);
      *(void *)&long long v19 = v42.n128_u64[0];
      if (v49)
      {
        unint64_t v21 = v46;
        unint64_t v20 = v47;
        if (v47 != v46)
        {
          int v22 = *(void **)&buf[8];
          int v23 = v48;
          int v24 = HIBYTE(v48);
          if (*(void *)buf && *(unsigned char *)(*(void *)&buf[8] + 17) != 2)
          {
            (*(void (**)(__n128))(**(void **)buf + 64))(v42);
            *(void *)&long long v19 = v42.n128_u64[0];
          }
          if (v23 && !v24)
          {
            unint64_t v26 = v22[7];
            unint64_t v25 = v22[8];
            if (v25 == v26) {
              unint64_t v26 = v22[10] - v22[9];
            }
            if (v21 < v26) {
              unint64_t v26 = v21;
            }
            if (v25 <= v20) {
              unint64_t v25 = v20;
            }
            if (v25 == v26) {
              unint64_t v25 = v26 + v22[10] - v22[9];
            }
            v22[7] = v26;
            v22[8] = v25;
          }
        }
      }
      uint64_t v27 = *(unsigned __int8 *)(a1 + 144);
      uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 24) + 16 * v27) + 96);
      uint64_t v29 = *(unsigned int *)(*(void *)a1 + 8 * v27 + 4);
      memset(buf, 0, sizeof(buf));
      uint64_t v30 = *(void *)(v28 + 8) * v29;
      *((void *)&v19 + 1) = v28;
      if (v30)
      {
        if (a4 && *(unsigned char *)(v28 + 17) != 2)
        {
          long long v43 = v19;
          uint64_t v31 = (*(uint64_t (**)(unint64_t))(*(void *)a4 + 56))(a4);
          long long v19 = v43;
        }
        else
        {
          uint64_t v31 = *(void *)(v28 + 72);
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      *(_OWORD *)long long buf = v19;
      unint64_t v46 = 0;
      unint64_t v47 = v30;
      uint64_t v49 = v31;
      __int16 v48 = 257;
      ggl::BufferMemory::operator=((uint64_t *)(a1 + 96), (uint64_t)buf);
      if (v49)
      {
        unint64_t v33 = v46;
        unint64_t v32 = v47;
        if (v47 != v46)
        {
          unsigned int v34 = *(void **)&buf[8];
          int v35 = v48;
          int v36 = HIBYTE(v48);
          if (*(void *)buf && *(unsigned char *)(*(void *)&buf[8] + 17) != 2) {
            (*(void (**)(void))(**(void **)buf + 64))();
          }
          if (v35 && !v36)
          {
            unint64_t v38 = v34[7];
            unint64_t v37 = v34[8];
            if (v37 == v38) {
              unint64_t v38 = v34[10] - v34[9];
            }
            if (v33 < v38) {
              unint64_t v38 = v33;
            }
            if (v37 <= v32) {
              unint64_t v37 = v32;
            }
            if (v37 == v38) {
              unint64_t v37 = v38 + v34[10] - v34[9];
            }
            v34[7] = v38;
            v34[8] = v37;
          }
        }
      }
      unsigned int v11 = *(unsigned __int16 *)(a1 + 146);
    }
    *(void *)long long buf = v11;
    *(void *)&uint8_t buf[8] = v11 + a2;
    uint64_t v39 = *(unsigned int *)(a1 + 148) + a3;
    v44[0] = *(unsigned int *)(a1 + 148);
    v44[1] = v39;
    uint64_t v40 = *(void *)(a5 + 24);
    if (v40)
    {
      (*(void (**)(uint64_t, uint8_t *, void *, uint64_t, uint64_t))(*(void *)v40 + 48))(v40, buf, v44, a1 + 48, a1 + 96);
      *(_WORD *)(a1 + 146) += a2;
      *(_DWORD *)(a1 + 148) += a3;
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      std::__hash_table<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::__unordered_map_hasher<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::hash<std::pair<void const*,unsigned long>>,std::equal_to<std::pair<void const*,unsigned long>>,true>,std::__unordered_map_equal<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::equal_to<std::pair<void const*,unsigned long>>,std::hash<std::pair<void const*,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>>>::__emplace_unique_key_args<std::pair<void const*,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<void const*,unsigned long>&&>,std::tuple<>>();
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    float v6 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_ERROR, "MeshSet: Cannot write points for polygons: polygon is too big", buf, 2u);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::__unordered_map_hasher<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::hash<std::pair<void const*,unsigned long>>,std::equal_to<std::pair<void const*,unsigned long>>,true>,std::__unordered_map_equal<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::equal_to<std::pair<void const*,unsigned long>>,std::hash<std::pair<void const*,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>>>::__emplace_unique_key_args<std::pair<void const*,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<void const*,unsigned long>&&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = (a3
      + 0x77FA823ACE0B5A40 * (v8 ^ (v8 >> 47))
      + ((0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47))) >> 2)
      - 0x61C8864680B583EBLL) ^ (0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (a3
          + 0x77FA823ACE0B5A40 * (v8 ^ (v8 >> 47))
          + ((0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47))) >> 2)
          - 0x61C8864680B583EBLL) ^ (0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    float v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unsigned __int8 v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v13[1];
            if (v17 == v9)
            {
              if (v13[2] == a2 && v13[3] == a3) {
                return v13;
              }
            }
            else if ((v17 & (v10 - 1)) != v4)
            {
              goto LABEL_28;
            }
            unsigned __int8 v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v15 = v13[1];
          if (v15 == v9)
          {
            if (v13[2] == a2 && v13[3] == a3) {
              return v13;
            }
          }
          else
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
            if (v15 != v4) {
              break;
            }
          }
          unsigned __int8 v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_28:
  uint64_t v18 = (void *)(a1 + 16);
  unsigned __int8 v13 = operator new(0x38uLL);
  *unsigned __int8 v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a4;
  v13[5] = 0;
  v13[6] = 0;
  v13[4] = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_40;
    }
    if (prime < v10)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < v10) {
LABEL_40:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v28 = *(void *)a1;
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    *unsigned __int8 v13 = *v29;
LABEL_64:
    void *v29 = v13;
    goto LABEL_65;
  }
  *unsigned __int8 v13 = *v18;
  *uint64_t v18 = v13;
  *(void *)(v28 + 8 * v4) = v18;
  if (*v13)
  {
    unint64_t v30 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    uint64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_64;
  }
LABEL_65:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1A25010E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<geo::handle<md::CommandBufferResource>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<geo::handle<md::CommandBufferResource>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::PolygonBase::CompressedVbo> &,ggl::DataWrite<unsigned short> &)>::~function(void *a1)
{
  float v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::BuildingFlatStroke::DefaultVbo> &,ggl::DataWrite<unsigned short> &)>::~function(void *a1)
{
  float v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1A250288C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (a19 && !atomic_fetch_add(&a19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
    std::__shared_weak_count::__release_weak(a19);
  }
  if (a21)
  {
    if (!atomic_fetch_add(&a21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5880C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5880C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A250385C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  md::PolygonSection::~PolygonSection((md::PolygonSection *)&a46);
  std::list<gm::Range<double>>::~list((uint64_t *)(v46 - 224));
  std::list<gm::Range<double>>::~list((uint64_t *)(v46 - 200));
  _Unwind_Resume(a1);
}

void md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::prepareSpaceForPoints(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 < 0x10000)
  {
    unint64_t v7 = *(_DWORD **)(a1 + 8);
    __int16 v8 = *((_WORD *)v7 - 4);
    if (a2 <= (unsigned __int16)~v8)
    {
      *((_WORD *)v7 - 4) = v8 + a2;
      *(v7 - 1) += a3;
    }
    else
    {
      unint64_t v9 = *(void *)(a1 + 16);
      if ((unint64_t)v7 >= v9)
      {
        uint8x8_t v11 = *(unsigned char **)a1;
        uint64_t v12 = (uint64_t)v7 - *(void *)a1;
        uint64_t v13 = v12 >> 3;
        unint64_t v14 = (v12 >> 3) + 1;
        if (v14 >> 61) {
          abort();
        }
        uint64_t v15 = v9 - (void)v11;
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        BOOL v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v16) {
          unint64_t v17 = v14;
        }
        if (v17 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v18 = 8 * v17;
        float v19 = (char *)operator new(8 * v17);
        float v20 = &v19[8 * v13];
        BOOL v21 = &v19[v18];
        *(_WORD *)float v20 = a2;
        *((_DWORD *)v20 + 1) = a3;
        unint64_t v10 = v20 + 8;
        if (v7 != (_DWORD *)v11)
        {
          unint64_t v22 = (char *)v7 - v11 - 8;
          if (v22 < 0x58) {
            goto LABEL_43;
          }
          if ((unint64_t)((char *)v7 - v12 - v19) < 0x20) {
            goto LABEL_43;
          }
          uint64_t v23 = (v22 >> 3) + 1;
          int v24 = &v19[8 * v13 - 16];
          unint64_t v25 = (long long *)(v7 - 4);
          uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v27 = *v25;
            *((_OWORD *)v24 - 1) = *(v25 - 1);
            *(_OWORD *)int v24 = v27;
            v24 -= 32;
            v25 -= 2;
            v26 -= 4;
          }
          while (v26);
          v20 -= 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          v7 -= 2 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_43:
            do
            {
              uint64_t v28 = *((void *)v7 - 1);
              v7 -= 2;
              *((void *)v20 - 1) = v28;
              v20 -= 8;
            }
            while (v7 != (_DWORD *)v11);
          }
        }
        *(void *)a1 = v20;
        *(void *)(a1 + 8) = v10;
        *(void *)(a1 + 16) = v21;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(_WORD *)unint64_t v7 = a2;
        v7[1] = a3;
        unint64_t v10 = (char *)(v7 + 2);
      }
      *(void *)(a1 + 8) = v10;
    }
    uint64_t v29 = *(void *)(a1 + 152);
    unint64_t v30 = *(void **)(a1 + 168);
    uint64_t v31 = *(std::__shared_weak_count **)(a1 + 176);
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v30 && *v30 == v29 && !*(unsigned char *)(v29 + 40))
    {
      uint64_t v32 = *(void *)(v29 + 8) + a3;
      *(void *)v29 += 8 * a2;
      *(void *)(v29 + 8) = v32;
      uint64_t v33 = v30[3] + a3;
      v30[2] += 8 * a2;
      void v30[3] = v33;
    }
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    float v3 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v34[0] = 0;
      _os_log_impl(&dword_1A1780000, v3, OS_LOG_TYPE_ERROR, "MeshSet: Cannot prepare space polygons points: polygon is too large", (uint8_t *)v34, 2u);
    }
  }
}

void sub_1A2503D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A2503EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A2504040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A25041D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A2504368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A2505064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, ggl::BufferMemory *a10, ggl::BufferMemory *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::~MeshSet((uint64_t)&__p);

  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  __int16 v8 = operator new(0xF8uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  void v8[2] = 0;
  *__int16 v8 = &unk_1EF584B98;
  unint64_t v10 = v8 + 3;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(std::__shared_weak_count **)(a2 + 32);
  v13[0] = v11;
  v13[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 16, v13, *a3, a3[1], 1);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v9[29] = v7;
  v9[30] = &ggl::BuildingFlatStroke::defaultVboReflection;
  v9[3] = &unk_1EF55C7C8;
  v9[28] = &unk_1EF55C7E8;
  *a4 = v10;
  a4[1] = v9;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingFlatStroke::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingFlatStroke::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584B98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::BuildingFlatStroke::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF570B60;
}

void *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF570B60;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::BuildingFlatStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
}

double std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1>,float ()(geo::Mercator2<double> const&)>::operator()()
{
  return 0.0;
}

void std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1>,float ()(geo::Mercator2<double> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51DFD8;
}

void *std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1>,float ()(geo::Mercator2<double> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF51DFD8;
  return result;
}

void std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_1>,float ()(geo::Mercator2<double> const&)>::~__func()
{
}

float std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0>,float ()(geo::Mercator2<double> const&)>::operator()(uint64_t a1, double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10)
{
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = 1 << *(unsigned char *)(v10 + 57);
  double v12 = 1.0 / (double)v11;
  double v13 = (double)(int)(v11 + ~*(void *)(v10 + 60));
  float v14 = (*a2 - v12 * (double)(int)HIDWORD(*(void *)(v10 + 60))) * (double)v11;
  double v15 = -(a2[1] - v12 * v13);
  double v16 = v15 * (double)v11;
  *(float *)&double v15 = (float)(unint64_t)(*(void *)(v10 + 32) - 1);
  *(float *)&double v13 = v16;
  unint64_t v17 = md::ElevationRaster::bilinearSample((uint64_t *)v10, *(float *)&v15 * v14, (float)(unint64_t)(*(void *)(v10 + 40) - 1)+ (float)(*(float *)&v13 * (float)(unint64_t)(*(void *)(v10 + 40) - 1)), v15, v13, (float)(unint64_t)(*(void *)(v10 + 40) - 1), a8, a9, a10);
  float result = *(float *)&v17;
  if (!HIDWORD(v17)) {
    return 0.0;
  }
  return result;
}

uint64_t std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0>,float ()(geo::Mercator2<double> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51DF90;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0>,float ()(geo::Mercator2<double> const&)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF51DF90;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0,std::allocator<md::FlyoverTileBuilder::createHeightFunction(md::ElevationRaster const*)::$_0>,float ()(geo::Mercator2<double> const&)>::~__func()
{
}

uint64_t md::FlyoverTileBuilder::generateHeightMesh(void *a1, uint64_t a2, float *a3, float *a4)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  char v9 = *(unsigned char *)(a2 + 1);
  unsigned int v10 = *(_DWORD *)(a2 + 4);
  __powidf2();
  double v12 = v11;
  uint64_t v152 = 0;
  if (a3)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    char v14 = *(unsigned char *)a2;
    LOBYTE(v145) = v14;
    BYTE1(v145) = v9;
    *(void *)((char *)&v145 + 4) = __PAIR64__(v13, v10);
    unint64_t v147 = (void (**)(void **))&unk_1EF51DF90;
    uint64_t v148 = a3;
    uint64_t v150 = (void **)&v147;
    LOBYTE(v153) = v14;
    BYTE1(v153) = v9;
    HIDWORD(v153) = v10;
    LODWORD(v154) = v13;
    unint64_t v159 = (long long *)&v156;
    uint64_t v156 = (void **)&unk_1EF51DF90;
    long long v157 = a3;
    double v15 = (char *)operator new(0x40uLL);
    *(void *)double v15 = &unk_1EF590AC8;
    v15[8] = v14;
    v15[9] = v9;
    *((_DWORD *)v15 + 3) = v10;
    *((_DWORD *)v15 + 4) = v13;
    *((void *)v15 + 7) = v15 + 32;
    *((void *)v15 + 4) = &unk_1EF51DF90;
    *((void *)v15 + 5) = a3;
    uint64_t v142 = (long long *)v15;
    std::__function::__value_func<float ()(gm::Matrix<float,2,1> const&)>::swap[abi:nn180100](&v140, v151);
    if (v142 == &v140)
    {
      (*(void (**)(long long *))(v140 + 32))(&v140);
    }
    else if (v142)
    {
      (*(void (**)(void))(*(void *)v142 + 40))();
    }
    if (v159 == (long long *)&v156)
    {
      ((void (*)(void ***))v156[4])(&v156);
    }
    else if (v159)
    {
      (*(void (**)(long long *))(*(void *)v159 + 40))(v159);
    }
    if (v150 == (void **)&v147)
    {
      v147[4]((void **)&v147);
    }
    else if (v150)
    {
      (*((void (**)(void))*v150 + 5))();
    }
  }
  else
  {
    unint64_t v153 = (void (**)(void **))&unk_1EF590B10;
    uint64_t v156 = (void **)&v153;
    std::__function::__value_func<float ()(gm::Matrix<float,2,1> const&)>::swap[abi:nn180100](&v153, v151);
    if (v156 == (void **)&v153)
    {
      v153[4]((void **)&v153);
    }
    else if (v156)
    {
      (*((void (**)(void **))*v156 + 5))(v156);
    }
  }
  int v16 = *(unsigned __int8 *)a4;
  if (*(unsigned char *)a4) {
    uint64_t v17 = 1152;
  }
  else {
    uint64_t v17 = 864;
  }
  uint64_t v18 = (std::__shared_weak_count *)operator new(0xF8uLL);
  float v19 = v18;
  if (v16) {
    uint64_t v20 = 221;
  }
  else {
    uint64_t v20 = 169;
  }
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5844D0;
  BOOL v21 = &v18[1].__vftable;
  ggl::BufferData::BufferData((uint64_t)&v18[1], 32, 0, 0, 7, v20);
  v19[9].__shared_weak_owners_ = (uint64_t)"HeightMesh VertexData";
  v19[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos4UVReflection;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55C048;
  v19[9].__shared_owners_ = (uint64_t)&unk_1EF55C068;
  uint64_t v138 = v21;
  uint64_t v139 = v19;
  unint64_t v22 = operator new(0xF8uLL);
  v22[1] = 0;
  v22[2] = 0;
  *unint64_t v22 = &unk_1EF583D28;
  uint64_t v23 = ggl::BufferData::BufferData((uint64_t)(v22 + 3), 2, 1, 0, 7, v17);
  int v24 = 0;
  *((_DWORD *)v22 + 60) = 0;
  void v22[3] = &unk_1EF55B630;
  v22[4] = 2;
  v22[28] = &unk_1EF55B650;
  v22[29] = "HeightMesh IndexData";
  uint64_t v136 = v23;
  unint64_t v137 = (std::__shared_weak_count *)v22;
  uint64_t shared_weak_owners = v19[2].__shared_weak_owners_;
  unint64_t v25 = v19[3].__vftable;
  unint64_t shared_owners = v19[1].__shared_owners_;
  long long v145 = 0uLL;
  unint64_t v28 = (unint64_t)v25 - shared_weak_owners;
  *(void *)&long long v29 = 0;
  *(void *)&long long v30 = 0;
  *((void *)&v30 + 1) = v21;
  if (v28 != v28 % shared_owners) {
    int v24 = (float32x2_t *)v19[4].__vftable;
  }
  long long v145 = v30;
  uint64_t v146 = 0;
  unint64_t v147 = (void (**)(void **))(v28 / shared_owners * shared_owners);
  uint64_t v149 = v24;
  LOWORD(v148) = 1;
  uint64_t v32 = v22[8];
  uint64_t v31 = v22[9];
  long long v140 = 0uLL;
  *((void *)&v29 + 1) = v23;
  unint64_t v33 = (v31 - v32) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v120 = v19;
  uint64_t v121 = a1;
  unint64_t v119 = v21;
  if (v33) {
    uint64_t v34 = v22[12];
  }
  else {
    uint64_t v34 = 0;
  }
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  float v37 = v12 * 0.0000000249532021;
  float v122 = v37;
  long long v140 = v29;
  uint64_t v141 = 0;
  uint64_t v142 = (long long *)v33;
  uint64_t v123 = v34;
  uint64_t v144 = v34;
  __int16 v143 = 1;
  float v38 = 3.4028e38;
  float v39 = -3.4028e38;
  long long v134 = xmmword_1A28FC710;
  unint64_t v135 = 0x80000000800000;
  float v40 = -3.4028e38;
  float v41 = 3.4028e38;
  float v130 = -3.4028e38;
  float v131 = 3.4028e38;
  while (2)
  {
    unint64_t v42 = 0;
    float v132 = (float)v35 * 0.083333;
    uint64_t v43 = 13 * v35;
    __int16 v44 = 13 * v35 + 13;
    do
    {
      while (1)
      {
        float v45 = (float)v42 * 0.083333;
        *(float *)&unint64_t v153 = v45;
        *((float *)&v153 + 1) = (float)v35 * 0.083333;
        float v46 = a4[3];
        float v47 = a4[1] + (float)(v46 * v45);
        float v48 = a4[2] + (float)(v46 * v132);
        if (*((unsigned char *)a4 + 1)) {
          break;
        }
        if (!v152)
        {
LABEL_109:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
        }
        float v72 = (*(float (**)(void *, void (***)(void **)))(*v152 + 48))(v152, &v153);
        int32x2_t v73 = &v24[4 * v42 + 4 * v43];
        v73->f32[0] = v45;
        v73->f32[1] = v132;
        v73[1].f32[0] = v72 * v122;
        v73[1].i32[1] = 1065353216;
        v73[2].f32[0] = v47;
        v73[2].f32[1] = v48;
        if (v35 <= 0xB) {
          goto LABEL_43;
        }
LABEL_32:
        if (++v42 == 13) {
          goto LABEL_30;
        }
      }
      if (!v152) {
        goto LABEL_109;
      }
      float v124 = 1.0 - v48;
      float v127 = v40;
      double v126 = v4;
      double v49 = (*(float (**)(void *, void (***)(void **)))(*v152 + 48))(v152, &v153);
      int v50 = 1 << *(unsigned char *)(a2 + 1);
      double v51 = 6.28318531 / (double)v50;
      long double v52 = v51 * (*(float *)&v153 + (double)*(int *)(a2 + 8));
      float v125 = v41;
      long double v53 = exp(((double)(v50 + ~*(_DWORD *)(a2 + 4)) + *((float *)&v153 + 1)) * v51 + -3.14159265);
      float v54 = v39;
      float v55 = v38;
      double v56 = atan(v53) * 2.0 + -1.57079633;
      long double v57 = fmod(v52, 6.28318531);
      double v58 = fmod(v57 + 6.28318531, 6.28318531) + -3.14159265;
      __double2 v59 = __sincos_stret(v56);
      double v60 = 6378137.0 / sqrt(v59.__sinval * v59.__sinval * -0.00669437999 + 1.0);
      double v61 = (v60 + v49) * v59.__cosval;
      __double2 v62 = __sincos_stret(v58);
      double v63 = v49 + v60 * 0.99330562;
      float v64 = v55;
      double v4 = v126;
      double v65 = v63 * v59.__sinval;
      if (!(v42 | v35)) {
        double v4 = v61 * v62.__cosval;
      }
      double v67 = v128;
      double v66 = v129;
      if (!(v42 | v35))
      {
        double v67 = v61 * v62.__sinval;
        double v66 = v65;
      }
      double v128 = v67;
      double v129 = v66;
      float v68 = v61 * v62.__cosval - v4;
      float v69 = v61 * v62.__sinval - v67;
      float v70 = &v24[4 * v42 + 4 * v43];
      v70->f32[0] = v68;
      v70->f32[1] = v69;
      float v71 = v65 - v66;
      v70[1].f32[0] = v71;
      v70[1].i32[1] = 1065353216;
      v70[2].f32[0] = v47;
      v70[2].f32[1] = v124;
      float v39 = fmaxf(v54, v68);
      float v41 = fminf(v125, v69);
      *(void *)&long long v134 = __PAIR64__(LODWORD(v41), COERCE_UNSIGNED_INT(fminf(v131, v68)));
      float v40 = fmaxf(v127, v69);
      float v38 = fminf(v64, v71);
      *((void *)&v134 + 1) = __PAIR64__(LODWORD(v39), LODWORD(v38));
      unint64_t v135 = __PAIR64__(COERCE_UNSIGNED_INT(fmaxf(v130, v71)), LODWORD(v40));
      float v130 = *((float *)&v135 + 1);
      float v131 = *(float *)&v134;
      if (v35 > 0xB) {
        goto LABEL_32;
      }
LABEL_43:
      if (v42 >= 0xC) {
        goto LABEL_32;
      }
      __int16 v74 = v42 + v43;
      float v75 = (_WORD *)(v123 + 2 * v36);
      *float v75 = v42 + v43;
      __int16 v76 = v42++ + v44;
      v75[1] = v42 + v44;
      v75[2] = v76;
      v75[3] = v42 + v43;
      v75[4] = v42 + v44;
      v36 += 6;
      v75[5] = v74;
    }
    while (v42 != 13);
LABEL_30:
    if (++v35 != 13) {
      continue;
    }
    break;
  }
  int v77 = *(unsigned __int8 *)a4;
  double v78 = 40075016.7 / (double)(1 << *(unsigned char *)(a2 + 1));
  float v79 = v78 * 0.015625;
  *(float *)&unint64_t v153 = v79;
  double v154 = v4;
  double v155 = v128;
  if (v77 == 1) {
    float v80 = 0.015625;
  }
  else {
    float v80 = 0.0039062;
  }
  uint64_t v156 = *(void ***)&v129;
  long long v157 = a4;
  float v158 = v122;
  unint64_t v159 = &v134;
  if (!v77)
  {
    float v100 = v120;
    int16x8_t v86 = v121;
    *uint64_t v121 = v119;
    v121[1] = v120;
LABEL_61:
    atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_62;
  }
  float v81 = v78 * v80;
  v133.i32[0] = 0;
  v133.f32[1] = v80;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_2::operator()((uint64_t)&v153, v24, v24 + 676, &v133, 0.0, -v81);
  uint64_t v82 = 0;
  unint64_t v83 = v149;
  uint64_t v123 = v144;
  char v84 = (_WORD *)(v144 + 2 * v36 + 6);
  unint64_t v85 = v149;
  int16x8_t v86 = v121;
  do
  {
    unint64_t v87 = v85 + 4;
    v133.i32[0] = 0;
    v133.f32[1] = v80;
    md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_2::operator()((uint64_t)&v153, v85 + 4, v85 + 680, &v133, 0.0, -v81);
    *(v84 - 3) = v82;
    *(v84 - 2) = v82 + 169;
    *(v84 - 1) = v82 + 170;
    *char v84 = v82++ + 170;
    v84[1] = v82;
    v84[2] = v82 - 1;
    v84 += 6;
    unint64_t v85 = v87;
  }
  while (v82 != 12);
  v133.f32[0] = -v80;
  v133.i32[1] = 0;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_2::operator()((uint64_t)&v153, v83 + 48, v83 + 728, &v133, v81, 0.0);
  uint64_t v88 = v83 + 100;
  uint64_t v89 = v83 + 732;
  uint64_t v90 = 182;
  uint64_t v91 = 25;
  do
  {
    v133.f32[0] = -v80;
    v133.i32[1] = 0;
    md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_2::operator()((uint64_t)&v153, v88, v89, &v133, v81, 0.0);
    *(v84 - 3) = v91 - 13;
    *(v84 - 2) = v90;
    *(v84 - 1) = v90 + 1;
    *char v84 = v90 + 1;
    v84[1] = v91;
    v84[2] = v91 - 13;
    v84 += 6;
    v91 += 13;
    v88 += 52;
    v89 += 4;
    ++v90;
  }
  while (v91 != 181);
  v133.i32[0] = 0;
  v133.f32[1] = -v80;
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_2::operator()((uint64_t)&v153, v83 + 672, v83 + 780, &v133, 0.0, v81);
  float v92 = v83 + 668;
  float v93 = v83 + 784;
  uint64_t v94 = 195;
  for (uint64_t i = 168; i != 156; --i)
  {
    v133.i32[0] = 0;
    v133.f32[1] = -v80;
    md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_2::operator()((uint64_t)&v153, v92, v93, &v133, 0.0, v81);
    *(v84 - 3) = i;
    *(v84 - 2) = v94;
    *(v84 - 1) = v94 + 1;
    *char v84 = v94 + 1;
    v84[1] = i - 1;
    v84[2] = i;
    v84 += 6;
    v92 -= 4;
    v93 += 4;
    ++v94;
  }
  float32x2_t v133 = (float32x2_t)LODWORD(v80);
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_2::operator()((uint64_t)&v153, v83 + 624, v83 + 832, &v133, -v81, 0.0);
  __float2 v96 = v83 + 572;
  float v97 = v83 + 836;
  uint64_t v98 = 208;
  uint64_t v99 = 156;
  do
  {
    float32x2_t v133 = (float32x2_t)LODWORD(v80);
    md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_2::operator()((uint64_t)&v153, v96, v97, &v133, -v81, 0.0);
    *(v84 - 3) = v99;
    *(v84 - 2) = v98;
    *(v84 - 1) = v98 + 1;
    *char v84 = v98 + 1;
    v96 -= 52;
    v97 += 4;
    v84[1] = v99 - 13;
    v84[2] = v99;
    v84 += 6;
    v99 -= 13;
    ++v98;
  }
  while (v99);
  float v100 = v139;
  *uint64_t v121 = v138;
  v121[1] = v100;
  if (v100) {
    goto LABEL_61;
  }
LABEL_62:
  float v101 = v137;
  v86[2] = v136;
  v86[3] = v101;
  if (v101) {
    atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((double *)v86 + 4) = v4;
  *((double *)v86 + 5) = v128;
  *((double *)v86 + 6) = v129;
  *(_OWORD *)(v86 + 7) = v134;
  uint64_t v102 = 288;
  if (!*(unsigned char *)a4) {
    uint64_t v102 = 0;
  }
  v86[9] = v135;
  v86[10] = v102;
  if (v123)
  {
    float v104 = v141;
    float v103 = v142;
    if (v142 != v141)
    {
      float v105 = (void *)*((void *)&v140 + 1);
      int v106 = v143;
      int v107 = HIBYTE(v143);
      if ((void)v140 && *(unsigned char *)(*((void *)&v140 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v140 + 64))();
      }
      if (v106 && !v107)
      {
        unint64_t v109 = (long long *)v105[7];
        __int16 v108 = (long long *)v105[8];
        if (v108 == v109) {
          unint64_t v109 = (long long *)(v105[10] - v105[9]);
        }
        if (v104 < v109) {
          unint64_t v109 = v104;
        }
        if (v108 <= v103) {
          __int16 v108 = v103;
        }
        if (v108 == v109) {
          __int16 v108 = (long long *)((char *)v109 + v105[10] - v105[9]);
        }
        v105[7] = v109;
        v105[8] = v108;
      }
    }
  }
  if (v149)
  {
    unint64_t v111 = v146;
    unint64_t v110 = v147;
    if (v147 != v146)
    {
      unint64_t v112 = (void *)*((void *)&v145 + 1);
      int v113 = v148;
      int v114 = BYTE1(v148);
      if ((void)v145 && *(unsigned char *)(*((void *)&v145 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v145 + 64))();
      }
      if (v113 && !v114)
      {
        unint64_t v116 = (void (**)(void **))v112[7];
        int v115 = (void (**)(void **))v112[8];
        if (v115 == v116) {
          unint64_t v116 = (void (**)(void **))(v112[10] - v112[9]);
        }
        if (v111 < v116) {
          unint64_t v116 = v111;
        }
        if (v115 <= v110) {
          int v115 = v110;
        }
        if (v115 == v116) {
          int v115 = (void (**)(void **))((char *)v116 + v112[10] - v112[9]);
        }
        float64x2_t v112[7] = v116;
        v112[8] = v115;
      }
    }
  }
  if (v101 && !atomic_fetch_add(&v101->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
    std::__shared_weak_count::__release_weak(v101);
  }
  unint64_t v117 = v139;
  if (v139 && !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
  uint64_t result = (uint64_t)v152;
  if (v152 == v151) {
    return (*(uint64_t (**)(void *))(v151[0] + 32))(v151);
  }
  if (v152) {
    return (*(uint64_t (**)(void *))(*v152 + 40))(v152);
  }
  return result;
}

void sub_1A25064F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0::~$_0(v37 - 216);
  md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0::~$_0((uint64_t)&a37);
  std::function<float ()(gm::Matrix<float,2,1> const&)>::~function((void *)(v37 - 248));
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<float ()(gm::Matrix<float,2,1> const&)>::swap[abi:nn180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    double v4 = (void *)result[3];
    float v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

float32x2_t md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_2::operator()(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float a5, float a6)
{
  float v11 = a2->f32[0];
  float v12 = a2->f32[1];
  float v13 = a2[1].f32[0];
  char v14 = *(unsigned __int8 **)(a1 + 32);
  if (v14[1])
  {
    double v15 = *(double *)(a1 + 16);
    double v57 = *(double *)(a1 + 8);
    long double v16 = v57 + v11;
    long double v17 = v15 + v12;
    double v18 = *(double *)(a1 + 24);
    long double v19 = v18 + v13;
    double v20 = sqrt(v16 * v16 + v17 * v17);
    double v21 = atan2(v19, v20 * 0.996647189);
    double v22 = atan2(v17, v16);
    __double2 v23 = __sincos_stret(v21);
    double v24 = atan2(v19 + v23.__sinval * v23.__sinval * 42841.3115 * v23.__sinval, v20 + v23.__cosval * v23.__cosval * -42697.6727 * v23.__cosval);
    __double2 v25 = __sincos_stret(v24);
    double v26 = v20 / v25.__cosval + -6378137.0 / sqrt(v25.__sinval * v25.__sinval * -0.00669437999 + 1.0);
    long double v27 = tan(v24 * 0.5 + 0.785398163);
    long double v28 = log(v27);
    double v29 = v22 * 0.159154943 + 0.5;
    double v30 = v28 * 0.159154943 + 0.5;
    int v31 = *v14;
    if (v31 == 2)
    {
      double v29 = v29 + a5;
      double v30 = v30 + a6;
    }
    else if (v31 == 1)
    {
      double v26 = v26 - *(float *)a1;
    }
    long double v35 = v29 * 6.28318531;
    long double v36 = exp(v30 * 6.28318531 + -3.14159265);
    double v37 = atan(v36) * 2.0 + -1.57079633;
    long double v38 = fmod(v35, 6.28318531);
    double v39 = fmod(v38 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v40 = __sincos_stret(v37);
    double v41 = 6378137.0 / sqrt(v40.__sinval * v40.__sinval * -0.00669437999 + 1.0);
    double v42 = (v41 + v26) * v40.__cosval;
    __double2 v43 = __sincos_stret(v39);
    float v44 = -(v57 - v42 * v43.__cosval);
    float v45 = -(v15 - v42 * v43.__sinval);
    float v46 = -(v18 + -(v26 + v41 * 0.99330562) * v40.__sinval);
    float v47 = *(float **)(a1 + 48);
    float v48 = v47[2];
    float v49 = fmaxf(v47[3], v44);
    float v50 = fminf(v47[1], v45);
    float *v47 = fminf(*v47, v44);
    v47[1] = v50;
    float v51 = v47[5];
    float v52 = fmaxf(v47[4], v45);
    v47[2] = fminf(v48, v46);
    v47[3] = v49;
    v47[4] = v52;
    v47[5] = fmaxf(v51, v46);
  }
  else
  {
    int v32 = *v14;
    float v33 = 0.0;
    if (v32 == 2)
    {
      float v53 = *(float *)(a1 + 40);
      float v54 = v53 * a5;
      float v33 = v53 * a6;
      float v34 = 0.0;
    }
    else
    {
      if (v32 == 1) {
        float v34 = -(float)(*(float *)a1 * *(float *)(a1 + 40));
      }
      else {
        float v34 = 0.0;
      }
      float v54 = 0.0;
    }
    float v44 = v54 + v11;
    float v45 = v33 + v12;
    float v46 = v34 + v13;
  }
  a3->f32[0] = v44;
  a3->f32[1] = v45;
  a3[1].f32[0] = v46;
  a3[1].i32[1] = 1065353216;
  float32x2_t result = vadd_f32(*a4, a2[2]);
  a3[2] = result;
  return result;
}

void *std::function<float ()(gm::Matrix<float,2,1> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

double std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_1,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_1>,float ()(gm::Matrix<float,2,1> const&)>::operator()()
{
  return 0.0;
}

void std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_1,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_1>,float ()(gm::Matrix<float,2,1> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF590B10;
}

void *std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_1,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_1>,float ()(gm::Matrix<float,2,1> const&)>::__clone()
{
  float32x2_t result = operator new(0x10uLL);
  *float32x2_t result = &unk_1EF590B10;
  return result;
}

void std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_1,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_1>,float ()(gm::Matrix<float,2,1> const&)>::~__func()
{
}

uint64_t std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::operator()(uint64_t a1, float32x2_t *a2)
{
  int v2 = 1 << *(unsigned char *)(a1 + 9);
  v3.i64[0] = *(int *)(a1 + 16);
  v3.i64[1] = v2 + ~*(_DWORD *)(a1 + 12);
  float64x2_t v7 = vmulq_n_f64(vaddq_f64(vcvtq_f64_s64(v3), vcvtq_f64_f32(*a2)), 1.0 / (double)v2);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4) {
    return (*(uint64_t (**)(uint64_t, float64x2_t *))(*(void *)v4 + 48))(v4, &v7);
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::destroy_deallocate(v6);
}

void std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::destroy_deallocate(char *__p)
{
  int v2 = __p + 32;
  int64x2_t v3 = (char *)*((void *)__p + 7);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t result = *(void *)(a1 + 56);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF590AC8;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  *(void *)(a2 + 12) = *(void *)(result + 12);
  uint64_t v3 = *(void *)(result + 56);
  if (v3)
  {
    if (v3 == result + 32)
    {
      *(void *)(a2 + 56) = a2 + 32;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(result + 56) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 16))(*(void *)(result + 56));
      *(void *)(a2 + 56) = result;
    }
  }
  else
  {
    *(void *)(a2 + 56) = 0;
  }
  return result;
}

char *std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x40uLL);
  *(void *)int v2 = &unk_1EF590AC8;
  *((_WORD *)v2 + 4) = *(_WORD *)(a1 + 8);
  *(void *)(v2 + 12) = *(void *)(a1 + 12);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    if (v3 == a1 + 32)
    {
      *((void *)v2 + 7) = v2 + 32;
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      return v2;
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  *((void *)v2 + 7) = v3;
  return v2;
}

void sub_1A2506F78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::~__func(void *a1)
{
  *a1 = &unk_1EF590AC8;
  uint64_t v1 = a1 + 4;
  int v2 = (void *)a1[7];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0,std::allocator<md::FlyoverTileBuilder::generateHeightMesh(geo::QuadTile const&,md::ElevationRaster const*,md::HeightMeshConfig const&)::$_0>,float ()(gm::Matrix<float,2,1> const&)>::~__func(void *a1)
{
  *a1 = &unk_1EF590AC8;
  int v2 = a1 + 4;
  uint64_t v3 = (void *)a1[7];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

__n128 md::imageSampleBilinear<float>(uint64_t a1, int a2, unsigned int a3, unsigned int a4, float32_t a5, float32x2_t a6)
{
  int32x2_t v6 = vadd_s32((int32x2_t)__PAIR64__(a3, a4), (int32x2_t)-1);
  a6.f32[1] = a5;
  float32x2_t v7 = vmul_f32(a6, vcvt_f32_s32(v6));
  int32x2_t v8 = vcvt_s32_f32(vrndm_f32(v7));
  int32x2_t v9 = vmin_s32(vmax_s32(v8, 0), v6);
  int32x2_t v10 = vmin_s32(vadd_s32(vmax_s32(v8, (int32x2_t)-1), (int32x2_t)0x100000001), v6);
  int v11 = 1;
  float v12 = 0.0;
  result.n128_u32[0] = 0;
  float v14 = 0.0;
  float v15 = 0.0;
  switch(a2)
  {
    case 0:
    case 22:
    case 23:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      int v11 = 0;
      if (a2 != 12) {
        goto LABEL_12;
      }
      goto LABEL_13;
    case 3:
    case 4:
    case 6:
    case 19:
    case 24:
    case 27:
    case 42:
    case 43:
      int v11 = 2;
      if (a2 == 12) {
        goto LABEL_13;
      }
      goto LABEL_12;
    case 5:
    case 7:
    case 8:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 26:
      int v11 = 4;
      if (a2 == 12) {
        goto LABEL_13;
      }
      goto LABEL_12;
    case 9:
    case 16:
    case 17:
      int v11 = 8;
      if (a2 == 12) {
        goto LABEL_13;
      }
      goto LABEL_12;
    case 10:
    case 11:
      int v11 = 3;
      goto LABEL_11;
    case 18:
    case 21:
      int v11 = 16;
      if (a2 == 12) {
        goto LABEL_13;
      }
      goto LABEL_12;
    case 58:
      goto LABEL_59;
    default:
LABEL_11:
      if (a2 == 12) {
        goto LABEL_13;
      }
LABEL_12:
      result.n128_u32[0] = 0;
      if (a2 == 2)
      {
LABEL_13:
        result.n128_u8[0] = *(unsigned char *)(a1 + v11 * (uint64_t)(int)(v9.i32[1] + v9.i32[0] * a3));
        result.n128_f32[0] = (float)result.n128_u32[0] * 0.0039216;
      }
      int v16 = 1;
      float v12 = 0.0;
      float v14 = 0.0;
      float v15 = 0.0;
      switch(a2)
      {
        case 0:
        case 22:
        case 23:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          int v16 = 0;
          if (a2 != 12) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 3:
        case 4:
        case 6:
        case 19:
        case 24:
        case 27:
        case 42:
        case 43:
          int v16 = 2;
          if (a2 == 12) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 5:
        case 7:
        case 8:
        case 12:
        case 13:
        case 14:
        case 15:
        case 20:
        case 26:
          int v16 = 4;
          if (a2 == 12) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 9:
        case 16:
        case 17:
          int v16 = 8;
          if (a2 == 12) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 10:
        case 11:
          int v16 = 3;
          goto LABEL_26;
        case 18:
        case 21:
          int v16 = 16;
          if (a2 == 12) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 58:
          break;
        default:
LABEL_26:
          if (a2 == 12) {
            goto LABEL_28;
          }
LABEL_27:
          float v14 = 0.0;
          if (a2 == 2)
          {
LABEL_28:
            LOBYTE(v14) = *(unsigned char *)(a1 + v16 * (uint64_t)(int)(v9.i32[1] + v10.i32[0] * a3));
            float v14 = (float)LODWORD(v14) * 0.0039216;
          }
          int v17 = 1;
          float v12 = 0.0;
          float v15 = 0.0;
          switch(a2)
          {
            case 0:
            case 22:
            case 23:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              int v17 = 0;
              if (a2 != 12) {
                goto LABEL_42;
              }
              goto LABEL_43;
            case 3:
            case 4:
            case 6:
            case 19:
            case 24:
            case 27:
            case 42:
            case 43:
              int v17 = 2;
              if (a2 == 12) {
                goto LABEL_43;
              }
              goto LABEL_42;
            case 5:
            case 7:
            case 8:
            case 12:
            case 13:
            case 14:
            case 15:
            case 20:
            case 26:
              int v17 = 4;
              if (a2 == 12) {
                goto LABEL_43;
              }
              goto LABEL_42;
            case 9:
            case 16:
            case 17:
              int v17 = 8;
              if (a2 == 12) {
                goto LABEL_43;
              }
              goto LABEL_42;
            case 10:
            case 11:
              int v17 = 3;
              goto LABEL_41;
            case 18:
            case 21:
              int v17 = 16;
              if (a2 == 12) {
                goto LABEL_43;
              }
              goto LABEL_42;
            case 58:
              goto LABEL_59;
            default:
LABEL_41:
              if (a2 == 12) {
                goto LABEL_43;
              }
LABEL_42:
              float v12 = 0.0;
              if (a2 == 2)
              {
LABEL_43:
                LOBYTE(v12) = *(unsigned char *)(a1 + v17 * (uint64_t)(int)(v10.i32[1] + v9.i32[0] * a3));
                float v12 = (float)LODWORD(v12) * 0.0039216;
              }
              float v15 = 0.0;
              int v18 = 1;
              switch(a2)
              {
                case 0:
                case 22:
                case 23:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                  int v18 = 0;
                  if (a2 != 12) {
                    goto LABEL_57;
                  }
                  goto LABEL_58;
                case 3:
                case 4:
                case 6:
                case 19:
                case 24:
                case 27:
                case 42:
                case 43:
                  int v18 = 2;
                  if (a2 == 12) {
                    goto LABEL_58;
                  }
                  goto LABEL_57;
                case 5:
                case 7:
                case 8:
                case 12:
                case 13:
                case 14:
                case 15:
                case 20:
                case 26:
                  int v18 = 4;
                  if (a2 == 12) {
                    goto LABEL_58;
                  }
                  goto LABEL_57;
                case 9:
                case 16:
                case 17:
                  int v18 = 8;
                  if (a2 == 12) {
                    goto LABEL_58;
                  }
                  goto LABEL_57;
                case 10:
                case 11:
                  int v18 = 3;
                  goto LABEL_56;
                case 18:
                case 21:
                  int v18 = 16;
                  if (a2 == 12) {
                    goto LABEL_58;
                  }
                  goto LABEL_57;
                case 58:
                  goto LABEL_59;
                default:
LABEL_56:
                  if (a2 == 12) {
                    goto LABEL_58;
                  }
LABEL_57:
                  if (a2 == 2)
                  {
LABEL_58:
                    LOBYTE(v15) = *(unsigned char *)(a1 + v18 * (uint64_t)(int)(v10.i32[1] + v10.i32[0] * a3));
                    float v15 = (float)LODWORD(v15) * 0.0039216;
                  }
                  break;
              }
              break;
          }
          break;
      }
LABEL_59:
      int32x2_t v19 = vceq_s32(v9, v10);
      if (v19.i32[1] & v19.i32[0]) {
        return result;
      }
      if (v19.i8[4])
      {
        float v20 = v7.f32[0] - (float)v9.i32[0];
        v7.f32[0] = (float)v10.i32[0] - v7.f32[0];
      }
      else
      {
        if (v19.i8[0])
        {
          result.n128_f32[0] = (float)(v12 * (float)(v7.f32[1] - (float)v9.i32[1]))
                             + (float)(result.n128_f32[0] * (float)((float)v10.i32[1] - v7.f32[1]));
          return result;
        }
        float v21 = v7.f32[1] - (float)v9.i32[1];
        float v20 = v7.f32[0] - (float)v9.i32[0];
        v7.f32[0] = (float)v10.i32[0] - v7.f32[0];
        float v22 = (float)v10.i32[1] - v7.f32[1];
        float v14 = (float)(v14 * v22) + (float)(v15 * v21);
        result.n128_f32[0] = (float)(v12 * v21) + (float)(result.n128_f32[0] * v22);
      }
      result.n128_f32[0] = (float)(result.n128_f32[0] * v7.f32[0]) + (float)(v14 * v20);
      return result;
  }
}

void *std::function<float ()(geo::Mercator2<double> const&)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t md::FlyoverTileBuilder::createIndexData(md::FlyoverTileBuilder *this, const geo::c3m::Mesh *a2)
{
  uint64_t v4 = (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 1;
  float v5 = operator new(0xF8uLL);
  v5[1] = 0;
  v5[2] = 0;
  *float v5 = &unk_1EF583D28;
  uint64_t result = ggl::BufferData::BufferData((uint64_t)(v5 + 3), 2, 1, 0, 7, v4);
  *((_DWORD *)v5 + 60) = 0;
  void v5[3] = &unk_1EF55B630;
  v5[4] = 2;
  v5[28] = &unk_1EF55B650;
  v5[29] = "Flyover IndexData";
  *(void *)this = result;
  *((void *)this + 1) = v5;
  uint64_t v7 = *((void *)a2 + 16);
  uint64_t v8 = *((void *)a2 + 17);
  unint64_t v9 = (v8 - v7) & 0xFFFFFFFFFFFFFFFELL;
  if (v9)
  {
    uint64_t v10 = v5[12];
    if (v8 == v7) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (v8 == v7) {
      goto LABEL_17;
    }
  }
  unint64_t v11 = (v8 - v7) >> 1;
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  if (v11 < 0x10 || (unint64_t)(v10 - v7) <= 0x1F)
  {
    unint64_t v13 = 0;
LABEL_15:
    unint64_t v18 = v11 - v13;
    uint64_t v19 = 2 * v13;
    float v20 = (_WORD *)(v10 + 2 * v13);
    float v21 = (__int16 *)(v7 + v19);
    do
    {
      __int16 v22 = *v21++;
      *v20++ = v22;
      --v18;
    }
    while (v18);
    goto LABEL_17;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFF0;
  float v14 = (_OWORD *)(v10 + 16);
  float v15 = (long long *)(v7 + 16);
  unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    long long v17 = *v15;
    *(v14 - 1) = *(v15 - 1);
    _OWORD *v14 = v17;
    v14 += 2;
    v15 += 2;
    v16 -= 16;
  }
  while (v16);
  if (v11 != v13) {
    goto LABEL_15;
  }
LABEL_17:
  if (v10 && v9)
  {
    if (v5[11] > v9) {
      unint64_t v9 = v5[11];
    }
    v5[10] = 0;
    v5[11] = v9;
  }
  return result;
}

float32_t md::imageSampleBilinear<geo::Color<float,4,(geo::ColorSpace)0>>(float32x4_t *a1, uint64_t a2, int a3, int a4, unsigned int a5, float32_t a6, float32x2_t a7)
{
  int32x2_t v11 = vadd_s32((int32x2_t)__PAIR64__(a4, a5), (int32x2_t)-1);
  a7.f32[1] = a6;
  float32x2_t v26 = vmul_f32(a7, vcvt_f32_s32(v11));
  int32x2_t v12 = vcvt_s32_f32(vrndm_f32(v26));
  int32x2_t v27 = vmin_s32(vmax_s32(v12, 0), v11);
  int32x2_t v28 = vmin_s32(vadd_s32(vmax_s32(v12, (int32x2_t)-1), (int32x2_t)0x100000001), v11);
  md::imageReadPixel(a2, a3, a4, v27.i32[1], v27.i32[0], v32.f32, *(float *)v28.i32, COERCE_FLOAT(1));
  md::imageReadPixel(a2, a3, a4, v27.i32[1], v28.i32[0], v31.f32, *(float *)v28.i32, v13);
  md::imageReadPixel(a2, a3, a4, v28.i32[1], v27.i32[0], v30.f32, *(float *)v28.i32, v14);
  md::imageReadPixel(a2, a3, a4, v28.i32[1], v28.i32[0], v29.f32, v15, v16);
  int32x2_t v17 = vceq_s32(v27, v28);
  if (v17.i32[1] & v17.i32[0])
  {
    v18.i32[0] = v32.i32[0];
    *a1 = v32;
  }
  else if (v17.i8[4])
  {
    float32x4_t v18 = vmlaq_n_f32(vmulq_n_f32(v31, v26.f32[0] - (float)v27.i32[0]), v32, (float)v28.i32[0] - v26.f32[0]);
    *a1 = v18;
  }
  else if (v17.i8[0])
  {
    v18.f32[0] = v26.f32[1] - (float)v27.i32[1];
    *a1 = vmlaq_n_f32(vmulq_n_f32(v32, (float)v28.i32[1] - v26.f32[1]), v30, v18.f32[0]);
  }
  else
  {
    float v19 = v26.f32[1] - (float)v27.i32[1];
    float v20 = v26.f32[0] - (float)v27.i32[0];
    float v21 = v20 * v19;
    float v22 = (float)v28.i32[0] - v26.f32[0];
    float v23 = (float)v28.i32[1] - v26.f32[1];
    float v24 = v23 * v20;
    v18.f32[0] = v22 * v23;
    *a1 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v29, v21), v30, v22 * v19), v31, v24), v32, v18.f32[0]);
  }
  return v18.f32[0];
}

void md::imageReadPixel(uint64_t a1, int a2, int a3, int a4, int a5, float *a6, float a7, float a8)
{
  int v10 = 1;
  switch(a2)
  {
    case 0:
    case 22:
    case 23:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      int v10 = 0;
      goto LABEL_8;
    case 3:
    case 4:
    case 6:
    case 19:
    case 24:
    case 27:
    case 42:
    case 43:
      int v10 = 2;
      goto LABEL_8;
    case 5:
    case 7:
    case 8:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 26:
      int v10 = 4;
      goto LABEL_8;
    case 9:
    case 16:
    case 17:
      int v10 = 8;
      goto LABEL_8;
    case 10:
    case 11:
      int v10 = 3;
      goto LABEL_8;
    case 18:
    case 21:
      int v10 = 16;
      goto LABEL_8;
    case 58:
      return;
    default:
LABEL_8:
      int32x2_t v11 = (unsigned char *)(a1 + v10 * (uint64_t)(a4 + a5 * a3));
      if (a2 == 24)
      {
        unsigned int v16 = *(unsigned __int16 *)v11;
        float v17 = (float)(v16 >> 11);
        float v18 = (float)((v16 >> 5) & 0x3F);
        float v19 = (float)(v16 & 0x1F);
        if ((float)(v17 * 0.032258) >= 0.04045) {
          float v15 = powf((float)(v17 * 0.030576) + 0.052133, 2.4);
        }
        else {
          float v15 = v17 * 0.0024968;
        }
        if ((float)(v18 * 0.015873) >= 0.04045) {
          float v20 = powf((float)(v18 * 0.015046) + 0.052133, 2.4);
        }
        else {
          float v20 = v18 * 0.0012286;
        }
        if ((float)(v19 * 0.032258) >= 0.04045) {
          float v22 = powf((float)(v19 * 0.030576) + 0.052133, 2.4);
        }
        else {
          float v22 = v19 * 0.0024968;
        }
        float v21 = 1.0;
      }
      else
      {
        if (a2 != 12) {
          return;
        }
        LOBYTE(a7) = *v11;
        float v12 = (float)LODWORD(a7);
        LOBYTE(a8) = v11[1];
        float v13 = (float)LODWORD(a8);
        LOBYTE(a8) = v11[2];
        float v14 = (float)LODWORD(a8);
        LOBYTE(v8) = v11[3];
        if ((float)(v12 * 0.0039216) >= 0.04045) {
          float v15 = powf((float)(v12 * 0.0037171) + 0.052133, 2.4);
        }
        else {
          float v15 = v12 * 0.00030353;
        }
        if ((float)(v13 * 0.0039216) >= 0.04045) {
          float v20 = powf((float)(v13 * 0.0037171) + 0.052133, 2.4);
        }
        else {
          float v20 = v13 * 0.00030353;
        }
        float v21 = (float)v8 * 0.0039216;
        if ((float)(v14 * 0.0039216) >= 0.04045) {
          float v22 = powf((float)(v14 * 0.0037171) + 0.052133, 2.4);
        }
        else {
          float v22 = v14 * 0.00030353;
        }
      }
      *a6 = v15;
      a6[1] = v20;
      a6[2] = v22;
      a6[3] = v21;
      return;
  }
}

void md::FlyoverTileBuilder::computeBounds(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)a1 = xmmword_1A28FC710;
  *(void *)(a1 + 16) = 0x80000000800000;
  unint64_t v8 = *(void *)(a4 + 48) - *(void *)(a4 + 40);
  unint64_t v9 = v8 % *(void *)(a4 + 8);
  if ((*(unsigned char *)(a4 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    float v24 = &v22;
    float v23 = &v24;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  if (v8 == v9) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)(a4 + 72);
  }
  unint64_t v11 = a2[1];
  BOOL v12 = v11 > *a2;
  unint64_t v13 = v11 - *a2;
  if (v12)
  {
    float v14 = (unsigned __int16 *)(*(void *)(a3 + 128) + 2 * *a2);
    int8x8_t v15 = (int8x8_t)0xFF7FFFFF7F7FFFFFLL;
    float32x2_t v16 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    float32x2_t v17 = (float32x2_t)0x80000000800000;
    do
    {
      unsigned int v18 = *v14++;
      uint64_t v19 = v10 + 32 * v18;
      float32x2_t v16 = vminnm_f32(*(float32x2_t *)v19, v16);
      int8x8_t v20 = (int8x8_t)vrev64_s32(*(int32x2_t *)v19);
      v21.i32[1] = v15.i32[1];
      v21.i32[0] = *(_DWORD *)(v19 + 8);
      v20.i32[0] = v21.i32[0];
      int8x8_t v15 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v20.u32[1], v15.u32[0]), v21), v20, v15);
      float32x2_t v17 = vmaxnm_f32(v17, *(float32x2_t *)(v19 + 4));
      --v13;
    }
    while (v13);
    *(float32x2_t *)a1 = v16;
    *(int8x8_t *)(a1 + 8) = v15;
    *(float32x2_t *)(a1 + 16) = v17;
  }
}

void *std::function<void ()(ggl::DaVinci::GroundPipelineSetup *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::DaVinci::GroundPipelineSetup * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::DaVinci::GroundNonCompressedPipelineSetup *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::DaVinci::GroundNonCompressedPipelineSetup * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::DaVinci::GroundDepthPipelineSetup *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::DaVinci::GroundDepthPipelineSetup * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::DaVinci::LinearDepthPipelineSetup *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::DaVinci::LinearDepthPipelineSetup * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::DaVinci::PackedLinearDepthPipelineSetup *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::DaVinci::PackedLinearDepthPipelineSetup * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::DaVinci::RibbonPipelineSetup *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::DaVinci::RibbonPipelineSetup * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::DaVinci::DecalPipelineSetup *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::DaVinci::DecalPipelineSetup * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::Tile::Clipping> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::Tile::Clipping> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::Style> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::Style> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> *)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> * ()(void)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void md::DaVinciRenderStateCache::~DaVinciRenderStateCache(md::DaVinciRenderStateCache *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = *(void *)this;
    if (v3 != v2)
    {
      do
      {
        float v5 = *(void (****)(void, uint64_t))(v3 - 8);
        *(void *)(v3 - 8) = 0;
        if (v5)
        {
          (**v5)(v5, v4);
          {
              operator new();
          }
          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                           + 40))(mdm::Allocator::instance(void)::alloc, v5, 216);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void *)this;
    }
    *((void *)this + 1) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v4, *((void *)this + 2) - v4);
  }
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::PackedLinearDepthPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::DaVinci::PackedLinearDepthPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::LinearDepthPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::DaVinci::LinearDepthPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::Tile::Clipping>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ConstantDataTyped<ggl::DaVinci::Style>>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::DecalPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::DaVinci::DecalPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::RibbonPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::DaVinci::RibbonPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::GroundDepthPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::DaVinci::GroundDepthPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::GroundNonCompressedPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::DaVinci::GroundNonCompressedPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::DaVinci::GroundPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::DaVinci::GroundPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5872F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5872F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::DownscaleTextureComputeShaderState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DownscaleTextureComputeShaderState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DownscaleTextureComputeShaderState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18GradientParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B4C0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18GradientParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28>,ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF51F100;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_28>,ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci21ColorCorrectionFactorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B5E0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci21ColorCorrectionFactorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27>,ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor> * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27>,ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF51F0B8;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_27>,ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci14ElevatedStrokeEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B430;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci14ElevatedStrokeEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26>,ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke> * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26>,ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF51F070;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_26>,ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci5StyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B628;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci5StyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25>,ggl::ConstantDataTyped<ggl::DaVinci::Style> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF51F028;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_25>,ggl::ConstantDataTyped<ggl::DaVinci::Style> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci13MaterialStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B3E8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci13MaterialStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24>,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24>,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF51EFE0;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_24>,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci11RibbonStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B3A0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci11RibbonStyleEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23>,ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle> * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23>,ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF51EF98;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_23>,ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci16PlanarParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B478;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci16PlanarParametersEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22>,ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters> * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22>,ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF51EF50;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_22>,ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_4Tile8ClippingEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF521548;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_4Tile8ClippingEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21>,ggl::ConstantDataTyped<ggl::Tile::Clipping> * ()(void)>::operator()()
{
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21>,ggl::ConstantDataTyped<ggl::Tile::Clipping> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF51EF08;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_21>,ggl::ConstantDataTyped<ggl::Tile::Clipping> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci17LandCoverSettingsEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF521590;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci17LandCoverSettingsEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20>,ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings> * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20>,ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF51EEC0;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_20>,ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings> * ()(void)>::~__func()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19>,ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo> * ()(void)>::operator()()
{
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19>,ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF5780A8;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_19>,ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci10StyleColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B358;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci10StyleColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18>,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF578060;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_18>,ggl::ConstantDataTyped<ggl::DaVinci::StyleColor> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci9StyleSSAOEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B670;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci9StyleSSAOEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17>,ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO> * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17>,ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF578018;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_17>,ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleEmissiveColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B508;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleEmissiveColorEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16>,ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor> * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16>,ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF577FD0;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_16>,ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleRouteLineMaskEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B550;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci18StyleRouteLineMaskEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15>,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15>,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF577F88;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_15>,ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci20StyleGroundOcclusionEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B598;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_7DaVinci20StyleGroundOcclusionEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14>,ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion> * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14>,ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion> * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF577F40;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_14>,ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion> * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci18DecalPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C2D0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci18DecalPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13>,ggl::DaVinci::DecalPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A250C64C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::DecalPipelineState,std::shared_ptr<ggl::DaVinciDecalShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  char v163 = a5 | a6;
  v31.i64[1] = (a5 | a6);
  *(__int32 *)((char *)&v31.i32[2] + 1) = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  int8x16_t v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9E0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  int8x16_t v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC6E0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  int8x16_t v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9D0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  int8x16_t v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9C0);
  int8x16_t v37 = vceqzq_s8(v31);
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  int32x4_t v39 = vmovl_high_s16(v38);
  int16x8_t v40 = vmovl_high_s8(v37);
  int32x4_t v41 = vmovl_high_s16(v40);
  int32x4_t v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  int32x4_t v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  int8x16_t v44 = vbicq_s8((int8x16_t)xmmword_1A28FCA60, (int8x16_t)v32);
  int8x16_t v45 = vceqzq_s8((int8x16_t)v30);
  int16x8_t v46 = vmovl_high_s8(v45);
  int32x4_t v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  int16x8_t v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  int32x4_t v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  int8x16_t v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA70, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA80, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  int32x4_t v52 = vmovl_high_s16(v46);
  int8x16_t v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_1A28FCA50, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA90, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  int32x4_t v55 = vmovl_high_s16(v48);
  int8x16_t v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_1A28FCA40, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAA0, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  int8x16_t v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_1A28FCA30, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  int8x16_t v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9B0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAB0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  int8x16_t v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_1A28FCA20, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  int8x16_t v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9A0);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  int8x16_t v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAC0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  int8x16_t v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_1A28FCA10, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  int8x16_t v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC990);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  int8x16_t v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAD0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  int8x16_t v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_1A28FCA00, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  int8x16_t v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC980);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  int8x16_t v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAE0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  int64x2_t v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_1A28FC9F0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  unint64_t v71 = v70.i64[0];
  int32x2_t v73 = (uint64_t **)(a2 + 104);
  float v72 = *(void **)(a2 + 104);
  if (!v72) {
    goto LABEL_12;
  }
  __int16 v74 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v75 = v72[4];
    BOOL v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0]) {
      int v77 = v72;
    }
    else {
      int v77 = v72 + 1;
    }
    if (v76) {
      __int16 v74 = (uint64_t **)v72;
    }
    float v72 = (void *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    uint64_t v161 = v74[6];
    a1[1] = (std::__shared_weak_count *)v161;
    if (v161) {
      atomic_fetch_add_explicit(v161 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    int64x2_t v164 = v70;
    double v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5894E0;
    float v79 = v78 + 1;
    long long v167 = *(_OWORD *)(a2 + 16);
    long long v168 = *(_OWORD *)(a2 + 32);
    {
      if (v162)
      {
        {
          if (v162)
          {
            {
              {
                ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::compressedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::attributesReflection(void)::r;
              unk_1EB318618 = 1;
            }
            ggl::DaVinci::DecalPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::CompressedPositionVbo>::typedReflection(void)::r;
            {
              ggl::DaVinci::pipelineDataDecalPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::UVs::reflection(void)::reflection;
            }
            qword_1E957E000 = (uint64_t)&ggl::DaVinci::pipelineDataDecalPipelineDeviceStructs(void)::ref;
            *(void *)algn_1E957E008 = 1;
            {
              ggl::DaVinci::pipelineDataDecalPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1E957E120 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1E957E128 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1E957E130 = ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              qword_1E957E138 = (uint64_t)ggl::Lighting::LightConfigurationVertex::reflection(void)::reflection;
              unk_1E957E140 = ggl::DaVinci::Style::reflection(void)::reflection;
              qword_1E957E148 = (uint64_t)ggl::DaVinci::StyleShadow::reflection(void)::reflection;
              unk_1E957E150 = ggl::DaVinci::StyleColor::reflection(void)::reflection;
              qword_1E957E158 = (uint64_t)ggl::DaVinci::StyleRouteLineMask::reflection(void)::reflection;
            }
            qword_1E957E010 = (uint64_t)&ggl::DaVinci::pipelineDataDecalPipelineConstantStructs(void)::ref;
            unk_1E957E018 = xmmword_1A28FF600;
          }
        }
        ggl::DaVinci::DecalPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::DecalPipelineSetup::typedReflection(void)::ref;
        ggl::DaVinciDecalShader::typedReflection(v162);
        qword_1E957E038 = (uint64_t)&ggl::DaVinciDecalShader::typedReflection(void)::ref;
        {
          ggl::DaVinci::pipelineStateDecalPipelineAttributeStructBinding(void)::attr = 0;
          unk_1E957E3B0 = 0;
          qword_1E957E3B8 = (uint64_t)"";
          dword_1E957E3C0 = 0;
          qword_1E957E3C8 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineAttributeBinding_0(void)::attr;
          unk_1E957E3D0 = 2;
        }
        qword_1E957E040 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineAttributeStructBinding(void)::attr;
        *(void *)algn_1E957E048 = 1;
        qword_1E957E050 = 0;
        unk_1E957E058 = 4;
        {
          ggl::DaVinci::pipelineStateDecalPipelineDeviceStructBinding(void)::ref = 0;
          *(void *)algn_1E957E1C8 = 0;
          qword_1E957E1D0 = (uint64_t)"uvs";
          dword_1E957E1D8 = 2;
          qword_1E957E1E0 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineDeviceUvsBinding(void)::reflection;
          unk_1E957E1E8 = 0;
        }
        qword_1E957E060 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineDeviceStructBinding(void)::ref;
        *(void *)algn_1E957E068 = 1;
        {
          ggl::DaVinci::pipelineStateDecalPipelineConstantStructBinding(void)::ref = 0;
          *(void *)algn_1E957E1F8 = 0;
          qword_1E957E200 = (uint64_t)"view";
          dword_1E957E208 = 3;
          qword_1E957E210 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantViewBinding(void)::reflection;
          unk_1E957E218 = xmmword_1A28FCEB0;
          qword_1E957E228 = 1;
          unk_1E957E230 = "transform";
          dword_1E957E238 = 3;
          qword_1E957E240 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantTransformBinding(void)::reflection;
          unk_1E957E248 = xmmword_1A28FCF70;
          qword_1E957E258 = 2;
          unk_1E957E260 = "shadow";
          dword_1E957E268 = 3;
          qword_1E957E270 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantShadowBinding(void)::reflection;
          unk_1E957E278 = xmmword_1A28FC950;
          qword_1E957E288 = 3;
          unk_1E957E290 = "positionScaleInfo";
          dword_1E957E298 = 3;
          qword_1E957E2A0 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantPositionScaleInfoBinding(void)::reflection;
          unk_1E957E2A8 = xmmword_1A28FC960;
          qword_1E957E2B8 = 4;
          unk_1E957E2C0 = "lightConfigAmbient";
          dword_1E957E2C8 = 3;
          qword_1E957E2D0 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantLightConfigAmbientBinding(void)::reflection;
          unk_1E957E2D8 = xmmword_1A28FE180;
          qword_1E957E2E8 = 5;
          unk_1E957E2F0 = "style";
          dword_1E957E2F8 = 3;
          qword_1E957E300 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantStyleBinding(void)::reflection;
          xmmword_1E957E308 = xmmword_1A28FF490;
          qword_1E957E318 = 6;
          unk_1E957E320 = "shadowStyle";
          dword_1E957E328 = 3;
          qword_1E957E330 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantShadowStyleBinding(void)::reflection;
          xmmword_1E957E338 = xmmword_1A28FF610;
          qword_1E957E348 = 7;
          unk_1E957E350 = "styleColor";
          dword_1E957E358 = 3;
          qword_1E957E360 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantStyleColorBinding(void)::reflection;
          xmmword_1E957E368 = xmmword_1A28FF4A0;
          qword_1E957E378 = 8;
          unk_1E957E380 = "routeLineMaskStyle";
          dword_1E957E388 = 3;
          qword_1E957E390 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantRouteLineMaskStyleBinding(void)::reflection;
          unk_1E957E398 = 1;
        }
        qword_1E957E070 = (uint64_t)&ggl::DaVinci::pipelineStateDecalPipelineConstantStructBinding(void)::ref;
        *(void *)algn_1E957E078 = 9;
      }
    }
    int64x2_t v80 = v164;
    v80.i8[13] = a13;
    float v81 = *(std::__shared_weak_count_vtbl **)a2;
    uint64_t v82 = *(std::__shared_weak_count **)(a2 + 8);
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[14] = a14;
    *(_OWORD *)long long v169 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v169[12] = *(_OWORD *)(a2 + 60);
    long long v83 = *(_OWORD *)(a2 + 76);
    char v84 = *(unsigned char *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::DecalPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v81;
    v78[3].__shared_owners_ = (uint64_t)v82;
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v167;
    *(_OWORD *)&v78[12].__shared_owners_ = v168;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v169[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v169;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v83;
    BYTE4(v78[5].__shared_owners_) = v84;
    if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int64x2_t v165 = v80;
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      int64x2_t v80 = v165;
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v80;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v163;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    int8x16_t v85 = *(int8x16_t *)&v78[14].__shared_owners_;
    int8x16_t v86 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    int16x8_t v87 = vmovl_high_s8(v86);
    int32x4_t v88 = vmovl_s16(*(int16x4_t *)v87.i8);
    v89.i64[0] = v88.u32[0];
    v89.i64[1] = v88.u32[1];
    int8x16_t v90 = v89;
    int16x8_t v91 = vmovl_s8(*(int8x8_t *)v86.i8);
    int32x4_t v92 = vmovl_s16(*(int16x4_t *)v91.i8);
    v89.i64[0] = v92.u32[0];
    v89.i64[1] = v92.u32[1];
    int8x16_t v93 = v89;
    int32x4_t v94 = vmovl_high_s16(v87);
    int32x4_t v95 = vmovl_high_s16(v91);
    v89.i64[0] = v95.u32[2];
    v89.i64[1] = v95.u32[3];
    int8x16_t v96 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v89);
    v89.i64[0] = v94.u32[0];
    v89.i64[1] = v94.u32[1];
    int8x16_t v97 = v89;
    v89.i64[0] = v95.u32[0];
    v89.i64[1] = v95.u32[1];
    int8x16_t v98 = v89;
    v89.i64[0] = v88.u32[2];
    v89.i64[1] = v88.u32[3];
    int8x16_t v99 = v89;
    v89.i64[0] = v92.u32[2];
    v89.i64[1] = v92.u32[3];
    int8x16_t v100 = v89;
    v89.i64[0] = v94.u32[2];
    v89.i64[1] = v94.u32[3];
    int8x16_t v101 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v89);
    int8x16_t v102 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v100);
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF560F68;
    LOBYTE(v78[15].__vftable) = a24;
    BYTE1(v78[15].__vftable) = a25;
    BYTE2(v78[15].__vftable) = a26;
    BYTE3(v78[15].__vftable) = a27;
    WORD2(v78[15].__vftable) = a28;
    HIWORD(v78[15].__vftable) = a29;
    int8x16_t v103 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v97);
    int8x16_t v104 = vceqzq_s8(v85);
    int16x8_t v105 = vmovl_high_s8(v104);
    int32x4_t v106 = vmovl_s16(*(int16x4_t *)v105.i8);
    v89.i64[0] = v106.u32[0];
    v89.i64[1] = v106.u32[1];
    int8x16_t v107 = v89;
    int16x8_t v108 = vmovl_s8(*(int8x8_t *)v104.i8);
    int32x4_t v109 = vmovl_s16(*(int16x4_t *)v108.i8);
    v89.i64[0] = v109.u32[0];
    v89.i64[1] = v109.u32[1];
    int8x16_t v110 = v89;
    int32x4_t v111 = vmovl_high_s16(v105);
    v89.i64[0] = v111.u32[0];
    v89.i64[1] = v111.u32[1];
    int8x16_t v112 = v89;
    int32x4_t v113 = vmovl_high_s16(v108);
    v89.i64[0] = v113.u32[0];
    v89.i64[1] = v113.u32[1];
    int8x16_t v114 = v89;
    v89.i64[0] = v106.u32[2];
    v89.i64[1] = v106.u32[3];
    int8x16_t v115 = v89;
    v89.i64[0] = v109.u32[2];
    v89.i64[1] = v109.u32[3];
    int8x16_t v116 = v89;
    v89.i64[0] = v111.u32[2];
    v89.i64[1] = v111.u32[3];
    int8x16_t v117 = v89;
    v89.i64[0] = v113.u32[2];
    v89.i64[1] = v113.u32[3];
    int8x16_t v118 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v117);
    int8x16_t v119 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v107), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v90));
    int8x16_t v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v110), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v93));
    int8x16_t v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v112), v103);
    int8x16_t v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v114), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v98));
    int8x16_t v123 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v115), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v99));
    int8x16_t v124 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v116), v102);
    int8x16_t v125 = vorrq_s8(v118, v101);
    int8x16_t v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v89), v96);
    int8x16_t v127 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    int16x8_t v128 = vmovl_s8(*(int8x8_t *)v127.i8);
    int32x4_t v129 = vmovl_high_s16(v128);
    v89.i64[0] = v129.i32[2];
    v89.i64[1] = v129.i32[3];
    int8x16_t v130 = v89;
    int16x8_t v131 = vmovl_high_s8(v127);
    int32x4_t v132 = vmovl_high_s16(v131);
    v89.i64[0] = v132.i32[2];
    v89.i64[1] = v132.i32[3];
    int8x16_t v133 = v89;
    int32x4_t v134 = vmovl_s16(*(int16x4_t *)v128.i8);
    v89.i64[0] = v134.i32[2];
    v89.i64[1] = v134.i32[3];
    int8x16_t v135 = v89;
    int32x4_t v136 = vmovl_s16(*(int16x4_t *)v131.i8);
    v89.i64[0] = v136.i32[2];
    v89.i64[1] = v136.i32[3];
    int8x16_t v137 = v89;
    v89.i64[0] = v129.i32[0];
    v89.i64[1] = v129.i32[1];
    int8x16_t v138 = v89;
    v89.i64[0] = v132.i32[0];
    v89.i64[1] = v132.i32[1];
    int8x16_t v139 = v89;
    v89.i64[0] = v134.i32[0];
    v89.i64[1] = v134.i32[1];
    int8x16_t v140 = v89;
    v89.i64[0] = v136.i32[0];
    v89.i64[1] = v136.i32[1];
    int8x16_t v141 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v89);
    int8x16_t v142 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    int16x8_t v143 = vmovl_high_s8(v142);
    int32x4_t v144 = vmovl_s16(*(int16x4_t *)v143.i8);
    v89.i64[0] = v144.i32[0];
    v89.i64[1] = v144.i32[1];
    int8x16_t v145 = v89;
    int16x8_t v146 = vmovl_s8(*(int8x8_t *)v142.i8);
    int32x4_t v147 = vmovl_s16(*(int16x4_t *)v146.i8);
    v89.i64[0] = v147.i32[0];
    v89.i64[1] = v147.i32[1];
    int8x16_t v148 = v89;
    int32x4_t v149 = vmovl_high_s16(v143);
    v89.i64[0] = v149.i32[0];
    v89.i64[1] = v149.i32[1];
    int8x16_t v150 = v89;
    int32x4_t v151 = vmovl_high_s16(v146);
    v89.i64[0] = v151.i32[0];
    v89.i64[1] = v151.i32[1];
    int8x16_t v152 = v89;
    v89.i64[0] = v144.i32[2];
    v89.i64[1] = v144.i32[3];
    int8x16_t v153 = v89;
    v89.i64[0] = v147.i32[2];
    v89.i64[1] = v147.i32[3];
    int8x16_t v154 = v89;
    v89.i64[0] = v149.i32[2];
    v89.i64[1] = v149.i32[3];
    int8x16_t v155 = v89;
    v89.i64[0] = v151.i32[2];
    v89.i64[1] = v151.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v148), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v140)), v120), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v145), v141), v119)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v152), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v138)), v122), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v150),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v139)),
                                                    v121))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v154), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v135)), v124), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v153), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v137)), v123)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v89), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v130)), v126), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v155),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v133)),
                                                    v125)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v79;
    a1[1] = v78;
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v156 = *v73;
    long long v157 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          long long v157 = (uint64_t **)v156;
          unint64_t v158 = v156[4];
          if (v71 >= v158) {
            break;
          }
          uint64_t v156 = *v157;
          int32x2_t v73 = v157;
          if (!*v157) {
            goto LABEL_27;
          }
        }
        if (v158 >= v71) {
          break;
        }
        uint64_t v156 = v157[1];
        if (!v156)
        {
          int32x2_t v73 = v157 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_27:
      unint64_t v159 = (uint64_t *)operator new(0x38uLL);
      v159[4] = v71;
      v159[5] = (uint64_t)v79;
      v159[6] = (uint64_t)v78;
      *unint64_t v159 = 0;
      v159[1] = 0;
      v159[2] = (uint64_t)v157;
      *int32x2_t v73 = v159;
      uint64_t v160 = **(void **)(a2 + 96);
      if (v160)
      {
        *(void *)(a2 + 96) = v160;
        unint64_t v159 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v159);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A250D634(_Unwind_Exception *a1)
{
  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::DecalPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::DecalPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5894E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::DecalPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5894E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13>,ggl::DaVinci::DecalPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577EF8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_13>,ggl::DaVinci::DecalPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci19RibbonPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C318;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci19RibbonPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::DaVinci::RibbonPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A250D8FC(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::RibbonPipelineState,std::shared_ptr<ggl::DaVinciRibbonShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  char v163 = a5 | a6;
  v31.i64[1] = (a5 | a6);
  *(__int32 *)((char *)&v31.i32[2] + 1) = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  int8x16_t v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9E0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  int8x16_t v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC6E0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  int8x16_t v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9D0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  int8x16_t v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9C0);
  int8x16_t v37 = vceqzq_s8(v31);
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  int32x4_t v39 = vmovl_high_s16(v38);
  int16x8_t v40 = vmovl_high_s8(v37);
  int32x4_t v41 = vmovl_high_s16(v40);
  int32x4_t v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  int32x4_t v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  int8x16_t v44 = vbicq_s8((int8x16_t)xmmword_1A28FCA60, (int8x16_t)v32);
  int8x16_t v45 = vceqzq_s8((int8x16_t)v30);
  int16x8_t v46 = vmovl_high_s8(v45);
  int32x4_t v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  int16x8_t v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  int32x4_t v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  int8x16_t v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA70, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA80, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  int32x4_t v52 = vmovl_high_s16(v46);
  int8x16_t v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_1A28FCA50, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA90, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  int32x4_t v55 = vmovl_high_s16(v48);
  int8x16_t v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_1A28FCA40, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAA0, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  int8x16_t v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_1A28FCA30, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  int8x16_t v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9B0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAB0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  int8x16_t v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_1A28FCA20, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  int8x16_t v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9A0);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  int8x16_t v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAC0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  int8x16_t v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_1A28FCA10, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  int8x16_t v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC990);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  int8x16_t v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAD0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  int8x16_t v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_1A28FCA00, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  int8x16_t v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC980);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  int8x16_t v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAE0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  int64x2_t v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_1A28FC9F0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  unint64_t v71 = v70.i64[0];
  int32x2_t v73 = (uint64_t **)(a2 + 104);
  float v72 = *(void **)(a2 + 104);
  if (!v72) {
    goto LABEL_12;
  }
  __int16 v74 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v75 = v72[4];
    BOOL v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0]) {
      int v77 = v72;
    }
    else {
      int v77 = v72 + 1;
    }
    if (v76) {
      __int16 v74 = (uint64_t **)v72;
    }
    float v72 = (void *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    uint64_t v161 = v74[6];
    a1[1] = (std::__shared_weak_count *)v161;
    if (v161) {
      atomic_fetch_add_explicit(v161 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    int64x2_t v164 = v70;
    double v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589550;
    float v79 = v78 + 1;
    long long v167 = *(_OWORD *)(a2 + 16);
    long long v168 = *(_OWORD *)(a2 + 32);
    {
      if (v162)
      {
        {
          if (v162)
          {
            {
              {
                ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::ribbonVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::attributesReflection(void)::r;
              unk_1E958E238 = 1;
            }
            ggl::DaVinci::RibbonPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::typedReflection(void)::r;
            *(void *)algn_1E957E088 = &ggl::DaVinci::pipelineDataRibbonPipelineDeviceStructs(void)::ref;
            qword_1E957E090 = 0;
            {
              ggl::DaVinci::pipelineDataRibbonPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1E957E170 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1E957E178 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1E957E180 = ggl::Lighting::LightConfigurationVertex::reflection(void)::reflection;
              qword_1E957E188 = (uint64_t)ggl::DaVinci::Style::reflection(void)::reflection;
              unk_1E957E190 = ggl::DaVinci::StyleSunMatrix::reflection(void)::reflection;
              qword_1E957E198 = (uint64_t)ggl::Tile::PositionScaleInfo::reflection(void)::reflection;
              unk_1E957E1A0 = ggl::DaVinci::RibbonStyle::reflection(void)::reflection;
              qword_1E957E1A8 = (uint64_t)ggl::DaVinci::StyleShadow::reflection(void)::reflection;
              unk_1E957E1B0 = ggl::DaVinci::StyleColor::reflection(void)::reflection;
              qword_1E957E1B8 = (uint64_t)ggl::DaVinci::StyleRouteLineMask::reflection(void)::reflection;
            }
            qword_1E957E098 = (uint64_t)&ggl::DaVinci::pipelineDataRibbonPipelineConstantStructs(void)::ref;
            unk_1E957E0A0 = xmmword_1A28FF620;
          }
        }
        ggl::DaVinci::RibbonPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::RibbonPipelineSetup::typedReflection(void)::ref;
        ggl::DaVinciRibbonShader::typedReflection(v162);
        qword_1E957E0C0 = (uint64_t)&ggl::DaVinciRibbonShader::typedReflection(void)::ref;
        {
          ggl::DaVinci::pipelineStateRibbonPipelineAttributeStructBinding(void)::attr = 0;
          unk_1E957E5F0 = 0;
          qword_1E957E5F8 = (uint64_t)"";
          dword_1E957E600 = 0;
          qword_1E957E608 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineAttributeBinding_0(void)::attr;
          unk_1E957E610 = 4;
        }
        qword_1E957E0C8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineAttributeStructBinding(void)::attr;
        unk_1E957E0D0 = 1;
        qword_1E957E0D8 = 0;
        unk_1E957E0E0 = 4;
        qword_1E957E0E8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineDeviceStructBinding(void)::ref;
        unk_1E957E0F0 = 0;
        {
          ggl::DaVinci::pipelineStateRibbonPipelineConstantStructBinding(void)::ref = 0;
          unk_1E957E3E0 = 0;
          qword_1E957E3E8 = (uint64_t)"view";
          dword_1E957E3F0 = 3;
          qword_1E957E3F8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantViewBinding(void)::reflection;
          unk_1E957E400 = xmmword_1A28FCEB0;
          qword_1E957E410 = 1;
          unk_1E957E418 = "transform";
          dword_1E957E420 = 3;
          qword_1E957E428 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantTransformBinding(void)::reflection;
          *(_OWORD *)algn_1E957E430 = xmmword_1A28FCF70;
          qword_1E957E440 = 2;
          unk_1E957E448 = "shadow";
          dword_1E957E450 = 3;
          qword_1E957E458 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantShadowBinding(void)::reflection;
          unk_1E957E460 = xmmword_1A28FC950;
          qword_1E957E470 = 3;
          unk_1E957E478 = "lightConfigAmbient";
          dword_1E957E480 = 3;
          qword_1E957E488 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantLightConfigAmbientBinding(void)::reflection;
          *(_OWORD *)algn_1E957E490 = xmmword_1A28FD5F0;
          qword_1E957E4A0 = 4;
          unk_1E957E4A8 = "style";
          dword_1E957E4B0 = 3;
          qword_1E957E4B8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantStyleBinding(void)::reflection;
          unk_1E957E4C0 = xmmword_1A28FCF80;
          qword_1E957E4D0 = 5;
          unk_1E957E4D8 = "sunMatrix";
          dword_1E957E4E0 = 3;
          qword_1E957E4E8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantSunMatrixBinding(void)::reflection;
          xmmword_1E957E4F0 = xmmword_1A28FF490;
          qword_1E957E500 = 6;
          unk_1E957E508 = "positionScaleInfo";
          dword_1E957E510 = 3;
          qword_1E957E518 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantPositionScaleInfoBinding(void)::reflection;
          xmmword_1E957E520 = xmmword_1A28FE160;
          qword_1E957E530 = 7;
          unk_1E957E538 = "ribbonStyle";
          dword_1E957E540 = 3;
          qword_1E957E548 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantRibbonStyleBinding(void)::reflection;
          xmmword_1E957E550 = xmmword_1A28FC9A0;
          qword_1E957E560 = 8;
          unk_1E957E568 = "shadowStyle";
          dword_1E957E570 = 3;
          qword_1E957E578 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantShadowStyleBinding(void)::reflection;
          xmmword_1E957E580 = xmmword_1A28FF630;
          qword_1E957E590 = 9;
          unk_1E957E598 = "styleColor";
          dword_1E957E5A0 = 3;
          qword_1E957E5A8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantStyleColorBinding(void)::reflection;
          xmmword_1E957E5B0 = xmmword_1A28FF4C0;
          qword_1E957E5C0 = 10;
          unk_1E957E5C8 = "routeLineMaskStyle";
          dword_1E957E5D0 = 3;
          qword_1E957E5D8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantRouteLineMaskStyleBinding(void)::reflection;
          qword_1E957E5E0 = 1;
        }
        qword_1E957E0F8 = (uint64_t)&ggl::DaVinci::pipelineStateRibbonPipelineConstantStructBinding(void)::ref;
        unk_1E957E100 = 11;
      }
    }
    int64x2_t v80 = v164;
    v80.i8[13] = a13;
    float v81 = *(std::__shared_weak_count_vtbl **)a2;
    uint64_t v82 = *(std::__shared_weak_count **)(a2 + 8);
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[14] = a14;
    *(_OWORD *)long long v169 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v169[12] = *(_OWORD *)(a2 + 60);
    long long v83 = *(_OWORD *)(a2 + 76);
    char v84 = *(unsigned char *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::RibbonPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v81;
    v78[3].__shared_owners_ = (uint64_t)v82;
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v167;
    *(_OWORD *)&v78[12].__shared_owners_ = v168;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v169[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v169;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v83;
    BYTE4(v78[5].__shared_owners_) = v84;
    if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int64x2_t v165 = v80;
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      int64x2_t v80 = v165;
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v80;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v163;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    int8x16_t v85 = *(int8x16_t *)&v78[14].__shared_owners_;
    int8x16_t v86 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    int16x8_t v87 = vmovl_high_s8(v86);
    int32x4_t v88 = vmovl_s16(*(int16x4_t *)v87.i8);
    v89.i64[0] = v88.u32[0];
    v89.i64[1] = v88.u32[1];
    int8x16_t v90 = v89;
    int16x8_t v91 = vmovl_s8(*(int8x8_t *)v86.i8);
    int32x4_t v92 = vmovl_s16(*(int16x4_t *)v91.i8);
    v89.i64[0] = v92.u32[0];
    v89.i64[1] = v92.u32[1];
    int8x16_t v93 = v89;
    int32x4_t v94 = vmovl_high_s16(v87);
    int32x4_t v95 = vmovl_high_s16(v91);
    v89.i64[0] = v95.u32[2];
    v89.i64[1] = v95.u32[3];
    int8x16_t v96 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v89);
    v89.i64[0] = v94.u32[0];
    v89.i64[1] = v94.u32[1];
    int8x16_t v97 = v89;
    v89.i64[0] = v95.u32[0];
    v89.i64[1] = v95.u32[1];
    int8x16_t v98 = v89;
    v89.i64[0] = v88.u32[2];
    v89.i64[1] = v88.u32[3];
    int8x16_t v99 = v89;
    v89.i64[0] = v92.u32[2];
    v89.i64[1] = v92.u32[3];
    int8x16_t v100 = v89;
    v89.i64[0] = v94.u32[2];
    v89.i64[1] = v94.u32[3];
    int8x16_t v101 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v89);
    int8x16_t v102 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v100);
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF561008;
    LOBYTE(v78[15].__vftable) = a24;
    BYTE1(v78[15].__vftable) = a25;
    BYTE2(v78[15].__vftable) = a26;
    BYTE3(v78[15].__vftable) = a27;
    WORD2(v78[15].__vftable) = a28;
    HIWORD(v78[15].__vftable) = a29;
    int8x16_t v103 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v97);
    int8x16_t v104 = vceqzq_s8(v85);
    int16x8_t v105 = vmovl_high_s8(v104);
    int32x4_t v106 = vmovl_s16(*(int16x4_t *)v105.i8);
    v89.i64[0] = v106.u32[0];
    v89.i64[1] = v106.u32[1];
    int8x16_t v107 = v89;
    int16x8_t v108 = vmovl_s8(*(int8x8_t *)v104.i8);
    int32x4_t v109 = vmovl_s16(*(int16x4_t *)v108.i8);
    v89.i64[0] = v109.u32[0];
    v89.i64[1] = v109.u32[1];
    int8x16_t v110 = v89;
    int32x4_t v111 = vmovl_high_s16(v105);
    v89.i64[0] = v111.u32[0];
    v89.i64[1] = v111.u32[1];
    int8x16_t v112 = v89;
    int32x4_t v113 = vmovl_high_s16(v108);
    v89.i64[0] = v113.u32[0];
    v89.i64[1] = v113.u32[1];
    int8x16_t v114 = v89;
    v89.i64[0] = v106.u32[2];
    v89.i64[1] = v106.u32[3];
    int8x16_t v115 = v89;
    v89.i64[0] = v109.u32[2];
    v89.i64[1] = v109.u32[3];
    int8x16_t v116 = v89;
    v89.i64[0] = v111.u32[2];
    v89.i64[1] = v111.u32[3];
    int8x16_t v117 = v89;
    v89.i64[0] = v113.u32[2];
    v89.i64[1] = v113.u32[3];
    int8x16_t v118 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v117);
    int8x16_t v119 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v107), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v90));
    int8x16_t v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v110), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v93));
    int8x16_t v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v112), v103);
    int8x16_t v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v114), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v98));
    int8x16_t v123 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v115), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v99));
    int8x16_t v124 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v116), v102);
    int8x16_t v125 = vorrq_s8(v118, v101);
    int8x16_t v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v89), v96);
    int8x16_t v127 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    int16x8_t v128 = vmovl_s8(*(int8x8_t *)v127.i8);
    int32x4_t v129 = vmovl_high_s16(v128);
    v89.i64[0] = v129.i32[2];
    v89.i64[1] = v129.i32[3];
    int8x16_t v130 = v89;
    int16x8_t v131 = vmovl_high_s8(v127);
    int32x4_t v132 = vmovl_high_s16(v131);
    v89.i64[0] = v132.i32[2];
    v89.i64[1] = v132.i32[3];
    int8x16_t v133 = v89;
    int32x4_t v134 = vmovl_s16(*(int16x4_t *)v128.i8);
    v89.i64[0] = v134.i32[2];
    v89.i64[1] = v134.i32[3];
    int8x16_t v135 = v89;
    int32x4_t v136 = vmovl_s16(*(int16x4_t *)v131.i8);
    v89.i64[0] = v136.i32[2];
    v89.i64[1] = v136.i32[3];
    int8x16_t v137 = v89;
    v89.i64[0] = v129.i32[0];
    v89.i64[1] = v129.i32[1];
    int8x16_t v138 = v89;
    v89.i64[0] = v132.i32[0];
    v89.i64[1] = v132.i32[1];
    int8x16_t v139 = v89;
    v89.i64[0] = v134.i32[0];
    v89.i64[1] = v134.i32[1];
    int8x16_t v140 = v89;
    v89.i64[0] = v136.i32[0];
    v89.i64[1] = v136.i32[1];
    int8x16_t v141 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v89);
    int8x16_t v142 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    int16x8_t v143 = vmovl_high_s8(v142);
    int32x4_t v144 = vmovl_s16(*(int16x4_t *)v143.i8);
    v89.i64[0] = v144.i32[0];
    v89.i64[1] = v144.i32[1];
    int8x16_t v145 = v89;
    int16x8_t v146 = vmovl_s8(*(int8x8_t *)v142.i8);
    int32x4_t v147 = vmovl_s16(*(int16x4_t *)v146.i8);
    v89.i64[0] = v147.i32[0];
    v89.i64[1] = v147.i32[1];
    int8x16_t v148 = v89;
    int32x4_t v149 = vmovl_high_s16(v143);
    v89.i64[0] = v149.i32[0];
    v89.i64[1] = v149.i32[1];
    int8x16_t v150 = v89;
    int32x4_t v151 = vmovl_high_s16(v146);
    v89.i64[0] = v151.i32[0];
    v89.i64[1] = v151.i32[1];
    int8x16_t v152 = v89;
    v89.i64[0] = v144.i32[2];
    v89.i64[1] = v144.i32[3];
    int8x16_t v153 = v89;
    v89.i64[0] = v147.i32[2];
    v89.i64[1] = v147.i32[3];
    int8x16_t v154 = v89;
    v89.i64[0] = v149.i32[2];
    v89.i64[1] = v149.i32[3];
    int8x16_t v155 = v89;
    v89.i64[0] = v151.i32[2];
    v89.i64[1] = v151.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v148), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v140)), v120), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v145), v141), v119)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v152), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v138)), v122), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v150),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v139)),
                                                    v121))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v154), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v135)), v124), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v153), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v137)), v123)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v89), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v130)), v126), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v155),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v133)),
                                                    v125)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v79;
    a1[1] = v78;
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v156 = *v73;
    long long v157 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          long long v157 = (uint64_t **)v156;
          unint64_t v158 = v156[4];
          if (v71 >= v158) {
            break;
          }
          uint64_t v156 = *v157;
          int32x2_t v73 = v157;
          if (!*v157) {
            goto LABEL_27;
          }
        }
        if (v158 >= v71) {
          break;
        }
        uint64_t v156 = v157[1];
        if (!v156)
        {
          int32x2_t v73 = v157 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_27:
      unint64_t v159 = (uint64_t *)operator new(0x38uLL);
      v159[4] = v71;
      v159[5] = (uint64_t)v79;
      v159[6] = (uint64_t)v78;
      *unint64_t v159 = 0;
      v159[1] = 0;
      v159[2] = (uint64_t)v157;
      *int32x2_t v73 = v159;
      uint64_t v160 = **(void **)(a2 + 96);
      if (v160)
      {
        *(void *)(a2 + 96) = v160;
        unint64_t v159 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v159);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A250E8A8(_Unwind_Exception *a1)
{
  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::RibbonPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::RibbonPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::RibbonPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::DaVinci::RibbonPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577EB0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_12>,ggl::DaVinci::RibbonPipelineSetup * ()(void)>::~__func()
{
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11>,void ()(ggl::DaVinci::PackedLinearDepthPipelineSetup *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF577E68;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_11>,void ()(ggl::DaVinci::PackedLinearDepthPipelineSetup *)>::~__func()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::DaVinci::PackedLinearDepthPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A250EB74(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::PackedLinearDepthPipelineState,std::shared_ptr<ggl::PackedLinearDepthShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, __int16 a9, unsigned __int16 a10, unsigned __int16 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,char a27,unsigned __int16 a28,unsigned __int16 a29)
{
  BYTE2(v30) = 0;
  v31.i8[0] = 0;
  v31.i8[1] = a16;
  v31.i16[1] = __PAIR16__(a18, a17);
  v31.i16[2] = __PAIR16__(a20, a19);
  v31.i16[3] = __PAIR16__(a22, a21);
  char v163 = a5 | a6;
  v31.i64[1] = (a5 | a6);
  *(__int32 *)((char *)&v31.i32[2] + 1) = a14 ^ 1;
  v31.i16[5] = a10 ^ 1;
  v31.i16[7] = __PAIR16__(a24, a23);
  LOWORD(v30) = __PAIR16__(a26, a25);
  BYTE3(v30) = a27;
  HIDWORD(v30) = __PAIR32__(a29, a28);
  v32.i64[0] = a10;
  v32.i64[1] = HIBYTE(a10);
  int8x16_t v33 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9E0);
  v32.i64[0] = a3;
  v32.i64[1] = a4;
  int8x16_t v34 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC6E0);
  v32.i64[0] = a12;
  v32.i64[1] = a13;
  int8x16_t v35 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9D0);
  v32.i64[0] = a7;
  v32.i64[1] = a8;
  int8x16_t v36 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9C0);
  int8x16_t v37 = vceqzq_s8(v31);
  int16x8_t v38 = vmovl_s8(*(int8x8_t *)v37.i8);
  int32x4_t v39 = vmovl_high_s16(v38);
  int16x8_t v40 = vmovl_high_s8(v37);
  int32x4_t v41 = vmovl_high_s16(v40);
  int32x4_t v42 = vmovl_s16(*(int16x4_t *)v38.i8);
  int32x4_t v43 = vmovl_s16(*(int16x4_t *)v40.i8);
  v32.i64[0] = v43.u32[0];
  v32.i64[1] = v43.u32[1];
  int8x16_t v44 = vbicq_s8((int8x16_t)xmmword_1A28FCA60, (int8x16_t)v32);
  int8x16_t v45 = vceqzq_s8((int8x16_t)v30);
  int16x8_t v46 = vmovl_high_s8(v45);
  int32x4_t v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v32.i64[0] = v47.i32[0];
  v32.i64[1] = v47.i32[1];
  int16x8_t v48 = vmovl_s8(*(int8x8_t *)v45.i8);
  int32x4_t v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  int8x16_t v50 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA70, (int8x16_t)v32), v33), v44);
  v32.i64[0] = v49.i32[0];
  v32.i64[1] = v49.i32[1];
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA80, (int8x16_t)v32), v34);
  v32.i64[0] = v42.u32[0];
  v32.i64[1] = v42.u32[1];
  int32x4_t v52 = vmovl_high_s16(v46);
  int8x16_t v53 = vorrq_s8(v51, vbicq_s8((int8x16_t)xmmword_1A28FCA50, (int8x16_t)v32));
  v32.i64[0] = v52.i32[0];
  v32.i64[1] = v52.i32[1];
  int8x16_t v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA90, (int8x16_t)v32), v35);
  v32.i64[0] = v41.u32[0];
  v32.i64[1] = v41.u32[1];
  int32x4_t v55 = vmovl_high_s16(v48);
  int8x16_t v56 = vorrq_s8(v54, vbicq_s8((int8x16_t)xmmword_1A28FCA40, (int8x16_t)v32));
  v32.i64[0] = v55.i32[0];
  v32.i64[1] = v55.i32[1];
  int8x16_t v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAA0, (int8x16_t)v32), v36);
  v32.i64[0] = v39.u32[0];
  v32.i64[1] = v39.u32[1];
  int8x16_t v58 = vorrq_s8(v57, vbicq_s8((int8x16_t)xmmword_1A28FCA30, (int8x16_t)v32));
  v32.i64[0] = a11;
  v32.i64[1] = HIBYTE(a11);
  int8x16_t v59 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9B0);
  v32.i64[0] = v47.i32[2];
  v32.i64[1] = v47.i32[3];
  int8x16_t v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAB0, (int8x16_t)v32), v59);
  v32.i64[0] = v43.u32[2];
  v32.i64[1] = v43.u32[3];
  int8x16_t v61 = vorrq_s8(v60, vbicq_s8((int8x16_t)xmmword_1A28FCA20, (int8x16_t)v32));
  v32.i64[0] = a5;
  v32.i64[1] = a6;
  int8x16_t v62 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC9A0);
  v32.i64[0] = v49.i32[2];
  v32.i64[1] = v49.i32[3];
  int8x16_t v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAC0, (int8x16_t)v32), v62);
  v32.i64[0] = v42.u32[2];
  v32.i64[1] = v42.u32[3];
  int8x16_t v64 = vorrq_s8(v63, vbicq_s8((int8x16_t)xmmword_1A28FCA10, (int8x16_t)v32));
  v32.i64[0] = a14;
  v32.i64[1] = a15;
  int8x16_t v65 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC990);
  v32.i64[0] = v52.i32[2];
  v32.i64[1] = v52.i32[3];
  int8x16_t v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAD0, (int8x16_t)v32), v65);
  v32.i64[0] = v41.u32[2];
  v32.i64[1] = v41.u32[3];
  int8x16_t v67 = vorrq_s8(v66, vbicq_s8((int8x16_t)xmmword_1A28FCA00, (int8x16_t)v32));
  v32.i64[0] = a9;
  v32.i64[1] = HIBYTE(a9);
  int8x16_t v68 = vandq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v32, 0x3FuLL)), (int8x16_t)xmmword_1A28FC980);
  v32.i64[0] = v55.i32[2];
  v32.i64[1] = v55.i32[3];
  int8x16_t v69 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAE0, (int8x16_t)v32), v68);
  v32.i64[0] = v39.u32[2];
  v32.i64[1] = v39.u32[3];
  int64x2_t v70 = (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(v53, v50), vorrq_s8(v58, v56)), vorrq_s8(vorrq_s8(v64, v61), vorrq_s8(vorrq_s8(v69, vbicq_s8((int8x16_t)xmmword_1A28FC9F0, (int8x16_t)v32)), v67)));
  v70.i64[0] = vaddvq_s64(v70);
  unint64_t v71 = v70.i64[0];
  int32x2_t v73 = (uint64_t **)(a2 + 104);
  float v72 = *(void **)(a2 + 104);
  if (!v72) {
    goto LABEL_12;
  }
  __int16 v74 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v75 = v72[4];
    BOOL v76 = v75 >= v70.i64[0];
    if (v75 >= v70.i64[0]) {
      int v77 = v72;
    }
    else {
      int v77 = v72 + 1;
    }
    if (v76) {
      __int16 v74 = (uint64_t **)v72;
    }
    float v72 = (void *)*v77;
  }
  while (*v77);
  if (v74 != v73 && v70.i64[0] >= (unint64_t)v74[4])
  {
    *a1 = (std::__shared_weak_count *)v74[5];
    uint64_t v161 = v74[6];
    a1[1] = (std::__shared_weak_count *)v161;
    if (v161) {
      atomic_fetch_add_explicit(v161 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    v70.i8[0] = a3;
    v70.i8[1] = a4;
    v70.i8[2] = a5;
    v70.i8[3] = a6;
    v70.i8[4] = a7;
    v70.i8[5] = a8;
    v70.i16[3] = a9;
    v70.i32[2] = __PAIR32__(a11, a10);
    v70.i8[12] = a12;
    int64x2_t v164 = v70;
    double v78 = (std::__shared_weak_count *)operator new(0x198uLL);
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589780;
    float v79 = v78 + 1;
    long long v167 = *(_OWORD *)(a2 + 16);
    long long v168 = *(_OWORD *)(a2 + 32);
    {
      if (v162)
      {
        {
          if (v162)
          {
            {
              {
                ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::packedPositionVboReflection;
              }
              ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::attributesReflection(void)::r;
              *(void *)algn_1EB3185F0 = 1;
            }
            ggl::DaVinci::PackedLinearDepthPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::PackedPositionVbo>::typedReflection(void)::r;
            {
              ggl::DaVinci::pipelineDataPackedLinearDepthPipelineDeviceStructs(void)::ref = (uint64_t)ggl::DaVinci::InstanceTransform::reflection(void)::reflection;
              *(void *)algn_1E958F578 = ggl::DaVinci::Elevations::reflection(void)::reflection;
            }
            qword_1E958F2D8 = (uint64_t)&ggl::DaVinci::pipelineDataPackedLinearDepthPipelineDeviceStructs(void)::ref;
            unk_1E958F2E0 = 2;
            {
              ggl::DaVinci::pipelineDataPackedLinearDepthPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              unk_1E958F590 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1E958F598 = (uint64_t)ggl::DaVinci::Shadow::reflection(void)::reflection;
              unk_1E958F5A0 = ggl::Tile::LinearDepth::reflection(void)::reflection;
              qword_1E958F5A8 = (uint64_t)ggl::Tile::Clipping::reflection(void)::reflection;
            }
            qword_1E958F2E8 = (uint64_t)&ggl::DaVinci::pipelineDataPackedLinearDepthPipelineConstantStructs(void)::ref;
            *(_OWORD *)algn_1E958F2F0 = xmmword_1A28FE2F0;
          }
        }
        ggl::DaVinci::PackedLinearDepthPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::DaVinci::PackedLinearDepthPipelineSetup::typedReflection(void)::ref;
        ggl::PackedLinearDepthShader::typedReflection(v162);
        qword_1E958F280 = (uint64_t)&ggl::PackedLinearDepthShader::typedReflection(void)::ref;
        {
          ggl::DaVinci::pipelineStatePackedLinearDepthPipelineAttributeStructBinding(void)::attr = 0;
          unk_1E958F3D0 = 0;
          qword_1E958F3D8 = (uint64_t)"";
          dword_1E958F3E0 = 0;
          qword_1E958F3E8 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineAttributeBinding_0(void)::attr;
          unk_1E958F3F0 = 1;
        }
        qword_1E958F288 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineAttributeStructBinding(void)::attr;
        unk_1E958F290 = 1;
        qword_1E958F298 = 0;
        unk_1E958F2A0 = 0;
        {
          ggl::DaVinci::pipelineStatePackedLinearDepthPipelineDeviceStructBinding(void)::ref = 0;
          *(void *)algn_1E958F408 = 0;
          qword_1E958F410 = (uint64_t)"instanceTransform";
          dword_1E958F418 = 2;
          qword_1E958F420 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineDeviceInstanceTransformBinding(void)::reflection;
          unk_1E958F428 = xmmword_1A28FC760;
          qword_1E958F438 = 1;
          unk_1E958F440 = "elevations";
          dword_1E958F448 = 2;
          qword_1E958F450 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineDeviceElevationsBinding(void)::reflection;
          unk_1E958F458 = 0;
        }
        qword_1E958F2A8 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineDeviceStructBinding(void)::ref;
        unk_1E958F2B0 = 2;
        {
          ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantStructBinding(void)::ref = 0;
          unk_1E958F480 = 0;
          qword_1E958F488 = (uint64_t)"view";
          dword_1E958F490 = 3;
          qword_1E958F498 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantViewBinding(void)::reflection;
          unk_1E958F4A0 = xmmword_1A28FCEB0;
          qword_1E958F4B0 = 1;
          unk_1E958F4B8 = "transform";
          dword_1E958F4C0 = 3;
          qword_1E958F4C8 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantTransformBinding(void)::reflection;
          *(_OWORD *)algn_1E958F4D0 = xmmword_1A28FCF70;
          qword_1E958F4E0 = 2;
          unk_1E958F4E8 = "shadow";
          dword_1E958F4F0 = 3;
          qword_1E958F4F8 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantShadowBinding(void)::reflection;
          unk_1E958F500 = xmmword_1A28FC950;
          qword_1E958F510 = 3;
          unk_1E958F518 = "linearDepth";
          dword_1E958F520 = 3;
          qword_1E958F528 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantLinearDepthBinding(void)::reflection;
          *(_OWORD *)algn_1E958F530 = xmmword_1A28FD5F0;
          qword_1E958F540 = 4;
          unk_1E958F548 = "tileClipping";
          dword_1E958F550 = 3;
          qword_1E958F558 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantTileClippingBinding(void)::reflection;
          unk_1E958F560 = 2;
        }
        qword_1E958F2B8 = (uint64_t)&ggl::DaVinci::pipelineStatePackedLinearDepthPipelineConstantStructBinding(void)::ref;
        unk_1E958F2C0 = 5;
      }
    }
    int64x2_t v80 = v164;
    v80.i8[13] = a13;
    float v81 = *(std::__shared_weak_count_vtbl **)a2;
    uint64_t v82 = *(std::__shared_weak_count **)(a2 + 8);
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[14] = a14;
    *(_OWORD *)long long v169 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v169[12] = *(_OWORD *)(a2 + 60);
    long long v83 = *(_OWORD *)(a2 + 76);
    char v84 = *(unsigned char *)(a2 + 92);
    v78[1].__shared_weak_owners_ = 0;
    v78[2].__vftable = 0;
    LODWORD(v78[2].__shared_owners_) = 0;
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v78[1].__shared_owners_ = 0;
    v78[2].__shared_weak_owners_ = (uint64_t)&ggl::DaVinci::PackedLinearDepthPipelineState::typedReflection(void)::ref;
    v78[3].__vftable = v81;
    v78[3].__shared_owners_ = (uint64_t)v82;
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v80.i8[15] = a15;
    LOBYTE(v78[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v78[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v78[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v78[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v78[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v78[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v78[11].__shared_weak_owners_ = v167;
    *(_OWORD *)&v78[12].__shared_owners_ = v168;
    LOBYTE(v78[13].__vftable) = 0;
    v78[16].__vftable = 0;
    *(_OWORD *)&v78[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v78[15].__shared_owners_ = 0u;
    *(_OWORD *)&v78[13].__shared_owners_ = 0u;
    v78[14].std::__shared_count = 0u;
    v78[16].__shared_owners_ = 0x100000001;
    LOBYTE(v78[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v78[4].std::__shared_count + 4) = *(std::__shared_count *)&v169[12];
    *(_OWORD *)&v78[3].__shared_weak_owners_ = *(_OWORD *)v169;
    *(_OWORD *)((char *)&v78[4].__shared_weak_owners_ + 4) = v83;
    BYTE4(v78[5].__shared_owners_) = v84;
    if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int64x2_t v165 = v80;
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      int64x2_t v80 = v165;
    }
    *(int64x2_t *)((char *)&v78[13].__shared_weak_owners_ + 1) = v80;
    BYTE1(v78[14].__shared_owners_) = 0;
    BYTE2(v78[14].__shared_owners_) = a16;
    BYTE3(v78[14].__shared_owners_) = a17;
    BYTE4(v78[14].__shared_owners_) = a18;
    BYTE5(v78[14].__shared_owners_) = a19;
    BYTE6(v78[14].__shared_owners_) = a20;
    HIBYTE(v78[14].__shared_owners_) = a21;
    LOBYTE(v78[14].__shared_weak_owners_) = a22;
    BYTE1(v78[14].__shared_weak_owners_) = v163;
    BYTE2(v78[14].__shared_weak_owners_) = a14 ^ 1;
    BYTE3(v78[14].__shared_weak_owners_) = a10 ^ 1;
    WORD2(v78[14].__shared_weak_owners_) = 0;
    BYTE6(v78[14].__shared_weak_owners_) = 0;
    HIBYTE(v78[14].__shared_weak_owners_) = a23;
    int8x16_t v85 = *(int8x16_t *)&v78[14].__shared_owners_;
    int8x16_t v86 = vceqzq_s8(*(int8x16_t *)&v78[13].__shared_weak_owners_);
    int16x8_t v87 = vmovl_high_s8(v86);
    int32x4_t v88 = vmovl_s16(*(int16x4_t *)v87.i8);
    v89.i64[0] = v88.u32[0];
    v89.i64[1] = v88.u32[1];
    int8x16_t v90 = v89;
    int16x8_t v91 = vmovl_s8(*(int8x8_t *)v86.i8);
    int32x4_t v92 = vmovl_s16(*(int16x4_t *)v91.i8);
    v89.i64[0] = v92.u32[0];
    v89.i64[1] = v92.u32[1];
    int8x16_t v93 = v89;
    int32x4_t v94 = vmovl_high_s16(v87);
    int32x4_t v95 = vmovl_high_s16(v91);
    v89.i64[0] = v95.u32[2];
    v89.i64[1] = v95.u32[3];
    int8x16_t v96 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v89);
    v89.i64[0] = v94.u32[0];
    v89.i64[1] = v94.u32[1];
    int8x16_t v97 = v89;
    v89.i64[0] = v95.u32[0];
    v89.i64[1] = v95.u32[1];
    int8x16_t v98 = v89;
    v89.i64[0] = v88.u32[2];
    v89.i64[1] = v88.u32[3];
    int8x16_t v99 = v89;
    v89.i64[0] = v92.u32[2];
    v89.i64[1] = v92.u32[3];
    int8x16_t v100 = v89;
    v89.i64[0] = v94.u32[2];
    v89.i64[1] = v94.u32[3];
    int8x16_t v101 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v89);
    int8x16_t v102 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v100);
    v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5612E8;
    LOBYTE(v78[15].__vftable) = a24;
    BYTE1(v78[15].__vftable) = a25;
    BYTE2(v78[15].__vftable) = a26;
    BYTE3(v78[15].__vftable) = a27;
    WORD2(v78[15].__vftable) = a28;
    HIWORD(v78[15].__vftable) = a29;
    int8x16_t v103 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v97);
    int8x16_t v104 = vceqzq_s8(v85);
    int16x8_t v105 = vmovl_high_s8(v104);
    int32x4_t v106 = vmovl_s16(*(int16x4_t *)v105.i8);
    v89.i64[0] = v106.u32[0];
    v89.i64[1] = v106.u32[1];
    int8x16_t v107 = v89;
    int16x8_t v108 = vmovl_s8(*(int8x8_t *)v104.i8);
    int32x4_t v109 = vmovl_s16(*(int16x4_t *)v108.i8);
    v89.i64[0] = v109.u32[0];
    v89.i64[1] = v109.u32[1];
    int8x16_t v110 = v89;
    int32x4_t v111 = vmovl_high_s16(v105);
    v89.i64[0] = v111.u32[0];
    v89.i64[1] = v111.u32[1];
    int8x16_t v112 = v89;
    int32x4_t v113 = vmovl_high_s16(v108);
    v89.i64[0] = v113.u32[0];
    v89.i64[1] = v113.u32[1];
    int8x16_t v114 = v89;
    v89.i64[0] = v106.u32[2];
    v89.i64[1] = v106.u32[3];
    int8x16_t v115 = v89;
    v89.i64[0] = v109.u32[2];
    v89.i64[1] = v109.u32[3];
    int8x16_t v116 = v89;
    v89.i64[0] = v111.u32[2];
    v89.i64[1] = v111.u32[3];
    int8x16_t v117 = v89;
    v89.i64[0] = v113.u32[2];
    v89.i64[1] = v113.u32[3];
    int8x16_t v118 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v117);
    int8x16_t v119 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v107), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v90));
    int8x16_t v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v110), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v93));
    int8x16_t v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v112), v103);
    int8x16_t v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v114), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v98));
    int8x16_t v123 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v115), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v99));
    int8x16_t v124 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v116), v102);
    int8x16_t v125 = vorrq_s8(v118, v101);
    int8x16_t v126 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v89), v96);
    int8x16_t v127 = vceqzq_s8((int8x16_t)v78[15].std::__shared_count);
    int16x8_t v128 = vmovl_s8(*(int8x8_t *)v127.i8);
    int32x4_t v129 = vmovl_high_s16(v128);
    v89.i64[0] = v129.i32[2];
    v89.i64[1] = v129.i32[3];
    int8x16_t v130 = v89;
    int16x8_t v131 = vmovl_high_s8(v127);
    int32x4_t v132 = vmovl_high_s16(v131);
    v89.i64[0] = v132.i32[2];
    v89.i64[1] = v132.i32[3];
    int8x16_t v133 = v89;
    int32x4_t v134 = vmovl_s16(*(int16x4_t *)v128.i8);
    v89.i64[0] = v134.i32[2];
    v89.i64[1] = v134.i32[3];
    int8x16_t v135 = v89;
    int32x4_t v136 = vmovl_s16(*(int16x4_t *)v131.i8);
    v89.i64[0] = v136.i32[2];
    v89.i64[1] = v136.i32[3];
    int8x16_t v137 = v89;
    v89.i64[0] = v129.i32[0];
    v89.i64[1] = v129.i32[1];
    int8x16_t v138 = v89;
    v89.i64[0] = v132.i32[0];
    v89.i64[1] = v132.i32[1];
    int8x16_t v139 = v89;
    v89.i64[0] = v134.i32[0];
    v89.i64[1] = v134.i32[1];
    int8x16_t v140 = v89;
    v89.i64[0] = v136.i32[0];
    v89.i64[1] = v136.i32[1];
    int8x16_t v141 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v89);
    int8x16_t v142 = vceqzq_s8(*(int8x16_t *)&v78[15].__shared_weak_owners_);
    int16x8_t v143 = vmovl_high_s8(v142);
    int32x4_t v144 = vmovl_s16(*(int16x4_t *)v143.i8);
    v89.i64[0] = v144.i32[0];
    v89.i64[1] = v144.i32[1];
    int8x16_t v145 = v89;
    int16x8_t v146 = vmovl_s8(*(int8x8_t *)v142.i8);
    int32x4_t v147 = vmovl_s16(*(int16x4_t *)v146.i8);
    v89.i64[0] = v147.i32[0];
    v89.i64[1] = v147.i32[1];
    int8x16_t v148 = v89;
    int32x4_t v149 = vmovl_high_s16(v143);
    v89.i64[0] = v149.i32[0];
    v89.i64[1] = v149.i32[1];
    int8x16_t v150 = v89;
    int32x4_t v151 = vmovl_high_s16(v146);
    v89.i64[0] = v151.i32[0];
    v89.i64[1] = v151.i32[1];
    int8x16_t v152 = v89;
    v89.i64[0] = v144.i32[2];
    v89.i64[1] = v144.i32[3];
    int8x16_t v153 = v89;
    v89.i64[0] = v147.i32[2];
    v89.i64[1] = v147.i32[3];
    int8x16_t v154 = v89;
    v89.i64[0] = v149.i32[2];
    v89.i64[1] = v149.i32[3];
    int8x16_t v155 = v89;
    v89.i64[0] = v151.i32[2];
    v89.i64[1] = v151.i32[3];
    v78[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v148), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v140)), v120), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v145), v141), v119)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v152), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v138)), v122), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v150),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v139)),
                                                    v121))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v154), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v135)), v124), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v153), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v137)), v123)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v89), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v130)), v126), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v155),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v133)),
                                                    v125)))));
    LOBYTE(v78[13].__vftable) = 1;
    *a1 = v79;
    a1[1] = v78;
    atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v156 = *v73;
    long long v157 = (uint64_t **)(a2 + 104);
    if (*v73)
    {
      while (1)
      {
        while (1)
        {
          long long v157 = (uint64_t **)v156;
          unint64_t v158 = v156[4];
          if (v71 >= v158) {
            break;
          }
          uint64_t v156 = *v157;
          int32x2_t v73 = v157;
          if (!*v157) {
            goto LABEL_27;
          }
        }
        if (v158 >= v71) {
          break;
        }
        uint64_t v156 = v157[1];
        if (!v156)
        {
          int32x2_t v73 = v157 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    else
    {
LABEL_27:
      unint64_t v159 = (uint64_t *)operator new(0x38uLL);
      v159[4] = v71;
      v159[5] = (uint64_t)v79;
      v159[6] = (uint64_t)v78;
      *unint64_t v159 = 0;
      v159[1] = 0;
      v159[2] = (uint64_t)v157;
      *int32x2_t v73 = v159;
      uint64_t v160 = **(void **)(a2 + 96);
      if (v160)
      {
        *(void *)(a2 + 96) = v160;
        unint64_t v159 = *v73;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v159);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A250FAAC(_Unwind_Exception *a1)
{
  md::components::Material::~Material((md::components::Material *)(v2 - 192));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::PackedLinearDepthPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::PackedLinearDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::PackedLinearDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::DaVinci::PackedLinearDepthPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577E20;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_10>,ggl::DaVinci::PackedLinearDepthPipelineSetup * ()(void)>::~__func()
{
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,void ()(ggl::DaVinci::LinearDepthPipelineSetup *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF577DD8;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,void ()(ggl::DaVinci::LinearDepthPipelineSetup *)>::~__func()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::DaVinci::LinearDepthPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A250FD78(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::DaVinci::LinearDepthPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577D90;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::DaVinci::LinearDepthPipelineSetup * ()(void)>::~__func()
{
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,void ()(ggl::DaVinci::GroundShadowMapPipelineSetup *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF577D48;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,void ()(ggl::DaVinci::GroundShadowMapPipelineSetup *)>::~__func()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::DaVinci::GroundShadowMapPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A250FFAC(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::DaVinci::GroundShadowMapPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577D00;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::DaVinci::GroundShadowMapPipelineSetup * ()(void)>::~__func()
{
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::DaVinci::GroundDepthPipelineSetup *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF577CB8;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,void ()(ggl::DaVinci::GroundDepthPipelineSetup *)>::~__func()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::DaVinci::GroundDepthPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A25101E0(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::DaVinci::GroundDepthPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577C70;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::DaVinci::GroundDepthPipelineSetup * ()(void)>::~__func()
{
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::DaVinci::GroundNonCompressedPipelineSetup *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF577C28;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,void ()(ggl::DaVinci::GroundNonCompressedPipelineSetup *)>::~__func()
{
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::GroundNonCompressedPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A2510488(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::GroundNonCompressedPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577BE0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::DaVinci::GroundNonCompressedPipelineSetup * ()(void)>::~__func()
{
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::DaVinci::GroundPipelineSetup *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF577B98;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::DaVinci::GroundPipelineSetup *)>::~__func()
{
}

void *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::GroundPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577B50;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::GroundPipelineSetup * ()(void)>::~__func()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5875D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5875D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5873A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5873A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::LinearDepthPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::LinearDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::LinearDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::GroundDepthPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundDepthPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::GroundNonCompressedPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundNonCompressedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundNonCompressedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::GroundPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GroundPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<ggl::SamplerState *,std::shared_ptr<ggl::SamplerState>::__shared_ptr_default_delete<ggl::SamplerState,ggl::SamplerState>,std::allocator<ggl::SamplerState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::SamplerState *,std::shared_ptr<ggl::SamplerState>::__shared_ptr_default_delete<ggl::SamplerState,ggl::SamplerState>,std::allocator<ggl::SamplerState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::DaVinciGroundRenderResources::debugTextureForAttribute(uint64_t a1, unsigned int a2)
{
  unint64_t v5 = a2;
  unint64_t v6 = *(void *)(a1 + 2640);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = a2;
      if (v6 <= a2) {
        unint64_t v8 = a2 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)(a1 + 2632) + 8 * v8);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          unint64_t v11 = v6 - 1;
          while (1)
          {
            uint64_t v13 = v10[1];
            if (v13 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                goto LABEL_103;
              }
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_21;
            }
          }
        }
        do
        {
          unint64_t v12 = v10[1];
          if (v12 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              goto LABEL_103;
            }
          }
          else
          {
            if (v12 >= v6) {
              v12 %= v6;
            }
            if (v12 != v8) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  float v14 = (std::__shared_weak_count *)operator new(0x78uLL);
  v14[1].__vftable = 0;
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FA38;
  v14[1].__shared_owners_ = 0;
  v14[1].__shared_weak_owners_ = 0;
  int8x8_t v15 = (std::__shared_weak_count_vtbl *)operator new(0x80uLL);
  *(_OWORD *)&v15->~__shared_weak_count = 0u;
  *(_OWORD *)&v15->__on_zero_shared = 0u;
  *(_OWORD *)&v15->__on_zero_shared_weak = 0u;
  *(_OWORD *)&v15[1].~__shared_weak_count_0 = 0u;
  *(_OWORD *)&v15[1].__get_deleter = 0u;
  *(_OWORD *)&v15[2].~__shared_weak_count = 0u;
  *(_OWORD *)&v15[2].__on_zero_shared = 0u;
  *(_OWORD *)&v15[2].__on_zero_shared_weak = 0u;
  v14[1].__vftable = v15;
  v14[1].__shared_owners_ = (uint64_t)&v15[3].~__shared_weak_count_0;
  v14[1].__shared_weak_owners_ = (uint64_t)&v15[3].~__shared_weak_count_0;
  v14[2].__vftable = 0;
  LOBYTE(v14[2].__shared_owners_) = 1;
  *(_OWORD *)&v14[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v14[3].__shared_owners_ = 0u;
  v14[4].std::__shared_count = 0u;
  v14[4].__shared_weak_owners_ = 0;
  {
    md::StyleTexture<md::LowZoomStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel = 4;
  }
  unint64_t v16 = md::StyleTexture<md::LowZoomStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel;
  unint64_t v17 = (v16 + 3) / v16;
  v14[3].__vftable = (std::__shared_weak_count_vtbl *)v17;
  v14[3].__shared_owners_ = 8;
  v14[4].__vftable = (std::__shared_weak_count_vtbl *)1;
  v14[4].__shared_owners_ = v17;
  v14[3].__shared_weak_owners_ = v17 * v16;
  *(float *)&v14[4].__shared_weak_owners_ = 1.0 / (float)v17;
  *(void *)&long long v60 = v14 + 1;
  *((void *)&v60 + 1) = v14;
  unint64_t v18 = *(void *)(a1 + 2640);
  if (!v18) {
    goto LABEL_43;
  }
  uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    unint64_t v2 = v5;
    if (v18 <= v5) {
      unint64_t v2 = v5 % v18;
    }
  }
  else
  {
    unint64_t v2 = (v18 - 1) & v5;
  }
  int8x8_t v20 = *(void ***)(*(void *)(a1 + 2632) + 8 * v2);
  if (!v20 || (uint64_t v10 = *v20) == 0)
  {
LABEL_43:
    uint64_t v10 = operator new(0x28uLL);
    float v23 = (void *)(a1 + 2648);
    void *v10 = 0;
    v10[1] = v5;
    *((_DWORD *)v10 + 4) = a2;
    *(_OWORD *)(v10 + 3) = v60;
    float v24 = (float)(unint64_t)(*(void *)(a1 + 2656) + 1);
    float v25 = *(float *)(a1 + 2664);
    if (v18 && (float)(v25 * (float)v18) >= v24)
    {
      unint64_t v5 = v2;
      goto LABEL_93;
    }
    BOOL v26 = 1;
    if (v18 >= 3) {
      BOOL v26 = (v18 & (v18 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v18);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v18 = *(void *)(a1 + 2640);
    }
    if (prime <= v18)
    {
      if (prime >= v18) {
        goto LABEL_81;
      }
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 2656) / *(float *)(a1 + 2664));
      if (v18 < 3 || (uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v18), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime >= v18)
      {
        unint64_t v18 = *(void *)(a1 + 2640);
LABEL_81:
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v18 <= v5) {
            v5 %= v18;
          }
        }
        else
        {
          unint64_t v5 = (v18 - 1) & v5;
        }
LABEL_93:
        uint64_t v48 = *(void *)(a1 + 2632);
        int32x4_t v49 = *(void **)(v48 + 8 * v5);
        if (v49)
        {
          void *v10 = *v49;
        }
        else
        {
          void *v10 = *v23;
          *float v23 = v10;
          *(void *)(v48 + 8 * v5) = v23;
          if (!*v10)
          {
LABEL_102:
            ++*(void *)(a1 + 2656);
            goto LABEL_103;
          }
          unint64_t v50 = *(void *)(*v10 + 8);
          if ((v18 & (v18 - 1)) != 0)
          {
            if (v50 >= v18) {
              v50 %= v18;
            }
          }
          else
          {
            v50 &= v18 - 1;
          }
          int32x4_t v49 = (void *)(*(void *)(a1 + 2632) + 8 * v50);
        }
        *int32x4_t v49 = v10;
        goto LABEL_102;
      }
      if (!prime)
      {
        int8x16_t v59 = *(void **)(a1 + 2632);
        *(void *)(a1 + 2632) = 0;
        if (v59) {
          operator delete(v59);
        }
        unint64_t v18 = 0;
        *(void *)(a1 + 2640) = 0;
        goto LABEL_81;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v30 = operator new(8 * prime);
    int8x16_t v31 = *(void **)(a1 + 2632);
    *(void *)(a1 + 2632) = v30;
    if (v31) {
      operator delete(v31);
    }
    uint64_t v32 = 0;
    *(void *)(a1 + 2640) = prime;
    do
      *(void *)(*(void *)(a1 + 2632) + 8 * v32++) = 0;
    while (prime != v32);
    int8x16_t v33 = (void *)*v23;
    if (!*v23)
    {
LABEL_80:
      unint64_t v18 = prime;
      goto LABEL_81;
    }
    size_t v34 = v33[1];
    size_t v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v36 = v34 & v35;
      *(void *)(*(void *)(a1 + 2632) + 8 * v36) = v23;
      for (uint64_t i = (void *)*v33; *v33; uint64_t i = (void *)*v33)
      {
        size_t v38 = i[1] & v35;
        if (v38 == v36)
        {
          int8x16_t v33 = i;
        }
        else
        {
          uint64_t v39 = *(void *)(a1 + 2632);
          if (*(void *)(v39 + 8 * v38))
          {
            *int8x16_t v33 = *i;
            uint64_t v40 = 8 * v38;
            void *i = **(void **)(*(void *)(a1 + 2632) + v40);
            **(void **)(*(void *)(a1 + 2632) + v40) = i;
          }
          else
          {
            *(void *)(v39 + 8 * v38) = v33;
            int8x16_t v33 = i;
            size_t v36 = v38;
          }
        }
      }
      goto LABEL_80;
    }
    if (v34 >= prime) {
      v34 %= prime;
    }
    *(void *)(*(void *)(a1 + 2632) + 8 * v34) = v23;
    int8x16_t v44 = (void *)*v33;
    if (!*v33) {
      goto LABEL_80;
    }
    while (1)
    {
      size_t v46 = v44[1];
      if (v46 >= prime) {
        v46 %= prime;
      }
      if (v46 != v34)
      {
        uint64_t v47 = *(void *)(a1 + 2632);
        if (!*(void *)(v47 + 8 * v46))
        {
          *(void *)(v47 + 8 * v46) = v33;
          goto LABEL_85;
        }
        *int8x16_t v33 = *v44;
        uint64_t v45 = 8 * v46;
        void *v44 = **(void **)(*(void *)(a1 + 2632) + v45);
        **(void **)(*(void *)(a1 + 2632) + v45) = v44;
        int8x16_t v44 = v33;
      }
      size_t v46 = v34;
LABEL_85:
      int8x16_t v33 = v44;
      int8x16_t v44 = (void *)*v44;
      size_t v34 = v46;
      if (!v44) {
        goto LABEL_80;
      }
    }
  }
  if (v19.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v10[1];
      if (v22 == v5)
      {
        if (*((_DWORD *)v10 + 4) == a2) {
          goto LABEL_114;
        }
      }
      else if ((v22 & (v18 - 1)) != v2)
      {
        goto LABEL_43;
      }
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_43;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v10[1];
    if (v21 == v5) {
      break;
    }
    if (v21 >= v18) {
      v21 %= v18;
    }
    if (v21 != v2) {
      goto LABEL_43;
    }
LABEL_33:
    uint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_43;
    }
  }
  if (*((_DWORD *)v10 + 4) != a2) {
    goto LABEL_33;
  }
LABEL_114:
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_103:
  uint64_t v51 = v10[3];
  uint64_t v52 = *(void *)v51;
  uint64_t v53 = *(void *)(v51 + 8);
  uint64_t v54 = v53 - *(void *)v51;
  if (v53 != *(void *)v51)
  {
    unint64_t v55 = 0;
    unint64_t v56 = v54 >> 4;
    if (v56 <= 1) {
      unint64_t v56 = 1;
    }
    do
    {
      *(float *)&uint64_t v61 = (float)v55 * 0.125;
      HIDWORD(v61) = 1065353216;
      if (*(void *)v52) {
        BOOL v57 = 0;
      }
      else {
        BOOL v57 = v61 == *(void *)(v52 + 8);
      }
      if (!v57)
      {
        *(unsigned char *)(v51 + 32) = 1;
        *(void *)uint64_t v52 = 0;
        *(float *)(v52 + 8) = (float)v55 * 0.125;
        *(_DWORD *)(v52 + 12) = 1065353216;
      }
      ++v55;
      v52 += 16;
    }
    while (v56 != v55);
  }
  md::StyleTexture<md::LowZoomStyle>::_processStylePixelsIfNecessary(v51);
  return *(void *)(v51 + 24);
}

void sub_1A2511894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1A25118B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void md::ARWalkingContinueLabelFeature::populateStyleQueries(unsigned char *a1, uint64_t a2, uint64_t *a3)
{
  int8x16_t v118 = 0;
  if ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 488))(a1)
    && (*(uint64_t (**)(unsigned char *, void))(*(void *)a1 + 480))(a1, 0))
  {
    operator new();
  }
  int8x16_t v114 = 0;
  int8x16_t v115 = 0;
  unint64_t v116 = 0;
  {
    operator new();
  }
  uint64_t v117 = mdm::Allocator::instance(void)::alloc;
  _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v112);
  char v6 = 0;
  uint64_t v7 = 0;
  __int16 v111 = 256;
  do
  {
    char v8 = v6;
    uint64_t v9 = *((unsigned __int8 *)&v111 + v7);
    if (a1[417]) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = v9 == 1;
    }
    if (v10) {
      goto LABEL_6;
    }
    unint64_t v11 = v114;
    int8x16_t v115 = v114;
    if ((unint64_t)v114 < v116)
    {
      if (v114) {
        *int8x16_t v114 = 0x200010060;
      }
      unint64_t v12 = v11 + 1;
      goto LABEL_36;
    }
    unint64_t v13 = (uint64_t)(v116 - (void)v114) >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    if (v116 - (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v13;
    }
    int8x8_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v117 + 16))(v117, 8 * v14, 4);
    if (v15)
    {
      *int8x8_t v15 = 0x200010060;
      unint64_t v16 = v15;
    }
    else
    {
      unint64_t v16 = 0;
    }
    unint64_t v18 = v114;
    unint64_t v17 = v115;
    int64_t v19 = (char *)v115 - (char *)v114;
    if (v115 == v114)
    {
      unint64_t v21 = v16;
      goto LABEL_34;
    }
    unint64_t v20 = v19 - 8;
    if ((unint64_t)(v19 - 8) < 0x38)
    {
      unint64_t v21 = v16;
    }
    else
    {
      unint64_t v21 = v16;
      if ((unint64_t)((char *)v115 - (char *)v16) >= 0x20)
      {
        uint64_t v22 = (v20 >> 3) + 1;
        float v23 = v16 - 2;
        float v24 = (long long *)(v115 - 2);
        uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *float v23 = v26;
          v23 -= 2;
          v24 -= 2;
          v25 -= 4;
        }
        while (v25);
        unint64_t v21 = &v16[-(v22 & 0x3FFFFFFFFFFFFFFCLL)];
        v17 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_33;
        }
      }
    }
    do
    {
      uint64_t v27 = *--v17;
      *--unint64_t v21 = v27;
    }
    while (v17 != v18);
LABEL_33:
    unint64_t v17 = v114;
LABEL_34:
    unint64_t v28 = &v15[v14];
    unint64_t v12 = v16 + 1;
    int8x16_t v114 = v21;
    int8x16_t v115 = v16 + 1;
    unint64_t v29 = v116;
    unint64_t v116 = (unint64_t)v28;
    if (v17) {
      (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v117 + 40))(v117, v17, v29 - (void)v17);
    }
LABEL_36:
    int8x16_t v115 = v12;
    if ((unint64_t)v12 < v116)
    {
      void *v12 = 65594;
      unint64_t v30 = v12 + 1;
      goto LABEL_61;
    }
    uint64_t v31 = v12 - v114;
    if ((unint64_t)(v31 + 1) >> 61) {
      goto LABEL_162;
    }
    unint64_t v32 = (uint64_t)(v116 - (void)v114) >> 2;
    if (v32 <= v31 + 1) {
      unint64_t v32 = v31 + 1;
    }
    if (v116 - (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v33 = v32;
    }
    if (v33)
    {
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v117 + 16))(v117, 8 * v33, 4);
      size_t v35 = (void *)(v34 + 8 * v31);
      uint64_t v36 = v34 + 8 * v33;
      if (v34) {
        *size_t v35 = 65594;
      }
    }
    else
    {
      uint64_t v36 = 0;
      size_t v35 = (void *)(8 * v31);
    }
    size_t v38 = v114;
    int8x16_t v37 = v115;
    int64_t v39 = (char *)v115 - (char *)v114;
    if (v115 == v114)
    {
      unint64_t v41 = v35;
      goto LABEL_59;
    }
    unint64_t v40 = v39 - 8;
    if ((unint64_t)(v39 - 8) < 0x38)
    {
      unint64_t v41 = v35;
    }
    else
    {
      unint64_t v41 = v35;
      if ((unint64_t)((char *)v115 - (char *)v35) >= 0x20)
      {
        uint64_t v42 = (v40 >> 3) + 1;
        uint64_t v43 = v35 - 2;
        int8x16_t v44 = (long long *)(v115 - 2);
        uint64_t v45 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v46 = *v44;
          *(v43 - 1) = *(v44 - 1);
          _OWORD *v43 = v46;
          v43 -= 2;
          v44 -= 2;
          v45 -= 4;
        }
        while (v45);
        unint64_t v41 = &v35[-(v42 & 0x3FFFFFFFFFFFFFFCLL)];
        v37 -= v42 & 0x3FFFFFFFFFFFFFFCLL;
        if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_58;
        }
      }
    }
    do
    {
      uint64_t v47 = *--v37;
      *--unint64_t v41 = v47;
    }
    while (v37 != v38);
LABEL_58:
    int8x16_t v37 = v114;
LABEL_59:
    unint64_t v30 = v35 + 1;
    int8x16_t v114 = v41;
    int8x16_t v115 = v35 + 1;
    unint64_t v48 = v116;
    unint64_t v116 = v36;
    if (v37) {
      (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v117 + 40))(v117, v37, v48 - (void)v37);
    }
LABEL_61:
    int8x16_t v115 = v30;
    if ((unint64_t)v30 < v116)
    {
      *unint64_t v30 = ((v9 << 32) | 0x1003A) + 51;
      int32x4_t v49 = v30 + 1;
      goto LABEL_86;
    }
    uint64_t v50 = v30 - v114;
    if ((unint64_t)(v50 + 1) >> 61) {
LABEL_162:
    }
      abort();
    unint64_t v51 = (uint64_t)(v116 - (void)v114) >> 2;
    if (v51 <= v50 + 1) {
      unint64_t v51 = v50 + 1;
    }
    if (v116 - (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v52 = v51;
    }
    if (v52)
    {
      uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v117 + 16))(v117, 8 * v52, 4);
      uint64_t v54 = (void *)(v53 + 8 * v50);
      uint64_t v55 = v53 + 8 * v52;
      if (v53) {
        *uint64_t v54 = ((v9 << 32) | 0x1003A) + 51;
      }
    }
    else
    {
      uint64_t v55 = 0;
      uint64_t v54 = (void *)(8 * v50);
    }
    BOOL v57 = v114;
    unint64_t v56 = v115;
    int64_t v58 = (char *)v115 - (char *)v114;
    if (v115 == v114)
    {
      long long v60 = v54;
      goto LABEL_84;
    }
    unint64_t v59 = v58 - 8;
    if ((unint64_t)(v58 - 8) < 0x38)
    {
      long long v60 = v54;
    }
    else
    {
      long long v60 = v54;
      if ((unint64_t)((char *)v115 - (char *)v54) >= 0x20)
      {
        uint64_t v61 = (v59 >> 3) + 1;
        int8x16_t v62 = v54 - 2;
        int8x16_t v63 = (long long *)(v115 - 2);
        uint64_t v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v65 = *v63;
          *(v62 - 1) = *(v63 - 1);
          *int8x16_t v62 = v65;
          v62 -= 2;
          v63 -= 2;
          v64 -= 4;
        }
        while (v64);
        long long v60 = &v54[-(v61 & 0x3FFFFFFFFFFFFFFCLL)];
        v56 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
        if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_83;
        }
      }
    }
    do
    {
      uint64_t v66 = *--v56;
      *--long long v60 = v66;
    }
    while (v56 != v57);
LABEL_83:
    unint64_t v56 = v114;
LABEL_84:
    int32x4_t v49 = v54 + 1;
    int8x16_t v114 = v60;
    int8x16_t v115 = v54 + 1;
    unint64_t v67 = v116;
    unint64_t v116 = v55;
    if (v56) {
      (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v117 + 40))(v117, v56, v67 - (void)v56);
    }
LABEL_86:
    int8x16_t v115 = v49;
    (*(void (**)(unsigned char *, void **))(*(void *)a1 + 544))(a1, &v114);
    uint64_t v68 = v112;
    int8x16_t v69 = v114;
    if ((((char *)v115 - (char *)v114) & 0x7FFFFFFF8) != 0)
    {
      uint64_t v70 = 0;
      char v71 = 0;
      uint64_t v72 = ((unint64_t)((char *)v115 - (char *)v114) >> 3);
      unsigned __int8 v73 = *(unsigned char *)(v112 + 33);
      while (1)
      {
        size_t v74 = v73;
        unint64_t v75 = *(void **)v68;
        if (v73) {
          break;
        }
LABEL_88:
        v75[v74] = v69[v70];
        unsigned __int8 v73 = *(unsigned char *)(v68 + 33) + 1;
        *(unsigned char *)(v68 + 33) = v73;
        ++v70;
        char v71 = 1;
        if (v70 == v72)
        {
          unint64_t v75 = *(void **)v68;
          size_t v74 = v73;
LABEL_105:
          qsort(v75, v74, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
          goto LABEL_106;
        }
      }
      if (v73 > 0x1Fu)
      {
        do
        {
          uint64_t v79 = 0;
          int64x2_t v80 = (int *)v75;
          while (1)
          {
            int v81 = *v80;
            v80 += 2;
            if (v81 == LODWORD(v69[v70])) {
              break;
            }
            if (v74 == ++v79) {
              goto LABEL_99;
            }
          }
          HIDWORD(v75[v79]) = HIDWORD(v69[v70]);
LABEL_99:
          ++v70;
        }
        while (v70 != v72);
      }
      else
      {
        do
        {
          uint64_t v76 = 0;
          int v77 = (int *)v75;
          while (1)
          {
            int v78 = *v77;
            v77 += 2;
            if (v78 == LODWORD(v69[v70])) {
              break;
            }
            if (v74 == ++v76) {
              goto LABEL_88;
            }
          }
          HIDWORD(v75[v76]) = HIDWORD(v69[v70++]);
        }
        while (v70 != v72);
      }
      if (v71) {
        goto LABEL_105;
      }
    }
LABEL_106:
    uint64_t v82 = v113;
    *(void *)&long long v109 = v68;
    *((void *)&v109 + 1) = v113;
    if (v113) {
      atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v83 = v118;
    md::createFeatureAttributeSet((gss::Allocator *)&v119, (uint64_t *)&v109);
    md::LabelStyleCache::styleQueryForFeatureAttributes((uint64_t)&v110, a3, &v119, v83);
    if (v119)
    {
      uint64_t v120 = v119;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v122 + 40))(v122, v119, v121 - v119);
    }
    if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
    char v84 = *(void **)(a2 + 8);
    if ((unint64_t)v84 >= *(void *)(a2 + 16))
    {
      int8x16_t v86 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v110);
    }
    else
    {
      if (v84)
      {
        *char v84 = v110;
        uint64_t v85 = *((void *)&v110 + 1);
        v84[1] = *((void *)&v110 + 1);
        if (v85) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v85 + 8), 1uLL, memory_order_relaxed);
        }
      }
      int8x16_t v86 = v84 + 2;
    }
    *(void *)(a2 + 8) = v86;
    uint64_t v87 = v112;
    uint64_t v88 = *(unsigned __int8 *)(v112 + 33);
    int8x16_t v89 = *(int **)v112;
    if (*(unsigned char *)(v112 + 33))
    {
      if (v88 >= 0x20)
      {
        uint64_t v90 = 0;
        int32x4_t v94 = *(int **)v112;
        while (1)
        {
          int v95 = *v94;
          v94 += 2;
          if (v95 == 65594) {
            break;
          }
          if (v88 == ++v90) {
            goto LABEL_130;
          }
        }
      }
      else
      {
        uint64_t v90 = 0;
        int16x8_t v91 = *(int **)v112;
        while (1)
        {
          int v92 = *v91;
          v91 += 2;
          if (v92 == 65594) {
            break;
          }
          if (v88 == ++v90) {
            goto LABEL_124;
          }
        }
      }
      v89[2 * v90 + 1] = 1;
    }
    else
    {
LABEL_124:
      *(void *)&v89[2 * v88] = 0x10001003ALL;
      unsigned __int8 v93 = *(unsigned char *)(v87 + 33) + 1;
      *(unsigned char *)(v87 + 33) = v93;
      qsort(*(void **)v87, v93, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
LABEL_130:
    uint64_t v107 = v87;
    int16x8_t v108 = v113;
    if (v113) {
      atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int8x16_t v96 = v118;
    md::createFeatureAttributeSet((gss::Allocator *)&v119, &v107);
    md::LabelStyleCache::styleQueryForFeatureAttributes((uint64_t)&v109, a3, &v119, v96);
    if (v119)
    {
      uint64_t v120 = v119;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v122 + 40))(v122, v119, v121 - v119);
    }
    long long v97 = v109;
    long long v109 = 0uLL;
    int8x16_t v98 = (std::__shared_weak_count *)*((void *)&v110 + 1);
    long long v110 = v97;
    if (v98 && !atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
      int8x16_t v99 = (std::__shared_weak_count *)*((void *)&v109 + 1);
      if (*((void *)&v109 + 1))
      {
LABEL_137:
        if (!atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
    }
    else
    {
      int8x16_t v99 = (std::__shared_weak_count *)*((void *)&v109 + 1);
      if (*((void *)&v109 + 1)) {
        goto LABEL_137;
      }
    }
    int8x16_t v100 = v108;
    if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
    int8x16_t v101 = *(void **)(a2 + 8);
    if ((unint64_t)v101 >= *(void *)(a2 + 16))
    {
      int8x16_t v103 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v110);
    }
    else
    {
      if (v101)
      {
        *int8x16_t v101 = v110;
        uint64_t v102 = *((void *)&v110 + 1);
        v101[1] = *((void *)&v110 + 1);
        if (v102) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v102 + 8), 1uLL, memory_order_relaxed);
        }
      }
      int8x16_t v103 = v101 + 2;
    }
    *(void *)(a2 + 8) = v103;
    int8x16_t v104 = (std::__shared_weak_count *)*((void *)&v110 + 1);
    if (*((void *)&v110 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v110 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
LABEL_6:
    char v6 = 1;
    uint64_t v7 = 1;
  }
  while ((v8 & 1) == 0);
  int16x8_t v105 = v113;
  if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
  }
  if (v114)
  {
    int8x16_t v115 = v114;
    (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v117 + 40))(v117, v114, v116 - (void)v114);
  }
  int32x4_t v106 = v118;
  if (v118)
  {
    if (*((char *)v118 + 23) < 0) {
      (*(void (**)(void, void, uint64_t))(*(void *)v118[3] + 40))(v118[3], *v118, v118[2] & 0x7FFFFFFFFFFFFFFFLL);
    }
    MEMORY[0x1A6239270](v106, 0x1032C402ED93987);
  }
}

void sub_1A251251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x1A6239270](v14, 0x1032C402ED93987);
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingContinueLabelFeature::style(void *a1, unsigned int a2)
{
  uint64_t v2 = a1[34];
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = a1 + 34;
  do
  {
    unsigned int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      char v6 = (uint64_t *)v2;
    }
    else {
      char v6 = (uint64_t *)(v2 + 8);
    }
    if (v5) {
      uint64_t v3 = (void *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 != a1 + 34 && *((_DWORD *)v3 + 8) <= a2)
  {
    uint64_t v7 = v3[5];
    if (v7)
    {
      int v8 = 0;
      LODWORD(v7) = *(_DWORD *)(v7 + 164) == a2;
      uint64_t v9 = a1[45];
      if (v9) {
        goto LABEL_14;
      }
LABEL_24:
      uint64_t v14 = 0;
      goto LABEL_25;
    }
  }
  else
  {
LABEL_12:
    LODWORD(v7) = 0;
  }
  int v8 = 1;
  uint64_t v9 = a1[45];
  if (!v9) {
    goto LABEL_24;
  }
LABEL_14:
  BOOL v10 = a1 + 45;
  do
  {
    unsigned int v11 = *(_DWORD *)(v9 + 28);
    BOOL v12 = v11 >= a2;
    if (v11 >= a2) {
      unint64_t v13 = (uint64_t *)v9;
    }
    else {
      unint64_t v13 = (uint64_t *)(v9 + 8);
    }
    if (v12) {
      BOOL v10 = (void *)v9;
    }
    uint64_t v9 = *v13;
  }
  while (*v13);
  if (v10 == a1 + 45 || *((_DWORD *)v10 + 7) > a2) {
    goto LABEL_24;
  }
  uint64_t v14 = *((unsigned __int8 *)v10 + 32);
LABEL_25:
  if (v7) {
    int v15 = v8;
  }
  else {
    int v15 = 1;
  }
  uint64_t v16 = (v7 + 1);
  BOOL v17 = v8 == 0;
  uint64_t v18 = 2;
  if (v17) {
    uint64_t v18 = v16;
  }
  if (v15) {
    uint64_t v18 = 0;
  }
  return a1[12] + 16 * (v14 + v18);
}

void md::ARWalkingContinueLabelFeature::populateDebugNode(id *this, gdc::DebugTreeNode *a2, const md::LabelManager *a3)
{
  md::LabelFeature::populateDebugNode((md::LabelFeature *)this, a2, (unint64_t)a3);
  BOOL v5 = (char *)operator new(0x20uLL);
  v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_1A28FCDC0;
  strcpy(v5, "ARWalkingContinueLabelFeature");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (long long *)&v121);
  operator delete(v5);
  id v7 = this[25];
  int v8 = [v7 description];

  if (v8)
  {
    *((unsigned char *)&v121.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&v121, "VKARWalkingFeature");
    uint64_t v9 = (const std::string::value_type *)[v8 UTF8String];
    memset(&v221, 0, sizeof(v221));
    int v222 = 4;
    if (v9)
    {
      std::string::__assign_external(&v221, v9);
    }
    else
    {
      *((unsigned char *)&v221.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v221, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&v121, (uint64_t)v220);
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
  }
  BOOL v10 = this[48];
  if (v10)
  {
    strcpy((char *)&v121, "DedupingGroupThreshold");
    *((unsigned char *)&v121.__r_.__value_.__s + 23) = 22;
    uint64_t v11 = v10[35];
    uint64_t v217 = 0;
    uint64_t v218 = 0;
    uint64_t v216 = 0;
    int v219 = 2;
    uint64_t v215 = v11;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&v121, (uint64_t)v214);
  }
  *((unsigned char *)&v121.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&v121, "BestPlacementOffset");
  id v12 = this[51];
  uint64_t v212 = 0;
  uint64_t v210 = 0;
  uint64_t v211 = 0;
  int v213 = 2;
  id v209 = v12;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&v121, (uint64_t)v208);
  id v13 = this[25];
  uint64_t v68 = [v13 route];
  uint64_t v14 = [v13 range];
  uint64_t v66 = v8;
  [v13 range];
  [v68 distanceFromPoint:v14 toPoint:v15];
  *((unsigned char *)&v121.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v121, "RangeLength");
  uint64_t v206 = 0;
  uint64_t v204 = 0;
  uint64_t v205 = 0;
  int v207 = 2;
  uint64_t v203 = v16;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)&v121, (uint64_t)v202);
  strcpy((char *)&v121, "InitialRouteCoordinate");
  *((unsigned char *)&v121.__r_.__value_.__s + 23) = 22;
  BOOL v17 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (long long *)&v121);
  uint64_t v18 = *((unsigned int *)this + 105);
  *((unsigned char *)&v121.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v121, "index");
  uint64_t v200 = 0;
  uint64_t v199 = 0;
  int v201 = 1;
  uint64_t v198 = 0;
  uint64_t v197 = v18;
  gdc::DebugTreeNode::addProperty((uint64_t)v17, (uint64_t)&v121, (uint64_t)v196);
  double v19 = *((float *)this + 106);
  *((unsigned char *)&v121.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v121, "offset");
  uint64_t v194 = 0;
  uint64_t v192 = 0;
  uint64_t v193 = 0;
  int v195 = 2;
  double v191 = v19;
  gdc::DebugTreeNode::addProperty((uint64_t)v17, (uint64_t)&v121, (uint64_t)v190);
  *((unsigned char *)&v121.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v121, "Placements");
  unint64_t v67 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, (long long *)&v121);
  unint64_t v20 = this[38];
  if (v20)
  {
    while (1)
    {
      unsigned int v21 = *(_DWORD *)(v20[2] + 160);
      if (v21)
      {
        std::to_string(&v121, v21);
      }
      else
      {
        *((unsigned char *)&v121.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v121, "UNKNOWN");
      }
      uint64_t v22 = gdc::DebugTreeNode::createChildNode((uint64_t)v67, (long long *)&v121);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v121.__r_.__value_.__l.__data_);
      }
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v121, "Bearing");
      [v68 courseAtRouteCoordinateIndex:*(unsigned int *)(v20[2] + 128)];
      uint64_t v186 = 0;
      uint64_t v187 = 0;
      uint64_t v188 = 0;
      int v189 = 2;
      uint64_t v185 = v23;
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v184);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v121, "FaceVector");
      float v24 = gdc::DebugTreeNode::createChildNode((uint64_t)v22, (long long *)&v121);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 120;
      float v25 = *(float *)(v20[2] + 96);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v180 = 0;
      int v183 = 2;
      double v179 = v25;
      gdc::DebugTreeNode::addProperty((uint64_t)v24, (uint64_t)&v121, (uint64_t)v178);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 121;
      float v26 = *(float *)(v20[2] + 100);
      uint64_t v175 = 0;
      uint64_t v176 = 0;
      uint64_t v174 = 0;
      int v177 = 2;
      double v173 = v26;
      gdc::DebugTreeNode::addProperty((uint64_t)v24, (uint64_t)&v121, (uint64_t)v172);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 122;
      float v27 = *(float *)(v20[2] + 104);
      uint64_t v169 = 0;
      uint64_t v170 = 0;
      uint64_t v168 = 0;
      int v171 = 2;
      double v167 = v27;
      gdc::DebugTreeNode::addProperty((uint64_t)v24, (uint64_t)&v121, (uint64_t)v166);
      md::LabelPoint::coordinate((md::LabelPoint *)&v121, v20[2] + 48);
      *((unsigned char *)&v165.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&v165, "Resolved Coordinate");
      unint64_t v28 = gdc::DebugTreeNode::createChildNode((uint64_t)v22, (long long *)&v165);
      *((unsigned char *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 7627116;
      uint64_t v162 = 0;
      uint64_t v163 = 0;
      uint64_t v161 = 0;
      int v164 = 2;
      std::string::size_type v160 = v121.__r_.__value_.__r.__words[0];
      gdc::DebugTreeNode::addProperty((uint64_t)v28, (uint64_t)&v165, (uint64_t)v159);
      *((unsigned char *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 6778476;
      uint64_t v156 = 0;
      uint64_t v157 = 0;
      uint64_t v155 = 0;
      int v158 = 2;
      std::string::size_type size = v121.__r_.__value_.__l.__size_;
      gdc::DebugTreeNode::addProperty((uint64_t)v28, (uint64_t)&v165, (uint64_t)v153);
      *((unsigned char *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 7629921;
      uint64_t v150 = 0;
      uint64_t v151 = 0;
      uint64_t v149 = 0;
      int v152 = 2;
      std::string::size_type v148 = v121.__r_.__value_.__r.__words[2];
      gdc::DebugTreeNode::addProperty((uint64_t)v28, (uint64_t)&v165, (uint64_t)v147);
      md::LabelPoint::coordinate((md::LabelPoint *)&v121, v20[2]);
      *((unsigned char *)&v165.__r_.__value_.__s + 23) = 15;
      strcpy((char *)&v165, "Base Coordinate");
      unint64_t v29 = gdc::DebugTreeNode::createChildNode((uint64_t)v22, (long long *)&v165);
      *((unsigned char *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 7627116;
      uint64_t v144 = 0;
      uint64_t v145 = 0;
      uint64_t v143 = 0;
      int v146 = 2;
      std::string::size_type v142 = v121.__r_.__value_.__r.__words[0];
      gdc::DebugTreeNode::addProperty((uint64_t)v29, (uint64_t)&v165, (uint64_t)v141);
      *((unsigned char *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 6778476;
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      uint64_t v137 = 0;
      int v140 = 2;
      std::string::size_type v136 = v121.__r_.__value_.__l.__size_;
      gdc::DebugTreeNode::addProperty((uint64_t)v29, (uint64_t)&v165, (uint64_t)v135);
      *((unsigned char *)&v165.__r_.__value_.__s + 23) = 3;
      LODWORD(v165.__r_.__value_.__l.__data_) = 7629921;
      uint64_t v132 = 0;
      uint64_t v133 = 0;
      uint64_t v131 = 0;
      int v134 = 2;
      std::string::size_type v130 = v121.__r_.__value_.__r.__words[2];
      gdc::DebugTreeNode::addProperty((uint64_t)v29, (uint64_t)&v165, (uint64_t)v129);
      unint64_t v30 = (char *)operator new(0x28uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_1A28FD150;
      strcpy(v30, "HighPrecisionAltitudeRequestIsSet");
      uint64_t v31 = *(unsigned __int8 *)(v20[2] + 136);
      memset(&v127[4], 0, 24);
      int v128 = 0;
      v127[0] = v31;
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v127);
      operator delete(v30);
      uint64_t v32 = v20[2];
      uint64_t v33 = *(uint64_t **)(v32 + 144);
      if (v33) {
        break;
      }
LABEL_44:
      unsigned int v44 = *(_DWORD *)(v32 + 160);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v121, "Identifier");
      if (v44)
      {
        std::to_string(&v165, v44);
        memset(&v119, 0, sizeof(v119));
        int v120 = 4;
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__assign_no_alias<true>(&v119, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
          goto LABEL_49;
        }
      }
      else
      {
        *((unsigned char *)&v165.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v165, "UNKNOWN");
        memset(&v119, 0, sizeof(v119));
        int v120 = 4;
      }
      std::string v119 = v165;
LABEL_49:
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v118);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v119.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_51;
        }
      }
      else if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_51;
      }
      operator delete(v165.__r_.__value_.__l.__data_);
LABEL_51:
      uint64_t v45 = (char *)operator new(0x20uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_1A28FD110;
      strcpy(v45, "FallbackOcclusionStyling");
      for (uint64_t i = (uint64_t)this[45]; i; uint64_t i = *(void *)i)
      {
        unsigned int v47 = *(_DWORD *)(i + 28);
        if (v44 >= v47)
        {
          if (v47 >= v44)
          {
            uint64_t i = 1;
            break;
          }
          i += 8;
        }
      }
      uint64_t v114 = 0;
      uint64_t v115 = 0;
      int v117 = 0;
      uint64_t v116 = 0;
      v113[0] = i;
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v113);
      operator delete(v45);
      unsigned int v48 = *(_DWORD *)(v32 + 164);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v121, "Identifier");
      if (v48)
      {
        std::to_string(&v165, v48);
        memset(&v119, 0, sizeof(v119));
        int v120 = 4;
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__assign_no_alias<true>(&v119, v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
          goto LABEL_65;
        }
      }
      else
      {
        *((unsigned char *)&v165.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v165, "UNKNOWN");
        memset(&v119, 0, sizeof(v119));
        int v120 = 4;
      }
      std::string v119 = v165;
LABEL_65:
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v118);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v119.__r_.__value_.__l.__data_);
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
LABEL_74:
        }
          operator delete(v165.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_74;
      }
      int32x4_t v49 = (char *)operator new(0x20uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_1A28FD110;
      strcpy(v49, "FallbackOcclusionStyling");
      for (uint64_t j = (uint64_t)this[45]; j; uint64_t j = *(void *)j)
      {
        unsigned int v51 = *(_DWORD *)(j + 28);
        if (v48 >= v51)
        {
          if (v51 >= v48)
          {
            uint64_t j = 1;
            break;
          }
          j += 8;
        }
      }
      uint64_t v114 = 0;
      uint64_t v115 = 0;
      int v117 = 0;
      uint64_t v116 = 0;
      v113[0] = j;
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v113);
      operator delete(v49);
      uint64_t v52 = (char *)operator new(0x28uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_1A28FD710;
      strcpy(v52, "DidContainUserOnPlacementConstruction");
      uint64_t v53 = *((unsigned __int8 *)this + 416);
      memset(&v111[4], 0, 24);
      int v112 = 0;
      v111[0] = v53;
      gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)&v121, (uint64_t)v111);
      operator delete(v52);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&v121, "RouteOffset");
      uint64_t v54 = gdc::DebugTreeNode::createChildNode((uint64_t)v22, (long long *)&v121);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v121, "index");
      uint64_t v55 = *(unsigned int *)(v20[2] + 128);
      uint64_t v108 = 0;
      uint64_t v109 = 0;
      uint64_t v107 = 0;
      int v110 = 1;
      uint64_t v106 = v55;
      gdc::DebugTreeNode::addProperty((uint64_t)v54, (uint64_t)&v121, (uint64_t)v105);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v121, "offset");
      float v56 = *(float *)(v20[2] + 132);
      uint64_t v102 = 0;
      uint64_t v103 = 0;
      uint64_t v101 = 0;
      int v104 = 2;
      double v100 = v56;
      gdc::DebugTreeNode::addProperty((uint64_t)v54, (uint64_t)&v121, (uint64_t)v99);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&v121, "SkewOffsetting");
      BOOL v57 = gdc::DebugTreeNode::createChildNode((uint64_t)v22, (long long *)&v121);
      int64_t v58 = (char *)operator new(0x19uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_1A28FCDB0;
      strcpy(v58, "PositiveOffsettingLimit");
      float v59 = *(float *)(v20[2] + 120);
      uint64_t v96 = 0;
      uint64_t v97 = 0;
      uint64_t v95 = 0;
      int v98 = 2;
      double v94 = v59;
      gdc::DebugTreeNode::addProperty((uint64_t)v57, (uint64_t)&v121, (uint64_t)v93);
      operator delete(v58);
      long long v60 = (char *)operator new(0x19uLL);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = xmmword_1A28FCDB0;
      strcpy(v60, "NegativeOffsettingLimit");
      float v61 = *(float *)(v20[2] + 124);
      uint64_t v90 = 0;
      uint64_t v91 = 0;
      uint64_t v89 = 0;
      int v92 = 2;
      double v88 = v61;
      gdc::DebugTreeNode::addProperty((uint64_t)v57, (uint64_t)&v121, (uint64_t)v87);
      operator delete(v60);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&v121, "Direction");
      int8x16_t v62 = gdc::DebugTreeNode::createChildNode((uint64_t)v57, (long long *)&v121);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 120;
      float v63 = *(float *)(v20[2] + 108);
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      uint64_t v83 = 0;
      int v86 = 2;
      double v82 = v63;
      gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v121, (uint64_t)v81);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 121;
      float v64 = *(float *)(v20[2] + 112);
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      int v80 = 2;
      double v76 = v64;
      gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v121, (uint64_t)v75);
      *((unsigned char *)&v121.__r_.__value_.__s + 23) = 1;
      LOWORD(v121.__r_.__value_.__l.__data_) = 122;
      float v65 = *(float *)(v20[2] + 116);
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      uint64_t v71 = 0;
      int v74 = 2;
      double v70 = v65;
      gdc::DebugTreeNode::addProperty((uint64_t)v62, (uint64_t)&v121, (uint64_t)v69);
      unint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_79;
      }
    }
    md::HighPrecisionAltitudeRequest::createDebugNode((md::HighPrecisionAltitudeRequest *)&v121, v33);
    gdc::DebugTreeNode::addChildNode(v22, (long long *)&v121);
    uint64_t v34 = (void **)__p;
    if (__p)
    {
      size_t v35 = v126;
      uint64_t v36 = __p;
      if (v126 != __p)
      {
        do
        {
          int8x16_t v37 = (void **)*(v35 - 3);
          if (v37)
          {
            size_t v38 = (void **)*(v35 - 2);
            int64_t v39 = *(v35 - 3);
            if (v38 != v37)
            {
              do
              {
                if (*((char *)v38 - 1) < 0) {
                  operator delete(*(v38 - 3));
                }
                v38 -= 3;
              }
              while (v38 != v37);
              int64_t v39 = *(v35 - 3);
            }
            *(v35 - 2) = v37;
            operator delete(v39);
          }
          unint64_t v40 = (void **)*(v35 - 6);
          if (v40)
          {
            unint64_t v41 = (void **)*(v35 - 5);
            uint64_t v42 = *(v35 - 6);
            if (v41 != v40)
            {
              do
              {
                if (*((char *)v41 - 9) < 0) {
                  operator delete(*(v41 - 4));
                }
                v41 -= 8;
              }
              while (v41 != v40);
              uint64_t v42 = *(v35 - 6);
            }
            *(v35 - 5) = v40;
            operator delete(v42);
          }
          uint64_t v43 = v35 - 10;
          if (*((char *)v35 - 57) < 0) {
            operator delete(*v43);
          }
          v35 -= 10;
        }
        while (v43 != v34);
        uint64_t v36 = __p;
      }
      int8x16_t v126 = v34;
      operator delete(v36);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v124);
    if (v123 < 0)
    {
      operator delete(v122);
      if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_43;
      }
    }
    else if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      uint64_t v32 = v20[2];
      goto LABEL_44;
    }
    operator delete(v121.__r_.__value_.__l.__data_);
    goto LABEL_43;
  }
LABEL_79:
}

void sub_1A2513734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingContinueLabelFeature::isRouteFeature(md::ARWalkingContinueLabelFeature *this)
{
  return 1;
}

unint64_t md::ARWalkingContinueLabelFeature::routeCoordinate(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 272);
  if (!v2) {
    return 0xBF80000000000000;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 272;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      id v7 = (uint64_t *)v2;
    }
    else {
      id v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 != a1 + 272 && v3 >= *(_DWORD *)(v4 + 32) && (uint64_t v8 = *(void *)(v4 + 40)) != 0) {
    return *(void *)(v8 + 128);
  }
  else {
    return 0xBF80000000000000;
  }
}

uint64_t md::ARWalkingContinueLabelFeature::dedupingGroup@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 392);
  *a2 = *(void *)(this + 384);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t md::ARWalkingContinueLabelFeature::labelFeatureType(md::ARWalkingContinueLabelFeature *this)
{
  return 26;
}

id md::ARWalkingContinueLabelFeature::arWalkingFeature(id *this)
{
  return this[25];
}

uint64_t md::ARWalkingContinueLabelFeature::skewOffsettingLimits@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 272);
  uint64_t v4 = 0;
  if (v3)
  {
    unsigned int v5 = *a2;
    uint64_t v6 = result + 272;
    do
    {
      unsigned int v7 = *(_DWORD *)(v3 + 32);
      BOOL v8 = v7 >= v5;
      if (v7 >= v5) {
        uint64_t v9 = (uint64_t *)v3;
      }
      else {
        uint64_t v9 = (uint64_t *)(v3 + 8);
      }
      if (v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != result + 272 && v5 >= *(_DWORD *)(v6 + 32))
    {
      uint64_t v10 = *(void *)(v6 + 40);
      if (v10)
      {
        if (*(_DWORD *)(v10 + 164) != v5) {
          uint64_t v4 = *(void *)(v10 + 120);
        }
      }
    }
  }
  *a3 = v4;
  return result;
}

unint64_t md::ARWalkingContinueLabelFeature::skewOffsettingVector(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 272);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 272;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unsigned int v7 = (uint64_t *)v2;
    }
    else {
      unsigned int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 272 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 40);
  if (!v8) {
    return 0;
  }
  if (*(_DWORD *)(v8 + 164) == v3) {
    return 0;
  }
  return *(void *)(v8 + 108) | *(void *)(v8 + 108) & 0xFFFFFFFFFFFFFF00;
}

uint64_t md::ARWalkingContinueLabelFeature::facingVector(uint64_t result, unsigned int *a2)
{
  uint64_t v2 = *(void *)(result + 272);
  if (v2)
  {
    unsigned int v3 = *a2;
    uint64_t v4 = result + 272;
    do
    {
      unsigned int v5 = *(_DWORD *)(v2 + 32);
      BOOL v6 = v5 >= v3;
      if (v5 >= v3) {
        unsigned int v7 = (uint64_t *)v2;
      }
      else {
        unsigned int v7 = (uint64_t *)(v2 + 8);
      }
      if (v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }
    while (*v7);
    if (v4 != result + 272 && v3 >= *(_DWORD *)(v4 + 32))
    {
      uint64_t v8 = *(void *)(v4 + 40);
      if (v8) {
        return *(void *)(v8 + 96);
      }
    }
  }
  return result;
}

long long *md::ARWalkingContinueLabelFeature::labelPoint(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 272);
  if (v2)
  {
    unsigned int v3 = *a2;
    uint64_t v4 = a1 + 272;
    do
    {
      unsigned int v5 = *(_DWORD *)(v2 + 32);
      BOOL v6 = v5 >= v3;
      if (v5 >= v3) {
        unsigned int v7 = (uint64_t *)v2;
      }
      else {
        unsigned int v7 = (uint64_t *)(v2 + 8);
      }
      if (v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }
    while (*v7);
    if (v4 != a1 + 272 && v3 >= *(_DWORD *)(v4 + 32))
    {
      uint64_t v8 = *(void *)(v4 + 40);
      if (v8) {
        return (long long *)(v8 + 48);
      }
    }
  }
  {
    qword_1EB317748 = 0;
    md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
    *(_OWORD *)&qword_1EB317738 = 0u;
    dword_1EB317750 = 2139095039;
    word_1EB317754 = 256;
    byte_1EB317756 = 1;
  }
  return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
}

BOOL md::ARWalkingContinueLabelFeature::updateDynamicStyling(md::ARWalkingContinueLabelFeature *this, LabelManager *a2, md::Label *a3)
{
  uint64_t v4 = (uint64_t **)((char *)this + 360);
  unsigned int v5 = (char *)*((void *)this + 45);
  if (v5)
  {
    unsigned int v6 = *((_DWORD *)a3 + 12);
    unsigned int v7 = (uint64_t **)((char *)this + 360);
    uint64_t v8 = (char *)*((void *)this + 45);
    do
    {
      unsigned int v9 = *((_DWORD *)v8 + 7);
      BOOL v10 = v9 >= v6;
      if (v9 >= v6) {
        uint64_t v11 = (char **)v8;
      }
      else {
        uint64_t v11 = (char **)(v8 + 8);
      }
      if (v10) {
        unsigned int v7 = (uint64_t **)v8;
      }
      uint64_t v8 = *v11;
    }
    while (*v11);
    BOOL v12 = v7 != v4 && v6 >= *((_DWORD *)v7 + 7) && *((unsigned __int8 *)v7 + 32) != *((unsigned __int8 *)this + 418);
    char v13 = *((unsigned char *)this + 418);
    do
    {
      while (1)
      {
        uint64_t v14 = v5;
        unsigned int v15 = *((_DWORD *)v5 + 7);
        if (v6 < v15) {
          break;
        }
        if (v15 >= v6) {
          goto LABEL_25;
        }
        unsigned int v5 = (char *)*((void *)v14 + 1);
        if (!v5)
        {
          uint64_t v4 = (uint64_t **)(v14 + 8);
          goto LABEL_22;
        }
      }
      unsigned int v5 = *(char **)v14;
    }
    while (*(void *)v14);
    uint64_t v4 = (uint64_t **)v14;
  }
  else
  {
    BOOL v12 = 0;
    char v13 = *((unsigned char *)this + 418);
    unsigned int v6 = *((_DWORD *)a3 + 12);
    uint64_t v14 = (char *)this + 360;
  }
LABEL_22:
  uint64_t v16 = v14;
  uint64_t v14 = (char *)operator new(0x28uLL);
  *((_DWORD *)v14 + 7) = v6;
  v14[32] = 0;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = v16;
  *uint64_t v4 = (uint64_t *)v14;
  uint64_t v17 = **((void **)this + 44);
  uint64_t v18 = (uint64_t *)v14;
  if (v17)
  {
    *((void *)this + 44) = v17;
    uint64_t v18 = *v4;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 45), v18);
  ++*((void *)this + 46);
LABEL_25:
  v14[32] = v13;
  return v12;
}

uint64_t md::ARWalkingContinueLabelFeature::newRootPart(uint64_t a1, md::LabelManager *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 272);
  if (!v8) {
    goto LABEL_15;
  }
  unsigned int v9 = *(_DWORD *)(a3 + 48);
  uint64_t v10 = a1 + 272;
  do
  {
    unsigned int v11 = *(_DWORD *)(v8 + 32);
    BOOL v12 = v11 >= v9;
    if (v11 >= v9) {
      char v13 = (uint64_t *)v8;
    }
    else {
      char v13 = (uint64_t *)(v8 + 8);
    }
    if (v12) {
      uint64_t v10 = v8;
    }
    uint64_t v8 = *v13;
  }
  while (*v13);
  if (v10 != a1 + 272 && v9 >= *(_DWORD *)(v10 + 32) && (uint64_t v14 = *(void *)(v10 + 40)) != 0)
  {
    BOOL v15 = *(_DWORD *)(v14 + 164) == v9;
    uint64_t v16 = *(void **)(a1 + 200);
    if (!v16)
    {
LABEL_14:
      int v33 = 0;
      uint64_t v17 = "";
      goto LABEL_19;
    }
  }
  else
  {
LABEL_15:
    BOOL v15 = 0;
    uint64_t v16 = *(void **)(a1 + 200);
    if (!v16) {
      goto LABEL_14;
    }
  }
  uint64_t v18 = [v16 displayText];
  if (v18)
  {
    id v30 = *(id *)(a1 + 200);
    uint64_t v31 = (void *)v18;
    id v32 = [v30 displayText];
    uint64_t v17 = (const char *)[v32 UTF8String];
    int v33 = 1;
  }
  else
  {
    uint64_t v31 = 0;
    int v33 = 0;
    uint64_t v17 = "";
  }
LABEL_19:
  double v19 = (float *)a3;
  {
    operator new();
  }
  uint64_t v36 = mdm::Allocator::instance(void)::alloc;
  size_t v20 = strlen(v17);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v21 = v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, v23 + 1, 1);
    __dst[1] = v21;
    unint64_t v35 = v24 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_27;
  }
  HIBYTE(v35) = v20;
  uint64_t v22 = __dst;
  if (v20) {
LABEL_27:
  }
    memmove(v22, v17, v21);
  *((unsigned char *)v22 + v21) = 0;
  if (v33)
  {
  }
  if (v16)
  {
  }
  float v25 = (long long *)(*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 480))(a1, 0);
  int v26 = (*(unsigned __int8 *)(a4 + 250) >> 4) & 1;
  if (v15) {
    uint64_t Part = md::ARWalkingPerpendicularManeuverLabelPart::createPart(a2, v19, a4, (uint64_t)__dst, v26, v25);
  }
  else {
    uint64_t Part = md::ARWalkingFaceAlignedManeuverLabelPart::createPart(a2, v19, a4, (uint64_t)__dst, v26, v25);
  }
  uint64_t v28 = Part;
  if (SHIBYTE(v35) < 0) {
    (*(void (**)(uint64_t, void, unint64_t))(*(void *)v36 + 40))(v36, __dst[0], v35 & 0x7FFFFFFFFFFFFFFFLL);
  }
  return v28;
}

void sub_1A2513EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A2513F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (SHIBYTE(a15) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a16 + 40))(a16, a13, a15 & 0x7FFFFFFFFFFFFFFFLL);
  }
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingContinueLabelFeature::labelTypeAtPosition()
{
  return 1;
}

void md::ARWalkingContinueLabelFeature::~ARWalkingContinueLabelFeature(md::ARWalkingContinueLabelFeature *this)
{
  md::ARWalkingContinueLabelFeature::~ARWalkingContinueLabelFeature(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EF54ACD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 45));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 42));
  unsigned int v3 = (void *)*((void *)this + 38);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      unsigned int v3 = v4;
    }
    while (v4);
  }
  unsigned int v5 = (void *)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v5) {
    operator delete(v5);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 34));
  geo::Pool<md::ARWalkingContinueLabelFeature::Placement>::disposeElements((uint64_t)this + 216);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 28));
  *((void *)this + 24) = &unk_1EF559C18;

  md::LabelFeature::~LabelFeature(this);
}

void sub_1A25140B8(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 224));
  _Unwind_Resume(a1);
}

void geo::Pool<md::ARWalkingContinueLabelFeature::Placement>::disposeElements(uint64_t a1)
{
  id v30 = 0;
  uint64_t v31 = 0;
  unint64_t v29 = &v30;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = &v30;
      unsigned int v5 = &v30;
      if (v30)
      {
        unsigned int v6 = v30;
        while (1)
        {
          while (1)
          {
            unsigned int v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            unsigned int v6 = *v5;
            uint64_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          unsigned int v6 = v5[1];
          if (!v6)
          {
            uint64_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        char v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        void v8[2] = (uint64_t)v5;
        *uint64_t v4 = v8;
        if (*v29)
        {
          unint64_t v29 = (uint64_t **)*v29;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v30, v8);
        uint64_t v3 = ++v31;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void **)a1;
  unsigned int v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_48;
    }
    goto LABEL_50;
  }
  unint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        unint64_t v17 = v16 + 168 * v15;
        uint64_t v18 = v30;
        if (!v30) {
          goto LABEL_38;
        }
        double v19 = &v30;
        do
        {
          size_t v20 = v18;
          size_t v21 = v19;
          unint64_t v22 = v18[4];
          uint64_t v23 = (uint64_t **)(v18 + 1);
          if (v22 >= v17)
          {
            uint64_t v23 = (uint64_t **)v20;
            double v19 = (uint64_t **)v20;
          }
          uint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v30) {
          goto LABEL_38;
        }
        if (v22 < v17) {
          size_t v20 = (uint64_t *)v21;
        }
        if (v17 < v20[4])
        {
LABEL_38:
          uint64_t v24 = *(std::__shared_weak_count **)(v17 + 152);
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        ++v15;
        unint64_t v14 = *(void *)(a1 + 24);
      }
      while (v15 < v14);
    }
    float v25 = (void *)v10[1];
    if (v25)
    {
      do
      {
        int v26 = v25;
        float v25 = (void *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        int v26 = (void *)v10[2];
        BOOL v12 = *v26 == (void)v10;
        uint64_t v10 = v26;
      }
      while (!v12);
    }
    uint64_t v10 = v26;
  }
  while (v26 != v11);
  uint64_t v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_50:
      free((void *)v10[4]);
      float v27 = (void *)v10[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          float v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v10[2];
          BOOL v12 = *v28 == (void)v10;
          uint64_t v10 = v28;
        }
        while (!v12);
      }
      uint64_t v10 = v28;
    }
    while (v28 != v11);
  }
LABEL_48:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v30);
}

void sub_1A2514374(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void geo::_retain_ptr<VKARWalkingContinueFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559C18;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKARWalkingContinueFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559C18;

  return a1;
}

uint64_t std::__shared_ptr_pointer<md::ARWalkingContinueFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,md::ARWalkingContinueFeatureDedupingGroup>,std::allocator<md::ARWalkingContinueFeatureDedupingGroup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<md::ARWalkingContinueFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,md::ARWalkingContinueFeatureDedupingGroup>,std::allocator<md::ARWalkingContinueFeatureDedupingGroup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::ARWalkingContinueLabelFeature::prepareCandidatePlacements(geo::PolylineCoordinate const&)::$_0::operator()(id **a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = a1[3];
  [**a1 range];
  [**a1 range];
  if ((GEOPolylineCoordinateWithinRange() & 1) == 0)
  {
    if (GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::onceToken, &__block_literal_global_33881);
    }
    uint64_t v36 = GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log, OS_LOG_TYPE_INFO))
    {
      int8x16_t v37 = (std::string *)**a1;
      size_t v38 = (void *)*a3;
      unsigned int v39 = *a2;
      double v40 = *((float *)a2 + 1);
      *(_DWORD *)long long buf = 138413058;
      int v112 = v37;
      __int16 v113 = 2048;
      id v114 = v38;
      __int16 v115 = 1024;
      *(_DWORD *)uint64_t v116 = v39;
      *(_WORD *)&v116[4] = 2048;
      *(double *)&v116[6] = v40;
      _os_log_impl(&dword_1A1780000, v36, OS_LOG_TYPE_INFO, "Failed to add placement for %@ - distanceFromStart:%f routeCoordinate:(%d,%f)", buf, 0x26u);
    }
    return;
  }
  uint64_t v109 = a3;
  [*a1[1] pointWithAltitudeCorrectionAtRouteCoordinate:*(void *)a2];
  double v8 = v7;
  double v10 = v9;
  long double v12 = tan(v11 * 0.00872664626 + 0.785398163);
  double v13 = v8 * 0.00277777778 + 0.5;
  double v14 = log(v12) * 0.159154943 + 0.5;
  [*a1[1] courseAtRouteCoordinateIndex:*a2];
  long double v16 = fmod(360.0 - v15, 360.0);
  float v17 = fmod(v16 + 360.0, 360.0) * 0.0174532925;
  __float2 v18 = __sincosf_stret(v17);
  float v19 = 1.0 / sqrtf((float)(v18.__cosval * v18.__cosval) + (float)(v18.__sinval * v18.__sinval));
  float v20 = v19 * v18.__cosval;
  float v21 = v19 * v18.__sinval;
  unint64_t v22 = a1[2];
  uint64_t v23 = *(unsigned int *)v22;
  uint64_t v24 = (v23 + 1);
  *(_DWORD *)unint64_t v22 = v23 + 2;
  float v25 = v10;
  unint64_t v26 = (unint64_t)v6[32];
  if (!v26)
  {
    float v27 = (unint64_t *)malloc_type_malloc((size_t)v6[31], 0x160B39uLL);
    uint64_t v28 = v27;
    id v30 = (uint64_t **)(v6 + 28);
    unint64_t v29 = (uint64_t *)v6[28];
    if (v29)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v31 = (uint64_t **)v29;
          unint64_t v32 = v29[4];
          if ((unint64_t)v27 >= v32) {
            break;
          }
          unint64_t v29 = *v31;
          id v30 = v31;
          if (!*v31) {
            goto LABEL_10;
          }
        }
        if (v32 >= (unint64_t)v27) {
          break;
        }
        unint64_t v29 = v31[1];
        if (!v29)
        {
          id v30 = v31 + 1;
          goto LABEL_10;
        }
      }
    }
    else
    {
      uint64_t v31 = (uint64_t **)(v6 + 28);
LABEL_10:
      int v33 = (uint64_t *)operator new(0x28uLL);
      v33[4] = (uint64_t)v28;
      *int v33 = 0;
      v33[1] = 0;
      v33[2] = (uint64_t)v31;
      *id v30 = v33;
      uint64_t v34 = *(void **)v6[27];
      if (v34)
      {
        v6[27] = v34;
        unint64_t v35 = *v30;
      }
      else
      {
        unint64_t v35 = v33;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[28], v35);
      v6[29] = (char *)v6[29] + 1;
    }
    unint64_t v26 = (unint64_t)v6[32];
    uint64_t v41 = 168 * (void)v6[30] - 168;
    if ((v41 & 0x8000000000000000) == 0)
    {
      uint64_t v42 = (char *)v28 + v41;
      uint64_t v43 = (unint64_t *)((char *)v28 + v41);
      do
      {
        unint64_t *v43 = v26;
        v43 -= 21;
        unint64_t v26 = (unint64_t)v42;
        uint64_t v42 = (char *)v43;
      }
      while (v43 >= v28);
      unint64_t v26 = (unint64_t)(v43 + 21);
    }
    v6[32] = (id)v26;
  }
  v6[32] = *(id *)v26;
  *(void *)(v26 + 8) = 0;
  *(void *)(v26 + 16) = 0;
  *(void *)unint64_t v26 = 0;
  *(double *)(v26 + 24) = v13;
  *(double *)(v26 + 32) = v14;
  *(float *)(v26 + 40) = v25;
  *(_WORD *)(v26 + 44) = 256;
  *(unsigned char *)(v26 + 46) = 1;
  *(void *)(v26 + 56) = 0;
  *(void *)(v26 + 64) = 0;
  *(void *)(v26 + 48) = 0;
  *(double *)(v26 + 72) = v13;
  *(double *)(v26 + 80) = v14;
  *(float *)(v26 + 88) = v25;
  *(_WORD *)(v26 + 92) = 256;
  *(unsigned char *)(v26 + 94) = 1;
  *(float *)(v26 + 96) = -v18.__sinval;
  *(float *)(v26 + 100) = v18.__cosval;
  *(_DWORD *)(v26 + 104) = 0;
  *(float *)(v26 + 108) = v20;
  *(float *)(v26 + 112) = v21;
  __asm { FMOV            V0.2D, #2.0 }
  *(void *)(v26 + 116) = _Q0;
  *(_DWORD *)(v26 + 124) = 0x40000000;
  *(void *)(v26 + 128) = *(void *)a2;
  *(unsigned char *)(v26 + 136) = 0;
  *(void *)(v26 + 144) = 0;
  *(void *)(v26 + 152) = 0;
  *(void *)(v26 + 160) = v23 | (v24 << 32);
  int32x4_t v49 = (uint64_t **)(v6 + 34);
  unint64_t v50 = (unint64_t)(v6 + 34);
  unsigned int v51 = (unsigned int **)(v6 + 34);
  uint64_t v52 = (unsigned int *)v6[34];
  if (v52)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v51 = (unsigned int **)v52;
        unsigned int v53 = v52[8];
        if (v23 >= v53) {
          break;
        }
        uint64_t v52 = *v51;
        unint64_t v50 = (unint64_t)v51;
        if (!*v51) {
          goto LABEL_30;
        }
      }
      if (v53 >= v23) {
        break;
      }
      uint64_t v52 = v51[1];
      if (!v52)
      {
        unint64_t v50 = (unint64_t)(v51 + 1);
        goto LABEL_30;
      }
    }
  }
  else
  {
LABEL_30:
    uint64_t v54 = (unsigned int *)v51;
    unsigned int v51 = (unsigned int **)operator new(0x30uLL);
    *((_DWORD *)v51 + 8) = v23;
    v51[5] = 0;
    uint64_t *v51 = 0;
    v51[1] = 0;
    v51[2] = v54;
    *(void *)unint64_t v50 = v51;
    uint64_t v55 = *(void **)v6[33];
    float v56 = (uint64_t *)v51;
    if (v55)
    {
      v6[33] = v55;
      float v56 = *(uint64_t **)v50;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[34], v56);
    v6[35] = (char *)v6[35] + 1;
  }
  v51[5] = (unsigned int *)v26;
  if (*((unsigned char *)v6 + 417))
  {
    BOOL v57 = *v49;
    int64_t v58 = (uint64_t **)(v6 + 34);
    if (*v49)
    {
      while (1)
      {
        while (1)
        {
          int64_t v58 = (uint64_t **)v57;
          unsigned int v59 = *((_DWORD *)v57 + 8);
          if (v24 >= v59) {
            break;
          }
          BOOL v57 = *v58;
          int32x4_t v49 = v58;
          if (!*v58) {
            goto LABEL_41;
          }
        }
        if (v59 >= v24) {
          break;
        }
        BOOL v57 = v58[1];
        if (!v57)
        {
          int32x4_t v49 = v58 + 1;
          goto LABEL_41;
        }
      }
    }
    else
    {
LABEL_41:
      long long v60 = (uint64_t *)v58;
      int64_t v58 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v58 + 8) = v24;
      v58[5] = 0;
      char *v58 = 0;
      v58[1] = 0;
      v58[2] = v60;
      *int32x4_t v49 = (uint64_t *)v58;
      float v61 = *(void **)v6[33];
      int8x16_t v62 = (uint64_t *)v58;
      if (v61)
      {
        v6[33] = v61;
        int8x16_t v62 = *v49;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[34], v62);
      v6[35] = (char *)v6[35] + 1;
    }
    v58[5] = (uint64_t *)v26;
  }
  unint64_t v63 = 0x9DDFEA08EB382D69 * (((8 * v26) + 8) ^ HIDWORD(v26));
  unint64_t v64 = 0x9DDFEA08EB382D69 * (HIDWORD(v26) ^ (v63 >> 47) ^ v63);
  unint64_t v65 = v64 ^ (v64 >> 47);
  unint64_t v66 = 0x9DDFEA08EB382D69 * v65;
  unint64_t v67 = (unint64_t)v6[37];
  if (v67)
  {
    uint8x8_t v68 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
    v68.i16[0] = vaddlv_u8(v68);
    if (v68.u32[0] > 1uLL)
    {
      unint64_t v50 = 0x9DDFEA08EB382D69 * v65;
      if (v66 >= v67) {
        unint64_t v50 = v66 % v67;
      }
    }
    else
    {
      unint64_t v50 = v66 & (v67 - 1);
    }
    int8x16_t v69 = (void *)*((void *)v6[36] + v50);
    if (v69)
    {
      double v70 = (void *)*v69;
      if (v70)
      {
        if (v68.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v72 = v70[1];
            if (v72 == v66)
            {
              if (v70[2] == v26) {
                goto LABEL_126;
              }
            }
            else if ((v72 & (v67 - 1)) != v50)
            {
              goto LABEL_66;
            }
            double v70 = (void *)*v70;
            if (!v70) {
              goto LABEL_66;
            }
          }
        }
        do
        {
          unint64_t v71 = v70[1];
          if (v71 == v66)
          {
            if (v70[2] == v26) {
              goto LABEL_126;
            }
          }
          else
          {
            if (v71 >= v67) {
              v71 %= v67;
            }
            if (v71 != v50) {
              break;
            }
          }
          double v70 = (void *)*v70;
        }
        while (v70);
      }
    }
  }
LABEL_66:
  uint64_t v73 = operator new(0x18uLL);
  *uint64_t v73 = 0;
  v73[1] = v66;
  v73[2] = v26;
  float v74 = (float)((unint64_t)v6[39] + 1);
  float v75 = *((float *)v6 + 80);
  if (!v67 || (float)(v75 * (float)v67) < v74)
  {
    BOOL v76 = 1;
    if (v67 >= 3) {
      BOOL v76 = (v67 & (v67 - 1)) != 0;
    }
    unint64_t v77 = v76 | (2 * v67);
    unint64_t v78 = vcvtps_u32_f32(v74 / v75);
    if (v77 <= v78) {
      size_t prime = v78;
    }
    else {
      size_t prime = v77;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v67 = (unint64_t)v6[37];
    }
    if (prime <= v67)
    {
      if (prime >= v67) {
        goto LABEL_103;
      }
      unint64_t v92 = vcvtps_u32_f32((float)(unint64_t)v6[39] / *((float *)v6 + 80));
      if (v67 < 3 || (uint8x8_t v93 = (uint8x8_t)vcnt_s8((int8x8_t)v67), v93.i16[0] = vaddlv_u8(v93), v93.u32[0] > 1uLL))
      {
        unint64_t v92 = std::__next_prime(v92);
      }
      else
      {
        uint64_t v94 = 1 << -(char)__clz(v92 - 1);
        if (v92 >= 2) {
          unint64_t v92 = v94;
        }
      }
      if (prime <= v92) {
        size_t prime = v92;
      }
      if (prime >= v67)
      {
        unint64_t v67 = (unint64_t)v6[37];
LABEL_103:
        if ((v67 & (v67 - 1)) != 0)
        {
          if (v66 >= v67) {
            unint64_t v50 = v66 % v67;
          }
          else {
            unint64_t v50 = v66;
          }
        }
        else
        {
          unint64_t v50 = (v67 - 1) & v66;
        }
        goto LABEL_116;
      }
      if (!prime)
      {
        id v108 = v6[36];
        v6[36] = 0;
        if (v108) {
          operator delete(v108);
        }
        unint64_t v67 = 0;
        v6[37] = 0;
        goto LABEL_103;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v80 = operator new(8 * prime);
    id v81 = v6[36];
    v6[36] = v80;
    if (v81) {
      operator delete(v81);
    }
    uint64_t v82 = 0;
    v6[37] = (id)prime;
    do
      *((void *)v6[36] + v82++) = 0;
    while (prime != v82);
    uint64_t v83 = v6[38];
    if (!v83)
    {
LABEL_102:
      unint64_t v67 = prime;
      goto LABEL_103;
    }
    uint64_t v84 = v6 + 38;
    size_t v85 = v83[1];
    size_t v86 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v87 = v85 & v86;
      *((void *)v6[36] + v87) = v84;
      for (uint64_t i = (void *)*v83; *v83; uint64_t i = (void *)*v83)
      {
        size_t v89 = i[1] & v86;
        if (v89 == v87)
        {
          uint64_t v83 = i;
        }
        else
        {
          uint64_t v90 = v6[36];
          if (v90[v89])
          {
            *uint64_t v83 = *i;
            uint64_t v91 = 8 * v89;
            void *i = **(void **)((char *)v6[36] + v91);
            **(void **)((char *)v6[36] + v91) = i;
          }
          else
          {
            v90[v89] = v83;
            uint64_t v83 = i;
            size_t v87 = v89;
          }
        }
      }
      goto LABEL_102;
    }
    if (v85 >= prime) {
      v85 %= prime;
    }
    *((void *)v6[36] + v85) = v84;
    uint64_t v95 = (void *)*v83;
    if (!*v83) {
      goto LABEL_102;
    }
    while (1)
    {
      size_t v97 = v95[1];
      if (v97 >= prime) {
        v97 %= prime;
      }
      if (v97 != v85)
      {
        int v98 = v6[36];
        if (!v98[v97])
        {
          v98[v97] = v83;
          goto LABEL_107;
        }
        *uint64_t v83 = *v95;
        uint64_t v96 = 8 * v97;
        *uint64_t v95 = **(void **)((char *)v6[36] + v96);
        **(void **)((char *)v6[36] + v96) = v95;
        uint64_t v95 = v83;
      }
      size_t v97 = v85;
LABEL_107:
      uint64_t v83 = v95;
      uint64_t v95 = (void *)*v95;
      size_t v85 = v97;
      if (!v95) {
        goto LABEL_102;
      }
    }
  }
LABEL_116:
  int8x16_t v99 = v6[36];
  double v100 = (void *)v99[v50];
  if (v100)
  {
    *uint64_t v73 = *v100;
  }
  else
  {
    *uint64_t v73 = v6[38];
    v6[38] = v73;
    v99[v50] = v6 + 38;
    if (!*v73) {
      goto LABEL_125;
    }
    unint64_t v101 = *(void *)(*v73 + 8);
    if ((v67 & (v67 - 1)) != 0)
    {
      if (v101 >= v67) {
        v101 %= v67;
      }
    }
    else
    {
      v101 &= v67 - 1;
    }
    double v100 = (char *)v6[36] + 8 * v101;
  }
  *double v100 = v73;
LABEL_125:
  v6[39] = (char *)v6[39] + 1;
LABEL_126:
  if (GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::onceToken, &__block_literal_global_33881);
  }
  uint64_t v102 = (id)GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log;
  if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
  {
    if (v23)
    {
      std::to_string(&v110, v23);
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v103 = &v110;
      }
      else {
        uint64_t v103 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
    }
    else
    {
      *((unsigned char *)&v110.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v110, "UNKNOWN");
      uint64_t v103 = &v110;
    }
    id v104 = **a1;
    uint64_t v105 = *v109;
    unsigned int v106 = *a2;
    double v107 = *((float *)a2 + 1);
    *(_DWORD *)long long buf = 136316162;
    int v112 = v103;
    __int16 v113 = 2112;
    id v114 = v104;
    __int16 v115 = 2048;
    *(void *)uint64_t v116 = v105;
    *(_WORD *)&v116[8] = 1024;
    *(_DWORD *)&v116[10] = v106;
    __int16 v117 = 2048;
    double v118 = v107;
    _os_log_impl(&dword_1A1780000, v102, OS_LOG_TYPE_INFO, "Added placement (%s) for %@ - distanceFromStart:%f routeCoordinate:(%d,%f)", buf, 0x30u);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v110.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1A2514F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL47GEOGetVectorKitARWalkingContinueLabelFeatureLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "ARWalkingContinueLabelFeature");
  uint64_t v1 = (void *)GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log;
  GEOGetVectorKitARWalkingContinueLabelFeatureLog(void)::log = (uint64_t)v0;
}

void md::ARWalkingContinueLabelFeature::setHighPrecisionAltitudeForPlacement(uint64_t a1, unsigned int a2, uint64_t *a3, char a4, double a5)
{
  uint64_t v5 = *(void *)(a1 + 272);
  if (!v5) {
    return;
  }
  uint64_t v9 = a1 + 272;
  do
  {
    unsigned int v10 = *(_DWORD *)(v5 + 32);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      long double v12 = (uint64_t *)v5;
    }
    else {
      long double v12 = (uint64_t *)(v5 + 8);
    }
    if (v11) {
      uint64_t v9 = v5;
    }
    uint64_t v5 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 272) {
    return;
  }
  if (*(_DWORD *)(v9 + 32) > a2) {
    return;
  }
  uint64_t v13 = *(void *)(v9 + 40);
  if (!v13) {
    return;
  }
  float v14 = a5;
  if (a4) {
    float v15 = v14;
  }
  else {
    float v15 = 0.0;
  }
  if (!*(void *)(v13 + 144))
  {
    if (!*a3)
    {
      long double v16 = 0;
      goto LABEL_21;
    }
    if (md::HighPrecisionAltitudeRequest::resolveResults((md::HighPrecisionAltitudeRequest *)*a3))
    {
      long double v16 = (md::HighPrecisionAltitudeRequest *)*a3;
LABEL_21:
      *(unsigned char *)(v13 + 136) = 1;
      uint64_t v17 = a3[1];
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      __float2 v18 = *(std::__shared_weak_count **)(v13 + 152);
      *(void *)(v13 + 144) = v16;
      *(void *)(v13 + 152) = v17;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      long long v19 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)(v13 + 48) = *(_OWORD *)v13;
      *(_OWORD *)(v13 + 64) = v19;
      *(void *)(v13 + 80) = *(void *)(v13 + 32);
      *(_DWORD *)(v13 + 88) = *(_DWORD *)(v13 + 40);
      *(_DWORD *)(v13 + 91) = *(_DWORD *)(v13 + 43);
      if (a4) {
        *(float *)(v13 + 88) = v15;
      }
    }
  }
  float v20 = (uint64_t **)(a1 + 336);
  unsigned int v21 = *(_DWORD *)(v13 + 160);
  unint64_t v22 = *(uint64_t **)(a1 + 336);
  uint64_t v23 = (uint64_t **)(a1 + 336);
  uint64_t v24 = (uint64_t **)(a1 + 336);
  if (v22)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v24 = (uint64_t **)v22;
        unsigned int v25 = *((_DWORD *)v22 + 8);
        if (v21 >= v25) {
          break;
        }
        unint64_t v22 = *v24;
        uint64_t v23 = v24;
        if (!*v24) {
          goto LABEL_35;
        }
      }
      if (v25 >= v21) {
        break;
      }
      unint64_t v22 = v24[1];
      if (!v22)
      {
        uint64_t v23 = v24 + 1;
        goto LABEL_35;
      }
    }
  }
  else
  {
LABEL_35:
    unint64_t v26 = (uint64_t *)v24;
    uint64_t v24 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v24 + 8) = v21;
    v24[5] = 0;
    *uint64_t v24 = 0;
    v24[1] = 0;
    v24[2] = v26;
    *uint64_t v23 = (uint64_t *)v24;
    uint64_t v27 = **(void **)(a1 + 328);
    uint64_t v28 = (uint64_t *)v24;
    if (v27)
    {
      *(void *)(a1 + 328) = v27;
      uint64_t v28 = *v23;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 336), v28);
    ++*(void *)(a1 + 344);
  }
  v24[5] = (uint64_t *)v13;
  unsigned int v29 = *(_DWORD *)(v13 + 164);
  id v30 = *v20;
  uint64_t v31 = (uint64_t **)(a1 + 336);
  if (*v20)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v31 = (uint64_t **)v30;
        unsigned int v32 = *((_DWORD *)v30 + 8);
        if (v29 >= v32) {
          break;
        }
        id v30 = *v31;
        float v20 = v31;
        if (!*v31) {
          goto LABEL_45;
        }
      }
      if (v32 >= v29) {
        break;
      }
      id v30 = v31[1];
      if (!v30)
      {
        float v20 = v31 + 1;
        goto LABEL_45;
      }
    }
  }
  else
  {
LABEL_45:
    int v33 = (uint64_t *)v31;
    uint64_t v31 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v31 + 8) = v29;
    v31[5] = 0;
    *uint64_t v31 = 0;
    v31[1] = 0;
    v31[2] = v33;
    *float v20 = (uint64_t *)v31;
    uint64_t v34 = **(void **)(a1 + 328);
    unint64_t v35 = (uint64_t *)v31;
    if (v34)
    {
      *(void *)(a1 + 328) = v34;
      unint64_t v35 = *v20;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 336), v35);
    ++*(void *)(a1 + 344);
  }
  v31[5] = (uint64_t *)v13;
}

void md::RealisticMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v3 = v2[2];
  if (!*(void *)&v3) {
    return;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x2FED70A4459DFCA1;
    if (*(void *)&v3 <= 0x2FED70A4459DFCA1uLL) {
      uint64_t v5 = 0x2FED70A4459DFCA1uLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x2FED70A4459DFCA1;
  }
  unsigned int v6 = *(void **)(*(void *)&v2[1] + 8 * v5);
  if (!v6) {
    return;
  }
  double v7 = (void *)*v6;
  if (!v7) {
    return;
  }
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x2FED70A4459DFCA1)
      {
        if (v7[2] == 0x2FED70A4459DFCA1) {
          goto LABEL_22;
        }
      }
      else if ((v10 & v8) != v5)
      {
        return;
      }
      double v7 = (void *)*v7;
      if (!v7) {
        return;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x2FED70A4459DFCA1) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      return;
    }
LABEL_11:
    double v7 = (void *)*v7;
    if (!v7) {
      return;
    }
  }
  if (v7[2] != 0x2FED70A4459DFCA1) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v11 = v7[5];
  if (v11)
  {
    long double v12 = *(uint64_t **)(a2 + 1128);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    if (v13 != v14)
    {
      while (*(unsigned char *)v13 != 21)
      {
        v13 += 16;
        if (v13 == v14) {
          goto LABEL_31;
        }
      }
    }
    if (v13 == v14) {
LABEL_31:
    }
      BOOL v15 = 0;
    else {
      BOOL v15 = *(void *)(v13 + 8) != 0;
    }
    md::StyleLogic::setGroundMode(v11, v15);
  }
}

void md::RealisticMapEngineMode::applyRenderLayerSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int8x8_t v3 = *(uint64_t **)(a2 + 1128);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    uint64_t v6 = v4;
    while (*(unsigned char *)v6 != 2)
    {
      v6 += 16;
      if (v6 == v5) {
        goto LABEL_31;
      }
    }
  }
  if (v6 != v5)
  {
    if (*(void *)(v6 + 8))
    {
      int8x8_t v7 = (int8x8_t)a3[1];
      if (v7)
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          uint64_t v9 = 3;
          if (*(void *)&v7 <= 3uLL) {
            uint64_t v9 = 3u % a3[1];
          }
        }
        else
        {
          uint64_t v9 = (v7.i8[0] - 1) & 3;
        }
        uint64_t v10 = *(uint64_t ***)(*a3 + 8 * v9);
        if (v10)
        {
          uint64_t v11 = *v10;
          if (v11)
          {
            if (v8.u32[0] < 2uLL)
            {
              uint64_t v12 = *(void *)&v7 - 1;
              while (1)
              {
                uint64_t v14 = v11[1];
                if (v14 == 3)
                {
                  if (*((unsigned char *)v11 + 16) == 3) {
                    goto LABEL_29;
                  }
                }
                else if ((v14 & v12) != v9)
                {
                  goto LABEL_31;
                }
                uint64_t v11 = (uint64_t *)*v11;
                if (!v11) {
                  goto LABEL_31;
                }
              }
            }
            do
            {
              unint64_t v13 = v11[1];
              if (v13 == 3)
              {
                if (*((unsigned char *)v11 + 16) == 3)
                {
LABEL_29:
                  if (*((unsigned char *)v11 + 17) == 2) {
                    *((unsigned char *)v11 + 17) = 1;
                  }
                  break;
                }
              }
              else
              {
                if (v13 >= *(void *)&v7) {
                  v13 %= *(void *)&v7;
                }
                if (v13 != v9) {
                  break;
                }
              }
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
    }
  }
LABEL_31:
  uint64_t v15 = v4;
  if (v4 != v5)
  {
    uint64_t v15 = v4;
    while (*(unsigned char *)v15 != 5)
    {
      v15 += 16;
      if (v15 == v5) {
        goto LABEL_61;
      }
    }
  }
  if (v15 != v5)
  {
    if (*(void *)(v15 + 8))
    {
      int8x8_t v16 = (int8x8_t)a3[1];
      if (v16)
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          uint64_t v18 = 6;
          if (*(void *)&v16 <= 6uLL) {
            uint64_t v18 = 6u % a3[1];
          }
        }
        else
        {
          uint64_t v18 = (v16.i8[0] - 1) & 6;
        }
        long long v19 = *(uint64_t ***)(*a3 + 8 * v18);
        if (v19)
        {
          float v20 = *v19;
          if (v20)
          {
            if (v17.u32[0] < 2uLL)
            {
              uint64_t v21 = *(void *)&v16 - 1;
              while (1)
              {
                uint64_t v23 = v20[1];
                if (v23 == 6)
                {
                  if (*((unsigned char *)v20 + 16) == 6) {
                    goto LABEL_59;
                  }
                }
                else if ((v23 & v21) != v18)
                {
                  goto LABEL_61;
                }
                float v20 = (uint64_t *)*v20;
                if (!v20) {
                  goto LABEL_61;
                }
              }
            }
            do
            {
              unint64_t v22 = v20[1];
              if (v22 == 6)
              {
                if (*((unsigned char *)v20 + 16) == 6)
                {
LABEL_59:
                  if (*((unsigned char *)v20 + 17) == 2) {
                    *((unsigned char *)v20 + 17) = 1;
                  }
                  break;
                }
              }
              else
              {
                if (v22 >= *(void *)&v16) {
                  v22 %= *(void *)&v16;
                }
                if (v22 != v18) {
                  break;
                }
              }
              float v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
        }
      }
    }
  }
LABEL_61:
  if (v4 != v5)
  {
    while (*(unsigned char *)v4 != 8)
    {
      v4 += 16;
      if (v4 == v5) {
        return;
      }
    }
  }
  if (v4 != v5)
  {
    if (*(void *)(v4 + 8)) {
      std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__erase_unique<unsigned char>(a3, 2u);
    }
  }
}

void md::RealisticMapEngineMode::~RealisticMapEngineMode(md::RealisticMapEngineMode *this)
{
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::Textured::PoleTextured>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  int8x8_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  int8x8_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::Textured::PoleTextured>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int8x8_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::Textured::PoleTextured>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int8x8_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Textured::PoleTextured>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::Textured::PoleTexturedMesh::~PoleTexturedMesh(ggl::Textured::PoleTexturedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Textured::PoleTexturedMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Textured::PoleTexturedMesh *)((char *)this - 16));
}

void ggl::Textured::PoleTexturedMesh::~PoleTexturedMesh(ggl::Textured::PoleTexturedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::Textured::PoleTextured>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::Textured::PoleTextured>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::Textured::Pos2DUVPipelineState::~Pos2DUVPipelineState(ggl::Textured::Pos2DUVPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Textured::Pos2DUVPipelineSetup::textureIsEnabled(ggl::Textured::Pos2DUVPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::Textured::Pos2DUVPipelineSetup::constantDataIsEnabled(ggl::Textured::Pos2DUVPipelineSetup *this, unint64_t a2)
{
  if (a2 < 2) {
    return 1;
  }
  if (a2 == 2) {
    return *(unsigned char *)(*((void *)this + 2) + 306) != 0;
  }
  return 0;
}

void ggl::Textured::Pos2DUVPipelineSetup::~Pos2DUVPipelineSetup(ggl::Textured::Pos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Textured::SRGBBlendPos4DUVPipelineState::~SRGBBlendPos4DUVPipelineState(ggl::Textured::SRGBBlendPos4DUVPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Textured::SRGBBlendPos4DUVPipelineSetup::textureIsEnabled(ggl::Textured::SRGBBlendPos4DUVPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::Textured::SRGBBlendPos4DUVPipelineSetup::constantDataIsEnabled(ggl::Textured::SRGBBlendPos4DUVPipelineSetup *this, uint64_t a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      return result;
    case 2:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 306);
      goto LABEL_5;
    case 4:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 304);
LABEL_5:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void ggl::Textured::SRGBBlendPos4DUVPipelineSetup::~SRGBBlendPos4DUVPipelineSetup(ggl::Textured::SRGBBlendPos4DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Textured::SRGBBlendPos4DUVPipelineSetup::setTileScalarConstantData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ggl::Textured::SRGBBlendPos4DUVPipelineSetup::setAlphaTintConstantData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 64) = a3;
  *(void *)(a1 + 72) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 72);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ggl::Textured::SRGBBlendPos2DUVPipelineState::~SRGBBlendPos2DUVPipelineState(ggl::Textured::SRGBBlendPos2DUVPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Textured::SRGBBlendPos2DUVPipelineSetup::textureIsEnabled(ggl::Textured::SRGBBlendPos2DUVPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::Textured::SRGBBlendPos2DUVPipelineSetup::constantDataIsEnabled(ggl::Textured::SRGBBlendPos2DUVPipelineSetup *this, uint64_t a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      return result;
    case 2:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 306);
      goto LABEL_5;
    case 4:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 304);
LABEL_5:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void ggl::Textured::SRGBBlendPos2DUVPipelineSetup::~SRGBBlendPos2DUVPipelineSetup(ggl::Textured::SRGBBlendPos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::~SRGBBlendColormappedPos2DUVPipelineState(ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::textureIsEnabled(ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::constantDataIsEnabled(ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup *this, uint64_t a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      return result;
    case 2:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 306);
      goto LABEL_5;
    case 4:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 304);
LABEL_5:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup::~SRGBBlendColormappedPos2DUVPipelineSetup(ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Textured::Pos2DUVExtendedPipelineState::~Pos2DUVExtendedPipelineState(ggl::Textured::Pos2DUVExtendedPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Textured::Pos2DUVExtendedPipelineSetup::textureIsEnabled(ggl::Textured::Pos2DUVExtendedPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::Textured::Pos2DUVExtendedPipelineSetup::constantDataIsEnabled(ggl::Textured::Pos2DUVExtendedPipelineSetup *this, unint64_t a2)
{
  BOOL result = 1;
  if (a2 >= 2 && a2 != 3) {
    return a2 == 2 && *(unsigned char *)(*((void *)this + 2) + 306) != 0;
  }
  return result;
}

void ggl::Textured::Pos2DUVExtendedPipelineSetup::~Pos2DUVExtendedPipelineSetup(ggl::Textured::Pos2DUVExtendedPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Textured::ScreenTexturedQuadPipelineState::~ScreenTexturedQuadPipelineState(ggl::Textured::ScreenTexturedQuadPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Textured::ScreenTexturedQuadPipelineSetup::textureIsEnabled(ggl::Textured::ScreenTexturedQuadPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::Textured::ScreenTexturedQuadPipelineSetup::constantDataIsEnabled(ggl::Textured::ScreenTexturedQuadPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::Textured::ScreenTexturedQuadPipelineSetup::~ScreenTexturedQuadPipelineSetup(ggl::Textured::ScreenTexturedQuadPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Textured::PoleTexturedBlendPipelineState::~PoleTexturedBlendPipelineState(ggl::Textured::PoleTexturedBlendPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Textured::PoleTexturedBlendPipelineSetup::textureIsEnabled(ggl::Textured::PoleTexturedBlendPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::Textured::PoleTexturedBlendPipelineSetup::constantDataIsEnabled(ggl::Textured::PoleTexturedBlendPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

void ggl::Textured::PoleTexturedBlendPipelineSetup::~PoleTexturedBlendPipelineSetup(ggl::Textured::PoleTexturedBlendPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A2517314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2517388()
{
}

void sub_1A2517430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A251750C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A25175E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2517754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ggl::OptimizedTraffic::BaseMesh::~BaseMesh(ggl::OptimizedTraffic::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::OptimizedTraffic::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::OptimizedTraffic::BaseMesh *)((char *)this - 16));
}

void ggl::OptimizedTraffic::BaseMesh::~BaseMesh(ggl::OptimizedTraffic::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::OptimizedTraffic::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::OptimizedTraffic::BasePipelineState::~BasePipelineState(ggl::OptimizedTraffic::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::OptimizedTraffic::BasePipelineSetup::textureIsEnabled(ggl::OptimizedTraffic::BasePipelineSetup *this)
{
  return 0;
}

BOOL ggl::OptimizedTraffic::BasePipelineSetup::constantDataIsEnabled(ggl::OptimizedTraffic::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::OptimizedTraffic::BasePipelineSetup::~BasePipelineSetup(ggl::OptimizedTraffic::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::SandboxHybridMapEngineMode::applyRenderLayerSettings(uint64_t a1, uint64_t a2, void *a3)
{
  md::SandboxBaseMapEngineMode::applyRenderLayerSettings(a1, a2, a3);
  uint64_t v5 = *(uint64_t **)(a2 + 1128);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = v6;
  if (v6 != v7)
  {
    uint64_t v8 = v6;
    while (*(unsigned char *)v8 != 2)
    {
      v8 += 16;
      if (v8 == v7) {
        goto LABEL_8;
      }
    }
  }
  if (v8 == v7 || !*(void *)(v8 + 8))
  {
LABEL_8:
    if (v6 != v7)
    {
      while (*(unsigned char *)v6 != 4)
      {
        v6 += 16;
        if (v6 == v7) {
          return;
        }
      }
    }
    if (v6 == v7 || !*(void *)(v6 + 8)) {
      return;
    }
  }
  int8x8_t v9 = (int8x8_t)a3[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      uint64_t v11 = 47;
      if (*(void *)&v9 <= 0x2FuLL) {
        uint64_t v11 = 0x2Fu % a3[1];
      }
    }
    else
    {
      uint64_t v11 = (v9.i32[0] - 1) & 0x2FLL;
    }
    uint64_t v12 = *(uint64_t ***)(*a3 + 8 * v11);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (v13)
      {
        if (v10.u32[0] < 2uLL)
        {
          uint64_t v14 = *(void *)&v9 - 1;
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == 47)
            {
              if (*((unsigned char *)v13 + 16) == 47) {
                goto LABEL_35;
              }
            }
            else if ((v16 & v14) != v11)
            {
              return;
            }
            unint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              return;
            }
          }
        }
        do
        {
          unint64_t v15 = v13[1];
          if (v15 == 47)
          {
            if (*((unsigned char *)v13 + 16) == 47)
            {
LABEL_35:
              if (*((unsigned char *)v13 + 17) == 2) {
                *((unsigned char *)v13 + 17) = 1;
              }
              return;
            }
          }
          else
          {
            if (v15 >= *(void *)&v9) {
              v15 %= *(void *)&v9;
            }
            if (v15 != v11) {
              return;
            }
          }
          unint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
}

void md::SandboxHybridMapEngineMode::~SandboxHybridMapEngineMode(md::SandboxHybridMapEngineMode *this)
{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
}

md::SandboxHybridMapEngineMode *md::SandboxHybridMapEngineMode::SandboxHybridMapEngineMode(md::SandboxHybridMapEngineMode *this, int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a2) {
    char v4 = 9;
  }
  else {
    char v4 = 7;
  }
  uint64_t v5 = (void *)md::SandboxBaseMapEngineMode::SandboxBaseMapEngineMode((uint64_t)this, v4, a2);
  *uint64_t v5 = &unk_1EF547D58;
  uint64_t v6 = (uint64_t)(v5 + 10);
  if (a2)
  {
    __int16 v18 = 45;
    __int16 v19 = a2;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(v5 + 10), 0x2Du, &v18)+ 18) = 0x10000;
    __int16 v18 = 21;
    __int16 v19 = a2;
    unsigned __int16 v20 = 76;
    unsigned __int16 v21 = a2;
    unsigned __int16 v22 = 77;
    unsigned __int16 v23 = a2;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, 0x15u, &v18)+ 18) = (a2 << 16) | 1;
    int v7 = v21;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v20, &v20)+ 18) = (v7 << 16) | 1;
    int v8 = v23;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v22, &v22)+ 18) = (v8 << 16) | 1;
    LOBYTE(v18) = 35;
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x23u, &v18)+ 17) = 0;
    LOBYTE(v18) = 47;
    int8x8_t v9 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Fu, &v18);
  }
  else
  {
    __int16 v18 = 2;
    __int16 v19 = 0;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)(v5 + 10), 2u, &v18)+ 18) = 0;
    LOBYTE(v18) = 21;
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x15u, &v18)+ 17) = 0;
    __int16 v18 = 18;
    __int16 v19 = 0;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, 0x12u, &v18)+ 18) = 1;
    LOBYTE(v18) = 43;
    int8x8_t v9 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Bu, &v18);
  }
  *((unsigned char *)v9 + 17) = 2;
  __int16 v18 = 19;
  __int16 v19 = a2;
  uint8x8_t v10 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, 0x13u, &v18);
  if (a2) {
    int v11 = 65537;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)((char *)v10 + 18) = v11;
  LOBYTE(v18) = 44;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Cu, &v18)+ 17) = 1;
  LOBYTE(v18) = 40;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x28u, &v18)+ 17) = 1;
  __int16 v18 = 53;
  __int16 v19 = a2;
  unsigned __int16 v20 = 20;
  unsigned __int16 v21 = a2;
  unsigned __int16 v22 = 24;
  unsigned __int16 v23 = a2;
  unsigned __int16 v24 = 26;
  unsigned __int16 v25 = a2;
  unsigned __int16 v26 = 69;
  unsigned __int16 v27 = a2;
  unsigned __int16 v28 = 74;
  unsigned __int16 v29 = a2;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, 0x35u, &v18)+ 18) = (a2 << 16) | 2;
  int v12 = v21;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v20, &v20)+ 18) = (v12 << 16) | 2;
  int v13 = v23;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v22, &v22)+ 18) = (v13 << 16) | 2;
  int v14 = v25;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v24, &v24)+ 18) = (v14 << 16) | 2;
  int v15 = v27;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v26, &v26)+ 18) = (v15 << 16) | 2;
  int v16 = v29;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(v6, v28, &v28)+ 18) = (v16 << 16) | 2;
  return this;
}

void sub_1A251825C(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1EF5463F0;
  if (*((unsigned char *)v1 + 548)) {
    *((unsigned char *)v1 + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

uint64_t altitude::UserViewNode::computeView(altitude::UserViewNode *this, const karo::Item *a2, int a3)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v5 = (_DWORD *)*((void *)this + 4);
    if (v5[22] != *((_DWORD *)this + 27)) {
      goto LABEL_6;
    }
    if (a3 == -1) {
      a3 = *((_DWORD *)this + 26);
    }
    if (*(_DWORD *)(v3 + 112) != a3)
    {
LABEL_6:
      uint64_t v6 = *(double **)(*(void *)v5 + 72);
      double v7 = v6[46];
      double v8 = v6[47];
      if (v8 * v7 > 0.0)
      {
        double v9 = v6[57];
        if (v8 < v7)
        {
          long double v10 = tan(v9 * 0.5);
          long double v11 = atan(v8 * v10 / v7);
          double v9 = v11 + v11;
        }
        double v12 = v6[59];
        double v13 = v6[60];
        double v14 = v7 / v8;
        long double v15 = tan(v9 * 0.5);
        *(double *)(v3 + 1000) = v9;
        *(double *)(v3 + 992) = v14;
        *(double *)(v3 + 944) = v12;
        *(void *)(v3 + 952) = 0x3FF0000000000000;
        *(long double *)(v3 + 976) = -(v15 * v14);
        *(long double *)(v3 + 984) = v15 * v14;
        *(long double *)(v3 + 968) = -v15;
        *(long double *)(v3 + 960) = v15;
        *(double *)(v3 + 1008) = v13;
        *(unsigned char *)(v3 + 1016) = 0;
        long double v16 = v14 * (v15 + v15);
        double v17 = -(v12 - v13 * v12);
        *(long double *)(v3 + 376) = 2.0 / v16;
        *(_OWORD *)(v3 + 384) = 0u;
        *(_OWORD *)(v3 + 400) = 0u;
        *(long double *)(v3 + 416) = 1.0 / v15;
        *(_OWORD *)(v3 + 424) = 0u;
        *(_OWORD *)(v3 + 440) = 0u;
        *(double *)(v3 + 456) = (v13 - v12) / (v12 + -1.0);
        *(void *)(v3 + 472) = 0;
        *(void *)(v3 + 480) = 0;
        *(void *)(v3 + 464) = 0xBFF0000000000000;
        *(double *)(v3 + 488) = v17 / (v12 + -1.0);
        *(void *)(v3 + 496) = 0;
        *(long double *)(v3 + 1160) = v16 * 0.5;
        *(_OWORD *)(v3 + 1168) = 0u;
        *(_OWORD *)(v3 + 1184) = 0u;
        *(long double *)(v3 + 1200) = v15;
        *(_OWORD *)(v3 + 1208) = 0u;
        *(_OWORD *)(v3 + 1224) = 0u;
        *(void *)(v3 + 1240) = 0;
        *(double *)(v3 + 1248) = (v12 + -1.0) / v17;
        *(void *)(v3 + 1256) = 0;
        *(void *)(v3 + 1264) = 0;
        *(void *)(v3 + 1272) = 0xBFF0000000000000;
        *(double *)(v3 + 1280) = (v13 - v12) / v17;
        karo::graphics::View::projectionUpdate((karo::graphics::View *)v3, 1);
        gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)&v31, (double *)this + 6);
        double v18 = *((double *)this + 7);
        double v19 = *((double *)this + 8);
        __double2 v20 = __sincos_stret(*((double *)this + 6));
        double v21 = 6378137.0 / sqrt(v20.__sinval * v20.__sinval * -0.00669437999 + 1.0);
        double v22 = (v21 + v19) * v20.__cosval;
        __double2 v23 = __sincos_stret(v18);
        v29[1] = v22 * v23.__sinval;
        uint64_t v29[2] = (v19 + v21 * 0.99330562) * v20.__sinval;
        long long v27 = v31;
        double v24 = v33;
        uint64_t v28 = v32;
        v29[0] = v22 * v23.__cosval;
        v30[0] = (v24 + v24) * v34 + v36 * (v35 * -2.0);
        v30[1] = -((v24 + v24) * v24 - (v35 * -2.0 * v35 + 1.0));
        v30[2] = -(v35 * -2.0 * v34 - (v24 + v24) * v36);
        karo::graphics::View::lookAt(*((double **)this + 5), (double *)&v27, v29, v30);
        altitude::View::updatePoints(*((void *)this + 5), (double *)this + 6);
        uint64_t v25 = *((void *)this + 4);
        uint64_t v3 = *((void *)this + 5);
        *((_DWORD *)this + 26) = *(_DWORD *)(v3 + 112);
        *((_DWORD *)this + 27) = *(_DWORD *)(v25 + 88);
      }
    }
  }
  return v3;
}

void altitude::UserViewNode::~UserViewNode(void **this)
{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1A6239270);
}

{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t altitude::ProcessC3b::jobStep(void ***this, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v5 = (altitude::ProcessC3b *)this;
  uint64_t v279 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)this + 78);
  if (v6 == 1)
  {
LABEL_168:
    uint64_t v107 = *((void *)v5 + 31);
    id v108 = *(void **)(v107 + 200);
    unint64_t v257 = (void *)(v107 + 208);
    if (v108 == (void *)(v107 + 208)) {
      goto LABEL_298;
    }
    uint64_t v109 = (uint64_t **)((char *)v5 + 272);
    while (1)
    {
      uint64_t v110 = v108[5];
      if (v108[6] != v110) {
        break;
      }
LABEL_285:
      double v173 = (void *)v108[1];
      if (v173)
      {
        do
        {
          uint64_t v174 = v173;
          double v173 = (void *)*v173;
        }
        while (v173);
      }
      else
      {
        do
        {
          uint64_t v174 = (void *)v108[2];
          _ZF = *v174 == (void)v108;
          id v108 = v174;
        }
        while (!_ZF);
      }
      id v108 = v174;
      if (v174 == v257) {
        goto LABEL_298;
      }
    }
    uint64_t v111 = 0;
    unsigned int v112 = 0;
    while (1)
    {
      __int16 v113 = *v109;
      int v114 = *((_DWORD *)v108 + 8);
      __int16 v115 = v109;
      uint64_t v116 = v109;
      if (*v109)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v116 = (uint64_t **)v113;
            int v117 = *((_DWORD *)v113 + 8);
            if (v114 >= v117) {
              break;
            }
            __int16 v113 = *v116;
            __int16 v115 = v116;
            if (!*v116) {
              goto LABEL_182;
            }
          }
          if (v117 >= v114) {
            break;
          }
          __int16 v113 = v116[1];
          if (!v113)
          {
            __int16 v115 = v116 + 1;
            goto LABEL_182;
          }
        }
        double v118 = v116;
        uint64_t v5 = (altitude::ProcessC3b *)this;
      }
      else
      {
LABEL_182:
        double v118 = operator new(0x40uLL);
        v118[8] = v114;
        *((void *)v118 + 6) = 0;
        *((void *)v118 + 7) = 0;
        *((void *)v118 + 5) = 0;
        *(void *)double v118 = 0;
        *((void *)v118 + 1) = 0;
        *((void *)v118 + 2) = v116;
        *__int16 v115 = (uint64_t *)v118;
        uint64_t v5 = (altitude::ProcessC3b *)this;
        uint64_t v119 = (void **)*this[33];
        int v120 = (uint64_t *)v118;
        if (v119)
        {
          this[33] = v119;
          int v120 = *v115;
        }
        std::string v121 = *v109;
        _ZF = v120 == *v109;
        *((unsigned char *)v120 + 24) = _ZF;
        if (!_ZF)
        {
          do
          {
            uint64_t v122 = v120[2];
            if (*(unsigned char *)(v122 + 24)) {
              break;
            }
            char v123 = *(uint64_t **)(v122 + 16);
            uint64_t v124 = *v123;
            if (*v123 == v122)
            {
              uint64_t v127 = v123[1];
              if (!v127 || (v128 = *(unsigned __int8 *)(v127 + 24), int8x16_t v125 = (unsigned char *)(v127 + 24), v128))
              {
                if (*(uint64_t **)v122 == v120)
                {
                  int32x4_t v129 = (uint64_t *)v120[2];
                }
                else
                {
                  int32x4_t v129 = *(uint64_t **)(v122 + 8);
                  uint64_t v130 = *v129;
                  *(void *)(v122 + 8) = *v129;
                  if (v130)
                  {
                    *(void *)(v130 + 16) = v122;
                    char v123 = *(uint64_t **)(v122 + 16);
                  }
                  v129[2] = (uint64_t)v123;
                  *(void *)(*(void *)(v122 + 16) + 8 * (**(void **)(v122 + 16) != v122)) = v129;
                  *int32x4_t v129 = v122;
                  *(void *)(v122 + 16) = v129;
                  char v123 = (uint64_t *)v129[2];
                  uint64_t v122 = *v123;
                }
                *((unsigned char *)v129 + 24) = 1;
                *((unsigned char *)v123 + 24) = 0;
                uint64_t v133 = *(void *)(v122 + 8);
                *char v123 = v133;
                if (v133) {
                  *(void *)(v133 + 16) = v123;
                }
                *(void *)(v122 + 16) = v123[2];
                *(void *)(v123[2] + 8 * (*(void *)v123[2] != (void)v123)) = v122;
                *(void *)(v122 + 8) = v123;
                goto LABEL_212;
              }
            }
            else if (!v124 || (v126 = *(unsigned __int8 *)(v124 + 24), int8x16_t v125 = (unsigned char *)(v124 + 24), v126))
            {
              if (*(uint64_t **)v122 == v120)
              {
                uint64_t v131 = v120[1];
                *(void *)uint64_t v122 = v131;
                if (v131)
                {
                  *(void *)(v131 + 16) = v122;
                  char v123 = *(uint64_t **)(v122 + 16);
                }
                void v120[2] = (uint64_t)v123;
                *(void *)(*(void *)(v122 + 16) + 8 * (**(void **)(v122 + 16) != v122)) = v120;
                v120[1] = v122;
                *(void *)(v122 + 16) = v120;
                char v123 = (uint64_t *)v120[2];
              }
              else
              {
                int v120 = (uint64_t *)v120[2];
              }
              *((unsigned char *)v120 + 24) = 1;
              *((unsigned char *)v123 + 24) = 0;
              uint64_t v122 = v123[1];
              uint64_t v132 = *(uint64_t **)v122;
              v123[1] = *(void *)v122;
              if (v132) {
                v132[2] = (uint64_t)v123;
              }
              *(void *)(v122 + 16) = v123[2];
              *(void *)(v123[2] + 8 * (*(void *)v123[2] != (void)v123)) = v122;
              *(void *)uint64_t v122 = v123;
LABEL_212:
              v123[2] = v122;
              break;
            }
            *(unsigned char *)(v122 + 24) = 1;
            int v120 = v123;
            *((unsigned char *)v123 + 24) = v123 == v121;
            *int8x16_t v125 = 1;
          }
          while (v123 != v121);
        }
        this[35] = (void **)((char *)this[35] + 1);
      }
      if (*(void *)(*((void *)v118 + 5) + 16 * v111)) {
        goto LABEL_174;
      }
      int v134 = (uint64_t *)(v110 + 16 * v111);
      uint64_t v135 = *(void *)(*v134 + 8);
      if (v135)
      {
        std::string::size_type v136 = *(uint64_t **)(v135 + 16);
        uint64_t v138 = *v136;
        uint64_t v137 = (std::__shared_weak_count *)v136[1];
        if (v137
          && (atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed),
              !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
          if (v138) {
            goto LABEL_174;
          }
        }
        else if (v138)
        {
          goto LABEL_174;
        }
      }
      uint64_t v140 = *(void *)(*v134 + 24);
      uint64_t v139 = *(std::__shared_weak_count **)(*v134 + 32);
      if (v139
        && (atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed),
            !atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
        if (v140)
        {
LABEL_222:
          uint64_t v141 = *v134;
          LODWORD(v271) = *(_DWORD *)(*v134 + 16);
          uint64_t v142 = *(void *)(v141 + 24);
          uint64_t v143 = *(std::__shared_weak_count **)(v141 + 32);
          if (v143)
          {
            atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v141 = *v134;
            uint64_t v144 = *(void *)(*v134 + 24);
            uint64_t v145 = *(std::__shared_weak_count **)(*v134 + 32);
            int v146 = *(pwin_jpg **)(v142 + 8);
            if (v145)
            {
              atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v141 = *v134;
            }
            uint64_t v142 = v144;
          }
          else
          {
            uint64_t v145 = 0;
            int v146 = *(pwin_jpg **)(v142 + 8);
          }
          uint64_t v155 = (unsigned __int8 *)*(unsigned int *)(v142 + 16);
          if (karo::media::JpegLoaderFig::loadFromChunk(&v271, v146, v155, v141, a5))
          {
            BOOL v156 = 1;
            if (!v145)
            {
LABEL_242:
              if (v143) {
                goto LABEL_243;
              }
              goto LABEL_173;
            }
          }
          else
          {
            BOOL v156 = karo::media::JpegLoaderPwin::loadFromChunk(&v271, v146, v155, v141, a5);
            if (!v145) {
              goto LABEL_242;
            }
          }
          if (atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            goto LABEL_242;
          }
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
          if (v143)
          {
LABEL_243:
            if (!atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }
LABEL_173:
          uint64_t v5 = (altitude::ProcessC3b *)this;
          if (!v156) {
            goto LABEL_297;
          }
          goto LABEL_174;
        }
      }
      else if (v140)
      {
        goto LABEL_222;
      }
      uint64_t v148 = *(void *)(*v134 + 56);
      int32x4_t v147 = *(std::__shared_weak_count **)(*v134 + 64);
      if (v147
        && (atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed),
            !atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
        if (!v148)
        {
LABEL_255:
          uint64_t v160 = *(void *)(*v134 + 40);
          unint64_t v159 = *(std::__shared_weak_count **)(*v134 + 48);
          if (v159)
          {
            atomic_fetch_add_explicit(&v159->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          if (v160)
          {
            uint64_t v271 = 850045863;
            long long v272 = 0u;
            long long v273 = 0u;
            long long v274 = 0u;
            long long v275 = 0u;
            long long v276 = 0u;
            uint64_t v277 = 0;
            int v278 = 1065353216;
            if (LoadVideoToolbox(void)::loadPredicate != -1) {
              dispatch_once(&LoadVideoToolbox(void)::loadPredicate, &__block_literal_global_20946);
            }
            if (LoadCoreMedia(void)::loadPredicate != -1) {
              dispatch_once(&LoadCoreMedia(void)::loadPredicate, &__block_literal_global_6);
            }
            uint64_t v161 = (void *)*v134;
            int v162 = *(_DWORD *)(*v134 + 16);
            int v163 = 2;
            if (v162 == 4 || v162 == 6)
            {
LABEL_267:
              uint64_t v164 = v161[9];
              uint64_t v252 = *(const void **)(v164 + 8);
              pixelBuffer = *(opaqueCMSampleBuffer **)(v164 + 16);
              uint64_t v165 = v161[11];
              uint64_t v248 = *(void *)(v165 + 8);
              uint64_t v246 = *(void *)(v165 + 16);
              uint64_t v166 = v161[5];
              double v167 = (std::__shared_weak_count *)v161[6];
              unsigned int v254 = v163;
              if (v167)
              {
                atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v168 = *(void *)(*v134 + 40);
                uint64_t v169 = *(void *)(*v134 + 48);
                uint64_t v170 = *(void **)(v166 + 8);
                if (v169)
                {
                  char v244 = 0;
                  int v245 = *(std::__shared_weak_count **)(*v134 + 48);
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v169 + 8), 1uLL, memory_order_relaxed);
                }
                else
                {
                  char v244 = 1;
                  int v245 = 0;
                }
                uint64_t v166 = v168;
              }
              else
              {
                int v245 = 0;
                uint64_t v170 = *(void **)(v166 + 8);
                char v244 = 1;
              }
              int v171 = *(opaqueCMFormatDescription **)(v166 + 16);
              uint64_t v267 = 0;
              uint64_t v268 = &v267;
              uint64_t v269 = 0x2020000000;
              uint64_t v270 = 0;
              *(void *)long long buf = 0;
              int16x4_t v262 = buf;
              uint64_t v263 = 0x3032000000;
              uint64_t v264 = __Block_byref_object_copy__20962;
              int v265 = __Block_byref_object_dispose__20963;
              dispatch_semaphore_t v266 = dispatch_semaphore_create(1);
              dispatch_semaphore_wait(*((dispatch_semaphore_t *)v262 + 5), 0xFFFFFFFFFFFFFFFFLL);
              v260[0] = MEMORY[0x1E4F143A8];
              v260[1] = 3221225472;
              v260[2] = ___ZN2md28HardwareVideoDecodingSession10decodeSyncENS_19HardwareVideoOutputEPKhmS3_miPhm_block_invoke;
              v260[3] = &unk_1E5A928F8;
              v260[4] = &v267;
              v260[5] = buf;
              md::HardwareVideoDecodingSession::decode((uint64_t)&v271, v254, v252, pixelBuffer, v248, v246, v170, v171, 0, v260);
              dispatch_semaphore_wait(*((dispatch_semaphore_t *)v262 + 5), 0xFFFFFFFFFFFFFFFFLL);
              dispatch_semaphore_signal(*((dispatch_semaphore_t *)v262 + 5));
              uint64_t v172 = v268[3];
              _Block_object_dispose(buf, 8);

              _Block_object_dispose(&v267, 8);
              if ((v244 & 1) == 0 && !atomic_fetch_add(&v245->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                std::__shared_weak_count::__release_weak(v245);
              }
              if (v167 && !atomic_fetch_add(&v167->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                std::__shared_weak_count::__release_weak(v167);
              }
              if (v172) {
                operator new();
              }
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              uint64_t v175 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_1A1780000, v175, OS_LOG_TYPE_ERROR, "Failed to decode H264 image with hardware decoder.", buf, 2u);
              }

              uint64_t v5 = (altitude::ProcessC3b *)this;
            }
            else if (v162 == 14)
            {
              int v163 = 0;
              goto LABEL_267;
            }
            md::HardwareVideoDecodingSession::~HardwareVideoDecodingSession((std::mutex *)&v271);
LABEL_297:
            (*(void (**)(altitude::ProcessC3b *))(*(void *)v5 + 16))(v5);
            uint64_t v5 = (altitude::ProcessC3b *)this;
LABEL_298:
            *((double *)v5 + 44) = (*((double *)v5 + 41)
                                  + (double)std::chrono::steady_clock::now().__d_.__rep_ * -0.000000001)
                                 * -1000.0;
            uint64_t v176 = (void **)*((void *)v5 + 31);
            if (*((unsigned char *)v5 + 208))
            {
              int v177 = (void **)v176[25];
              if (v177 != v176 + 26)
              {
                int64x2_t v178 = vdupq_n_s64(3uLL);
                __asm { FMOV            V3.2D, #0.25 }
                float64x2_t v183 = (float64x2_t)xmmword_1A28FC830;
                float64x2_t v184 = (float64x2_t)vdupq_n_s64(0x3FC999999999999AuLL);
                float64x2_t v185 = (float64x2_t)xmmword_1A28FC820;
                int64x2_t v242 = vdupq_n_s64(0x3FB999999999999AuLL);
                int64x2_t v241 = vdupq_n_s64(0x3FB5555555555555uLL);
                float64x2_t v186 = (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL);
                float64x2_t v187 = (float64x2_t)xmmword_1A28FC7F0;
                float64x2_t v188 = (float64x2_t)xmmword_1A28FC7E0;
                __asm { FMOV            V18.2D, #0.125 }
                float64x2_t v190 = (float64x2_t)xmmword_1A28FC7D0;
                float64x2_t v191 = (float64x2_t)xmmword_1A28FC7C0;
                float64x2_t v255 = _Q3;
                int64x2_t v258 = v178;
                *(float64x2_t *)pixelBuffera = v184;
                float64x2_t v247 = v186;
                float64x2_t v243 = _Q18;
                do
                {
                  if ((*((_DWORD *)v177 + 8) | 4) != 5)
                  {
                    uint64_t v194 = (uint64_t *)v177[5];
                    int v195 = (uint64_t *)v177[6];
                    while (v194 != v195)
                    {
                      char v196 = *(uint64_t **)(*v194 + 8);
                      if (v196)
                      {
                        unsigned int v197 = *((_DWORD *)v196 + 2);
                        uint64_t v198 = *v196;
                        v199.i64[0] = *v196;
                        v199.i64[1] = HIDWORD(*v196);
                        int64x2_t v200 = v199;
                        switch(v197)
                        {
                          case 1u:
                          case 2u:
                          case 0x19u:
                            uint64_t v203 = v200.u32[2] * (unint64_t)v200.u32[0];
                            goto LABEL_343;
                          case 3u:
                          case 4u:
                          case 6u:
                          case 0x13u:
                          case 0x18u:
                          case 0x1Bu:
                            uint64_t v203 = 2 * v200.u32[2] * (unint64_t)v200.u32[0];
                            goto LABEL_343;
                          case 5u:
                          case 7u:
                          case 8u:
                          case 0xCu:
                          case 0xDu:
                          case 0xEu:
                          case 0xFu:
                          case 0x14u:
                          case 0x15u:
                          case 0x1Au:
                            uint64_t v203 = 4 * v200.u32[2] * (unint64_t)v200.u32[0];
                            goto LABEL_343;
                          case 9u:
                          case 0x10u:
                          case 0x11u:
                            uint64_t v204 = v200.u32[2] * (unint64_t)v200.u32[0];
                            goto LABEL_334;
                          case 0xAu:
                          case 0xBu:
                            uint64_t v203 = 3 * v200.u32[2] * (unint64_t)v200.u32[0];
                            goto LABEL_343;
                          case 0x12u:
                            unint64_t v218 = v200.u32[2] * (unint64_t)v200.u32[0];
                            goto LABEL_342;
                          case 0x16u:
                            int64x2_t v217 = vsubq_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v200, 2uLL), vtstq_s64(v200, v178));
                            uint64_t v204 = v217.i32[0] * (uint64_t)v217.i32[2];
                            goto LABEL_334;
                          case 0x1Cu:
                          case 0x2Cu:
                            v214.i64[0] = v198;
                            v214.i64[1] = HIDWORD(v198);
                            float64x2_t v202 = vmulq_f64(vcvtq_f64_u64(v214), _Q3);
                            goto LABEL_340;
                          case 0x1Du:
                          case 0x2Du:
                            v216.i64[0] = v198;
                            v216.i64[1] = HIDWORD(v198);
                            float64x2_t v202 = vmulq_f64(vcvtq_f64_u64(v216), v183);
                            goto LABEL_340;
                          case 0x1Eu:
                          case 0x2Eu:
                            v215.i64[0] = v198;
                            v215.i64[1] = HIDWORD(v198);
                            float64x2_t v202 = vmulq_f64(vcvtq_f64_u64(v215), v184);
                            goto LABEL_340;
                          case 0x1Fu:
                          case 0x2Fu:
                            v213.i64[0] = v198;
                            v213.i64[1] = HIDWORD(v198);
                            float64x2_t v202 = vmulq_f64(vcvtq_f64_u64(v213), v185);
                            goto LABEL_340;
                          case 0x20u:
                          case 0x21u:
                          case 0x22u:
                          case 0x23u:
                          case 0x24u:
                          case 0x25u:
                          case 0x26u:
                          case 0x27u:
                          case 0x28u:
                          case 0x29u:
                          case 0x30u:
                          case 0x31u:
                          case 0x32u:
                          case 0x33u:
                          case 0x34u:
                          case 0x35u:
                          case 0x36u:
                          case 0x37u:
                          case 0x38u:
                          case 0x39u:
                            switch(v197 & 0xFFFFFFEF)
                            {
                              case ' ':
                                v201.i64[0] = v198;
                                v201.i64[1] = HIDWORD(v198);
                                float64x2_t v202 = vmulq_f64(vcvtq_f64_u64(v201), v186);
                                break;
                              case '!':
                                v208.i64[0] = v198;
                                v208.i64[1] = HIDWORD(v198);
                                float64x2_t v202 = vmulq_f64(vcvtq_f64_u64(v208), v187);
                                break;
                              case '""':
                                v206.i64[0] = v198;
                                v206.i64[1] = HIDWORD(v198);
                                float64x2_t v202 = vmulq_f64(vcvtq_f64_u64(v206), v188);
                                break;
                              case '#':
                                v207.i64[0] = v198;
                                v207.i64[1] = HIDWORD(v198);
                                float64x2_t v202 = vmulq_f64(vcvtq_f64_u64(v207), _Q18);
                                break;
                              case '$':
                                v205.i64[0] = v198;
                                v205.i64[1] = HIDWORD(v198);
                                float64x2_t v202 = vmulq_f64(vcvtq_f64_u64(v205), v190);
                                break;
                              case '%':
                                v209.i64[0] = v198;
                                v209.i64[1] = HIDWORD(v198);
                                float64x2_t v202 = vmulq_f64(vcvtq_f64_u64(v209), v191);
                                break;
                              default:
                                switch(v197 & 0xFFFFFFEF)
                                {
                                  case '&':
                                    v210.i64[0] = v198;
                                    v210.i64[1] = HIDWORD(v198);
                                    float64x2_t v211 = vcvtq_f64_u64(v210);
                                    float64x2_t v212 = (float64x2_t)xmmword_1A28FC810;
                                    goto LABEL_339;
                                  case '\'':
                                    v221.i64[0] = v198;
                                    v221.i64[1] = HIDWORD(v198);
                                    float64x2_t v211 = vcvtq_f64_u64(v221);
                                    float64x2_t v212 = (float64x2_t)v242;
                                    goto LABEL_339;
                                  case '(':
                                    v219.i64[0] = v198;
                                    v219.i64[1] = HIDWORD(v198);
                                    float64x2_t v211 = vcvtq_f64_u64(v219);
                                    float64x2_t v212 = (float64x2_t)xmmword_1A28FC800;
                                    goto LABEL_339;
                                  case ')':
                                    v220.i64[0] = v198;
                                    v220.i64[1] = HIDWORD(v198);
                                    float64x2_t v211 = vcvtq_f64_u64(v220);
                                    float64x2_t v212 = (float64x2_t)v241;
LABEL_339:
                                    float64x2_t v202 = vmulq_f64(v211, v212);
                                    goto LABEL_340;
                                  default:
                                    goto LABEL_341;
                                }
                            }
LABEL_340:
                            int64x2_t v200 = (int64x2_t)vcvtq_u64_f64(vrndpq_f64(v202));
LABEL_341:
                            unint64_t v218 = v200.i64[0] * v200.i64[1];
LABEL_342:
                            uint64_t v203 = 16 * v218;
                            goto LABEL_343;
                          case 0x2Au:
                          case 0x2Bu:
                            uint64_t v204 = 3 * v200.u32[2] * (unint64_t)v200.u32[0];
LABEL_334:
                            uint64_t v203 = 8 * v204;
LABEL_343:
                            if (v203) {
                              goto LABEL_344;
                            }
                            break;
                          case 0x3Au:
LABEL_344:
                            if (v196[3] - v196[2] == 16)
                            {
                              BOOL v222 = v197 > 0x39;
                              uint64_t v223 = (1 << v197) & 0x3FFF3FFF0400000;
                              _ZF = v222 || v223 == 0;
                              if (_ZF)
                              {
                                karo::media::Image::mipmapAndCompress(*v194, *(_DWORD *)(*v194 + 16));
                                float64x2_t v191 = (float64x2_t)xmmword_1A28FC7C0;
                                float64x2_t v190 = (float64x2_t)xmmword_1A28FC7D0;
                                _Q18 = v243;
                                float64x2_t v188 = (float64x2_t)xmmword_1A28FC7E0;
                                float64x2_t v187 = (float64x2_t)xmmword_1A28FC7F0;
                                float64x2_t v186 = v247;
                                float64x2_t v185 = (float64x2_t)xmmword_1A28FC820;
                                float64x2_t v184 = *(float64x2_t *)pixelBuffera;
                                float64x2_t v183 = (float64x2_t)xmmword_1A28FC830;
                                _Q3 = v255;
                                int64x2_t v178 = v258;
                              }
                            }
                            break;
                          default:
                            break;
                        }
                      }
                      v194 += 2;
                    }
                  }
                  uint64_t v192 = (void **)v177[1];
                  if (v192)
                  {
                    do
                    {
                      uint64_t v193 = v192;
                      uint64_t v192 = (void **)*v192;
                    }
                    while (v192);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v193 = (void **)v177[2];
                      _ZF = *v193 == v177;
                      int v177 = v193;
                    }
                    while (!_ZF);
                  }
                  int v177 = v193;
                }
                while (v193 != v176 + 26);
                uint64_t v5 = (altitude::ProcessC3b *)this;
                uint64_t v176 = this[31];
              }
            }
            double v226 = (uint64_t **)(v176 + 26);
            double v225 = (uint64_t *)v176[26];
            if (v225)
            {
              while (1)
              {
                while (1)
                {
                  double v227 = (uint64_t **)v225;
                  int v228 = *((_DWORD *)v225 + 8);
                  if (v228 < 2) {
                    break;
                  }
                  double v225 = *v227;
                  double v226 = v227;
                  if (!*v227) {
                    goto LABEL_359;
                  }
                }
                if (v228 == 1) {
                  break;
                }
                double v225 = v227[1];
                if (!v225)
                {
                  double v226 = v227 + 1;
                  goto LABEL_359;
                }
              }
              long long v229 = v227;
            }
            else
            {
              double v227 = (uint64_t **)(v176 + 26);
LABEL_359:
              long long v229 = operator new(0x40uLL);
              v229[8] = 1;
              *((void *)v229 + 6) = 0;
              *((void *)v229 + 7) = 0;
              *((void *)v229 + 5) = 0;
              *(void *)long long v229 = 0;
              *((void *)v229 + 1) = 0;
              *((void *)v229 + 2) = v227;
              *double v226 = (uint64_t *)v229;
              uint64_t v230 = *(void **)v176[25];
              uint64_t v231 = (uint64_t *)v229;
              if (v230)
              {
                v176[25] = v230;
                uint64_t v231 = *v226;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v176[26], v231);
              v176[27] = (char *)v176[27] + 1;
              uint64_t v5 = (altitude::ProcessC3b *)this;
            }
            uint64_t v232 = *((void *)v229 + 5);
            for (uint64_t i = *((void *)v229 + 6); v232 != i; v232 += 16)
            {
              float64x2_t v234 = *(_DWORD **)(*(void *)v232 + 8);
              if (v234)
              {
                *v234 *= v234[1];
                v234[1] = 1;
              }
            }
            (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(*(void *)(*((void *)v5 + 1)
                                                                                               + 8)
                                                                                   + 112)
                                                                       + 8)
                                                         + 24))(v260);
            uint64_t v5 = (altitude::ProcessC3b *)this;
            uint64_t v271 = (uint64_t)&unk_1EF57D008;
            *(void *)&long long v272 = this;
            *(void *)&long long v273 = &v271;
            *(void *)long long buf = 0;
            int16x4_t v262 = 0;
            (*(void (**)(void, uint64_t *, uint8_t *))(*(void *)v260[0] + 16))(v260[0], &v271, buf);
            float64x2_t v235 = (std::__shared_weak_count *)v262;
            if (v262 && !atomic_fetch_add((atomic_ullong *volatile)v262 + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
              std::__shared_weak_count::__release_weak(v235);
            }
            if ((uint64_t *)v273 == &v271)
            {
              (*(void (**)(uint64_t *))(v271 + 32))(&v271);
              uint64_t v236 = v260[0];
              if (!v260[0]) {
                goto LABEL_381;
              }
            }
            else
            {
              if ((void)v273) {
                (*(void (**)(void))(*(void *)v273 + 40))();
              }
              uint64_t v236 = v260[0];
              if (!v260[0])
              {
LABEL_381:
                pthread_mutex_lock(*((pthread_mutex_t **)v5 + 19));
                *((_DWORD *)v5 + 40) |= 1u;
                return pthread_mutex_unlock(*((pthread_mutex_t **)v5 + 19));
              }
            }
            uint64_t v237 = (*(uint64_t (**)(uint64_t))(*(void *)v236 + 24))(v236);
            uint64_t v238 = v260[0];
            v260[0] = 0;
            uint64_t v271 = v238;
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v237 + 48))(v237, &v271);
            uint64_t v239 = v271;
            uint64_t v271 = 0;
            if (v239) {
              (*(void (**)(uint64_t))(*(void *)v239 + 8))(v239);
            }
            uint64_t v240 = v260[0];
            v260[0] = 0;
            if (v240) {
              (*(void (**)(uint64_t))(*(void *)v240 + 8))(v240);
            }
            goto LABEL_381;
          }
          goto LABEL_174;
        }
      }
      else if (!v148)
      {
        goto LABEL_255;
      }
      uint64_t v149 = *v134;
      *(_DWORD *)long long buf = *(_DWORD *)(*v134 + 16);
      uint64_t v150 = *(void *)(v149 + 56);
      uint64_t v151 = *(std::__shared_weak_count **)(v149 + 64);
      if (v151)
      {
        atomic_fetch_add_explicit(&v151->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v149 = *v134;
        uint64_t v152 = *(void *)(*v134 + 56);
        int8x16_t v153 = *(std::__shared_weak_count **)(*v134 + 64);
        int8x16_t v154 = *(unsigned __int8 **)(v150 + 8);
        if (v153)
        {
          atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v149 = *v134;
        }
        uint64_t v150 = v152;
      }
      else
      {
        int8x16_t v153 = 0;
        int8x16_t v154 = *(unsigned __int8 **)(v150 + 8);
      }
      size_t v157 = *(unsigned int *)(v150 + 16);
      HIBYTE(v272) = 0;
      LOBYTE(v271) = 0;
      char v158 = karo::media::ImageLoader::loadFromChunk((int *)buf, v154, v157, (unsigned __int16 *)&v271, v149);
      if (v153 && !atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
        if (!v151)
        {
LABEL_252:
          if ((v158 & 1) == 0) {
            goto LABEL_297;
          }
          goto LABEL_174;
        }
      }
      else if (!v151)
      {
        goto LABEL_252;
      }
      if (atomic_fetch_add(&v151->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_252;
      }
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
      if ((v158 & 1) == 0) {
        goto LABEL_297;
      }
LABEL_174:
      uint64_t v110 = v108[5];
      uint64_t v111 = ++v112;
      if (v112 >= (unint64_t)((v108[6] - v110) >> 4)) {
        goto LABEL_285;
      }
    }
  }
  if (v6) {
    goto LABEL_381;
  }
  double v7 = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
  *((double *)v5 + 41) = v7;
  *((double *)v5 + 43) = (v7 - *((double *)v5 + 40)) * 1000.0;
  uint64_t v8 = *((void *)v5 + 27);
  if (v8 && !(*(unsigned int (**)(uint64_t))(*(void *)v8 + 40))(v8)) {
    goto LABEL_28;
  }
  uint64_t v9 = *((void *)v5 + 29);
  if (!v9)
  {
    LODWORD(v271) = *(_DWORD *)(*((void *)v5 + 1) + 44);
    BYTE4(v271) = 1;
LABEL_12:
    uint64_t v14 = *((void *)v5 + 27);
    if (v14)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14))
      {
        long double v15 = (const unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)v5 + 27) + 56))(*((void *)v5 + 27));
        unsigned int v16 = (*(uint64_t (**)(void))(**((void **)v5 + 27) + 48))(*((void *)v5 + 27));
        BOOL v17 = karo::media::C3bLoader::loadFromChunk((karo::media::C3bLoader *)&v271, v15, v16, *((karo::media::C3bModel **)v5 + 31));
        uint64_t v5 = (altitude::ProcessC3b *)this;
        if (!v17) {
          goto LABEL_28;
        }
      }
    }
    *((double *)v5 + 45) = (*((double *)v5 + 41) + (double)std::chrono::steady_clock::now().__d_.__rep_ * -0.000000001)
                         * -1000.0;
    uint64_t v256 = *((void *)v5 + 1);
    unint64_t v19 = 0x6DB6DB6DB6DB6DB7
        * ((uint64_t)(*(void *)(*((void *)v5 + 31) + 184) - *(void *)(*((void *)v5 + 31) + 176)) >> 3);
    __double2 v20 = (void *)*((void *)v5 + 22);
    double v21 = (void **)*((void *)v5 + 23);
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v21 - (void **)v20);
    __double2 v23 = v5;
    unint64_t v24 = v19 - v22;
    if (v19 <= v22)
    {
      uint64_t v5 = v23;
      if (v19 < v22)
      {
        uint64_t v43 = (void **)&v20[3 * v19];
        if (v21 != v43)
        {
          unsigned int v44 = v21;
          do
          {
            unsigned int v47 = (char *)*(v44 - 3);
            v44 -= 3;
            long long v46 = v47;
            if (v47)
            {
              unsigned int v48 = (char *)*(v21 - 2);
              uint64_t v45 = v46;
              if (v48 != v46)
              {
                do
                {
                  int32x4_t v49 = (std::__shared_weak_count *)*((void *)v48 - 1);
                  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                  v48 -= 16;
                }
                while (v48 != v46);
                uint64_t v45 = *v44;
              }
              *(v21 - 2) = v46;
              operator delete(v45);
            }
            double v21 = v44;
          }
          while (v44 != v43);
        }
        uint64_t v5 = (altitude::ProcessC3b *)this;
        this[23] = v43;
      }
    }
    else
    {
      uint64_t v25 = *((void *)v23 + 24);
      if (0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v21) >> 3) >= v24)
      {
        bzero(v21, 24 * ((24 * v24 - 24) / 0x18) + 24);
        *((void *)v23 + 23) = &v21[3 * ((24 * v24 - 24) / 0x18) + 3];
        uint64_t v5 = v23;
      }
      else
      {
        if (v19 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v20) >> 3);
        if (2 * v26 > v19) {
          unint64_t v19 = 2 * v26;
        }
        if (v26 >= 0x555555555555555) {
          unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
        }
        if (v19 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v27 = 24 * v19;
        uint64_t v28 = (char *)operator new(24 * v19);
        unsigned __int16 v29 = &v28[8 * (v21 - (void **)v20)];
        uint64_t v30 = &v28[v27];
        bzero(v29, 24 * ((24 * v24 - 24) / 0x18) + 24);
        long long v31 = &v29[24 * ((24 * v24 - 24) / 0x18) + 24];
        if (v21 == v20)
        {
          uint64_t v5 = (altitude::ProcessC3b *)this;
          this[22] = (void **)v29;
          this[23] = (void **)v31;
          this[24] = (void **)v30;
        }
        else
        {
          uint64_t v5 = (altitude::ProcessC3b *)this;
          do
          {
            uint64_t v32 = v29;
            *((void *)v29 - 2) = 0;
            *((void *)v29 - 1) = 0;
            long long v33 = *(_OWORD *)(v21 - 3);
            v21 -= 3;
            *(_OWORD *)(v29 - 24) = v33;
            v29 -= 24;
            *((void *)v32 - 1) = v21[2];
            void *v21 = 0;
            v21[1] = 0;
            v21[2] = 0;
          }
          while (v21 != v20);
          double v21 = this[22];
          double v34 = this[23];
          this[22] = (void **)v29;
          this[23] = (void **)v31;
          this[24] = (void **)v30;
          if (v34 != v21)
          {
            double v35 = v34;
            do
            {
              double v40 = (char *)*(v35 - 3);
              v35 -= 3;
              unsigned int v39 = v40;
              if (v40)
              {
                uint64_t v41 = (char *)*(v34 - 2);
                size_t v38 = v39;
                if (v41 != v39)
                {
                  do
                  {
                    uint64_t v42 = (std::__shared_weak_count *)*((void *)v41 - 1);
                    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                      std::__shared_weak_count::__release_weak(v42);
                    }
                    v41 -= 16;
                  }
                  while (v41 != v39);
                  size_t v38 = *v35;
                }
                *(v34 - 2) = v39;
                operator delete(v38);
              }
              double v34 = v35;
            }
            while (v35 != v21);
            uint64_t v5 = (altitude::ProcessC3b *)this;
          }
        }
        if (v21) {
          operator delete(v21);
        }
      }
    }
    uint64_t v50 = *((void *)v5 + 22);
    if (*((void *)v5 + 23) != v50)
    {
      unint64_t v51 = 0;
      do
      {
        uint64_t v52 = (void *)(v50 + 24 * v51);
        unint64_t v53 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(*(void *)(*(void *)(*((void *)v5 + 31) + 176) + 56 * v51 + 16)
                       - *(void *)(*(void *)(*((void *)v5 + 31) + 176) + 56 * v51 + 8)) >> 3);
        uint64_t v54 = v52[1];
        unint64_t v55 = (v54 - *v52) >> 4;
        unint64_t v56 = v53 - v55;
        if (v53 <= v55)
        {
          if (v53 < v55)
          {
            uint64_t v57 = *v52
                - 0x5555555555555550
                * ((uint64_t)(*(void *)(*(void *)(*((void *)v5 + 31) + 176) + 56 * v51 + 16)
                           - *(void *)(*(void *)(*((void *)v5 + 31) + 176) + 56 * v51 + 8)) >> 3);
            while (v54 != v57)
            {
              int64_t v58 = *(std::__shared_weak_count **)(v54 - 8);
              if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, unint64_t))v58->__on_zero_shared)(v58, v56);
                std::__shared_weak_count::__release_weak(v58);
              }
              v54 -= 16;
            }
            v52[1] = v57;
          }
        }
        else
        {
          std::vector<std::shared_ptr<ggl::Data>>::__append((uint64_t)v52, v56);
        }
        uint64_t v50 = *((void *)v5 + 22);
        if (*(void *)(v50 + 24 * v51 + 8) != *(void *)(v50 + 24 * v51)
          && *(unsigned char *)(*(void *)(*((void *)v5 + 31) + 176) + 56 * v51) == 11)
        {
          unint64_t v59 = 0;
          do
          {
            uint64_t v60 = *(void *)(*((void *)v5 + 31) + 176);
            if (*(unsigned char *)(v60 + 56 * v51) == 11
              && *(unsigned char *)(v256 + 68)
              && *(_DWORD *)(*(void *)(v60 + 56 * v51 + 8) + 24 * v59) == 7)
            {
              operator new();
            }
            ++v59;
          }
          while (v59 < (uint64_t)(*(void *)(v50 + 24 * v51 + 8) - *(void *)(v50 + 24 * v51)) >> 4);
        }
        ++v51;
      }
      while (v51 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)v5 + 23) - v50) >> 3));
    }
    uint64_t v61 = *((void *)v5 + 31);
    int8x16_t v62 = *(void **)(v61 + 200);
    int v251 = (void *)(v61 + 208);
    if (v62 != (void *)(v61 + 208))
    {
      uint64_t v253 = (uint64_t **)((char *)v5 + 272);
      while (1)
      {
        unint64_t v63 = v253;
        unint64_t v64 = *v253;
        int v65 = *((_DWORD *)v62 + 8);
LABEL_86:
        unint64_t v66 = v63;
        if (v64)
        {
          do
          {
            unint64_t v63 = (uint64_t **)v64;
            int v67 = *((_DWORD *)v64 + 8);
            if (v65 < v67)
            {
              unint64_t v64 = *v63;
              goto LABEL_86;
            }
            if (v67 >= v65) {
              goto LABEL_94;
            }
            unint64_t v64 = v63[1];
          }
          while (v64);
          unint64_t v66 = v63 + 1;
        }
        uint8x8_t v68 = (uint64_t *)v63;
        unint64_t v63 = (uint64_t **)operator new(0x40uLL);
        *((_DWORD *)v63 + 8) = v65;
        v63[6] = 0;
        v63[7] = 0;
        v63[5] = 0;
        long long *v63 = 0;
        v63[1] = 0;
        v63[2] = v68;
        *unint64_t v66 = (uint64_t *)v63;
        uint64_t v69 = **((void **)v5 + 33);
        double v70 = (uint64_t *)v63;
        if (v69)
        {
          *((void *)v5 + 33) = v69;
          double v70 = *v66;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v5 + 34), v70);
        ++*((void *)v5 + 35);
LABEL_94:
        unint64_t v71 = v63[5];
        uint64_t v72 = v63[6];
        unint64_t v73 = (uint64_t)(v62[6] - v62[5]) >> 4;
        unint64_t v74 = ((char *)v72 - (char *)v71) >> 4;
        unint64_t v75 = v73 - v74;
        if (v73 <= v74)
        {
          if (v73 < v74)
          {
            BOOL v76 = &v71[2 * v73];
            while (v72 != v76)
            {
              unint64_t v77 = (std::__shared_weak_count *)*(v72 - 1);
              if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, unint64_t))v77->__on_zero_shared)(v77, v75);
                std::__shared_weak_count::__release_weak(v77);
              }
              v72 -= 2;
            }
            v63[6] = v76;
          }
        }
        else
        {
          std::vector<std::shared_ptr<ggl::Data>>::__append((uint64_t)(v63 + 5), v75);
        }
        uint64_t v78 = v62[5];
        if (v62[6] != v78) {
          break;
        }
LABEL_160:
        uint64_t v102 = (void *)v62[1];
        if (v102)
        {
          do
          {
            uint64_t v103 = v102;
            uint64_t v102 = (void *)*v102;
          }
          while (v102);
        }
        else
        {
          do
          {
            uint64_t v103 = (void *)v62[2];
            _ZF = *v103 == (void)v62;
            int8x16_t v62 = v103;
          }
          while (!_ZF);
        }
        int8x16_t v62 = v103;
        uint64_t v5 = (altitude::ProcessC3b *)this;
        if (v103 == v251) {
          goto LABEL_166;
        }
      }
      uint64_t v79 = 0;
      unsigned int v80 = 0;
      while (1)
      {
        id v81 = (uint64_t *)(v78 + 16 * v79);
        uint64_t v82 = *(void *)(*v81 + 24);
        uint64_t v83 = *(std::__shared_weak_count **)(*v81 + 32);
        if (v83) {
          atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v82)
        {
          BOOL v84 = 0;
        }
        else
        {
          uint64_t v90 = *(void *)(*v81 + 40);
          uint64_t v91 = *(std::__shared_weak_count **)(*v81 + 48);
          if (v91) {
            atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v90)
          {
            BOOL v84 = 0;
          }
          else
          {
            uint64_t v92 = *(void *)(*v81 + 56);
            uint8x8_t v93 = *(std::__shared_weak_count **)(*v81 + 64);
            if (v93)
            {
              atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
              BOOL v84 = v92 == 0;
              if (!atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
            else
            {
              BOOL v84 = v92 == 0;
            }
          }
          if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        if (v83 && !atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
          if (v84) {
            goto LABEL_106;
          }
        }
        else if (v84)
        {
          goto LABEL_106;
        }
        if (!*(unsigned char *)(v256 + 68)) {
          goto LABEL_106;
        }
        uint64_t v85 = *v81;
        int v86 = *((unsigned __int8 *)this + 208);
        uint64_t v87 = *(void *)(*v81 + 40);
        double v88 = *(std::__shared_weak_count **)(*v81 + 48);
        if (v88) {
          atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v87)
        {
          BOOL v89 = 1;
        }
        else
        {
          uint64_t v94 = *(void *)(v85 + 56);
          uint64_t v95 = *(std::__shared_weak_count **)(v85 + 64);
          if (v95)
          {
            atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
            BOOL v89 = v94 != 0;
            if (!atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          else
          {
            BOOL v89 = v94 != 0;
          }
        }
        if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
          if (v89)
          {
LABEL_122:
            if (*(_DWORD *)(v85 + 16) == 14) {
              goto LABEL_157;
            }
            goto LABEL_106;
          }
        }
        else if (v89)
        {
          goto LABEL_122;
        }
        LODWORD(v271) = 0;
        *(_DWORD *)long long buf = 0;
        uint64_t v96 = *(void *)(v85 + 24);
        size_t v97 = *(std::__shared_weak_count **)(v85 + 32);
        if (v97)
        {
          atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v98 = *(void *)(v85 + 24);
          int8x16_t v99 = *(std::__shared_weak_count **)(v85 + 32);
          double v100 = *(pwin_jpg **)(v96 + 8);
          if (v99)
          {
            atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
            pwin_jpg::p_info_mem_jpg(v100, (unsigned __int8 *)*(unsigned int *)(v98 + 16), (int *)&v271, (int *)buf, v18);
            if (!atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
          else
          {
            pwin_jpg::p_info_mem_jpg(v100, (unsigned __int8 *)*(unsigned int *)(v98 + 16), (int *)&v271, (int *)buf, v18);
          }
          if (!atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        else
        {
          pwin_jpg::p_info_mem_jpg(*(pwin_jpg **)(v96 + 8), (unsigned __int8 *)*(unsigned int *)(v96 + 16), (int *)&v271, (int *)buf, v18);
        }
        if (*(_DWORD *)(v85 + 16) != 14) {
          goto LABEL_106;
        }
        if (v86)
        {
          if (v271 == 512 && *(_DWORD *)buf == 512) {
            goto LABEL_157;
          }
        }
        else if ((int)v271 >= 9 && *(int *)buf > 8)
        {
LABEL_157:
          unsigned int v101 = *((_DWORD *)v62 + 8);
          if (v101 > 7 || ((1 << v101) & 0xE2) == 0) {
            operator new();
          }
        }
LABEL_106:
        uint64_t v78 = v62[5];
        uint64_t v79 = ++v80;
        if (v80 >= (unint64_t)((v62[6] - v78) >> 4)) {
          goto LABEL_160;
        }
      }
    }
LABEL_166:
    ++*((_DWORD *)v5 + 78);
    pthread_mutex_lock(*((pthread_mutex_t **)v5 + 11));
    uint64_t v104 = *((void *)v5 + 8);
    uint64_t v105 = *((void *)v5 + 9);
    uint64_t result = pthread_mutex_unlock(*((pthread_mutex_t **)v5 + 11));
    if (v104 != v105) {
      return result;
    }
    pthread_mutex_lock(*((pthread_mutex_t **)v5 + 19));
    int v106 = *((_DWORD *)v5 + 40);
    uint64_t result = pthread_mutex_unlock(*((pthread_mutex_t **)v5 + 19));
    if ((v106 & 2) != 0) {
      return result;
    }
    goto LABEL_168;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 40))(v9))
  {
    uint64_t v10 = *((void *)v5 + 29);
    LODWORD(v271) = *(_DWORD *)(*((void *)v5 + 1) + 44);
    BYTE4(v271) = 1;
    if (!v10) {
      goto LABEL_12;
    }
    if (!(*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10)) {
      goto LABEL_12;
    }
    long double v11 = (const unsigned __int8 *)(*(uint64_t (**)(void))(**((void **)v5 + 29) + 56))(*((void *)v5 + 29));
    unsigned int v12 = (*(uint64_t (**)(void))(**((void **)v5 + 29) + 48))(*((void *)v5 + 29));
    BOOL v13 = karo::media::C3bLoader::loadFromChunk((karo::media::C3bLoader *)&v271, v11, v12, *((karo::media::C3bModel **)v5 + 31));
    uint64_t v5 = (altitude::ProcessC3b *)this;
    if (v13) {
      goto LABEL_12;
    }
  }
LABEL_28:
  double v36 = *(uint64_t (**)(altitude::ProcessC3b *))(*(void *)v5 + 16);
  return v36(v5);
}

void sub_1A251B808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,atomic_ullong *a37)
{
  if (!atomic_fetch_add(a37, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  md::HardwareVideoDecodingSession::~HardwareVideoDecodingSession((std::mutex *)(v38 - 232));
  _Unwind_Resume(a1);
}

void sub_1A251B988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
}

void sub_1A251B99C()
{
}

void sub_1A251B9E4()
{
}

void std::__function::__func<altitude::ProcessC3b::uploadTextures(void)::$_0,std::allocator<altitude::ProcessC3b::uploadTextures(void)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, ResourceAccessor **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v43 = *a2;
  uint64_t v3 = *(altitude::TextureMapLoadJob ***)(v2 + 288);
  char v4 = *(altitude::TextureMapLoadJob ***)(v2 + 296);
  while (v3 != v4)
  {
    uint64_t v5 = *v3;
    pthread_mutex_lock(*((pthread_mutex_t **)*v3 + 19));
    int v6 = *((_DWORD *)v5 + 40);
    pthread_mutex_unlock(*((pthread_mutex_t **)v5 + 19));
    if (v6)
    {
      double v7 = *v3;
      pthread_mutex_lock(*((pthread_mutex_t **)*v3 + 19));
      int v8 = *((_DWORD *)v7 + 40);
      pthread_mutex_unlock(*((pthread_mutex_t **)v7 + 19));
      if ((v8 & 2) == 0) {
        altitude::TextureMapLoadJob::uploadTextures(*v3, v43, *(unsigned char *)(v2 + 209) == 0);
      }
    }
    v3 += 2;
  }
  uint64_t v9 = *(void **)(v2 + 248);
  uint64_t v10 = (void *)v9[25];
  uint64_t v42 = v9 + 26;
  if (v10 != v9 + 26)
  {
    long double v11 = (uint64_t **)(v2 + 272);
    do
    {
      if (*((_DWORD *)v10 + 8) != 5 && v10[6] != v10[5])
      {
        uint64_t v12 = 0;
        unsigned int v13 = 0;
        do
        {
          uint64_t v14 = *v11;
          int v15 = *((_DWORD *)v10 + 8);
          unsigned int v16 = (uint64_t **)(v2 + 272);
          BOOL v17 = (uint64_t **)(v2 + 272);
          if (*v11)
          {
            while (1)
            {
              while (1)
              {
                BOOL v17 = (uint64_t **)v14;
                int v18 = *((_DWORD *)v14 + 8);
                if (v15 >= v18) {
                  break;
                }
                uint64_t v14 = *v17;
                unsigned int v16 = v17;
                if (!*v17) {
                  goto LABEL_21;
                }
              }
              if (v18 >= v15) {
                break;
              }
              uint64_t v14 = v17[1];
              if (!v14)
              {
                unsigned int v16 = v17 + 1;
                goto LABEL_21;
              }
            }
          }
          else
          {
LABEL_21:
            unint64_t v19 = (uint64_t *)v17;
            BOOL v17 = (uint64_t **)operator new(0x40uLL);
            *((_DWORD *)v17 + 8) = v15;
            v17[6] = 0;
            v17[7] = 0;
            v17[5] = 0;
            *BOOL v17 = 0;
            v17[1] = 0;
            v17[2] = v19;
            *unsigned int v16 = (uint64_t *)v17;
            uint64_t v20 = **(void **)(v2 + 264);
            double v21 = (uint64_t *)v17;
            if (v20)
            {
              *(void *)(v2 + 264) = v20;
              double v21 = *v16;
            }
            unint64_t v22 = *v11;
            BOOL v23 = v21 == *v11;
            *((unsigned char *)v21 + 24) = v23;
            if (!v23)
            {
              do
              {
                uint64_t v24 = v21[2];
                if (*(unsigned char *)(v24 + 24)) {
                  break;
                }
                uint64_t v25 = *(uint64_t **)(v24 + 16);
                uint64_t v26 = *v25;
                if (*v25 == v24)
                {
                  uint64_t v29 = v25[1];
                  if (!v29 || (v30 = *(unsigned __int8 *)(v29 + 24), uint64_t v27 = (unsigned char *)(v29 + 24), v30))
                  {
                    if (*(uint64_t **)v24 == v21)
                    {
                      long long v31 = (uint64_t *)v21[2];
                    }
                    else
                    {
                      long long v31 = *(uint64_t **)(v24 + 8);
                      uint64_t v32 = *v31;
                      *(void *)(v24 + 8) = *v31;
                      if (v32)
                      {
                        *(void *)(v32 + 16) = v24;
                        uint64_t v25 = *(uint64_t **)(v24 + 16);
                      }
                      v31[2] = (uint64_t)v25;
                      *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v31;
                      *long long v31 = v24;
                      *(void *)(v24 + 16) = v31;
                      uint64_t v25 = (uint64_t *)v31[2];
                      uint64_t v24 = *v25;
                    }
                    *((unsigned char *)v31 + 24) = 1;
                    *((unsigned char *)v25 + 24) = 0;
                    uint64_t v35 = *(void *)(v24 + 8);
                    *uint64_t v25 = v35;
                    if (v35) {
                      *(void *)(v35 + 16) = v25;
                    }
                    *(void *)(v24 + 16) = v25[2];
                    *(void *)(v25[2] + 8 * (*(void *)v25[2] != (void)v25)) = v24;
                    *(void *)(v24 + 8) = v25;
                    goto LABEL_50;
                  }
                }
                else if (!v26 || (v28 = *(unsigned __int8 *)(v26 + 24), uint64_t v27 = (unsigned char *)(v26 + 24), v28))
                {
                  if (*(uint64_t **)v24 == v21)
                  {
                    uint64_t v33 = v21[1];
                    *(void *)uint64_t v24 = v33;
                    if (v33)
                    {
                      *(void *)(v33 + 16) = v24;
                      uint64_t v25 = *(uint64_t **)(v24 + 16);
                    }
                    v21[2] = (uint64_t)v25;
                    *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v21;
                    v21[1] = v24;
                    *(void *)(v24 + 16) = v21;
                    uint64_t v25 = (uint64_t *)v21[2];
                  }
                  else
                  {
                    double v21 = (uint64_t *)v21[2];
                  }
                  *((unsigned char *)v21 + 24) = 1;
                  *((unsigned char *)v25 + 24) = 0;
                  uint64_t v24 = v25[1];
                  double v34 = *(uint64_t **)v24;
                  v25[1] = *(void *)v24;
                  if (v34) {
                    v34[2] = (uint64_t)v25;
                  }
                  *(void *)(v24 + 16) = v25[2];
                  *(void *)(v25[2] + 8 * (*(void *)v25[2] != (void)v25)) = v24;
                  *(void *)uint64_t v24 = v25;
LABEL_50:
                  void v25[2] = v24;
                  break;
                }
                *(unsigned char *)(v24 + 24) = 1;
                double v21 = v25;
                *((unsigned char *)v25 + 24) = v25 == v22;
                *uint64_t v27 = 1;
              }
              while (v25 != v22);
            }
            ++*(void *)(v2 + 280);
          }
          if (!v17[5][2 * v12]) {
            operator new();
          }
          uint64_t v12 = ++v13;
        }
        while (v13 < (unint64_t)((uint64_t)(v10[6] - v10[5]) >> 4));
      }
      double v36 = (void *)v10[1];
      if (v36)
      {
        do
        {
          int8x16_t v37 = v36;
          double v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          int8x16_t v37 = (void *)v10[2];
          BOOL v23 = *v37 == (void)v10;
          uint64_t v10 = v37;
        }
        while (!v23);
      }
      uint64_t v10 = v37;
    }
    while (v37 != v42);
    uint64_t v9 = *(void **)(v2 + 248);
  }
  uint64_t v38 = v9[22];
  if (v9[23] != v38)
  {
    unint64_t v39 = 0;
    do
    {
      if (*(unsigned char *)(v38 + 56 * v39) == 11 && *(void *)(v38 + 56 * v39 + 16) != *(void *)(v38 + 56 * v39 + 8))
      {
        unint64_t v40 = 0;
        unsigned int v41 = 1;
        do
        {
          if (!*(void *)(*(void *)(*(void *)(v2 + 176) + 24 * v39) + 16 * v40)) {
            operator new();
          }
          unint64_t v40 = v41++;
        }
        while (0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(*(void *)(v9[22] + 56 * v39 + 16) - *(void *)(v9[22] + 56 * v39 + 8)) >> 3) > v40);
      }
      ++v39;
      uint64_t v38 = v9[22];
    }
    while (v39 < 0x6DB6DB6DB6DB6DB7 * ((v9[23] - v38) >> 3));
  }
}

void sub_1A251C63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, atomic_ullong *a15)
{
  if (!atomic_fetch_add(a15, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A251C718(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<altitude::TextureMap *,std::shared_ptr<altitude::TextureMap>::__shared_ptr_default_delete<altitude::TextureMap,altitude::TextureMap>,std::allocator<altitude::TextureMap>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::TextureMap *,std::shared_ptr<altitude::TextureMap>::__shared_ptr_default_delete<altitude::TextureMap,altitude::TextureMap>,std::allocator<altitude::TextureMap>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<altitude::ProcessC3b::uploadTextures(void)::$_0,std::allocator<altitude::ProcessC3b::uploadTextures(void)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57D008;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<altitude::ProcessC3b::uploadTextures(void)::$_0,std::allocator<altitude::ProcessC3b::uploadTextures(void)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57D008;
  result[1] = v3;
  return result;
}

void std::__function::__func<altitude::ProcessC3b::uploadTextures(void)::$_0,std::allocator<altitude::ProcessC3b::uploadTextures(void)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

void altitude::ProcessC3b::~ProcessC3b(altitude::ProcessC3b *this)
{
  altitude::ProcessC3b::~ProcessC3b(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  std::__shared_weak_count *v17;
  uint64_t vars8;

  *(void *)this = &unk_1EF568440;
  uint64_t v2 = *((void *)this + 36);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 37);
    char v4 = (void *)*((void *)this + 36);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 36);
    }
    *((void *)this + 37) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::__map_value_compare<karo::media::C3bMaterialClass,std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::less<karo::media::C3bMaterialClass>,true>,std::allocator<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>>>::destroy(*((void **)this + 34));
  int v6 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    double v7 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v7) {
      goto LABEL_16;
    }
  }
  else
  {
    double v7 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v7) {
      goto LABEL_16;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_16:
  int v8 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v9 = (void **)*((void *)this + 22);
    if (!v9) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v9 = (void **)*((void *)this + 22);
    if (!v9) {
      goto LABEL_33;
    }
  }
  uint64_t v10 = (void **)*((void *)this + 23);
  long double v11 = v9;
  if (v10 != v9)
  {
    uint64_t v12 = (void **)*((void *)this + 23);
    do
    {
      int v15 = (char *)*(v12 - 3);
      v12 -= 3;
      uint64_t v14 = v15;
      if (v15)
      {
        unsigned int v16 = (char *)*(v10 - 2);
        unsigned int v13 = v14;
        if (v16 != v14)
        {
          do
          {
            BOOL v17 = (std::__shared_weak_count *)*((void *)v16 - 1);
            if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            v16 -= 16;
          }
          while (v16 != v14);
          unsigned int v13 = *v12;
        }
        *(v10 - 2) = v14;
        operator delete(v13);
      }
      uint64_t v10 = v12;
    }
    while (v12 != v9);
    long double v11 = (void **)*((void *)this + 22);
  }
  *((void *)this + 23) = v9;
  operator delete(v11);
LABEL_33:
  karo::Job::~Job(this);
}

void std::__tree<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::__map_value_compare<karo::media::C3bMaterialClass,std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::less<karo::media::C3bMaterialClass>,true>,std::allocator<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::__map_value_compare<karo::media::C3bMaterialClass,std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::less<karo::media::C3bMaterialClass>,true>,std::allocator<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>>>::destroy(*a1);
    std::__tree<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::__map_value_compare<karo::media::C3bMaterialClass,std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::less<karo::media::C3bMaterialClass>,true>,std::allocator<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>>>::destroy(a1[1]);
    uint64_t v2 = a1[5];
    if (v2)
    {
      uint64_t v3 = a1[6];
      char v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          v3 -= 16;
        }
        while (v3 != v2);
        char v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

uint64_t altitude::C3bLoadJob::getC3bElement@<X0>(altitude::C3bLoadJob *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(altitude::C3bLoadJob *))(*(void *)this + 40))(this);
  if (result)
  {
    uint64_t v5 = *((void *)this + 36);
    *a2 = *((void *)this + 35);
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t altitude::C3bLoadJob::succeeded(altitude::C3bLoadJob *this)
{
  return *((unsigned __int8 *)this + 496);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep altitude::C3bLoadJob::jobStep(altitude::C3bLoadJob *this)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)this + 125);
  switch(v2)
  {
    case 2:
      *((double *)this + 69) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
      if (!altitude::C3bLoadJob::loadC3b(this))
      {
LABEL_150:
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        int v141 = *((_DWORD *)this + 40);
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
        if ((v141 & 2) != 0)
        {
          BOOL v142 = 0;
        }
        else if (*((void *)this + 35))
        {
          BOOL v142 = 1;
        }
        else
        {
          BOOL v142 = *((void *)this + 37) != *((void *)this + 38);
        }
        *((unsigned char *)this + 496) = v142;
        *((double *)this + 72) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
        *((double *)this + 66) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        *((_DWORD *)this + 40) |= 1u;
        return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
      }
      uint64_t v13 = *((void *)this + 42);
      uint64_t v14 = *(void *)(v13 + 136);
      uint64_t v15 = *(void *)(v13 + 144) - v14;
      if (v15)
      {
        unint64_t v16 = 0;
        unint64_t v17 = 0xEEEEEEEEEEEEEEEFLL * (v15 >> 3);
        unsigned int v18 = 1;
        while (1)
        {
          unsigned int v19 = *(unsigned __int8 *)(v14 + 120 * v16);
          BOOL v114 = v19 > 6;
          int v20 = (1 << v19) & 0x5E;
          if (!v114 && v20 != 0) {
            break;
          }
          unint64_t v16 = v18++;
          if (v17 <= v16) {
            goto LABEL_34;
          }
        }
        altitude::C3bLoadJob::loadDtm(this);
        if (!*((void *)this + 44))
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          uint64_t v33 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            int v34 = *((_DWORD *)this + 99);
            int v35 = *((_DWORD *)this + 100);
            int v36 = *((_DWORD *)this + 98);
            *(_DWORD *)long long buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v34;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v35;
            *(_WORD *)&buf[14] = 1024;
            LODWORD(v154) = v36;
            _os_log_impl(&dword_1A1780000, v33, OS_LOG_TYPE_ERROR, "C3bLoadJob: Failed to load DTM for %u %u %u", buf, 0x14u);
          }

          return (*(uint64_t (**)(altitude::C3bLoadJob *))(*(void *)this + 16))(this);
        }
        uint64_t v13 = *((void *)this + 42);
      }
LABEL_34:
      uint64_t v26 = *(unsigned char **)(v13 + 136);
      if (*(void *)(v13 + 144) - (void)v26 != 120 || *v26 != 6)
      {
LABEL_107:
        memset(&v146, 0, sizeof(v146));
        uint64_t v92 = *(void *)(v13 + 136);
        uint64_t v93 = *(void *)(v13 + 144) - v92;
        if (v93)
        {
          unint64_t v94 = 0;
          unint64_t v95 = 0xEEEEEEEEEEEEEEEFLL * (v93 >> 3);
          unsigned int v96 = 1;
          while (*(unsigned __int8 *)(v92 + 120 * v94) - 1 > 5)
          {
            unint64_t v94 = v96++;
            if (v95 <= v94) {
              goto LABEL_113;
            }
          }
          altitude::C3bLoadJob::loadMaps((pthread_mutex_t **)this, (char **)&v146);
        }
LABEL_113:
        pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
        int v97 = *((_DWORD *)this + 40);
        pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
        if ((v97 & 2) == 0)
        {
          uint64_t v98 = *((void *)this + 42);
          double v100 = *(double *)(v98 + 8);
          double v99 = *(double *)(v98 + 16);
          double v101 = *(double *)(v98 + 40);
          double v102 = *(double *)(v98 + 48);
          double v103 = *(double *)(v98 + 72);
          double v104 = *(double *)(v98 + 80);
          double v105 = *(double *)(v98 + 24);
          double v106 = *(double *)(v98 + 56);
          double v107 = *(double *)(v98 + 88);
          double v108 = v107 + v102 + v100;
          if (v108 <= 0.0)
          {
            BOOL v114 = v100 <= v102 || v100 <= v107;
            if (v114)
            {
              BOOL v115 = v102 <= v107;
              double v116 = sqrt(1.0 - (v102 + v100) + v107);
              double v117 = 1.0 / (v116 + v116);
              double v118 = (v105 + v103) * v117;
              double v119 = v106 + v104;
              double v120 = v119 * v117;
              double v121 = v116 * 0.5;
              double v122 = (v99 - v101) * v117;
              double v123 = sqrt(v102 + 1.0 - (v100 + v107));
              double v124 = v99 + v101;
              double v125 = 1.0 / (v123 + v123);
              double v126 = v124 * v125;
              double v111 = v123 * 0.5;
              double v127 = v119 * v125;
              double v113 = (v103 - v105) * v125;
              if (v115) {
                double v110 = v118;
              }
              else {
                double v110 = v126;
              }
              if (v115)
              {
                double v111 = v120;
                double v112 = v121;
              }
              else
              {
                double v112 = v127;
              }
              if (v115) {
                double v113 = v122;
              }
            }
            else
            {
              double v128 = sqrt(v100 + 1.0 - (v102 + v107));
              double v129 = v128 + v128;
              double v110 = v128 * 0.5;
              double v130 = v99 + v101;
              double v131 = 1.0 / v129;
              double v111 = v130 * (1.0 / v129);
              double v112 = (v105 + v103) * v131;
              double v113 = (v106 - v104) * v131;
            }
          }
          else
          {
            double v109 = 0.5 / sqrt(v108 + 1.0);
            double v110 = v109 * (v106 - v104);
            double v111 = v109 * (v103 - v105);
            double v112 = v109 * (v99 - v101);
            double v113 = 0.25 / v109;
          }
          *(_OWORD *)long long buf = *(_OWORD *)(v98 + 104);
          uint64_t v154 = *(void *)(v98 + 120);
          *(double *)&long long v155 = v110;
          *((double *)&v155 + 1) = v111;
          *(double *)&long long v156 = v112;
          *((double *)&v156 + 1) = v113;
          if (!*((unsigned char *)this + 466) || *((unsigned char *)this + 465)) {
            altitude::C3bLoadJob::createElement();
          }
          InternalTextures = (uint64_t **)altitude::ProcessC3b::getInternalTextures(*((altitude::ProcessC3b **)this + 40));
          if ((uint64_t **)((char *)this + 296) != InternalTextures) {
            std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>((uint64_t)this + 296, *InternalTextures, InternalTextures[1], ((char *)InternalTextures[1] - (char *)*InternalTextures) >> 4);
          }
          if (!*((void *)this + 35) && *((void *)this + 37) == *((void *)this + 38))
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
            }
            uint64_t v133 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
            {
              int v134 = *((_DWORD *)this + 99);
              int v135 = *((_DWORD *)this + 100);
              int v136 = *((_DWORD *)this + 98);
              *(_DWORD *)int32x4_t v147 = 67109632;
              int v148 = v134;
              __int16 v149 = 1024;
              int v150 = v135;
              __int16 v151 = 1024;
              int v152 = v136;
              _os_log_impl(&dword_1A1780000, v133, OS_LOG_TYPE_ERROR, "Failed to create node for %u %u %u", v147, 0x14u);
            }
          }
        }
        uint64_t v137 = *(void *)&v146._type;
        if (*(void *)&v146._type)
        {
          uint64_t v138 = *(void *)&v146._xIdx;
          uint64_t v139 = *(void **)&v146._type;
          if (*(void *)&v146._xIdx != *(void *)&v146._type)
          {
            do
            {
              uint64_t v140 = *(std::__shared_weak_count **)(v138 - 8);
              if (v140 && !atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                std::__shared_weak_count::__release_weak(v140);
              }
              v138 -= 16;
            }
            while (v138 != v137);
            uint64_t v139 = *(void **)&v146._type;
          }
          *(void *)&v146._xIdx = v137;
          operator delete(v139);
        }
        goto LABEL_150;
      }
      unsigned int v27 = *((_DWORD *)this + 98);
      if (v27 >= 0x1F) {
        char v28 = 31;
      }
      else {
        char v28 = *((_DWORD *)this + 98);
      }
      int v29 = ~(-1 << v28) - *((_DWORD *)this + 99);
      int v30 = *((_DWORD *)this + 100);
      v146._type = -1;
      v146._level = v27;
      v146._yIdx = v29;
      v146._xIdx = v30;
      uint64_t v31 = *((void *)this + 44);
      uint64_t v32 = (std::__shared_weak_count *)*((void *)this + 45);
      if (v32)
      {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)long long buf = v31;
        *(void *)&uint8_t buf[8] = v32;
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *(void *)long long buf = *((void *)this + 44);
        *(void *)&uint8_t buf[8] = 0;
      }
      uint64_t v157 = 0;
      long long v156 = 0u;
      long long v155 = 0u;
      int v158 = -1;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v161 = 0u;
      double v162 = 1.0;
      __int16 v163 = 255;
      int v165 = 0;
      int v164 = 0;
      char v166 = 0;
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      altitude::HeightMeshBuilder::buildHeightMesh((uint64_t)buf, &v146, 0x10u, 1u, 0.0);
      long long v37 = v155;
      if (*((void *)&v155 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v155 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v38 = *(void *)(v13 + 136);
      unint64_t v39 = *(std::__shared_weak_count **)(v38 + 48);
      *(_OWORD *)(v38 + 40) = v37;
      if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
      unint64_t v40 = *(void **)(v13 + 136);
      uint64_t v42 = (__int16 *)*((void *)&v156 + 1);
      unsigned int v41 = (__int16 *)v156;
      size_t v43 = *((void *)&v156 + 1) - v156;
      unint64_t v44 = (uint64_t)(*((void *)&v156 + 1) - v156) >> 1;
      uint64_t v45 = (unsigned char *)v40[10];
      if (v44 <= (uint64_t)(v40[12] - (void)v45) >> 1)
      {
LABEL_72:
        std::string __p = v41;
        if (v41 != v42)
        {
          int64_t v58 = v41;
          uint64_t v144 = v42;
          uint64_t v145 = v13;
          do
          {
            __int16 v60 = *v58;
            uint64_t v61 = *(void **)(v13 + 136);
            unint64_t v63 = (char *)v61[11];
            unint64_t v62 = v61[12];
            if ((unint64_t)v63 < v62)
            {
              *(_WORD *)unint64_t v63 = v60;
              unint64_t v59 = v63 + 2;
            }
            else
            {
              unint64_t v64 = (char *)v61[10];
              uint64_t v65 = v63 - v64;
              if (v63 - v64 <= -3) {
                abort();
              }
              uint64_t v66 = v65 >> 1;
              unint64_t v67 = v62 - (void)v64;
              if (v67 <= (v65 >> 1) + 1) {
                unint64_t v68 = v66 + 1;
              }
              else {
                unint64_t v68 = v67;
              }
              if (v67 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v69 = v68;
              }
              if (v69)
              {
                if (v69 < 0) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                double v70 = operator new(2 * v69);
              }
              else
              {
                double v70 = 0;
              }
              unint64_t v71 = &v70[2 * v66];
              *unint64_t v71 = v60;
              unint64_t v59 = v71 + 1;
              if (v63 != v64)
              {
                unint64_t v72 = v63 - 2 - v64;
                if (v72 < 0x1E) {
                  goto LABEL_161;
                }
                if ((unint64_t)(v63 - &v70[v65 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
                  goto LABEL_161;
                }
                uint64_t v73 = (v72 >> 1) + 1;
                unint64_t v74 = &v70[2 * v66 - 16];
                unint64_t v75 = v63 - 16;
                unint64_t v76 = v73 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  long long v77 = *(_OWORD *)v75;
                  *(v74 - 1) = *((_OWORD *)v75 - 1);
                  *unint64_t v74 = v77;
                  v74 -= 2;
                  v75 -= 32;
                  v76 -= 16;
                }
                while (v76);
                v71 -= v73 & 0xFFFFFFFFFFFFFFF0;
                v63 -= 2 * (v73 & 0xFFFFFFFFFFFFFFF0);
                if (v73 != (v73 & 0xFFFFFFFFFFFFFFF0))
                {
LABEL_161:
                  do
                  {
                    __int16 v78 = *((_WORD *)v63 - 1);
                    v63 -= 2;
                    *--unint64_t v71 = v78;
                  }
                  while (v63 != v64);
                }
              }
              v61[10] = v71;
              v61[11] = v59;
              v61[12] = &v70[2 * v69];
              if (v64) {
                operator delete(v64);
              }
              uint64_t v42 = v144;
              uint64_t v13 = v145;
            }
            v61[11] = v59;
            ++v58;
          }
          while (v58 != v42);
        }
        *(_DWORD *)(*(void *)(v13 + 136) + 104) = v158;
        long long v79 = v160;
        long long v80 = v161;
        double v81 = (*(double *)&v80 + *(double *)&v80) * *(double *)&v80;
        double v82 = (*((double *)&v161 + 1) + *((double *)&v161 + 1)) * *((double *)&v161 + 1);
        double v83 = (*((double *)&v160 + 1) + *((double *)&v160 + 1)) * *(double *)&v161;
        double v84 = (*((double *)&v161 + 1) + *((double *)&v161 + 1)) * v162;
        double v85 = *((double *)&v161 + 1) * (*((double *)&v160 + 1) + *((double *)&v160 + 1));
        double v86 = v162 * (*(double *)&v80 + *(double *)&v80);
        double v87 = 1.0 - (*((double *)&v160 + 1) + *((double *)&v160 + 1)) * *((double *)&v160 + 1);
        double v88 = (*(double *)&v80 + *(double *)&v80) * *((double *)&v161 + 1);
        double v89 = v162 * (*((double *)&v160 + 1) + *((double *)&v160 + 1));
        *(double *)(v13 + 8) = 1.0 - (v81 + v82);
        *(double *)(v13 + 16) = v84 + v83;
        *(double *)(v13 + 24) = v85 - v86;
        *(void *)(v13 + 32) = 0;
        *(double *)(v13 + 40) = v83 - v84;
        *(double *)(v13 + 48) = v87 - v82;
        *(double *)(v13 + 56) = v89 + v88;
        *(void *)(v13 + 64) = 0;
        *(double *)(v13 + 72) = v86 + v85;
        *(double *)(v13 + 80) = v88 - v89;
        *(double *)(v13 + 88) = v87 - v81;
        *(void *)(v13 + 96) = 0;
        *(_OWORD *)(v13 + 104) = v159;
        *(void *)(v13 + 120) = v79;
        *(void *)(v13 + 128) = 0x3FF0000000000000;
        if (__p)
        {
          *((void *)&v156 + 1) = __p;
          operator delete(__p);
        }
        uint64_t v90 = (std::__shared_weak_count *)*((void *)&v155 + 1);
        if (*((void *)&v155 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v155 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
        uint64_t v91 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
        uint64_t v13 = *((void *)this + 42);
        goto LABEL_107;
      }
      if ((v43 & 0x8000000000000000) != 0) {
        abort();
      }
      long long v46 = (unsigned char *)v40[11];
      unsigned int v47 = (char *)operator new(v43);
      uint64_t v48 = v46 - v45;
      int32x4_t v49 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFFELL];
      uint64_t v50 = v49;
      if (v46 != v45)
      {
        if ((unint64_t)(v48 - 2) < 0x1E)
        {
          uint64_t v50 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFFELL];
          do
          {
LABEL_69:
            __int16 v57 = *((_WORD *)v46 - 1);
            v46 -= 2;
            *((_WORD *)v50 - 1) = v57;
            v50 -= 2;
          }
          while (v46 != v45);
          goto LABEL_70;
        }
        uint64_t v50 = &v47[(v46 - v45) & 0xFFFFFFFFFFFFFFFELL];
        if (v46 - v47 - (v48 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
          goto LABEL_69;
        }
        uint64_t v51 = v48 >> 1;
        unint64_t v52 = ((unint64_t)(v48 - 2) >> 1) + 1;
        unint64_t v53 = &v47[2 * v51 - 16];
        uint64_t v54 = (long long *)(v46 - 16);
        unint64_t v55 = v52 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v56 = *v54;
          *((_OWORD *)v53 - 1) = *(v54 - 1);
          *(_OWORD *)unint64_t v53 = v56;
          v53 -= 32;
          v54 -= 2;
          v55 -= 16;
        }
        while (v55);
        uint64_t v50 = &v49[-2 * (v52 & 0xFFFFFFFFFFFFFFF0)];
        v46 -= 2 * (v52 & 0xFFFFFFFFFFFFFFF0);
        if (v52 != (v52 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_69;
        }
      }
LABEL_70:
      v40[10] = v50;
      v40[11] = v49;
      v40[12] = &v47[2 * v44];
      if (v45) {
        operator delete(v45);
      }
      goto LABEL_72;
    case 1:
      *((double *)this + 68) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
      uint64_t v4 = *((void *)this + 42);
      uint64_t v5 = *(void *)(v4 + 136);
      uint64_t v6 = *(void *)(v4 + 144);
      if (v6 != v5)
      {
        unint64_t v7 = 0;
        unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - v5) >> 3);
        unsigned int v9 = 1;
        while (1)
        {
          unsigned int v10 = *(unsigned __int8 *)(v5 + 120 * v7);
          BOOL v114 = v10 > 6;
          int v11 = (1 << v10) & 0x5E;
          if (!v114 && v11 != 0) {
            break;
          }
          unint64_t v7 = v9++;
          if (v8 <= v7) {
            goto LABEL_27;
          }
        }
        altitude::C3bLoadJob::loadDtm(this);
        uint64_t v23 = *((void *)this + 42);
        uint64_t v5 = *(void *)(v23 + 136);
        uint64_t v6 = *(void *)(v23 + 144);
        unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - v5) >> 3);
LABEL_27:
        if (v6 != v5)
        {
          unint64_t v24 = 0;
          unsigned int v25 = 1;
          while (*(unsigned __int8 *)(v5 + 120 * v24) - 1 > 5)
          {
            unint64_t v24 = v25++;
            if (v8 <= v24) {
              goto LABEL_42;
            }
          }
          altitude::C3bLoadJob::loadMaps((pthread_mutex_t **)this, 0);
        }
      }
LABEL_42:
      *((double *)this + 71) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
      ++*((_DWORD *)this + 125);
      pthread_mutex_lock(*((pthread_mutex_t **)this + 11));
      unint64_t v22 = (pthread_mutex_t *)*((void *)this + 11);
      break;
    case 0:
      *((double *)this + 65) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
      *((double *)this + 67) = (double)std::chrono::steady_clock::now().__d_.__rep_ * 0.000000001;
      altitude::C3bLoadJob::loadC3b(this);
      if (*((unsigned char *)this + 468))
      {
        altitude::C3bLoadJob::loadDtm(this);
        altitude::C3bLoadJob::loadMaps((pthread_mutex_t **)this, 0);
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result = std::chrono::steady_clock::now().__d_.__rep_;
      *((double *)this + 70) = (double)result * 0.000000001;
      ++*((_DWORD *)this + 125);
      return result;
    default:
      pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
      *((_DWORD *)this + 40) |= 1u;
      unint64_t v22 = (pthread_mutex_t *)*((void *)this + 19);
      break;
  }
  return pthread_mutex_unlock(v22);
}

void sub_1A251D9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)va);
  _Unwind_Resume(a1);
}

void sub_1A251DA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  altitude::HeightMeshBuilder::~HeightMeshBuilder((altitude::HeightMeshBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t altitude::C3bLoadJob::loadC3b(altitude::C3bLoadJob *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 40);
  if (!v2) {
    operator new();
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(v2 + 152));
  int v3 = *(_DWORD *)(v2 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 152));
  if (v3)
  {
    uint64_t v4 = *((void *)this + 40);
    pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 152));
    int v5 = *(_DWORD *)(v4 + 160);
    pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 152));
    uint64_t v6 = *((void *)this + 40);
    if ((v5 & 2) == 0)
    {
      *(_OWORD *)((char *)this + 584) = *(_OWORD *)(v6 + 352);
      *((void *)this + 75) = *(void *)(v6 + 344);
      return 1;
    }
    uint64_t v8 = *(void *)(v6 + 216);
    if (!v8
      || (pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152)),
          int v9 = *(_DWORD *)(v8 + 160),
          pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152)),
          (v9 & 1) == 0)
      || (*(uint64_t (**)(void))(**(void **)(v6 + 216) + 56))(*(void *)(v6 + 216)))
    {
      uint64_t v10 = *(void *)(v6 + 232);
      if (!v10
        || (pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152)),
            int v11 = *(_DWORD *)(v10 + 160),
            pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152)),
            (v11 & 1) == 0)
        || (*(uint64_t (**)(void))(**(void **)(v6 + 232) + 56))(*(void *)(v6 + 232)))
      {
        uint64_t v12 = (char **)((char *)this + 440);
        uint64_t v13 = *((unsigned __int8 *)this + 463);
        int v14 = (char)v13;
        if ((v13 & 0x80u) != 0) {
          uint64_t v13 = *((void *)this + 56);
        }
        if (v13 == 5
          && (v14 >= 0 ? (uint64_t v15 = (char *)this + 440) : (uint64_t v15 = *v12),
              (int v16 = *(_DWORD *)v15, v17 = v15[4], v16 == 1819308129) ? (v18 = v17 == 101) : (v18 = 0),
              v18))
        {
          unint64_t v22 = (altitude::C3bLoadJob *)*((void *)this + 46);
          if (v22 != (altitude::C3bLoadJob *)((char *)this + 376))
          {
            do
            {
              (*(void (**)(void, uint64_t))(**((void **)this + 25) + 120))(*((void *)this + 25), (uint64_t)v22 + 28);
              uint64_t v23 = (altitude::C3bLoadJob *)*((void *)v22 + 1);
              if (v23)
              {
                do
                {
                  unint64_t v24 = v23;
                  uint64_t v23 = *(altitude::C3bLoadJob **)v23;
                }
                while (v23);
              }
              else
              {
                do
                {
                  unint64_t v24 = (altitude::C3bLoadJob *)*((void *)v22 + 2);
                  BOOL v18 = *(void *)v24 == (void)v22;
                  unint64_t v22 = v24;
                }
                while (!v18);
              }
              unint64_t v22 = v24;
            }
            while (v24 != (altitude::C3bLoadJob *)((char *)this + 376));
          }
        }
        else
        {
          long long v28 = *(_OWORD *)((char *)this + 392);
          int v19 = *((_DWORD *)this + 102);
          int v20 = *((_DWORD *)this + 103);
          *(_DWORD *)&v27[8] = 0;
          *(_DWORD *)&v27[12] = v20;
          *(_DWORD *)unsigned int v27 = 15;
          *(_DWORD *)&v27[4] = v19;
          altitude::TileKey::toUrlString(__p, v27, (uint64_t)this + 416, (uint64_t)v12, *((unsigned __int8 *)this + 464));
          uint64_t LoaderForFile = altitude::ProtocolLoader::getLoaderForFile(*((void *)this + 24), (char **)__p);
          if (LoaderForFile) {
            (*(void (**)(uint64_t, void **))(*(void *)LoaderForFile + 120))(LoaderForFile, __p);
          }
          if (v26 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    (*(void (**)(altitude::C3bLoadJob *))(*(void *)this + 16))(this);
  }
  return 0;
}

void sub_1A251E8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A251E93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void altitude::C3bLoadJob::loadDtm(altitude::C3bLoadJob *this)
{
  int v21 = 0;
  uint64_t v20 = 0;
  long long v22 = *(_OWORD *)((char *)this + 392);
  int v19 = 17;
  if (!*((void *)this + 44)
    && (*(unsigned int (**)(void, int *))(**((void **)this + 29) + 112))(*((void *)this + 29), &v19))
  {
    atomic_load((unsigned int *)this + 4);
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 29) + 104))(&v14);
    uint64_t v2 = v14;
    if (v14)
    {
      int v3 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 45);
      *((void *)this + 44) = v2;
      *((void *)this + 45) = v3;
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      if (!*(void *)karo::Job::getSubJob((pthread_mutex_t **)this, 1))
      {
        uint64_t v10 = v18;
        v13[0] = v17;
        v13[1] = v18;
        if (v18)
        {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          karo::Job::addBlockingSubJob((uint64_t *)this, v13, 1, 0);
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        else
        {
          karo::Job::addBlockingSubJob((uint64_t *)this, v13, 1, 0);
        }
      }
      uint64_t v5 = v17;
      pthread_mutex_lock(*(pthread_mutex_t **)(v17 + 152));
      int v6 = *(_DWORD *)(v5 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 152));
      if (v6)
      {
        uint64_t v7 = v14;
        if (!v14) {
          operator new();
        }
        uint64_t v8 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 45);
        *((void *)this + 44) = v7;
        *((void *)this + 45) = v8;
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
      }
    }
    int v16 = off_1EF5677B0;
    if (v17) {
      atomic_fetch_add((atomic_uint *volatile)(v17 + 128), 0xFFFFFFFF);
    }
    uint64_t v11 = v18;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = v15;
    if (v15)
    {
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_1A251EDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  std::pair<std::shared_ptr<altitude::GEOTileDataPrivate>,karo::AsyncRequestManager::RequestHandle>::~pair((uint64_t *)va);
  _Unwind_Resume(a1);
}

void altitude::C3bLoadJob::loadMaps(pthread_mutex_t **this, char **a2)
{
  uint64_t i = this;
  if (a2)
  {
    int v3 = 2;
    while (1)
    {
      SubJob = karo::Job::getSubJob(i, v3);
      uint64_t v5 = *(void *)SubJob;
      int v6 = (std::__shared_weak_count *)*((void *)SubJob + 1);
      uint64_t v79 = *(void *)SubJob;
      long long v80 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v5) {
        goto LABEL_84;
      }
      unint64_t v76 = v6;
      uint64_t v77 = v5;
      unsigned int v78 = v3;
      uint64_t v7 = *(char **)(v5 + 240);
      uint64_t v8 = *(char **)(v5 + 248);
      if (v8 - v7 >= 1)
      {
        uint64_t v9 = (v8 - v7) >> 4;
        unint64_t v10 = (unint64_t)a2[1];
        uint64_t v11 = v10 - (void)*a2;
        uint64_t v12 = v11 >> 4;
        uint64_t v13 = (std::__shared_weak_count **)&(*a2)[v11 & 0xFFFFFFFFFFFFFFF0];
        uint64_t v14 = a2[2];
        if (v9 <= (uint64_t)&v14[-v10] >> 4)
        {
          double v70 = *a2;
          uint64_t v71 = v12;
          uint64_t v19 = v10 - (void)v13;
          uint64_t v20 = (uint64_t)(v10 - (void)v13) >> 4;
          if (v20 >= v9)
          {
            int v21 = &v7[16 * v9];
            uint64_t v23 = a2[1];
          }
          else
          {
            int v21 = &v7[16 * v20];
            if (v21 == v8)
            {
              uint64_t v23 = a2[1];
            }
            else
            {
              long long v22 = &v7[16 * v20];
              uint64_t v23 = a2[1];
              do
              {
                *(void *)uint64_t v23 = 0;
                *((void *)v23 + 1) = 0;
                uint64_t v24 = *(void *)v22;
                uint64_t v25 = *((void *)v22 + 1);
                if (v25)
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
                  char v26 = (std::__shared_weak_count *)*((void *)v23 + 1);
                  *(void *)uint64_t v23 = v24;
                  *((void *)v23 + 1) = v25;
                  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                    std::__shared_weak_count::__release_weak(v26);
                  }
                }
                else
                {
                  *(void *)uint64_t v23 = v24;
                  *((void *)v23 + 1) = 0;
                }
                v23 += 16;
                v22 += 16;
              }
              while (v22 != v8);
              uint64_t v9 = (v8 - v7) >> 4;
              uint64_t i = this;
              uint64_t v19 = v10 - (void)v13;
            }
            a2[1] = v23;
            if (v19 < 1) {
              goto LABEL_83;
            }
          }
          uint64_t v73 = 2 * v9;
          uint64_t v48 = (uint64_t *)&v23[-16 * v9];
          int32x4_t v49 = v23;
          while ((unint64_t)v48 < v10)
          {
            *(void *)int32x4_t v49 = 0;
            *((void *)v49 + 1) = 0;
            uint64_t v50 = *v48;
            uint64_t v51 = v48[1];
            if (v51)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
              unint64_t v52 = (std::__shared_weak_count *)*((void *)v49 + 1);
              *(void *)int32x4_t v49 = v50;
              *((void *)v49 + 1) = v51;
              if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            else
            {
              *(void *)int32x4_t v49 = v50;
              *((void *)v49 + 1) = 0;
            }
            v49 += 16;
            v48 += 2;
          }
          a2[1] = v49;
          if (v23 != (char *)&v13[v73])
          {
            uint64_t v53 = 16 * ((v23 - (char *)&v13[v73]) >> 4);
            uint64_t v54 = (std::__shared_weak_count **)(v23 - 8);
            uint64_t v55 = (uint64_t)&v70[16 * v71 - 8];
            do
            {
              __int16 v57 = *(std::__shared_weak_count **)(v55 + v53 - 8);
              long long v56 = *(std::__shared_weak_count **)(v55 + v53);
              if (v56) {
                atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int64_t v58 = *v54;
              *(v54 - 1) = v57;
              *uint64_t v54 = v56;
              if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
              v54 -= 2;
              v53 -= 16;
            }
            while (v53);
          }
          for (uint64_t i = this; v7 != v21; v13 += 2)
          {
            __int16 v60 = *(std::__shared_weak_count **)v7;
            unint64_t v59 = (std::__shared_weak_count *)*((void *)v7 + 1);
            if (v59) {
              atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v61 = v13[1];
            *uint64_t v13 = v60;
            v13[1] = v59;
            if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
            v7 += 16;
          }
        }
        else
        {
          unint64_t v15 = v12 + v9;
          if ((unint64_t)(v12 + v9) >> 60) {
            abort();
          }
          uint64_t v16 = v14 - *a2;
          if (v16 >> 3 > v15) {
            unint64_t v15 = v16 >> 3;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            if (v17 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            BOOL v18 = (char *)operator new(16 * v17);
          }
          else
          {
            BOOL v18 = 0;
          }
          unint64_t v72 = v18;
          unsigned int v27 = &v18[16 * v12];
          uint64_t v28 = 16 * v9;
          uint64_t v29 = &v27[16 * v9];
          int v30 = (std::__shared_weak_count **)(v27 + 8);
          do
          {
            *(v30 - 1) = 0;
            *int v30 = 0;
            uint64_t v31 = *(std::__shared_weak_count **)v7;
            uint64_t v32 = (std::__shared_weak_count *)*((void *)v7 + 1);
            if (v32)
            {
              atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v33 = *v30;
              *(v30 - 1) = v31;
              *int v30 = v32;
              if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            else
            {
              *(v30 - 1) = v31;
              *int v30 = 0;
            }
            v30 += 2;
            v7 += 16;
            v28 -= 16;
          }
          while (v28);
          unint64_t v34 = v17;
          int v35 = *a2;
          if (*a2 == (char *)v13)
          {
            long long v37 = v27;
          }
          else
          {
            int v36 = (char *)v13;
            long long v37 = v27;
            do
            {
              *((void *)v37 - 2) = 0;
              *((void *)v37 - 1) = 0;
              v37 -= 16;
              uint64_t v38 = *((void *)v36 - 2);
              uint64_t v39 = *((void *)v36 - 1);
              v36 -= 16;
              if (v39)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
                unint64_t v40 = (std::__shared_weak_count *)*((void *)v27 - 1);
                *((void *)v27 - 2) = v38;
                *((void *)v27 - 1) = v39;
                if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  std::__shared_weak_count::__release_weak(v40);
                }
              }
              else
              {
                *((void *)v27 - 2) = v38;
                *((void *)v27 - 1) = 0;
              }
              unsigned int v27 = v37;
            }
            while (v36 != v35);
          }
          unsigned int v41 = a2;
          uint64_t v42 = (std::__shared_weak_count **)a2[1];
          if (v42 == v13)
          {
            uint64_t i = this;
          }
          else
          {
            uint64_t i = this;
            do
            {
              *(void *)uint64_t v29 = 0;
              *((void *)v29 + 1) = 0;
              size_t v43 = *v13;
              unint64_t v44 = v13[1];
              if (v44)
              {
                atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v45 = (std::__shared_weak_count *)*((void *)v29 + 1);
                *(void *)uint64_t v29 = v43;
                *((void *)v29 + 1) = v44;
                if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
              else
              {
                *(void *)uint64_t v29 = v43;
                *((void *)v29 + 1) = 0;
              }
              v29 += 16;
              v13 += 2;
            }
            while (v13 != v42);
            unsigned int v41 = a2;
            uint64_t v13 = (std::__shared_weak_count **)a2[1];
          }
          long long v46 = *v41;
          *unsigned int v41 = v37;
          v41[1] = v29;
          v41[2] = &v72[16 * v34];
          while (v13 != (std::__shared_weak_count **)v46)
          {
            unsigned int v47 = *(v13 - 1);
            if (v47)
            {
              if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v13 -= 2;
          }
          if (v46) {
            operator delete(v46);
          }
        }
      }
LABEL_83:
      karo::Job::removeSubJob(i, v78);
      int v3 = v78 + 1;
      int v6 = v76;
      uint64_t v5 = v77;
LABEL_84:
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      if (!v5) {
        return;
      }
    }
  }
  if (!*(void *)karo::Job::getSubJob(this, 2))
  {
    unint64_t v62 = i;
    unsigned int v63 = *((_DWORD *)i + 98);
    if (v63 >= 0x1F) {
      char v64 = 31;
    }
    else {
      char v64 = v63;
    }
    int v65 = *((_DWORD *)v62 + 99);
    int v66 = *((_DWORD *)v62 + 100);
    LOBYTE(v79) = -1;
    BYTE1(v79) = v63;
    HIDWORD(v79) = ~(-1 << v64) - v65;
    LODWORD(v80) = v66;
    if (v62[33])
    {
      unint64_t v67 = v62[33];
      unint64_t v68 = v62[1];
      uint64_t v69 = atomic_load((unsigned int *)v62 + 4);
      uint64_t v81 = (*(uint64_t (**)(pthread_mutex_t *, pthread_mutex_t *, pthread_mutex_t **, uint64_t *, uint64_t))(v67->__sig + 16))(v67, v68, v62 + 33, &v79, v69);
      operator new();
    }
    operator new();
  }
}

void sub_1A251F740(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A251F774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *altitude::ProcessC3b::getInternalTextures(altitude::ProcessC3b *this)
{
  uint64_t v2 = (char *)*((void *)this + 34);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = (uint64_t **)v2;
        int v5 = *((_DWORD *)v2 + 8);
        if (v5 < 1) {
          break;
        }
        uint64_t v2 = (char *)*v4;
        int v3 = v4;
        if (!*v4) {
          goto LABEL_8;
        }
      }
      if ((v5 & 0x80000000) == 0) {
        break;
      }
      uint64_t v2 = (char *)v4[1];
      if (!v2)
      {
        int v3 = v4 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v3 = (uint64_t **)((char *)this + 272);
    uint64_t v4 = (uint64_t **)((char *)this + 272);
LABEL_8:
    int v6 = (char *)v4;
    uint64_t v4 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v4 + 8) = 0;
    v4[6] = 0;
    v4[7] = 0;
    v4[5] = 0;
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t *)v6;
    *int v3 = (uint64_t *)v4;
    uint64_t v7 = **((void **)this + 33);
    uint64_t v8 = (uint64_t *)v4;
    if (v7)
    {
      *((void *)this + 33) = v7;
      uint64_t v8 = *v3;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 34), v8);
    ++*((void *)this + 35);
  }
  return (char *)(v4 + 5);
}

void altitude::C3bLoadJob::createElement()
{
}

void sub_1A2521D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  if (a48 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t altitude::C3bLoadJob::createInnerCityBorderRenderable(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v172 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v171 = _D0;
  uint64_t v169 = 0;
  uint64_t v170 = 0;
  uint64_t v168 = 0;
  unsigned int v16 = *(_DWORD *)(a1 + 392);
  if (v16 >= 0x1F) {
    char v17 = 31;
  }
  else {
    char v17 = *(_DWORD *)(a1 + 392);
  }
  int v18 = ~(-1 << v17) - *(_DWORD *)(a1 + 396);
  int v19 = *(_DWORD *)(a1 + 400);
  v165[0] = -1;
  v165[1] = v16;
  int v166 = v18;
  int v167 = v19;
  double v20 = *(float *)(a4 + 108);
  double v21 = *(float *)(a4 + 112);
  double v22 = *(float *)(a4 + 116);
  double v23 = a3[4];
  double v24 = a3[5];
  double v25 = a3[6];
  double v26 = a3[3];
  double v27 = -(v26 * v22 - v24 * v20);
  double v28 = *a3 + v20;
  double v29 = -(v23 * v20 - v26 * v21);
  double v30 = a3[1] + v21;
  double v31 = -(v24 * v21 - v23 * v22) - (v24 * v21 - v23 * v22);
  double v32 = v27 + v27;
  double v33 = v29 + v29;
  long double v34 = v28 + v33 * v23 + v31 * v25 - v32 * v24;
  long double v35 = v30 - v33 * v26 + v31 * v24 + v32 * v25;
  long double v36 = v22 + v33 * v25 + a3[2] + v32 * v26 - v31 * v23;
  double v37 = sqrt(v34 * v34 + v35 * v35);
  double v38 = atan2(v36, v37 * 0.996647189);
  long double v39 = atan2(v35, v34);
  __double2 v40 = __sincos_stret(v38);
  v164[0] = atan2(v36 + v40.__sinval * v40.__sinval * 42841.3115 * v40.__sinval, v37 + v40.__cosval * v40.__cosval * -42697.6727 * v40.__cosval);
  v164[1] = v39;
  uint64_t v42 = *(void *)(a1 + 320);
  uint64_t v43 = *(void *)(v42 + 272);
  if (!v43) {
    goto LABEL_17;
  }
  uint64_t v44 = v42 + 272;
  uint64_t v45 = *(void *)(v42 + 272);
  do
  {
    int v46 = *(_DWORD *)(v45 + 32);
    BOOL v47 = v46 < 3;
    if (v46 >= 3) {
      uint64_t v48 = (uint64_t *)v45;
    }
    else {
      uint64_t v48 = (uint64_t *)(v45 + 8);
    }
    if (!v47) {
      uint64_t v44 = v45;
    }
    uint64_t v45 = *v48;
  }
  while (*v48);
  if (v44 == v42 + 272
    || *(int *)(v44 + 32) > 3
    || (v50 = v44 + 40, int32x4_t v49 = *(uint64_t **)(v44 + 40), *(uint64_t **)(v50 + 8) == v49))
  {
LABEL_17:
    uint64_t v162 = 0;
    __int16 v163 = 0;
  }
  else
  {
    uint64_t v52 = *v49;
    uint64_t v51 = (std::__shared_weak_count *)v49[1];
    uint64_t v162 = v52;
    __int16 v163 = v51;
    if (v51)
    {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v42 = *(void *)(a1 + 320);
      uint64_t v43 = *(void *)(v42 + 272);
    }
  }
  long long v155 = a6;
  int v156 = ExternalTexture;
  if (!v43) {
    goto LABEL_31;
  }
  uint64_t v53 = v42 + 272;
  uint64_t v54 = v42 + 272;
  do
  {
    int v55 = *(_DWORD *)(v43 + 32);
    BOOL v56 = v55 < 4;
    if (v55 >= 4) {
      __int16 v57 = (uint64_t *)v43;
    }
    else {
      __int16 v57 = (uint64_t *)(v43 + 8);
    }
    if (!v56) {
      uint64_t v54 = v43;
    }
    uint64_t v43 = *v57;
  }
  while (*v57);
  if (v54 == v53 || *(int *)(v54 + 32) > 4 || (int64_t v58 = *(uint64_t **)(v54 + 40), *(uint64_t **)(v54 + 48) == v58))
  {
LABEL_31:
    uint64_t v160 = 0;
    long long v161 = 0;
  }
  else
  {
    uint64_t v60 = *v58;
    unint64_t v59 = (std::__shared_weak_count *)v58[1];
    uint64_t v160 = v60;
    long long v161 = v59;
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v61 = *(void **)(a4 + 40);
  uint64_t v63 = v61[5];
  uint64_t v62 = v61[6];
  unint64_t v64 = v61[1];
  int v65 = (std::__shared_weak_count *)operator new(0xF8uLL);
  unint64_t v66 = v62 - v63;
  v65->__shared_owners_ = 0;
  v65->__shared_weak_owners_ = 0;
  v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5847A8;
  uint64_t v67 = ggl::BufferData::BufferData((uint64_t)&v65[1], 32, 0, 0, 7, v66 / v64);
  v65[9].__shared_weak_owners_ = (uint64_t)"/render/flyoverborder/vertexdata";
  v65[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::FlyoverBorder::vertexReflection;
  v65[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55C348;
  v65[9].__shared_owners_ = (uint64_t)&unk_1EF55C368;
  int v158 = (void *)v67;
  long long v159 = v65;
  double v68 = 1.0 / (double)(1 << v16);
  double v69 = v68 * (double)v19;
  double v70 = v68 * (double)((1 << v16) + ~v18);
  double v71 = v69 + v68;
  double v72 = v70 + v68;
  long double v73 = v69 * 6.28318531;
  long double v74 = exp(v70 * 6.28318531 + -3.14159265);
  double v75 = atan(v74) * 2.0 + -1.57079633;
  long double v76 = fmod(v73, 6.28318531);
  double v77 = fmod(v76 + 6.28318531, 6.28318531) + -3.14159265;
  __double2 v78 = __sincos_stret(v75);
  __double2 v79 = __sincos_stret(v77);
  long double v80 = exp(v72 * 6.28318531 + -3.14159265);
  double v81 = atan(v80) * 2.0 + -1.57079633;
  long double v82 = fmod(v71 * 6.28318531, 6.28318531);
  double v83 = fmod(v82 + 6.28318531, 6.28318531) + -3.14159265;
  __double2 v84 = __sincos_stret(v81);
  double sinval = v84.__sinval;
  double cosval = v84.__cosval;
  __double2 v89 = __sincos_stret(v83);
  v88.n128_f64[0] = v89.__cosval;
  v87.n128_f64[0] = v89.__sinval;
  double v91 = a3[4];
  double v90 = a3[5];
  double v92 = a3[6];
  double v94 = a3[2];
  double v93 = a3[3];
  double v96 = *a3;
  double v95 = a3[1];
  uint64_t v97 = *(void *)(a4 + 40);
  unint64_t v98 = *(void *)(v97 + 8) * (v66 / v64);
  if ((*(unsigned char *)(v97 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    v157[0] = &v173;
    uint64_t v174 = v157;
    double v154 = v92;
    double v99 = v96;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v174, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    double v96 = v99;
    v88.n128_u64[0] = *(void *)&v89.__cosval;
    v87.n128_u64[0] = *(void *)&v89.__sinval;
    double v92 = v154;
    double sinval = v84.__sinval;
    double cosval = v84.__cosval;
  }
  if (v98) {
    uint64_t v100 = *(void *)(v97 + 72);
  }
  else {
    uint64_t v100 = 0;
  }
  double v101 = v158;
  unint64_t v102 = v158[6] - v158[5];
  unint64_t v103 = v102 / v158[1] * v158[1];
  unint64_t v104 = v102 % v158[1];
  if (v102 == v104)
  {
    uint64_t v105 = 0;
    if (v64 > v66) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v105 = v158[9];
    if (v64 > v66) {
      goto LABEL_44;
    }
  }
  double v106 = sqrt(1.0 - v78.__sinval * v78.__sinval * 0.00669437999);
  double v107 = -(v96 * v90 - v94 * v93);
  double v108 = -(v95 * v93 - v96 * v91);
  double v109 = -(v94 * v91 - v95 * v90) - (v94 * v91 - v95 * v90);
  double v110 = 6378137.0 / v106 * v78.__cosval * v79.__cosval;
  double v111 = v78.__sinval * 0.99330562 * (6378137.0 / v106);
  double v112 = 6378137.0 / sqrt(1.0 - sinval * sinval * 0.00669437999);
  double v113 = v107 + v107;
  double v114 = v108 + v108;
  double v115 = v95 - v109 * v90;
  double v116 = 6378137.0 / v106 * v78.__cosval * v79.__sinval;
  double v117 = v94 + v109 * v91 + v114 * v92;
  double v118 = v112 * cosval * v88.n128_f64[0];
  double v119 = sinval * 0.99330562 * v112;
  double v120 = v115 + v113 * v92 + v114 * v93;
  double v121 = -(v117 - v113 * v93);
  double v122 = v112 * cosval * v87.n128_f64[0];
  double v123 = -(v111 * v91 - v116 * v90) - (v111 * v91 - v116 * v90);
  double v124 = -(v110 * v90 - v111 * v93) - (v110 * v90 - v111 * v93);
  double v125 = -(v116 * v93 - v110 * v91) - (v116 * v93 - v110 * v91);
  double v126 = v116 - v120 + v124 * v92 + v125 * v93;
  double v127 = v121 + v111 + v123 * v91 + v125 * v92;
  double v128 = -(v119 * v91 - v122 * v90) - (v119 * v91 - v122 * v90);
  double v129 = -(v118 * v90 - v119 * v93) - (v118 * v90 - v119 * v93);
  double v130 = v121 + v119;
  v87.n128_f64[0] = v126 - v123 * v90;
  v88.n128_f64[0] = v127 - v124 * v93;
  double v131 = -(v122 * v93 - v118 * v91) - (v122 * v93 - v118 * v91);
  double v132 = v130 + v128 * v91 + v131 * v92 - (v88.n128_f64[0] + v129 * v93);
  *(float *)&double v131 = v122 - v120 + v129 * v92 + v131 * v93 - (v87.n128_f64[0] + v128 * v90);
  float v133 = v132;
  double v134 = 1.0 / *(float *)&v131;
  int v135 = (float *)(v100 + 16);
  int v136 = (float *)(v105 + 16);
  unsigned int v137 = 1;
  do
  {
    float v138 = *(v135 - 3);
    float v139 = fmin(fmax((v138 - v87.n128_f64[0]) * v134, 0.0), 1.0);
    float v140 = *(v135 - 2);
    float v141 = fmin(fmax((v140 - v88.n128_f64[0]) * (1.0 / v133), 0.0), 1.0);
    *(v136 - 4) = *(v135 - 4);
    *(v136 - 3) = v138;
    *(v136 - 2) = v140;
    *(v136 - 1) = 1.0;
    *int v136 = v139;
    v136[1] = v141;
    v136[2] = *v135;
    v136[3] = v135[1];
    BOOL v47 = v66 / v64 > v137++;
    v135 += 8;
    v136 += 8;
  }
  while (v47);
LABEL_44:
  if (v105 && v102 != v104)
  {
    if (v101[8] > v103) {
      unint64_t v103 = v101[8];
    }
    v101[7] = 0;
    v101[8] = v103;
  }
  BOOL v142 = v159;
  if (v159) {
    atomic_fetch_add_explicit(&v159->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v143 = *(std::__shared_weak_count **)(a4 + 48);
  *(void *)(a4 + 40) = v101;
  *(void *)(a4 + 48) = v142;
  if (v143 && !atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128, __n128))v143->__on_zero_shared)(v143, v87, v88);
    std::__shared_weak_count::__release_weak(v143);
  }
  if (*(unsigned char *)a4 != 6)
  {
    unsigned int v144 = *(_DWORD *)(a4 + 56);
    uint64_t v145 = *v155;
    QuadTile v146 = (std::__shared_weak_count *)v155[1];
    float v147 = 1000000.0 / (float)(1 << *(_DWORD *)(a1 + 392));
    v157[6] = *v155;
    v157[7] = v146;
    if (v146) {
      atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    altitude::C3bLoadJob::updateHeightsFromDtm(a1, (uint64_t *)(a4 + 40), v144, a3, v145, v146, v147);
    if (v146 && !atomic_fetch_add(&v146->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  if (v160) {
    int v148 = v156;
  }
  else {
    int v148 = 0;
  }
  if (v148 == 1)
  {
    altitude::util::computeBounds((uint64_t)v157, (uint64_t *)(a4 + 40), (unint64_t *)(a4 + 64));
    operator new();
  }
  __int16 v149 = v159;
  if (v159 && !atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
    std::__shared_weak_count::__release_weak(v149);
  }
  int v150 = v161;
  if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
  }
  __int16 v151 = v163;
  if (v163 && !atomic_fetch_add(&v163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
    std::__shared_weak_count::__release_weak(v151);
  }
  int v152 = v169;
  if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
  }
  return 0;
}

void sub_1A2522A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a30);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a32);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a34);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a36);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v36 - 208);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::getExternalTexture(uint64_t a1, double *a2, uint64_t *a3, void *a4, void *a5, float *a6, float *a7, uint64_t a8, uint64_t a9)
{
  v57[2] = *MEMORY[0x1E4F143B8];
  uint64_t v54 = 0;
  int v55 = 0;
  uint64_t v9 = *a3;
  if (a3[1] == *a3)
  {
LABEL_33:
    uint64_t v36 = 0;
    double v37 = v55;
    if (v55) {
      goto LABEL_41;
    }
    return v36;
  }
  unint64_t v13 = 0;
  unsigned int v14 = 1;
  do
  {
    uint64_t v15 = *(void *)(v9 + 16 * v13);
    uint64_t v16 = *(void *)(v15 + 8);
    char v17 = *(std::__shared_weak_count **)(v15 + 16);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v18) = 1;
    if (!v16 || *(unsigned __int8 *)(v16 + 24) != 255) {
      goto LABEL_22;
    }
    int v19 = 1 << *(unsigned char *)(v16 + 25);
    double v20 = a2[1];
    long double v21 = tan(*a2 * 0.5 + 0.785398163);
    if (v19 + ~vcvtmd_s64_f64((log(v21) * 0.159154943 + 0.5) * (double)v19) != *(_DWORD *)(v16 + 28))
    {
      LOBYTE(v18) = 1;
LABEL_22:
      if (!v17) {
        goto LABEL_25;
      }
LABEL_23:
      if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      goto LABEL_25;
    }
    if (*(_DWORD *)(v16 + 32) != vcvtmd_s64_f64((v20 * 0.159154943 + 0.5) * (double)v19))
    {
      LOBYTE(v18) = 1;
      if (!v17) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v22 = v55;
    uint64_t v54 = v16;
    int v55 = v17;
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    double v23 = (uint64_t *)(*a3 + 16 * v13);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    int v18 = (std::__shared_weak_count *)a5[1];
    *a5 = v25;
    a5[1] = v24;
    if (!v18) {
      goto LABEL_22;
    }
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    LOBYTE(v18) = 0;
    if (v17) {
      goto LABEL_23;
    }
LABEL_25:
    if ((v18 & 1) == 0) {
      break;
    }
    unint64_t v13 = v14;
    uint64_t v9 = *a3;
    ++v14;
  }
  while (v13 < (a3[1] - *a3) >> 4);
  uint64_t v26 = v54;
  if (!v54) {
    goto LABEL_33;
  }
  *a4 = *(void *)(v54 + 48);
  int v27 = *(unsigned __int8 *)(a1 + 1);
  int v28 = *(unsigned __int8 *)(v26 + 25);
  char v29 = v27 - v28;
  if (v27 <= v28)
  {
    int v32 = *(_DWORD *)(v26 + 28);
    unsigned int v31 = *(_DWORD *)(v26 + 32);
    int v30 = -1 << v28;
  }
  else
  {
    int v30 = -1 << v28;
    int v32 = *(_DWORD *)(v26 + 28);
    unsigned int v31 = *(_DWORD *)(v26 + 32);
    float v33 = 1.0 / (float)(1 << v29);
    float v34 = (float)(~(-1 << v27) - *(_DWORD *)(a1 + 4) + ((v32 + (-1 << v28) + 1) << v29));
    float v35 = v33 * (float)(*(_DWORD *)(a1 + 8) - (v31 << v29));
    *a6 = v33;
    a6[1] = v33;
    *a7 = v35;
    a7[1] = v33 * v34;
  }
  *(_DWORD *)BOOL v56 = 7;
  memset(&v56[4], 0, 28);
  v57[0] = altitude::TileKey::getGEOTileKey((unsigned int *)v56, a9);
  v57[1] = v38;
  long double v39 = [MEMORY[0x1E4F64918] modernManager];
  int v40 = [v39 versionForTileKey:v57];

  *(void *)&long long v52 = 7;
  DWORD2(v52) = 0;
  HIDWORD(v52) = v40;
  LODWORD(v53) = v28;
  DWORD1(v53) = ~v30 - v32;
  *((void *)&v53 + 1) = v31;
  unsigned int v41 = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>(a8, v56, (unsigned int *)&v52);
  if (!*v41)
  {
    uint64_t v42 = v41;
    uint64_t v43 = (char *)operator new(0x40uLL);
    *(_OWORD *)(v43 + 28) = v52;
    *(_OWORD *)(v43 + 44) = v53;
    uint64_t v44 = *(void *)v56;
    *(void *)uint64_t v43 = 0;
    *((void *)v43 + 1) = 0;
    *((void *)v43 + 2) = v44;
    *uint64_t v42 = (uint64_t)v43;
    uint64_t v45 = **(void **)a8;
    if (v45)
    {
      *(void *)a8 = v45;
      uint64_t v43 = (char *)*v42;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a8 + 8), (uint64_t *)v43);
    ++*(void *)(a8 + 16);
  }
  uint64_t v36 = 1;
  double v37 = v55;
  if (v55)
  {
LABEL_41:
    if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  return v36;
}

void sub_1A2522EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5847A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverBorder::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5847A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *altitude::C3bLoadJob::updateHeightsFromDtm(uint64_t a1, uint64_t *a2, unsigned int a3, double *a4, uint64_t a5, std::__shared_weak_count *a6, float a7)
{
  uint64_t v8 = a1;
  v221[2] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a2;
  uint64_t v10 = **(void **)(*a2 + 216);
  uint64_t v11 = *(void *)(v10 + 16);
  BOOL v12 = v11 == 2;
  BOOL v13 = v11 == 3;
  if (v11)
  {
    uint64_t v14 = 0;
    do
    {
      if (v12
        && (uint64_t v15 = *(void *)(v10 + 8) + v14 * 8,
            *(unsigned __int8 *)(v15 + 8) == LOBYTE((&ggl::CommonMesh::bufferPos4UVFieldsReflection)[v14 + 1]))
        && *(char **)(v15 + 24) == (&ggl::CommonMesh::bufferPos4UVFieldsReflection)[v14 + 3])
      {
        BOOL v12 = 1;
        if (!v13) {
          goto LABEL_3;
        }
      }
      else
      {
        BOOL v12 = 0;
        if (!v13) {
          goto LABEL_3;
        }
      }
      uint64_t v16 = *(void *)(v10 + 8) + v14 * 8;
      if (*(unsigned __int8 *)(v16 + 8) == LOBYTE((&ggl::TileBaseSurface::p3T2T2BufferFieldsReflection)[v14 + 1])
        && *(char **)(v16 + 24) == (&ggl::TileBaseSurface::p3T2T2BufferFieldsReflection)[v14 + 3])
      {
        BOOL v13 = 1;
        goto LABEL_4;
      }
LABEL_3:
      BOOL v13 = 0;
LABEL_4:
      v14 += 4;
      --v11;
    }
    while (v11);
  }
  if (v12)
  {
    unint64_t v17 = *(void *)(a1 + 392);
    uint64_t v18 = *(void *)(a1 + 400);
    if (a6)
    {
      atomic_fetch_add_explicit(&a6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = *a2;
    }
    unint64_t v19 = HIDWORD(v17);
    long double v20 = a4[2];
    double v21 = sqrt(*a4 * *a4 + a4[1] * a4[1]);
    double v22 = atan2(v20, v21 * 0.996647189);
    __double2 v23 = __sincos_stret(v22);
    double v24 = atan2(v20 + v23.__sinval * v23.__sinval * 42841.3115 * v23.__sinval, v21 + v23.__cosval * v23.__cosval * -42697.6727 * v23.__cosval);
    __double2 v30 = __sincos_stret(v24);
    v31.n128_u32[1] = -1082430576;
    uint64_t v32 = *(void *)(a1 + 352);
    float v33 = *(_DWORD **)(v32 + 16);
    unsigned int v205 = a3;
    if (v33)
    {
      float v200 = (float)(*v33 - 1);
      float v34 = (float)(v33[1] - 1);
    }
    else
    {
      float v34 = 4295000000.0;
      float v200 = 4295000000.0;
    }
    float v203 = v34;
    double v53 = sqrt(v30.__sinval * v30.__sinval * -0.00669437999 + 1.0);
    int v54 = v17 - *(_DWORD *)(v32 + 136);
    int v55 = 1 << (v17 - *(unsigned char *)(v32 + 136));
    int v56 = *(_DWORD *)(v32 + 144) << (v17 - *(unsigned char *)(v32 + 136));
    int v57 = *(_DWORD *)(v32 + 140) << v54;
    unint64_t v58 = *(void *)(v9 + 48) - *(void *)(v9 + 40);
    unint64_t v59 = *(void *)(v9 + 8);
    unint64_t v60 = v58 / v59;
    uint64_t v218 = 0;
    *(_OWORD *)uint64x2_t v216 = 0uLL;
    if ((*(unsigned char *)(v9 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      v221[0] = &v219;
      *(void *)long long buf = v221;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    double v61 = -6378137.0 / v53;
    unsigned int v62 = v18 - v56;
    v63.i64[0] = 0;
    double v64 = v21 / v30.__cosval;
    if (v59 * (v58 / v59)) {
      uint64_t v65 = *(void *)(v9 + 72);
    }
    else {
      uint64_t v65 = 0;
    }
    v63.i64[1] = v9;
    float v66 = 1.0 / (float)v55;
    float v67 = v64 + v61;
    float v68 = v66 * (float)v62;
    float v69 = v66 * (float)(v19 - v57);
    *(float32x4_t *)uint64x2_t v216 = v63;
    *(void *)&v216[16] = 0;
    *(void *)&v216[24] = v59 * (v58 / v59);
    uint64_t v218 = v65;
    __int16 v217 = 2;
    if (a5)
    {
      float v70 = v200;
      if (v59 <= v58)
      {
        uint64_t v71 = 0;
        unint64_t v72 = 0;
        unint64_t v73 = v205;
        if (v60 <= 1) {
          uint64_t v74 = 1;
        }
        else {
          uint64_t v74 = v60;
        }
        v25.n128_u32[1] = 1072672276;
        float v75 = a7;
        while (1)
        {
          uint64_t v77 = v65 + v71;
          float v78 = *(float *)(v65 + v71);
          v26.n128_u64[0] = *(void *)(v65 + v71 + 4);
          v26.n128_u32[2] = *(_DWORD *)(v65 + v71 + 12);
          LODWORD(v221[0]) = 0;
          uint64_t v79 = *(void *)(a1 + 352);
          v25.n128_f32[0] = (float)(v68 + (float)(*(float *)(v65 + v71 + 16) * v66)) * v70;
          *(float *)&double v61 = v203;
          v31.n128_f32[0] = (float)(v69 + (float)(*(float *)(v65 + v71 + 20) * v66)) * v203;
          int v80 = *(_DWORD *)(v79 + 132);
          __n128 v207 = v26;
          if (v80 == 16)
          {
            karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v79, (float *)v221, v25, v31, v61, v26.n128_f64[0], *(double *)v63.i64, *(double *)v27.i64, *(double *)v28.i64, v29);
          }
          else if (v80 == 8)
          {
            karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v79, (float *)v221, v25, v31, v61, v26.n128_f64[0], *(double *)v63.i64, *(double *)v27.i64, *(double *)v28.i64, v29);
          }
          else
          {
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
            }
            double v83 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1A1780000, v83, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
            }
          }
          int v84 = *(_DWORD *)(a5 + 16);
          if (v84 == 1 || v84 == 4) {
            break;
          }
          v25.n128_u32[0] = 0;
          if (v84 == 6) {
            v25.n128_f32[0] = karo::media::Image::sample<float,unsigned char,float>(a5, *(float *)(v77 + 16), *(float *)(v77 + 20), v81, v82, *(double *)v63.i64, v27.f32[0], v28.f32[0])* 0.0039216;
          }
          double v29 = 0.0;
LABEL_38:
          v26.n128_u32[3] = v207.n128_u32[3];
          HIDWORD(v61) = 1072672276;
          v31.n128_u32[1] = 1065646817;
          v25.n128_f64[0] = v25.n128_f32[0] * 0.99 + 0.01;
          v25.n128_f32[0] = v25.n128_f64[0];
          v31.n128_f32[0] = 1.0 - v25.n128_f32[0];
          v25.n128_f32[0] = (float)(v78 * v25.n128_f32[0])
                          + (float)((float)(1.0 - v25.n128_f32[0]) * (float)(*(float *)v221 - v67));
          v31.n128_f32[0] = v31.n128_f32[0] * v75;
          if (v72 < v73) {
            v31.n128_f32[0] = 0.0;
          }
          uint64_t v76 = v65 + v71;
          *(float *)uint64_t v76 = v25.n128_f32[0] - v31.n128_f32[0];
          *(void *)(v76 + 4) = v207.n128_u64[0];
          *(_DWORD *)(v65 + v71 + 12) = v207.n128_u32[2];
          ++v72;
          v71 += 32;
          if (v74 == v72) {
            goto LABEL_80;
          }
        }
        float v86 = *(float *)(v77 + 16);
        float v87 = *(float *)(v77 + 20);
        __n128 v88 = *(uint64_t **)(*(void *)(a5 + 8) + 16);
        uint64_t v89 = *v88;
        double v90 = (std::__shared_weak_count *)v88[1];
        double v29 = 0.0;
        if (v90)
        {
          atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v91 = *(void *)(v89 + 8);
          if (atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            double v92 = *(int **)(a5 + 8);
            if (v92)
            {
LABEL_58:
              int v93 = *v92;
              LODWORD(v92) = v92[1];
LABEL_63:
              float v94 = v86 * (float)(v93 - 1);
              int v95 = (int)v94;
              int v96 = v93 - 2;
              float v97 = v94 - (float)(int)v94;
              if (v95 < 0) {
                float v97 = 0.0;
              }
              BOOL v98 = v96 < v95;
              if (v96 >= v95) {
                int v99 = v95 & ~(v95 >> 31);
              }
              else {
                int v99 = v93 - 2;
              }
              if (v98) {
                float v97 = 1.0;
              }
              float v100 = v87 * (float)((int)v92 - 1);
              int v101 = (int)v100;
              _S1 = v100 - truncf(v100);
              int v103 = v92 - 2;
              if (v101 < 0) {
                _S1 = 0.0;
              }
              if (v103 < v101) {
                _S1 = 1.0;
              }
              else {
                int v103 = v101 & ~(v101 >> 31);
              }
              int v104 = v93 - v103;
              uint64_t v105 = (_DWORD *)(v91 + 4 * (v99 + (uint64_t)((v104 - 1) * v93)));
              double v106 = (__int32 *)(v91 + 4 * (v99 + (uint64_t)((v104 - 2) * v93)));
              LODWORD(v82) = *v105;
              v63.i32[0] = v105[1];
              float32x4_t v63 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v63.f32)));
              v27.i32[0] = *v106;
              v28.i32[0] = v106[1];
              float32x4_t v27 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v27.f32)));
              float32x4_t v28 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v28.f32)));
              _Q2 = vsubq_f32(vmlaq_n_f32(vmulq_n_f32(v27, 1.0 - v97), v28, v97), vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v82))), 1.0 - v97), v63, v97));
              __asm { FMLA            S0, S1, V2.S[2] }
              v25.n128_f32[0] = _S0 * 0.0039216;
              uint64_t v65 = v218;
              float v70 = v200;
              float v75 = a7;
              goto LABEL_38;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
            double v29 = 0.0;
            double v92 = *(int **)(a5 + 8);
            if (v92) {
              goto LABEL_58;
            }
          }
        }
        else
        {
          uint64_t v91 = *(void *)(v89 + 8);
          double v92 = *(int **)(a5 + 8);
          if (v92) {
            goto LABEL_58;
          }
        }
        int v93 = 0;
        goto LABEL_63;
      }
    }
    else if (v59 <= v58)
    {
      if (v60 <= 1) {
        uint64_t v129 = 1;
      }
      else {
        uint64_t v129 = v58 / v59;
      }
      uint64_t v130 = v65;
      do
      {
        float v131 = *(float *)v130;
        v25.n128_u64[0] = *(void *)(v130 + 4);
        v25.n128_u32[2] = *(_DWORD *)(v130 + 12);
        __n128 v208 = v25;
        LODWORD(v221[0]) = 0;
        uint64_t v132 = *(void *)(a1 + 352);
        v25.n128_f32[0] = (float)(v68 + (float)(*(float *)(v130 + 16) * v66)) * v200;
        *(float *)&double v61 = v203;
        v31.n128_f32[0] = (float)(v69 + (float)(*(float *)(v130 + 20) * v66)) * v203;
        int v133 = *(_DWORD *)(v132 + 132);
        if (v133 == 16)
        {
          karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v132, (float *)v221, v25, v31, v61, v64, *(double *)v63.i64, *(double *)v27.i64, *(double *)v28.i64, v29);
        }
        else if (v133 == 8)
        {
          karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v132, (float *)v221, v25, v31, v61, v64, *(double *)v63.i64, *(double *)v27.i64, *(double *)v28.i64, v29);
        }
        else
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          double v134 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1A1780000, v134, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
          }
        }
        *(float *)uint64_t v130 = (float)(v131 - v67) + *(float *)v221;
        v25.n128_u32[3] = v208.n128_u32[3];
        *(_DWORD *)(v130 + 12) = v208.n128_u32[2];
        *(void *)(v130 + 4) = v208.n128_u64[0];
        v130 += 32;
        --v129;
      }
      while (v129);
LABEL_80:
      if (*(void *)&v216[24] != *(void *)&v216[16])
      {
        uint64_t v112 = *(void *)&v216[8];
        if (*(void *)v216 && *(unsigned char *)(*(void *)&v216[8] + 17) != 2) {
          (*(void (**)(void))(**(void **)v216 + 64))();
        }
        if ((_BYTE)v217 && !HIBYTE(v217))
        {
          unint64_t v114 = *(void *)(*(void *)&v216[8] + 56);
          unint64_t v113 = *(void *)(*(void *)&v216[8] + 64);
          if (v113 == v114) {
            unint64_t v114 = *(void *)(*(void *)&v216[8] + 80) - *(void *)(*(void *)&v216[8] + 72);
          }
          if (*(void *)&v216[16] < v114) {
            unint64_t v114 = *(void *)&v216[16];
          }
          if (v113 <= *(void *)&v216[24]) {
            unint64_t v113 = *(void *)&v216[24];
          }
          if (v113 == v114) {
            unint64_t v113 = v114 + *(void *)(*(void *)&v216[8] + 80) - *(void *)(*(void *)&v216[8] + 72);
          }
          *(void *)(*(void *)&v216[8] + 56) = v114;
          *(void *)(v112 + 64) = v113;
        }
      }
LABEL_95:
      double v115 = a6;
      uint64_t v8 = a1;
      if (!a6) {
        goto LABEL_185;
      }
      goto LABEL_183;
    }
    if (!v65) {
      goto LABEL_95;
    }
    goto LABEL_80;
  }
  if (!v13) {
    goto LABEL_185;
  }
  unint64_t v35 = *(void *)(a1 + 392);
  uint64_t v36 = *(void *)(a1 + 400);
  if (a6)
  {
    atomic_fetch_add_explicit(&a6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = *a2;
  }
  unint64_t v37 = HIDWORD(v35);
  long double v38 = a4[2];
  double v39 = sqrt(*a4 * *a4 + a4[1] * a4[1]);
  double v40 = atan2(v38, v39 * 0.996647189);
  __double2 v41 = __sincos_stret(v40);
  double v42 = atan2(v38 + v41.__sinval * v41.__sinval * 42841.3115 * v41.__sinval, v39 + v41.__cosval * v41.__cosval * -42697.6727 * v41.__cosval);
  __double2 v48 = __sincos_stret(v42);
  v49.n128_u32[1] = -1082430576;
  uint64_t v50 = *(void *)(a1 + 352);
  uint64_t v51 = *(_DWORD **)(v50 + 16);
  unsigned int v206 = a3;
  if (v51)
  {
    float v201 = (float)(*v51 - 1);
    float v52 = (float)(v51[1] - 1);
  }
  else
  {
    float v52 = 4295000000.0;
    float v201 = 4295000000.0;
  }
  float v204 = v52;
  double v116 = sqrt(v48.__sinval * v48.__sinval * -0.00669437999 + 1.0);
  int v117 = v35 - *(_DWORD *)(v50 + 136);
  int v118 = 1 << (v35 - *(unsigned char *)(v50 + 136));
  int v119 = *(_DWORD *)(v50 + 144) << (v35 - *(unsigned char *)(v50 + 136));
  int v120 = *(_DWORD *)(v50 + 140) << v117;
  unint64_t v121 = *(void *)(v9 + 48) - *(void *)(v9 + 40);
  unint64_t v122 = *(void *)(v9 + 8);
  unint64_t v123 = v121 / v122;
  uint64_t v218 = 0;
  *(_OWORD *)uint64x2_t v216 = 0uLL;
  if ((*(unsigned char *)(v9 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    v221[0] = &v219;
    *(void *)long long buf = v221;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  double v124 = -6378137.0 / v116;
  unsigned int v125 = v36 - v119;
  v126.i64[0] = 0;
  double v127 = v39 / v48.__cosval;
  if (v122 * (v121 / v122)) {
    uint64_t v128 = *(void *)(v9 + 72);
  }
  else {
    uint64_t v128 = 0;
  }
  v126.i64[1] = v9;
  float v135 = 1.0 / (float)v118;
  float v136 = v127 + v124;
  float v137 = v135 * (float)v125;
  float v138 = v135 * (float)(v37 - v120);
  *(float32x4_t *)uint64x2_t v216 = v126;
  *(void *)&v216[16] = 0;
  *(void *)&v216[24] = v122 * (v121 / v122);
  uint64_t v218 = v128;
  __int16 v217 = 2;
  if (a5)
  {
    float v139 = v201;
    if (v122 <= v121)
    {
      uint64_t v140 = 0;
      unint64_t v141 = 0;
      unint64_t v142 = v206;
      if (v123 <= 1) {
        uint64_t v143 = 1;
      }
      else {
        uint64_t v143 = v123;
      }
      v43.n128_u32[1] = 1072672276;
      float v144 = a7;
      while (1)
      {
        uint64_t v146 = v128 + v140;
        float v147 = *(float *)(v128 + v140);
        v44.__double sinval = *(double *)(v128 + v140 + 4);
        LODWORD(v44.__cosval) = *(_DWORD *)(v128 + v140 + 12);
        LODWORD(v221[0]) = 0;
        uint64_t v148 = *(void *)(a1 + 352);
        v43.n128_f32[0] = (float)(v137 + (float)(*(float *)(v128 + v140 + 16) * v135)) * v139;
        *(float *)&double v124 = v204;
        v49.n128_f32[0] = (float)(v138 + (float)(*(float *)(v128 + v140 + 20) * v135)) * v204;
        int v149 = *(_DWORD *)(v148 + 132);
        __double2 v209 = v44;
        if (v149 == 16)
        {
          karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v148, (float *)v221, v43, v49, v124, v44.__sinval, *(double *)v126.i64, *(double *)v45.i64, *(double *)v46.i64, v47);
        }
        else if (v149 == 8)
        {
          karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v148, (float *)v221, v43, v49, v124, v44.__sinval, *(double *)v126.i64, *(double *)v45.i64, *(double *)v46.i64, v47);
        }
        else
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          int v152 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1A1780000, v152, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
          }
        }
        int v153 = *(_DWORD *)(a5 + 16);
        if (v153 == 1 || v153 == 4) {
          break;
        }
        v43.n128_u32[0] = 0;
        if (v153 == 6) {
          v43.n128_f32[0] = karo::media::Image::sample<float,unsigned char,float>(a5, *(float *)(v146 + 16), *(float *)(v146 + 20), v150, v151, *(double *)v126.i64, v45.f32[0], v46.f32[0])* 0.0039216;
        }
        double v47 = 0.0;
LABEL_125:
        HIDWORD(v44.__cosval) = HIDWORD(v209.__cosval);
        HIDWORD(v124) = 1072672276;
        v49.n128_u32[1] = 1065646817;
        v43.n128_f64[0] = v43.n128_f32[0] * 0.99 + 0.01;
        v43.n128_f32[0] = v43.n128_f64[0];
        v49.n128_f32[0] = 1.0 - v43.n128_f32[0];
        v43.n128_f32[0] = (float)(v147 * v43.n128_f32[0])
                        + (float)((float)(1.0 - v43.n128_f32[0]) * (float)(*(float *)v221 - v136));
        v49.n128_f32[0] = v49.n128_f32[0] * v144;
        if (v141 < v142) {
          v49.n128_f32[0] = 0.0;
        }
        uint64_t v145 = v128 + v140;
        *(float *)uint64_t v145 = v43.n128_f32[0] - v49.n128_f32[0];
        *(double *)(v145 + 4) = v209.__sinval;
        *(_DWORD *)(v128 + v140 + 12) = LODWORD(v209.__cosval);
        ++v141;
        v140 += 32;
        if (v143 == v141) {
          goto LABEL_167;
        }
      }
      float v155 = *(float *)(v146 + 16);
      float v156 = *(float *)(v146 + 20);
      uint64_t v157 = *(uint64_t **)(*(void *)(a5 + 8) + 16);
      uint64_t v158 = *v157;
      long long v159 = (std::__shared_weak_count *)v157[1];
      double v47 = 0.0;
      if (v159)
      {
        atomic_fetch_add_explicit(&v159->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v160 = *(void *)(v158 + 8);
        if (atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v161 = *(int **)(a5 + 8);
          if (v161)
          {
LABEL_145:
            int v162 = *v161;
            LODWORD(v161) = v161[1];
LABEL_150:
            float v163 = v155 * (float)(v162 - 1);
            int v164 = (int)v163;
            int v165 = v162 - 2;
            float v166 = v163 - (float)(int)v163;
            if (v164 < 0) {
              float v166 = 0.0;
            }
            BOOL v167 = v165 < v164;
            if (v165 >= v164) {
              int v168 = v164 & ~(v164 >> 31);
            }
            else {
              int v168 = v162 - 2;
            }
            if (v167) {
              float v166 = 1.0;
            }
            float v169 = v156 * (float)((int)v161 - 1);
            int v170 = (int)v169;
            _S1 = v169 - truncf(v169);
            int v172 = v161 - 2;
            if (v170 < 0) {
              _S1 = 0.0;
            }
            if (v172 < v170) {
              _S1 = 1.0;
            }
            else {
              int v172 = v170 & ~(v170 >> 31);
            }
            int v173 = v162 - v172;
            uint64_t v174 = (_DWORD *)(v160 + 4 * (v168 + (uint64_t)((v173 - 1) * v162)));
            uint64_t v175 = (__int32 *)(v160 + 4 * (v168 + (uint64_t)((v173 - 2) * v162)));
            LODWORD(v151) = *v174;
            v126.i32[0] = v174[1];
            float32x4_t v126 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v126.f32)));
            v45.i32[0] = *v175;
            v46.i32[0] = v175[1];
            float32x4_t v45 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v45.f32)));
            float32x4_t v46 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v46.f32)));
            _Q2 = vsubq_f32(vmlaq_n_f32(vmulq_n_f32(v45, 1.0 - v166), v46, v166), vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v151))), 1.0 - v166), v126, v166));
            __asm { FMLA            S0, S1, V2.S[2] }
            v43.n128_f32[0] = _S0 * 0.0039216;
            uint64_t v128 = v218;
            float v139 = v201;
            float v144 = a7;
            goto LABEL_125;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
          double v47 = 0.0;
          long long v161 = *(int **)(a5 + 8);
          if (v161) {
            goto LABEL_145;
          }
        }
      }
      else
      {
        uint64_t v160 = *(void *)(v158 + 8);
        long long v161 = *(int **)(a5 + 8);
        if (v161) {
          goto LABEL_145;
        }
      }
      int v162 = 0;
      goto LABEL_150;
    }
LABEL_166:
    if (!v128) {
      goto LABEL_182;
    }
    goto LABEL_167;
  }
  if (v122 > v121) {
    goto LABEL_166;
  }
  if (v123 <= 1) {
    uint64_t v194 = 1;
  }
  else {
    uint64_t v194 = v121 / v122;
  }
  uint64_t v195 = v128;
  do
  {
    float v196 = *(float *)v195;
    v43.n128_u64[0] = *(void *)(v195 + 4);
    v43.n128_u32[2] = *(_DWORD *)(v195 + 12);
    __n128 v210 = v43;
    LODWORD(v221[0]) = 0;
    uint64_t v197 = *(void *)(a1 + 352);
    v43.n128_f32[0] = (float)(v137 + (float)(*(float *)(v195 + 16) * v135)) * v201;
    *(float *)&double v124 = v204;
    v49.n128_f32[0] = (float)(v138 + (float)(*(float *)(v195 + 20) * v135)) * v204;
    int v198 = *(_DWORD *)(v197 + 132);
    if (v198 == 16)
    {
      karo::media::DigitalTerrainModel::sampleT<float,unsigned short>(v197, (float *)v221, v43, v49, v124, v127, *(double *)v126.i64, *(double *)v45.i64, *(double *)v46.i64, v47);
    }
    else if (v198 == 8)
    {
      karo::media::DigitalTerrainModel::sampleT<float,unsigned char>(v197, (float *)v221, v43, v49, v124, v127, *(double *)v126.i64, *(double *)v45.i64, *(double *)v46.i64, v47);
    }
    else
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      int64x2_t v199 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v199, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1A1780000, v199, OS_LOG_TYPE_ERROR, "Unknown DTM format", buf, 2u);
      }
    }
    *(float *)uint64_t v195 = (float)(v196 - v136) + *(float *)v221;
    v43.n128_u32[3] = v210.n128_u32[3];
    *(_DWORD *)(v195 + 12) = v210.n128_u32[2];
    *(void *)(v195 + 4) = v210.n128_u64[0];
    v195 += 32;
    --v194;
  }
  while (v194);
LABEL_167:
  if (*(void *)&v216[24] != *(void *)&v216[16])
  {
    uint64_t v178 = *(void *)&v216[8];
    if (*(void *)v216 && *(unsigned char *)(*(void *)&v216[8] + 17) != 2) {
      (*(void (**)(void))(**(void **)v216 + 64))();
    }
    if ((_BYTE)v217 && !HIBYTE(v217))
    {
      unint64_t v180 = *(void *)(*(void *)&v216[8] + 56);
      unint64_t v179 = *(void *)(*(void *)&v216[8] + 64);
      if (v179 == v180) {
        unint64_t v180 = *(void *)(*(void *)&v216[8] + 80) - *(void *)(*(void *)&v216[8] + 72);
      }
      if (*(void *)&v216[16] < v180) {
        unint64_t v180 = *(void *)&v216[16];
      }
      if (v179 <= *(void *)&v216[24]) {
        unint64_t v179 = *(void *)&v216[24];
      }
      if (v179 == v180) {
        unint64_t v179 = v180 + *(void *)(*(void *)&v216[8] + 80) - *(void *)(*(void *)&v216[8] + 72);
      }
      *(void *)(*(void *)&v216[8] + 56) = v180;
      *(void *)(v178 + 64) = v179;
    }
  }
LABEL_182:
  double v115 = a6;
  uint64_t v8 = a1;
  if (!a6) {
    goto LABEL_185;
  }
LABEL_183:
  if (!atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
  }
LABEL_185:
  uint64_t v181 = *(void *)(v8 + 352);
  uint64_t v182 = *(void *)(v181 + 136);
  uint64_t v183 = *(void *)(v181 + 144);
  uint64_t v184 = *(void *)(v8 + 8);
  *(_DWORD *)uint64x2_t v216 = 17;
  memset(&v216[4], 0, 28);
  v221[0] = altitude::TileKey::getGEOTileKey((unsigned int *)v216, v184);
  v221[1] = v185;
  float64x2_t v186 = [MEMORY[0x1E4F64918] modernManager];
  int v187 = [v186 versionForTileKey:v221];

  float64x2_t v188 = (void **)(a1 + 368);
  *(void *)uint64x2_t v216 = 17;
  *(_DWORD *)&v216[8] = 0;
  *(_DWORD *)&v216[12] = v187;
  *(void *)&v216[16] = v182;
  *(void *)&v216[24] = v183;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result = std::__tree<altitude::TileKey>::__find_equal<altitude::TileKey>(a1 + 368, v221, (unsigned int *)v216);
  if (!*result)
  {
    float64x2_t v190 = result;
    float64x2_t v191 = (char *)operator new(0x40uLL);
    *(_OWORD *)(v191 + 28) = *(_OWORD *)v216;
    *(_OWORD *)(v191 + 44) = *(_OWORD *)&v216[16];
    uint64_t v192 = v221[0];
    *(void *)float64x2_t v191 = 0;
    *((void *)v191 + 1) = 0;
    *((void *)v191 + 2) = v192;
    *float64x2_t v190 = (uint64_t)v191;
    uint64_t v193 = (void *)**v188;
    if (v193)
    {
      *float64x2_t v188 = v193;
      float64x2_t v191 = (char *)*v190;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), (uint64_t *)v191);
    ++*(void *)(a1 + 384);
  }
  return result;
}

void sub_1A25244DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

float karo::media::Image::sample<float,unsigned char,float>(uint64_t a1, float a2, float a3, double a4, double a5, double a6, float a7, float a8)
{
  uint64_t v11 = *(uint64_t **)(*(void *)(a1 + 8) + 16);
  uint64_t v12 = *v11;
  BOOL v13 = (std::__shared_weak_count *)v11[1];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = *(void *)(v12 + 8);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v15 = *(int **)(a1 + 8);
    if (v15) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v12 + 8);
    uint64_t v15 = *(int **)(a1 + 8);
    if (v15)
    {
LABEL_5:
      int v16 = *v15;
      LODWORD(v15) = v15[1];
      goto LABEL_8;
    }
  }
  int v16 = 0;
LABEL_8:
  float v17 = (float)(v16 - 1) * a2;
  int v18 = (int)v17;
  int v19 = v16 - 2;
  float v20 = v17 - (float)(int)v17;
  float v21 = 0.0;
  if (v18 < 0) {
    float v20 = 0.0;
  }
  int v22 = v18 & ~(v18 >> 31);
  BOOL v23 = v19 < v18;
  if (v19 < v18) {
    float v20 = 1.0;
  }
  float v24 = (float)((int)v15 - 1) * a3;
  int v25 = (int)v24;
  if (!v23) {
    int v19 = v22;
  }
  float v26 = truncf(v24);
  float v27 = v24 - v26;
  int v28 = v15 - 2;
  if (v25 >= 0) {
    float v21 = v27;
  }
  if (v28 < v25) {
    float v21 = 1.0;
  }
  else {
    int v28 = v25 & ~(v25 >> 31);
  }
  int v29 = v16 - v28;
  __double2 v30 = (unsigned char *)(v14 + v19 + (uint64_t)((v29 - 1) * v16));
  LOBYTE(v27) = *v30;
  LOBYTE(v26) = v30[1];
  uint64_t v31 = v19 + (uint64_t)((v29 - 2) * v16);
  LOBYTE(a7) = *(unsigned char *)(v14 + v31);
  LOBYTE(a8) = *(unsigned char *)(v14 + (int)v31 + 1);
  float v32 = (float)((float)(1.0 - v20) * (float)LODWORD(v27)) + (float)(v20 * (float)LODWORD(v26));
  return v32
       + (float)((float)((float)(v20 * (float)LODWORD(a8))
                       - (float)(v32 - (float)((float)(1.0 - v20) * (float)LODWORD(a7))))
               * v21);
}

uint64_t std::__shared_ptr_pointer<altitude::MapProvider *,std::shared_ptr<altitude::MapProvider>::__shared_ptr_default_delete<altitude::MapProvider,altitude::MapProvider>,std::allocator<altitude::MapProvider>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::MapProvider *,std::shared_ptr<altitude::MapProvider>::__shared_ptr_default_delete<altitude::MapProvider,altitude::MapProvider>,std::allocator<altitude::MapProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void karo::media::C3bModel::~C3bModel(karo::media::C3bModel *this)
{
  uint64_t v2 = *((void *)this + 28);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 29);
    uint64_t v4 = (void *)*((void *)this + 28);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 28);
    }
    *((void *)this + 29) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::__map_value_compare<karo::media::C3bMaterialClass,std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>,std::less<karo::media::C3bMaterialClass>,true>,std::allocator<std::__value_type<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<altitude::TextureMap>>>>>::destroy(*((void **)this + 26));
  int v5 = (void *)*((void *)this + 22);
  if (v5)
  {
    int v6 = (void *)*((void *)this + 23);
    uint64_t v7 = (void *)*((void *)this + 22);
    if (v6 != v5)
    {
      do
      {
        v6 -= 7;
        std::__destroy_at[abi:nn180100]<karo::media::C3bMaterial,0>(v6);
      }
      while (v6 != v5);
      uint64_t v7 = (void *)*((void *)this + 22);
    }
    *((void *)this + 23) = v5;
    operator delete(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v9 = (void *)*((void *)this + 17);
    if (!v9) {
      return;
    }
  }
  else
  {
    uint64_t v9 = (void *)*((void *)this + 17);
    if (!v9) {
      return;
    }
  }
  uint64_t v10 = *((void *)this + 18);
  uint64_t v11 = v9;
  if ((void *)v10 != v9)
  {
    do
    {
      v10 -= 120;
      std::__destroy_at[abi:nn180100]<karo::media::C3mMesh,0>(v10);
    }
    while ((void *)v10 != v9);
    uint64_t v11 = (void *)*((void *)this + 17);
  }
  *((void *)this + 18) = v9;
  operator delete(v11);
}

void altitude::ProcessC3b::ProcessC3b(uint64_t a1, uint64_t a2)
{
}

uint64_t std::__shared_ptr_emplace<altitude::ProcessC3b>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<altitude::ProcessC3b>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AA50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<altitude::ProcessC3b>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58AA50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

karo::media::C3bModel *std::__shared_ptr_pointer<karo::media::C3bModel *,std::shared_ptr<karo::media::C3bModel>::__shared_ptr_default_delete<karo::media::C3bModel,karo::media::C3bModel>,std::allocator<karo::media::C3bModel>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(karo::media::C3bModel **)(a1 + 24);
  if (result)
  {
    karo::media::C3bModel::~C3bModel(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3bModel *,std::shared_ptr<karo::media::C3bModel>::__shared_ptr_default_delete<karo::media::C3bModel,karo::media::C3bModel>,std::allocator<karo::media::C3bModel>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void altitude::C3bLoadJob::~C3bLoadJob(void **this)
{
  altitude::C3bLoadJob::~C3bLoadJob(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  char *v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t vars8;

  *this = &unk_1EF568370;
  if ((*((char *)this + 495) & 0x80000000) == 0)
  {
    if ((*((char *)this + 463) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_10:
    operator delete(this[55]);
    if ((*((char *)this + 439) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    operator delete(this[52]);
    goto LABEL_4;
  }
  operator delete(this[59]);
  if (*((char *)this + 463) < 0) {
    goto LABEL_10;
  }
LABEL_3:
  if (*((char *)this + 439) < 0) {
    goto LABEL_11;
  }
LABEL_4:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[47]);
  uint64_t v2 = (std::__shared_weak_count *)this[45];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)this[43];
    if (!v3) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)this[43];
    if (!v3) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_13:
  uint64_t v4 = (std::__shared_weak_count *)this[41];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int v5 = (char *)this[37];
    if (!v5) {
      goto LABEL_24;
    }
  }
  else
  {
    int v5 = (char *)this[37];
    if (!v5) {
      goto LABEL_24;
    }
  }
  int v6 = (char *)this[38];
  uint64_t v7 = v5;
  if (v6 != v5)
  {
    do
    {
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v6 - 1);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      v6 -= 16;
    }
    while (v6 != v5);
    uint64_t v7 = (char *)this[37];
  }
  this[38] = v5;
  operator delete(v7);
LABEL_24:
  uint64_t v9 = (std::__shared_weak_count *)this[36];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = (std::__shared_weak_count *)this[34];
    if (!v10) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v10 = (std::__shared_weak_count *)this[34];
    if (!v10) {
      goto LABEL_32;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_32:
  uint64_t v11 = (std::__shared_weak_count *)this[28];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  karo::Job::~Job((karo::Job *)this);
}

void altitude::Renderable::Renderable(altitude::Renderable *this, const altitude::Renderable *a2)
{
  *(void *)this = &unk_1EF5681C8;
  long long v2 = *(_OWORD *)((char *)a2 + 8);
  *((void *)this + 3) = *((void *)a2 + 3);
  *(_OWORD *)((char *)this + 8) = v2;
  long long v3 = *((_OWORD *)a2 + 2);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((_OWORD *)this + 2) = v3;
  *((void *)this + 7) = *((void *)a2 + 7);
  *(void *)this = &unk_1EF568170;
  long long v4 = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 5) = v4;
  long long v5 = *((_OWORD *)a2 + 6);
  long long v6 = *((_OWORD *)a2 + 7);
  long long v7 = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = v7;
  *((_OWORD *)this + 6) = v5;
  *((_OWORD *)this + 7) = v6;
  *(void *)this = &unk_1EF568478;
  *((void *)this + 20) = *((void *)a2 + 20);
  *((_WORD *)this + 84) = *((_WORD *)a2 + 84);
  *(void *)((char *)this + 172) = *(void *)((char *)a2 + 172);
  *((unsigned char *)this + 180) = *((unsigned char *)a2 + 180);
  operator new();
}

void karo::Bounded::~Bounded(karo::Bounded *this)
{
  *(void *)this = &unk_1EF5681C8;
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF5681C8;
}

void altitude::Renderable::setDrapesEnabled(altitude::Renderable *this, int a2)
{
  if (*((unsigned __int8 *)this + 169) == a2 && !*((unsigned char *)this + 168)) {
    return;
  }
  *((unsigned char *)this + 169) = a2;
  *((unsigned char *)this + 168) = 0;
  if (a2)
  {
    uint64_t v2 = *((void *)this + 27);
    long long v3 = *(void **)(v2 + 96);
    long long v4 = *(std::__shared_weak_count **)(v2 + 104);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_10:
    uint64_t v7 = (v3[6] - v3[5]) / v3[1];
    goto LABEL_11;
  }
  int v5 = *((_DWORD *)this + 41);
  uint64_t v6 = *((void *)this + 27);
  long long v3 = *(void **)(v6 + 96);
  long long v4 = *(std::__shared_weak_count **)(v6 + 104);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5 == -1) {
    goto LABEL_10;
  }
  uint64_t v7 = *((int *)this + 41);
LABEL_11:
  uint64_t v8 = (void *)*((void *)this + 23);
  v8[9] = 0;
  v8[10] = v7;
  v8[11] = 0;
  v8[12] = 1;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void altitude::Renderable::createOverlayElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, int a9)
{
  *(void *)&long long v12 = a4;
  *((void *)&v12 + 1) = a5;
  long long v41 = v12;
  if (a5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a5 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v13 = operator new(0xA8uLL);
  v13[1] = 0;
  void v13[2] = 0;
  *BOOL v13 = &unk_1EF5830B0;
  uint64_t v14 = (uint64_t)(v13 + 3);
  long long v43 = v41;
  uint64_t v15 = *a6;
  int v16 = (std::__shared_weak_count *)a6[1];
  v42[0] = v15;
  v42[1] = (uint64_t)v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh(v14, (uint64_t)"overlay", (uint64_t *)&v43, v42);
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    ggl::CommonMesh::Pos4UVMesh::Pos4UVMesh(v14, (uint64_t)"overlay", (uint64_t *)&v43, v42);
  }
  float v17 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = *(void *)(a1 + 256);
  int v19 = *(std::__shared_weak_count **)(a1 + 264);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v20 = operator new(0x100uLL);
  float v21 = v20;
  v20[1] = 0;
  v20[2] = 0;
  *float v20 = &unk_1EF583C80;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup(v20 + 3, v18, (uint64_t)v19);
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v20 + 3, v18, 0);
  }
  void v21[3] = &unk_1EF55B550;
  int v22 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586060;
  uint64_t v23 = ggl::BufferData::BufferData((uint64_t)&v22[1], qword_1E9578A68, 2, 1, 6, 1);
  v22[9].__shared_owners_ = (uint64_t)ggl::FlyoverOverlay::Transform::reflection(void)::reflection;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55DA58;
  uint64_t v24 = v21[11];
  *(void *)(v24 + 16) = v23;
  *(void *)(v24 + 24) = 0;
  uint64_t v25 = v21[23];
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  float v26 = *(std::__shared_weak_count **)(v25 + 24);
  *(void *)(v25 + 16) = v23;
  *(void *)(v25 + 24) = v22;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v27 = *a7;
    int v28 = (std::__shared_weak_count *)a7[1];
    if (v28)
    {
LABEL_21:
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      int v29 = (void *)v21[11];
      void *v29 = v27;
      v29[1] = 0;
      __double2 v30 = (void *)v21[23];
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_24:
      float v32 = (std::__shared_weak_count *)v30[1];
      *__double2 v30 = v27;
      v30[1] = v28;
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
        if (!v28) {
          goto LABEL_30;
        }
      }
      else if (!v28)
      {
        goto LABEL_30;
      }
      if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
LABEL_30:
      float v33 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v33->__shared_owners_ = 0;
      v33->__shared_weak_owners_ = 0;
      v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587640;
      uint64_t v34 = ggl::BufferData::BufferData((uint64_t)&v33[1], qword_1E957BF58, 2, 1, 6, 1);
      v33[9].__shared_owners_ = (uint64_t)ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
      v33[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E898;
      uint64_t v35 = v21[11];
      *(void *)(v35 + 48) = v34;
      *(void *)(v35 + 56) = 0;
      uint64_t v36 = v21[23];
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v37 = *(std::__shared_weak_count **)(v36 + 56);
      *(void *)(v36 + 48) = v34;
      *(void *)(v36 + 56) = v33;
      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      long double v38 = *(void **)(v21[11] + 48);
      unint64_t v39 = v38[1];
      double v40 = (_DWORD *)v38[9];
      *double v40 = 1065353216;
      v40[1] = a9;
      if (v38[8] > v39) {
        unint64_t v39 = v38[8];
      }
      v38[7] = 0;
      v38[8] = v39;
      operator new();
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    uint64_t v27 = *a7;
    int v28 = (std::__shared_weak_count *)a7[1];
    if (v28) {
      goto LABEL_21;
    }
  }
  uint64_t v31 = (void *)v21[11];
  *uint64_t v31 = v27;
  v31[1] = 0;
  __double2 v30 = (void *)v21[23];
  goto LABEL_24;
}

void ggl::ConstantDataTyped<ggl::FlyoverOverlay::Transform>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverOverlay::Transform>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Transform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583C80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583C80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<ggl::Mesh *,std::shared_ptr<ggl::Mesh>::__shared_ptr_default_delete<ggl::Mesh,ggl::Mesh>,std::allocator<ggl::Mesh>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::Mesh *,std::shared_ptr<ggl::Mesh>::__shared_ptr_default_delete<ggl::Mesh,ggl::Mesh>,std::allocator<ggl::Mesh>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5842A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5842A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::TileBaseSurface::Element>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TileBaseSurface::Element>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Element>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Element>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5864C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Element>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5864C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void altitude::Renderable::createSolidLineElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v10 = operator new(0xE8uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_1EF5879F8;
  ggl::BufferData::BufferData((uint64_t)(v10 + 3), qword_1E957BD90, 2, 1, 6, 1);
  v10[28] = ggl::SolidLine::Style::reflection(void)::reflection;
  v10[3] = &unk_1EF55EAB8;
  uint64_t v11 = a8[1];
  unint64_t v12 = v10[4];
  BOOL v13 = (void *)v10[12];
  *BOOL v13 = *a8;
  v13[1] = v11;
  if (v10[11] > v12) {
    unint64_t v12 = v10[11];
  }
  v10[10] = 0;
  v10[11] = v12;
  uint64_t v14 = operator new(0xE8uLL);
  v14[1] = 0;
  v14[2] = 0;
  void *v14 = &unk_1EF5879C0;
  ggl::BufferData::BufferData((uint64_t)(v14 + 3), qword_1E957BDD0, 2, 1, 6, 1);
  v14[28] = ggl::SolidLine::View::reflection(void)::reflection;
  v14[3] = &unk_1EF55EA98;
  uint64_t v15 = *(void *)(a1 + 144);
  if (v15)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    operator new();
  }
  operator new();
}

uint64_t std::__shared_ptr_pointer<ggl::CommonMesh::Pos4Mesh *,std::shared_ptr<ggl::Mesh>::__shared_ptr_default_delete<ggl::Mesh,ggl::CommonMesh::Pos4Mesh>,std::allocator<ggl::CommonMesh::Pos4Mesh>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::CommonMesh::Pos4Mesh *,std::shared_ptr<ggl::Mesh>::__shared_ptr_default_delete<ggl::Mesh,ggl::CommonMesh::Pos4Mesh>,std::allocator<ggl::CommonMesh::Pos4Mesh>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<ggl::SolidLine::BasePipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::SolidLine::BasePipelineSetup>,std::allocator<ggl::SolidLine::BasePipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::SolidLine::BasePipelineSetup *,std::shared_ptr<ggl::PipelineSetup>::__shared_ptr_default_delete<ggl::PipelineSetup,ggl::SolidLine::BasePipelineSetup>,std::allocator<ggl::SolidLine::BasePipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::ConstantDataTyped<ggl::SolidLine::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::SolidLine::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5879C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5879C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::SolidLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::SolidLine::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5879F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::SolidLine::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5879F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t altitude::BundleLoader::createAndQueueFileRequest@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  karo::AsyncFileLoader::createAndQueueFileRequest(a1, a2, a3);
  long long v4 = *(karo::Job **)a3;
  return karo::Job::step(v4);
}

void altitude::BundleLoader::getProtocol(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  char v7 = 6;
  strcpy((char *)__p, "bundle");
  long long v3 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a1, (uint64_t)__p);
  int v4 = v7;
  *(void *)(a1 + 8) = v3;
  if (v4 < 0)
  {
    int v5 = __p[0];
    operator delete(v5);
  }
}

void altitude::BundleLoader::requestFile(pthread_mutex_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  pthread_mutex_lock(a1[5]);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string __p = *(std::string *)a2;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v18 = __p;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_6:
  char v19 = 0;
  (*(void (**)(uint64_t *__return_ptr, pthread_mutex_t **, std::string *, void))&(*a1)[1].__opaque[24])(&v20, a1, &v18, 0);
  uint64_t v15 = v20;
  uint64_t v14 = v21;
  uint64_t v20 = 0;
  float v21 = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_8:
  pthread_mutex_unlock(a1[5]);
  pthread_mutex_lock(*(pthread_mutex_t **)(v15 + 152));
  int v16 = *(_DWORD *)(v15 + 160);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v15 + 152));
  if ((v16 & 1) == 0) {
    karo::Job::step((karo::Job *)v15);
  }
  karo::AsyncFileLoader::requestFile((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void altitude::BundleLoader::createRequest()
{
}

uint64_t std::__shared_ptr_pointer<altitude::BundleLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::BundleLoadJob>,std::allocator<altitude::BundleLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::BundleLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::BundleLoadJob>,std::allocator<altitude::BundleLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t altitude::BundleLoadJob::getData(altitude::BundleLoadJob *this)
{
  return *((void *)this + 30);
}

uint64_t altitude::BundleLoadJob::getDataSize(altitude::BundleLoadJob *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t altitude::BundleLoadJob::succeeded(altitude::BundleLoadJob *this)
{
  return *((unsigned __int8 *)this + 252);
}

void altitude::BundleLoadJob::jobStep(altitude::BundleLoadJob *this)
{
  v5[23] = 8;
  strcpy(v5, "bundle:/");
  karo::util::Path::removePrefix(__p, (uint64_t)this + 216, (uint64_t)v5);
  uint64_t MemFile = karo::Loader::getMemFile(*(void *)(*((void *)this + 1) + 80), (uint64_t)__p, (_DWORD *)this + 62);
  *((void *)this + 30) = MemFile;
  if (MemFile) {
    BOOL v3 = *((_DWORD *)this + 62) != 0;
  }
  else {
    BOOL v3 = 0;
  }
  *((unsigned char *)this + 252) = v3;
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if (v7 < 0)
  {
    int v4 = __p[0];
    operator delete(v4);
  }
}

void altitude::BundleLoadJob::~BundleLoadJob(void **this)
{
  *this = &unk_1EF568B60;
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  *this = &unk_1EF567700;
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  karo::Job::~Job((karo::Job *)this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *this = &unk_1EF568B60;
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  *this = &unk_1EF567700;
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  karo::Job::~Job((karo::Job *)this);
}

void altitude::BundleLoader::~BundleLoader(altitude::BundleLoader *this)
{
  *(void *)this = &unk_1EF567DD8;
  while (*((void *)this + 10))
    (*(void (**)(altitude::BundleLoader *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((char **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF567DD8;
  while (*((void *)this + 10))
    (*(void (**)(altitude::BundleLoader *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<karo::AsyncFileRequestId,std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<karo::AsyncFileRequestId>,true>,std::allocator<std::__value_type<karo::AsyncFileRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((char **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

void *md::realistic::LabelRenderLayer::layout(md::realistic::LabelRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  v54[0] = &unk_1EF57A070;
  v54[1] = a2;
  v52[0] = &unk_1EF57A0B8;
  v52[1] = a2;
  double v53 = v52;
  int v57 = v56;
  int v55 = v54;
  v56[0] = &unk_1EF57A0B8;
  v56[1] = a2;
  std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v54);
  if (v53 == v52)
  {
    (*(void (**)(void *))(v52[0] + 32))(v52);
  }
  else if (v53)
  {
    (*(void (**)(void))(*v53 + 40))();
  }
  if (v55 == v54)
  {
    (*(void (**)(void *))(v54[0] + 32))(v54);
    uint64_t v4 = *((void *)this + 9);
    if (!v4) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  if (v55) {
    (*(void (**)(void))(*v55 + 40))();
  }
  uint64_t v4 = *((void *)this + 9);
  if (v4)
  {
LABEL_11:
    uint64_t v5 = *((void *)this + 5);
    uint64_t v6 = *(void *)(v5 + 144);
    uint64_t v7 = *(unsigned int *)(*(void *)(v5 + 136) + 88);
    uint64_t v8 = *(void *)(*((void *)a2 + 92) + 16);
    uint64_t v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (*v9 != v11)
    {
      do
      {
        uint64_t v12 = *(void *)(*(void *)v10 + 352);
        if (!v12) {
          operator new();
        }
        (*(void (**)(uint64_t, const md::LayoutContext *, uint64_t, void, uint64_t, uint64_t))(*(void *)v12 + 80))(v12, a2, v8, *(void *)(*((void *)a2 + 92) + 24), v7, v6);
        v10 += 8;
      }
      while (v10 != v11);
    }
  }
LABEL_15:
  uint64_t v13 = *((void *)this + 6);
  uint64_t v14 = *(unsigned int *)(*(void *)(*((void *)this + 5) + 136) + 88);
  int v16 = *(void **)v13;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
  float v17 = *(void **)v13;
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    float v17 = *(void **)v13;
  }
  __n128 v49 = v15;
  *((unsigned char *)v17 + 48) = 0;
  std::string v18 = (uint64_t *)v16[3];
  char v19 = v16 + 4;
  if (v18 != v16 + 4)
  {
    do
    {
      uint64_t v20 = *(void *)(v18[6] + 504);
      if (!v20 || *(void *)(v20 + 8) == -1)
      {
        uint64_t v24 = (uint64_t *)v18[1];
        uint64_t v25 = v24;
        float v26 = v18;
        if (v24)
        {
          do
          {
            int v22 = v25;
            uint64_t v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            int v22 = (uint64_t *)v26[2];
            BOOL v23 = *v22 == (void)v26;
            float v26 = v22;
          }
          while (!v23);
        }
        uint64_t v27 = v18;
        if (v24)
        {
          do
          {
            int v28 = v24;
            uint64_t v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            int v28 = (uint64_t *)v27[2];
            BOOL v23 = *v28 == (void)v27;
            uint64_t v27 = v28;
          }
          while (!v23);
        }
        if ((uint64_t *)v16[3] == v18) {
          void v16[3] = v28;
        }
        int v29 = (uint64_t *)v16[4];
        --v16[5];
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v18);
        __double2 v30 = (std::__shared_weak_count *)v18[7];
        if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        operator delete(v18);
      }
      else
      {
        float v21 = (uint64_t *)v18[1];
        if (v21)
        {
          do
          {
            int v22 = v21;
            float v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            int v22 = (uint64_t *)v18[2];
            BOOL v23 = *v22 == (void)v18;
            std::string v18 = v22;
          }
          while (!v23);
        }
      }
      std::string v18 = v22;
    }
    while (v22 != v19);
  }
  if (*(void *)(v13 + 64))
  {
    uint64_t v31 = *(void **)(v13 + 48);
    while (v31)
    {
      float v32 = v31;
      uint64_t v31 = (void *)*v31;
      float v33 = (std::__shared_weak_count *)v32[3];
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      (*(void (**)(void, void *, uint64_t))(**(void **)(v13 + 56) + 40))(*(void *)(v13 + 56), v32, 32);
    }
    *(void *)(v13 + 48) = 0;
    uint64_t v34 = *(void *)(v13 + 32);
    if (v34)
    {
      for (uint64_t i = 0; i != v34; ++i)
        *(void *)(*(void *)(v13 + 24) + 8 * i) = 0;
    }
    *(void *)(v13 + 64) = 0;
  }
  uint64_t v36 = (uint64_t *)v16[3];
  if (v36 != v19)
  {
    do
    {
      uint64_t v37 = v36[6];
      long double v38 = *(std::__shared_weak_count **)(v37 + 504);
      if (v38 && (unint64_t v39 = std::__shared_weak_count::lock(v38)) != 0)
      {
        double v40 = v39;
        uint64_t v41 = *(void *)(v37 + 496);
        if (v41) {
          uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 56))(v41);
        }
        else {
          uint64_t v42 = 0;
        }
        if (atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (v42 == v14) {
            goto LABEL_67;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
          if (v42 == v14)
          {
LABEL_67:
            unint64_t v43 = v36[6];
            __double2 v44 = (std::__shared_weak_count *)v36[7];
            unint64_t v50 = v43;
            uint64_t v51 = v44;
            if (v44) {
              atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile>>(v13 + 24, v43, (uint64_t)&v50);
            float32x4_t v45 = v51;
            if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
        }
      }
      else if (!v14)
      {
        goto LABEL_67;
      }
      float32x4_t v46 = (uint64_t *)v36[1];
      if (v46)
      {
        do
        {
          double v47 = v46;
          float32x4_t v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          double v47 = (uint64_t *)v36[2];
          BOOL v23 = *v47 == (void)v36;
          uint64_t v36 = v47;
        }
        while (!v23);
      }
      uint64_t v36 = v47;
    }
    while (v47 != v19);
  }
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  md::LabelManager::layout(*(void *)(v13 + 80), a2, v13 + 24);
  if (!v57)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v57 + 48))(v57);
  uint64_t result = v57;
  if (v57 == v56) {
    return (void *)(*(uint64_t (**)(void *))(v56[0] + 32))(v56);
  }
  if (v57) {
    return (void *)(*(uint64_t (**)(void))(*v57 + 40))();
  }
  return result;
}

void sub_1A2527F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  BOOL v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "GlobeLabelLayout", "", v5, 2u);
  }
}

void std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  BOOL v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GlobeLabelLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57A0B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57A0B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57A070;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57A070;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::realistic::LabelRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::realistic::LabelRenderLayer::~LabelRenderLayer(md::realistic::LabelRenderLayer *this)
{
  md::realistic::LabelRenderLayer::~LabelRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(void *)this = &unk_1EF554760;
  uint64_t v2 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  os_signpost_id_t v4 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(void *)this = &unk_1EF530C60;
  uint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }
}

char *md::HikingRenderLayer::reserveStencilRange(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 v6 = *(unsigned char *)(a1 + 49) - *(unsigned char *)(a1 + 48) + 1;
  uint64_t v7 = a1 + 416;
  uint64_t v8 = *(char **)(a1 + 416);
  uint64_t v9 = *(char **)(a1 + 424);
  if (v8 != v9)
  {
    while (*a3 != *v8 || a3[1] != v8[1])
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_9;
      }
    }
  }
  if (v8 == v9)
  {
LABEL_9:
    *(_WORD *)uint64_t v35 = *(_WORD *)a3;
    uint64_t v37 = 0;
    uint64_t v8 = geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert(v7, v35);
  }
  uint64_t v11 = *(unsigned __int8 **)(a2 + 24);
  int v12 = *v11;
  unsigned int v13 = v12 + v6;
  unsigned int v14 = v11[1];
  BOOL v15 = v13 > v14;
  if (v13 <= v14) {
    int v16 = 0;
  }
  else {
    int v16 = v11 + 4;
  }
  *((void *)v8 + 1) = v16;
  if (v15)
  {
    int v12 = 1;
    unsigned __int8 *v11 = 1;
    v11[1] = v11[2];
  }
  unsigned __int8 *v11 = v12 + v6;
  int v17 = v12 - *(unsigned __int8 *)(a1 + 48);
  std::string v18 = *(char **)(a1 + 368);
  char v19 = *(char **)(a1 + 376);
  if (v18 != v19)
  {
    while (*a3 != *v18 || a3[1] != v18[1])
    {
      v18 += 8;
      if (v18 == v19) {
        goto LABEL_24;
      }
    }
  }
  if (v18 == v19)
  {
LABEL_24:
    *(_WORD *)uint64_t v35 = *(_WORD *)a3;
    int v36 = 0;
    std::string v18 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert(a1 + 368, v35);
  }
  *((_DWORD *)v18 + 1) = v17;
  float v21 = +[VKSharedResourcesManager sharedResources];
  int v22 = *(unsigned __int8 *)([v21 gglDevice] + 20);

  if (v22)
  {
    uint64_t result = *(char **)(a1 + 392);
    uint64_t v24 = *(char **)(a1 + 400);
    if (result != v24)
    {
      while (*a3 != *result || a3[1] != result[1])
      {
        result += 8;
        if (result == v24) {
          goto LABEL_34;
        }
      }
    }
    if (result == v24)
    {
LABEL_34:
      *(_WORD *)uint64_t v35 = *(_WORD *)a3;
      int v36 = 0;
      uint64_t result = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert(a1 + 392, v35);
    }
    *((_DWORD *)result + 1) = 0;
  }
  else
  {
    float v26 = *(unsigned __int8 **)(a2 + 24);
    int v27 = *v26;
    unsigned int v28 = v27 + 3;
    unsigned int v29 = v26[1];
    if (v27 + 3 <= v29) {
      __double2 v30 = 0;
    }
    else {
      __double2 v30 = v26 + 4;
    }
    if (v28 > v29)
    {
      int v27 = 1;
      *float v26 = 1;
      v26[1] = v26[2];
    }
    *float v26 = v27 + 3;
    uint64_t result = *(char **)(a1 + 392);
    uint64_t v31 = *(char **)(a1 + 400);
    if (result != v31)
    {
      while (*a3 != *result || a3[1] != result[1])
      {
        result += 8;
        if (result == v31) {
          goto LABEL_49;
        }
      }
    }
    if (result == v31)
    {
LABEL_49:
      *(_WORD *)uint64_t v35 = *(_WORD *)a3;
      int v36 = 0;
      uint64_t result = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert(a1 + 392, v35);
    }
    *((_DWORD *)result + 1) = v27;
    if (v28 > v29)
    {
      uint64_t result = *(char **)(a1 + 416);
      float v33 = *(char **)(a1 + 424);
      if (result != v33)
      {
        while (*a3 != *result || a3[1] != result[1])
        {
          result += 16;
          if (result == v33) {
            goto LABEL_59;
          }
        }
      }
      if (result == v33)
      {
LABEL_59:
        *(_WORD *)uint64_t v35 = *(_WORD *)a3;
        uint64_t v37 = 0;
        uint64_t result = geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert(v7, v35);
      }
      *((void *)result + 1) = v30;
    }
  }
  return result;
}

void sub_1A2528870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert(uint64_t a1, unsigned __int8 *a2)
{
  os_signpost_id_t v4 = *(char **)a1;
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t result = v4;
  if (v4 != v5)
  {
    uint64_t result = v4;
    while (*a2 != *result || a2[1] != result[1])
    {
      result += 8;
      if (result == v5) {
        goto LABEL_10;
      }
    }
  }
  if (result == v5)
  {
LABEL_10:
    unint64_t v8 = *(void *)(a1 + 16);
    if ((unint64_t)v5 >= v8)
    {
      int64_t v10 = v5 - v4;
      uint64_t v11 = (v5 - v4) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        abort();
      }
      uint64_t v13 = v8 - (void)v4;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v15 = operator new(8 * v14);
      }
      else
      {
        BOOL v15 = 0;
      }
      int v16 = &v15[8 * v11];
      *int v16 = *(void *)a2;
      uint64_t v9 = v16 + 1;
      if (v4 != v5)
      {
        if ((unint64_t)(v10 - 8) < 0x58) {
          goto LABEL_38;
        }
        if ((unint64_t)(v4 - v15) < 0x20) {
          goto LABEL_38;
        }
        unint64_t v17 = ((unint64_t)(v10 - 8) >> 3) + 1;
        std::string v18 = &v15[8 * v11 - 16];
        char v19 = v5 - 16;
        uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v21 = *(_OWORD *)v19;
          *(v18 - 1) = *((_OWORD *)v19 - 1);
          *std::string v18 = v21;
          v18 -= 2;
          v19 -= 32;
          v20 -= 4;
        }
        while (v20);
        v16 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
        v5 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
        if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            uint64_t v22 = *((void *)v5 - 1);
            v5 -= 8;
            *--int v16 = v22;
          }
          while (v5 != v4);
          os_signpost_id_t v4 = *(char **)a1;
        }
      }
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = &v15[8 * v14];
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      *(void *)uint64_t v5 = *(void *)a2;
      uint64_t v9 = v5 + 8;
    }
    *(void *)(a1 + 8) = v9;
    return (char *)(v9 - 1);
  }
  return result;
}

void *md::HikingRenderLayer::layout(md::HikingRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  v171[0] = &unk_1EF573080;
  v171[1] = a2;
  v169[0] = &unk_1EF5730C8;
  v169[1] = a2;
  int v170 = v169;
  uint64_t v174 = v173;
  int v172 = v171;
  v173[0] = &unk_1EF5730C8;
  v173[1] = a2;
  std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v171);
  if (v170 == v169)
  {
    (*(void (**)(void *))(v169[0] + 32))(v169);
  }
  else if (v170)
  {
    (*(void (**)(void *))(*v170 + 40))(v170);
  }
  if (v172 == v171)
  {
    (*(void (**)(void *))(v171[0] + 32))(v171);
  }
  else if (v172)
  {
    (*(void (**)(void *))(*v172 + 40))(v172);
  }
  os_signpost_id_t v4 = (void *)*((void *)a2 + 1);
  unint64_t v5 = v4[1];
  if ((v5 & (v5 - 1)) != 0)
  {
    unint64_t v7 = 0xC97B9E962ADF4AD4;
    if (v5 <= 0xC97B9E962ADF4AD4) {
      unint64_t v7 = 0xC97B9E962ADF4AD4 % v5;
    }
    unsigned __int8 v6 = *(void **)(*v4 + 8 * v7);
    do
    {
      do
        unsigned __int8 v6 = (void *)*v6;
      while (v6[1] != 0xC97B9E962ADF4AD4);
    }
    while (v6[2] != 0xC97B9E962ADF4AD4);
  }
  else
  {
    unsigned __int8 v6 = *(void **)(*v4 + 8 * ((v5 - 1) & 0xC97B9E962ADF4AD4));
    do
    {
      do
        unsigned __int8 v6 = (void *)*v6;
      while (v6[1] != 0xC97B9E962ADF4AD4);
    }
    while (v6[2] != 0xC97B9E962ADF4AD4);
  }
  unint64_t v8 = *(uint64_t **)(v6[5] + 32);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 != v10)
  {
    while (*(unsigned char *)v9 != 34)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_25;
      }
    }
  }
  if (v9 == v10) {
LABEL_25:
  }
    uint64_t v140 = 0;
  else {
    uint64_t v140 = *(void *)(v9 + 8);
  }
  uint64_t v11 = *((void *)this + 44);
  *(void *)(v11 + 112) = 0;
  *(void *)(v11 + 120) = 0;
  unint64_t v12 = (void *)*((void *)a2 + 1);
  int8x8_t v13 = (int8x8_t)v12[1];
  if (!*(void *)&v13) {
    goto LABEL_49;
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = 0x92F3DC114CADB853;
    if (*(void *)&v13 <= 0x92F3DC114CADB853) {
      unint64_t v15 = 0x92F3DC114CADB853 % *(void *)&v13;
    }
  }
  else
  {
    unint64_t v15 = (*(void *)&v13 - 1) & 0x92F3DC114CADB853;
  }
  int v16 = *(void **)(*v12 + 8 * v15);
  if (!v16) {
    goto LABEL_49;
  }
  unint64_t v17 = (void *)*v16;
  if (!v17) {
    goto LABEL_49;
  }
  if (v14.u32[0] < 2uLL)
  {
    uint64_t v18 = *(void *)&v13 - 1;
    while (1)
    {
      uint64_t v20 = v17[1];
      if (v20 == 0x92F3DC114CADB853)
      {
        if (v17[2] == 0x92F3DC114CADB853) {
          goto LABEL_47;
        }
      }
      else if ((v20 & v18) != v15)
      {
        goto LABEL_49;
      }
      unint64_t v17 = (void *)*v17;
      if (!v17) {
        goto LABEL_49;
      }
    }
  }
  while (1)
  {
    unint64_t v19 = v17[1];
    if (v19 == 0x92F3DC114CADB853) {
      break;
    }
    if (v19 >= *(void *)&v13) {
      v19 %= *(void *)&v13;
    }
    if (v19 != v15) {
      goto LABEL_49;
    }
LABEL_36:
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      goto LABEL_49;
    }
  }
  if (v17[2] != 0x92F3DC114CADB853) {
    goto LABEL_36;
  }
LABEL_47:
  uint64_t v21 = v17[5];
  if (*(void *)(v21 + 8) == 0x92F3DC114CADB853)
  {
    uint64_t v22 = *(void *)(v21 + 32);
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v22 = 0;
LABEL_50:
  uint64_t v166 = 0;
  BOOL v23 = (unsigned __int8 *)*((void *)this + 61);
  int v24 = *v23;
  uint64_t v25 = *(void **)(*(void *)(*((void *)this + 5) + 24) + 8);
  uint64_t v26 = v25[3];
  uint64_t v27 = v25[4];
  uint64_t v28 = v27 - v26;
  if (v27 == v26)
  {
LABEL_57:
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v29 = 0;
    unint64_t v30 = v28 >> 3;
    while (1)
    {
      uint64_t v31 = *(unsigned __int8 **)(v26 + 8 * v29);
      if (*v31 == v24)
      {
        unint64_t v32 = *((void *)v31 + 1);
        uint64_t v33 = v25[15];
        if (v32 < (v25[16] - v33) >> 3) {
          break;
        }
      }
      if (++v29 >= v30) {
        goto LABEL_57;
      }
    }
    uint64_t v34 = *(void *)(v33 + 8 * v32);
    if (v34) {
      uint64_t v34 = *(void *)(*(void *)(v34 + 24) + 8 * v23[1]);
    }
  }
  uint64_t v166 = v34;
  uint64_t v35 = (char *)*((void *)this + 46);
  int v36 = (char *)*((void *)this + 47);
  if (v35 != v36)
  {
    while (v24 != *v35 || v23[1] != v35[1])
    {
      v35 += 8;
      if (v35 == v36) {
        goto LABEL_66;
      }
    }
  }
  if (v35 == v36)
  {
LABEL_66:
    *(_WORD *)int v152 = *(_WORD *)v23;
    int v153 = 0;
    uint64_t v35 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)this + 368, v152);
    BOOL v23 = (unsigned __int8 *)*((void *)this + 61);
  }
  int v139 = *((_DWORD *)v35 + 1);
  long double v38 = (char *)*((void *)this + 49);
  unint64_t v39 = (char *)*((void *)this + 50);
  if (v38 != v39)
  {
    while (*v23 != *v38 || v23[1] != v38[1])
    {
      v38 += 8;
      if (v38 == v39) {
        goto LABEL_75;
      }
    }
  }
  if (v38 == v39)
  {
LABEL_75:
    *(_WORD *)int v152 = *(_WORD *)v23;
    int v153 = 0;
    long double v38 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)this + 392, v152);
  }
  int v141 = *((_DWORD *)v38 + 1);
  uint64_t v41 = v166;
  uint64_t v42 = *(void *)(v166 + 72);
  if (*(void *)(v166 + 80) != v42) {
    *(void *)(v166 + 80) = v42;
  }
  unint64_t v43 = (unsigned __int8 *)*((void *)this + 61);
  __double2 v44 = (char *)*((void *)this + 52);
  float32x4_t v45 = (char *)*((void *)this + 53);
  if (v44 != v45)
  {
    while (*v43 != *v44 || v43[1] != v44[1])
    {
      v44 += 16;
      if (v44 == v45) {
        goto LABEL_86;
      }
    }
  }
  uint64_t v47 = v41;
  if (v44 == v45)
  {
LABEL_86:
    *(_WORD *)int v152 = *(_WORD *)v43;
    uint64_t v154 = 0;
    __double2 v44 = geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert((uint64_t)this + 416, v152);
    uint64_t v47 = v166;
  }
  *(void *)(v41 + 32) = *((void *)v44 + 1);
  v152[0] = 0;
  md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles((uint64_t)this, a2, v47, v139, v152);
  double v151 = 0;
  uint64_t v48 = *((void *)this + 61);
  if ((unint64_t)(*((void *)this + 62) - v48) < 3)
  {
    int v137 = 0;
    LOBYTE(v138) = 0;
  }
  else
  {
    int v49 = *(unsigned __int8 *)(v48 + 2);
    unint64_t v50 = *(void **)(*(void *)(*((void *)this + 5) + 24) + 8);
    uint64_t v51 = v50[3];
    uint64_t v52 = v50[4];
    uint64_t v53 = v52 - v51;
    if (v52 == v51) {
      goto LABEL_96;
    }
    uint64_t v54 = 0;
    unint64_t v55 = v53 >> 3;
    while (1)
    {
      int v56 = *(unsigned __int8 **)(v51 + 8 * v54);
      if (*v56 == v49)
      {
        unint64_t v57 = *((void *)v56 + 1);
        uint64_t v58 = v50[15];
        if (v57 < (v50[16] - v58) >> 3) {
          break;
        }
      }
      if (++v54 >= v55) {
        goto LABEL_96;
      }
    }
    uint64_t v59 = *(void *)(v58 + 8 * v57);
    if (!v59) {
LABEL_96:
    }
      unint64_t v60 = 0;
    else {
      unint64_t v60 = *(void **)(*(void *)(v59 + 24) + 8 * *(unsigned __int8 *)(v48 + 3));
    }
    double v151 = v60;
    uint64_t v61 = v60[9];
    if (v60[10] != v61) {
      v60[10] = v61;
    }
    unsigned int v62 = (char *)*((void *)this + 52);
    float32x4_t v63 = (char *)*((void *)this + 53);
    if (v62 != v63)
    {
      while (v49 != *v62 || *(unsigned __int8 *)(v48 + 3) != v62[1])
      {
        v62 += 16;
        if (v62 == v63) {
          goto LABEL_107;
        }
      }
    }
    if (v62 == v63)
    {
LABEL_107:
      *(_WORD *)int v152 = *(_WORD *)(v48 + 2);
      uint64_t v154 = 0;
      unsigned int v62 = geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert((uint64_t)this + 416, v152);
      uint64_t v48 = *((void *)this + 61);
    }
    v60[4] = *((void *)v62 + 1);
    uint64_t v65 = (char *)*((void *)this + 46);
    float v66 = (char *)*((void *)this + 47);
    if (v65 != v66)
    {
      while (*(unsigned __int8 *)(v48 + 2) != *v65
           || *(unsigned __int8 *)(v48 + 3) != v65[1])
      {
        v65 += 8;
        if (v65 == v66) {
          goto LABEL_116;
        }
      }
    }
    if (v65 == v66)
    {
LABEL_116:
      *(_WORD *)int v152 = *(_WORD *)(v48 + 2);
      int v153 = 0;
      uint64_t v65 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)this + 368, v152);
      uint64_t v48 = *((void *)this + 61);
    }
    int v137 = *((_DWORD *)v65 + 1);
    float v68 = (char *)*((void *)this + 49);
    float v69 = (char *)*((void *)this + 50);
    if (v68 != v69)
    {
      while (*(unsigned __int8 *)(v48 + 2) != *v68
           || *(unsigned __int8 *)(v48 + 3) != v68[1])
      {
        v68 += 8;
        if (v68 == v69) {
          goto LABEL_125;
        }
      }
    }
    if (v68 == v69)
    {
LABEL_125:
      *(_WORD *)int v152 = *(_WORD *)(v48 + 2);
      int v153 = 0;
      float v68 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert((uint64_t)this + 392, v152);
    }
    int v138 = *((_DWORD *)v68 + 1);
  }
  uint64_t v71 = (void *)*((void *)a2 + 1);
  int8x8_t v72 = (int8x8_t)v71[1];
  if (!*(void *)&v72) {
    goto LABEL_151;
  }
  uint8x8_t v73 = (uint8x8_t)vcnt_s8(v72);
  v73.i16[0] = vaddlv_u8(v73);
  if (v73.u32[0] > 1uLL)
  {
    uint64_t v74 = 0x401D4CCE847AB1D1;
    if (*(void *)&v72 <= 0x401D4CCE847AB1D1uLL) {
      uint64_t v74 = 0x401D4CCE847AB1D1uLL % *(void *)&v72;
    }
  }
  else
  {
    uint64_t v74 = (*(void *)&v72 - 1) & 0x401D4CCE847AB1D1;
  }
  float v75 = *(void **)(*v71 + 8 * v74);
  if (!v75) {
    goto LABEL_151;
  }
  uint64_t v76 = (void *)*v75;
  if (!v76) {
    goto LABEL_151;
  }
  if (v73.u32[0] < 2uLL)
  {
    uint64_t v77 = *(void *)&v72 - 1;
    while (1)
    {
      uint64_t v79 = v76[1];
      if (v79 == 0x401D4CCE847AB1D1)
      {
        if (v76[2] == 0x401D4CCE847AB1D1) {
          goto LABEL_148;
        }
      }
      else if ((v79 & v77) != v74)
      {
        goto LABEL_151;
      }
      uint64_t v76 = (void *)*v76;
      if (!v76) {
        goto LABEL_151;
      }
    }
  }
  while (2)
  {
    unint64_t v78 = v76[1];
    if (v78 != 0x401D4CCE847AB1D1)
    {
      if (v78 >= *(void *)&v72) {
        v78 %= *(void *)&v72;
      }
      if (v78 != v74) {
        goto LABEL_151;
      }
      goto LABEL_137;
    }
    if (v76[2] != 0x401D4CCE847AB1D1)
    {
LABEL_137:
      uint64_t v76 = (void *)*v76;
      if (!v76) {
        goto LABEL_151;
      }
      continue;
    }
    break;
  }
LABEL_148:
  uint64_t v80 = v76[5];
  if (*(void *)(v80 + 8) == 0x401D4CCE847AB1D1)
  {
    uint64_t v81 = *(void *)(v80 + 32);
    if (v81)
    {
      BOOL v82 = *(unsigned char *)(v81 + 4) != 0;
      goto LABEL_152;
    }
  }
LABEL_151:
  BOOL v82 = 0;
LABEL_152:
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v142, a2);
  int v147 = 0x10000;
  int v148 = 1065353216;
  __int16 v149 = 0;
  uint64_t v150 = 0;
  double v83 = +[VKDebugSettings sharedSettings];
  [v83 ribbonCrispness];
  int v144 = v84;

  uint64_t v85 = *((void *)this + 55);
  int v145 = *(_DWORD *)(*(void *)(v85 + 120) + 8);
  uint64_t v150 = v85;
  if (*((_DWORD *)this + 91)) {
    BOOL v86 = 0;
  }
  else {
    BOOL v86 = v82;
  }
  HIBYTE(v149) = v86;
  float v87 = 1.0;
  if (*((unsigned char *)this + 34) == 17) {
    float v87 = *(float *)(v22 + 4);
  }
  int v148 = LODWORD(v87);
  LOBYTE(v149) = 1;
  __n128 v88 = (void *)*((void *)a2 + 1);
  int8x8_t v89 = (int8x8_t)v88[1];
  if (v89)
  {
    uint8x8_t v90 = (uint8x8_t)vcnt_s8(v89);
    v90.i16[0] = vaddlv_u8(v90);
    if (v90.u32[0] > 1uLL)
    {
      unint64_t v91 = 0xA60DDA5A69582425;
      if (*(void *)&v89 <= 0xA60DDA5A69582425) {
        unint64_t v91 = 0xA60DDA5A69582425 % *(void *)&v89;
      }
    }
    else
    {
      unint64_t v91 = (*(void *)&v89 - 1) & 0xA60DDA5A69582425;
    }
    double v92 = *(void **)(*v88 + 8 * v91);
    if (v92)
    {
      int v93 = (void *)*v92;
      if (v93)
      {
        if (v90.u32[0] < 2uLL)
        {
          uint64_t v94 = *(void *)&v89 - 1;
          while (1)
          {
            uint64_t v96 = v93[1];
            if (v96 == 0xA60DDA5A69582425)
            {
              if (v93[2] == 0xA60DDA5A69582425) {
                goto LABEL_178;
              }
            }
            else if ((v96 & v94) != v91)
            {
              goto LABEL_181;
            }
            int v93 = (void *)*v93;
            if (!v93) {
              goto LABEL_181;
            }
          }
        }
        do
        {
          unint64_t v95 = v93[1];
          if (v95 == 0xA60DDA5A69582425)
          {
            if (v93[2] == 0xA60DDA5A69582425)
            {
LABEL_178:
              uint64_t v97 = v93[5];
              if (*(void *)(v97 + 8) == 0xA60DDA5A69582425 && *(void *)(v97 + 32)) {
                uint64_t v146 = 0;
              }
              break;
            }
          }
          else
          {
            if (v95 >= *(void *)&v89) {
              v95 %= *(void *)&v89;
            }
            if (v95 != v91) {
              break;
            }
          }
          int v93 = (void *)*v93;
        }
        while (v93);
      }
    }
  }
LABEL_181:
  BOOL v98 = (uint64_t *)*((void *)this + 60);
  uint64_t v99 = *v98;
  uint64_t v100 = v98[1];
  if (*v98 != v100)
  {
    do
    {
      md::RoadStyle::layout(*(void *)(v99 + 32), (uint64_t)v142);
      v99 += 48;
    }
    while (v99 != v100);
  }
  unint64_t v102 = (uint64_t *)*((void *)this + 34);
  int v101 = (uint64_t *)*((void *)this + 35);
  if (v102 != v101)
  {
    char v103 = 0;
    while (1)
    {
      uint64_t v104 = *v102;
      uint64_t v105 = *(void *)(*v102 + 384);
      HIBYTE(v147) = 0;
      LOBYTE(v143) = *((unsigned char *)this + 360);
      char v106 = v141;
      if ((_BYTE)v143) {
        char v106 = v139 + *(unsigned char *)(v105 + 169);
      }
      HIBYTE(v143) = v106;
      md::RoadTileData::updateWithContext(v105, a2, *(char *)(v104 + 48), (uint64_t *)(v104 + 232));
      uint64_t v107 = *(void *)(v105 + 720);
      if (v107)
      {
        uint64_t v108 = *(void *)(v107 + 200);
        uint64_t v109 = *((void *)this + 55);
        if (v108) {
          BOOL v110 = v108 == v109;
        }
        else {
          BOOL v110 = 0;
        }
        if (!v110) {
          md::RoadLayer::setSharedResources(*(void **)(v105 + 720), v109);
        }
        md::RoadLayer::layout(v107, (uint64_t)v142);
        md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(void **)(v107 + 8), *(void **)(v107 + 16), v166, v111);
      }
      uint64_t v112 = *(void *)(v105 + 728);
      if (v112)
      {
        md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v152, a2);
        __int16 v162 = 0;
        char v163 = 0;
        LOWORD(v160) = v143;
        char v165 = v149;
        int v164 = v148;
        uint64_t v113 = *(void *)(v112 + 192);
        uint64_t v114 = *((void *)this + 59);
        if (v113) {
          BOOL v115 = v113 == v114;
        }
        else {
          BOOL v115 = 0;
        }
        if (!v115) {
          *(void *)(v112 + 192) = v114;
        }
        md::PatternedLayer::layout(v112, (uint64_t)v152);
        md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(*(void **)(v112 + 8), *(void **)(v112 + 16), v166, v116);
      }
      if (*(void *)(v104 + 400)) {
        BOOL v117 = v140 == 0;
      }
      else {
        BOOL v117 = 1;
      }
      if (v117) {
        goto LABEL_186;
      }
      md::JunctionLayoutContext::JunctionLayoutContext((md::JunctionLayoutContext *)v152, a2);
      char v156 = v143;
      char v119 = v138;
      if ((_BYTE)v143) {
        char v119 = v137 + *(unsigned char *)(v105 + 169);
      }
      char v157 = v119;
      uint64_t v121 = *(void *)(v104 + 232);
      int v120 = *(std::__shared_weak_count **)(v104 + 240);
      if (v120) {
        atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v122 = v161;
      uint64_t v160 = v121;
      long long v161 = v120;
      if (v122)
      {
        if (!atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      uint64_t v124 = *(void *)(v104 + 216);
      unint64_t v123 = *(std::__shared_weak_count **)(v104 + 224);
      if (v123) {
        goto LABEL_214;
      }
LABEL_215:
      unsigned int v125 = v159;
      uint64_t v158 = v124;
      long long v159 = v123;
      if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
      float32x4_t v126 = *(md::TrailJunctionsResource **)(v104 + 400);
      uint64_t v127 = *((void *)v126 + 14);
      uint64_t v128 = *((void *)this + 64);
      if (!v127 || v127 != v128) {
        *((void *)v126 + 14) = v128;
      }
      md::TrailJunctionsResource::updateWithContext(v126, (const md::JunctionLayoutContext *)v152, v118);
      v167[0] = &unk_1EF573110;
      v167[1] = &v166;
      v167[2] = &v151;
      int v168 = v167;
      md::TrailJunctionsResource::collectRenderItems((uint64_t)v126, (uint64_t)v167);
      if (v168 == v167)
      {
        (*(void (**)(void *))(v167[0] + 32))(v167);
        uint64_t v129 = v161;
        if (!v161) {
          goto LABEL_228;
        }
      }
      else
      {
        if (v168) {
          (*(void (**)(void *))(*v168 + 40))(v168);
        }
        uint64_t v129 = v161;
        if (!v161)
        {
LABEL_228:
          uint64_t v130 = v159;
          if (v159) {
            goto LABEL_229;
          }
          goto LABEL_234;
        }
      }
      if (atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_228;
      }
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
      uint64_t v130 = v159;
      if (v159)
      {
LABEL_229:
        if (!atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
LABEL_234:
      float v131 = v155;
      if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
      char v103 = 1;
LABEL_186:
      if (++v102 == v101) {
        goto LABEL_238;
      }
    }
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
    uint64_t v124 = *(void *)(v104 + 216);
    unint64_t v123 = *(std::__shared_weak_count **)(v104 + 224);
    if (!v123) {
      goto LABEL_215;
    }
LABEL_214:
    atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_215;
  }
  char v103 = 0;
LABEL_238:
  unint64_t v132 = *(void *)(v166 + 72);
  int v133 = *(uint64_t **)(v166 + 80);
  unint64_t v134 = 126 - 2 * __clz((uint64_t)((uint64_t)v133 - v132) >> 3);
  if (v133 == (uint64_t *)v132) {
    uint64_t v135 = 0;
  }
  else {
    uint64_t v135 = v134;
  }
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v132, v133, v135, 1);
  if ((v103 & 1) != 0 && v151)
  {
    v152[0] = 0;
    md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles((uint64_t)this, a2, (uint64_t)v151, v137, v152);
    ggl::CommandBuffer::stableSortRenderItems((__n128 *)v151[9], (char *)v151[10]);
  }
  if (!v174)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v174 + 48))(v174);
  uint64_t result = v174;
  if (v174 == v173) {
    return (void *)(*(uint64_t (**)(void *))(v173[0] + 32))(v173);
  }
  if (v174) {
    return (void *)(*(uint64_t (**)(void *))(*v174 + 40))(v174);
  }
  return result;
}

void sub_1A2529904(_Unwind_Exception *a1)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 128));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "HikingLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::operator()(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  os_signpost_id_t v4 = *(uint64_t **)(a1 + 16);
  uint64_t v5 = *a2;
  int v6 = *a3;
  *(void *)(v5 + 48) = 0;
  if (v6)
  {
    uint64_t result = *v3;
    return ggl::CommandBuffer::pushRenderItem(result, v5);
  }
  uint64_t result = *v4;
  if (*v4) {
    return ggl::CommandBuffer::pushRenderItem(result, v5);
  }
  return result;
}

__n128 std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF573110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF573110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_2>,void ()(ggl::RenderItem *,BOOL)>::~__func()
{
}

void std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "HikingLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5730C8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5730C8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573080;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573080;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::HikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::HikingRenderLayer::~HikingRenderLayer(md::HikingRenderLayer *this)
{
  md::HikingRenderLayer::~HikingRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF536D28;
  uint64_t v2 = (uint64_t *)*((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((void *)v2[15]);
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    os_signpost_id_t v4 = *v2;
    *uint64_t v2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    MEMORY[0x1A6239270](v2, 0x1020C40455D1DCFLL);
  }
  md::RoadRenderLayer::~RoadRenderLayer(this);
}

BOOL md::TransitLineLabelFeature::hasAnnotatedShieldText(md::TransitLineLabelFeature *this)
{
  uint64_t v1 = *((void *)this + 10);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 264);
  if (v3)
  {
    if (!*(unsigned char *)(v3 + 56)) {
      return 0;
    }
  }
  else
  {
    os_signpost_id_t v4 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(*((void *)this + 10));
    uint64_t v3 = *v4;
    *(void *)(v1 + 264) = *v4;
    if (!*(unsigned char *)(v3 + 56)) {
      return 0;
    }
  }
  if (*(unsigned char *)(v3 + 60)) {
    return *(unsigned __int8 *)(*((void *)this + 10) + 144) - 3 < 2;
  }
  return 0;
}

void md::TransitLineLabelFeature::removeTile(uint64_t a1, uint64_t *a2)
{
  md::LabelLineStore::removeRoadFeaturesInTile<geo::codec::VectorTile>(*(void *)(a1 + 192), a2);
  std::mutex::lock((std::mutex *)(a1 + 608));
  unint64_t v4 = *(void *)(a1 + 688);
  unint64_t v5 = *(void *)(a1 + 696);
  if (v4 >= v5)
  {
    uint64_t v9 = *(void *)(a1 + 680);
    uint64_t v10 = (uint64_t)(v4 - v9) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      abort();
    }
    uint64_t v12 = v5 - v9;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v11;
    }
    if (v13)
    {
      uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 704) + 16))(*(void *)(a1 + 704), 32 * v13, 8);
      uint64_t v15 = v14 + 32 * v10;
      uint64_t v16 = v14 + 32 * v13;
      if (v14)
      {
        *(unsigned char *)uint64_t v15 = 2;
        uint64_t v18 = *a2;
        uint64_t v17 = a2[1];
        *(void *)(v15 + 8) = 0;
        *(void *)(v15 + 16) = v18;
        *(void *)(v15 + 24) = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v15 = 32 * v10;
    }
    uint64_t v8 = v15 + 32;
    uint64_t v19 = *(void *)(a1 + 688);
    uint64_t v20 = *(void *)(a1 + 680);
    if (v19 == v20)
    {
      *(void *)(a1 + 680) = v15;
      *(void *)(a1 + 688) = v8;
      uint64_t v22 = *(void *)(a1 + 696);
      *(void *)(a1 + 696) = v16;
    }
    else
    {
      do
      {
        *(_OWORD *)(v15 - 32) = *(_OWORD *)(v19 - 32);
        *(_OWORD *)(v15 - 16) = *(_OWORD *)(v19 - 16);
        v15 -= 32;
        *(void *)(v19 - 16) = 0;
        *(void *)(v19 - 8) = 0;
        v19 -= 32;
      }
      while (v19 != v20);
      uint64_t v19 = *(void *)(a1 + 680);
      uint64_t v21 = *(void *)(a1 + 688);
      *(void *)(a1 + 680) = v15;
      *(void *)(a1 + 688) = v8;
      uint64_t v22 = *(void *)(a1 + 696);
      for (*(void *)(a1 + 696) = v16; v21 != v19; v21 -= 32)
      {
        BOOL v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    if (v19) {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 704) + 40))(*(void *)(a1 + 704), v19, v22 - v19);
    }
  }
  else
  {
    if (v4)
    {
      *(unsigned char *)unint64_t v4 = 2;
      uint64_t v7 = *a2;
      uint64_t v6 = a2[1];
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = v7;
      *(void *)(v4 + 24) = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
    }
    uint64_t v8 = v4 + 32;
  }
  *(void *)(a1 + 688) = v8;
  atomic_store(1u, (unsigned __int8 *)(a1 + 672));
  std::mutex::unlock((std::mutex *)(a1 + 608));
}

void sub_1A252A1CC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::TransitLineLabelFeature::debugPopulateAttributeStrings(uint64_t a1, void *a2, uint64_t a3, unsigned int *a4)
{
  id v67 = a2;
  uint64_t v6 = *(void *)(a1 + 232);
  if (!v6) {
    goto LABEL_12;
  }
  unsigned int v7 = *a4;
  uint64_t v8 = a1 + 232;
  do
  {
    unsigned int v9 = *(_DWORD *)(v6 + 32);
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      unint64_t v11 = (uint64_t *)v6;
    }
    else {
      unint64_t v11 = (uint64_t *)(v6 + 8);
    }
    if (v10) {
      uint64_t v8 = v6;
    }
    uint64_t v6 = *v11;
  }
  while (*v11);
  if (v8 == a1 + 232 || v7 < *(_DWORD *)(v8 + 32))
  {
LABEL_12:
    uint64_t v12 = 0;
    uint64_t v77 = 0;
    unint64_t v78 = 0;
LABEL_13:
    uint64_t v13 = **(void **)(a1 + 504);
    if (v13) {
      uint64_t v14 = v13 + 8;
    }
    else {
      uint64_t v14 = 0;
    }
    goto LABEL_16;
  }
  uint64_t v58 = *(void *)(v8 + 40);
  uint64_t v12 = *(std::__shared_weak_count **)(v8 + 48);
  uint64_t v77 = v58;
  unint64_t v78 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v58) {
    goto LABEL_13;
  }
  unint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 128))(v58);
  unint64_t v60 = *(void **)(a1 + 576);
  if (!v60) {
    goto LABEL_13;
  }
  uint64_t v61 = (void *)(a1 + 576);
  do
  {
    unint64_t v62 = v60[4];
    BOOL v63 = v62 >= v59;
    if (v62 >= v59) {
      double v64 = v60;
    }
    else {
      double v64 = v60 + 1;
    }
    if (v63) {
      uint64_t v61 = v60;
    }
    unint64_t v60 = (void *)*v64;
  }
  while (*v64);
  if (v61 == (void *)(a1 + 576)) {
    goto LABEL_13;
  }
  if (v61[4] > v59) {
    goto LABEL_13;
  }
  uint64_t v14 = v61[5];
  if (!v14) {
    goto LABEL_13;
  }
LABEL_16:
  uint64_t v15 = *(void *)(v14 + 8);
  uint64_t v65 = *(void *)(v14 + 16);
  if (v15 != v65)
  {
    uint64_t v16 = 0;
    uint64_t v17 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    while (1)
    {
      uint64_t v18 = *(unsigned __int16 *)(v15 + 14);
      uint64_t v19 = *(void *)(a1 + 536);
      long long v74 = 0uLL;
      uint64_t v75 = 0;
      {
        operator new();
      }
      uint64_t v76 = *((void *)v17 + 91);
      long long v71 = 0uLL;
      uint64_t v72 = 0;
      {
        operator new();
      }
      uint64_t v73 = *((void *)v17 + 91);
      uint64_t v20 = v19 + 32 * v18;
      int v22 = *(unsigned __int8 *)(v20 + 8);
      uint64_t v21 = (unsigned __int8 *)(v20 + 8);
      if (v22 == 255)
      {
        if (*(_WORD *)(v19 + 32 * v18 + 12))
        {
          uint64_t v24 = *(void *)(a1 + 352) + 48 * *(unsigned __int16 *)(v19 + 32 * v18 + 10);
          if (&v74 != (long long *)v24)
          {
            char v25 = *(unsigned char *)(v24 + 23);
            if (SHIBYTE(v75) < 0)
            {
              if (v25 >= 0) {
                long double v38 = (void *)(*(void *)(a1 + 352) + 48 * *(unsigned __int16 *)(v19 + 32 * v18 + 10));
              }
              else {
                long double v38 = *(void **)v24;
              }
              if (v25 >= 0) {
                size_t v39 = *(unsigned __int8 *)(v24 + 23);
              }
              else {
                size_t v39 = *(void *)(v24 + 8);
              }
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v74, v38, v39);
            }
            else if ((*(unsigned char *)(v24 + 23) & 0x80) != 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)&v74, *(void **)v24, *(void *)(v24 + 8));
            }
            else
            {
              long long v26 = *(_OWORD *)v24;
              uint64_t v75 = *(void *)(v24 + 16);
              long long v74 = v26;
            }
          }
          if (SHIBYTE(v72) < 0)
          {
            *((void *)&v71 + 1) = 6;
            double v40 = (char *)v71;
          }
          else
          {
            HIBYTE(v72) = 6;
            double v40 = (char *)&v71;
          }
          strcpy(v40, "SHIELD");
        }
        goto LABEL_80;
      }
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 472))(a1);
      if (v23)
      {
        uint64_t v70 = *(void *)(v23 + 24);
        if (*(char *)(v23 + 23) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&__dst, *(void **)v23, *(void *)(v23 + 8));
        }
        else
        {
          long long __dst = *(_OWORD *)v23;
          uint64_t v69 = *(void *)(v23 + 16);
        }
        size_t v27 = HIBYTE(v69);
      }
      else
      {
        {
          operator new();
        }
        size_t v27 = 0;
        uint64_t v70 = *((void *)v17 + 91);
        HIBYTE(v69) = 0;
        LOBYTE(__dst) = 0;
      }
      int v28 = (char)v27;
      if (SHIBYTE(v75) < 0) {
        break;
      }
      if ((char)v27 < 0)
      {
        uint64_t v29 = __dst;
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)&v74, (void *)__dst, *((size_t *)&__dst + 1));
LABEL_47:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v70 + 40))(v70, v29, v69 & 0x7FFFFFFFFFFFFFFFLL);
        goto LABEL_48;
      }
      long long v74 = __dst;
      uint64_t v75 = v69;
LABEL_48:
      uint64_t v32 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 480))(a1, *v21);
      if (v32)
      {
        uint64_t v70 = *(void *)(v32 + 24);
        if (*(char *)(v32 + 23) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&__dst, *(void **)v32, *(void *)(v32 + 8));
        }
        else
        {
          long long __dst = *(_OWORD *)v32;
          uint64_t v69 = *(void *)(v32 + 16);
        }
        size_t v33 = HIBYTE(v69);
      }
      else
      {
        {
          operator new();
        }
        size_t v33 = 0;
        uint64_t v70 = *((void *)v17 + 91);
        HIBYTE(v69) = 0;
        LOBYTE(__dst) = 0;
      }
      int v34 = (char)v33;
      if ((SHIBYTE(v72) & 0x80000000) == 0)
      {
        if (((char)v33 & 0x80000000) == 0)
        {
          long long v71 = __dst;
          uint64_t v72 = v69;
          goto LABEL_80;
        }
        uint64_t v35 = __dst;
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)&v71, (void *)__dst, *((size_t *)&__dst + 1));
LABEL_67:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v70 + 40))(v70, v35, v69 & 0x7FFFFFFFFFFFFFFFLL);
        goto LABEL_80;
      }
      uint64_t v35 = __dst;
      if ((v33 & 0x80u) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (long long *)__dst;
      }
      if ((v33 & 0x80u) == 0) {
        size_t v37 = v33;
      }
      else {
        size_t v37 = *((void *)&__dst + 1);
      }
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v71, p_dst, v37);
      if (v34 < 0) {
        goto LABEL_67;
      }
LABEL_80:
      long long __dst = 0uLL;
      unsigned int v41 = *(_DWORD *)(v15 + 16);
      if (v41 == -1) {
        unsigned int v41 = *(_DWORD *)(v19 + 32 * v18 + 24);
      }
      uint64_t v42 = (uint64_t *)(*(void *)(a1 + 272) + 80 * v41);
      uint64_t v43 = *v42;
      uint64_t v44 = v42[1];
      if (v44)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
        *(void *)&long long __dst = v43;
        *((void *)&__dst + 1) = v44;
      }
      else
      {
        *(void *)&long long __dst = v43;
      }
      float32x4_t v45 = NSString;
      int v46 = SHIBYTE(v75);
      uint64_t v47 = (long long *)v74;
      int v48 = SHIBYTE(v72);
      int v49 = (long long *)v71;
      uint64_t v50 = md::HighlightHelper::debugAttributesToString((gss::Allocator *)&__dst);
      uint64_t v51 = (void *)v50;
      uint64_t v52 = &v71;
      if (v48 < 0) {
        uint64_t v52 = v49;
      }
      uint64_t v53 = &v74;
      if (v46 < 0) {
        uint64_t v53 = v47;
      }
      uint64_t v54 = [v45 stringWithFormat:@"[%i]\"%s(%s)\":{%@}", v16, v53, v52, v50];
      [v67 addObject:v54];
      uint64_t v17 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];

      unint64_t v55 = md::LabelFeature::debugClientAttributesToString((uint64_t *)&__dst, *(void *)(a3 + 336));
      if (v55)
      {
        int v56 = [NSString stringWithFormat:@"{%@}", v55];
        [v67 addObject:v56];
      }
      unint64_t v57 = (std::__shared_weak_count *)*((void *)&__dst + 1);
      if (*((void *)&__dst + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
        if (SHIBYTE(v72) < 0)
        {
LABEL_18:
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v73 + 40))(v73, v71, v72 & 0x7FFFFFFFFFFFFFFFLL);
          if (SHIBYTE(v75) < 0) {
            goto LABEL_95;
          }
          goto LABEL_19;
        }
      }
      else if (SHIBYTE(v72) < 0)
      {
        goto LABEL_18;
      }
      if (SHIBYTE(v75) < 0) {
LABEL_95:
      }
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v76 + 40))(v76, v74, v75 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_19:
      v15 += 20;
      uint64_t v16 = (v16 + 1);
      if (v15 == v65)
      {
        uint64_t v12 = v78;
        goto LABEL_107;
      }
    }
    uint64_t v29 = __dst;
    if ((v27 & 0x80u) == 0) {
      unint64_t v30 = &__dst;
    }
    else {
      unint64_t v30 = (long long *)__dst;
    }
    if ((v27 & 0x80u) == 0) {
      size_t v31 = v27;
    }
    else {
      size_t v31 = *((void *)&__dst + 1);
    }
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v74, v30, v31);
    if ((v28 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
LABEL_107:
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A252A9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v16 - 104);

  _Unwind_Resume(a1);
}

unint64_t md::TransitLineLabelFeature::populateFeatureIDs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 544);
  uint64_t v5 = *(void *)(a1 + 536);
  {
    operator new();
  }
  uint64_t v45 = mdm::Allocator::instance(void)::alloc;
  if (v4 == v5)
  {
    unint64_t v9 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    uint64_t v6 = v4 - v5;
    if (v4 - v5 < 0) {
      abort();
    }
    unint64_t v7 = v6 >> 5;
    uint64_t v8 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, (unint64_t)v6 >> 2, 8);
    unint64_t v9 = v8;
    uint64_t v10 = 0;
    unint64_t v11 = (uint64_t *)(v8 + 8 * v7);
    do
    {
      if (v8 + v10) {
        *(void *)(v8 + v10) = 0;
      }
      v10 += 8;
    }
    while (8 * v7 != v10);
    if (v7 <= 1) {
      unint64_t v12 = 1;
    }
    else {
      unint64_t v12 = v7;
    }
    if (v12 >= 4)
    {
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v14 = (int64x2_t)xmmword_1A28FC760;
      uint64_t v15 = (int64x2_t *)(v8 + 16);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      int64x2_t v17 = vdupq_n_s64(4uLL);
      unint64_t v18 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15[-1] = v14;
        *uint64_t v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, v17);
        v15 += 2;
        v18 -= 4;
      }
      while (v18);
      goto LABEL_21;
    }
    unint64_t v13 = 0;
    do
    {
      *(void *)(v8 + 8 * v13) = v13;
      ++v13;
LABEL_21:
      ;
    }
    while (v12 != v13);
  }
  unint64_t v19 = 126 - 2 * __clz((uint64_t)((uint64_t)v11 - v9) >> 3);
  uint64_t v46 = a1;
  if (v11 == (uint64_t *)v9) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  unint64_t result = std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,false>(v9, v11, (uint64_t)&v46, v20, 1);
  if (v11 != (uint64_t *)v9)
  {
    int v22 = (void *)a2[1];
    uint64_t v23 = (void *)v9;
    while (1)
    {
      uint64_t v24 = (void *)(*(void *)(a1 + 536) + 32 * *v23);
      unint64_t v25 = a2[2];
      if ((unint64_t)v22 >= v25) {
        break;
      }
      if (v22) {
        *int v22 = *v24;
      }
      ++v22;
LABEL_28:
      a2[1] = (uint64_t)v22;
      if (++v23 == v11) {
        goto LABEL_53;
      }
    }
    uint64_t v26 = ((uint64_t)v22 - *a2) >> 3;
    if ((unint64_t)(v26 + 1) >> 61) {
      abort();
    }
    uint64_t v27 = v25 - *a2;
    uint64_t v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
      uint64_t v28 = v26 + 1;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v29 = v28;
    }
    if (v29)
    {
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 8 * v29, 8);
      unint64_t v30 = (void *)(result + 8 * v26);
      unint64_t v31 = result + 8 * v29;
      if (result) {
        *unint64_t v30 = *v24;
      }
    }
    else
    {
      unint64_t v31 = 0;
      unint64_t v30 = (void *)(8 * v26);
    }
    uint64_t v32 = *a2;
    uint64_t v33 = a2[1];
    int v34 = v30;
    if (v33 != *a2)
    {
      unint64_t v35 = v33 - *a2 - 8;
      if (v35 < 0x38)
      {
        int v34 = v30;
      }
      else
      {
        int v34 = v30;
        if ((unint64_t)(v33 - (void)v30) >= 0x20)
        {
          uint64_t v36 = (v35 >> 3) + 1;
          uint64_t v37 = v33 - 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
          long double v38 = v30 - 2;
          size_t v39 = (long long *)(v33 - 16);
          uint64_t v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v41 = *v39;
            *(v38 - 1) = *(v39 - 1);
            *long double v38 = v41;
            v38 -= 2;
            v39 -= 2;
            v40 -= 4;
          }
          while (v40);
          int v34 = &v30[-(v36 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v33 = v37;
          if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_51;
          }
        }
      }
      do
      {
        uint64_t v42 = *(void *)(v33 - 8);
        v33 -= 8;
        *--int v34 = v42;
      }
      while (v33 != v32);
    }
LABEL_51:
    int v22 = v30 + 1;
    *a2 = (uint64_t)v34;
    a2[1] = (uint64_t)(v30 + 1);
    uint64_t v43 = a2[2];
    a2[2] = v31;
    if (v32) {
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 40))(a2[3], v32, v43 - v32);
    }
    goto LABEL_28;
  }
LABEL_53:
  if (v9)
  {
    uint64_t v44 = *(uint64_t (**)(void))(*(void *)v45 + 40);
    return v44();
  }
  return result;
}

void sub_1A252AF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a11 + 40))(a11, v11, a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,false>(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
  while (2)
  {
    unint64_t v12 = a2 - 1;
    char v119 = a2 - 3;
    int v120 = a2 - 2;
    uint64_t j = v11;
    int v118 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = j;
          uint64_t v14 = (char *)a2 - (char *)j;
          unint64_t v15 = a2 - j;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v56 = *j;
                if (*(void *)(*(void *)(*(void *)a3 + 536) + 32 * (unsigned __int16)*v12 + 16) < *(void *)(*(void *)(*(void *)a3 + 536) + 32 * (unsigned __int16)*j + 16))
                {
                  *uint64_t j = *v12;
                  uint64_t *v12 = v56;
                }
                break;
              case 3uLL:
                uint64_t v57 = *(void *)(*(void *)a3 + 536);
                unint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(j, j + 1, v12, v57);
                break;
              case 4uLL:
                unint64_t result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(j, j + 1, j + 2, v12, a3);
                break;
              case 5uLL:
                unint64_t result = (unint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,0>(j, j + 1, j + 2, j + 3, v12, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            uint64_t v58 = *(void *)a3;
            if (a5)
            {
              if (j != a2)
              {
                unint64_t v59 = j + 1;
                if (j + 1 != a2)
                {
                  uint64_t v60 = 0;
                  uint64_t v61 = *(void *)(v58 + 536);
                  unint64_t v62 = j;
                  do
                  {
                    double v64 = v62;
                    unint64_t v62 = v59;
                    uint64_t v65 = v64[1];
                    uint64_t v66 = v61 + 32 * (unsigned __int16)v65;
                    unsigned int v67 = *(_DWORD *)(v66 + 20);
                    uint64_t v68 = (unsigned __int16)*v64;
                    unint64_t result = *(unsigned int *)(v61 + 32 * v68 + 20);
                    if (*(void *)(v66 + 16) < *(void *)(v61 + 32 * v68 + 16))
                    {
                      v64[1] = *v64;
                      BOOL v63 = j;
                      if (v64 != j)
                      {
                        uint64_t v69 = (_DWORD *)(v66 + 16);
                        uint64_t v70 = v60;
                        while (1)
                        {
                          unint64_t result = (unsigned __int16)*(uint64_t *)((char *)j + v70 - 8);
                          unsigned int v71 = *(_DWORD *)(v61 + 32 * result + 20);
                          if (v67 >= v71)
                          {
                            if (v67 != v71)
                            {
                              BOOL v63 = (uint64_t *)((char *)j + v70);
                              goto LABEL_94;
                            }
                            unint64_t result = *(unsigned int *)(v61 + 32 * result + 16);
                            if (*v69 >= result) {
                              break;
                            }
                          }
                          --v64;
                          *(uint64_t *)((char *)j + v70) = *(uint64_t *)((char *)j + v70 - 8);
                          v70 -= 8;
                          if (!v70)
                          {
                            BOOL v63 = j;
                            goto LABEL_94;
                          }
                        }
                        BOOL v63 = v64;
                      }
LABEL_94:
                      uint64_t *v63 = v65;
                    }
                    unint64_t v59 = v62 + 1;
                    v60 += 8;
                  }
                  while (v62 + 1 != a2);
                }
              }
            }
            else if (j != a2)
            {
              uint64_t v108 = j + 1;
              if (j + 1 != a2)
              {
                uint64_t v109 = *(void *)(v58 + 536);
                do
                {
                  BOOL v110 = v11;
                  uint64_t v11 = v108;
                  uint64_t v112 = *v110;
                  uint64_t v111 = v110[1];
                  uint64_t v113 = v109 + 32 * (unsigned __int16)v111;
                  unsigned int v114 = *(_DWORD *)(v113 + 20);
                  if (*(void *)(v113 + 16) < *(void *)(v109 + 32 * (unsigned __int16)*v110 + 16))
                  {
                    BOOL v115 = (_DWORD *)(v113 + 16);
                    do
                    {
                      __n128 v116 = v110;
                      uint64_t v117 = *--v110;
                      v110[2] = v112;
                      uint64_t v112 = v117;
                    }
                    while (__PAIR64__(v114, *v115) < *(void *)(v109 + 32 * (unsigned __int16)v117 + 16));
                    *__n128 v116 = v111;
                  }
                  uint64_t v108 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (j != a2)
            {
              int64_t v72 = (v15 - 2) >> 1;
              uint64_t v73 = *(void *)a3;
              int64_t v74 = v72;
              do
              {
                int64_t v75 = v74;
                if (v72 >= v74)
                {
                  uint64_t v76 = (2 * v74) | 1;
                  uint64_t v77 = &j[v76];
                  if (2 * v75 + 2 < (uint64_t)v15)
                  {
                    uint64_t v78 = *(void *)(v73 + 536);
                    if (*(void *)(v78 + 32 * *(unsigned __int16 *)v77 + 16) < *(void *)(v78
                                                                                             + 32
                                                                                             * *((unsigned __int16 *)v77
                                                                                               + 4)
                                                                                             + 16))
                    {
                      ++v77;
                      uint64_t v76 = 2 * v75 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v78 = *(void *)(v73 + 536);
                  }
                  unint64_t result = *v77;
                  uint64_t v79 = j[v75];
                  unsigned int v80 = *(_DWORD *)(v78 + 32 * (unsigned __int16)v79 + 20);
                  if (*(void *)(v78 + 32 * (unsigned __int16)*v77 + 16) >= *(void *)(v78
                                                                                          + 32 * (unsigned __int16)v79
                                                                                          + 16))
                  {
                    j[v75] = result;
                    if (v72 >= v76)
                    {
                      while (1)
                      {
                        uint64_t v81 = 2 * v76;
                        uint64_t v76 = (2 * v76) | 1;
                        unint64_t result = (unint64_t)&j[v76];
                        uint64_t v82 = v81 + 2;
                        if (v82 < (uint64_t)v15
                          && *(void *)(v78 + 32 * *(unsigned __int16 *)result + 16) < *(void *)(v78 + 32 * *(unsigned __int16 *)(result + 8) + 16))
                        {
                          result += 8;
                          uint64_t v76 = v82;
                        }
                        if (*(void *)(v78 + 32 * (unsigned __int16)*(void *)result + 16) < __PAIR64__(v80, *(_DWORD *)(v78 + 32 * (unsigned __int16)v79 + 16)))break; {
                        *uint64_t v77 = *(void *)result;
                        }
                        uint64_t v77 = (uint64_t *)result;
                        if (v72 < v76) {
                          goto LABEL_108;
                        }
                      }
                    }
                    unint64_t result = (unint64_t)v77;
LABEL_108:
                    *(void *)unint64_t result = v79;
                    uint64_t v73 = *(void *)a3;
                  }
                }
                int64_t v74 = v75 - 1;
              }
              while (v75);
              uint64_t v83 = (unint64_t)v14 >> 3;
              do
              {
                uint64_t v85 = 0;
                uint64_t v86 = *j;
                uint64_t v87 = *(void *)a3;
                __n128 v88 = j;
                do
                {
                  int8x8_t v89 = v88;
                  v88 += v85 + 1;
                  uint64_t v90 = 2 * v85;
                  uint64_t v85 = (2 * v85) | 1;
                  uint64_t v91 = v90 + 2;
                  if (v91 < v83)
                  {
                    uint64_t v92 = *(unsigned __int16 *)v88;
                    unint64_t result = *((unsigned __int16 *)v88 + 4);
                    uint64_t v93 = *(void *)(v87 + 536);
                    unsigned int v94 = *(_DWORD *)(v93 + 32 * v92 + 20);
                    unsigned int v95 = *(_DWORD *)(v93 + 32 * result + 20);
                    if (v94 < v95
                      || v94 == v95
                      && (unint64_t result = *(unsigned int *)(v93 + 32 * result + 16),
                          *(_DWORD *)(v93 + 32 * v92 + 16) < result))
                    {
                      ++v88;
                      uint64_t v85 = v91;
                    }
                  }
                  *int8x8_t v89 = *v88;
                }
                while (v85 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
                if (v88 == --a2)
                {
                  *__n128 v88 = v86;
                }
                else
                {
                  *__n128 v88 = *a2;
                  *a2 = v86;
                  uint64_t v96 = (char *)v88 - (char *)j + 8;
                  if (v96 >= 9)
                  {
                    unint64_t v97 = ((unint64_t)v96 >> 3) - 2;
                    unint64_t v98 = v97 >> 1;
                    uint64_t v99 = &j[v97 >> 1];
                    uint64_t v100 = *v88;
                    uint64_t v101 = *(void *)(*(void *)a3 + 536);
                    unint64_t result = (unsigned __int16)*v99;
                    unsigned int v102 = *(_DWORD *)(v101 + 32 * result + 20);
                    uint64_t v103 = (unsigned __int16)*v88;
                    unsigned int v104 = *(_DWORD *)(v101 + 32 * v103 + 20);
                    if (v102 < v104
                      || v102 == v104
                      && (unint64_t result = *(unsigned int *)(v101 + 32 * result + 16),
                          result < *(_DWORD *)(v101 + 32 * v103 + 16)))
                    {
                      *__n128 v88 = *v99;
                      if (v97 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v105 = v98 - 1;
                          unint64_t v98 = (v98 - 1) >> 1;
                          char v106 = &j[v98];
                          unint64_t result = (unsigned __int16)*v106;
                          unsigned int v107 = *(_DWORD *)(v101 + 32 * result + 20);
                          if (v107 >= v104)
                          {
                            if (v107 != v104) {
                              break;
                            }
                            unint64_t result = *(unsigned int *)(v101 + 32 * result + 16);
                            if (result >= *(_DWORD *)(v101 + 32 * v103 + 16)) {
                              break;
                            }
                          }
                          *uint64_t v99 = *v106;
                          uint64_t v99 = &j[v98];
                          if (v105 <= 1) {
                            goto LABEL_149;
                          }
                        }
                      }
                      char v106 = v99;
LABEL_149:
                      *char v106 = v100;
                    }
                  }
                }
              }
              while (v83-- > 2);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          int64x2_t v17 = &j[v15 >> 1];
          uint64_t v18 = *(void *)(*(void *)a3 + 536);
          if ((unint64_t)v14 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v11, &v11[v15 >> 1], v12, v18);
            unint64_t v19 = &v11[v16];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v11 + 1, v19 - 1, v120, *(void *)(*(void *)a3 + 536));
            a2 = v118;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v11 + 2, &v11[v16 + 1], v119, *(void *)(*(void *)a3 + 536));
            unint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v19 - 1, v17, &v11[v16 + 1], *(void *)(*(void *)a3 + 536));
            uint64_t v20 = *v11;
            uint64_t *v11 = *v19;
            *unint64_t v19 = v20;
          }
          else
          {
            unint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(&v11[v15 >> 1], v11, v12, v18);
          }
          --a4;
          uint64_t v21 = *(void *)a3;
          uint64_t v22 = *v11;
          if (a5)
          {
            uint64_t v23 = *(void *)(v21 + 536);
            uint64_t v24 = (unsigned __int16)*v11;
            unsigned int v25 = *(_DWORD *)(v23 + 32 * v24 + 20);
            break;
          }
          uint64_t v26 = *((unsigned __int16 *)v11 - 4);
          uint64_t v23 = *(void *)(v21 + 536);
          unsigned int v27 = *(_DWORD *)(v23 + 32 * v26 + 20);
          uint64_t v24 = (unsigned __int16)*v11;
          unsigned int v25 = *(_DWORD *)(v23 + 32 * v24 + 20);
          if (v27 < v25) {
            break;
          }
          if (v27 == v25)
          {
            unsigned int v25 = *(_DWORD *)(v23 + 32 * v26 + 20);
            if (*(_DWORD *)(v23 + 32 * v26 + 16) < *(_DWORD *)(v23 + 32 * v24 + 16)) {
              break;
            }
          }
          uint64_t v44 = *(unsigned __int16 *)v12;
          if (__PAIR64__(v25, *(_DWORD *)(v23 + 32 * v24 + 16)) < *(void *)(v23 + 32 * v44 + 16))
          {
            uint64_t j = v11 + 1;
            uint64_t v45 = *((unsigned __int16 *)v11 + 4);
            for (unsigned int i = *(_DWORD *)(v23 + 32 * v45 + 20); v25 >= i; unsigned int i = *(_DWORD *)(v23 + 32 * v47 + 20))
            {
              if (v25 == i && *(_DWORD *)(v23 + 32 * v24 + 16) < *(_DWORD *)(v23 + 32 * v45 + 16)) {
                break;
              }
              unsigned int v47 = *((unsigned __int16 *)j++ + 4);
              uint64_t v45 = v47;
            }
          }
          else
          {
            for (uint64_t j = v11 + 1; j < a2; ++j)
            {
              if (__PAIR64__(v25, *(_DWORD *)(v23 + 32 * v24 + 16)) < *(void *)(v23
                                                                                 + 32 * *(unsigned __int16 *)j
                                                                                 + 16))
                break;
            }
          }
          int v48 = a2;
          if (j < a2)
          {
            int v48 = v12;
            while (__PAIR64__(v25, *(_DWORD *)(v23 + 32 * v24 + 16)) < *(void *)(v23
                                                                                  + 32 * (unsigned __int16)v44
                                                                                  + 16))
            {
              __int16 v49 = *((_WORD *)v48-- - 4);
              LOWORD(v44) = v49;
            }
          }
          if (j < v48)
          {
            uint64_t v50 = (_DWORD *)(v23 + 32 * v24 + 16);
            uint64_t v51 = *j;
            uint64_t v52 = *v48;
            do
            {
              *uint64_t j = v52;
              uint64_t *v48 = v51;
              do
              {
                uint64_t v53 = j[1];
                ++j;
                uint64_t v51 = v53;
              }
              while (__PAIR64__(v25, *v50) >= *(void *)(v23 + 32 * (unsigned __int16)v53 + 16));
              do
              {
                uint64_t v54 = *--v48;
                uint64_t v52 = v54;
              }
              while (__PAIR64__(v25, *v50) < *(void *)(v23 + 32 * (unsigned __int16)v54 + 16));
            }
            while (j < v48);
          }
          unint64_t v55 = j - 1;
          BOOL v5 = j - 1 >= v11;
          BOOL v6 = j - 1 == v11;
          if (j - 1 != v11) {
            uint64_t *v11 = *v55;
          }
          a5 = 0;
          *unint64_t v55 = v22;
        }
        uint64_t v28 = (_DWORD *)(v23 + 32 * v24 + 16);
        for (k = v11 + 1; ; ++k)
        {
          uint64_t v30 = *k;
          if (*(void *)(v23 + 32 * (unsigned __int16)*k + 16) >= __PAIR64__(v25, *v28)) {
            break;
          }
        }
        unint64_t v31 = k - 1;
        if (k - 1 == v11)
        {
          int v34 = a2;
          if (k < a2)
          {
            uint64_t v36 = *(unsigned __int16 *)v12;
            unsigned int v37 = *(_DWORD *)(v23 + 32 * v36 + 20);
            int v34 = v12;
            if (v37 >= v25)
            {
              int v34 = v12;
              do
              {
                if (v37 == v25)
                {
                  if (k >= v34 || *(_DWORD *)(v23 + 32 * v36 + 16) < *v28) {
                    break;
                  }
                }
                else if (k >= v34)
                {
                  break;
                }
                unsigned int v43 = *((unsigned __int16 *)v34-- - 4);
                uint64_t v36 = v43;
                unsigned int v37 = *(_DWORD *)(v23 + 32 * v43 + 20);
              }
              while (v37 >= v25);
            }
          }
        }
        else
        {
          uint64_t v32 = *(unsigned __int16 *)v12;
          unsigned int v33 = *(_DWORD *)(v23 + 32 * v32 + 20);
          int v34 = v12;
          while (v33 >= v25 && (v33 != v25 || *(_DWORD *)(v23 + 32 * v32 + 16) >= *v28))
          {
            unsigned int v35 = *((unsigned __int16 *)v34-- - 4);
            uint64_t v32 = v35;
            unsigned int v33 = *(_DWORD *)(v23 + 32 * v35 + 20);
          }
        }
        if (k < v34)
        {
          uint64_t v38 = *v34;
          size_t v39 = k;
          uint64_t v40 = v34;
          do
          {
            *v39++ = v38;
            *uint64_t v40 = v30;
            while (1)
            {
              uint64_t v30 = *v39;
              if (*(void *)(v23 + 32 * (unsigned __int16)*v39 + 16) >= __PAIR64__(v25, *v28)) {
                break;
              }
              ++v39;
            }
            unint64_t v31 = v39 - 1;
            do
            {
              uint64_t v41 = *--v40;
              uint64_t v38 = v41;
            }
            while (*(void *)(v23 + 32 * (unsigned __int16)v41 + 16) >= __PAIR64__(v25, *v28));
          }
          while (v39 < v40);
        }
        if (v31 != v11) {
          uint64_t *v11 = *v31;
        }
        *unint64_t v31 = v22;
        if (k >= v34) {
          break;
        }
LABEL_41:
        unint64_t result = std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,false>(v11, v31, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t j = v31 + 1;
      }
      BOOL v42 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v11, v31, a3);
      uint64_t j = v31 + 1;
      unint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(v31 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v42) {
        goto LABEL_41;
      }
    }
    a2 = v31;
    if (!v42) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = (unsigned __int16)*a2;
  uint64_t v7 = (unsigned __int16)*result;
  unsigned int v8 = *(_DWORD *)(a4 + 32 * v7 + 20);
  if (*(void *)(a4 + 32 * v6 + 16) >= *(void *)(a4 + 32 * v7 + 16))
  {
    if (*(void *)(a4 + 32 * (unsigned __int16)*a3 + 16) < *(void *)(a4 + 32 * v6 + 16))
    {
      *a2 = *a3;
      *a3 = v4;
      uint64_t v9 = *result;
      if (*(void *)(a4 + 32 * (unsigned __int16)*a2 + 16) < *(void *)(a4 + 32 * (unsigned __int16)*result + 16))
      {
        *unint64_t result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (*(void *)(a4 + 32 * (unsigned __int16)*a3 + 16) < *(void *)(a4 + 32 * v6 + 16))
    {
      *unint64_t result = *a3;
    }
    else
    {
      *unint64_t result = v4;
      *a2 = v5;
      if (*(void *)(a4 + 32 * (unsigned __int16)*a3 + 16) >= __PAIR64__(v8, *(_DWORD *)(a4 + 32 * v7 + 16))) {
        return result;
      }
      *a2 = *a3;
    }
    *a3 = v5;
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a2, a3, *(void *)(*(void *)a5 + 536));
  uint64_t v11 = *a3;
  uint64_t v12 = *(void *)(*(void *)a5 + 536);
  if (*(void *)(v12 + 32 * (unsigned __int16)*a4 + 16) < *(void *)(v12 + 32 * (unsigned __int16)*a3 + 16))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v13 = *a2;
    if (*(void *)(v12 + 32 * (unsigned __int16)*a3 + 16) < *(void *)(v12 + 32 * (unsigned __int16)*a2 + 16))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      if (*(void *)(v12 + 32 * (unsigned __int16)*a2 + 16) < *(void *)(v12 + 32 * (unsigned __int16)*a1 + 16))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  unint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a2, a3, a4, a6);
  uint64_t v13 = *a4;
  uint64_t v14 = *(void *)(*(void *)a6 + 536);
  if (*(void *)(v14 + 32 * (unsigned __int16)*a5 + 16) < *(void *)(v14 + 32 * (unsigned __int16)*a4 + 16))
  {
    *a4 = *a5;
    *a5 = v13;
    uint64_t v15 = *a3;
    if (*(void *)(v14 + 32 * (unsigned __int16)*a4 + 16) < *(void *)(v14 + 32 * (unsigned __int16)*a3 + 16))
    {
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = *a2;
      if (*(void *)(v14 + 32 * (unsigned __int16)*a3 + 16) < *(void *)(v14 + 32 * (unsigned __int16)*a2 + 16))
      {
        *a2 = *a3;
        *a3 = v16;
        uint64_t v17 = *a1;
        if (*(void *)(v14 + 32 * (unsigned __int16)*a2 + 16) < *(void *)(v14 + 32 * (unsigned __int16)*a1 + 16))
        {
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *a1;
      if (*(void *)(*(void *)(*(void *)a3 + 536) + 32 * (unsigned __int16)*(a2 - 1) + 16) < *(void *)(*(void *)(*(void *)a3 + 536) + 32 * (unsigned __int16)*a1 + 16))
      {
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1, *(void *)(*(void *)a3 + 536));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::populateFeatureIDs(std::vector<unsigned long long,geo::StdAllocator<unsigned long long,mdm::Allocator>> &)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, *(void *)(*(void *)a3 + 536));
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      uint64_t v13 = *(void *)(*(void *)a3 + 536);
      break;
  }
  while (1)
  {
    uint64_t v15 = *v10;
    uint64_t v16 = v13 + 32 * (unsigned __int16)*v10;
    unsigned int v17 = *(_DWORD *)(v16 + 20);
    if (*(void *)(v16 + 16) < *(void *)(v13 + 32 * (unsigned __int16)*v9 + 16))
    {
      uint64_t *v10 = *v9;
      uint64_t v14 = a1;
      if (v9 != a1)
      {
        uint64_t v18 = (_DWORD *)(v16 + 16);
        uint64_t v19 = v11;
        while (1)
        {
          uint64_t v20 = (unsigned __int16)*(uint64_t *)((char *)a1 + v19 + 8);
          unsigned int v21 = *(_DWORD *)(v13 + 32 * v20 + 20);
          if (v17 >= v21)
          {
            if (v17 != v21)
            {
              uint64_t v14 = v9;
              goto LABEL_7;
            }
            if (*v18 >= *(_DWORD *)(v13 + 32 * v20 + 16)) {
              break;
            }
          }
          --v9;
          *(uint64_t *)((char *)a1 + v19 + 16) = *(uint64_t *)((char *)a1 + v19 + 8);
          v19 -= 8;
          if (v19 == -16)
          {
            uint64_t v14 = a1;
            goto LABEL_7;
          }
        }
        uint64_t v14 = (uint64_t *)((char *)a1 + v19 + 16);
      }
LABEL_7:
      uint64_t *v14 = v15;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t md::TransitLineLabelFeature::styleForElementIndex(md::TransitLineLabelFeature *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 67);
  if (a2 >= (unint64_t)((*((void *)this + 68) - v2) >> 5)) {
    return 0;
  }
  unint64_t v3 = *(unsigned int *)(v2 + 32 * a2 + 24);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 35) - *((void *)this + 34)) >> 4) <= v3) {
    return *((void *)this + 10);
  }
  uint64_t v4 = *((void *)this + 12);
  if (v3 >= (*((void *)this + 13) - v4) >> 4) {
    return *((void *)this + 10);
  }
  else {
    return *(void *)(v4 + 16 * v3);
  }
}

void md::TransitLineLabelFeature::populateStyleQueries(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = 0;
  if ((*(uint64_t (**)(void *))(*a1 + 488))(a1)
    && (*(uint64_t (**)(void *, void))(*a1 + 480))(a1, 0))
  {
    operator new();
  }
  uint64_t v6 = 0;
  uint64_t v7 = (uint64_t *)a1[34];
  uint64_t v8 = (uint64_t *)a1[35];
  if (v7 != v8)
  {
    do
    {
      uint64_t v9 = v14;
      md::createFeatureAttributeSet((gss::Allocator *)v15, v7);
      md::LabelStyleCache::styleQueryForFeatureAttributes((uint64_t)&v13, a3, v15, v9);
      if (v15[0])
      {
        v15[1] = v15[0];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 40))(v16, v15[0], v15[2] - v15[0]);
      }
      uint64_t v10 = *(_OWORD **)(a2 + 8);
      if ((unint64_t)v10 >= *(void *)(a2 + 16))
      {
        uint64_t v11 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(a2, (uint64_t)&v13);
      }
      else
      {
        if (v10)
        {
          _OWORD *v10 = v13;
          long long v13 = 0uLL;
        }
        uint64_t v11 = v10 + 1;
      }
      *(void *)(a2 + 8) = v11;
      int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
      if (*((void *)&v13 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      v7 += 10;
    }
    while (v7 != v8);
    uint64_t v6 = v14;
  }
  uint64_t v14 = 0;
  if (v6)
  {
    if (*((char *)v6 + 23) < 0) {
      (*(void (**)(void, void, uint64_t))(*(void *)v6[3] + 40))(v6[3], *v6, v6[2] & 0x7FFFFFFFFFFFFFFFLL);
    }
    MEMORY[0x1A6239270](v6, 0x1032C402ED93987);
  }
}

void sub_1A252C524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MEMORY[0x1A6239270](v4, 0x1032C402ED93987);
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

const FeatureStyleAttributes **md::TransitLineLabelFeature::style(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v10 = *(void *)(a1 + 232);
    if (!v10) {
      goto LABEL_13;
    }
    uint64_t v11 = a1 + 232;
    do
    {
      unsigned int v12 = *(_DWORD *)(v10 + 32);
      BOOL v13 = v12 >= a2;
      if (v12 >= a2) {
        uint64_t v14 = (uint64_t *)v10;
      }
      else {
        uint64_t v14 = (uint64_t *)(v10 + 8);
      }
      if (v13) {
        uint64_t v11 = v10;
      }
      uint64_t v10 = *v14;
    }
    while (*v14);
    if (v11 != a1 + 232 && *(_DWORD *)(v11 + 32) <= a2)
    {
      uint64_t v19 = *(void *)(v11 + 40);
      uint64_t v15 = *(std::__shared_weak_count **)(v11 + 48);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v19)
      {
        unint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 128))(v19);
        unsigned int v21 = *(void **)(a1 + 576);
        if (!v21) {
          goto LABEL_40;
        }
        uint64_t v22 = a1 + 576;
        do
        {
          unint64_t v23 = v21[4];
          BOOL v24 = v23 >= v20;
          if (v23 >= v20) {
            unsigned int v25 = v21;
          }
          else {
            unsigned int v25 = v21 + 1;
          }
          if (v24) {
            uint64_t v22 = (uint64_t)v21;
          }
          unsigned int v21 = (void *)*v25;
        }
        while (*v25);
        if (v22 != a1 + 576 && *(void *)(v22 + 32) <= v20 && (uint64_t v26 = *(void *)(v22 + 40)) != 0)
        {
          unsigned int v27 = *(unsigned __int16 *)(v26 + 42);
          if (v27 == 0xFFFF) {
            unsigned int v27 = *(unsigned __int16 *)(a1 + 600);
          }
          uint64_t v28 = *(void *)(v26 + 8) + 20 * v27;
          uint64_t v16 = md::TransitLineLabelFeature::styleFromTransitLineSegment((void *)a1, *(_WORD *)(v28 + 14), *(_DWORD *)(v28 + 16));
        }
        else
        {
LABEL_40:
          uint64_t v16 = md::LineLabelFeature::style(a1, a2, a3, a4, a5);
        }
        goto LABEL_15;
      }
    }
    else
    {
LABEL_13:
      uint64_t v15 = 0;
    }
    uint64_t v16 = md::LineLabelFeature::style(a1, a2, a3, a4, a5);
LABEL_15:
    unsigned int v17 = v16;
    if (v15)
    {
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    return (const FeatureStyleAttributes **)v17;
  }
  return md::LineLabelFeature::style(a1, 0, a3, a4, a5);
}

void sub_1A252C7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *md::TransitLineLabelFeature::styleFromTransitLineSegment(void *a1, unsigned __int16 a2, unsigned int a3)
{
  if (a3 == -1)
  {
    unint64_t v5 = *(unsigned int *)(a1[67] + 32 * a2 + 24);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[35] - a1[34]) >> 4) > v5)
    {
      uint64_t v6 = a1[12];
      if (v5 < (a1[13] - v6) >> 4) {
        return (void *)(v6 + 16 * v5);
      }
    }
    return a1 + 10;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[35] - a1[34]) >> 4) <= a3) {
    return a1 + 10;
  }
  uint64_t v3 = a1[12];
  if (a3 < (unint64_t)((a1[13] - v3) >> 4)) {
    return (void *)(v3 + 16 * a3);
  }
  else {
    return a1 + 10;
  }
}

uint64_t md::TransitLineLabelFeature::publicShieldName(md::TransitLineLabelFeature *this)
{
  if (*((void *)this + 44) == *((void *)this + 45)) {
    return 0;
  }
  else {
    return *((void *)this + 44);
  }
}

void md::TransitLineLabelFeature::debugDraw(md::LineLabelFeature *a1, uint64_t a2, float32x2_t *a3, atomic_uchar *a4)
{
}

uint64_t md::TransitLineLabelFeature::debugString@<X0>(md::LineLabelFeature *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, unsigned int a4@<W3>, void *a5@<X8>)
{
  uint64_t v9 = a5;
  {
    unsigned int v16 = a4;
    uint64_t v14 = a2;
    uint64_t v15 = a3;
    BOOL v13 = a1;
    a1 = v13;
    a2 = v14;
    a3 = v15;
    a4 = v16;
    int v12 = v11;
    uint64_t v9 = a5;
    if (v12) {
      operator new();
    }
  }
  uint64_t v20 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v19) = 12;
  strcpy((char *)v18, "Transit line");
  uint64_t result = md::LineLabelFeature::debugRoadString(v9, a1, a2, a3, a4, (uint64_t)v18);
  if (SHIBYTE(v19) < 0) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v20 + 40))(v20, v18[0], v19 & 0x7FFFFFFFFFFFFFFFLL);
  }
  return result;
}

void sub_1A252C9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (SHIBYTE(a17) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a18 + 40))(a18, a15, a17 & 0x7FFFFFFFFFFFFFFFLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::TransitLineLabelFeature::labelFeatureType(md::TransitLineLabelFeature *this)
{
  return 9;
}

uint64_t md::TransitLineLabelFeature::featureID(md::TransitLineLabelFeature *this)
{
  uint64_t v1 = *((void *)this + 67);
  if (v1 == *((void *)this + 68)) {
    return 0;
  }
  else {
    return *(void *)v1;
  }
}

unint64_t md::TransitLineLabelFeature::populateFeatureInfo(md::TransitLineLabelFeature *this, md::LabelFeatureInfo *a2)
{
  uint64_t v4 = (char *)a2 + 16;
  if (!*((void *)a2 + 2))
  {
    std::mutex::lock((std::mutex *)((char *)this + 8));
    uint64_t v5 = *((void *)this + 19);
    if (v5) {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 16))(v5, v4);
    }
    std::mutex::unlock((std::mutex *)((char *)this + 8));
  }
  unint64_t result = md::TransitLineLabelFeature::populateFeatureIDs((uint64_t)this, (uint64_t *)a2 + 4);
  *(void *)a2 = 0;
  *((_DWORD *)a2 + 16) = (*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3;
  return result;
}

void sub_1A252CAD0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t md::TransitLineLabelFeature::updateDynamicStyling(md::TransitLineLabelFeature *this, md::LabelManager *a2, md::Label *a3)
{
  uint64_t v3 = (char *)*((void *)this + 29);
  if (v3)
  {
    unsigned int v6 = *((_DWORD *)a3 + 12);
    uint64_t v7 = (char *)this + 232;
    do
    {
      unsigned int v8 = *((_DWORD *)v3 + 8);
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        uint64_t v10 = (char **)v3;
      }
      else {
        uint64_t v10 = (char **)(v3 + 8);
      }
      if (v9) {
        uint64_t v7 = v3;
      }
      uint64_t v3 = *v10;
    }
    while (*v10);
    if (v7 != (char *)this + 232 && v6 >= *((_DWORD *)v7 + 8))
    {
      uint64_t v12 = *((void *)v7 + 5);
      int v11 = (std::__shared_weak_count *)*((void *)v7 + 6);
      uint64_t v97 = v12;
      unint64_t v98 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v12) {
        goto LABEL_111;
      }
      unint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 128))(v12);
      uint64_t v14 = (void *)*((void *)this + 72);
      if (!v14) {
        goto LABEL_111;
      }
      uint64_t v15 = (void *)((char *)this + 576);
      do
      {
        unint64_t v16 = v14[4];
        BOOL v17 = v16 >= v13;
        if (v16 >= v13) {
          uint64_t v18 = v14;
        }
        else {
          uint64_t v18 = v14 + 1;
        }
        if (v17) {
          uint64_t v15 = v14;
        }
        uint64_t v14 = (void *)*v18;
      }
      while (*v18);
      if (v15 == (void *)((char *)this + 576)) {
        goto LABEL_111;
      }
      if (v15[4] > v13) {
        goto LABEL_111;
      }
      uint64_t v19 = v15[5];
      if (!v19) {
        goto LABEL_111;
      }
      uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 21) + 64) + 16))(*(void *)(*((void *)a2 + 21) + 64));
      if (!v20) {
        goto LABEL_111;
      }
      unint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 128))(v12);
      md::LabelExternalObjectsModerator::externalTransitLink(&v95, v20, v21);
      if (v95
        && (unsigned __int8 v22 = atomic_load((unsigned __int8 *)(v95 + 104)), (v22 & 1) != 0)
        && (unsigned __int8 v23 = atomic_load((unsigned __int8 *)(v95 + 105)), (v23 & 1) != 0))
      {
        uint64_t v30 = v95;
        unint64_t v31 = (std::mutex *)(v95 + 40);
        std::mutex::lock((std::mutex *)(v95 + 40));
        uint64_t v33 = *(void *)(v30 + 24);
        uint64_t v32 = *(std::__shared_weak_count **)(v30 + 32);
        uint64_t v93 = v33;
        unsigned int v94 = v32;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::mutex::unlock(v31);
        if (v33)
        {
          uint64_t v34 = *(void *)(v33 + 8);
          if (*(void *)v33 != v34
            && (unint64_t v35 = (v34 - *(void *)v33) >> 4,
                uint64_t v36 = *((void *)this + 68),
                uint64_t v37 = *((void *)this + 67),
                v35 == (v36 - v37) >> 5)
            && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 2) == v35)
          {
            int v38 = *(unsigned __int8 *)(v19 + 40);
            int v39 = *(unsigned __int8 *)(v33 + 33);
            BOOL v83 = v38 != v39;
            if (v38 != v39) {
              *(unsigned char *)(v19 + 40) = v39;
            }
            int v40 = *(unsigned __int8 *)(v33 + 32);
            if (*(unsigned __int8 *)(v19 + 41) != v40)
            {
              *(unsigned char *)(v19 + 41) = v40;
              BOOL v83 = 1;
            }
            *(_WORD *)(v19 + 42) = -1;
            if (v36 == v37)
            {
              char v41 = 0;
              LOBYTE(v33) = 1;
            }
            else
            {
              char v41 = 0;
              uint64_t v42 = 0;
              if (v35 <= 1) {
                unint64_t v35 = 1;
              }
              uint64_t v81 = v19;
              unint64_t v82 = v35;
              uint64_t v80 = v33;
              do
              {
                uint64_t v43 = *(void *)v33;
                uint64_t v44 = *(void *)(v19 + 8);
                if (v83
                  || *(_DWORD *)(v44 + 20 * v42 + 16) == -1
                  || (uint64_t v45 = v43 + 16 * v42, *(unsigned __int8 *)(v44 + 20 * v42 + 6) != *(unsigned __int8 *)(v45 + 8))
                  || *(unsigned __int8 *)(v44 + 20 * v42 + 7) != *(unsigned __int8 *)(v45 + 9)
                  || (uint64_t v46 = v43 + 16 * v42, *(unsigned __int8 *)(v44 + 20 * v42 + 8) != *(unsigned __int8 *)(v46 + 10))
                  || (int v47 = *(unsigned __int8 *)(v44 + 20 * v42 + 4), v47 != *(unsigned __int8 *)(v46 + 11))
                  || *(unsigned __int8 *)(v44 + 20 * v42 + 5) != *(unsigned __int8 *)(v43 + 16 * v42 + 12))
                {
                  uint64_t v48 = v43 + 16 * v42;
                  uint64_t v85 = *(void *)(v19 + 8);
                  uint64_t v86 = v42;
                  __int16 v49 = (unsigned __int8 *)(v44 + 20 * v42);
                  v49[6] = *(unsigned char *)(v48 + 8);
                  v49 += 6;
                  *(_WORD *)(v49 + 1) = *(_WORD *)(v48 + 9);
                  *((_WORD *)v49 - 1) = *(_WORD *)(v48 + 11);
                  uint64_t v50 = *(const FeatureStyleAttributes **)(*((void *)this + 34)
                                                         + 80
                                                         * *(unsigned int *)(*((void *)this + 67) + 32 * v42 + 24));
                  uint64_t v51 = (std::__shared_weak_count *)operator new(0x40uLL);
                  uint64_t v87 = v49 - 2;
                  v51->__shared_owners_ = 0;
                  v51->__shared_weak_owners_ = 0;
                  v51->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F680;
                  uint64_t v52 = (void **)&v51[1].__vftable;
                  FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)&v51[1], v50);
                  uint64_t v91 = v51 + 1;
                  uint64_t v92 = v51;
                  uint64_t v53 = *v49;
                  uint64_t v54 = *(unsigned __int8 *)(v19 + 40);
                  uint64_t v55 = *(unsigned __int8 *)(v19 + 41);
                  uint64_t v56 = v49[1];
                  uint64_t v57 = v49[2];
                  uint64_t v88 = mdm::Allocator::instance(v58);
                  unint64_t v59 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v88 + 16))(v88, 40, 4);
                  uint64_t v60 = v59;
                  if (v59) {
                    *unint64_t v59 = (v53 << 32) | 0x10015;
                  }
                  v59[1] = ((v54 << 32) | 0x10015) + 5;
                  v59[2] = ((v55 << 32) | 0x10015) + 34;
                  v59[3] = ((v56 << 32) | 0x10015) + 6;
                  v59[4] = ((v57 << 32) | 0x10015) + 7;
                  uint64_t v61 = (char *)(v59 + 5);
                  if (*v87)
                  {
                    unint64_t v62 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v88 + 16))(v88, 80, 4);
                    uint64_t v19 = v81;
                    BOOL v63 = v62;
                    if (v62) {
                      v62[5] = 0x100010002;
                    }
                    int v84 = (char *)(v62 + 10);
                    v62[4] = v60[4];
                    void v62[3] = v60[3];
                    v62[2] = v60[2];
                    v62[1] = v60[1];
                    *unint64_t v62 = *v60;
                    uint64_t v61 = (char *)(v62 + 6);
                    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v88 + 40))(v88, v60, 40);
                  }
                  else
                  {
                    int v84 = (char *)(v59 + 5);
                    BOOL v63 = v59;
                    uint64_t v19 = v81;
                  }
                  if (((v61 - (char *)v63) & 0x7FFFFFFF8) != 0)
                  {
                    uint64_t v64 = 0;
                    char v65 = 0;
                    uint64_t v66 = ((unint64_t)(v61 - (char *)v63) >> 3);
                    unsigned __int8 v67 = BYTE1(v51[2].__shared_owners_);
                    while (1)
                    {
                      size_t v68 = v67;
                      uint64_t v69 = *v52;
                      if (v67) {
                        break;
                      }
LABEL_69:
                      v69[v68] = v63[v64];
                      unsigned __int8 v67 = BYTE1(v51[2].__shared_owners_) + 1;
                      BYTE1(v51[2].__shared_owners_) = v67;
                      ++v64;
                      char v65 = 1;
                      if (v64 == v66)
                      {
                        uint64_t v69 = *v52;
                        size_t v68 = v67;
LABEL_86:
                        qsort(v69, v68, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
                        goto LABEL_87;
                      }
                    }
                    if (v67 > 0x1Fu)
                    {
                      do
                      {
                        uint64_t v73 = 0;
                        int64_t v74 = (int *)v69;
                        while (1)
                        {
                          int v75 = *v74;
                          v74 += 2;
                          if (v75 == LODWORD(v63[v64])) {
                            break;
                          }
                          if (v68 == ++v73) {
                            goto LABEL_80;
                          }
                        }
                        HIDWORD(v69[v73]) = HIDWORD(v63[v64]);
LABEL_80:
                        ++v64;
                      }
                      while (v64 != v66);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v70 = 0;
                        unsigned int v71 = (int *)v69;
                        while (1)
                        {
                          int v72 = *v71;
                          v71 += 2;
                          if (v72 == LODWORD(v63[v64])) {
                            break;
                          }
                          if (v68 == ++v70) {
                            goto LABEL_69;
                          }
                        }
                        HIDWORD(v69[v70]) = HIDWORD(v63[v64++]);
                      }
                      while (v64 != v66);
                    }
                    if (v65) {
                      goto LABEL_86;
                    }
                  }
LABEL_87:
                  int8x8_t v89 = (char *)&v51[1];
                  uint64_t v90 = v51;
                  atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
                  uint64_t v42 = v86;
                  *(_DWORD *)(v85 + 20 * v86 + 16) = md::LineLabelFeature::styleIndexForAttributes((uint64_t)this, (uint64_t *)&v89);
                  uint64_t v76 = v90;
                  if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                  if (v63) {
                    (*(void (**)(uint64_t, uint64_t *, int64_t))(*(void *)v88 + 40))(v88, v63, v84 - (char *)v63);
                  }
                  uint64_t v77 = v92;
                  if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                  }
                  int v47 = *v87;
                  char v41 = 1;
                  uint64_t v33 = v80;
                }
                if (v47) {
                  *(_WORD *)(v19 + 42) = v42;
                }
                ++v42;
              }
              while (v42 != v82);
              LOBYTE(v33) = 1;
              uint64_t v32 = v94;
            }
          }
          else
          {
            char v41 = 0;
            LOBYTE(v33) = 0;
          }
        }
        else
        {
          char v41 = 0;
        }
        if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        if ((v33 & 1) == 0) {
          goto LABEL_107;
        }
        char v27 = v41;
      }
      else
      {
        uint64_t v25 = *(void *)(v19 + 8);
        uint64_t v24 = *(void *)(v19 + 16);
        uint64_t v26 = v24 - v25;
        if (v24 == v25)
        {
LABEL_107:
          uint64_t v78 = v96;
          if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
          int v11 = v98;
LABEL_111:
          if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
          return 0;
        }
        char v27 = 0;
        unint64_t v28 = v26 / 20;
        if (v28 <= 1) {
          unint64_t v28 = 1;
        }
        uint64_t v29 = (_DWORD *)(v25 + 16);
        do
        {
          if (*v29 != -1)
          {
            _DWORD *v29 = -1;
            char v27 = 1;
          }
          v29 += 5;
          --v28;
        }
        while (v28);
      }
      if (v27) {
        (*(void (**)(md::TransitLineLabelFeature *, md::LabelManager *))(*(void *)this + 536))(this, a2);
      }
      goto LABEL_107;
    }
  }
  return 0;
}

void sub_1A252D3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va2, a12);
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  if (v12) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a10 + 40))(a10, v12, a6 - v12);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v13 - 104);
  _Unwind_Resume(a1);
}

void md::TransitLineLabelFeature::updateText(md::TransitLineLabelFeature *this, void *a2, int a3)
{
  uint64_t v3 = (void *)*((void *)this + 72);
  if (v3)
  {
    unsigned int v6 = (void *)((char *)this + 576);
    do
    {
      unint64_t v7 = v3[4];
      BOOL v8 = v7 >= (unint64_t)a2;
      if (v7 >= (unint64_t)a2) {
        BOOL v9 = v3;
      }
      else {
        BOOL v9 = v3 + 1;
      }
      if (v8) {
        unsigned int v6 = v3;
      }
      uint64_t v3 = (void *)*v9;
    }
    while (*v9);
    if (v6 != (void *)((char *)this + 576) && v6[4] <= (unint64_t)a2)
    {
      uint64_t v95 = v6[5];
      if (v95)
      {
        uint64_t v90 = (std::mutex *)((char *)this + 440);
        std::mutex::lock((std::mutex *)((char *)this + 440));
        uint64_t v10 = *((void *)this + 44);
        for (uint64_t i = *((void *)this + 45); i != v10; i -= 48)
        {
          if (*(char *)(i - 25) < 0) {
            (*(void (**)(void, void, uint64_t))(**(void **)(i - 24) + 40))(*(void *)(i - 24), *(void *)(i - 48), *(void *)(i - 32) & 0x7FFFFFFFFFFFFFFFLL);
          }
        }
        *((void *)this + 45) = v10;
        uint64_t v12 = *((void *)this + 68) - *((void *)this + 67);
        if (v12)
        {
          uint64_t v13 = 0;
          int v93 = 0;
          unint64_t v14 = v12 >> 5;
          if (v14 <= 1) {
            unint64_t v14 = 1;
          }
          unint64_t v94 = v14;
          uint64_t v91 = (uint64_t *)((char *)this + 384);
          uint64_t v92 = (_OWORD *)((char *)this + 360);
          uint64_t v15 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
          while (1)
          {
            unint64_t v16 = (uint64_t *)geo::codec::vectorTransitLineAlongLink(a2, v13);
            uint64_t v17 = *(void *)(v95 + 8);
            uint64_t v108 = *((void *)this + 67);
            uint64_t v18 = v108 + 32 * v13;
            *(_DWORD *)(v18 + 10) = 0xFFFF;
            uint64_t v19 = (_WORD *)(v18 + 10);
            {
              operator new();
            }
            uint64_t v20 = *((void *)v15 + 91);
            long long v117 = 0uLL;
            uint64_t v118 = 0;
            {
              operator new();
            }
            uint64_t v119 = *((void *)v15 + 91);
            uint64_t v100 = v20;
            md::LabelFeature::textFromFeature((unint64_t)&__dst, v16, a3, (uint64_t)&v117, 0);
            *((void *)&v113 + 1) = v20;
            uint64_t v99 = __dst;
            uint64_t v102 = v113;
            if ((v113 & 0x8000000000000000) != 0) {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&__dst, (void *)__dst, *((unint64_t *)&__dst + 1));
            }
            uint64_t v116 = v119;
            uint64_t v97 = v19;
            if (SHIBYTE(v118) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&v114, (void *)v117, *((unint64_t *)&v117 + 1));
            }
            else
            {
              long long v114 = v117;
              uint64_t v115 = v118;
            }
            uint64_t v21 = BYTE7(v113);
            int v22 = SBYTE7(v113);
            unint64_t v23 = *((void *)&__dst + 1);
            if (SBYTE7(v113) < 0) {
              uint64_t v21 = *((void *)&__dst + 1);
            }
            uint64_t v96 = v17;
            if (!v21) {
              goto LABEL_39;
            }
            uint64_t v25 = (unsigned __int8 *)*((void *)this + 48);
            unint64_t v24 = *((void *)this + 49);
            if (v25 != (unsigned __int8 *)v24) {
              break;
            }
            unsigned __int8 v26 = 0;
LABEL_41:
            char v27 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
            if (v24 >= *((void *)this + 50))
            {
              uint64_t v29 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v91, &__dst);
            }
            else
            {
              if (v24)
              {
                *(void *)(v24 + 24) = *((void *)&v113 + 1);
                if (v22 < 0)
                {
                  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v24, (void *)__dst, v23);
                }
                else
                {
                  long long v28 = __dst;
                  *(void *)(v24 + 16) = v113;
                  *(_OWORD *)unint64_t v24 = v28;
                }
                uint64_t v30 = (void **)(v24 + 32);
                *(void *)(v24 + 56) = v116;
                if (SHIBYTE(v115) < 0)
                {
                  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v30, (void *)v114, *((unint64_t *)&v114 + 1));
                }
                else
                {
                  long long v31 = v114;
                  *(void *)(v24 + 48) = v115;
                  *(_OWORD *)uint64_t v30 = v31;
                }
              }
              uint64_t v29 = v24 + 64;
              *((void *)this + 49) = v24 + 64;
            }
            *((void *)this + 49) = v29;
LABEL_53:
            *(unsigned char *)(v108 + 32 * v13 + 8) = v26;
            if (SHIBYTE(v115) < 0)
            {
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)v116 + 40))(v116, v114, v115 & 0x7FFFFFFFFFFFFFFFLL);
              if ((v22 & 0x80000000) == 0)
              {
LABEL_55:
                goto LABEL_184;
              }
            }
            else if ((v22 & 0x80000000) == 0)
            {
              goto LABEL_55;
            }
            (*(void (**)(void, void, uint64_t))(**((void **)&v113 + 1) + 40))(*((void *)&v113 + 1), __dst, v113 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_184:
              operator new();
LABEL_59:
            uint64_t v105 = *((void *)v27 + 91);
            {
              operator new();
            }
            uint64_t v104 = *((void *)v27 + 91);
            uint64_t v124 = 0;
            uint64_t v125 = 0;
            geo::codec::transitLinkExtractLineInfo(a2, (unsigned __int16)v13, &v125, &v124);
            uint64_t v32 = (void **)v125;
            if (v125 && v124)
            {
              unint64_t v122 = 0;
              unint64_t v123 = 0;
              int v120 = 0;
              uint64_t v121 = 0;
              uint64_t v33 = *(std::__shared_weak_count **)(v125 + 8);
              if (v33)
              {
                uint64_t v121 = std::__shared_weak_count::lock(v33);
                if (v121) {
                  int v120 = *v32;
                }
              }
              if (a3) {
                geo::codec::transitSystemInfoGetLocalizedLabel(&v120, v124, 0, (unint64_t *)&v123, (unint64_t *)&v122);
              }
              if (!v123 || !*v123) {
                geo::codec::transitSystemInfoGetNativeLabel((uint64_t *)&v120, v124, 0, &v123, &v122);
              }
              uint64_t v34 = v122;
              if (v34)
              {
                if ((explicit & 1) == 0
                {
                  operator new();
                }
                size_t v36 = strlen(v34);
                if (v36 > 0x7FFFFFFFFFFFFFF7) {
                  abort();
                }
                size_t v37 = v36;
                if (v36 >= 0x17)
                {
                  uint64_t v42 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v36 | 7) != 0x17) {
                    uint64_t v42 = v36 | 7;
                  }
                  uint64_t v43 = v42 + 1;
                  p_dst = (long long *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                           + 16))(mdm::Allocator::instance(void)::alloc, v42 + 1, 1);
                  *((void *)&__dst + 1) = v37;
                  *(void *)&long long v113 = v43 | 0x8000000000000000;
                  *(void *)&long long __dst = p_dst;
                }
                else
                {
                  BYTE7(v113) = v36;
                  p_dst = &__dst;
                  if (!v36)
                  {
LABEL_84:
                    *((unsigned char *)p_dst + v37) = 0;
                    goto LABEL_85;
                  }
                }
                memmove(p_dst, v34, v37);
                goto LABEL_84;
              }
              if ((explicit & 1) == 0
              {
                operator new();
              }
              *((void *)&v113 + 1) = mdm::Allocator::instance(void)::alloc;
              BYTE7(v113) = 0;
              LOBYTE(__dst) = 0;
LABEL_85:
              uint64_t v44 = v123;
              unint64_t v39 = *((void *)&__dst + 1);
              char v106 = (void *)__dst;
              uint64_t v40 = v113;
              {
                operator new();
              }
              uint64_t v111 = mdm::Allocator::instance(void)::alloc;
              if (v44)
              {
                size_t v45 = strlen(v44);
                if (v45 > 0x7FFFFFFFFFFFFFF7) {
                  abort();
                }
                size_t v46 = v45;
                if (v45 >= 0x17)
                {
                  uint64_t v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v45 | 7) != 0x17) {
                    uint64_t v48 = v45 | 7;
                  }
                  uint64_t v49 = v48 + 1;
                  int v47 = (long long *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                         + 16))(mdm::Allocator::instance(void)::alloc, v48 + 1, 1);
                  *((void *)&v109 + 1) = v46;
                  unint64_t v110 = v49 | 0x8000000000000000;
                  *(void *)&long long v109 = v47;
                }
                else
                {
                  HIBYTE(v110) = v45;
                  int v47 = &v109;
                  if (!v45)
                  {
LABEL_96:
                    *((unsigned char *)v47 + v46) = 0;
                    goto LABEL_97;
                  }
                }
                memmove(v47, v44, v46);
                goto LABEL_96;
              }
              HIBYTE(v110) = 0;
              LOBYTE(v109) = 0;
LABEL_97:
              uint64_t v50 = v121;
              char v41 = v106;
              if (v121 && !atomic_fetch_add(&v121->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
              goto LABEL_100;
            }
            {
              operator new();
            }
            unint64_t v39 = 0;
            uint64_t v40 = 0;
            char v41 = 0;
            uint64_t v111 = *((void *)v27 + 91);
            HIBYTE(v110) = 0;
            LOBYTE(v109) = 0;
LABEL_100:
            *((void *)&v113 + 1) = v105;
            unsigned int v107 = v41;
            uint64_t v98 = v109;
            unint64_t v101 = v110;
            if ((v110 & 0x8000000000000000) != 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&__dst, (void *)v109, *((unint64_t *)&v109 + 1));
            }
            else
            {
              long long __dst = v109;
              *(void *)&long long v113 = v110;
            }
            uint64_t v116 = v104;
            if (v40 < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&v114, v41, v39);
            }
            else
            {
              *(void *)&long long v114 = v41;
              *((void *)&v114 + 1) = v39;
              uint64_t v115 = v40;
            }
            uint64_t v51 = BYTE7(v113);
            int v52 = SBYTE7(v113);
            unint64_t v53 = *((void *)&__dst + 1);
            if (SBYTE7(v113) < 0) {
              uint64_t v51 = *((void *)&__dst + 1);
            }
            if (v51)
            {
              uint64_t v54 = (unsigned __int8 *)*((void *)this + 48);
              unint64_t v55 = *((void *)this + 49);
              if (v54 == (unsigned __int8 *)v55)
              {
                unsigned __int8 v56 = 0;
LABEL_117:
                if (v55 >= *((void *)this + 50))
                {
                  uint64_t v58 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v91, &__dst);
                }
                else
                {
                  if (v55)
                  {
                    *(void *)(v55 + 24) = *((void *)&v113 + 1);
                    if (v52 < 0)
                    {
                      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v55, (void *)__dst, v53);
                    }
                    else
                    {
                      long long v57 = __dst;
                      *(void *)(v55 + 16) = v113;
                      *(_OWORD *)unint64_t v55 = v57;
                    }
                    unint64_t v59 = (void **)(v55 + 32);
                    *(void *)(v55 + 56) = v116;
                    if (SHIBYTE(v115) < 0)
                    {
                      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v59, (void *)v114, *((unint64_t *)&v114 + 1));
                    }
                    else
                    {
                      long long v60 = v114;
                      *(void *)(v55 + 48) = v115;
                      *(_OWORD *)unint64_t v59 = v60;
                    }
                  }
                  uint64_t v58 = v55 + 64;
                  *((void *)this + 49) = v55 + 64;
                }
                *((void *)this + 49) = v58;
              }
              else
              {
                unsigned __int8 v56 = 0;
                while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v54, (unsigned __int8 *)&__dst) & 1) == 0)
                {
                  ++v56;
                  v54 += 64;
                  if (v54 == (unsigned __int8 *)v55)
                  {
                    if (v56 <= 0x64u) {
                      goto LABEL_117;
                    }
                    goto LABEL_114;
                  }
                }
              }
            }
            else
            {
LABEL_114:
              unsigned __int8 v56 = -1;
            }
            *(unsigned char *)(v108 + 32 * v13 + 9) = v56;
            if (SHIBYTE(v115) < 0)
            {
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)v116 + 40))(v116, v114, v115 & 0x7FFFFFFFFFFFFFFFLL);
              uint64_t v15 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
              if (v52 < 0) {
LABEL_143:
              }
                (*(void (**)(void, void, uint64_t))(**((void **)&v113 + 1) + 40))(*((void *)&v113 + 1), __dst, v113 & 0x7FFFFFFFFFFFFFFFLL);
            }
            else
            {
              uint64_t v15 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
              if (v52 < 0) {
                goto LABEL_143;
              }
            }
            __int16 NativeShieldCount = geo::codec::featureGetNativeShieldCount((uint64_t)v16);
            if (NativeShieldCount != 1
              || (unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 45) - *((void *)this + 44)) >> 4),
                  v62 >= (v93 + 1))
              || v62 > 0x3F)
            {
              uint64_t v67 = v100;
              unint64_t v68 = v101;
              if (v40 < 0) {
                goto LABEL_172;
              }
              goto LABEL_138;
            }
            int v120 = 0;
            *(void *)&long long __dst = 0;
            geo::codec::featureGetNativeShield((uint64_t)v16, 0, &__dst, &v120, 0);
            localizedLabel((unint64_t)&v109, v16, (char *)__dst, a3, 0);
            *uint64_t v97 = v93;
            v97[1] = NativeShieldCount;
            BOOL v63 = (_DWORD *)(v96 + 20 * v13 + 9);
            unint64_t v65 = *((void *)this + 45);
            unint64_t v64 = *((void *)this + 46);
            if (v65 >= v64)
            {
              uint64_t v69 = *((void *)this + 44);
              unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - v69) >> 4);
              unint64_t v71 = v70 + 1;
              if (v70 + 1 > 0x555555555555555) {
                abort();
              }
              unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - v69) >> 4);
              if (2 * v72 > v71) {
                unint64_t v71 = 2 * v72;
              }
              if (v72 >= 0x2AAAAAAAAAAAAAALL) {
                uint64_t v73 = 0x555555555555555;
              }
              else {
                uint64_t v73 = v71;
              }
              *(void *)&long long v114 = (char *)this + 376;
              if (v73) {
                uint64_t v74 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 47) + 16))(*((void *)this + 47), 48 * v73, 8);
              }
              else {
                uint64_t v74 = 0;
              }
              unint64_t v75 = v74 + 48 * v70;
              *(void *)&long long __dst = v74;
              *((void *)&__dst + 1) = v75;
              *(void *)&long long v113 = v75;
              *((void *)&v113 + 1) = v74 + 48 * v73;
              if (v74)
              {
                uint64_t v76 = v120;
                *(void *)(v75 + 24) = v111;
                if (SHIBYTE(v110) < 0)
                {
                  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v75, (void *)v109, *((unint64_t *)&v109 + 1));
                  unint64_t v75 = *((void *)&__dst + 1);
                  unint64_t v77 = v113;
                }
                else
                {
                  *(_OWORD *)unint64_t v75 = v109;
                  *(void *)(v75 + 16) = v110;
                  unint64_t v77 = v74 + 48 * v70;
                }
                unint64_t v80 = v74 + 48 * v70;
                *(void *)(v80 + 32) = v76;
                *(_DWORD *)(v80 + 40) = *v63;
                *(unsigned char *)(v80 + 44) = 2;
              }
              else
              {
                unint64_t v77 = v75;
              }
              unint64_t v78 = v77 + 48;
              *(void *)&long long v113 = v77 + 48;
              uint64_t v81 = *((void *)this + 44);
              uint64_t v82 = *((void *)this + 45);
              if (v82 == v81)
              {
                *((void *)this + 44) = v75;
                *((void *)this + 45) = v78;
                uint64_t v88 = *((void *)this + 46);
                *((void *)this + 46) = *((void *)&v113 + 1);
              }
              else
              {
                uint64_t v83 = 0;
                do
                {
                  uint64_t v84 = v75 + v83;
                  uint64_t v85 = v82 + v83;
                  long long v86 = *(_OWORD *)(v82 + v83 - 32);
                  *(_OWORD *)(v84 - 48) = *(_OWORD *)(v82 + v83 - 48);
                  *(_OWORD *)(v84 - 32) = v86;
                  *(void *)(v85 - 40) = 0;
                  *(void *)(v85 - 32) = 0;
                  *(void *)(v85 - 48) = 0;
                  *(void *)(v84 - 16) = *(void *)(v82 + v83 - 16);
                  *(_DWORD *)(v84 - 8) = *(_DWORD *)(v82 + v83 - 8);
                  *(unsigned char *)(v84 - 4) = *(unsigned char *)(v82 + v83 - 4);
                  v83 -= 48;
                }
                while (v82 + v83 != v81);
                uint64_t v82 = *((void *)this + 44);
                uint64_t v87 = *((void *)this + 45);
                *((void *)this + 44) = v75 + v83;
                uint64_t v88 = *((void *)this + 46);
                unint64_t v89 = v113;
                uint64_t v79 = (unint64_t *)((char *)this + 360);
                *uint64_t v92 = v113;
                unint64_t v78 = v89;
                if (v87 == v82)
                {
                  if (v82) {
                    goto LABEL_167;
                  }
                  goto LABEL_168;
                }
                do
                {
                  if (*(char *)(v87 - 25) < 0) {
                    (*(void (**)(void, void, uint64_t))(**(void **)(v87 - 24) + 40))(*(void *)(v87 - 24), *(void *)(v87 - 48), *(void *)(v87 - 32) & 0x7FFFFFFFFFFFFFFFLL);
                  }
                  v87 -= 48;
                }
                while (v87 != v82);
              }
              uint64_t v79 = (unint64_t *)((char *)this + 360);
              if (v82)
              {
LABEL_167:
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)v114 + 40))(*(void *)v114, v82, v88 - v82);
                uint64_t v79 = (unint64_t *)((char *)this + 360);
              }
LABEL_168:
              uint64_t v15 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
              goto LABEL_169;
            }
            if (v65)
            {
              uint64_t v66 = v120;
              *(void *)(v65 + 24) = v111;
              if (SHIBYTE(v110) < 0)
              {
                std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v65, (void *)v109, *((unint64_t *)&v109 + 1));
              }
              else
              {
                *(_OWORD *)unint64_t v65 = v109;
                *(void *)(v65 + 16) = v110;
              }
              *(void *)(v65 + 32) = v66;
              *(_DWORD *)(v65 + 40) = *v63;
              *(unsigned char *)(v65 + 44) = 2;
              uint64_t v15 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
            }
            unint64_t v78 = v65 + 48;
            uint64_t v79 = (unint64_t *)((char *)this + 360);
            *(void *)uint64_t v92 = v65 + 48;
LABEL_169:
            *uint64_t v79 = v78;
            uint64_t v67 = v100;
            if (SHIBYTE(v110) < 0) {
              (*(void (**)(uint64_t, void, unint64_t))(*(void *)v111 + 40))(v111, v109, v110 & 0x7FFFFFFFFFFFFFFFLL);
            }
            int v93 = (unsigned __int16)(v93 + 1);
            unint64_t v68 = v101;
            if (v40 < 0)
            {
LABEL_172:
              (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v104 + 40))(v104, v107, v40 & 0x7FFFFFFFFFFFFFFFLL);
              if ((v68 & 0x8000000000000000) == 0) {
                goto LABEL_139;
              }
              goto LABEL_173;
            }
LABEL_138:
            if ((v68 & 0x8000000000000000) == 0) {
              goto LABEL_139;
            }
LABEL_173:
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v105 + 40))(v105, v98, v68 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_139:
            if (SHIBYTE(v118) < 0)
            {
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)v119 + 40))(v119, v117, v118 & 0x7FFFFFFFFFFFFFFFLL);
              if (v102 < 0) {
                goto LABEL_141;
              }
            }
            else if (v102 < 0)
            {
LABEL_141:
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v67 + 40))(v67, v99, v102 & 0x7FFFFFFFFFFFFFFFLL);
            }
            if (++v13 == v94) {
              goto LABEL_196;
            }
          }
          unsigned __int8 v26 = 0;
          do
          {
            if (md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v25, (unsigned __int8 *)&__dst))
            {
              char v27 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
              goto LABEL_53;
            }
            ++v26;
            v25 += 64;
          }
          while (v25 != (unsigned __int8 *)v24);
          if (v26 <= 0x64u) {
            goto LABEL_41;
          }
LABEL_39:
          unsigned __int8 v26 = -1;
          char v27 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
          goto LABEL_53;
        }
LABEL_196:
        std::mutex::unlock(v90);
      }
    }
  }
}

void sub_1A252E414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43)
{
  *a13 = v43;
  if (a35 < 0) {
    (*(void (**)(void))(*(void *)a36 + 40))();
  }
  if (v44 < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a26 + 40))(a26, a28, v44 & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (a23 < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a27 + 40))(a27, a19, a23 & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (*(char *)(v45 - 145) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v45 - 144) + 40))(*(void *)(v45 - 144), *(void *)(v45 - 168), *(void *)(v45 - 152) & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (a24 < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a22 + 40))(a22, a20, a24 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t md::TransitLineLabelFeature::newRootPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  if (*(void *)(a1 + 536) == *(void *)(a1 + 544)) {
    return 0;
  }
  uint64_t v9 = a1 + 232;
  uint64_t v10 = *(void *)(a1 + 232);
  unsigned int v11 = *(_DWORD *)(a3 + 48);
  do
  {
    unsigned int v12 = *(_DWORD *)(v10 + 32);
    BOOL v13 = v12 >= v11;
    if (v12 >= v11) {
      unint64_t v14 = (uint64_t *)v10;
    }
    else {
      unint64_t v14 = (uint64_t *)(v10 + 8);
    }
    if (v13) {
      uint64_t v9 = v10;
    }
    uint64_t v10 = *v14;
  }
  while (*v14);
  unint64_t v16 = *(unsigned __int8 **)(v9 + 40);
  uint64_t v15 = *(std::__shared_weak_count **)(v9 + 48);
  uint64_t v194 = v16;
  uint64_t v195 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = v16[9];
  if ((v17 - 2) >= 2)
  {
    if (v17 == 1)
    {
      unint64_t v53 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v16 + 128))(v16);
      uint64_t v54 = *(void **)(a1 + 576);
      if (v54)
      {
        uint64_t v55 = a1 + 576;
        do
        {
          unint64_t v56 = v54[4];
          BOOL v57 = v56 >= v53;
          if (v56 >= v53) {
            uint64_t v58 = v54;
          }
          else {
            uint64_t v58 = v54 + 1;
          }
          if (v57) {
            uint64_t v55 = (uint64_t)v54;
          }
          uint64_t v54 = (void *)*v58;
        }
        while (*v58);
        if (v55 != a1 + 576 && *(void *)(v55 + 32) <= v53)
        {
          uint64_t v59 = *(void *)(v55 + 40);
          if (v59)
          {
            unsigned int v60 = *(unsigned __int16 *)(v59 + 42);
            if (v60 == 0xFFFF) {
              unsigned int v60 = *(unsigned __int16 *)(a1 + 600);
            }
            uint64_t v61 = v60;
            uint64_t v62 = *(void *)(v59 + 8);
            unint64_t v63 = *(unsigned int *)(v62 + 20 * v60 + 16);
            if (v63 == -1) {
              unint64_t v63 = *(unsigned int *)(*(void *)(a1 + 536)
            }
                                    + 32 * *(unsigned __int16 *)(v62 + 20 * v61 + 14)
                                    + 24);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 280) - *(void *)(a1 + 272)) >> 4) <= v63
              || (uint64_t v64 = *(void *)(a1 + 96), v63 >= (*(void *)(a1 + 104) - v64) >> 4))
            {
              unint64_t v65 = (uint64_t *)(a1 + 80);
            }
            else
            {
              unint64_t v65 = (uint64_t *)(v64 + 16 * v63);
            }
            uint64_t v66 = *v65;
            if (*(float *)(*v65 + 236) != 0.0)
            {
              uint64_t v70 = *(void *)(v66 + 264);
              if (!v70)
              {
                unint64_t v71 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(v66);
                uint64_t v70 = *v71;
                *(void *)(v66 + 264) = *v71;
              }
              if (*(unsigned char *)(v70 + 56))
              {
                if (*(unsigned char *)(v70 + 60))
                {
                  int v72 = *(unsigned __int8 *)(v66 + 144);
                  if (v72 != 1)
                  {
                    BOOL v131 = v72 == 3;
                    uint64_t v73 = *(void *)(a1 + 536) + 32 * v61;
                    uint64_t v74 = (unsigned __int8 *)(v73 + 9);
                    unint64_t v75 = (unsigned __int8 *)(v73 + 8);
                    if (!v131) {
                      unint64_t v75 = v74;
                    }
                    uint64_t v76 = (const md::LabelTextStyleGroup *)*v75;
                    if (v76 != 255)
                    {
                      char v77 = *(unsigned char *)(a3 + 404);
                      uint64_t v78 = *(void *)(v66 + 280);
                      if (v78)
                      {
                        if (vabds_f32(*(float *)(v78 + 8), *(float *)(v66 + 104)) >= 0.01)
                        {
                          md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)v66, v78, 0);
                          uint64_t v78 = *(void *)(v66 + 280);
                        }
                      }
                      else
                      {
                        uint64_t v78 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v66, 0);
                        *(void *)(v66 + 280) = v78;
                      }
                      md::LabelFeature::textDataForZoom((md::LabelFeature *)&v203, (md::LabelFeature *)a1, v76, *(void *)v78);
                      unsigned int v192 = v61;
                      uint64_t v94 = v203;
                      if (v203)
                      {
                        uint64_t v95 = (std::__shared_weak_count *)operator new(0xB0uLL);
                        v95->__shared_owners_ = 0;
                        v95->__shared_weak_owners_ = 0;
                        v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
                        float v201 = (uint64_t *)md::LabelText::LabelText((uint64_t)&v95[1], v94, (uint64_t)v204, v77);
                        v202[0] = (uint64_t)v95;
                        uint64_t v52 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 168) + 64) + 16))(*(void *)(*(void *)(a2 + 168) + 64));
                        if (!v52) {
                          goto LABEL_244;
                        }
                        unint64_t v96 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v16 + 128))(v16);
                        md::LabelExternalObjectsModerator::externalTransitLink(&v209, v52, v96);
                        if (v209
                          && (unsigned __int8 v97 = atomic_load((unsigned __int8 *)(v209 + 104)), (v97 & 1) != 0)
                          && (unsigned __int8 v98 = atomic_load((unsigned __int8 *)(v209 + 105)), (v98 & 1) != 0))
                        {
                          md::LabelExternalTransitLink::linkData((md::LabelExternalTransitLink *)&v207, v209);
                          uint64_t v99 = v207;
                          if (v207
                            && (uint64_t v100 = v207[1], *v207 != v100)
                            && (unint64_t v101 = (v100 - *v207) >> 4,
                                v101 == (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 5)
                            && (uint64_t v103 = *(void *)(v59 + 8),
                                uint64_t v102 = *(void *)(v59 + 16),
                                0xCCCCCCCCCCCCCCCDLL * ((v102 - v103) >> 2) == v101)
                            && *(unsigned char *)(v103 + 20 * v192 + 5))
                          {
                            if (v102 != v103)
                            {
                              uint64_t v104 = 0;
                              if (v101 <= 1) {
                                unint64_t v101 = 1;
                              }
                              uint64_t v105 = 12;
                              do
                              {
                                uint64_t v106 = *v99 + v104;
                                unsigned int v107 = (unsigned char *)(*(void *)(v59 + 8) + v105);
                                *(v107 - 3) = *(unsigned char *)(v106 + 4);
                                *(v107 - 2) = *(unsigned char *)(v106 + 5);
                                *(v107 - 1) = *(unsigned char *)(v106 + 6);
                                *unsigned int v107 = *(unsigned char *)(v106 + 7);
                                *((_DWORD *)v107 - 3) = *(_DWORD *)v106;
                                v105 += 20;
                                v104 += 16;
                                --v101;
                              }
                              while (v101);
                            }
                            float v108 = md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(a1, v59);
                            uint64_t v110 = mdm::Allocator::instance(v109);
                            uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v110 + 16))(v110, 1512, 8);
                            int v111 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1);
                            if (*a5)
                            {
                              char v112 = 0;
                              unsigned __int8 v113 = 0;
                              __int16 v114 = 9;
                            }
                            else
                            {
                              char v112 = *(unsigned char *)(a3 + 317);
                              unsigned __int8 v113 = *(unsigned char *)(a3 + 318);
                              __int16 v114 = *(_WORD *)(a3 + 320);
                            }
                            *(_WORD *)((char *)&v199 + 3) = v114;
                            LOBYTE(v199) = v112;
                            *(_WORD *)((char *)&v199 + 1) = v113;
                            md::TransitLineTextLabelPart::TransitLineTextLabelPart(v52, v111, &v201, a2, a3, v66, &v194, (uint64_t)&v199, v108, a5, &v209, v192);
                          }
                          else
                          {
                            uint64_t v52 = 0;
                          }
                          std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v207);
                        }
                        else
                        {
                          uint64_t v52 = 0;
                        }
                        std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v209);
                        uint64_t v95 = (std::__shared_weak_count *)v202[0];
                        if (v202[0])
                        {
LABEL_244:
                          if (!atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                            std::__shared_weak_count::__release_weak(v95);
                          }
                        }
                      }
                      else
                      {
                        uint64_t v52 = 0;
                      }
                      uint64_t v69 = v204;
                      if (!v204) {
                        goto LABEL_71;
                      }
                      goto LABEL_79;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_70;
  }
  unint64_t v18 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v16 + 128))(v16);
  uint64_t v19 = *(void **)(a1 + 576);
  if (!v19) {
    goto LABEL_70;
  }
  uint64_t v20 = a1 + 576;
  do
  {
    unint64_t v21 = v19[4];
    BOOL v22 = v21 >= v18;
    if (v21 >= v18) {
      unint64_t v23 = v19;
    }
    else {
      unint64_t v23 = v19 + 1;
    }
    if (v22) {
      uint64_t v20 = (uint64_t)v19;
    }
    uint64_t v19 = (void *)*v23;
  }
  while (*v23);
  if (v20 == a1 + 576
    || *(void *)(v20 + 32) > v18
    || (uint64_t v24 = *(void *)(v20 + 40)) == 0
    || (uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 168) + 64) + 16))(*(void *)(*(void *)(a2 + 168) + 64))) == 0)
  {
LABEL_70:
    uint64_t v52 = 0;
    goto LABEL_71;
  }
  unint64_t v26 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v16 + 128))(v16);
  char v27 = (std::mutex *)(v25 + 304);
  std::mutex::lock((std::mutex *)(v25 + 304));
  long long v28 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((void *)(v25 + 192), v26);
  if (!v28)
  {
    uint64_t v209 = 0;
    __n128 v210 = 0;
LABEL_76:
    std::mutex::unlock(v27);
LABEL_77:
    uint64_t v52 = 0;
    goto LABEL_78;
  }
  uint64_t v29 = v28;
  uint64_t v209 = 0;
  __n128 v210 = 0;
  uint64_t v30 = (std::__shared_weak_count *)v28[4];
  if (!v30) {
    goto LABEL_76;
  }
  __n128 v210 = std::__shared_weak_count::lock(v30);
  if (!v210) {
    goto LABEL_76;
  }
  uint64_t v31 = v29[3];
  uint64_t v209 = v31;
  std::mutex::unlock(v27);
  if (!v31) {
    goto LABEL_77;
  }
  unsigned __int8 v32 = atomic_load((unsigned __int8 *)(v31 + 104));
  if ((v32 & 1) == 0) {
    goto LABEL_77;
  }
  unsigned __int8 v33 = atomic_load((unsigned __int8 *)(v31 + 105));
  if ((v33 & 1) == 0) {
    goto LABEL_77;
  }
  std::mutex::lock((std::mutex *)(v209 + 40));
  unint64_t v35 = *(void **)(v209 + 24);
  uint64_t v34 = *(std::__shared_weak_count **)(v209 + 32);
  __n128 v207 = v35;
  __n128 v208 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::mutex::unlock((std::mutex *)(v209 + 40));
  if (v35
    && (uint64_t v37 = v35[1], *v35 != v37)
    && (unint64_t v38 = (v37 - *v35) >> 4, v38 == (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 5)
    && (v39 = *(void *)(v24 + 8), uint64_t v40 = *(void *)(v24 + 16), 0xCCCCCCCCCCCCCCCDLL * ((v40 - v39) >> 2) == v38))
  {
    uint64_t v182 = v24;
    if (v40 != v39)
    {
      uint64_t v41 = 0;
      if (v38 <= 1) {
        unint64_t v38 = 1;
      }
      uint64_t v42 = 12;
      do
      {
        uint64_t v43 = *v35 + v41;
        uint64_t v44 = (unsigned char *)(*(void *)(v24 + 8) + v42);
        *(v44 - 3) = *(unsigned char *)(v43 + 4);
        *(v44 - 2) = *(unsigned char *)(v43 + 5);
        *(v44 - 1) = *(unsigned char *)(v43 + 6);
        unsigned char *v44 = *(unsigned char *)(v43 + 7);
        *((_DWORD *)v44 - 3) = *(_DWORD *)v43;
        v42 += 20;
        v41 += 16;
        --v38;
      }
      while (v38);
    }
    float64x2_t v190 = (uint64_t *)(v24 + 8);
    uint64_t v186 = mdm::Allocator::instance(v36);
    uint64_t v45 = *(void *)(a1 + 544) - *(void *)(a1 + 536);
    if (v45)
    {
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      unint64_t v49 = 0;
      unint64_t v50 = v45 >> 5;
      if (v50 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = v50;
      }
      while (1)
      {
        if (*(_WORD *)(*(void *)(a1 + 536) + 32 * v46 + 12))
        {
          if ((unint64_t)v48 >= v49)
          {
            uint64_t v80 = ((uint64_t)v48 - v47) >> 3;
            unint64_t v81 = v80 + 1;
            float64x2_t v191 = (uint64_t *)v47;
            if ((unint64_t)(v80 + 1) >> 61) {
              abort();
            }
            uint64_t v82 = v49 - v47;
            if (v82 >> 2 > v81) {
              unint64_t v81 = v82 >> 2;
            }
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v81;
            }
            if (v49)
            {
              uint64_t v83 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v186 + 16))(v186, 8 * v49, 8);
              uint64_t v84 = (uint64_t *)(v83 + 8 * v80);
              unint64_t v49 = v83 + 8 * v49;
              if (v83) {
                *uint64_t v84 = v46;
              }
            }
            else
            {
              uint64_t v84 = (uint64_t *)(8 * v80);
            }
            uint64_t v85 = v84;
            if (v48 == v191) {
              goto LABEL_116;
            }
            unint64_t v86 = (char *)v48 - (char *)v191 - 8;
            if (v86 < 0x138
              || (uint64_t *)((char *)v84 - (v86 & 0xFFFFFFFFFFFFFFF8) - 8) > v84 - 1
              || (uint64_t *)((char *)v48 - (v86 & 0xFFFFFFFFFFFFFFF8) - 8) > v48 - 1
              || (unint64_t)((char *)v48 - (char *)v84) < 0x20)
            {
              uint64_t v87 = v48;
              uint64_t v85 = v84;
            }
            else
            {
              uint64_t v89 = (v86 >> 3) + 1;
              uint64_t v87 = &v48[-(v89 & 0x3FFFFFFFFFFFFFFCLL)];
              uint64_t v90 = v84 - 2;
              uint64_t v91 = v48 - 2;
              uint64_t v92 = v89 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v93 = *(_OWORD *)v91;
                *((_OWORD *)v90 - 1) = *((_OWORD *)v91 - 1);
                *(_OWORD *)uint64_t v90 = v93;
                v90 -= 4;
                v91 -= 4;
                v92 -= 4;
              }
              while (v92);
              uint64_t v85 = &v84[-(v89 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v89 == (v89 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_116;
              }
            }
            do
            {
              uint64_t v88 = *--v87;
              *--uint64_t v85 = v88;
            }
            while (v87 != v191);
LABEL_116:
            uint64_t v48 = v84 + 1;
            if (v191) {
              (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v186 + 40))(v186, v191, v82);
            }
            uint64_t v47 = (uint64_t)v85;
            goto LABEL_97;
          }
          if (v48) {
            uint64_t *v48 = v46;
          }
          ++v48;
        }
LABEL_97:
        if (++v46 == v51) {
          goto LABEL_154;
        }
      }
    }
    unint64_t v49 = 0;
    uint64_t v48 = 0;
    uint64_t v47 = 0;
LABEL_154:
    unint64_t v184 = v49;
    uint64_t v115 = (mdm::Allocator *)std::sort[abi:nn180100]<std::__wrap_iter<unsigned long *>,md::TransitLineLabelFeature::newShieldPart(md::LabelManager *,md::Label *,md::LabelPartCreationOptions &,std::shared_ptr<md::RoadPosition> const&)::$_0>(v47, v48, a1, (uint64_t)v190);
    unsigned int v116 = *(unsigned __int16 *)(v182 + 42);
    if (v116 == 0xFFFF) {
      unsigned int v116 = *(unsigned __int16 *)(a1 + 600);
    }
    float v117 = *(float *)(*v190 + 20 * v116);
    uint64_t v181 = v116;
    int v189 = *(unsigned __int8 *)(*(void *)(a1 + 536) + 32 * v116 + 9);
    uint64_t v203 = 0;
    float v204 = 0;
    uint64_t v205 = 0;
    unsigned int v206 = (mdm::Allocator *)mdm::Allocator::instance(v115);
    v202[0] = 0;
    v202[1] = mdm::Allocator::instance(v206);
    v202[2] = 0;
    float v201 = v202;
    uint64_t v118 = (uint64_t)v48 - v47;
    if (v48 == (uint64_t *)v47)
    {
      std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&v201, v202[0]);
      uint64_t v52 = 0;
    }
    else
    {
      uint64_t v193 = v47;
      uint64_t v119 = 0;
      unint64_t v120 = v118 >> 3;
      if (v120 <= 1) {
        unint64_t v120 = 1;
      }
      unint64_t v188 = v120;
      do
      {
        uint64_t v121 = *(void *)(v193 + 8 * v119);
        uint64_t v122 = *(void *)(a1 + 536);
        uint64_t v123 = *v190;
        uint64_t v124 = *v190 + 20 * v121;
        unint64_t v125 = *(unsigned int *)(v124 + 16);
        if (v125 == -1) {
          unint64_t v125 = *(unsigned int *)(v122 + 32 * *(unsigned __int16 *)(v123 + 20 * v121 + 14) + 24);
        }
        float32x4_t v126 = (uint64_t *)(a1 + 80);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 280) - *(void *)(a1 + 272)) >> 4) > v125)
        {
          uint64_t v127 = *(void *)(a1 + 96);
          uint64_t v128 = *(void *)(a1 + 104) - v127;
          uint64_t v129 = (uint64_t *)(v127 + 16 * v125);
          if (v125 >= v128 >> 4) {
            float32x4_t v126 = (uint64_t *)(a1 + 80);
          }
          else {
            float32x4_t v126 = v129;
          }
        }
        uint64_t v130 = (void *)*v126;
        BOOL v131 = *(float *)v124 == v117 || *(unsigned __int8 *)(v122 + 32 * v121 + 9) == v189;
        if (v131 && v130 != 0)
        {
          uint64_t v133 = v130[33];
          if (!v133)
          {
            unint64_t v134 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(*v126);
            uint64_t v133 = *v134;
            v130[33] = *v134;
          }
          if (*(unsigned char *)(v133 + 56))
          {
            if (*(unsigned char *)(v133 + 58) && *(unsigned char *)(v123 + 20 * v121 + 5) != 0)
            {
              unsigned int v185 = *(unsigned __int16 *)(v122 + 32 * v121 + 10);
              uint64_t v183 = *(void *)(v122 + 32 * v121);
              uint64_t v187 = *(void *)(a1 + 352);
              uint64_t v136 = v130[37];
              if (!v136)
              {
                int v137 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)v130, 0);
                uint64_t v136 = *v137;
                v130[37] = *v137;
              }
              switch(*(unsigned char *)(v136 + 89))
              {
                case 0:
                case 1:
                case 3:
                  uint64_t v136 = v123 + 20 * v121;
                  unsigned int v138 = v185;
                  uint64_t v139 = v187;
                  uint64_t v140 = (unsigned char *)(v187 + 48 * v185);
                  v140[40] = *(unsigned char *)(v136 + 9);
                  v140[41] = *(unsigned char *)(v136 + 10);
                  v140[42] = *(unsigned char *)(v136 + 11);
                  LOBYTE(v136) = *(unsigned char *)(v136 + 12);
                  goto LABEL_189;
                case 2:
                  unsigned int v138 = v185;
                  uint64_t v139 = v187;
                  uint64_t v146 = (unsigned char *)(v187 + 48 * v185);
                  v146[40] = *(unsigned char *)(v136 + 72);
                  v146[41] = *(unsigned char *)(v136 + 73);
                  v146[42] = *(unsigned char *)(v136 + 74);
                  LOBYTE(v136) = *(unsigned char *)(v136 + 75);
                  goto LABEL_189;
                case 4:
                  uint64_t v136 = v130[34];
                  if (!v136)
                  {
                    int v141 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>((uint64_t)v130);
                    uint64_t v136 = *v141;
                    v130[34] = *v141;
                  }
                  unsigned int v142 = *(_DWORD *)(v136 + 65);
                  unsigned int v143 = v142 >> 8;
                  unsigned int v138 = v185;
                  uint64_t v139 = v187;
                  int v144 = (unsigned char *)(v187 + 48 * v185);
                  v144[40] = v142;
                  unsigned int v145 = HIWORD(v142);
                  LODWORD(v136) = HIBYTE(v142);
                  v144[41] = v143;
                  v144[42] = v145;
LABEL_189:
                  *(unsigned char *)(v139 + 48 * v138 + 43) = v136;
                  break;
                default:
                  break;
              }
              md::LabelStyle::shieldIcon(&v199, (uint64_t)v130, a2, a3, (void **)(v187 + 48 * v185), 1, -1);
              if (v199)
              {
                uint64_t v147 = std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::__emplace_unique_key_args<md::LabelShieldEntry,md::LabelShieldEntry const&>(&v201, (void **)(v187 + 48 * v185), (long long *)(v187 + 48 * v185));
                if (v147)
                {
                  uint64_t v148 = mdm::Allocator::instance((mdm::Allocator *)v147);
                  uint64_t v149 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v148 + 16))(v148, 856, 8);
                  md::TransitShieldIconLabelPart::TransitShieldIconLabelPart(v149, &v199, (uint64_t)v130, &v194, v183, &v209, v121, (_DWORD *)(v187 + 48 * v185 + 40));
                  v198[0] = v149;
                  if (v149)
                  {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v149 + 176))(v149, 2);
                    std::vector<md::TransitShieldIconLabelPart *,geo::StdAllocator<md::TransitShieldIconLabelPart *,mdm::Allocator>>::push_back[abi:nn180100]((uint64_t)&v203, v198);
                  }
                }
              }
              uint64_t v150 = v200;
              if (v200 && !atomic_fetch_add(&v200->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
          }
        }
        ++v119;
      }
      while (v188 != v119);
      uint64_t v152 = v203;
      uint64_t v151 = (uint64_t)v204;
      if ((std::__shared_weak_count *)v203 == v204)
      {
        uint64_t v52 = 0;
      }
      else
      {
        int v153 = (mdm::Allocator *)md::TransitLineLabelFeature::styleFromTransitLineSegment((void *)a1, *(_WORD *)(*v190 + 20 * v181 + 14), *(_DWORD *)(*v190 + 20 * v181 + 16));
        uint64_t v154 = *(void *)v153;
        LODWORD(v155) = *(_DWORD *)(*(void *)v153 + 160);
        unint64_t v156 = (v151 - v152) >> 3;
        BOOL v157 = (v155 & 0x80000000) != 0;
        if ((v155 & 0x80000000) == 0) {
          unint64_t v155 = v155;
        }
        else {
          unint64_t v155 = -(int)v155;
        }
        if (v157) {
          unint64_t v158 = 0;
        }
        else {
          unint64_t v158 = v155;
        }
        if (v156 <= v155) {
          unint64_t v159 = v156;
        }
        else {
          unint64_t v159 = v158;
        }
        if (v159)
        {
          uint64_t v160 = mdm::Allocator::instance(v153);
          uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v160 + 16))(v160, 704, 8);
          md::MultipleShieldLabelPart::MultipleShieldLabelPart(v52, &v194);
          for (uint64_t i = 0; i != v159; ++i)
            md::CompositeLabelPart::addLabelPart(v52, *(md::LabelPart **)(v152 + 8 * i));
        }
        else
        {
          uint64_t v52 = 0;
        }
        while (v159 < v156)
        {
          uint64_t v162 = *(void *)(v152 + 8 * v159);
          if (v162) {
            (*(void (**)(uint64_t))(*(void *)v162 + 8))(v162);
          }
          ++v159;
        }
        if (v194[9] != 3)
        {
          if (v154)
          {
            int v163 = *(unsigned __int8 *)(v154 + 144);
            if (v163 != 1)
            {
              BOOL v131 = v163 == 3;
              uint64_t v164 = *(void *)(a1 + 536) + 32 * v181;
              char v165 = (unsigned __int8 *)(v164 + 9);
              uint64_t v166 = (unsigned __int8 *)(v164 + 8);
              if (!v131) {
                uint64_t v166 = v165;
              }
              BOOL v167 = (const md::LabelTextStyleGroup *)*v166;
              if (v167 != 255)
              {
                char v168 = *(unsigned char *)(a3 + 404);
                uint64_t v169 = md::LabelStyle::textStyleGroup(v154);
                md::LabelFeature::textDataForZoom((md::LabelFeature *)&v199, (md::LabelFeature *)a1, v167, v169);
                if (v199)
                {
                  std::make_shared[abi:nn180100]<md::LabelText,std::shared_ptr<md::TextDataString> const&,unsigned char const&,void>(v198, v199, (uint64_t)v200, v168);
                  if (v198[0])
                  {
                    float v170 = md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(a1, v182);
                    uint64_t v172 = mdm::Allocator::instance(v171);
                    uint64_t v173 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v172 + 16))(v172, 1512, 8);
                    uint64_t v174 = (unsigned __int8 *)v173;
                    if (*a5)
                    {
                      char v175 = 0;
                      char v176 = 0;
                      __int16 v177 = 9;
                    }
                    else
                    {
                      char v175 = *(unsigned char *)(a3 + 317);
                      char v176 = *(unsigned char *)(a3 + 318);
                      __int16 v177 = *(_WORD *)(a3 + 320);
                    }
                    __int16 v197 = v177;
                    v196[0] = v175;
                    v196[1] = v176;
                    v196[2] = 0;
                    uint64_t v178 = (mdm::Allocator *)md::TransitLineTextLabelPart::TransitLineTextLabelPart(v173, 9, v198, a2, a3, v154, &v194, (uint64_t)v196, v170, a5, &v209, v181);
                    if (v52)
                    {
                      uint64_t v179 = mdm::Allocator::instance(v178);
                      uint64_t v180 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v179 + 16))(v179, 720, 8);
                      md::LineTextWithAuxLabelPart::LineTextWithAuxLabelPart(v180, &v194, v174, v52);
                      uint64_t v52 = v180;
                    }
                    else
                    {
                      uint64_t v52 = (uint64_t)v174;
                    }
                  }
                  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v198);
                }
                std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v199);
              }
            }
          }
        }
      }
      std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&v201, v202[0]);
      if (v152)
      {
        float v204 = (std::__shared_weak_count *)v152;
        (*(void (**)(mdm::Allocator *, uint64_t, uint64_t))(*(void *)v206 + 40))(v206, v152, v205 - v152);
      }
      uint64_t v47 = v193;
    }
    if (v47) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v186 + 40))(v186, v47, v184 - v47);
    }
  }
  else
  {
    uint64_t v52 = 0;
  }
  uint64_t v79 = v208;
  if (v208 && !atomic_fetch_add(&v208->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
  }
LABEL_78:
  uint64_t v69 = v210;
  if (v210)
  {
LABEL_79:
    if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
LABEL_71:
  uint64_t v67 = v195;
  if (v195 && !atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
  }
  return v52;
}

void sub_1A252F88C(mdm::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33)
{
  uint64_t v36 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v36 + 40))(v36, v33, 720);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a28);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a30);
  uint64_t v37 = *(void *)(v34 - 168);
  std::__tree<md::LabelShieldEntry,std::less<md::LabelShieldEntry>,geo::StdAllocator<md::LabelShieldEntry,mdm::Allocator>>::destroy((uint64_t)&a32, a33);
  if (v37)
  {
    *(void *)(v34 - 160) = v37;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v34 - 144) + 40))(*(void *)(v34 - 144), v37, *(void *)(v34 - 152) - v37);
  }
  if (a24) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a18 + 40))(a18, a24, a16 - a24);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v34 - 136);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v34 - 120);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a25);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void md::LabelExternalTransitLink::linkData(md::LabelExternalTransitLink *this, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a2 + 40);
  std::mutex::lock((std::mutex *)(a2 + 40));
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)this = *(void *)(a2 + 24);
  *((void *)this + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::mutex::unlock(v4);
}

float md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v4 = (uint64_t *)(a2 + 8);
  {
    operator new();
  }
  unint64_t v7 = (v6 - v5) / 20;
  uint64_t v8 = mdm::Allocator::instance(void)::alloc;
  if ((unint64_t)(v6 - v5 + 19) >= 0x27)
  {
    if (v7 >> 61) {
      abort();
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 8 * v7, 8);
    uint64_t v10 = v13;
    uint64_t v14 = 0;
    uint64_t v9 = (uint64_t *)(v13 + 8 * v7);
    do
    {
      if (v13 + v14) {
        *(void *)(v13 + v14) = 0;
      }
      v14 += 8;
    }
    while (8 * v7 != v14);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  if (v6 != v5)
  {
    if (v7 <= 1) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = (v6 - v5) / 20;
    }
    if (v11 >= 4)
    {
      unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v15 = (int64x2_t)xmmword_1A28FC760;
      unint64_t v16 = (int64x2_t *)(v10 + 16);
      int64x2_t v17 = vdupq_n_s64(2uLL);
      int64x2_t v18 = vdupq_n_s64(4uLL);
      unint64_t v19 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16[-1] = v15;
        *unint64_t v16 = vaddq_s64(v15, v17);
        int64x2_t v15 = vaddq_s64(v15, v18);
        v16 += 2;
        v19 -= 4;
      }
      while (v19);
      goto LABEL_22;
    }
    unint64_t v12 = 0;
    do
    {
      *(void *)(v10 + 8 * v12) = v12;
      ++v12;
LABEL_22:
      ;
    }
    while (v11 != v12);
  }
  unint64_t v20 = 126 - 2 * __clz(((uint64_t)v9 - v10) >> 3);
  unint64_t v21 = (char *)v9 - v10;
  uint64_t v40 = v4;
  if (v9 == (uint64_t *)v10) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v20;
  }
  std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *,false>(v10, v9, &v40, v22, 1);
  unint64_t v23 = v7 - 1;
  unsigned int v24 = *(unsigned __int16 *)(a2 + 42);
  if (v24 == 0xFFFF)
  {
    unsigned int v24 = *(unsigned __int16 *)(a1 + 600);
    unint64_t v25 = 0;
    if (v7 == 1)
    {
LABEL_48:
      float v38 = (float)(*(float *)(*v4 + 20 * *(void *)(v10 + 8 * v23))
                  + *(float *)(*v4 + 20 * *(void *)(v10 + 8 * v25)))
          * 0.5;
      goto LABEL_49;
    }
  }
  else
  {
    unint64_t v25 = 0;
    if (v7 == 1) {
      goto LABEL_48;
    }
  }
  uint64_t v26 = *(void *)(a1 + 536);
  uint64_t v27 = *(unsigned __int8 *)(v26 + 32 * v24 + 9);
  while (*(unsigned __int8 *)(v26 + 32 * *(void *)(v10 + 8 * v25) + 9) != v27)
  {
    if (v23 == ++v25)
    {
      unint64_t v25 = v7 - 1;
      break;
    }
  }
  uint64_t v28 = 0;
  while (*(unsigned __int8 *)(v26 + 32 * *(void *)(v10 + 8 * v23) + 9) != v27)
  {
    ++v28;
    if (!--v23) {
      goto LABEL_48;
    }
  }
  if (v25 >= v23) {
    goto LABEL_48;
  }
  unint64_t v29 = v7 + ~v25 - v28;
  if (v29 <= 1)
  {
    uint64_t v30 = 0;
    unint64_t v31 = v25;
    goto LABEL_45;
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = ~v25 + v7 - v28;
  unint64_t v35 = v29 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v36 = v34 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v37 = (void *)(v10 + 8 * v25 + 8);
  do
  {
    uint64_t v32 = v32 - v27 + *(unsigned __int8 *)(v26 + 32 * *(v37 - 1) + 9);
    uint64_t v33 = v33 - v27 + *(unsigned __int8 *)(v26 + 32 * *v37 + 9);
    v37 += 2;
    v36 -= 2;
  }
  while (v36);
  uint64_t v30 = v33 + v32;
  if (v29 != v35)
  {
    unint64_t v31 = v25 + v35;
    do
LABEL_45:
      uint64_t v30 = v30 - v27 + *(unsigned __int8 *)(v26 + 32 * *(void *)(v10 + 8 * v31++) + 9);
    while (v23 != v31);
  }
  if (!v30) {
    goto LABEL_48;
  }
  float v38 = *(float *)(*v4 + 20 * v24);
LABEL_49:
  (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v8 + 40))(v8, v10, v21);
  return v38;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unint64_t v11 = (uint64_t *)result;
  while (2)
  {
    unint64_t v12 = a2 - 1;
    uint64_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          unint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v86 = *v13;
                if (*(float *)(**a3 + 20 * *v12) >= *(float *)(**a3 + 20 * *v13)) {
                  return result;
                }
                *uint64_t v13 = *v12;
                goto LABEL_162;
              case 3uLL:
                uint64_t v87 = **a3;
                uint64_t v86 = *v13;
                uint64_t v88 = v13[1];
                float v89 = *(float *)(v87 + 20 * v88);
                float v90 = *(float *)(v87 + 20 * *v13);
                uint64_t v91 = *v12;
                float v92 = *(float *)(v87 + 20 * *v12);
                if (v89 >= v90)
                {
                  if (v92 < v89)
                  {
                    v13[1] = v91;
                    uint64_t *v12 = v88;
                    uint64_t v102 = *v13;
                    uint64_t v98 = v13[1];
                    float v100 = *(float *)(v87 + 20 * v98);
LABEL_151:
                    if (v100 < *(float *)(v87 + 20 * v102))
                    {
                      *uint64_t v13 = v98;
                      v13[1] = v102;
                    }
                  }
                }
                else
                {
                  if (v92 >= v89)
                  {
                    *uint64_t v13 = v88;
                    v13[1] = v86;
                    if (*(float *)(v87 + 20 * *v12) >= v90) {
                      return result;
                    }
                    v13[1] = *v12;
                  }
                  else
                  {
                    *uint64_t v13 = v91;
                  }
LABEL_162:
                  uint64_t *v12 = v86;
                }
                break;
              case 4uLL:
                uint64_t v93 = **a3;
                return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(v13, v13 + 1, v13 + 2, a2 - 1, v93);
              case 5uLL:
                uint64_t v94 = v13 + 1;
                uint64_t v95 = v13 + 2;
                unint64_t v96 = v13 + 3;
                unint64_t result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(v13, v13 + 1, v13 + 2, v13 + 3, **a3);
                uint64_t v97 = v13[3];
                uint64_t v87 = **a3;
                if (*(float *)(v87 + 20 * *v12) >= *(float *)(v87 + 20 * v97)) {
                  return result;
                }
                *unint64_t v96 = *v12;
                uint64_t *v12 = v97;
                uint64_t v98 = *v96;
                uint64_t v99 = *v95;
                float v100 = *(float *)(v87 + 20 * *v96);
                if (v100 >= *(float *)(v87 + 20 * *v95)) {
                  return result;
                }
                *uint64_t v95 = v98;
                *unint64_t v96 = v99;
                uint64_t v101 = *v94;
                if (v100 >= *(float *)(v87 + 20 * *v94)) {
                  return result;
                }
                v13[1] = v98;
                void v13[2] = v101;
                uint64_t v102 = *v13;
                goto LABEL_151;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            uint64_t v103 = *a3;
            if (a5)
            {
              if (v13 != a2)
              {
                uint64_t v104 = v13 + 1;
                if (v13 + 1 != a2)
                {
                  uint64_t v105 = *v103;
                  uint64_t v106 = 8;
                  unsigned int v107 = v13;
                  do
                  {
                    uint64_t v110 = *v107;
                    uint64_t v109 = v107[1];
                    unsigned int v107 = v104;
                    float v111 = *(float *)(v105 + 20 * v109);
                    if (v111 < *(float *)(v105 + 20 * v110))
                    {
                      uint64_t v112 = v106;
                      do
                      {
                        *(uint64_t *)((char *)v13 + v112) = v110;
                        uint64_t v113 = v112 - 8;
                        if (v112 == 8)
                        {
                          float v108 = v13;
                          goto LABEL_112;
                        }
                        uint64_t v110 = *(uint64_t *)((char *)v13 + v112 - 16);
                        v112 -= 8;
                      }
                      while (v111 < *(float *)(v105 + 20 * v110));
                      float v108 = (uint64_t *)((char *)v13 + v113);
LABEL_112:
                      *float v108 = v109;
                    }
                    uint64_t v104 = v107 + 1;
                    v106 += 8;
                  }
                  while (v107 + 1 != a2);
                }
              }
            }
            else if (v13 != a2)
            {
              unsigned int v142 = v13 + 1;
              if (v13 + 1 != a2)
              {
                uint64_t v143 = *v103;
                do
                {
                  uint64_t v145 = *v11;
                  uint64_t v144 = v11[1];
                  unint64_t v11 = v142;
                  float v146 = *(float *)(v143 + 20 * v144);
                  if (v146 < *(float *)(v143 + 20 * v145))
                  {
                    do
                    {
                      *unsigned int v142 = v145;
                      uint64_t v145 = *(v142 - 2);
                      --v142;
                    }
                    while (v146 < *(float *)(v143 + 20 * v145));
                    *unsigned int v142 = v144;
                  }
                  unsigned int v142 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v13 != a2)
            {
              int64_t v114 = (v15 - 2) >> 1;
              int64_t v115 = v114;
              do
              {
                if (v114 >= v115)
                {
                  uint64_t v117 = (2 * v115) | 1;
                  uint64_t v118 = &v13[v117];
                  uint64_t v119 = **a3;
                  if (2 * v115 + 2 < (uint64_t)v15 && *(float *)(v119 + 20 * *v118) < *(float *)(v119 + 20 * v118[1]))
                  {
                    ++v118;
                    uint64_t v117 = 2 * v115 + 2;
                  }
                  unint64_t v120 = &v13[v115];
                  unint64_t result = *v118;
                  uint64_t v121 = *v120;
                  float v122 = *(float *)(v119 + 20 * *v120);
                  if (*(float *)(v119 + 20 * *v118) >= v122)
                  {
                    do
                    {
                      uint64_t v123 = v118;
                      *unint64_t v120 = result;
                      if (v114 < v117) {
                        break;
                      }
                      uint64_t v124 = 2 * v117;
                      uint64_t v117 = (2 * v117) | 1;
                      uint64_t v118 = &v13[v117];
                      uint64_t v125 = v124 + 2;
                      if (v125 < (uint64_t)v15 && *(float *)(v119 + 20 * *v118) < *(float *)(v119 + 20 * v118[1]))
                      {
                        ++v118;
                        uint64_t v117 = v125;
                      }
                      unint64_t result = *v118;
                      unint64_t v120 = v123;
                    }
                    while (*(float *)(v119 + 20 * *v118) >= v122);
                    *uint64_t v123 = v121;
                  }
                }
                BOOL v116 = v115-- <= 0;
              }
              while (!v116);
              uint64_t v126 = (unint64_t)v14 >> 3;
              do
              {
                uint64_t v127 = 0;
                uint64_t v128 = *v13;
                uint64_t v129 = *a3;
                uint64_t v130 = v13;
                do
                {
                  BOOL v131 = v130;
                  v130 += v127 + 1;
                  uint64_t v132 = 2 * v127;
                  uint64_t v127 = (2 * v127) | 1;
                  uint64_t v133 = v132 + 2;
                  if (v133 < v126)
                  {
                    unint64_t result = 20 * v130[1];
                    if (*(float *)(*v129 + 20 * *v130) < *(float *)(*v129 + result))
                    {
                      ++v130;
                      uint64_t v127 = v133;
                    }
                  }
                  *BOOL v131 = *v130;
                }
                while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
                if (v130 == --a2)
                {
                  *uint64_t v130 = v128;
                }
                else
                {
                  *uint64_t v130 = *a2;
                  *a2 = v128;
                  uint64_t v134 = (char *)v130 - (char *)v13 + 8;
                  if (v134 >= 9)
                  {
                    unint64_t v135 = (((unint64_t)v134 >> 3) - 2) >> 1;
                    uint64_t v136 = &v13[v135];
                    uint64_t v137 = *v136;
                    uint64_t v138 = *v130;
                    uint64_t v139 = **a3;
                    float v140 = *(float *)(v139 + 20 * *v130);
                    if (*(float *)(v139 + 20 * *v136) < v140)
                    {
                      do
                      {
                        int v141 = v136;
                        *uint64_t v130 = v137;
                        if (!v135) {
                          break;
                        }
                        unint64_t v135 = (v135 - 1) >> 1;
                        uint64_t v136 = &v13[v135];
                        uint64_t v137 = *v136;
                        uint64_t v130 = v141;
                      }
                      while (*(float *)(v139 + 20 * *v136) < v140);
                      *int v141 = v138;
                    }
                  }
                }
                BOOL v116 = v126-- <= 2;
              }
              while (!v116);
            }
            return result;
          }
          unint64_t v16 = v15 >> 1;
          int64x2_t v17 = &v13[v15 >> 1];
          uint64_t v18 = **a3;
          uint64_t v19 = *v12;
          float v20 = *(float *)(v18 + 20 * *v12);
          if ((unint64_t)v14 >= 0x401)
          {
            uint64_t v21 = *v17;
            uint64_t v22 = *v13;
            float v23 = *(float *)(v18 + 20 * *v17);
            float v24 = *(float *)(v18 + 20 * *v13);
            if (v23 >= v24)
            {
              if (v20 < v23)
              {
                *int64x2_t v17 = v19;
                uint64_t *v12 = v21;
                uint64_t v29 = *v13;
                if (*(float *)(v18 + 20 * *v17) < *(float *)(v18 + 20 * *v13))
                {
                  *uint64_t v13 = *v17;
                  *int64x2_t v17 = v29;
                }
              }
            }
            else
            {
              if (v20 >= v23)
              {
                *uint64_t v13 = v21;
                *int64x2_t v17 = v22;
                if (*(float *)(v18 + 20 * *v12) >= v24) {
                  goto LABEL_23;
                }
                *int64x2_t v17 = *v12;
              }
              else
              {
                *uint64_t v13 = v19;
              }
              uint64_t *v12 = v22;
            }
LABEL_23:
            unint64_t v31 = &v13[v16];
            uint64_t v34 = *(v31 - 1);
            uint64_t v32 = v31 - 1;
            uint64_t v33 = v34;
            uint64_t v35 = v13[1];
            float v36 = *(float *)(v18 + 20 * v34);
            float v37 = *(float *)(v18 + 20 * v35);
            uint64_t v38 = *(a2 - 2);
            float v39 = *(float *)(v18 + 20 * v38);
            if (v36 >= v37)
            {
              if (v39 < v36)
              {
                uint64_t *v32 = v38;
                *(a2 - 2) = v33;
                uint64_t v40 = v13[1];
                if (*(float *)(v18 + 20 * *v32) < *(float *)(v18 + 20 * v40))
                {
                  v13[1] = *v32;
                  uint64_t *v32 = v40;
                }
              }
            }
            else
            {
              if (v39 >= v36)
              {
                v13[1] = v33;
                uint64_t *v32 = v35;
                uint64_t v41 = *(a2 - 2);
                if (*(float *)(v18 + 20 * v41) >= v37) {
                  goto LABEL_35;
                }
                uint64_t *v32 = v41;
              }
              else
              {
                v13[1] = v38;
              }
              *(a2 - 2) = v35;
            }
LABEL_35:
            uint64_t v42 = &v13[v16];
            uint64_t v45 = v42[1];
            uint64_t v43 = v42 + 1;
            uint64_t v44 = v45;
            uint64_t v46 = v13[2];
            float v47 = *(float *)(v18 + 20 * v45);
            float v48 = *(float *)(v18 + 20 * v46);
            uint64_t v49 = *(a2 - 3);
            float v50 = *(float *)(v18 + 20 * v49);
            if (v47 >= v48)
            {
              if (v50 < v47)
              {
                uint64_t *v43 = v49;
                *(a2 - 3) = v44;
                uint64_t v51 = v13[2];
                if (*(float *)(v18 + 20 * *v43) < *(float *)(v18 + 20 * v51))
                {
                  void v13[2] = *v43;
                  uint64_t *v43 = v51;
                }
              }
            }
            else
            {
              if (v50 >= v47)
              {
                void v13[2] = v44;
                uint64_t *v43 = v46;
                uint64_t v52 = *(a2 - 3);
                if (*(float *)(v18 + 20 * v52) >= v48) {
                  goto LABEL_44;
                }
                uint64_t *v43 = v52;
              }
              else
              {
                void v13[2] = v49;
              }
              *(a2 - 3) = v46;
            }
LABEL_44:
            uint64_t v53 = *v17;
            uint64_t v54 = *v32;
            float v55 = *(float *)(v18 + 20 * *v17);
            float v56 = *(float *)(v18 + 20 * *v32);
            uint64_t v57 = *v43;
            float v58 = *(float *)(v18 + 20 * *v43);
            if (v55 >= v56)
            {
              if (v58 >= v55) {
                goto LABEL_52;
              }
              *int64x2_t v17 = v57;
              uint64_t *v43 = v53;
              uint64_t v43 = &v13[v15 >> 1];
              uint64_t v53 = v54;
              if (v58 >= v56)
              {
                uint64_t v53 = v57;
                goto LABEL_52;
              }
            }
            else if (v58 >= v55)
            {
              uint64_t *v32 = v53;
              *int64x2_t v17 = v54;
              uint64_t v32 = &v13[v15 >> 1];
              uint64_t v53 = v57;
              if (v58 >= v56)
              {
                uint64_t v53 = v54;
LABEL_52:
                uint64_t v59 = *v13;
                *uint64_t v13 = v53;
                *int64x2_t v17 = v59;
                goto LABEL_53;
              }
            }
            uint64_t *v32 = v57;
            uint64_t *v43 = v54;
            goto LABEL_52;
          }
          uint64_t v25 = *v13;
          uint64_t v26 = *v17;
          float v27 = *(float *)(v18 + 20 * *v13);
          float v28 = *(float *)(v18 + 20 * *v17);
          if (v27 >= v28)
          {
            if (v20 < v27)
            {
              *uint64_t v13 = v19;
              uint64_t *v12 = v25;
              uint64_t v30 = *v17;
              if (*(float *)(v18 + 20 * *v13) < *(float *)(v18 + 20 * *v17))
              {
                *int64x2_t v17 = *v13;
                *uint64_t v13 = v30;
              }
            }
          }
          else
          {
            if (v20 < v27)
            {
              *int64x2_t v17 = v19;
LABEL_31:
              uint64_t *v12 = v26;
              goto LABEL_53;
            }
            *int64x2_t v17 = v25;
            *uint64_t v13 = v26;
            if (*(float *)(v18 + 20 * *v12) < v28)
            {
              *uint64_t v13 = *v12;
              goto LABEL_31;
            }
          }
LABEL_53:
          --a4;
          uint64_t v60 = *v13;
          if (a5) {
            break;
          }
          float v61 = *(float *)(v18 + 20 * v60);
          if (*(float *)(v18 + 20 * *(v13 - 1)) < v61) {
            break;
          }
          if (v61 < *(float *)(v18 + 20 * *v12))
          {
            do
            {
              uint64_t v77 = v13[1];
              ++v13;
            }
            while (v61 >= *(float *)(v18 + 20 * v77));
          }
          else
          {
            uint64_t v78 = v13 + 1;
            do
            {
              uint64_t v13 = v78;
              if (v78 >= a2) {
                break;
              }
              ++v78;
            }
            while (v61 >= *(float *)(v18 + 20 * *v13));
          }
          uint64_t v79 = a2;
          if (v13 < a2)
          {
            uint64_t v79 = a2;
            do
              uint64_t v80 = *--v79;
            while (v61 < *(float *)(v18 + 20 * v80));
          }
          if (v13 < v79)
          {
            uint64_t v81 = *v13;
            uint64_t v82 = *v79;
            do
            {
              *uint64_t v13 = v82;
              *uint64_t v79 = v81;
              do
              {
                uint64_t v83 = v13[1];
                ++v13;
                uint64_t v81 = v83;
              }
              while (v61 >= *(float *)(v18 + 20 * v83));
              do
              {
                uint64_t v84 = *--v79;
                uint64_t v82 = v84;
              }
              while (v61 < *(float *)(v18 + 20 * v84));
            }
            while (v13 < v79);
          }
          uint64_t v85 = v13 - 1;
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            uint64_t *v11 = *v85;
          }
          a5 = 0;
          *uint64_t v85 = v60;
        }
        uint64_t v62 = **a3;
        float v63 = *(float *)(v62 + 20 * v60);
        uint64_t v64 = v13;
        do
        {
          unint64_t v65 = v64;
          uint64_t v67 = v64[1];
          ++v64;
          uint64_t v66 = v67;
        }
        while (*(float *)(v62 + 20 * v67) < v63);
        unint64_t v68 = a2;
        if (v65 == v13)
        {
          unint64_t v68 = a2;
          do
          {
            if (v64 >= v68) {
              break;
            }
            uint64_t v70 = *--v68;
          }
          while (*(float *)(v62 + 20 * v70) >= v63);
        }
        else
        {
          do
            uint64_t v69 = *--v68;
          while (*(float *)(v62 + 20 * v69) >= v63);
        }
        if (v64 < v68)
        {
          uint64_t v71 = *v68;
          int v72 = v64;
          uint64_t v73 = v68;
          do
          {
            *int v72 = v71;
            *uint64_t v73 = v66;
            do
            {
              unint64_t v65 = v72;
              uint64_t v74 = v72[1];
              ++v72;
              uint64_t v66 = v74;
            }
            while (*(float *)(v62 + 20 * v74) < v63);
            do
            {
              uint64_t v75 = *--v73;
              uint64_t v71 = v75;
            }
            while (*(float *)(v62 + 20 * v75) >= v63);
          }
          while (v72 < v73);
        }
        if (v65 != v13) {
          *uint64_t v13 = *v65;
        }
        *unint64_t v65 = v60;
        if (v64 >= v68) {
          break;
        }
LABEL_74:
        unint64_t result = std::__introsort<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *,false>(v11, v65, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = v65 + 1;
      }
      BOOL v76 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(v13, v65, a3);
      uint64_t v13 = v65 + 1;
      unint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(v65 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v76) {
        goto LABEL_74;
      }
    }
    a2 = v65;
    if (!v76) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  float v7 = *(float *)(a5 + 20 * *a2);
  float v8 = *(float *)(a5 + 20 * *result);
  uint64_t v9 = *a3;
  float v10 = *(float *)(a5 + 20 * *a3);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      uint64_t v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      uint64_t v11 = *result;
      if (*(float *)(a5 + 20 * *a2) < *(float *)(a5 + 20 * *result))
      {
        *unint64_t result = *a2;
        *a2 = v11;
        uint64_t v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *unint64_t result = v9;
LABEL_9:
      *a3 = v6;
      uint64_t v5 = v6;
      goto LABEL_11;
    }
    *unint64_t result = v5;
    *a2 = v6;
    uint64_t v5 = *a3;
    if (*(float *)(a5 + 20 * *a3) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(float *)(a5 + 20 * *a4) < *(float *)(a5 + 20 * v5))
  {
    *a3 = *a4;
    *a4 = v5;
    uint64_t v12 = *a2;
    if (*(float *)(a5 + 20 * *a3) < *(float *)(a5 + 20 * *a2))
    {
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = *result;
      if (*(float *)(a5 + 20 * *a2) < *(float *)(a5 + 20 * *result))
      {
        *unint64_t result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(**a3 + 20 * v8) < *(float *)(**a3 + 20 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      uint64_t v10 = **a3;
      uint64_t v11 = *a1;
      uint64_t v12 = a1[1];
      float v13 = *(float *)(v10 + 20 * v12);
      float v14 = *(float *)(v10 + 20 * *a1);
      uint64_t v15 = *(a2 - 1);
      float v16 = *(float *)(v10 + 20 * v15);
      if (v13 >= v14)
      {
        if (v16 < v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          uint64_t v39 = *a1;
          uint64_t v38 = a1[1];
          if (*(float *)(v10 + 20 * v38) < *(float *)(v10 + 20 * *a1))
          {
            *a1 = v38;
            a1[1] = v39;
          }
        }
      }
      else if (v16 >= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        uint64_t v49 = *(a2 - 1);
        if (*(float *)(v10 + 20 * v49) < v14)
        {
          a1[1] = v49;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, **a3);
      return 1;
    case 5:
      float v27 = a1 + 1;
      float v28 = a1 + 2;
      uint64_t v29 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLineLabelFeature::calculateTextOffsetFromTransitLineSegments(md::TransitLineLabelFeature::LabelTransitLink const*)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, **a3);
      uint64_t v30 = *(a2 - 1);
      uint64_t v31 = a1[3];
      uint64_t v32 = **a3;
      if (*(float *)(v32 + 20 * v30) < *(float *)(v32 + 20 * v31))
      {
        uint64_t *v29 = v30;
        *(a2 - 1) = v31;
        uint64_t v33 = *v29;
        uint64_t v34 = *v28;
        float v35 = *(float *)(v32 + 20 * *v29);
        if (v35 < *(float *)(v32 + 20 * *v28))
        {
          uint64_t *v28 = v33;
          uint64_t *v29 = v34;
          uint64_t v36 = *v27;
          if (v35 < *(float *)(v32 + 20 * *v27))
          {
            a1[1] = v33;
            a1[2] = v36;
            uint64_t v37 = *a1;
            if (v35 < *(float *)(v32 + 20 * *a1))
            {
              *a1 = v33;
              a1[1] = v37;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v18 = a1 + 2;
      uint64_t v17 = a1[2];
      uint64_t v19 = a1[1];
      uint64_t v20 = **a3;
      uint64_t v21 = *a1;
      float v22 = *(float *)(v20 + 20 * v19);
      float v23 = *(float *)(v20 + 20 * *a1);
      float v24 = *(float *)(v20 + 20 * v17);
      if (v22 < v23)
      {
        uint64_t v25 = a1;
        uint64_t v26 = a1 + 2;
        if (v24 >= v22)
        {
          *a1 = v19;
          a1[1] = v21;
          uint64_t v25 = a1 + 1;
          uint64_t v26 = a1 + 2;
          if (v24 >= v23) {
            goto LABEL_23;
          }
        }
LABEL_22:
        *uint64_t v25 = v17;
        *uint64_t v26 = v21;
        goto LABEL_23;
      }
      if (v24 < v22)
      {
        a1[1] = v17;
        *uint64_t v18 = v19;
        uint64_t v25 = a1;
        uint64_t v26 = a1 + 1;
        if (v24 < v23) {
          goto LABEL_22;
        }
      }
LABEL_23:
      uint64_t v40 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v41 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v44 = *v40;
        uint64_t v45 = *v18;
        float v46 = *(float *)(v20 + 20 * *v40);
        if (v46 < *(float *)(v20 + 20 * v45))
        {
          uint64_t v47 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v47) = v45;
            uint64_t v48 = v47 - 8;
            if (v47 == 8)
            {
              uint64_t v43 = a1;
              goto LABEL_26;
            }
            uint64_t v45 = *(uint64_t *)((char *)a1 + v47 - 16);
            v47 -= 8;
          }
          while (v46 < *(float *)(v20 + 20 * v45));
          uint64_t v43 = (uint64_t *)((char *)a1 + v48);
LABEL_26:
          uint64_t *v43 = v44;
          if (++v41 == 8) {
            break;
          }
        }
        uint64_t v18 = v40++;
        if (v40 == a2) {
          return 1;
        }
      }
      return v40 + 1 == a2;
  }
}