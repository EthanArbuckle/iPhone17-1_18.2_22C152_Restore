uint64_t md::LabelMapTileCollisionInfo::LabelMapTileCollisionInfo(uint64_t a1, char a2, _OWORD *a3, uint64_t a4, int a5)
{
  long long v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v7 = a3[1];
  *(_OWORD *)a1 = *a3;
  *(_OWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  {
    v13 = a4;
    v14 = a2;
    a2 = v14;
    a4 = v13;
    if (v15) {
      operator new();
    }
  }
  v8 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  {
    v16 = a4;
    v17 = a2;
    a2 = v17;
    a4 = v16;
    if (v18) {
      operator new();
    }
  }
  v9 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  {
    v25 = a4;
    v19 = a2;
    a2 = v19;
    a4 = v25;
    if (v20) {
      operator new();
    }
  }
  v10 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  {
    v26 = a4;
    v24 = a2;
    a2 = v24;
    a4 = v26;
    if (v21) {
      operator new();
    }
  }
  *(void *)(a1 + 160) = mdm::Allocator::instance(void)::alloc;
  *(unsigned char *)(a1 + 168) = a2;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  {
    v22 = a4;
    a4 = v22;
    if (v23) {
      operator new();
    }
  }
  *(void *)(a1 + 208) = mdm::Allocator::instance(void)::alloc;
  md::LabelMapTileCollisionInfo::extractPathsFromSource((double *)a1, (double *)(a4 + 64), (uint64_t *)(a4 + 160), (int **)(a4 + 192));
  if (a5 == 2)
  {
    v11 = 4.0;
    md::LabelMapTileCollisionInfo::setupCollidableItems(a1, 3u, 2);
    goto LABEL_10;
  }
  if (a5 == 3)
  {
    md::LabelMapTileCollisionInfo::setupCollidableItems(a1, 2u, 3);
    v11 = 0.1;
LABEL_10:
    *(float *)(a1 + 32) = v11;
  }
  return a1;
}

void sub_1A21CBE84(_Unwind_Exception *exception_object)
{
  v6 = v2;
  v8 = *(void (****)(void, uint64_t))(v1 + 184);
  if (v8)
  {
    v13 = *(void (****)(void, uint64_t))(v1 + 192);
    uint64_t v14 = *(void *)(v1 + 184);
    if (v13 != v8)
    {
      v15 = v13 - 34;
      v16 = v13 - 34;
      do
      {
        (**v16)(v16, v14);
        v15 -= 34;
        BOOL v17 = v16 == v8;
        v16 -= 34;
      }
      while (!v17);
      uint64_t v14 = *(void *)(v1 + 184);
    }
    *(void *)(v1 + 192) = v8;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 208) + 40))(*(void *)(v1 + 208), v14, *(void *)(v1 + 200) - v14);
    uint64_t v9 = *v5;
    if (!*v5)
    {
LABEL_3:
      uint64_t v10 = *v4;
      if (!*v4) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v9 = *v5;
    if (!*v5) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 144) = v9;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 160) + 40))(*(void *)(v1 + 160), v9, *(void *)(v1 + 152) - v9);
  uint64_t v10 = *v4;
  if (!*v4)
  {
LABEL_4:
    uint64_t v11 = *v3;
    if (!*v3) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  *(void *)(v1 + 112) = v10;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 128) + 40))(*(void *)(v1 + 128), v10, *(void *)(v1 + 120) - v10);
  uint64_t v11 = *v3;
  if (!*v3)
  {
LABEL_5:
    uint64_t v12 = *v6;
    if (!*v6) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(v1 + 80) = v11;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 96) + 40))(*(void *)(v1 + 96), v11, *(void *)(v1 + 88) - v11);
  uint64_t v12 = *v6;
  if (!*v6) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_16:
  *(void *)(v1 + 48) = v12;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 64) + 40))(*(void *)(v1 + 64), v12, *(void *)(v1 + 56) - v12);
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelMapTileCollisionInfo::LabelMapTileCollisionInfo(uint64_t a1, char a2, _OWORD *a3, uint64_t **a4)
{
  long long v5 = a3[1];
  *(_OWORD *)a1 = *a3;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 32) = 1036831949;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  {
    char v31 = a2;
    v32 = a4;
    a4 = v32;
    a2 = v31;
    if (v33) {
      operator new();
    }
  }
  uint64_t v6 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  {
    char v34 = a2;
    v35 = a4;
    a4 = v35;
    a2 = v34;
    if (v36) {
      operator new();
    }
  }
  uint64_t v7 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  {
    char v37 = a2;
    v38 = a4;
    a4 = v38;
    a2 = v37;
    if (v39) {
      operator new();
    }
  }
  uint64_t v8 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = v8;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  {
    char v40 = a2;
    v41 = a4;
    a4 = v41;
    a2 = v40;
    if (v42) {
      operator new();
    }
  }
  *(void *)(a1 + 160) = mdm::Allocator::instance(void)::alloc;
  *(unsigned char *)(a1 + 168) = a2;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  {
    v43 = a4;
    a4 = v43;
    if (v44) {
      operator new();
    }
  }
  *(void *)(a1 + 208) = mdm::Allocator::instance(void)::alloc;
  uint64_t v9 = *a4;
  uint64_t v10 = **a4;
  uint64_t v11 = *(uint64_t **)(v10 + 32);
  uint64_t v12 = *(void **)(v10 + 40);
  uint64_t v14 = (*a4)[10];
  uint64_t v13 = (*a4)[11];
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  {
    v45 = a4;
    a4 = v45;
    if (v46) {
      operator new();
    }
  }
  uint64_t v15 = mdm::Allocator::instance(void)::alloc;
  uint64_t v50 = mdm::Allocator::instance(void)::alloc;
  if (v13 == v14)
  {
    uint64_t v19 = 0;
  }
  else
  {
    if ((unint64_t)(v13 - v14) >= 0x2AAAAAAAAAAAAAA9) {
      abort();
    }
    v16 = v12;
    BOOL v17 = a4;
    uint64_t v18 = 24 * ((v13 - v14) >> 2);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, v18, 8);
    uint64_t v20 = 0;
    uint64_t v47 = v19;
    uint64_t v49 = v19 + v18;
    a4 = v17;
    uint64_t v12 = v16;
    do
    {
      v21 = (void *)(v19 + v20);
      if (v19 + v20)
      {
        void *v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
      }
      v20 += 24;
    }
    while (v18 != v20);
    uint64_t v48 = v19 + v18;
  }
  v22 = (unsigned int *)v9[10];
  uint64_t v23 = v9[11] - (void)v22;
  if (v23)
  {
    unint64_t v24 = v23 >> 2;
    uint64_t v25 = *v11;
    uint64_t v26 = *v12;
    if (v24 <= 1) {
      unint64_t v24 = 1;
    }
    v27 = (double *)(v19 + 16);
    do
    {
      unsigned int v28 = *v22++;
      double v29 = *(float *)(v26 + 4 * v28);
      *((_OWORD *)v27 - 1) = *(_OWORD *)(v25 + 16 * v28);
      double *v27 = v29;
      v27 += 3;
      --v24;
    }
    while (v24);
  }
  md::LabelMapTileCollisionInfo::extractPathsFromSource((double *)a1, (double *)a4 + 1, &v47, (int **)a4 + 5);
  if (v47) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v47, v49 - v47);
  }
  md::LabelMapTileCollisionInfo::setupCollidableItems(a1, 3u, 1);
  return a1;
}

void sub_1A21CC51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  v22 = *(void (****)(void, uint64_t))(v15 + 184);
  if (v22)
  {
    uint64_t v23 = *(void (****)(void, uint64_t))(v15 + 192);
    uint64_t v24 = *(void *)(v15 + 184);
    if (v23 != v22)
    {
      uint64_t v25 = v23 - 34;
      uint64_t v26 = v23 - 34;
      do
      {
        (**v26)(v26, v24);
        v25 -= 34;
        BOOL v27 = v26 == v22;
        v26 -= 34;
      }
      while (!v27);
      uint64_t v24 = *(void *)(v15 + 184);
    }
    *(void *)(v15 + 192) = v22;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v15 + 208) + 40))(*(void *)(v15 + 208), v24, *(void *)(v15 + 200) - v24);
    uint64_t v17 = *v16;
    if (!*v16)
    {
LABEL_4:
      uint64_t v18 = *a10;
      if (*a10)
      {
        *(void *)(v15 + 112) = v18;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v15 + 128) + 40))(*(void *)(v15 + 128), v18, *(void *)(v15 + 120) - v18);
      }
      uint64_t v19 = *a11;
      if (*a11)
      {
        *(void *)(v15 + 80) = v19;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v15 + 96) + 40))(*(void *)(v15 + 96), v19, *(void *)(v15 + 88) - v19);
      }
      uint64_t v20 = *a12;
      if (*a12)
      {
        *(void *)(v15 + 48) = v20;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v15 + 64) + 40))(*(void *)(v15 + 64), v20, *(void *)(v15 + 56) - v20);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    uint64_t v17 = *v16;
    if (!*v16) {
      goto LABEL_4;
    }
  }
  *(void *)(v15 + 144) = v17;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v15 + 160) + 40))(*(void *)(v15 + 160), v17, *(void *)(v15 + 152) - v17);
  goto LABEL_4;
}

unint64_t md::LabelMapTileCollisionInfo::pointsToScreen(md::LabelMapTileCollisionInfo *this, md::LabelManager *a2, uint64_t a3, double a4)
{
  double v7 = *(float *)(a3 + 48) * a4;
  uint64_t v8 = (double *)((char *)a2 + 176);
  if (vabdd_f64(*((double *)a2 + 22), v7) <= 0.00999999978)
  {
    unint64_t v9 = *((void *)a2 + 13);
    uint64_t v10 = *((void *)a2 + 14);
    goto LABEL_47;
  }
  *((double *)a2 + 22) = v7;
  unint64_t v9 = *((void *)a2 + 13);
  uint64_t v10 = *((void *)a2 + 14);
  if (!*((unsigned char *)a2 + 168))
  {
    if (v10 != v9)
    {
      unint64_t v15 = (uint64_t)(v10 - v9) / 24;
      uint64_t v16 = *((void *)a2 + 5);
      if (v15 <= 1) {
        unint64_t v15 = 1;
      }
      if (v15 > 3)
      {
        unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFCLL;
        v55 = (void *)(v9 + 64);
        v56 = (float32x4_t *)*((void *)a2 + 5);
        unint64_t v57 = v15 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float32x4_t v58 = *v56++;
          float64x2_t v59 = vmulq_n_f64(vcvt_hight_f64_f32(v58), v7);
          float64x2_t v60 = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v58.f32), v7);
          *(v55 - 6) = *(void *)&v60.f64[0];
          *(v55 - 3) = *(void *)&v60.f64[1];
          v61 = v55 + 3;
          void *v55 = *(void *)&v59.f64[0];
          v55 += 12;
          void *v61 = *(void *)&v59.f64[1];
          v57 -= 4;
        }
        while (v57);
        if (v15 == v17) {
          goto LABEL_47;
        }
      }
      else
      {
        unint64_t v17 = 0;
      }
      unint64_t v62 = v15 - v17;
      uint64_t v63 = 24 * v17 + 16;
      v64 = (float *)(v16 + 4 * v17);
      do
      {
        float v65 = *v64++;
        *(double *)(v9 + v63) = v7 * v65;
        v63 += 24;
        --v62;
      }
      while (v62);
      goto LABEL_47;
    }
LABEL_14:
    unint64_t v9 = *((void *)a2 + 14);
    goto LABEL_47;
  }
  if (v10 == v9) {
    goto LABEL_14;
  }
  unint64_t v11 = (uint64_t)(v10 - v9) / 24;
  unint64_t v12 = *((void *)a2 + 9);
  uint64_t v13 = *((void *)a2 + 5);
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  if (v11 <= 7)
  {
    unint64_t v14 = 0;
LABEL_39:
    unint64_t v45 = v11 - v14;
    uint64_t v46 = 24 * v14;
    uint64_t v47 = (float *)(v13 + 4 * v14);
    float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x3D1BAD32FB2535B3uLL);
    do
    {
      float v49 = *v47++;
      double v50 = *(double *)(v12 + v46 + 16);
      float64x2_t v51 = *(float64x2_t *)(v12 + v46);
      float64x2_t v52 = vmulq_f64(v51, v48);
      double v53 = *v8 * v49 / sqrt(vaddvq_f64(vmulq_f64(v52, v52)) + v50 * 2.4747391e-14 * (v50 * 2.4747391e-14));
      v54 = (float64x2_t *)(v9 + v46);
      float64x2_t *v54 = vmlaq_n_f64(v51, v52, v53);
      v54[1].f64[0] = v50 + v53 * (v50 * 2.4747391e-14);
      v46 += 24;
      --v45;
    }
    while (v45);
    goto LABEL_47;
  }
  unint64_t v14 = 0;
  BOOL v18 = !is_mul_ok(v11 - 1, 0x18uLL);
  uint64_t v19 = 24 * (v11 - 1);
  unint64_t v20 = v9 + 8 + v19;
  unint64_t v21 = v9 + 16 + v19;
  unint64_t v22 = v9 + v19;
  BOOL v24 = v21 >= v9 + 16 && v20 >= v9 + 8 && v22 >= v9;
  if (!v24 || v18) {
    goto LABEL_39;
  }
  unint64_t v14 = 0;
  unint64_t v25 = v9 + 24 * v11;
  BOOL v26 = v9 >= (unint64_t)a2 + 184 || (unint64_t)v8 >= v25;
  BOOL v27 = !v26;
  if (v12 < v25 && v9 < v12 + 24 * v11) {
    goto LABEL_39;
  }
  if (v27) {
    goto LABEL_39;
  }
  uint64_t v29 = 0;
  float64x2_t v30 = (float64x2_t)vdupq_n_s64(0x3D1BAD32FB2535B3uLL);
  unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x3D1BDCF3277BE69DuLL);
  v32 = (float32x4_t *)*((void *)a2 + 5);
  unint64_t v33 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    char v34 = (const double *)(v12 + v29);
    float64x2x3_t v118 = vld3q_f64(v34);
    v34 += 6;
    float64x2_t v35 = vmulq_f64(v118.val[0], v30);
    float64x2x3_t v120 = vld3q_f64(v34);
    float64x2_t v36 = vmulq_f64(v120.val[0], v30);
    float64x2_t v37 = vmulq_f64(v118.val[1], v30);
    float64x2_t v38 = vmulq_f64(v120.val[1], v30);
    float64x2_t v39 = vmulq_f64(v118.val[2], v31);
    float64x2_t v40 = vmulq_f64(v120.val[2], v31);
    float32x4_t v41 = *v32++;
    float64x2_t v42 = vdivq_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v41.f32), *v8), vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v35, v35), v37, v37), v39, v39)));
    float64x2_t v43 = vdivq_f64(vmulq_n_f64(vcvt_hight_f64_f32(v41), *v8), vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v36, v36), v38, v38), v40, v40)));
    v120.val[0] = vmlaq_f64(v120.val[0], v36, v43);
    v120.val[1] = vmlaq_f64(v120.val[1], v38, v43);
    v120.val[2] = vmlaq_f64(v120.val[2], v40, v43);
    v118.val[0] = vmlaq_f64(v118.val[0], v35, v42);
    v118.val[1] = vmlaq_f64(v118.val[1], v37, v42);
    v118.val[2] = vmlaq_f64(v118.val[2], v39, v42);
    int v44 = (double *)(v9 + v29);
    vst3q_f64(v44, v118);
    v44 += 6;
    vst3q_f64(v44, v120);
    v29 += 96;
    v33 -= 4;
  }
  while (v33);
  if (v11 != v14) {
    goto LABEL_39;
  }
LABEL_47:
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  v66 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    unint64_t v117 = v9;
    v66 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    unint64_t v9 = v117;
    if (v116) {
      operator new();
    }
  }
  uint64_t v67 = *((void *)v66 + 91);
  *((void *)this + 3) = v67;
  if (v10 == v9)
  {
    unint64_t result = 0;
  }
  else
  {
    unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v9) >> 3);
    if (v68 >> 61) {
      abort();
    }
    uint64_t v69 = 8 * v68;
    unint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v67 + 16))(v67, 8 * v68, 4);
    *((void *)this + 1) = result + v69;
    *((void *)this + 2) = result + v69;
    *(void *)this = result;
  }
  uint64_t v71 = *((void *)a2 + 13);
  uint64_t v72 = *((void *)a2 + 14) - v71;
  if (v72)
  {
    unint64_t v73 = v72 / 24;
    float64x2_t v74 = *(float64x2_t *)(a3 + 864);
    float64x2_t v75 = *(float64x2_t *)(a3 + 896);
    float64x2_t v76 = *(float64x2_t *)(a3 + 928);
    float64x2_t v77 = *(float64x2_t *)(a3 + 960);
    uint64_t v78 = *(uint64_t *)(a3 + 888);
    uint64_t v79 = *(uint64_t *)(a3 + 920);
    uint64_t v80 = *(uint64_t *)(a3 + 952);
    uint64_t v81 = *(uint64_t *)(a3 + 984);
    if (v73 <= 1) {
      unint64_t v73 = 1;
    }
    if (v73 < 4
      || ((uint64_t v82 = 8 * (v73 - 1), v83 = result + v82, v84 = result + 4 + v82, v83 >= result)
        ? (BOOL v85 = v84 >= result + 4)
        : (BOOL v85 = 0),
          v85 ? (_ZF = (v73 - 1) >> 61 == 0) : (_ZF = 0),
          !_ZF))
    {
      unint64_t v87 = 0;
LABEL_64:
      unint64_t v88 = v73 - v87;
      v89 = (float32x2_t *)(result + 8 * v87);
      v90 = (double *)(v71 + 24 * v87 + 16);
      do
      {
        double v91 = *(v90 - 2);
        double v92 = *(v90 - 1);
        double v93 = *v90;
        v90 += 3;
        *v89++ = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v77, v74, v91), v75, v92), v76, v93), 1.0 / (*(double *)&v81 + *(double *)&v78 * v91 + *(double *)&v79 * v92 + *(double *)&v80 * v93)));
        --v88;
      }
      while (v88);
      return result;
    }
    float64x2_t v94 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v74.f64[0], 0);
    float64x2_t v95 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v75.f64[0], 0);
    float64x2_t v96 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v76.f64[0], 0);
    float64x2_t v97 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v77.f64[0], 0);
    float64x2_t v98 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v74, 1);
    float64x2_t v99 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v75, 1);
    float64x2_t v100 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v76, 1);
    float64x2_t v101 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v77, 1);
    float64x2_t v102 = (float64x2_t)vdupq_lane_s64(v78, 0);
    float64x2_t v103 = (float64x2_t)vdupq_lane_s64(v79, 0);
    float64x2_t v104 = (float64x2_t)vdupq_lane_s64(v80, 0);
    unint64_t v87 = v73 & 0xFFFFFFFFFFFFFFFCLL;
    v105 = (const double *)*((void *)a2 + 13);
    v106 = (float *)result;
    unint64_t v107 = v73 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v108 = (float64x2_t)vdupq_lane_s64(v81, 0);
    do
    {
      v109 = v105;
      float64x2x3_t v121 = vld3q_f64(v109);
      v109 += 6;
      float64x2x3_t v119 = vld3q_f64(v109);
      float64x2_t v110 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v97, v94, v121.val[0]), v95, v121.val[1]), v96, v121.val[2]);
      float64x2_t v111 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v101, v121.val[0], v98), v121.val[1], v99), v121.val[2], v100);
      float64x2_t v112 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v101, v119.val[0], v98), v119.val[1], v99), v119.val[2], v100);
      float64x2_t v113 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v108, v121.val[0], v102), v121.val[1], v103), v121.val[2], v104);
      __asm { FMOV            V28.2D, #1.0 }
      v121.val[1] = vdivq_f64(v121.val[0], v113);
      v121.val[0] = vdivq_f64(v121.val[0], vmlaq_f64(vmlaq_f64(vmlaq_f64(v108, v119.val[0], v102), v119.val[1], v103), v119.val[2], v104));
      v119.val[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v121.val[1], v110)), vmulq_f64(v121.val[0], vmlaq_f64(vmlaq_f64(vmlaq_f64(v97, v94, v119.val[0]), v95, v119.val[1]), v96, v119.val[2])));
      v119.val[1] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v121.val[1], v111)), vmulq_f64(v121.val[0], v112));
      vst2q_f32(v106, *(float32x4x2_t *)v119.val[0].f64);
      v106 += 8;
      v105 += 12;
      v107 -= 4;
    }
    while (v107);
    if (v73 != v87) {
      goto LABEL_64;
    }
  }
  return result;
}

void md::LabelMapTileCollisionInfo::addItemsToCollider(md::LabelMapTileCollisionInfo *this, md::LabelManager *a2, md::LabelCollider *a3)
{
  if (*((void *)this + 23) != *((void *)this + 24))
  {
    md::LabelMapTileCollisionInfo::pointsToScreen((md::LabelMapTileCollisionInfo *)v35, this, *((void *)a2 + 54), *(double *)(*((void *)a2 + 29) + 56));
    uint64_t v7 = *((void *)this + 23);
    uint64_t v8 = *((void *)this + 24);
    if (v7 != v8)
    {
      float v31 = *((float *)a2 + 44) * *((float *)this + 8);
      uint64_t v9 = v7 + 136;
      do
      {
        uint64_t v24 = *(unsigned int *)(v9 + 128);
        float32x2_t v32 = *(float32x2_t *)(v35[0] + 8 * v24);
        float32x2_t v25 = vsub_f32(*(float32x2_t *)(v35[0] + 8 * (v24 + 1)), v32);
        *(float32x2_t *)&long long v6 = vmul_f32(v25, v25);
        *(float *)&long long v6 = sqrtf(vaddv_f32(*(float32x2_t *)&v6));
        long long v34 = v6;
        BOOL v26 = *(float *)&v6 <= 0.0;
        float32x2_t v27 = (float32x2_t)1065353216;
        if (!v26) {
          float32x2_t v27 = vdiv_f32(v25, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v34, 0));
        }
        float32x2_t v33 = v27;
        if (!*(_DWORD *)(v9 + 96))
        {
          md::CollisionObject::resetWithRects((void **)(v9 - 80), 1u);
          *(_DWORD *)(v9 + 96) = 1;
          *(unsigned char *)(v9 + 116) = 1;
        }
        *((void *)&v6 + 1) = *((void *)&v34 + 1);
        *(float *)&long long v6 = *(float *)&v34 * 0.5;
        v10.f32[0] = *(float *)&v34 * 0.5;
        v10.f32[1] = v31;
        float32x2_t v11 = vmla_f32(v32, (float32x2_t)0x3F0000003F000000, v25);
        float v12 = vmuls_lane_f32(*(float *)&v34 * 0.5, v33, 1);
        *(float *)&long long v13 = *(float *)&v34 * 0.5;
        *((float *)&v13 + 1) = v31;
        *((float32x2_t *)&v13 + 1) = v11;
        float v14 = fabsf(-(float)(v33.f32[1] * v31)) + fabsf((float)(*(float *)&v34 * 0.5) * v33.f32[0]);
        if (v33.f32[0] == 1.0) {
          float v14 = *(float *)&v34 * 0.5;
        }
        *(float32x2_t *)(v9 - 64) = v33;
        unint64_t v15 = *(float32x2_t **)(v9 + 80);
        float32x2_t v16 = vneg_f32(v10);
        *unint64_t v15 = v16;
        v15[1].i32[0] = v6;
        v15[1].f32[1] = v31;
        *(_DWORD *)(v9 - 80) = v16.i32[0];
        *(_DWORD *)(v9 - 76) = v15->i32[1];
        *(_DWORD *)(v9 - 72) = v15[1].i32[0];
        *(_DWORD *)(v9 - 68) = v15[1].i32[1];
        *(float32x2_t *)(v9 - 48) = v11;
        float v17 = fabsf(v31 * v33.f32[0]) + fabsf(v12);
        if (v33.f32[0] == 1.0) {
          float v17 = v31;
        }
        float v18 = v11.f32[0] - v14;
        float v19 = v11.f32[1] - v17;
        float v20 = v11.f32[0] + v14;
        float v21 = v11.f32[1] + v17;
        *(float *)uint64_t v9 = v18;
        *(float *)(v9 + 4) = v19;
        *(float *)(v9 + 8) = v20;
        *(float *)(v9 + 12) = v21;
        *(float *)(v9 - 32) = v18;
        *(float *)(v9 - 28) = v19;
        *(float *)(v9 - 24) = v20;
        *(float *)(v9 - 20) = v21;
        uint64_t v22 = *(void *)(v9 + 104);
        *(_DWORD *)(v22 + 8) = v6;
        *(float *)(v22 + 12) = v31;
        *(_DWORD *)(v22 + 16) = v6;
        *(float *)(v22 + 20) = v31;
        *(_DWORD *)uint64_t v22 = *(_DWORD *)(v9 - 48);
        *(_DWORD *)(v22 + 4) = *(_DWORD *)(v9 - 44);
        *(_OWORD *)(v9 - 128) = v13;
        *(float32x2_t *)(v9 - 112) = v33;
        uint64_t v23 = v9 + 136;
        v9 += 272;
      }
      while (v23 != v8);
      uint64_t v28 = *((void *)this + 23);
      if (*((void *)this + 24) != v28)
      {
        uint64_t v29 = 0;
        unint64_t v30 = 0;
        do
        {
          md::LabelCollider::addCollidableItem((char *)a3, (float32x2_t *)(v28 + v29));
          ++v30;
          uint64_t v28 = *((void *)this + 23);
          v29 += 272;
        }
        while (v30 < 0xF0F0F0F0F0F0F0F1 * ((*((void *)this + 24) - v28) >> 4));
      }
    }
    if (v35[0]) {
      (*(void (**)(uint64_t, void, void))(*(void *)v36 + 40))(v36, v35[0], v35[2] - v35[0]);
    }
  }
}

void sub_1A21CCFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a17) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a20 + 40))(a20, a17, a19 - a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A21CD780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (a21)
  {
    operator delete(a21);
    float32x2_t v32 = a24;
    if (!a24)
    {
LABEL_3:
      float32x2_t v33 = a27;
      if (!a27) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    float32x2_t v32 = a24;
    if (!a24) {
      goto LABEL_3;
    }
  }
  operator delete(v32);
  float32x2_t v33 = a27;
  if (!a27)
  {
LABEL_4:
    long long v34 = __p;
    if (!__p) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v33);
  long long v34 = __p;
  if (!__p)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v34);
  goto LABEL_6;
}

void sub_1A21CDE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A21CE404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A21CE5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A21CE9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12)
{
  _Unwind_Resume(a1);
}

double md::AnimatedCrossFadeLabelPart::debugCompositeClassName@<D0>(uint64_t a1@<X8>)
{
  v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1A28FCF30;
  strcpy(v3, "AnimatedCrossFadeLabelPart");
  return *(double *)"ossFadeLabelPart";
}

void md::AnimatedCrossFadeLabelPart::populateDebugNode(md::AnimatedCrossFadeLabelPart *this, gdc::DebugTreeNode *a2)
{
  v4 = (uint64_t *)*((void *)this + 72);
  long long v5 = (uint64_t *)*((void *)this + 73);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    (*(void (**)(uint64_t, gdc::DebugTreeNode *))(*(void *)v6 + 800))(v6, a2);
  }
  uint64_t v7 = (char *)operator new(0x20uLL);
  *(void *)float v12 = v7;
  *(_OWORD *)&v12[8] = xmmword_1A28FCF30;
  strcpy(v7, "AnimatedCrossFadeLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (long long *)v12);
  operator delete(v7);
  v12[23] = 15;
  strcpy(v12, "Is Cross Fading");
  uint64_t v9 = *((unsigned __int8 *)this + 737);
  int v11 = 0;
  memset(&v10[4], 0, 24);
  v10[0] = v9;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v12, (uint64_t)v10);
}

BOOL md::AnimatedCrossFadeLabelPart::isInterruptibleAnimation(md::AnimatedCrossFadeLabelPart *this)
{
  return *((float *)this + 165) >= *((float *)this + 164);
}

uint64_t md::CrossFadeLabelPart::snapToDefaultPlacement()
{
  return 0;
}

uint64_t md::CrossFadeLabelPart::shouldSnapToDefaultPlacement(md::CrossFadeLabelPart *this)
{
  return 0;
}

void md::DefaultFaultNotificationService::~DefaultFaultNotificationService(md::DefaultFaultNotificationService *this)
{
  md::DefaultFaultNotificationService::~DefaultFaultNotificationService(this);
  JUMPOUT(0x1A6239270);
}

{
  std::mutex *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_1EF54D1B8;
  v3 = (char *)this + 8;
  v2 = (std::mutex *)*((void *)this + 1);
  std::mutex::lock(v2);
  v4 = *(void **)(*(void *)v3 + 128);
  if (v4) {
    dispatch_block_cancel(v4);
  }
  std::mutex::unlock(v2);

  long long v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1A21CED28(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  _Unwind_Resume(a1);
}

void md::DefaultFaultNotificationService::post(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char v3 = 0;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + a2 + 24), (unsigned __int8 *)&v3, 1u);
  if (!v3)
  {
    char v5 = a2;
    uint64_t v7 = *(std::mutex **)(a1 + 8);
    std::mutex::lock(v7);
    double v8 = CACurrentMediaTime();
    double v9 = v8;
    float32x2_t v10 = *(void **)(a1 + 8);
    float v12 = (double *)v10[10];
    unint64_t v11 = v10[11];
    if ((unint64_t)v12 >= v11)
    {
      float v14 = (double *)v10[9];
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        float v18 = (char *)operator new(24 * v17);
      }
      else
      {
        float v18 = 0;
      }
      float v19 = &v18[8 * (v12 - v14)];
      *(double *)float v19 = v9;
      v19[8] = v5;
      *((void *)v19 + 2) = a3;
      long long v13 = (double *)(v19 + 24);
      if (v12 != v14)
      {
        do
        {
          long long v20 = *(_OWORD *)(v12 - 3);
          *((double *)v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v12 -= 3;
        }
        while (v12 != v14);
        float v12 = (double *)v10[9];
      }
      v10[9] = v19;
      v10[10] = v13;
      v10[11] = &v18[24 * v17];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *float v12 = v8;
      *((unsigned char *)v12 + 8) = v5;
      long long v13 = v12 + 3;
      *((void *)v12 + 2) = a3;
    }
    v10[10] = v13;
    uint64_t v21 = *(void *)(a1 + 8);
    if (!*(unsigned char *)(v21 + 64))
    {
      double v22 = v9 - *(double *)(v21 + 120);
      double v23 = *(double *)(a1 + 40);
      double v24 = 30.0;
      if (v22 < v23) {
        double v24 = fmin(fmax(v23 + v23, 30.0), 1200.0);
      }
      *(double *)(a1 + 40) = v24;
      if (v22 <= v24) {
        double v25 = v24 - v22;
      }
      else {
        double v25 = 0.0;
      }
      *(unsigned char *)(v21 + 64) = 1;
      dispatch_time_t v26 = dispatch_time(0, (uint64_t)(v25 * 1000000000.0));
      uint64_t v28 = *(void *)(a1 + 8);
      float32x2_t v27 = *(std::__shared_weak_count **)(a1 + 16);
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (GEOGetVectorKitFaultNotificationServiceLog(void)::onceToken[0] != -1) {
        dispatch_once(GEOGetVectorKitFaultNotificationServiceLog(void)::onceToken, &__block_literal_global_14895);
      }
      uint64_t v29 = GEOGetVectorKitFaultNotificationServiceLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitFaultNotificationServiceLog(void)::log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v36 = v25;
        _os_log_impl(&dword_1A1780000, v29, OS_LOG_TYPE_INFO, "Dispatching notification in %f seconds", buf, 0xCu);
      }
      v33[0] = MEMORY[0x1E4F143A8];
      v33[1] = 3321888768;
      v33[2] = ___ZN2md31DefaultFaultNotificationService4postENS_21FaultNotificationTypeEPKc_block_invoke;
      v33[3] = &__block_descriptor_48_ea8_32c67_ZTSNSt3__18weak_ptrIN2md31DefaultFaultNotificationService5StateEEE_e5_v8__0l;
      v33[4] = v28;
      long long v34 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_block_t v30 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS, v33);
      uint64_t v31 = *(void *)(a1 + 8);
      float32x2_t v32 = *(void **)(v31 + 128);
      *(void *)(v31 + 128) = v30;

      dispatch_after(v26, *(dispatch_queue_t *)(a1 + 32), *(dispatch_block_t *)(*(void *)(a1 + 8) + 128));
      if (v34) {
        std::__shared_weak_count::__release_weak(v34);
      }
      if (v27) {
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    std::mutex::unlock(v7);
  }
}

void sub_1A21CF0B8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2md31DefaultFaultNotificationService4postENS_21FaultNotificationTypeEPKc_block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    char v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      long long v20 = v3;
      if (v4)
      {
        std::mutex::lock((std::mutex *)v4);
        *(unsigned char *)(v4 + 64) = 0;
        *(CFTimeInterval *)(v4 + 120) = CACurrentMediaTime();
        long long v5 = *(_OWORD *)(v4 + 72);
        *(_OWORD *)(v4 + 72) = *(_OWORD *)(v4 + 96);
        *(_OWORD *)(v4 + 96) = v5;
        uint64_t v6 = *(void *)(v4 + 88);
        *(void *)(v4 + 88) = *(void *)(v4 + 112);
        *(void *)(v4 + 112) = v6;
        uint64_t v7 = *(void **)(v4 + 128);
        *(void *)(v4 + 128) = 0;

        std::mutex::unlock((std::mutex *)v4);
        if (GEOGetVectorKitFaultNotificationServiceLog(void)::onceToken[0] != -1) {
          dispatch_once(GEOGetVectorKitFaultNotificationServiceLog(void)::onceToken, &__block_literal_global_14895);
        }
        double v8 = GEOGetVectorKitFaultNotificationServiceLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitFaultNotificationServiceLog(void)::log, OS_LOG_TYPE_INFO))
        {
          unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4 + 104) - *(void *)(v4 + 96)) >> 3);
          *(_DWORD *)buf = 134217984;
          unint64_t v24 = v9;
          _os_log_impl(&dword_1A1780000, v8, OS_LOG_TYPE_INFO, "Dispatching notification with %lu faults now", buf, 0xCu);
        }
        float32x2_t v10 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4 + 104) - *(void *)(v4 + 96)) >> 3)];
        uint64_t v11 = *(void *)(v4 + 96);
        uint64_t v12 = *(void *)(v4 + 104);
        if (v11 != v12)
        {
          do
          {
            unint64_t v13 = *(unsigned __int8 *)(v11 + 8);
            uint64_t v14 = *(void *)(v11 + 16);
            v21[0] = @"type";
            unint64_t v15 = "<Invalid>";
            if (v13 <= 2) {
              unint64_t v15 = off_1E5A90658[v13];
            }
            unint64_t v16 = [NSString stringWithUTF8String:v15];
            v21[1] = @"details";
            v22[0] = v16;
            unint64_t v17 = [NSString stringWithUTF8String:v14];
            v22[1] = v17;
            float v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:v21 count:2];

            [v10 addObject:v18];
            v11 += 24;
          }
          while (v11 != v12);
          uint64_t v11 = *(void *)(v4 + 96);
        }
        *(void *)(v4 + 104) = v11;
        float v19 = [MEMORY[0x1E4F28EB8] defaultCenter];
        [v19 postNotificationName:@"VKFaultNotification" object:v10 userInfo:0];
      }
      if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_1A21CF398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c67_ZTSNSt3__18weak_ptrIN2md31DefaultFaultNotificationService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c67_ZTSNSt3__18weak_ptrIN2md31DefaultFaultNotificationService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZL42GEOGetVectorKitFaultNotificationServiceLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "FaultNotificationService");
  uint64_t v1 = (void *)GEOGetVectorKitFaultNotificationServiceLog(void)::log;
  GEOGetVectorKitFaultNotificationServiceLog(void)::log = (uint64_t)v0;
}

void std::__shared_ptr_emplace<md::DefaultFaultNotificationService::State>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  char v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void std::__shared_ptr_emplace<md::DefaultFaultNotificationService::State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5826A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DefaultFaultNotificationService::State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5826A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::GeoidModel::getUndulation(md::GeoidModel *this, double a2, double a3)
{
  uint64_t v3 = *(void *)this;
  if (*(void *)this == *((void *)this + 1)) {
    return 0;
  }
  double v4 = *((float *)this + 8);
  if (v4 >= a2) {
    a2 = v4 + 1.0e-12;
  }
  if (a2 <= v4) {
    return 0;
  }
  LODWORD(v4) = *((_DWORD *)this + 9);
  if (a2 > *(float *)&v4) {
    return 0;
  }
  double v6 = floor(a3 * 0.00277777778);
  double v5 = a3 + v6 * -360.0;
  LODWORD(v6) = *((_DWORD *)this + 10);
  if (v5 < *(float *)&v6 || v5 >= *((float *)this + 11)) {
    return 0;
  }
  float v7 = v5;
  float v8 = (float)(v7 - *(float *)&v6) / *((float *)this + 13);
  float v9 = a2;
  float v10 = (float)(*(float *)&v4 - v9) / *((float *)this + 12);
  *(float *)&double v4 = floorf(v8);
  unsigned int v11 = vcvtms_s32_f32(v8);
  *(float *)&double v6 = floorf(v10);
  unsigned int v12 = vcvtms_s32_f32(v10);
  float v13 = v8 - *(float *)&v4;
  float v14 = v10 - *(float *)&v6;
  int v15 = *((_DWORD *)this + 7);
  signed int v16 = v11 + v15 * v12;
  unint64_t v17 = (_WORD *)(v3 + 2 * v16);
  LOWORD(v4) = *v17;
  int v18 = vmovl_s16(*(int16x4_t *)&v4).u32[0];
  LOWORD(v6) = v17[1];
  float v19 = (float)v18 + (float)((float)((float)vmovl_s16(*(int16x4_t *)&v6).i32[0] - (float)v18) * v13);
  return COERCE_UNSIGNED_INT(*((float *)this + 14)+ (float)((float)(v19+ (float)((float)(truncf((float)*(__int16 *)(v3 + 2 * (v16 + v15))+ (float)(v13* (float)(*(__int16 *)(v3 + 2 * (v16 + v15) + 2)- *(__int16 *)(v3 + 2 * (v16 + v15)))))- v19)* v14))* *((float *)this + 15))) | 0x100000000;
}

void std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v2 = result[1];
  *a2 = &unk_1EF51F340;
  a2[1] = v2;
  uint64_t v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF51F340;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF51F340;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

__n128 std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF51F388;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1,std::allocator<md::erq::EncodeRenderQueue::operator()(md::erq::RenderQueueToSubmit const&,md::erq::RenderTargetToSubmit const&,md::erq::GPUWorkCallbacks const&)::$_1>,void ()(void)>::~__func()
{
}

void _setupSinglePassRenderItem(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, _DWORD *a7, int a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, uint64_t a16)
{
  long long v83 = 0uLL;
  unint64_t v28 = *(void *)(a4 + 8);
  *(void *)&long long v29 = 0;
  *((void *)&v29 + 1) = a4;
  if (v28) {
    uint64_t v30 = *(void *)(a4 + 72);
  }
  else {
    uint64_t v30 = 0;
  }
  long long v83 = v29;
  unint64_t v84 = 0;
  unint64_t v85 = v28;
  uint64_t v87 = v30;
  __int16 v86 = 1;
  float v31 = 1.0;
  if (a5 == 2) {
    float v31 = 0.5;
  }
  if (a5 == 1) {
    float v32 = 0.0;
  }
  else {
    float v32 = v31;
  }
  uint64_t v33 = *a2;
  long long v34 = (std::__shared_weak_count *)a2[1];
  *(void *)buf = *a2;
  *(void *)&buf[8] = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v81, v33, (uint64_t)v34);
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if (v82)
    {
LABEL_14:
      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, *(void *)(*(void *)v81 + 24), 0x5Cu, 2u, fminf(fmaxf(*(float *)(a1 + 8), 0.0), 23.0));
      LOWORD(v16) = *(_WORD *)&buf[6];
      md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v81, 0, 0, v35, *(float *)(a1 + 8));
      float v36 = (float)v16 * 0.000015259;
      uint64_t v37 = v87;
      int v38 = *(_DWORD *)buf;
      int v39 = *(_DWORD *)&buf[4];
      *(_DWORD *)(v87 + 80) = *(_DWORD *)buf;
      *(_DWORD *)(v37 + 84) = v39;
      int v40 = *(_DWORD *)&buf[8];
      *(_DWORD *)(v37 + 88) = *(_DWORD *)&buf[8];
      *(float *)(v37 + 92) = v36;
      *(_DWORD *)(v37 + 160) = v38;
      *(_DWORD *)(v37 + 164) = v39;
      *(_DWORD *)(v37 + 168) = v40;
      *(float *)(v37 + 172) = v36;
      md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v81, 1, 0, 128, *(float *)(a1 + 8));
      int v41 = *(_DWORD *)buf;
      int v42 = *(_DWORD *)&buf[4];
      *(_DWORD *)(v37 + 96) = *(_DWORD *)buf;
      *(_DWORD *)(v37 + 100) = v42;
      int v43 = *(_DWORD *)&buf[8];
      *(_DWORD *)(v37 + 104) = *(_DWORD *)&buf[8];
      *(float *)(v37 + 108) = v36;
      *(_DWORD *)(v37 + 176) = v41;
      *(_DWORD *)(v37 + 180) = v42;
      *(_DWORD *)(v37 + 184) = v43;
      *(float *)(v37 + 188) = v36;
      md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v81, 2, 0, v44, *(float *)(a1 + 8));
      int v45 = *(_DWORD *)buf;
      int v46 = *(_DWORD *)&buf[4];
      *(_DWORD *)(v37 + 112) = *(_DWORD *)buf;
      *(_DWORD *)(v37 + 116) = v46;
      int v47 = *(_DWORD *)&buf[8];
      *(_DWORD *)(v37 + 120) = *(_DWORD *)&buf[8];
      *(float *)(v37 + 124) = v36;
      *(_DWORD *)(v37 + 192) = v45;
      *(_DWORD *)(v37 + 196) = v46;
      *(_DWORD *)(v37 + 200) = v47;
      *(float *)(v37 + 204) = v36;
      md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v81, 3, 0, v48, *(float *)(a1 + 8));
      int v49 = *(_DWORD *)buf;
      int v50 = *(_DWORD *)&buf[4];
      *(_DWORD *)(v37 + 128) = *(_DWORD *)buf;
      *(_DWORD *)(v37 + 132) = v50;
      int v51 = *(_DWORD *)&buf[8];
      *(_DWORD *)(v37 + 136) = *(_DWORD *)&buf[8];
      *(float *)(v37 + 140) = v36;
      *(_DWORD *)(v37 + 208) = v49;
      *(_DWORD *)(v37 + 212) = v50;
      *(_DWORD *)(v37 + 216) = v51;
      *(float *)(v37 + 220) = v36;
      md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v81, 4, 0, v52, *(float *)(a1 + 8));
      int v53 = *(_DWORD *)buf;
      int v54 = *(_DWORD *)&buf[4];
      *(_DWORD *)(v37 + 144) = *(_DWORD *)buf;
      *(_DWORD *)(v37 + 148) = v54;
      int v55 = *(_DWORD *)&buf[8];
      *(_DWORD *)(v37 + 152) = *(_DWORD *)&buf[8];
      *(float *)(v37 + 156) = v36;
      *(_DWORD *)(v37 + 224) = v53;
      *(_DWORD *)(v37 + 228) = v54;
      *(_DWORD *)(v37 + 232) = v55;
      *(float *)(v37 + 236) = v36;
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v81);
      uint64_t v56 = *a3;
      unint64_t v57 = (std::__shared_weak_count *)a3[1];
      *(void *)buf = v56;
      *(void *)&buf[8] = v57;
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v81, v56, (uint64_t)v57);
      if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
        if (v82) {
          goto LABEL_19;
        }
      }
      else if (v82)
      {
LABEL_19:
        gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, *(void *)(*(void *)v81 + 24), 0x5Cu, 2u, fminf(fmaxf(*(float *)(a1 + 8), 0.0), 23.0));
        LOWORD(v36) = *(_WORD *)&buf[6];
        md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v81, 0, 0, v58, *(float *)(a1 + 8));
        float v59 = (float)LODWORD(v36) * 0.000015259;
        uint64_t v60 = v87;
        uint64_t v61 = *(void *)buf;
        char v62 = v87 - 88;
        *(_DWORD *)(v87 + 168) = *(_DWORD *)&buf[8];
        *(void *)(v60 + 160) = v61;
        *(float *)(v60 + 172) = v59;
        md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v81, 1, 0, v62, *(float *)(a1 + 8));
        uint64_t v63 = *(void *)buf;
        *(_DWORD *)(v60 + 184) = *(_DWORD *)&buf[8];
        *(void *)(v60 + 176) = v63;
        *(float *)(v60 + 188) = v59;
        md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v81, 2, 0, v60 - 72, *(float *)(a1 + 8));
        uint64_t v64 = *(void *)buf;
        *(_DWORD *)(v60 + 200) = *(_DWORD *)&buf[8];
        *(void *)(v60 + 192) = v64;
        *(float *)(v60 + 204) = v59;
        md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v81, 3, 0, v60 - 56, *(float *)(a1 + 8));
        uint64_t v65 = *(void *)buf;
        *(_DWORD *)(v60 + 216) = *(_DWORD *)&buf[8];
        *(void *)(v60 + 208) = v65;
        *(float *)(v60 + 220) = v59;
        md::trafficColorForSpeed((uint64_t)buf, (uint64_t)v81, 4, 0, v60 - 40, *(float *)(a1 + 8));
        uint64_t v66 = *(void *)buf;
        *(_DWORD *)(v60 + 232) = *(_DWORD *)&buf[8];
        *(void *)(v60 + 224) = v66;
        *(float *)(v60 + 236) = v59;
LABEL_35:
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v81);
        uint64_t v69 = v87;
        *(float *)uint64_t v87 = a9;
        *(float *)(v69 + 4) = a10;
        *(float *)(v69 + 8) = v32;
        if (fabsf(*(float *)(a6 + 12)) <= 0.00000011921)
        {
          if (GEOGetVectorKitRouteLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_33);
          }
          v70 = (id)GEOGetVectorKitRouteLog_log;
          if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t v81 = 0;
            _os_log_impl(&dword_1A1780000, v70, OS_LOG_TYPE_INFO, "RouteLine trafficColor is 0", v81, 2u);
          }
        }
        *(_DWORD *)(v69 + 16) = *(_DWORD *)a6;
        *(_DWORD *)(v69 + 20) = *(_DWORD *)(a6 + 4);
        *(_DWORD *)(v69 + 24) = *(_DWORD *)(a6 + 8);
        *(_DWORD *)(v69 + 28) = *(_DWORD *)(a6 + 12);
        *(_DWORD *)(v69 + 32) = *a7;
        *(_DWORD *)(v69 + 36) = a7[1];
        *(_DWORD *)(v69 + 40) = a7[2];
        *(_DWORD *)(v69 + 44) = a7[3];
        *(float *)(v69 + 48) = a15;
        *(float *)(v69 + 52) = a11;
        *(float *)(v69 + 56) = a12;
        *(float *)(v69 + 60) = a13;
        *(float *)(v69 + 64) = a14;
        float v71 = 0.0078431;
        if (!a8) {
          float v71 = 0.0;
        }
        *(float *)(v69 + 68) = v71;
LABEL_44:
        unint64_t v73 = v84;
        unint64_t v72 = v85;
        if (v85 != v84)
        {
          float64x2_t v74 = (void *)*((void *)&v83 + 1);
          int v75 = v86;
          int v76 = HIBYTE(v86);
          if ((void)v83 && *(unsigned char *)(*((void *)&v83 + 1) + 17) != 2) {
            (*(void (**)(void))(*(void *)v83 + 64))();
          }
          if (v75 && !v76)
          {
            unint64_t v78 = v74[7];
            unint64_t v77 = v74[8];
            if (v77 == v78) {
              unint64_t v78 = v74[10] - v74[9];
            }
            if (v73 < v78) {
              unint64_t v78 = v73;
            }
            if (v77 <= v72) {
              unint64_t v77 = v72;
            }
            if (v77 == v78) {
              unint64_t v77 = v78 + v74[10] - v74[9];
            }
            v74[7] = v78;
            v74[8] = v77;
          }
        }
        return;
      }
      if (*(unsigned char *)(a1 + 120) == 2 && !*(unsigned char *)(*(void *)(a16 + 8) + 317))
      {
        if (GEOGetVectorKitRouteLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_33);
        }
        unint64_t v68 = (id)GEOGetVectorKitRouteLog_log;
        if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A1780000, v68, OS_LOG_TYPE_INFO, "RouteLine failed to setup travelledTrafficStyle style", buf, 2u);
        }

        md::RouteLineSection::dumpStyleAttributes(*(md::RouteLineSection **)(a16 + 2456));
        *(unsigned char *)(*(void *)(a16 + 8) + 317) = 1;
      }
      goto LABEL_35;
    }
  }
  else if (v82)
  {
    goto LABEL_14;
  }
  if (GEOGetVectorKitRouteLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_33);
  }
  uint64_t v67 = (id)GEOGetVectorKitRouteLog_log;
  if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A1780000, v67, OS_LOG_TYPE_INFO, "***RouteLine failed to setupSinglePassRenderItem", buf, 2u);
  }

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v81);
  if (v87) {
    goto LABEL_44;
  }
}

void sub_1A21CFECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va1);
  _Unwind_Resume(a1);
}

unint64_t md::realistic::GlobeRenderLayer::layout(md::realistic::GlobeRenderLayer *this, const md::LayoutContext *a2)
{
  double v4 = (void *)*((void *)this + 5);
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[17];
  uint64_t v310 = v4[18];
  unint64_t v312 = *(unsigned int *)(v6 + 88);
  uint64_t v7 = *(void *)(*((void *)a2 + 92) + 16);
  uint64_t v8 = (void *)*((void *)a2 + 1);
  unint64_t v9 = v8[1];
  uint64_t v306 = v6;
  if ((v9 & (v9 - 1)) != 0)
  {
    unint64_t v11 = 0xE42D19AFCA302E68;
    if (v9 <= 0xE42D19AFCA302E68) {
      unint64_t v11 = 0xE42D19AFCA302E68 % v9;
    }
    uint64_t v10 = *(void **)(*v8 + 8 * v11);
    do
    {
      do
        uint64_t v10 = (void *)*v10;
      while (v10[1] != 0xE42D19AFCA302E68);
    }
    while (v10[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    uint64_t v10 = *(void **)(*v8 + 8 * ((v9 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        uint64_t v10 = (void *)*v10;
      while (v10[1] != 0xE42D19AFCA302E68);
    }
    while (v10[2] != 0xE42D19AFCA302E68);
  }
  uint64_t v12 = (float64x2_t *)(v7 + 376);
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(v10[5] + 32) + 72);
  float v14 = (void *)*((void *)this + 21);
  int v15 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = v14[1];
  unint64_t v17 = (float32x4_t *)v14[9];
  *unint64_t v17 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v12), *(float64x2_t *)(v7 + 392));
  v17[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v7 + 408)), *(float64x2_t *)(v7 + 424));
  v17[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v7 + 440)), *(float64x2_t *)(v7 + 456));
  v17[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v7 + 472)), *(float64x2_t *)(v7 + 488));
  if (v14[8] > v16) {
    unint64_t v16 = v14[8];
  }
  v14[7] = 0;
  v14[8] = v16;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  int v18 = (void *)*((void *)this + 25);
  float v19 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v20 = v18[1];
  uint64_t v21 = (float *)v18[9];
  double v22 = 0.0;
  if (v13 == 1) {
    double v22 = 1.0;
  }
  float v23 = v22 * 0.05;
  float v24 = v22 * -0.5 + 1.0;
  float *v21 = v23;
  v21[1] = v23;
  void v21[2] = v24;
  if (v18[8] > v20) {
    unint64_t v20 = v18[8];
  }
  v18[7] = 0;
  v18[8] = v20;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v311 = a2;
  uint64_t v25 = **((void **)this + 27);
  dispatch_time_t v26 = *(uint64_t **)(v7 + 32);
  uint64_t v27 = *v26;
  *(void *)&v365[8] = 0;
  *(void *)v365 = 0;
  unint64_t v28 = *(void *)(v25 + 8);
  *(void *)&long long v29 = 0;
  *((void *)&v29 + 1) = v25;
  v309 = this;
  uint64_t v30 = v27;
  if (v28) {
    uint64_t v31 = *(void *)(v25 + 72);
  }
  else {
    uint64_t v31 = 0;
  }
  long long v325 = v29;
  *(_OWORD *)v365 = v29;
  *(void *)&v365[16] = 0;
  *(void *)&v365[24] = v28;
  *(void *)&v365[40] = v31;
  *(_WORD *)&v365[32] = 1;
  *(float32x4_t *)uint64_t v31 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v12), *(float64x2_t *)(v7 + 392));
  *(float32x4_t *)(v31 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v7 + 408)), *(float64x2_t *)(v7 + 424));
  *(float32x4_t *)(v31 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v7 + 440)), *(float64x2_t *)(v7 + 456));
  *(float32x4_t *)(v31 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v7 + 472)), *(float64x2_t *)(v7 + 488));
  id v32 = objc_alloc_init(MEMORY[0x1E4F643C8]);
  double v350 = 0.0;
  v349[0] = 0;
  double v333 = 0.0;
  [v32 calculateGeocentricDirectionForSunX:&v350 Y:v349 Z:&v333];
  float v33 = v350;
  float v34 = *(double *)v349;
  float v35 = v333;
  *(float *)(v31 + 96) = v33;
  *(float *)(v31 + 100) = v34;
  *(float *)(v31 + 104) = v35;

  if (*((unsigned char *)v26 + 48))
  {
    float v36 = (double *)(*(uint64_t (**)(void))(*(void *)(v7 + 40) + 24))();
    float v37 = fmin(fmax(fabs(sqrt(*v36 * *v36 + v36[1] * v36[1] + v36[2] * v36[2]) + -6378137.0) * 0.000000666666667 + -4.66666667, 0.0), 1.0);
  }
  else
  {
    float v37 = 0.0;
  }
  *(float *)(v31 + 112) = v37;
  int v38 = (void *)*((void *)v311 + 1);
  unint64_t v39 = v38[1];
  if ((v39 & (v39 - 1)) != 0)
  {
    unint64_t v41 = 0x1AF456233693CD46;
    if (v39 <= 0x1AF456233693CD46) {
      unint64_t v41 = 0x1AF456233693CD46 % v39;
    }
    int v40 = *(void **)(*v38 + 8 * v41);
    do
    {
      do
        int v40 = (void *)*v40;
      while (v40[1] != 0x1AF456233693CD46);
    }
    while (v40[2] != 0x1AF456233693CD46);
  }
  else
  {
    int v40 = *(void **)(*v38 + 8 * ((v39 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        int v40 = (void *)*v40;
      while (v40[1] != 0x1AF456233693CD46);
    }
    while (v40[2] != 0x1AF456233693CD46);
  }
  if (v13 != 1 || (float v42 = 0.0, *(double *)(*(void *)(v40[5] + 32) + 32) >= 6378137.0)) {
    float v42 = *(float *)(**(void **)(*(void *)(v30 + 856) + 40) + 68);
  }
  float v43 = v42 * 2.0 + -1.0;
  if (**((unsigned char **)v311 + 9)) {
    float v43 = 0.0;
  }
  *(float32x2_t *)(v31 + 64) = vmul_n_f32((float32x2_t)0x3F4CCCCD3F333333, v43);
  *(float *)(v31 + 72) = v43;
  char v44 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)(v7 + 40) + 24))(v7 + 40);
  double v45 = *v44;
  double v46 = v44[1];
  double v47 = v44[2];
  char v48 = (double *)(*(uint64_t (**)(uint64_t))(*(void *)(v7 + 40) + 24))(v7 + 40);
  float v49 = sqrt(v45 * v45 + v46 * v46 + v47 * v47) + -6371008.77;
  float v50 = fmaxf(v49, 0.0);
  long double v51 = v48[2];
  double v52 = sqrt(*v48 * *v48 + v48[1] * v48[1]);
  double v53 = atan2(v51, v52 * 0.996647189);
  __double2 v54 = __sincos_stret(v53);
  double v55 = atan2(v51 + v54.__sinval * v54.__sinval * 42841.3115 * v54.__sinval, v52 + v54.__cosval * v54.__cosval * -42697.6727 * v54.__cosval);
  __double2 v56 = __sincos_stret(v55);
  float v57 = v52 / v56.__cosval + -6378137.0 / sqrt(v56.__sinval * v56.__sinval * -0.00669437999 + 1.0);
  float v58 = fmaxf(v57, 1.0);
  double v59 = v58;
  float v60 = sqrt((float)(v58 * v58) + v58 * 12742017.5);
  float v61 = v60 - v50;
  double v62 = fmax(v59, 0.0);
  if (v62 <= 8000.0) {
    double v63 = v62 * 0.000125;
  }
  else {
    double v63 = 1.0;
  }
  float v64 = v61 + (v63 * v63 * (v63 * 2.0 + -3.0) + 1.0) * (float)(v61 * -0.5);
  *(float *)(v31 + 80) = v50;
  *(float *)(v31 + 84) = v64;
  if (v28)
  {
    if ((void)v325 && *(unsigned char *)(*((void *)&v325 + 1) + 17) != 2) {
      (*(void (**)(void))(*(void *)v325 + 64))();
    }
    unint64_t v65 = *(void *)(*((void *)&v325 + 1) + 64);
    if (v65 <= v28) {
      unint64_t v65 = v28;
    }
    *(void *)(*((void *)&v325 + 1) + 56) = 0;
    *(void *)(*((void *)&v325 + 1) + 64) = v65;
  }
  uint64_t v66 = *(void *)(*((void *)v309 + 5) + 128);
  uint64_t v67 = *(void *)(v66 + 368);
  uint64_t v307 = v5;
  if (v67)
  {
    unint64_t v68 = *(void ***)(v67 + 48);
    uint64_t v69 = *(void ***)(v67 + 56);
    if (v68 != v69)
    {
      do
      {
        v70 = *v68++;
        double v71 = *(double *)(v7 + 80);
        double v72 = *(double *)(v7 + 88);
        double v73 = *(double *)(v7 + 96);
        double v75 = *(double *)(v7 + 64);
        double v74 = *(double *)(v7 + 72);
        double v77 = *(double *)(v7 + 48);
        double v76 = *(double *)(v7 + 56);
        uint64_t v78 = v70[24];
        double v79 = -(v75 * v71 - v76 * v72) - (v75 * v71 - v76 * v72);
        double v80 = -(v77 * v72 - v75 * v74) - (v77 * v72 - v75 * v74);
        double v81 = -(v76 * v74 - v77 * v71) - (v76 * v74 - v77 * v71);
        double v82 = -(-(v76 - v79 * v72) - v80 * v73);
        double v83 = v75 + v79 * v71;
        double v84 = v77 + v79 * v73 + v80 * v72;
        double v85 = v83 + v81 * v73;
        double v86 = -(v72 * (v72 * -2.0));
        double v87 = v72 * -2.0 * v73;
        double v88 = -(v72 * (v74 * -2.0));
        double v89 = v73 * (v71 * -2.0);
        double v90 = -(v72 * (v71 * -2.0));
        double v91 = v73 * (v74 * -2.0);
        double v92 = v74 * -2.0 * v74 + 1.0;
        double v333 = 1.0 - (v86 - v71 * (v71 * -2.0));
        double v334 = v87 - v71 * (v74 * -2.0);
        double v337 = -(v71 * (v74 * -2.0)) - v87;
        double v338 = v92 - v86;
        double v341 = v89 + v88;
        double v342 = v90 - v91;
        double v335 = v88 - v89;
        double v339 = v91 + v90;
        double v343 = v92 - -(v71 * (v71 * -2.0));
        uint64_t v336 = 0;
        uint64_t v340 = 0;
        uint64_t v344 = 0;
        double v345 = -(v84 - v81 * v71);
        double v346 = -(v82 + v81 * v74);
        uint64_t v348 = 0x3FF0000000000000;
        double v347 = -(v85 - v80 * v74);
        double v93 = gm::operator*<double,4,4,4>((double *)v349, (double *)(v7 + 376), &v333);
        uint64_t v94 = (*(uint64_t (**)(void *, double))(*v70 + 24))(v70, v93);
        memset(&v365[8], 0, 112);
        *(void *)&v365[120] = 0x3FF0000000000000;
        uint64_t v95 = v70[30];
        *(void *)v365 = v70[29];
        *(void *)&v365[40] = v95;
        *(void *)&v365[80] = v70[31];
        double v96 = *(double *)(v94 + 24);
        double v97 = *(double *)(v94 + 32);
        double v98 = *(double *)(v94 + 40);
        double v99 = *(double *)(v94 + 48);
        double v100 = v97 + v97;
        double v101 = (v97 + v97) * v97;
        double v102 = (v98 + v98) * v98;
        double v103 = v96 + v96;
        double v104 = (v96 + v96) * v97;
        double v105 = (v98 + v98) * v99;
        double v106 = v98 * (v96 + v96);
        double v107 = v99 * v100;
        double v108 = v99 * v100 + v106;
        double v109 = 1.0 - (v96 + v96) * v96;
        double v110 = v100 * v98;
        double v111 = v99 * v103;
        double v350 = 1.0 - (v101 + v102);
        double v351 = v105 + v104;
        double v354 = v104 - v105;
        double v355 = v109 - v102;
        double v358 = v108;
        double v359 = v110 - v111;
        double v352 = v106 - v107;
        double v356 = v111 + v110;
        double v360 = v109 - v101;
        uint64_t v353 = 0;
        uint64_t v357 = 0;
        uint64_t v361 = 0;
        long long v362 = *(_OWORD *)v94;
        uint64_t v363 = *(void *)(v94 + 16);
        uint64_t v364 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v332, &v350, (double *)v365);
        gm::operator*<double,4,4,4>((double *)v365, (double *)v349, v332);
        float32x2_t v112 = vcvt_f32_f64(*(float64x2_t *)&v365[16]);
        float32x2_t v113 = vcvt_f32_f64(*(float64x2_t *)&v365[32]);
        float32x2_t v114 = vcvt_f32_f64(*(float64x2_t *)&v365[48]);
        float32x2_t v115 = vcvt_f32_f64(*(float64x2_t *)&v365[64]);
        float32x2_t v116 = vcvt_f32_f64(*(float64x2_t *)&v365[80]);
        float32x2_t v117 = vcvt_f32_f64(*(float64x2_t *)&v365[96]);
        float32x2_t v118 = vcvt_f32_f64(*(float64x2_t *)&v365[112]);
        float64x2x3_t v119 = *(void **)(*(void *)(v78 + 64) + 16);
        unint64_t v120 = v119[1];
        float64x2x3_t v121 = (float32x2_t *)v119[9];
        *float64x2x3_t v121 = vcvt_f32_f64(*(float64x2_t *)v365);
        v121[1] = v112;
        v121[2] = v113;
        v121[3] = v114;
        v121[4] = v115;
        v121[5] = v116;
        v121[6] = v117;
        v121[7] = v118;
        if (v119[8] > v120) {
          unint64_t v120 = v119[8];
        }
        v119[7] = 0;
        v119[8] = v120;
      }
      while (v68 != v69);
      uint64_t v66 = *(void *)(*((void *)v309 + 5) + 128);
    }
  }
  uint64_t v308 = v13;
  uint64_t v122 = *(void *)(v66 + 704);
  float v123 = *(double *)(*(void *)(**(void **)(v122 + 32) + 72) + 32);
  int v124 = 1;
  if (v123 > 8.0)
  {
    unsigned int v125 = 0;
    int v126 = 8;
    do
    {
      int v124 = v126;
      v126 *= 8;
    }
    while ((float)v126 < v123 && v125++ < 0xE);
  }
  unsigned int v128 = 1 << (25 - *(unsigned char *)(v122 + 128));
  if (25 - *(_DWORD *)(v122 + 128) < 1) {
    unsigned int v128 = 1;
  }
  uint64_t v130 = *(void *)(v122 + 104);
  uint64_t v129 = *(void *)(v122 + 112);
  if (v130 != v129)
  {
    uint64_t v131 = v129;
    float v313 = (float)((float)v128 * 4.0) / (float)v124;
    do
    {
      v133 = *(double ***)(*(void *)v130 + 48);
      v132 = *(double ***)(*(void *)v130 + 56);
      while (v133 != v132)
      {
        v134 = *v133;
        uint64_t v135 = *(void *)(*((void *)*v133 + 24) + 64);
        v136 = *(void **)v135;
        unint64_t v137 = *(void *)(*(void *)v135 + 8);
        if (v137) {
          uint64_t v138 = v136[9];
        }
        else {
          uint64_t v138 = 0;
        }
        double v140 = *(double *)(v7 + 80);
        double v139 = *(double *)(v7 + 88);
        double v141 = *(double *)(v7 + 96);
        double v142 = *(double *)(v7 + 72);
        double v326 = *(double *)(v7 + 64);
        double v144 = *(double *)(v7 + 48);
        double v143 = *(double *)(v7 + 56);
        double v314 = -(v326 * v140 - v143 * v139) - (v326 * v140 - v143 * v139);
        double v315 = -(v144 * v139 - v326 * v142) - (v144 * v139 - v326 * v142);
        double v316 = v144;
        double v317 = -(v143 * v142 - v144 * v140) - (v143 * v142 - v144 * v140);
        double v318 = v143;
        double v145 = -(v140 * (v140 * -2.0));
        double v146 = v139 * -2.0 * v141;
        double v322 = -(v140 * (v142 * -2.0)) - v146;
        double v323 = 1.0 - (v145 - v139 * (v139 * -2.0));
        double v147 = v141 * (v140 * -2.0);
        double v148 = v146 - v140 * (v142 * -2.0);
        double v149 = v142 * -2.0 * v142 + 1.0;
        double v150 = v149 - -(v139 * (v139 * -2.0));
        double v151 = v141 * (v142 * -2.0);
        double v319 = -(v139 * (v140 * -2.0)) - v151;
        double v320 = v147 - v139 * (v142 * -2.0);
        double v152 = -(v139 * (v142 * -2.0)) - v147;
        double v153 = v151 - v139 * (v140 * -2.0);
        double v321 = v149 - v145;
        v154 = (double *)(*(uint64_t (**)(double *))(*(void *)v134 + 24))(v134);
        double v155 = v134[31];
        double v156 = v154[4];
        double v157 = v154[5];
        double v158 = v154[6];
        double v159 = v156 + v156;
        double v160 = (v156 + v156) * v156;
        double v161 = (v157 + v157) * v157;
        double v162 = v160 + v161;
        double v163 = v154[2];
        double v164 = v154[3];
        double v165 = v164 + v164;
        double v166 = (v164 + v164) * v156;
        double v167 = (v157 + v157) * v158;
        double v168 = v166 - v167;
        double v169 = v167 + v166;
        double v170 = v157 * (v164 + v164);
        double v171 = v159 * v157;
        double v172 = v158 * v159;
        double v173 = 1.0 - (v164 + v164) * v164;
        double v174 = v158 * v165;
        double v175 = v173 - v161;
        double v176 = v173 - v160;
        double v177 = (v172 + v170) * v155;
        double v178 = (v171 - v174) * v155;
        double v179 = v176 * v155;
        double v180 = v134[29];
        double v181 = v134[30];
        double v182 = v154[1];
        double v183 = v180 - v162 * v180;
        double v184 = v168 * v181;
        double v185 = v169 * v180;
        double v186 = v175 * v181;
        double v187 = v183 * v323 + v185 * v322;
        double v188 = v184 * v323 + v186 * v322;
        double v189 = v183 * v148 + v185 * v150;
        double v190 = v179 * v319 + v177 * v148;
        double v191 = *v154 * v148 - (v318 + v315 * v141 + v317 * v142 - v314 * v139);
        double v192 = v184 * v148 + v186 * v150;
        double v193 = v184 * v152 + v186 * v153;
        double v194 = v174 + v171;
        double v195 = (v170 - v172) * v180;
        double v196 = v194 * v181;
        double v197 = *v154 * v323 - (v316 + v314 * v141 + v315 * v139 - v317 * v140) + v182 * v322 + v163 * v320;
        double v198 = v191 + v182 * v150 + v163 * v319;
        double v199 = v183 * v152 + v185 * v153 + v195 * v321;
        double v200 = *v154 * v152 - (v326 + v314 * v140 + v317 * v141 - v315 * v142) + v182 * v153 + v163 * v321;
        *(float *)&double v185 = v187 + v195 * v320;
        *(float *)&double v195 = v189 + v195 * v319;
        *(_DWORD *)uint64_t v138 = LODWORD(v185);
        *(_DWORD *)(v138 + 4) = LODWORD(v195);
        *(float *)&double v199 = v199;
        *(_DWORD *)(v138 + 8) = LODWORD(v199);
        *(float *)&double v199 = v188 + v196 * v320;
        *(float *)&double v185 = v192 + v196 * v319;
        *(_DWORD *)(v138 + 16) = LODWORD(v199);
        *(_DWORD *)(v138 + 20) = LODWORD(v185);
        *(float *)&double v199 = v193 + v196 * v321;
        *(_DWORD *)(v138 + 24) = LODWORD(v199);
        *(float *)&double v199 = v179 * v320 + v177 * v323 + v178 * v322;
        *(float *)&double v185 = v190 + v178 * v150;
        *(_DWORD *)(v138 + 32) = LODWORD(v199);
        *(_DWORD *)(v138 + 36) = LODWORD(v185);
        *(float *)&double v199 = v179 * v321 + v177 * v152 + v178 * v153;
        *(_DWORD *)(v138 + 40) = LODWORD(v199);
        *(float *)&double v199 = v197;
        *(float *)&double v179 = v198;
        *(_DWORD *)(v138 + 48) = LODWORD(v199);
        *(_DWORD *)(v138 + 52) = LODWORD(v179);
        *(float *)&double v200 = v200;
        *(_DWORD *)(v138 + 56) = LODWORD(v200);
        *(_DWORD *)(v138 + 12) = 0;
        *(_DWORD *)(v138 + 28) = 0;
        *(_DWORD *)(v138 + 44) = 0;
        *(_DWORD *)(v138 + 60) = 1065353216;
        *(float *)(v138 + 64) = v313;
        *(float *)(v138 + 68) = v313;
        *(void *)(v138 + 72) = 0;
        if (v137)
        {
          unint64_t v201 = v136[8];
          if (v201 <= v137) {
            unint64_t v201 = v137;
          }
          v136[7] = 0;
          v136[8] = v201;
        }
        ++v133;
      }
      v130 += 32;
    }
    while (v130 != v131);
  }
  if (*(void *)v311)
  {
    v202 = *(int **)(*((void *)v311 + 92) + 24);
    uint64_t v203 = v202[12];
    uint64_t v204 = v202[13];
    uint64_t v205 = v202[10];
    uint64_t v206 = v202[11];
    double v207 = *(double *)(v306 + 32);
    if (objc_opt_respondsToSelector())
    {
      uint64_t v208 = [*(id *)v311 debugConsoleForId:1];
      v209 = (float32x4_t *)v208;
      if (v208)
      {
        float v210 = (float)(unint64_t)(v203 - v205);
        uint64_t v211 = *((void *)v311 + 4);
        v212 = (std::__shared_weak_count *)*((void *)v311 + 5);
        if (v212)
        {
          char v213 = 1;
          atomic_fetch_add_explicit(&v212->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v214 = *((void *)v311 + 4);
          v215 = (std::__shared_weak_count *)*((void *)v311 + 5);
          double v216 = *(double *)(v211 + 64);
          if (v215)
          {
            char v213 = 0;
            atomic_fetch_add_explicit(&v215->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v211 = v214;
        }
        else
        {
          v215 = 0;
          double v216 = *(double *)(v211 + 64);
          char v213 = 1;
        }
        float v302 = v216;
        int v303 = *(unsigned __int8 *)(v211 + 72);
        *(_OWORD *)&v365[4] = 0uLL;
        *(float *)v365 = 2.0 / v210;
        *(float *)&v365[20] = -2.0 / (float)(unint64_t)(v204 - v206);
        float v304 = v302 + -1.0;
        if (!v303) {
          float v304 = 1.0 - v302;
        }
        *(void *)&v365[32] = 0;
        *(void *)&v365[24] = 0;
        *(float *)&v365[40] = v304 * 0.5;
        *(_DWORD *)&v365[44] = 0;
        *(float *)&v365[48] = (float)-v210 / v210;
        *(_DWORD *)&v365[52] = 1065353216;
        *(float *)&v365[56] = (float)(v302 * 0.5) + 0.5;
        *(_DWORD *)&v365[60] = 1065353216;
        ggl::DebugConsole::setProjection(v208, v365);
        if ((v213 & 1) == 0 && !atomic_fetch_add(&v215->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
          std::__shared_weak_count::__release_weak(v215);
        }
        float v305 = v207;
        if (v212 && !atomic_fetch_add(&v212->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          float v328 = v207;
          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
          std::__shared_weak_count::__release_weak(v212);
          float v305 = v328;
        }
        v209[1] = vmulq_n_f32((float32x4_t)xmmword_1A28FE310, v305);
        v209[6].i32[1] = -16777216;
        ggl::DebugConsole::begin((ggl::DebugConsole *)v209);
      }
    }
  }
  v217 = (uint64_t *)(*(uint64_t (**)(void))(**((void **)v309 + 7) + 56))(*((void *)v309 + 7));
  uint64_t v218 = *v217;
  uint64_t v219 = v217[1];
  if (*v217 != v219)
  {
    do
    {
      uint64_t v220 = *(void *)(*(void *)v218 + 328);
      if (!v220) {
        operator new();
      }
      (*(void (**)(uint64_t, const md::LayoutContext *, uint64_t, void, unint64_t, uint64_t))(*(void *)v220 + 80))(v220, v311, v7, *(void *)(*((void *)v311 + 92) + 24), v312, v310);
      v218 += 8;
    }
    while (v218 != v219);
  }
  v221 = v309;
  v222 = (uint64_t *)*((void *)v309 + 31);
  v324 = (uint64_t *)*((void *)v309 + 32);
  unint64_t v223 = v312;
  if (v222 != v324)
  {
    double v224 = 0.0;
    __asm { FMOV            V0.2D, #1.0 }
    long long v327 = _Q0;
    do
    {
      v230 = *(uint64_t ***)(*v222 + 128);
      if (v230)
      {
        altitude::SceneGraph::updateTime(*(altitude::SceneGraph **)(*v222 + 128));
        v232 = *v230;
        v231 = v230[1];
        if (*v230 != v231)
        {
          v233 = v230 + 3;
          v234 = v230 + 10;
          do
          {
            uint64_t v235 = *v232;
            double v350 = *(double *)v232;
            v236 = *((std::__shared_weak_count **)v232 + 1);
            double v351 = *(double *)&v236;
            if (*(double *)&v236 != 0.0) {
              atomic_fetch_add_explicit(&v236->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)v365 = v327;
            *(void *)&v365[16] = 0x3FF0000000000000;
            (*(void (**)(uint64_t, uint64_t **, uint64_t **, unsigned char *, uint64_t))(*(void *)v235 + 16))(v235, v234, v233, v365, 1);
            if (*(double *)&v236 != 0.0 && !atomic_fetch_add(&v236->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
              std::__shared_weak_count::__release_weak(v236);
            }
            v232 += 2;
          }
          while (v232 != v231);
        }
        uint64_t v229 = *v222;
        v237 = *(altitude::FlyoverBorderRenderable ***)(*v222 + 48);
        v238 = *(altitude::FlyoverBorderRenderable ***)(*v222 + 56);
        unint64_t v223 = v312;
        if (v237 != v238)
        {
          do
          {
            v239 = *v237;
            int v240 = *((_DWORD *)*v237 + 40);
            switch(v240)
            {
              case 3:
                altitude::FlyoverBorderRenderable::setup(v239, (altitude::View *)v7, v312, 1.0);
                break;
              case 2:
                altitude::FlyoverNightRenderable::setup(v239, (altitude::View *)v7, v312, 1.0);
                break;
              case 1:
                altitude::FlyoverRenderable::setup(v239, (altitude::View *)v7, v312, 1.0);
                break;
            }
            ++v237;
          }
          while (v237 != v238);
          uint64_t v229 = *v222;
        }
        double v224 = fmax(v224, *(double *)(*(void *)(v229 + 128) + 104));
      }
      ++v222;
    }
    while (v222 != v324);
    v221 = v309;
    if (v224 > 0.0)
    {
      uint64_t v241 = *(void *)(v7 + 32);
      uint64_t v242 = *(void *)(*(void *)v241 + 552);
      v243 = *(std::__shared_weak_count **)(*(void *)v241 + 560);
      if (v243) {
        atomic_fetch_add_explicit(&v243->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_time_t v244 = dispatch_time(0, (uint64_t)(1000000000.0 / v224));
      v245 = **(id **)(*((void *)v309 + 5) + 8);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3321888768;
      block[2] = ___ZN2md9realistic16GlobeRenderLayer6layoutERKNS_13LayoutContextE_block_invoke;
      block[3] = &__block_descriptor_56_ea8_32c27_ZTSNSt3__110shared_ptrIbEE_e5_v8__0l;
      block[4] = v242;
      v330 = v243;
      if (v243) {
        atomic_fetch_add_explicit(&v243->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v331 = v241;
      dispatch_after(v244, v245, block);

      v246 = v330;
      if (v330 && !atomic_fetch_add(&v330->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
        std::__shared_weak_count::__release_weak(v246);
      }
      unint64_t v223 = v312;
      if (v243 && !atomic_fetch_add(&v243->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
      }
    }
  }
  v247 = *(void **)(v307 + 8);
  uint64_t v248 = v247[3];
  uint64_t v249 = v247[4];
  uint64_t v250 = v249 - v248;
  if (v249 == v248) {
    goto LABEL_139;
  }
  uint64_t v251 = 0;
  unint64_t v252 = v250 >> 3;
  while (1)
  {
    v253 = *(unsigned __int8 **)(v248 + 8 * v251);
    if (*v253 == *((unsigned __int8 *)v221 + 272))
    {
      unint64_t v254 = *((void *)v253 + 1);
      uint64_t v255 = v247[15];
      if (v254 < (v247[16] - v255) >> 3) {
        break;
      }
    }
    if (++v251 >= v252) {
      goto LABEL_139;
    }
  }
  uint64_t v256 = *(void *)(v255 + 8 * v254);
  if (!v256) {
LABEL_139:
  }
    uint64_t v257 = 0;
  else {
    uint64_t v257 = *(void *)(*(void *)(v256 + 24) + 8 * *((unsigned __int8 *)v221 + 273));
  }
  v258 = (uint64_t *)(*(uint64_t (**)(void))(**((void **)v221 + 7) + 56))(*((void *)v221 + 7));
  uint64_t v259 = *v258;
  uint64_t v260 = v258[1];
  while (v259 != v260)
  {
    uint64_t v261 = *(void *)(*(void *)v259 + 328);
    if (v261) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, void))(*(void *)v261 + 88))(v261, v7, v307, v223, 2, *(void *)(*((void *)v221 + 5) + 120));
    }
    v259 += 8;
  }
  v262 = (unsigned __int8 *)*((void *)v221 + 28);
  v263 = (unsigned __int8 *)*((void *)v221 + 29);
  while (v262 != v263)
  {
    v264 = *(void **)(v307 + 8);
    uint64_t v266 = v264[3];
    uint64_t v265 = v264[4];
    if (v265 == v266) {
      goto LABEL_155;
    }
    uint64_t v267 = 0;
    while (1)
    {
      uint64_t v268 = *(void *)(v266 + 8 * v267);
      if (!*(unsigned char *)v268)
      {
        unint64_t v269 = *(void *)(v268 + 8);
        uint64_t v270 = v264[15];
        if (v269 < (v264[16] - v270) >> 3) {
          break;
        }
      }
      if (++v267 >= (unint64_t)((v265 - v266) >> 3)) {
        goto LABEL_155;
      }
    }
    uint64_t v271 = *(void *)(v270 + 8 * v269);
    if (!v271) {
LABEL_155:
    }
      uint64_t v272 = 0;
    else {
      uint64_t v272 = *(void *)(*(void *)(v271 + 24) + 8 * v262[8]);
    }
    if (*(unsigned char *)(*(void *)v262 + 180)) {
      ggl::CommandBuffer::pushRenderItem(v272, *(void *)(*(void *)v262 + 184));
    }
    v262 += 16;
  }
  v273 = *(void **)(v307 + 8);
  uint64_t v274 = v273[3];
  uint64_t v275 = v273[4];
  uint64_t v276 = 0;
  if (v275 != v274)
  {
    while (1)
    {
      v277 = *(unsigned __int8 **)(v274 + 8 * v276);
      if (*v277 == *((unsigned __int8 *)v221 + 274))
      {
        unint64_t v278 = *((void *)v277 + 1);
        uint64_t v279 = v273[15];
        if (v278 < (v273[16] - v279) >> 3) {
          break;
        }
      }
      if (++v276 >= (unint64_t)((v275 - v274) >> 3))
      {
        uint64_t v276 = 0;
        uint64_t v280 = v275 - v274;
        if (v275 == v274) {
          goto LABEL_174;
        }
        goto LABEL_168;
      }
    }
    uint64_t v276 = *(void *)(v279 + 8 * v278);
    if (v276) {
      uint64_t v276 = *(void *)(*(void *)(v276 + 24) + 8 * *((unsigned __int8 *)v221 + 275));
    }
    uint64_t v280 = v275 - v274;
    if (v275 == v274) {
      goto LABEL_174;
    }
LABEL_168:
    uint64_t v281 = 0;
    unint64_t v282 = v280 >> 3;
    while (1)
    {
      v283 = *(unsigned __int8 **)(v274 + 8 * v281);
      if (*v283 == *((unsigned __int8 *)v221 + 276))
      {
        unint64_t v284 = *((void *)v283 + 1);
        uint64_t v285 = v273[15];
        if (v284 < (v273[16] - v285) >> 3) {
          break;
        }
      }
      if (++v281 >= v282) {
        goto LABEL_174;
      }
    }
    uint64_t v286 = *(void *)(v285 + 8 * v284);
    if (v286)
    {
      uint64_t v287 = *(void *)(*(void *)(v286 + 24) + 8 * *((unsigned __int8 *)v221 + 277));
      goto LABEL_175;
    }
  }
LABEL_174:
  uint64_t v287 = 0;
LABEL_175:
  if (*(void *)(v257 + 72) == *(void *)(v257 + 80)) {
    uint64_t v288 = 0;
  }
  else {
    uint64_t v288 = *((void *)v221 + 8);
  }
  *(void *)(v276 + 32) = v288;
  unint64_t v289 = *(void *)(v287 + 72);
  v290 = *(uint64_t **)(v287 + 80);
  unint64_t v291 = 126 - 2 * __clz((uint64_t)((uint64_t)v290 - v289) >> 3);
  if (v290 == (uint64_t *)v289) {
    uint64_t v292 = 0;
  }
  else {
    uint64_t v292 = v291;
  }
  unint64_t result = std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v289, v290, v292, 1);
  if (v308 == 1)
  {
    v294 = (uint64_t *)*((void *)v221 + 6);
    if (!v294)
    {
      *(double *)&v295 = COERCE_DOUBLE(operator new(0xF8uLL));
      v295->__shared_owners_ = 0;
      v295->__shared_weak_owners_ = 0;
      v295->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584380;
      ggl::BufferData::BufferData((uint64_t)&v295[1], 8, 0, 0, 6, 4);
      v295[9].__shared_weak_owners_ = (uint64_t)"/night/vdata";
      v295[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::CommonMesh::bufferPos2Reflection;
      v295[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55BF88;
      v295[9].__shared_owners_ = (uint64_t)&unk_1EF55BFA8;
      *(void *)&double v333 = &v295[1];
      double v334 = *(double *)&v295;
      memset(v365, 0, 24);
      uint64_t v296 = 4 * v295[1].__shared_owners_;
      *(void *)&long long v297 = 0;
      *((void *)&v297 + 1) = v295 + 1;
      v298 = v295[4].__vftable;
      *(_OWORD *)v365 = v297;
      *(void *)&v365[24] = v296;
      *(void *)&v365[40] = v298;
      *(_WORD *)&v365[32] = 1;
      *(_OWORD *)&v298->~__shared_weak_count = xmmword_1A28FCD00;
      *(_OWORD *)&v298->__on_zero_shared = xmmword_1A28FE3F0;
      v299 = operator new(0xA8uLL);
      v299[1] = 0;
      v299[2] = 0;
      void *v299 = &unk_1EF5830E8;
      *(void *)&double v350 = &v295[1];
      double v351 = *(double *)&v295;
      atomic_fetch_add_explicit(&v295->__shared_owners_, 1uLL, memory_order_relaxed);
      v349[0] = 0;
      v349[1] = 0;
      ggl::CommonMesh::Pos2Mesh::Pos2Mesh((uint64_t)(v299 + 3), (uint64_t)"/night/mesh", (uint64_t *)&v350, v349);
      if (!atomic_fetch_add(&v295->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
        std::__shared_weak_count::__release_weak(v295);
      }
      *(void *)&v332[0] = v299 + 3;
      *(void *)&v332[1] = v299;
      double v301 = *((double *)v221 + 19);
      double v300 = *((double *)v221 + 20);
      if (v300 != 0.0) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v300 + 8), 1uLL, memory_order_relaxed);
      }
      double v350 = v301;
      double v351 = v300;
      operator new();
    }
    return ggl::CommandBuffer::pushRenderItem(v287, *v294);
  }
  return result;
}

void sub_1A21D1BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x260]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a37);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x2E0]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_1A21D1C54(_Unwind_Exception *a1)
{
}

void sub_1A21D1C80(_Unwind_Exception *a1)
{
}

uint64_t ___ZN2md9realistic16GlobeRenderLayer6layoutERKNS_13LayoutContextE_block_invoke(uint64_t result)
{
  if (!**(unsigned char **)(result + 32))
  {
    unint64_t result = *(void *)(*(void *)(result + 48) + 160);
    if (result) {
      return (*(uint64_t (**)(void))(*(void *)result + 48))();
    }
  }
  return result;
}

void __destroy_helper_block_ea8_32c27_ZTSNSt3__110shared_ptrIbEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c27_ZTSNSt3__110shared_ptrIbEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void md::realistic::GlobeRenderLayer::~GlobeRenderLayer(md::realistic::GlobeRenderLayer *this)
{
  md::realistic::GlobeRenderLayer::~GlobeRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  altitude::FlyoverShared *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  void *v13;

  *(void *)this = &unk_1EF554700;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C4049ECCB0CLL);
  }
  uint64_t v3 = *((void *)this + 9);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  double v4 = *((void *)this + 10);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 11);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 12);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 31);
  if (v7)
  {
    *((void *)this + 32) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 28);
  if (v8)
  {
    *((void *)this + 29) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (altitude::FlyoverShared *)*((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v9)
  {
    altitude::FlyoverShared::~FlyoverShared(v9);
    MEMORY[0x1A6239270]();
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 24);
    if (!v11) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 24);
    if (!v11) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_23:
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  md::realistic::RouteRenderLayer::RouteModelPipelineStates::~RouteModelPipelineStates((md::realistic::GlobeRenderLayer *)((char *)this + 104));
  *(void *)this = &unk_1EF530C60;
  uint64_t v13 = (void *)*((void *)this + 1);
  if (v13)
  {
    *((void *)this + 2) = v13;
    operator delete(v13);
  }
}

void altitude::FlyoverShared::~FlyoverShared(altitude::FlyoverShared *this)
{
  uint64_t v2 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 27);
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 27);
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v7) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v7) {
      goto LABEL_17;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_17:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v9) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v9) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_23:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v11) {
      goto LABEL_29;
    }
  }
  else
  {
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 15);
    if (!v11) {
      goto LABEL_29;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_29:
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 11);
    if (!v13) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 11);
    if (!v13) {
      goto LABEL_35;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_35:
  float v14 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    int v15 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v15) {
      goto LABEL_41;
    }
  }
  else
  {
    int v15 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v15) {
      goto LABEL_41;
    }
  }
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_41:
  unint64_t v16 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unint64_t v17 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v17) {
      goto LABEL_47;
    }
  }
  else
  {
    unint64_t v17 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v17) {
      goto LABEL_47;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_47:
  int v18 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverNightDim::QuadPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FlyoverNightDim::QuadPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FlyoverNightDim::QuadPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::SolidLine::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::SolidLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::SolidLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::EndOfWorld::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::EndOfWorld::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::EndOfWorld::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5842D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TileBaseSurface::P3T2T2PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5842D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::FlyoverNightDim::Color>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverNightDim::Color>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverNightDim::Color>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverNightDim::Color>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5862C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverNightDim::Color>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5862C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::TileBaseSurface::Shared>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TileBaseSurface::Shared>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Shared>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TileBaseSurface::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::realistic::GlobeRenderLayer::GlobeRenderLayer(md::realistic::GlobeRenderLayer *this, md::realistic::RealisticRenderer *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char *)a2 + 120;
  uint64_t v4 = *(void *)(*((void *)a2 + 15) + 8);
  __int16 v5 = *(_WORD *)(v4 + 6);
  int v6 = *(_DWORD *)(v4 + 8);
  __int16 v7 = *(_WORD *)(v4 + 40);
  md::realistic::RealisticRenderLayer::RealisticRenderLayer((uint64_t)this, 1, (uint64_t)a2, &v5, 4);
  *(void *)this = &unk_1EF554700;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_WORD *)this + 136) = *(_WORD *)(*(void *)(*(void *)v3 + 8) + 6);
  *((_WORD *)this + 137) = *(_WORD *)(*(void *)(*(void *)v3 + 8) + 8);
  *((_WORD *)this + 138) = *(_WORD *)(*(void *)(*(void *)v3 + 8) + 10);
  *((unsigned char *)this + 278) = *(unsigned char *)(*(void *)v3 + 56);
  [*(id *)(*((void *)this + 5) + 104) format];
  operator new();
}

void sub_1A21D5438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v11);
  uint64_t v13 = (void *)v10[31];
  if (v13)
  {
    v10[32] = v13;
    operator delete(v13);
  }
  float v14 = (void *)v10[28];
  if (v14)
  {
    v10[29] = v14;
    operator delete(v14);
  }
  int v15 = (altitude::FlyoverShared *)v10[27];
  v10[27] = 0;
  if (v15)
  {
    altitude::FlyoverShared::~FlyoverShared(v15);
    MEMORY[0x1A6239270]();
  }
  unint64_t v16 = (std::__shared_weak_count *)v10[26];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  unint64_t v17 = (std::__shared_weak_count *)v10[24];
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  int v18 = (std::__shared_weak_count *)v10[22];
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  md::realistic::RouteRenderLayer::RouteModelPipelineStates::~RouteModelPipelineStates((md::realistic::RouteRenderLayer::RouteModelPipelineStates *)(v10 + 13));
  *uint64_t v10 = &unk_1EF530C60;
  float v19 = (void *)v10[1];
  if (!v19) {
    _Unwind_Resume(a1);
  }
  v10[2] = v19;
  operator delete(v19);
  _Unwind_Resume(a1);
}

void md::realistic::GlobeRenderLayer::registerNoCullingRenderable(void *a1, uint64_t a2, char a3)
{
  __int16 v7 = (unsigned char *)a1[29];
  unint64_t v6 = a1[30];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = (unsigned char *)a1[28];
    uint64_t v10 = (v7 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      float v14 = (char *)operator new(16 * v13);
    }
    else
    {
      float v14 = 0;
    }
    int v15 = &v14[16 * v10];
    *(void *)int v15 = a2;
    v15[8] = a3;
    uint64_t v8 = v15 + 16;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v9);
      __int16 v7 = (unsigned char *)a1[28];
    }
    a1[28] = v15;
    a1[29] = v8;
    a1[30] = &v14[16 * v13];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)__int16 v7 = a2;
    v7[8] = a3;
    uint64_t v8 = v7 + 16;
  }
  a1[29] = v8;
}

void md::realistic::GlobeRenderLayer::unregisterAnimatedGroup(md::realistic::GlobeRenderLayer *this, altitude::RenderableGroup *a2)
{
  uint64_t v3 = (altitude::RenderableGroup **)*((void *)this + 31);
  uint64_t v4 = *((void *)this + 32) - (void)v3;
  unint64_t v5 = v4 >> 3;
  unint64_t v6 = (v4 >> 3);
  if ((v4 & 0x7FFFFFFF8) == 0) {
    goto LABEL_21;
  }
  uint64_t v7 = 0;
  while (v3[v7] != a2)
  {
    if (v6 == ++v7) {
      goto LABEL_21;
    }
  }
  unint64_t v6 = (v5 - 1);
  v3[v7] = v3[v6];
  uint64_t v3 = (altitude::RenderableGroup **)*((void *)this + 31);
  uint64_t v8 = (altitude::RenderableGroup **)*((void *)this + 32);
  unint64_t v5 = v8 - v3;
  unint64_t v9 = v6 - v5;
  if (v6 <= v5)
  {
LABEL_21:
    if (v5 <= v6) {
      return;
    }
    float v23 = &v3[v6];
    goto LABEL_23;
  }
  uint64_t v10 = *((void *)this + 33);
  if (v9 <= (v10 - (uint64_t)v8) >> 3)
  {
    bzero(*((void **)this + 32), 8 * v9);
    float v23 = &v8[v9];
LABEL_23:
    *((void *)this + 32) = v23;
    return;
  }
  uint64_t v11 = v10 - (void)v3;
  if (v11 >> 2 > v6) {
    unint64_t v6 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v6 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v12 = 8 * v6;
  unint64_t v13 = operator new(8 * v6);
  float v14 = &v13[8 * v5];
  bzero(v14, 8 * v9);
  int v15 = &v14[8 * v9];
  if (v8 == v3)
  {
    uint64_t v3 = v8;
  }
  else
  {
    unint64_t v16 = (char *)v8 - (char *)v3 - 8;
    if (v16 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)((char *)v3 - v13) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    int v18 = &v13[8 * v5 - 16];
    float v19 = v8 - 2;
    uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v21 = *(_OWORD *)v19;
      *(v18 - 1) = *((_OWORD *)v19 - 1);
      *int v18 = v21;
      v18 -= 2;
      v19 -= 4;
      v20 -= 4;
    }
    while (v20);
    v14 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v8 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v22 = (uint64_t)*--v8;
        *((void *)v14 - 1) = v22;
        v14 -= 8;
      }
      while (v8 != v3);
      uint64_t v3 = (altitude::RenderableGroup **)*((void *)this + 31);
    }
  }
  *((void *)this + 31) = v14;
  *((void *)this + 32) = v15;
  *((void *)this + 33) = &v13[v12];
  if (v3)
  {
    operator delete(v3);
  }
}

void md::Ribbons::RibbonSection<md::FlyoverTrafficDrawables>::computeMesh(void *a1, float64x2_t *a2, uint64_t a3)
{
  uint64_t v13 = **(void **)(a1[26] + 64);
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v15 = v14 * *a1;
  uint64_t v16 = v14 * a1[1];
  if (v16 == v15)
  {
    uint64_t v88 = 0;
  }
  else if (a3 && *(unsigned char *)(v13 + 17) != 2)
  {
    uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v13, v15, v16, 1, 1);
  }
  else
  {
    uint64_t v88 = *(void *)(v13 + 72) + v15;
  }
  unint64_t v17 = a1[2];
  unint64_t v19 = a1[4];
  unint64_t v18 = a1[5];
  if (v18 == v19)
  {
    unint64_t v18 = a1[3];
  }
  else
  {
    if (v19 < v17) {
      unint64_t v17 = a1[4];
    }
    if (a1[3] > v18) {
      unint64_t v18 = a1[3];
    }
  }
  uint64_t v20 = *(void *)(a1[26] + 96);
  uint64_t v21 = *(void *)(v20 + 8);
  uint64_t v86 = a3;
  uint64_t v85 = v15;
  uint64_t v83 = v21 * v17;
  uint64_t v84 = v20;
  uint64_t v82 = v21 * v18;
  if (v21 * v18 == v21 * v17)
  {
    uint64_t v87 = 0;
  }
  else if (a3 && *(unsigned char *)(v20 + 17) != 2)
  {
    uint64_t v87 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 56))(a3);
  }
  else
  {
    uint64_t v87 = *(void *)(v20 + 72) + v21 * v17;
  }
  uint64_t v22 = (uint64_t *)a1[22];
  double v89 = (uint64_t *)a1[23];
  if (v22 != v89)
  {
    uint64_t v91 = v88;
    uint64_t v92 = v87 + 2 * a1[2] - 2 * v17;
    while (1)
    {
      double v90 = v22;
      uint64_t v23 = *v22;
      long long v150 = 0uLL;
      long long v167 = 0uLL;
      long long v133 = 0uLL;
      long long v130 = 0uLL;
      uint64_t v24 = *(void *)(v23 + 48);
      uint64_t v127 = v24 - 1;
      if (v24 != 1) {
        break;
      }
LABEL_21:
      uint64_t v22 = v90 + 1;
      v91 += (*(void *)(*v90 + 8) - *(void *)*v90) << 7;
      v92 += 2 * (*(void *)(*v90 + 24) - *(void *)(*v90 + 16));
      if (v90 + 1 == v89) {
        goto LABEL_55;
      }
    }
    int v25 = 0;
    uint64_t v26 = 0;
    uint64_t v126 = v24 - 2;
    uint64_t v27 = (_WORD *)(v92 + 6);
    unint64_t v28 = (float32x2_t *)(v91 + 256);
    while (1)
    {
      int v29 = v26 == 0;
      if (v126 == v26) {
        v29 |= 2u;
      }
      int v168 = v29;
      md::Ribbons::PolylineSegment::calculate((uint64_t)&v134, v23, v26);
      if (v26)
      {
        float64_t v30 = v157.f64[0];
        float64_t v32 = v140.f64[1];
        float64_t v31 = v140.f64[0];
        if (vabdd_f64(v140.f64[0], v157.f64[0]) >= 1.0e-10)
        {
          double v34 = v141;
          float64_t v33 = v157.f64[1];
          double v35 = v158;
        }
        else
        {
          float64_t v33 = v157.f64[1];
          double v34 = v141;
          double v35 = v158;
          if (vabdd_f64(v140.f64[1], v157.f64[1]) < 1.0e-10 && vabdd_f64(v141, v158) < 1.0e-10)
          {
            long long v149 = v132;
            long long v150 = v133;
            long long v148 = v131;
            long long v166 = v129;
            long long v167 = v130;
            long long v165 = v128;
            uint64_t v134 = v125;
            uint64_t v135 = v124;
            uint64_t v136 = v123;
            uint64_t v137 = v122;
            uint64_t v138 = v121;
            uint64_t v139 = v120;
            v140.f64[0] = v8;
            v140.f64[1] = v7;
            double v141 = v3;
            double v142 = v4;
            double v143 = v5;
            double v144 = v6;
            uint64_t v145 = v119;
            uint64_t v146 = v118;
            uint64_t v147 = v117;
            uint64_t v151 = v116;
            uint64_t v152 = v115;
            uint64_t v153 = v114;
            uint64_t v154 = v113;
            uint64_t v155 = v112;
            uint64_t v156 = v111;
            v157.f64[0] = v9;
            v157.f64[1] = v103;
            double v158 = v101;
            double v159 = v110;
            double v160 = v109;
            double v161 = v108;
            uint64_t v162 = v107;
            uint64_t v163 = v106;
            uint64_t v164 = v105;
            int v168 = v104;
            double v169 = v102;
            double v170 = v100;
            double v171 = v99;
            uint64_t v172 = v98;
            uint64_t v173 = v97;
            uint64_t v174 = v95;
            double v175 = v94;
            double v176 = v93;
            float64_t v30 = v9;
            float64_t v32 = v7;
            float64_t v31 = v8;
            double v177 = v96;
            goto LABEL_36;
          }
        }
        uint64_t v124 = v135;
        uint64_t v125 = v134;
        uint64_t v122 = v137;
        uint64_t v123 = v136;
        uint64_t v120 = v139;
        uint64_t v121 = v138;
        double v4 = v142;
        double v5 = v143;
        double v6 = v144;
        uint64_t v118 = v146;
        uint64_t v119 = v145;
        uint64_t v117 = v147;
        long long v131 = v148;
        long long v132 = v149;
        long long v133 = v150;
        uint64_t v116 = v151;
        uint64_t v115 = v152;
        uint64_t v114 = v153;
        uint64_t v113 = v154;
        uint64_t v112 = v155;
        uint64_t v111 = v156;
        double v110 = v159;
        double v109 = v160;
        double v108 = v161;
        uint64_t v107 = v162;
        uint64_t v106 = v163;
        uint64_t v105 = v164;
        long long v130 = v167;
        long long v128 = v165;
        long long v129 = v166;
        int v104 = v168;
        double v101 = v35;
        double v102 = v169;
        double v100 = v170;
        double v99 = v171;
        uint64_t v98 = v172;
        float64_t v103 = v33;
        double v3 = v34;
      }
      else
      {
        uint64_t v124 = v135;
        uint64_t v125 = v134;
        uint64_t v122 = v137;
        uint64_t v123 = v136;
        uint64_t v120 = v139;
        uint64_t v121 = v138;
        float64_t v32 = v140.f64[1];
        float64_t v31 = v140.f64[0];
        double v3 = v141;
        double v4 = v142;
        double v5 = v143;
        double v6 = v144;
        uint64_t v118 = v146;
        uint64_t v119 = v145;
        long long v132 = v149;
        long long v133 = v150;
        long long v131 = v148;
        uint64_t v116 = v151;
        uint64_t v117 = v147;
        uint64_t v114 = v153;
        uint64_t v115 = v152;
        uint64_t v112 = v155;
        uint64_t v113 = v154;
        float64_t v103 = v157.f64[1];
        float64_t v30 = v157.f64[0];
        double v101 = v158;
        double v110 = v159;
        uint64_t v111 = v156;
        double v108 = v161;
        double v109 = v160;
        uint64_t v106 = v163;
        uint64_t v107 = v162;
        uint64_t v105 = v164;
        long long v129 = v166;
        long long v130 = v167;
        long long v128 = v165;
        int v104 = v168;
        double v102 = v169;
        double v99 = v171;
        double v100 = v170;
        uint64_t v98 = v172;
      }
      double v94 = v175;
      uint64_t v95 = v174;
      double v93 = v176;
      double v96 = v177;
      uint64_t v97 = v173;
LABEL_36:
      int v36 = v25 + *(_DWORD *)v23;
      *(v27 - 3) = v36;
      *(v27 - 2) = v36 + 1;
      *(v27 - 1) = v36 + 2;
      _WORD *v27 = v36 + 1;
      v27[1] = v36 + 3;
      v27[2] = v36 + 2;
      if ((*(_DWORD *)(v23 + 80) - 1) >= 2) {
        float v37 = 0.0;
      }
      else {
        float v37 = 1.0;
      }
      float32_t v38 = v3 - a2[14].f64[0];
      float32x2_t v39 = vcvt_f32_f64(vsubq_f64(v140, a2[13]));
      v28[-32] = v39;
      v28[-31].f32[0] = v38;
      float32_t v40 = v4;
      float32_t v41 = v5;
      float32_t v42 = v6;
      v28[-30].f32[0] = v40;
      v28[-30].f32[1] = v41;
      v28[-29].f32[0] = v42;
      float32_t v43 = *(double *)&v150;
      float32_t v44 = *(double *)&v167;
      v28[-24].i32[0] = -1082130432;
      v28[-24].f32[1] = v43;
      v28[-23].f32[0] = v43;
      v28[-23].f32[1] = v44;
      float32_t v45 = v169;
      float32_t v46 = v170;
      float32_t v47 = v171;
      v28[-26].f32[0] = v45;
      v28[-26].f32[1] = v46;
      v28[-25].f32[0] = v47;
      float32_t v48 = v175;
      float32_t v49 = v176;
      float32_t v50 = v177;
      v28[-28].f32[0] = v48;
      v28[-28].f32[1] = v49;
      v28[-27].f32[0] = v50;
      float v51 = (float)*(int *)(v23 + 76);
      v28[-20] = 0;
      v28[-19].f32[0] = v51;
      v28[-19].f32[1] = v37;
      __int32 v52 = *(_DWORD *)(v23 + 124);
      __int32 v53 = *(_DWORD *)(v23 + 132);
      v28[-22].i32[0] = 0;
      v28[-22].i32[1] = v52;
      v28[-21].i32[0] = v53;
      v28[-18] = 0;
      v28[-16] = v39;
      v28[-15].f32[0] = v38;
      v28[-14].f32[0] = v40;
      v28[-14].f32[1] = v41;
      v28[-13].f32[0] = v42;
      v28[-8].i32[0] = 1065353216;
      v28[-8].f32[1] = v43;
      v28[-7].f32[0] = v43;
      v28[-7].f32[1] = v44;
      v28[-10].f32[0] = v45;
      v28[-10].f32[1] = v46;
      v28[-9].f32[0] = v47;
      v28[-12].f32[0] = v48;
      v28[-12].f32[1] = v49;
      v28[-11].f32[0] = v50;
      v28[-4] = 0;
      v28[-3].f32[0] = v51;
      v28[-3].f32[1] = v37;
      __int32 v54 = *(_DWORD *)(v23 + 124);
      __int32 v55 = *(_DWORD *)(v23 + 132);
      v28[-6].i32[0] = 0;
      v28[-6].i32[1] = v54;
      v28[-5].i32[0] = v55;
      v28[-2] = 0;
      if ((*(_DWORD *)(v23 + 80) - 1) >= 2) {
        float v56 = 0.0;
      }
      else {
        float v56 = 1.0;
      }
      float32_t v57 = v158 - a2[14].f64[0];
      float32x2_t v58 = vcvt_f32_f64(vsubq_f64(v157, a2[13]));
      *unint64_t v28 = v58;
      v28[1].f32[0] = v57;
      float32_t v59 = v159;
      float32_t v60 = v160;
      float32_t v61 = v161;
      v28[2].f32[0] = v59;
      v28[2].f32[1] = v60;
      v28[3].f32[0] = v61;
      float32_t v62 = *(double *)&v167;
      float32_t v63 = *(double *)&v150;
      v28[8].i32[0] = -1082130432;
      v28[8].f32[1] = v62;
      v28[9].f32[0] = v63;
      v28[9].f32[1] = v62;
      float32_t v64 = v169;
      float32_t v65 = v170;
      float32_t v66 = v171;
      v28[6].f32[0] = v64;
      v28[6].f32[1] = v65;
      v28[7].f32[0] = v66;
      float32_t v67 = v175;
      float32_t v68 = v176;
      float32_t v69 = v177;
      v28[4].f32[0] = v67;
      v28[4].f32[1] = v68;
      v28[5].f32[0] = v69;
      float v70 = (float)*(int *)(v23 + 76);
      v28[12] = 0;
      v28[13].f32[0] = v70;
      v28[13].f32[1] = v56;
      __int32 v71 = *(_DWORD *)(v23 + 124);
      __int32 v72 = *(_DWORD *)(v23 + 132);
      v28[10].i32[0] = 0;
      v28[10].i32[1] = v71;
      v28[11].i32[0] = v72;
      v28[14] = 0;
      v28[16] = v58;
      v28[17].f32[0] = v57;
      v28[18].f32[0] = v59;
      v28[18].f32[1] = v60;
      v28[19].f32[0] = v61;
      v28[24].i32[0] = 1065353216;
      v28[24].f32[1] = v62;
      v28[25].f32[0] = v63;
      v28[25].f32[1] = v62;
      v28[22].f32[0] = v64;
      v28[22].f32[1] = v65;
      v28[23].f32[0] = v66;
      v28[20].f32[0] = v67;
      v28[20].f32[1] = v68;
      v28[21].f32[0] = v69;
      v28[28] = 0;
      v28[29].f32[0] = v70;
      v28[29].f32[1] = v56;
      __int32 v73 = *(_DWORD *)(v23 + 124);
      __int32 v74 = *(_DWORD *)(v23 + 132);
      v28[26].i32[0] = 0;
      v28[26].i32[1] = v73;
      v28[27].i32[0] = v74;
      v28[30] = 0;
      float32_t v75 = *((double *)&v149 + 1);
      v28[-20].f32[0] = -v75;
      v28[-4].f32[0] = v75;
      float32_t v76 = *((double *)&v166 + 1);
      v28[12].f32[0] = -v76;
      v28[28].f32[0] = v76;
      int v77 = *(_DWORD *)(v23 + 120);
      if ((v77 & 1) != 0 || (uint64_t v78 = *(void *)(v23 + 112)) != 0 && !*(unsigned char *)(v78 + 84))
      {
        v28[-18].i32[0] = -1056964608;
        v28[-2].i32[0] = -1056964608;
        if ((v77 & 2) == 0)
        {
LABEL_48:
          uint64_t v79 = *(void *)(v23 + 104);
          if (!v79 || *(unsigned char *)(v79 + 84)) {
            goto LABEL_51;
          }
        }
      }
      else if ((v77 & 2) == 0)
      {
        goto LABEL_48;
      }
      v28[14].i32[1] = 1090519040;
      v28[30].i32[1] = 1090519040;
LABEL_51:
      char v80 = v168;
      if (v168)
      {
        v28[-20].i32[0] = -1082130432;
        v28[-4].i32[0] = -1082130432;
      }
      if ((v80 & 2) != 0)
      {
        v28[12].i32[0] = 1065353216;
        v28[28].i32[0] = 1065353216;
      }
      ++v26;
      v27 += 6;
      v28 += 64;
      v25 += 4;
      float64_t v8 = v31;
      float64_t v7 = v32;
      float64_t v9 = v30;
      if (v127 == v26) {
        goto LABEL_21;
      }
    }
  }
LABEL_55:
  if (v87 && v86 && v82 != v83 && *(unsigned char *)(v84 + 17) != 2) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v86 + 64))(v86, v87, v84, v83, v82, 1, 1);
  }
  if (v88 && v86 && v16 != v85 && *(unsigned char *)(v13 + 17) != 2)
  {
    double v81 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v86 + 64);
    v81(v86, v88, v13, v85, v16, 1, 1);
  }
}

void altitude::RouteTrafficDrawRegion::point(double **this, int a2, int a3, double a4)
{
  double v5 = (a4 - *(double *)(*((void *)*this + 7) + 48 * a3 + 8))
     / (*(double *)(*((void *)*this + 7) + 48 * a2 + 8) - *(double *)(*((void *)*this + 7) + 48 * a3 + 8));
  uint64_t v6 = *((void *)*this + 10);
  float64_t v7 = (float64x2_t *)(v6 + 24 * a3);
  float64_t v8 = (float64x2_t *)(v6 + 24 * a2);
  float64x2_t v9 = vmlaq_n_f64(*v7, vsubq_f64(*v8, *v7), v5);
  double v10 = v7[1].f64[0] + (v8[1].f64[0] - v7[1].f64[0]) * v5;
  uint64_t v12 = this[3];
  unint64_t v11 = (unint64_t)this[4];
  if ((unint64_t)v12 >= v11)
  {
    uint64_t v14 = this[2];
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      float64x2_t v21 = v9;
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v18 = (char *)operator new(24 * v17);
      float64x2_t v9 = v21;
    }
    else
    {
      unint64_t v18 = 0;
    }
    unint64_t v19 = (float64x2_t *)&v18[8 * (v12 - v14)];
    *unint64_t v19 = v9;
    v19[1].f64[0] = v10;
    uint64_t v13 = &v19[1].f64[1];
    if (v12 != v14)
    {
      do
      {
        float64x2_t v20 = *(float64x2_t *)(v12 - 3);
        v19[-1].f64[1] = *(v12 - 1);
        *(float64x2_t *)((char *)v19 - 24) = v20;
        unint64_t v19 = (float64x2_t *)((char *)v19 - 24);
        v12 -= 3;
      }
      while (v12 != v14);
      uint64_t v12 = this[2];
    }
    this[2] = (double *)v19;
    this[3] = v13;
    this[4] = (double *)&v18[24 * v17];
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *(float64x2_t *)uint64_t v12 = v9;
    v12[2] = v10;
    uint64_t v13 = v12 + 3;
  }
  this[3] = v13;
}

void *std::vector<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>,geo::StdAllocator<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v5 = *(void *)(a1 + 16) - *(void *)a1;
  if (v5 >> 2 > v3) {
    unint64_t v3 = v5 >> 2;
  }
  BOOL v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  uint64_t v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19) {
    uint64_t v6 = v3;
  }
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 8 * v6, 8);
    double v10 = (void *)(v9 + 8 * v2);
    uint64_t v6 = v9 + v8;
    if (v9)
    {
      uint64_t v11 = *a2;
      *a2 = 0;
      *double v10 = v11;
    }
  }
  else
  {
    double v10 = (void *)(8 * v2);
  }
  uint64_t v12 = v10 + 1;
  uint64_t v13 = *(char **)a1;
  uint64_t v14 = *(char **)(a1 + 8);
  if (v14 == *(char **)a1)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    uint64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    goto LABEL_32;
  }
  unint64_t v15 = (unint64_t)&v14[-*(void *)a1 - 8];
  if (v15 <= 0x57
    || ((unint64_t v16 = (v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         unint64_t v17 = (unint64_t)&v14[v16],
         unint64_t v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (BOOL v19 = v18 >= v14)
      : (BOOL v19 = 1),
        !v19))
  {
    float64x2_t v21 = *(char **)(a1 + 8);
    do
    {
LABEL_22:
      uint64_t v27 = *((void *)v21 - 1);
      v21 -= 8;
      *(void *)float64x2_t v21 = 0;
      *--double v10 = v27;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  uint64_t v20 = (v15 >> 3) + 1;
  float64x2_t v21 = &v14[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  uint64_t v22 = v10 - 2;
  uint64_t v23 = v14 - 32;
  uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *(_OWORD *)v23;
    long long v25 = *((_OWORD *)v23 + 1);
    *(_OWORD *)uint64_t v23 = 0uLL;
    *((_OWORD *)v23 + 1) = 0uLL;
    v23 -= 32;
    *(v22 - 1) = v26;
    _OWORD *v22 = v25;
    v22 -= 2;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v14 = *(char **)a1;
  unint64_t v28 = *(char **)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  uint64_t v29 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  while (v28 != v14)
  {
    uint64_t v30 = *((void *)v28 - 1);
    v28 -= 8;
    *(void *)unint64_t v28 = 0;
    if (v30)
    {
      {
        operator new();
      }
      (*(void (**)(uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc);
    }
  }
LABEL_32:
  if (v14) {
    (*(void (**)(void, char *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v14, v29 - (void)v14);
  }
  return v12;
}

char **md::Ribbons::RibbonBatch<md::FlyoverTrafficDrawables>::collectRenderItemsForPassesNoReset(char **result, uint64_t a2, unsigned int a3, __n128 a4)
{
  if (*((unsigned char *)result + 272))
  {
    double v4 = result;
    if (*((unsigned char *)result + 136))
    {
      uint64_t v5 = *((void *)result[1] + 7);
      result[5] = (char *)v5;
      BOOL v6 = *(unsigned __int8 *)(v5 + 58) == 1;
    }
    else
    {
      BOOL v6 = 0;
    }
    float64_t v7 = result[31];
    uint64_t v8 = result[32];
    if (v7 != v8)
    {
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *(void *)v7;
        if (*(unsigned char *)(*(void *)v7 + 48))
        {
          if (*(void *)(v10 + 208) != v9)
          {
            if (v9)
            {
              uint64_t v11 = ggl::Batcher::commit((long long **)v4 + 18, a3, a4);
              if (v11[1] != *v11)
              {
                if (*((unsigned char *)v4 + 136))
                {
                  uint64_t v12 = v11;
                  float32_t v47 = &off_1EF55A458;
                  long long v13 = *(_OWORD *)(v4 + 5);
                  long long v48 = *(_OWORD *)(v4 + 3);
                  long long v49 = v13;
                  long long v14 = *(_OWORD *)(v4 + 15);
                  long long v15 = *(_OWORD *)(v4 + 11);
                  long long v53 = *(_OWORD *)(v4 + 13);
                  long long v54 = v14;
                  long long v16 = *(_OWORD *)(v4 + 9);
                  long long v50 = *(_OWORD *)(v4 + 7);
                  long long v51 = v16;
                  long long v52 = v15;
                  unint64_t v17 = v4[29];
                  unint64_t v18 = (char *)*((void *)v17 + 1);
                  if (v18 == v4[30])
                  {
                    unint64_t v17 = *(char **)v17;
                    if (!v17)
                    {
                      unint64_t v17 = (char *)malloc_type_malloc(120 * (void)v18 + 16, 0xB644C221uLL);
                      *(void *)unint64_t v17 = 0;
                      *((void *)v17 + 1) = 0;
                      *(void *)v4[29] = v17;
                    }
                    v4[29] = v17;
                    unint64_t v18 = (char *)*((void *)v17 + 1);
                  }
                  BOOL v19 = &v17[120 * (void)v18];
                  *((void *)v17 + 1) = v18 + 1;
                  *((void *)v19 + 2) = &off_1EF55A458;
                  long long v20 = v53;
                  long long v21 = v54;
                  long long v22 = v52;
                  *(_OWORD *)(v19 + 72) = v51;
                  long long v23 = v48;
                  long long v24 = v49;
                  *(_OWORD *)(v19 + 56) = v50;
                  *(_OWORD *)(v19 + 40) = v24;
                  *(_OWORD *)(v19 + 24) = v23;
                  *(_OWORD *)(v19 + 120) = v21;
                  *(_OWORD *)(v19 + 104) = v20;
                  *(_OWORD *)(v19 + 88) = v22;
                  *((void *)v19 + 10) = v9;
                  long long v25 = *v12;
                  *((void *)v19 + 13) = *v12;
                  *((void *)v19 + 14) = (v12[1] - v25) >> 4;
                  int v46 = 0;
                  float32_t v47 = (void (**)(ggl::RenderItem *__hidden))(v19 + 16);
                  uint64_t v26 = *(void *)(a2 + 24);
                  if (!v26) {
                    goto LABEL_35;
                  }
                  (*(void (**)(uint64_t, int *, void (***)(ggl::RenderItem *__hidden)))(*(void *)v26 + 48))(v26, &v46, &v47);
                }
              }
            }
            uint64_t v10 = *(void *)v7;
            uint64_t v9 = *(void *)(*(void *)v7 + 208);
          }
          uint64_t v27 = 16;
          if (v6)
          {
            uint64_t v27 = 32;
            uint64_t v28 = v10 + 32;
          }
          else
          {
            uint64_t v28 = v10 + 16;
          }
          if (*(void *)(v28 + 8) != *(void *)(v10 + v27)) {
            gm::MultiRange<unsigned long>::push_back(v4 + 18, (_OWORD *)v28);
          }
        }
        v7 += 8;
        if (v7 == v8) {
          goto LABEL_26;
        }
      }
    }
    uint64_t v9 = 0;
LABEL_26:
    unint64_t result = ggl::Batcher::commit((long long **)v4 + 18, a3, a4);
    if (result[1] != *result && *((unsigned char *)v4 + 136))
    {
      uint64_t v29 = result;
      float32_t v47 = &off_1EF55A458;
      long long v30 = *(_OWORD *)(v4 + 5);
      long long v48 = *(_OWORD *)(v4 + 3);
      long long v49 = v30;
      long long v31 = *(_OWORD *)(v4 + 7);
      long long v32 = *(_OWORD *)(v4 + 15);
      long long v53 = *(_OWORD *)(v4 + 13);
      long long v54 = v32;
      long long v52 = *(_OWORD *)(v4 + 11);
      long long v33 = *(_OWORD *)(v4 + 9);
      long long v50 = v31;
      long long v51 = v33;
      double v34 = v4[29];
      double v35 = (char *)*((void *)v34 + 1);
      if (v35 == v4[30])
      {
        double v34 = *(char **)v34;
        if (!v34)
        {
          double v34 = (char *)malloc_type_malloc(120 * (void)v35 + 16, 0xB644C221uLL);
          *(void *)double v34 = 0;
          *((void *)v34 + 1) = 0;
          *(void *)v4[29] = v34;
        }
        v4[29] = v34;
        double v35 = (char *)*((void *)v34 + 1);
      }
      int v36 = &v34[120 * (void)v35];
      *((void *)v34 + 1) = v35 + 1;
      *((void *)v36 + 2) = &off_1EF55A458;
      long long v37 = v53;
      long long v38 = v54;
      long long v39 = v52;
      *(_OWORD *)(v36 + 72) = v51;
      long long v40 = v48;
      long long v41 = v49;
      *(_OWORD *)(v36 + 56) = v50;
      *(_OWORD *)(v36 + 40) = v41;
      *(_OWORD *)(v36 + 24) = v40;
      *(_OWORD *)(v36 + 120) = v38;
      *(_OWORD *)(v36 + 104) = v37;
      *(_OWORD *)(v36 + 88) = v39;
      *((void *)v36 + 10) = v9;
      float32_t v42 = *v29;
      *((void *)v36 + 13) = *v29;
      *((void *)v36 + 14) = (v29[1] - v42) >> 4;
      int v46 = 0;
      float32_t v47 = (void (**)(ggl::RenderItem *__hidden))(v36 + 16);
      uint64_t v43 = *(void *)(a2 + 24);
      if (v43)
      {
        return (char **)(*(uint64_t (**)(uint64_t, int *, void (***)(ggl::RenderItem *__hidden)))(*(void *)v43 + 48))(v43, &v46, &v47);
      }
      else
      {
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
        return (char **)std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverTrafficPasses,ggl::RenderItem *)>::operator()();
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverTrafficPasses,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(void *)(a1 + 8), *a3);
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverTrafficPasses,ggl::RenderItem *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578EB8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverTrafficPasses,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_1EF578EB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::FlyoverTrafficDrawables>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::FlyoverTrafficPasses,ggl::RenderItem *)#1}>,void ()(md::FlyoverTrafficPasses,ggl::RenderItem *)>::~__func()
{
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void non-virtual thunk to'ggl::TransitLineRibbon::BaseMesh::~BaseMesh(ggl::TransitLineRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::TransitLineRibbon::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::TransitLineRibbon::BaseMesh *)((char *)this - 16));
}

void ggl::TransitLineRibbon::BaseMesh::~BaseMesh(ggl::TransitLineRibbon::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::TransitLineRibbon::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::TransitLineRibbon::BasePipelineState::~BasePipelineState(ggl::TransitLineRibbon::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::TransitLineRibbon::BasePipelineSetup::textureIsEnabled(ggl::TransitLineRibbon::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::TransitLineRibbon::BasePipelineSetup::constantDataIsEnabled(ggl::TransitLineRibbon::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

void ggl::TransitLineRibbon::BasePipelineSetup::~BasePipelineSetup(ggl::TransitLineRibbon::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::TransitLineRibbon::PatternedBasePipelineState::~PatternedBasePipelineState(ggl::TransitLineRibbon::PatternedBasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::TransitLineRibbon::PatternedBasePipelineSetup::textureIsEnabled(ggl::TransitLineRibbon::PatternedBasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::TransitLineRibbon::PatternedBasePipelineSetup::constantDataIsEnabled(ggl::TransitLineRibbon::PatternedBasePipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::TransitLineRibbon::PatternedBasePipelineSetup::~PatternedBasePipelineSetup(ggl::TransitLineRibbon::PatternedBasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::HikingLogic::debugConsoleString(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

unint64_t md::HikingLogic::_doesLocationIntersectWithParkRegion(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = **(void **)(a4 + 8);
  {
    uint64_t v90 = a3;
    uint64_t v91 = a1;
    uint64_t v87 = a2;
    a2 = v87;
    int v89 = v88;
    a3 = v90;
    a1 = v91;
    if (v89)
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
      a3 = v90;
      a1 = v91;
      a2 = v87;
    }
  }
  uint64_t v5 = *(_WORD **)(v4 + 48);
  BOOL v6 = *(_WORD **)(v4 + 56);
  float64_t v7 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v5 != v6)
  {
    uint64_t v8 = *(_WORD **)(v4 + 48);
    while (*v8 != 70)
    {
      v8 += 16;
      if (v8 == v6) {
        goto LABEL_13;
      }
    }
    if (v8 == v6)
    {
      float64_t v7 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v5 != 70)
      {
        v5 += 16;
        if (v5 == v6)
        {
          uint64_t v5 = *(_WORD **)(v4 + 56);
          break;
        }
      }
      float64_t v7 = (uint64_t *)(v5 + 4);
    }
  }
LABEL_13:
  uint64_t v11 = (uint64_t *)*v7;
  uint64_t v9 = v7 + 1;
  uint64_t v10 = v11;
  if (v11 != v9)
  {
    double v12 = *a1;
    double v13 = a1[1];
    do
    {
      uint64_t v14 = v10[4];
      if (v14)
      {
        long long v15 = *(uint64_t **)(v14 + 720);
        long long v16 = *(uint64_t **)(v14 + 728);
        if (v15 != v16)
        {
          int v17 = 1 << *(unsigned char *)(v14 + 169);
          double v18 = -1.0 / (double)v17;
          float v19 = (v12 + v18 * (double)*(int *)(v14 + 176)) * (double)v17;
          if (v19 >= 0.0 && v19 < 1.0)
          {
            float v21 = (v13 + v18 * (double)(v17 + ~*(_DWORD *)(v14 + 172))) * (double)v17;
            if (v21 >= 0.0 && v21 < 1.0)
            {
              do
              {
                if ((v15[1] & a2) != 0 && (v15[2] & a3) != 0)
                {
                  for (uint64_t i = v15[3]; i != v15[4]; i += 64)
                  {
                    if (*(float *)i <= v19
                      && *(float *)(i + 8) > v19
                      && *(float *)(i + 4) <= v21
                      && *(float *)(i + 12) > v21)
                    {
                      uint64_t v26 = *(void *)(i + 16);
                      uint64_t v27 = *(void *)(i + 24);
                      uint64_t v28 = v27 - v26;
                      if (v27 == v26)
                      {
                        char v29 = 0;
                      }
                      else
                      {
                        char v29 = 0;
                        uint64_t v30 = 0;
                        unint64_t v31 = v28 >> 3;
                        uint64_t v32 = (v28 >> 3) - 1;
                        uint64_t v33 = (unint64_t)(v28 >> 3) <= 1 ? 1 : v28 >> 3;
                        double v34 = (float *)(v26 + 4);
                        LOBYTE(v28) = 1;
                        do
                        {
                          uint64_t v35 = v32 == v30 ? 0 : v30 + 1;
                          float v36 = *(v34 - 1);
                          float v37 = vabds_f32(v36, v19);
                          float v38 = fabsf(v36 + v19) * 0.000011921;
                          float v39 = *v34;
                          if (v37 <= v38 || v37 <= 1.1755e-38)
                          {
                            float v41 = vabds_f32(v39, v21);
                            if (v41 <= (float)(fabsf(v39 + v21) * 0.000011921) || v41 <= 1.1755e-38) {
                              break;
                            }
                          }
                          uint64_t v43 = (float *)(v26 + 8 * v35);
                          float v44 = v43[1];
                          BOOL v45 = v39 == v44 && v39 == v21;
                          if (v45)
                          {
                            float v46 = *v43;
                            if (v36 <= v19 && v46 >= v19) {
                              break;
                            }
                            if (v46 <= v19 && v36 >= v19) {
                              break;
                            }
                          }
                          BOOL v49 = v39 > v21 || v44 <= v21;
                          if (!v49 || (v44 <= v21 ? (BOOL v50 = v39 <= v21) : (BOOL v50 = 1), !v50))
                          {
                            if (v36 != *v43)
                            {
                              float v36 = (float)((float)((float)(*v43 - v36) * (float)(v21 - v39)) / (float)(v44 - v39))
                                  + v36;
                              float v38 = fabsf(v36 + v19) * 0.000011921;
                            }
                            float v51 = vabds_f32(v19, v36);
                            if (v51 <= v38 || v51 < 1.1755e-38) {
                              break;
                            }
                            if (v36 < v19) {
                              ++v29;
                            }
                          }
                          LOBYTE(v28) = ++v30 < v31;
                          v34 += 2;
                        }
                        while (v33 != v30);
                      }
                      if (v28 & 1) != 0 || (v29)
                      {
                        long long v53 = *(uint64_t **)(i + 40);
                        long long v54 = *(uint64_t **)(i + 48);
                        while (v53 != v54)
                        {
                          uint64_t v56 = *v53;
                          uint64_t v55 = v53[1];
                          uint64_t v57 = v55 - *v53;
                          if (v55 != *v53)
                          {
                            char v58 = 0;
                            uint64_t v59 = 0;
                            unint64_t v60 = v57 >> 3;
                            uint64_t v61 = (v57 >> 3) - 1;
                            if ((unint64_t)(v57 >> 3) <= 1) {
                              uint64_t v62 = 1;
                            }
                            else {
                              uint64_t v62 = v57 >> 3;
                            }
                            float32_t v63 = (float *)(v56 + 4);
                            BOOL v64 = 1;
                            do
                            {
                              uint64_t v67 = v61 == v59 ? 0 : v59 + 1;
                              float v81 = *(v63 - 1);
                              float v68 = vabds_f32(v81, v19);
                              float v82 = fabsf(v81 + v19) * 0.000011921;
                              float v69 = *v63;
                              if (v68 <= v82 || v68 <= 1.1755e-38)
                              {
                                float v71 = vabds_f32(v69, v21);
                                if (v71 <= (float)(fabsf(v69 + v21) * 0.000011921) || v71 <= 1.1755e-38) {
                                  break;
                                }
                              }
                              __int32 v73 = (float *)(v56 + 8 * v67);
                              float v74 = v73[1];
                              if (v69 == v74 && v69 == v21)
                              {
                                float v76 = *v73;
                                if (v81 <= v19 && v76 >= v19) {
                                  break;
                                }
                                if (v76 <= v19 && v81 >= v19) {
                                  break;
                                }
                              }
                              BOOL v79 = v69 > v21 || v74 <= v21;
                              if (!v79 || (v74 <= v21 ? (BOOL v80 = v69 <= v21) : (BOOL v80 = 1), !v80))
                              {
                                if (v81 != *v73)
                                {
                                  float v81 = (float)((float)((float)(*v73 - v81) * (float)(v21 - v69)) / (float)(v74 - v69))
                                      + v81;
                                  float v82 = fabsf(v81 + v19) * 0.000011921;
                                }
                                float v65 = vabds_f32(v19, v81);
                                if (v65 <= v82 || v65 < 1.1755e-38) {
                                  break;
                                }
                                if (v81 < v19) {
                                  ++v58;
                                }
                              }
                              BOOL v64 = ++v59 < v60;
                              v63 += 2;
                            }
                            while (v62 != v59);
                            unint64_t v83 = 0;
                            if (v64)
                            {
                              uint64_t v84 = 0;
                              return v84 | v83;
                            }
                            uint64_t v84 = 0;
                            if (v58) {
                              return v84 | v83;
                            }
                          }
                          v53 += 3;
                        }
                        uint64_t v85 = *v15;
                        unint64_t v83 = v85 & 0xFFFFFFFFFFFFFF00;
                        uint64_t v84 = v85;
                        return v84 | v83;
                      }
                    }
                  }
                }
                v15 += 6;
              }
              while (v15 != v16);
            }
          }
        }
      }
      long long v23 = (uint64_t *)v10[1];
      if (v23)
      {
        do
        {
          long long v24 = v23;
          long long v23 = (uint64_t *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          long long v24 = (uint64_t *)v10[2];
          BOOL v45 = *v24 == (void)v10;
          uint64_t v10 = v24;
        }
        while (!v45);
      }
      uint64_t v10 = v24;
    }
    while (v24 != v9);
  }
  unint64_t v83 = 0;
  uint64_t v84 = 0;
  return v84 | v83;
}

float ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke_3(uint64_t a1)
{
  float v1 = *(float *)(a1 + 48);
  float v2 = *(float *)(a1 + 52);
  uint64_t v3 = *(void *)(a1 + 40);
  float result = v1 + (float)((*(float (**)(void))(*(void *)(a1 + 32) + 16))() * (float)(v2 - v1));
  *(float *)(v3 + 356) = result;
  return result;
}

float ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke_4(uint64_t a1)
{
  float result = *(float *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  *(float *)(*(void *)(a1 + 32) + 356) = result;
  *(unsigned char *)(v2 + 8) = 0;
  return result;
}

float ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke_2(float a1)
{
  return fminf(fmaxf((float)(a1 * 2.0) + -1.0, 0.0), 1.0);
}

float ___ZN2md11HikingLogic19_animateContourFadeERNS_13HikingContextEfb_block_invoke(float a1)
{
  return fminf(fmaxf(a1 + a1, 0.0), 1.0);
}

void ___ZL29GEOGetVectorKitHikingLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "HikingLogic");
  float v1 = (void *)GEOGetVectorKitHikingLogicLog(void)::log;
  GEOGetVectorKitHikingLogicLog(void)::log = (uint64_t)v0;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D8C0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF56D8C0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__1NS_9allocatorISN_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D878;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF56D878;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md11HikingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_12SceneContextENS2_17StyleLogicContextENS2_15SettingsContextENS2_17NavigationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_13HikingContextEE3__0NS_9allocatorISN_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x92F3DC114CADB853 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::HikingContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::HikingContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555398;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x1000C4096AF022DLL);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::HikingContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555398;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C4096AF022DLL);
  }
  return a1;
}

void md::HikingLogic::didBecomeInactive(md::HikingLogic *this)
{
  uint64_t v2 = *((void *)this + 32);
  if (v2)
  {
    uint64_t v7 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v7);
  }
  uint64_t v3 = *((void *)this + 39);
  if (v3 && *((unsigned char *)this + 280))
  {
    long long v6 = *(_OWORD *)((char *)this + 264);
    LOBYTE(v7) = 0;
    (*(void (**)(uint64_t, long long *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v7);
  }
  if (*((unsigned char *)this + 224)) {
    *((unsigned char *)this + 224) = 0;
  }
  if (*((unsigned char *)this + 280)) {
    *((unsigned char *)this + 280) = 0;
  }
  if (*((unsigned char *)this + 184)) {
    *((unsigned char *)this + 184) = 0;
  }
  if (*((unsigned char *)this + 200)) {
    *((unsigned char *)this + 200) = 0;
  }
  if (*((unsigned char *)this + 337)) {
    *((unsigned char *)this + 337) = 0;
  }
  md::HikingLogic::deselectTrails(this);
  uint64_t v4 = (void *)*((void *)this + 46);
  if (v4)
  {
    [v4 stop];
    uint64_t v5 = (void *)*((void *)this + 46);
    if (v5)
    {
      *((void *)this + 46) = 0;
    }
  }
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 87) = 0;
}

void md::HikingLogic::deselectTrails(md::HikingLogic *this)
{
  if (*((unsigned char *)this + 328))
  {
    *((unsigned char *)this + 328) = 0;
    uint64_t v2 = (void *)*((void *)this + 15);
    uint64_t v3 = v2[4];
    uint64_t v4 = v2[5];
    uint64_t v5 = v3;
    if (v3 == v4)
    {
LABEL_7:
      if (v5 == v4) {
        goto LABEL_35;
      }
      uint64_t v6 = *(void *)(v5 + 8);
      if (!v6) {
        goto LABEL_35;
      }
      int8x8_t v7 = (int8x8_t)v2[17];
      if (!*(void *)&v7) {
        goto LABEL_35;
      }
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        uint64_t v9 = 68;
        if (*(void *)&v7 <= 0x44uLL) {
          uint64_t v9 = 0x44u % v2[17];
        }
      }
      else
      {
        uint64_t v9 = (v7.i32[0] - 1) & 0x44;
      }
      uint64_t v10 = *(uint64_t ***)(v2[16] + 8 * v9);
      if (!v10) {
        goto LABEL_35;
      }
      uint64_t v11 = *v10;
      if (!v11) {
        goto LABEL_35;
      }
      if (v8.u32[0] < 2uLL)
      {
        uint64_t v12 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v14 = v11[1];
          if (v14 == 68)
          {
            if (*((_WORD *)v11 + 8) == 68) {
              goto LABEL_30;
            }
          }
          else if ((v14 & v12) != v9)
          {
            goto LABEL_35;
          }
          uint64_t v11 = (uint64_t *)*v11;
          if (!v11) {
            goto LABEL_35;
          }
        }
      }
      while (1)
      {
        unint64_t v13 = v11[1];
        if (v13 == 68)
        {
          if (*((_WORD *)v11 + 8) == 68)
          {
LABEL_30:
            *(_OWORD *)float v37 = 0u;
            *(_OWORD *)__p = 0u;
            int v39 = 1065353216;
            md::SelectedRoadLayerDataSource::setSelectedRoads(v6, (uint64_t)v37);
            long long v15 = __p[0];
            if (__p[0])
            {
              do
              {
                long long v16 = (void *)*v15;
                operator delete(v15);
                long long v15 = v16;
              }
              while (v16);
            }
            int v17 = v37[0];
            v37[0] = 0;
            if (v17) {
              operator delete(v17);
            }
            uint64_t v2 = (void *)*((void *)this + 15);
            uint64_t v3 = v2[4];
            uint64_t v4 = v2[5];
            goto LABEL_35;
          }
        }
        else
        {
          if (v13 >= *(void *)&v7) {
            v13 %= *(void *)&v7;
          }
          if (v13 != v9) {
            goto LABEL_35;
          }
        }
        uint64_t v11 = (uint64_t *)*v11;
        if (!v11) {
          goto LABEL_35;
        }
      }
    }
    uint64_t v5 = v2[4];
    do
    {
      if (*(_WORD *)v5 == 68) {
        goto LABEL_7;
      }
      v5 += 16;
    }
    while (v5 != v4);
LABEL_35:
    if (v3 == v4) {
      goto LABEL_68;
    }
    uint64_t v18 = v3;
    while (*(_WORD *)v18 != 48)
    {
      v18 += 16;
      if (v18 == v4) {
        goto LABEL_68;
      }
    }
    if (v18 != v4)
    {
      uint64_t v19 = *(void *)(v18 + 8);
      if (v19)
      {
        int8x8_t v20 = (int8x8_t)v2[17];
        if (v20)
        {
          uint8x8_t v21 = (uint8x8_t)vcnt_s8(v20);
          v21.i16[0] = vaddlv_u8(v21);
          if (v21.u32[0] > 1uLL)
          {
            uint64_t v22 = 48;
            if (*(void *)&v20 <= 0x30uLL) {
              uint64_t v22 = 0x30u % v2[17];
            }
          }
          else
          {
            uint64_t v22 = (v20.i8[0] - 1) & 0x30;
          }
          long long v23 = *(uint64_t ***)(v2[16] + 8 * v22);
          if (v23)
          {
            long long v24 = *v23;
            if (v24)
            {
              if (v21.u32[0] < 2uLL)
              {
                uint64_t v25 = *(void *)&v20 - 1;
                while (1)
                {
                  uint64_t v27 = v24[1];
                  if (v27 == 48)
                  {
                    if (*((_WORD *)v24 + 8) == 48) {
                      goto LABEL_63;
                    }
                  }
                  else if ((v27 & v25) != v22)
                  {
                    goto LABEL_68;
                  }
                  long long v24 = (uint64_t *)*v24;
                  if (!v24) {
                    goto LABEL_68;
                  }
                }
              }
              do
              {
                unint64_t v26 = v24[1];
                if (v26 == 48)
                {
                  if (*((_WORD *)v24 + 8) == 48)
                  {
LABEL_63:
                    *(_OWORD *)float v37 = 0u;
                    *(_OWORD *)__p = 0u;
                    int v39 = 1065353216;
                    md::SelectedDaVinciRoadsLayerDataSource::setSelectedRoads(v19, (uint64_t)v37);
                    uint64_t v28 = __p[0];
                    if (__p[0])
                    {
                      do
                      {
                        char v29 = (void *)*v28;
                        operator delete(v28);
                        uint64_t v28 = v29;
                      }
                      while (v29);
                    }
                    uint64_t v30 = v37[0];
                    v37[0] = 0;
                    if (v30) {
                      operator delete(v30);
                    }
                    uint64_t v31 = *((void *)this + 15);
                    uint64_t v3 = *(void *)(v31 + 32);
                    uint64_t v4 = *(void *)(v31 + 40);
                    break;
                  }
                }
                else
                {
                  if (v26 >= *(void *)&v20) {
                    v26 %= *(void *)&v20;
                  }
                  if (v26 != v22) {
                    break;
                  }
                }
                long long v24 = (uint64_t *)*v24;
              }
              while (v24);
            }
          }
        }
      }
    }
LABEL_68:
    if (v3 == v4) {
      goto LABEL_78;
    }
    uint64_t v32 = v3;
    while (*(_WORD *)v32 != 73)
    {
      v32 += 16;
      if (v32 == v4) {
        goto LABEL_78;
      }
    }
    if (v32 != v4)
    {
      uint64_t v33 = *(md::SelectedLabelLayerDataSource **)(v32 + 8);
      if (v33)
      {
        md::SelectedLabelLayerDataSource::deselectRoadFeature(v33);
        uint64_t v34 = *((void *)this + 15);
        uint64_t v3 = *(void *)(v34 + 32);
        uint64_t v4 = *(void *)(v34 + 40);
      }
    }
LABEL_78:
    while (v3 != v4)
    {
      if (*(_WORD *)v3 == 80)
      {
        if (v3 != v4)
        {
          float v36 = *(md::SelectedLabelLayerDataSource **)(v3 + 8);
          if (v36) {
            md::SelectedLabelLayerDataSource::deselectRoadFeature(v36);
          }
        }
        break;
      }
      v3 += 16;
    }
    uint64_t v35 = **((void **)this + 17);
    if (v35)
    {
      LOBYTE(v37[0]) = 8;
      md::MapEngine::setNeedsTick(v35, v37);
    }
  }
}

void sub_1A21D83D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::HikingLogic::~HikingLogic(md::HikingLogic *this)
{
  md::HikingLogic::~HikingLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  md::HikingLogic *v2;
  md::HikingLogic *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF530778;
  *((void *)this + 45) = &unk_1EF5593D8;

  uint64_t v2 = (md::HikingLogic *)*((void *)this + 39);
  if (v2 == (md::HikingLogic *)((char *)this + 288))
  {
    (*(void (**)(char *))(*((void *)this + 36) + 32))((char *)this + 288);
  }
  else if (v2)
  {
    (*(void (**)(md::HikingLogic *))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = (md::HikingLogic *)*((void *)this + 32);
  if (v3 == (md::HikingLogic *)((char *)this + 232))
  {
    (*(void (**)(char *))(*((void *)this + 29) + 32))((char *)this + 232);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 19);
    if (!v4) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (v3) {
    (*(void (**)(md::HikingLogic *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v4)
  {
LABEL_11:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_13:
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void *std::function<void ()(geo::Mercator2<double>,BOOL)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(unsigned long long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void md::Logic<md::HikingLogic,md::HikingContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::SceneContext,md::StyleLogicContext,md::SettingsContext,md::NavigationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::HikingLogic::setSelectedTrail(md::HikingLogic *this, unint64_t a2, const char *a3, const char *a4)
{
  if (!*((unsigned char *)this + 328) || *((void *)this + 40) != a2)
  {
    *((void *)this + 40) = a2;
    *((unsigned char *)this + 328) = 1;
    uint64_t v8 = *((void *)this + 15);
    uint64_t v9 = *(void *)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 40);
    uint64_t v11 = v9;
    if (v9 != v10)
    {
      uint64_t v11 = v9;
      while (*(_WORD *)v11 != 68)
      {
        v11 += 16;
        if (v11 == v10) {
          goto LABEL_15;
        }
      }
    }
    if (v11 != v10)
    {
      uint64_t v12 = *(void *)(v11 + 8);
      if (v12)
      {
        *(_OWORD *)uint64_t v30 = 0u;
        *(_OWORD *)__p = 0u;
        int v32 = 1065353216;
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v30, a2, a2);
        md::SelectedRoadLayerDataSource::setSelectedRoads(v12, (uint64_t)v30);
        uint64_t v13 = __p[0];
        if (__p[0])
        {
          do
          {
            uint64_t v14 = (void *)*v13;
            operator delete(v13);
            uint64_t v13 = v14;
          }
          while (v14);
        }
        long long v15 = v30[0];
        v30[0] = 0;
        if (v15) {
          operator delete(v15);
        }
        uint64_t v16 = *((void *)this + 15);
        uint64_t v9 = *(void *)(v16 + 32);
        uint64_t v10 = *(void *)(v16 + 40);
      }
    }
LABEL_15:
    if (v9 != v10)
    {
      uint64_t v17 = v9;
      while (*(_WORD *)v17 != 48)
      {
        v17 += 16;
        if (v17 == v10) {
          goto LABEL_28;
        }
      }
      if (v17 != v10)
      {
        uint64_t v18 = *(void *)(v17 + 8);
        if (v18)
        {
          if (!*((unsigned char *)this + 328))
          {
            char v29 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:nn180100]();
            std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)v30);
            _Unwind_Resume(v29);
          }
          unint64_t v19 = *((void *)this + 40);
          *(_OWORD *)uint64_t v30 = 0u;
          *(_OWORD *)__p = 0u;
          int v32 = 1065353216;
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v30, v19, v19);
          md::SelectedDaVinciRoadsLayerDataSource::setSelectedRoads(v18, (uint64_t)v30);
          int8x8_t v20 = __p[0];
          if (__p[0])
          {
            do
            {
              uint8x8_t v21 = (void *)*v20;
              operator delete(v20);
              int8x8_t v20 = v21;
            }
            while (v21);
          }
          uint64_t v22 = v30[0];
          v30[0] = 0;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = *((void *)this + 15);
          uint64_t v9 = *(void *)(v23 + 32);
          uint64_t v10 = *(void *)(v23 + 40);
        }
      }
    }
LABEL_28:
    if (v9 == v10) {
      goto LABEL_38;
    }
    uint64_t v24 = v9;
    while (*(_WORD *)v24 != 73)
    {
      v24 += 16;
      if (v24 == v10) {
        goto LABEL_38;
      }
    }
    if (v24 != v10)
    {
      uint64_t v25 = *(md::SelectedLabelLayerDataSource **)(v24 + 8);
      if (v25)
      {
        md::SelectedLabelLayerDataSource::setSelectedRoadFeature(v25, a2, a3, a4);
        uint64_t v26 = *((void *)this + 15);
        uint64_t v9 = *(void *)(v26 + 32);
        uint64_t v10 = *(void *)(v26 + 40);
      }
    }
LABEL_38:
    while (v9 != v10)
    {
      if (*(_WORD *)v9 == 80)
      {
        if (v9 != v10)
        {
          uint64_t v28 = *(md::SelectedLabelLayerDataSource **)(v9 + 8);
          if (v28) {
            md::SelectedLabelLayerDataSource::setSelectedRoadFeature(v28, a2, a3, a4);
          }
        }
        break;
      }
      v9 += 16;
    }
    uint64_t v27 = **((void **)this + 17);
    if (v27)
    {
      LOBYTE(v30[0]) = 8;
      md::MapEngine::setNeedsTick(v27, v30);
    }
  }
}

void sub_1A21D8A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  uint64_t v12 = __p;
  if (__p)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::FlyoverTileDataLogic::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  v113[0] = &unk_1EF51E2F0;
  v113[1] = a2;
  v111[0] = &unk_1EF51E338;
  v111[1] = a2;
  uint64_t v112 = v111;
  uint64_t v116 = v115;
  uint64_t v114 = v113;
  v115[0] = &unk_1EF51E338;
  v115[1] = a2;
  _ZNSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__0NS_9allocatorISL_EEFvvEEclEv((uint64_t)v113);
  if (v112 == v111)
  {
    (*(void (**)(void *))(v111[0] + 32))(v111);
  }
  else if (v112)
  {
    (*(void (**)(void *))(*v112 + 40))(v112);
  }
  if (v114 == v113)
  {
    (*(void (**)(void *))(v113[0] + 32))(v113);
  }
  else if (v114)
  {
    (*(void (**)(void *))(*v114 + 40))(v114);
  }
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = *(void *)(a3 + 16);
  if (*(void *)(v8 + 5584)) {
    uint64_t v8 = *(void *)(v8 + 5584);
  }
  *(void *)(a4 + 8) = v8;
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(void *)(v9 + 40);
  uint64_t v12 = v10;
  if (v10 != v11)
  {
    uint64_t v12 = v10;
    while (*(_WORD *)v12 != 45)
    {
      v12 += 16;
      if (v12 == v11) {
        goto LABEL_26;
      }
    }
  }
  if (v12 != v11)
  {
    uint64_t v13 = *(void *)(v12 + 8);
    if (v13)
    {
      uint64_t v14 = *(unsigned __int8 **)(v13 + 824);
      if (v14) {
        atomic_store(*(unsigned char *)(a1 + 216), v14);
      }
      if (*(unsigned char *)(a1 + 280)) {
        unsigned __int8 v15 = *(unsigned char *)(a1 + 216) != 0;
      }
      else {
        unsigned __int8 v15 = 1;
      }
      atomic_store(v15, (unsigned __int8 *)(v13 + 816));
      uint64_t v16 = *(void *)(a1 + 120);
      uint64_t v10 = *(void *)(v16 + 32);
      uint64_t v11 = *(void *)(v16 + 40);
    }
  }
LABEL_26:
  while (v10 != v11)
  {
    if (*(_WORD *)v10 == 53)
    {
      if (v10 != v11)
      {
        uint64_t v62 = *(void *)(v10 + 8);
        if (v62)
        {
          float32_t v63 = *(unsigned __int8 **)(v62 + 792);
          if (v63) {
            atomic_store(*(unsigned char *)(a1 + 216), v63);
          }
          if (*(unsigned char *)(a1 + 280)) {
            unsigned __int8 v64 = *(unsigned char *)(a1 + 216) != 0;
          }
          else {
            unsigned __int8 v64 = 1;
          }
          atomic_store(v64, (unsigned __int8 *)(v62 + 786));
        }
      }
      break;
    }
    v10 += 16;
  }
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(v7 + 5);
  if (*(void *)(a1 + 352))
  {
    uint64_t v17 = *(void **)(a1 + 344);
    if (v17)
    {
      do
      {
        uint64_t v28 = (void *)*v17;
        char v29 = (void *)v17[7];
        if (v29)
        {
          do
          {
            uint64_t v30 = (void *)*v29;
            operator delete(v29);
            char v29 = v30;
          }
          while (v30);
        }
        uint64_t v31 = (void *)v17[5];
        v17[5] = 0;
        if (v31) {
          operator delete(v31);
        }
        operator delete(v17);
        uint64_t v17 = v28;
      }
      while (v28);
    }
    *(void *)(a1 + 344) = 0;
    uint64_t v18 = *(void *)(a1 + 336);
    if (v18)
    {
      for (uint64_t i = 0; i != v18; ++i)
        *(void *)(*(void *)(a1 + 328) + 8 * i) = 0;
    }
    *(void *)(a1 + 352) = 0;
  }
  if (*(unsigned char *)(a1 + 320))
  {
    int8x8_t v20 = *(char **)(a4 + 8);
    char v21 = *v20;
    long long v66 = *((_OWORD *)v20 + 24);
    long long v67 = *((_OWORD *)v20 + 23);
    long long v22 = *((_OWORD *)v20 + 26);
    long long v107 = *((_OWORD *)v20 + 25);
    long long v108 = v22;
    long long v109 = *((_OWORD *)v20 + 27);
    int v110 = *((_DWORD *)v20 + 112);
    uint64_t v23 = *(void *)(a1 + 312);
    if (!v23)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_110;
    }
    uint64_t v24 = *((void *)v20 + 57);
    long long v65 = *((_OWORD *)v20 + 29);
    uint64_t v25 = *((void *)v20 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v23 + 48))(&v68);
    uint64_t v73 = v68;
    long long v74 = v69;
    long long v75 = v70;
    long long v76 = v71;
    uint64_t v78 = 0;
    uint64_t v77 = 0;
    uint64_t v81 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    int64x2_t v82 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v83 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v84 = v82;
    int64x2_t v85 = v83;
    int64x2_t v86 = v82;
    int64x2_t v87 = v83;
    int64x2_t v88 = v82;
    int64x2_t v89 = v83;
    int64x2_t v90 = v82;
    int64x2_t v91 = v83;
    int64x2_t v92 = v82;
    int64x2_t v93 = v83;
    char v94 = 1;
    char v95 = 0;
    char v96 = 0;
    long long v97 = v67;
    long long v98 = v66;
    long long v99 = v107;
    long long v100 = v108;
    long long v101 = v109;
    int v102 = v110;
    long long v104 = v65;
    uint64_t v103 = v24;
    uint64_t v105 = v25;
    uint64_t v106 = 0;
    v72[0] = v21;
    gdc::CameraView::geocentricCameraView((gdc::CameraView *)&v68, (const Camera *)v72);
    uint64_t v26 = a4 + 32;
    uint64_t v27 = &v68;
  }
  else
  {
    uint64_t v27 = *(uint64_t **)(a4 + 8);
    uint64_t v26 = a4 + 32;
  }
  v32.n128_f64[0] = gdc::CameraView::operator=(v26, (uint64_t)v27);
  uint64_t v33 = *(void *)(a1 + 120);
  if (!v33) {
    goto LABEL_94;
  }
  uint64_t v34 = *(void *)(v33 + 32);
  uint64_t v35 = *(void *)(v33 + 40);
  if (v34 != v35)
  {
    while (*(_WORD *)v34 != 75)
    {
      v34 += 16;
      if (v34 == v35) {
        goto LABEL_94;
      }
    }
  }
  if (v34 != v35)
  {
    uint64_t v36 = *(void *)(v34 + 8);
    if (v36)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v36 + 624));
      uint64_t v37 = *(void *)(v36 + 664);
      os_unfair_lock_unlock((os_unfair_lock_t)(v36 + 624));
      if (v37)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v36 + 624));
        float v38 = *(void **)(v36 + 136);
        if (!v38) {
          goto LABEL_93;
        }
        int v39 = (uint64_t *)(v36 + 680);
LABEL_53:
        while (1)
        {
          uint64_t v40 = v38[4];
          int v41 = *(_DWORD *)(v40 + 8);
          if ((_BYTE)v41) {
            break;
          }
LABEL_52:
          float v38 = (void *)*v38;
          if (!v38) {
            goto LABEL_93;
          }
        }
        uint64_t v42 = *(unsigned __int8 *)(v40 + 12);
        int v43 = *(_DWORD *)v40;
        int v44 = *(_DWORD *)(v40 + 4);
        int8x8_t v45 = *(int8x8_t *)(v36 + 648);
        uint8x8_t v46 = (uint8x8_t)vcnt_s8(v45);
        v46.i16[0] = vaddlv_u8(v46);
        uint64_t v47 = *(void *)&v45 - 1;
LABEL_55:
        if (!*(void *)&v45) {
          goto LABEL_84;
        }
        unint64_t v48 = (v41
             - 0x61C8864680B583EBLL
             + ((v42 - 0x61C8864680B583EBLL) << 6)
             + ((unint64_t)(v42 - 0x61C8864680B583EBLL) >> 2)) ^ (v42 - 0x61C8864680B583EBLL);
        unint64_t v49 = (v44 - 0x61C8864680B583EBLL + (v48 << 6) + (v48 >> 2)) ^ v48;
        unint64_t v50 = (v43 - 0x61C8864680B583EBLL + (v49 << 6) + (v49 >> 2)) ^ v49;
        if (v46.u32[0] > 1uLL)
        {
          unint64_t v51 = v50;
          if (v50 >= *(void *)&v45) {
            unint64_t v51 = v50 % *(void *)&v45;
          }
        }
        else
        {
          unint64_t v51 = v50 & v47;
        }
        long long v52 = *(uint64_t ***)(*(void *)(v36 + 640) + 8 * v51);
        if (!v52 || (long long v53 = *v52) == 0)
        {
LABEL_84:
          BOOL v61 = 0;
          goto LABEL_87;
        }
        if (v46.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v54 = v53[1];
            if (v54 == v50)
            {
              if (*((unsigned __int8 *)v53 + 16) == v42
                && *((unsigned __int8 *)v53 + 17) == v41
                && *((_DWORD *)v53 + 5) == v44
                && *((_DWORD *)v53 + 6) == v43)
              {
                goto LABEL_71;
              }
            }
            else if ((v54 & v47) != v51)
            {
              goto LABEL_85;
            }
            long long v53 = (uint64_t *)*v53;
            if (!v53) {
              goto LABEL_85;
            }
          }
        }
        while (1)
        {
          unint64_t v60 = v53[1];
          if (v60 == v50)
          {
            if (*((unsigned __int8 *)v53 + 16) == v42
              && *((unsigned __int8 *)v53 + 17) == v41
              && *((_DWORD *)v53 + 5) == v44
              && *((_DWORD *)v53 + 6) == v43)
            {
LABEL_71:
              uint64_t v55 = *(uint64_t **)(v36 + 688);
              uint64_t v56 = (uint64_t *)v53[5];
              if (v55 != v56)
              {
                uint64_t v57 = (uint64_t *)v56[1];
                if (v57 != v55)
                {
                  uint64_t v58 = *v56;
                  *(void *)(v58 + 8) = v57;
                  *(void *)v56[1] = v58;
                  uint64_t v59 = *v55;
                  *(void *)(v59 + 8) = v56;
                  uint64_t *v56 = v59;
                  uint64_t *v55 = (uint64_t)v56;
                  v56[1] = (uint64_t)v55;
                  uint64_t v55 = *(uint64_t **)(v36 + 688);
                }
              }
LABEL_86:
              BOOL v61 = v55 != v39;
              if (!(_BYTE)v41)
              {
                if (v55 != v39) {
                  goto LABEL_92;
                }
                goto LABEL_52;
              }
LABEL_87:
              LOBYTE(v41) = v41 - 1;
              if (!(_BYTE)v41 || (v44 >>= 1, v43 >>= 1, v61))
              {
                if (!v61) {
                  goto LABEL_52;
                }
LABEL_92:
                float v38 = (void *)std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::erase((void *)(v36 + 120), v38);
                if (!v38)
                {
LABEL_93:
                  os_unfair_lock_unlock((os_unfair_lock_t)(v36 + 624));
                  break;
                }
                goto LABEL_53;
              }
              goto LABEL_55;
            }
          }
          else
          {
            if (v60 >= *(void *)&v45) {
              v60 %= *(void *)&v45;
            }
            if (v60 != v51)
            {
LABEL_85:
              uint64_t v55 = (uint64_t *)(v36 + 680);
              goto LABEL_86;
            }
          }
          long long v53 = (uint64_t *)*v53;
          if (!v53) {
            goto LABEL_85;
          }
        }
      }
    }
  }
LABEL_94:
  if (!v116)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_110:
    __break(1u);
    return;
  }
  (*(void (**)(void *, __n128))(*v116 + 48))(v116, v32);
  if (v116 == v115)
  {
    (*(void (**)(void *))(v115[0] + 32))(v115);
  }
  else if (v116)
  {
    (*(void (**)(void))(*v116 + 40))();
  }
}

void sub_1A21D9318(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 80);
  if (v4 == v1)
  {
    (*(void (**)(uint64_t))(*(void *)(v2 - 104) + 32))(v2 - 104);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  std::function<void ()(void)>::~function((void *)(v2 - 168));
  std::function<void ()(void)>::~function((void *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_1A21D9398(_Unwind_Exception *a1)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1A21D93AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 80);
  if (v3 == v1 - 104)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 - 104) + 32))(v1 - 104);
    _Unwind_Resume(exception_object);
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__0NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "FlyoverTileDataLogicVariableRate", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__1NS_9allocatorISL_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "FlyoverTileDataLogicVariableRate", "", v5, 2u);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51E338;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF51E338;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51E2F0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF51E2F0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md20FlyoverTileDataLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_21LayerDataLogicContextENS2_16ElevationContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_30FlyoverTileDataResolverContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void *md::FlyoverTileDataLogic::allocateContext@<X0>(md::FlyoverTileDataLogic *this@<X0>, uint64_t a2@<X8>)
{
  long long v17 = *(unint64_t *)(*((void *)this + 15) + 352);
  *(void *)&long long v18 = (char *)this + 128;
  *((void *)&v18 + 1) = (char *)this + 328;
  bzero(&v19, 0x558uLL);
  uint64_t v27 = 0;
  *(int64x2_t *)int8x8_t v20 = vdupq_n_s64(0xC00921FB54442D18);
  *(_OWORD *)&v20[16] = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v26 = 0uLL;
  uint64_t v23 = 0;
  int64x2_t v28 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v29 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int64x2_t v30 = v28;
  int64x2_t v31 = v29;
  int64x2_t v32 = v28;
  int64x2_t v33 = v29;
  int64x2_t v34 = v28;
  int64x2_t v35 = v29;
  int64x2_t v36 = v28;
  int64x2_t v37 = v29;
  int64x2_t v38 = v28;
  int64x2_t v39 = v29;
  LOBYTE(v40) = 1;
  char v41 = 0;
  long long v43 = 0u;
  long long v42 = 0u;
  int v47 = 0;
  long long v46 = 0uLL;
  long long v48 = xmmword_1A28FE5B0;
  long long v49 = 0u;
  memset(v50, 0, sizeof(v50));
  uint64_t v51 = 0x3FF0000000000000;
  unint64_t v54 = 0xBFF0000000000000;
  uint64_t v55 = 0x3FF0000000000000;
  int v57 = 2;
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  *(unsigned char *)(a2 + 32) = 0;
  a2 += 32;
  *(void *)(a2 + 8) = 0xC00921FB54442D18;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  long long v3 = v24;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)&v20[8];
  *(_OWORD *)(a2 + 32) = 0u;
  uint64_t v4 = v40;
  *(void *)(a2 + 128) = v27;
  long long v5 = v26;
  *(_OWORD *)(a2 + 96) = v25;
  *(_OWORD *)(a2 + 112) = v5;
  *(_OWORD *)(a2 + 80) = v3;
  *(int64x2_t *)(a2 + 136) = v28;
  int64x2_t v6 = v29;
  int64x2_t v7 = v30;
  int64x2_t v8 = v31;
  *(int64x2_t *)(a2 + 200) = v32;
  *(int64x2_t *)(a2 + 184) = v8;
  *(int64x2_t *)(a2 + 168) = v7;
  *(int64x2_t *)(a2 + 152) = v6;
  int64x2_t v9 = v34;
  int64x2_t v10 = v33;
  *(int64x2_t *)(a2 + 248) = v35;
  *(int64x2_t *)(a2 + 232) = v9;
  *(int64x2_t *)(a2 + 216) = v10;
  int64x2_t v11 = v36;
  int64x2_t v12 = v37;
  int64x2_t v13 = v38;
  int64x2_t v14 = v39;
  *(void *)(a2 + 328) = v4;
  *(int64x2_t *)(a2 + 296) = v13;
  *(int64x2_t *)(a2 + 312) = v14;
  *(int64x2_t *)(a2 + 264) = v11;
  *(int64x2_t *)(a2 + 280) = v12;
  *(unsigned char *)(a2 + 336) = 0;
  *(unsigned char *)(a2 + 352) = 0;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  long long v15 = v45;
  *(_OWORD *)(a2 + 400) = v44;
  *(_OWORD *)(a2 + 416) = v15;
  *(_OWORD *)(a2 + 432) = v46;
  *(_DWORD *)(a2 + 448) = v47;
  *(void *)(a2 + 456) = 0;
  *(_OWORD *)(a2 + 464) = xmmword_1A28FE5B0;
  *(void *)(a2 + 480) = 0;
  *(void *)(a2 + 488) = 0;
  geo::View<double>::View(a2 + 496, v50, &v52, v53, v56, 2, -1.0);
  *(void *)(a2 + 968) = 0;
  *(void *)(a2 + 960) = 0;
  *(void *)(a2 + 976) = 0;
  return memcpy((void *)(a2 + 984), v58, 0x180uLL);
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x479E84E48468DB70 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_71;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x7851AF310F49C988;
    if (a3 <= 0x7851AF310F49C988) {
      uint64_t v4 = 0x7851AF310F49C988 % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x7851AF310F49C988;
  }
  int64x2_t v7 = *(void **)(a2 + 8 * v4);
  if (!v7) {
    goto LABEL_25;
  }
  int64x2_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0x7851AF310F49C988)
      {
        if (v8[2] == 0x7851AF310F49C988) {
          goto LABEL_23;
        }
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      int64x2_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == 0x7851AF310F49C988) {
      break;
    }
    if (v9 >= a3) {
      v9 %= a3;
    }
    if (v9 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    int64x2_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_25;
    }
  }
  if (v8[2] != 0x7851AF310F49C988) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v11 = v8[5];
  if (*(void *)(v11 + 8) == 0x7851AF310F49C988)
  {
    uint64_t v6 = *(void *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v12 = 0x8BD499FBD96FBB9ELL;
    if (a3 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v12 = 0x8BD499FBD96FBB9ELL % a3;
    }
  }
  else
  {
    unint64_t v12 = (a3 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  int64x2_t v13 = *(void **)(a2 + 8 * v12);
  if (!v13) {
    goto LABEL_48;
  }
  int64x2_t v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x8BD499FBD96FBB9ELL)
      {
        if (v14[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_46;
        }
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      int64x2_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v15 = v14[1];
    if (v15 != 0x8BD499FBD96FBB9ELL)
    {
      if (v15 >= a3) {
        v15 %= a3;
      }
      if (v15 != v12) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v14[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      int64x2_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v5 = *(void *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v18 = 0x1AF456233693CD46;
    if (a3 <= 0x1AF456233693CD46) {
      uint64_t v18 = 0x1AF456233693CD46 % a3;
    }
  }
  else
  {
    uint64_t v18 = (a3 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v19 = *(void **)(a2 + 8 * v18);
  if (!v19) {
    goto LABEL_71;
  }
  int8x8_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0x1AF456233693CD46)
      {
        if (v20[2] == 0x1AF456233693CD46) {
          goto LABEL_69;
        }
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      int8x8_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == 0x1AF456233693CD46) {
      break;
    }
    if (v21 >= a3) {
      v21 %= a3;
    }
    if (v21 != v18) {
      goto LABEL_71;
    }
LABEL_58:
    int8x8_t v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_71;
    }
  }
  if (v20[2] != 0x1AF456233693CD46) {
    goto LABEL_58;
  }
LABEL_69:
  uint64_t v23 = v20[5];
  if (*(void *)(v23 + 8) != 0x1AF456233693CD46)
  {
LABEL_71:
    uint64_t v24 = 0;
    goto LABEL_72;
  }
  uint64_t v24 = *(void *)(v23 + 32);
LABEL_72:
  *float result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x479E84E48468DB70)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x479E84E48468DB70)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x479E84E48468DB70)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x479E84E48468DB70)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A21DA18C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::FlyoverTileDataResolverContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::FlyoverTileDataResolverContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555D70;
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (*(unsigned char *)(v1 + 384)) {
      *(unsigned char *)(v1 + 384) = 0;
    }
    if (*(unsigned char *)(v1 + 368)) {
      *(unsigned char *)(v1 + 368) = 0;
    }
    MEMORY[0x1A6239270]();
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::FlyoverTileDataResolverContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555D70;
  uint64_t v2 = a1[4];
  if (v2)
  {
    if (*(unsigned char *)(v2 + 384)) {
      *(unsigned char *)(v2 + 384) = 0;
    }
    if (*(unsigned char *)(v2 + 368)) {
      *(unsigned char *)(v2 + 368) = 0;
    }
    MEMORY[0x1A6239270]();
  }
  return a1;
}

double md::FlyoverTileDataLogic::createDebugNode@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void md::FlyoverTileDataLogic::~FlyoverTileDataLogic(md::FlyoverTileDataLogic *this)
{
  md::FlyoverTileDataLogic::~FlyoverTileDataLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  md::FlyoverTileDataLogic *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  md::FlyoverTileDataLogic *v9;
  uint64_t v10;
  uint64_t v11;
  md::FlyoverTileDataLogic *v12;
  void *v13;
  void *v14;
  void *v15;

  *(void *)this = &unk_1EF53D638;
  uint64_t v2 = (void *)*((void *)this + 43);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[7];
      if (v6)
      {
        do
        {
          int64x2_t v7 = (void *)*v6;
          operator delete(v6);
          uint64_t v6 = v7;
        }
        while (v7);
      }
      int64x2_t v8 = (void *)v2[5];
      v2[5] = 0;
      if (v8) {
        operator delete(v8);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = (void *)*((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*((unsigned char *)this + 320))
  {
    uint64_t v4 = (md::FlyoverTileDataLogic *)*((void *)this + 39);
    if (v4 == (md::FlyoverTileDataLogic *)((char *)this + 288))
    {
      (*(void (**)(char *))(*((void *)this + 36) + 32))((char *)this + 288);
    }
    else if (v4)
    {
      (*(void (**)(md::FlyoverTileDataLogic *))(*(void *)v4 + 40))(v4);
    }
  }
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 200);
  if (*((void *)this + 24))
  {
    uint64_t v10 = *((void *)this + 22);
    unint64_t v9 = (md::FlyoverTileDataLogic *)*((void *)this + 23);
    uint64_t v11 = *(void *)v9;
    *(void *)(v11 + 8) = *(void *)(v10 + 8);
    **(void **)(v10 + 8) = v11;
    *((void *)this + 24) = 0;
    if (v9 != (md::FlyoverTileDataLogic *)((char *)this + 176))
    {
      do
      {
        unint64_t v12 = (md::FlyoverTileDataLogic *)*((void *)v9 + 1);
        operator delete(v9);
        unint64_t v9 = v12;
      }
      while (v12 != (md::FlyoverTileDataLogic *)((char *)this + 176));
    }
  }
  int64x2_t v13 = (void *)*((void *)this + 19);
  if (v13)
  {
    do
    {
      int64x2_t v14 = (void *)*v13;
      operator delete(v13);
      int64x2_t v13 = v14;
    }
    while (v14);
  }
  unint64_t v15 = (void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v15) {
    operator delete(v15);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

uint64_t std::deque<md::FlyoverOctile>::~deque[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 51;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 102;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      int64x2_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void md::FlyoverSelectionContext::~FlyoverSelectionContext(md::FlyoverSelectionContext *this)
{
  *(void *)this = &unk_1EF542FC0;
  if (*((unsigned char *)this + 520)) {
    *((unsigned char *)this + 520) = 0;
  }
  if (*((unsigned char *)this + 504)) {
    *((unsigned char *)this + 504) = 0;
  }
  std::deque<md::FlyoverOctile>::~deque[abi:nn180100]((uint64_t)this + 88);
  *(void *)this = &unk_1EF555180;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    operator delete(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(void *)this = &unk_1EF542FC0;
  if (*((unsigned char *)this + 520)) {
    *((unsigned char *)this + 520) = 0;
  }
  if (*((unsigned char *)this + 504)) {
    *((unsigned char *)this + 504) = 0;
  }
  std::deque<md::FlyoverOctile>::~deque[abi:nn180100]((uint64_t)this + 88);
  *(void *)this = &unk_1EF555180;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    operator delete(v4);
  }
}

void md::FlyoverSelectionContext::getTileBound(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8 = (void *)(a2 + 8);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>((void *)(a2 + 8), a3);
  if (!v9) {
    goto LABEL_7;
  }
  uint64_t v10 = *(uint64_t **)(a2 + 56);
  uint64_t v11 = (uint64_t *)v9[7];
  if (v10 != v11)
  {
    unint64_t v12 = (uint64_t *)v11[1];
    if (v12 != v10)
    {
      uint64_t v13 = *v11;
      *(void *)(v13 + 8) = v12;
      *(void *)v11[1] = v13;
      uint64_t v14 = *v10;
      *(void *)(v14 + 8) = v11;
      *uint64_t v11 = v14;
      *uint64_t v10 = (uint64_t)v11;
      v11[1] = (uint64_t)v10;
      uint64_t v10 = *(uint64_t **)(a2 + 56);
    }
  }
  if (v10 == (uint64_t *)(a2 + 48))
  {
LABEL_7:
    if (!*(unsigned char *)a4)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 104) = 0;
      return;
    }
    int64x2_t v104 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    long long v105 = xmmword_1A28FC720;
    int64x2_t v106 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    long long v101 = 0u;
    long long v102 = 0u;
    long long v100 = 0u;
    uint64_t v103 = 0x3FF0000000000000;
    float v19 = *(double *)(a4 + 8);
    float v20 = *(double *)(a4 + 16);
    md::FlyoverCommon::computeGeocentricBoundsFromOctile((uint64_t)a3, (uint64_t)&v100, (uint64_t)&v104, v19, v20);
    uint64_t v21 = v101;
    uint64_t v98 = *((void *)&v100 + 1);
    uint64_t v99 = v100;
    uint64_t v22 = *((void *)&v101 + 1);
    long long v24 = v102;
    uint64_t v23 = v103;
    uint64_t v25 = v104.i64[0];
    uint64_t v96 = v105;
    uint64_t v97 = v104.i64[1];
    uint64_t v26 = v106.i64[0];
    uint64_t v95 = *((void *)&v105 + 1);
    uint64_t v27 = v106.i64[1];
    int64x2_t v28 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>(v8, a3);
    if (v28)
    {
      int64x2_t v29 = v28;
      int64x2_t v30 = (uint64_t *)v28[7];
      uint64_t v31 = *v30;
      *(void *)(v31 + 8) = v30[1];
      *(void *)v30[1] = v31;
      --*(void *)(a2 + 64);
      operator delete(v30);
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v8, v29);
      if (*(void *)__p) {
        operator delete(*(void **)__p);
      }
    }
    int64x2_t v32 = (char *)operator new(0xA0uLL);
    unsigned __int8 v33 = a3[1];
    uint64_t v34 = *a3;
    v32[16] = v34;
    v32[17] = v33;
    uint64_t v35 = *(void *)(a3 + 4);
    *(void *)(v32 + 20) = v35;
    int64x2_t v36 = a3 + 24;
    *(_OWORD *)(v32 + 40) = *(_OWORD *)(a3 + 24);
    *((void *)v32 + 7) = v99;
    *((void *)v32 + 8) = v98;
    *((void *)v32 + 9) = v21;
    *((void *)v32 + 10) = v22;
    *(_OWORD *)(v32 + 88) = v24;
    *((void *)v32 + 13) = v23;
    *((void *)v32 + 14) = v25;
    *((void *)v32 + 15) = v97;
    *((void *)v32 + 16) = v96;
    *((void *)v32 + 17) = v95;
    *((void *)v32 + 18) = v26;
    *((void *)v32 + 19) = v27;
    int64x2_t v37 = *(void **)(a2 + 56);
    *(void *)int64x2_t v32 = a2 + 48;
    *((void *)v32 + 1) = v37;
    *int64x2_t v37 = v32;
    unint64_t v38 = *(void *)(a2 + 64) + 1;
    *(void *)(a2 + 56) = v32;
    *(void *)(a2 + 64) = v38;
    uint64_t v39 = a3[1];
    unint64_t v40 = (v39
         + ((v34 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v34 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v34 - 0x61C8864680B583EBLL);
    unint64_t v41 = ((v40 << 6) + (int)v35 + (v40 >> 2) - 0x61C8864680B583EBLL) ^ v40;
    uint64_t v42 = (v41 << 6) + SHIDWORD(v35) + (v41 >> 2) - 0x61C8864680B583EBLL;
    uint64_t v43 = *((unsigned int *)a3 + 9);
    uint64_t v44 = *(void *)(a3 + 28);
    uint64_t v45 = v44 & 0xFF00000000;
    uint64_t v46 = 2 * v44;
    if ((v44 & 0xFF00000000) == 0) {
      uint64_t v46 = 0;
    }
    unint64_t v47 = (v46 | (v43 << 33)) ^ v41;
    unint64_t v48 = v47 ^ v42;
    unint64_t v49 = *(void *)(a2 + 16);
    uint64_t v94 = v35;
    if (v49)
    {
      uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
      v50.i16[0] = vaddlv_u8(v50);
      if (v50.u32[0] > 1uLL)
      {
        unint64_t v51 = v47 ^ v42;
        if (v48 >= v49) {
          unint64_t v51 = v48 % v49;
        }
      }
      else
      {
        unint64_t v51 = v48 & (v49 - 1);
      }
      double v52 = *(uint64_t ***)(*v8 + 8 * v51);
      unint64_t v93 = v51;
      if (v52)
      {
        long long v53 = *v52;
        if (v53)
        {
          int v54 = *v36;
          if (v50.u32[0] <= 1uLL)
          {
            unint64_t v55 = v49 - 1;
            if (!v45)
            {
              while (1)
              {
                uint64_t v57 = v53[1];
                if (v57 == v48)
                {
                  if (*((unsigned __int8 *)v53 + 40) == v54
                    && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
                    && *(uint64_t *)((char *)v53 + 20) == v35
                    && *((_DWORD *)v53 + 13) == v43
                    && !*((unsigned char *)v53 + 48))
                  {
                    goto LABEL_129;
                  }
                }
                else if ((v57 & v55) != v51)
                {
                  goto LABEL_69;
                }
                long long v53 = (uint64_t *)*v53;
                if (!v53) {
                  goto LABEL_69;
                }
              }
            }
            while (1)
            {
              uint64_t v56 = v53[1];
              if (v56 == v48)
              {
                if (*((unsigned __int8 *)v53 + 40) == v54
                  && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
                  && *(uint64_t *)((char *)v53 + 20) == v35
                  && *((_DWORD *)v53 + 13) == v43
                  && *((unsigned char *)v53 + 48)
                  && *((_DWORD *)v53 + 11) == v44)
                {
                  goto LABEL_129;
                }
              }
              else if ((v56 & v55) != v51)
              {
                goto LABEL_69;
              }
              long long v53 = (uint64_t *)*v53;
              if (!v53) {
                goto LABEL_69;
              }
            }
          }
          if (!v45)
          {
            while (1)
            {
              unint64_t v59 = v53[1];
              if (v59 == v48)
              {
                if (*((unsigned __int8 *)v53 + 40) == v54
                  && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
                  && *(uint64_t *)((char *)v53 + 20) == v35
                  && *((_DWORD *)v53 + 13) == v43
                  && !*((unsigned char *)v53 + 48))
                {
                  goto LABEL_129;
                }
              }
              else
              {
                if (v59 >= v49) {
                  v59 %= v49;
                }
                if (v59 != v51) {
                  goto LABEL_69;
                }
              }
              long long v53 = (uint64_t *)*v53;
              if (!v53) {
                goto LABEL_69;
              }
            }
          }
          do
          {
            unint64_t v58 = v53[1];
            if (v58 == v48)
            {
              if (*((unsigned __int8 *)v53 + 40) == v54
                && __PAIR64__(*((unsigned __int8 *)v53 + 17), *((unsigned __int8 *)v53 + 16)) == __PAIR64__(v39, v34)
                && *(uint64_t *)((char *)v53 + 20) == v35
                && *((_DWORD *)v53 + 13) == v43
                && *((unsigned char *)v53 + 48)
                && *((_DWORD *)v53 + 11) == v44)
              {
                goto LABEL_129;
              }
            }
            else
            {
              if (v58 >= v49) {
                v58 %= v49;
              }
              if (v58 != v51) {
                break;
              }
            }
            long long v53 = (uint64_t *)*v53;
          }
          while (v53);
        }
      }
    }
LABEL_69:
    unint64_t v60 = (char *)operator new(0x40uLL);
    *(void *)unint64_t v60 = 0;
    *((void *)v60 + 1) = v48;
    v60[16] = *a3;
    v60[17] = v39;
    *(void *)(v60 + 20) = v94;
    *(_OWORD *)(v60 + 40) = *(_OWORD *)v36;
    *((void *)v60 + 7) = v32;
    float v61 = (float)(unint64_t)(*(void *)(a2 + 32) + 1);
    float v62 = *(float *)(a2 + 40);
    if (v49 && (float)(v62 * (float)v49) >= v61)
    {
      unint64_t v48 = v93;
      goto LABEL_119;
    }
    BOOL v63 = 1;
    if (v49 >= 3) {
      BOOL v63 = (v49 & (v49 - 1)) != 0;
    }
    unint64_t v64 = v63 | (2 * v49);
    unint64_t v65 = vcvtps_u32_f32(v61 / v62);
    if (v64 <= v65) {
      size_t prime = v65;
    }
    else {
      size_t prime = v64;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v49 = *(void *)(a2 + 16);
    }
    if (prime <= v49)
    {
      if (prime >= v49) {
        goto LABEL_107;
      }
      unint64_t v78 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 32) / *(float *)(a2 + 40));
      if (v49 < 3 || (uint8x8_t v79 = (uint8x8_t)vcnt_s8((int8x8_t)v49), v79.i16[0] = vaddlv_u8(v79), v79.u32[0] > 1uLL))
      {
        unint64_t v78 = std::__next_prime(v78);
      }
      else
      {
        uint64_t v80 = 1 << -(char)__clz(v78 - 1);
        if (v78 >= 2) {
          unint64_t v78 = v80;
        }
      }
      if (prime <= v78) {
        size_t prime = v78;
      }
      if (prime >= v49)
      {
        unint64_t v49 = *(void *)(a2 + 16);
LABEL_107:
        if ((v49 & (v49 - 1)) != 0)
        {
          if (v48 >= v49) {
            v48 %= v49;
          }
        }
        else
        {
          v48 &= v49 - 1;
        }
LABEL_119:
        int64x2_t v84 = (void *)*v8;
        int64x2_t v85 = *(void **)(*v8 + 8 * v48);
        if (v85)
        {
          *(void *)unint64_t v60 = *v85;
        }
        else
        {
          *(void *)unint64_t v60 = *(void *)(a2 + 24);
          *(void *)(a2 + 24) = v60;
          v84[v48] = a2 + 24;
          if (!*(void *)v60) {
            goto LABEL_128;
          }
          unint64_t v86 = *(void *)(*(void *)v60 + 8);
          if ((v49 & (v49 - 1)) != 0)
          {
            if (v86 >= v49) {
              v86 %= v49;
            }
          }
          else
          {
            v86 &= v49 - 1;
          }
          int64x2_t v85 = (void *)(*v8 + 8 * v86);
        }
        *int64x2_t v85 = v60;
LABEL_128:
        ++*(void *)(a2 + 32);
        unint64_t v38 = *(void *)(a2 + 64);
LABEL_129:
        while (v38 > *(void *)a2)
        {
          int64x2_t v87 = *(char **)(a2 + 48);
          *(_WORD *)__p = *((_WORD *)v87 + 8);
          *(void *)&__p[4] = *(void *)(v87 + 20);
          long long v108 = *(_OWORD *)(v87 + 40);
          long long v109 = *(_OWORD *)(v87 + 56);
          uint64_t v110 = *((void *)v87 + 9);
          long long v111 = *((_OWORD *)v87 + 5);
          uint64_t v112 = *((void *)v87 + 12);
          uint64_t v113 = *((void *)v87 + 13);
          long long v88 = *((_OWORD *)v87 + 9);
          long long v89 = *((_OWORD *)v87 + 7);
          long long v115 = *((_OWORD *)v87 + 8);
          long long v116 = v88;
          long long v114 = v89;
          uint64_t v90 = *(void *)v87;
          *(void *)(v90 + 8) = *((void *)v87 + 1);
          **((void **)v87 + 1) = v90;
          *(void *)(a2 + 64) = v38 - 1;
          operator delete(v87);
          int64x2_t v91 = std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>(v8, __p);
          if (v91)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v117, v8, v91);
            if (v117) {
              operator delete(v117);
            }
          }
          unint64_t v38 = *(void *)(a2 + 64);
        }
        *(void *)a1 = v99;
        *(void *)(a1 + 8) = v98;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v22;
        *(_OWORD *)(a1 + 32) = v24;
        *(void *)(a1 + 48) = v23;
        *(void *)(a1 + 56) = v25;
        *(void *)(a1 + 64) = v97;
        *(void *)(a1 + 72) = v96;
        *(void *)(a1 + 80) = v95;
        *(void *)(a1 + 88) = v26;
        *(void *)(a1 + 96) = v27;
        goto LABEL_136;
      }
      if (!prime)
      {
        int64x2_t v92 = (void *)*v8;
        *uint64_t v8 = 0;
        if (v92) {
          operator delete(v92);
        }
        unint64_t v49 = 0;
        *(void *)(a2 + 16) = 0;
        goto LABEL_107;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    long long v67 = operator new(8 * prime);
    uint64_t v68 = (void *)*v8;
    *uint64_t v8 = v67;
    if (v68) {
      operator delete(v68);
    }
    uint64_t v69 = 0;
    *(void *)(a2 + 16) = prime;
    do
      *(void *)(*v8 + 8 * v69++) = 0;
    while (prime != v69);
    uint64_t v71 = a2 + 24;
    long long v70 = *(void **)(a2 + 24);
    if (!v70)
    {
LABEL_106:
      unint64_t v49 = prime;
      goto LABEL_107;
    }
    size_t v72 = v70[1];
    size_t v73 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v74 = v72 & v73;
      *(void *)(*v8 + 8 * v74) = v71;
      for (uint64_t i = (void *)*v70; *v70; uint64_t i = (void *)*v70)
      {
        size_t v76 = i[1] & v73;
        if (v76 == v74)
        {
          long long v70 = i;
        }
        else if (*(void *)(*v8 + 8 * v76))
        {
          void *v70 = *i;
          uint64_t v77 = 8 * v76;
          *uint64_t i = **(void **)(*v8 + v77);
          **(void **)(*v8 + v77) = i;
        }
        else
        {
          *(void *)(*v8 + 8 * v76) = v70;
          long long v70 = i;
          size_t v74 = v76;
        }
      }
      goto LABEL_106;
    }
    if (v72 >= prime) {
      v72 %= prime;
    }
    *(void *)(*v8 + 8 * v72) = v71;
    uint64_t v81 = (void *)*v70;
    if (!*v70) {
      goto LABEL_106;
    }
    while (1)
    {
      size_t v83 = v81[1];
      if (v83 >= prime) {
        v83 %= prime;
      }
      if (v83 != v72)
      {
        if (!*(void *)(*v8 + 8 * v83))
        {
          *(void *)(*v8 + 8 * v83) = v70;
          goto LABEL_111;
        }
        void *v70 = *v81;
        uint64_t v82 = 8 * v83;
        *uint64_t v81 = **(void **)(*v8 + v82);
        **(void **)(*v8 + v82) = v81;
        uint64_t v81 = v70;
      }
      size_t v83 = v72;
LABEL_111:
      long long v70 = v81;
      uint64_t v81 = (void *)*v81;
      size_t v72 = v83;
      if (!v81) {
        goto LABEL_106;
      }
    }
  }
  uint64_t v15 = v10[19];
  long long v16 = *(_OWORD *)(v10 + 9);
  *(_OWORD *)a1 = *(_OWORD *)(v10 + 7);
  *(_OWORD *)(a1 + 16) = v16;
  long long v17 = *(_OWORD *)(v10 + 13);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 + 11);
  *(_OWORD *)(a1 + 48) = v17;
  long long v18 = *(_OWORD *)(v10 + 17);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v10 + 15);
  *(_OWORD *)(a1 + 80) = v18;
  *(void *)(a1 + 96) = v15;
LABEL_136:
  *(unsigned char *)(a1 + 104) = 1;
}

void sub_1A21DB0D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,true>,std::__unordered_map_equal<md::FlyoverOctile,std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<md::FlyoverOctile>,md::FlyoverOctileHash,true>,std::allocator<std::__hash_value_type<md::FlyoverOctile,std::__list_iterator<std::pair<md::FlyoverOctile,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<md::FlyoverOctile>(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a2 + 28);
  uint64_t v3 = v2 & 0xFF00000000;
  if ((v2 & 0xFF00000000) != 0) {
    uint64_t v4 = 2 * *(void *)(a2 + 28);
  }
  else {
    uint64_t v4 = 0;
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  uint64_t v9 = *((int *)a2 + 1);
  uint64_t v10 = *((int *)a2 + 2);
  unint64_t v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  uint64_t v12 = *((unsigned int *)a2 + 9);
  unint64_t v13 = (v4 | (v12 << 33)) ^ v11 ^ (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL);
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v5);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = v13;
    if (v13 >= *(void *)&v5) {
      unint64_t v15 = v13 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v15 = v13 & (*(void *)&v5 - 1);
  }
  long long v16 = *(uint64_t ***)(*a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  long long v17 = *v16;
  if (!v17) {
    return 0;
  }
  int v18 = a2[24];
  if (v14.u32[0] <= 1uLL)
  {
    uint64_t v19 = *(void *)&v5 - 1;
    if (!v3)
    {
      while (1)
      {
        uint64_t v22 = v17[1];
        if (v22 == v13)
        {
          if (*((unsigned __int8 *)v17 + 40) == v18
            && __PAIR64__(*((unsigned __int8 *)v17 + 17), *((unsigned __int8 *)v17 + 16)) == __PAIR64__(v7, v6)
            && *(uint64_t *)((char *)v17 + 20) == __PAIR64__(v10, v9)
            && *((_DWORD *)v17 + 13) == v12
            && !*((unsigned char *)v17 + 48))
          {
            return v17;
          }
        }
        else if ((v22 & v19) != v15)
        {
          return 0;
        }
        double result = 0;
        long long v17 = (uint64_t *)*v17;
        if (!v17) {
          return result;
        }
      }
    }
    while (1)
    {
      uint64_t v20 = v17[1];
      if (v20 == v13)
      {
        if (*((unsigned __int8 *)v17 + 40) == v18
          && __PAIR64__(*((unsigned __int8 *)v17 + 17), *((unsigned __int8 *)v17 + 16)) == __PAIR64__(v7, v6)
          && *(uint64_t *)((char *)v17 + 20) == __PAIR64__(v10, v9)
          && *((_DWORD *)v17 + 13) == v12
          && *((unsigned char *)v17 + 48)
          && *((_DWORD *)v17 + 11) == v2)
        {
          return v17;
        }
      }
      else if ((v20 & v19) != v15)
      {
        return 0;
      }
      long long v17 = (uint64_t *)*v17;
      if (!v17) {
        return 0;
      }
    }
  }
  if (!v3)
  {
    while (1)
    {
      unint64_t v24 = v17[1];
      if (v24 == v13)
      {
        if (*((unsigned __int8 *)v17 + 40) == v18
          && __PAIR64__(*((unsigned __int8 *)v17 + 17), *((unsigned __int8 *)v17 + 16)) == __PAIR64__(v7, v6)
          && *(uint64_t *)((char *)v17 + 20) == __PAIR64__(v10, v9)
          && *((_DWORD *)v17 + 13) == v12
          && !*((unsigned char *)v17 + 48))
        {
          return v17;
        }
      }
      else
      {
        if (v24 >= *(void *)&v5) {
          v24 %= *(void *)&v5;
        }
        if (v24 != v15) {
          return 0;
        }
      }
      double result = 0;
      long long v17 = (uint64_t *)*v17;
      if (!v17) {
        return result;
      }
    }
  }
  while (1)
  {
    unint64_t v23 = v17[1];
    if (v23 == v13) {
      break;
    }
    if (v23 >= *(void *)&v5) {
      v23 %= *(void *)&v5;
    }
    if (v23 != v15) {
      return 0;
    }
LABEL_37:
    long long v17 = (uint64_t *)*v17;
    if (!v17) {
      return 0;
    }
  }
  if (*((unsigned __int8 *)v17 + 40) != v18
    || __PAIR64__(*((unsigned __int8 *)v17 + 17), *((unsigned __int8 *)v17 + 16)) != __PAIR64__(v7, v6)
    || *(uint64_t *)((char *)v17 + 20) != __PAIR64__(v10, v9)
    || *((_DWORD *)v17 + 13) != v12
    || !*((unsigned char *)v17 + 48)
    || *((_DWORD *)v17 + 11) != v2)
  {
    goto LABEL_37;
  }
  return v17;
}

void std::__hash_table<md::FlyoverOctile,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,std::allocator<md::FlyoverOctile>>::__emplace_unique_key_args<md::FlyoverOctile,md::FlyoverOctile const&>(float *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  uint64_t v9 = *((int *)a2 + 1);
  uint64_t v10 = *((int *)a2 + 2);
  unint64_t v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  uint64_t v12 = v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL;
  uint64_t v13 = *((unsigned int *)a2 + 9);
  uint64_t v14 = *(void *)(a2 + 28);
  uint64_t v15 = v14 & 0xFF00000000;
  uint64_t v16 = 2 * v14;
  if ((v14 & 0xFF00000000) == 0) {
    uint64_t v16 = 0;
  }
  unint64_t v17 = (v16 | (v13 << 33)) ^ v11;
  unint64_t v18 = v17 ^ v12;
  unint64_t v19 = *((void *)a1 + 1);
  if (v19)
  {
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      unint64_t v3 = v17 ^ v12;
      if (v18 >= v19) {
        unint64_t v3 = v18 % v19;
      }
    }
    else
    {
      unint64_t v3 = v18 & (v19 - 1);
    }
    uint64_t v21 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v21)
    {
      uint64_t v22 = *v21;
      if (v22)
      {
        int v23 = a2[24];
        if (v20.u32[0] <= 1uLL)
        {
          unint64_t v24 = v19 - 1;
          if (!v15)
          {
            while (1)
            {
              uint64_t v26 = v22[1];
              if (v26 == v18)
              {
                if (*((unsigned __int8 *)v22 + 40) == v23
                  && __PAIR64__(*((unsigned __int8 *)v22 + 17), *((unsigned __int8 *)v22 + 16)) == __PAIR64__(v7, v6)
                  && *(uint64_t *)((char *)v22 + 20) == __PAIR64__(v10, v9)
                  && *((_DWORD *)v22 + 13) == v13
                  && !*((unsigned char *)v22 + 48))
                {
                  return;
                }
              }
              else if ((v26 & v24) != v3)
              {
                goto LABEL_58;
              }
              uint64_t v22 = (uint64_t *)*v22;
              if (!v22) {
                goto LABEL_58;
              }
            }
          }
          while (1)
          {
            uint64_t v25 = v22[1];
            if (v25 == v18)
            {
              if (*((unsigned __int8 *)v22 + 40) == v23
                && __PAIR64__(*((unsigned __int8 *)v22 + 17), *((unsigned __int8 *)v22 + 16)) == __PAIR64__(v7, v6)
                && *(uint64_t *)((char *)v22 + 20) == __PAIR64__(v10, v9)
                && *((_DWORD *)v22 + 13) == v13
                && *((unsigned char *)v22 + 48)
                && *((_DWORD *)v22 + 11) == v14)
              {
                return;
              }
            }
            else if ((v25 & v24) != v3)
            {
              goto LABEL_58;
            }
            uint64_t v22 = (uint64_t *)*v22;
            if (!v22) {
              goto LABEL_58;
            }
          }
        }
        if (!v15)
        {
          while (1)
          {
            unint64_t v28 = v22[1];
            if (v28 == v18)
            {
              if (*((unsigned __int8 *)v22 + 40) == v23
                && __PAIR64__(*((unsigned __int8 *)v22 + 17), *((unsigned __int8 *)v22 + 16)) == __PAIR64__(v7, v6)
                && *(uint64_t *)((char *)v22 + 20) == __PAIR64__(v10, v9)
                && *((_DWORD *)v22 + 13) == v13
                && !*((unsigned char *)v22 + 48))
              {
                return;
              }
            }
            else
            {
              if (v28 >= v19) {
                v28 %= v19;
              }
              if (v28 != v3) {
                goto LABEL_58;
              }
            }
            uint64_t v22 = (uint64_t *)*v22;
            if (!v22) {
              goto LABEL_58;
            }
          }
        }
        do
        {
          unint64_t v27 = v22[1];
          if (v27 == v18)
          {
            if (*((unsigned __int8 *)v22 + 40) == v23
              && __PAIR64__(*((unsigned __int8 *)v22 + 17), *((unsigned __int8 *)v22 + 16)) == __PAIR64__(v7, v6)
              && *(uint64_t *)((char *)v22 + 20) == __PAIR64__(v10, v9)
              && *((_DWORD *)v22 + 13) == v13
              && *((unsigned char *)v22 + 48)
              && *((_DWORD *)v22 + 11) == v14)
            {
              return;
            }
          }
          else
          {
            if (v27 >= v19) {
              v27 %= v19;
            }
            if (v27 != v3) {
              break;
            }
          }
          uint64_t v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
    }
  }
LABEL_58:
  int64x2_t v29 = (char *)operator new(0x38uLL);
  *(void *)int64x2_t v29 = 0;
  *((void *)v29 + 1) = v18;
  *((_WORD *)v29 + 8) = *(_WORD *)a3;
  *(void *)(v29 + 20) = *(void *)(a3 + 4);
  *(_OWORD *)(v29 + 40) = *(_OWORD *)(a3 + 24);
  float v30 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v31 = a1[8];
  if (!v19 || (float)(v31 * (float)v19) < v30)
  {
    BOOL v32 = 1;
    if (v19 >= 3) {
      BOOL v32 = (v19 & (v19 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v19);
    unint64_t v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v19 = *((void *)a1 + 1);
    }
    if (prime <= v19)
    {
      if (prime >= v19) {
        goto LABEL_95;
      }
      unint64_t v47 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v19 < 3 || (uint8x8_t v48 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
      {
        unint64_t v47 = std::__next_prime(v47);
      }
      else
      {
        uint64_t v49 = 1 << -(char)__clz(v47 - 1);
        if (v47 >= 2) {
          unint64_t v47 = v49;
        }
      }
      if (prime <= v47) {
        size_t prime = v47;
      }
      if (prime >= v19)
      {
        unint64_t v19 = *((void *)a1 + 1);
LABEL_95:
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v18 >= v19) {
            unint64_t v3 = v18 % v19;
          }
          else {
            unint64_t v3 = v18;
          }
        }
        else
        {
          unint64_t v3 = (v19 - 1) & v18;
        }
        goto LABEL_108;
      }
      if (!prime)
      {
        uint64_t v56 = *(void **)a1;
        *(void *)a1 = 0;
        if (v56) {
          operator delete(v56);
        }
        unint64_t v19 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_95;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int64x2_t v36 = operator new(8 * prime);
    int64x2_t v37 = *(void **)a1;
    *(void *)a1 = v36;
    if (v37) {
      operator delete(v37);
    }
    uint64_t v38 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v38++) = 0;
    while (prime != v38);
    unint64_t v40 = (uint64_t *)(a1 + 4);
    uint64_t v39 = (void *)*((void *)a1 + 2);
    if (!v39)
    {
LABEL_94:
      unint64_t v19 = prime;
      goto LABEL_95;
    }
    size_t v41 = v39[1];
    size_t v42 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v43 = v41 & v42;
      *(void *)(*(void *)a1 + 8 * v43) = v40;
      for (uint64_t i = (void *)*v39; *v39; uint64_t i = (void *)*v39)
      {
        size_t v45 = i[1] & v42;
        if (v45 == v43)
        {
          uint64_t v39 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v45))
        {
          *uint64_t v39 = *i;
          uint64_t v46 = 8 * v45;
          *uint64_t i = **(void **)(*(void *)a1 + v46);
          **(void **)(*(void *)a1 + v46) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v45) = v39;
          uint64_t v39 = i;
          size_t v43 = v45;
        }
      }
      goto LABEL_94;
    }
    if (v41 >= prime) {
      v41 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v41) = v40;
    uint8x8_t v50 = (void *)*v39;
    if (!*v39) {
      goto LABEL_94;
    }
    while (1)
    {
      size_t v52 = v50[1];
      if (v52 >= prime) {
        v52 %= prime;
      }
      if (v52 != v41)
      {
        if (!*(void *)(*(void *)a1 + 8 * v52))
        {
          *(void *)(*(void *)a1 + 8 * v52) = v39;
          goto LABEL_99;
        }
        *uint64_t v39 = *v50;
        uint64_t v51 = 8 * v52;
        *uint8x8_t v50 = **(void **)(*(void *)a1 + v51);
        **(void **)(*(void *)a1 + v51) = v50;
        uint8x8_t v50 = v39;
      }
      size_t v52 = v41;
LABEL_99:
      uint64_t v39 = v50;
      uint8x8_t v50 = (void *)*v50;
      size_t v41 = v52;
      if (!v50) {
        goto LABEL_94;
      }
    }
  }
LABEL_108:
  long long v53 = *(void **)a1;
  int v54 = *(void **)(*(void *)a1 + 8 * v3);
  if (v54)
  {
    *(void *)int64x2_t v29 = *v54;
LABEL_116:
    void *v54 = v29;
    goto LABEL_117;
  }
  *(void *)int64x2_t v29 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v29;
  v53[v3] = a1 + 4;
  if (*(void *)v29)
  {
    unint64_t v55 = *(void *)(*(void *)v29 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v55 >= v19) {
        v55 %= v19;
      }
    }
    else
    {
      v55 &= v19 - 1;
    }
    int v54 = (void *)(*(void *)a1 + 8 * v55);
    goto LABEL_116;
  }
LABEL_117:
  ++*((void *)a1 + 3);
}

void sub_1A21DBA54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::FlyoverSelectionContext::selectBestFitOctiles(uint64_t a1, uint64_t a2, float *a3, uint64_t a4)
{
  if (!*(unsigned char *)(a2 + 24)) {
    return 0;
  }
  if (*(unsigned __int8 *)(a2 + 1) >= 0x15u || !a4 || *(unsigned __int8 *)(a2 + 24) > 1u) {
    goto LABEL_29;
  }
  if (*(unsigned char *)(a1 + 82) == 1) {
    unint64_t v8 = (double *)(a1 + 168);
  }
  else {
    unint64_t v8 = *(double **)(a1 + 144);
  }
  uint64_t v9 = *(unsigned int *)(a2 + 36);
  RegionAreas = md::FlyoverRegionManager::getRegionAreas(***(md::FlyoverRegionManager ****)(a1 + 136), (const QuadTile *)a2);
  uint64_t v11 = *RegionAreas;
  uint64_t v12 = RegionAreas[1];
  if (*RegionAreas != v12)
  {
    unint64_t v13 = *(unsigned int *)(a2 + 8) | (unint64_t)(v9 << 32);
    v65[0] = *(unsigned __int8 *)(a2 + 1) | ((unint64_t)(~(-1 << *(unsigned char *)(a2 + 1))
                                                                            - *(_DWORD *)(a2 + 4)) << 32);
    v65[1] = v13;
    double v56 = 0.0;
    double v57 = 0.0;
    LODWORD(v58) = 1;
    WORD2(v58) = 0;
    uint64_t v14 = v11 + 24;
    while (geo::c3mm::C3mmArea::getEntry(*(_WORD **)(v14 - 24), v65, (uint64_t)&v56) == -1)
    {
      BOOL v15 = *((float *)&v56 + 1) > *(float *)&v56 || v14 == v12;
      v14 += 24;
      if (v15)
      {
        v62[0] = 1;
        double v63 = *(float *)&v56;
        double v64 = *((float *)&v56 + 1);
        goto LABEL_18;
      }
    }
  }
  v62[0] = 0;
LABEL_18:
  md::FlyoverSelectionContext::getTileBound((uint64_t)&v56, *(void *)(a1 + 152), (unsigned __int8 *)a2, (uint64_t)v62);
  if (!v61) {
    goto LABEL_44;
  }
  double v16 = v60 - v59 >= 0.0 ? (v60 - v59) * 0.5 : 0.0;
  double v17 = v8[66];
  double v18 = v8[65];
  double v54 = v8[68];
  double v55 = v8[67];
  unint64_t v19 = +[VKDebugSettings sharedSettings];
  [v19 flyoverOctileLODMaxRefineDistance];
  double v21 = v20 * 1000.0;

  double v22 = v56 - v8[62];
  double v23 = v57 - v8[63];
  double v24 = v58 - v8[64];
  double v25 = sqrt(v22 * v22 + v23 * v23 + v24 * v24);
  if (v25 <= v16 || v25 > v21) {
    goto LABEL_44;
  }
  double v51 = v18;
  double v52 = v17;
  double v53 = v16;
  double v50 = v8[46];
  double v48 = v8[121];
  double v49 = v8[47];
  double v45 = v8[148];
  double v46 = v8[147];
  double v47 = v8[149];
  double v27 = v8[153];
  double v28 = v8[154];
  double v29 = v8[155];
  double v42 = v8[166];
  double v43 = v8[165];
  double v44 = v8[167];
  float v30 = +[VKDebugSettings sharedSettings];
  [v30 flyoverOctileLODConstant];
  double v31 = sqrt(((v43 - v27) * (v43 - v27) + (v42 - v28) * (v42 - v28) + (v44 - v29) * (v44 - v29))* ((v46 - v27) * (v46 - v27) + (v45 - v28) * (v45 - v28) + (v47 - v29) * (v47 - v29)));
  double v32 = fmax(v22 * -((v51 + v51) * v55 - v54 * (v52 * -2.0))+ v23 * (v52 * -2.0 * v55 + (v51 + v51) * v54)+ v24 * -(v52 * -2.0 * v52 + 1.0 - (v51 + v51) * v51), 0.01);
  double v33 = v48 * v53 / v32 * (v48 * v53 / v32) * (3.14159265 * v50 * v49);
  double v35 = fmax(1.0 - v25 / v21, 0.0) * v34;

  if ((double)(a4 * a4) * 0.0785398163 * v31 / v33 >= v35 * v35)
  {
LABEL_44:
    if (*(unsigned char *)(a2 + 24))
    {
LABEL_29:
      std::__hash_table<md::FlyoverOctile,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,std::allocator<md::FlyoverOctile>>::__emplace_unique_key_args<md::FlyoverOctile,md::FlyoverOctile const&>(a3, (unsigned __int8 *)a2, a2);
      return 1;
    }
    return 0;
  }
  double v56 = 0.0;
  double v57 = 0.0;
  double v58 = 0.0;
  md::FlyoverCommon::selectChildren(*(const QuadTile **)(a1 + 136), a2, (unsigned __int8 **)&v56, (void **)(a1 + 88));
  uint64_t v38 = *(unsigned __int8 **)&v56;
  double v39 = v57;
  if (*(void *)&v56 != *(void *)&v57)
  {
    int v40 = 0;
    size_t v41 = *(unsigned __int8 **)&v56;
    do
    {
      v40 |= md::FlyoverSelectionContext::selectBestFitOctiles(a1, v41, a3, a4);
      v41 += 40;
    }
    while (v41 != *(unsigned __int8 **)&v39);
    if (v40) {
      goto LABEL_38;
    }
  }
  if (*(unsigned char *)(a2 + 24))
  {
    std::__hash_table<md::FlyoverOctile,md::FlyoverOctileHash,std::equal_to<md::FlyoverOctile>,std::allocator<md::FlyoverOctile>>::__emplace_unique_key_args<md::FlyoverOctile,md::FlyoverOctile const&>(a3, (unsigned __int8 *)a2, a2);
LABEL_38:
    uint64_t v36 = 1;
    goto LABEL_40;
  }
  uint64_t v36 = 0;
LABEL_40:
  if (v38) {
    operator delete(v38);
  }
  return v36;
}

void sub_1A21DBE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  if (!v24) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<geo::QuadTile,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[7];
      if (v3)
      {
        do
        {
          uint64_t v4 = (void *)*v3;
          operator delete(v3);
          unint64_t v3 = v4;
        }
        while (v4);
      }
      int8x8_t v5 = (void *)v2[5];
      v2[5] = 0;
      if (v5) {
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<md::FlyoverTileDataResolverContext::resolver(void)::$_0,std::allocator<md::FlyoverTileDataResolverContext::resolver(void)::$_0>,std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>::operator()()
{
}

uint64_t std::__function::__func<md::FlyoverTileDataResolverContext::resolver(void)::$_0,std::allocator<md::FlyoverTileDataResolverContext::resolver(void)::$_0>,std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57DDD0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::FlyoverTileDataResolverContext::resolver(void)::$_0,std::allocator<md::FlyoverTileDataResolverContext::resolver(void)::$_0>,std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EF57DDD0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::FlyoverTileDataResolverContext::resolver(void)::$_0,std::allocator<md::FlyoverTileDataResolverContext::resolver(void)::$_0>,std::unique_ptr<md::TileDependencySelectionContext> ()(unsigned short,md::MapDataType,md::TileDependencyResolvingType,gdc::TileSelection const&)>::~__func()
{
}

void std::__function::__func<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::operator()()
{
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:@"VKShouldFlushTileCachesNotification" object:0];
}

void sub_1A21DC2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__function::__func<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EF51E380;
  return result;
}

void std::__function::__func<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::~__func()
{
}

double md::Logic<md::FlyoverTileDataLogic,md::FlyoverTileDataResolverContext,md::LogicDependencies<gdc::TypeList<md::LayerDataLogicContext,md::ElevationContext,md::CameraContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int64x2_t *)(a1 + 264);
  bzero((void *)a1, 0x578uLL);
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0xC00921FB54442D18);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  int64x2_t v4 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 168) = v4;
  int64x2_t v5 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 184) = v5;
  *(int64x2_t *)(a1 + 200) = v4;
  *(int64x2_t *)(a1 + 216) = v5;
  *(int64x2_t *)(a1 + 232) = v4;
  *(int64x2_t *)(a1 + 248) = v5;
  int64x2_t *v2 = v4;
  v2[1] = v5;
  v2[2] = v4;
  v2[3] = v5;
  v2[4] = v4;
  v2[5] = v5;
  *(unsigned char *)(a1 + 360) = 1;
  *(unsigned char *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 496) = xmmword_1A28FE5B0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(void *)(a1 + 576) = 0x3FF0000000000000;
  *(void *)(a1 + 968) = 0xBFF0000000000000;
  *(void *)(a1 + 976) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 988) = 2;
  return result;
}

void ggl::Debug::InstancedBasePipelineState::~InstancedBasePipelineState(ggl::Debug::InstancedBasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int64x2_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int64x2_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Debug::InstancedBasePipelineSetup::textureIsEnabled(ggl::Debug::InstancedBasePipelineSetup *this)
{
  return 0;
}

BOOL ggl::Debug::InstancedBasePipelineSetup::constantDataIsEnabled(ggl::Debug::InstancedBasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::Debug::InstancedBasePipelineSetup::~InstancedBasePipelineSetup(ggl::Debug::InstancedBasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderState>(gdc::Entity,md::ls::RenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  int64x2_t v4 = (void *)gdc::Registry::storage<md::ls::RenderState>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    unint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      BOOL v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        float v20 = operator new(8 * v19);
      }
      else
      {
        float v20 = 0;
      }
      double v21 = &v20[8 * v16];
      double v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        BOOL v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        double v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *double v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--double v21 = v29;
          }
          while (v13 != v15);
          BOOL v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)unint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    unint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *unint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          float v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  float v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      float v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      float v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderState>(gdc::Entity,md::ls::RenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1EF521B30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderState>(gdc::Entity,md::ls::RenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_1EF521B30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderState>(gdc::Entity,md::ls::RenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

unint64_t geo::packed_array<md::RenderStateStorage,geo::handle<md::RenderStateItem>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    uint64_t v7 = ((a1[7] - a1[6]) >> 3) | 0x100000000;
    uint64_t v9 = (uint64_t *)a1[4];
    unint64_t v8 = a1[5];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = (uint64_t *)a1[3];
      uint64_t v12 = v9 - v11;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        goto LABEL_72;
      }
      uint64_t v14 = v8 - (void)v11;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          goto LABEL_73;
        }
        uint64_t v16 = operator new(8 * v15);
      }
      else
      {
        uint64_t v16 = 0;
      }
      unint64_t v17 = (uint64_t *)&v16[8 * v12];
      uint64_t v18 = &v16[8 * v15];
      *unint64_t v17 = v7;
      uint64_t v10 = v17 + 1;
      if (v9 == v11)
      {
        uint64_t v11 = v9;
      }
      else
      {
        unint64_t v19 = (char *)v9 - (char *)v11 - 8;
        if (v19 < 0x58) {
          goto LABEL_76;
        }
        if ((unint64_t)((char *)v11 - v16) < 0x20) {
          goto LABEL_76;
        }
        uint64_t v20 = (v19 >> 3) + 1;
        double v21 = &v16[8 * v12 - 16];
        double v22 = v9 - 2;
        uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          _OWORD *v21 = v24;
          v21 -= 2;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        v9 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_76:
          do
          {
            uint64_t v25 = *--v9;
            *--unint64_t v17 = v25;
          }
          while (v9 != v11);
          uint64_t v11 = (uint64_t *)a1[3];
        }
      }
      a1[3] = v17;
      a1[4] = v10;
      a1[5] = v18;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *uint64_t v9 = v7;
      uint64_t v10 = v9 + 1;
    }
    a1[4] = v10;
    unint64_t v6 = *(v10 - 1);
  }
  else
  {
    uint64_t v5 = *(void *)(v4 - 8);
    a1[1] = v4 - 8;
    *(_DWORD *)(a1[3] + 8 * v5) = (a1[7] - a1[6]) >> 3;
    *(_DWORD *)(a1[3] + 8 * v5 + 4) = (((unint64_t)*(unsigned int *)(a1[3] + 8 * v5 + 4) << 32) + 0x100000000) >> 32;
    unint64_t v6 = v5 | ((unint64_t)*(unsigned int *)(a1[3] + 8 * v5 + 4) << 32);
  }
  uint64_t v27 = (char *)a1[7];
  unint64_t v26 = a1[8];
  if ((unint64_t)v27 >= v26)
  {
    uint64_t v29 = (char *)a1[6];
    uint64_t v30 = (v27 - v29) >> 3;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61) {
      goto LABEL_72;
    }
    uint64_t v32 = v26 - (void)v29;
    if (v32 >> 2 > v31) {
      unint64_t v31 = v32 >> 2;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    if (v33)
    {
      if (v33 >> 61) {
        goto LABEL_73;
      }
      float v34 = operator new(8 * v33);
    }
    else
    {
      float v34 = 0;
    }
    uint64_t v35 = &v34[8 * v30];
    *uint64_t v35 = *a2;
    long long v28 = v35 + 1;
    if (v27 == v29)
    {
      uint64_t v29 = v27;
    }
    else
    {
      unint64_t v36 = v27 - v29 - 8;
      if (v36 < 0x58) {
        goto LABEL_77;
      }
      if ((unint64_t)(v29 - v34) < 0x20) {
        goto LABEL_77;
      }
      uint64_t v37 = (v36 >> 3) + 1;
      uint64_t v38 = &v34[8 * v30 - 16];
      double v39 = v27 - 16;
      uint64_t v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *uint64_t v38 = v41;
        v38 -= 2;
        v39 -= 32;
        v40 -= 4;
      }
      while (v40);
      v35 -= v37 & 0x3FFFFFFFFFFFFFFCLL;
      v27 -= 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_77:
        do
        {
          uint64_t v42 = *((void *)v27 - 1);
          v27 -= 8;
          *--uint64_t v35 = v42;
        }
        while (v27 != v29);
        uint64_t v29 = (char *)a1[6];
      }
    }
    a1[6] = v35;
    a1[7] = v28;
    a1[8] = &v34[8 * v33];
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *(void *)uint64_t v27 = *a2;
    long long v28 = v27 + 8;
  }
  a1[7] = v28;
  double v44 = (char *)a1[10];
  unint64_t v43 = a1[11];
  if ((unint64_t)v44 < v43)
  {
    *(void *)double v44 = v6;
    double v45 = v44 + 8;
    goto LABEL_71;
  }
  double v46 = (char *)a1[9];
  uint64_t v47 = (v44 - v46) >> 3;
  unint64_t v48 = v47 + 1;
  if ((unint64_t)(v47 + 1) >> 61) {
LABEL_72:
  }
    abort();
  uint64_t v49 = v43 - (void)v46;
  if (v49 >> 2 > v48) {
    unint64_t v48 = v49 >> 2;
  }
  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v50 = v48;
  }
  if (v50)
  {
    if (!(v50 >> 61))
    {
      double v51 = operator new(8 * v50);
      goto LABEL_62;
    }
LABEL_73:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  double v51 = 0;
LABEL_62:
  double v52 = &v51[8 * v47];
  double v53 = &v51[8 * v50];
  *double v52 = v6;
  double v45 = v52 + 1;
  if (v44 != v46)
  {
    unint64_t v54 = v44 - v46 - 8;
    if (v54 < 0x58) {
      goto LABEL_78;
    }
    if ((unint64_t)(v46 - v51) < 0x20) {
      goto LABEL_78;
    }
    uint64_t v55 = (v54 >> 3) + 1;
    double v56 = &v51[8 * v47 - 16];
    double v57 = v44 - 16;
    uint64_t v58 = v55 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v59 = *(_OWORD *)v57;
      *(v56 - 1) = *((_OWORD *)v57 - 1);
      _OWORD *v56 = v59;
      v56 -= 2;
      v57 -= 32;
      v58 -= 4;
    }
    while (v58);
    v52 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
    v44 -= 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
    if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_78:
      do
      {
        uint64_t v60 = *((void *)v44 - 1);
        v44 -= 8;
        *--double v52 = v60;
      }
      while (v44 != v46);
    }
  }
  a1[9] = v52;
  a1[10] = v45;
  a1[11] = v53;
  if (v46) {
    operator delete(v46);
  }
LABEL_71:
  a1[10] = v45;
  return v6;
}

void std::__hash_table<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::hash<geo::handle<md::RenderStateItem>>,std::equal_to<geo::handle<md::RenderStateItem>>,true>,std::__unordered_map_equal<geo::handle<md::RenderStateItem>,std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>,std::equal_to<geo::handle<md::RenderStateItem>>,std::hash<geo::handle<md::RenderStateItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::RenderStateItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::RenderStateItem>,geo::handle<md::RenderStateItem> const&,md::Counter>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2) {
                return;
              }
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2) {
              return;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  unint64_t v15 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v15 = 0;
  *((void *)v15 + 1) = v7;
  *((void *)v15 + 2) = a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a4;
  *((void *)v15 + 5) = *(void *)(a4 + 16);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_35;
    }
    if (prime < v9)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v9) {
LABEL_35:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v7) {
        v7 %= v9;
      }
    }
    else
    {
      v7 &= v9 - 1;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    *(void *)unint64_t v15 = *v26;
LABEL_58:
    *unint64_t v26 = v15;
    goto LABEL_59;
  }
  *(void *)unint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v27 = *(void *)(*(void *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_1A21DD0B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StencilRefValueToUse>(gdc::Entity,md::ls::StencilRefValueToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::StencilRefValueToUse>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  unint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if (v7)
  {
    unint64_t v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *unint64_t v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_39:
      v4[11] = v14;
      uint64_t v9 = v4[31];
      goto LABEL_40;
    }
    unint64_t v15 = (unsigned char *)v4[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_45;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      unint64_t v20 = operator new(v19);
    }
    else {
      unint64_t v20 = 0;
    }
    double v21 = (char *)v20 + v16;
    unint64_t v22 = (char *)v20 + v19;
    *((unsigned char *)v20 + v16) = v5;
    uint64_t v14 = (uint64_t)v20 + v16 + 1;
    if (v13 == v15)
    {
      unint64_t v20 = (char *)v20 + v16;
      goto LABEL_37;
    }
    if (v16 >= 8 && (unint64_t)(v15 - (unsigned char *)v20) >= 0x20)
    {
      if (v16 >= 0x20)
      {
        unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v24 = (long long *)(v13 - 16);
        uint64_t v25 = (char *)v20 + v13 - 16 - v15;
        unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v27 = *v24;
          *(v25 - 1) = *(v24 - 1);
          *uint64_t v25 = v27;
          v25 -= 2;
          v24 -= 2;
          v26 -= 32;
        }
        while (v26);
        if (v16 == v23) {
          goto LABEL_31;
        }
        if ((v16 & 0x18) == 0)
        {
          v21 -= v23;
          v13 -= v23;
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v23 = 0;
      }
      unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v29 = &v13[-v23 - 8];
      uint64_t v30 = (char *)(v29 - v15);
      do
      {
        uint64_t v31 = *(void *)v29;
        v29 -= 8;
        *(void *)&v30[(void)v20] = v31;
        v30 -= 8;
        v28 += 8;
      }
      while (v28);
      if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_31:
        unint64_t v13 = v15;
LABEL_37:
        v4[10] = v20;
        v4[11] = v14;
        v4[12] = v22;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_39;
      }
      v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
      v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_34:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
    unint64_t v13 = (unsigned char *)v4[10];
    goto LABEL_37;
  }
  unint64_t v8 = (unsigned char *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *unint64_t v8 = v5;
  uint64_t v9 = v4[31];
  if (v8 != (unsigned char *)v4[11])
  {
    uint8x8_t v10 = (void *)v4[16];
    if (v10)
    {
      while (1)
      {
        uint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        uint8x8_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_44:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_45:
      abort();
    }
    return;
  }
LABEL_40:
  float v34 = (void *)v4[22];
  if (v34)
  {
    while (1)
    {
      uint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      float v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_44;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StencilRefValueToUse>(gdc::Entity,md::ls::StencilRefValueToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5233A8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StencilRefValueToUse>(gdc::Entity,md::ls::StencilRefValueToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5233A8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StencilRefValueToUse>(gdc::Entity,md::ls::StencilRefValueToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

float md::TransitShieldIconLabelPart::styleBrightness(md::TransitShieldIconLabelPart *this, const md::LabelStyle *a2)
{
  return *((float *)a2 + 27);
}

uint64_t md::TransitShieldIconLabelPart::clone(md::TransitShieldIconLabelPart *this)
{
  {
    operator new();
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 856, 8);
  md::LabelPart::LabelPart((md::LabelPart *)v2, this);
  *(void *)uint64_t v2 = &unk_1EF533B00;
  long long v3 = *(_OWORD *)((char *)this + 572);
  *(void *)(v2 + 588) = *(void *)((char *)this + 588);
  *(_OWORD *)(v2 + 572) = v3;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v2 + 596) = _Q0;
  *(_DWORD *)(v2 + 612) = 1065353216;
  *(_WORD *)(v2 + 616) = 256;
  *(unsigned char *)(v2 + 618) = 0;
  *(_DWORD *)(v2 + 620) = *((_DWORD *)this + 155);
  *(_DWORD *)(v2 + 624) = 0;
  *(unsigned char *)(v2 + 628) = *((unsigned char *)this + 628);
  *(_DWORD *)(v2 + 629) = 16777217;
  *(unsigned char *)(v2 + 633) = 0;
  *(void *)uint64_t v2 = &unk_1EF531FD8;
  *(void *)(v2 + 640) = *((void *)this + 80);
  uint64_t v9 = *((void *)this + 81);
  *(void *)(v2 + 648) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  long long v10 = *((_OWORD *)this + 41);
  long long v11 = *((_OWORD *)this + 42);
  *(void *)(v2 + 688) = *((void *)this + 86);
  *(_OWORD *)(v2 + 656) = v10;
  *(_OWORD *)(v2 + 672) = v11;
  *(_OWORD *)(v2 + 728) = 0u;
  *(_DWORD *)(v2 + 744) = 1065353216;
  *(_WORD *)(v2 + 764) = 0;
  *(void *)(v2 + 748) = 0;
  *(unsigned char *)(v2 + 756) = 0;
  long long v12 = *(_OWORD *)((char *)this + 712);
  *(_OWORD *)(v2 + 696) = *(_OWORD *)((char *)this + 696);
  *(_OWORD *)(v2 + 712) = v12;
  *(void *)uint64_t v2 = &unk_1EF53C2E0;
  *(void *)(v2 + 768) = *((void *)this + 96);
  uint64_t v13 = *((void *)this + 97);
  *(void *)(v2 + 776) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(v2 + 784) = *((unsigned char *)this + 784);
  *(void *)(v2 + 788) = *(void *)((char *)this + 788);
  *(void *)uint64_t v2 = &unk_1EF547E10;
  uint64_t v14 = *(void *)((char *)this + 796);
  *(_DWORD *)(v2 + 804) = *((_DWORD *)this + 201);
  *(void *)(v2 + 796) = v14;
  *(void *)(v2 + 812) = 0;
  *(_DWORD *)(v2 + 808) = 0;
  *(void *)(v2 + 824) = *((void *)this + 103);
  uint64_t v15 = *((void *)this + 104);
  *(void *)(v2 + 832) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v2 + 840) = *((void *)this + 105);
  *(_DWORD *)(v2 + 848) = *((_DWORD *)this + 212);
  *(unsigned char *)(v2 + 852) = 0;
  *(unsigned char *)(v2 + 853) = *((unsigned char *)this + 853);
  return v2;
}

void sub_1A21DD6C8(mdm::Allocator *a1)
{
  uint64_t v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v1, 856);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t md::TransitShieldIconLabelPart::featureID(md::TransitShieldIconLabelPart *this)
{
  return *((void *)this + 105);
}

void md::TransitShieldIconLabelPart::populateDebugNode(md::TransitShieldIconLabelPart *this, gdc::DebugTreeNode *a2)
{
  md::ShieldIconLabelPart::populateDebugNode(this, a2);
  unint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)&v15[0] = v4;
  *(long long *)((char *)v15 + 8) = xmmword_1A28FCF30;
  strcpy(v4, "TransitShieldIconLabelPart");
  gdc::DebugTreeNode::createChildNode((uint64_t)a2, v15);
  operator delete(v4);
  BYTE7(v15[1]) = 20;
  strcpy((char *)v15, "Shield Size Modifier");
  switch(*((unsigned char *)this + 784))
  {
    case 0:
      char v5 = 7;
      uint64_t v6 = 0x746C7561666544;
      break;
    case 1:
      char v5 = 5;
      uint64_t v6 = 0x6C6C616D53;
      break;
    case 2:
      char v5 = 5;
      uint64_t v6 = 0x656772614CLL;
      break;
    case 3:
      char v5 = 6;
      uint64_t v6 = 0x6C6C616D5358;
      break;
    case 4:
      char v5 = 6;
      uint64_t v6 = 0x656772614C58;
      break;
    case 5:
      char v5 = 7;
      uint64_t v6 = 0x6C6C616D535858;
      break;
    case 6:
      char v5 = 7;
      uint64_t v6 = 0x656772614C5858;
      break;
    case 7:
      char v5 = 8;
      uint64_t v6 = 0x656772614C585858;
      break;
    case 8:
      char v5 = 6;
      uint64_t v6 = 0x6D756964654DLL;
      break;
    case 9:
      char v5 = 8;
      uint64_t v6 = 0x6C6C616D53585858;
      break;
    default:
      if (*((unsigned __int8 *)this + 784) == 255)
      {
        char v5 = 4;
        uint64_t v6 = 1701736270;
      }
      else
      {
        uint64_t v6 = 0;
        char v5 = 0;
      }
      break;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v14 = 4;
  uint64_t v11 = v6;
  HIBYTE(v13) = v5;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v15, (uint64_t)v10);
  double v7 = *((float *)this + 204);
  BYTE7(v15[1]) = 6;
  strcpy((char *)v15, "Offset");
  memset(&v8[4], 0, 24);
  int v9 = 2;
  *(double *)&v8[2] = v7;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v15, (uint64_t)v8);
}

uint64_t md::TransitShieldIconLabelPart::debugString@<X0>(md::TransitShieldIconLabelPart *this@<X0>, unsigned char *a2@<X8>)
{
  int v4 = *((unsigned __int8 *)this + 784);
  char v5 = "dflt";
  if (v4 == 1) {
    char v5 = "sm";
  }
  if (v4 == 2) {
    uint64_t v6 = "lg";
  }
  else {
    uint64_t v6 = v5;
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"  Transit Shield(", 17);
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 80) + 32))(*((void *)this + 80));
  if (v7) {
    unint64_t v8 = (const char *)v7;
  }
  else {
    unint64_t v8 = "";
  }
  size_t v9 = strlen(v8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)":of=", 4);
  uint64_t v10 = v20[0];
  *(_DWORD *)((char *)&v20[1] + *(void *)(v20[0] - 24)) = *(_DWORD *)((unsigned char *)&v20[1] + *(void *)(v20[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v20[2] + *(void *)(v10 - 24)) = 2;
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)",size=", 6);
  size_t v11 = strlen(v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)v6, v11);
  if ((v27 & 0x10) != 0)
  {
    unint64_t v13 = v26;
    if (v26 < v23)
    {
      unint64_t v26 = v23;
      unint64_t v13 = v23;
    }
    int v14 = (const void **)&v22;
  }
  else
  {
    if ((v27 & 8) == 0)
    {
      size_t v12 = 0;
      a2[23] = 0;
      goto LABEL_24;
    }
    int v14 = (const void **)v21;
    unint64_t v13 = v21[2];
  }
  uint64_t v15 = *v14;
  size_t v12 = v13 - (void)*v14;
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v12 >= 0x17)
  {
    uint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v16 = v12 | 7;
    }
    uint64_t v17 = v16 + 1;
    unint64_t v18 = operator new(v16 + 1);
    *((void *)a2 + 1) = v12;
    *((void *)a2 + 2) = v17 | 0x8000000000000000;
    *(void *)a2 = v18;
    a2 = v18;
    goto LABEL_23;
  }
  a2[23] = v12;
  if (v12) {
LABEL_23:
  }
    memmove(a2, v15, v12);
LABEL_24:
  a2[v12] = 0;
  v20[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v20[1] = MEMORY[0x1E4FBA470] + 16;
  if (v25 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v28);
}

void sub_1A21DDCAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::TransitShieldIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v4 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 16) + 8) + 592))(*(void *)(*(void *)(a1 + 16) + 8), *(unsigned __int8 *)(a1 + 853));
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v4 + 296);
      if (!v6)
      {
        uint64_t v7 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v4, 0);
        uint64_t v6 = *v7;
        *(void *)(v5 + 296) = *v7;
      }
      int v8 = *(unsigned __int8 *)(v6 + 89);
      if (v8 != *(unsigned __int8 *)(a1 + 852) || v8 == 2 && *(_DWORD *)(a1 + 848) != *(_DWORD *)(v6 + 72)) {
        return 1;
      }
      if (*(unsigned __int8 *)(v6 + 91) != *(unsigned __int8 *)(a1 + 784)
        || *(_DWORD *)(a1 + 788) != *(_DWORD *)(v6 + 56)
        || *(_DWORD *)(a1 + 792) != *(_DWORD *)(v6 + 60))
      {
        return 1;
      }
    }
  }
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 824) + 104));
  if ((v9 & 1) == 0) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 852) != 2)
  {
    uint64_t v10 = *(void *)(a1 + 824);
    uint64_t v11 = *(unsigned __int8 *)(a1 + 853);
    size_t v12 = (std::mutex *)(v10 + 40);
    std::mutex::lock((std::mutex *)(v10 + 40));
    int v14 = *(void **)(v10 + 24);
    unint64_t v13 = *(std::__shared_weak_count **)(v10 + 32);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::mutex::unlock(v12);
    if (v14)
    {
      int v16 = *(_DWORD *)(*v14 + 16 * v11 + 4);
      if (!v13) {
        goto LABEL_21;
      }
    }
    else
    {
      int v16 = -16777216;
      if (!v13) {
        goto LABEL_21;
      }
    }
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_21:
    if (v16 != *(_DWORD *)(a1 + 848)) {
      return 1;
    }
  }
  return 0;
}

float md::TransitShieldIconLabelPart::setPerpendicularOffsetVector(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a1 + 796;
  uint64_t v4 = 808;
  if (a2) {
    uint64_t v3 = a1 + 808;
  }
  else {
    uint64_t v4 = 796;
  }
  *(_DWORD *)(a1 + v4) = *(_DWORD *)a3;
  float result = *(float *)(a3 + 4);
  *(float *)(v3 + 4) = result;
  return result;
}

uint64_t md::TransitShieldIconLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, double a6)
{
  LODWORD(a6) = *(_DWORD *)(a1 + 816);
  md::IconLabelPart::layoutForDisplay(a1, a2, a3, a4, &v7, a6, *(double *)(a1 + 808), COERCE_DOUBLE(vmla_n_f32(*a5, *(float32x2_t *)(a1 + 808), *(float *)&a6)));
  return 37;
}

float md::TransitShieldIconLabelPart::updateForDisplay(md::TransitShieldIconLabelPart *this)
{
  float v2 = *((float *)this + 147);
  *((float *)this + 153) = v2;
  uint64_t v3 = *(void *)((char *)this + 572);
  *((_DWORD *)this + 151) = *((_DWORD *)this + 145);
  *(void *)((char *)this + 596) = v3;
  *((unsigned char *)this + 617) = *((unsigned char *)this + 593);
  char v4 = *((unsigned char *)this + 633) + 4 * *((unsigned char *)this + 594);
  *((unsigned char *)this + 556) = v4;
  *((unsigned char *)this + 658) = v4;
  int v5 = *((unsigned __int8 *)this + 592);
  *((unsigned char *)this + 657) = v5;
  *((unsigned char *)this + 765) = v5 == 4;
  if (v5 == 4) {
    char v6 = 2;
  }
  else {
    char v6 = 1;
  }
  float v7 = *((float *)this + 188);
  *((unsigned char *)this + 685) = v6;
  if (v2 != v7)
  {
    *((float *)this + 188) = v2;
    (*(void (**)(md::TransitShieldIconLabelPart *, uint64_t, char *, char *))(*(void *)this + 912))(this, 1, (char *)this + 640, (char *)this + 312);
  }
  float result = *((float *)this + 201);
  *((float *)this + 204) = result;
  return result;
}

uint64_t md::TransitShieldIconLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 824);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 853);
  uint64_t v10 = (std::mutex *)(v8 + 40);
  std::mutex::lock((std::mutex *)(v8 + 40));
  size_t v12 = *(void **)(v8 + 24);
  uint64_t v11 = *(std::__shared_weak_count **)(v8 + 32);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::mutex::unlock(v10);
  if (v12)
  {
    float v13 = *(float *)(*v12 + 16 * v9);
    if (!v11) {
      goto LABEL_9;
    }
  }
  else
  {
    float v13 = 0.0;
    if (!v11) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_9:
  float v14 = *(float *)(a2 + 176) * v13;
  *(float *)(a1 + 804) = v14;
  float32x2_t v16 = vmla_n_f32(*a3, *(float32x2_t *)(a1 + 796), v14);
  return md::IconLabelPart::layoutForStaging(a1, a2, &v16, a4);
}

void md::TransitShieldIconLabelPart::~TransitShieldIconLabelPart(md::TransitShieldIconLabelPart *this)
{
  *(void *)this = &unk_1EF547E10;
  float v2 = (std::__shared_weak_count *)*((void *)this + 104);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF53C2E0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  md::IconLabelPart::~IconLabelPart(this);
  {
    operator new();
  }
  char v4 = *(void (**)(void))(*(void *)mdm::Allocator::instance(void)::alloc + 40);
  v4();
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF547E10;
  float v2 = (std::__shared_weak_count *)*((void *)this + 104);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF53C2E0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  md::IconLabelPart::~IconLabelPart(this);
}

uint64_t md::TransitShieldIconLabelPart::TransitShieldIconLabelPart(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, char a7, _DWORD *a8)
{
  md::IconLabelPart::IconLabelPart(a1, a2);
  *uint64_t v15 = &unk_1EF53C2E0;
  uint64_t v16 = a4[1];
  v15[96] = *a4;
  v15[97] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(void *)(a3 + 296);
  if (!v17)
  {
    unint64_t v18 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a3, 0);
    uint64_t v17 = *v18;
    *(void *)(a3 + 296) = *v18;
  }
  *(unsigned char *)(a1 + 784) = *(unsigned char *)(v17 + 91);
  *(void *)(a1 + 788) = *(void *)(v17 + 56);
  *(unsigned char *)(a1 + 557) = 1;
  *(unsigned char *)(a1 + 656) = 1;
  *(void *)a1 = &unk_1EF547E10;
  *(void *)(a1 + 804) = 0;
  *(void *)(a1 + 812) = 0;
  *(void *)(a1 + 796) = 0;
  uint64_t v19 = a6[1];
  *(void *)(a1 + 824) = *a6;
  *(void *)(a1 + 832) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 840) = a5;
  *(_DWORD *)(a1 + 848) = *a8;
  uint64_t v20 = *(void *)(a3 + 296);
  if (!v20)
  {
    double v21 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a3, 0);
    uint64_t v20 = *v21;
    *(void *)(a3 + 296) = *v21;
  }
  *(unsigned char *)(a1 + 852) = *(unsigned char *)(v20 + 89);
  *(unsigned char *)(a1 + 853) = a7;
  return a1;
}

void sub_1A21DE4B0(_Unwind_Exception *a1)
{
  char v4 = (std::__shared_weak_count *)*((void *)v1 + 104);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)uint64_t v1 = v2;
  int v5 = (std::__shared_weak_count *)*((void *)v1 + 97);
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  md::IconLabelPart::~IconLabelPart(v1);
  _Unwind_Resume(a1);
}

uint64_t altitude::HeightFallbackRequestManager::getHeightElement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  (*(void (**)(double **__return_ptr, uint64_t, uint64_t, void))(*(void *)a1 + 96))(&v13, a1, a2, 0);
  float v7 = v13;
  char v6 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(uint64_t (**)(double *))(*(void *)v7 + 40))(v7))
  {
    (*(void (**)(double *))(*(void *)v7 + 48))(v7);
    uint64_t v8 = *(void *)(a1 + 96);
    if (v8)
    {
      double v9 = v7[35];
      double v10 = (v9 - v7[34]) * 1000.0;
      gdc::Statistics::addSampleValue(v8, "HeightFallbackLoadJobTotalTime", 0x31A9D7F40000001EuLL, (v9 - v7[33]) * 1000.0);
      gdc::Statistics::addSampleValue(*(void *)(a1 + 96), "HeightFallbackLoadJobMainTime", 0xB57B579F0000001DLL, v10);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v11 = v14;
    if (!v14) {
      return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
  }
  else
  {
    uint64_t v11 = v14;
    if (!v14) {
      return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::waitOnRequest(uint64_t a1, unint64_t *a2, unsigned int a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  char v6 = *(unint64_t **)(a1 + 72);
  if (!v6) {
    goto LABEL_34;
  }
  float v7 = (unint64_t *)(a1 + 72);
  do
  {
    unint64_t v8 = bswap64(v6[4]);
    unint64_t v9 = bswap64(*a2);
    if (v8 != v9) {
      goto LABEL_9;
    }
    unint64_t v8 = bswap64(v6[5]);
    unint64_t v9 = bswap64(a2[1]);
    if (v8 != v9) {
      goto LABEL_9;
    }
    unint64_t v8 = bswap64(v6[6]);
    unint64_t v9 = bswap64(a2[2]);
    if (v8 == v9
      && (v8 = bswap64(v6[7]), unint64_t v9 = bswap64(a2[3]), v8 == v9)
      && (v8 = bswap64(v6[8]), unint64_t v9 = bswap64(a2[4]), v8 == v9))
    {
      int v10 = 0;
    }
    else
    {
LABEL_9:
      if (v8 < v9) {
        int v10 = -1;
      }
      else {
        int v10 = 1;
      }
    }
    BOOL v11 = v10 < 0;
    if (v10 >= 0) {
      size_t v12 = v6;
    }
    else {
      size_t v12 = v6 + 1;
    }
    if (!v11) {
      float v7 = v6;
    }
    char v6 = (unint64_t *)*v12;
  }
  while (*v12);
  if (v7 == (unint64_t *)(a1 + 72)) {
    goto LABEL_34;
  }
  unint64_t v13 = bswap64(*a2);
  unint64_t v14 = bswap64(v7[4]);
  if (v13 != v14) {
    goto LABEL_25;
  }
  unint64_t v13 = bswap64(a2[1]);
  unint64_t v14 = bswap64(v7[5]);
  if (v13 != v14) {
    goto LABEL_25;
  }
  unint64_t v13 = bswap64(a2[2]);
  unint64_t v14 = bswap64(v7[6]);
  if (v13 == v14
    && (v13 = bswap64(a2[3]), unint64_t v14 = bswap64(v7[7]), v13 == v14)
    && (v13 = bswap64(a2[4]), unint64_t v14 = bswap64(v7[8]), v13 == v14))
  {
    int v15 = 0;
  }
  else
  {
LABEL_25:
    int v15 = v13 < v14 ? -1 : 1;
  }
  if (v15 < 0)
  {
LABEL_34:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    unint64_t v17 = v7[9];
    uint64_t v16 = (std::__shared_weak_count *)v7[10];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v17)
    {
      karo::Job::waitToFinish((karo::Job *)v17, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v17 + 152));
      uint64_t v18 = *(_DWORD *)(v17 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v17 + 152));
      if (!v16) {
        return v18;
      }
    }
    else
    {
      uint64_t v18 = 0;
      if (!v16) {
        return v18;
      }
    }
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v18;
}

void karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::getRequest(uint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  float v7 = (unint64_t *)(a1 + 72);
  char v6 = *(unint64_t **)(a1 + 72);
  if (!v6) {
    goto LABEL_32;
  }
  unint64_t v8 = (unint64_t *)(a1 + 72);
  do
  {
    unint64_t v9 = bswap64(v6[4]);
    unint64_t v10 = bswap64(*a2);
    if (v9 != v10) {
      goto LABEL_9;
    }
    unint64_t v9 = bswap64(v6[5]);
    unint64_t v10 = bswap64(a2[1]);
    if (v9 != v10) {
      goto LABEL_9;
    }
    unint64_t v9 = bswap64(v6[6]);
    unint64_t v10 = bswap64(a2[2]);
    if (v9 == v10
      && (unint64_t v9 = bswap64(v6[7]), v10 = bswap64(a2[3]), v9 == v10)
      && (unint64_t v9 = bswap64(v6[8]), v10 = bswap64(a2[4]), v9 == v10))
    {
      int v11 = 0;
    }
    else
    {
LABEL_9:
      if (v9 < v10) {
        int v11 = -1;
      }
      else {
        int v11 = 1;
      }
    }
    BOOL v12 = v11 < 0;
    if (v11 >= 0) {
      unint64_t v13 = v6;
    }
    else {
      unint64_t v13 = v6 + 1;
    }
    if (!v12) {
      unint64_t v8 = v6;
    }
    char v6 = (unint64_t *)*v13;
  }
  while (*v13);
  if (v8 == v7) {
    goto LABEL_32;
  }
  unint64_t v14 = bswap64(*a2);
  unint64_t v15 = bswap64(v8[4]);
  if (v14 != v15) {
    goto LABEL_25;
  }
  unint64_t v14 = bswap64(a2[1]);
  unint64_t v15 = bswap64(v8[5]);
  if (v14 != v15) {
    goto LABEL_25;
  }
  unint64_t v14 = bswap64(a2[2]);
  unint64_t v15 = bswap64(v8[6]);
  if (v14 == v15
    && (unint64_t v14 = bswap64(a2[3]), v15 = bswap64(v8[7]), v14 == v15)
    && (unint64_t v14 = bswap64(a2[4]), v15 = bswap64(v8[8]), v14 == v15))
  {
    int v16 = 0;
  }
  else
  {
LABEL_25:
    int v16 = v14 < v15 ? -1 : 1;
  }
  if (v16 < 0)
  {
LABEL_32:
    (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t *))(*(void *)a1 + 64))(&v38, a1, a2);
    unint64_t v20 = v38;
    uint64_t v19 = v39;
    *a3 = v38;
    a3[1] = (unint64_t)v19;
    double v21 = *(unint64_t **)(a1 + 72);
    uint64_t v22 = v7;
    if (v21)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v22 = v21;
          unint64_t v23 = bswap64(*a2);
          unint64_t v24 = bswap64(v22[4]);
          if (v23 == v24)
          {
            unint64_t v23 = bswap64(a2[1]);
            unint64_t v24 = bswap64(v22[5]);
            if (v23 == v24)
            {
              unint64_t v23 = bswap64(a2[2]);
              unint64_t v24 = bswap64(v22[6]);
              if (v23 == v24)
              {
                unint64_t v23 = bswap64(a2[3]);
                unint64_t v24 = bswap64(v22[7]);
                if (v23 == v24)
                {
                  unint64_t v23 = bswap64(a2[4]);
                  unint64_t v24 = bswap64(v22[8]);
                  if (v23 == v24) {
                    break;
                  }
                }
              }
            }
          }
          int v25 = v23 < v24 ? -1 : 1;
          if ((v25 & 0x80000000) == 0) {
            break;
          }
          double v21 = (unint64_t *)*v22;
          float v7 = v22;
          if (!*v22) {
            goto LABEL_56;
          }
        }
        unint64_t v26 = bswap64(v22[4]);
        unint64_t v27 = bswap64(*a2);
        if (v26 != v27) {
          goto LABEL_50;
        }
        unint64_t v26 = bswap64(v22[5]);
        unint64_t v27 = bswap64(a2[1]);
        if (v26 != v27) {
          goto LABEL_50;
        }
        unint64_t v26 = bswap64(v22[6]);
        unint64_t v27 = bswap64(a2[2]);
        if (v26 == v27
          && (unint64_t v26 = bswap64(v22[7]), v27 = bswap64(a2[3]), v26 == v27)
          && (unint64_t v26 = bswap64(v22[8]), v27 = bswap64(a2[4]), v26 == v27))
        {
          int v28 = 0;
        }
        else
        {
LABEL_50:
          int v28 = v26 < v27 ? -1 : 1;
        }
        if ((v28 & 0x80000000) == 0) {
          break;
        }
        double v21 = (unint64_t *)v22[1];
        if (!v21)
        {
          float v7 = v22 + 1;
          goto LABEL_56;
        }
      }
    }
    else
    {
LABEL_56:
      uint64_t v29 = v22;
      uint64_t v22 = (unint64_t *)operator new(0x58uLL);
      long long v30 = *((_OWORD *)a2 + 1);
      *((_OWORD *)v22 + 2) = *(_OWORD *)a2;
      *((_OWORD *)v22 + 3) = v30;
      unint64_t v31 = a2[4];
      v22[9] = 0;
      v22[10] = 0;
      v22[8] = v31;
      unint64_t *v22 = 0;
      v22[1] = 0;
      void v22[2] = (unint64_t)v29;
      *float v7 = (unint64_t)v22;
      uint64_t v32 = **(void **)(a1 + 64);
      char v33 = (uint64_t *)v22;
      if (v32)
      {
        *(void *)(a1 + 64) = v32;
        char v33 = (uint64_t *)*v7;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v33);
      ++*(void *)(a1 + 80);
    }
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v34 = (std::__shared_weak_count *)v22[10];
    v22[9] = v20;
    v22[10] = (unint64_t)v19;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    unint64_t v35 = *(void *)(a1 + 48);
    if (v35)
    {
      unint64_t v36 = *a3;
      uint64_t v37 = (std::__shared_weak_count *)a3[1];
      unint64_t v38 = v36;
      uint64_t v39 = v37;
      if (v37)
      {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        karo::JobManager::queueJob(v35, &v38);
        if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      else
      {
        karo::JobManager::queueJob(v35, &v38);
      }
    }
  }
  else
  {
    unint64_t v18 = v8[9];
    unint64_t v17 = v8[10];
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    *a3 = v18;
    a3[1] = v17;
  }
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3) {
    a3 = *(_DWORD *)(a1 + 88) + 1;
  }
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, a2, a7);
  int v16 = v22;
  unsigned int v17 = atomic_load(v22 + 4);
  if (v17 != a4) {
    (*(void (**)(unsigned int *, uint64_t))(*(void *)v22 + 24))(v22, a4);
  }
  v16[45] = a3;
  v16[46] = a5;
  *((unsigned char *)v16 + 176) = a6;
  unint64_t v18 = v22;
  uint64_t v19 = v23;
  *a8 = off_1EF5677B0;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v18 = (unsigned int *)a8[1];
  }
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)v18 + 32, 1u);
  }
  unint64_t v20 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4) {
    a4 = *(_DWORD *)(a1 + 88) + 1;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      uint64_t v10 = v8 + 40;
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, v8, v8 + 40);
      int v11 = v22;
      int v12 = *(_DWORD *)(v8 + 48);
      unsigned int v13 = *(_DWORD *)(v8 + 52);
      char v14 = *(unsigned char *)(v8 + 56);
      unsigned int v15 = atomic_load(v22 + 4);
      if (v15 != v12) {
        (*(void (**)(unsigned int *))(*(void *)v22 + 24))(v22);
      }
      v11[45] = a4;
      v11[46] = v13;
      *((unsigned char *)v11 + 176) = v14;
      int v16 = *(void **)(a3 + 8);
      if ((unint64_t)v16 >= *(void *)(a3 + 16))
      {
        uint64_t v19 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v22, (uint64_t)v23);
      }
      else
      {
        void *v16 = off_1EF5677B0;
        unsigned int v17 = v22;
        v16[1] = v22;
        uint64_t v18 = (uint64_t)v23;
        v16[2] = v23;
        if (v18)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
          unsigned int v17 = (unsigned int *)v16[1];
        }
        if (v17) {
          atomic_fetch_add((atomic_uint *volatile)v17 + 32, 1u);
        }
        uint64_t v19 = v16 + 3;
      }
      *(void *)(a3 + 8) = v19;
      unint64_t v20 = v23;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v8 = v10 + 24;
    }
    while (v10 + 24 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void altitude::HeightFallbackRequestManager::createRequest(uint64_t a1)
{
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getMutex(void)::mutex, &dword_1A1780000);
  }
  std::mutex::lock(&altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getMutex(void)::mutex);
  {
    qword_1E9590598 = 0;
    qword_1E95905A0 = 0;
    altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool = (uint64_t)&qword_1E9590598;
    *(_OWORD *)&qword_1E95905A8 = xmmword_1A28FE5C0;
    qword_1E95905B8 = 0;
    __cxa_atexit((void (*)(void *))geo::Pool<altitude::HeightFallbackRequest>::~Pool, &altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool, &dword_1A1780000);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (uint64_t *)qword_1E95905B8;
  if (!qword_1E95905B8)
  {
    char v4 = (uint64_t *)malloc_type_malloc(qword_1E95905B0, 0x160B39uLL);
    int v5 = v4;
    uint64_t v6 = qword_1E9590598;
    if (qword_1E9590598)
    {
      do
      {
        while (1)
        {
          uint64_t v8 = (uint64_t *)v6;
          unint64_t v9 = *(void *)(v6 + 32);
          if ((unint64_t)v4 >= v9) {
            break;
          }
          uint64_t v6 = *v8;
          float v7 = v8;
          if (!*v8) {
            goto LABEL_11;
          }
        }
        if (v9 >= (unint64_t)v4) {
          goto LABEL_15;
        }
        uint64_t v6 = v8[1];
      }
      while (v6);
      float v7 = v8 + 1;
    }
    else
    {
      float v7 = &qword_1E9590598;
      uint64_t v8 = &qword_1E9590598;
    }
LABEL_11:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = (uint64_t)v5;
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *float v7 = (uint64_t)v10;
    if (*(void *)altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool)
    {
      altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool = *(void *)altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool;
      int v11 = (uint64_t *)*v7;
    }
    else
    {
      int v11 = v10;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1E9590598, v11);
    ++qword_1E95905A0;
LABEL_15:
    uint64_t v3 = (uint64_t *)qword_1E95905B8;
    uint64_t v12 = 464 * qword_1E95905A8 - 464;
    if ((v12 & 0x8000000000000000) == 0)
    {
      unsigned int v13 = (uint64_t *)((char *)v5 + v12);
      do
      {
        *unsigned int v13 = (uint64_t)v3;
        char v14 = v13 - 58;
        uint64_t v3 = v13;
        unsigned int v13 = v14;
      }
      while (v14 >= v5);
      uint64_t v3 = v14 + 58;
    }
  }
  qword_1E95905B8 = *v3;
  karo::Job::Job((uint64_t)v3, v2);
}

void std::__shared_ptr_pointer<altitude::HeightFallbackRequest *,altitude::util::PoolHandle<altitude::HeightFallbackRequest>::Deleter,std::allocator<altitude::HeightFallbackRequest>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void (****)(void))(a1 + 24);
  {
    __cxa_atexit(MEMORY[0x1E4FBA268], &altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getMutex(void)::mutex, &dword_1A1780000);
  }
  std::mutex::lock(&altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getMutex(void)::mutex);
  {
    qword_1E9590598 = 0;
    qword_1E95905A0 = 0;
    altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool = (uint64_t)&qword_1E9590598;
    *(_OWORD *)&qword_1E95905A8 = xmmword_1A28FE5C0;
    qword_1E95905B8 = 0;
    __cxa_atexit((void (*)(void *))geo::Pool<altitude::HeightFallbackRequest>::~Pool, &altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getPool(void)::pool, &dword_1A1780000);
  }
  if (v1 && qword_1E95905A0)
  {
    (**v1)(v1);
    *uint64_t v1 = (void (**)(void))qword_1E95905B8;
    qword_1E95905B8 = (uint64_t)v1;
  }
  std::mutex::unlock(&altitude::util::PoolHandle<altitude::HeightFallbackRequest>::getMutex(void)::mutex);
}

void std::__shared_ptr_pointer<altitude::HeightFallbackRequest *,altitude::util::PoolHandle<altitude::HeightFallbackRequest>::Deleter,std::allocator<altitude::HeightFallbackRequest>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t geo::Pool<altitude::HeightFallbackRequest>::~Pool(uint64_t a1)
{
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v30 = &v31;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      int v5 = v31;
      uint64_t v6 = &v31;
      float v7 = &v31;
      if (v31)
      {
        while (1)
        {
          while (1)
          {
            float v7 = (uint64_t **)v5;
            unint64_t v8 = v5[4];
            if ((unint64_t)v2 >= v8) {
              break;
            }
            int v5 = *v7;
            uint64_t v6 = v7;
            if (!*v7) {
              goto LABEL_13;
            }
          }
          if (v8 >= (unint64_t)v2) {
            break;
          }
          int v5 = v7[1];
          if (!v5)
          {
            uint64_t v6 = v7 + 1;
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        unint64_t v9 = (uint64_t *)operator new(0x28uLL);
        v9[4] = (uint64_t)v2;
        *unint64_t v9 = 0;
        v9[1] = 0;
        v9[2] = (uint64_t)v7;
        unint64_t *v6 = v9;
        if (*v30)
        {
          long long v30 = (uint64_t **)*v30;
          char v4 = *v6;
        }
        else
        {
          char v4 = v9;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v31, v4);
        uint64_t v3 = ++v32;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v10 = *(void *)(a1 + 24);
  int v11 = *(void **)a1;
  uint64_t v12 = (void *)(a1 + 8);
  BOOL v13 = v3 == *(void *)(a1 + 16) * v10 || v11 == v12;
  if (v13 || v10 == 0)
  {
    if (v11 == v12) {
      goto LABEL_48;
    }
    goto LABEL_50;
  }
  uint64_t v15 = 1;
  do
  {
    if (v15)
    {
      unint64_t v16 = 0;
      uint64_t v17 = v11[4];
      do
      {
        uint64_t v18 = (void (***)(void))(v17 + 464 * v16);
        uint64_t v19 = v31;
        if (!v31) {
          goto LABEL_29;
        }
        unint64_t v20 = &v31;
        do
        {
          double v21 = v19;
          uint64_t v22 = v20;
          unint64_t v23 = v19[4];
          unint64_t v24 = (uint64_t **)(v19 + 1);
          if (v23 >= (unint64_t)v18)
          {
            unint64_t v24 = (uint64_t **)v21;
            unint64_t v20 = (uint64_t **)v21;
          }
          uint64_t v19 = *v24;
        }
        while (v19);
        if (v20 == &v31) {
          goto LABEL_29;
        }
        if (v23 < (unint64_t)v18) {
          double v21 = (uint64_t *)v22;
        }
        if ((unint64_t)v18 < v21[4])
        {
LABEL_29:
          (**v18)(v18);
          unint64_t v10 = *(void *)(a1 + 24);
        }
        ++v16;
        uint64_t v15 = v10;
      }
      while (v16 < v10);
    }
    int v25 = (void *)v11[1];
    if (v25)
    {
      do
      {
        unint64_t v26 = v25;
        int v25 = (void *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        unint64_t v26 = (void *)v11[2];
        BOOL v13 = *v26 == (void)v11;
        int v11 = v26;
      }
      while (!v13);
    }
    int v11 = v26;
  }
  while (v26 != v12);
  int v11 = *(void **)a1;
  if (*(void **)a1 != v12)
  {
    do
    {
LABEL_50:
      free((void *)v11[4]);
      int v28 = (void *)v11[1];
      if (v28)
      {
        do
        {
          uint64_t v29 = v28;
          int v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          uint64_t v29 = (void *)v11[2];
          BOOL v13 = *v29 == (void)v11;
          int v11 = v29;
        }
        while (!v13);
      }
      int v11 = v29;
    }
    while (v29 != v12);
  }
LABEL_48:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v12;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v31);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  return a1;
}

void karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::createAndQueueRequest(void *a1@<X0>, uint64_t *a2@<X8>)
{
  (*(void (**)(void *))(*a1 + 64))(a1);
  unint64_t v4 = a1[6];
  if (v4)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v7[0] = v5;
    v7[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v4, v7);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v7);
    }
  }
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::clearRequest(uint64_t a1, unint64_t *a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(unint64_t **)(a1 + 72);
  if (v4)
  {
    uint64_t v5 = (unint64_t *)(a1 + 72);
    do
    {
      unint64_t v6 = bswap64(v4[4]);
      unint64_t v7 = bswap64(*a2);
      if (v6 != v7) {
        goto LABEL_9;
      }
      unint64_t v6 = bswap64(v4[5]);
      unint64_t v7 = bswap64(a2[1]);
      if (v6 != v7) {
        goto LABEL_9;
      }
      unint64_t v6 = bswap64(v4[6]);
      unint64_t v7 = bswap64(a2[2]);
      if (v6 == v7
        && (unint64_t v6 = bswap64(v4[7]), v7 = bswap64(a2[3]), v6 == v7)
        && (unint64_t v6 = bswap64(v4[8]), v7 = bswap64(a2[4]), v6 == v7))
      {
        int v8 = 0;
      }
      else
      {
LABEL_9:
        if (v6 < v7) {
          int v8 = -1;
        }
        else {
          int v8 = 1;
        }
      }
      BOOL v9 = v8 < 0;
      if (v8 >= 0) {
        unint64_t v10 = v4;
      }
      else {
        unint64_t v10 = v4 + 1;
      }
      if (!v9) {
        uint64_t v5 = v4;
      }
      unint64_t v4 = (unint64_t *)*v10;
    }
    while (*v10);
    if (v5 != (unint64_t *)(a1 + 72))
    {
      unint64_t v11 = bswap64(*a2);
      unint64_t v12 = bswap64(v5[4]);
      if (v11 != v12) {
        goto LABEL_25;
      }
      unint64_t v11 = bswap64(a2[1]);
      unint64_t v12 = bswap64(v5[5]);
      if (v11 != v12) {
        goto LABEL_25;
      }
      unint64_t v11 = bswap64(a2[2]);
      unint64_t v12 = bswap64(v5[6]);
      if (v11 == v12
        && (unint64_t v11 = bswap64(a2[3]), v12 = bswap64(v5[7]), v11 == v12)
        && (unint64_t v11 = bswap64(a2[4]), v12 = bswap64(v5[8]), v11 == v12))
      {
        int v13 = 0;
      }
      else
      {
LABEL_25:
        int v13 = v11 < v12 ? -1 : 1;
      }
      if ((v13 & 0x80000000) == 0)
      {
        (*(void (**)(unint64_t))(*(void *)v5[9] + 16))(v5[9]);
        char v14 = (unint64_t *)v5[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            char v14 = (unint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          unint64_t v16 = v5;
          do
          {
            uint64_t v15 = (unint64_t *)v16[2];
            BOOL v17 = *v15 == (void)v16;
            unint64_t v16 = v15;
          }
          while (!v17);
        }
        if (*(unint64_t **)(a1 + 64) == v5) {
          *(void *)(a1 + 64) = v15;
        }
        uint64_t v18 = *(uint64_t **)(a1 + 72);
        --*(void *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v18, (uint64_t *)v5);
        uint64_t v19 = (std::__shared_weak_count *)v5[10];
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        operator delete(v5);
      }
    }
  }
  unint64_t v20 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v20);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    uint64_t v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      unint64_t v6 = (uint64_t *)v5[1];
      if (v5[9] == a2) {
        break;
      }
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          unint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (uint64_t *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72)) {
        goto LABEL_23;
      }
    }
    if (v6)
    {
      do
      {
        BOOL v9 = v6;
        unint64_t v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      unint64_t v10 = v5;
      do
      {
        BOOL v9 = (uint64_t *)v10[2];
        BOOL v8 = *v9 == (void)v10;
        unint64_t v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5) {
      *(void *)(a1 + 64) = v9;
    }
    unint64_t v11 = *(uint64_t **)(a1 + 72);
    --*(void *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    unint64_t v12 = (std::__shared_weak_count *)v5[10];
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    operator delete(v5);
  }
LABEL_23:
  int v13 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v13);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightFallbackRequestId,altitude::HeightFallbackArgs>::pruneRequests(uint64_t a1, int a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      uint64_t v5 = (uint64_t *)v4[1];
      unint64_t v6 = v4;
      if (v5)
      {
        do
        {
          unint64_t v7 = v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unint64_t v7 = (uint64_t *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          unint64_t v6 = v7;
        }
        while (!v8);
      }
      uint64_t v9 = v4[9];
      if (atomic_load((unsigned int *)(v9 + 128))) {
        *(_DWORD *)(v9 + 180) = a2;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 152));
      int v11 = *(_DWORD *)(v9 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 152));
      if ((v11 & 1) != 0 && *(unsigned char *)(v9 + 176) && *(_DWORD *)(v9 + 180) != a2
        || (a2 - *(_DWORD *)(v9 + 180)) > *(_DWORD *)(v9 + 184))
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        unint64_t v12 = (uint64_t *)v4[1];
        int v13 = v4;
        if (v12)
        {
          do
          {
            char v14 = v12;
            unint64_t v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            char v14 = (uint64_t *)v13[2];
            BOOL v8 = *v14 == (void)v13;
            int v13 = v14;
          }
          while (!v8);
        }
        if (*(uint64_t **)(a1 + 64) == v4) {
          *(void *)(a1 + 64) = v14;
        }
        uint64_t v15 = *(uint64_t **)(a1 + 72);
        --*(void *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v15, v4);
        unint64_t v16 = (std::__shared_weak_count *)v4[10];
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        operator delete(v4);
      }
      unint64_t v4 = v7;
    }
    while (v7 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  BOOL v17 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v17);
}

void altitude::HeightFallbackRequestManager::~HeightFallbackRequestManager(altitude::HeightFallbackRequestManager *this)
{
  *(void *)this = &unk_1EF5679A0;
  while (*((void *)this + 10))
    (*(void (**)(altitude::HeightFallbackRequestManager *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF5679A0;
  while (*((void *)this + 10))
    (*(void (**)(altitude::HeightFallbackRequestManager *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

void std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::HeightFallbackRequestId,std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::HeightFallbackRequestId>,true>,std::allocator<std::__value_type<altitude::HeightFallbackRequestId,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[10];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(a1);
  }
}

void md::MuninAvailabilityLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = 2147483646;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v13 = *(unsigned __int8 **)(a6 + 16);
  char v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

void md::MuninAvailabilityLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 9)
    {
      v5 += 48;
      if (v5 == v6) {
        goto LABEL_10;
      }
    }
  }
  if (v5 == v6 || *(void *)(v5 + 32) != 1)
  {
LABEL_10:
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v8 = *(void *)(v7 + 112);
  int v9 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v9)
  {
LABEL_11:
    uint64_t v11 = v8;
    int v12 = 0;
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v11 = v8;
  int v12 = v9;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_12:
  uint64_t v10 = operator new(0x310uLL);
  v10[1] = 0;
  v10[2] = 0;
  *uint64_t v10 = &unk_1EF5812F0;
  *a3 = md::MuninAvailabilityData::MuninAvailabilityData((uint64_t)(v10 + 3), a1, (uint64_t *)(v11 + 144));
  a3[1] = (uint64_t)v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A21E0BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::MuninAvailabilityData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::MuninAvailabilityData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5812F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::MuninAvailabilityData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5812F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::MuninAvailabilityLayerDataSource::~MuninAvailabilityLayerDataSource(md::MuninAvailabilityLayerDataSource *this)
{
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

void md::DaVinciTrafficRenderLayer::updateWithContext(uint64_t a1, uint64_t **a2, md::LayoutContext *this)
{
  int v5 = *(unsigned __int8 *)(a1 + 34);
  if (v5 == 47) {
    float v6 = 0.0;
  }
  else {
    float v6 = 1.0;
  }
  if (v5 == 47) {
    float v7 = 0.0;
  }
  else {
    float v7 = 0.002;
  }
  uint64_t v8 = (uint64_t *)*((void *)this + 1);
  int8x8_t v9 = (int8x8_t)v8[1];
  if (!*(void *)&v9)
  {
    int v12 = 0;
    float v13 = MEMORY[0x10];
    float v14 = MEMORY[0x14];
    goto LABEL_49;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v9 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v11 = 0x8BD499FBD96FBB9ELL % *(void *)&v9;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v9 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v15 = *v8;
  unint64_t v16 = *(void **)(v15 + 8 * v11);
  if (v16 && (unsigned int v17 = (void *)*v16) != 0)
  {
    if (v10.u32[0] >= 2uLL)
    {
      while (v17[1] != 0x8BD499FBD96FBB9ELL || v17[2] != 0x8BD499FBD96FBB9ELL)
        unsigned int v17 = (void *)*v17;
    }
    else
    {
      while (v17[1] != 0x8BD499FBD96FBB9ELL || v17[2] != 0x8BD499FBD96FBB9ELL)
        unsigned int v17 = (void *)*v17;
    }
    uint64_t v18 = *(void *)(v17[5] + 32);
    uint64_t v19 = v18 + 16;
    uint64_t v20 = v18 + 20;
  }
  else
  {
    uint64_t v19 = 16;
    uint64_t v20 = 20;
  }
  if (v10.u32[0] > 1uLL)
  {
    uint64_t v21 = 0x1AF456233693CD46;
    if (*(void *)&v9 <= 0x1AF456233693CD46uLL) {
      uint64_t v21 = 0x1AF456233693CD46uLL % *(void *)&v9;
    }
  }
  else
  {
    uint64_t v21 = (*(void *)&v9 - 1) & 0x1AF456233693CD46;
  }
  float v13 = *(float *)v19;
  float v14 = *(float *)v20;
  uint64_t v22 = *(void **)(v15 + 8 * v21);
  if (!v22) {
    goto LABEL_48;
  }
  unint64_t v23 = (void *)*v22;
  if (!v23) {
    goto LABEL_48;
  }
  if (v10.u32[0] < 2uLL)
  {
    uint64_t v24 = *(void *)&v9 - 1;
    while (1)
    {
      uint64_t v26 = v23[1];
      if (v26 == 0x1AF456233693CD46)
      {
        if (v23[2] == 0x1AF456233693CD46) {
          goto LABEL_46;
        }
      }
      else if ((v26 & v24) != v21)
      {
        goto LABEL_48;
      }
      unint64_t v23 = (void *)*v23;
      if (!v23) {
        goto LABEL_48;
      }
    }
  }
  while (1)
  {
    unint64_t v25 = v23[1];
    if (v25 == 0x1AF456233693CD46) {
      break;
    }
    if (v25 >= *(void *)&v9) {
      v25 %= *(void *)&v9;
    }
    if (v25 != v21) {
      goto LABEL_48;
    }
LABEL_35:
    unint64_t v23 = (void *)*v23;
    if (!v23) {
      goto LABEL_48;
    }
  }
  if (v23[2] != 0x1AF456233693CD46) {
    goto LABEL_35;
  }
LABEL_46:
  uint64_t v27 = v23[5];
  if (*(void *)(v27 + 8) == 0x1AF456233693CD46)
  {
    int v12 = *(double **)(v27 + 32);
    goto LABEL_49;
  }
LABEL_48:
  int v12 = 0;
LABEL_49:
  int v28 = (void *)md::LayoutContext::frameState(this);
  double v29 = v12[64];
  if (*((unsigned __int8 *)v28 + 128) - 1 > 2)
  {
    double v35 = v29 * 40075017.0;
  }
  else
  {
    double v30 = sqrt(v12[62] * v12[62] + v12[63] * v12[63]);
    double v31 = atan2(v12[64], v30 * 0.996647189);
    __double2 v32 = __sincos_stret(v31);
    double v33 = atan2(v29 + v32.__sinval * v32.__sinval * 42841.3115 * v32.__sinval, v30 + v32.__cosval * v32.__cosval * -42697.6727 * v32.__cosval);
    __double2 v34 = __sincos_stret(v33);
    double v35 = v30 / v34.__cosval + -6378137.0 / sqrt(v34.__sinval * v34.__sinval * -0.00669437999 + 1.0);
  }
  unint64_t v36 = *a2;
  uint64_t v37 = a2[1];
  if (*a2 != v37)
  {
    float v38 = v35;
    float v39 = (float)(fmaxf(v7 * v38, 1.0) + v6) * v14;
    do
    {
      uint64_t v40 = *v36++;
      uint64_t v41 = *(void *)(v40 + 384);
      md::BaseMapTileDataRenderable::adjustZScale(v40, v13, v14);
      int v28 = md::BaseMapTileDataRenderable::adjustZOffset(*(void **)(v40 + 232), v39 * *(float *)(v41 + 624));
    }
    while (v36 != v37);
  }
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::updateWithContext((uint64_t)v28, a2, (uint64_t)this);
}

void *md::DaVinciTrafficRenderLayer::layout(md::DaVinciTrafficRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  v170[0] = &unk_1EF5773B8;
  v170[1] = a2;
  v168[0] = &unk_1EF577400;
  v168[1] = a2;
  double v169 = v168;
  uint64_t v173 = v172;
  double v171 = v170;
  v172[0] = &unk_1EF577400;
  v172[1] = a2;
  std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v170);
  if (v169 == v168)
  {
    (*(void (**)(void *))(v168[0] + 32))(v168);
  }
  else if (v169)
  {
    (*(void (**)(void *))(*v169 + 40))(v169);
  }
  if (v171 == v170)
  {
    (*(void (**)(void *))(v170[0] + 32))(v170);
  }
  else if (v171)
  {
    (*(void (**)(void *))(*v171 + 40))(v171);
  }
  uint64_t v4 = *((void *)this + 44);
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0;
  int v5 = *(void **)(*(void *)(*((void *)this + 5) + 24) + 8);
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  if (v7 == v6)
  {
    uint64_t v21 = this;
    float v14 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    int8x8_t v9 = (unsigned __int8 *)*((void *)this + 48);
    while (1)
    {
      uint8x8_t v10 = *(unsigned __int8 **)(v6 + 8 * v8);
      if (*v10 == *v9)
      {
        unint64_t v11 = *((void *)v10 + 1);
        uint64_t v12 = v5[15];
        if (v11 < (v5[16] - v12) >> 3) {
          break;
        }
      }
      if (++v8 >= (unint64_t)((v7 - v6) >> 3)) {
        goto LABEL_17;
      }
    }
    uint64_t v13 = *(void *)(v12 + 8 * v11);
    if (v13)
    {
      float v14 = *(void **)(*(void *)(v13 + 24) + 8 * v9[1]);
      uint64_t v15 = v7 - v6;
      if (v7 == v6) {
        goto LABEL_24;
      }
    }
    else
    {
LABEL_17:
      float v14 = 0;
      uint64_t v15 = v7 - v6;
      if (v7 == v6)
      {
LABEL_24:
        uint64_t v21 = this;
        goto LABEL_26;
      }
    }
    uint64_t v16 = 0;
    unint64_t v17 = v15 >> 3;
    while (1)
    {
      uint64_t v18 = *(unsigned __int8 **)(v6 + 8 * v16);
      if (*v18 == v9[2])
      {
        unint64_t v19 = *((void *)v18 + 1);
        uint64_t v20 = v5[15];
        if (v19 < (v5[16] - v20) >> 3) {
          break;
        }
      }
      if (++v16 >= v17) {
        goto LABEL_24;
      }
    }
    uint64_t v21 = this;
    uint64_t v22 = *(void *)(v20 + 8 * v19);
    if (v22)
    {
      uint64_t v23 = *(void *)(*(void *)(v22 + 24) + 8 * v9[3]);
      goto LABEL_27;
    }
  }
LABEL_26:
  uint64_t v23 = 0;
LABEL_27:
  uint64_t v24 = (uint64_t *)operator new(0x10uLL);
  *uint64_t v24 = (uint64_t)v14;
  v24[1] = v23;
  uint64_t v25 = v14[9];
  if (v14[10] != v25) {
    v14[10] = v25;
  }
  v14[4] = 0;
  uint64_t v26 = (void *)v24[1];
  uint64_t v27 = v26[9];
  if (v26[10] != v27) {
    v26[10] = v27;
  }
  float64x2_t v140 = v24;
  v26[4] = 0;
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v145, a2);
  uint64_t v148 = 0;
  long long v149 = 0;
  memset_pattern16(&v150, &unk_1A28FFCB0, 0x10uLL);
  v151[21] = 0;
  *(void *)uint64_t v151 = 0;
  *(void *)&v151[8] = 0;
  *(_DWORD *)&v151[15] = 0;
  v151[16] = **((unsigned char **)a2 + 92);
  v151[17] = 1;
  int v28 = (void *)*((void *)a2 + 1);
  unint64_t v29 = v28[1];
  double v144 = a2;
  if ((v29 & (v29 - 1)) != 0)
  {
    unint64_t v31 = 0x1AF456233693CD46;
    if (v29 <= 0x1AF456233693CD46) {
      unint64_t v31 = 0x1AF456233693CD46 % v29;
    }
    double v30 = *(void **)(*v28 + 8 * v31);
    do
    {
      do
        double v30 = (void *)*v30;
      while (v30[1] != 0x1AF456233693CD46);
    }
    while (v30[2] != 0x1AF456233693CD46);
  }
  else
  {
    double v30 = *(void **)(*v28 + 8 * ((v29 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        double v30 = (void *)*v30;
      while (v30[1] != 0x1AF456233693CD46);
    }
    while (v30[2] != 0x1AF456233693CD46);
  }
  uint64_t v32 = *(void *)(v30[5] + 32);
  float v33 = fmaxf(*(float *)(v32 + 3080) + *(float *)(v32 + 3076), 1.0);
  *(float *)&v151[12] = v33;
  __double2 v34 = +[VKDebugSettings sharedSettings];
  [v34 daVinciGlobeSplinedMaxZoom];
  BOOL v36 = v33 <= v35 && *(unsigned __int8 *)(v32 + 3776) - 1 < 3;

  BYTE8(v146) = v36;
  uint64_t v37 = +[VKDebugSettings sharedSettings];
  v151[21] = [v37 showTrafficOffset];

  uint64_t v38 = *((void *)v21 + 34);
  uint64_t v143 = *((void *)v21 + 35);
  if (v38 == v143) {
    goto LABEL_178;
  }
  while (2)
  {
    float v39 = *(void **)v38;
    *(void *)&long long v147 = *(void *)(*(void *)v38 + 248);
    uint64_t v40 = (void *)v39[48];
    if (!v40) {
      goto LABEL_46;
    }
    uint64_t v141 = v140[1];
    uint64_t v142 = *v140;
    uint64_t v41 = v39[27];
    uint64_t v42 = v39[29];
    if ((*(unsigned char *)(v41 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      *(void *)&v152[0] = &__b;
      long long v166 = (uint64_t *)v152;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v166, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    unint64_t v43 = *(_DWORD **)(v41 + 72);
    double v44 = (void *)v40[90];
    unint64_t v45 = v44[1];
    double v46 = (_DWORD *)v44[9];
    *double v46 = *v43;
    v46[1] = v43[1];
    v46[2] = v43[2];
    v46[3] = v43[3];
    v46[4] = v43[4];
    v46[5] = v43[5];
    v46[6] = v43[6];
    v46[7] = v43[7];
    v46[8] = v43[8];
    v46[9] = v43[9];
    v46[10] = v43[10];
    v46[11] = v43[11];
    v46[12] = v43[12];
    v46[13] = v43[13];
    v46[14] = v43[14];
    v46[15] = v43[15];
    v46[16] = v43[16];
    unint64_t v47 = v44[8];
    if (v47 <= v45) {
      unint64_t v47 = v45;
    }
    v44[7] = 0;
    v44[8] = v47;
    uint64_t v48 = *(void *)(v42 + 8);
    if ((*(unsigned char *)(v42 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      *(void *)&v152[0] = &__b;
      long long v166 = (uint64_t *)v152;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v166, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    if (v48) {
      uint64_t v49 = *(__n128 **)(v42 + 72);
    }
    else {
      uint64_t v49 = 0;
    }
    uint64_t v50 = v40[92];
    unint64_t v51 = *(void *)(v50 + 8);
    if (v51)
    {
      ggl::Tile::Transform::operator=(*(__n128 **)(v50 + 72), v49);
      if (v52)
      {
        unint64_t v53 = *(void *)(v50 + 64);
        if (v53 <= v51) {
          unint64_t v53 = v51;
        }
        *(void *)(v50 + 56) = 0;
        *(void *)(v50 + 64) = v53;
      }
    }
    else
    {
      ggl::Tile::Transform::operator=(0, v49);
    }
    unint64_t v54 = (void *)*((void *)v144 + 1);
    unint64_t v55 = v54[1];
    if ((v55 & (v55 - 1)) != 0)
    {
      unint64_t v57 = 0xE42D19AFCA302E68;
      if (v55 <= 0xE42D19AFCA302E68) {
        unint64_t v57 = 0xE42D19AFCA302E68 % v55;
      }
      double v56 = *(void **)(*v54 + 8 * v57);
      do
      {
        do
          double v56 = (void *)*v56;
        while (v56[1] != 0xE42D19AFCA302E68);
      }
      while (v56[2] != 0xE42D19AFCA302E68);
    }
    else
    {
      double v56 = *(void **)(*v54 + 8 * ((v55 - 1) & 0xE42D19AFCA302E68));
      do
      {
        do
          double v56 = (void *)*v56;
        while (v56[1] != 0xE42D19AFCA302E68);
      }
      while (v56[2] != 0xE42D19AFCA302E68);
    }
    uint64_t v58 = **(void **)(v56[5] + 32);
    *(void *)((char *)v152 + 7) = 0;
    *(void *)&v152[0] = 0;
    HIBYTE(v152[0]) = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v166, v58, (gss::FeatureAttributeSet *)(v40 + 96), (gss::QueryOverrides *)v152);
    long long v59 = +[VKDebugSettings sharedSettings];
    int v60 = [v59 loadGreenTraffic];

    char v61 = v166;
    float v62 = v167;
    uint64_t v163 = v166;
    uint64_t v164 = v167;
    if (v167)
    {
      atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    md::TrafficMeshStyle::setup((int *)&__b, (uint64_t)v61, v62, v60);
    if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
      double v63 = v164;
      if (v164)
      {
LABEL_80:
        if (!atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
    }
    else
    {
      double v63 = v164;
      if (v164) {
        goto LABEL_80;
      }
    }
    double v64 = v166;
    unint64_t v65 = v167;
    double v161 = v166;
    uint64_t v162 = v167;
    if (v167) {
      atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v152, (uint64_t)v64, (uint64_t)v65);
    if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
    md::TrafficMeshStyle::overrideSetup((int *)&__b, (uint64_t)v152, v60, 4);
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v152);
    long long v153 = v145[3];
    long long v154 = v145[4];
    long long v155 = v146;
    long long v156 = v147;
    v152[0] = v145[0];
    v152[1] = v145[1];
    v152[2] = v145[2];
    long long v66 = v149;
    if (v149) {
      atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v159 = v150;
    *(_OWORD *)double v160 = *(_OWORD *)v151;
    *(void *)&v160[14] = *(void *)&v151[14];
    uint64_t v68 = v166;
    long long v67 = v167;
    if (v167) {
      atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float64x2_t v157 = v68;
    double v158 = v67;
    if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
    long long v159 = __b;
    BYTE9(v153) = 0;
    uint64_t v69 = +[VKDebugSettings sharedSettings];
    [v69 ribbonCrispness];
    DWORD1(v154) = v70;

    *(_WORD *)&v160[19] = 0;
    BYTE8(v156) = *((unsigned char *)v21 + 34) == 47;
    uint64_t v71 = (void *)*((void *)v144 + 1);
    int8x8_t v72 = (int8x8_t)v71[1];
    if (!*(void *)&v72) {
      goto LABEL_119;
    }
    uint8x8_t v73 = (uint8x8_t)vcnt_s8(v72);
    v73.i16[0] = vaddlv_u8(v73);
    if (v73.u32[0] > 1uLL)
    {
      unint64_t v74 = 0xDFC317497CF9A4BFLL;
      if (*(void *)&v72 <= 0xDFC317497CF9A4BFLL) {
        unint64_t v74 = 0xDFC317497CF9A4BFLL % *(void *)&v72;
      }
    }
    else
    {
      unint64_t v74 = (*(void *)&v72 - 1) & 0xDFC317497CF9A4BFLL;
    }
    long long v75 = *(void **)(*v71 + 8 * v74);
    if (!v75) {
      goto LABEL_119;
    }
    size_t v76 = (void *)*v75;
    if (!v76) {
      goto LABEL_119;
    }
    if (v73.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v78 = v76[1];
        if (v78 == 0xDFC317497CF9A4BFLL)
        {
          if (v76[2] == 0xDFC317497CF9A4BFLL) {
            goto LABEL_116;
          }
        }
        else if ((v78 & (*(void *)&v72 - 1)) != v74)
        {
          goto LABEL_119;
        }
        size_t v76 = (void *)*v76;
        if (!v76) {
          goto LABEL_119;
        }
      }
    }
    while (1)
    {
      unint64_t v77 = v76[1];
      if (v77 == 0xDFC317497CF9A4BFLL) {
        break;
      }
      if (v77 >= *(void *)&v72) {
        v77 %= *(void *)&v72;
      }
      if (v77 != v74) {
        goto LABEL_119;
      }
LABEL_105:
      size_t v76 = (void *)*v76;
      if (!v76) {
        goto LABEL_119;
      }
    }
    if (v76[2] != 0xDFC317497CF9A4BFLL) {
      goto LABEL_105;
    }
LABEL_116:
    uint64_t v79 = v76[5];
    if (*(void *)(v79 + 8) != 0xDFC317497CF9A4BFLL)
    {
LABEL_119:
      LOBYTE(v80) = 0;
      goto LABEL_120;
    }
    uint64_t v80 = *(void *)(v79 + 32);
    if (v80) {
      LOBYTE(v80) = *(unsigned char *)(v80 + 64) != 0;
    }
LABEL_120:
    BYTE12(v154) = v80;
    uint64_t v81 = *(void *)(*((void *)v21 + 5) + 24);
    uint64_t v82 = *(void *)(v81 + 160);
    if (v82
      && (uint64_t v83 = *(void *)(v81 + 8),
          unint64_t v84 = *(void *)(v82 + 32),
          uint64_t v85 = *(void *)(v83 + 96),
          v84 < (*(void *)(v83 + 104) - v85) >> 3))
    {
      uint64_t v86 = *(void *)(*(void *)(v85 + 8 * v84) + 16);
      *(void *)&long long v155 = v86;
      if (!*(void *)&v72) {
        goto LABEL_155;
      }
    }
    else
    {
      uint64_t v86 = 0;
      *(void *)&long long v155 = 0;
      if (!*(void *)&v72) {
        goto LABEL_155;
      }
    }
    uint8x8_t v87 = (uint8x8_t)vcnt_s8(v72);
    v87.i16[0] = vaddlv_u8(v87);
    if (v87.u32[0] > 1uLL)
    {
      unint64_t v88 = 0xA60DDA5A69582425;
      if (*(void *)&v72 <= 0xA60DDA5A69582425) {
        unint64_t v88 = 0xA60DDA5A69582425 % *(void *)&v72;
      }
    }
    else
    {
      unint64_t v88 = (*(void *)&v72 - 1) & 0xA60DDA5A69582425;
    }
    long long v89 = *(void **)(*v71 + 8 * v88);
    if (v89)
    {
      uint64_t v90 = (void *)*v89;
      if (v90)
      {
        if (v87.u32[0] < 2uLL)
        {
          uint64_t v91 = *(void *)&v72 - 1;
          while (1)
          {
            uint64_t v93 = v90[1];
            if (v93 == 0xA60DDA5A69582425)
            {
              if (v90[2] == 0xA60DDA5A69582425) {
                goto LABEL_145;
              }
            }
            else if ((v93 & v91) != v88)
            {
              goto LABEL_155;
            }
            uint64_t v90 = (void *)*v90;
            if (!v90) {
              goto LABEL_155;
            }
          }
        }
        do
        {
          unint64_t v92 = v90[1];
          if (v92 == 0xA60DDA5A69582425)
          {
            if (v90[2] == 0xA60DDA5A69582425)
            {
LABEL_145:
              uint64_t v94 = v90[5];
              if (*(void *)(v94 + 8) == 0xA60DDA5A69582425)
              {
                uint64_t v95 = *(id **)(v94 + 32);
                if (v95 && v86 == 0)
                {
                  id v97 = *v95;
                  [v97 textureManager];
                  uint64_t v98 = v162;
                  *(void *)&long long v155 = *v161;
                  if (v162 && !atomic_fetch_add(&v162->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
              }
              break;
            }
          }
          else
          {
            if (v92 >= *(void *)&v72) {
              v92 %= *(void *)&v72;
            }
            if (v92 != v88) {
              break;
            }
          }
          uint64_t v90 = (void *)*v90;
        }
        while (v90);
      }
    }
LABEL_155:
    uint64_t v99 = v40[95];
    uint64_t v100 = v40[94];
    char v101 = **((unsigned char **)v144 + 92);
    if (v99)
    {
      v160[16] = 0;
      uint64_t v102 = *(void *)(v99 + 152);
      uint64_t v103 = *((void *)v21 + 47);
      if (v102) {
        BOOL v104 = v102 == v103;
      }
      else {
        BOOL v104 = 0;
      }
      if (!v104)
      {
        *(void *)(v99 + 152) = v103;
        long long v105 = *(uint64_t **)(v99 + 8);
        for (uint64_t i = *(uint64_t **)(v99 + 16);
              v105 != i;
              **(void **)(*(void *)(v107 + 328) + 96) = *(void *)(*(void *)(*(void *)(*(void *)(v107 + 8)
                                                                                                + 152)
                                                                                    + 128)
                                                                        + 16))
        {
          uint64_t v107 = *v105++;
        }
      }
      md::DaVinciTrafficLayer::layout((md::DaVinciTrafficLayer *)v99, (const md::TrafficContext *)v152);
      md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(*(uint64_t **)(v99 + 8), *(uint64_t **)(v99 + 16), v142, v108);
    }
    if (v100)
    {
      v160[16] = v101;
      uint64_t v109 = *(void *)(v100 + 152);
      uint64_t v110 = *((void *)v21 + 47);
      if (v109) {
        BOOL v111 = v109 == v110;
      }
      else {
        BOOL v111 = 0;
      }
      if (!v111)
      {
        *(void *)(v100 + 152) = v110;
        uint64_t v112 = *(uint64_t **)(v100 + 8);
        for (j = *(uint64_t **)(v100 + 16);
              v112 != j;
              **(void **)(*(void *)(v114 + 328) + 96) = *(void *)(*(void *)(*(void *)(*(void *)(v114 + 8)
                                                                                                + 152)
                                                                                    + 128)
                                                                        + 16))
        {
          uint64_t v114 = *v112++;
        }
      }
      md::DaVinciTrafficLayer::layout((md::DaVinciTrafficLayer *)v100, (const md::TrafficContext *)v152);
      md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(*(uint64_t **)(v100 + 8), *(uint64_t **)(v100 + 16), v141, v115);
    }
    long long v116 = v158;
    if (v158 && !atomic_fetch_add(&v158->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
      uint64_t v117 = v167;
      if (v167) {
        goto LABEL_174;
      }
    }
    else
    {
      uint64_t v117 = v167;
      if (v167)
      {
LABEL_174:
        if (!atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
    }
LABEL_46:
    v38 += 8;
    if (v38 != v143) {
      continue;
    }
    break;
  }
LABEL_178:
  if (*(void *)(*v140 + 80) == *(void *)(*v140 + 72)) {
    uint64_t v118 = 0;
  }
  else {
    uint64_t v118 = *((void *)v21 + 46);
  }
  *(void *)(*v140 + 32) = v118;
  uint64_t v119 = (void *)*((void *)v144 + 1);
  unint64_t v120 = v119[1];
  if ((v120 & (v120 - 1)) != 0)
  {
    unint64_t v122 = 0xE42D19AFCA302E68;
    if (v120 <= 0xE42D19AFCA302E68) {
      unint64_t v122 = 0xE42D19AFCA302E68 % v120;
    }
    uint64_t v121 = *(void **)(*v119 + 8 * v122);
    do
    {
      do
        uint64_t v121 = (void *)*v121;
      while (v121[1] != 0xE42D19AFCA302E68);
    }
    while (v121[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    uint64_t v121 = *(void **)(*v119 + 8 * ((v120 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        uint64_t v121 = (void *)*v121;
      while (v121[1] != 0xE42D19AFCA302E68);
    }
    while (v121[2] != 0xE42D19AFCA302E68);
  }
  unsigned int v123 = *(_DWORD *)(*(void *)(v121[5] + 32) + 88);
  BOOL v124 = v123 > 0xA;
  int v125 = (1 << v123) & 0x49E;
  if (v124 || v125 == 0)
  {
    uint64_t v128 = 0;
    uint64_t v127 = (void *)v140[1];
  }
  else
  {
    uint64_t v127 = (void *)v140[1];
    if (v127[10] == v127[9]) {
      uint64_t v128 = 0;
    }
    else {
      uint64_t v128 = *((void *)v21 + 46);
    }
  }
  v127[4] = v128;
  unint64_t v129 = *(void *)(*v140 + 72);
  long long v130 = *(uint64_t **)(*v140 + 80);
  unint64_t v131 = 126 - 2 * __clz((uint64_t)((uint64_t)v130 - v129) >> 3);
  if (v130 == (uint64_t *)v129) {
    uint64_t v132 = 0;
  }
  else {
    uint64_t v132 = v131;
  }
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v129, v130, v132, 1);
  uint64_t v133 = v140[1];
  unint64_t v134 = *(void *)(v133 + 72);
  uint64_t v135 = *(uint64_t **)(v133 + 80);
  unint64_t v136 = 126 - 2 * __clz((uint64_t)((uint64_t)v135 - v134) >> 3);
  if (v135 == (uint64_t *)v134) {
    uint64_t v137 = 0;
  }
  else {
    uint64_t v137 = v136;
  }
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v134, v135, v137, 1);
  uint64_t v138 = v149;
  if (v149 && !atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
    std::__shared_weak_count::__release_weak(v138);
  }
  operator delete(v140);
  if (!v173)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v173 + 48))(v173);
  float result = v173;
  if (v173 == v172) {
    return (void *)(*(uint64_t (**)(void *))(v172[0] + 32))(v172);
  }
  if (v173) {
    return (void *)(*(uint64_t (**)(void))(*v173 + 40))();
  }
  return result;
}

void sub_1A21E2014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,char a60)
{
  md::TrafficContext::~TrafficContext((md::TrafficContext *)&a37);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v61 - 232);
  md::TrafficContext::~TrafficContext((md::TrafficContext *)&a16);
  operator delete(__p);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v61 - 152));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "DaVinciTrafficLayout", "", v5, 2u);
  }
}

uint64_t md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(uint64_t *a1, uint64_t *a2, uint64_t a3, __n128 a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  os_signpost_id_t v4 = (uint64_t (**)(void *))&unk_1EF5790B0;
  v74[0] = &unk_1EF5790B0;
  v74[1] = a3;
  long long v75 = v74;
  if (a1 == a2) {
    return v4[4](v74);
  }
  int v5 = a1;
  do
  {
    uint64_t v6 = *v5;
    uint64_t v7 = (uint64_t)v75;
    if (!v75) {
      goto LABEL_8;
    }
    if (v75 != v74)
    {
      uint64_t v7 = (*(uint64_t (**)(void *))(*v75 + 16))(v75);
LABEL_8:
      unint64_t v77 = (void *)v7;
      goto LABEL_10;
    }
    unint64_t v77 = v76;
    (*(void (**)(void *, void *))(v74[0] + 24))(v74, v76);
LABEL_10:
    if (!*(unsigned char *)(v6 + 272)) {
      goto LABEL_66;
    }
    uint64_t v9 = *(void *)(v6 + 168);
    uint64_t v8 = *(void *)(v6 + 176);
    if (v8 != v9)
    {
      uint64_t v10 = *(void *)(v6 + 176);
      do
      {
        uint64_t v12 = *(void **)(v10 - 24);
        v10 -= 24;
        unint64_t v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 16) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v9);
    }
    *(void *)(v6 + 176) = v9;
    *(void *)(v6 + 152) = *(void *)(v6 + 144);
    uint64_t v13 = *(void **)(v6 + 224);
    if (v13)
    {
      do
      {
        if (v13[1])
        {
          unint64_t v15 = 0;
          uint64_t v16 = v13 + 2;
          unint64_t v17 = v13 + 2;
          uint64_t v18 = (void (***)(void))(v13 + 2);
          do
          {
            unint64_t v19 = (void (**)(void *))*v18;
            v18 += 15;
            (*v19)(v17);
            ++v15;
            v16 += 15;
            unint64_t v17 = v18;
          }
          while (v15 < v13[1]);
        }
        v13[1] = 0;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
      uint64_t v14 = *(void *)(v6 + 224);
    }
    else
    {
      uint64_t v14 = 0;
    }
    *(void *)(v6 + 232) = v14;
    uint64_t v20 = (uint64_t)v77;
    if (v77)
    {
      if (v77 == v76)
      {
        uint64_t v79 = v78;
        (*(void (**)(void *, void *))(v76[0] + 24))(v76, v78);
        goto LABEL_29;
      }
      uint64_t v20 = (*(uint64_t (**)(void *))(*v77 + 16))(v77);
    }
    uint64_t v79 = (void *)v20;
LABEL_29:
    if (*(unsigned char *)(v6 + 272))
    {
      if (*(unsigned char *)(v6 + 136))
      {
        uint64_t v21 = *(void *)(*(void *)(v6 + 8) + 56);
        *(void *)(v6 + 40) = v21;
        BOOL v22 = *(unsigned __int8 *)(v21 + 58) == 1;
      }
      else
      {
        BOOL v22 = 0;
      }
      uint64_t v23 = *(uint64_t **)(v6 + 248);
      uint64_t v24 = *(uint64_t **)(v6 + 256);
      if (v23 != v24)
      {
        uint64_t v25 = 0;
        while (1)
        {
          uint64_t v26 = *v23;
          if (*(unsigned char *)(*v23 + 48))
          {
            if (*(void *)(v26 + 88) != v25)
            {
              if (v25)
              {
                uint64_t v27 = ggl::Batcher::commit((long long **)(v6 + 144), 0xC8u, a4);
                if (v27[1] != *v27)
                {
                  if (*(unsigned char *)(v6 + 136))
                  {
                    int v28 = v27;
                    long long v30 = *(_OWORD *)(v6 + 24);
                    long long v29 = *(_OWORD *)(v6 + 40);
                    long long v31 = *(_OWORD *)(v6 + 56);
                    long long v32 = *(_OWORD *)(v6 + 72);
                    long long v33 = *(_OWORD *)(v6 + 88);
                    long long v34 = *(_OWORD *)(v6 + 120);
                    long long v72 = *(_OWORD *)(v6 + 104);
                    long long v73 = v34;
                    long long v66 = &off_1EF55A458;
                    long long v67 = v30;
                    long long v68 = v29;
                    long long v70 = v32;
                    long long v71 = v33;
                    long long v69 = v31;
                    float v35 = *(void **)(v6 + 232);
                    uint64_t v36 = v35[1];
                    if (v36 == *(void *)(v6 + 240))
                    {
                      float v35 = (void *)*v35;
                      if (!v35)
                      {
                        float v35 = malloc_type_malloc(120 * v36 + 16, 0xB644C221uLL);
                        *float v35 = 0;
                        v35[1] = 0;
                        **(void **)(v6 + 232) = v35;
                      }
                      *(void *)(v6 + 232) = v35;
                      uint64_t v36 = v35[1];
                    }
                    uint64_t v37 = &v35[15 * v36];
                    v35[1] = v36 + 1;
                    v37[2] = &off_1EF55A458;
                    long long v38 = v72;
                    long long v39 = v73;
                    long long v40 = v71;
                    *(_OWORD *)(v37 + 9) = v70;
                    long long v41 = v67;
                    long long v42 = v68;
                    *(_OWORD *)(v37 + 7) = v69;
                    *(_OWORD *)(v37 + 5) = v42;
                    *(_OWORD *)(v37 + 3) = v41;
                    *(_OWORD *)(v37 + 15) = v39;
                    *(_OWORD *)(v37 + 13) = v38;
                    *(_OWORD *)(v37 + 11) = v40;
                    v37[10] = v25;
                    unint64_t v43 = *v28;
                    v37[13] = *v28;
                    v37[14] = (v28[1] - v43) >> 4;
                    int v65 = 0;
                    long long v66 = (void (**)(ggl::RenderItem *__hidden))(v37 + 2);
                    if (!v79) {
                      goto LABEL_75;
                    }
                    (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v79 + 48))(v79, &v65, &v66);
                  }
                }
              }
              uint64_t v26 = *v23;
              uint64_t v25 = *(void *)(*v23 + 88);
            }
            uint64_t v44 = 16;
            if (v22)
            {
              uint64_t v44 = 32;
              uint64_t v45 = v26 + 32;
            }
            else
            {
              uint64_t v45 = v26 + 16;
            }
            if (*(void *)(v45 + 8) != *(void *)(v26 + v44)) {
              gm::MultiRange<unsigned long>::push_back((char **)(v6 + 144), (_OWORD *)v45);
            }
          }
          if (++v23 == v24) {
            goto LABEL_54;
          }
        }
      }
      uint64_t v25 = 0;
LABEL_54:
      double v46 = ggl::Batcher::commit((long long **)(v6 + 144), 0xC8u, a4);
      if (v46[1] != *v46 && *(unsigned char *)(v6 + 136))
      {
        unint64_t v47 = v46;
        long long v48 = *(_OWORD *)(v6 + 40);
        long long v49 = *(_OWORD *)(v6 + 24);
        long long v50 = *(_OWORD *)(v6 + 56);
        long long v51 = *(_OWORD *)(v6 + 72);
        long long v52 = *(_OWORD *)(v6 + 88);
        long long v53 = *(_OWORD *)(v6 + 120);
        long long v72 = *(_OWORD *)(v6 + 104);
        long long v73 = v53;
        long long v66 = &off_1EF55A458;
        long long v67 = v49;
        long long v68 = v48;
        long long v70 = v51;
        long long v71 = v52;
        long long v69 = v50;
        unint64_t v54 = *(void **)(v6 + 232);
        uint64_t v55 = v54[1];
        if (v55 == *(void *)(v6 + 240))
        {
          unint64_t v54 = (void *)*v54;
          if (!v54)
          {
            unint64_t v54 = malloc_type_malloc(120 * v55 + 16, 0xB644C221uLL);
            void *v54 = 0;
            v54[1] = 0;
            **(void **)(v6 + 232) = v54;
          }
          *(void *)(v6 + 232) = v54;
          uint64_t v55 = v54[1];
        }
        double v56 = &v54[15 * v55];
        v54[1] = v55 + 1;
        __int16 v56[2] = &off_1EF55A458;
        long long v57 = v72;
        long long v58 = v73;
        long long v59 = v71;
        *(_OWORD *)(v56 + 9) = v70;
        long long v60 = v67;
        long long v61 = v68;
        *(_OWORD *)(v56 + 7) = v69;
        *(_OWORD *)(v56 + 5) = v61;
        *(_OWORD *)(v56 + 3) = v60;
        *(_OWORD *)(v56 + 15) = v58;
        *(_OWORD *)(v56 + 13) = v57;
        *(_OWORD *)(v56 + 11) = v59;
        v56[10] = v25;
        float v62 = *v47;
        v56[13] = *v47;
        v56[14] = (v47[1] - v62) >> 4;
        int v65 = 0;
        long long v66 = (void (**)(ggl::RenderItem *__hidden))(v56 + 2);
        if (!v79)
        {
LABEL_75:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
        }
        (*(void (**)(void *, int *, void (***)(ggl::RenderItem *__hidden)))(*v79 + 48))(v79, &v65, &v66);
      }
    }
    if (v79 == v78)
    {
      (*(void (**)(void *))(v78[0] + 32))(v78);
    }
    else if (v79)
    {
      (*(void (**)(void))(*v79 + 40))();
    }
LABEL_66:
    if (v77 == v76)
    {
      (*(void (**)(void *))(v76[0] + 32))(v76);
    }
    else if (v77)
    {
      (*(void (**)(void))(*v77 + 40))();
    }
    ++v5;
  }
  while (v5 != a2);
  uint64_t result = (uint64_t)v75;
  if (v75 == v74)
  {
    os_signpost_id_t v4 = (uint64_t (**)(void *))v74[0];
    return v4[4](v74);
  }
  if (v75) {
    return (*(uint64_t (**)(void))(*v75 + 40))();
  }
  return result;
}

void sub_1A21E2A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::function<void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::~function((void *)(v27 - 128));
  std::function<void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::~function((void *)(v27 - 160));
  std::function<void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::~function(&a27);
  _Unwind_Resume(a1);
}

void *std::function<void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(void *)(a1 + 8), *a3);
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5790B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5790B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DaVinciTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "DaVinciTrafficLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF577400;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF577400;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5773B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5773B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciTrafficRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::DaVinciTrafficRenderLayer::~DaVinciTrafficRenderLayer(md::DaVinciTrafficRenderLayer *this)
{
  *(void *)this = &unk_1EF546498;
  uint64_t v2 = (void *)*((void *)this + 48);
  if (v2)
  {
    *((void *)this + 49) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x1000C4049ECCB0CLL);
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledVectorRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF546498;
  uint64_t v2 = (void *)*((void *)this + 48);
  if (v2)
  {
    *((void *)this + 49) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v3) {
    MEMORY[0x1A6239270](v3, 0x1000C4049ECCB0CLL);
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::~CartographicTiledVectorRenderLayer(this);
}

void ggl::LandmarkDepth::BuildingPipelineState::~BuildingPipelineState(ggl::LandmarkDepth::BuildingPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  os_signpost_id_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  os_signpost_id_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::LandmarkDepth::BuildingPipelineSetup::textureIsEnabled(ggl::LandmarkDepth::BuildingPipelineSetup *this)
{
  return 0;
}

BOOL ggl::LandmarkDepth::BuildingPipelineSetup::constantDataIsEnabled(ggl::LandmarkDepth::BuildingPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::LandmarkDepth::BuildingPipelineSetup::~BuildingPipelineSetup(ggl::LandmarkDepth::BuildingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ___ZNK2md23TiledGEOResourceFetcher13getTileLoaderEv_block_invoke()
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F64AD0]);
  [v2 setServerProxyClass:objc_opt_class()];
  [v2 setDiskCacheLocation:0];
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F64AC8]) initWithConfiguration:v2];
  uint64_t v1 = (void *)md::TiledGEOResourceFetcher::getTileLoader(void)const::loader;
  md::TiledGEOResourceFetcher::getTileLoader(void)const::loader = v0;

  [(id)md::TiledGEOResourceFetcher::getTileLoader(void)const::loader registerTileLoader:objc_opt_class()];
}

void sub_1A21E31B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

float *md::TiledGEOResourceFetcher::setContentScale(float *this, float a2)
{
  if (this[2] != a2)
  {
    this[2] = a2;
    return (float *)(*(uint64_t (**)(void))(*(void *)this + 104))();
  }
  return this;
}

void *md::TiledGEOResourceFetcher::tileSetInfo@<X0>(md::TiledGEOResourceFetcher *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (void *)*((void *)this + 76);
  if (result)
  {
    uint64_t v5 = [result style];
    uint64_t result = (void *)[*((id *)this + 76) version];
    *(void *)(a2 + 4) = result | (unint64_t)(v5 << 32);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
  }
  *(unsigned char *)a2 = v6;
  return result;
}

void md::TiledGEOResourceFetcher::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  gdc::ResourceFetcher::createDebugNode((void *)a1, a2, a3);
  v41[23] = 12;
  strcpy(v41, "Preload Only");
  uint64_t v5 = *(unsigned __int8 *)(a1 + 552);
  int v40 = 0;
  memset(&v39[4], 0, 24);
  v39[0] = v5;
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v39);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 553);
  v41[23] = 12;
  strcpy(v41, "Require Wifi");
  int v38 = 0;
  memset(&v37[4], 0, 24);
  v37[0] = v6;
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v37);
  float v7 = *(float *)(a1 + 8);
  v41[23] = 13;
  strcpy(v41, "Content Scale");
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  int v36 = 2;
  double v32 = v7;
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v31);
  uint64_t v8 = (char *)operator new(0x20uLL);
  *(void *)long long v41 = v8;
  *(_OWORD *)&v41[8] = xmmword_1A28FCDC0;
  strcpy(v8, "Tile Loader Client Identifier");
  uint64_t v9 = *(void **)(a1 + 464);
  if (v9)
  {
    uint64_t v10 = (const std::string::value_type *)[v9 UTF8String];
    memset(&__p, 0, sizeof(__p));
    int v30 = 4;
    if (v10)
    {
      std::string::__assign_external(&__p, v10);
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
      qmemcpy(&__p, "<null>", 6);
    }
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    int v30 = 4;
    std::string::__assign_external(&__p, "null");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9) {

  }
  operator delete(v8);
  unint64_t v11 = (char *)operator new(0x30uLL);
  *(void *)long long v41 = v11;
  *(_OWORD *)&v41[8] = xmmword_1A28FD510;
  strcpy(v11, "Preliminary Tile Loader Client Identifier");
  uint64_t v12 = *(void **)(a1 + 488);
  if (v12)
  {
    uint64_t v13 = (const std::string::value_type *)[v12 UTF8String];
    memset(&v26, 0, sizeof(v26));
    int v27 = 4;
    if (v13)
    {
      std::string::__assign_external(&v26, v13);
    }
    else
    {
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 6;
      qmemcpy(&v26, "<null>", 6);
    }
  }
  else
  {
    memset(&v26, 0, sizeof(v26));
    int v27 = 4;
    std::string::__assign_external(&v26, "null");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v25);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v12) {

  }
  operator delete(v11);
  v41[23] = 10;
  strcpy(v41, "Tile Style");
  uint64_t v14 = @"RASTER_STANDARD";
  switch(*(_DWORD *)(a1 + 556))
  {
    case 0:
      break;
    case 1:
      uint64_t v14 = @"VECTOR_STANDARD";
      break;
    case 2:
      uint64_t v14 = @"VECTOR_TRAFFIC_SEGMENTS_FOR_RASTER";
      break;
    case 3:
      uint64_t v14 = @"VECTOR_TRAFFIC_INCIDENTS_FOR_RASTER";
      break;
    case 4:
      uint64_t v14 = @"VECTOR_TRAFFIC_SEGMENTS_AND_INCIDENTS_FOR_RASTER";
      break;
    case 5:
      uint64_t v14 = @"RASTER_STANDARD_BACKGROUND";
      break;
    case 6:
      uint64_t v14 = @"RASTER_HYBRID";
      break;
    case 7:
      uint64_t v14 = @"RASTER_SATELLITE";
      break;
    case 8:
      uint64_t v14 = @"RASTER_TERRAIN";
      break;
    case 0xB:
      uint64_t v14 = @"VECTOR_BUILDINGS";
      break;
    case 0xC:
      uint64_t v14 = @"VECTOR_TRAFFIC";
      break;
    case 0xD:
      uint64_t v14 = @"VECTOR_POI";
      break;
    case 0xE:
      uint64_t v14 = @"SPUTNIK_METADATA";
      break;
    case 0xF:
      uint64_t v14 = @"SPUTNIK_C3M";
      break;
    case 0x10:
      uint64_t v14 = @"SPUTNIK_DSM";
      break;
    case 0x11:
      uint64_t v14 = @"SPUTNIK_DSM_GLOBAL";
      break;
    case 0x12:
      uint64_t v14 = @"VECTOR_REALISTIC";
      break;
    case 0x13:
      uint64_t v14 = @"VECTOR_LEGACY_REALISTIC";
      break;
    case 0x14:
      uint64_t v14 = @"VECTOR_ROADS";
      break;
    case 0x15:
      uint64_t v14 = @"RASTER_VEGETATION";
      break;
    case 0x16:
      uint64_t v14 = @"VECTOR_TRAFFIC_SKELETON";
      break;
    case 0x17:
      uint64_t v14 = @"RASTER_COASTLINE_MASK";
      break;
    case 0x18:
      uint64_t v14 = @"RASTER_HILLSHADE";
      break;
    case 0x19:
      uint64_t v14 = @"VECTOR_TRAFFIC_WITH_GREEN";
      break;
    case 0x1A:
      uint64_t v14 = @"VECTOR_TRAFFIC_STATIC";
      break;
    case 0x1B:
      uint64_t v14 = @"RASTER_COASTLINE_DROP_MASK";
      break;
    case 0x1C:
      uint64_t v14 = @"VECTOR_TRAFFIC_SKELETON_WITH_HISTORICAL";
      break;
    case 0x1D:
      uint64_t v14 = @"VECTOR_SPEED_PROFILES";
      break;
    case 0x1E:
      uint64_t v14 = @"VECTOR_VENUES";
      break;
    case 0x1F:
      uint64_t v14 = @"RASTER_DOWN_SAMPLED";
      break;
    case 0x20:
      uint64_t v14 = @"RASTER_COLOR_BALANCED";
      break;
    case 0x21:
      uint64_t v14 = @"RASTER_SATELLITE_NIGHT";
      break;
    case 0x22:
      uint64_t v14 = @"SPUTNIK_VECTOR_BORDER";
      break;
    case 0x23:
      uint64_t v14 = @"RASTER_SATELLITE_DIGITIZE";
      break;
    case 0x24:
      uint64_t v14 = @"RASTER_HILLSHADE_PARKS";
      break;
    case 0x25:
      uint64_t v14 = @"VECTOR_TRANSIT";
      break;
    case 0x26:
      uint64_t v14 = @"RASTER_STANDARD_BASE";
      break;
    case 0x27:
      uint64_t v14 = @"RASTER_STANDARD_LABELS";
      break;
    case 0x28:
      uint64_t v14 = @"RASTER_HYBRID_ROADS";
      break;
    case 0x29:
      uint64_t v14 = @"RASTER_HYBRID_LABELS";
      break;
    case 0x2A:
      uint64_t v14 = @"FLYOVER_C3M_MESH";
      break;
    case 0x2B:
      uint64_t v14 = @"FLYOVER_C3M_JPEG_TEXTURE";
      break;
    case 0x2C:
      uint64_t v14 = @"FLYOVER_C3M_ASTC_TEXTURE";
      break;
    case 0x2D:
      uint64_t v14 = @"RASTER_SATELLITE_ASTC";
      break;
    case 0x2E:
      uint64_t v14 = @"RASTER_HYBRID_ROADS_AND_LABELS";
      break;
    case 0x2F:
      uint64_t v14 = @"VECTOR_TRANSIT_SELECTION";
      break;
    case 0x30:
      uint64_t v14 = @"VECTOR_COVERAGE";
      break;
    case 0x34:
      uint64_t v14 = @"FLYOVER_METADATA";
      break;
    case 0x35:
      uint64_t v14 = @"VECTOR_ROAD_NETWORK";
      break;
    case 0x36:
      uint64_t v14 = @"VECTOR_LAND_COVER";
      break;
    case 0x37:
      uint64_t v14 = @"VECTOR_DEBUG";
      break;
    case 0x38:
      uint64_t v14 = @"VECTOR_STREET_POI";
      break;
    case 0x39:
      uint64_t v14 = @"MUNIN_METADATA";
      break;
    case 0x3A:
      uint64_t v14 = @"VECTOR_SPR_MERCATOR";
      break;
    case 0x3B:
      uint64_t v14 = @"VECTOR_SPR_MODELS";
      break;
    case 0x3C:
      uint64_t v14 = @"VECTOR_SPR_MATERIALS";
      break;
    case 0x3D:
      uint64_t v14 = @"VECTOR_SPR_METADATA";
      break;
    case 0x3E:
      uint64_t v14 = @"VECTOR_TRACKS";
      break;
    case 0x3F:
      uint64_t v14 = @"VECTOR_RESERVED_2";
      break;
    case 0x40:
      uint64_t v14 = @"VECTOR_STREET_LANDMARKS";
      break;
    case 0x41:
      uint64_t v14 = @"COARSE_LOCATION_POLYGONS";
      break;
    case 0x42:
      uint64_t v14 = @"VECTOR_SPR_ROADS";
      break;
    case 0x43:
      uint64_t v14 = @"VECTOR_SPR_STANDARD";
      break;
    case 0x44:
      uint64_t v14 = @"VECTOR_POI_V2";
      break;
    case 0x45:
      uint64_t v14 = @"VECTOR_POLYGON_SELECTION";
      break;
    case 0x46:
      uint64_t v14 = @"VL_METADATA";
      break;
    case 0x47:
      uint64_t v14 = @"VL_DATA";
      break;
    case 0x48:
      uint64_t v14 = @"PROACTIVE_APP_CLIP";
      break;
    case 0x49:
      uint64_t v14 = @"VECTOR_BUILDINGS_V2";
      break;
    case 0x4A:
      uint64_t v14 = @"POI_BUSYNESS";
      break;
    case 0x4B:
      uint64_t v14 = @"POI_DP_BUSYNESS";
      break;
    case 0x4C:
      uint64_t v14 = @"SMART_INTERFACE_SELECTION";
      break;
    case 0x4D:
      uint64_t v14 = @"VECTOR_ASSETS";
      break;
    case 0x4E:
      uint64_t v14 = @"SPR_ASSET_METADATA";
      break;
    case 0x4F:
      uint64_t v14 = @"VECTOR_SPR_POLAR";
      break;
    case 0x50:
      uint64_t v14 = @"SMART_DATA_MODE";
      break;
    case 0x51:
      uint64_t v14 = @"CELLULAR_PERFORMANCE_SCORE";
      break;
    case 0x52:
      uint64_t v14 = @"VECTOR_SPR_MODELS_OCCLUSION";
      break;
    case 0x53:
      uint64_t v14 = @"VECTOR_TOPOGRAPHIC";
      break;
    case 0x54:
      uint64_t v14 = @"VECTOR_POI_V2_UPDATE";
      break;
    case 0x55:
      uint64_t v14 = @"VECTOR_LIVE_DATA_UPDATES";
      break;
    case 0x56:
      uint64_t v14 = @"VECTOR_TRAFFIC_V2";
      break;
    case 0x57:
      uint64_t v14 = @"VECTOR_ROAD_SELECTION";
      break;
    case 0x58:
      uint64_t v14 = @"VECTOR_REGION_METADATA";
      break;
    case 0x59:
      uint64_t v14 = @"RAY_TRACING";
      break;
    case 0x5A:
      uint64_t v14 = @"VECTOR_CONTOURS";
      break;
    case 0x5B:
      uint64_t v14 = @"RASTER_SATELLITE_POLAR";
      break;
    case 0x5C:
      uint64_t v14 = @"VMAP4_ELEVATION";
      break;
    case 0x5D:
      uint64_t v14 = @"VMAP4_ELEVATION_POLAR";
      break;
    case 0x5E:
      uint64_t v14 = @"CELLULAR_COVERAGE_PLMN";
      break;
    case 0x5F:
      uint64_t v14 = @"RASTER_SATELLITE_POLAR_NIGHT";
      break;
    case 0x60:
      uint64_t v14 = @"UNUSED_96";
      break;
    case 0x61:
      uint64_t v14 = @"UNUSED_97";
      break;
    case 0x62:
      uint64_t v14 = @"UNUSED_98";
      break;
    case 0x63:
      uint64_t v14 = @"UNUSED_99";
      break;
    case 0x64:
      uint64_t v14 = @"UNUSED_100";
      break;
    case 0x65:
      uint64_t v14 = @"UNUSED_101";
      break;
    case 0x66:
      uint64_t v14 = @"UNUSED_102";
      break;
    case 0x67:
      uint64_t v14 = @"UNUSED_103";
      break;
    case 0x68:
      uint64_t v14 = @"UNUSED_104";
      break;
    case 0x69:
      uint64_t v14 = @"UNUSED_105";
      break;
    case 0x6A:
      uint64_t v14 = @"UNUSED_106";
      break;
    case 0x6B:
      uint64_t v14 = @"UNUSED_107";
      break;
    case 0x6C:
      uint64_t v14 = @"UNUSED_108";
      break;
    case 0x6D:
      uint64_t v14 = @"UNUSED_109";
      break;
    case 0x6E:
      uint64_t v14 = @"UNUSED_110";
      break;
    case 0x6F:
      uint64_t v14 = @"UNUSED_111";
      break;
    case 0x70:
      uint64_t v14 = @"UNUSED_112";
      break;
    case 0x71:
      uint64_t v14 = @"UNUSED_113";
      break;
    case 0x72:
      uint64_t v14 = @"UNUSED_114";
      break;
    case 0x73:
      uint64_t v14 = @"UNUSED_115";
      break;
    case 0x74:
      uint64_t v14 = @"UNUSED_116";
      break;
    case 0x75:
      uint64_t v14 = @"UNUSED_117";
      break;
    case 0x76:
      uint64_t v14 = @"UNUSED_118";
      break;
    case 0x77:
      uint64_t v14 = @"UNUSED_119";
      break;
    default:
      objc_msgSend(NSString, "stringWithFormat:", @"(unknown: %i)", *(unsigned int *)(a1 + 556));
      uint64_t v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
  }
  unint64_t v15 = v14;
  uint64_t v16 = (const std::string::value_type *)[(__CFString *)v15 UTF8String];
  memset(&v23, 0, sizeof(v23));
  int v24 = 4;
  if (v16)
  {
    std::string::__assign_external(&v23, v16);
  }
  else
  {
    *((unsigned char *)&v23.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v23, "<null>");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v22);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }

  unint64_t v17 = *(void **)(a1 + 608);
  v41[23] = 8;
  strcpy(v41, "Tile Set");
  if (v17)
  {
    unint64_t v15 = [v17 description];
    uint64_t v18 = (const std::string::value_type *)[(__CFString *)v15 UTF8String];
    memset(&v20, 0, sizeof(v20));
    int v21 = 4;
    if (v18)
    {
      std::string::__assign_external(&v20, v18);
    }
    else
    {
      *((unsigned char *)&v20.__r_.__value_.__s + 23) = 6;
      qmemcpy(&v20, "<null>", 6);
    }
  }
  else
  {
    memset(&v20, 0, sizeof(v20));
    int v21 = 4;
    std::string::__assign_external(&v20, "null");
  }
  gdc::DebugTreeNode::addProperty(a3, (uint64_t)v41, (uint64_t)v19);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v17)
  {

    if ((v41[23] & 0x80000000) != 0) {
      operator delete(*(void **)v41);
    }
  }
}

void sub_1A21E3C98(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

void md::TiledGEOResourceFetcher::expireResource(md::TiledGEOResourceFetcher *this, const gdc::ResourceKey *a2)
{
  void v7[6] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (*(uint64_t (**)(md::TiledGEOResourceFetcher *, void, const gdc::ResourceKey *))(*(void *)this
                                                                                                  + 144))(this, *((void *)this + 76), a2);
  uint64_t v5 = v4;
  uint64_t v6 = md::TiledGEOResourceFetcher::getTileLoader((id *)this);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = ___ZN2md23TiledGEOResourceFetcher14expireResourceERKN3gdc11ResourceKeyE_block_invoke;
  v7[3] = &__block_descriptor_48_e723_B24__0r___GEOTileKey_b7b1_____GEOStandardTileKey_b40b6b26b26b14b4b4___GEOGloriaQuadIDTileKey_b6b64b14b4______b10b10b12_I____GEORegionalResourceKey_b32b8b6b8b8b1b57___GEOSputnikMetadataKey_b32b24b14b8b42___GEOFlyoverKey_b6b26b26b8b24b14b8b8___GEOTransitLineSelectionKey_b6b25b25b64___GEOPolygonSelectionKey_b6b25b25b64___GEORoadSelectionKey_b6b25b25b64___GEOContourLinesKey_b6b26b26b4b8b50___GEOTileOverlayKey_b6b26b26b8b32b16b6___GEOIdentifiedResourceKey_QCCb1b39___GEOMuninMeshKey_b64b32b16b5b3___GEOVisualLocalizationTrackKey_SCb16b6b26b26b22___GEOVisualLocalizationMetadataKey_b6b9b25b6b26b26b22___GEOVisualLocalizationDataKey_QCb5b21b21b1___GEOS2TileKey_b6b26b26b3b14b4b4b37___GEOLiveTileKey_b6b26b26b14b4b4b4b36___8d16l;
  void v7[4] = v3;
  v7[5] = v5;
  [v6 expireTilesWithPredicate:v7];
}

void sub_1A21E3FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN2md23TiledGEOResourceFetcher14expireResourceERKN3gdc11ResourceKeyE_block_invoke()
{
  return GEOTileKeyEquals();
}

void md::TiledGEOResourceFetcher::cancelAllResources(id *this)
{
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  id v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A1780000, v2, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher Canceling all resources", v4, 2u);
  }

  uint64_t v3 = md::TiledGEOResourceFetcher::getTileLoader(this);
  [v3 cancelAllForClientSynchronous:this[58]];
  [v3 cancelAllForClientSynchronous:this[61]];
}

void sub_1A21E4094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::TiledGEOResourceFetcher::cancelResource(id *this, const gdc::ResourceKey *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v4 = (id)GEOGetVectorKitResourceLoadingLog_log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a2);
    uint64_t v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    uint64_t v12 = v5;
    _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher canceling resource: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

  uint64_t v6 = md::TiledGEOResourceFetcher::getTileLoader(this);
  __p.__r_.__value_.__r.__words[0] = (*((uint64_t (**)(id *, id, const gdc::ResourceKey *))*this + 18))(this, this[76], a2);
  __p.__r_.__value_.__l.__size_ = v7;
  if (*(unsigned char *)a2) {
    id v8 = this[61];
  }
  else {
    id v8 = this[58];
  }
  id v9 = v8;
  [v6 cancelKey:&__p forClient:v9];
}

void sub_1A21E422C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::TiledGEOResourceFetcher::cancelResources(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = md::TiledGEOResourceFetcher::getTileLoader((id *)a1);
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, uint64_t *))(*(void *)a1 + 144))(a1, *(void *)(a1 + 608), (uint64_t *)i + 2);
    uint64_t v15 = v6;
    if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
    }
    std::string::size_type v7 = (id)GEOGetVectorKitResourceLoadingLog_log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&__p, i + 16);
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v13 = p_p;
      _os_log_impl(&dword_1A1780000, v7, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher canceling resource: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    if (i[16]) {
      id v9 = *(void **)(a1 + 488);
    }
    else {
      id v9 = *(void **)(a1 + 464);
    }
    id v10 = v9;
    [v4 cancelKey:&v14 forClient:v10];
  }
}

void sub_1A21E4424(_Unwind_Exception *a1)
{
  if (v4) {

  }
  else {
  _Unwind_Resume(a1);
  }
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__3NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  id v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = *(void *)(v4 + 88);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__3NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57EB98;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__3NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57EB98;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__3NSA_ISO_EEFvvEED0Ev()
{
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__2NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = *(void *)(v4 + 88);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__2NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57EB50;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__2NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57EB50;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb0_E3__2NSA_ISO_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57EC28;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57EC28;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__1NSA_ISO_EEFvvEED0Ev()
{
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__0NSA_ISO_EEFvvEEclEv(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (GEOGetVectorKitResourceLoadingLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
  }
  uint64_t v2 = (id)GEOGetVectorKitResourceLoadingLog_log;
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  os_signpost_id_t v5 = *(void *)(v4 + 80);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    uint64_t v6 = *(void *)(v4 + 88);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v5, "CreateResource", "parent_signpost=%llu", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__0NSA_ISO_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57EBE0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__0NSA_ISO_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57EBE0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2md23TiledGEOResourceFetcher14fetchResourcesERKNS_13unordered_mapIN3gdc11ResourceKeyEyNS5_15ResourceKeyHashENS_8equal_toIS6_EENS_9allocatorINS_4pairIKS6_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObjectEUb_E3__0NSA_ISO_EEFvvEED0Ev()
{
}

uint64_t std::pair<GEOActiveTileSet * {__strong},std::vector<md::TiledGEOResourceFetcher::TileSetRegion>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }

  return a1;
}

void md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(id *this)
{
  *this = &unk_1EF544180;
  uint64_t v2 = md::TiledGEOResourceFetcher::getTileLoader(this);
  [v2 cancelAllForClient:this[58]];
  [v2 closeForClient:this[58]];
  [v2 closeForClient:this[61]];

  if (*((unsigned char *)this + 592)) {
    *((unsigned char *)this + 592) = 0;
  }
  id v3 = this[71];
  if (v3)
  {
    this[72] = v3;
    operator delete(v3);
  }

  this[66] = &unk_1EF559518;
  this[63] = &unk_1EF559AF8;

  this[60] = &unk_1EF559F18;
  this[57] = &unk_1EF559F18;

  uint64_t v4 = (std::__shared_weak_count *)this[56];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  gdc::ResourceFetcher::~ResourceFetcher((gdc::ResourceFetcher *)this);
}

void sub_1A21E4B50(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 592)) {
    *(unsigned char *)(v1 + 592) = 0;
  }
  std::pair<GEOActiveTileSet * {__strong},std::vector<md::TiledGEOResourceFetcher::TileSetRegion>>::~pair(v1 + 560);
  *(void *)(v1 + 528) = &unk_1EF559518;

  *(void *)(v1 + 504) = &unk_1EF559AF8;
  *(void *)(v1 + 480) = &unk_1EF559F18;

  *(void *)(v1 + 456) = &unk_1EF559F18;
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 440);
  gdc::ResourceFetcher::~ResourceFetcher((gdc::ResourceFetcher *)v1);
  _Unwind_Resume(a1);
}

void md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  id v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    os_signpost_id_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      os_signpost_id_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

double md::VenueLogicContext::venuesInProximityToWorldPoint(unint64_t *a1, uint64_t a2, float64x2_t *a3, __n128 a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void **)(a2 + 16);
  if (v4)
  {
    uint64_t v6 = a2;
    char v7 = a1;
    unint64_t v8 = 0;
    char v9 = 0;
    do
    {
      uint64_t v10 = v4[3];
      double v11 = sqrt(geo::ConvexHull2<double>::distanceSquaredTo(*(float64x2_t **)(v10 + 64), *(float64x2_t **)(v10 + 72), a3));
      a4.n128_u64[0] = 0x3ED0000000000000;
      if (v11 < 0.00000381469727)
      {
        char v12 = geo::containsPoint<double>(*(void *)(v10 + 40), *(void *)(v10 + 48), a3->f64[0], a3->f64[1]);
        char v13 = v12;
        BOOL v14 = v10 == *(void *)(v6 + 272);
        unint64_t v15 = v7[2];
        if (v8 < v15)
        {
          *(void *)unint64_t v8 = v10;
          *(unsigned char *)(v8 + 8) = v12;
          *(unsigned char *)(v8 + 9) = v14;
          *(double *)(v8 + 16) = v11;
          v8 += 24;
        }
        else
        {
          uint64_t v16 = v6;
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v9) >> 3) + 1;
          if (v17 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v9) >> 3);
          if (2 * v18 > v17) {
            unint64_t v17 = 2 * v18;
          }
          if (v18 >= 0x555555555555555) {
            unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          std::string v20 = (char *)operator new(24 * v19);
          int v21 = (double *)&v20[8 * ((uint64_t)(v8 - (void)v9) >> 3)];
          *(void *)int v21 = v10;
          *((unsigned char *)v21 + 8) = v13;
          *((unsigned char *)v21 + 9) = v14;
          void v21[2] = v11;
          if ((char *)v8 == v9)
          {
            std::string v23 = &v20[8 * ((uint64_t)(v8 - (void)v9) >> 3)];
          }
          else
          {
            BOOL v22 = &v20[8 * ((uint64_t)(v8 - (void)v9) >> 3)];
            do
            {
              a4 = *(__n128 *)(v8 - 24);
              std::string v23 = v22 - 24;
              *((void *)v22 - 1) = *(void *)(v8 - 8);
              *(__n128 *)(v22 - 24) = a4;
              v8 -= 24;
              v22 -= 24;
            }
            while ((char *)v8 != v9);
          }
          int v24 = &v20[24 * v19];
          unint64_t v8 = (unint64_t)(v21 + 3);
          char v7 = a1;
          *a1 = (unint64_t)v23;
          a1[1] = (unint64_t)(v21 + 3);
          a1[2] = (unint64_t)v24;
          if (v9) {
            operator delete(v9);
          }
          char v9 = v23;
          uint64_t v6 = v16;
        }
        v7[1] = v8;
      }
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
    unint64_t v25 = *v7;
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v25 = 0;
  }
  unint64_t v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v25) >> 3));
  if (v8 == v25) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = v26;
  }
  return std::__introsort<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *,false>(v25, v8, v27, 1, a4.n128_f64[0]);
}

void sub_1A21E4F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  double v11 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

double geo::ConvexHull2<double>::distanceSquaredTo(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3)
{
  uint64_t v3 = a2 - a1;
  if (!v3) {
    return INFINITY;
  }
  if (v3 == 1)
  {
    float64x2_t v4 = vsubq_f64(*a3, *a1);
    return vaddvq_f64(vmulq_f64(v4, v4));
  }
  if (a2 == a1) {
    return 0.0;
  }
  uint64_t v6 = 0;
  double v7 = a3->f64[0];
  double v8 = a3->f64[1];
  char v9 = 1;
  double result = 1.79769313e308;
LABEL_8:
  uint64_t v10 = &a1[v6].f64[1];
  uint64_t v11 = v6;
  do
  {
    double v13 = *(v10 - 1);
    double v12 = *v10;
    uint64_t v6 = v11 + 1;
    if (v3 - 1 == v11) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    f64 = a1[v14].f64;
    double v16 = f64[1];
    double v17 = *f64 - v13;
    double v18 = v16 - v12;
    if (-((v7 - v13) * (v16 - v12) - (v8 - v12) * v17) < 0.0)
    {
      double v19 = ((v7 - v13) * v17 + (v8 - v12) * v18) / (v17 * v17 + v18 * v18);
      if (v19 >= 0.0)
      {
        if (v19 > 1.0)
        {
          double v22 = (*f64 - v7) * (*f64 - v7) + (v16 - v8) * (v16 - v8);
          goto LABEL_21;
        }
        double v20 = v13 - v7 + v19 * v17;
        double v21 = v12 - v8 + v19 * v18;
      }
      else
      {
        double v20 = v13 - v7;
        double v21 = v12 - v8;
      }
      double v22 = v20 * v20 + v21 * v21;
LABEL_21:
      char v9 = 0;
      double result = fmin(result, v22);
      if (v6 != v3) {
        goto LABEL_8;
      }
      return result;
    }
    v10 += 2;
    uint64_t v11 = v6;
  }
  while (v3 != v6);
  if ((v9 & 1) == 0) {
    return result;
  }
  return 0.0;
}

void std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(char **a1, unsigned char *a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = a5 - 1;
  if (a5 < 1) {
    return;
  }
  double v7 = __src;
  char v9 = a1;
  unint64_t v11 = (unint64_t)*a1;
  unint64_t v10 = (unint64_t)a1[1];
  uint64_t v12 = a2 - *a1;
  uint64_t v13 = v12 >> 3;
  uint64_t v14 = &(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v15 = a1[2];
  if (a5 > (uint64_t)&v15[-v10] >> 3)
  {
    unint64_t v16 = a5 + ((uint64_t)(v10 - v11) >> 3);
    if (v16 >> 61) {
      abort();
    }
    uint64_t v17 = (uint64_t)&v15[-v11];
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v19 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v20 = v18;
      double v21 = operator new(8 * v18);
      unint64_t v18 = v20;
      uint64_t v14 = (char *)v19;
      uint64_t v13 = v12 >> 3;
      char v9 = a1;
    }
    else
    {
      double v21 = 0;
    }
    double v46 = &v21[8 * v13];
    unint64_t v47 = &v46[8 * a5];
    long long v48 = v46;
    if ((v5 & 0x1FFFFFFFFFFFFFFFuLL) >= 7)
    {
      long long v48 = &v21[8 * v13];
      if ((unint64_t)(&v21[v12 & 0xFFFFFFFFFFFFFFF8] - v7) >= 0x20)
      {
        uint64_t v49 = (v5 & 0x1FFFFFFFFFFFFFFFLL) + 1;
        uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        long long v48 = &v46[v50];
        long long v51 = (long long *)(v7 + 16);
        long long v52 = &v21[8 * v13 + 16];
        uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v54 = *v51;
          *(v52 - 1) = *(v51 - 1);
          *long long v52 = v54;
          v51 += 2;
          v52 += 2;
          v53 -= 4;
        }
        while (v53);
        if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_44:
          if ((unsigned char *)v11 != a2)
          {
            if ((unint64_t)(v12 - 8) >= 0x68)
            {
              double v56 = v14;
              if ((v12 & 0xFFFFFFFFFFFFFFF8) + v11 - (unint64_t)&v21[v12 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
              {
                unint64_t v57 = ((unint64_t)(v12 - 8) >> 3) + 1;
                double v56 = &v14[-8 * (v57 & 0x3FFFFFFFFFFFFFFCLL)];
                uint64_t v58 = 8 * v13 - 16;
                long long v59 = (long long *)(v11 + v58);
                long long v60 = &v21[v58];
                uint64_t v61 = v57 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v62 = *v59;
                  *(v60 - 1) = *(v59 - 1);
                  *long long v60 = v62;
                  v59 -= 2;
                  v60 -= 2;
                  v61 -= 4;
                }
                while (v61);
                v46 -= 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
                if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_52;
                }
              }
            }
            else
            {
              double v56 = v14;
            }
            do
            {
              uint64_t v63 = *((void *)v56 - 1);
              v56 -= 8;
              *((void *)v46 - 1) = v63;
              v46 -= 8;
            }
            while (v56 != (char *)v11);
          }
LABEL_52:
          double v64 = &v21[8 * v18];
          size_t v65 = v10 - (void)v14;
          if (v65) {
            memmove(v47, v14, v65);
          }
          *char v9 = v46;
          v9[1] = &v47[v65];
          v9[2] = v64;
          if (v11)
          {
            operator delete((void *)v11);
          }
          return;
        }
        v7 += v50;
      }
    }
    do
    {
      uint64_t v55 = *(void *)v7;
      v7 += 8;
      *(void *)long long v48 = v55;
      v48 += 8;
    }
    while (v48 != v47);
    goto LABEL_44;
  }
  uint64_t v22 = v10 - (void)v14;
  uint64_t v23 = (uint64_t)(v10 - (void)v14) >> 3;
  if (v23 >= a5)
  {
    int v24 = &__src[8 * a5];
    unint64_t v26 = (unint64_t)a1[1];
LABEL_18:
    uint64_t v27 = &v14[8 * a5];
    size_t v28 = v26 - (void)v27;
    uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 3;
    int v30 = (uint64_t *)(v26 - 8 * a5);
    long long v31 = (char *)v26;
    if ((unint64_t)v30 < v10)
    {
      unint64_t v32 = (v12 & 0xFFFFFFFFFFFFFFF8) + v28;
      uint64_t v33 = (char *)(v32 + v11);
      unint64_t v34 = v32 + v11 + 8;
      if (v10 > v34) {
        unint64_t v34 = v10;
      }
      unint64_t v35 = v34 + ~v11 - v32;
      unint64_t v36 = v26 - (void)v33;
      BOOL v37 = v35 >= 0x58 && v36 > 0x1F;
      long long v31 = (char *)v26;
      if (!v37) {
        goto LABEL_63;
      }
      uint64_t v38 = (v35 >> 3) + 1;
      uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      int v30 = (uint64_t *)((char *)v30 + v39);
      int v40 = (_OWORD *)(v26 + 16);
      long long v41 = (long long *)(8 * v29 + 8 * v13 + v11 + 16);
      uint64_t v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *int v40 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 4;
      }
      while (v42);
      long long v31 = (char *)(v26 + v39);
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_63:
        do
        {
          uint64_t v44 = *v30++;
          *(void *)long long v31 = v44;
          v31 += 8;
        }
        while ((unint64_t)v30 < v10);
      }
    }
    v9[1] = v31;
    if ((char *)v26 != v27)
    {
      uint64_t v45 = v14;
      memmove((void *)(v26 - 8 * v29), v14, v28);
      uint64_t v14 = v45;
    }
    if (v24 != v7)
    {
      memmove(v14, v7, v24 - v7);
    }
    return;
  }
  int v24 = &__src[8 * v23];
  int64_t v25 = a4 - v24;
  if (a4 != v24)
  {
    unint64_t v67 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFF8];
    memmove(a1[1], &__src[8 * v23], a4 - v24);
    uint64_t v13 = v12 >> 3;
    uint64_t v14 = (char *)v67;
  }
  unint64_t v26 = v10 + v25;
  v9[1] = (char *)(v10 + v25);
  if (v22 >= 1) {
    goto LABEL_18;
  }
}

__n128 std::__introsort<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>(long long *a1, long long *a2, long long *a3, long long *a4, __n128 result)
{
  int v5 = *((__int16 *)a2 + 16);
  int v6 = *((__int16 *)a3 + 16);
  if (v5 <= *((__int16 *)a1 + 16))
  {
    if (v6 > v5)
    {
      uint64_t v13 = *((void *)a2 + 6);
      long long v14 = a2[1];
      double result = (__n128)a2[2];
      long long v15 = *a2;
      long long v17 = a3[1];
      long long v16 = a3[2];
      long long v18 = *a3;
      *((void *)a2 + 6) = *((void *)a3 + 6);
      a2[1] = v17;
      a2[2] = v16;
      *a2 = v18;
      *a3 = v15;
      a3[1] = v14;
      a3[2] = (__int128)result;
      *((void *)a3 + 6) = v13;
      if (*((__int16 *)a2 + 16) > *((__int16 *)a1 + 16))
      {
        uint64_t v19 = *((void *)a1 + 6);
        long long v20 = a1[1];
        double result = (__n128)a1[2];
        long long v21 = *a1;
        long long v23 = a2[1];
        long long v22 = a2[2];
        long long v24 = *a2;
        *((void *)a1 + 6) = *((void *)a2 + 6);
        a1[1] = v23;
        a1[2] = v22;
        *a1 = v24;
        *a2 = v21;
        a2[1] = v20;
        a2[2] = (__int128)result;
        *((void *)a2 + 6) = v19;
      }
    }
  }
  else
  {
    if (v6 > v5)
    {
      uint64_t v7 = *((void *)a1 + 6);
      long long v8 = a1[1];
      double result = (__n128)a1[2];
      long long v9 = *a1;
      long long v11 = a3[1];
      long long v10 = a3[2];
      long long v12 = *a3;
      *((void *)a1 + 6) = *((void *)a3 + 6);
      a1[1] = v11;
      a1[2] = v10;
      *a1 = v12;
LABEL_9:
      *a3 = v9;
      a3[1] = v8;
      a3[2] = (__int128)result;
      *((void *)a3 + 6) = v7;
      goto LABEL_10;
    }
    uint64_t v25 = *((void *)a1 + 6);
    long long v26 = a1[1];
    double result = (__n128)a1[2];
    long long v27 = *a1;
    long long v29 = a2[1];
    long long v28 = a2[2];
    long long v30 = *a2;
    *((void *)a1 + 6) = *((void *)a2 + 6);
    a1[1] = v29;
    a1[2] = v28;
    *a1 = v30;
    *a2 = v27;
    a2[1] = v26;
    a2[2] = (__int128)result;
    *((void *)a2 + 6) = v25;
    if (*((__int16 *)a3 + 16) > *((__int16 *)a2 + 16))
    {
      uint64_t v7 = *((void *)a2 + 6);
      long long v8 = a2[1];
      double result = (__n128)a2[2];
      long long v9 = *a2;
      long long v32 = a3[1];
      long long v31 = a3[2];
      long long v33 = *a3;
      *((void *)a2 + 6) = *((void *)a3 + 6);
      a2[1] = v32;
      a2[2] = v31;
      *a2 = v33;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*((__int16 *)a4 + 16) > *((__int16 *)a3 + 16))
  {
    uint64_t v34 = *((void *)a3 + 6);
    long long v35 = a3[1];
    double result = (__n128)a3[2];
    long long v36 = *a3;
    long long v38 = a4[1];
    long long v37 = a4[2];
    long long v39 = *a4;
    *((void *)a3 + 6) = *((void *)a4 + 6);
    a3[1] = v38;
    a3[2] = v37;
    *a3 = v39;
    *a4 = v36;
    a4[1] = v35;
    a4[2] = (__int128)result;
    *((void *)a4 + 6) = v34;
    if (*((__int16 *)a3 + 16) > *((__int16 *)a2 + 16))
    {
      uint64_t v40 = *((void *)a2 + 6);
      long long v41 = a2[1];
      double result = (__n128)a2[2];
      long long v42 = *a2;
      long long v44 = a3[1];
      long long v43 = a3[2];
      long long v45 = *a3;
      *((void *)a2 + 6) = *((void *)a3 + 6);
      a2[1] = v44;
      a2[2] = v43;
      *a2 = v45;
      *a3 = v42;
      a3[1] = v41;
      a3[2] = (__int128)result;
      *((void *)a3 + 6) = v40;
      if (*((__int16 *)a2 + 16) > *((__int16 *)a1 + 16))
      {
        uint64_t v46 = *((void *)a1 + 6);
        long long v47 = a1[1];
        double result = (__n128)a1[2];
        long long v48 = *a1;
        long long v50 = a2[1];
        long long v49 = a2[2];
        long long v51 = *a2;
        *((void *)a1 + 6) = *((void *)a2 + 6);
        a1[1] = v50;
        a1[2] = v49;
        *a1 = v51;
        *a2 = v48;
        a2[1] = v47;
        a2[2] = (__int128)result;
        *((void *)a2 + 6) = v46;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(__int16 *)(a2 - 24) > *(__int16 *)(a1 + 32))
      {
        uint64_t v7 = *(void *)(a1 + 48);
        long long v9 = *(_OWORD *)(a1 + 16);
        long long v8 = *(_OWORD *)(a1 + 32);
        long long v10 = *(_OWORD *)a1;
        long long v11 = *(_OWORD *)(a2 - 40);
        long long v12 = *(_OWORD *)(a2 - 24);
        long long v13 = *(_OWORD *)(a2 - 56);
        *(void *)(a1 + 48) = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = v12;
        *(_OWORD *)a1 = v13;
        *(_OWORD *)(a2 - 56) = v10;
        *(_OWORD *)(a2 - 40) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      long long v14 = (long long *)(a1 + 56);
      long long v15 = (long long *)(a2 - 56);
      int v16 = *(__int16 *)(a1 + 88);
      int v17 = *(__int16 *)(a2 - 24);
      if (v16 <= *(__int16 *)(a1 + 32))
      {
        if (v17 > v16)
        {
          uint64_t v60 = *(void *)(a1 + 104);
          long long v62 = *(_OWORD *)(a1 + 72);
          long long v61 = *(_OWORD *)(a1 + 88);
          long long v63 = *v14;
          long long v65 = *(_OWORD *)(a2 - 40);
          long long v64 = *(_OWORD *)(a2 - 24);
          long long v66 = *v15;
          *(void *)(a1 + 104) = *(void *)(a2 - 8);
          *(_OWORD *)(a1 + 72) = v65;
          *(_OWORD *)(a1 + 88) = v64;
          *long long v14 = v66;
          *long long v15 = v63;
          *(_OWORD *)(a2 - 40) = v62;
          *(_OWORD *)(a2 - 24) = v61;
          *(void *)(a2 - 8) = v60;
          if (*(__int16 *)(a1 + 88) > *(__int16 *)(a1 + 32))
          {
            uint64_t v67 = *(void *)(a1 + 48);
            long long v69 = *(_OWORD *)(a1 + 16);
            long long v68 = *(_OWORD *)(a1 + 32);
            long long v70 = *(_OWORD *)a1;
            long long v71 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v71;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
            *(void *)(a1 + 48) = *(void *)(a1 + 104);
            *long long v14 = v70;
            *(_OWORD *)(a1 + 72) = v69;
            *(_OWORD *)(a1 + 88) = v68;
            *(void *)(a1 + 104) = v67;
          }
        }
      }
      else if (v17 <= v16)
      {
        uint64_t v82 = *(void *)(a1 + 48);
        long long v84 = *(_OWORD *)(a1 + 16);
        long long v83 = *(_OWORD *)(a1 + 32);
        long long v85 = *(_OWORD *)a1;
        long long v86 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v86;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
        *(void *)(a1 + 48) = *(void *)(a1 + 104);
        *long long v14 = v85;
        *(_OWORD *)(a1 + 72) = v84;
        *(_OWORD *)(a1 + 88) = v83;
        *(void *)(a1 + 104) = v82;
        if (*(__int16 *)(a2 - 24) > *(__int16 *)(a1 + 88))
        {
          uint64_t v87 = *(void *)(a1 + 104);
          long long v89 = *(_OWORD *)(a1 + 72);
          long long v88 = *(_OWORD *)(a1 + 88);
          long long v90 = *v14;
          long long v92 = *(_OWORD *)(a2 - 40);
          long long v91 = *(_OWORD *)(a2 - 24);
          long long v93 = *v15;
          *(void *)(a1 + 104) = *(void *)(a2 - 8);
          *(_OWORD *)(a1 + 72) = v92;
          *(_OWORD *)(a1 + 88) = v91;
          *long long v14 = v93;
          *long long v15 = v90;
          *(_OWORD *)(a2 - 40) = v89;
          *(_OWORD *)(a2 - 24) = v88;
          *(void *)(a2 - 8) = v87;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(a1 + 48);
        long long v20 = *(_OWORD *)(a1 + 16);
        long long v19 = *(_OWORD *)(a1 + 32);
        long long v21 = *(_OWORD *)a1;
        long long v23 = *(_OWORD *)(a2 - 40);
        long long v22 = *(_OWORD *)(a2 - 24);
        long long v24 = *v15;
        *(void *)(a1 + 48) = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 16) = v23;
        *(_OWORD *)(a1 + 32) = v22;
        *(_OWORD *)a1 = v24;
        *long long v15 = v21;
        *(_OWORD *)(a2 - 40) = v20;
        *(_OWORD *)(a2 - 24) = v19;
        *(void *)(a2 - 8) = v18;
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>((long long *)a1, (long long *)(a1 + 56), (long long *)(a1 + 112), (long long *)(a2 - 56), a3);
      return 1;
    case 5:
      long long v35 = (long long *)(a1 + 56);
      long long v36 = (long long *)(a1 + 112);
      long long v37 = (long long *)(a1 + 168);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>((long long *)a1, (long long *)(a1 + 56), (long long *)(a1 + 112), (long long *)(a1 + 168), a3);
      if (*(__int16 *)(a2 - 24) <= *(__int16 *)(a1 + 200)) {
        return 1;
      }
      uint64_t v38 = *(void *)(a1 + 216);
      long long v40 = *(_OWORD *)(a1 + 184);
      long long v39 = *(_OWORD *)(a1 + 200);
      long long v41 = *v37;
      long long v42 = *(_OWORD *)(a2 - 40);
      long long v43 = *(_OWORD *)(a2 - 24);
      long long v44 = *(_OWORD *)(a2 - 56);
      *(void *)(a1 + 216) = *(void *)(a2 - 8);
      *(_OWORD *)(a1 + 184) = v42;
      *(_OWORD *)(a1 + 200) = v43;
      *long long v37 = v44;
      *(_OWORD *)(a2 - 56) = v41;
      *(_OWORD *)(a2 - 40) = v40;
      *(_OWORD *)(a2 - 24) = v39;
      *(void *)(a2 - 8) = v38;
      if (*(__int16 *)(a1 + 200) <= *(__int16 *)(a1 + 144)) {
        return 1;
      }
      uint64_t v45 = *(void *)(a1 + 160);
      long long v47 = *(_OWORD *)(a1 + 128);
      long long v46 = *(_OWORD *)(a1 + 144);
      long long v48 = *v36;
      long long v49 = *(_OWORD *)(a1 + 184);
      *long long v36 = *v37;
      *(_OWORD *)(a1 + 128) = v49;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 200);
      *(void *)(a1 + 160) = *(void *)(a1 + 216);
      *long long v37 = v48;
      *(_OWORD *)(a1 + 184) = v47;
      *(_OWORD *)(a1 + 200) = v46;
      *(void *)(a1 + 216) = v45;
      if (*(__int16 *)(a1 + 144) <= *(__int16 *)(a1 + 88)) {
        return 1;
      }
      uint64_t v50 = *(void *)(a1 + 104);
      long long v52 = *(_OWORD *)(a1 + 72);
      long long v51 = *(_OWORD *)(a1 + 88);
      long long v53 = *v35;
      long long v54 = *(_OWORD *)(a1 + 128);
      *long long v35 = *v36;
      *(_OWORD *)(a1 + 72) = v54;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
      *(void *)(a1 + 104) = *(void *)(a1 + 160);
      *long long v36 = v53;
      *(_OWORD *)(a1 + 128) = v52;
      *(_OWORD *)(a1 + 144) = v51;
      *(void *)(a1 + 160) = v50;
      if (*(__int16 *)(a1 + 88) <= *(__int16 *)(a1 + 32)) {
        return 1;
      }
      uint64_t v55 = *(void *)(a1 + 48);
      long long v57 = *(_OWORD *)(a1 + 16);
      long long v56 = *(_OWORD *)(a1 + 32);
      long long v58 = *(_OWORD *)a1;
      long long v59 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)a1 = *v35;
      *(_OWORD *)(a1 + 16) = v59;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
      *(void *)(a1 + 48) = *(void *)(a1 + 104);
      *long long v35 = v58;
      *(_OWORD *)(a1 + 72) = v57;
      *(_OWORD *)(a1 + 88) = v56;
      BOOL result = 1;
      *(void *)(a1 + 104) = v55;
      return result;
    default:
      uint64_t v25 = a1 + 112;
      long long v26 = (long long *)(a1 + 56);
      int v27 = *(__int16 *)(a1 + 88);
      int v28 = *(__int16 *)(a1 + 32);
      int v29 = *(__int16 *)(a1 + 144);
      if (v27 <= v28)
      {
        if (v29 > v27)
        {
          uint64_t v72 = *(void *)(a1 + 104);
          long long v74 = *(_OWORD *)(a1 + 72);
          long long v73 = *(_OWORD *)(a1 + 88);
          long long v75 = *v26;
          long long v76 = *(_OWORD *)(a1 + 128);
          *long long v26 = *(_OWORD *)v25;
          *(_OWORD *)(a1 + 72) = v76;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
          *(void *)(a1 + 104) = *(void *)(a1 + 160);
          *(_OWORD *)uint64_t v25 = v75;
          *(_OWORD *)(a1 + 128) = v74;
          *(_OWORD *)(a1 + 144) = v73;
          *(void *)(a1 + 160) = v72;
          if (*(__int16 *)(a1 + 88) > v28)
          {
            uint64_t v77 = *(void *)(a1 + 48);
            long long v79 = *(_OWORD *)(a1 + 16);
            long long v78 = *(_OWORD *)(a1 + 32);
            long long v80 = *(_OWORD *)a1;
            long long v81 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)a1 = *v26;
            *(_OWORD *)(a1 + 16) = v81;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
            *(void *)(a1 + 48) = *(void *)(a1 + 104);
            *long long v26 = v80;
            *(_OWORD *)(a1 + 72) = v79;
            *(_OWORD *)(a1 + 88) = v78;
            *(void *)(a1 + 104) = v77;
          }
        }
      }
      else if (v29 <= v27)
      {
        uint64_t v94 = *(void *)(a1 + 48);
        long long v96 = *(_OWORD *)(a1 + 16);
        long long v95 = *(_OWORD *)(a1 + 32);
        long long v97 = *(_OWORD *)a1;
        long long v98 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)a1 = *v26;
        *(_OWORD *)(a1 + 16) = v98;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
        *(void *)(a1 + 48) = *(void *)(a1 + 104);
        *long long v26 = v97;
        *(_OWORD *)(a1 + 72) = v96;
        *(_OWORD *)(a1 + 88) = v95;
        *(void *)(a1 + 104) = v94;
        if (v29 > *(__int16 *)(a1 + 88))
        {
          uint64_t v99 = *(void *)(a1 + 104);
          long long v101 = *(_OWORD *)(a1 + 72);
          long long v100 = *(_OWORD *)(a1 + 88);
          long long v102 = *v26;
          long long v103 = *(_OWORD *)(a1 + 128);
          *long long v26 = *(_OWORD *)v25;
          *(_OWORD *)(a1 + 72) = v103;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
          *(void *)(a1 + 104) = *(void *)(a1 + 160);
          *(_OWORD *)uint64_t v25 = v102;
          *(_OWORD *)(a1 + 128) = v101;
          *(_OWORD *)(a1 + 144) = v100;
          *(void *)(a1 + 160) = v99;
        }
      }
      else
      {
        uint64_t v30 = *(void *)(a1 + 48);
        long long v32 = *(_OWORD *)(a1 + 16);
        long long v31 = *(_OWORD *)(a1 + 32);
        long long v33 = *(_OWORD *)a1;
        long long v34 = *(_OWORD *)(a1 + 128);
        *(_OWORD *)a1 = *(_OWORD *)v25;
        *(_OWORD *)(a1 + 16) = v34;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 144);
        *(void *)(a1 + 48) = *(void *)(a1 + 160);
        *(_OWORD *)uint64_t v25 = v33;
        *(_OWORD *)(a1 + 128) = v32;
        *(_OWORD *)(a1 + 144) = v31;
        *(void *)(a1 + 160) = v30;
      }
      uint64_t v104 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v105 = 0;
      int v106 = 0;
      break;
  }
  while (1)
  {
    int v108 = *(__int16 *)(v104 + 32);
    if (v108 > *(__int16 *)(v25 + 32))
    {
      long long v113 = *(_OWORD *)v104;
      long long v114 = *(_OWORD *)(v104 + 16);
      *(_OWORD *)long long v112 = *(_OWORD *)(v104 + 34);
      *(void *)&v112[14] = *(void *)(v104 + 48);
      uint64_t v109 = v105;
      do
      {
        uint64_t v110 = a1 + v109;
        long long v111 = *(_OWORD *)(a1 + v109 + 128);
        *(_OWORD *)(v110 + 168) = *(_OWORD *)(a1 + v109 + 112);
        *(_OWORD *)(v110 + 184) = v111;
        *(_OWORD *)(v110 + 200) = *(_OWORD *)(a1 + v109 + 144);
        *(void *)(v110 + 216) = *(void *)(a1 + v109 + 160);
        if (v109 == -112)
        {
          uint64_t v107 = a1;
          goto LABEL_29;
        }
        v109 -= 56;
      }
      while (v108 > *(__int16 *)(v110 + 88));
      uint64_t v107 = a1 + v109 + 168;
LABEL_29:
      *(_OWORD *)uint64_t v107 = v113;
      *(_OWORD *)(v107 + 16) = v114;
      *(_WORD *)(v107 + 32) = v108;
      *(_OWORD *)(v107 + 34) = *(_OWORD *)v112;
      *(void *)(v107 + 48) = *(void *)&v112[14];
      if (++v106 == 8) {
        return v104 + 56 == a2;
      }
    }
    uint64_t v25 = v104;
    v105 += 56;
    v104 += 56;
    if (v104 == a2) {
      return 1;
    }
  }
}

uint64_t geo::containsPoint<double>(uint64_t a1, uint64_t a2, double a3, double a4)
{
  int v4 = 0;
  uint64_t v5 = a2 - a1;
  if (a2 != a1)
  {
    uint64_t v6 = 0;
    unint64_t v7 = v5 >> 4;
    uint64_t v8 = (v5 >> 4) - 1;
    if ((unint64_t)(v5 >> 4) <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v5 >> 4;
    }
    long long v10 = (double *)(a1 + 8);
    LODWORD(v5) = 1;
    do
    {
      uint64_t v11 = v8 == v6 ? 0 : v6 + 1;
      double v12 = *(v10 - 1);
      double v13 = vabdd_f64(v12, a3);
      double v14 = fabs(v12 + a3) * 2.22044605e-14;
      double v15 = *v10;
      if (v13 <= v14 || v13 <= 2.22507386e-308)
      {
        double v17 = vabdd_f64(v15, a4);
        if (v17 <= fabs(v15 + a4) * 2.22044605e-14 || v17 <= 2.22507386e-308) {
          break;
        }
      }
      long long v19 = (double *)(a1 + 16 * v11);
      double v20 = v19[1];
      if (v15 == v20 && v15 == a4)
      {
        double v22 = *v19;
        if (v12 <= a3 && v22 >= a3) {
          break;
        }
        if (v22 <= a3 && v12 >= a3) {
          break;
        }
      }
      BOOL v25 = v15 > a4 || v20 <= a4;
      if (!v25 || (v20 <= a4 ? (BOOL v26 = v15 <= a4) : (BOOL v26 = 1), !v26))
      {
        if (v12 != *v19)
        {
          double v12 = (*v19 - v12) * (a4 - v15) / (v20 - v15) + v12;
          double v14 = fabs(v12 + a3) * 2.22044605e-14;
        }
        double v27 = vabdd_f64(a3, v12);
        if (v27 <= v14 || v27 < 2.22507386e-308) {
          return (v5 | v4) & 1;
        }
        if (v12 < a3) {
          ++v4;
        }
      }
      LODWORD(v5) = ++v6 < v7;
      v10 += 2;
    }
    while (v9 != v6);
  }
  return (v5 | v4) & 1;
}

double std::__introsort<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, double result)
{
double *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(double *result, double *a2, double *a3)
{
  if (a2 != result)
  {
    int v3 = *((unsigned __int8 *)a2 + 8);
    if (v3 == *((unsigned __int8 *)result + 8))
    {
      if (*((unsigned __int8 *)a2 + 9) == *((unsigned __int8 *)result + 9))
      {
        if (a2[2] >= result[2]) {
          goto LABEL_5;
        }
LABEL_11:
        if (a3 == a2) {
          goto LABEL_30;
        }
        if (*((unsigned __int8 *)a3 + 8) == v3)
        {
          if (*((unsigned __int8 *)a3 + 9) == *((unsigned __int8 *)a2 + 9))
          {
            if (a3[2] >= a2[2]) {
              goto LABEL_15;
            }
LABEL_28:
            uint64_t v13 = *((void *)result + 2);
            long long v14 = *(_OWORD *)result;
            uint64_t v15 = *((void *)a3 + 2);
            *(_OWORD *)BOOL result = *(_OWORD *)a3;
            *((void *)result + 2) = v15;
            goto LABEL_33;
          }
          if (*((unsigned char *)a3 + 9)) {
            goto LABEL_28;
          }
        }
        else if (*((unsigned char *)a3 + 8))
        {
          goto LABEL_28;
        }
LABEL_15:
        uint64_t v5 = *((void *)result + 2);
        long long v6 = *(_OWORD *)result;
        uint64_t v7 = *((void *)a2 + 2);
        *(_OWORD *)BOOL result = *(_OWORD *)a2;
        *((void *)result + 2) = v7;
        *(_OWORD *)a2 = v6;
        *((void *)a2 + 2) = v5;
        int v8 = *((unsigned __int8 *)a3 + 8);
        if (v8 == *((unsigned __int8 *)a2 + 8)
          && (int v8 = *((unsigned __int8 *)a3 + 9), v8 == *((unsigned __int8 *)a2 + 9)))
        {
          if (a3[2] >= a2[2]) {
            return result;
          }
        }
        else if (!v8)
        {
          return result;
        }
        uint64_t v13 = *((void *)a2 + 2);
        long long v14 = *(_OWORD *)a2;
        uint64_t v19 = *((void *)a3 + 2);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((void *)a2 + 2) = v19;
LABEL_33:
        *(_OWORD *)a3 = v14;
        *((void *)a3 + 2) = v13;
        return result;
      }
      if (*((unsigned char *)a2 + 9)) {
        goto LABEL_11;
      }
    }
    else if (*((unsigned char *)a2 + 8))
    {
      goto LABEL_11;
    }
  }
LABEL_5:
  if (a3 == a2) {
    return result;
  }
  int v4 = *((unsigned __int8 *)a3 + 8);
  if (v4 == *((unsigned __int8 *)a2 + 8) && (int v4 = *((unsigned __int8 *)a3 + 9), v4 == *((unsigned __int8 *)a2 + 9)))
  {
    if (a3[2] >= a2[2]) {
      return result;
    }
  }
  else if (!v4)
  {
    return result;
  }
  uint64_t v9 = *((void *)a2 + 2);
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *((void *)a3 + 2);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *((void *)a2 + 2) = v11;
  *(_OWORD *)a3 = v10;
  *((void *)a3 + 2) = v9;
  if (a2 != result)
  {
    int v12 = *((unsigned __int8 *)a2 + 8);
    if (v12 == *((unsigned __int8 *)result + 8))
    {
      int v12 = *((unsigned __int8 *)a2 + 9);
      if (v12 == *((unsigned __int8 *)result + 9))
      {
        if (a2[2] < result[2]) {
          goto LABEL_30;
        }
        return result;
      }
    }
    if (!v12) {
      return result;
    }
LABEL_30:
    uint64_t v16 = *((void *)result + 2);
    long long v17 = *(_OWORD *)result;
    uint64_t v18 = *((void *)a2 + 2);
    *(_OWORD *)BOOL result = *(_OWORD *)a2;
    *((void *)result + 2) = v18;
    *(_OWORD *)a2 = v17;
    *((void *)a2 + 2) = v16;
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((double *)a1, (double *)a2, (double *)a3);
  if (a4 != a3)
  {
    int v9 = *(unsigned __int8 *)(a4 + 8);
    if (v9 == *(unsigned __int8 *)(a3 + 8) && (int v9 = *(unsigned __int8 *)(a4 + 9), v9 == *(unsigned __int8 *)(a3 + 9)))
    {
      result.n128_u64[0] = *(void *)(a4 + 16);
      if (result.n128_f64[0] >= *(double *)(a3 + 16)) {
        return result;
      }
    }
    else if (!v9)
    {
      return result;
    }
    uint64_t v10 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v11 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v11;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v10;
    if (a3 == a2) {
      return result;
    }
    int v12 = *(unsigned __int8 *)(a3 + 8);
    if (v12 == *(unsigned __int8 *)(a2 + 8)
      && (int v12 = *(unsigned __int8 *)(a3 + 9), v12 == *(unsigned __int8 *)(a2 + 9)))
    {
      result.n128_u64[0] = *(void *)(a3 + 16);
      if (result.n128_f64[0] >= *(double *)(a2 + 16)) {
        return result;
      }
    }
    else if (!v12)
    {
      return result;
    }
    uint64_t v13 = *(void *)(a2 + 16);
    __n128 result = *(__n128 *)a2;
    uint64_t v14 = *(void *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = v14;
    *(__n128 *)a3 = result;
    *(void *)(a3 + 16) = v13;
    if (a2 == a1) {
      return result;
    }
    int v15 = *(unsigned __int8 *)(a2 + 8);
    if (v15 == *(unsigned __int8 *)(a1 + 8)
      && (int v15 = *(unsigned __int8 *)(a2 + 9), v15 == *(unsigned __int8 *)(a1 + 9)))
    {
      result.n128_u64[0] = *(void *)(a2 + 16);
      if (result.n128_f64[0] >= *(double *)(a1 + 16)) {
        return result;
      }
    }
    else if (!v15)
    {
      return result;
    }
    uint64_t v16 = *(void *)(a1 + 16);
    __n128 result = *(__n128 *)a1;
    uint64_t v17 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v17;
    *(__n128 *)a2 = result;
    *(void *)(a2 + 16) = v16;
  }
  return result;
}

__n128 std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *,0>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if (a5 != a4)
  {
    int v11 = a5->n128_u8[8];
    if (v11 == a4->n128_u8[8] && (int v11 = a5->n128_u8[9], v11 == a4->n128_u8[9]))
    {
      result.n128_u64[0] = a5[1].n128_u64[0];
      if (result.n128_f64[0] >= a4[1].n128_f64[0]) {
        return result;
      }
    }
    else if (!v11)
    {
      return result;
    }
    unint64_t v12 = a4[1].n128_u64[0];
    __n128 result = *a4;
    unint64_t v13 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v13;
    *a5 = result;
    a5[1].n128_u64[0] = v12;
    if (a4 == a3) {
      return result;
    }
    int v14 = a4->n128_u8[8];
    if (v14 == a3->n128_u8[8] && (int v14 = a4->n128_u8[9], v14 == a3->n128_u8[9]))
    {
      result.n128_u64[0] = a4[1].n128_u64[0];
      if (result.n128_f64[0] >= a3[1].n128_f64[0]) {
        return result;
      }
    }
    else if (!v14)
    {
      return result;
    }
    unint64_t v15 = a3[1].n128_u64[0];
    __n128 result = *a3;
    unint64_t v16 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v16;
    *a4 = result;
    a4[1].n128_u64[0] = v15;
    if (a3 == a2) {
      return result;
    }
    int v17 = a3->n128_u8[8];
    if (v17 == a2->n128_u8[8] && (int v17 = a3->n128_u8[9], v17 == a2->n128_u8[9]))
    {
      result.n128_u64[0] = a3[1].n128_u64[0];
      if (result.n128_f64[0] >= a2[1].n128_f64[0]) {
        return result;
      }
    }
    else if (!v17)
    {
      return result;
    }
    unint64_t v18 = a2[1].n128_u64[0];
    __n128 result = *a2;
    unint64_t v19 = a3[1].n128_u64[0];
    *a2 = *a3;
    a2[1].n128_u64[0] = v19;
    *a3 = result;
    a3[1].n128_u64[0] = v18;
    if (a2 == a1) {
      return result;
    }
    int v20 = a2->n128_u8[8];
    if (v20 == a1->n128_u8[8] && (int v20 = a2->n128_u8[9], v20 == a1->n128_u8[9]))
    {
      result.n128_u64[0] = a2[1].n128_u64[0];
      if (result.n128_f64[0] >= a1[1].n128_f64[0]) {
        return result;
      }
    }
    else if (!v20)
    {
      return result;
    }
    unint64_t v21 = a1[1].n128_u64[0];
    __n128 result = *a1;
    unint64_t v22 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v22;
    *a2 = result;
    a2[1].n128_u64[0] = v21;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (_OWORD *)(a2 - 24);
      if (a2 - 24 == a1) {
        return result;
      }
      int v7 = *(unsigned __int8 *)(a2 - 16);
      if (v7 == *(unsigned __int8 *)(a1 + 8)
        && (int v7 = *(unsigned __int8 *)(a2 - 15), v7 == *(unsigned __int8 *)(a1 + 9)))
      {
        if (*(double *)(a2 - 8) >= *(double *)(a1 + 16)) {
          return result;
        }
      }
      else if (!v7)
      {
        return result;
      }
      uint64_t v24 = *(void *)(a1 + 16);
      long long v25 = *(_OWORD *)a1;
      uint64_t v26 = *(void *)(a2 - 8);
      *(_OWORD *)a1 = *v6;
      *(void *)(a1 + 16) = v26;
      _OWORD *v6 = v25;
      *(void *)(a2 - 8) = v24;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((double *)a1, (double *)(a1 + 24), (double *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *,0>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      uint64_t v8 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((double *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      uint64_t v9 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    int v13 = *(unsigned __int8 *)(v9 + 8);
    if (v13 == *(unsigned __int8 *)(v8 + 8)) {
      break;
    }
    if (*(unsigned char *)(v9 + 8))
    {
      int v14 = *(unsigned __int8 *)(v9 + 9);
      goto LABEL_20;
    }
LABEL_11:
    uint64_t v8 = v9;
    v10 += 24;
    v9 += 24;
    if (v9 == a2) {
      return 1;
    }
  }
  int v14 = *(unsigned __int8 *)(v9 + 9);
  if (v14 == *(unsigned __int8 *)(v8 + 9))
  {
    if (*(double *)(v9 + 16) < *(double *)(v8 + 16)) {
      goto LABEL_20;
    }
    goto LABEL_11;
  }
  if (!*(unsigned char *)(v9 + 9)) {
    goto LABEL_11;
  }
  int v14 = 1;
LABEL_20:
  uint64_t v15 = *(void *)v9;
  int v27 = *(_DWORD *)(v9 + 10);
  __int16 v28 = *(_WORD *)(v9 + 14);
  double v16 = *(double *)(v9 + 16);
  *(void *)(v9 + 16) = *(void *)(v8 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
  uint64_t v12 = a1;
  if (v8 != a1)
  {
    uint64_t v17 = v10;
    if (v13)
    {
      if (v14)
      {
        while (1)
        {
          uint64_t v19 = a1 + v17;
          if (*(unsigned char *)(a1 + v17 + 32))
          {
            if (v14 == *(unsigned __int8 *)(v19 + 33))
            {
              uint64_t v20 = a1 + v17;
              if (v16 >= *(double *)(a1 + v17 + 40)) {
                break;
              }
            }
          }
          *(_OWORD *)(v19 + 48) = *(_OWORD *)(v19 + 24);
          *(void *)(v19 + 64) = *(void *)(v19 + 40);
          v17 -= 24;
          if (v17 == -48) {
            goto LABEL_9;
          }
        }
      }
      else
      {
        uint64_t v18 = v10;
        while (1)
        {
          uint64_t v21 = a1 + v18;
          if (*(unsigned char *)(a1 + v18 + 32))
          {
            if (*(unsigned char *)(v21 + 33)) {
              goto LABEL_45;
            }
            uint64_t v20 = a1 + v18;
            if (v16 >= *(double *)(a1 + v18 + 40)) {
              break;
            }
          }
          v8 -= 24;
          *(_OWORD *)(v21 + 48) = *(_OWORD *)(v21 + 24);
          *(void *)(v21 + 64) = *(void *)(v21 + 40);
          v18 -= 24;
          if (v18 == -48) {
            goto LABEL_9;
          }
        }
      }
LABEL_44:
      uint64_t v12 = v20 + 48;
    }
    else
    {
      if (v14)
      {
        while (1)
        {
          uint64_t v23 = a1 + v17;
          if (*(unsigned char *)(a1 + v17 + 32)) {
            break;
          }
          if (v14 == *(unsigned __int8 *)(v23 + 33))
          {
            uint64_t v20 = a1 + v17;
            if (v16 >= *(double *)(a1 + v17 + 40)) {
              goto LABEL_44;
            }
          }
          v8 -= 24;
          *(_OWORD *)(v23 + 48) = *(_OWORD *)(v23 + 24);
          *(void *)(v23 + 64) = *(void *)(v23 + 40);
          v17 -= 24;
          if (v17 == -48)
          {
LABEL_9:
            uint64_t v12 = a1;
            goto LABEL_10;
          }
        }
      }
      else
      {
        while (1)
        {
          uint64_t v22 = a1 + v17;
          if (*(unsigned char *)(a1 + v17 + 32) || *(unsigned char *)(v22 + 33)) {
            break;
          }
          uint64_t v20 = a1 + v17;
          if (v16 >= *(double *)(a1 + v17 + 40)) {
            goto LABEL_44;
          }
          v8 -= 24;
          *(_OWORD *)(v22 + 48) = *(_OWORD *)(v22 + 24);
          *(void *)(v22 + 64) = *(void *)(v22 + 40);
          v17 -= 24;
          if (v17 == -48) {
            goto LABEL_9;
          }
        }
      }
LABEL_45:
      uint64_t v12 = v8;
    }
  }
LABEL_10:
  *(void *)uint64_t v12 = v15;
  *(unsigned char *)(v12 + 8) = v13;
  *(unsigned char *)(v12 + 9) = v14;
  *(_DWORD *)(v12 + 10) = v27;
  *(_WORD *)(v12 + 14) = v28;
  *(double *)(v12 + 16) = v16;
  if (++v11 != 8) {
    goto LABEL_11;
  }
  return v9 + 24 == a2;
}

float ___ZN2md10VenueLogic22_runExtrusionAnimationEv_block_invoke(uint64_t a1, float a2)
{
  float result = *(float *)(a1 + 40) + (float)((float)(*(float *)(a1 + 44) - *(float *)(a1 + 40)) * a2);
  *(float *)(*(void *)(a1 + 32) + 492) = result;
  return result;
}

float ___ZN2md10VenueLogic22_runExtrusionAnimationEv_block_invoke_2(uint64_t a1, int a2)
{
  if (a2)
  {
    float result = *(float *)(a1 + 40);
    *(float *)(*(void *)(a1 + 32) + 492) = result;
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D710;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF56D710;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D6C8;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF56D6C8;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md10VenueLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_12SceneContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17VenueLogicContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::VenueLogic,md::VenueLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x4927EB92E562CC46 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::SceneContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::SceneContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::VenueLogicContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::VenueLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555708;
  uint64_t v1 = (md::VenueLogicContext *)a1[4];
  if (v1)
  {
    md::VenueLogicContext::~VenueLogicContext(v1);
    MEMORY[0x1A6239270]();
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::VenueLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555708;
  uint64_t v2 = (md::VenueLogicContext *)a1[4];
  if (v2)
  {
    md::VenueLogicContext::~VenueLogicContext(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

uint64_t md::VenueLogic::didBecomeInactive(md::VenueLogic *this)
{
  *(_OWORD *)((char *)this + 568) = 0u;
  uint64_t result = *((void *)this + 90);
  if (result)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)result + 48))(result, &v3, &v2);
  }
  return result;
}

void md::VenueLogic::~VenueLogic(md::VenueLogic *this)
{
  md::VenueLogic::~VenueLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  char *v3;
  md::VenueLogic *v4;
  md::VenueLogic *v5;
  md::VenueLogic *v6;
  md::VenueLogic *v7;
  md::VenueLogic *v8;
  md::VenueLogic *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  std::__shared_weak_count *v17;

  *(void *)this = &unk_1EF5304E8;
  uint64_t v2 = (char *)this + 888;
  uint64_t v3 = (char *)*((void *)this + 114);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (md::VenueLogic *)*((void *)this + 110);
  if (v4 == (md::VenueLogic *)((char *)this + 856))
  {
    (*(void (**)(char *))(*((void *)this + 107) + 32))((char *)this + 856);
  }
  else if (v4)
  {
    (*(void (**)(md::VenueLogic *))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = (md::VenueLogic *)*((void *)this + 106);
  if (v5 == (md::VenueLogic *)((char *)this + 824))
  {
    (*(void (**)(char *))(*((void *)this + 103) + 32))((char *)this + 824);
  }
  else if (v5)
  {
    (*(void (**)(md::VenueLogic *))(*(void *)v5 + 40))(v5);
  }
  uint64_t v6 = (md::VenueLogic *)*((void *)this + 102);
  if (v6 == (md::VenueLogic *)((char *)this + 792))
  {
    (*(void (**)(char *))(*((void *)this + 99) + 32))((char *)this + 792);
  }
  else if (v6)
  {
    (*(void (**)(md::VenueLogic *))(*(void *)v6 + 40))(v6);
  }
  int v7 = (md::VenueLogic *)*((void *)this + 98);
  if (v7 == (md::VenueLogic *)((char *)this + 760))
  {
    (*(void (**)(char *))(*((void *)this + 95) + 32))((char *)this + 760);
  }
  else if (v7)
  {
    (*(void (**)(md::VenueLogic *))(*(void *)v7 + 40))(v7);
  }
  uint64_t v8 = (md::VenueLogic *)*((void *)this + 94);
  if (v8 == (md::VenueLogic *)((char *)this + 728))
  {
    (*(void (**)(char *))(*((void *)this + 91) + 32))((char *)this + 728);
  }
  else if (v8)
  {
    (*(void (**)(md::VenueLogic *))(*(void *)v8 + 40))(v8);
  }
  uint64_t v9 = (md::VenueLogic *)*((void *)this + 90);
  if (v9 == (md::VenueLogic *)((char *)this + 696))
  {
    (*(void (**)(char *))(*((void *)this + 87) + 32))((char *)this + 696);
  }
  else if (v9)
  {
    (*(void (**)(md::VenueLogic *))(*(void *)v9 + 40))(v9);
  }
  *((void *)this + 83) = &unk_1EF5596D8;

  *((void *)this + 80) = &unk_1EF5596D8;
  uint64_t v10 = (void *)*((void *)this + 77);
  if (v10)
  {
    do
    {
      uint64_t v15 = (void *)*v10;
      double v16 = (void *)v10[3];
      if (v16)
      {
        v10[4] = v16;
        operator delete(v16);
      }
      operator delete(v10);
      uint64_t v10 = v15;
    }
    while (v15);
  }
  int v11 = (void *)*((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v11) {
    operator delete(v11);
  }
  md::VenueLogicContext::~VenueLogicContext((md::VenueLogic *)((char *)this + 208));
  uint64_t v12 = *((void *)this + 23);
  if (v12)
  {
    int v13 = *((void *)this + 24);
    int v14 = (void *)*((void *)this + 23);
    if (v13 != v12)
    {
      do
      {
        uint64_t v17 = *(std::__shared_weak_count **)(v13 - 8);
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        v13 -= 16;
      }
      while (v13 != v12);
      int v14 = (void *)*((void *)this + 23);
    }
    *((void *)this + 24) = v12;
    operator delete(v14);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 120));
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

BOOL md::VenueLogicContext::venueContainsBuildingWithId(md::VenueLogicContext *this, unint64_t a2, unint64_t a3)
{
  if (!a3) {
    return 0;
  }
  if (a2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a3;
      if (a2 <= a3) {
        unint64_t v4 = a3 % a2;
      }
    }
    else
    {
      unint64_t v4 = (a2 - 1) & a3;
    }
    uint64_t v6 = (void *)*((void *)this + v4);
    if (v6)
    {
      uint64_t v6 = (void *)*v6;
      if (v6)
      {
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v8 = v6[1];
            if (v8 == a3)
            {
              if (v6[2] == a3) {
                return v6 != 0;
              }
            }
            else if ((v8 & (a2 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v6 = (void *)*v6;
            if (!v6) {
              return v6 != 0;
            }
          }
        }
        do
        {
          unint64_t v7 = v6[1];
          if (v7 == a3)
          {
            if (v6[2] == a3) {
              return v6 != 0;
            }
          }
          else
          {
            if (v7 >= a2) {
              v7 %= a2;
            }
            if (v7 != v4) {
              goto LABEL_23;
            }
          }
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
    }
  }
  else
  {
LABEL_23:
    uint64_t v6 = 0;
  }
  return v6 != 0;
}

double md::VenueLogicContext::getVenueLevelElevation(md::VenueLogicContext *this, uint64_t a2, unsigned __int16 a3, int a4)
{
  md::VenueLogicContext::buildingElevation(this, a2, a4);
  if (v9)
  {
    uint64_t v10 = (void *)((char *)this + 16);
    while (1)
    {
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        break;
      }
      uint64_t v11 = v10[3];
      uint64_t v12 = *(uint64_t **)(v11 + 16);
      int v13 = *(uint64_t **)(v11 + 24);
      if (v12 != v13)
      {
        while (v12[3] != a2)
        {
          v12 += 15;
          if (v12 == v13)
          {
            uint64_t v12 = v13;
            break;
          }
        }
      }
      if (v12 != v13)
      {
        if (v12)
        {
          uint64_t v14 = *v12;
          uint64_t v15 = v12[1];
          if (v14 != v15)
          {
            while (*(unsigned __int16 *)(v14 + 8) != a3)
            {
              v14 += 184;
              if (v14 == v15) {
                return result;
              }
            }
            if (*(unsigned char *)(v14 + 168))
            {
              double v16 = 1.0;
              if (a4) {
                double v16 = *((float *)this + 73);
              }
              return v16 * *(double *)(v14 + 176);
            }
          }
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t md::VenueLogicContext::buildingElevation(md::VenueLogicContext *this, uint64_t a2, int a3)
{
  uint8x8_t v3 = (void *)((char *)this + 16);
  while (1)
  {
    uint8x8_t v3 = (void *)*v3;
    if (!v3) {
      break;
    }
    uint64_t v4 = v3[3];
    uint64_t v5 = *(void *)(v4 + 16);
    uint64_t v6 = *(void *)(v4 + 24);
    if (v5 != v6)
    {
      while (*(void *)(v5 + 24) != a2)
      {
        v5 += 120;
        if (v5 == v6)
        {
          uint64_t v5 = v6;
          break;
        }
      }
    }
    if (v5 != v6)
    {
      if (v5 && *(unsigned char *)(v5 + 104))
      {
        double v7 = 1.0;
        if (a3) {
          double v7 = *((float *)this + 73);
        }
        *(double *)&uint64_t result = v7 * *(double *)(v5 + 112);
        return result;
      }
      break;
    }
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  char v9 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_ERROR, "Building couldn't be found to determine elevation. Verify the code and the data, file a bug for data team if necessary.", v10, 2u);
  }

  *(double *)&uint64_t result = 0.0;
  return result;
}

uint64_t md::VenueLogicContext::displayedFloorOrdinalForVenueBuildingId(int8x8_t *this, uint64_t a2)
{
  uint64_t v2 = this + 2;
  do
  {
    uint64_t v2 = (int8x8_t *)*v2;
    if (!v2) {
      return 0;
    }
    int8x8_t v3 = v2[3];
    uint64_t v4 = *(void **)(*(void *)&v3 + 16);
    uint64_t v5 = *(void **)(*(void *)&v3 + 24);
    if (v4 != v5)
    {
      while (v4[3] != a2)
      {
        v4 += 15;
        if (v4 == v5)
        {
          uint64_t v4 = v5;
          break;
        }
      }
    }
  }
  while (v4 == v5);
  if (!v4) {
    return (__int16)v4;
  }
  int8x8_t v7 = this[6];
  if (!*(void *)&v7) {
    goto LABEL_30;
  }
  unint64_t v8 = v4[3];
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v4[3];
    if (v8 >= *(void *)&v7) {
      unint64_t v10 = v8 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v8;
  }
  uint64_t v11 = *(void **)(*(void *)&this[5] + 8 * v10);
  if (!v11 || (uint64_t v12 = (void *)*v11) == 0)
  {
LABEL_30:
    v4 += 7;
    goto LABEL_31;
  }
  if (v9.u32[0] < 2uLL)
  {
    uint64_t v13 = *(void *)&v7 - 1;
    while (1)
    {
      uint64_t v15 = v12[1];
      if (v8 == v15)
      {
        if (v12[2] == v8) {
          goto LABEL_33;
        }
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_30;
      }
      uint64_t v12 = (void *)*v12;
      if (!v12) {
        goto LABEL_30;
      }
    }
  }
  while (1)
  {
    unint64_t v14 = v12[1];
    if (v8 == v14) {
      break;
    }
    if (v14 >= *(void *)&v7) {
      v14 %= *(void *)&v7;
    }
    if (v14 != v10) {
      goto LABEL_30;
    }
LABEL_20:
    uint64_t v12 = (void *)*v12;
    if (!v12) {
      goto LABEL_30;
    }
  }
  if (v12[2] != v8) {
    goto LABEL_20;
  }
LABEL_33:
  uint64_t v4 = v12 + 3;
LABEL_31:
  LOWORD(v4) = *(_WORD *)v4;
  return (__int16)v4;
}

uint64_t md::VenueLogic::venueInProximityToWorldPoint(uint64_t a1, float64x2_t *a2, __n128 a3)
{
  if (a3.n128_f32[0] <= 0.0 || (float)(16.0 - *(float *)(a1 + 692)) <= a3.n128_f32[0])
  {
    md::VenueLogicContext::venuesInProximityToWorldPoint((unint64_t *)&v6, a1 + 208, a2, a3);
    if (v7 == v6)
    {
      uint64_t v4 = 0;
      uint64_t v3 = 0;
      if (!v7) {
        return v3;
      }
    }
    else
    {
      uint64_t v4 = *v6;
    }
    operator delete(v6);
    return v4;
  }
  return 0;
}

BOOL md::VenueLogic::displayedFloorIsDefaultForVenueBuilding(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2 = a1[32];
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (*(void *)&v2 <= a2) {
        unint64_t v4 = a2 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v4 = (*(void *)&v2 - 1) & a2;
    }
    uint64_t v5 = *(void **)(*(void *)&a1[31] + 8 * v4);
    if (v5)
    {
      uint64_t v5 = (void *)*v5;
      if (v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          uint64_t v6 = *(void *)&v2 - 1;
          while (1)
          {
            uint64_t v8 = v5[1];
            if (v8 == a2)
            {
              if (v5[2] == a2) {
                return v5 == 0;
              }
            }
            else if ((v8 & v6) != v4)
            {
              goto LABEL_21;
            }
            uint64_t v5 = (void *)*v5;
            if (!v5) {
              return v5 == 0;
            }
          }
        }
        do
        {
          unint64_t v7 = v5[1];
          if (v7 == a2)
          {
            if (v5[2] == a2) {
              return v5 == 0;
            }
          }
          else
          {
            if (v7 >= *(void *)&v2) {
              v7 %= *(void *)&v2;
            }
            if (v7 != v4) {
              goto LABEL_21;
            }
          }
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
    }
  }
  else
  {
LABEL_21:
    uint64_t v5 = 0;
  }
  return v5 == 0;
}

uint64_t md::VenueLogic::displayedFloorOrdinalForVenueBuilding(int8x8_t *a1, unint64_t a2, __int16 a3)
{
  int8x8_t v3 = a1[32];
  if (!*(void *)&v3) {
    return a3;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2;
    if (*(void *)&v3 <= a2) {
      unint64_t v5 = a2 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v3 - 1) & a2;
  }
  uint64_t v6 = *(uint64_t ****)(*(void *)&a1[31] + 8 * v5);
  if (!v6) {
    return a3;
  }
  unint64_t v7 = *v6;
  if (!v7) {
    return a3;
  }
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v11 = v7[1];
      if (v11 == (uint64_t *)a2)
      {
        if (v7[2] == (uint64_t *)a2) {
          return *((__int16 *)v7 + 12);
        }
      }
      else if (((unint64_t)v11 & v8) != v5)
      {
        return a3;
      }
      unint64_t v7 = (uint64_t **)*v7;
      if (!v7) {
        return a3;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = (unint64_t)v7[1];
    if (v9 == a2) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      return a3;
    }
LABEL_11:
    unint64_t v7 = (uint64_t **)*v7;
    if (!v7) {
      return a3;
    }
  }
  if (v7[2] != (uint64_t *)a2) {
    goto LABEL_11;
  }
  return *((__int16 *)v7 + 12);
}

void *md::VenueLogic::setDisplayedFloorOrdinalForVenueBuilding(void *result, unint64_t a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unint64_t v5 = a2;
  uint64_t v6 = (float *)result;
  uint64_t v8 = result + 31;
  unint64_t v9 = result[32];
  if (!v9)
  {
    if (a3 == a4) {
      return result;
    }
    goto LABEL_43;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = a2;
    if (v9 <= a2) {
      unint64_t v11 = a2 % v9;
    }
  }
  else
  {
    unint64_t v11 = (v9 - 1) & a2;
  }
  uint64_t v12 = *(uint64_t ****)(*v8 + 8 * v11);
  if (!v12 || (uint64_t v13 = *v12) == 0)
  {
LABEL_23:
    if (a3 == a4) {
      return result;
    }
    goto LABEL_24;
  }
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == (uint64_t *)a2)
      {
        if (v13[2] == (uint64_t *)a2) {
          goto LABEL_63;
        }
      }
      else if (((unint64_t)v15 & (v9 - 1)) != v11)
      {
        goto LABEL_23;
      }
      uint64_t v13 = (uint64_t **)*v13;
      if (!v13) {
        goto LABEL_23;
      }
    }
  }
  while (1)
  {
    unint64_t v14 = (unint64_t)v13[1];
    if (v14 == a2) {
      break;
    }
    if (v14 >= v9) {
      v14 %= v9;
    }
    if (v14 != v11) {
      goto LABEL_23;
    }
LABEL_13:
    uint64_t v13 = (uint64_t **)*v13;
    if (!v13) {
      goto LABEL_23;
    }
  }
  if (v13[2] != (uint64_t *)a2) {
    goto LABEL_13;
  }
LABEL_63:
  if (*((unsigned __int16 *)v13 + 12) == a4) {
    return result;
  }
LABEL_24:
  uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v9 <= a2) {
      unint64_t v4 = a2 % v9;
    }
  }
  else
  {
    unint64_t v4 = (v9 - 1) & a2;
  }
  uint64_t v17 = *(void ***)(*v8 + 8 * v4);
  if (v17)
  {
    uint64_t v18 = *v17;
    if (*v17)
    {
      if (v16.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v20 = v18[1];
          if (v20 == a2)
          {
            if (v18[2] == a2) {
              goto LABEL_83;
            }
          }
          else if ((v20 & (v9 - 1)) != v4)
          {
            goto LABEL_43;
          }
          uint64_t v18 = (void *)*v18;
          if (!v18) {
            goto LABEL_43;
          }
        }
      }
      do
      {
        unint64_t v19 = v18[1];
        if (v19 == a2)
        {
          if (v18[2] == a2) {
            goto LABEL_83;
          }
        }
        else
        {
          if (v19 >= v9) {
            v19 %= v9;
          }
          if (v19 != v4) {
            break;
          }
        }
        uint64_t v18 = (void *)*v18;
      }
      while (v18);
    }
  }
LABEL_43:
  uint64_t v18 = operator new(0x20uLL);
  *uint64_t v18 = 0;
  v18[1] = v5;
  v18[2] = v5;
  *((_WORD *)v18 + 12) = 0;
  float v21 = (float)(unint64_t)(*((void *)v6 + 34) + 1);
  float v22 = v6[70];
  if (v9 && (float)(v22 * (float)v9) >= v21)
  {
    unint64_t v5 = v4;
  }
  else
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *((void *)v6 + 32);
    }
    if (prime > v9) {
      goto LABEL_56;
    }
    if (prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)v6 + 34) / v6[70]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v9) {
LABEL_56:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v8, prime);
    }
    unint64_t v9 = *((void *)v6 + 32);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v5) {
        v5 %= v9;
      }
    }
    else
    {
      v5 &= v9 - 1;
    }
  }
  uint64_t v30 = *v8;
  BOOL v31 = *(void **)(*v8 + 8 * v5);
  if (v31)
  {
    *uint64_t v18 = *v31;
    goto LABEL_81;
  }
  *uint64_t v18 = *((void *)v6 + 33);
  *((void *)v6 + 33) = v18;
  *(void *)(v30 + 8 * v5) = v6 + 66;
  if (*v18)
  {
    unint64_t v32 = *(void *)(*v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v32 >= v9) {
        v32 %= v9;
      }
    }
    else
    {
      v32 &= v9 - 1;
    }
    BOOL v31 = (void *)(*v8 + 8 * v32);
LABEL_81:
    *BOOL v31 = v18;
  }
  ++*((void *)v6 + 34);
LABEL_83:
  *((_WORD *)v18 + 12) = a4;
  uint64_t result = (void *)*((void *)v6 + 98);
  if (result)
  {
    long long v33 = *(uint64_t (**)(void))(*result + 48);
    return (void *)v33();
  }
  return result;
}

void sub_1A21E9DD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2md10VenueLogic23setBaseMapDimmingFactorEfbd_block_invoke(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(float *)(v2 + 488) = *(float *)(a1 + 40) + (float)((float)(*(float *)(a1 + 44) - *(float *)(a1 + 40)) * a2);
  uint64_t result = *(void *)(v2 + 848);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t ___ZN2md10VenueLogic23setBaseMapDimmingFactorEfbd_block_invoke_2(uint64_t result, int a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 32);
    *(_DWORD *)(v2 + 488) = *(_DWORD *)(result + 40);
    uint64_t result = *(void *)(v2 + 848);
    if (result) {
      return (*(uint64_t (**)(void))(*(void *)result + 48))();
    }
  }
  return result;
}

void md::VenueLogic::logicContext(md::VenueLogic *this, uint64_t a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = *(_DWORD *)(a2 + 240);
  unint64_t prime = *(void *)(a2 + 216);
  if (prime == 1)
  {
    unint64_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(*(void *)(a2 + 216));
    int8x8_t v6 = *(int8x8_t *)((char *)this + 8);
    BOOL v7 = prime >= *(void *)&v6;
    if (prime > *(void *)&v6) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v6 = 0;
    BOOL v7 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v7)
  {
    unint64_t v8 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
    if (*(void *)&v6 < 3uLL || (uint8x8_t v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      unint64_t v8 = std::__next_prime(v8);
    }
    else
    {
      uint64_t v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2) {
        unint64_t v8 = v10;
      }
    }
    if (prime <= v8) {
      unint64_t prime = v8;
    }
    if (prime < *(void *)&v6) {
      goto LABEL_17;
    }
  }
LABEL_18:
  unint64_t v11 = *(void **)(a2 + 224);
  if (v11)
  {
    uint64_t v12 = (unint64_t *)((char *)this + 16);
    do
    {
      unint64_t v13 = v11[2];
      unint64_t v14 = *((void *)this + 1);
      if (v14)
      {
        uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          unint64_t v2 = v11[2];
          if (v13 >= v14) {
            unint64_t v2 = v13 % v14;
          }
        }
        else
        {
          unint64_t v2 = (v14 - 1) & v13;
        }
        uint8x8_t v16 = *(void **)(*(void *)this + 8 * v2);
        if (v16)
        {
          uint64_t v17 = (void *)*v16;
          if (v17)
          {
            if (v15.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v19 = v17[1];
                if (v19 == v13)
                {
                  if (v17[2] == v13) {
                    goto LABEL_80;
                  }
                }
                else if ((v19 & (v14 - 1)) != v2)
                {
                  goto LABEL_40;
                }
                uint64_t v17 = (void *)*v17;
                if (!v17) {
                  goto LABEL_40;
                }
              }
            }
            do
            {
              unint64_t v18 = v17[1];
              if (v18 == v13)
              {
                if (v17[2] == v13) {
                  goto LABEL_80;
                }
              }
              else
              {
                if (v18 >= v14) {
                  v18 %= v14;
                }
                if (v18 != v2) {
                  break;
                }
              }
              uint64_t v17 = (void *)*v17;
            }
            while (v17);
          }
        }
      }
LABEL_40:
      unint64_t prime = (unint64_t)operator new(0x28uLL);
      *(void *)unint64_t prime = 0;
      *(void *)(prime + 8) = v13;
      uint64_t v20 = v11[3];
      *(void *)(prime + 16) = v11[2];
      *(void *)(prime + 24) = v20;
      uint64_t v21 = v11[4];
      *(void *)(prime + 32) = v21;
      if (v21) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
      }
      float v22 = (float)(unint64_t)(*((void *)this + 3) + 1);
      float v23 = *((float *)this + 8);
      if (!v14 || (float)(v23 * (float)v14) < v22)
      {
        BOOL v24 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3) {
          BOOL v24 = 1;
        }
        unint64_t v25 = v24 | (2 * v14);
        unint64_t v26 = vcvtps_u32_f32(v22 / v23);
        if (v25 <= v26) {
          size_t v27 = v26;
        }
        else {
          size_t v27 = v25;
        }
        if (v27 == 1)
        {
          size_t v27 = 2;
        }
        else if ((v27 & (v27 - 1)) != 0)
        {
          size_t v27 = std::__next_prime(v27);
        }
        int8x8_t v28 = *(int8x8_t *)((char *)this + 8);
        if (v27 > *(void *)&v28) {
          goto LABEL_54;
        }
        if (v27 < *(void *)&v28)
        {
          unint64_t v29 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
          if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
          {
            unint64_t v29 = std::__next_prime(v29);
          }
          else
          {
            uint64_t v31 = 1 << -(char)__clz(v29 - 1);
            if (v29 >= 2) {
              unint64_t v29 = v31;
            }
          }
          if (v27 <= v29) {
            size_t v27 = v29;
          }
          if (v27 < *(void *)&v28) {
LABEL_54:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this, v27);
        }
        unint64_t v14 = *((void *)this + 1);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v13 >= v14) {
            unint64_t v2 = v13 % v14;
          }
          else {
            unint64_t v2 = v13;
          }
        }
        else
        {
          unint64_t v2 = (v14 - 1) & v13;
        }
      }
      uint64_t v32 = *(void *)this;
      long long v33 = *(unint64_t **)(*(void *)this + 8 * v2);
      if (v33)
      {
        *(void *)unint64_t prime = *v33;
      }
      else
      {
        *(void *)unint64_t prime = *v12;
        *uint64_t v12 = prime;
        *(void *)(v32 + 8 * v2) = v12;
        if (!*(void *)prime) {
          goto LABEL_79;
        }
        unint64_t v34 = *(void *)(*(void *)prime + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v34 >= v14) {
            v34 %= v14;
          }
        }
        else
        {
          v34 &= v14 - 1;
        }
        long long v33 = (unint64_t *)(*(void *)this + 8 * v34);
      }
      *long long v33 = prime;
LABEL_79:
      ++*((void *)this + 3);
LABEL_80:
      unint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v109 = (uint64_t *)((char *)this + 40);
  *((_DWORD *)this + 18) = *(_DWORD *)(a2 + 280);
  size_t v35 = *(void *)(a2 + 256);
  if (v35 == 1)
  {
    size_t v35 = 2;
LABEL_97:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v109, v35);
    goto LABEL_98;
  }
  if ((v35 & (v35 - 1)) != 0)
  {
    size_t v35 = std::__next_prime(*(void *)(a2 + 256));
    int8x8_t v36 = *(int8x8_t *)((char *)this + 48);
    BOOL v37 = v35 >= *(void *)&v36;
    if (v35 > *(void *)&v36) {
      goto LABEL_97;
    }
  }
  else
  {
    int8x8_t v36 = 0;
    BOOL v37 = 1;
    if (v35) {
      goto LABEL_97;
    }
  }
  if (!v37)
  {
    unint64_t v38 = vcvtps_u32_f32((float)*((unint64_t *)this + 8) / *((float *)this + 18));
    if (*(void *)&v36 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v36), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
    {
      unint64_t v38 = std::__next_prime(v38);
    }
    else
    {
      uint64_t v40 = 1 << -(char)__clz(v38 - 1);
      if (v38 >= 2) {
        unint64_t v38 = v40;
      }
    }
    if (v35 <= v38) {
      size_t v35 = v38;
    }
    if (v35 < *(void *)&v36) {
      goto LABEL_97;
    }
  }
LABEL_98:
  BOOL v41 = *(void **)(a2 + 264);
  if (v41)
  {
    long long v42 = (void *)((char *)this + 56);
    unint64_t v43 = *((void *)this + 6);
    do
    {
      unint64_t v44 = v41[2];
      if (v43)
      {
        uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
        v45.i16[0] = vaddlv_u8(v45);
        if (v45.u32[0] > 1uLL)
        {
          unint64_t prime = v41[2];
          if (v44 >= v43) {
            unint64_t prime = v44 % v43;
          }
        }
        else
        {
          unint64_t prime = (v43 - 1) & v44;
        }
        int v46 = *(void **)(*v109 + 8 * prime);
        if (v46)
        {
          long long v47 = (void *)*v46;
          if (v47)
          {
            if (v45.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v49 = v47[1];
                if (v49 == v44)
                {
                  if (v47[2] == v44) {
                    goto LABEL_158;
                  }
                }
                else if ((v49 & (v43 - 1)) != prime)
                {
                  goto LABEL_120;
                }
                long long v47 = (void *)*v47;
                if (!v47) {
                  goto LABEL_120;
                }
              }
            }
            do
            {
              unint64_t v48 = v47[1];
              if (v48 == v44)
              {
                if (v47[2] == v44) {
                  goto LABEL_158;
                }
              }
              else
              {
                if (v48 >= v43) {
                  v48 %= v43;
                }
                if (v48 != prime) {
                  break;
                }
              }
              long long v47 = (void *)*v47;
            }
            while (v47);
          }
        }
      }
LABEL_120:
      unint64_t v50 = operator new(0x20uLL);
      *unint64_t v50 = 0;
      v50[1] = v44;
      *((_OWORD *)v50 + 1) = *((_OWORD *)v41 + 1);
      float v51 = (float)(unint64_t)(*((void *)this + 8) + 1);
      float v52 = *((float *)this + 18);
      if (!v43 || (float)(v52 * (float)v43) < v51)
      {
        BOOL v53 = (v43 & (v43 - 1)) != 0;
        if (v43 < 3) {
          BOOL v53 = 1;
        }
        unint64_t v54 = v53 | (2 * v43);
        unint64_t v55 = vcvtps_u32_f32(v51 / v52);
        if (v54 <= v55) {
          size_t v56 = v55;
        }
        else {
          size_t v56 = v54;
        }
        if (v56 == 1)
        {
          size_t v56 = 2;
        }
        else if ((v56 & (v56 - 1)) != 0)
        {
          size_t v56 = std::__next_prime(v56);
          unint64_t v43 = *((void *)this + 6);
        }
        if (v56 > v43) {
          goto LABEL_132;
        }
        if (v56 < v43)
        {
          unint64_t v57 = vcvtps_u32_f32((float)*((unint64_t *)this + 8) / *((float *)this + 18));
          if (v43 < 3 || (uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v43), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
          {
            unint64_t v57 = std::__next_prime(v57);
          }
          else
          {
            uint64_t v59 = 1 << -(char)__clz(v57 - 1);
            if (v57 >= 2) {
              unint64_t v57 = v59;
            }
          }
          if (v56 <= v57) {
            size_t v56 = v57;
          }
          if (v56 < v43) {
LABEL_132:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v109, v56);
        }
        unint64_t v43 = *((void *)this + 6);
        if ((v43 & (v43 - 1)) != 0)
        {
          if (v44 >= v43) {
            unint64_t prime = v44 % v43;
          }
          else {
            unint64_t prime = v44;
          }
        }
        else
        {
          unint64_t prime = (v43 - 1) & v44;
        }
      }
      uint64_t v60 = *v109;
      BOOL v61 = *(void **)(*v109 + 8 * prime);
      if (v61)
      {
        *unint64_t v50 = *v61;
      }
      else
      {
        *unint64_t v50 = *v42;
        *long long v42 = v50;
        *(void *)(v60 + 8 * prime) = v42;
        if (!*v50) {
          goto LABEL_157;
        }
        unint64_t v62 = *(void *)(*v50 + 8);
        if ((v43 & (v43 - 1)) != 0)
        {
          if (v62 >= v43) {
            v62 %= v43;
          }
        }
        else
        {
          v62 &= v43 - 1;
        }
        BOOL v61 = (void *)(*v109 + 8 * v62);
      }
      void *v61 = v50;
LABEL_157:
      ++*((void *)this + 8);
LABEL_158:
      BOOL v41 = (void *)*v41;
    }
    while (v41);
  }
  unint64_t v63 = (unint64_t)this + 80;
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)this + 80, a2 + 288);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  unint64_t v65 = *(unsigned char **)(a2 + 328);
  unint64_t v64 = *(unsigned char **)(a2 + 336);
  int64_t v66 = v64 - v65;
  if (v64 != v65)
  {
    if (v66 < 0) {
      abort();
    }
    int v67 = (char *)operator new(v64 - v65);
    *((void *)this + 15) = v67;
    *((void *)this + 16) = v67;
    unsigned __int8 v68 = &v67[8 * (v66 >> 3)];
    *((void *)this + 17) = v68;
    memcpy(v67, v65, v66);
    *((void *)this + 16) = v68;
  }
  long long v69 = *(_OWORD *)(a2 + 464);
  *((_OWORD *)this + 15) = *(_OWORD *)(a2 + 448);
  *((_OWORD *)this + 16) = v69;
  *((_OWORD *)this + 17) = *(_OWORD *)(a2 + 480);
  long long v70 = *(_OWORD *)(a2 + 400);
  *((_OWORD *)this + 11) = *(_OWORD *)(a2 + 384);
  *((_OWORD *)this + 12) = v70;
  long long v71 = *(_OWORD *)(a2 + 432);
  *((_OWORD *)this + 13) = *(_OWORD *)(a2 + 416);
  *((_OWORD *)this + 14) = v71;
  long long v72 = *(_OWORD *)(a2 + 368);
  *((_OWORD *)this + 9) = *(_OWORD *)(a2 + 352);
  *((_OWORD *)this + 10) = v72;
  *(_OWORD *)((char *)this + 281) = *(_OWORD *)(a2 + 489);
  uint64_t v73 = (uint64_t *)((char *)this + 304);
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = *(_DWORD *)(a2 + 544);
  size_t v74 = *(void *)(a2 + 520);
  if (v74 == 1)
  {
    size_t v74 = 2;
LABEL_178:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this + 304, v74);
    goto LABEL_179;
  }
  if ((v74 & (v74 - 1)) != 0)
  {
    size_t v74 = std::__next_prime(v74);
    int8x8_t v75 = *(int8x8_t *)((char *)this + 312);
    BOOL v76 = v74 >= *(void *)&v75;
    if (v74 > *(void *)&v75) {
      goto LABEL_178;
    }
  }
  else
  {
    int8x8_t v75 = 0;
    BOOL v76 = 1;
    if (v74) {
      goto LABEL_178;
    }
  }
  if (!v76)
  {
    unint64_t v77 = vcvtps_u32_f32((float)*((unint64_t *)this + 41) / *((float *)this + 84));
    if (*(void *)&v75 < 3uLL || (uint8x8_t v78 = (uint8x8_t)vcnt_s8(v75), v78.i16[0] = vaddlv_u8(v78), v78.u32[0] > 1uLL))
    {
      unint64_t v77 = std::__next_prime(v77);
    }
    else
    {
      uint64_t v79 = 1 << -(char)__clz(v77 - 1);
      if (v77 >= 2) {
        unint64_t v77 = v79;
      }
    }
    if (v74 <= v77) {
      size_t v74 = v77;
    }
    if (v74 < *(void *)&v75) {
      goto LABEL_178;
    }
  }
LABEL_179:
  uint64_t v107 = a2;
  unint64_t v80 = *(uint64_t **)(a2 + 528);
  if (v80)
  {
    int v108 = (void *)((char *)this + 320);
    unint64_t v81 = *((void *)this + 39);
    do
    {
      unint64_t v82 = v80[2];
      if (v81)
      {
        uint8x8_t v83 = (uint8x8_t)vcnt_s8((int8x8_t)v81);
        v83.i16[0] = vaddlv_u8(v83);
        if (v83.u32[0] > 1uLL)
        {
          unint64_t v63 = v80[2];
          if (v82 >= v81) {
            unint64_t v63 = v82 % v81;
          }
        }
        else
        {
          unint64_t v63 = (v81 - 1) & v82;
        }
        double v84 = *(void **)(*v73 + 8 * v63);
        if (v84)
        {
          uint64_t v85 = (void *)*v84;
          if (v85)
          {
            if (v83.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v87 = v85[1];
                if (v87 == v82)
                {
                  if (v85[2] == v82) {
                    goto LABEL_242;
                  }
                }
                else if ((v87 & (v81 - 1)) != v63)
                {
                  goto LABEL_201;
                }
                uint64_t v85 = (void *)*v85;
                if (!v85) {
                  goto LABEL_201;
                }
              }
            }
            do
            {
              unint64_t v86 = v85[1];
              if (v86 == v82)
              {
                if (v85[2] == v82) {
                  goto LABEL_242;
                }
              }
              else
              {
                if (v86 >= v81) {
                  v86 %= v81;
                }
                if (v86 != v63) {
                  break;
                }
              }
              uint64_t v85 = (void *)*v85;
            }
            while (v85);
          }
        }
      }
LABEL_201:
      uint64_t v88 = operator new(0x38uLL);
      *uint64_t v88 = 0;
      v88[1] = v82;
      uint64_t v89 = v80[2];
      v88[3] = 0;
      v88[2] = v89;
      v88[4] = 0;
      v88[5] = 0;
      int v91 = (unsigned char *)v80[3];
      int v90 = (unsigned char *)v80[4];
      int64_t v92 = v90 - v91;
      if (v90 != v91)
      {
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v92 >> 3)) >= 0x492492492492493) {
          abort();
        }
        long long v93 = (char *)operator new(v92);
        v88[3] = v93;
        v88[4] = v93;
        uint64_t v94 = &v93[8 * (v92 >> 3)];
        v88[5] = v94;
        memcpy(v93, v91, v92);
        v88[4] = v94;
        uint64_t v73 = (uint64_t *)((char *)this + 304);
      }
      *((_WORD *)v88 + 24) = *((_WORD *)v80 + 24);
      float v95 = (float)(unint64_t)(*((void *)this + 41) + 1);
      float v96 = *((float *)this + 84);
      if (!v81 || (float)(v96 * (float)v81) < v95)
      {
        BOOL v97 = (v81 & (v81 - 1)) != 0;
        if (v81 < 3) {
          BOOL v97 = 1;
        }
        unint64_t v98 = v97 | (2 * v81);
        unint64_t v99 = vcvtps_u32_f32(v95 / v96);
        if (v98 <= v99) {
          size_t v100 = v99;
        }
        else {
          size_t v100 = v98;
        }
        if (v100 == 1)
        {
          size_t v100 = 2;
        }
        else if ((v100 & (v100 - 1)) != 0)
        {
          size_t v100 = std::__next_prime(v100);
          unint64_t v81 = *((void *)this + 39);
        }
        if (v100 > v81) {
          goto LABEL_216;
        }
        if (v100 < v81)
        {
          unint64_t v101 = vcvtps_u32_f32((float)*((unint64_t *)this + 41) / *((float *)this + 84));
          if (v81 < 3 || (uint8x8_t v102 = (uint8x8_t)vcnt_s8((int8x8_t)v81), v102.i16[0] = vaddlv_u8(v102), v102.u32[0] > 1uLL))
          {
            unint64_t v101 = std::__next_prime(v101);
          }
          else
          {
            uint64_t v103 = 1 << -(char)__clz(v101 - 1);
            if (v101 >= 2) {
              unint64_t v101 = v103;
            }
          }
          if (v100 <= v101) {
            size_t v100 = v101;
          }
          if (v100 < v81) {
LABEL_216:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v73, v100);
        }
        unint64_t v81 = *((void *)this + 39);
        if ((v81 & (v81 - 1)) != 0)
        {
          if (v82 >= v81) {
            unint64_t v63 = v82 % v81;
          }
          else {
            unint64_t v63 = v82;
          }
        }
        else
        {
          unint64_t v63 = (v81 - 1) & v82;
        }
      }
      uint64_t v104 = *v73;
      unint64_t v105 = *(void **)(*v73 + 8 * v63);
      if (v105)
      {
        *uint64_t v88 = *v105;
      }
      else
      {
        *uint64_t v88 = *v108;
        *int v108 = v88;
        *(void *)(v104 + 8 * v63) = v108;
        if (!*v88) {
          goto LABEL_241;
        }
        unint64_t v106 = *(void *)(*v88 + 8);
        if ((v81 & (v81 - 1)) != 0)
        {
          if (v106 >= v81) {
            v106 %= v81;
          }
        }
        else
        {
          v106 &= v81 - 1;
        }
        unint64_t v105 = (void *)(*v73 + 8 * v106);
      }
      void *v105 = v88;
LABEL_241:
      ++*((void *)this + 41);
LABEL_242:
      unint64_t v80 = (uint64_t *)*v80;
    }
    while (v80);
  }
  *((void *)this + 43) = *(void *)(v107 + 552);
  *((unsigned char *)this + 352) = *(unsigned char *)(v107 + 560);
}

void sub_1A21EAA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint8x8_t v16 = *(void **)(v14 + 56);
  if (v16)
  {
    do
    {
      uint64_t v17 = (void *)*v16;
      operator delete(v16);
      uint8x8_t v16 = v17;
    }
    while (v17);
  }
  unint64_t v18 = *a14;
  *a14 = 0;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(v14 + 16);
  while (v19)
  {
    uint64_t v20 = v19;
    uint64_t v19 = (void *)*v19;
    uint64_t v21 = (std::__shared_weak_count *)v20[4];
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    operator delete(v20);
  }
  float v22 = *(void **)v14;
  *(void *)uint64_t v14 = 0;
  if (v22) {
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t altitude::RoadTilePrivate::anchorTile(altitude::RoadTilePrivate *this)
{
  return *((void *)this + 4);
}

uint64_t altitude::RoadTilePrivate::renderStamp(altitude::RoadTilePrivate *this)
{
  return *((void *)this + 19);
}

uint64_t altitude::RoadTilePrivate::key(altitude::RoadTilePrivate *this)
{
  return *((void *)this + 1);
}

void altitude::RoadTilePrivate::~RoadTilePrivate(altitude::RoadTilePrivate *this)
{
  altitude::RoadTilePrivate::~RoadTilePrivate(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;

  *(void *)this = &unk_1EF5690E8;
  unint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  int8x8_t v3 = *((void *)this + 16);
  if (v3)
  {
    unint64_t v4 = *((void *)this + 17);
    unint64_t v5 = (void *)*((void *)this + 16);
    if (v4 != v3)
    {
      do
      {
        int8x8_t v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 16;
      }
      while (v4 != v3);
      unint64_t v5 = (void *)*((void *)this + 16);
    }
    *((void *)this + 17) = v3;
    operator delete(v5);
  }
  BOOL v7 = (void *)*((void *)this + 13);
  if (v7)
  {
    *((void *)this + 14) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint8x8_t v9 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v9) {
      goto LABEL_20;
    }
  }
  else
  {
    uint8x8_t v9 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v9) {
      goto LABEL_20;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_20:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v11) {
      return;
    }
  }
  else
  {
    unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v11) {
      return;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void altitude::RoadTilePrivate::willBeDrawn(altitude::RoadTilePrivate *this, altitude::View *a2, karo::graphics::Viewport *a3, unsigned __int8 *a4, altitude::StencilManager *a5)
{
  BOOL v7 = this;
  uint64_t v8 = *((void *)this + 9);
  int v9 = *((_DWORD *)this + 4);
  int v10 = *(_DWORD *)(v8 + 72);
  unsigned int v11 = 0;
  char v12 = v9 - v10;
  if (v9 != v10)
  {
    unsigned int v13 = *((_DWORD *)this + 3) - (*(_DWORD *)(v8 + 68) << v12);
    unsigned int v14 = *((_DWORD *)this + 2) - (*(_DWORD *)(v8 + 64) << v12);
    int v15 = ~v10 + v9;
    int v16 = 2 * v15;
    do
    {
      v11 += (v14 >> v15 << v16) + (2 << v16) * (v13 >> v15);
      v14 -= v14 >> v15 << v15;
      v13 -= v13 >> v15 << v15;
      --v15;
      v16 -= 2;
    }
    while (v15 != -1);
  }
  if (*(karo::graphics::Viewport **)(v8 + 80) != a3)
  {
    *(void *)(v8 + 80) = a3;
    uint64_t v222 = v8;
    uint64_t v20 = *(void *)(v8 + 144);
    if (!v20) {
      goto LABEL_124;
    }
    float v22 = *(uint64_t **)(v20 + 8);
    uint64_t v21 = *(uint64_t **)(v20 + 16);
    if (v22 == v21) {
      goto LABEL_124;
    }
    unsigned int v220 = v11;
    long long v223 = *(uint64_t **)(v20 + 16);
    while (1)
    {
      uint64_t v29 = *v22;
      (*(void (**)(void, altitude::View *))(**(void **)(*v22 + 560) + 16))(*(void *)(*v22 + 560), a2);
      uint8x8_t v30 = *(char **)(v29 + 504);
      uint64_t v31 = *(char **)(v29 + 512);
      int v32 = *(unsigned __int8 *)(*(void *)(v29 + 560) + 289);
      if (v30 != v31)
      {
        unint64_t v33 = v31 - v30 - 8;
        if (v33 > 7)
        {
          uint64_t v34 = (v33 >> 3) + 1;
          size_t v35 = (uint64_t *)(v30 + 8);
          uint64_t v36 = v34 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            uint64_t v37 = *v35;
            *(unsigned char *)(*(v35 - 1) + 48) = v32;
            *(unsigned char *)(v37 + 48) = v32;
            v35 += 2;
            v36 -= 2;
          }
          while (v36);
          if (v34 == (v34 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_26;
          }
          v30 += 8 * (v34 & 0x3FFFFFFFFFFFFFFELL);
        }
        do
        {
          uint64_t v38 = *(void *)v30;
          v30 += 8;
          *(unsigned char *)(v38 + 48) = v32;
        }
        while (v30 != v31);
      }
LABEL_26:
      if (!v32) {
        goto LABEL_18;
      }
      double v39 = *((double *)a2 + 10);
      double v40 = *((double *)a2 + 11);
      double v41 = *((double *)a2 + 12);
      double v43 = *((double *)a2 + 8);
      double v42 = *((double *)a2 + 9);
      double v45 = *((double *)a2 + 6);
      double v44 = *((double *)a2 + 7);
      double v46 = -(v43 * v39 - v44 * v40) - (v43 * v39 - v44 * v40);
      double v47 = -(v45 * v40 - v43 * v42) - (v45 * v40 - v43 * v42);
      double v48 = -(v44 * v42 - v45 * v39) - (v44 * v42 - v45 * v39);
      double v49 = -(v48 * v42 - (-(v44 - v46 * v40) - v47 * v41));
      double v50 = -(v45 + v46 * v41 + v47 * v40 - v48 * v39);
      double v51 = v43 + v46 * v39 + v48 * v41;
      double v52 = v39 * -2.0;
      double v53 = -(v39 * (v39 * -2.0));
      double v54 = -(v40 * (v40 * -2.0));
      double v55 = 1.0 - (v53 - v40 * (v40 * -2.0));
      double v56 = -(v39 * (v42 * -2.0));
      double v57 = v40 * -2.0 * v41;
      double v58 = v56 - v57;
      double v59 = -(v40 * (v42 * -2.0));
      double v60 = v41 * v52;
      double v61 = v57 + v56;
      double v62 = v41 * v52 - v40 * (v42 * -2.0);
      double v63 = -(v40 * v52);
      double v64 = v42 * -2.0 * v42 + 1.0;
      double v65 = v41 * (v42 * -2.0);
      *(double *)long long v244 = v55;
      *(double *)&v244[1] = v61;
      double v245 = v58;
      double v246 = v64 - v54;
      double v249 = v62;
      double v250 = v63 - v65;
      *(double *)&v244[2] = v59 - v60;
      double v247 = v65 + v63;
      double v251 = v64 - v53;
      v244[3] = 0;
      uint64_t v248 = 0;
      uint64_t v252 = 0;
      double v253 = v50;
      double v254 = v49;
      double v255 = -(v51 - v47 * v42);
      uint64_t v256 = 0x3FF0000000000000;
      uint64_t v66 = *(void *)(v29 + 8);
      long long v67 = *(_OWORD *)(v66 + 216);
      v243[4] = *(_OWORD *)(v66 + 200);
      v243[5] = v67;
      long long v68 = *(_OWORD *)(v66 + 248);
      v243[6] = *(_OWORD *)(v66 + 232);
      v243[7] = v68;
      long long v69 = *(_OWORD *)(v66 + 152);
      v243[0] = *(_OWORD *)(v66 + 136);
      v243[1] = v69;
      long long v70 = *(_OWORD *)(v66 + 184);
      v243[2] = *(_OWORD *)(v66 + 168);
      v243[3] = v70;
      gm::operator*<double,4,4,4>(&v227, (double *)v244, (double *)v243);
      float v71 = v227;
      float v72 = v228;
      float v73 = v229;
      float v74 = v230;
      float v75 = v231;
      float v76 = v232;
      float v77 = v233;
      float v78 = v234;
      float v79 = v235;
      float v80 = v236;
      float v81 = v237;
      float v82 = v238;
      float v83 = v239;
      float v84 = v240;
      float v85 = v241;
      float v86 = v242;
      if (*(unsigned char *)(v29 + 264))
      {
        uint64_t v87 = *(void *)(v29 + 560);
        uint64_t v88 = *(unsigned __int8 *)(v87 + 292);
        *(void *)(v29 + 192) = v88;
        int v89 = *(unsigned __int8 *)(v87 + 293);
        unsigned int v90 = a4[48];
        if (v90 == 255)
        {
          unsigned int v90 = a4[8];
          if (v90 >= a4[9])
          {
            LOBYTE(v90) = 1;
            a4[8] = 1;
            a4[9] = a4[10];
          }
          a4[8] = v90 + 1;
          a4[48] = v90;
          unsigned int v91 = 1;
          a4[49] = 1;
        }
        else
        {
          unsigned int v91 = a4[49];
        }
        unsigned int v92 = 2 * v89;
        unsigned __int8 v93 = v92 - v91;
        if (v92 > v91)
        {
          unsigned int v91 = a4[8];
          if (v91 + v93 > a4[9])
          {
            LOBYTE(v91) = 1;
            a4[8] = 1;
            a4[9] = a4[10];
          }
          a4[8] = v91 + v93;
          a4[49] = v92;
          LOBYTE(v91) = v92;
        }
        *(_DWORD *)(v29 + 184) = (v92 - 1 + v90);
        uint64_t v94 = *(void **)(*(void *)(v29 + 176) + 64);
        float v95 = (void *)v94[4];
        float v96 = (void *)v94[6];
        uint64_t v97 = v94[2];
        unint64_t v98 = v95[1];
        uint64_t v99 = v95[9];
        *(float *)uint64_t v99 = v71;
        *(float *)(v99 + 4) = v72;
        *(float *)(v99 + 8) = v73;
        *(float *)(v99 + 12) = v74;
        *(float *)(v99 + 16) = v75;
        *(float *)(v99 + 20) = v76;
        *(float *)(v99 + 24) = v77;
        *(float *)(v99 + 28) = v78;
        *(float *)(v99 + 32) = v79;
        *(float *)(v99 + 36) = v80;
        *(float *)(v99 + 40) = v81;
        *(float *)(v99 + 44) = v82;
        *(float *)(v99 + 48) = v83;
        *(float *)(v99 + 52) = v84;
        *(float *)(v99 + 56) = v85;
        *(float *)(v99 + 60) = v86;
        *(_DWORD *)(v99 + 64) = *(_DWORD *)(v87 + 396);
        if (v95[8] > v98) {
          unint64_t v98 = v95[8];
        }
        v95[7] = 0;
        v95[8] = v98;
        unint64_t v100 = v96[1];
        unint64_t v101 = (_DWORD *)v96[9];
        *unint64_t v101 = *(_DWORD *)(v87 + 404);
        v101[1] = *(_DWORD *)(v87 + 408);
        v101[2] = *(_DWORD *)(v87 + 412);
        v101[3] = *(_DWORD *)(v87 + 416);
        v101[4] = *(_DWORD *)(v87 + 420);
        v101[5] = *(_DWORD *)(v87 + 424);
        v101[6] = *(_DWORD *)(v87 + 428);
        v101[7] = *(_DWORD *)(v87 + 432);
        unint64_t v102 = v96[8];
        if (v102 <= v100) {
          unint64_t v102 = v100;
        }
        v96[7] = 0;
        v96[8] = v102;
        unint64_t v103 = *(void *)(v97 + 8);
        **(_DWORD **)(v97 + 72) = 1065353216;
        if (*(void *)(v97 + 64) > v103) {
          unint64_t v103 = *(void *)(v97 + 64);
        }
        *(void *)(v97 + 56) = 0;
        *(void *)(v97 + 64) = v103;
        uint64_t v104 = *(uint64_t **)(v29 + 504);
        unint64_t v105 = *(uint64_t **)(v29 + 512);
        while (v104 != v105)
        {
          uint64_t v106 = *v104;
          *(void *)(*v104 + 224) = v88;
          if (v92 > v91)
          {
            unsigned __int8 v107 = v92 - v91;
            int v108 = a4[8];
            if (v108 + v107 > a4[9])
            {
              LOBYTE(v108) = 1;
              a4[8] = 1;
              a4[9] = a4[10];
            }
            a4[8] = v108 + v107;
            a4[49] = v92;
            LOBYTE(v91) = v92;
          }
          *(_DWORD *)(v106 + 216) = (v92 - 1 + v90);
          ++v104;
        }
      }
      if (*(unsigned char *)(v29 + 136))
      {
        uint64_t v109 = *(void *)(v29 + 560);
        int v110 = *(unsigned __int8 *)(v109 + 293);
        unsigned int v111 = a4[48];
        if (v111 == 255)
        {
          unsigned int v111 = a4[8];
          if (v111 >= a4[9])
          {
            LOBYTE(v111) = 1;
            a4[8] = 1;
            a4[9] = a4[10];
          }
          a4[8] = v111 + 1;
          a4[48] = v111;
          unsigned int v112 = 1;
          a4[49] = 1;
        }
        else
        {
          unsigned int v112 = a4[49];
        }
        unsigned int v113 = 2 * v110 - 1;
        unsigned __int8 v114 = v113 - v112;
        if (v113 > v112)
        {
          unsigned int v112 = a4[8];
          if (v112 + v114 > a4[9])
          {
            LOBYTE(v112) = 1;
            a4[8] = 1;
            a4[9] = a4[10];
          }
          a4[8] = v112 + v114;
          a4[49] = v113;
          LOBYTE(v112) = v113;
        }
        *(_DWORD *)(v29 + 56) = (v113 - 1 + v111);
        uint64_t v115 = *(unsigned __int8 *)(v109 + 292);
        *(void *)(v29 + 64) = v115;
        int v116 = *(void **)(*(void *)(v29 + 48) + 64);
        uint64_t v117 = v116[8];
        uint64_t v118 = v116[2];
        unsigned __int8 v119 = (void *)v116[6];
        unint64_t v120 = (void *)v116[4];
        unint64_t v121 = v120[1];
        uint64_t v122 = v120[9];
        *(float *)uint64_t v122 = v71;
        *(float *)(v122 + 4) = v72;
        *(float *)(v122 + 8) = v73;
        *(float *)(v122 + 12) = v74;
        *(float *)(v122 + 16) = v75;
        *(float *)(v122 + 20) = v76;
        *(float *)(v122 + 24) = v77;
        *(float *)(v122 + 28) = v78;
        *(float *)(v122 + 32) = v79;
        *(float *)(v122 + 36) = v80;
        *(float *)(v122 + 40) = v81;
        *(float *)(v122 + 44) = v82;
        *(float *)(v122 + 48) = v83;
        *(float *)(v122 + 52) = v84;
        *(float *)(v122 + 56) = v85;
        *(float *)(v122 + 60) = v86;
        *(_DWORD *)(v122 + 64) = *(_DWORD *)(v109 + 400);
        if (v120[8] > v121) {
          unint64_t v121 = v120[8];
        }
        v120[7] = 0;
        v120[8] = v121;
        unint64_t v123 = v119[1];
        int v124 = (_DWORD *)v119[9];
        *int v124 = *(_DWORD *)(v109 + 404);
        v124[1] = *(_DWORD *)(v109 + 408);
        v124[2] = *(_DWORD *)(v109 + 412);
        v124[3] = *(_DWORD *)(v109 + 416);
        v124[4] = *(_DWORD *)(v109 + 420);
        v124[5] = *(_DWORD *)(v109 + 424);
        v124[6] = *(_DWORD *)(v109 + 428);
        v124[7] = *(_DWORD *)(v109 + 432);
        if (v119[8] > v123) {
          unint64_t v123 = v119[8];
        }
        v119[7] = 0;
        v119[8] = v123;
        unint64_t v125 = *(void *)(v118 + 8);
        **(_DWORD **)(v118 + 72) = 1065353216;
        if (*(void *)(v118 + 64) > v125) {
          unint64_t v125 = *(void *)(v118 + 64);
        }
        *(void *)(v118 + 56) = 0;
        *(void *)(v118 + 64) = v125;
        int v126 = *(_DWORD *)(v109 + 392);
        unint64_t v127 = *(void *)(v117 + 8);
        **(_DWORD **)(v117 + 72) = v126;
        if (*(void *)(v117 + 64) > v127) {
          unint64_t v127 = *(void *)(v117 + 64);
        }
        *(void *)(v117 + 56) = 0;
        *(void *)(v117 + 64) = v127;
        int v128 = *(uint64_t **)(v29 + 504);
        __int16 v129 = *(uint64_t **)(v29 + 512);
        while (v128 != v129)
        {
          uint64_t v130 = *v128;
          *(void *)(*v128 + 104) = v115;
          if (v113 > v112)
          {
            unsigned __int8 v131 = v113 - v112;
            int v132 = a4[8];
            if (v132 + v131 > a4[9])
            {
              LOBYTE(v132) = 1;
              a4[8] = 1;
              a4[9] = a4[10];
            }
            a4[8] = v132 + v131;
            a4[49] = v113;
            LOBYTE(v112) = v113;
          }
          *(_DWORD *)(v130 + 96) = (v113 - 1 + v111);
          ++v128;
        }
      }
      if (!*(unsigned char *)(v29 + 392)) {
        goto LABEL_18;
      }
      uint64_t v133 = *(void *)(v29 + 304);
      uint64_t v134 = *(void *)(v133 + 64);
      int v135 = *(void **)(v134 + 64);
      unint64_t v136 = v135[1];
      __n128 v137 = (_DWORD *)v135[9];
      uint64_t v138 = *(void *)(v29 + 560);
      *__n128 v137 = *(_DWORD *)(v138 + 404);
      v137[1] = *(_DWORD *)(v138 + 408);
      v137[2] = *(_DWORD *)(v138 + 412);
      v137[3] = *(_DWORD *)(v138 + 416);
      v137[4] = *(_DWORD *)(v138 + 420);
      v137[5] = *(_DWORD *)(v138 + 424);
      v137[6] = *(_DWORD *)(v138 + 428);
      v137[7] = *(_DWORD *)(v138 + 432);
      if (v135[8] > v136) {
        unint64_t v136 = v135[8];
      }
      v135[7] = 0;
      v135[8] = v136;
      __n128 v139 = *(void **)(v134 + 32);
      unint64_t v140 = v139[1];
      __int16 v141 = (float *)v139[9];
      *__int16 v141 = v71;
      v141[1] = v72;
      v141[2] = v73;
      v141[3] = v74;
      v141[4] = v75;
      v141[5] = v76;
      v141[6] = v77;
      v141[7] = v78;
      v141[8] = v79;
      v141[9] = v80;
      v141[10] = v81;
      v141[11] = v82;
      v141[12] = v83;
      v141[13] = v84;
      v141[14] = v85;
      v141[15] = v86;
      if (v139[8] > v140) {
        unint64_t v140 = v139[8];
      }
      v139[7] = 0;
      v139[8] = v140;
      long long v225 = (uint64_t *)(v29 + 568);
      __int16 v142 = *(float **)(v29 + 568);
      if (!v142)
      {
        uint64_t v152 = v138;
LABEL_103:
        uint64_t v160 = *(void *)(*(void *)(*(void *)(v29 + 8) + 128) + 208);
        double v227 = 0.0;
        double v228 = 0.0;
        double v161 = *(double *)(v152 + 328);
        double v229 = 0.0;
        double v230 = v161;
        int v162 = *(char **)(v152 + 304);
        int v163 = *(char **)(v152 + 312);
        uint64_t v164 = v152;
        uint64_t v165 = v163 - v162;
        if (v163 != v162)
        {
          if (v165 < 0) {
LABEL_183:
          }
            abort();
          long long v166 = v22;
          uint64_t v167 = v160;
          uint64_t v168 = v165 >> 2;
          double v169 = COERCE_DOUBLE((*(uint64_t (**)(double))(**(void **)&v161 + 16))(COERCE_DOUBLE(*(void *)&v161)));
          double v227 = v169;
          *(void *)&double v229 = *(void *)&v169 + 4 * v168;
          uint64_t v160 = v167;
          float v22 = v166;
          do
          {
            if (v169 != 0.0) {
              **(_DWORD **)&double v169 = *(_DWORD *)v162;
            }
            v162 += 4;
            *(void *)&v169 += 4;
          }
          while (v162 != v163);
          double v228 = v169;
          uint64_t v164 = *(void *)(v29 + 560);
        }
        LODWORD(v231) = *(_DWORD *)(v152 + 336);
        md::DashTextureCache::textureForPattern(&v226, v160, (float *)&v227, 0, *(float *)(v164 + 392));
        long long v170 = v226;
        long long v226 = 0uLL;
        long long v171 = *(std::__shared_weak_count **)(v29 + 576);
        *(_OWORD *)long long v225 = v170;
        if (v171 && !atomic_fetch_add(&v171->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
        uint64_t v172 = (std::__shared_weak_count *)*((void *)&v226 + 1);
        if (*((void *)&v226 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v226 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
        if (v227 != 0.0)
        {
          double v228 = v227;
          (*(void (**)(double, double, void))(**(void **)&v230 + 40))(COERCE_DOUBLE(*(void *)&v230), COERCE_DOUBLE(*(void *)&v227), *(void *)&v229 - *(void *)&v227);
        }
        **(void **)(v133 + 96) = *(void *)(*(void *)(v29 + 568) + 64);
        uint64_t v152 = *(void *)(v29 + 560);
        goto LABEL_119;
      }
      uint64_t v224 = v133;
      uint64_t v143 = *(void *)(v138 + 328);
      uint64_t v144 = *(void *)(v138 + 304);
      uint64_t v145 = *(void *)(v138 + 312);
      uint64_t v146 = v145 - v144;
      if (v145 == v144)
      {
        uint64_t v151 = 0;
        uint64_t v150 = 0;
        uint64_t v152 = v138;
      }
      else
      {
        if (v146 < 0) {
          goto LABEL_183;
        }
        uint64_t v147 = v146 >> 2;
        uint64_t v148 = (*(uint64_t (**)(void))(*(void *)v143 + 16))(*(void *)(v138 + 328));
        uint64_t v146 = v148;
        uint64_t v149 = 0;
        do
        {
          if (v148 + v149) {
            *(_DWORD *)(v148 + v149) = *(_DWORD *)(v144 + v149);
          }
          v149 += 4;
        }
        while (v144 + v149 != v145);
        uint64_t v150 = v148 + v149;
        uint64_t v151 = v148 + 4 * v147;
        uint64_t v152 = *(void *)(v29 + 560);
      }
      uint64_t v133 = v224;
      if (*((unsigned __int16 *)v142 + 23) == (int)(float)(*(float *)(v152 + 392) + 0.5)
        && *(float *)(v138 + 336) == v142[8]
        && (unint64_t v153 = (v150 - v146) >> 2,
            uint64_t v154 = *(void *)v142,
            v153 == (uint64_t)(*((void *)v142 + 1) - *(void *)v142) >> 2))
      {
        if (v150 == v146)
        {
          if (!v146) {
            goto LABEL_119;
          }
          BOOL v158 = 1;
        }
        else
        {
          unint64_t v155 = 0;
          unsigned int v156 = 1;
          do
          {
            float v157 = vabds_f32(*(float *)(v146 + 4 * v155), *(float *)(v154 + 4 * v155));
            BOOL v158 = v157 <= 0.00000011921;
            unint64_t v155 = v156++;
          }
          while (v157 <= 0.00000011921 && v153 > v155);
        }
      }
      else
      {
        if (!v146) {
          goto LABEL_103;
        }
        BOOL v158 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v143 + 40))(v143, v146, v151 - v146);
      uint64_t v152 = *(void *)(v29 + 560);
      if (!v158) {
        goto LABEL_103;
      }
LABEL_119:
      uint64_t v173 = *v225;
      float v174 = *(float *)(*v225 + 48);
      float v175 = 0.0;
      if (v174 != 0.0)
      {
        float v176 = logf(v174 * *(float *)(v152 + 388));
        float v175 = expf(floorf(v176 * 4.0) * -0.25);
      }
      double v23 = *(float *)(v152 + 392);
      float v24 = v23 + *(float *)(v152 + 400) * 2.0;
      LOWORD(v23) = *(_WORD *)(v173 + 40);
      float v25 = v175 / *(float *)(v152 + 384);
      unint64_t v26 = *(void **)(*(void *)(v133 + 64) + 48);
      unint64_t v27 = v26[1];
      int8x8_t v28 = (float *)v26[9];
      *int8x8_t v28 = v24 / (float)(*((float *)a2 + 345) * (float)LODWORD(v23));
      v28[1] = v24;
      v28[2] = v25;
      if (v26[8] > v27) {
        unint64_t v27 = v26[8];
      }
      v26[7] = 0;
      v26[8] = v27;
      uint64_t v21 = v223;
LABEL_18:
      if (++v22 == v21)
      {
        BOOL v7 = this;
        uint64_t v17 = *(void *)(v222 + 144);
        uint64_t v177 = *(void *)(v17 + 8);
        uint64_t v178 = *(void *)(v17 + 16);
        unsigned int v11 = v220;
        if (v177 == v178) {
          goto LABEL_124;
        }
        while (2)
        {
          double v189 = *(char **)(*(void *)v177 + 504);
          uint64_t v190 = *(char **)(*(void *)v177 + 512);
          if (v189 != v190)
          {
            unint64_t v191 = v190 - v189 - 8;
            if (v191 <= 7)
            {
              do
              {
LABEL_136:
                uint64_t v196 = *(void *)v189;
                v189 += 8;
                *(unsigned char *)(v196 + 48) = 0;
              }
              while (v189 != v190);
            }
            else
            {
              uint64_t v192 = (v191 >> 3) + 1;
              uint64_t v193 = (uint64_t *)(v189 + 8);
              uint64_t v194 = v192 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                uint64_t v195 = *v193;
                *(unsigned char *)(*(v193 - 1) + 48) = 0;
                *(unsigned char *)(v195 + 48) = 0;
                v193 += 2;
                v194 -= 2;
              }
              while (v194);
              if (v192 != (v192 & 0x3FFFFFFFFFFFFFFELL))
              {
                v189 += 8 * (v192 & 0x3FFFFFFFFFFFFFFELL);
                goto LABEL_136;
              }
            }
          }
          v177 += 8;
          if (v177 == v178) {
            goto LABEL_6;
          }
          continue;
        }
      }
    }
  }
  uint64_t v17 = *(void *)(v8 + 144);
LABEL_6:
  if (v17)
  {
    uint64_t v19 = *(void *)(v17 + 8);
    for (uint64_t i = *(void *)(v17 + 16); v19 != i; v19 += 8)
    {
      if (*(unsigned char *)(*(void *)(*(void *)v19 + 560) + 289)) {
        *(unsigned char *)(*(void *)(*(void *)(*(void *)v19 + 504) + 8 * v11) + 48) = 1;
      }
    }
  }
LABEL_124:
  uint64_t v179 = *((void *)v7 + 9);
  int v180 = *((_DWORD *)v7 + 4);
  int v181 = *(_DWORD *)(v179 + 72);
  char v182 = v180 - v181;
  if (v180 == v181)
  {
    uint64_t v188 = 0;
    if (!*((unsigned char *)v7 + 160)) {
      return;
    }
LABEL_139:
    uint64_t v197 = *(void *)(v179 + 144);
    uint64_t v198 = *(void *)(v197 + 8);
    uint64_t v199 = *(void *)(v197 + 16);
    if (v198 == v199) {
      return;
    }
    while (1)
    {
      uint64_t v200 = *(void *)(*(void *)(*(void *)v198 + 504) + 8 * v188);
      *(unsigned char *)(v200 + 48) = 0;
      int v201 = *((_DWORD *)v7 + 41);
      uint64_t v202 = *(void *)(*(void *)(v200 + 456) + 560);
      uint64_t v203 = *(void *)(v202 + 272);
      unint64_t v204 = *(std::__shared_weak_count **)(v202 + 280);
      if (v204) {
        atomic_fetch_add_explicit(&v204->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v244, v203, (uint64_t)v204);
      if (v204 && !atomic_fetch_add(&v204->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
        std::__shared_weak_count::__release_weak(v204);
        if (!LOBYTE(v245))
        {
LABEL_157:
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v244);
LABEL_158:
          uint64_t v210 = *(void *)(*(void *)(*(void *)(v200 + 208) + 64) + 16);
          uint64_t v211 = *(void *)(*(void *)(*(void *)(v200 + 88) + 64) + 16);
          unint64_t v212 = *(void *)(v210 + 8);
          **(_DWORD **)(v210 + 72) = v201;
          if (*(void *)(v210 + 64) > v212) {
            unint64_t v212 = *(void *)(v210 + 64);
          }
          *(void *)(v210 + 56) = 0;
          *(void *)(v210 + 64) = v212;
          unint64_t v213 = *(void *)(v211 + 8);
          **(_DWORD **)(v211 + 72) = v201;
          if (*(void *)(v211 + 64) > v213) {
            unint64_t v213 = *(void *)(v211 + 64);
          }
          *(void *)(v211 + 56) = 0;
          *(void *)(v211 + 64) = v213;
          goto LABEL_142;
        }
      }
      else if (!LOBYTE(v245))
      {
        goto LABEL_157;
      }
      uint64_t v205 = *(void *)(v244[0] + 24);
      long long v206 = *(float **)v205;
      if (!*(void *)v205) {
        break;
      }
      float v207 = *v206;
      BOOL v208 = *v206 == 1.0;
      if (!*(unsigned char *)(v205 + 10)) {
        goto LABEL_164;
      }
      if (v207 == 0.0 || v207 == 1.0) {
        goto LABEL_164;
      }
LABEL_165:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(v244[0] + 24), 0x12Cu, 0)) {
        goto LABEL_141;
      }
      unsigned int v214 = 1;
LABEL_167:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v205, 0x12Cu, v214)) {
        goto LABEL_141;
      }
      if (!v206)
      {
        BOOL v216 = 0;
LABEL_177:
        unsigned int v218 = *(unsigned __int8 *)(v205 + v216 + 11);
        if (v218 != 2) {
          goto LABEL_180;
        }
        goto LABEL_178;
      }
      float v215 = *v206;
      BOOL v216 = *v206 == 1.0;
      if (!*(unsigned char *)(v205 + 10)) {
        goto LABEL_177;
      }
      if (v215 == 0.0 || v215 == 1.0) {
        goto LABEL_177;
      }
LABEL_178:
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v205, 0x12Du, 0))
      {
LABEL_141:
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v244);
        goto LABEL_142;
      }
      unsigned int v218 = 1;
LABEL_180:
      char hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v205, 0x12Du, v218);
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v244);
      if ((hasValueForKeyAtEnd & 1) == 0) {
        goto LABEL_158;
      }
LABEL_142:
      v198 += 8;
      if (v198 == v199) {
        return;
      }
    }
    BOOL v208 = 0;
LABEL_164:
    unsigned int v214 = *(unsigned __int8 *)(v205 + v208 + 11);
    if (v214 != 2) {
      goto LABEL_167;
    }
    goto LABEL_165;
  }
  int v183 = 0;
  unsigned int v184 = *((_DWORD *)v7 + 3) - (*(_DWORD *)(v179 + 68) << v182);
  unsigned int v185 = *((_DWORD *)v7 + 2) - (*(_DWORD *)(v179 + 64) << v182);
  int v186 = ~v181 + v180;
  int v187 = 2 * v186;
  do
  {
    v183 += (v185 >> v186 << v187) + (2 << v187) * (v184 >> v186);
    v185 -= v185 >> v186 << v186;
    v184 -= v184 >> v186 << v186;
    --v186;
    v187 -= 2;
  }
  while (v186 != -1);
  uint64_t v188 = v183;
  if (*((unsigned char *)v7 + 160)) {
    goto LABEL_139;
  }
}

void sub_1A21EBEBC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void *altitude::RoadTilePrivate::collectRenderItems(void *this, md::PassList *a2, uint64_t a3, md::RealisticCommandBufferSelector *a4)
{
  uint64_t v209 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = this[9];
  if (!*((unsigned char *)this + 160))
  {
    if (*(void *)(v5 + 88) == a3) {
      return this;
    }
    *(void *)(v5 + 88) = a3;
    int v15 = +[VKSharedResourcesManager sharedResources];
    int v16 = v15;
    if (v15)
    {
      [v15 realisticCommandBufferSelector];
      uint64_t v17 = v201;
      if ((void)v202 && !atomic_fetch_add((atomic_ullong *volatile)(v202 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(*(void *)v202 + 16))(v202);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v202);
      }
    }
    else
    {
      uint64_t v17 = 0;
      int v201 = 0;
      *(void *)&long long v202 = 0;
    }

    double v48 = (void *)*((void *)a2 + 1);
    uint64_t v49 = v48[3];
    uint64_t v50 = v48[4];
    if (v50 == v49)
    {
      uint64_t v195 = 0;
    }
    else
    {
      uint64_t v51 = 0;
      double v52 = v17[1];
      while (1)
      {
        double v53 = *(unsigned __int8 **)(v49 + 8 * v51);
        if (*v53 == *((unsigned __int8 *)v52 + 12))
        {
          unint64_t v54 = *((void *)v53 + 1);
          uint64_t v55 = v48[15];
          if (v54 < (v48[16] - v55) >> 3) {
            break;
          }
        }
        if (++v51 >= (unint64_t)((v50 - v49) >> 3)) {
          goto LABEL_73;
        }
      }
      uint64_t v56 = *(void *)(v55 + 8 * v54);
      if (v56) {
        uint64_t v57 = *(void *)(*(void *)(v56 + 24) + 8 * *((unsigned __int8 *)v52 + 13));
      }
      else {
LABEL_73:
      }
        uint64_t v57 = 0;
      uint64_t v195 = v57;
      if (v50 != v49)
      {
        unint64_t v58 = 0;
        double v59 = (unsigned __int8 *)v17[1];
        do
        {
          double v60 = *(unsigned __int8 **)(v49 + 8 * v58);
          if (*v60 == v59[14])
          {
            unint64_t v61 = *((void *)v60 + 1);
            uint64_t v62 = v48[15];
            if (v61 < (v48[16] - v62) >> 3)
            {
              uint64_t v63 = *(void *)(v62 + 8 * v61);
              if (v63) {
                uint64_t v63 = *(void *)(*(void *)(v63 + 24) + 8 * v59[15]);
              }
              goto LABEL_84;
            }
          }
          ++v58;
        }
        while (v58 < (v50 - v49) >> 3);
        uint64_t v63 = 0;
LABEL_84:
        uint64_t v194 = v63;
        uint64_t v65 = v50 - v49;
        if (v50 == v49)
        {
LABEL_91:
          uint64_t v64 = 0;
        }
        else
        {
          uint64_t v66 = 0;
          unint64_t v67 = v65 >> 3;
          while (1)
          {
            long long v68 = *(unsigned __int8 **)(v49 + 8 * v66);
            if (*v68 == v59[16])
            {
              unint64_t v69 = *((void *)v68 + 1);
              uint64_t v70 = v48[15];
              if (v69 < (v48[16] - v70) >> 3) {
                break;
              }
            }
            if (++v66 >= v67) {
              goto LABEL_91;
            }
          }
          uint64_t v64 = *(void *)(v70 + 8 * v69);
          if (v64) {
            uint64_t v64 = *(void *)(*(void *)(v64 + 24) + 8 * v59[17]);
          }
        }
        goto LABEL_92;
      }
    }
    uint64_t v64 = 0;
    uint64_t v194 = 0;
LABEL_92:
    uint64_t v196 = v64;
    uint64_t v71 = *(void *)(v5 + 144);
    float v72 = (uint64_t (**)(void *))&unk_1EF57D170;
    v192[0] = &unk_1EF57D170;
    v192[1] = &v194;
    uint64_t v193 = v192;
    float v73 = *(uint64_t **)(v71 + 8);
    int v187 = *(uint64_t **)(v71 + 16);
    if (v73 == v187) {
      return (void *)v72[4](v192);
    }
    while (1)
    {
      uint64_t v74 = *v73;
      uint64_t v75 = (uint64_t)v193;
      if (!v193) {
        goto LABEL_99;
      }
      if (v193 != v192) {
        break;
      }
      uint64_t v198 = v197;
      (*(void (**)(void *, unsigned int *))(v192[0] + 24))(v192, v197);
LABEL_101:
      if (*(unsigned char *)(v74 + 528))
      {
        uint64_t v77 = *(void *)(v74 + 424);
        uint64_t v76 = *(void *)(v74 + 432);
        if (v76 != v77)
        {
          uint64_t v78 = *(void *)(v74 + 432);
          do
          {
            float v80 = *(void **)(v78 - 24);
            v78 -= 24;
            float v79 = v80;
            if (v80)
            {
              *(void *)(v76 - 16) = v79;
              operator delete(v79);
            }
            uint64_t v76 = v78;
          }
          while (v78 != v77);
        }
        *(void *)(v74 + 432) = v77;
        *(void *)(v74 + 408) = *(void *)(v74 + 400);
        float v81 = *(void **)(v74 + 480);
        if (v81)
        {
          do
          {
            if (v81[1])
            {
              unint64_t v83 = 0;
              float v84 = v81 + 2;
              float v85 = v81 + 2;
              float v86 = (void (***)(void))(v81 + 2);
              do
              {
                uint64_t v87 = (void (**)(void *))*v86;
                v86 += 15;
                (*v87)(v85);
                ++v83;
                v84 += 15;
                float v85 = v86;
              }
              while (v83 < v81[1]);
            }
            v81[1] = 0;
            float v81 = (void *)*v81;
          }
          while (v81);
          uint64_t v82 = *(void *)(v74 + 480);
        }
        else
        {
          uint64_t v82 = 0;
        }
        *(void *)(v74 + 488) = v82;
        uint64_t v88 = (uint64_t)v198;
        if (v198)
        {
          if (v198 != v197)
          {
            uint64_t v88 = (*(uint64_t (**)(void))(*(void *)v198 + 16))();
            goto LABEL_118;
          }
          uint64_t v200 = v199;
          (*(void (**)(unsigned int *, uint64_t *))(*(void *)v197 + 24))(v197, v199);
        }
        else
        {
LABEL_118:
          uint64_t v200 = (uint64_t *)v88;
        }
        if (*(unsigned char *)(v74 + 528))
        {
          if (*(unsigned char *)(v74 + 136))
          {
            uint64_t v89 = *(void *)(*(void *)(v74 + 8) + 56);
            *(void *)(v74 + 40) = v89;
            BOOL v90 = *(unsigned __int8 *)(v89 + 58) == 1;
            if (*(unsigned char *)(v74 + 264))
            {
LABEL_123:
              uint64_t v91 = *(void *)(*(void *)(v74 + 8) + 64);
              *(void *)(v74 + 168) = v91;
              if (*(unsigned char *)(v91 + 58) == 1) {
                BOOL v90 = 1;
              }
            }
          }
          else
          {
            BOOL v90 = 0;
            if (*(unsigned char *)(v74 + 264)) {
              goto LABEL_123;
            }
          }
          if (*(unsigned char *)(v74 + 392))
          {
            uint64_t v92 = *(void *)(*(void *)(v74 + 8) + 72);
            *(void *)(v74 + 296) = v92;
            if (*(unsigned char *)(v92 + 58) == 1) {
              BOOL v90 = 1;
            }
          }
          uint64_t v188 = (long long **)(v74 + 400);
          uint64_t v94 = *(uint64_t **)(v74 + 504);
          unsigned __int8 v93 = *(uint64_t **)(v74 + 512);
          if (v94 != v93)
          {
            uint64_t v95 = 0;
            while (1)
            {
              uint64_t v96 = *v94;
              if (*(unsigned char *)(*v94 + 48))
              {
                if (*(void *)(v96 + 448) != v95)
                {
                  if (v95)
                  {
                    uint64_t v97 = ggl::Batcher::commit(v188, 0, v47);
                    if (v97[1] != *v97)
                    {
                      unint64_t v98 = v97;
                      if (*(unsigned char *)(v74 + 136))
                      {
                        long long v100 = *(_OWORD *)(v74 + 24);
                        long long v99 = *(_OWORD *)(v74 + 40);
                        long long v101 = *(_OWORD *)(v74 + 56);
                        long long v102 = *(_OWORD *)(v74 + 72);
                        long long v103 = *(_OWORD *)(v74 + 88);
                        long long v104 = *(_OWORD *)(v74 + 120);
                        long long v207 = *(_OWORD *)(v74 + 104);
                        long long v208 = v104;
                        int v201 = &off_1EF55A458;
                        long long v202 = v100;
                        long long v203 = v99;
                        long long v205 = v102;
                        long long v206 = v103;
                        long long v204 = v101;
                        unint64_t v105 = *(void **)(v74 + 488);
                        uint64_t v106 = v105[1];
                        if (v106 == *(void *)(v74 + 496))
                        {
                          unint64_t v105 = (void *)*v105;
                          if (!v105)
                          {
                            unint64_t v105 = malloc_type_malloc(120 * v106 + 16, 0xB644C221uLL);
                            void *v105 = 0;
                            v105[1] = 0;
                            **(void **)(v74 + 488) = v105;
                          }
                          *(void *)(v74 + 488) = v105;
                          uint64_t v106 = v105[1];
                        }
                        unsigned __int8 v107 = &v105[15 * v106];
                        v105[1] = v106 + 1;
                        v107[2] = &off_1EF55A458;
                        long long v108 = v207;
                        long long v109 = v208;
                        long long v110 = v206;
                        *(_OWORD *)(v107 + 9) = v205;
                        long long v111 = v202;
                        long long v112 = v203;
                        *(_OWORD *)(v107 + 7) = v204;
                        *(_OWORD *)(v107 + 5) = v112;
                        *(_OWORD *)(v107 + 3) = v111;
                        *(_OWORD *)(v107 + 15) = v109;
                        *(_OWORD *)(v107 + 13) = v108;
                        *(_OWORD *)(v107 + 11) = v110;
                        v107[10] = v95;
                        unsigned int v113 = *v98;
                        v107[13] = *v98;
                        v107[14] = (v98[1] - v113) >> 4;
                        int v189 = 0;
                        int v201 = (void (**)(ggl::RenderItem *__hidden))(v107 + 2);
                        if (!v200) {
                          goto LABEL_200;
                        }
                        (*(void (**)(uint64_t *, int *, void (***)(ggl::RenderItem *__hidden)))(*v200 + 48))(v200, &v189, &v201);
                      }
                      if (*(unsigned char *)(v74 + 264))
                      {
                        int v201 = &off_1EF55A458;
                        long long v114 = *(_OWORD *)(v74 + 168);
                        long long v202 = *(_OWORD *)(v74 + 152);
                        long long v203 = v114;
                        long long v115 = *(_OWORD *)(v74 + 248);
                        long long v116 = *(_OWORD *)(v74 + 216);
                        long long v207 = *(_OWORD *)(v74 + 232);
                        long long v208 = v115;
                        long long v117 = *(_OWORD *)(v74 + 200);
                        long long v204 = *(_OWORD *)(v74 + 184);
                        long long v205 = v117;
                        long long v206 = v116;
                        uint64_t v118 = *(void **)(v74 + 488);
                        uint64_t v119 = v118[1];
                        if (v119 == *(void *)(v74 + 496))
                        {
                          uint64_t v118 = (void *)*v118;
                          if (!v118)
                          {
                            uint64_t v118 = malloc_type_malloc(120 * v119 + 16, 0xB644C221uLL);
                            *uint64_t v118 = 0;
                            v118[1] = 0;
                            **(void **)(v74 + 488) = v118;
                          }
                          *(void *)(v74 + 488) = v118;
                          uint64_t v119 = v118[1];
                        }
                        unint64_t v120 = &v118[15 * v119];
                        v118[1] = v119 + 1;
                        v120[2] = &off_1EF55A458;
                        long long v121 = v207;
                        long long v122 = v208;
                        long long v123 = v206;
                        *(_OWORD *)(v120 + 9) = v205;
                        long long v124 = v202;
                        long long v125 = v203;
                        *(_OWORD *)(v120 + 7) = v204;
                        *(_OWORD *)(v120 + 5) = v125;
                        *(_OWORD *)(v120 + 3) = v124;
                        *(_OWORD *)(v120 + 15) = v122;
                        *(_OWORD *)(v120 + 13) = v121;
                        *(_OWORD *)(v120 + 11) = v123;
                        v120[10] = v95;
                        int v126 = *v98;
                        v120[13] = *v98;
                        v120[14] = (v98[1] - v126) >> 4;
                        int v189 = 1;
                        int v201 = (void (**)(ggl::RenderItem *__hidden))(v120 + 2);
                        if (!v200) {
                          goto LABEL_200;
                        }
                        (*(void (**)(uint64_t *, int *, void (***)(ggl::RenderItem *__hidden)))(*v200 + 48))(v200, &v189, &v201);
                      }
                      if (*(unsigned char *)(v74 + 392))
                      {
                        int v201 = &off_1EF55A458;
                        long long v127 = *(_OWORD *)(v74 + 296);
                        long long v202 = *(_OWORD *)(v74 + 280);
                        long long v203 = v127;
                        long long v128 = *(_OWORD *)(v74 + 376);
                        long long v129 = *(_OWORD *)(v74 + 344);
                        long long v207 = *(_OWORD *)(v74 + 360);
                        long long v208 = v128;
                        long long v130 = *(_OWORD *)(v74 + 328);
                        long long v204 = *(_OWORD *)(v74 + 312);
                        long long v205 = v130;
                        long long v206 = v129;
                        unsigned __int8 v131 = *(void **)(v74 + 488);
                        uint64_t v132 = v131[1];
                        if (v132 == *(void *)(v74 + 496))
                        {
                          unsigned __int8 v131 = (void *)*v131;
                          if (!v131)
                          {
                            unsigned __int8 v131 = malloc_type_malloc(120 * v132 + 16, 0xB644C221uLL);
                            *unsigned __int8 v131 = 0;
                            v131[1] = 0;
                            **(void **)(v74 + 488) = v131;
                          }
                          *(void *)(v74 + 488) = v131;
                          uint64_t v132 = v131[1];
                        }
                        uint64_t v133 = &v131[15 * v132];
                        v131[1] = v132 + 1;
                        v133[2] = &off_1EF55A458;
                        long long v134 = v207;
                        long long v135 = v208;
                        long long v136 = v206;
                        *(_OWORD *)(v133 + 9) = v205;
                        long long v137 = v202;
                        long long v138 = v203;
                        *(_OWORD *)(v133 + 7) = v204;
                        *(_OWORD *)(v133 + 5) = v138;
                        *(_OWORD *)(v133 + 3) = v137;
                        *(_OWORD *)(v133 + 15) = v135;
                        *(_OWORD *)(v133 + 13) = v134;
                        *(_OWORD *)(v133 + 11) = v136;
                        v133[10] = v95;
                        __n128 v139 = *v98;
                        v133[13] = *v98;
                        v133[14] = (v98[1] - v139) >> 4;
                        int v189 = 2;
                        int v201 = (void (**)(ggl::RenderItem *__hidden))(v133 + 2);
                        if (!v200) {
                          goto LABEL_200;
                        }
                        (*(void (**)(uint64_t *, int *, void (***)(ggl::RenderItem *__hidden)))(*v200 + 48))(v200, &v189, &v201);
                      }
                    }
                  }
                  uint64_t v96 = *v94;
                  uint64_t v95 = *(void *)(*v94 + 448);
                }
                uint64_t v140 = 16;
                if (v90)
                {
                  uint64_t v140 = 32;
                  uint64_t v141 = v96 + 32;
                }
                else
                {
                  uint64_t v141 = v96 + 16;
                }
                if (*(void *)(v141 + 8) != *(void *)(v96 + v140)) {
                  gm::MultiRange<unsigned long>::push_back((char **)v188, (_OWORD *)v141);
                }
              }
              if (++v94 == v93) {
                goto LABEL_165;
              }
            }
          }
          uint64_t v95 = 0;
LABEL_165:
          __int16 v142 = ggl::Batcher::commit(v188, 0, v47);
          if (v142[1] != *v142)
          {
            uint64_t v143 = v142;
            if (*(unsigned char *)(v74 + 136))
            {
              long long v144 = *(_OWORD *)(v74 + 40);
              long long v145 = *(_OWORD *)(v74 + 24);
              long long v146 = *(_OWORD *)(v74 + 56);
              long long v147 = *(_OWORD *)(v74 + 72);
              long long v148 = *(_OWORD *)(v74 + 88);
              long long v149 = *(_OWORD *)(v74 + 120);
              long long v207 = *(_OWORD *)(v74 + 104);
              long long v208 = v149;
              int v201 = &off_1EF55A458;
              long long v202 = v145;
              long long v203 = v144;
              long long v205 = v147;
              long long v206 = v148;
              long long v204 = v146;
              uint64_t v150 = *(void **)(v74 + 488);
              uint64_t v151 = v150[1];
              if (v151 == *(void *)(v74 + 496))
              {
                uint64_t v150 = (void *)*v150;
                if (!v150)
                {
                  uint64_t v150 = malloc_type_malloc(120 * v151 + 16, 0xB644C221uLL);
                  *uint64_t v150 = 0;
                  v150[1] = 0;
                  **(void **)(v74 + 488) = v150;
                }
                *(void *)(v74 + 488) = v150;
                uint64_t v151 = v150[1];
              }
              uint64_t v152 = &v150[15 * v151];
              v150[1] = v151 + 1;
              v152[2] = &off_1EF55A458;
              long long v153 = v207;
              long long v154 = v208;
              long long v155 = v206;
              *(_OWORD *)(v152 + 9) = v205;
              long long v156 = v202;
              long long v157 = v203;
              *(_OWORD *)(v152 + 7) = v204;
              *(_OWORD *)(v152 + 5) = v157;
              *(_OWORD *)(v152 + 3) = v156;
              *(_OWORD *)(v152 + 15) = v154;
              *(_OWORD *)(v152 + 13) = v153;
              *(_OWORD *)(v152 + 11) = v155;
              v152[10] = v95;
              BOOL v158 = *v143;
              v152[13] = *v143;
              v152[14] = (v143[1] - v158) >> 4;
              int v189 = 0;
              int v201 = (void (**)(ggl::RenderItem *__hidden))(v152 + 2);
              if (!v200)
              {
LABEL_200:
                std::__throw_bad_function_call[abi:nn180100]();
                __break(1u);
LABEL_201:
                std::__throw_bad_function_call[abi:nn180100]();
              }
              (*(void (**)(uint64_t *, int *, void (***)(ggl::RenderItem *__hidden)))(*v200 + 48))(v200, &v189, &v201);
            }
            if (*(unsigned char *)(v74 + 264))
            {
              int v201 = &off_1EF55A458;
              long long v159 = *(_OWORD *)(v74 + 168);
              long long v202 = *(_OWORD *)(v74 + 152);
              long long v203 = v159;
              long long v160 = *(_OWORD *)(v74 + 184);
              long long v161 = *(_OWORD *)(v74 + 248);
              long long v162 = *(_OWORD *)(v74 + 216);
              long long v207 = *(_OWORD *)(v74 + 232);
              long long v208 = v161;
              long long v163 = *(_OWORD *)(v74 + 200);
              long long v204 = v160;
              long long v205 = v163;
              long long v206 = v162;
              uint64_t v164 = *(void **)(v74 + 488);
              uint64_t v165 = v164[1];
              if (v165 == *(void *)(v74 + 496))
              {
                uint64_t v164 = (void *)*v164;
                if (!v164)
                {
                  uint64_t v164 = malloc_type_malloc(120 * v165 + 16, 0xB644C221uLL);
                  *uint64_t v164 = 0;
                  v164[1] = 0;
                  **(void **)(v74 + 488) = v164;
                }
                *(void *)(v74 + 488) = v164;
                uint64_t v165 = v164[1];
              }
              long long v166 = &v164[15 * v165];
              v164[1] = v165 + 1;
              v166[2] = &off_1EF55A458;
              long long v167 = v207;
              long long v168 = v208;
              long long v169 = v206;
              *(_OWORD *)(v166 + 9) = v205;
              long long v170 = v202;
              long long v171 = v203;
              *(_OWORD *)(v166 + 7) = v204;
              *(_OWORD *)(v166 + 5) = v171;
              *(_OWORD *)(v166 + 3) = v170;
              *(_OWORD *)(v166 + 15) = v168;
              *(_OWORD *)(v166 + 13) = v167;
              *(_OWORD *)(v166 + 11) = v169;
              v166[10] = v95;
              uint64_t v172 = *v143;
              v166[13] = *v143;
              v166[14] = (v143[1] - v172) >> 4;
              int v189 = 1;
              int v201 = (void (**)(ggl::RenderItem *__hidden))(v166 + 2);
              if (!v200) {
                goto LABEL_200;
              }
              (*(void (**)(uint64_t *, int *, void (***)(ggl::RenderItem *__hidden)))(*v200 + 48))(v200, &v189, &v201);
            }
            if (*(unsigned char *)(v74 + 392))
            {
              int v201 = &off_1EF55A458;
              long long v173 = *(_OWORD *)(v74 + 296);
              long long v202 = *(_OWORD *)(v74 + 280);
              long long v203 = v173;
              long long v174 = *(_OWORD *)(v74 + 312);
              long long v175 = *(_OWORD *)(v74 + 376);
              long long v176 = *(_OWORD *)(v74 + 344);
              long long v207 = *(_OWORD *)(v74 + 360);
              long long v208 = v175;
              long long v177 = *(_OWORD *)(v74 + 328);
              long long v204 = v174;
              long long v205 = v177;
              long long v206 = v176;
              uint64_t v178 = *(void **)(v74 + 488);
              uint64_t v179 = v178[1];
              if (v179 == *(void *)(v74 + 496))
              {
                uint64_t v178 = (void *)*v178;
                if (!v178)
                {
                  uint64_t v178 = malloc_type_malloc(120 * v179 + 16, 0xB644C221uLL);
                  *uint64_t v178 = 0;
                  v178[1] = 0;
                  **(void **)(v74 + 488) = v178;
                }
                *(void *)(v74 + 488) = v178;
                uint64_t v179 = v178[1];
              }
              int v180 = &v178[15 * v179];
              v178[1] = v179 + 1;
              v180[2] = &off_1EF55A458;
              long long v181 = v207;
              long long v182 = v208;
              long long v183 = v206;
              *(_OWORD *)(v180 + 9) = v205;
              long long v184 = v202;
              long long v185 = v203;
              *(_OWORD *)(v180 + 7) = v204;
              *(_OWORD *)(v180 + 5) = v185;
              *(_OWORD *)(v180 + 3) = v184;
              *(_OWORD *)(v180 + 15) = v182;
              *(_OWORD *)(v180 + 13) = v181;
              *(_OWORD *)(v180 + 11) = v183;
              v180[10] = v95;
              int v186 = *v143;
              v180[13] = *v143;
              v180[14] = (v143[1] - v186) >> 4;
              int v189 = 2;
              int v201 = (void (**)(ggl::RenderItem *__hidden))(v180 + 2);
              if (!v200) {
                goto LABEL_200;
              }
              (*(void (**)(uint64_t *, int *, void (***)(ggl::RenderItem *__hidden)))(*v200 + 48))(v200, &v189, &v201);
            }
          }
        }
        if (v200 == v199)
        {
          (*(void (**)(uint64_t *))(v199[0] + 32))(v199);
        }
        else if (v200)
        {
          (*(void (**)(void))(*v200 + 40))();
        }
      }
      if (v198 == v197)
      {
        (*(void (**)(unsigned int *))(*(void *)v197 + 32))(v197);
      }
      else if (v198)
      {
        (*(void (**)(void))(*(void *)v198 + 40))();
      }
      if (++v73 == v187)
      {
        this = v193;
        if (v193 != v192)
        {
          if (v193) {
            return (void *)(*(uint64_t (**)(void))(*v193 + 40))();
          }
          return this;
        }
        float v72 = (uint64_t (**)(void *))v192[0];
        return (void *)v72[4](v192);
      }
    }
    uint64_t v75 = (*(uint64_t (**)(void))(*v193 + 16))();
LABEL_99:
    uint64_t v198 = (unsigned int *)v75;
    goto LABEL_101;
  }
  int v6 = *((_DWORD *)this + 4);
  int v7 = *(_DWORD *)(v5 + 72);
  char v8 = v6 - v7;
  if (v6 == v7)
  {
    uint64_t v14 = 0;
  }
  else
  {
    int v9 = 0;
    unsigned int v10 = *((_DWORD *)this + 3) - (*(_DWORD *)(v5 + 68) << v8);
    unsigned int v11 = *((_DWORD *)this + 2) - (*(_DWORD *)(v5 + 64) << v8);
    int v12 = ~v7 + v6;
    int v13 = 2 * v12;
    do
    {
      v9 += (v11 >> v12 << v13) + (2 << v13) * (v10 >> v12);
      v11 -= v11 >> v12 << v12;
      v10 -= v10 >> v12 << v12;
      --v12;
      v13 -= 2;
    }
    while (v12 != -1);
    uint64_t v14 = v9;
  }
  unint64_t v18 = (void *)*((void *)a2 + 1);
  uint64_t v19 = v18[3];
  uint64_t v20 = v18[4];
  if (v20 == v19)
  {
    *(void *)&long long v202 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    float v22 = (unsigned __int8 *)*((void *)a4 + 1);
    while (1)
    {
      double v23 = *(unsigned __int8 **)(v19 + 8 * v21);
      if (*v23 == v22[12])
      {
        unint64_t v24 = *((void *)v23 + 1);
        uint64_t v25 = v18[15];
        if (v24 < (v18[16] - v25) >> 3) {
          break;
        }
      }
      if (++v21 >= (unint64_t)((v20 - v19) >> 3))
      {
        uint64_t v26 = 0;
        goto LABEL_20;
      }
    }
    uint64_t v26 = *(void *)(v25 + 8 * v24);
    if (v26) {
      uint64_t v26 = *(void *)(*(void *)(v26 + 24) + 8 * v22[13]);
    }
LABEL_20:
    *(void *)&long long v202 = v26;
    if (v20 != v19)
    {
      uint64_t v27 = 0;
      while (1)
      {
        int8x8_t v28 = *(unsigned __int8 **)(v19 + 8 * v27);
        if (*v28 == v22[14])
        {
          unint64_t v29 = *((void *)v28 + 1);
          uint64_t v30 = v18[15];
          if (v29 < (v18[16] - v30) >> 3) {
            break;
          }
        }
        if (++v27 >= (unint64_t)((v20 - v19) >> 3))
        {
          uint64_t v31 = 0;
          goto LABEL_30;
        }
      }
      uint64_t v31 = *(void *)(v30 + 8 * v29);
      if (v31) {
        uint64_t v31 = *(void *)(*(void *)(v31 + 24) + 8 * v22[15]);
      }
LABEL_30:
      int v201 = (void (**)(ggl::RenderItem *__hidden))v31;
      uint64_t v33 = v20 - v19;
      if (v20 == v19) {
        goto LABEL_37;
      }
      uint64_t v34 = 0;
      unint64_t v35 = v33 >> 3;
      while (1)
      {
        uint64_t v36 = *(unsigned __int8 **)(v19 + 8 * v34);
        if (*v36 == v22[16])
        {
          unint64_t v37 = *((void *)v36 + 1);
          uint64_t v38 = v18[15];
          if (v37 < (v18[16] - v38) >> 3) {
            break;
          }
        }
        if (++v34 >= v35) {
          goto LABEL_37;
        }
      }
      uint64_t v39 = *(void *)(v38 + 8 * v37);
      if (!v39) {
LABEL_37:
      }
        uint64_t v32 = 0;
      else {
        uint64_t v32 = *(void *)(*(void *)(v39 + 24) + 8 * v22[17]);
      }
      goto LABEL_38;
    }
  }
  uint64_t v32 = 0;
  int v201 = 0;
LABEL_38:
  *((void *)&v202 + 1) = v32;
  uint64_t v40 = *(void *)(v5 + 144);
  uint64_t v41 = *(void *)(v40 + 8);
  for (uint64_t i = *(void *)(v40 + 16); v41 != i; v41 += 8)
  {
    double v43 = *(void **)(*(void *)(*(void *)v41 + 504) + 8 * v14);
    v190[0] = &unk_1EF57D1B8;
    v190[1] = &v201;
    unint64_t v191 = v190;
    if (v43[11] && v43[19])
    {
      double v44 = (void *)v43[18];
      if (!v44) {
        double v44 = v43 + 16;
      }
      if (v44[1] != *v44)
      {
        v197[0] = 0;
        v199[0] = (uint64_t)(v43 + 7);
        std::__function::__func<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0,std::allocator<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::operator()((uint64_t)v190, v197, v199);
      }
    }
    if (v43[26] && v43[34])
    {
      double v45 = (void *)v43[33];
      if (!v45) {
        double v45 = v43 + 31;
      }
      if (v45[1] != *v45)
      {
        v197[0] = 1;
        v199[0] = (uint64_t)(v43 + 22);
        if (!v191) {
          goto LABEL_201;
        }
        (*(void (**)(void *, unsigned int *, uint64_t *, md::RealisticCommandBufferSelector *))(*v191 + 48))(v191, v197, v199, a4);
      }
    }
    if (v43[41] && v43[49])
    {
      double v46 = (void *)v43[48];
      if (!v46) {
        double v46 = v43 + 46;
      }
      if (v46[1] != *v46)
      {
        v197[0] = 2;
        v199[0] = (uint64_t)(v43 + 37);
        if (!v191) {
          goto LABEL_201;
        }
        (*(void (**)(void *, unsigned int *, uint64_t *, md::RealisticCommandBufferSelector *))(*v191 + 48))(v191, v197, v199, a4);
      }
    }
    this = v191;
    if (v191 == v190)
    {
      this = (void *)(*(uint64_t (**)(void *))(v190[0] + 32))(v190);
    }
    else if (v191)
    {
      this = (void *)(*(uint64_t (**)(void))(*v191 + 40))();
    }
  }
  return this;
}

void sub_1A21ED1C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0,std::allocator<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::operator()(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(void *)(*(void *)(a1 + 8) + 8 * *a2), *a3);
}

uint64_t std::__function::__func<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0,std::allocator<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57D1B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0,std::allocator<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF57D1B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0,std::allocator<altitude::RoadTilePrivate::collectRenderItems(md::PassList &,unsigned long,md::RealisticCommandBufferSelector *)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::~__func()
{
}

void md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    int v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

__n128 std::__function::__func<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1},std::allocator<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1}>,void ()(gm::Matrix<float,3,1>&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57F018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1},std::allocator<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1}>,void ()(gm::Matrix<float,3,1>&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF57F018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1},std::allocator<md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)::$_0::operator() const(gdc::LayerDataWithWorld const&)::{lambda(gm::Matrix<float,3,1> const&)#1}>,void ()(gm::Matrix<float,3,1>&)>::~__func()
{
}

int *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<int>(int *result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  if (!result) {
    goto LABEL_25;
  }
  uint64_t v4 = a3 >= 0x17 ? 23 : a3;
  unsigned int v5 = *((unsigned __int8 *)result + v4 + 16);
  uint64_t v6 = *(void *)result;
  uint64_t v7 = *(void *)result + 80 * v5;
  unint64_t v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10)) {
    goto LABEL_25;
  }
  char v9 = *(unsigned __int8 **)v7;
  if (!*(unsigned char *)(v7 + 15))
  {
    uint64_t v12 = *(unsigned __int16 *)(v7 + 10);
    uint64_t v13 = *(unsigned __int8 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      if (!--v12)
      {
        LOWORD(v13) = (_WORD)v9 + v8;
        break;
      }
    }
LABEL_24:
    if (v8 != (unsigned __int16)((_WORD)v13 - (_WORD)v9)) {
      goto LABEL_32;
    }
LABEL_25:
    if (a4) {
      *a4 = 0;
    }
    return (int *)gss::defaultValueForKey<gss::ScenePropertyID,int>(a2);
  }
  if (v8 >= 0x1E)
  {
    uint64_t v13 = *(unsigned __int8 **)v7;
    unint64_t v14 = v8;
    do
    {
      unint64_t v15 = v14 >> 1;
      int v16 = &v13[v14 >> 1];
      unsigned int v18 = *v16;
      uint64_t v17 = v16 + 1;
      v14 += ~(v14 >> 1);
      if (v18 < a2) {
        uint64_t v13 = v17;
      }
      else {
        unint64_t v14 = v15;
      }
    }
    while (v14);
    if (v13 == &v9[v8] || *v13 != a2) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v10 = 0;
  while (1)
  {
    unsigned int v11 = v9[v10];
    if (v11 >= a2) {
      break;
    }
    if (v8 == ++v10) {
      goto LABEL_25;
    }
  }
  if (v11 == a2) {
    unsigned __int16 v19 = v10;
  }
  else {
    unsigned __int16 v19 = v8;
  }
  if (v8 == v19) {
    goto LABEL_25;
  }
LABEL_32:
  uint64_t v20 = v6 + 80 * v5;
  uint64_t v21 = (unsigned __int8 *)*(unsigned __int16 *)(v20 + 42);
  if (!*(_WORD *)(v20 + 42)) {
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  uint64_t v22 = v6 + 80 * v5;
  uint64_t v23 = *(void *)(v22 + 32);
  if (*(unsigned char *)(v22 + 47))
  {
    if (v21 < 0x1E)
    {
      unint64_t v24 = 0;
      __n128 result = &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v25 = v24[v23];
        if (v25 >= a2) {
          break;
        }
        if (v21 == ++v24) {
          return result;
        }
      }
      if (v25 != a2) {
        LOWORD(v24) = (_WORD)v21;
      }
      if (v21 != (unsigned __int16)v24) {
        goto LABEL_55;
      }
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
    unint64_t v24 = *(unsigned __int8 **)(v22 + 32);
    uint64_t v27 = v21;
    do
    {
      int8x8_t v28 = (unsigned __int8 *)((unint64_t)v27 >> 1);
      unint64_t v29 = &v24[(unint64_t)v27 >> 1];
      unsigned int v31 = *v29;
      uint64_t v30 = v29 + 1;
      v27 += ~((unint64_t)v27 >> 1);
      if (v31 < a2) {
        unint64_t v24 = v30;
      }
      else {
        uint64_t v27 = v28;
      }
    }
    while (v27);
    if (v24 == &v21[v23] || *v24 != a2) {
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
  }
  else
  {
    uint64_t v26 = v21;
    unint64_t v24 = *(unsigned __int8 **)(v22 + 32);
    while (*v24 != a2)
    {
      ++v24;
      if (!--v26)
      {
        LOWORD(v24) = v23 + (_WORD)v21;
        break;
      }
    }
  }
  LOWORD(v24) = (_WORD)v24 - v23;
  if (v21 == (unsigned __int16)v24) {
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
LABEL_55:
  if (v21 > (unsigned __int16)v24) {
    return (int *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 40) + 4 * (unsigned __int16)v24);
  }
  return result;
}

void geo::_retain_ptr<NSCalendar * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559398;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<NSCalendar * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559398;

  return a1;
}

__int16 *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(__int16 *result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  if (!result) {
    goto LABEL_25;
  }
  uint64_t v4 = a3 >= 0x17 ? 23 : a3;
  unsigned int v5 = *((unsigned __int8 *)result + v4 + 16);
  uint64_t v6 = *(void *)result;
  uint64_t v7 = *(void *)result + 80 * v5;
  unint64_t v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10)) {
    goto LABEL_25;
  }
  char v9 = *(unsigned __int8 **)v7;
  if (!*(unsigned char *)(v7 + 15))
  {
    uint64_t v12 = *(unsigned __int16 *)(v7 + 10);
    uint64_t v13 = *(unsigned __int8 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      if (!--v12)
      {
        LOWORD(v13) = (_WORD)v9 + v8;
        break;
      }
    }
LABEL_24:
    if (v8 != (unsigned __int16)((_WORD)v13 - (_WORD)v9)) {
      goto LABEL_32;
    }
LABEL_25:
    if (a4) {
      *a4 = 0;
    }
    return (__int16 *)gss::defaultValueForKey<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>();
  }
  if (v8 >= 0x1E)
  {
    uint64_t v13 = *(unsigned __int8 **)v7;
    unint64_t v14 = v8;
    do
    {
      unint64_t v15 = v14 >> 1;
      int v16 = &v13[v14 >> 1];
      unsigned int v18 = *v16;
      uint64_t v17 = v16 + 1;
      v14 += ~(v14 >> 1);
      if (v18 < a2) {
        uint64_t v13 = v17;
      }
      else {
        unint64_t v14 = v15;
      }
    }
    while (v14);
    if (v13 == &v9[v8] || *v13 != a2) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v10 = 0;
  while (1)
  {
    unsigned int v11 = v9[v10];
    if (v11 >= a2) {
      break;
    }
    if (v8 == ++v10) {
      goto LABEL_25;
    }
  }
  if (v11 == a2) {
    unsigned __int16 v19 = v10;
  }
  else {
    unsigned __int16 v19 = v8;
  }
  if (v8 == v19) {
    goto LABEL_25;
  }
LABEL_32:
  uint64_t v20 = v6 + 80 * v5;
  uint64_t v21 = (unsigned __int8 *)*(unsigned __int16 *)(v20 + 58);
  if (!*(_WORD *)(v20 + 58)) {
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  uint64_t v22 = v6 + 80 * v5;
  uint64_t v23 = *(void *)(v22 + 48);
  if (*(unsigned char *)(v22 + 63))
  {
    if (v21 < 0x1E)
    {
      unint64_t v24 = 0;
      __n128 result = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v25 = v24[v23];
        if (v25 >= a2) {
          break;
        }
        if (v21 == ++v24) {
          return result;
        }
      }
      if (v25 != a2) {
        LOWORD(v24) = (_WORD)v21;
      }
      if (v21 != (unsigned __int16)v24) {
        goto LABEL_55;
      }
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
    unint64_t v24 = *(unsigned __int8 **)(v22 + 48);
    uint64_t v27 = v21;
    do
    {
      int8x8_t v28 = (unsigned __int8 *)((unint64_t)v27 >> 1);
      unint64_t v29 = &v24[(unint64_t)v27 >> 1];
      unsigned int v31 = *v29;
      uint64_t v30 = v29 + 1;
      v27 += ~((unint64_t)v27 >> 1);
      if (v31 < a2) {
        unint64_t v24 = v30;
      }
      else {
        uint64_t v27 = v28;
      }
    }
    while (v27);
    if (v24 == &v21[v23] || *v24 != a2) {
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
  }
  else
  {
    uint64_t v26 = v21;
    unint64_t v24 = *(unsigned __int8 **)(v22 + 48);
    while (*v24 != a2)
    {
      ++v24;
      if (!--v26)
      {
        LOWORD(v24) = v23 + (_WORD)v21;
        break;
      }
    }
  }
  LOWORD(v24) = (_WORD)v24 - v23;
  if (v21 == (unsigned __int16)v24) {
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
LABEL_55:
  if (v21 > (unsigned __int16)v24) {
    return (__int16 *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 56) + 8 * (unsigned __int16)v24);
  }
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__2NS_9allocatorISM_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISQ_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56FBE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__2NS_9allocatorISM_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF56FBE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__2NS_9allocatorISM_EEFvNS2_17StyleManagerEventEEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__1NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56FBA0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__1NS_9allocatorISM_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF56FBA0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__1NS_9allocatorISM_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56FB58;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF56FB58;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13LightingLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextENS2_12SceneContextENS2_16ElevationContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20LightingLogicContextEE3__0NS_9allocatorISM_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t std::shared_ptr<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5877C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5877C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::Logic<md::LightingLogic,md::LightingLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x41E8D6E445F4145 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext,md::SceneContext,md::ElevationContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

void md::LightingLogicContext::~LightingLogicContext(void **this)
{
  if (*((unsigned char *)this + 96))
  {
    if (*((char *)this + 127) < 0) {
      operator delete(this[13]);
    }
    *((unsigned char *)this + 96) = 0;
  }
  uint64_t v2 = (std::__shared_weak_count *)this[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)this[3];
    if (!v3) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)this[3];
    if (!v3) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_11:
  uint64_t v4 = (std::__shared_weak_count *)this[1];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t gdc::ObjectHolder<md::LightingLogicContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::LightingLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5557F8;
  uint64_t v1 = (void **)a1[4];
  if (v1)
  {
    md::LightingLogicContext::~LightingLogicContext(v1);
    MEMORY[0x1A6239270]();
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::LightingLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5557F8;
  uint64_t v2 = (void **)a1[4];
  if (v2)
  {
    md::LightingLogicContext::~LightingLogicContext(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

void md::LightingLogic::createDebugNode(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  strcpy((char *)a2, "LightingLogic");
  *(_WORD *)(a2 + 23) = 13;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(unsigned char *)(a2 + 95) = 0;
  if (a1[312]) {
    uint64_t v4 = "On";
  }
  else {
    uint64_t v4 = "Off";
  }
  char v17 = 12;
  strcpy(v16, "Shadow Cache");
  memset(&__p, 0, sizeof(__p));
  int v15 = 4;
  std::string::__assign_external(&__p, v4);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v16, (uint64_t)v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a1[137]) {
    unsigned int v5 = "On";
  }
  else {
    unsigned int v5 = "Off";
  }
  char v17 = 12;
  strcpy(v16, "SSAO Enabled");
  memset(&v11, 0, sizeof(v11));
  int v12 = 4;
  std::string::__assign_external(&v11, v5);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v16, (uint64_t)v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (a1[138]) {
    uint64_t v6 = "On";
  }
  else {
    uint64_t v6 = "Off";
  }
  char v17 = 14;
  strcpy(v16, "SSAO Activated");
  memset(&v8, 0, sizeof(v8));
  int v9 = 4;
  std::string::__assign_external(&v8, v6);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v16, (uint64_t)v7);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void md::LightingLogic::didBecomeInactive(md::LightingLogic *this)
{
  *((unsigned char *)this + 288) = 0;
  uint64_t v2 = (char *)this + 272;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 34));
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 33) = v2;
}

void md::LightingLogic::~LightingLogic(md::LightingLogic *this)
{
  md::LightingLogic::~LightingLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF5323A0;
  GEOConfigRemoveBlockListener();
  md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>>::~Monitorable((uint64_t)this + 376);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 296);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 34));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *((void *)this + 18) = &unk_1EF559398;

  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void sub_1A21EE970(_Unwind_Exception *a1)
{
  md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>>::~Monitorable(v1 + 376);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v1 + 296);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 272));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 192);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 176);
  *(void *)(v1 + 144) = &unk_1EF559398;

  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>>::~Monitorable(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    GEOConfigRemoveBlockListener();
    uint64_t v2 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
  }
  atomic_store(0, *(unsigned __int8 **)(a1 + 64));
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3 == a1 + 80)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 80) + 32))(a1 + 80);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4)
  {
LABEL_9:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_11:

  uint64_t v5 = *(void *)(a1 + 48);
  if (v5 == a1 + 24)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 32))(a1 + 24);
  }
  else if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  return a1;
}

void sub_1A21EEB40(_Unwind_Exception *a1)
{
  std::function<void ()(BOOL)>::~function((void *)(v1 + 80));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 64);

  md::Transformable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Transformable(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Transformable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Transformable(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

void md::LightingLogicContext::defaultLightingConstantData(md::LightingLogicContext *this)
{
  {
    operator new();
  }
  std::once_flag::_State_type v2 = 0;
  if (atomic_load_explicit((atomic_ullong *volatile)&v2, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v1;
    uint64_t v3 = &v4;
    std::__call_once(&v2, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::LightingLogicContext::defaultLightingConstantData(void)::$_0 &&>>);
  }
}

void sub_1A21EECCC(_Unwind_Exception *a1)
{
}

void *ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>::ConstantDataTyped(uint64_t a1)
{
  __n128 result = (void *)ggl::BufferData::BufferData(a1, qword_1E956FA38, 2, 1, 6, 1);
  result[25] = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
  *__n128 result = &unk_1EF55E958;
  return result;
}

void std::shared_ptr<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::shared_ptr[abi:nn180100]<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>,void>(uint64_t a1)
{
  md::LightingLogicContext::defaultLightingConstantData(void)::_defaultLightingConstantData = a1;
  operator new();
}

void sub_1A21EEDA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<md::LightingLogicContext::defaultLightingConstantData(void)::$_0 &&>>()
{
  uint64_t v0 = md::LightingLogicContext::defaultLightingConstantData(void)::_defaultLightingConstantData;
  unint64_t v1 = *(void *)(md::LightingLogicContext::defaultLightingConstantData(void)::_defaultLightingConstantData + 8);
  uint64_t v2 = *(void *)(md::LightingLogicContext::defaultLightingConstantData(void)::_defaultLightingConstantData + 72);
  *(_WORD *)(v2 + 4) = COERCE_UNSIGNED_INT(1.0);
  *(_DWORD *)uint64_t v2 = 0;
  *(void *)(v2 + 14) = 0;
  *(void *)(v2 + 6) = 0;
  *(void *)(v2 + 22) = 0;
  *(_WORD *)(v2 + 30) = 0;
  if (*(void *)(v0 + 64) > v1) {
    unint64_t v1 = *(void *)(v0 + 64);
  }
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = v1;
}

uint64_t std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration> *,std::shared_ptr<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::__shared_ptr_default_delete<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>,ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>,std::allocator<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration> *,std::shared_ptr<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>::__shared_ptr_default_delete<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>,ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>,std::allocator<ggl::ConstantDataTyped<ggl::Lighting::LightConfiguration>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

double md::LightingLogicContext::quantizedShadowViewProjectionMatrix(md::LightingLogicContext *this, uint64_t a2, unsigned int a3, unsigned int a4)
{
  v4.i64[0] = a3;
  v4.i64[1] = a4;
  float64x2_t v5 = vcvtq_f64_u64(v4);
  double v6 = *(double *)(a2 + 264);
  double v7 = *(double *)(a2 + 288);
  double v8 = *(double *)(a2 + 232);
  int v9 = *(unsigned __int8 *)(a2 + 240);
  long long v30 = 0u;
  long long v31 = 0u;
  double v10 = v8 + -1.0;
  if (!v9) {
    double v10 = 1.0 - v8;
  }
  long long v33 = 0uLL;
  long long v34 = 0uLL;
  double v35 = v10 / (v6 - v7);
  uint64_t v36 = 0;
  float64x2_t v11 = *(float64x2_t *)(a2 + 248);
  float64x2_t v12 = vsubq_f64(*(float64x2_t *)(a2 + 272), v11);
  float v13 = fmax(v12.f64[0], v12.f64[1]);
  *(double *)&uint64_t v14 = v13;
  float64x2_t v15 = vdivq_f64((float64x2_t)vdupq_lane_s64(v14, 0), v5);
  __asm { FMOV            V16.2D, #0.5 }
  float64x2_t v21 = vmlaq_f64(v11, _Q16, v12);
  float64x2_t v22 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v14 * 0.5), 0);
  float64x2_t v23 = vsubq_f64(v21, v22);
  float64x2_t v24 = vaddq_f64(v22, v21);
  float64x2_t v25 = vmulq_f64(vrndmq_f64(vdivq_f64(v23, v15)), v15);
  float64x2_t v26 = vmulq_f64(vrndmq_f64(vdivq_f64(v24, v15)), v15);
  float64x2_t v27 = vsubq_f64(v26, v25);
  double v29 = 2.0 / v27.f64[0];
  double v32 = 2.0 / v27.f64[1];
  float64x2_t v37 = vdivq_f64(vnegq_f64(vaddq_f64(v26, v25)), v27);
  double v38 = -(v7 - v8 * v6) / (v6 - v7);
  uint64_t v39 = 0x3FF0000000000000;
  return gm::operator*<double,4,4,4>((double *)this, &v29, (double *)(a2 + 296));
}

uint64_t ___ZN2md13LightingLogicC2EPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = GEOConfigGetBOOL();
  *(unsigned char *)(v1 + 136) = result;
  return result;
}

void *std::__function::__func<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,BOOL ()(BOOL const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF56FC30;
  return result;
}

void std::__function::__func<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::LightingLogic::LightingLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,BOOL ()(BOOL const&)>::~__func()
{
}

void *___ZN2md11MonitorableINS_13TransformableINS_11ConfigValueI16GEOConfigKeyBOOLbEEEEE16setCallbackQueueEPU28objcproto17OS_dispatch_queue8NSObjectNSt3__18functionIFvbEEE_block_invoke(void *result)
{
  uint64_t v1 = (unsigned char *)result[5];
  if (v1)
  {
    uint64_t v2 = result[4];
    if (*v1)
    {
      char v3 = *(unsigned char *)(v2 + 17);
      if (*(void *)v2) {
        BOOL v4 = *(void *)(v2 + 8) == 0;
      }
      else {
        BOOL v4 = 1;
      }
      if (!v4) {
        *(unsigned char *)(v2 + 16) = GEOConfigGetBOOL();
      }
      uint64_t v5 = *(void *)(v2 + 48);
      if (!v5)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x1A21EF0F0);
      }
      *(unsigned char *)(v2 + 17) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, v2 + 16);
      uint64_t result = *(void **)(v2 + 104);
      if (result)
      {
        char v6 = v3;
        return (void *)(*(uint64_t (**)(void *, char *))(*result + 48))(result, &v6);
      }
    }
  }
  return result;
}

BOOL karo::media::C3bLoader::loadFromChunk(karo::media::C3bLoader *this, const unsigned __int8 *a2, unint64_t a3, karo::media::C3bModel *a4)
{
  uint64_t v455 = *MEMORY[0x1E4F143B8];
  if (a3 <= 0x85)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    BOOL v4 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_ERROR, "C3M3 data block too short", (uint8_t *)&buf, 2u);
    }
LABEL_818:

    return 0;
  }
  if (*a2 != 67 || a2[1] != 51 || a2[2] != 77 || a2[3] != 3)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    BOOL v4 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_ERROR, "C3M3 invalid header", (uint8_t *)&buf, 2u);
    }
    goto LABEL_818;
  }
  __int16 v6 = *(_WORD *)a2;
  *((unsigned char *)a4 + 2) = a2[2];
  *(_WORD *)a4 = v6;
  *((unsigned char *)a4 + 3) = a2[3];
  *((unsigned char *)a4 + 4) = a2[4];
  unsigned int v427 = a2[5];
  if (!a2[5]) {
    return 1;
  }
  int v429 = 0;
  v425 = a2 - 2;
  v419 = (char *)a4 + 136;
  v414 = (int *)((char *)a4 + 208);
  v424 = (uint64_t **)((char *)a4 + 200);
  v428 = a2 - 4;
  v431 = (char **)((char *)a4 + 176);
  uint64x2_t v416 = (uint64x2_t)vdupq_n_s64(a3);
  v413 = (char *)a4 + 224;
  double v8 = 1.0;
  uint64_t v433 = 6;
  while (1)
  {
    unsigned __int32 v9 = a2[v433];
    if (v433 + 5 >= a3) {
      unint64_t v10 = a3;
    }
    else {
      unint64_t v10 = v433 + 5;
    }
    switch(a2[v433])
    {
      case 0u:
        if (v433 + 5 >= a3) {
          return 0;
        }
        unsigned __int32 v11 = a2[v10];
        if (a2[v10])
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          v401 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v401, OS_LOG_TYPE_ERROR))
          {
            buf.n128_u32[0] = 67109120;
            buf.n128_u32[1] = v11;
            _os_log_impl(&dword_1A1780000, v401, OS_LOG_TYPE_ERROR, "C3M3: Unknown header type %d", (uint8_t *)&buf, 8u);
          }
          goto LABEL_841;
        }
        unint64_t v12 = v10 + 4;
        if (v10 + 4 >= a3) {
          unint64_t v12 = a3;
        }
        if (v12 + 8 > a3) {
          return 0;
        }
        if (v12 + 16 > a3) {
          return 0;
        }
        if (v12 + 24 > a3) {
          return 0;
        }
        if (v12 + 32 > a3) {
          return 0;
        }
        double v13 = *(double *)&a2[v12];
        double v14 = *(double *)&a2[v12 + 8];
        double v15 = *(double *)&a2[v12 + 16];
        double v16 = *(double *)&a2[v12 + 24];
        double v17 = v14 * v14;
        double v18 = v8 - (v15 * v15 + v14 * v14) * 2.0;
        double v19 = v14 * v13 - v16 * v15 + v14 * v13 - v16 * v15;
        double v20 = v15 * v13;
        double v21 = v16 * v14;
        double v22 = v16 * v14 + v15 * v13 + v16 * v14 + v15 * v13;
        double v23 = v16 * v15 + v14 * v13 + v16 * v15 + v14 * v13;
        double v24 = v13 * v13;
        double v25 = v8 - (v15 * v15 + v13 * v13) * 2.0;
        double v26 = v15 * v14;
        double v27 = v16 * v13;
        *((double *)a4 + 1) = v18;
        *((double *)a4 + 2) = v23;
        *((double *)a4 + 3) = v20 - v21 + v20 - v21;
        *((double *)a4 + 5) = v19;
        *((double *)a4 + 6) = v25;
        *((double *)a4 + 7) = v27 + v26 + v27 + v26;
        *((double *)a4 + 9) = v22;
        *((double *)a4 + 10) = v26 - v27 + v26 - v27;
        *((double *)a4 + 11) = v8 - (v17 + v24) * 2.0;
        if (v12 + 40 > a3) {
          return 0;
        }
        BOOL result = 0;
        if (v12 + 48 <= a3 && v12 + 56 <= a3)
        {
          BOOL result = 0;
          uint64_t v29 = *(void *)&a2[v12 + 48];
          *(_OWORD *)((char *)a4 + 104) = *(_OWORD *)&a2[v12 + 32];
          *((void *)a4 + 15) = v29;
          int64x2_t v30 = vdupq_n_s64(v12);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vaddq_s64(v30, (int64x2_t)xmmword_1A28FE620), v416), (int32x4_t)vcgtq_u64((uint64x2_t)vaddq_s64(v30, (int64x2_t)xmmword_1A28FE630), v416)))) & 1) == 0&& v12 + 96 <= a3)
          {
            uint64_t v433 = v12 + 104;
            if (v12 + 104 <= a3) {
              goto LABEL_811;
            }
          }
        }
        return result;
      case 1u:
        uint64_t v433 = v10 + 4;
        if (v10 + 4 > a3) {
          return 0;
        }
        int v60 = *(_DWORD *)this;
        unsigned __int32 v422 = *((unsigned __int8 *)this + 4);
        uint64_t v61 = *((void *)a4 + 22);
        uint64_t v62 = (void *)*((void *)a4 + 23);
        unint64_t v63 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v62 - v61) >> 3);
        v423 = (unsigned __int8 *)*(unsigned int *)&a2[v10];
        if ((unint64_t)v423 <= v63)
        {
          if ((unint64_t)v423 < v63)
          {
            long long v302 = (void *)(v61 + 56 * v423);
            while (v62 != v302)
            {
              v62 -= 7;
              std::__destroy_at[abi:nn180100]<karo::media::C3bMaterial,0>(v62);
            }
            *((void *)a4 + 23) = v302;
          }
        }
        else
        {
          std::vector<karo::media::C3bMaterial>::__append(v431, (unint64_t)&v423[-v63]);
        }
        if (!v423) {
          goto LABEL_811;
        }
        uint64_t v303 = 0;
        uint64_t v304 = 0;
        uint64_t v415 = 0;
        int v421 = 0;
        uint64_t v405 = 0;
        size_t v406 = 0;
        uint64_t v404 = 0;
        size_t v407 = 0;
        int v409 = v60;
        while (2)
        {
          int v437 = v60;
          uint64_t v305 = v433;
          if (v433 + 1 <= a3)
          {
            uint64_t v304 = a2[v433];
            uint64_t v305 = v433 + 1;
          }
          unint64_t v306 = v305 + 2;
          BOOL v308 = v433 + 1 > a3 || v304 > 0xD;
          if (v306 > a3 || v308) {
            return 0;
          }
          long long v309 = *v431;
          (*v431)[56 * v303] = v304;
          if (v304 > 0xB) {
            goto LABEL_797;
          }
          if (((1 << v304) & 0x7F7) != 0)
          {
            unint64_t v310 = v305 + 3;
            if (v305 + 3 <= a3)
            {
              LOBYTE(v430) = a2[v306];
              unint64_t v306 = v305 + 3;
            }
            unint64_t v311 = v306 + 4;
            if (v306 + 4 > a3)
            {
              unint64_t v312 = v306 + 4;
            }
            else
            {
              unsigned int v426 = *(_DWORD *)&a2[v306];
              unint64_t v312 = v306 + 8;
              v306 += 4;
            }
            unint64_t v313 = v312;
            if (v312 > a3 || (__len = *(_DWORD *)&v428[v312], v313 = v312 + 4, unint64_t v306 = v312, v312 + 4 > a3))
            {
              if (v310 > a3) {
                return 0;
              }
            }
            else
            {
              unsigned int size = *(_DWORD *)&v428[v313];
              unint64_t v306 = v312 + 4;
              if (v310 > a3) {
                return 0;
              }
            }
            if (v311 > a3 || v312 > a3 || v313 > a3 || v426 >= a3) {
              return 0;
            }
            if (v430 > 0xDu) {
              goto LABEL_637;
            }
            long long v314 = (unsigned __int8 *)&a2[v426];
            if (((1 << v430) & 0x319D) != 0)
            {
              if ((_BYTE)v430)
              {
                long long v315 = a4;
                if (v430 - 2) < 0xBu && ((0x467u >> (v430 - 2)))
                {
                  long long v316 = off_1E5A90A18[(v430 - 2)];
                }
                else if (v430 == 13)
                {
                  long long v316 = "heif";
                }
                else
                {
                  long long v316 = "unknown";
                }
              }
              else
              {
                long long v316 = "jpg";
                long long v315 = a4;
              }
              std::string::basic_string[abi:nn180100]<0>(&buf, v316);
              memset(__dst, 0, sizeof(__dst));
              *(void *)&long long v439 = 0;
              if (v430 == 4)
              {
                std::vector<unsigned char>::resize((uint64_t)__dst, size);
                unsigned int v319 = *((unsigned __int8 *)v315 + 3);
                char v320 = v319 > 3 || v319 == 3 && *((unsigned char *)v315 + 4) != 0;
                long long v323 = v424;
                long long v322 = *(void **)__dst;
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  long long v326 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v326, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(v442.__begin_) = 0;
                    _os_log_impl(&dword_1A1780000, v326, OS_LOG_TYPE_ERROR, "C3M3 LZMA texture decode failed", (uint8_t *)&v442, 2u);
                  }

                  int v327 = 1;
LABEL_792:
                  if (v322)
                  {
                    *(void *)&__dst[8] = v322;
                    operator delete(v322);
                  }
                  if (SHIBYTE(end) < 0) {
                    operator delete((void *)buf.n128_u64[0]);
                  }
                  if (v327 != 6) {
                    return 0;
                  }
                  goto LABEL_797;
                }
                long long v314 = (unsigned __int8 *)v322;
              }
              else
              {
                if (__len + v426 > a3)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  long long v321 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v321, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(v442.__begin_) = 0;
                    _os_log_impl(&dword_1A1780000, v321, OS_LOG_TYPE_ERROR, "C3M3 texture won't fit into buffer", (uint8_t *)&v442, 2u);
                  }
                }
                long long v322 = 0;
                long long v323 = v424;
              }
              _ZNSt3__111make_sharedB8nn180100IN4karo5media5ImageEJEvEENS_10shared_ptrIT_EEDpOT0_(&v441);
              switch((int)v304)
              {
                case 1:
                case 4:
                  long long v325 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v323, 4);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v325, (__n128 *)&v441);
                  break;
                case 2:
                  long long v340 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v323, 3);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v340, (__n128 *)&v441);
                  break;
                case 5:
                  long long v341 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v323, 5);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v341, (__n128 *)&v441);
                  break;
                case 6:
                  long long v342 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v323, 1);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v342, (__n128 *)&v441);
                  break;
                case 7:
                  long long v338 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v323, 2);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v338, (__n128 *)&v441);
                  break;
                default:
                  long long v339 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v323, 0);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v339, (__n128 *)&v441);
                  break;
              }
              std::vector<karo::media::C3bMaterial::C3bMaterialImage>::resize((uint64_t)&(*v431)[56 * v303 + 8], 1uLL);
              LODWORD(v442.__begin_) = 7;
              v442.__end_ = v441.__begin_;
              v442.__end_cap_.__value_ = v441.__end_;
              if (v441.__end_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)v441.__end_ + 1, 1uLL, memory_order_relaxed);
              }
              karo::media::C3bMaterial::C3bMaterialImage::operator=(*(void *)&(*v431)[56 * v303 + 8], (uint64_t)&v442);
              md::components::Material::~Material((md::components::Material *)&v442);
              if ((v304 - 3) > 2)
              {
                int v343 = v60;
                if (v304 != 6)
                {
LABEL_654:
                  if (v422 && !(_BYTE)v430)
                  {
                    uint64_t v344 = v303;
                    uint64_t v345 = v304;
                    karo::media::Image::setFormat((uint64_t)v441.__begin_, v343);
                    std::vector<unsigned int>::pointer begin = v441.__begin_;
                    std::make_shared[abi:nn180100]<ggl::Data,unsigned char const*&,unsigned int const&,void>((ggl::Data **)&v442, v314, size);
                    karo::media::Image::setSourceJpegData((uint64_t)begin, (uint64_t)v442.__begin_, (uint64_t)v442.__end_);
LABEL_660:
                    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v442);
                    int v327 = 6;
                    uint64_t v304 = v345;
                    uint64_t v303 = v344;
LABEL_791:
                    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v441);
                    goto LABEL_792;
                  }
                  if (v422 && v430 == 13)
                  {
                    uint64_t v344 = v303;
                    uint64_t v345 = v304;
                    karo::media::Image::setFormat((uint64_t)v441.__begin_, v343);
                    std::vector<unsigned int>::pointer v347 = v441.__begin_;
                    std::make_shared[abi:nn180100]<ggl::Data,unsigned char const*&,unsigned int const&,void>((ggl::Data **)&v442, v314, size);
                    karo::media::Image::setSourceHeifData((uint64_t)v347, (uint64_t)v442.__begin_, (uint64_t)v442.__end_);
                    goto LABEL_660;
                  }
                  if (v422 && v430 == 12)
                  {
                    if (v343 == 14) {
                      int v348 = 14;
                    }
                    else {
                      int v348 = 4;
                    }
                    karo::media::Image::setFormat((uint64_t)v441.__begin_, v348);
                    if (__len >= 4)
                    {
                      uint64_t v349 = *(unsigned int *)v314;
                      uint64_t v350 = v349 + 4;
                      if (v349 + 4 >= (unint64_t)__len) {
                        uint64_t v350 = __len;
                      }
                      uint64_t v351 = v350 + 4;
                      if (v350 + 4 <= (unint64_t)__len)
                      {
                        uint64_t v435 = v303;
                        unsigned int v408 = v304;
                        uint64_t v352 = *(unsigned int *)&v314[v350];
                        if (v351 + v352 >= (unint64_t)__len) {
                          uint64_t v353 = __len;
                        }
                        else {
                          uint64_t v353 = v351 + v352;
                        }
                        std::vector<unsigned int>::pointer v354 = v441.__begin_;
                        std::make_shared[abi:nn180100]<ggl::Data,unsigned char const*&,unsigned int const&,void>((ggl::Data **)&v442, v314 + 4, v349);
                        std::make_shared[abi:nn180100]<ggl::Data,unsigned char const*&,unsigned int const&,void>(v436, &v314[v351], v352);
                        karo::media::Image::setSourceH264Parameters(v354, (uint64_t)v442.__begin_, (uint64_t)v442.__end_, (uint64_t *)v436);
                        std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v436);
                        std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v442);
                        if (v353 + 4 <= (unint64_t)__len)
                        {
                          size_t v398 = *(unsigned int *)&v314[v353];
                          std::make_shared[abi:nn180100]<ggl::Data,unsigned long,void>((ggl::Data **)&v442, (v398 + 4));
                          v399 = (_DWORD *)*((void *)v442.__begin_ + 1);
                          if (v398 <= 0xFFFFFFFB) {
                            _DWORD *v399 = bswap32(v398);
                          }
                          memcpy(v399 + 1, &v314[v353 + 4], v398);
                          karo::media::Image::setSourceH264Data((uint64_t)v441.__begin_, (uint64_t)v442.__begin_, (uint64_t)v442.__end_);
                          std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v442);
                          int v327 = 6;
                        }
                        else
                        {
                          int v327 = 1;
                        }
                        int v60 = v409;
                        uint64_t v304 = v408;
                        uint64_t v303 = v435;
                        goto LABEL_791;
                      }
                    }
                    goto LABEL_790;
                  }
                  if (v430 == 8 && v304 != 6) {
                    int v437 = 29;
                  }
                  if (karo::media::ImageLoader::supportsFileType((uint64_t)&buf))
                  {
                    if (karo::media::ImageLoader::loadFromChunk(&v437, v314, size, (unsigned __int16 *)&buf, (uint64_t)v441.__begin_))
                    {
                      if (v430 != 8 || v441.__begin_[4])
                      {
                        int v327 = 6;
                        goto LABEL_791;
                      }
                      if (karo::media::Image::convertToFormat((uint64_t)v441.__begin_, v60))
                      {
                        int v327 = 6;
                        double v8 = 1.0;
                        int v60 = v409;
                        goto LABEL_791;
                      }
                      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                      }
                      v400 = (id)GEOGetVectorKitVKDefaultLog_log;
                      if (os_log_type_enabled(v400, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(v442.__begin_) = 0;
                        _os_log_impl(&dword_1A1780000, v400, OS_LOG_TYPE_ERROR, "C3M3 failed to convert image format for PNG image", (uint8_t *)&v442, 2u);
                      }

                      double v8 = 1.0;
                      int v60 = v409;
LABEL_790:
                      int v327 = 1;
                      goto LABEL_791;
                    }
                    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                    }
                    v368 = (id)GEOGetVectorKitVKDefaultLog_log;
                    if (os_log_type_enabled(v368, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(v442.__begin_) = 0;
                      _os_log_impl(&dword_1A1780000, v368, OS_LOG_TYPE_ERROR, "C3M3 failed to load image data for image", (uint8_t *)&v442, 2u);
                    }
                  }
                  else
                  {
                    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                    }
                    v368 = (id)GEOGetVectorKitVKDefaultLog_log;
                    if (os_log_type_enabled(v368, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(v442.__begin_) = 0;
                      _os_log_impl(&dword_1A1780000, v368, OS_LOG_TYPE_ERROR, "C3M3 unsupported image texture extension", (uint8_t *)&v442, 2u);
                    }
                  }

                  goto LABEL_790;
                }
                int v343 = 14;
              }
              else
              {
                int v343 = 6;
              }
              int v437 = v343;
              goto LABEL_654;
            }
            if (v430 == 1)
            {
              __n128 buf = 0uLL;
              std::vector<unsigned int>::pointer end = 0;
              std::string::basic_string[abi:nn180100](__dst, (void *)&a2[v426], __len);
              __n128 buf = *(__n128 *)__dst;
              std::vector<unsigned int>::pointer end = (std::vector<unsigned int>::pointer)v439;
              std::vector<std::string>::push_back[abi:nn180100]((uint64_t)v413, (uint64_t)&buf);
              std::vector<std::string>::push_back[abi:nn180100]((uint64_t)&(*v431)[56 * v303 + 32], (uint64_t)&buf);
              if (SHIBYTE(end) < 0) {
                operator delete((void *)buf.n128_u64[0]);
              }
            }
            else
            {
LABEL_637:
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              long long v337 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v337, OS_LOG_TYPE_ERROR))
              {
                buf.n128_u32[0] = 67109120;
                buf.n128_u32[1] = v430;
                _os_log_impl(&dword_1A1780000, v337, OS_LOG_TYPE_ERROR, "C3M3 unsupported texture format: %d", (uint8_t *)&buf, 8u);
              }
            }
LABEL_797:
            uint64_t v433 = v306;
            goto LABEL_798;
          }
          unint64_t v317 = v305 + 3;
          if (v304 == 3)
          {
            if (v317 > a3)
            {
              int v318 = 0;
            }
            else
            {
              int v318 = a2[v306];
              unint64_t v306 = v317;
            }
            unint64_t v355 = v306 + 4;
            if (v306 + 4 <= a3)
            {
              uint64_t v405 = *(unsigned int *)&a2[v306];
              unint64_t v355 = v306 + 8;
            }
            unint64_t v356 = v355;
            if (v355 <= a3)
            {
              size_t v407 = *(unsigned int *)&v428[v355];
              unint64_t v356 = v355 + 4;
            }
            if (v356 > a3 || v317 > a3 || v306 + 4 > a3 || v355 > a3) {
              return 0;
            }
            uint64_t v357 = &a2[v356];
            if (v356 >= a3)
            {
              int v359 = 0;
              unint64_t v358 = v356;
            }
            else
            {
              unint64_t v358 = v356 + 1;
              int v359 = *v357;
            }
            unint64_t v362 = v358 + 4;
            if (v358 + 4 <= a3)
            {
              uint64_t v404 = *(unsigned int *)&a2[v358];
              unint64_t v362 = v358 + 8;
            }
            unint64_t v306 = v362;
            if (v362 <= a3)
            {
              size_t v406 = *(unsigned int *)&v428[v362];
              unint64_t v306 = v362 + 4;
            }
            if (v306 > a3 || v356 >= a3 || v358 + 4 > a3 || v362 > a3) {
              return 0;
            }
            if (v318 | v359)
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              v401 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v401, OS_LOG_TYPE_ERROR))
              {
                buf.n128_u16[0] = 0;
                _os_log_impl(&dword_1A1780000, v401, OS_LOG_TYPE_ERROR, "C3M3 unsupported image format", (uint8_t *)&buf, 2u);
              }
            }
            else if (v407 == *((_DWORD *)v357 - 1) && v406 == *(_DWORD *)&v428[v306])
            {
              std::vector<karo::media::C3bMaterial::C3bMaterialImage>::resize((uint64_t)&v309[56 * v303 + 8], 2uLL);
              std::string::basic_string[abi:nn180100]<0>(&buf, "jpg");
              BOOL v363 = karo::media::ImageLoader::supportsFileType((uint64_t)&buf);
              if (SHIBYTE(end) < 0) {
                operator delete((void *)buf.n128_u64[0]);
              }
              if (v363)
              {
                _ZNSt3__111make_sharedB8nn180100IN4karo5media5ImageEJEvEENS_10shared_ptrIT_EEDpOT0_(__dst);
                buf.n128_u32[0] = 4;
                buf.n128_u64[1] = *(void *)__dst;
                std::vector<unsigned int>::pointer end = *(std::vector<unsigned int>::pointer *)&__dst[8];
                if (*(void *)&__dst[8]) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 1uLL, memory_order_relaxed);
                }
                karo::media::C3bMaterial::C3bMaterialImage::operator=(*(void *)&(*v431)[56 * v303 + 8], (uint64_t)&buf);
                md::components::Material::~Material((md::components::Material *)&buf);
                uint64_t v364 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v424, 4);
                std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v364, (__n128 *)__dst);
                LODWORD(v442.__begin_) = 6;
                std::string::basic_string[abi:nn180100]<0>(&buf, "jpg");
                char v365 = karo::media::ImageLoader::loadFromChunk((int *)&v442, (unsigned __int8 *)&a2[v405], v407, (unsigned __int16 *)&buf, *(uint64_t *)__dst);
                if (SHIBYTE(end) < 0) {
                  operator delete((void *)buf.n128_u64[0]);
                }
                if (v365)
                {
                  _ZNSt3__111make_sharedB8nn180100IN4karo5media5ImageEJEvEENS_10shared_ptrIT_EEDpOT0_(&v442);
                  buf.n128_u32[0] = 3;
                  buf.n128_u64[1] = (unint64_t)v442.__begin_;
                  std::vector<unsigned int>::pointer end = v442.__end_;
                  if (v442.__end_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)v442.__end_ + 1, 1uLL, memory_order_relaxed);
                  }
                  karo::media::C3bMaterial::C3bMaterialImage::operator=(*(void *)&(*v431)[56 * v303 + 8] + 24, (uint64_t)&buf);
                  md::components::Material::~Material((md::components::Material *)&buf);
                  v366 = std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](v424, 3);
                  std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100]((uint64_t)v366, (__n128 *)&v442);
                  std::string::basic_string[abi:nn180100]<0>(&buf, "jpg");
                  char v367 = karo::media::ImageLoader::loadFromChunk(&v437, (unsigned __int8 *)&a2[v404], v406, (unsigned __int16 *)&buf, (uint64_t)v442.__begin_);
                  if (SHIBYTE(end) < 0) {
                    operator delete((void *)buf.n128_u64[0]);
                  }
                  if (v367)
                  {
                    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v442);
                    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)__dst);
                    goto LABEL_797;
                  }
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  v403 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v403, OS_LOG_TYPE_ERROR))
                  {
                    buf.n128_u16[0] = 0;
                    _os_log_impl(&dword_1A1780000, v403, OS_LOG_TYPE_ERROR, "C3M3 failed to load image data for image", (uint8_t *)&buf, 2u);
                  }

                  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v442);
                }
                else
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  v402 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v402, OS_LOG_TYPE_ERROR))
                  {
                    buf.n128_u16[0] = 0;
                    _os_log_impl(&dword_1A1780000, v402, OS_LOG_TYPE_ERROR, "C3M3 failed to load image data for image", (uint8_t *)&buf, 2u);
                  }
                }
                std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)__dst);
                return 0;
              }
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              v401 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v401, OS_LOG_TYPE_ERROR))
              {
                buf.n128_u16[0] = 0;
                _os_log_impl(&dword_1A1780000, v401, OS_LOG_TYPE_ERROR, "C3M3 unsupported image texture extension", (uint8_t *)&buf, 2u);
              }
            }
            else
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              v401 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v401, OS_LOG_TYPE_ERROR))
              {
                buf.n128_u16[0] = 0;
                _os_log_impl(&dword_1A1780000, v401, OS_LOG_TYPE_ERROR, "C3M3 unsupported image format", (uint8_t *)&buf, 2u);
              }
            }
LABEL_841:

            return 0;
          }
          uint64_t v433 = v305 + 3;
          if (v317 > a3) {
            return 0;
          }
          unint64_t v328 = a2[v306];
          long long v329 = &v309[56 * v303];
          uint64_t v332 = *((void *)v329 + 1);
          long long v330 = v329 + 8;
          uint64_t v331 = v332;
          long long v333 = v330 + 8;
          uint64_t v334 = *((void *)v330 + 1);
          unint64_t v335 = 0xAAAAAAAAAAAAAAABLL * ((v334 - v332) >> 3);
          unint64_t v412 = v328;
          unint64_t v336 = v328 - v335;
          if (v328 <= v335)
          {
            if (v328 < v335)
            {
              uint64_t v360 = v331 + 24 * v328;
              while (v334 != v360)
              {
                uint64_t v361 = *(std::__shared_weak_count **)(v334 - 8);
                if (v361 && !atomic_fetch_add(&v361->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *, unint64_t))v361->__on_zero_shared)(v361, v336);
                  std::__shared_weak_count::__release_weak(v361);
                }
                v334 -= 24;
              }
              *long long v333 = v360;
            }
          }
          else
          {
            std::vector<karo::media::C3bMaterial::C3bMaterialImage>::__append((char **)v330, v336);
          }
          if (!v412)
          {
LABEL_798:
            if ((unsigned __int8 *)++v303 == v423) {
              goto LABEL_811;
            }
            continue;
          }
          break;
        }
        uint64_t v369 = 0;
        v370 = v424;
        unsigned int v408 = v304;
        while (1)
        {
          uint64_t v371 = v433;
          unint64_t v372 = v433 + 1;
          if (v433 + 1 <= a3)
          {
            int v421 = a2[v433];
            uint64_t v371 = v433 + 1;
          }
          unint64_t v373 = v371 + 4;
          unint64_t v374 = v371 + 4;
          if (v371 + 4 <= a3)
          {
            uint64_t v415 = *(unsigned int *)&a2[v371];
            unint64_t v374 = v371 + 8;
          }
          unint64_t v375 = v374 + 4;
          if (v374 > a3) {
            unint64_t v375 = v374;
          }
          uint64_t v433 = v375;
          if (v375 > a3 || v372 > a3 || v373 > a3 || v374 > a3) {
            return 0;
          }
          size_t v376 = *(unsigned int *)&v428[v375];
          v377 = (unsigned __int8 *)&a2[v415];
          if (v421 == 8)
          {
            v378 = (std::__shared_weak_count *)operator new(0x88uLL);
            v378->__shared_owners_ = 0;
            v378->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A938;
            v378->__shared_weak_owners_ = 0;
            v378[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF568050;
            v378[1].__shared_owners_ = 0;
            LODWORD(v378[1].__shared_weak_owners_) = 29;
            v378[2].std::__shared_count = 0u;
            *(_OWORD *)&v378[2].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v378[3].__shared_owners_ = 0u;
            v378[4].std::__shared_count = 0u;
            *(_OWORD *)&v378[4].__shared_weak_owners_ = 0u;
            LOBYTE(v378[5].__shared_owners_) = 0;
            BYTE4(v378[1].__shared_weak_owners_) = 1;
            *(_DWORD *)__dst = 29;
            HIBYTE(end) = 0;
            buf.n128_u8[0] = 0;
            karo::media::ImageLoader::loadFromChunk((int *)__dst, v377, v376, (unsigned __int16 *)&buf, (uint64_t)&v378[1]);
            atomic_fetch_add_explicit(&v378->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v379 = *(void *)&(*v431)[56 * v303 + 8] + 24 * v369;
            *(_DWORD *)uint64_t v379 = 6;
            v380 = *(std::__shared_weak_count **)(v379 + 16);
            *(void *)(v379 + 8) = v378 + 1;
            *(void *)(v379 + 16) = v378;
            if (v380 && !atomic_fetch_add(&v380->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
              std::__shared_weak_count::__release_weak(v380);
            }
            v370 = v424;
            int v60 = v409;
            uint64_t v304 = v408;
            if (atomic_fetch_add(&v378->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_736;
            }
            goto LABEL_735;
          }
          v381 = (atomic_ullong *)operator new(0x88uLL);
          v382 = v381;
          v381[1] = 0;
          v381[2] = 0;
          atomic_ullong *v381 = (atomic_ullong)&unk_1EF58A938;
          v381[3] = (atomic_ullong)&unk_1EF568050;
          v381[4] = 0;
          *((_DWORD *)v381 + 10) = 29;
          *((_OWORD *)v381 + 3) = 0u;
          *((_OWORD *)v381 + 4) = 0u;
          *((_OWORD *)v381 + 5) = 0u;
          *((_OWORD *)v381 + 6) = 0u;
          *((_OWORD *)v381 + 7) = 0u;
          *((unsigned char *)v381 + 128) = 0;
          *(void *)__dst = v381 + 3;
          *(void *)&__dst[8] = v381;
          *((unsigned char *)v381 + 44) = 1;
          if (!v422 || v421) {
            break;
          }
          karo::media::Image::setFormat((uint64_t)(v381 + 3), v437);
          v383 = (std::__shared_weak_count *)operator new(0x30uLL);
          v383->__shared_owners_ = 0;
          v383->__shared_weak_owners_ = 0;
          v383->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E18;
          v384 = ggl::Data::Data((ggl::Data *)&v383[1], v377, v376);
          atomic_fetch_add_explicit(&v383->__shared_owners_, 1uLL, memory_order_relaxed);
          v385 = (std::__shared_weak_count *)v382[7];
          v382[6] = (atomic_ullong)v384;
          v382[7] = (atomic_ullong)v383;
          if (v385 && !atomic_fetch_add(&v385->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
            std::__shared_weak_count::__release_weak(v385);
          }
          uint64_t v304 = v408;
          if (!atomic_fetch_add(&v383->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
            std::__shared_weak_count::__release_weak(v383);
          }
          v386 = (uint64_t **)v414;
          v387 = *(uint64_t **)v414;
          v388 = (uint64_t **)v414;
          int v60 = v409;
          if (*(void *)v414)
          {
            while (1)
            {
              while (1)
              {
                v386 = (uint64_t **)v387;
                int v389 = *((_DWORD *)v387 + 8);
                if (v389 < 1) {
                  break;
                }
                v387 = *v386;
                v388 = v386;
                if (!*v386) {
                  goto LABEL_767;
                }
              }
              if ((v389 & 0x80000000) == 0) {
                break;
              }
              v387 = v386[1];
              if (!v387)
              {
                v388 = v386 + 1;
                goto LABEL_767;
              }
            }
            v390 = v386;
          }
          else
          {
LABEL_767:
            v390 = operator new(0x40uLL);
            v390[8] = 0;
            *((void *)v390 + 6) = 0;
            *((void *)v390 + 7) = 0;
            *((void *)v390 + 5) = 0;
            *(void *)v390 = 0;
            *((void *)v390 + 1) = 0;
            *((void *)v390 + 2) = v386;
            *v388 = (uint64_t *)v390;
            v391 = (uint64_t *)**v370;
            v392 = (uint64_t *)v390;
            if (v391)
            {
              *v370 = v391;
              v392 = *v388;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a4 + 26), v392);
            ++*((void *)a4 + 27);
          }
          v393 = (__n128 *)*((void *)v390 + 6);
          if ((unint64_t)v393 >= *((void *)v390 + 7))
          {
            v394 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)(v390 + 10), *(__n128 *)__dst);
            v382 = *(atomic_ullong **)&__dst[8];
          }
          else
          {
            v393->n128_u64[0] = *(void *)__dst;
            v382 = *(atomic_ullong **)&__dst[8];
            v393->n128_u64[1] = *(void *)&__dst[8];
            if (v382) {
              atomic_fetch_add_explicit(v382 + 1, 1uLL, memory_order_relaxed);
            }
            v394 = v393 + 1;
          }
          *((void *)v390 + 6) = v394;
          uint64_t v395 = *(void *)__dst;
          if (v382) {
            goto LABEL_777;
          }
LABEL_778:
          uint64_t v396 = *(void *)&(*v431)[56 * v303 + 8] + 24 * v369;
          *(_DWORD *)uint64_t v396 = 7;
          v397 = *(std::__shared_weak_count **)(v396 + 16);
          *(void *)(v396 + 8) = v395;
          *(void *)(v396 + 16) = v382;
          if (v397 && !atomic_fetch_add(&v397->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
            std::__shared_weak_count::__release_weak(v397);
          }
          v378 = *(std::__shared_weak_count **)&__dst[8];
          if (!*(void *)&__dst[8]
            || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            goto LABEL_736;
          }
LABEL_735:
          ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
          std::__shared_weak_count::__release_weak(v378);
LABEL_736:
          if (++v369 == v412) {
            goto LABEL_798;
          }
        }
        HIBYTE(end) = 0;
        buf.n128_u8[0] = 0;
        karo::media::ImageLoader::loadFromChunk(&v437, v377, v376, (unsigned __int16 *)&buf, (uint64_t)(v381 + 3));
        uint64_t v395 = *(void *)__dst;
        uint64_t v304 = v408;
LABEL_777:
        atomic_fetch_add_explicit(v382 + 1, 1uLL, memory_order_relaxed);
        goto LABEL_778;
      case 2u:
        uint64_t v433 = v10 + 4;
        if (v10 + 4 > a3) {
          return 0;
        }
        unsigned int v31 = *(_DWORD *)&a2[v10];
        std::vector<karo::media::C3mMesh>::reserve((uint64_t)v419, v31);
        if (!v31) {
          goto LABEL_811;
        }
        int v32 = 0;
        unint64_t v33 = 0;
        int v430 = 0;
        while (2)
        {
          if (v433 + 1 > a3) {
            return 0;
          }
          uint64_t v68 = v433 + 3;
          if (v433 + 3 > a3) {
            return 0;
          }
          int v69 = a2[v433];
          if (v69 == 2)
          {
            uint64_t v65 = &a2[v68];
            uint64_t v66 = *(unsigned __int16 *)&a2[v68 - 2];
            memset(v449, 0, 32);
            karo::media::EdgebreakerDecoder::info((karo::media::EdgebreakerDecoder *)&buf, v65);
            karo::media::EdgebreakerDecoder::decode((char *)&buf, a2, a4, v32);
            unint64_t v67 = v433 + v66;
            if (v433 + v66 >= a3) {
              unint64_t v67 = a3;
            }
            uint64_t v433 = v67;
            karo::media::EdgebreakerDecoder::~EdgebreakerDecoder((karo::media::EdgebreakerDecoder *)&buf);
            goto LABEL_124;
          }
          if (v69 == 1)
          {
            if (v433 + 6 >= a3) {
              unint64_t v74 = a3;
            }
            else {
              unint64_t v74 = v433 + 6;
            }
            if (v433 + 6 < a3) {
              int v430 = a2[v74++];
            }
            unint64_t v75 = v74 + 4;
            if (v74 + 4 <= a3)
            {
              LODWORD(v415) = *(_DWORD *)&a2[v74];
              v74 += 4;
            }
            if (v74 + 1 > a3) {
              return 0;
            }
            BOOL result = 0;
            if (v433 + 6 < a3 && v75 <= a3)
            {
              if (v74 + 9 > a3 || v74 + 17 > a3 || v74 + 25 > a3 || v74 + 33 > a3 || v74 + 41 > a3 || v74 + 49 > a3) {
                return 0;
              }
              unint64_t v76 = v74 + 53;
              if (v74 + 53 > a3)
              {
                unint64_t v77 = v74 + 53;
              }
              else
              {
                int v421 = *(_DWORD *)&v428[v76];
                unint64_t v77 = v74 + 57;
              }
              unint64_t v79 = v77;
              if (v77 <= a3)
              {
                LODWORD(v423) = *(_DWORD *)&v428[v77];
                unint64_t v79 = v77 + 4;
              }
              if (v79 > a3) {
                return 0;
              }
              uint64_t v433 = v79;
              BOOL result = 0;
              if (v76 <= a3 && v77 <= a3)
              {
                if ((v423 + v421) > a3)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  float v80 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
                  {
                    buf.n128_u16[0] = 0;
                    _os_log_impl(&dword_1A1780000, v80, OS_LOG_TYPE_ERROR, "C3M3 mesh data block too short", (uint8_t *)&buf, 2u);
                  }
                  goto LABEL_182;
                }
                int v82 = a2[v74];
                double v83 = *(double *)&a2[v74 + 1];
                double v84 = *(double *)&a2[v74 + 9];
                double v85 = *(double *)&a2[v74 + 17];
                double v86 = *(double *)&a2[v74 + 25];
                double v87 = *(double *)&a2[v74 + 33];
                double v88 = *(double *)&a2[v74 + 41];
                size_t v89 = *(unsigned int *)&v428[v79];
                if (v89)
                {
                  BOOL v90 = operator new(*(unsigned int *)&v428[v79]);
                  bzero(v90, v89);
                }
                else
                {
                  BOOL v90 = 0;
                }
                if (v89 == v423)
                {
                  memcpy(v90, &a2[v421], v89);
                }
                else
                {
                  unsigned int v99 = *((unsigned __int8 *)a4 + 3);
                  char v100 = v99 > 3 || v99 == 3 && *((unsigned char *)a4 + 4) != 0;
                  {
                    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                    }
                    long long v111 = (id)GEOGetVectorKitVKDefaultLog_log;
                    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                    {
                      buf.n128_u16[0] = 0;
                      _os_log_impl(&dword_1A1780000, v111, OS_LOG_TYPE_ERROR, "C3M3 LZMA mesh decode failed", (uint8_t *)&buf, 2u);
                    }
                    goto LABEL_261;
                  }
                }
                uint64_t v447 = 0;
                uint64_t v448 = 0;
                std::vector<unsigned int>::pointer end = 0;
                uint64_t v445 = 0;
                buf.n128_u64[1] = 0;
                memset(&v449[8], 0, 32);
                uint64_t v450 = 0;
                int v451 = -1;
                buf.n128_u8[0] = v430;
                buf.n128_u32[1] = v32;
                LODWORD(v446) = v415;
                if (*((unsigned __int8 *)a4 + 4) <= 1u && !v430)
                {
                  uint64_t v104 = *((void *)a4 + 26);
                  if (v104)
                  {
                    unint64_t v105 = v414;
                    do
                    {
                      int v106 = *(_DWORD *)(v104 + 32);
                      BOOL v107 = v106 < 5;
                      if (v106 >= 5) {
                        long long v108 = (uint64_t *)v104;
                      }
                      else {
                        long long v108 = (uint64_t *)(v104 + 8);
                      }
                      if (!v107) {
                        unint64_t v105 = (int *)v104;
                      }
                      uint64_t v104 = *v108;
                    }
                    while (*v108);
                    if (v105 != v414 && v105[8] <= 5) {
                      buf.n128_u8[0] = 4;
                    }
                  }
                }
                if (v89 <= 5)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  long long v109 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)__dst = 0;
                    _os_log_impl(&dword_1A1780000, v109, OS_LOG_TYPE_ERROR, "C3M3 uncompressed mesh header data block too short", __dst, 2u);
                  }
                  goto LABEL_295;
                }
                unint64_t v110 = *(unsigned int *)(v90 + 1);
                if ((-1431655765 * v110) >= 0x55555556)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  long long v109 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)__dst = 0;
                    _os_log_impl(&dword_1A1780000, v109, OS_LOG_TYPE_ERROR, "C3M3 index list not a multiple of 3", __dst, 2u);
                  }
                  goto LABEL_295;
                }
                unsigned __int16 v114 = *v90;
                std::make_shared[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,char const(&)[10],unsigned short const&,ggl::BufferUsage,void>((uint64_t *)&v442, *v90, 7);
                ggl::DataWrite<ggl::CommonMesh::BufferPos4UV>::DataWrite((uint64_t *)__dst, (uint64_t)v442.__begin_, 0, v114);
                std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>(&v447, (uint64_t)v442.__begin_, (uint64_t)v442.__end_);
                *(_DWORD *)v449 = v114;
                unsigned __int16 v410 = v114;
                if (v82 == 2)
                {
                  if ((2 * v110) + 6 * (unint64_t)v114 + 6 <= v89)
                  {
                    if (v114)
                    {
                      long long v159 = (float *)&v440[1] + 1;
                      uint64_t v160 = 6;
                      uint64_t v161 = v114;
                      while (1)
                      {
                        size_t v162 = v160 + 2;
                        if (v160 + 2 > v89)
                        {
                          size_t v164 = v160 + 2;
                          unsigned int v163 = v408;
                        }
                        else
                        {
                          unsigned int v163 = *(unsigned __int16 *)((char *)v90 + v160);
                          size_t v164 = v160 + 4;
                          v160 += 2;
                        }
                        unsigned int v408 = v163;
                        if (v164 > v89) {
                          goto LABEL_524;
                        }
                        int v113 = 1;
                        if (v162 > v89) {
                          goto LABEL_525;
                        }
                        uint64_t v165 = v164 + 2;
                        if (v164 + 2 > v89) {
                          goto LABEL_525;
                        }
                        unsigned int v166 = *(unsigned __int16 *)((char *)v90 + v160);
                        unsigned int v167 = *(unsigned __int16 *)((char *)v90 + v164);
                        float v168 = v86 + v83 * (double)(v167 >> 6);
                        float v169 = v87 + v84 * (double)(((v166 | (v167 << 16)) >> 12) & 0x3FF);
                        float v170 = v88 + v85 * (double)((v166 >> 2) & 0x3FF);
                        *(v159 - 3) = v168;
                        *(v159 - 2) = v169;
                        *(v159 - 1) = v170;
                        *long long v159 = 1.0;
                        v159[1] = (float)(((v163 & 0xFE00 | (v166 << 16)) >> 9) & 0x1FF) * 0.0019569;
                        v159[2] = (float)(v163 & 0x1FF) * 0.0019569;
                        v159 += 8;
                        uint64_t v160 = v165;
                        if (!--v161) {
                          goto LABEL_463;
                        }
                      }
                    }
                    uint64_t v165 = 6;
LABEL_463:
                    std::vector<unsigned short>::reserve((uint64_t)&v449[24], v110);
                    if (v110)
                    {
                      while (1)
                      {
                        uint64_t v249 = v165 + 2;
                        if (v165 + 2 > v89) {
                          goto LABEL_524;
                        }
                        unsigned int v250 = *(unsigned __int16 *)((char *)v90 + v165);
                        if (v250 < v410)
                        {
                          std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v449[24], v250);
                        }
                        else
                        {
                          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                          }
                          double v251 = (id)GEOGetVectorKitVKDefaultLog_log;
                          if (os_log_type_enabled(v251, OS_LOG_TYPE_ERROR))
                          {
                            LOWORD(v441.__begin_) = 0;
                            _os_log_impl(&dword_1A1780000, v251, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v441, 2u);
                          }
                        }
                        uint64_t v165 = v249;
                        if (!--v110) {
                          goto LABEL_512;
                        }
                      }
                    }
                    goto LABEL_512;
                  }
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  long long v117 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_331;
                  }
                }
                else if (v82 == 1)
                {
                  if ((2 * v110) + 5 * (unint64_t)v114 + 6 <= v89)
                  {
                    if (v114)
                    {
                      uint64_t v127 = 0;
                      long long v128 = v90 + 3;
                      long long v129 = (float *)&v440[1];
                      long long v130 = (char *)v90 + 9;
                      uint64_t v131 = 11;
                      while (1)
                      {
                        uint64_t v132 = v127;
                        if (v127 + 7 > v89) {
                          goto LABEL_524;
                        }
                        int v113 = 1;
                        if (v127 + 8 >= v89) {
                          goto LABEL_525;
                        }
                        unint64_t v133 = v131;
                        long long v134 = v130;
                        float v135 = v86 + v83 * (double)*((unsigned __int8 *)v128 + v127);
                        LOBYTE(v115) = *((unsigned char *)v128 + v127 + 1);
                        double v115 = v87 + v84 * (double)*(unint64_t *)&v115;
                        *(float *)&double v115 = v115;
                        LOBYTE(v116) = *((unsigned char *)v128 + v127 + 2);
                        double v116 = v88 + v85 * (double)*(unint64_t *)&v116;
                        *(float *)&double v116 = v116;
                        *(v129 - 2) = v135;
                        *(v129 - 1) = *(float *)&v115;
                        v127 += 3;
                        *long long v129 = *(float *)&v116;
                        v129[1] = 1.0;
                        v129 += 8;
                        v131 += 3;
                        v130 += 3;
                        if (3 * v114 == v132 + 3)
                        {
                          uint64_t v136 = v132 + 9;
                          uint64_t v137 = v132 + 8;
                          long long v138 = v440;
                          unint64_t v139 = (v89 + 1 - (v132 + 9)) >> 1;
                          unint64_t v140 = v114 - 1;
                          size_t v141 = v132 + 11;
                          if (v132 + 11 <= v89 + 1) {
                            size_t v141 = v89 + 1;
                          }
                          unint64_t v142 = (v141 - v137 - 2) >> 1;
                          if (v142 < v139) {
                            unint64_t v139 = v142;
                          }
                          if (v140 < v139) {
                            unint64_t v139 = v114 - 1;
                          }
                          if (v139 > 0xF
                            && (&v440[2] < (int32x2_t *)((char *)&v90[v139 + 1] + v137 + 1)
                              ? (BOOL v143 = (int32x2_t *)((char *)v90 + v137 + 1) >= &v440[4 * v139 + 3])
                              : (BOOL v143 = 1),
                                v143))
                          {
                            unint64_t v144 = v139 + 1;
                            uint64_t v145 = (v139 + 1) & 0xF;
                            uint64_t v146 = 16;
                            if (v145) {
                              uint64_t v146 = v145;
                            }
                            unint64_t v147 = v144 - v146;
                            if (v133 <= v89 + 1) {
                              unint64_t v133 = v89 + 1;
                            }
                            unint64_t v148 = (v133 - v132 - 10) >> 1;
                            if ((v89 - v132 - 8) >> 1 < v148) {
                              unint64_t v148 = (v89 - v132 - 8) >> 1;
                            }
                            if (v148 >= v140) {
                              unint64_t v148 = v114 - 1;
                            }
                            unint64_t v149 = ~v148 + v146;
                            uint64_t v150 = v440;
                            do
                            {
                              int8x16x2_t v458 = vld2q_s8(v134);
                              v134 += 32;
                              float32x4_t v151 = (float32x4_t)vdupq_n_s32(0x3B808081u);
                              int8x16_t v152 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v458.val[0], (int8x16_t)xmmword_1A28FD070)), v151);
                              int8x16_t v153 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v458.val[0], (int8x16_t)xmmword_1A28FD080)), v151);
                              int8x16_t v154 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v458.val[0], (int8x16_t)xmmword_1A28FD090)), v151);
                              int8x16_t v155 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v458.val[0], (int8x16_t)xmmword_1A28FD0A0)), v151);
                              v458.val[0] = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v458.val[1], (int8x16_t)xmmword_1A28FD0A0));
                              int8x16_t v156 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v458.val[1], (int8x16_t)xmmword_1A28FD070)), v151);
                              int8x16_t v157 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v458.val[1], (int8x16_t)xmmword_1A28FD080)), v151);
                              v458.val[1] = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v458.val[1], (int8x16_t)xmmword_1A28FD090)), v151);
                              v458.val[0] = (int8x16_t)vmulq_f32((float32x4_t)v458.val[0], v151);
                              v150[2] = vzip1_s32(*(int32x2_t *)v155.i8, *(int32x2_t *)v458.val[0].i8);
                              v150[18] = vzip1_s32(*(int32x2_t *)v154.i8, *(int32x2_t *)v458.val[1].i8);
                              v150[34] = vzip1_s32(*(int32x2_t *)v153.i8, *(int32x2_t *)v157.i8);
                              v150[50] = vzip1_s32(*(int32x2_t *)v152.i8, *(int32x2_t *)v156.i8);
                              v150[6] = vzip2_s32(*(int32x2_t *)v155.i8, *(int32x2_t *)v458.val[0].i8);
                              v458.val[0].i64[0] = vextq_s8(v458.val[0], v458.val[0], 8uLL).u64[0];
                              int32x2_t v158 = (int32x2_t)vextq_s8(v155, v155, 8uLL).u64[0];
                              v150[10] = vzip1_s32(v158, *(int32x2_t *)v458.val[0].i8);
                              v150[14] = vzip2_s32(v158, *(int32x2_t *)v458.val[0].i8);
                              v150[22] = vzip2_s32(*(int32x2_t *)v154.i8, *(int32x2_t *)v458.val[1].i8);
                              v458.val[0].i64[0] = vextq_s8(v458.val[1], v458.val[1], 8uLL).u64[0];
                              v458.val[1].i64[0] = vextq_s8(v154, v154, 8uLL).u64[0];
                              v150[26] = vzip1_s32(*(int32x2_t *)v458.val[1].i8, *(int32x2_t *)v458.val[0].i8);
                              v150[30] = vzip2_s32(*(int32x2_t *)v458.val[1].i8, *(int32x2_t *)v458.val[0].i8);
                              v150[38] = vzip2_s32(*(int32x2_t *)v153.i8, *(int32x2_t *)v157.i8);
                              v458.val[0].i64[0] = vextq_s8(v157, v157, 8uLL).u64[0];
                              v458.val[1].i64[0] = vextq_s8(v153, v153, 8uLL).u64[0];
                              v150[42] = vzip1_s32(*(int32x2_t *)v458.val[1].i8, *(int32x2_t *)v458.val[0].i8);
                              v150[46] = vzip2_s32(*(int32x2_t *)v458.val[1].i8, *(int32x2_t *)v458.val[0].i8);
                              v150[54] = vzip2_s32(*(int32x2_t *)v152.i8, *(int32x2_t *)v156.i8);
                              v458.val[0].i64[0] = vextq_s8(v156, v156, 8uLL).u64[0];
                              v152.i64[0] = vextq_s8(v152, v152, 8uLL).u64[0];
                              v150[58] = vzip1_s32(*(int32x2_t *)v152.i8, *(int32x2_t *)v458.val[0].i8);
                              v150[62] = vzip2_s32(*(int32x2_t *)v152.i8, *(int32x2_t *)v458.val[0].i8);
                              v150 += 64;
                              v149 += 16;
                            }
                            while (v149);
                            v136 += 2 * v147;
                          }
                          else
                          {
                            unint64_t v147 = 0;
                          }
                          long long v270 = (float32x2_t *)&v138[4 * v147 + 2];
                          unint64_t v271 = v114 - v147;
                          size_t v272 = ((v89 - v132 - 8) >> 1) - v147;
                          while (v272)
                          {
                            uint64_t v245 = v136 + 2;
                            if (v136 + 2 > v89) {
                              break;
                            }
                            __n128 v273 = (unsigned __int8 *)v90 + v136;
                            v274.i32[0] = *v273;
                            v274.i32[1] = v273[1];
                            *long long v270 = vmul_f32(vcvt_f32_u32(v274), (float32x2_t)vdup_n_s32(0x3B808081u));
                            v270 += 4;
                            --v272;
                            uint64_t v136 = v245;
                            if (!--v271) {
                              goto LABEL_451;
                            }
                          }
                          goto LABEL_524;
                        }
                      }
                    }
                    uint64_t v245 = 6;
LABEL_451:
                    std::vector<unsigned short>::reserve((uint64_t)&v449[24], v110);
                    if (v110)
                    {
                      while (1)
                      {
                        uint64_t v246 = v245 + 2;
                        if (v245 + 2 > v89) {
                          goto LABEL_524;
                        }
                        unsigned int v247 = *(unsigned __int16 *)((char *)v90 + v245);
                        if (v247 < v410)
                        {
                          std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v449[24], v247);
                        }
                        else
                        {
                          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                          }
                          uint64_t v248 = (id)GEOGetVectorKitVKDefaultLog_log;
                          if (os_log_type_enabled(v248, OS_LOG_TYPE_ERROR))
                          {
                            LOWORD(v441.__begin_) = 0;
                            _os_log_impl(&dword_1A1780000, v248, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v441, 2u);
                          }
                        }
                        uint64_t v245 = v246;
                        if (!--v110) {
                          goto LABEL_512;
                        }
                      }
                    }
                    goto LABEL_512;
                  }
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  long long v117 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_331;
                  }
                }
                else
                {
                  if (v82) {
                    goto LABEL_512;
                  }
                  if ((2 * v110) + 10 * (unint64_t)v114 + 6 <= v89)
                  {
                    if (v114)
                    {
                      long long v171 = v440 + 1;
                      uint64_t v172 = v114;
                      uint64_t v173 = 6;
                      int v174 = v405;
                      do
                      {
                        if (v173 + 2 > v89)
                        {
                          size_t v175 = v173 + 2;
                          uint64_t v176 = v173;
                        }
                        else
                        {
                          int v174 = *(unsigned __int16 *)((char *)v90 + v173);
                          size_t v175 = v173 + 4;
                          uint64_t v176 = v173 + 2;
                        }
                        if (v175 > v89)
                        {
                          LODWORD(v405) = v174;
                          goto LABEL_524;
                        }
                        int v113 = 1;
                        if (v173 + 2 > v89 || (uint64_t v173 = v175 + 2, v175 + 2 > v89))
                        {
                          LODWORD(v405) = v174;
                          goto LABEL_525;
                        }
                        float v177 = v86 + v83 * (double)(unsigned __int16)v174;
                        LOWORD(v115) = *(_WORD *)((char *)v90 + v176);
                        double v115 = v87 + v84 * (double)*(unint64_t *)&v115;
                        *(float *)&double v115 = v115;
                        LOWORD(v116) = *(_WORD *)((char *)v90 + v175);
                        double v116 = v88 + v85 * (double)*(unint64_t *)&v116;
                        *(float *)v171[-1].i32 = v177;
                        v171[-1].i32[1] = LODWORD(v115);
                        float v178 = v116;
                        *(float *)v171->i32 = v178;
                        v171->i32[1] = 1065353216;
                        v171 += 4;
                        --v172;
                      }
                      while (v172);
                      LODWORD(v405) = v174;
                      uint64_t v179 = v440;
                      size_t v180 = v175 + 4;
                      if (v175 + 4 <= v89 + 1) {
                        size_t v180 = v89 + 1;
                      }
                      unint64_t v181 = (v180 + ~v175) >> 2;
                      if (v175 + 6 <= v89 + 1) {
                        size_t v182 = v89 + 1;
                      }
                      else {
                        size_t v182 = v175 + 6;
                      }
                      unint64_t v183 = (v182 - v175 - 3) >> 2;
                      if (v181 >= v183) {
                        unint64_t v181 = v183;
                      }
                      if ((unint64_t)v114 - 1 >= v181) {
                        unint64_t v184 = v181;
                      }
                      else {
                        unint64_t v184 = v114 - 1;
                      }
                      if (v184 > 7)
                      {
                        uint64_t v280 = 8;
                        if (((v184 + 1) & 7) != 0) {
                          uint64_t v280 = (v184 + 1) & 7;
                        }
                        unint64_t v185 = v184 + 1 - v280;
                        unint64_t v281 = ~v184 + v280;
                        long long v282 = (_WORD *)((char *)v90 + v175 + 2);
                        __n128 v283 = v440 + 18;
                        do
                        {
                          int16x8x2_t v456 = vld2q_s16(v282);
                          v282 += 16;
                          float32x4_t v284 = (float32x4_t)vdupq_n_s32(0x37800080u);
                          int8x16_t v285 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v456.val[0])), v284);
                          int8x16_t v286 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v456.val[0].i8)), v284);
                          v456.val[0] = (int16x8_t)vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v456.val[1])), v284);
                          v456.val[1] = (int16x8_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v456.val[1].i8)), v284);
                          v283[-16] = vzip1_s32(*(int32x2_t *)v286.i8, *(int32x2_t *)v456.val[1].i8);
                          int32x2_t *v283 = vzip1_s32(*(int32x2_t *)v285.i8, *(int32x2_t *)v456.val[0].i8);
                          v283[-12] = vzip2_s32(*(int32x2_t *)v286.i8, *(int32x2_t *)v456.val[1].i8);
                          v456.val[1].i64[0] = vextq_s8((int8x16_t)v456.val[1], (int8x16_t)v456.val[1], 8uLL).u64[0];
                          v286.i64[0] = vextq_s8(v286, v286, 8uLL).u64[0];
                          v283[-8] = vzip1_s32(*(int32x2_t *)v286.i8, *(int32x2_t *)v456.val[1].i8);
                          v283[-4] = vzip2_s32(*(int32x2_t *)v286.i8, *(int32x2_t *)v456.val[1].i8);
                          v283[4] = vzip2_s32(*(int32x2_t *)v285.i8, *(int32x2_t *)v456.val[0].i8);
                          v456.val[0].i64[0] = vextq_s8((int8x16_t)v456.val[0], (int8x16_t)v456.val[0], 8uLL).u64[0];
                          v456.val[1].i64[0] = vextq_s8(v285, v285, 8uLL).u64[0];
                          v283[8] = vzip1_s32(*(int32x2_t *)v456.val[1].i8, *(int32x2_t *)v456.val[0].i8);
                          v283[12] = vzip2_s32(*(int32x2_t *)v456.val[1].i8, *(int32x2_t *)v456.val[0].i8);
                          v283 += 32;
                          v281 += 8;
                        }
                        while (v281);
                        v173 += 4 * v185;
                      }
                      else
                      {
                        unint64_t v185 = 0;
                      }
                      unint64_t v287 = v114 - v185;
                      long long v288 = (float32x2_t *)&v179[4 * v185 + 2];
                      while (v173 + 2 <= v89)
                      {
                        uint64_t v252 = v173 + 4;
                        if (v173 + 4 > v89) {
                          break;
                        }
                        long long v289 = (_WORD *)((char *)v90 + v173);
                        v290.i32[0] = *v289;
                        v290.i32[1] = v289[1];
                        *long long v288 = vmul_f32(vcvt_f32_u32(v290), (float32x2_t)vdup_n_s32(0x37800080u));
                        v288 += 4;
                        uint64_t v173 = v252;
                        if (!--v287) {
                          goto LABEL_475;
                        }
                      }
                      goto LABEL_524;
                    }
                    uint64_t v252 = 6;
LABEL_475:
                    std::vector<unsigned short>::reserve((uint64_t)&v449[24], v110);
                    if (v110)
                    {
                      while (1)
                      {
                        uint64_t v253 = v252 + 2;
                        if (v252 + 2 > v89) {
                          goto LABEL_524;
                        }
                        unsigned int v254 = *(unsigned __int16 *)((char *)v90 + v252);
                        if (v254 < v410)
                        {
                          std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v449[24], v254);
                        }
                        else
                        {
                          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                          }
                          double v255 = (id)GEOGetVectorKitVKDefaultLog_log;
                          if (os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
                          {
                            LOWORD(v441.__begin_) = 0;
                            _os_log_impl(&dword_1A1780000, v255, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v441, 2u);
                          }
                        }
                        uint64_t v252 = v253;
                        if (!--v110) {
                          goto LABEL_512;
                        }
                      }
                    }
                    goto LABEL_512;
                  }
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  long long v117 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_331;
                  }
                }
                LOWORD(v441.__begin_) = 0;
                _os_log_impl(&dword_1A1780000, v117, OS_LOG_TYPE_ERROR, "C3M3 uncompressed mesh body data block too short", (uint8_t *)&v441, 2u);
                goto LABEL_331;
              }
            }
          }
          else
          {
            if (a2[v433])
            {
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              uint64_t v78 = (id)GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
              {
                buf.n128_u16[0] = 0;
                _os_log_impl(&dword_1A1780000, v78, OS_LOG_TYPE_ERROR, "C3M3 Unknown submesh type.", (uint8_t *)&buf, 2u);
              }

              v433 += 3;
              goto LABEL_124;
            }
            if (v433 + 4 >= a3) {
              unint64_t v70 = a3;
            }
            else {
              unint64_t v70 = v433 + 4;
            }
            if (v433 + 4 < a3) {
              unsigned int __len = a2[v70++];
            }
            unint64_t v71 = v70 + 4;
            if (v70 + 4 <= a3)
            {
              unint64_t v33 = *(unsigned int *)&a2[v70];
              v70 += 4;
            }
            if (v70 + 1 > a3) {
              return 0;
            }
            BOOL result = 0;
            if (v433 + 4 < a3 && v71 <= a3)
            {
              if (v70 + 9 > a3 || v70 + 17 > a3 || v70 + 25 > a3 || v70 + 33 > a3 || v70 + 41 > a3 || v70 + 49 > a3) {
                return 0;
              }
              unint64_t v72 = v70 + 53;
              if (v70 + 53 > a3)
              {
                unint64_t v73 = v70 + 53;
              }
              else
              {
                unsigned __int32 v422 = *(_DWORD *)&v428[v72];
                unint64_t v73 = v70 + 57;
              }
              unint64_t v81 = v73;
              if (v73 <= a3)
              {
                unsigned int v426 = *(_DWORD *)&v428[v73];
                unint64_t v81 = v73 + 4;
              }
              if (v81 > a3) {
                return 0;
              }
              uint64_t v433 = v81;
              BOOL result = 0;
              if (v72 <= a3 && v73 <= a3)
              {
                if (v426 + v422 > a3)
                {
                  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                  }
                  float v80 = (id)GEOGetVectorKitVKDefaultLog_log;
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
                  {
                    buf.n128_u16[0] = 0;
                    _os_log_impl(&dword_1A1780000, v80, OS_LOG_TYPE_ERROR, "C3M3 mesh data block too short", (uint8_t *)&buf, 2u);
                  }
LABEL_182:

                  goto LABEL_124;
                }
                int v91 = a2[v70];
                double v92 = *(double *)&a2[v70 + 1];
                double v93 = *(double *)&a2[v70 + 9];
                double v94 = *(double *)&a2[v70 + 17];
                double v95 = *(double *)&a2[v70 + 25];
                double v96 = *(double *)&a2[v70 + 33];
                double v97 = *(double *)&a2[v70 + 41];
                size_t v98 = *(unsigned int *)&v428[v81];
                if (v98)
                {
                  BOOL v90 = operator new(*(unsigned int *)&v428[v81]);
                  bzero(v90, v98);
                }
                else
                {
                  BOOL v90 = 0;
                }
                if (v98 == v426)
                {
                  memcpy(v90, &a2[v422], v98);
                  goto LABEL_253;
                }
                unsigned int v101 = *((unsigned __int8 *)a4 + 3);
                char v102 = v101 > 3 || v101 == 3 && *((unsigned char *)a4 + 4) != 0;
                {
LABEL_253:
                  uint64_t v447 = 0;
                  uint64_t v448 = 0;
                  std::vector<unsigned int>::pointer end = 0;
                  uint64_t v445 = 0;
                  buf.n128_u64[1] = 0;
                  memset(&v449[8], 0, 32);
                  uint64_t v450 = 0;
                  int v451 = -1;
                  buf.n128_u8[0] = __len;
                  buf.n128_u32[1] = v32;
                  LODWORD(v446) = v33;
                  if (*((unsigned __int8 *)a4 + 4) > 1u) {
                    goto LABEL_284;
                  }
                  if (__len == 2)
                  {
                    uint64_t v118 = *(uint64_t **)v414;
                    if (*(void *)v414)
                    {
                      uint64_t v119 = v414;
                      do
                      {
                        int v120 = *((_DWORD *)v118 + 8);
                        BOOL v121 = v120 < 3;
                        if (v120 >= 3) {
                          long long v122 = (uint64_t **)v118;
                        }
                        else {
                          long long v122 = (uint64_t **)(v118 + 1);
                        }
                        if (!v121) {
                          uint64_t v119 = (int *)v118;
                        }
                        uint64_t v118 = *v122;
                      }
                      while (*v122);
                      if (v119 != v414 && v119[8] <= 3)
                      {
                        buf.n128_u8[0] = 5;
                        goto LABEL_284;
                      }
                    }
                    if (*((void *)a4 + 27) > v33)
                    {
                      buf.n128_u8[0] = 0;
                      goto LABEL_284;
                    }
                  }
                  else if ((_BYTE)__len)
                  {
LABEL_284:
                    if (v98 <= 5)
                    {
                      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                      }
                      long long v109 = (id)GEOGetVectorKitVKDefaultLog_log;
                      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)__dst = 0;
                        _os_log_impl(&dword_1A1780000, v109, OS_LOG_TYPE_ERROR, "C3M3 uncompressed mesh header data block too short", __dst, 2u);
                      }
LABEL_295:

                      int v113 = 4;
LABEL_296:
                      karo::media::C3mMesh::~C3mMesh((karo::media::C3mMesh *)&buf);
LABEL_297:
                      if (v90) {
                        operator delete(v90);
                      }
                      if (v113 && v113 != 4) {
                        return 0;
                      }
LABEL_124:
                      if (++v32 == v31) {
                        goto LABEL_811;
                      }
                      continue;
                    }
                    unint64_t v123 = *(unsigned int *)(v90 + 1);
                    if ((-1431655765 * v123) >= 0x55555556)
                    {
                      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                      }
                      long long v109 = (id)GEOGetVectorKitVKDefaultLog_log;
                      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)__dst = 0;
                        _os_log_impl(&dword_1A1780000, v109, OS_LOG_TYPE_ERROR, "C3M3 index list not a multiple of 3", __dst, 2u);
                      }
                      goto LABEL_295;
                    }
                    unsigned __int16 v124 = *v90;
                    std::make_shared[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,char const(&)[10],unsigned short const&,ggl::BufferUsage,void>((uint64_t *)&v442, *v90, 7);
                    ggl::DataWrite<ggl::CommonMesh::BufferPos4UV>::DataWrite((uint64_t *)__dst, (uint64_t)v442.__begin_, 0, v124);
                    std::shared_ptr<ggl::VertexData>::operator=[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,void>(&v447, (uint64_t)v442.__begin_, (uint64_t)v442.__end_);
                    *(_DWORD *)v449 = v124;
                    unsigned __int16 v411 = v124;
                    if (v91 == 2)
                    {
                      if ((2 * v123) + 6 * (unint64_t)v124 + 6 <= v98)
                      {
                        if (v124)
                        {
                          unsigned int v218 = (float *)&v440[1] + 1;
                          uint64_t v219 = 6;
                          uint64_t v220 = v124;
                          while (1)
                          {
                            size_t v221 = v219 + 2;
                            if (v219 + 2 > v98)
                            {
                              size_t v223 = v219 + 2;
                              int v222 = v407;
                            }
                            else
                            {
                              int v222 = *(unsigned __int16 *)((char *)v90 + v219);
                              size_t v223 = v219 + 4;
                              v219 += 2;
                            }
                            LODWORD(v407) = v222;
                            if (v223 > v98) {
                              goto LABEL_524;
                            }
                            int v113 = 1;
                            if (v221 > v98) {
                              goto LABEL_525;
                            }
                            uint64_t v224 = v223 + 2;
                            if (v223 + 2 > v98) {
                              goto LABEL_525;
                            }
                            unsigned int v225 = *(unsigned __int16 *)((char *)v90 + v219);
                            unsigned int v226 = *(unsigned __int16 *)((char *)v90 + v223);
                            float v227 = v95 + v92 * (double)(v226 >> 6);
                            float v228 = v96 + v93 * (double)(((v225 | (v226 << 16)) >> 12) & 0x3FF);
                            float v229 = v97 + v94 * (double)((v225 >> 2) & 0x3FF);
                            *(v218 - 3) = v227;
                            *(v218 - 2) = v228;
                            *(v218 - 1) = v229;
                            *unsigned int v218 = 1.0;
                            v218[1] = (float)(((v222 & 0xFE00 | (v225 << 16)) >> 9) & 0x1FF) * 0.0019569;
                            v218[2] = (float)(v222 & 0x1FF) * 0.0019569;
                            v218 += 8;
                            uint64_t v219 = v224;
                            if (!--v220) {
                              goto LABEL_499;
                            }
                          }
                        }
                        uint64_t v224 = 6;
LABEL_499:
                        std::vector<unsigned short>::reserve((uint64_t)&v449[24], v123);
                        if (v123)
                        {
                          while (1)
                          {
                            uint64_t v260 = v224 + 2;
                            if (v224 + 2 > v98) {
                              goto LABEL_524;
                            }
                            unsigned int v261 = *(unsigned __int16 *)((char *)v90 + v224);
                            if (v261 < v411)
                            {
                              std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v449[24], v261);
                            }
                            else
                            {
                              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                              }
                              __n128 v262 = (id)GEOGetVectorKitVKDefaultLog_log;
                              if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR))
                              {
                                LOWORD(v441.__begin_) = 0;
                                _os_log_impl(&dword_1A1780000, v262, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v441, 2u);
                              }
                            }
                            uint64_t v224 = v260;
                            if (!--v123) {
                              goto LABEL_512;
                            }
                          }
                        }
                        goto LABEL_512;
                      }
                      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                      }
                      long long v117 = (id)GEOGetVectorKitVKDefaultLog_log;
                      if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_331;
                      }
                    }
                    else
                    {
                      if (v91 != 1)
                      {
                        if (!v91)
                        {
                          if ((2 * v123) + 10 * (unint64_t)v124 + 6 > v98)
                          {
                            if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                            }
                            long long v117 = (id)GEOGetVectorKitVKDefaultLog_log;
                            if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
                              goto LABEL_331;
                            }
                            goto LABEL_330;
                          }
                          if (v124)
                          {
                            double v230 = v440 + 1;
                            uint64_t v231 = v124;
                            uint64_t v232 = 6;
                            int v233 = v406;
                            do
                            {
                              if (v232 + 2 > v98)
                              {
                                size_t v234 = v232 + 2;
                                uint64_t v235 = v232;
                              }
                              else
                              {
                                int v233 = *(unsigned __int16 *)((char *)v90 + v232);
                                size_t v234 = v232 + 4;
                                uint64_t v235 = v232 + 2;
                              }
                              if (v234 > v98)
                              {
                                LODWORD(v406) = v233;
                                goto LABEL_524;
                              }
                              int v113 = 1;
                              if (v232 + 2 > v98 || (uint64_t v232 = v234 + 2, v234 + 2 > v98))
                              {
                                LODWORD(v406) = v233;
                                goto LABEL_525;
                              }
                              float v236 = v95 + v92 * (double)(unsigned __int16)v233;
                              LOWORD(v125) = *(_WORD *)((char *)v90 + v235);
                              double v125 = v96 + v93 * (double)*(unint64_t *)&v125;
                              *(float *)&double v125 = v125;
                              LOWORD(v126) = *(_WORD *)((char *)v90 + v234);
                              double v126 = v97 + v94 * (double)*(unint64_t *)&v126;
                              *(float *)v230[-1].i32 = v236;
                              v230[-1].i32[1] = LODWORD(v125);
                              float v237 = v126;
                              *(float *)v230->i32 = v237;
                              v230->i32[1] = 1065353216;
                              v230 += 4;
                              --v231;
                            }
                            while (v231);
                            LODWORD(v406) = v233;
                            double v238 = v440;
                            size_t v239 = v234 + 4;
                            if (v234 + 4 <= v98 + 1) {
                              size_t v239 = v98 + 1;
                            }
                            unint64_t v240 = (v239 + ~v234) >> 2;
                            if (v234 + 6 <= v98 + 1) {
                              size_t v241 = v98 + 1;
                            }
                            else {
                              size_t v241 = v234 + 6;
                            }
                            unint64_t v242 = (v241 - v234 - 3) >> 2;
                            if (v240 >= v242) {
                              unint64_t v240 = v242;
                            }
                            if ((unint64_t)v124 - 1 >= v240) {
                              unint64_t v243 = v240;
                            }
                            else {
                              unint64_t v243 = v124 - 1;
                            }
                            if (v243 > 7)
                            {
                              uint64_t v291 = 8;
                              if (((v243 + 1) & 7) != 0) {
                                uint64_t v291 = (v243 + 1) & 7;
                              }
                              unint64_t v244 = v243 + 1 - v291;
                              unint64_t v292 = ~v243 + v291;
                              long long v293 = (_WORD *)((char *)v90 + v234 + 2);
                              long long v294 = v440 + 18;
                              do
                              {
                                int16x8x2_t v457 = vld2q_s16(v293);
                                v293 += 16;
                                float32x4_t v295 = (float32x4_t)vdupq_n_s32(0x37800080u);
                                int8x16_t v296 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v457.val[0])), v295);
                                int8x16_t v297 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v457.val[0].i8)), v295);
                                v457.val[0] = (int16x8_t)vmulq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v457.val[1])), v295);
                                v457.val[1] = (int16x8_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v457.val[1].i8)), v295);
                                v294[-16] = vzip1_s32(*(int32x2_t *)v297.i8, *(int32x2_t *)v457.val[1].i8);
                                int32x2_t *v294 = vzip1_s32(*(int32x2_t *)v296.i8, *(int32x2_t *)v457.val[0].i8);
                                v294[-12] = vzip2_s32(*(int32x2_t *)v297.i8, *(int32x2_t *)v457.val[1].i8);
                                v457.val[1].i64[0] = vextq_s8((int8x16_t)v457.val[1], (int8x16_t)v457.val[1], 8uLL).u64[0];
                                v297.i64[0] = vextq_s8(v297, v297, 8uLL).u64[0];
                                v294[-8] = vzip1_s32(*(int32x2_t *)v297.i8, *(int32x2_t *)v457.val[1].i8);
                                v294[-4] = vzip2_s32(*(int32x2_t *)v297.i8, *(int32x2_t *)v457.val[1].i8);
                                v294[4] = vzip2_s32(*(int32x2_t *)v296.i8, *(int32x2_t *)v457.val[0].i8);
                                v457.val[0].i64[0] = vextq_s8((int8x16_t)v457.val[0], (int8x16_t)v457.val[0], 8uLL).u64[0];
                                v457.val[1].i64[0] = vextq_s8(v296, v296, 8uLL).u64[0];
                                v294[8] = vzip1_s32(*(int32x2_t *)v457.val[1].i8, *(int32x2_t *)v457.val[0].i8);
                                v294[12] = vzip2_s32(*(int32x2_t *)v457.val[1].i8, *(int32x2_t *)v457.val[0].i8);
                                v294 += 32;
                                v292 += 8;
                              }
                              while (v292);
                              v232 += 4 * v244;
                            }
                            else
                            {
                              unint64_t v244 = 0;
                            }
                            unint64_t v298 = v124 - v244;
                            long long v299 = (float32x2_t *)&v238[4 * v244 + 2];
                            while (v232 + 2 <= v98)
                            {
                              uint64_t v263 = v232 + 4;
                              if (v232 + 4 > v98) {
                                break;
                              }
                              long long v300 = (_WORD *)((char *)v90 + v232);
                              v301.i32[0] = *v300;
                              v301.i32[1] = v300[1];
                              float32x2_t *v299 = vmul_f32(vcvt_f32_u32(v301), (float32x2_t)vdup_n_s32(0x37800080u));
                              v299 += 4;
                              uint64_t v232 = v263;
                              if (!--v298) {
                                goto LABEL_511;
                              }
                            }
                            goto LABEL_524;
                          }
                          uint64_t v263 = 6;
LABEL_511:
                          std::vector<unsigned short>::reserve((uint64_t)&v449[24], v123);
                          if (v123)
                          {
                            while (1)
                            {
                              uint64_t v267 = v263 + 2;
                              if (v263 + 2 > v98) {
                                break;
                              }
                              unsigned int v268 = *(unsigned __int16 *)((char *)v90 + v263);
                              if (v268 < v411)
                              {
                                std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v449[24], v268);
                              }
                              else
                              {
                                if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                                }
                                __n128 v269 = (id)GEOGetVectorKitVKDefaultLog_log;
                                if (os_log_type_enabled(v269, OS_LOG_TYPE_ERROR))
                                {
                                  LOWORD(v441.__begin_) = 0;
                                  _os_log_impl(&dword_1A1780000, v269, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v441, 2u);
                                }
                              }
                              uint64_t v263 = v267;
                              if (!--v123) {
                                goto LABEL_512;
                              }
                            }
LABEL_524:
                            int v113 = 1;
                            goto LABEL_525;
                          }
                        }
LABEL_512:
                        int v452 = v264;
                        int v453 = v265;
                        int v454 = v266;
                        std::vector<karo::media::C3mMesh>::push_back[abi:nn180100]((uint64_t)v419, (const karo::media::C3mMesh *)&buf);
                        int v113 = 0;
LABEL_525:
                        double v8 = 1.0;
                        goto LABEL_526;
                      }
                      if ((2 * v123) + 5 * (unint64_t)v124 + 6 <= v98)
                      {
                        if (v124)
                        {
                          uint64_t v186 = 0;
                          int v187 = v90 + 3;
                          uint64_t v188 = (float *)&v440[1];
                          int v189 = (char *)v90 + 9;
                          uint64_t v190 = 11;
                          while (1)
                          {
                            uint64_t v191 = v186;
                            if (v186 + 7 > v98) {
                              goto LABEL_524;
                            }
                            int v113 = 1;
                            if (v186 + 8 >= v98) {
                              goto LABEL_525;
                            }
                            unint64_t v192 = v190;
                            uint64_t v193 = v189;
                            float v194 = v95 + v92 * (double)*((unsigned __int8 *)v187 + v186);
                            LOBYTE(v125) = *((unsigned char *)v187 + v186 + 1);
                            double v125 = v96 + v93 * (double)*(unint64_t *)&v125;
                            *(float *)&double v125 = v125;
                            LOBYTE(v126) = *((unsigned char *)v187 + v186 + 2);
                            double v126 = v97 + v94 * (double)*(unint64_t *)&v126;
                            *(float *)&double v126 = v126;
                            *(v188 - 2) = v194;
                            *(v188 - 1) = *(float *)&v125;
                            v186 += 3;
                            *uint64_t v188 = *(float *)&v126;
                            v188[1] = 1.0;
                            v188 += 8;
                            v190 += 3;
                            v189 += 3;
                            if (3 * v124 == v191 + 3)
                            {
                              uint64_t v195 = v191 + 9;
                              uint64_t v196 = v191 + 8;
                              uint64_t v197 = v440;
                              unint64_t v198 = (v98 + 1 - (v191 + 9)) >> 1;
                              unint64_t v199 = v124 - 1;
                              size_t v200 = v191 + 11;
                              if (v191 + 11 <= v98 + 1) {
                                size_t v200 = v98 + 1;
                              }
                              unint64_t v201 = (v200 - v196 - 2) >> 1;
                              if (v201 < v198) {
                                unint64_t v198 = v201;
                              }
                              if (v199 < v198) {
                                unint64_t v198 = v124 - 1;
                              }
                              if (v198 > 0xF
                                && (&v440[2] < (int32x2_t *)((char *)&v90[v198 + 1] + v196 + 1)
                                  ? (BOOL v202 = (int32x2_t *)((char *)v90 + v196 + 1) >= &v440[4 * v198 + 3])
                                  : (BOOL v202 = 1),
                                    v202))
                              {
                                unint64_t v203 = v198 + 1;
                                uint64_t v204 = (v198 + 1) & 0xF;
                                uint64_t v205 = 16;
                                if (v204) {
                                  uint64_t v205 = v204;
                                }
                                unint64_t v206 = v203 - v205;
                                if (v192 <= v98 + 1) {
                                  unint64_t v192 = v98 + 1;
                                }
                                unint64_t v207 = (v192 - v191 - 10) >> 1;
                                if ((v98 - v191 - 8) >> 1 < v207) {
                                  unint64_t v207 = (v98 - v191 - 8) >> 1;
                                }
                                if (v207 >= v199) {
                                  unint64_t v207 = v124 - 1;
                                }
                                unint64_t v208 = ~v207 + v205;
                                uint64_t v209 = v440;
                                do
                                {
                                  int8x16x2_t v459 = vld2q_s8(v193);
                                  v193 += 32;
                                  float32x4_t v210 = (float32x4_t)vdupq_n_s32(0x3B808081u);
                                  int8x16_t v211 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v459.val[0], (int8x16_t)xmmword_1A28FD070)), v210);
                                  int8x16_t v212 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v459.val[0], (int8x16_t)xmmword_1A28FD080)), v210);
                                  int8x16_t v213 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v459.val[0], (int8x16_t)xmmword_1A28FD090)), v210);
                                  int8x16_t v214 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v459.val[0], (int8x16_t)xmmword_1A28FD0A0)), v210);
                                  v459.val[0] = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v459.val[1], (int8x16_t)xmmword_1A28FD0A0));
                                  int8x16_t v215 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v459.val[1], (int8x16_t)xmmword_1A28FD070)), v210);
                                  int8x16_t v216 = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v459.val[1], (int8x16_t)xmmword_1A28FD080)), v210);
                                  v459.val[1] = (int8x16_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v459.val[1], (int8x16_t)xmmword_1A28FD090)), v210);
                                  v459.val[0] = (int8x16_t)vmulq_f32((float32x4_t)v459.val[0], v210);
                                  v209[2] = vzip1_s32(*(int32x2_t *)v214.i8, *(int32x2_t *)v459.val[0].i8);
                                  v209[18] = vzip1_s32(*(int32x2_t *)v213.i8, *(int32x2_t *)v459.val[1].i8);
                                  v209[34] = vzip1_s32(*(int32x2_t *)v212.i8, *(int32x2_t *)v216.i8);
                                  v209[50] = vzip1_s32(*(int32x2_t *)v211.i8, *(int32x2_t *)v215.i8);
                                  v209[6] = vzip2_s32(*(int32x2_t *)v214.i8, *(int32x2_t *)v459.val[0].i8);
                                  v459.val[0].i64[0] = vextq_s8(v459.val[0], v459.val[0], 8uLL).u64[0];
                                  int32x2_t v217 = (int32x2_t)vextq_s8(v214, v214, 8uLL).u64[0];
                                  v209[10] = vzip1_s32(v217, *(int32x2_t *)v459.val[0].i8);
                                  v209[14] = vzip2_s32(v217, *(int32x2_t *)v459.val[0].i8);
                                  v209[22] = vzip2_s32(*(int32x2_t *)v213.i8, *(int32x2_t *)v459.val[1].i8);
                                  v459.val[0].i64[0] = vextq_s8(v459.val[1], v459.val[1], 8uLL).u64[0];
                                  v459.val[1].i64[0] = vextq_s8(v213, v213, 8uLL).u64[0];
                                  v209[26] = vzip1_s32(*(int32x2_t *)v459.val[1].i8, *(int32x2_t *)v459.val[0].i8);
                                  v209[30] = vzip2_s32(*(int32x2_t *)v459.val[1].i8, *(int32x2_t *)v459.val[0].i8);
                                  v209[38] = vzip2_s32(*(int32x2_t *)v212.i8, *(int32x2_t *)v216.i8);
                                  v459.val[0].i64[0] = vextq_s8(v216, v216, 8uLL).u64[0];
                                  v459.val[1].i64[0] = vextq_s8(v212, v212, 8uLL).u64[0];
                                  v209[42] = vzip1_s32(*(int32x2_t *)v459.val[1].i8, *(int32x2_t *)v459.val[0].i8);
                                  v209[46] = vzip2_s32(*(int32x2_t *)v459.val[1].i8, *(int32x2_t *)v459.val[0].i8);
                                  v209[54] = vzip2_s32(*(int32x2_t *)v211.i8, *(int32x2_t *)v215.i8);
                                  v459.val[0].i64[0] = vextq_s8(v215, v215, 8uLL).u64[0];
                                  v211.i64[0] = vextq_s8(v211, v211, 8uLL).u64[0];
                                  v209[58] = vzip1_s32(*(int32x2_t *)v211.i8, *(int32x2_t *)v459.val[0].i8);
                                  v209[62] = vzip2_s32(*(int32x2_t *)v211.i8, *(int32x2_t *)v459.val[0].i8);
                                  v209 += 64;
                                  v208 += 16;
                                }
                                while (v208);
                                v195 += 2 * v206;
                              }
                              else
                              {
                                unint64_t v206 = 0;
                              }
                              long long v275 = (float32x2_t *)&v197[4 * v206 + 2];
                              unint64_t v276 = v124 - v206;
                              size_t v277 = ((v98 - v191 - 8) >> 1) - v206;
                              while (v277)
                              {
                                uint64_t v256 = v195 + 2;
                                if (v195 + 2 > v98) {
                                  break;
                                }
                                __n128 v278 = (unsigned __int8 *)v90 + v195;
                                v279.i32[0] = *v278;
                                v279.i32[1] = v278[1];
                                *long long v275 = vmul_f32(vcvt_f32_u32(v279), (float32x2_t)vdup_n_s32(0x3B808081u));
                                v275 += 4;
                                --v277;
                                uint64_t v195 = v256;
                                if (!--v276) {
                                  goto LABEL_487;
                                }
                              }
                              goto LABEL_524;
                            }
                          }
                        }
                        uint64_t v256 = 6;
LABEL_487:
                        std::vector<unsigned short>::reserve((uint64_t)&v449[24], v123);
                        if (v123)
                        {
                          while (1)
                          {
                            uint64_t v257 = v256 + 2;
                            if (v256 + 2 > v98) {
                              goto LABEL_524;
                            }
                            unsigned int v258 = *(unsigned __int16 *)((char *)v90 + v256);
                            if (v258 < v411)
                            {
                              std::vector<unsigned short>::push_back[abi:nn180100]((uint64_t)&v449[24], v258);
                            }
                            else
                            {
                              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                              }
                              long long v259 = (id)GEOGetVectorKitVKDefaultLog_log;
                              if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
                              {
                                LOWORD(v441.__begin_) = 0;
                                _os_log_impl(&dword_1A1780000, v259, OS_LOG_TYPE_ERROR, "C3M3 index out of bounds", (uint8_t *)&v441, 2u);
                              }
                            }
                            uint64_t v256 = v257;
                            if (!--v123) {
                              goto LABEL_512;
                            }
                          }
                        }
                        goto LABEL_512;
                      }
                      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                      }
                      long long v117 = (id)GEOGetVectorKitVKDefaultLog_log;
                      if (!os_log_type_enabled(v117, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_331;
                      }
                    }
LABEL_330:
                    LOWORD(v441.__begin_) = 0;
                    _os_log_impl(&dword_1A1780000, v117, OS_LOG_TYPE_ERROR, "C3M3 uncompressed mesh body data block too short", (uint8_t *)&v441, 2u);
LABEL_331:

                    double v8 = 1.0;
                    int v113 = 4;
LABEL_526:
                    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)__dst);
                    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v442);
                    goto LABEL_296;
                  }
                  buf.n128_u8[0] = 1;
                  goto LABEL_284;
                }
                if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                }
                long long v111 = (id)GEOGetVectorKitVKDefaultLog_log;
                if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                {
                  buf.n128_u16[0] = 0;
                  _os_log_impl(&dword_1A1780000, v111, OS_LOG_TYPE_ERROR, "C3M3 LZMA mesh decode failed", (uint8_t *)&buf, 2u);
                }
LABEL_261:

                int v113 = 4;
                goto LABEL_297;
              }
            }
          }
          return result;
        }
      case 3u:
        uint64_t v433 = v10 + 4;
        if (v10 + 4 > a3) {
          return 0;
        }
        LODWORD(v423) = *(_DWORD *)&a2[v10];
        if (!v423) {
          goto LABEL_811;
        }
        int v430 = 0;
        unsigned __int32 v34 = 0;
        unsigned __int32 v422 = 0;
        unsigned int __len = 0;
        LODWORD(v415) = 0;
        break;
      default:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        uint64_t v64 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          buf.n128_u32[0] = 67109120;
          buf.n128_u32[1] = v9;
          _os_log_impl(&dword_1A1780000, v64, OS_LOG_TYPE_ERROR, "C3M3 Unknown block type: %d", (uint8_t *)&buf, 8u);
        }

        uint64_t v433 = v10;
        goto LABEL_811;
    }
    do
    {
      double v35 = (char *)operator new(0x48uLL);
      *((void *)v35 + 1) = 0;
      *((void *)v35 + 2) = 0;
      *(void *)double v35 = &unk_1EF58A890;
      *(_OWORD *)(v35 + 40) = 0u;
      *(_OWORD *)(v35 + 56) = 0u;
      *(_OWORD *)(v35 + 24) = 0u;
      uint64_t v36 = (std::__shared_weak_count *)*((void *)a4 + 21);
      *((void *)a4 + 20) = v35 + 24;
      *((void *)a4 + 21) = v35;
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
      if (v433 + 1 > a3 || v433 + 3 > a3) {
        return 0;
      }
      if (a2[v433])
      {
        uint64_t v37 = *(unsigned __int16 *)&v425[v433 + 3];
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        double v38 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          buf.n128_u16[0] = 0;
          _os_log_impl(&dword_1A1780000, v38, OS_LOG_TYPE_ERROR, "Unknown SG type.", (uint8_t *)&buf, 2u);
        }

        if (v433 + v37 >= a3) {
          unint64_t v39 = a3;
        }
        else {
          unint64_t v39 = v433 + v37;
        }
        goto LABEL_51;
      }
      uint64_t v40 = v433 + 5;
      if (v433 + 5 > a3) {
        return 0;
      }
      if (*(_WORD *)&v425[v40])
      {
        if (v433 + 7 <= a3 && v433 + 7 + (unint64_t)*(unsigned __int16 *)&a2[v433 + 5] <= a3) {
          operator new[]();
        }
        return 0;
      }
      if (v433 + 7 > a3) {
        return 0;
      }
      unint64_t v39 = v433 + 7;
      int v41 = *(unsigned __int16 *)&a2[v40];
      if (*(_WORD *)&a2[v40])
      {
        unsigned int v42 = 0;
        int v421 = *(unsigned __int16 *)&a2[v40];
        while (1)
        {
          unint64_t v43 = v39;
          if (v39 + 1 <= a3)
          {
            unsigned __int32 v34 = a2[v39];
            unint64_t v43 = v39 + 1;
          }
          unint64_t v44 = v43 + 2;
          if (v43 + 2 <= a3)
          {
            unsigned __int32 v422 = *(unsigned __int16 *)&a2[v43];
            unint64_t v44 = v43 + 4;
          }
          if (v44 > a3) {
            return 0;
          }
          BOOL result = 0;
          if (v39 + 1 > a3 || v43 + 2 > a3) {
            return result;
          }
          std::vector<unsigned int>::size_type v45 = *(unsigned __int16 *)&v425[v44];
          memset(&v442, 0, sizeof(v442));
          unsigned __int32 v434 = v34;
          if (!v45)
          {
            unsigned int v426 = v42;
            __n128 v47 = 0;
            double v46 = 0;
            goto LABEL_72;
          }
          std::vector<unsigned int>::__append(&v442, v45);
          double v46 = v442.__begin_;
          __n128 v47 = (char *)v442.__end_;
          std::vector<unsigned int>::pointer v48 = v442.__begin_;
          if (v442.__begin_ == v442.__end_) {
            break;
          }
          while (1)
          {
            unint64_t v49 = v44 + 2;
            if (v44 + 2 > a3) {
              break;
            }
            *v48++ = *(unsigned __int16 *)&a2[v44];
            v44 += 2;
            if (v48 == (std::vector<unsigned int>::pointer)v47)
            {
              unsigned int v426 = v42;
              unint64_t v44 = v49;
              goto LABEL_72;
            }
          }
          int v51 = 1;
          unint64_t v39 = v44;
LABEL_105:
          if (v46)
          {
            v442.__end_ = v46;
            operator delete(v46);
          }
          if (v51) {
            return 0;
          }
          if (++v42 == v41) {
            goto LABEL_51;
          }
        }
        unsigned int v426 = v42;
        __n128 v47 = (char *)v442.__begin_;
LABEL_72:
        unint64_t v50 = v44 + 2;
        if (v44 + 2 > a3)
        {
          int v51 = 1;
          unint64_t v39 = v44;
LABEL_104:
          unsigned __int32 v34 = v434;
          unsigned int v42 = v426;
          goto LABEL_105;
        }
        std::vector<unsigned int>::size_type v52 = *(unsigned __int16 *)&a2[v44];
        memset(&v441, 0, sizeof(v441));
        if (v52)
        {
          std::vector<unsigned int>::__append(&v441, v52);
          double v53 = (char *)v441.__begin_;
          unint64_t v54 = (char *)v441.__end_;
          std::vector<unsigned int>::pointer v55 = v441.__begin_;
          unint64_t v56 = v39;
          if (v441.__begin_ != v441.__end_)
          {
            while (v50 + 2 <= a3)
            {
              *v55++ = *(unsigned __int16 *)&a2[v50];
              v50 += 2;
              if (v55 == (std::vector<unsigned int>::pointer)v54) {
                goto LABEL_82;
              }
            }
            int v51 = 1;
            goto LABEL_101;
          }
          unint64_t v54 = (char *)v441.__begin_;
        }
        else
        {
          unint64_t v54 = 0;
          double v53 = 0;
          unint64_t v56 = v39;
        }
LABEL_82:
        switch(v434)
        {
          case 0u:
            uint64_t v57 = (char *)operator new(0x50uLL);
            *((void *)v57 + 1) = 0;
            *((void *)v57 + 2) = 0;
            *(void *)uint64_t v57 = &unk_1EF58A9E0;
            *(_OWORD *)(v57 + 40) = 0u;
            *(_OWORD *)(v57 + 56) = 0u;
            *(_OWORD *)(v57 + 24) = 0u;
            *((void *)v57 + 9) = 0;
            buf.n128_u64[0] = (unint64_t)(v57 + 24);
            buf.n128_u64[1] = (unint64_t)v57;
            std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)v57 + 4, (char *)v46, v47, (v47 - (char *)v46) >> 2);
            std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(buf.n128_u64[0] + 32), v53, v54, (v54 - v53) >> 2);
            karo::media::C3mSceneGraph::push_back(*((void *)a4 + 20), &buf);
            std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&buf);
            break;
          case 1u:
            operator new();
          case 2u:
            operator new();
          case 3u:
            operator new();
          case 4u:
            operator new();
          case 5u:
            operator new();
          case 6u:
            operator new();
          case 7u:
            operator new();
          case 8u:
            operator new();
          default:
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
            }
            unint64_t v58 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            {
              buf.n128_u32[0] = 67109376;
              buf.n128_u32[1] = v434;
              buf.n128_u16[4] = 1024;
              *(unsigned __int32 *)((char *)&buf.n128_u32[2] + 2) = v422;
              _os_log_impl(&dword_1A1780000, v58, OS_LOG_TYPE_ERROR, "Unknown node type; %d size: %d",
                (uint8_t *)&buf,
                0xEu);
            }

            unint64_t v56 = v39;
            break;
        }
        int v51 = 0;
        unint64_t v59 = v56 + v422;
        if (a3 < v59) {
          unint64_t v59 = a3;
        }
        unint64_t v50 = v59;
LABEL_101:
        int v41 = v421;
        if (v441.__begin_) {
          operator delete(v441.__begin_);
        }
        double v46 = v442.__begin_;
        unint64_t v39 = v50;
        double v8 = 1.0;
        goto LABEL_104;
      }
LABEL_51:
      uint64_t v433 = v39;
      ++v430;
    }
    while (v430 != v423);
LABEL_811:
    BOOL result = v429 + 1 >= v427;
    if (v429 + 1 < v427)
    {
      ++v429;
      if (v433 + 1 <= a3) {
        continue;
      }
    }
    return result;
  }
}

void sub_1A21F48C4(_Unwind_Exception *a1)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&STACK[0x300]);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x350]);
  karo::media::C3mMesh::~C3mMesh((karo::media::C3mMesh *)&STACK[0x370]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A21F4AE4(_Unwind_Exception *exception_object)
{
}

void std::vector<karo::media::C3bMaterial>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  BOOL v4 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    __int16 v6 = *a1;
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x492492492492492) {
      abort();
    }
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x249249249249249) {
      unint64_t v10 = 0x492492492492492;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x492492492492492) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned __int32 v11 = (char *)operator new(56 * v10);
    }
    else
    {
      unsigned __int32 v11 = 0;
    }
    double v13 = &v11[56 * v7];
    double v14 = &v11[56 * v10];
    size_t v15 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v13, v15);
    double v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (!v5) {
        return;
      }
      goto LABEL_21;
    }
    uint64_t v17 = 0;
    do
    {
      double v18 = &v13[v17];
      double v19 = &v5[v17];
      *(v18 - 56) = v5[v17 - 56];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((_OWORD *)v18 - 3) = *(_OWORD *)&v5[v17 - 48];
      *((void *)v18 - 4) = *(void *)&v5[v17 - 32];
      *((void *)v19 - 6) = 0;
      *((void *)v19 - 5) = 0;
      *((void *)v19 - 4) = 0;
      *((void *)v18 - 2) = 0;
      *((void *)v18 - 1) = 0;
      *(_OWORD *)(v18 - 24) = *(_OWORD *)&v5[v17 - 24];
      *((void *)v18 - 1) = *(void *)&v5[v17 - 8];
      *((void *)v19 - 3) = 0;
      *((void *)v19 - 2) = 0;
      *((void *)v19 - 1) = 0;
      v17 -= 56;
    }
    while (&v5[v17] != v6);
    uint64_t v5 = *a1;
    double v20 = a1[1];
    *a1 = &v13[v17];
    a1[1] = v16;
    a1[2] = v14;
    while (v20 != v5)
    {
      v20 -= 56;
      std::__destroy_at[abi:nn180100]<karo::media::C3bMaterial,0>(v20);
    }
    if (v5)
    {
LABEL_21:
      operator delete(v5);
    }
  }
}

void std::__destroy_at[abi:nn180100]<karo::media::C3bMaterial,0>(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = a1[5];
    BOOL v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      BOOL v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[1];
  if (v5)
  {
    uint64_t v6 = a1[2];
    uint64_t v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
      {
        unint64_t v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
}

std::string *std::vector<std::string>::push_back[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    BOOL result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    BOOL result = (std::string *)(v3 + 24);
    *(void *)(a1 + 8) = v3 + 24;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1A21F4FA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::lzma_decompress(_anonymous_namespace_ *this, unsigned __int8 *a2, unsigned char *a3, const unsigned __int8 *a4, char a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  if (lzma_auto_decoder())
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unint64_t v10 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_ERROR, "Failed to intialize the lzma decoder.", buf, 2u);
    }

    return 0;
  }
  else
  {
    if (a5)
    {
      size_t v12 = a3;
    }
    else
    {
      size_t v12 = a3 - 8;
      *(_OWORD *)__n128 buf = *(_OWORD *)(a3 - 8);
      *(a3 - 8) = *a3;
      *(void *)(a3 - 3) = -1;
      *(_DWORD *)(a3 - 7) = 0x100000;
      a4 += 8;
    }
    *(void *)&long long v17 = v12;
    *((void *)&v17 + 1) = a4;
    *((void *)&v18 + 1) = this;
    *(void *)&long long v19 = a2;
    int v13 = lzma_code();
    BOOL v11 = v13 == 0;
    if (v13)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      double v14 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)double v16 = 0;
        _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_ERROR, "Failed to decode lzma data.", v16, 2u);
      }
    }
    lzma_end();
    if ((a5 & 1) == 0) {
      *(_OWORD *)(a3 - 8) = *(_OWORD *)buf;
    }
  }
  return v11;
}

double _ZNSt3__111make_sharedB8nn180100IN4karo5media5ImageEJEvEENS_10shared_ptrIT_EEDpOT0_(void *a1)
{
  uint64_t v2 = operator new(0x88uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_1EF58A938;
  v2[3] = &unk_1EF568050;
  v2[4] = 0;
  *((_DWORD *)v2 + 10) = 29;
  *((unsigned char *)v2 + 44) = 0;
  double result = 0.0;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((unsigned char *)v2 + 128) = 0;
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

uint64_t **std::map<karo::media::C3bMaterialClass,std::vector<std::shared_ptr<karo::media::Image>>>::operator[](uint64_t **a1, int a2)
{
  uint64_t v5 = a1 + 1;
  long long v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2) {
          break;
        }
        long long v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      long long v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_8:
    unint64_t v8 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v6 + 8) = a2;
    v6[6] = 0;
    v6[7] = 0;
    v6[5] = 0;
    char *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    char *v5 = (uint64_t *)v6;
    unint64_t v9 = (uint64_t *)**a1;
    unint64_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      unint64_t v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

__n128 *std::vector<std::shared_ptr<karo::media::Image>>::push_back[abi:nn180100](uint64_t a1, __n128 *a2)
{
  unint64_t v3 = *(__n128 **)(a1 + 8);
  if ((unint64_t)v3 >= *(void *)(a1 + 16))
  {
    double result = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>(a1, *a2);
  }
  else
  {
    unint64_t v4 = a2->n128_u64[1];
    v3->n128_u64[0] = a2->n128_u64[0];
    v3->n128_u64[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    double result = v3 + 1;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void std::vector<karo::media::C3bMaterial::C3bMaterialImage>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *(void *)a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<karo::media::C3bMaterial::C3bMaterialImage>::__append((char **)a1, v6);
  }
  else if (!v5)
  {
    for (uint64_t i = *(void *)a1 + 24 * a2; v3 != i; v3 -= 24)
    {
      unint64_t v8 = *(std::__shared_weak_count **)(v3 - 8);
      if (v8)
      {
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    *(void *)(a1 + 8) = i;
  }
}

uint64_t karo::media::C3bMaterial::C3bMaterialImage::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

ggl::Data *std::make_shared[abi:nn180100]<ggl::Data,unsigned char const*&,unsigned int const&,void>(ggl::Data **a1, const unsigned __int8 *a2, unsigned int a3)
{
  unint64_t v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EF588E18;
  double result = ggl::Data::Data((ggl::Data *)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (ggl::Data *)v6;
  return result;
}

void karo::media::Image::setSourceJpegData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void karo::media::Image::setSourceHeifData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void karo::media::Image::setSourceH264Parameters(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)a1[10];
  a1[9] = a2;
  a1[10] = a3;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v8 = *a4;
    uint64_t v7 = a4[1];
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  if (v7) {
LABEL_6:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
LABEL_7:
  unint64_t v9 = (std::__shared_weak_count *)a1[12];
  a1[11] = v8;
  a1[12] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void karo::media::Image::setSourceH264Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::vector<karo::media::C3bMaterial::C3bMaterialImage>::__append(char **a1, unint64_t a2)
{
  BOOL v5 = a1[1];
  unint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      BOOL v11 = (char *)operator new(24 * v10);
    }
    else
    {
      BOOL v11 = 0;
    }
    int v13 = &v11[24 * v7];
    double v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    double v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
    }
    else
    {
      do
      {
        int v17 = *((_DWORD *)v5 - 6);
        v5 -= 24;
        *((_DWORD *)v13 - 6) = v17;
        v13 -= 24;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)(v5 + 8);
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = 0;
      }
      while (v5 != v6);
      BOOL v5 = *a1;
      long long v18 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      for (a1[2] = v14; v18 != v5; v18 -= 24)
      {
        long long v19 = (std::__shared_weak_count *)*((void *)v18 - 1);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<karo::media::C3mMesh>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  unint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v5 = 120 * a2;
  unint64_t v6 = (char *)operator new(120 * a2);
  unint64_t v7 = &v6[v5];
  unint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_8;
  }
  uint64_t v9 = 0;
  do
  {
    unint64_t v10 = &v8[v9];
    BOOL v11 = &v4[v9];
    *((void *)v10 - 15) = *(void *)&v4[v9 - 120];
    long long v12 = *(_OWORD *)&v4[v9 - 112];
    *((void *)v10 - 12) = *(void *)&v4[v9 - 96];
    *((_OWORD *)v10 - 7) = v12;
    *((void *)v11 - 13) = 0;
    *((void *)v11 - 12) = 0;
    *((void *)v11 - 14) = 0;
    *((_DWORD *)v10 - 22) = *(_DWORD *)&v4[v9 - 88];
    *((_OWORD *)v10 - 5) = *(_OWORD *)&v4[v9 - 80];
    *((void *)v11 - 10) = 0;
    *((void *)v11 - 9) = 0;
    *((_DWORD *)v10 - 16) = *(_DWORD *)&v4[v9 - 64];
    *(_OWORD *)(v10 - 56) = *(_OWORD *)&v4[v9 - 56];
    *((void *)v11 - 7) = 0;
    *((void *)v11 - 6) = 0;
    *(_OWORD *)(v10 - 40) = *(_OWORD *)&v4[v9 - 40];
    *((void *)v10 - 3) = *(void *)&v4[v9 - 24];
    *((void *)v11 - 5) = 0;
    *((void *)v11 - 4) = 0;
    *((void *)v11 - 3) = 0;
    *((_OWORD *)v10 - 1) = *(_OWORD *)&v4[v9 - 16];
    v9 -= 120;
  }
  while (&v4[v9] != v2);
  uint64_t v2 = *(unsigned char **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = &v8[v9];
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  while ((unsigned char *)v13 != v2)
  {
    v13 -= 120;
    std::__destroy_at[abi:nn180100]<karo::media::C3mMesh,0>(v13);
  }
  if (v2)
  {
LABEL_8:
    operator delete(v2);
  }
}

uint64_t std::make_shared[abi:nn180100]<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>,char const(&)[10],unsigned short const&,ggl::BufferUsage,void>(uint64_t *a1, unsigned __int16 a2, char a3)
{
  unint64_t v6 = operator new(0xF8uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EF5844D0;
  uint64_t result = ggl::BufferData::BufferData((uint64_t)(v6 + 3), 32, 0, 0, a3, a2);
  v6[29] = "C3B VData";
  v6[30] = &ggl::CommonMesh::bufferPos4UVReflection;
  v6[3] = &unk_1EF55C048;
  v6[28] = &unk_1EF55C068;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

uint64_t *ggl::DataWrite<ggl::CommonMesh::BufferPos4UV>::DataWrite(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  a1[5] = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  __int16 v19 = 1;
  uint64_t v15 = 0;
  uint64_t v16 = a2;
  uint64_t v17 = v6 * a3;
  uint64_t v18 = v6 * a4;
  if (v6 * a4 != v6 * a3) {
    uint64_t v5 = *(void *)(a2 + 72) + v6 * a3;
  }
  uint64_t v20 = v5;
  ggl::BufferMemory::operator=(a1, (uint64_t)&v15);
  if (v20)
  {
    unint64_t v8 = v17;
    unint64_t v7 = v18;
    if (v18 != v17)
    {
      uint64_t v9 = (void *)v16;
      int v10 = v19;
      int v11 = HIBYTE(v19);
      if (v15 && *(unsigned char *)(v16 + 17) != 2) {
        (*(void (**)(void))(*(void *)v15 + 64))();
      }
      if (v10 && !v11)
      {
        unint64_t v13 = v9[7];
        unint64_t v12 = v9[8];
        if (v12 == v13) {
          unint64_t v13 = v9[10] - v9[9];
        }
        if (v8 < v13) {
          unint64_t v13 = v8;
        }
        if (v12 <= v7) {
          unint64_t v12 = v7;
        }
        if (v12 == v13) {
          unint64_t v12 = v13 + v9[10] - v9[9];
        }
        v9[7] = v13;
        v9[8] = v12;
      }
    }
  }
  return a1;
}

void std::vector<unsigned short>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 1) {
    return;
  }
  unint64_t v4 = *(unsigned char **)(a1 + 8);
  uint64_t v5 = 2 * a2;
  uint64_t v6 = (char *)operator new(2 * a2);
  uint64_t v7 = v4 - v2;
  unint64_t v8 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFFELL];
  uint64_t v9 = v8;
  if (v4 != v2)
  {
    if ((unint64_t)(v7 - 2) < 0x1E)
    {
      uint64_t v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFFELL];
      do
      {
LABEL_9:
        __int16 v16 = *((_WORD *)v4 - 1);
        v4 -= 2;
        *((_WORD *)v9 - 1) = v16;
        v9 -= 2;
      }
      while (v4 != v2);
      goto LABEL_10;
    }
    uint64_t v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFFELL];
    if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
      goto LABEL_9;
    }
    uint64_t v10 = v7 >> 1;
    unint64_t v11 = ((unint64_t)(v7 - 2) >> 1) + 1;
    unint64_t v12 = &v6[2 * v10 - 16];
    unint64_t v13 = (long long *)(v4 - 16);
    unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v15 = *v13;
      *((_OWORD *)v12 - 1) = *(v13 - 1);
      *(_OWORD *)unint64_t v12 = v15;
      v12 -= 32;
      v13 -= 2;
      v14 -= 16;
    }
    while (v14);
    uint64_t v9 = &v8[-2 * (v11 & 0xFFFFFFFFFFFFFFF0)];
    v4 -= 2 * (v11 & 0xFFFFFFFFFFFFFFF0);
    if (v11 != (v11 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_9;
    }
  }
LABEL_10:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = &v6[v5];
  if (v2)
  {
    operator delete(v2);
  }
}

void std::vector<unsigned short>::push_back[abi:nn180100](uint64_t a1, __int16 a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    if (v9 <= -3) {
      abort();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = v4 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 < 0) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v14 = operator new(2 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    long long v15 = &v14[2 * v10];
    __int16 v16 = &v14[2 * v13];
    *long long v15 = a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v17 = v5 - v8 - 2;
      if (v17 < 0x1E) {
        goto LABEL_28;
      }
      if (v5 - v14 - (v9 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v18 = (v17 >> 1) + 1;
      uint64_t v6 = &v5[-2 * (v18 & 0xFFFFFFFFFFFFFFF0)];
      __int16 v19 = &v14[2 * v10 - 16];
      uint64_t v20 = v5 - 16;
      unint64_t v21 = v18 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *__int16 v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 16;
      }
      while (v21);
      v15 -= v18 & 0xFFFFFFFFFFFFFFF0;
      if (v18 != (v18 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_28:
        do
        {
          __int16 v23 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *--long long v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_WORD *)uint64_t v5 = a2;
    uint64_t v7 = v5 + 2;
  }
  *(void *)(a1 + 8) = v7;
}

void anonymous namespace'::computeCenterPoint(uint64_t a1, unsigned __int16 **a2)
{
  if (a1)
  {
    uint64_t v4 = **(void **)(a1 + 216);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      char v6 = 0;
      uint64_t v7 = *(const char ***)(v4 + 8);
      do
      {
        unint64_t v8 = *v7;
        v7 += 4;
        v6 |= strcmp(v8, "a_position") == 0;
        --v5;
      }
      while (v5);
    }
    else
    {
      char v6 = 0;
    }
    uint64_t v9 = a2[1];
    uint64_t v10 = (char *)v9 - (char *)*a2;
    if ((v6 & 1) != 0 && v9 != *a2)
    {
      unint64_t v11 = *(void *)(a1 + 8);
      unint64_t v12 = (*(void *)(a1 + 48) - *(void *)(a1 + 40)) / v11;
      if (v12 <= **a2)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        long long v15 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_29;
        }
        *(_WORD *)__n128 buf = 0;
      }
      else
      {
        unint64_t v13 = v11 * v12;
        if ((*(unsigned char *)(a1 + 16) & 2) == 0
          && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
        {
          *(void *)__n128 buf = &v25;
          double v26 = buf;
          std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v26, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
        }
        if (v13) {
          uint64_t v14 = *(void *)(a1 + 72);
        }
        else {
          uint64_t v14 = 0;
        }
        unint64_t v16 = 0;
        float32x2_t v17 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        float32x2_t v18 = (float32x2_t)0x80000000800000;
        unsigned int v19 = 1;
        float v20 = 3.4028e38;
        float v21 = -3.4028e38;
        while (1)
        {
          unint64_t v22 = (*a2)[v16];
          if (v12 <= v22) {
            break;
          }
          __int16 v23 = (float32x2_t *)(v14 + 32 * v22);
          float v24 = v23[1].f32[0];
          float32x2_t v17 = vminnm_f32(*v23, v17);
          float32x2_t v18 = vmaxnm_f32(v18, *v23);
          float v20 = fminf(v24, v20);
          float v21 = fmaxf(v21, v24);
          unint64_t v16 = v19++;
          if (v10 >> 1 <= v16) {
            return;
          }
        }
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        long long v15 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_29;
        }
        *(_WORD *)__n128 buf = 0;
      }
      _os_log_impl(&dword_1A1780000, v15, OS_LOG_TYPE_ERROR, "Index pointing outside vertex buffer", buf, 2u);
LABEL_29:
    }
  }
}

char *std::vector<karo::media::C3mMesh>::push_back[abi:nn180100](uint64_t a1, const karo::media::C3mMesh *a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = std::vector<karo::media::C3mMesh>::__push_back_slow_path<karo::media::C3mMesh const&>((karo::media::C3mMesh **)a1, a2);
  }
  else
  {
    karo::media::C3mMesh::C3mMesh(*(karo::media::C3mMesh **)(a1 + 8), a2);
    uint64_t result = (char *)(v3 + 120);
    *(void *)(a1 + 8) = v3 + 120;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_1A21F6290(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void karo::media::C3mMesh::~C3mMesh(karo::media::C3mMesh *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgStaticTransform,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1A21F63E0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    unint64_t v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    MEMORY[0x1A6239270](v1, 0x1010C4063343E98);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<karo::media::C3mSgKeyFrame<float>>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 4;
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    float32x2_t v17 = &v4[16 * a2];
    goto LABEL_19;
  }
  uint64_t v7 = a1[2];
  if (v6 <= (v7 - v3) >> 4)
  {
    bzero(a1[1], 16 * v6);
    float32x2_t v17 = &v3[16 * v6];
LABEL_19:
    a1[1] = v17;
    return;
  }
  if (a2 >> 60) {
    abort();
  }
  uint64_t v8 = v7 - v4;
  uint64_t v9 = v8 >> 3;
  if (v8 >> 3 <= a2) {
    uint64_t v9 = a2;
  }
  BOOL v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  if (!v10) {
    unint64_t v11 = v9;
  }
  if (v11 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v12 = 16 * v11;
  unint64_t v13 = (char *)operator new(16 * v11);
  uint64_t v14 = &v13[16 * v5];
  long long v15 = &v13[v12];
  bzero(v14, 16 * v6);
  unint64_t v16 = &v14[16 * v6];
  if (v3 != v4)
  {
    do
    {
      *((_OWORD *)v14 - 1) = *((_OWORD *)v3 - 1);
      v14 -= 16;
      v3 -= 16;
    }
    while (v3 != v4);
    unint64_t v3 = *a1;
  }
  *a1 = v14;
  a1[1] = v16;
  a1[2] = v15;
  if (v3)
  {
    operator delete(v3);
  }
}

void std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgFixedAxisRotationAnimation,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1A21F65D0(_Unwind_Exception *exception_object)
{
  if (!v1) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
  unint64_t v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
    uint64_t v4 = (void *)v1[4];
    if (!v4)
    {
LABEL_4:
      unint64_t v5 = (void *)v1[1];
      if (!v5)
      {
LABEL_6:
        MEMORY[0x1A6239270](v1, 0x1030C405CC62CCBLL);
        goto LABEL_7;
      }
LABEL_5:
      v1[2] = v5;
      operator delete(v5);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = (void *)v1[4];
    if (!v4) {
      goto LABEL_4;
    }
  }
  v1[5] = v4;
  operator delete(v4);
  unint64_t v5 = (void *)v1[1];
  if (!v5) {
    goto LABEL_6;
  }
  goto LABEL_5;
}

void std::vector<karo::media::C3mSgKeyFrame<karo::media::TRS>>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    unint64_t v22 = &v4[96 * a2];
    goto LABEL_23;
  }
  uint64_t v8 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v5) >> 5) >= v7)
  {
    unint64_t v22 = &v5[96 * v7];
    do
    {
      *((_OWORD *)v5 + 4) = 0uLL;
      *((_OWORD *)v5 + 5) = 0uLL;
      *((_OWORD *)v5 + 2) = 0uLL;
      *((_OWORD *)v5 + 3) = 0uLL;
      *(_OWORD *)unint64_t v5 = 0uLL;
      *((_OWORD *)v5 + 1) = 0uLL;
      *((void *)v5 + 8) = 0x3FF0000000000000;
      v5 += 96;
    }
    while (v5 != v22);
LABEL_23:
    a1[1] = v22;
    return;
  }
  if (a2 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 5);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x155555555555555) {
    unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 > 0x2AAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v12 = (char *)operator new(96 * v11);
  unint64_t v13 = &v12[96 * v6];
  uint64_t v14 = &v12[96 * a2];
  long long v15 = v13;
  do
  {
    *((_OWORD *)v15 + 4) = 0uLL;
    *((_OWORD *)v15 + 5) = 0uLL;
    *((_OWORD *)v15 + 2) = 0uLL;
    *((_OWORD *)v15 + 3) = 0uLL;
    *(_OWORD *)long long v15 = 0uLL;
    *((_OWORD *)v15 + 1) = 0uLL;
    *((void *)v15 + 8) = 0x3FF0000000000000;
    v15 += 96;
  }
  while (v15 != v14);
  unint64_t v16 = *a1;
  if (v5 != *a1)
  {
    do
    {
      uint64_t v17 = *((void *)v5 - 12);
      v5 -= 96;
      char v18 = v5[8];
      *((void *)v13 - 12) = v17;
      v13 -= 96;
      v13[8] = v18;
      long long v19 = *((_OWORD *)v5 + 1);
      *((void *)v13 + 4) = *((void *)v5 + 4);
      *((_OWORD *)v13 + 1) = v19;
      long long v20 = *(_OWORD *)(v5 + 40);
      *((void *)v13 + 7) = *((void *)v5 + 7);
      *(_OWORD *)(v13 + 40) = v20;
      *((void *)v13 + 8) = *((void *)v5 + 8);
      long long v21 = *(_OWORD *)(v5 + 72);
      *((void *)v13 + 11) = *((void *)v5 + 11);
      *(_OWORD *)(v13 + 72) = v21;
    }
    while (v5 != v16);
    unint64_t v5 = *a1;
  }
  *a1 = v13;
  a1[1] = v14;
  a1[2] = &v12[96 * v11];
  if (v5)
  {
    operator delete(v5);
  }
}

double *gm::quaternionFromRotationMatrix<double>(double *result, double *a2)
{
  double v2 = *a2;
  double v3 = a2[4];
  double v4 = v3 + *a2;
  double v5 = a2[8];
  if (v4 + v5 <= 0.0)
  {
    if (v2 > v3)
    {
      BOOL v11 = v2 == v5;
      BOOL v12 = v2 < v5;
    }
    else
    {
      BOOL v11 = 1;
      BOOL v12 = 0;
    }
    if (v12 || v11)
    {
      if (v3 <= v5)
      {
        double v18 = sqrt(v5 + 1.0 - v4);
        double v19 = 1.0 / (v18 + v18);
        double v7 = (a2[2] + a2[6]) * v19;
        double v8 = (a2[5] + a2[7]) * v19;
        double v9 = v18 * 0.5;
        double v10 = (a2[1] - a2[3]) * v19;
      }
      else
      {
        double v13 = sqrt(v3 + 1.0 - (v2 + v5));
        double v14 = 1.0 / (v13 + v13);
        double v8 = v13 * 0.5;
        double v7 = (a2[1] + a2[3]) * v14;
        double v9 = (a2[5] + a2[7]) * v14;
        double v10 = (a2[6] - a2[2]) * v14;
      }
    }
    else
    {
      double v15 = sqrt(v2 + 1.0 - (v3 + v5));
      double v16 = v15 + v15;
      double v7 = v15 * 0.5;
      double v17 = 1.0 / v16;
      double v8 = (a2[1] + a2[3]) * (1.0 / v16);
      double v9 = (a2[2] + a2[6]) * v17;
      double v10 = (a2[5] - a2[7]) * v17;
    }
  }
  else
  {
    double v6 = 0.5 / sqrt(v4 + v5 + 1.0);
    double v7 = (a2[5] - a2[7]) * v6;
    double v8 = (a2[6] - a2[2]) * v6;
    double v9 = (a2[1] - a2[3]) * v6;
    double v10 = 0.25 / v6;
  }
  *uint64_t result = v7;
  result[1] = v8;
  result[2] = v9;
  result[3] = v10;
  return result;
}

void std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgAnimation<karo::media::TRS>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1A21F69EC(_Unwind_Exception *exception_object)
{
  if (!v1) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
  double v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
    double v4 = (void *)v1[4];
    if (!v4)
    {
LABEL_4:
      double v5 = (void *)v1[1];
      if (!v5)
      {
LABEL_6:
        MEMORY[0x1A6239270](v1, 0x1030C403E587085);
        goto LABEL_7;
      }
LABEL_5:
      v1[2] = v5;
      operator delete(v5);
      goto LABEL_6;
    }
  }
  else
  {
    double v4 = (void *)v1[4];
    if (!v4) {
      goto LABEL_4;
    }
  }
  v1[5] = v4;
  operator delete(v4);
  double v5 = (void *)v1[1];
  if (!v5) {
    goto LABEL_6;
  }
  goto LABEL_5;
}

void std::vector<karo::media::C3mSgKeyFrame<gm::Matrix<float,4,1>>>::resize(char **a1, unint64_t a2)
{
  double v4 = *a1;
  double v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 5;
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    double v18 = &v4[32 * a2];
    goto LABEL_19;
  }
  double v7 = a1[2];
  if (v6 <= (v7 - v3) >> 5)
  {
    bzero(a1[1], 32 * v6);
    double v18 = &v3[32 * v6];
LABEL_19:
    a1[1] = v18;
    return;
  }
  if (a2 >> 59) {
    abort();
  }
  uint64_t v8 = v7 - v4;
  uint64_t v9 = v8 >> 4;
  if (v8 >> 4 <= a2) {
    uint64_t v9 = a2;
  }
  BOOL v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  if (!v10) {
    unint64_t v11 = v9;
  }
  if (v11 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v12 = 32 * v11;
  double v13 = (char *)operator new(32 * v11);
  double v14 = &v13[32 * v5];
  double v15 = &v13[v12];
  bzero(v14, 32 * v6);
  double v16 = &v14[32 * v6];
  if (v3 != v4)
  {
    do
    {
      long long v17 = *((_OWORD *)v3 - 1);
      *((_OWORD *)v14 - 2) = *((_OWORD *)v3 - 2);
      *((_OWORD *)v14 - 1) = v17;
      v14 -= 32;
      v3 -= 32;
    }
    while (v3 != v4);
    double v3 = *a1;
  }
  *a1 = v14;
  a1[1] = v16;
  a1[2] = v15;
  if (v3)
  {
    operator delete(v3);
  }
}

void std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgRotationAnimation,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1A21F6BFC(_Unwind_Exception *exception_object)
{
  if (!v1) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
  double v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
    double v4 = (void *)v1[4];
    if (!v4)
    {
LABEL_4:
      unint64_t v5 = (void *)v1[1];
      if (!v5)
      {
LABEL_6:
        MEMORY[0x1A6239270](v1, 0x1030C408C02A2B9);
        goto LABEL_7;
      }
LABEL_5:
      v1[2] = v5;
      operator delete(v5);
      goto LABEL_6;
    }
  }
  else
  {
    double v4 = (void *)v1[4];
    if (!v4) {
      goto LABEL_4;
    }
  }
  v1[5] = v4;
  operator delete(v4);
  unint64_t v5 = (void *)v1[1];
  if (!v5) {
    goto LABEL_6;
  }
  goto LABEL_5;
}

void std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgAnimation<BOOL>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1A21F6CD0(_Unwind_Exception *exception_object)
{
  if (!v1) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
  double v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
    double v4 = (void *)v1[4];
    if (!v4)
    {
LABEL_4:
      unint64_t v5 = (void *)v1[1];
      if (!v5)
      {
LABEL_6:
        MEMORY[0x1A6239270](v1, 0x1030C403E587085);
        goto LABEL_7;
      }
LABEL_5:
      v1[2] = v5;
      operator delete(v5);
      goto LABEL_6;
    }
  }
  else
  {
    double v4 = (void *)v1[4];
    if (!v4) {
      goto LABEL_4;
    }
  }
  v1[5] = v4;
  operator delete(v4);
  unint64_t v5 = (void *)v1[1];
  if (!v5) {
    goto LABEL_6;
  }
  goto LABEL_5;
}

void std::vector<karo::media::C3mSgKeyFrame<gm::Matrix<float,3,1>>>::resize(char **a1, unint64_t a2)
{
  double v4 = *a1;
  double v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    long long v17 = &v4[24 * a2];
    goto LABEL_20;
  }
  double v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
  {
    bzero(a1[1], 24 * ((24 * v6 - 24) / 0x18) + 24);
    long long v17 = &v3[24 * ((24 * v6 - 24) / 0x18) + 24];
LABEL_20:
    a1[1] = v17;
    return;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= a2) {
    uint64_t v9 = a2;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v11 = 24 * v10;
  uint64_t v12 = (char *)operator new(24 * v10);
  double v13 = &v12[24 * v5];
  double v14 = &v12[v11];
  bzero(v13, 24 * ((24 * v6 - 24) / 0x18) + 24);
  double v15 = &v13[24 * ((24 * v6 - 24) / 0x18) + 24];
  if (v3 != v4)
  {
    do
    {
      long long v16 = *(_OWORD *)(v3 - 24);
      *((void *)v13 - 1) = *((void *)v3 - 1);
      *(_OWORD *)(v13 - 24) = v16;
      v13 -= 24;
      v3 -= 24;
    }
    while (v3 != v4);
    double v3 = *a1;
  }
  *a1 = v13;
  a1[1] = v15;
  a1[2] = v14;
  if (v3)
  {
    operator delete(v3);
  }
}

void std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1A21F6F58(_Unwind_Exception *exception_object)
{
  if (!v1) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
  double v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
    double v4 = (void *)v1[4];
    if (!v4)
    {
LABEL_4:
      unint64_t v5 = (void *)v1[1];
      if (!v5)
      {
LABEL_6:
        MEMORY[0x1A6239270](v1, 0x1030C403E587085);
        goto LABEL_7;
      }
LABEL_5:
      v1[2] = v5;
      operator delete(v5);
      goto LABEL_6;
    }
  }
  else
  {
    double v4 = (void *)v1[4];
    if (!v4) {
      goto LABEL_4;
    }
  }
  v1[5] = v4;
  operator delete(v4);
  unint64_t v5 = (void *)v1[1];
  if (!v5) {
    goto LABEL_6;
  }
  goto LABEL_5;
}

void std::shared_ptr<karo::media::C3mSgNode>::shared_ptr[abi:nn180100]<karo::media::C3mSgExternalObjectPlaceHolder,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1A21F702C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    double v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    double v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    MEMORY[0x1A6239270](v1, 0x1010C402432A8EBLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgExternalObjectPlaceHolder *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgExternalObjectPlaceHolder>,std::allocator<karo::media::C3mSgExternalObjectPlaceHolder>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 24);
  if (v1)
  {
    double v2 = (void *)v1[4];
    if (v2)
    {
      v1[5] = v2;
      operator delete(v2);
    }
    double v3 = (void *)v1[1];
    if (v3)
    {
      v1[2] = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgExternalObjectPlaceHolder *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgExternalObjectPlaceHolder>,std::allocator<karo::media::C3mSgExternalObjectPlaceHolder>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>>,std::allocator<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 24);
  if (v1)
  {
    double v2 = (void *)v1[11];
    if (v2)
    {
      v1[12] = v2;
      operator delete(v2);
    }
    double v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    double v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>>,std::allocator<karo::media::C3mSgAnimation<gm::Matrix<float,3,1>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgAnimation<BOOL> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<BOOL>>,std::allocator<karo::media::C3mSgAnimation<BOOL>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 24);
  if (v1)
  {
    double v2 = (void *)v1[11];
    if (v2)
    {
      v1[12] = v2;
      operator delete(v2);
    }
    double v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    double v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgAnimation<BOOL> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<BOOL>>,std::allocator<karo::media::C3mSgAnimation<BOOL>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgRotationAnimation *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgRotationAnimation>,std::allocator<karo::media::C3mSgRotationAnimation>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 24);
  if (v1)
  {
    double v2 = (void *)v1[11];
    if (v2)
    {
      v1[12] = v2;
      operator delete(v2);
    }
    double v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    double v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgRotationAnimation *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgRotationAnimation>,std::allocator<karo::media::C3mSgRotationAnimation>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgAnimation<karo::media::TRS> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<karo::media::TRS>>,std::allocator<karo::media::C3mSgAnimation<karo::media::TRS>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 24);
  if (v1)
  {
    double v2 = (void *)v1[11];
    if (v2)
    {
      v1[12] = v2;
      operator delete(v2);
    }
    double v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    double v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgAnimation<karo::media::TRS> *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgAnimation<karo::media::TRS>>,std::allocator<karo::media::C3mSgAnimation<karo::media::TRS>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgFixedAxisRotationAnimation *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgFixedAxisRotationAnimation>,std::allocator<karo::media::C3mSgFixedAxisRotationAnimation>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 24);
  if (v1)
  {
    double v2 = (void *)v1[11];
    if (v2)
    {
      v1[12] = v2;
      operator delete(v2);
    }
    double v3 = (void *)v1[4];
    if (v3)
    {
      v1[5] = v3;
      operator delete(v3);
    }
    double v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgFixedAxisRotationAnimation *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgFixedAxisRotationAnimation>,std::allocator<karo::media::C3mSgFixedAxisRotationAnimation>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<karo::media::C3mSgStaticTransform *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgStaticTransform>,std::allocator<karo::media::C3mSgStaticTransform>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 24);
  if (v1)
  {
    double v2 = (void *)v1[4];
    if (v2)
    {
      v1[5] = v2;
      operator delete(v2);
    }
    double v3 = (void *)v1[1];
    if (v3)
    {
      v1[2] = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<karo::media::C3mSgStaticTransform *,std::shared_ptr<karo::media::C3mSgNode>::__shared_ptr_default_delete<karo::media::C3mSgNode,karo::media::C3mSgStaticTransform>,std::allocator<karo::media::C3mSgStaticTransform>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<karo::media::C3mSgNode>::__on_zero_shared(void *a1)
{
  double v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<karo::media::C3mSgNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A9E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<karo::media::C3mSgNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A9E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<karo::media::C3mSceneGraph>::__on_zero_shared(void *a1)
{
  double v2 = (char *)a1[6];
  double v3 = (char *)a1[7];
  if (v3 != v2)
  {
    do
    {
      double v4 = (std::__shared_weak_count *)*((void *)v3 - 1);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v3 -= 16;
    }
    while (v3 != v2);
    double v3 = (char *)a1[6];
  }
  a1[7] = v2;
  if (v3)
  {
    if (v2 != v3)
    {
      do
      {
        unint64_t v5 = (std::__shared_weak_count *)*((void *)v2 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v2 -= 16;
      }
      while (v2 != v3);
      double v2 = (char *)a1[6];
    }
    a1[7] = v3;
    operator delete(v2);
  }
  uint64_t v6 = a1[3];
  if (v6)
  {
    uint64_t v7 = a1[4];
    unint64_t v8 = (void *)a1[3];
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      unint64_t v8 = (void *)a1[3];
    }
    a1[4] = v6;
    operator delete(v8);
  }
}

void std::__shared_ptr_emplace<karo::media::C3mSceneGraph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<karo::media::C3mSceneGraph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

karo::media::C3mMesh *karo::media::C3mMesh::C3mMesh(karo::media::C3mMesh *this, const karo::media::C3mMesh *a2)
{
  *(void *)this = *(void *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  int v5 = *((_DWORD *)a2 + 8);
  uint64_t v6 = *((void *)a2 + 6);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((_DWORD *)this + 8) = v5;
  *((void *)this + 6) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  int v7 = *((_DWORD *)a2 + 14);
  uint64_t v8 = *((void *)a2 + 9);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((_DWORD *)this + 14) = v7;
  *((void *)this + 9) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  unint64_t v10 = (unsigned char *)*((void *)a2 + 10);
  uint64_t v9 = (unsigned char *)*((void *)a2 + 11);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      abort();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    *((void *)this + 10) = v12;
    *((void *)this + 11) = v12;
    double v13 = &v12[2 * (v11 >> 1)];
    *((void *)this + 12) = v13;
    memcpy(v12, v10, v11);
    *((void *)this + 11) = v13;
  }
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  return this;
}

void sub_1A21F7990(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v4);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

char *std::vector<karo::media::C3mMesh>::__push_back_slow_path<karo::media::C3mMesh const&>(karo::media::C3mMesh **a1, const karo::media::C3mMesh *a2)
{
  unint64_t v2 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x222222222222222) {
    abort();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v7 = (char *)operator new(120 * v6);
  }
  else
  {
    int v7 = 0;
  }
  long long v17 = (karo::media::C3mMesh *)&v7[120 * v2];
  double v18 = (karo::media::C3mMesh *)&v7[120 * v6];
  karo::media::C3mMesh::C3mMesh(v17, a2);
  uint64_t v8 = (karo::media::C3mMesh *)((char *)v17 + 120);
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = v17;
    a1[1] = v8;
    a1[2] = v18;
    if (!v10) {
      return (char *)v17 + 120;
    }
    goto LABEL_17;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = (char *)v10 + v11;
    double v13 = (char *)v17 + v11;
    *((void *)v13 - 15) = *(void *)((char *)v10 + v11 - 120);
    long long v14 = *(_OWORD *)((char *)v10 + v11 - 112);
    *((void *)v13 - 12) = *(void *)((char *)v10 + v11 - 96);
    *((_OWORD *)v13 - 7) = v14;
    *((void *)v12 - 13) = 0;
    *((void *)v12 - 12) = 0;
    *((void *)v12 - 14) = 0;
    *((_DWORD *)v13 - 22) = *(_DWORD *)((char *)v10 + v11 - 88);
    *((_OWORD *)v13 - 5) = *(_OWORD *)((char *)v10 + v11 - 80);
    *((void *)v12 - 10) = 0;
    *((void *)v12 - 9) = 0;
    *((_DWORD *)v13 - 16) = *(_DWORD *)((char *)v10 + v11 - 64);
    *(_OWORD *)(v13 - 56) = *(_OWORD *)((char *)v10 + v11 - 56);
    *((void *)v12 - 7) = 0;
    *((void *)v12 - 6) = 0;
    *((void *)v13 - 5) = 0;
    *((void *)v13 - 4) = 0;
    *((void *)v13 - 3) = 0;
    *(_OWORD *)(v13 - 40) = *(_OWORD *)((char *)v10 + v11 - 40);
    *((void *)v13 - 3) = *(void *)((char *)v10 + v11 - 24);
    *((void *)v12 - 5) = 0;
    *((void *)v12 - 4) = 0;
    *((void *)v12 - 3) = 0;
    *((_OWORD *)v13 - 1) = *(_OWORD *)((char *)v10 + v11 - 16);
    v11 -= 120;
  }
  while ((karo::media::C3mMesh *)((char *)v10 + v11) != v9);
  unint64_t v10 = *a1;
  uint64_t v15 = (uint64_t)a1[1];
  *a1 = (karo::media::C3mMesh *)((char *)v17 + v11);
  a1[1] = v8;
  a1[2] = v18;
  while ((karo::media::C3mMesh *)v15 != v10)
  {
    v15 -= 120;
    std::__destroy_at[abi:nn180100]<karo::media::C3mMesh,0>(v15);
  }
  if (v10) {
LABEL_17:
  }
    operator delete(v10);
  return (char *)v17 + 120;
}

void sub_1A21F7B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<karo::media::C3mMesh>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:nn180100]<karo::media::C3mMesh,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  if (*(char *)(a1 + 31) < 0)
  {
    int v5 = *(void **)(a1 + 8);
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<karo::media::C3mMesh>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    std::__destroy_at[abi:nn180100]<karo::media::C3mMesh,0>(i - 120);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5844D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4UV>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5844D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::MeshRenderable::~MeshRenderable(md::MeshRenderable *this)
{
  *(void *)this = &unk_1EF534030;
  if (*((unsigned char *)this + 176))
  {
    unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF534030;
  if (*((unsigned char *)this + 176))
  {
    unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF534030;
  if (*((unsigned char *)this + 176))
  {
    unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t md::MeshRenderable::MeshRenderable(uint64_t a1, char a2, uint64_t *a3, void *a4)
{
  unint64_t v6 = (std::__shared_weak_count *)a4[1];
  v11[0] = *a4;
  v11[1] = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    md::MeshRenderable::MeshRenderable(a1, v11, a2, a3);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    md::MeshRenderable::MeshRenderable(a1, v11, a2, a3);
  }
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(unsigned char *)(a1 + 148) = 1;
  return a1;
}

void md::MeshRenderable::recalculateBounds(md::MeshRenderable *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)((char *)this + 76) = xmmword_1A28FC710;
  *(void *)((char *)this + 92) = 0x80000000800000;
  uint64_t v2 = **((void **)this + 4);
  unint64_t v3 = *(void *)(v2 + 48) - *(void *)(v2 + 40);
  unint64_t v4 = v3 % *(void *)(v2 + 8);
  if ((*(unsigned char *)(v2 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    v13[0] = &v12;
    v10.i64[0] = (uint64_t)v13;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(v2 + 72);
  }
  if (*(_DWORD *)(*((void *)this + 4) + 16))
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v9 = (uint64_t *)(*((void *)this + 27) + 36);
      int8x16_t v10 = (int8x16_t)xmmword_1A28FC710;
      float32x2_t v11 = (float32x2_t)0x80000000800000;
      v13[0] = &unk_1EF57D5F0;
      v13[1] = &v10;
      v13[2] = v5;
      long long v14 = v13;
      gm::Box<float,3>::forEachCorner(v9, (uint64_t)v13);
      if (v14 == v13)
      {
        (*(void (**)(void *))(v13[0] + 32))(v13);
      }
      else if (v14)
      {
        (*(void (**)(void))(*v14 + 40))();
      }
      float32x4_t v7 = (float32x4_t)v10;
      v7.i32[3] = HIDWORD(*(_OWORD *)((char *)this + 76));
      float32x4_t v8 = *(float32x4_t *)((char *)this + 76);
      v8.i32[3] = v10.i32[3];
      *(int8x16_t *)((char *)this + 76) = vbslq_s8((int8x16_t)vcgtq_f32(v8, v7), v10, *(int8x16_t *)((char *)this + 76));
      *(float32x2_t *)((char *)this + 92) = vmaxnm_f32(*(float32x2_t *)((char *)this + 92), v11);
      ++v6;
      v5 += 64;
    }
    while (v6 < *(unsigned int *)(*((void *)this + 4) + 16));
  }
  if (*((unsigned char *)this + 124)) {
    *((unsigned char *)this + 124) = 0;
  }
  if (*((unsigned char *)this + 140)) {
    *((unsigned char *)this + 140) = 0;
  }
}

void md::MeshRenderable::updateModelTransforms(md::MeshRenderable *this, uint64_t a2)
{
  if (!*((unsigned char *)this + 148)) {
    return;
  }
  unint64_t v4 = (_DWORD *)*((void *)this + 4);
  uint64_t v5 = *(void **)v4;
  unint64_t v6 = *(void *)(*(void *)v4 + 48) - *(void *)(*(void *)v4 + 40);
  unint64_t v7 = *(void *)(*(void *)v4 + 8);
  unint64_t v8 = v6 / v7 * v7;
  unint64_t v9 = v6 % v7;
  if (v6 == v6 % v7)
  {
    uint64_t v10 = 0;
    if (!v4[4]) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = v5[9];
    if (!v4[4])
    {
LABEL_9:
      md::MeshRenderable::recalculateBounds(this);
      if (v10 && v6 != v9)
      {
        unint64_t v14 = v5[8];
        if (v14 <= v8) {
          unint64_t v14 = v8;
        }
        v5[7] = 0;
        v5[8] = v14;
      }
      return;
    }
  }
  unint64_t v11 = 0;
  uint64_t v12 = v10;
  while (1)
  {
    unint64_t v15 = v11;
    uint64_t v13 = *(void *)(a2 + 24);
    if (!v13) {
      break;
    }
    (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(void *)v13 + 48))(v13, &v15, v12);
    ++v11;
    v12 += 64;
    if (v11 >= *(unsigned int *)(*((void *)this + 4) + 16)) {
      goto LABEL_9;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  md::RasterOverlayRenderPatch::operator!=();
}

BOOL md::RasterOverlayRenderPatch::operator!=(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 1;
  }
  uint64_t v3 = a1[3];
  uint64_t v4 = *(void *)(v3 + 8);
  if ((*(unsigned char *)(v3 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    uint64_t v12 = &v10;
    unint64_t v11 = &v12;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  if (v4) {
    uint64_t v5 = *(void *)(v3 + 72);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a2[3];
  uint64_t v7 = *(void *)(v6 + 8);
  if ((*(unsigned char *)(v6 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    uint64_t v12 = &v10;
    unint64_t v11 = &v12;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  uint64_t v8 = v7 ? *(void *)(v6 + 72) : 0;
  return *(void *)(v5 + 8) != *(void *)(v8 + 8) || *(float *)v5 != *(float *)v8;
}

void md::MuninStorefrontLabelFeature::addElement(md::PointLabelFeature *a1, void **a2, int a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  if (*((void *)a1 + 60))
  {
    uint64_t v5 = (char *)*((void *)a1 + 57);
    uint64_t v6 = (char *)a1 + 464;
    if (v5 != (char *)a1 + 464)
    {
      do
      {
        md::PointPosition::addElement((unint64_t *)v5 + 5, v3);
        uint64_t v7 = (char *)*((void *)v5 + 1);
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = *(char **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (char *)*((void *)v5 + 2);
            BOOL v9 = *(void *)v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != v6);
    }
  }
  else if (*((void *)a1 + 85) != *((void *)a1 + 84))
  {
    unsigned __int8 v10 = 0;
    unint64_t v11 = &v42;
    uint64_t v12 = &v44;
    uint64_t v36 = (uint64_t *)((char *)a1 + 472);
    uint64_t v37 = (char *)a1 + 464;
    do
    {
      double v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      {
        operator new();
      }
      uint64_t v41 = mdm::Allocator::instance(void)::alloc;
      if (*v3) {
        uint64_t v13 = (uint64_t)(*v3 + 1);
      }
      else {
        uint64_t v13 = 0;
      }
      long long v14 = *(_OWORD *)(v13 + 24);
      void v11[2] = *(void *)(v13 + 40);
      *(_OWORD *)unint64_t v11 = v14;
      long long v43 = *(_OWORD *)(v13 + 48);
      int v15 = *(_DWORD *)(v13 + 67);
      *uint64_t v12 = *(float *)(v13 + 64);
      *(_DWORD *)((char *)v12 + 3) = v15;
      LOWORD(v45) = *(unsigned __int8 *)(v13 + 129);
      HIBYTE(v45) = 0;
      BYTE2(v45) = v44 != 3.4028e38;
      md::PointPosition::addElement((unint64_t *)&v38, v3);
      BYTE1(v45) = v10;
      unsigned int v16 = *((_DWORD *)v4 + 122);
      *((_DWORD *)v4 + 122) = v16 + 1;
      uint64_t v17 = *((void *)v4 + 58);
      double v18 = (uint64_t *)v37;
LABEL_21:
      double v19 = v18;
      if (v17)
      {
        do
        {
          double v18 = (uint64_t *)v17;
          unsigned int v20 = *(_DWORD *)(v17 + 32);
          if (v16 < v20)
          {
            uint64_t v17 = *v18;
            goto LABEL_21;
          }
          if (v20 >= v16) {
            goto LABEL_14;
          }
          uint64_t v17 = v18[1];
        }
        while (v17);
        double v19 = v18 + 1;
      }
      long long v21 = v12;
      unint64_t v22 = v11;
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*v36 + 16))(*v36, 128, 8);
      v46[0] = (uint64_t *)v23;
      v46[1] = v36;
      char v47 = 0;
      *(_DWORD *)(v23 + 32) = v16;
      *(void *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      uint64_t v24 = v41;
      *(void *)(v23 + 56) = 0;
      *(void *)(v23 + 64) = v24;
      double v26 = v38;
      char v25 = v39;
      uint64_t v27 = (char *)v39 - (char *)v38;
      if (v39 != v38)
      {
        if (v27 < 0) {
          abort();
        }
        int8x8_t v28 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v24 + 16))(v24, (char *)v39 - (char *)v38, 8);
        *(void *)(v23 + 40) = v28;
        *(void *)(v23 + 56) = &v28[v27 >> 3];
        do
        {
          if (v28)
          {
            *int8x8_t v28 = 0;
            uint64_t v29 = *v26;
            *int8x8_t v28 = *v26;
            if (v29) {
              ++*v29;
            }
          }
          ++v26;
          ++v28;
        }
        while (v26 != v25);
        *(void *)(v23 + 48) = v28;
      }
      unint64_t v11 = v22;
      *(_OWORD *)(v23 + 72) = *(_OWORD *)v22;
      *(void *)(v23 + 88) = v22[2];
      *(_OWORD *)(v23 + 96) = v43;
      uint64_t v12 = v21;
      *(float *)(v23 + 112) = *v21;
      *(float *)(v23 + 115) = *(float *)((char *)v21 + 3);
      *(_DWORD *)(v23 + 120) = v45;
      *(void *)uint64_t v23 = 0;
      *(void *)(v23 + 8) = 0;
      *(void *)(v23 + 16) = v18;
      *double v19 = v23;
      uint64_t v4 = a1;
      uint64_t v30 = **((void **)a1 + 57);
      if (v30)
      {
        *((void *)a1 + 57) = v30;
        uint64_t v23 = *v19;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)a1 + 58), (uint64_t *)v23);
      ++*((void *)a1 + 60);
      uint64_t v3 = a2;
LABEL_14:
      v46[0] = (uint64_t *)&v38;
      std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](v46);
      ++v10;
    }
    while ((uint64_t)(*((void *)v4 + 85) - *((void *)v4 + 84)) >> 4 > (unint64_t)v10);
  }
  if (*v3) {
    unint64_t v31 = (unint64_t)(*v3 + 1);
  }
  else {
    unint64_t v31 = 0;
  }
  md::PointLabelFeatureElement::updateText(v31, v4, a3);
  if (*v3) {
    int v32 = (md::PointLabelFeatureElement *)(*v3 + 1);
  }
  else {
    int v32 = 0;
  }
  md::PointLabelFeatureElement::updateLabelPlacements(v32, v4);
}

void sub_1A21F8994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::unique_ptr<std::__tree_node<std::__value_type<md::LabelIdentifier,md::PointPosition>,void *>,std::__tree_node_destructor<geo::StdAllocator<std::__tree_node<std::__value_type<md::LabelIdentifier,md::PointPosition>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v15 - 120));
  *(void *)(v15 - 96) = &a15;
  std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)(v15 - 96));
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<md::LabelIdentifier,md::PointPosition>,void *>,std::__tree_node_destructor<geo::StdAllocator<std::__tree_node<std::__value_type<md::LabelIdentifier,md::PointPosition>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v4 = (uint64_t *)(v2 + 40);
      std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](&v4);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 128);
  }
  return a1;
}

uint64_t md::MuninStorefrontLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, unsigned char *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v29);
  md::StorefrontLabelFeature::debugString(a1, a2, a3, a4, __p);
  if ((v28 & 0x80u) == 0) {
    unsigned __int8 v10 = __p;
  }
  else {
    unsigned __int8 v10 = (void **)__p[0];
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v11 = v28;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)v10, v11);
  if ((char)v28 < 0)
  {
    operator delete(__p[0]);
    uint64_t v12 = *(void *)(a1 + 464);
    if (!v12) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 464);
    if (!v12) {
      goto LABEL_22;
    }
  }
  unsigned int v13 = *a3;
  uint64_t v14 = a1 + 464;
  do
  {
    unsigned int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 >= v13;
    if (v15 >= v13) {
      uint64_t v17 = (uint64_t *)v12;
    }
    else {
      uint64_t v17 = (uint64_t *)(v12 + 8);
    }
    if (v16) {
      uint64_t v14 = v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 != a1 + 464 && v13 >= *(_DWORD *)(v14 + 32))
  {
    *(void *)((char *)&v29[2] + *(void *)(v29[0] - 24)) = 1;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)" CollectionPoint Distance=", 26);
    double v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
LABEL_22:
  if ((v36 & 0x10) != 0)
  {
    unint64_t v20 = v35;
    if (v35 < v32)
    {
      unint64_t v35 = v32;
      unint64_t v20 = v32;
    }
    long long v21 = (const void **)&v31;
  }
  else
  {
    if ((v36 & 8) == 0)
    {
      size_t v19 = 0;
      a5[23] = 0;
      goto LABEL_37;
    }
    long long v21 = (const void **)v30;
    unint64_t v20 = v30[2];
  }
  unint64_t v22 = *v21;
  size_t v19 = v20 - (void)*v21;
  if (v19 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v19 >= 0x17)
  {
    uint64_t v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v23 = v19 | 7;
    }
    uint64_t v24 = v23 + 1;
    char v25 = operator new(v23 + 1);
    *((void *)a5 + 1) = v19;
    *((void *)a5 + 2) = v24 | 0x8000000000000000;
    *(void *)a5 = v25;
    a5 = v25;
    goto LABEL_36;
  }
  a5[23] = v19;
  if (v19) {
LABEL_36:
  }
    memmove(a5, v22, v19);
LABEL_37:
  a5[v19] = 0;
  v29[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v29 + *(void *)(v29[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v29[1] = MEMORY[0x1E4FBA470] + 16;
  if (v34 < 0) {
    operator delete(v33);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v37);
}

void sub_1A21F8D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t md::MuninStorefrontLabelFeature::labelFeatureType(md::MuninStorefrontLabelFeature *this)
{
  return 18;
}

float md::MuninStorefrontLabelFeature::maxZoomRank(md::MuninStorefrontLabelFeature *this)
{
  return 252.0;
}

double md::MuninStorefrontLabelFeature::minZoomRank(md::MuninStorefrontLabelFeature *this)
{
  return 0.0;
}

void md::MuninStorefrontLabelFeature::~MuninStorefrontLabelFeature(md::MuninStorefrontLabelFeature *this)
{
  if (*((unsigned char *)this + 736)) {
    *((unsigned char *)this + 736) = 0;
  }
  if (*((unsigned char *)this + 696)) {
    *((unsigned char *)this + 696) = 0;
  }
  *(void *)this = &unk_1EF542320;
  uint64_t v2 = *((void *)this + 84);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 85);
    uint64_t v4 = (void *)*((void *)this + 84);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 84);
    }
    *((void *)this + 85) = v2;
    operator delete(v4);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  if (*((unsigned char *)this + 736)) {
    *((unsigned char *)this + 736) = 0;
  }
  if (*((unsigned char *)this + 696)) {
    *((unsigned char *)this + 696) = 0;
  }
  *(void *)this = &unk_1EF542320;
  uint64_t v2 = *((void *)this + 84);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 85);
    uint64_t v4 = (void *)*((void *)this + 84);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 84);
    }
    *((void *)this + 85) = v2;
    operator delete(v4);
  }
  md::PointLabelFeature::~PointLabelFeature(this);
}

void std::__shared_ptr_emplace<md::MuninStorefront>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FF78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::MuninStorefront>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FF78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::vector<ggl::Batcher>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = *(void **)(v4 - 24);
      if (v5)
      {
        *(void *)(v4 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v6 = *(void *)(v4 - 56);
      if (v6)
      {
        uint64_t v7 = *(void *)(v4 - 48);
        uint64_t v8 = *(void *)(v4 - 56);
        if (v7 != v6)
        {
          uint64_t v9 = *(void *)(v4 - 48);
          do
          {
            uint64_t v11 = *(void **)(v9 - 24);
            v9 -= 24;
            unsigned __int8 v10 = v11;
            if (v11)
            {
              *(void *)(v7 - 16) = v10;
              operator delete(v10);
            }
            uint64_t v7 = v9;
          }
          while (v9 != v6);
          uint64_t v8 = *(void *)(v4 - 56);
        }
        *(void *)(v4 - 48) = v6;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v4 - 32) + 40))(*(void *)(v4 - 32), v8, *(void *)(v4 - 40) - v8);
      }
      uint64_t v12 = v4 - 80;
      unsigned int v13 = *(void **)(v4 - 80);
      if (v13)
      {
        *(void *)(v4 - 72) = v13;
        operator delete(v13);
      }
      v4 -= 80;
    }
    while (v12 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::~MeshSet(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 176);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v3) {
    std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](v3);
  }
  if (*(void *)(a1 + 136))
  {
    unint64_t v5 = *(void *)(a1 + 112);
    unint64_t v4 = *(void *)(a1 + 120);
    if (v4 != v5)
    {
      uint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(void *)(a1 + 104);
      int v8 = *(unsigned __int8 *)(a1 + 128);
      int v9 = *(unsigned __int8 *)(a1 + 129);
      if (v6 && *(unsigned char *)(v7 + 17) != 2) {
        (*(void (**)(uint64_t))(*(void *)v6 + 64))(v6);
      }
      if (v8 && !v9)
      {
        unint64_t v11 = *(void *)(v7 + 56);
        unint64_t v10 = *(void *)(v7 + 64);
        if (v10 == v11) {
          unint64_t v11 = *(void *)(v7 + 80) - *(void *)(v7 + 72);
        }
        if (v5 < v11) {
          unint64_t v11 = v5;
        }
        if (v10 <= v4) {
          unint64_t v10 = v4;
        }
        if (v10 == v11) {
          unint64_t v10 = v11 + *(void *)(v7 + 80) - *(void *)(v7 + 72);
        }
        *(void *)(v7 + 56) = v11;
        *(void *)(v7 + 64) = v10;
      }
    }
  }
  if (*(void *)(a1 + 88))
  {
    unint64_t v13 = *(void *)(a1 + 64);
    unint64_t v12 = *(void *)(a1 + 72);
    if (v12 != v13)
    {
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v15 = *(void *)(a1 + 56);
      int v16 = *(unsigned __int8 *)(a1 + 80);
      int v17 = *(unsigned __int8 *)(a1 + 81);
      if (v14 && *(unsigned char *)(v15 + 17) != 2) {
        (*(void (**)(uint64_t))(*(void *)v14 + 64))(v14);
      }
      if (v16 && !v17)
      {
        unint64_t v19 = *(void *)(v15 + 56);
        unint64_t v18 = *(void *)(v15 + 64);
        if (v18 == v19) {
          unint64_t v19 = *(void *)(v15 + 80) - *(void *)(v15 + 72);
        }
        if (v13 < v19) {
          unint64_t v19 = v13;
        }
        if (v18 <= v12) {
          unint64_t v18 = v12;
        }
        if (v18 == v19) {
          unint64_t v18 = v19 + *(void *)(v15 + 80) - *(void *)(v15 + 72);
        }
        *(void *)(v15 + 56) = v19;
        *(void *)(v15 + 64) = v18;
      }
    }
  }
  uint64_t v20 = *(void *)(a1 + 24);
  if (v20)
  {
    uint64_t v21 = *(void *)(a1 + 32);
    unint64_t v22 = *(void **)(a1 + 24);
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v20;
    operator delete(v22);
  }
  uint64_t v24 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v24;
    operator delete(v24);
  }
  return a1;
}

void std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](uint64_t a1)
{
  if (*(void *)(a1 + 168))
  {
    unint64_t v3 = *(void *)(a1 + 144);
    unint64_t v2 = *(void *)(a1 + 152);
    if (v2 != v3)
    {
      uint64_t v4 = *(void *)(a1 + 128);
      uint64_t v5 = *(void *)(a1 + 136);
      int v6 = *(unsigned __int8 *)(a1 + 160);
      int v7 = *(unsigned __int8 *)(a1 + 161);
      if (v4 && *(unsigned char *)(v5 + 17) != 2) {
        (*(void (**)(uint64_t))(*(void *)v4 + 64))(v4);
      }
      if (v6 && !v7)
      {
        unint64_t v9 = *(void *)(v5 + 56);
        unint64_t v8 = *(void *)(v5 + 64);
        if (v8 == v9) {
          unint64_t v9 = *(void *)(v5 + 80) - *(void *)(v5 + 72);
        }
        if (v3 < v9) {
          unint64_t v9 = v3;
        }
        if (v8 <= v2) {
          unint64_t v8 = v2;
        }
        if (v8 == v9) {
          unint64_t v8 = v9 + *(void *)(v5 + 80) - *(void *)(v5 + 72);
        }
        *(void *)(v5 + 56) = v9;
        *(void *)(v5 + 64) = v8;
      }
    }
  }
  if (*(void *)(a1 + 120))
  {
    unint64_t v11 = *(void *)(a1 + 96);
    unint64_t v10 = *(void *)(a1 + 104);
    if (v10 != v11)
    {
      uint64_t v12 = *(void *)(a1 + 80);
      uint64_t v13 = *(void *)(a1 + 88);
      int v14 = *(unsigned __int8 *)(a1 + 112);
      int v15 = *(unsigned __int8 *)(a1 + 113);
      if (v12 && *(unsigned char *)(v13 + 17) != 2) {
        (*(void (**)(uint64_t))(*(void *)v12 + 64))(v12);
      }
      if (v14 && !v15)
      {
        unint64_t v17 = *(void *)(v13 + 56);
        unint64_t v16 = *(void *)(v13 + 64);
        if (v16 == v17) {
          unint64_t v17 = *(void *)(v13 + 80) - *(void *)(v13 + 72);
        }
        if (v11 < v17) {
          unint64_t v17 = v11;
        }
        if (v16 <= v10) {
          unint64_t v16 = v10;
        }
        if (v16 == v17) {
          unint64_t v16 = v17 + *(void *)(v13 + 80) - *(void *)(v13 + 72);
        }
        *(void *)(v13 + 56) = v17;
        *(void *)(v13 + 64) = v16;
      }
    }
  }
  unint64_t v18 = *(std::__shared_weak_count **)(a1 + 72);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  unint64_t v19 = *(std::__shared_weak_count **)(a1 + 56);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 24));
  JUMPOUT(0x1A6239270);
}

void sub_1A21FA600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (v23) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a14 + 40))(a14, v23, a11 - v23);
  }
  _Unwind_Resume(exception_object);
}

char *std::unordered_map<StyleQueryOverride,std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,anonymous namespace'::StyleQueryOverrideHash,std::equal_to<StyleQueryOverride>,std::allocator<std::pair<StyleQueryOverride const,std::vector<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>>>::operator[](uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = (v6
      + ((v5 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v5 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v5 - 0x61C8864680B583EBLL);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = (v6
          + ((v5 - 0x61C8864680B583EBLL) << 6)
          + ((unint64_t)(v5 - 0x61C8864680B583EBLL) >> 2)
          - 0x61C8864680B583EBLL) ^ (v5 - 0x61C8864680B583EBLL);
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
    }
    else
    {
      unint64_t v2 = v7 & (v8 - 1);
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v2);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v11[1];
            if (v15 == v7)
            {
              if (*((unsigned __int8 *)v11 + 16) == v5 && *((unsigned __int8 *)v11 + 17) == v6) {
                return (char *)(v11 + 3);
              }
            }
            else if ((v15 & (v8 - 1)) != v2)
            {
              goto LABEL_28;
            }
            unint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v13 = v11[1];
          if (v13 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v5 && *((unsigned __int8 *)v11 + 17) == v6) {
              return (char *)(v11 + 3);
            }
          }
          else
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
            if (v13 != v2) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_28:
  unint64_t v11 = operator new(0x30uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_WORD *)v11 + 8) = *(_WORD *)a2;
  v11[3] = 0;
  v11[4] = 0;
  v11[5] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v2);
  if (v23)
  {
    *unint64_t v11 = *v23;
LABEL_48:
    *uint64_t v23 = v11;
    goto LABEL_49;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v22 + 8 * v2) = a1 + 16;
  if (*v11)
  {
    unint64_t v24 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8) {
        v24 %= v8;
      }
    }
    else
    {
      v24 &= v8 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return (char *)(v11 + 3);
}

void sub_1A21FA97C(_Unwind_Exception *a1)
{
  uint64_t v4 = (char *)*v2;
  if (*v2)
  {
    uint64_t v5 = (char *)v1[4];
    uint64_t v6 = *v2;
    if (v5 != v4)
    {
      unint64_t v7 = v2;
      do
      {
        unint64_t v8 = (std::__shared_weak_count *)*((void *)v5 - 1);
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      uint64_t v6 = *v7;
    }
    v1[4] = v4;
    operator delete(v6);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL FeatureStyleAttributesSet::FeatureStyleAttributesCompare::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(char *)(a1 + 34) - 0x61C8864680B57FA7) ^ 0x11;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 33);
  if (*(unsigned char *)(a1 + 33))
  {
    uint64_t v4 = (int *)(*(void *)a1 + 4);
    do
    {
      unint64_t v5 = ((v2 << 6) - 0x61C8864680B583EBLL + (v2 >> 2) + *(v4 - 1)) ^ v2;
      unint64_t v2 = (*v4 - 0x61C8864680B583EBLL + (v5 << 6) + (v5 >> 2)) ^ v5;
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 32);
  if (*(unsigned char *)(a1 + 32))
  {
    unint64_t v7 = (uint64_t *)(*(void *)(a1 + 24) + 4);
    do
    {
      unint64_t v8 = ((v2 << 6) - 0x61C8864680B583EBLL + (v2 >> 2) + *((unsigned int *)v7 - 1)) ^ v2;
      uint64_t v9 = *v7;
      unint64_t v7 = (uint64_t *)((char *)v7 + 12);
      unint64_t v2 = (v9 - 0x61C8864680B583EBLL + (v8 << 6) + (v8 >> 2)) ^ v8;
      --v6;
    }
    while (v6);
  }
  unint64_t v10 = (*(char *)(a2 + 34) - 0x61C8864680B57FA7) ^ 0x11;
  uint64_t v11 = *(unsigned __int8 *)(a2 + 33);
  if (*(unsigned char *)(a2 + 33))
  {
    uint64_t v12 = (int *)(*(void *)a2 + 4);
    do
    {
      unint64_t v13 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *(v12 - 1)) ^ v10;
      unint64_t v10 = (*v12 - 0x61C8864680B583EBLL + (v13 << 6) + (v13 >> 2)) ^ v13;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned char *)(a2 + 32))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 24) + 4);
    do
    {
      unint64_t v16 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *((unsigned int *)v15 - 1)) ^ v10;
      uint64_t v17 = *v15;
      uint64_t v15 = (uint64_t *)((char *)v15 + 12);
      unint64_t v10 = (v17 - 0x61C8864680B583EBLL + (v16 << 6) + (v16 >> 2)) ^ v16;
      --v14;
    }
    while (v14);
  }
  return v2 < v10;
}

uint64_t *md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::finishedWriting(uint64_t *a1)
{
  uint64_t v2 = a1[21];
  if (v2 && *(void *)v2 == a1[19]) {
    *(unsigned char *)(v2 + 80) = 1;
  }
  uint64_t v3 = (md::MeshSetStorage *)a1[20];
  if (v3) {
    md::MeshSetStorage::finalize(v3);
  }
  uint64_t v25 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  ggl::BufferMemory::operator=(a1 + 6, (uint64_t)&v19);
  if (v25)
  {
    unint64_t v5 = v21;
    unint64_t v4 = v22;
    if (v22 != v21)
    {
      uint64_t v6 = (void *)v20;
      int v7 = v23;
      int v8 = v24;
      if (v19 && *(unsigned char *)(v20 + 17) != 2) {
        (*(void (**)(void))(*(void *)v19 + 64))();
      }
      if (v7 && !v8)
      {
        unint64_t v10 = v6[7];
        unint64_t v9 = v6[8];
        if (v9 == v10) {
          unint64_t v10 = v6[10] - v6[9];
        }
        if (v5 < v10) {
          unint64_t v10 = v5;
        }
        if (v9 <= v4) {
          unint64_t v9 = v4;
        }
        if (v9 == v10) {
          unint64_t v9 = v10 + v6[10] - v6[9];
        }
        v6[7] = v10;
        v6[8] = v9;
      }
    }
  }
  uint64_t v25 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  ggl::BufferMemory::operator=(a1 + 12, (uint64_t)&v19);
  if (v25)
  {
    unint64_t v12 = v21;
    unint64_t v11 = v22;
    if (v22 != v21)
    {
      unint64_t v13 = (void *)v20;
      int v14 = v23;
      int v15 = v24;
      if (v19 && *(unsigned char *)(v20 + 17) != 2) {
        (*(void (**)(void))(*(void *)v19 + 64))();
      }
      if (v14 && !v15)
      {
        unint64_t v17 = v13[7];
        unint64_t v16 = v13[8];
        if (v16 == v17) {
          unint64_t v17 = v13[10] - v13[9];
        }
        if (v12 < v17) {
          unint64_t v17 = v12;
        }
        if (v16 <= v11) {
          unint64_t v16 = v11;
        }
        if (v16 == v17) {
          unint64_t v16 = v17 + v13[10] - v13[9];
        }
        v13[7] = v17;
        v13[8] = v16;
      }
    }
  }
  return a1 + 3;
}

void std::__hash_table<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::__unordered_map_hasher<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::hash<std::pair<void const*,unsigned long>>,std::equal_to<std::pair<void const*,unsigned long>>,true>,std::__unordered_map_equal<std::pair<void const*,unsigned long>,std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>,std::equal_to<std::pair<void const*,unsigned long>>,std::hash<std::pair<void const*,unsigned long>>,true>,std::allocator<std::__hash_value_type<std::pair<void const*,unsigned long>,std::vector<md::Edge>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    unint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        unint64_t v16 = (void *)*v4;
        unint64_t v17 = (void *)v4[4];
        if (v17)
        {
          v4[5] = v17;
          operator delete(v17);
        }
        operator delete(v4);
        unint64_t v4 = v16;
      }
      while (v16);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  int v8 = *(void **)a1;
  *(void *)a1 = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = a2[2];
  unint64_t v10 = a2 + 2;
  uint64_t v9 = v11;
  uint64_t v12 = *(v10 - 1);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  uint64_t v13 = v10[1];
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    unint64_t v14 = *(void *)(v9 + 8);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    *unint64_t v10 = 0;
    v10[1] = 0;
  }
}

void md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::createMeshes(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, ResourceAccessor *a5, __n128 a6)
{
  unint64_t v10 = (uint64_t *)a1[20];
  if (v10) {
    md::MeshSetStorage::prepareStorage(v10, a5);
  }
  unint64_t v73 = a5;
  uint64_t v12 = (unsigned __int16 *)*a1;
  uint64_t v11 = (unsigned __int16 *)a1[1];
  if ((unsigned __int16 *)*a1 != v11)
  {
    do
    {
      if (!*v12 || !*((_DWORD *)v12 + 1)) {
        goto LABEL_6;
      }
      uint64_t v13 = a1[19];
      if (*(unsigned char *)(v13 + 40)
        && (unint64_t v14 = (unsigned __int16 *)a1[21]) != 0
        && *(void *)v14 == v13
        && (uint64_t v15 = *((void *)v14 + 1) * *v12,
            uint64_t v16 = *((void *)v14 + 8),
            uint64_t v17 = *((void *)v14 + 4),
            v16 + v15 <= (unint64_t)(*((void *)v14 + 5) - v17)))
      {
        *(void *)&long long v74 = v17 + v16;
        *((void *)&v74 + 1) = v17 + v16 + v15;
        *((void *)v14 + 8) = v16 + v15;
        v84[0] = a3;
        uint64_t v41 = *((void *)v14 + 14);
        if (!v41)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          uint64_t v68 = v67;
          std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v80);
          std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v79);
          std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v81);
          std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v83);
          _Unwind_Resume(v68);
        }
        (*(void (**)(long long *__return_ptr))(*(void *)v41 + 48))(&v83);
        uint64_t v13 = a1[19];
      }
      else
      {
        long long v83 = 0uLL;
      }
      md::MeshSetStorage::buildSubIndexData(&v81, v13, (void *)a1[21], a4, *((unsigned int *)v12 + 1));
      long long v79 = v83;
      if (*((void *)&v83 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v18 = operator new(0xA8uLL);
      uint64_t v19 = v18;
      v18[1] = 0;
      v18[2] = 0;
      *BOOL v18 = &unk_1EF5833F8;
      uint64_t v20 = v18 + 3;
      long long v74 = v79;
      long long v79 = 0uLL;
      unint64_t v21 = (std::__shared_weak_count *)v82;
      v84[0] = v81;
      v84[1] = v82;
      if (v82)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
        ggl::PolygonBase::CompressedMeshMesh::CompressedMeshMesh((uint64_t)(v18 + 3), a2, (uint64_t *)&v74, v84);
        if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      else
      {
        ggl::PolygonBase::CompressedMeshMesh::CompressedMeshMesh((uint64_t)(v18 + 3), a2, (uint64_t *)&v74, v84);
      }
      unint64_t v22 = (std::__shared_weak_count *)*((void *)&v74 + 1);
      if (*((void *)&v74 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      *(void *)&long long v80 = v20;
      *((void *)&v80 + 1) = v19;
      unsigned __int8 v24 = (unsigned __int16 *)a1[4];
      unsigned __int8 v23 = (unsigned __int16 *)a1[5];
      if (v24 >= v23)
      {
        double v26 = (unsigned __int16 *)a1[3];
        uint64_t v27 = ((char *)v24 - (char *)v26) >> 4;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60) {
          abort();
        }
        uint64_t v29 = (char *)v23 - (char *)v26;
        if (v29 >> 3 > v28) {
          unint64_t v28 = v29 >> 3;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v31 = (char *)operator new(16 * v30);
        unint64_t v32 = (unsigned __int16 *)&v31[16 * v27];
        a6.n128_u64[1] = *((void *)&v80 + 1);
        *(_OWORD *)unint64_t v32 = v80;
        unint64_t v33 = v32 + 8;
        char v34 = (unsigned __int16 *)&v31[16 * v30];
        long long v80 = 0uLL;
        if (v24 == v26)
        {
          a1[3] = (uint64_t)v32;
          a1[4] = (uint64_t)v33;
          a1[5] = (uint64_t)v34;
        }
        else
        {
          do
          {
            long long v35 = *((_OWORD *)v24 - 1);
            v24 -= 8;
            a6.n128_u64[1] = *((void *)&v35 + 1);
            *((_OWORD *)v32 - 1) = v35;
            v32 -= 8;
            *(void *)unsigned __int8 v24 = 0;
            *((void *)v24 + 1) = 0;
          }
          while (v24 != v26);
          unsigned __int8 v24 = (unsigned __int16 *)a1[3];
          int v36 = (unsigned __int16 *)a1[4];
          a1[3] = (uint64_t)v32;
          a1[4] = (uint64_t)v33;
          a1[5] = (uint64_t)v34;
          while (v36 != v24)
          {
            uint64_t v37 = (std::__shared_weak_count *)*((void *)v36 - 1);
            if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
            v36 -= 8;
          }
        }
        if (v24) {
          operator delete(v24);
        }
        double v38 = (std::__shared_weak_count *)*((void *)&v80 + 1);
        a1[4] = (uint64_t)v33;
        if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
          uint64_t v25 = (std::__shared_weak_count *)*((void *)&v79 + 1);
          if (!*((void *)&v79 + 1)) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v25 = (std::__shared_weak_count *)*((void *)&v79 + 1);
          if (!*((void *)&v79 + 1)) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        *(void *)unsigned __int8 v24 = v20;
        *((void *)v24 + 1) = v19;
        long long v80 = 0uLL;
        a1[4] = (uint64_t)(v24 + 8);
        uint64_t v25 = (std::__shared_weak_count *)*((void *)&v79 + 1);
        if (!*((void *)&v79 + 1)) {
          goto LABEL_49;
        }
      }
      if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
LABEL_49:
      unint64_t v39 = (std::__shared_weak_count *)v82;
      if (v82 && !atomic_fetch_add((atomic_ullong *volatile)(v82 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        uint64_t v40 = (std::__shared_weak_count *)*((void *)&v83 + 1);
        if (*((void *)&v83 + 1))
        {
LABEL_52:
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      else
      {
        uint64_t v40 = (std::__shared_weak_count *)*((void *)&v83 + 1);
        if (*((void *)&v83 + 1)) {
          goto LABEL_52;
        }
      }
      uint64_t v11 = (unsigned __int16 *)a1[1];
LABEL_6:
      v12 += 4;
    }
    while (v12 != v11);
  }
  uint64_t v42 = (unsigned __int16 *)a1[3];
  if (v42 != (unsigned __int16 *)a1[4])
  {
    uint64_t v43 = **(void **)(*(void *)v42 + 64);
    uint64_t v44 = *(unsigned __int16 *)*a1;
    long long v74 = 0uLL;
    uint64_t v45 = *(void *)(v43 + 8) * v44;
    a6.n128_u64[0] = (unint64_t)v73;
    *(void *)&long long v46 = v73;
    *((void *)&v46 + 1) = v43;
    __n128 v71 = a6;
    if (v45)
    {
      if (v73 && *(unsigned char *)(v43 + 17) != 2)
      {
        long long v69 = v46;
        uint64_t v47 = (*((uint64_t (**)(ResourceAccessor *))v73->var0 + 7))(v73);
        long long v46 = v69;
      }
      else
      {
        uint64_t v47 = *(void *)(v43 + 72);
      }
    }
    else
    {
      uint64_t v47 = 0;
    }
    long long v74 = v46;
    unint64_t v75 = 0;
    unint64_t v76 = v45;
    uint64_t v78 = v47;
    __int16 v77 = 257;
    ggl::BufferMemory::operator=(a1 + 6, (uint64_t)&v74);
    *(void *)&long long v48 = v71.n128_u64[0];
    if (v78)
    {
      unint64_t v50 = v75;
      unint64_t v49 = v76;
      if (v76 != v75)
      {
        int v51 = (void *)*((void *)&v74 + 1);
        int v52 = v77;
        int v53 = HIBYTE(v77);
        if ((void)v74 && *(unsigned char *)(*((void *)&v74 + 1) + 17) != 2)
        {
          (*(void (**)(__n128))(*(void *)v74 + 64))(v71);
          *(void *)&long long v48 = v71.n128_u64[0];
        }
        if (v52 && !v53)
        {
          unint64_t v55 = v51[7];
          unint64_t v54 = v51[8];
          if (v54 == v55) {
            unint64_t v55 = v51[10] - v51[9];
          }
          if (v50 < v55) {
            unint64_t v55 = v50;
          }
          if (v54 <= v49) {
            unint64_t v54 = v49;
          }
          if (v54 == v55) {
            unint64_t v54 = v55 + v51[10] - v51[9];
          }
          v51[7] = v55;
          v51[8] = v54;
        }
      }
    }
    uint64_t v56 = *(void *)(*(void *)a1[3] + 96);
    uint64_t v57 = *(unsigned int *)(*a1 + 4);
    long long v74 = 0uLL;
    uint64_t v58 = *(void *)(v56 + 8) * v57;
    *((void *)&v48 + 1) = v56;
    if (v58)
    {
      if (v73 && *(unsigned char *)(v56 + 17) != 2)
      {
        long long v72 = v48;
        uint64_t v59 = (*((uint64_t (**)(ResourceAccessor *))v73->var0 + 7))(v73);
        long long v48 = v72;
      }
      else
      {
        uint64_t v59 = *(void *)(v56 + 72);
      }
    }
    else
    {
      uint64_t v59 = 0;
    }
    long long v74 = v48;
    unint64_t v75 = 0;
    unint64_t v76 = v58;
    uint64_t v78 = v59;
    __int16 v77 = 257;
    ggl::BufferMemory::operator=(a1 + 12, (uint64_t)&v74);
    if (v78)
    {
      unint64_t v61 = v75;
      unint64_t v60 = v76;
      if (v76 != v75)
      {
        uint64_t v62 = (void *)*((void *)&v74 + 1);
        int v63 = v77;
        int v64 = HIBYTE(v77);
        if ((void)v74 && *(unsigned char *)(*((void *)&v74 + 1) + 17) != 2) {
          (*(void (**)(void))(*(void *)v74 + 64))();
        }
        if (v63 && !v64)
        {
          unint64_t v66 = v62[7];
          unint64_t v65 = v62[8];
          if (v65 == v66) {
            unint64_t v66 = v62[10] - v62[9];
          }
          if (v61 < v66) {
            unint64_t v66 = v61;
          }
          if (v65 <= v60) {
            unint64_t v65 = v60;
          }
          if (v65 == v66) {
            unint64_t v65 = v66 + v62[10] - v62[9];
          }
          v62[7] = v66;
          char v62[8] = v65;
        }
      }
    }
  }
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonBase::CompressedMeshMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PolygonBase::CompressedMeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5833F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PolygonBase::CompressedMeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5833F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A21FC06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A21FC25C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A21FC44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A21FC63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A21FC888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A21FCAD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(unsigned long long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A21FCDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::~MeshSet((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::MeshSet(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 146) = 0u;
  *(_OWORD *)(a1 + 162) = 0u;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 152) = a2;
  if (!a2) {
    operator new();
  }
  unint64_t v4 = (char *)operator new(0x90uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unint64_t v4 = &unk_1EF580F00;
  *((void *)v4 + 3) = a2;
  uint64_t v5 = v4 + 24;
  *((void *)v4 + 4) = 8;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  v4[104] = 0;
  *((void *)v4 + 17) = v4 + 112;
  *((void *)v4 + 14) = &unk_1EF570A88;
  *(void *)&long long v32 = v4 + 24;
  *((void *)&v32 + 1) = v4;
  uint64_t v7 = (uint64_t **)(a2 + 24);
  uint64_t v6 = *(uint64_t **)(a2 + 24);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v6;
        unint64_t v9 = v6[4];
        if ((unint64_t)v5 >= v9) {
          break;
        }
        uint64_t v6 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= (unint64_t)v5) {
        break;
      }
      uint64_t v6 = v8[1];
      if (!v6)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = (uint64_t **)(a2 + 24);
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x30uLL);
    v10[4] = (uint64_t)v5;
    v10[5] = (uint64_t)v4;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    *unint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *uint64_t v7 = v10;
    uint64_t v11 = **(void **)(a2 + 16);
    if (v11)
    {
      *(void *)(a2 + 16) = v11;
      unint64_t v10 = *v7;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 24), v10);
    ++*(void *)(a2 + 32);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v32;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  unint64_t v14 = *(char **)(a1 + 8);
  unint64_t v13 = *(void *)(a1 + 16);
  if ((unint64_t)v14 >= v13)
  {
    uint64_t v16 = *(char **)a1;
    uint64_t v17 = (uint64_t)&v14[-*(void *)a1];
    uint64_t v18 = v17 >> 3;
    unint64_t v19 = (v17 >> 3) + 1;
    if (v19 >> 61) {
      abort();
    }
    uint64_t v20 = v13 - (void)v16;
    if (v20 >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v22 = (char *)operator new(8 * v21);
    unsigned __int8 v23 = &v22[8 * v18];
    *(_WORD *)unsigned __int8 v23 = 0;
    *((_DWORD *)v23 + 1) = 0;
    uint64_t v15 = v23 + 8;
    if (v14 != v16)
    {
      unint64_t v24 = v14 - v16 - 8;
      if (v24 < 0x58) {
        goto LABEL_39;
      }
      if ((unint64_t)(&v14[-v17] - v22) < 0x20) {
        goto LABEL_39;
      }
      uint64_t v25 = (v24 >> 3) + 1;
      double v26 = &v22[8 * v18 - 16];
      uint64_t v27 = v14 - 16;
      uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)double v26 = v29;
        v26 -= 32;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v23 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
      if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          uint64_t v30 = *((void *)v14 - 1);
          v14 -= 8;
          *((void *)v23 - 1) = v30;
          v23 -= 8;
        }
        while (v14 != v16);
      }
    }
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v22[8 * v21];
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(_WORD *)unint64_t v14 = 0;
    *((_DWORD *)v14 + 1) = 0;
    uint64_t v15 = v14 + 8;
  }
  *(void *)(a1 + 8) = v15;
  return a1;
}

void sub_1A21FD1A0(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 168);
  uint64_t v5 = *(void *)(v1 + 160);
  *(void *)(v1 + 160) = 0;
  if (v5) {
    std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](v5);
  }
  ggl::BufferMemory::~BufferMemory(v3);
  ggl::BufferMemory::~BufferMemory(v2);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)(v1 + 24));
  uint64_t v6 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t md::MeshSet<ggl::PolygonBase::CompressedMeshMesh,ggl::PolygonBase::CompressedVbo>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = (void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(void **)(a1 + 24);
    if (v7 != v6)
    {
      do
      {
        unint64_t v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      int v8 = *v5;
    }
    *(void *)(a1 + 32) = v6;
    operator delete(v8);
    char *v5 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  ggl::BufferMemory::operator=((uint64_t *)(a1 + 48), a2 + 48);
  ggl::BufferMemory::operator=((uint64_t *)(a1 + 96), a2 + 96);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  uint64_t v11 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v10;
  if (v11) {
    std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](v11);
  }
  long long v12 = *(_OWORD *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  unint64_t v13 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return a1;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  int v8 = operator new(0xF8uLL);
  unint64_t v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *int v8 = &unk_1EF584620;
  uint64_t v10 = v8 + 3;
  uint64_t v11 = *(void *)(a2 + 24);
  long long v12 = *(std::__shared_weak_count **)(a2 + 32);
  v13[0] = v11;
  v13[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 8, v13, *a3, a3[1], 1);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v9[29] = v7;
  v9[30] = &ggl::PolygonBase::compressedVboReflection;
  v9[3] = &unk_1EF55C1C8;
  v9[28] = &unk_1EF55C1E8;
  *a4 = v10;
  a4[1] = v9;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonBase::CompressedVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF570A88;
}

void *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF570A88;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonBase::CompressedVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<md::MeshSetStorageClient>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = a1 + 112;
  uint64_t result = *(void *)(a1 + 136);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_emplace<md::MeshSetStorageClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580F00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::MeshSetStorageClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A21FDAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void _setupRenderItemBatcherForCullingMask(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10 = 0;
  *(void *)(a1 + 8) = *(void *)a1;
  do
  {
    if ((a4 >> v10))
    {
      uint64_t v11 = *(void *)(a3 + 24 * v10);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 24 * v10 + 8) - v11) >> 3) > a2)
      {
        long long v12 = (uint64_t *)(v11 + 24 * a2);
        uint64_t v13 = *v12;
        uint64_t v14 = v12[1];
        while (v13 != v14)
        {
          uint64_t v19 = *(void *)(v13 + 16);
          uint64_t v15 = *(void *)(a5 + 24);
          if (!v15)
          {
            std::__throw_bad_function_call[abi:nn180100]();
            _addRange(v16, v17, v18);
            return;
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, &v19))
          {
            if (*(void *)(v13 + 8) != *(void *)v13) {
              gm::MultiRange<unsigned long>::push_back((char **)a1, (_OWORD *)v13);
            }
          }
          v13 += 24;
        }
      }
    }
    ++v10;
  }
  while (v10 != 16);
}

void _addRange(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void **)a1;
  unint64_t v4 = *(void **)(a1 + 8);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(void *)a1) >> 3);
  if (v6 <= a2)
  {
    unint64_t v9 = a2 + 1;
    unint64_t v10 = v9 - v6;
    uint64_t v11 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v4) >> 3) >= v9 - v6)
    {
      if (v9 != v6)
      {
        bzero(*(void **)(a1 + 8), 24 * ((24 * v10 - 24) / 0x18) + 24);
        v4 += 3 * ((24 * v10 - 24) / 0x18) + 3;
      }
      *(void *)(a1 + 8) = v4;
    }
    else
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v5) >> 3);
      unint64_t v13 = 0x5555555555555556 * ((v11 - (uint64_t)v5) >> 3);
      if (v13 > v9) {
        unint64_t v9 = v13;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
      }
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_44;
      }
      uint64_t v14 = 24 * v9;
      uint64_t v15 = (char *)operator new(24 * v9);
      uint64_t v16 = &v15[24 * v6];
      unsigned int v17 = &v15[v14];
      bzero(v16, 24 * ((24 * v10 - 24) / 0x18) + 24);
      uint64_t v18 = &v16[24 * ((24 * v10 - 24) / 0x18) + 24];
      if (v4 == v5)
      {
        *(void *)a1 = v16;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v17;
      }
      else
      {
        do
        {
          uint64_t v19 = v16;
          *((void *)v16 - 2) = 0;
          *((void *)v16 - 1) = 0;
          long long v20 = *(_OWORD *)(v4 - 3);
          v4 -= 3;
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          *((void *)v19 - 1) = v4[2];
          void *v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
        }
        while (v4 != v5);
        unint64_t v4 = *(void **)a1;
        unint64_t v21 = *(void **)(a1 + 8);
        *(void *)a1 = v16;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v17;
        if (v21 != v4)
        {
          unint64_t v22 = v21;
          do
          {
            unint64_t v24 = (void *)*(v22 - 3);
            v22 -= 3;
            unsigned __int8 v23 = v24;
            if (v24)
            {
              *(v21 - 2) = v23;
              operator delete(v23);
            }
            unint64_t v21 = v22;
          }
          while (v22 != v4);
        }
      }
      if (v4) {
        operator delete(v4);
      }
    }
    uint64_t v5 = *(void **)a1;
  }
  uint64_t v25 = (char **)&v5[3 * a2];
  uint64_t v27 = v25 + 1;
  double v26 = v25[1];
  uint64_t v28 = *v25;
  uint64_t v29 = v26 - *v25;
  if (v26 != *v25 && *((void *)v26 - 2) == *a3 && *((void *)v26 - 1) == a3[2])
  {
    *((void *)v26 - 2) = a3[1];
    return;
  }
  uint64_t v30 = &v5[3 * a2];
  unint64_t v33 = v30[2];
  long long v32 = v30 + 2;
  unint64_t v31 = v33;
  if ((unint64_t)v26 >= v33)
  {
    uint64_t v36 = v29 / 24;
    unint64_t v37 = v29 / 24 + 1;
    if (v37 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v28) >> 3);
    if (2 * v38 > v37) {
      unint64_t v37 = 2 * v38;
    }
    if (v38 >= 0x555555555555555) {
      unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (!v39)
    {
      uint64_t v40 = 0;
      goto LABEL_38;
    }
    if (v39 <= 0xAAAAAAAAAAAAAAALL)
    {
      uint64_t v40 = (char *)operator new(24 * v39);
LABEL_38:
      uint64_t v41 = &v40[24 * v36];
      *(_OWORD *)uint64_t v41 = *(_OWORD *)a3;
      *((void *)v41 + 2) = a3[2];
      long long v35 = v41 + 24;
      if (v26 != v28)
      {
        do
        {
          long long v42 = *(_OWORD *)(v26 - 24);
          *((void *)v41 - 1) = *((void *)v26 - 1);
          *(_OWORD *)(v41 - 24) = v42;
          v41 -= 24;
          v26 -= 24;
        }
        while (v26 != v28);
        double v26 = *v25;
      }
      *uint64_t v25 = v41;
      void *v27 = v35;
      void *v32 = &v40[24 * v39];
      if (v26) {
        operator delete(v26);
      }
      goto LABEL_43;
    }
LABEL_44:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  long long v34 = *(_OWORD *)a3;
  *((void *)v26 + 2) = a3[2];
  *(_OWORD *)double v26 = v34;
  long long v35 = v26 + 24;
LABEL_43:
  void *v27 = v35;
}

void _addRangeToList(uint64_t a1, __int16 a2, unsigned int a3, void *a4)
{
  if (a2)
  {
    _addRange(a1, a3, a4);
    if ((a2 & 2) == 0)
    {
LABEL_3:
      if ((a2 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  _addRange(a1 + 24, a3, a4);
  if ((a2 & 4) == 0)
  {
LABEL_4:
    if ((a2 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  _addRange(a1 + 48, a3, a4);
  if ((a2 & 8) == 0)
  {
LABEL_5:
    if ((a2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  _addRange(a1 + 72, a3, a4);
  if ((a2 & 0x10) == 0)
  {
LABEL_6:
    if ((a2 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  _addRange(a1 + 96, a3, a4);
  if ((a2 & 0x20) == 0)
  {
LABEL_7:
    if ((a2 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  _addRange(a1 + 120, a3, a4);
  if ((a2 & 0x40) == 0)
  {
LABEL_8:
    if ((a2 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  _addRange(a1 + 144, a3, a4);
  if ((a2 & 0x80) == 0)
  {
LABEL_9:
    if ((a2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  _addRange(a1 + 168, a3, a4);
  if ((a2 & 0x100) == 0)
  {
LABEL_10:
    if ((a2 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  _addRange(a1 + 192, a3, a4);
  if ((a2 & 0x200) == 0)
  {
LABEL_11:
    if ((a2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  _addRange(a1 + 216, a3, a4);
  if ((a2 & 0x400) == 0)
  {
LABEL_12:
    if ((a2 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  _addRange(a1 + 240, a3, a4);
  if ((a2 & 0x800) == 0)
  {
LABEL_13:
    if ((a2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  _addRange(a1 + 264, a3, a4);
  if ((a2 & 0x1000) == 0)
  {
LABEL_14:
    if ((a2 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  _addRange(a1 + 288, a3, a4);
  if ((a2 & 0x2000) == 0)
  {
LABEL_15:
    if ((a2 & 0x4000) == 0) {
      goto LABEL_16;
    }
LABEL_32:
    _addRange(a1 + 336, a3, a4);
    if ((a2 & 0x8000) == 0) {
      return;
    }
    goto LABEL_33;
  }
LABEL_31:
  _addRange(a1 + 312, a3, a4);
  if ((a2 & 0x4000) != 0) {
    goto LABEL_32;
  }
LABEL_16:
  if ((a2 & 0x8000) == 0) {
    return;
  }
LABEL_33:
  _addRange(a1 + 360, a3, a4);
}

uint64_t md::ARBuildingTileData::bounds(md::ARBuildingTileData *this)
{
  return (uint64_t)this + 756;
}

void md::ARBuildingTileData::createDebugNode(void *a1@<X0>, uint64_t a2@<X8>)
{
  md::MapTileData::createDebugNode((uint64_t)a1, a2);
  BYTE7(v45[1]) = 18;
  strcpy((char *)v45, "ARBuildingTileData");
  ChildNode = gdc::DebugTreeNode::createChildNode(a2, v45);
  uint64_t v5 = a1[101];
  BYTE7(v45[1]) = 17;
  strcpy((char *)v45, "VerticesProcessed");
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  int v44 = 1;
  uint64_t v41 = 0;
  uint64_t v40 = v5;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v45, (uint64_t)v39);
  unint64_t v6 = (int8x8_t *)a1[98];
  BYTE7(v45[1]) = 6;
  strcpy((char *)v45, "Bounds");
  uint64_t v7 = gdc::Registry::storage<arComponents::LocalBounds>(v6);
  unint64_t v8 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(v7 + 88) - *(void *)(v7 + 80)) >> 3);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  int v38 = 1;
  uint64_t v35 = 0;
  unint64_t v34 = v8;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v45, (uint64_t)v33);
  unint64_t v9 = (char *)a1[103];
  unint64_t v10 = (char *)a1[102];
  memset(v45, 0, 24);
  uint64_t v11 = v9 - v10;
  uint64_t v30 = (uint64_t)ChildNode;
  if (v9 == v10)
  {
    uint64_t v18 = 0;
    unint64_t v13 = 0;
  }
  else
  {
    if ((unint64_t)v11 >= 0x1FFFFFFFFFFFFFF9) {
      abort();
    }
    unint64_t v12 = (void **)operator new(8 * v11);
    unint64_t v13 = v12;
    uint64_t v14 = (char *)&v12[8 * (v11 >> 3)];
    *(void *)&v45[0] = v12;
    *(void *)&v45[1] = v14;
    uint64_t v15 = (char *)v12;
    do
    {
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 5) = 0;
      *((void *)v15 + 6) = 0;
      *((void *)v15 + 4) = 0;
      *((_DWORD *)v15 + 14) = 0;
      v15 += 64;
    }
    while (v15 != v14);
    *((void *)&v45[0] + 1) = &v12[8 * (v11 >> 3)];
    uint64_t v16 = (char *)a1[102];
    if (v16 != v9)
    {
      uint64_t v18 = (void **)*((void *)&v45[0] + 1);
      unsigned int v17 = *(void ***)&v45[0];
      uint64_t v19 = v14;
      while (1)
      {
        uint64_t v20 = *(void *)v16;
        if (v19 >= v14) {
          break;
        }
        *((void *)v19 + 4) = 0;
        *((void *)v19 + 5) = 0;
        *((void *)v19 + 6) = 0;
        *((_DWORD *)v19 + 14) = 1;
        *((void *)v19 + 1) = v20;
LABEL_8:
        uint64_t v18 = (void **)(v19 + 64);
        *((void *)&v45[0] + 1) = v19 + 64;
        v16 += 8;
        v19 += 64;
        if (v16 == v9) {
          goto LABEL_31;
        }
      }
      uint64_t v21 = (v19 - (char *)v13) >> 6;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 58) {
        abort();
      }
      if ((v14 - (char *)v13) >> 5 > v22) {
        unint64_t v22 = (v14 - (char *)v13) >> 5;
      }
      if ((unint64_t)(v14 - (char *)v13) >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23 >> 58) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v24 = (char *)operator new(v23 << 6);
      uint64_t v25 = &v24[64 * v21];
      *((void *)v25 + 4) = 0;
      *((void *)v25 + 5) = 0;
      *((void *)v25 + 6) = 0;
      uint64_t v14 = &v24[64 * v23];
      *((_DWORD *)v25 + 14) = 1;
      *((void *)v25 + 1) = v20;
      double v26 = v25;
      if (v19 == (char *)v13)
      {
        *(void *)&v45[0] = v25;
        *(void *)&v45[1] = v14;
        double v26 = v25;
        if (!v13) {
          goto LABEL_26;
        }
      }
      else
      {
        do
        {
          long long v27 = *((_OWORD *)v19 - 4);
          *(_OWORD *)(v26 - 55) = *(_OWORD *)(v19 - 55);
          *((_OWORD *)v26 - 4) = v27;
          long long v28 = *((_OWORD *)v19 - 2);
          *((void *)v26 - 2) = *((void *)v19 - 2);
          *((_OWORD *)v26 - 2) = v28;
          *((void *)v19 - 3) = 0;
          *((void *)v19 - 2) = 0;
          *((void *)v19 - 4) = 0;
          *((_DWORD *)v26 - 2) = *((_DWORD *)v19 - 2);
          v26 -= 64;
          v19 -= 64;
        }
        while (v19 != (char *)v13);
        *(void *)&v45[0] = v26;
        *(void *)&v45[1] = v14;
        while (v18 != v17)
        {
          if (*((char *)v18 - 9) < 0) {
            operator delete(*(v18 - 4));
          }
          v18 -= 8;
        }
        unint64_t v13 = v17;
        if (!v17) {
          goto LABEL_26;
        }
      }
      operator delete(v13);
LABEL_26:
      unsigned int v17 = (void **)v26;
      unint64_t v13 = (void **)v26;
      uint64_t v19 = v25;
      goto LABEL_8;
    }
    uint64_t v18 = &v12[8 * (v11 >> 3)];
  }
LABEL_31:
  uint64_t v29 = (char *)operator new(0x20uLL);
  unint64_t v31 = v29;
  long long v32 = xmmword_1A28FD190;
  strcpy(v29, "InteriorAsOutsideBuildingIds");
  gdc::DebugTreeNode::addProperty(v30, (uint64_t)&v31, (uint64_t *)v45);
  operator delete(v29);
  if (v13)
  {
    while (v18 != v13)
    {
      if (*((char *)v18 - 9) < 0) {
        operator delete(*(v18 - 4));
      }
      v18 -= 8;
    }
    operator delete(v13);
  }
}

void sub_1A21FE4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, gdc::DebugTreeNode *a10)
{
  std::vector<gdc::DebugTreeValue>::~vector[abi:nn180100]((void **)(v10 - 128));
  gdc::DebugTreeNode::~DebugTreeNode(a10);
  _Unwind_Resume(a1);
}

uint64_t md::ARBuildingTileData::estimatedCost(md::ARBuildingTileData *this)
{
  uint64_t v1 = *((void *)this + 85);
  if (v1) {
    uint64_t v1 = *(void *)(v1 + 40);
  }
  return *((void *)this + 101) + v1;
}

void md::ARBuildingTileData::~ARBuildingTileData(md::ARBuildingTileData *this)
{
  md::ARBuildingTileData::~ARBuildingTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF5386D8;
  *((void *)this + 79) = &unk_1EF538718;
  md::RegistryManager::removeRegistry(*((md::RegistryManager **)this + 99), this);
  uint64_t v2 = (void *)*((void *)this + 102);
  if (v2)
  {
    *((void *)this + 103) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 90);
  if (v4)
  {
    *((void *)this + 91) = v4;
    operator delete(v4);
  }
  md::MapTileData::~MapTileData(this);
}

void sub_1A21FE62C(_Unwind_Exception *a1)
{
  unint64_t v4 = (void *)*((void *)v1 + 102);
  if (v4)
  {
    *((void *)v1 + 103) = v4;
    operator delete(v4);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  uint64_t v5 = (void *)*((void *)v1 + 90);
  if (v5)
  {
    *((void *)v1 + 91) = v5;
    operator delete(v5);
  }
  md::MapTileData::~MapTileData(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::components::SharedTransformData>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::components::SharedTransformData>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555230;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x1000C40614DFFF0);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::components::SharedTransformData>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555230;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40614DFFF0);
  }
  return a1;
}

uint64_t gdc::Registry::storage<arComponents::LocalTransform>(int8x8_t *a1)
{
  uint64_t v10 = 0x6F871FA174DA9A1FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6F871FA174DA9A1FLL;
    if (*(void *)&v1 <= 0x6F871FA174DA9A1FuLL) {
      uint64_t v3 = 0x6F871FA174DA9A1FuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6F871FA174DA9A1FLL;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6F871FA174DA9A1FLL)
      {
        if (v5[2] == 0x6F871FA174DA9A1FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6F871FA174DA9A1FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6F871FA174DA9A1FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A21FE990(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::AssetDataReference>(int8x8_t *a1)
{
  unint64_t v10 = 0x8FAA2839ECDE4573;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8FAA2839ECDE4573;
    if (*(void *)&v1 <= 0x8FAA2839ECDE4573) {
      unint64_t v3 = 0x8FAA2839ECDE4573 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8FAA2839ECDE4573;
  }
  unint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8FAA2839ECDE4573)
      {
        if (v5[2] == 0x8FAA2839ECDE4573) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8FAA2839ECDE4573) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8FAA2839ECDE4573) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A21FEC00(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::emplace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v38);
  if (v6)
  {
    uint64_t v18 = (char *)a1[11];
    unint64_t v17 = a1[12];
    if ((unint64_t)v18 >= v17)
    {
      uint64_t v21 = (char *)a1[10];
      unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((v18 - v21) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0x666666666666666) {
        goto LABEL_44;
      }
      unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - (void)v21) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x333333333333333) {
        unint64_t v25 = 0x666666666666666;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 > 0x666666666666666) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        double v26 = (char *)operator new(40 * v25);
      }
      else
      {
        double v26 = 0;
      }
      long long v27 = &v26[8 * ((v18 - v21) >> 3)];
      uint64_t v28 = *(void *)(a3 + 8);
      *(void *)long long v27 = *(void *)a3;
      *((void *)v27 + 1) = v28;
      uint64_t v29 = *(void *)(a3 + 16);
      *((void *)v27 + 2) = v29;
      if (v29)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
        uint64_t v21 = (char *)a1[10];
        uint64_t v18 = (char *)a1[11];
      }
      uint64_t v30 = &v26[40 * v25];
      *(_OWORD *)&v26[40 * v22 + 24] = *(_OWORD *)(a3 + 24);
      uint64_t v20 = v27 + 40;
      if (v18 == v21)
      {
        a1[10] = v27;
        a1[11] = v20;
        a1[12] = v30;
      }
      else
      {
        uint64_t v31 = 0;
        do
        {
          long long v32 = &v27[v31];
          unint64_t v33 = &v18[v31];
          *((void *)v32 - 5) = *(void *)&v18[v31 - 40];
          *((_OWORD *)v32 - 2) = *(_OWORD *)&v18[v31 - 32];
          *((void *)v33 - 4) = 0;
          *((void *)v33 - 3) = 0;
          *((_OWORD *)v32 - 1) = *(_OWORD *)&v18[v31 - 16];
          v31 -= 40;
        }
        while (&v18[v31] != v21);
        uint64_t v21 = (char *)a1[10];
        unint64_t v34 = (char *)a1[11];
        a1[10] = &v27[v31];
        a1[11] = v20;
        for (a1[12] = v30; v34 != v21; v34 -= 40)
        {
          uint64_t v35 = (std::__shared_weak_count *)*((void *)v34 - 3);
          if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)uint64_t v18 = *(void *)a3;
      *((void *)v18 + 1) = *(void *)(a3 + 8);
      uint64_t v19 = *(void *)(a3 + 16);
      *((void *)v18 + 2) = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(v18 + 24) = *(_OWORD *)(a3 + 24);
      uint64_t v20 = v18 + 40;
    }
    a1[11] = v20;
    uint64_t v14 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10];
    uint64_t v8 = ((uint64_t)v5 - a1[7]) >> 3;
    uint64_t v9 = v7 + 40 * v8;
    *(void *)uint64_t v9 = *(void *)a3;
    long long v10 = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v11 = *(std::__shared_weak_count **)(v9 + 16);
    *(_OWORD *)(v9 + 8) = v10;
    if (v11)
    {
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    uint64_t v12 = v7 + 40 * v8;
    uint64_t v13 = *(void *)(a3 + 24);
    *(unsigned char *)(v12 + 32) = *(unsigned char *)(a3 + 32);
    *(void *)(v12 + 24) = v13;
    uint64_t v14 = a1[31];
    if (v9 != a1[11])
    {
      uint64_t v15 = (void *)a1[16];
      if (v15)
      {
        while (1)
        {
          uint64_t v40 = &v38;
          uint64_t v41 = 1;
          uint64_t v39 = v14;
          uint64_t v16 = v15[6];
          if (!v16) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v16 + 48))(v16, &v39, &v40);
          uint64_t v15 = (void *)*v15;
          if (!v15) {
            return;
          }
        }
LABEL_43:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_44:
        abort();
      }
      return;
    }
  }
  uint64_t v36 = (void *)a1[22];
  if (v36)
  {
    while (1)
    {
      uint64_t v40 = &v38;
      uint64_t v41 = 1;
      uint64_t v39 = v14;
      uint64_t v37 = v36[6];
      if (!v37) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v37 + 48))(v37, &v39, &v40);
      uint64_t v36 = (void *)*v36;
      if (!v36) {
        return;
      }
    }
    goto LABEL_43;
  }
}

BOOL gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::remove(void *a1, unint64_t a2)
{
  unint64_t v29 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = (void *)(v14 + 40 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  *uint64_t v15 = *(void *)(v16 - 40);
  unint64_t v17 = v15 + 1;
  uint64_t v19 = *(void *)(v16 - 32);
  uint64_t v18 = *(void *)(v16 - 24);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *unint64_t v17 = v19;
  uint64_t v20 = v14 + 40 * v7;
  uint64_t v21 = *(std::__shared_weak_count **)(v20 + 16);
  *(void *)(v20 + 16) = v18;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v14 + 40 * v7;
  uint64_t v23 = *(void *)(v16 - 16);
  *(unsigned char *)(v22 + 32) = *(unsigned char *)(v16 - 8);
  *(void *)(v22 + 24) = v23;
  uint64_t v24 = a1[11];
  unint64_t v25 = *(std::__shared_weak_count **)(v24 - 24);
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  a1[11] = v24 - 40;
  double v26 = (void *)a1[28];
  if (!v26) {
    return 1;
  }
  uint64_t v27 = a1[31];
  while (1)
  {
    v31[0] = &v29;
    v31[1] = 1;
    uint64_t v30 = v27;
    uint64_t v28 = v26[6];
    if (!v28) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v28 + 48))(v28, &v30, v31);
    double v26 = (void *)*v26;
    if (!v26) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::AssetDataReference>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,arComponents::AssetDataReference>::~sparse_map(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    uint64_t v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 24);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*a1;
  if (*a1)
  {
    uint64_t v8 = (void *)a1[1];
    uint64_t v9 = (void *)*a1;
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          MEMORY[0x1A6239270](v10, 0x1000C40104B78CFLL);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)*a1;
    }
    a1[1] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::AssetDataReference>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL gdc::ComponentStorageWrapper<arComponents::LocalTransform>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::LocalTransform>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 12);
  v15 -= 12;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  a1[11] = v15;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::LocalTransform>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::LocalTransform>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void gdc::ComponentStorageWrapper<arComponents::LocalBounds>::emplace(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v58 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((void *)(a1 + 32), (uint64_t)&v58);
  if (v6)
  {
    unint64_t v19 = *(void *)(a1 + 96);
    unint64_t v20 = *(void *)(a1 + 88);
    if (v20 >= v19)
    {
      uint64_t v22 = *(void *)(a1 + 80);
      unint64_t v23 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v20 - v22) >> 3);
      if (v23 + 1 > 0x186186186186186) {
        goto LABEL_67;
      }
      unint64_t v24 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v19 - v22) >> 3);
      uint64_t v25 = 2 * v24;
      if (2 * v24 <= v23 + 1) {
        uint64_t v25 = v23 + 1;
      }
      if (v24 >= 0xC30C30C30C30C3) {
        unint64_t v26 = 0x186186186186186;
      }
      else {
        unint64_t v26 = v25;
      }
      uint64_t v64 = a1 + 96;
      if (v26)
      {
        if (v26 > 0x186186186186186) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v27 = (uint64_t *)operator new(168 * v26);
      }
      else
      {
        uint64_t v27 = 0;
      }
      unint64_t v60 = v27;
      uint64_t v61 = (uint64_t)&v27[21 * v23];
      uint64_t v62 = v61;
      int v63 = (char *)&v27[21 * v26];
      arComponents::LocalBounds::LocalBounds((arComponents::LocalBounds *)v61, (const arComponents::LocalBounds *)a3);
      uint64_t v38 = v61;
      uint64_t v39 = v62 + 168;
      uint64_t v40 = *(char **)(a1 + 80);
      uint64_t v41 = *(char **)(a1 + 88);
      if (v41 == v40)
      {
        *(void *)(a1 + 80) = v61;
        *(void *)(a1 + 88) = v39;
        *(void *)(a1 + 96) = v63;
      }
      else
      {
        uint64_t v42 = 0;
        do
        {
          uint64_t v43 = v38 + v42;
          int v44 = &v41[v42];
          long long v45 = *(_OWORD *)&v41[v42 - 168];
          long long v46 = *(_OWORD *)&v41[v42 - 152];
          *(_OWORD *)(v43 - 136) = *(_OWORD *)&v41[v42 - 136];
          *(_OWORD *)(v43 - 152) = v46;
          *(_OWORD *)(v43 - 168) = v45;
          long long v47 = *(_OWORD *)&v41[v42 - 120];
          long long v48 = *(_OWORD *)&v41[v42 - 104];
          long long v49 = *(_OWORD *)&v41[v42 - 88];
          *(void *)(v43 - 72) = *(void *)&v41[v42 - 72];
          *(_OWORD *)(v43 - 88) = v49;
          *(_OWORD *)(v43 - 104) = v48;
          *(_OWORD *)(v43 - 120) = v47;
          *(unsigned char *)(v38 + v42 - 64) = 0;
          unint64_t v50 = (void *)(v38 + v42 - 64);
          *(unsigned char *)(v43 - 40) = 0;
          if (v41[v42 - 40])
          {
            *unint64_t v50 = 0;
            *(void *)(v38 + v42 - 56) = 0;
            *(void *)(v38 + v42 - 48) = 0;
            *(_OWORD *)unint64_t v50 = *((_OWORD *)v44 - 4);
            *(void *)(v43 - 48) = *((void *)v44 - 6);
            *((void *)v44 - 8) = 0;
            *((void *)v44 - 7) = 0;
            *((void *)v44 - 6) = 0;
            *(unsigned char *)(v43 - 40) = 1;
          }
          *(unsigned char *)(v43 - 32) = 0;
          *(unsigned char *)(v43 - 8) = 0;
          if (*(v44 - 8))
          {
            int v51 = &v41[v42];
            *(void *)(v43 - 32) = 0;
            *(void *)(v43 - 24) = 0;
            *(void *)(v43 - 16) = 0;
            *(_OWORD *)(v43 - 32) = *(_OWORD *)&v41[v42 - 32];
            *(void *)(v38 + v42 - 16) = *(void *)&v41[v42 - 16];
            *((void *)v51 - 4) = 0;
            *((void *)v51 - 3) = 0;
            *((void *)v51 - 2) = 0;
            *(unsigned char *)(v43 - 8) = 1;
          }
          v42 -= 168;
        }
        while (&v41[v42] != v40);
        uint64_t v41 = *(char **)(a1 + 80);
        int v52 = *(char **)(a1 + 88);
        *(void *)(a1 + 80) = v38 + v42;
        *(void *)(a1 + 88) = v39;
        *(void *)(a1 + 96) = v63;
        while (v52 != v41)
        {
          if (*(v52 - 8))
          {
            int v53 = (void *)*((void *)v52 - 4);
            if (v53)
            {
              *((void *)v52 - 3) = v53;
              operator delete(v53);
            }
          }
          if (*(v52 - 40))
          {
            unint64_t v54 = (void *)*((void *)v52 - 8);
            if (v54)
            {
              *((void *)v52 - 7) = v54;
              operator delete(v54);
            }
          }
          v52 -= 168;
        }
      }
      if (v41) {
        operator delete(v41);
      }
      *(void *)(a1 + 88) = v39;
    }
    else
    {
      arComponents::LocalBounds::LocalBounds(*(arComponents::LocalBounds **)(a1 + 88), (const arComponents::LocalBounds *)a3);
      *(void *)(a1 + 88) = v20 + 168;
      *(void *)(a1 + 88) = v20 + 168;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 80);
    uint64_t v8 = ((uint64_t)v5 - *(void *)(a1 + 56)) >> 3;
    uint64_t v9 = v7 + 168 * v8;
    long long v11 = a3[4];
    long long v10 = a3[5];
    long long v12 = a3[3];
    *(void *)(v9 + 96) = *((void *)a3 + 12);
    *(_OWORD *)(v9 + 64) = v11;
    *(_OWORD *)(v9 + 80) = v10;
    *(_OWORD *)(v9 + 48) = v12;
    long long v13 = *a3;
    long long v14 = a3[2];
    *(_OWORD *)(v9 + 16) = a3[1];
    *(_OWORD *)(v9 + 32) = v14;
    *(_OWORD *)uint64_t v9 = v13;
    uint64_t v15 = (void **)(v9 + 104);
    int v16 = (void *)a3 + 13;
    unint64_t v17 = (unsigned char *)(v9 + 128);
    if (*(unsigned __int8 *)(v9 + 128) == *((unsigned __int8 *)a3 + 128))
    {
      if (*(unsigned char *)(v9 + 128))
      {
        uint64_t v18 = *v15;
        if (*v15)
        {
          *(void *)(v7 + 168 * v8 + 112) = v18;
          operator delete(v18);
          *uint64_t v15 = 0;
          *(void *)(v9 + 112) = 0;
          *(void *)(v9 + 120) = 0;
        }
        *(_OWORD *)uint64_t v15 = *(long long *)((char *)a3 + 104);
        *(void *)(v7 + 168 * v8 + 120) = *((void *)a3 + 15);
        void *v16 = 0;
        *((void *)a3 + 14) = 0;
        *((void *)a3 + 15) = 0;
      }
    }
    else if (*(unsigned char *)(v9 + 128))
    {
      uint64_t v21 = *v15;
      if (*v15)
      {
        *(void *)(v7 + 168 * v8 + 112) = v21;
        operator delete(v21);
      }
      *unint64_t v17 = 0;
    }
    else
    {
      *uint64_t v15 = 0;
      *(void *)(v9 + 112) = 0;
      *(void *)(v9 + 120) = 0;
      *(_OWORD *)uint64_t v15 = *(long long *)((char *)a3 + 104);
      *(void *)(v7 + 168 * v8 + 120) = *((void *)a3 + 15);
      void *v16 = 0;
      *((void *)a3 + 14) = 0;
      *((void *)a3 + 15) = 0;
      *unint64_t v17 = 1;
    }
    uint64_t v28 = v7 + 168 * v8;
    int v31 = *(unsigned __int8 *)(v28 + 160);
    uint64_t v30 = (unsigned char *)(v28 + 160);
    int v29 = v31;
    long long v32 = (void **)(v30 - 24);
    if (v31 == *((unsigned __int8 *)a3 + 160))
    {
      if ((long long *)v9 != a3 && v29 != 0) {
        std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)v32, *((void *)a3 + 17), *((char **)a3 + 18), (uint64_t)(*((void *)a3 + 18) - *((void *)a3 + 17)) >> 4);
      }
    }
    else if (v29)
    {
      unint64_t v34 = *v32;
      if (v34)
      {
        *(void *)(v7 + 168 * v8 + 144) = v34;
        operator delete(v34);
      }
      *uint64_t v30 = 0;
    }
    else
    {
      char *v32 = 0;
      *((void *)v30 - 2) = 0;
      *((void *)v30 - 1) = 0;
      *(_OWORD *)long long v32 = *(long long *)((char *)a3 + 136);
      *(void *)(v7 + 168 * v8 + 152) = *((void *)a3 + 19);
      *((void *)a3 + 17) = 0;
      *((void *)a3 + 18) = 0;
      *((void *)a3 + 19) = 0;
      *uint64_t v30 = 1;
    }
    if (v9 != *(void *)(a1 + 88))
    {
      uint64_t v35 = *(void **)(a1 + 128);
      if (v35)
      {
        uint64_t v36 = *(void *)(a1 + 248);
        while (1)
        {
          unint64_t v60 = &v58;
          uint64_t v61 = 1;
          uint64_t v59 = v36;
          uint64_t v37 = v35[6];
          if (!v37) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v37 + 48))(v37, &v59, &v60);
          uint64_t v35 = (void *)*v35;
          if (!v35) {
            return;
          }
        }
LABEL_66:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_67:
        abort();
      }
      return;
    }
  }
  unint64_t v55 = *(void **)(a1 + 176);
  if (v55)
  {
    uint64_t v56 = *(void *)(a1 + 248);
    while (1)
    {
      unint64_t v60 = &v58;
      uint64_t v61 = 1;
      uint64_t v59 = v56;
      uint64_t v57 = v55[6];
      if (!v57) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v57 + 48))(v57, &v59, &v60);
      unint64_t v55 = (void *)*v55;
      if (!v55) {
        return;
      }
    }
    goto LABEL_66;
  }
}

void sub_1A21FFA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<arComponents::LocalBounds>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A21FFA88(_Unwind_Exception *a1)
{
  *(void *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

arComponents::LocalBounds *arComponents::LocalBounds::LocalBounds(arComponents::LocalBounds *this, const arComponents::LocalBounds *a2)
{
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v5;
  *(_OWORD *)this = v4;
  long long v6 = *((_OWORD *)a2 + 3);
  long long v7 = *((_OWORD *)a2 + 4);
  long long v8 = *((_OWORD *)a2 + 5);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((_OWORD *)this + 4) = v7;
  *((_OWORD *)this + 5) = v8;
  *((_OWORD *)this + 3) = v6;
  *((unsigned char *)this + 104) = 0;
  *((unsigned char *)this + 128) = 0;
  if (*((unsigned char *)a2 + 128))
  {
    *((void *)this + 13) = 0;
    *((void *)this + 14) = 0;
    *((void *)this + 15) = 0;
    long long v10 = (unsigned char *)*((void *)a2 + 13);
    uint64_t v9 = (unsigned char *)*((void *)a2 + 14);
    int64_t v11 = v9 - v10;
    if (v9 != v10)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v11 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
        abort();
      }
      long long v12 = (char *)operator new(v11);
      *((void *)this + 13) = v12;
      *((void *)this + 14) = v12;
      *((void *)this + 15) = &v12[8 * (v11 >> 3)];
      size_t v13 = 24 * ((v11 - 24) / 0x18uLL) + 24;
      memcpy(v12, v10, v13);
      *((void *)this + 14) = &v12[v13];
    }
    *((unsigned char *)this + 128) = 1;
  }
  *((unsigned char *)this + 136) = 0;
  *((unsigned char *)this + 160) = 0;
  if (*((unsigned char *)a2 + 160))
  {
    *((void *)this + 17) = 0;
    *((void *)this + 18) = 0;
    *((void *)this + 19) = 0;
    if (this != a2) {
      std::vector<gm::Matrix<double,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,2,1>*,gm::Matrix<double,2,1>*>((uint64_t)this + 136, *((void *)a2 + 17), *((char **)a2 + 18), (uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 4);
    }
    *((unsigned char *)this + 160) = 1;
  }
  return this;
}

void sub_1A21FFBE0(_Unwind_Exception *exception_object)
{
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 144) = v5;
    operator delete(v5);
  }
  if (*(unsigned char *)(v1 + 160))
  {
    long long v6 = *v2;
    if (*v2)
    {
      *(void *)(v1 + 144) = v6;
      operator delete(v6);
    }
  }
  if (*(unsigned char *)(v1 + 128))
  {
    long long v7 = *v3;
    if (*v3)
    {
      *(void *)(v1 + 112) = v7;
      operator delete(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<arComponents::LocalBounds>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 168;
    if (*(unsigned char *)(i - 8))
    {
      long long v4 = *(void **)(i - 32);
      if (v4)
      {
        *(void *)(i - 24) = v4;
        operator delete(v4);
      }
    }
    if (*(unsigned char *)(i - 40))
    {
      long long v5 = *(void **)(i - 64);
      if (v5)
      {
        *(void *)(i - 56) = v5;
        operator delete(v5);
      }
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t md::SelectedPolygonTileResourceFetcher::tileKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F411C2D0](**(unsigned int **)(a3 + 8), *(unsigned int *)(*(void *)(a3 + 8) + 4), *(unsigned int *)(*(void *)(a3 + 8) + 8), *(void *)(*(void *)(a3 + 8) + 16));
}

void md::SelectedPolygonTileResourceFetcher::~SelectedPolygonTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'altitude::ObjectTreeLoader::onTileComponentDataRelease(altitude::ObjectTreeLoader *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
}

void altitude::ObjectTreeLoader::onTileComponentDataRelease(altitude::ObjectTreeLoader *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)a3 + 2))
  {
    uint64_t v4 = *((void *)a3 + 15);
    if (v4)
    {
      uint64_t v34 = *(void *)(v4 + 128);
      if (v34)
      {
        long long v5 = *(void **)v34;
        uint64_t v35 = *(void **)(v34 + 8);
        if (*(void **)v34 != v35)
        {
          long long v6 = (void *)((char *)this + 200);
          do
          {
            uint64_t v7 = *v5;
            long long v8 = (std::__shared_weak_count *)v5[1];
            uint64_t v9 = *v5;
            if (v8)
            {
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v9 = *v5;
            }
            uint64_t v37 = v8;
            long long v10 = *(unint64_t **)(v9 + 32);
            int64_t v11 = *(unint64_t **)(v9 + 40);
            if (v10 != v11)
            {
              unsigned int v12 = *(_DWORD *)(v7 + 56);
              unsigned int v13 = HIDWORD(*(void *)(v34 + 112));
              unsigned int v14 = *(void *)(v34 + 112);
              uint64_t v36 = v5;
              do
              {
                unint64_t v16 = *v10;
                if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                }
                unint64_t v17 = GEOGetVectorKitVKDefaultLog_log;
                if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)__n128 buf = 67109888;
                  unsigned int v39 = v14;
                  __int16 v40 = 1024;
                  unsigned int v41 = v13;
                  __int16 v42 = 1024;
                  unsigned int v43 = v12;
                  __int16 v44 = 2048;
                  unint64_t v45 = v16;
                  _os_log_impl(&dword_1A1780000, v17, OS_LOG_TYPE_DEBUG, "Unregister Model Placeholder [%u, %u, %u]->%p", buf, 0x1Eu);
                }
                uint64_t v18 = (uint64_t *)*v6;
                if (*v6)
                {
                  unint64_t v19 = v6;
                  do
                  {
                    while (*((_DWORD *)v18 + 8) < v14 || *((_DWORD *)v18 + 9) < v13 || *((_DWORD *)v18 + 10) < v12)
                    {
                      uint64_t v18 = (uint64_t *)v18[1];
                      if (!v18) {
                        goto LABEL_25;
                      }
                    }
                    unint64_t v19 = v18;
                    uint64_t v18 = (uint64_t *)*v18;
                  }
                  while (v18);
LABEL_25:
                  if (v19 != v6
                    && v14 >= *((_DWORD *)v19 + 8)
                    && v13 >= *((_DWORD *)v19 + 9)
                    && v12 >= *((_DWORD *)v19 + 10))
                  {
                    unint64_t v20 = (uint64_t *)v19[7];
                    if (v20)
                    {
                      uint64_t v21 = v19 + 7;
                      uint64_t v22 = (void *)v19[7];
                      do
                      {
                        unint64_t v23 = v22[4];
                        BOOL v24 = v23 >= v16;
                        if (v23 >= v16) {
                          uint64_t v25 = v22;
                        }
                        else {
                          uint64_t v25 = v22 + 1;
                        }
                        if (v24) {
                          uint64_t v21 = v22;
                        }
                        uint64_t v22 = (void *)*v25;
                      }
                      while (*v25);
                      if (v21 != v19 + 7 && v21[4] <= v16)
                      {
                        unint64_t v26 = (uint64_t *)v21[1];
                        uint64_t v27 = v21;
                        if (v26)
                        {
                          do
                          {
                            uint64_t v28 = v26;
                            unint64_t v26 = (uint64_t *)*v26;
                          }
                          while (v26);
                        }
                        else
                        {
                          do
                          {
                            uint64_t v28 = (uint64_t *)v27[2];
                            BOOL v29 = *v28 == (void)v27;
                            uint64_t v27 = v28;
                          }
                          while (!v29);
                        }
                        if ((uint64_t *)v19[6] == v21) {
                          v19[6] = v28;
                        }
                        --v19[8];
                        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v20, v21);
                        operator delete(v21);
                      }
                    }
                    long long v5 = v36;
                    if (!v19[8])
                    {
                      uint64_t v30 = (void *)v19[1];
                      int v31 = v19;
                      if (v30)
                      {
                        do
                        {
                          long long v32 = v30;
                          uint64_t v30 = (void *)*v30;
                        }
                        while (v30);
                      }
                      else
                      {
                        do
                        {
                          long long v32 = (void *)v31[2];
                          BOOL v29 = *v32 == (void)v31;
                          int v31 = v32;
                        }
                        while (!v29);
                      }
                      if (*((void **)this + 24) == v19) {
                        *((void *)this + 24) = v32;
                      }
                      uint64_t v15 = (uint64_t *)*((void *)this + 25);
                      --*((void *)this + 26);
                      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v15, v19);
                      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((void *)v19[7]);
                      operator delete(v19);
                    }
                  }
                }
                ++v10;
              }
              while (v10 != v11);
            }
            if (v37)
            {
              if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, altitude::Tile *))v37->__on_zero_shared)(v37, a2);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v5 += 2;
          }
          while (v5 != v35);
        }
      }
    }
  }
}

void non-virtual thunk to'altitude::ObjectTreeLoader::onTileComponentDataLoaded(altitude::ObjectTreeLoader *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
}

void altitude::ObjectTreeLoader::onTileComponentDataLoaded(altitude::ObjectTreeLoader *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)a3 + 2))
  {
    uint64_t v4 = *((void *)a3 + 15);
    if (v4)
    {
      uint64_t v44 = *(void *)(v4 + 128);
      if (v44)
      {
        long long v5 = *(void **)v44;
        unsigned int v43 = *(void **)(v44 + 8);
        if (*(void **)v44 != v43)
        {
          uint64_t v7 = (uint64_t **)((char *)this + 200);
          do
          {
            uint64_t v8 = *v5;
            uint64_t v9 = (std::__shared_weak_count *)v5[1];
            if (v9) {
              atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned int v11 = *(_DWORD *)(v44 + 112);
            unsigned int v10 = *(_DWORD *)(v44 + 116);
            unsigned int v12 = *(_DWORD *)(v8 + 56);
            unsigned int v13 = (char *)*((void *)this + 21);
            unsigned int v14 = (char *)*((void *)this + 22);
            uint64_t v15 = v13;
            if (v13 != v14)
            {
              while (*(_DWORD *)v15 != v11 || *((_DWORD *)v15 + 1) != v10 || *((_DWORD *)v15 + 2) != v12)
              {
                v15 += 48;
                if (v15 == v14)
                {
                  uint64_t v15 = (char *)*((void *)this + 22);
                  break;
                }
              }
            }
            unint64_t v45 = v9;
            uint64_t v46 = v5;
            BOOL v48 = v15 == v14 || *(_DWORD *)&v13[16 * ((v15 - v13) >> 4) + 40] == -1;
            unint64_t v17 = *(unint64_t **)(v8 + 32);
            unint64_t v16 = *(unint64_t **)(v8 + 40);
            long long v47 = v16;
            while (v17 != v16)
            {
              unint64_t v20 = *v17;
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              uint64_t v21 = GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__n128 buf = 67109888;
                unsigned int v50 = v11;
                __int16 v51 = 1024;
                unsigned int v52 = v10;
                __int16 v53 = 1024;
                unsigned int v54 = v12;
                __int16 v55 = 2048;
                unint64_t v56 = v20;
                _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_DEBUG, "Register Model Placeholder [%u, %u, %u]->%p", buf, 0x1Eu);
              }
              uint64_t v22 = (char *)*((void *)this + 21);
              unint64_t v23 = (char *)*((void *)this + 22);
              BOOL v24 = v22;
              if (v22 != v23)
              {
                while (*(_DWORD *)v24 != v11 || *((_DWORD *)v24 + 1) != v10 || *((_DWORD *)v24 + 2) != v12)
                {
                  v24 += 48;
                  if (v24 == v23) {
                    goto LABEL_42;
                  }
                }
              }
              if (v24 == v23 || *(_DWORD *)&v22[16 * ((v24 - v22) >> 4) + 40] == -1) {
LABEL_42:
              }
                char v25 = 1;
              else {
                char v25 = 0;
              }
              *(unsigned char *)(v20 + 180) = v25;
              unint64_t v26 = *v7;
              uint64_t v27 = v7;
              uint64_t v28 = (char *)v7;
              if (*v7)
              {
                while (1)
                {
                  while (1)
                  {
                    uint64_t v28 = (char *)v26;
                    unsigned int v35 = *((_DWORD *)v26 + 8);
                    if (v11 >= v35)
                    {
                      unsigned int v36 = *((_DWORD *)v28 + 9);
                      if (v10 >= v36)
                      {
                        unsigned int v37 = *((_DWORD *)v28 + 10);
                        if (v12 >= v37) {
                          break;
                        }
                      }
                    }
                    unint64_t v26 = *(uint64_t **)v28;
                    uint64_t v27 = (uint64_t **)v28;
                    if (!*(void *)v28) {
                      goto LABEL_44;
                    }
                  }
                  BOOL v38 = v35 >= v11 && v36 >= v10;
                  if (v38 && v37 >= v12) {
                    break;
                  }
                  unint64_t v26 = (uint64_t *)*((void *)v28 + 1);
                  if (!v26)
                  {
                    uint64_t v27 = (uint64_t **)(v28 + 8);
                    goto LABEL_44;
                  }
                }
              }
              else
              {
LABEL_44:
                BOOL v29 = v28;
                uint64_t v28 = (char *)operator new(0x48uLL);
                *((_DWORD *)v28 + 8) = v11;
                *((_DWORD *)v28 + 9) = v10;
                *((_DWORD *)v28 + 10) = v12;
                *((void *)v28 + 8) = 0;
                *((void *)v28 + 7) = 0;
                *((void *)v28 + 6) = v28 + 56;
                *(void *)uint64_t v28 = 0;
                *((void *)v28 + 1) = 0;
                *((void *)v28 + 2) = v29;
                uint64_t *v27 = (uint64_t *)v28;
                uint64_t v30 = **((void **)this + 24);
                int v31 = (uint64_t *)v28;
                if (v30)
                {
                  *((void *)this + 24) = v30;
                  int v31 = *v27;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 25), v31);
                ++*((void *)this + 26);
              }
              unint64_t v33 = (uint64_t **)(v28 + 56);
              long long v32 = (uint64_t *)*((void *)v28 + 7);
              if (v32)
              {
                while (1)
                {
                  while (1)
                  {
                    uint64_t v34 = (uint64_t **)v32;
                    unint64_t v40 = v32[4];
                    if (v40 <= v20) {
                      break;
                    }
                    long long v32 = *v34;
                    unint64_t v33 = v34;
                    if (!*v34) {
                      goto LABEL_67;
                    }
                  }
                  if (v40 >= v20) {
                    break;
                  }
                  long long v32 = v34[1];
                  if (!v32)
                  {
                    unint64_t v33 = v34 + 1;
                    goto LABEL_67;
                  }
                }
              }
              else
              {
                uint64_t v34 = (uint64_t **)(v28 + 56);
LABEL_67:
                unsigned int v41 = (uint64_t *)operator new(0x28uLL);
                v41[4] = v20;
                *unsigned int v41 = 0;
                v41[1] = 0;
                v41[2] = (uint64_t)v34;
                *unint64_t v33 = v41;
                uint64_t v42 = **((void **)v28 + 6);
                if (v42)
                {
                  *((void *)v28 + 6) = v42;
                  uint64_t v18 = *v33;
                }
                else
                {
                  uint64_t v18 = v41;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v28 + 7), v18);
                ++*((void *)v28 + 8);
              }
              uint64_t v19 = *v17++;
              *(unsigned char *)(v19 + 180) = v48;
              unint64_t v16 = v47;
            }
            if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, altitude::Tile *))v45->__on_zero_shared)(v45, a2);
              std::__shared_weak_count::__release_weak(v45);
            }
            long long v5 = v46 + 2;
          }
          while (v46 + 2 != v43);
        }
      }
    }
  }
}

void non-virtual thunk to'altitude::ObjectTreeLoader::~ObjectTreeLoader(std::mutex *this)
{
  *(void *)&this[-1].__m_.__opaque[16] = &unk_1EF569638;
  this->__m_.__sig = (uint64_t)&unk_1EF569670;
  std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(*(void **)&this[2].__m_.__opaque[24]);
  uint64_t v2 = this + 2;
  std::vector<altitude::ObjectTreeModel>::__destroy_vector::operator()[abi:nn180100]((void ***)&v2);
  std::mutex::~mutex(this + 1);
  std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(*(void **)&this->__m_.__opaque[40]);
  *(void *)&this[-1].__m_.__opaque[16] = &unk_1EF567F78;
  if (this[-1].__m_.__opaque[47] < 0) {
    operator delete(*(void **)&this[-1].__m_.__opaque[24]);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::mutex *v2;

  *(void *)&this[-1].__m_.__opaque[16] = &unk_1EF569638;
  this->__m_.__sig = (uint64_t)&unk_1EF569670;
  std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(*(void **)&this[2].__m_.__opaque[24]);
  uint64_t v2 = this + 2;
  std::vector<altitude::ObjectTreeModel>::__destroy_vector::operator()[abi:nn180100]((void ***)&v2);
  std::mutex::~mutex(this + 1);
  std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(*(void **)&this->__m_.__opaque[40]);
  *(void *)&this[-1].__m_.__opaque[16] = &unk_1EF567F78;
  if (this[-1].__m_.__opaque[47] < 0) {
    operator delete(*(void **)&this[-1].__m_.__opaque[24]);
  }
}

void std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(*a1);
    std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(a1[1]);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((void *)a1[7]);
    operator delete(a1);
  }
}

void std::vector<altitude::ObjectTreeModel>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      unsigned int v13 = a1;
      do
      {
        uint64_t v7 = *((void *)v4 - 4);
        if (v7)
        {
          uint64_t v8 = *((void *)v4 - 3);
          long long v6 = (void *)*((void *)v4 - 4);
          if (v8 != v7)
          {
            uint64_t v9 = v8 - 48;
            do
            {
              unsigned int v10 = *(std::__shared_weak_count **)(v8 - 16);
              if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
              *(void *)(v8 - 48) = off_1EF5677B0;
              uint64_t v11 = *(void *)(v8 - 40);
              if (v11) {
                atomic_fetch_add((atomic_uint *volatile)(v11 + 128), 0xFFFFFFFF);
              }
              unsigned int v12 = *(std::__shared_weak_count **)(v8 - 32);
              if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
              v8 -= 48;
              v9 -= 48;
            }
            while (v8 != v7);
            long long v6 = (void *)*((void *)v4 - 4);
          }
          *((void *)v4 - 3) = v7;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      long long v5 = **v13;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(*a1);
    std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(a1[1]);
    uint64_t v2 = a1[6];
    if (v2)
    {
      uint64_t v3 = a1[7];
      uint64_t v4 = (void *)a1[6];
      if (v3 != v2)
      {
        do
        {
          long long v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          v3 -= 16;
        }
        while (v3 != v2);
        uint64_t v4 = (void *)a1[6];
      }
      a1[7] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

void altitude::ObjectTreeLoader::~ObjectTreeLoader(altitude::ObjectTreeLoader *this)
{
  *(void *)this = &unk_1EF569638;
  *((void *)this + 5) = &unk_1EF569670;
  std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(*((void **)this + 25));
  uint64_t v2 = (void **)((char *)this + 168);
  std::vector<altitude::ObjectTreeModel>::__destroy_vector::operator()[abi:nn180100](&v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(*((void **)this + 11));
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1A6239270);
}

{
  void **v2;

  *(void *)this = &unk_1EF569638;
  *((void *)this + 5) = &unk_1EF569670;
  std::__tree<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::__map_value_compare<altitude::ObjectTreeModelKey,std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>,std::less<altitude::ObjectTreeModelKey>,true>,std::allocator<std::__value_type<altitude::ObjectTreeModelKey,std::set<altitude::Renderable *>>>>::destroy(*((void **)this + 25));
  uint64_t v2 = (void **)((char *)this + 168);
  std::vector<altitude::ObjectTreeModel>::__destroy_vector::operator()[abi:nn180100](&v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 104));
  std::__tree<std::__value_type<int,karo::media::C3mmObjectTree>,std::__map_value_compare<int,std::__value_type<int,karo::media::C3mmObjectTree>,std::less<int>,true>,std::allocator<std::__value_type<int,karo::media::C3mmObjectTree>>>::destroy(*((void **)this + 11));
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void altitude::ObjectTreeLoader::traverse(uint64_t a1, int *a2, float **a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *a3;
  double v12 = *((double *)*a3 + 2);
  double v13 = *((double *)*a3 + 3);
  __double2 v14 = __sincos_stret(*((double *)*a3 + 1));
  double v15 = 6378137.0 / sqrt(v14.__sinval * v14.__sinval * -0.00669437999 + 1.0);
  double v16 = (v15 + v13) * v14.__cosval;
  __double2 v17 = __sincos_stret(v12);
  double v18 = v16 * v17.__cosval;
  double v19 = v16 * v17.__sinval;
  double v20 = (v13 + v15 * 0.99330562) * v14.__sinval;
  float v21 = v11[8];
  *(double *)long long v171 = v18;
  *(double *)&v171[1] = v19;
  *(double *)&v171[2] = v20;
  *(double *)&v171[3] = v21;
  if (karo::graphics::View::relates(a4, (uint64_t)v171))
  {
    int v22 = (*(uint64_t (**)(float *))(*(void *)v11 + 16))(v11);
    unint64_t v23 = *a3;
    if (v22)
    {
      if ((*(unsigned int (**)(float *))(*(void *)v23 + 16))(v23) != 1) {
        return;
      }
      double v25 = *(double *)(a4 + 120);
      BOOL v24 = (double *)(a4 + 120);
      double v26 = v24[12] + v18 * v25 + v19 * v24[4] + v20 * v24[8];
      unsigned int v27 = *(_DWORD *)(a5 + 48) - *(_DWORD *)(a5 + 40);
      double v28 = 1.0 / (v24[15] + v24[3] * v18 + v24[7] * v19 + v24[11] * v20);
      double v29 = v28 * (v24[13] + v24[1] * v18 + v24[5] * v19 + v24[9] * v20);
      double v30 = v28 * (v24[14] + v24[2] * v18 + v24[6] * v19 + v24[10] * v20);
      gm::Matrix<double,4,4>::inverted<int,void>((double *)buf, v24);
      double v31 = 0.5 / (double)v27 + v28 * v26;
      double v32 = v189 + v29 * v182 + v31 * *(double *)buf + v185 * v30;
      double v33 = v190 + *(double *)v181 * v31 + *(double *)&v183 * v29 + v186 * v30;
      double v34 = *(double *)&v191 + *(double *)&v181[8] * v31 + *((double *)&v183 + 1) * v29 + v187 * v30;
      double v35 = 1.0 / (v192 + *(double *)&v181[16] * v31 + v184 * v29 + v188 * v30);
      double v36 = sqrt(-(v18 - v35 * v32) * -(v18 - v35 * v32)+ -(v19 - v35 * v33) * -(v19 - v35 * v33)+ -(v20 - v35 * v34) * -(v20 - v35 * v34));
      *(float *)&double v36 = v36;
      float v37 = *(float *)(a1 + 216);
      unsigned int v39 = *a3;
      BOOL v38 = (atomic_ullong *)a3[1];
      if (v38) {
        atomic_fetch_add_explicit(v38 + 1, 1uLL, memory_order_relaxed);
      }
      unint64_t v40 = (float32x4_t *)*((void *)v39 + 5);
      unsigned int v41 = (float *)*((void *)v39 + 6);
      *(float *)&double v36 = *(float *)&v36 / v37;
      if (v40 == (float32x4_t *)v41)
      {
        unsigned int v43 = 0;
      }
      else
      {
        unint64_t v42 = (char *)v41 - (char *)v40 - 4;
        if (v42 > 0x1B)
        {
          uint64_t v49 = (v42 >> 2) + 1;
          float32x4_t v50 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v36, 0);
          __int16 v51 = v40 + 1;
          int32x4_t v52 = 0uLL;
          uint64_t v53 = v49 & 0x7FFFFFFFFFFFFFF8;
          int32x4_t v54 = 0uLL;
          do
          {
            int32x4_t v52 = vsubq_s32(v52, vcgtq_f32(v50, v51[-1]));
            int32x4_t v54 = vsubq_s32(v54, vcgtq_f32(v50, *v51));
            v51 += 2;
            v53 -= 8;
          }
          while (v53);
          unsigned int v43 = vaddvq_s32(vaddq_s32(v54, v52));
          if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_28;
          }
          uint64_t v44 = &v40->f32[v49 & 0x7FFFFFFFFFFFFFF8];
        }
        else
        {
          unsigned int v43 = 0;
          uint64_t v44 = (float *)*((void *)v39 + 5);
        }
        do
        {
          float v55 = *v44++;
          if (v55 < *(float *)&v36) {
            ++v43;
          }
        }
        while (v44 != v41);
      }
LABEL_28:
      unsigned int v56 = ((unint64_t)((char *)v41 - (char *)v40) >> 2) - 1;
      if (v43 >= v56) {
        unsigned int v57 = v56;
      }
      else {
        unsigned int v57 = v43;
      }
      if ((float)(*(float *)&v36 / v40->f32[v57]) >= 5.0) {
        goto LABEL_171;
      }
      int v58 = *a2;
      int v59 = a2[1];
      unsigned int v60 = *((_DWORD *)v39 + 9);
      uint64_t v61 = *(char **)(a1 + 168);
      uint64_t v62 = *(char **)(a1 + 176);
      unsigned int v163 = (uint64_t *)a1;
      int v63 = v61;
      if (v61 != v62)
      {
        while (*(_DWORD *)v63 != v58 || *((_DWORD *)v63 + 1) != v59 || *((_DWORD *)v63 + 2) != v60)
        {
          v63 += 48;
          if (v63 == v62)
          {
            int v63 = *(char **)(a1 + 176);
            break;
          }
        }
      }
      if (v63 != v62)
      {
        uint64_t v64 = &v61[16 * ((v63 - v61) >> 4)];
        uint64_t v67 = *((void *)v64 + 2);
        unint64_t v66 = (uint64_t *)(v64 + 16);
        uint64_t v65 = v67;
        if (!*(unsigned char *)(v67 + 48 * v57 + 44))
        {
          uint64_t v68 = &v61[16 * ((v63 - v61) >> 4)];
          int v70 = *((_DWORD *)v68 + 11);
          long long v69 = (unsigned int *)(v68 + 44);
          if (v70 != v57)
          {
            size_t v164 = v69;
            __n128 v71 = v38;
            *((void *)&v173 + 1) = v60;
            LODWORD(v173) = 63;
            DWORD1(v173) = v57;
            *(double *)__n128 buf = 0.0;
            *(_OWORD *)unint64_t v181 = v173;
            double v182 = 0.0;
            *(void *)&long long v183 = 0;
            *(void *)&v181[16] = 0;
            HIBYTE(v184) = 0;
            double v185 = 0.0;
            double v186 = 0.0;
            double v187 = 0.0;
            double v188 = 0.0;
            HIBYTE(v190) = 0;
            uint64_t v191 = 0x656C707061;
            char v193 = 5;
            uint64_t v194 = 0x656C707061;
            char v195 = 5;
            int v196 = 0;
            __int16 v197 = 1;
            char v198 = 1;
            int v199 = v58;
            int v200 = v59;
            uint64_t v201 = 0x7FFFFFFFLL;
            int v202 = 0;
            altitude::C3bRequestManager::requestC3b((uint64_t)&v177, v163[8], &v173, (uint64_t)buf, 0, 0, 1u, 0xFFFFFFFF);
            uint64_t v72 = *v66 + 48 * v57;
            uint64_t v73 = *(void *)(v72 + 8);
            if (v73) {
              atomic_fetch_add((atomic_uint *volatile)(v73 + 128), 0xFFFFFFFF);
            }
            long long v74 = v178;
            unint64_t v75 = v179;
            if (v179) {
              atomic_fetch_add_explicit(&v179->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v76 = *(std::__shared_weak_count **)(v72 + 16);
            *(void *)(v72 + 8) = v74;
            *(void *)(v72 + 16) = v75;
            if (v76)
            {
              if (!atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
              long long v74 = *(atomic_uint **)(v72 + 8);
            }
            if (v74) {
              atomic_fetch_add(v74 + 32, 1u);
            }
            float v177 = off_1EF5677B0;
            if (v178) {
              atomic_fetch_add(v178 + 32, 0xFFFFFFFF);
            }
            __int16 v77 = v179;
            if (v179 && !atomic_fetch_add(&v179->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
            *(unsigned char *)(*v66 + 48 * v57 + 44) = 0;
            altitude::RootTileData::~RootTileData((altitude::RootTileData *)buf);
            uint64_t v65 = *v66;
            BOOL v38 = v71;
            long long v69 = v164;
          }
          *long long v69 = v57;
          *(_DWORD *)(v65 + 48 * v57 + 40) = a6;
          uint64_t v78 = v65 + 48 * v57;
          uint64_t v80 = *(void *)(v78 + 24);
          long long v79 = (void *)(v78 + 24);
          if (!v80)
          {
            uint64_t v81 = v38;
            if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)(v65 + 48 * v57)) == 4)
            {
              unsigned int v82 = *((_DWORD *)v39 + 9);
              uint64_t v175 = 0;
              uint64_t v176 = 0;
              float v177 = 0;
              float v178 = 0;
              uint64_t v179 = 0;
              *((void *)&v173 + 1) = 0;
              uint64_t v174 = 0;
              *(void *)&long long v173 = (char *)&v173 + 8;
              int v172 = 0;
              *(_DWORD *)__n128 buf = 63;
              *(_DWORD *)&uint8_t buf[4] = v57;
              *(void *)unint64_t v181 = v82;
              *(_DWORD *)&v181[8] = v58;
              *(void *)&v181[16] = 0;
              *(_WORD *)((char *)&v183 + 7) = 0;
              altitude::C3bRequestManager::getResult(v163[8], (uint64_t)buf, (uint64_t)&v175, (uint64_t)&v177, (uint64_t)&v173, (_WORD *)&v172 + 1, &v172);
              uint64_t v84 = v175;
              long long v83 = v176;
              if (v176) {
                atomic_fetch_add_explicit(&v176->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *long long v79 = v84;
              uint64_t v85 = v65 + 48 * v57;
              double v86 = *(std::__shared_weak_count **)(v85 + 32);
              *(void *)(v85 + 32) = v83;
              if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
              if (SBYTE7(v183) < 0) {
                operator delete(*(void **)&v181[16]);
              }
              std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)&v173 + 1));
              double v87 = (atomic_uint *)v177;
              if (v177)
              {
                double v88 = v178;
                size_t v89 = v177;
                if (v178 != v177)
                {
                  do
                  {
                    BOOL v90 = (std::__shared_weak_count *)*((void *)v88 - 1);
                    if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                      std::__shared_weak_count::__release_weak(v90);
                    }
                    v88 -= 4;
                  }
                  while (v88 != v87);
                  size_t v89 = v177;
                }
                float v178 = v87;
                operator delete(v89);
              }
              uint64_t v161 = v176;
              if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                std::__shared_weak_count::__release_weak(v161);
              }
            }
            else
            {
              int Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)(v65 + 48 * v57));
              BOOL v38 = v81;
              if (Status) {
                goto LABEL_171;
              }
              if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
              }
              long long v159 = GEOGetVectorKitVKDefaultLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
              {
                int v160 = *((_DWORD *)v39 + 9);
                *(_DWORD *)__n128 buf = 67109888;
                *(_DWORD *)&uint8_t buf[4] = v58;
                *(_WORD *)unint64_t v181 = 1024;
                *(_DWORD *)&v181[2] = v59;
                *(_WORD *)&v181[6] = 1024;
                *(_DWORD *)&v181[8] = v160;
                *(_WORD *)&v181[12] = 1024;
                *(_DWORD *)&v181[14] = v57;
                _os_log_impl(&dword_1A1780000, v159, OS_LOG_TYPE_ERROR, "Failed to load ObjectTree model (region: %u version: %u entity: %u lod: %u)", buf, 0x1Au);
              }
              *(unsigned char *)(v65 + 48 * v57 + 44) = 1;
              *(_OWORD *)unint64_t v181 = 0uLL;
              *(double *)__n128 buf = COERCE_DOUBLE(off_1EF5677B0);
              karo::AsyncRequestManager::RequestHandle::operator=(v65 + 48 * v57, (uint64_t)buf);
              karo::AsyncRequestManager::RequestHandle::~RequestHandle((karo::AsyncRequestManager::RequestHandle *)buf);
              *long long v69 = -1;
            }
            BOOL v38 = v81;
          }
        }
LABEL_171:
        if (!v38) {
          return;
        }
        goto LABEL_172;
      }
      *((void *)&v173 + 1) = v60;
      LODWORD(v173) = 63;
      DWORD1(v173) = v57;
      *(double *)__n128 buf = 0.0;
      *(_OWORD *)unint64_t v181 = v173;
      double v182 = 0.0;
      *(void *)&long long v183 = 0;
      *(void *)&v181[16] = 0;
      HIBYTE(v184) = 0;
      double v185 = 0.0;
      double v186 = 0.0;
      double v187 = 0.0;
      double v188 = 0.0;
      HIBYTE(v190) = 0;
      uint64_t v191 = 0x656C707061;
      char v193 = 5;
      uint64_t v194 = 0x656C707061;
      char v195 = 5;
      int v196 = 0;
      __int16 v197 = 1;
      char v198 = 1;
      int v199 = v58;
      int v200 = v59;
      uint64_t v201 = 0x7FFFFFFFLL;
      int v202 = 0;
      unint64_t v91 = *((void *)v39 + 6) - *((void *)v39 + 5);
      unsigned int v167 = v38;
      if (v91)
      {
        if (v91 >= 0x1555555555555555) {
          goto LABEL_187;
        }
        size_t v92 = 16 * ((v91 >> 1) + (v91 >> 2));
        double v93 = (char *)operator new(v92);
        uint64_t v94 = 0;
        double v95 = &v93[v92];
        do
        {
          double v96 = &v93[v94];
          *((void *)v96 + 5) = 0;
          *(void *)double v96 = off_1EF5677B0;
          *(_OWORD *)(v96 + 8) = 0uLL;
          *(_OWORD *)(v96 + 24) = 0uLL;
          *(void *)(v96 + 37) = 0;
          v94 += 48;
        }
        while (v92 != v94);
        double v97 = v93;
      }
      else
      {
        double v95 = 0;
        double v97 = 0;
      }
      altitude::C3bRequestManager::requestC3b((uint64_t)&v177, v163[8], &v173, (uint64_t)buf, 0, 0, 1u, 0xFFFFFFFF);
      size_t v98 = &v97[48 * v57];
      uint64_t v99 = *((void *)v98 + 1);
      char v100 = v97;
      if (v99) {
        atomic_fetch_add((atomic_uint *volatile)(v99 + 128), 0xFFFFFFFF);
      }
      unsigned int v101 = v178;
      char v102 = v179;
      if (v179) {
        atomic_fetch_add_explicit(&v179->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v103.n128_u64[0] = -1;
      v103.n128_u64[1] = -1;
      uint64_t v104 = (std::__shared_weak_count *)*((void *)v98 + 2);
      *((void *)v98 + 1) = v101;
      *((void *)v98 + 2) = v102;
      uint64_t v165 = v97;
      if (v104)
      {
        if (!atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v104->__on_zero_shared)(v104, v103);
          std::__shared_weak_count::__release_weak(v104);
          v103.n128_u32[0] = -1;
          char v100 = v97;
        }
        unsigned int v101 = (atomic_uint *)*((void *)v98 + 1);
      }
      if (v101) {
        atomic_fetch_add(v101 + 32, 1u);
      }
      float v177 = off_1EF5677B0;
      if (v178) {
        atomic_fetch_add(v178 + 32, 0xFFFFFFFF);
      }
      v103.n128_u32[1] = v57;
      unint64_t v105 = v179;
      unint64_t v162 = v103.n128_u64[0];
      if (v179 && !atomic_fetch_add(&v179->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
        v103.n128_u64[0] = v162;
        char v100 = v97;
      }
      *(_DWORD *)&v100[48 * v57 + 40] = a6;
      unint64_t v107 = v163[22];
      unint64_t v106 = v163[23];
      if (v107 < v106)
      {
        *(_DWORD *)unint64_t v107 = v58;
        *(_DWORD *)(v107 + 4) = v59;
        *(_DWORD *)(v107 + 8) = v60;
        *(void *)(v107 + 24) = 0;
        *(void *)(v107 + 32) = 0;
        *(void *)(v107 + 16) = 0;
        int64_t v108 = v95 - v100;
        long long v109 = v163;
        if (v95 == v100)
        {
LABEL_117:
          *(void *)(v107 + 40) = v103.n128_u64[0];
          unint64_t v122 = v107 + 48;
LABEL_156:
          v109[22] = v122;
          if (v100)
          {
            if (v95 != v100)
            {
              int8x16_t v153 = v95 - 48;
              do
              {
                int8x16_t v154 = (std::__shared_weak_count *)*((void *)v95 - 2);
                if (v154 && !atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                  std::__shared_weak_count::__release_weak(v154);
                  char v100 = v165;
                }
                *((void *)v95 - 6) = off_1EF5677B0;
                uint64_t v155 = *((void *)v95 - 5);
                if (v155) {
                  atomic_fetch_add((atomic_uint *volatile)(v155 + 128), 0xFFFFFFFF);
                }
                int8x16_t v156 = (std::__shared_weak_count *)*((void *)v95 - 4);
                if (v156 && !atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                  std::__shared_weak_count::__release_weak(v156);
                  char v100 = v165;
                }
                v95 -= 48;
                v153 -= 48;
              }
              while (v95 != v100);
              double v95 = v100;
            }
            operator delete(v95);
          }
          altitude::RootTileData::~RootTileData((altitude::RootTileData *)buf);
          BOOL v38 = v167;
          goto LABEL_171;
        }
        unint64_t v110 = 0xAAAAAAAAAAAAAAABLL * (v108 >> 4);
        if (v110 <= 0x555555555555555)
        {
          long long v111 = (char *)operator new(v108);
          *(void *)(v107 + 16) = v111;
          *(void *)(v107 + 24) = v111;
          *(void *)(v107 + 32) = &v111[48 * v110];
          char v100 = v97;
          long long v112 = v97;
          int v113 = v111;
          v103.n128_u64[0] = v162;
          do
          {
            uint64_t v114 = *((void *)v112 + 1);
            uint64_t v115 = *((void *)v112 + 2);
            *(void *)int v113 = off_1EF5677B0;
            *((void *)v113 + 1) = v114;
            *((void *)v113 + 2) = v115;
            if (v115)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v115 + 8), 1uLL, memory_order_relaxed);
              uint64_t v114 = *((void *)v113 + 1);
            }
            if (v114) {
              atomic_fetch_add((atomic_uint *volatile)(v114 + 128), 1u);
            }
            uint64_t v116 = *((void *)v112 + 4);
            *((void *)v113 + 3) = *((void *)v112 + 3);
            *((void *)v113 + 4) = v116;
            if (v116) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v116 + 8), 1uLL, memory_order_relaxed);
            }
            *((_DWORD *)v113 + 10) = *((_DWORD *)v112 + 10);
            v113[44] = v112[44];
            v112 += 48;
            v113 += 48;
            v111 += 48;
          }
          while (v112 != v95);
          *(void *)(v107 + 24) = v113;
          goto LABEL_117;
        }
LABEL_187:
        abort();
      }
      unint64_t v117 = v163[21];
      unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - v117) >> 4) + 1;
      if (v118 > 0x555555555555555) {
        goto LABEL_187;
      }
      unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - v117) >> 4);
      if (2 * v119 > v118) {
        unint64_t v118 = 2 * v119;
      }
      if (v119 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v120 = 0x555555555555555;
      }
      else {
        unint64_t v120 = v118;
      }
      unint64_t v169 = v120;
      if (v120)
      {
        if (v120 > 0x555555555555555) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v121 = operator new(48 * v120);
        char v100 = v165;
        v103.n128_u64[0] = v162;
      }
      else
      {
        BOOL v121 = 0;
      }
      unint64_t v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - v117) >> 4);
      unsigned __int16 v124 = (char *)&v121[2 * ((uint64_t)(v107 - v117) >> 4)];
      *(_DWORD *)unsigned __int16 v124 = v58;
      *((_DWORD *)v124 + 1) = v59;
      *((_DWORD *)v124 + 2) = v60;
      *((void *)v124 + 2) = 0;
      *((void *)v124 + 3) = 0;
      double v125 = v124 + 24;
      *((void *)v124 + 4) = 0;
      int64_t v126 = v95 - v100;
      if (v95 == v100)
      {
        uint64_t v131 = v163;
        unint64_t v136 = v169;
      }
      else
      {
        unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * (v126 >> 4);
        if (v127 > 0x555555555555555) {
          goto LABEL_187;
        }
        long long v128 = v121;
        long long v129 = (char *)operator new(v126);
        *((void *)v124 + 2) = v129;
        *double v125 = v129;
        *((void *)v124 + 4) = &v129[48 * v127];
        uint64_t v131 = v163;
        long long v130 = v165;
        uint64_t v132 = v129;
        v103.n128_u64[0] = v162;
        do
        {
          uint64_t v133 = *((void *)v130 + 1);
          uint64_t v134 = *((void *)v130 + 2);
          *(void *)uint64_t v132 = off_1EF5677B0;
          *((void *)v132 + 1) = v133;
          *((void *)v132 + 2) = v134;
          if (v134)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
            uint64_t v133 = *((void *)v132 + 1);
          }
          if (v133) {
            atomic_fetch_add((atomic_uint *volatile)(v133 + 128), 1u);
          }
          uint64_t v135 = *((void *)v130 + 4);
          *((void *)v132 + 3) = *((void *)v130 + 3);
          *((void *)v132 + 4) = v135;
          if (v135) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v135 + 8), 1uLL, memory_order_relaxed);
          }
          *((_DWORD *)v132 + 10) = *((_DWORD *)v130 + 10);
          v132[44] = v130[44];
          v130 += 48;
          v132 += 48;
          v129 += 48;
        }
        while (v130 != v95);
        *double v125 = v132;
        unint64_t v117 = v163[21];
        unint64_t v107 = v163[22];
        unint64_t v136 = v169;
        BOOL v121 = v128;
      }
      uint64_t v137 = (char *)&v121[6 * v136];
      v121[6 * v123 + 5] = v103.n128_u64[0];
      long long v138 = v124 + 48;
      if (v107 == v117)
      {
        int64x2_t v143 = vdupq_n_s64(v117);
      }
      else
      {
        uint64_t v139 = 0;
        do
        {
          unint64_t v140 = &v124[v139];
          uint64_t v141 = v107 + v139;
          uint64_t v142 = *(void *)(v107 + v139 - 48);
          *((_DWORD *)v140 - 10) = *(_DWORD *)(v107 + v139 - 40);
          *((void *)v140 - 6) = v142;
          *((void *)v140 - 3) = 0;
          *((void *)v140 - 2) = 0;
          *((void *)v140 - 4) = 0;
          *((_OWORD *)v140 - 2) = *(_OWORD *)(v107 + v139 - 32);
          *((void *)v140 - 2) = *(void *)(v107 + v139 - 16);
          *(void *)(v141 - 32) = 0;
          *(void *)(v141 - 24) = 0;
          *(void *)(v141 - 16) = 0;
          *((void *)v140 - 1) = *(void *)(v107 + v139 - 8);
          v139 -= 48;
        }
        while (v107 + v139 != v117);
        v124 += v139;
        int64x2_t v143 = *(int64x2_t *)(v131 + 21);
      }
      v131[21] = (uint64_t)v124;
      v131[22] = (uint64_t)v138;
      float v170 = v138;
      v131[23] = (uint64_t)v137;
      uint64_t v145 = (char *)v143.i64[1];
      for (uint64_t i = (char *)v143.i64[0]; v145 != i; v145 -= 48)
      {
        uint64_t v147 = *((void *)v145 - 4);
        if (v147)
        {
          uint64_t v148 = *((void *)v145 - 3);
          uint64_t v146 = (void *)*((void *)v145 - 4);
          if (v148 != v147)
          {
            uint64_t v149 = v148 - 48;
            do
            {
              uint64_t v150 = *(std::__shared_weak_count **)(v148 - 16);
              if (v150 && !atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
              *(void *)(v148 - 48) = off_1EF5677B0;
              uint64_t v151 = *(void *)(v148 - 40);
              if (v151) {
                atomic_fetch_add((atomic_uint *volatile)(v151 + 128), 0xFFFFFFFF);
              }
              int8x16_t v152 = *(std::__shared_weak_count **)(v148 - 32);
              if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                std::__shared_weak_count::__release_weak(v152);
              }
              v148 -= 48;
              v149 -= 48;
            }
            while (v148 != v147);
            uint64_t v146 = (void *)*((void *)v145 - 4);
          }
          *((void *)v145 - 3) = v147;
          operator delete(v146);
        }
      }
      if (i) {
        operator delete(i);
      }
      long long v109 = v163;
      char v100 = v165;
      unint64_t v122 = (unint64_t)v170;
      goto LABEL_156;
    }
    unint64_t v45 = (atomic_ullong *)a3[1];
    if (v45) {
      atomic_fetch_add_explicit(v45 + 1, 1uLL, memory_order_relaxed);
    }
    unsigned int v166 = v45;
    uint64_t v46 = *((void *)v23 + 5);
    for (uint64_t j = *((void *)v23 + 6); v46 != j; v46 += 16)
    {
      *(double *)__n128 buf = *(double *)v46;
      BOOL v48 = *(std::__shared_weak_count **)(v46 + 8);
      *(void *)unint64_t v181 = v48;
      if (v48)
      {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        altitude::ObjectTreeLoader::traverse(a1, a2, buf, a4, a5, a6);
        if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      else
      {
        altitude::ObjectTreeLoader::traverse(a1, a2, buf, a4, a5, a6);
      }
    }
    BOOL v38 = v166;
    if (v166)
    {
LABEL_172:
      if (!atomic_fetch_add(v38 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        int8x16_t v157 = (std::__shared_weak_count *)v38;
        (*(void (**)(atomic_ullong *))(*v38 + 16))(v38);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
  }
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
LABEL_2:
  unsigned int v10 = a2 - 1;
  uint64_t v11 = v9;
  while (1)
  {
    uint64_t v9 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    uint64_t v13 = a2 - v11;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v81 = *v11;
          if (*(_DWORD *)(*v10 + 40) < *(_DWORD *)(*v11 + 40))
          {
            *uint64_t v11 = *v10;
            *unsigned int v10 = v81;
          }
          return result;
        case 3:
          uint64_t v82 = *v11;
          uint64_t v83 = v11[1];
          unsigned int v84 = *(_DWORD *)(v83 + 40);
          unsigned int v85 = *(_DWORD *)(*v11 + 40);
          uint64_t v86 = *v10;
          unsigned int v87 = *(_DWORD *)(*v10 + 40);
          if (v84 >= v85)
          {
            if (v87 < v84)
            {
              v11[1] = v86;
              *unsigned int v10 = v83;
              uint64_t v135 = *v11;
              uint64_t v134 = v11[1];
              if (*(_DWORD *)(v134 + 40) < *(_DWORD *)(*v11 + 40))
              {
                *uint64_t v11 = v134;
                v11[1] = v135;
              }
            }
          }
          else
          {
            if (v87 >= v84)
            {
              *uint64_t v11 = v83;
              v11[1] = v82;
              if (*(_DWORD *)(*v10 + 40) >= v85) {
                return result;
              }
              v11[1] = *v10;
            }
            else
            {
              *uint64_t v11 = v86;
            }
            *unsigned int v10 = v82;
          }
          return result;
        case 4:
          double v88 = v11 + 1;
          size_t v89 = (uint64_t *)v11[1];
          BOOL v90 = v11 + 2;
          uint64_t v91 = v11[2];
          size_t v92 = (uint64_t *)*v11;
          unsigned int v93 = *((_DWORD *)v89 + 10);
          unsigned int v94 = *(_DWORD *)(*v11 + 40);
          unsigned int v95 = *(_DWORD *)(v91 + 40);
          if (v93 >= v94)
          {
            if (v95 >= v93) {
              goto LABEL_175;
            }
            *double v88 = v91;
            uint64_t *v90 = (uint64_t)v89;
            double v96 = v11;
            double v97 = (uint64_t **)(v11 + 1);
            uint64_t result = (unint64_t)v89;
            if (v95 >= v94) {
              goto LABEL_176;
            }
          }
          else
          {
            double v96 = v11;
            double v97 = (uint64_t **)(v11 + 2);
            uint64_t result = *v11;
            if (v95 >= v93)
            {
              *uint64_t v11 = (uint64_t)v89;
              v11[1] = (uint64_t)v92;
              double v96 = v11 + 1;
              double v97 = (uint64_t **)(v11 + 2);
              uint64_t result = (unint64_t)v92;
              if (v95 >= v94)
              {
LABEL_175:
                size_t v89 = (uint64_t *)v91;
LABEL_176:
                if (*(_DWORD *)(*v10 + 40) < *((_DWORD *)v89 + 10))
                {
                  uint64_t *v90 = *v10;
                  *unsigned int v10 = (uint64_t)v89;
                  uint64_t v139 = *v90;
                  uint64_t v140 = *v88;
                  unsigned int v141 = *(_DWORD *)(v139 + 40);
                  if (v141 < *(_DWORD *)(v140 + 40))
                  {
                    v11[1] = v139;
                    void v11[2] = v140;
                    uint64_t v142 = *v11;
                    if (v141 < *(_DWORD *)(*v11 + 40))
                    {
                      *uint64_t v11 = v139;
                      v11[1] = v142;
                    }
                  }
                }
                return result;
              }
            }
          }
          *double v96 = v91;
          *double v97 = v92;
          size_t v89 = (uint64_t *)result;
          goto LABEL_176;
        case 5:
          return (unint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,0>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v11 != a2)
      {
        int64_t v109 = (unint64_t)(v13 - 2) >> 1;
        int64_t v110 = v109;
        do
        {
          if (v109 >= v110)
          {
            uint64_t v112 = (2 * v110) | 1;
            int v113 = &v11[v112];
            if (2 * v110 + 2 < v13)
            {
              uint64_t v116 = v113[1];
              unsigned int v114 = *(_DWORD *)(*v113 + 40);
              unsigned int v115 = *(_DWORD *)(v116 + 40);
              if (v114 < v115) {
                ++v113;
              }
              else {
                uint64_t v116 = *v113;
              }
              if (v114 < v115) {
                uint64_t v112 = 2 * v110 + 2;
              }
            }
            else
            {
              uint64_t v116 = *v113;
            }
            unint64_t v117 = &v11[v110];
            uint64_t v118 = *v117;
            uint64_t result = *(unsigned int *)(v116 + 40);
            unsigned int v119 = *(_DWORD *)(*v117 + 40);
            if (result >= v119)
            {
              do
              {
                *unint64_t v117 = v116;
                unint64_t v117 = v113;
                if (v109 < v112) {
                  break;
                }
                uint64_t v120 = (2 * v112) | 1;
                int v113 = &v11[v120];
                uint64_t v112 = 2 * v112 + 2;
                if (v112 < v13)
                {
                  uint64_t v116 = *v113;
                  if (*(_DWORD *)(*v113 + 40) >= *(_DWORD *)(v113[1] + 40))
                  {
                    uint64_t v112 = v120;
                  }
                  else
                  {
                    uint64_t v116 = v113[1];
                    ++v113;
                  }
                }
                else
                {
                  uint64_t v116 = *v113;
                  uint64_t v112 = v120;
                }
                uint64_t result = *(unsigned int *)(v116 + 40);
              }
              while (result >= v119);
              *unint64_t v117 = v118;
            }
          }
          BOOL v111 = v110-- <= 0;
        }
        while (!v111);
        uint64_t v121 = (unint64_t)v12 >> 3;
        do
        {
          uint64_t v122 = 0;
          uint64_t v123 = *v11;
          unsigned __int16 v124 = v11;
          do
          {
            int64_t v126 = &v124[v122 + 1];
            uint64_t v127 = (2 * v122) | 1;
            uint64_t v122 = 2 * v122 + 2;
            if (v122 < v121)
            {
              uint64_t v125 = *v126;
              uint64_t result = *(unsigned int *)(*v126 + 40);
              if (result >= *(_DWORD *)(v126[1] + 40))
              {
                uint64_t v122 = v127;
              }
              else
              {
                uint64_t v125 = v126[1];
                ++v126;
              }
            }
            else
            {
              uint64_t v125 = *v126;
              uint64_t v122 = v127;
            }
            *unsigned __int16 v124 = v125;
            unsigned __int16 v124 = v126;
          }
          while (v122 <= (uint64_t)((unint64_t)(v121 - 2) >> 1));
          if (v126 == --a2)
          {
            *int64_t v126 = v123;
          }
          else
          {
            *int64_t v126 = *a2;
            *a2 = v123;
            uint64_t v128 = (char *)v126 - (char *)v11 + 8;
            if (v128 >= 9)
            {
              unint64_t v129 = (((unint64_t)v128 >> 3) - 2) >> 1;
              long long v130 = &v11[v129];
              uint64_t v131 = *v130;
              uint64_t v132 = *v126;
              unsigned int v133 = *(_DWORD *)(*v126 + 40);
              if (*(_DWORD *)(*v130 + 40) < v133)
              {
                do
                {
                  *int64_t v126 = v131;
                  int64_t v126 = v130;
                  if (!v129) {
                    break;
                  }
                  unint64_t v129 = (v129 - 1) >> 1;
                  long long v130 = &v11[v129];
                  uint64_t v131 = *v130;
                }
                while (*(_DWORD *)(*v130 + 40) < v133);
                *int64_t v126 = v132;
              }
            }
          }
          BOOL v111 = v121-- <= 2;
        }
        while (!v111);
      }
      return result;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    double v15 = &v11[(unint64_t)v13 >> 1];
    uint64_t v16 = *v10;
    unsigned int v17 = *(_DWORD *)(*v10 + 40);
    if ((unint64_t)v12 >= 0x401)
    {
      uint64_t v18 = *v15;
      uint64_t v19 = *v11;
      unsigned int v20 = *(_DWORD *)(*v15 + 40);
      unsigned int v21 = *(_DWORD *)(*v11 + 40);
      if (v20 >= v21)
      {
        if (v17 < v20)
        {
          *double v15 = v16;
          *unsigned int v10 = v18;
          uint64_t v26 = *v11;
          if (*(_DWORD *)(*v15 + 40) < *(_DWORD *)(*v11 + 40))
          {
            *uint64_t v11 = *v15;
            *double v15 = v26;
          }
        }
      }
      else
      {
        if (v17 < v20)
        {
          *uint64_t v11 = v16;
          goto LABEL_22;
        }
        *uint64_t v11 = v18;
        *double v15 = v19;
        if (*(_DWORD *)(*v10 + 40) < v21)
        {
          *double v15 = *v10;
LABEL_22:
          *unsigned int v10 = v19;
        }
      }
      double v28 = &v11[v14];
      uint64_t v31 = *(v28 - 1);
      double v29 = v28 - 1;
      uint64_t v30 = v31;
      uint64_t v32 = v11[1];
      unsigned int v33 = *(_DWORD *)(v31 + 40);
      unsigned int v34 = *(_DWORD *)(v32 + 40);
      uint64_t v35 = *(a2 - 2);
      unsigned int v36 = *(_DWORD *)(v35 + 40);
      if (v33 >= v34)
      {
        if (v36 < v33)
        {
          *double v29 = v35;
          *(a2 - 2) = v30;
          uint64_t v37 = v11[1];
          if (*(_DWORD *)(*v29 + 40) < *(_DWORD *)(v37 + 40))
          {
            v11[1] = *v29;
            *double v29 = v37;
          }
        }
      }
      else
      {
        if (v36 < v33)
        {
          v11[1] = v35;
          goto LABEL_34;
        }
        v11[1] = v30;
        *double v29 = v32;
        uint64_t v38 = *(a2 - 2);
        if (*(_DWORD *)(v38 + 40) < v34)
        {
          *double v29 = v38;
LABEL_34:
          *(a2 - 2) = v32;
        }
      }
      unsigned int v39 = &v11[v14];
      uint64_t v42 = v39[1];
      unint64_t v40 = v39 + 1;
      uint64_t v41 = v42;
      uint64_t v43 = v11[2];
      unsigned int v44 = *(_DWORD *)(v42 + 40);
      unsigned int v45 = *(_DWORD *)(v43 + 40);
      uint64_t v46 = *(a2 - 3);
      unsigned int v47 = *(_DWORD *)(v46 + 40);
      if (v44 >= v45)
      {
        if (v47 < v44)
        {
          *unint64_t v40 = v46;
          *(a2 - 3) = v41;
          uint64_t v48 = v11[2];
          if (*(_DWORD *)(*v40 + 40) < *(_DWORD *)(v48 + 40))
          {
            void v11[2] = *v40;
            *unint64_t v40 = v48;
          }
        }
      }
      else
      {
        if (v47 < v44)
        {
          void v11[2] = v46;
          goto LABEL_43;
        }
        void v11[2] = v41;
        *unint64_t v40 = v43;
        uint64_t v49 = *(a2 - 3);
        if (*(_DWORD *)(v49 + 40) < v45)
        {
          *unint64_t v40 = v49;
LABEL_43:
          *(a2 - 3) = v43;
        }
      }
      uint64_t v50 = *v15;
      uint64_t v51 = *v29;
      unsigned int v52 = *(_DWORD *)(*v15 + 40);
      unsigned int v53 = *(_DWORD *)(*v29 + 40);
      uint64_t v54 = *v40;
      unsigned int v55 = *(_DWORD *)(*v40 + 40);
      if (v52 >= v53)
      {
        if (v55 >= v52) {
          goto LABEL_51;
        }
        *double v15 = v54;
        *unint64_t v40 = v50;
        unint64_t v40 = v15;
        uint64_t v50 = v51;
        if (v55 >= v53)
        {
          uint64_t v50 = v54;
          goto LABEL_51;
        }
      }
      else if (v55 >= v52)
      {
        *double v29 = v50;
        *double v15 = v51;
        double v29 = v15;
        uint64_t v50 = v54;
        if (v55 >= v53)
        {
          uint64_t v50 = v51;
LABEL_51:
          uint64_t v56 = *v11;
          *uint64_t v11 = v50;
          *double v15 = v56;
          goto LABEL_52;
        }
      }
      *double v29 = v54;
      *unint64_t v40 = v51;
      goto LABEL_51;
    }
    uint64_t v22 = *v11;
    uint64_t v23 = *v15;
    unsigned int v24 = *(_DWORD *)(*v11 + 40);
    unsigned int v25 = *(_DWORD *)(*v15 + 40);
    if (v24 >= v25)
    {
      if (v17 < v24)
      {
        *uint64_t v11 = v16;
        *unsigned int v10 = v22;
        uint64_t v27 = *v15;
        if (*(_DWORD *)(*v11 + 40) < *(_DWORD *)(*v15 + 40))
        {
          *double v15 = *v11;
          *uint64_t v11 = v27;
        }
      }
      goto LABEL_52;
    }
    if (v17 < v24)
    {
      *double v15 = v16;
LABEL_31:
      *unsigned int v10 = v23;
      goto LABEL_52;
    }
    *double v15 = v22;
    *uint64_t v11 = v23;
    if (*(_DWORD *)(*v10 + 40) < v25)
    {
      *uint64_t v11 = *v10;
      goto LABEL_31;
    }
LABEL_52:
    --a3;
    uint64_t v57 = *v11;
    if (a4)
    {
      unsigned int v58 = *(_DWORD *)(v57 + 40);
LABEL_55:
      int v59 = v11;
      do
      {
        unsigned int v60 = v59;
        uint64_t v62 = v59[1];
        ++v59;
        uint64_t v61 = v62;
      }
      while (*(_DWORD *)(v62 + 40) < v58);
      int v63 = a2;
      if (v60 == v11)
      {
        int v63 = a2;
        do
        {
          if (v59 >= v63) {
            break;
          }
          uint64_t v65 = *--v63;
        }
        while (*(_DWORD *)(v65 + 40) >= v58);
      }
      else
      {
        do
          uint64_t v64 = *--v63;
        while (*(_DWORD *)(v64 + 40) >= v58);
      }
      if (v59 < v63)
      {
        uint64_t v66 = *v63;
        uint64_t v67 = v59;
        uint64_t v68 = v63;
        do
        {
          *uint64_t v67 = v66;
          *uint64_t v68 = v61;
          do
          {
            unsigned int v60 = v67;
            uint64_t v69 = v67[1];
            ++v67;
            uint64_t v61 = v69;
          }
          while (*(_DWORD *)(v69 + 40) < v58);
          do
          {
            uint64_t v70 = *--v68;
            uint64_t v66 = v70;
          }
          while (*(_DWORD *)(v70 + 40) >= v58);
        }
        while (v67 < v68);
      }
      if (v60 != v11) {
        *uint64_t v11 = *v60;
      }
      *unsigned int v60 = v57;
      if (v59 < v63) {
        goto LABEL_74;
      }
      BOOL v71 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **>(v11, v60);
      uint64_t v11 = v60 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **>(v60 + 1, a2);
      if (result)
      {
        a2 = v60;
        if (v71) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v71)
      {
LABEL_74:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,false>(v9, v60, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v60 + 1;
      }
    }
    else
    {
      unsigned int v58 = *(_DWORD *)(v57 + 40);
      if (*(_DWORD *)(*(v11 - 1) + 40) < v58) {
        goto LABEL_55;
      }
      if (v58 < *(_DWORD *)(*v10 + 40))
      {
        do
        {
          uint64_t v72 = v11[1];
          ++v11;
        }
        while (v58 >= *(_DWORD *)(v72 + 40));
      }
      else
      {
        uint64_t v73 = v11 + 1;
        do
        {
          uint64_t v11 = v73;
          if (v73 >= a2) {
            break;
          }
          ++v73;
        }
        while (v58 >= *(_DWORD *)(*v11 + 40));
      }
      long long v74 = a2;
      if (v11 < a2)
      {
        long long v74 = a2;
        do
          uint64_t v75 = *--v74;
        while (v58 < *(_DWORD *)(v75 + 40));
      }
      if (v11 < v74)
      {
        uint64_t v76 = *v11;
        uint64_t v77 = *v74;
        do
        {
          *uint64_t v11 = v77;
          *long long v74 = v76;
          do
          {
            uint64_t v78 = v11[1];
            ++v11;
            uint64_t v76 = v78;
          }
          while (v58 >= *(_DWORD *)(v78 + 40));
          do
          {
            uint64_t v79 = *--v74;
            uint64_t v77 = v79;
          }
          while (v58 < *(_DWORD *)(v79 + 40));
        }
        while (v11 < v74);
      }
      uint64_t v80 = v11 - 1;
      BOOL v4 = v11 - 1 >= v9;
      BOOL v5 = v11 - 1 == v9;
      if (v11 - 1 != v9) {
        *uint64_t v9 = *v80;
      }
      a4 = 0;
      *uint64_t v80 = v57;
    }
  }
  size_t v98 = v11 + 1;
  BOOL v100 = v11 == a2 || v98 == a2;
  if (a4)
  {
    if (!v100)
    {
      uint64_t v101 = 8;
      char v102 = v11;
      do
      {
        uint64_t v105 = *v102;
        uint64_t v104 = v102[1];
        char v102 = v98;
        unsigned int v106 = *(_DWORD *)(v104 + 40);
        if (v106 < *(_DWORD *)(v105 + 40))
        {
          uint64_t v107 = v101;
          do
          {
            *(uint64_t *)((char *)v11 + v107) = v105;
            uint64_t v108 = v107 - 8;
            if (v107 == 8)
            {
              __n128 v103 = v11;
              goto LABEL_118;
            }
            uint64_t v105 = *(uint64_t *)((char *)v11 + v107 - 16);
            v107 -= 8;
          }
          while (v106 < *(_DWORD *)(v105 + 40));
          __n128 v103 = (uint64_t *)((char *)v11 + v108);
LABEL_118:
          *__n128 v103 = v104;
        }
        size_t v98 = v102 + 1;
        v101 += 8;
      }
      while (v102 + 1 != a2);
    }
  }
  else if (!v100)
  {
    do
    {
      uint64_t v137 = *v9;
      uint64_t v136 = v9[1];
      uint64_t v9 = v98;
      unsigned int v138 = *(_DWORD *)(v136 + 40);
      if (v138 < *(_DWORD *)(v137 + 40))
      {
        do
        {
          *size_t v98 = v137;
          uint64_t v137 = *(v98 - 2);
          --v98;
        }
        while (v138 < *(_DWORD *)(v137 + 40));
        *size_t v98 = v136;
      }
      size_t v98 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  unsigned int v7 = *(_DWORD *)(*a2 + 40);
  unsigned int v8 = *(_DWORD *)(*result + 40);
  uint64_t v9 = *a3;
  unsigned int v10 = *(_DWORD *)(*a3 + 40);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      uint64_t v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      uint64_t v11 = *result;
      if (*(_DWORD *)(*a2 + 40) < *(_DWORD *)(*result + 40))
      {
        *uint64_t result = *a2;
        *a2 = v11;
        uint64_t v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *uint64_t result = v9;
LABEL_9:
      *a3 = v6;
      uint64_t v5 = v6;
      goto LABEL_11;
    }
    *uint64_t result = v5;
    *a2 = v6;
    uint64_t v5 = *a3;
    if (*(_DWORD *)(*a3 + 40) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_DWORD *)(*a4 + 40) < *(_DWORD *)(v5 + 40))
  {
    *a3 = *a4;
    *a4 = v5;
    uint64_t v12 = *a2;
    if (*(_DWORD *)(*a3 + 40) < *(_DWORD *)(*a2 + 40))
    {
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = *result;
      if (*(_DWORD *)(*a2 + 40) < *(_DWORD *)(*result + 40))
      {
        *uint64_t result = *a2;
        *a2 = v13;
      }
    }
  }
  uint64_t v14 = *a4;
  if (*(_DWORD *)(*a5 + 40) < *(_DWORD *)(*a4 + 40))
  {
    *a4 = *a5;
    *a5 = v14;
    uint64_t v15 = *a3;
    if (*(_DWORD *)(*a4 + 40) < *(_DWORD *)(*a3 + 40))
    {
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = *a2;
      if (*(_DWORD *)(*a3 + 40) < *(_DWORD *)(*a2 + 40))
      {
        *a2 = *a3;
        *a3 = v16;
        uint64_t v17 = *result;
        if (*(_DWORD *)(*a2 + 40) < *(_DWORD *)(*result + 40))
        {
          *uint64_t result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      uint64_t v3 = *(a2 - 1);
      uint64_t v4 = *a1;
      if (*(_DWORD *)(v3 + 40) < *(_DWORD *)(*a1 + 40))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      uint64_t v14 = *a1;
      uint64_t v15 = a1[1];
      unsigned int v16 = *(_DWORD *)(v15 + 40);
      unsigned int v17 = *(_DWORD *)(*a1 + 40);
      uint64_t v18 = *(a2 - 1);
      unsigned int v19 = *(_DWORD *)(v18 + 40);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          uint64_t v41 = *a1;
          uint64_t v40 = a1[1];
          if (*(_DWORD *)(v40 + 40) < *(_DWORD *)(*a1 + 40))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          uint64_t v47 = *(a2 - 1);
          if (*(_DWORD *)(v47 + 40) >= v17) {
            return 1;
          }
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      unsigned int v20 = a1 + 1;
      uint64_t v21 = a1[1];
      uint64_t v22 = a1 + 2;
      uint64_t v23 = a1[2];
      uint64_t v24 = *a1;
      unsigned int v25 = *(_DWORD *)(v21 + 40);
      unsigned int v26 = *(_DWORD *)(*a1 + 40);
      unsigned int v27 = *(_DWORD *)(v23 + 40);
      if (v25 < v26)
      {
        double v28 = a1;
        double v29 = a1 + 2;
        uint64_t v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          double v28 = a1 + 1;
          double v29 = a1 + 2;
          uint64_t v30 = v24;
          if (v27 >= v26) {
            goto LABEL_35;
          }
        }
LABEL_34:
        *double v28 = v23;
        *double v29 = v24;
        uint64_t v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *unsigned int v20 = v23;
        uint64_t *v22 = v21;
        double v28 = a1;
        double v29 = a1 + 1;
        uint64_t v30 = v21;
        if (v27 >= v26) {
          goto LABEL_36;
        }
        goto LABEL_34;
      }
LABEL_35:
      uint64_t v21 = v23;
LABEL_36:
      uint64_t v42 = *(a2 - 1);
      if (*(_DWORD *)(v42 + 40) < *(_DWORD *)(v21 + 40))
      {
        uint64_t *v22 = v42;
        *(a2 - 1) = v21;
        uint64_t v43 = *v22;
        uint64_t v44 = *v20;
        unsigned int v45 = *(_DWORD *)(v43 + 40);
        if (v45 < *(_DWORD *)(v44 + 40))
        {
          a1[1] = v43;
          a1[2] = v44;
          uint64_t v46 = *a1;
          if (v45 < *(_DWORD *)(*a1 + 40))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,altitude::ObjectTreeLoader::cleanupModels(void)::OldestFirst &,altitude::ObjectTreeModel::LodLevel **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v6 = a1 + 2;
      uint64_t v5 = a1[2];
      uint64_t v7 = a1[1];
      uint64_t v8 = *a1;
      unsigned int v9 = *(_DWORD *)(v7 + 40);
      unsigned int v10 = *(_DWORD *)(*a1 + 40);
      unsigned int v11 = *(_DWORD *)(v5 + 40);
      if (v9 >= v10)
      {
        if (v11 >= v9) {
          goto LABEL_19;
        }
        a1[1] = v5;
        uint64_t *v6 = v7;
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 1;
      }
      else
      {
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 2;
        if (v11 < v9) {
          goto LABEL_18;
        }
        *a1 = v7;
        a1[1] = v8;
        uint64_t v12 = a1 + 1;
        uint64_t v13 = a1 + 2;
      }
      if (v11 >= v10) {
        goto LABEL_19;
      }
LABEL_18:
      *uint64_t v12 = v5;
      *uint64_t v13 = v8;
LABEL_19:
      uint64_t v31 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v32 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v35 = *v31;
        uint64_t v36 = *v6;
        unsigned int v37 = *(_DWORD *)(*v31 + 40);
        if (v37 < *(_DWORD *)(v36 + 40))
        {
          uint64_t v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            uint64_t v39 = v38 - 8;
            if (v38 == 8)
            {
              unsigned int v34 = a1;
              goto LABEL_22;
            }
            uint64_t v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(_DWORD *)(v36 + 40));
          unsigned int v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          *unsigned int v34 = v35;
          if (++v32 == 8) {
            break;
          }
        }
        uint64_t v6 = v31++;
        if (v31 == a2) {
          return 1;
        }
      }
      return v31 + 1 == a2;
  }
}

void altitude::ObjectTreeLoader::pruneModels(altitude::ObjectTreeLoader *this)
{
  uint64_t v1 = *((void *)this + 21);
  uint64_t v2 = *((void *)this + 22);
  if (v1 != v2)
  {
    do
    {
      while (*(_DWORD *)(v1 + 40) != -1 || *(_DWORD *)(v1 + 44) != -1)
      {
        uint64_t v4 = *(void *)(v1 + 16);
        uint64_t v3 = *(void *)(v1 + 24);
        if (v3 != v4)
        {
          unint64_t v5 = 0;
          unsigned int v6 = 1;
          do
          {
            if (v6 - 1 != *(_DWORD *)(v1 + 40))
            {
              uint64_t v7 = v4 + 48 * v5;
              uint64_t v8 = *(void *)(v7 + 8);
              if (v8)
              {
                atomic_fetch_add((atomic_uint *volatile)(v8 + 128), 0xFFFFFFFF);
                uint64_t v8 = 0;
              }
              unsigned int v9 = *(std::__shared_weak_count **)(v7 + 16);
              *(void *)(v7 + 8) = v8;
              *(void *)(v7 + 16) = 0;
              if (v9)
              {
                if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                  std::__shared_weak_count::__release_weak(v9);
                }
                uint64_t v8 = *(void *)(v7 + 8);
              }
              if (v8) {
                atomic_fetch_add((atomic_uint *volatile)(v8 + 128), 1u);
              }
              uint64_t v10 = v4 + 48 * v5;
              unsigned int v11 = *(std::__shared_weak_count **)(v10 + 32);
              *(void *)(v10 + 24) = 0;
              *(void *)(v10 + 32) = 0;
              if (v11)
              {
                if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                  std::__shared_weak_count::__release_weak(v11);
                }
              }
              *(_DWORD *)(v4 + 48 * v5 + 40) = 0;
              uint64_t v4 = *(void *)(v1 + 16);
              uint64_t v3 = *(void *)(v1 + 24);
            }
            unint64_t v5 = v6++;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 4) > v5);
          uint64_t v2 = *((void *)this + 22);
        }
        v1 += 48;
        if (v1 == v2) {
          return;
        }
      }
      uint64_t v12 = v1 + 48;
      uint64_t v13 = v1;
      if (v1 + 48 != v2)
      {
        do
        {
          *(void *)uint64_t v13 = *(void *)v12;
          *(_DWORD *)(v13 + 8) = *(_DWORD *)(v12 + 8);
          uint64_t v15 = *(void *)(v13 + 16);
          if (v15)
          {
            uint64_t v16 = *(void *)(v13 + 24);
            uint64_t v14 = *(void **)(v13 + 16);
            if (v16 != v15)
            {
              uint64_t v17 = v16 - 48;
              do
              {
                uint64_t v18 = *(std::__shared_weak_count **)(v16 - 16);
                if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                  std::__shared_weak_count::__release_weak(v18);
                }
                *(void *)(v16 - 48) = off_1EF5677B0;
                uint64_t v19 = *(void *)(v16 - 40);
                if (v19) {
                  atomic_fetch_add((atomic_uint *volatile)(v19 + 128), 0xFFFFFFFF);
                }
                unsigned int v20 = *(std::__shared_weak_count **)(v16 - 32);
                if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
                v16 -= 48;
                v17 -= 48;
              }
              while (v16 != v15);
              uint64_t v14 = *(void **)(v13 + 16);
            }
            *(void *)(v13 + 24) = v15;
            operator delete(v14);
            *(void *)(v13 + 32) = 0;
          }
          *(_OWORD *)(v13 + 16) = *(_OWORD *)(v12 + 16);
          *(void *)(v13 + 32) = *(void *)(v12 + 32);
          *(void *)(v12 + 16) = 0;
          *(void *)(v12 + 24) = 0;
          *(void *)(v12 + 32) = 0;
          *(void *)(v13 + 40) = *(void *)(v12 + 40);
          v12 += 48;
          v13 += 48;
        }
        while (v12 != v2);
        uint64_t v2 = *((void *)this + 22);
      }
      while (v2 != v13)
      {
        uint64_t v22 = *(void *)(v2 - 32);
        if (v22)
        {
          uint64_t v23 = *(void *)(v2 - 24);
          uint64_t v21 = *(void **)(v2 - 32);
          if (v23 != v22)
          {
            uint64_t v24 = v23 - 48;
            do
            {
              unsigned int v25 = *(std::__shared_weak_count **)(v23 - 16);
              if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
              *(void *)(v23 - 48) = off_1EF5677B0;
              uint64_t v26 = *(void *)(v23 - 40);
              if (v26) {
                atomic_fetch_add((atomic_uint *volatile)(v26 + 128), 0xFFFFFFFF);
              }
              unsigned int v27 = *(std::__shared_weak_count **)(v23 - 32);
              if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
              v23 -= 48;
              v24 -= 48;
            }
            while (v23 != v22);
            uint64_t v21 = *(void **)(v2 - 32);
          }
          *(void *)(v2 - 24) = v22;
          operator delete(v21);
        }
        v2 -= 48;
      }
      *((void *)this + 22) = v13;
      uint64_t v2 = v13;
    }
    while (v1 != v13);
  }
}

void md::FlyoverMetaDataRequester::requestDataKeys(md::FlyoverRegionManager ***this, const gdc::SelectionContext *a2)
{
  uint64_t v112 = (gdc::LayerDataCollector *)*((void *)a2 + 1);
  if (*((unsigned char *)a2 + 82) == 1)
  {
    uint64_t v3 = *(uint64_t **)(*((void *)a2 + 9) + 24);
    if (!v3) {
      return;
    }
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v117 = 0;
    do
    {
      RegionAreas = md::FlyoverRegionManager::getRegionAreas(*this[3], (const QuadTile *)(v3 + 2));
      uint64_t v8 = *RegionAreas;
      uint64_t v7 = RegionAreas[1];
      uint64_t v119 = v7;
      while (v8 != v7)
      {
        uint64_t v10 = *(void *)(*(void *)v8 + 120);
        uint64_t v9 = *(void *)(*(void *)v8 + 128);
        if (v10 != v9)
        {
          uint64_t v121 = v5;
          std::string __p = v4;
          while (1)
          {
            unsigned int v11 = *((unsigned __int8 *)v3 + 17);
            if (*(_DWORD *)(v10 + 4) <= v11)
            {
              unsigned int v12 = *(_DWORD *)(v10 + 8);
              if (v12 >= v11 && v11 + 2 > v12)
              {
                unsigned __int8 v14 = v12 + 1;
                char v15 = v12 + 1 - v11;
                int v16 = *((_DWORD *)v3 + 5) << v15;
                int v17 = *((_DWORD *)v3 + 6) << v15;
                uint64_t v18 = (int8x8_t *)*((void *)a2 + 9);
                uint64_t v19 = (v12 + 1);
                int8x8_t v20 = v18[2];
                if (v20)
                {
                  unint64_t v21 = ((((v19 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
                       - 0x61C8864680B583EBLL
                       + (((v19 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)
                       + v16) ^ (v19 + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
                  unint64_t v22 = (v17 - 0x61C8864680B583EBLL + (v21 << 6) + (v21 >> 2)) ^ v21;
                  uint8x8_t v23 = (uint8x8_t)vcnt_s8(v20);
                  v23.i16[0] = vaddlv_u8(v23);
                  if (v23.u32[0] > 1uLL)
                  {
                    unint64_t v24 = v22;
                    if (v22 >= *(void *)&v20) {
                      unint64_t v24 = v22 % *(void *)&v20;
                    }
                  }
                  else
                  {
                    unint64_t v24 = v22 & (*(void *)&v20 - 1);
                  }
                  unsigned int v25 = *(uint64_t ***)(*(void *)&v18[1] + 8 * v24);
                  if (v25)
                  {
                    uint64_t v26 = *v25;
                    if (v26)
                    {
                      if (v23.u32[0] < 2uLL)
                      {
                        uint64_t v27 = *(void *)&v20 - 1;
                        while (1)
                        {
                          uint64_t v29 = v26[1];
                          if (v22 == v29)
                          {
                            if (*((unsigned __int8 *)v26 + 16) == 255
                              && *((unsigned __int8 *)v26 + 17) == v14
                              && *((_DWORD *)v26 + 5) == v16
                              && *((_DWORD *)v26 + 6) == v17)
                            {
                              goto LABEL_11;
                            }
                          }
                          else if ((v29 & v27) != v24)
                          {
                            goto LABEL_45;
                          }
                          uint64_t v26 = (uint64_t *)*v26;
                          if (!v26) {
                            goto LABEL_45;
                          }
                        }
                      }
                      do
                      {
                        unint64_t v28 = v26[1];
                        if (v22 == v28)
                        {
                          if (*((unsigned __int8 *)v26 + 16) == 255
                            && *((unsigned __int8 *)v26 + 17) == v14
                            && *((_DWORD *)v26 + 5) == v16
                            && *((_DWORD *)v26 + 6) == v17)
                          {
                            goto LABEL_11;
                          }
                        }
                        else
                        {
                          if (v28 >= *(void *)&v20) {
                            v28 %= *(void *)&v20;
                          }
                          if (v28 != v24) {
                            break;
                          }
                        }
                        uint64_t v26 = (uint64_t *)*v26;
                      }
                      while (v26);
                    }
                  }
                }
LABEL_45:
                *(void *)&v132._type = v19 | ((unint64_t)(~(-1 << v14)
                                                                               + (v16 % (1 << v14) + (1 << v14))
                                                                               / (1 << v14)
                                                                               * (1 << v14)
                                                                               - (v16 % (1 << v14)
                                                                                + (1 << v14))) << 32);
                *(void *)&v132._xIdx = ((v17 % (1 << v14) + (1 << v14)) % (1 << v14));
                unint64_t FileIndexToLoadForKey = geo::c3mm::C3mmArea::getFileIndexToLoadForKey(*(void *)v8, (int *)&v132);
                char v32 = FileIndexToLoadForKey;
                if (FileIndexToLoadForKey != -1) {
                  break;
                }
              }
            }
LABEL_11:
            v10 += 12;
            if (v10 == v9)
            {
              uint64_t v4 = __p;
              unint64_t v5 = v121;
              goto LABEL_7;
            }
          }
          int v33 = v31;
          int v34 = *(_DWORD *)(v8 + 16);
          if (v121 >= v117)
          {
            unint64_t v35 = 0x6DB6DB6DB6DB6DB7 * ((v121 - __p) >> 3) + 1;
            if (v35 > 0x492492492492492) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            int v114 = ~(-1 << FileIndexToLoadForKey) - HIDWORD(FileIndexToLoadForKey);
            int v115 = *(_DWORD *)(v8 + 16);
            if (0xDB6DB6DB6DB6DB6ELL * ((v117 - __p) >> 3) > v35) {
              unint64_t v35 = 0xDB6DB6DB6DB6DB6ELL * ((v117 - __p) >> 3);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v117 - __p) >> 3)) >= 0x249249249249249) {
              unint64_t v36 = 0x492492492492492;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36 > 0x492492492492492) {
              goto LABEL_144;
            }
            unsigned int v37 = (char *)operator new(56 * v36);
            uint64_t v38 = &v37[8 * ((v121 - __p) >> 3)];
            *uint64_t v38 = -1;
            v38[1] = v14;
            *((_DWORD *)v38 + 1) = v16;
            *((_DWORD *)v38 + 2) = v17;
            v38[24] = -1;
            v38[25] = v32;
            *((_DWORD *)v38 + 7) = v114;
            *((_DWORD *)v38 + 8) = v33;
            *((_DWORD *)v38 + 12) = v115;
            uint64_t v4 = v38;
            if (v121 != __p)
            {
              uint64_t v39 = 0;
              do
              {
                uint64_t v40 = &v38[v39];
                *((_WORD *)v40 - 28) = *(_WORD *)&v121[v39 - 56];
                *(void *)(v40 - 52) = *(void *)&v121[v39 - 52];
                *((_WORD *)v40 - 16) = *(_WORD *)&v121[v39 - 32];
                *(void *)(v40 - 28) = *(void *)&v121[v39 - 28];
                *((_DWORD *)v40 - 2) = *(_DWORD *)&v121[v39 - 8];
                v39 -= 56;
              }
              while (&v121[v39] != __p);
              uint64_t v4 = &v38[v39];
            }
            unint64_t v117 = &v37[56 * v36];
            if (__p) {
              operator delete(__p);
            }
            unint64_t v5 = v38 + 56;
          }
          else
          {
            *uint64_t v121 = -1;
            v121[1] = v14;
            *((_DWORD *)v121 + 1) = v16;
            *((_DWORD *)v121 + 2) = v17;
            v121[24] = -1;
            v121[25] = FileIndexToLoadForKey;
            *((_DWORD *)v121 + 7) = ~(-1 << FileIndexToLoadForKey) - HIDWORD(FileIndexToLoadForKey);
            *((_DWORD *)v121 + 8) = v31;
            *((_DWORD *)v121 + 12) = v34;
            uint64_t v4 = __p;
            unint64_t v5 = v121 + 56;
          }
        }
LABEL_7:
        v8 += 24;
        uint64_t v7 = v119;
      }
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v41 = *(uint64_t **)(*((void *)a2 + 8) + 24);
    if (!v41) {
      return;
    }
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v42 = 0;
    do
    {
      uint64_t v43 = v5;
      unsigned int v44 = *((unsigned __int8 *)v41 + 17);
      int v45 = (*((_DWORD *)v41 + 5) % (1 << v44) + (1 << v44)) % (1 << v44);
      int v46 = *((_DWORD *)v41 + 6) % (1 << v44) + (1 << v44);
      uint64_t v47 = (char *)(v46 % (1 << v44));
      v132._type = *((unsigned char *)v41 + 16);
      v132._level = v44;
      v132._yIdx = v45;
      v132._xIdx = v46 % (1 << v44);
      uint64_t v48 = md::FlyoverRegionManager::getRegionAreas(*this[3], &v132);
      uint64_t v135 = (char *)(v44 | ((unint64_t)(~(-1 << v44) - v45) << 32));
      uint64_t v136 = v47;
      uint64_t v49 = *v48;
      uint64_t v120 = v48[1];
      unint64_t v5 = v43;
      uint64_t v116 = v41;
      if (*v48 != v120)
      {
        do
        {
          unint64_t v50 = geo::c3mm::C3mmArea::getFileIndexToLoadForKey(*(void *)v49, (int *)&v135);
          char v52 = v50;
          if (v50 != -1)
          {
            int v53 = v51;
            int v54 = ~(-1 << v50) - HIDWORD(v50);
            char v55 = *((unsigned char *)v41 + 17);
            int v57 = *((_DWORD *)v41 + 5);
            int v56 = *((_DWORD *)v41 + 6);
            int v58 = *(_DWORD *)(v49 + 16);
            if (v5 < v42)
            {
              char *v5 = *((unsigned char *)v41 + 16);
              v5[1] = v55;
              *((_DWORD *)v5 + 1) = v57;
              *((_DWORD *)v5 + 2) = v56;
              v5[24] = -1;
              v5[25] = v50;
              *((_DWORD *)v5 + 7) = v54;
              *((_DWORD *)v5 + 8) = v51;
              *((_DWORD *)v5 + 12) = v58;
              v5 += 56;
            }
            else
            {
              uint64_t v122 = v5;
              int v59 = v4;
              uint64_t v60 = 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 3);
              unint64_t v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) > 0x492492492492492) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              int v118 = *((_DWORD *)v41 + 6);
              __pa = v59;
              unint64_t v62 = 0x6DB6DB6DB6DB6DB7 * ((v42 - v59) >> 3);
              if (2 * v62 > v61) {
                unint64_t v61 = 2 * v62;
              }
              if (v62 >= 0x249249249249249) {
                unint64_t v63 = 0x492492492492492;
              }
              else {
                unint64_t v63 = v61;
              }
              if (v63 > 0x492492492492492) {
LABEL_144:
              }
                std::__throw_bad_array_new_length[abi:nn180100]();
              char v64 = *((unsigned char *)v41 + 16);
              char v65 = v55;
              uint64_t v66 = (char *)operator new(56 * v63);
              uint64_t v67 = &v66[56 * v60];
              *uint64_t v67 = v64;
              v67[1] = v65;
              *((_DWORD *)v67 + 1) = v57;
              *((_DWORD *)v67 + 2) = v118;
              v67[24] = -1;
              v67[25] = v52;
              *((_DWORD *)v67 + 7) = v54;
              *((_DWORD *)v67 + 8) = v53;
              *((_DWORD *)v67 + 12) = v58;
              if (v122 == __pa)
              {
                uint64_t v4 = &v66[56 * v60];
              }
              else
              {
                uint64_t v68 = 0;
                do
                {
                  uint64_t v69 = &v67[v68];
                  *((_WORD *)v69 - 28) = *(_WORD *)&v122[v68 - 56];
                  *(void *)(v69 - 52) = *(void *)&v122[v68 - 52];
                  *((_WORD *)v69 - 16) = *(_WORD *)&v122[v68 - 32];
                  *(void *)(v69 - 28) = *(void *)&v122[v68 - 28];
                  *((_DWORD *)v69 - 2) = *(_DWORD *)&v122[v68 - 8];
                  v68 -= 56;
                }
                while (&v122[v68] != __pa);
                uint64_t v4 = &v67[v68];
              }
              uint64_t v42 = &v66[56 * v63];
              unint64_t v5 = v67 + 56;
              uint64_t v41 = v116;
              if (__pa) {
                operator delete(__pa);
              }
            }
          }
          v49 += 24;
        }
        while (v49 != v120);
      }
      uint64_t v41 = (uint64_t *)*v41;
    }
    while (v41);
  }
  if (v4 != v5)
  {
    uint64_t v70 = (char *)v131;
    BOOL v71 = v4;
    __pb = v4;
    while (1)
    {
      uint64_t v72 = *(void *)(v71 + 28);
      int v123 = v72;
      int v73 = v71[25];
      int v74 = *((_DWORD *)v71 + 12);
      uint64_t v135 = v139;
      uint64_t v136 = v139;
      uint64_t v137 = v139;
      uint64_t v138 = 32;
      unint64_t v140 = 0;
      *(_DWORD *)&v132._type = HIDWORD(v72);
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v135, v139, (char *)&v132, (char *)&v132._yIdx);
      *(_DWORD *)&v132._type = v123;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v135, v136, (char *)&v132, (char *)&v132._yIdx);
      *(_DWORD *)&v132._type = v73;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v135, v136, (char *)&v132, (char *)&v132._yIdx);
      *(_DWORD *)&v132._type = 255;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v135, v136, (char *)&v132, (char *)&v132._yIdx);
      *(_DWORD *)&v132._type = v74;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v135, v136, (char *)&v132, (char *)&v132._yIdx);
      uint64_t v76 = v135;
      uint64_t v75 = v136;
      unint64_t v77 = 0;
      unint64_t v78 = v136 - v135;
      if (v136 != v135)
      {
        if (v78 <= 1) {
          uint64_t v79 = 1;
        }
        else {
          uint64_t v79 = v136 - v135;
        }
        uint64_t v80 = v135;
        do
        {
          unsigned int v81 = *v80++;
          v77 ^= (v77 << 6) - 0x61C8864680B583EBLL + (v77 >> 2) + v81;
          --v79;
        }
        while (v79);
      }
      unint64_t v140 = v77;
      uint64_t v127 = v70;
      uint64_t v128 = v70;
      uint64_t v82 = v70;
      unint64_t v129 = v70;
      uint64_t v130 = 32;
      if (v78 >= 0x21) {
        break;
      }
LABEL_115:
      if (v75 != v76)
      {
        if (v78 < 8)
        {
          uint64_t v101 = v82;
        }
        else if ((unint64_t)(v82 - v76) < 0x20)
        {
          uint64_t v101 = v82;
        }
        else
        {
          if (v78 < 0x20)
          {
            uint64_t v100 = 0;
LABEL_126:
            unint64_t v106 = v78 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v101 = &v82[v78 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v107 = v100 - (v78 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v108 = &v76[v100];
            int64_t v109 = &v82[v100];
            do
            {
              uint64_t v110 = *(void *)v108;
              v108 += 8;
              *(void *)int64_t v109 = v110;
              v109 += 8;
              v107 += 8;
            }
            while (v107);
            if (v78 != v106)
            {
              v76 += v106;
              goto LABEL_131;
            }
LABEL_132:
            uint64_t v82 = v128;
            goto LABEL_133;
          }
          uint64_t v100 = v78 & 0xFFFFFFFFFFFFFFE0;
          char v102 = (long long *)(v76 + 16);
          __n128 v103 = v82 + 16;
          unint64_t v104 = v78 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v105 = *v102;
            *(v103 - 1) = *(v102 - 1);
            *__n128 v103 = v105;
            v102 += 2;
            v103 += 2;
            v104 -= 32;
          }
          while (v104);
          if (v78 == v100) {
            goto LABEL_132;
          }
          if ((v78 & 0x18) != 0) {
            goto LABEL_126;
          }
          v76 += v100;
          uint64_t v101 = &v82[v100];
        }
        do
        {
LABEL_131:
          char v111 = *v76++;
          *v101++ = v111;
        }
        while (v76 != v75);
        goto LABEL_132;
      }
LABEL_133:
      uint64_t v128 = &v82[v78];
      v131[4] = v140;
      gdc::LayerDataRequestKey::LayerDataRequestKey(&v132._type, 0, 0x4Cu, (uint64_t)&v127, -1073741827);
      uint64_t v4 = __pb;
      if (v127 != v129) {
        free(v127);
      }
      gdc::LayerDataCollector::addDataKey(v112, (const gdc::LayerDataRequestKey *)&v132, (const QuadTile *)v71);
      if (v134) {
        char v134 = 0;
      }
      if (v132._hash != v133) {
        free((void *)v132._hash);
      }
      if (v135 != v137) {
        free(v135);
      }
      v71 += 56;
      if (v71 == v5) {
        goto LABEL_141;
      }
    }
    uint64_t v83 = v70;
    if (v78 <= 0x40) {
      size_t v84 = 64;
    }
    else {
      size_t v84 = v136 - v135;
    }
    uint64_t v82 = (char *)malloc_type_malloc(v84, 0x100004077774924uLL);
    unsigned int v85 = v127;
    uint64_t v86 = v128;
    if (v127 == v128)
    {
LABEL_114:
      uint64_t v127 = v82;
      uint64_t v128 = v82;
      uint64_t v130 = v84;
      uint64_t v70 = v83;
      goto LABEL_115;
    }
    unint64_t v87 = v128 - v127;
    if ((unint64_t)(v128 - v127) < 8)
    {
      double v88 = v82;
    }
    else
    {
      double v88 = v82;
      if ((unint64_t)(v82 - v127) >= 0x20)
      {
        if (v87 < 0x20)
        {
          uint64_t v89 = 0;
LABEL_108:
          unint64_t v94 = v87 & 0xFFFFFFFFFFFFFFF8;
          double v88 = &v82[v87 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v95 = v89 - (v87 & 0xFFFFFFFFFFFFFFF8);
          double v96 = (uint64_t *)&v85[v89];
          double v97 = &v82[v89];
          do
          {
            uint64_t v98 = *v96++;
            *(void *)double v97 = v98;
            v97 += 8;
            v95 += 8;
          }
          while (v95);
          if (v87 == v94) {
            goto LABEL_114;
          }
          v85 += v94;
          goto LABEL_113;
        }
        uint64_t v89 = v87 & 0xFFFFFFFFFFFFFFE0;
        BOOL v90 = (long long *)(v127 + 16);
        uint64_t v91 = v82 + 16;
        unint64_t v92 = v87 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v93 = *v90;
          *(v91 - 1) = *(v90 - 1);
          *uint64_t v91 = v93;
          v90 += 2;
          v91 += 2;
          v92 -= 32;
        }
        while (v92);
        if (v87 == v89) {
          goto LABEL_114;
        }
        if ((v87 & 0x18) != 0) {
          goto LABEL_108;
        }
        v85 += v89;
        double v88 = &v82[v89];
      }
    }
    do
    {
LABEL_113:
      char v99 = *v85++;
      *v88++ = v99;
    }
    while (v85 != v86);
    goto LABEL_114;
  }
LABEL_141:
  if (v4) {
    operator delete(v4);
  }
}

void sub_1A2203A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  uint64_t v19 = *(void **)(v17 - 160);
  if (v19 != *(void **)(v17 - 144)) {
    free(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void md::FlyoverMetaDataRequester::~FlyoverMetaDataRequester(md::FlyoverMetaDataRequester *this)
{
  *(void *)this = &unk_1EF544F88;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EF544F88;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t md::ARAppLocationProvider::location(md::ARAppLocationProvider *this)
{
  return (uint64_t)this + 24;
}

double md::ARAppLocationProvider::update(uint64_t a1, md::LayoutContext *this)
{
  uint64_t v3 = md::LayoutContext::frameState(this);
  double result = *(double *)(v3 + 72);
  *(float64x2_t *)(a1 + 24) = vmulq_f64(*(float64x2_t *)(v3 + 56), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
  *(double *)(a1 + 40) = result;
  return result;
}

void md::ARAppLocationProvider::~ARAppLocationProvider(md::ARAppLocationProvider *this)
{
}

void sub_1A2203E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2203EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2203F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A220413C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A22042CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A22043C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A220458C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::LabelClusterBuilder::findClosestPair(void *a1, unint64_t a2, unint64_t a3, double *a4, void *a5, uint64_t **a6)
{
  unint64_t v9 = a2;
  unint64_t v11 = a3 - a2;
  if (a3 - a2 <= 4)
  {
    if (v11 >= 2)
    {
      unint64_t v12 = a3 - 1;
      if (a3 - 1 > a2)
      {
        double v13 = *a4 * *a4;
        uint64_t v14 = *a1;
        __asm { FMOV            V0.2D, #0.5 }
        float64x2_t v172 = _Q0;
        float64x2_t v177 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
        do
        {
          unint64_t v20 = v9++;
          if (v9 < a3)
          {
            uint64_t v21 = *(void *)(v14 + 8 * v20);
            unint64_t v22 = v9;
            do
            {
              if (!*(unsigned char *)(v21 + 61) && *(unsigned char *)(v21 + 62))
              {
                long double v23 = *(double *)(v21 + 16);
                long double v24 = *(double *)(v21 + 24);
                long double v25 = *(double *)(v21 + 32);
                double v26 = sqrt(v23 * v23 + v24 * v24);
                double v27 = atan2(v25, v26 * 0.996647189);
                long double v168 = atan2(v24, v23);
                __double2 v28 = __sincos_stret(v27);
                long double v29 = atan2(v25 + v28.__sinval * v28.__sinval * 42841.3115 * v28.__sinval, v26 + v28.__cosval * v28.__cosval * -42697.6727 * v28.__cosval);
                long double v30 = tan(v29 * 0.5 + 0.785398163);
                long double v31 = log(v30);
                v32.f64[0] = v168;
                v32.f64[1] = v31;
                *(float64x2_t *)(v21 + 40) = vmlaq_f64(v172, v177, v32);
                *(unsigned char *)(v21 + 61) = 1;
              }
              uint64_t v33 = *(void *)(v14 + 8 * v22);
              if (!*(unsigned char *)(v33 + 61) && *(unsigned char *)(v33 + 62))
              {
                long double v34 = *(double *)(v33 + 16);
                long double v35 = *(double *)(v33 + 24);
                long double v36 = *(double *)(v33 + 32);
                double v37 = sqrt(v34 * v34 + v35 * v35);
                double v38 = atan2(v36, v37 * 0.996647189);
                long double v169 = atan2(v35, v34);
                __double2 v39 = __sincos_stret(v38);
                long double v40 = atan2(v36 + v39.__sinval * v39.__sinval * 42841.3115 * v39.__sinval, v37 + v39.__cosval * v39.__cosval * -42697.6727 * v39.__cosval);
                long double v41 = tan(v40 * 0.5 + 0.785398163);
                long double v42 = log(v41);
                v43.f64[0] = v169;
                v43.f64[1] = v42;
                *(float64x2_t *)(v33 + 40) = vmlaq_f64(v172, v177, v43);
                *(unsigned char *)(v33 + 61) = 1;
              }
              float64x2_t v44 = vsubq_f64(*(float64x2_t *)(v21 + 40), *(float64x2_t *)(v33 + 40));
              double v45 = vaddvq_f64(vmulq_f64(v44, v44));
              if (v45 < v13)
              {
                *a5 = v21;
                a5[1] = v33;
                *a4 = sqrt(v45);
                double v13 = v45;
              }
              ++v22;
            }
            while (v22 < a3);
          }
        }
        while (v9 != v12);
      }
    }
    return;
  }
  unint64_t v46 = v11 >> 1;
  unint64_t v47 = (v11 >> 1) + a2;
  unint64_t v165 = *(void *)(*a1 + 8 * v47);
  float v170 = (md::LabelPoint *)(v165 + 16);
  double v48 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v165 + 16));
  double v184 = 0;
  double v185 = 0;
  double v186 = 0;
  {
    operator new();
  }
  uint64_t v159 = mdm::Allocator::instance(void)::alloc;
  uint64_t v187 = mdm::Allocator::instance(void)::alloc;
  size_t v180 = 0;
  unint64_t v181 = 0;
  double v182 = 0;
  {
    operator new();
  }
  uint64_t v160 = mdm::Allocator::instance(void)::alloc;
  uint64_t v183 = mdm::Allocator::instance(void)::alloc;
  unint64_t v173 = v11;
  if (v11 >> 62
    || (uint64_t v49 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v159 + 16))(v159, 8 * v46, 8), v184 = v49, v185 = v49, v179 = &v49[8 * v46], v186 = v179, v50 = v11 - v46, (v11 - v46) >> 61))
  {
    abort();
  }
  int v51 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v160 + 16))(v160, 8 * v50, 8);
  unint64_t v155 = a3;
  unint64_t v157 = v47;
  uint64_t v161 = a1;
  unint64_t v163 = v9;
  uint64_t v52 = 0;
  size_t v180 = v51;
  unint64_t v181 = v51;
  float v178 = &v51[8 * v50];
  double v182 = v178;
  int v53 = v51;
  int v54 = v49;
  unsigned int v166 = a5;
  do
  {
    unint64_t v55 = (*a6)[v52];
    double v56 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v55 + 16));
    if (v56 == *(double *)md::LabelPoint::mercatorPoint(v170))
    {
      if (v55 < v165) {
        goto LABEL_26;
      }
    }
    else
    {
      double v57 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v55 + 16));
      if (v57 < *(double *)md::LabelPoint::mercatorPoint(v170))
      {
LABEL_26:
        if (v49 >= v179)
        {
          uint64_t v58 = (v49 - v54) >> 3;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 61) {
            goto LABEL_148;
          }
          if ((v179 - v54) >> 2 > v59) {
            unint64_t v59 = (v179 - v54) >> 2;
          }
          if ((unint64_t)(v179 - v54) >= 0x7FFFFFFFFFFFFFF8) {
            uint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v60 = v59;
          }
          if (v60)
          {
            uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v159 + 16))(v159, 8 * v60, 8);
            unint64_t v62 = (char *)(v61 + 8 * v58);
            uint64_t v63 = v61 + 8 * v60;
            if (v61) {
              *(void *)unint64_t v62 = v55;
            }
          }
          else
          {
            uint64_t v63 = 0;
            unint64_t v62 = (char *)(8 * v58);
          }
          a5 = v166;
          if (v49 != v54)
          {
            unint64_t v70 = v49 - v54 - 8;
            if (v70 < 0x138
              || &v62[-(v70 & 0xFFFFFFFFFFFFFFF8) - 8] > v62 - 8
              || &v49[-(v70 & 0xFFFFFFFFFFFFFFF8) - 8] > v49 - 8
              || (unint64_t)(v49 - v62) < 0x20)
            {
              BOOL v71 = v49;
              uint64_t v72 = v62;
            }
            else
            {
              uint64_t v78 = (v70 >> 3) + 1;
              BOOL v71 = &v49[-8 * (v78 & 0x3FFFFFFFFFFFFFFCLL)];
              uint64_t v79 = v62 - 16;
              uint64_t v80 = v49 - 16;
              uint64_t v81 = v78 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v82 = *(_OWORD *)v80;
                *((_OWORD *)v79 - 1) = *((_OWORD *)v80 - 1);
                *(_OWORD *)uint64_t v79 = v82;
                v79 -= 32;
                v80 -= 32;
                v81 -= 4;
              }
              while (v81);
              uint64_t v72 = &v62[-8 * (v78 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_57:
                uint64_t v49 = v62 + 8;
                if (v54) {
                  goto LABEL_58;
                }
                goto LABEL_59;
              }
            }
            do
            {
              uint64_t v73 = *((void *)v71 - 1);
              v71 -= 8;
              *((void *)v72 - 1) = v73;
              v72 -= 8;
            }
            while (v71 != v54);
            goto LABEL_57;
          }
          uint64_t v72 = v62;
          int v54 = v49;
          uint64_t v49 = v62 + 8;
          if (v54) {
LABEL_58:
          }
            (*(void (**)(uint64_t, char *, int64_t))(*(void *)v159 + 40))(v159, v54, v179 - v54);
LABEL_59:
          int v54 = v72;
          uint64_t v179 = (char *)v63;
          goto LABEL_23;
        }
        if (v49) {
          *(void *)uint64_t v49 = v55;
        }
        v49 += 8;
        goto LABEL_23;
      }
    }
    if (v51 >= v178)
    {
      uint64_t v64 = (v51 - v53) >> 3;
      unint64_t v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 61)
      {
LABEL_148:
        double v182 = v178;
        double v186 = v179;
        double v184 = v54;
        abort();
      }
      if ((v178 - v53) >> 2 > v65) {
        unint64_t v65 = (v178 - v53) >> 2;
      }
      if ((unint64_t)(v178 - v53) >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v66 = v65;
      }
      if (v66)
      {
        uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v160 + 16))(v160, 8 * v66, 8);
        uint64_t v68 = (char *)(v67 + 8 * v64);
        uint64_t v69 = v67 + 8 * v66;
        if (v67) {
          *(void *)uint64_t v68 = v55;
        }
      }
      else
      {
        uint64_t v69 = 0;
        uint64_t v68 = (char *)(8 * v64);
      }
      a5 = v166;
      if (v51 != v53)
      {
        unint64_t v74 = v51 - v53 - 8;
        if (v74 < 0x138
          || &v68[-(v74 & 0xFFFFFFFFFFFFFFF8) - 8] > v68 - 8
          || &v51[-(v74 & 0xFFFFFFFFFFFFFFF8) - 8] > v51 - 8
          || (unint64_t)(v51 - v68) < 0x20)
        {
          uint64_t v75 = v51;
          uint64_t v76 = v68;
        }
        else
        {
          uint64_t v83 = (v74 >> 3) + 1;
          uint64_t v75 = &v51[-8 * (v83 & 0x3FFFFFFFFFFFFFFCLL)];
          size_t v84 = v68 - 16;
          unsigned int v85 = v51 - 16;
          uint64_t v86 = v83 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v87 = *(_OWORD *)v85;
            *((_OWORD *)v84 - 1) = *((_OWORD *)v85 - 1);
            *(_OWORD *)size_t v84 = v87;
            v84 -= 32;
            v85 -= 32;
            v86 -= 4;
          }
          while (v86);
          uint64_t v76 = &v68[-8 * (v83 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_65:
            int v51 = v68 + 8;
            if (v53) {
              goto LABEL_66;
            }
            goto LABEL_67;
          }
        }
        do
        {
          uint64_t v77 = *((void *)v75 - 1);
          v75 -= 8;
          *((void *)v76 - 1) = v77;
          v76 -= 8;
        }
        while (v75 != v53);
        goto LABEL_65;
      }
      uint64_t v76 = v68;
      int v53 = v51;
      int v51 = v68 + 8;
      if (v53) {
LABEL_66:
      }
        (*(void (**)(uint64_t, char *, int64_t))(*(void *)v160 + 40))(v160, v53, v178 - v53);
LABEL_67:
      int v53 = v76;
      float v178 = (char *)v69;
      goto LABEL_23;
    }
    if (v51) {
      *(void *)int v51 = v55;
    }
    v51 += 8;
LABEL_23:
    ++v52;
  }
  while (v52 != v173);
  unint64_t v181 = v51;
  double v182 = v178;
  size_t v180 = v53;
  double v185 = v49;
  double v186 = v179;
  double v184 = v54;
  md::LabelClusterBuilder::findClosestPair(v161, v163, v157, a4, a5, &v184);
  md::LabelClusterBuilder::findClosestPair(v161, v157, v155, a4, a5, &v180);
  {
    operator new();
  }
  double v88 = *a6;
  uint64_t v89 = a6[1];
  if (*a6 == v89) {
    goto LABEL_143;
  }
  BOOL v90 = 0;
  uint64_t v91 = 0;
  unint64_t v92 = 0;
  uint64_t v158 = mdm::Allocator::instance(void)::alloc;
  while (2)
  {
    uint64_t v93 = *v88;
    if (vabdd_f64(*(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(*v88 + 16)), v48) < *a4)
    {
      if ((unint64_t)v90 < v92)
      {
        if (v90) {
          *(void *)BOOL v90 = v93;
        }
        v90 += 8;
        goto LABEL_90;
      }
      uint64_t v94 = (v90 - v91) >> 3;
      unint64_t v95 = v94 + 1;
      if ((unint64_t)(v94 + 1) >> 61) {
        abort();
      }
      unint64_t v96 = v92 - (void)v91;
      if ((uint64_t)(v92 - (void)v91) >> 2 > v95) {
        unint64_t v95 = (uint64_t)(v92 - (void)v91) >> 2;
      }
      if (v96 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v97 = v95;
      }
      if (v97)
      {
        uint64_t v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v158 + 16))(v158, 8 * v97, 8);
        char v99 = (char *)(v98 + 8 * v94);
        unint64_t v92 = v98 + 8 * v97;
        if (v98) {
          *(void *)char v99 = v93;
        }
      }
      else
      {
        unint64_t v92 = 0;
        char v99 = (char *)(8 * v94);
      }
      a5 = v166;
      uint64_t v100 = v99;
      if (v90 != v91)
      {
        unint64_t v101 = v90 - v91 - 8;
        if (v101 < 0x138
          || &v99[-(v101 & 0xFFFFFFFFFFFFFFF8) - 8] > v99 - 8
          || &v90[-(v101 & 0xFFFFFFFFFFFFFFF8) - 8] > v90 - 8
          || (unint64_t)(v90 - v99) < 0x20)
        {
          char v102 = v90;
          uint64_t v100 = v99;
        }
        else
        {
          uint64_t v104 = (v101 >> 3) + 1;
          char v102 = &v90[-8 * (v104 & 0x3FFFFFFFFFFFFFFCLL)];
          long long v105 = v99 - 16;
          unint64_t v106 = v90 - 16;
          uint64_t v107 = v104 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v108 = *(_OWORD *)v106;
            *((_OWORD *)v105 - 1) = *((_OWORD *)v106 - 1);
            *(_OWORD *)long long v105 = v108;
            v105 -= 32;
            v106 -= 32;
            v107 -= 4;
          }
          while (v107);
          uint64_t v100 = &v99[-8 * (v104 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v104 == (v104 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_109;
          }
        }
        do
        {
          uint64_t v103 = *((void *)v102 - 1);
          v102 -= 8;
          *((void *)v100 - 1) = v103;
          v100 -= 8;
        }
        while (v102 != v91);
      }
LABEL_109:
      BOOL v90 = v99 + 8;
      if (v91) {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v158 + 40))(v158, v91, v96);
      }
      uint64_t v91 = v100;
    }
LABEL_90:
    if (++v88 != v89) {
      continue;
    }
    break;
  }
  if (v90 != v91)
  {
    unint64_t v156 = v92;
    uint64_t v109 = 0;
    unint64_t v110 = (v90 - v91) >> 3;
    double v111 = *a4 * *a4;
    unint64_t v112 = v110 - 1;
    unint64_t v164 = v110;
    if (v110 <= 1) {
      unint64_t v110 = 1;
    }
    unint64_t v162 = v110;
    int v113 = (uint64_t *)(v91 + 8);
    double v114 = 0.5;
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v167 = _Q0;
    float64x2_t v171 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
    while (1)
    {
      uint64_t v116 = v109 + 1;
      if (v109 + 1 < v164) {
        break;
      }
LABEL_123:
      --v112;
      ++v113;
      uint64_t v109 = v116;
      if (v116 == v162)
      {
        unint64_t v92 = v156;
        goto LABEL_141;
      }
    }
    uint64_t v117 = *(void *)&v91[8 * v109];
    int v118 = v113;
    unint64_t v119 = v112;
    while (2)
    {
      uint64_t v120 = *v118;
      int v121 = *(unsigned __int8 *)(*v118 + 61);
      if (!*(unsigned char *)(*v118 + 61))
      {
        int v121 = *(unsigned __int8 *)(v120 + 62);
        if (*(unsigned char *)(v120 + 62))
        {
          long double v122 = *(double *)(v120 + 16);
          long double v123 = *(double *)(v120 + 24);
          long double v124 = *(double *)(v120 + 32);
          double v125 = sqrt(v122 * v122 + v123 * v123);
          double v126 = atan2(v124, v125 * 0.996647189);
          long double v174 = atan2(v123, v122);
          __double2 v127 = __sincos_stret(v126);
          long double v128 = atan2(v124 + v127.__sinval * v127.__sinval * 42841.3115 * v127.__sinval, v125 + v127.__cosval * v127.__cosval * -42697.6727 * v127.__cosval);
          long double v129 = tan(v128 * v114 + 0.785398163);
          long double v130 = log(v129);
          v131.f64[0] = v174;
          v131.f64[1] = v130;
          *(float64x2_t *)(v120 + 40) = vmlaq_f64(v167, v171, v131);
          int v121 = 1;
          *(unsigned char *)(v120 + 61) = 1;
        }
      }
      double v132 = *(double *)(v120 + 48);
      if (*(unsigned char *)(v117 + 61) || !*(unsigned char *)(v117 + 62))
      {
        double v133 = *(double *)(v117 + 48);
        if (v132 - v133 >= *a4) {
          goto LABEL_123;
        }
        if (v121) {
          goto LABEL_138;
        }
      }
      else
      {
        long double v144 = *(double *)(v117 + 16);
        long double v145 = *(double *)(v117 + 24);
        long double v146 = *(double *)(v117 + 32);
        double v147 = sqrt(v144 * v144 + v145 * v145);
        double v148 = atan2(v146, v147 * 0.996647189);
        double v149 = atan2(v145, v144);
        __double2 v150 = __sincos_stret(v148);
        long double v151 = v147 + v150.__cosval * v150.__cosval * -42697.6727 * v150.__cosval;
        double v114 = 0.5;
        long double v152 = atan2(v146 + v150.__sinval * v150.__sinval * 42841.3115 * v150.__sinval, v151);
        long double v153 = tan(v152 * 0.5 + 0.785398163);
        double v133 = log(v153) * 0.159154943 + 0.5;
        *(double *)(v117 + 40) = v149 * 0.159154943 + 0.5;
        *(double *)(v117 + 48) = v133;
        *(unsigned char *)(v117 + 61) = 1;
        if (v132 - v133 >= *a4) {
          goto LABEL_123;
        }
        if (*(unsigned char *)(v120 + 61))
        {
LABEL_138:
          double v154 = (*(double *)(v117 + 40) - *(double *)(v120 + 40)) * (*(double *)(v117 + 40) - *(double *)(v120 + 40))
               + (v133 - *(double *)(v120 + 48)) * (v133 - *(double *)(v120 + 48));
          if (v154 < v111)
          {
            *a5 = v117;
            a5[1] = v120;
            *a4 = sqrt(v154);
            double v111 = v154;
          }
          ++v118;
          if (!--v119) {
            goto LABEL_123;
          }
          continue;
        }
      }
      break;
    }
    if (*(unsigned char *)(v120 + 62))
    {
      long double v134 = *(double *)(v120 + 16);
      long double v135 = *(double *)(v120 + 24);
      long double v136 = *(double *)(v120 + 32);
      double v137 = sqrt(v134 * v134 + v135 * v135);
      double v138 = atan2(v136, v137 * 0.996647189);
      long double v175 = atan2(v135, v134);
      __double2 v139 = __sincos_stret(v138);
      long double v140 = atan2(v136 + v139.__sinval * v139.__sinval * 42841.3115 * v139.__sinval, v137 + v139.__cosval * v139.__cosval * -42697.6727 * v139.__cosval);
      long double v141 = tan(v140 * v114 + 0.785398163);
      long double v142 = log(v141);
      v143.f64[0] = v175;
      v143.f64[1] = v142;
      *(float64x2_t *)(v120 + 40) = vmlaq_f64(v167, v171, v143);
      *(unsigned char *)(v120 + 61) = 1;
      double v133 = *(double *)(v117 + 48);
    }
    goto LABEL_138;
  }
LABEL_141:
  if (v91) {
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v158 + 40))(v158, v91, v92 - (void)v91);
  }
LABEL_143:
  if (v180) {
    (*(void (**)(uint64_t, char *, int64_t))(*(void *)v160 + 40))(v160, v180, v182 - v180);
  }
  if (v184) {
    (*(void (**)(uint64_t, char *, int64_t))(*(void *)v159 + 40))(v159, v184, v186 - v184);
  }
}

void sub_1A22054A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (v35) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a11 + 40))(a11, v35, a10 - v35);
  }
  if (a28)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a13 + 40))(a13, a28, a30 - a28);
    uint64_t v37 = a32;
    if (!a32) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v37 = a32;
    if (!a32) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a35 + 40))(a35, v37, a34 - v37);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = a1;
  unint64_t v6 = *a2;
  unint64_t v7 = *a1;
  uint64_t v8 = (md::LabelPoint *)(*a2 + 16);
  double v9 = *(double *)(md::LabelPoint::mercatorPoint(v8) + 8);
  if (v9 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)) + 8))
  {
    if (v6 < v7) {
      goto LABEL_3;
    }
LABEL_7:
    unint64_t v16 = *a3;
    unint64_t v17 = *v4;
    uint64_t v18 = (md::LabelPoint *)(*a3 + 16);
    double v19 = *(double *)(md::LabelPoint::mercatorPoint(v18) + 8);
    uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v17 + 16));
    if (v19 == *(double *)(result + 8))
    {
      if (v16 >= v17) {
        return result;
      }
    }
    else
    {
      double v25 = *(double *)(md::LabelPoint::mercatorPoint(v18) + 8);
      uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v17 + 16));
      if (v25 >= *(double *)(result + 8)) {
        return result;
      }
    }
    unint64_t v26 = *v4;
    unint64_t *v4 = *a3;
    *a3 = v26;
    unint64_t v27 = *v4;
    unint64_t v28 = *v5;
    long double v29 = (md::LabelPoint *)(*v4 + 16);
    double v30 = *(double *)(md::LabelPoint::mercatorPoint(v29) + 8);
    uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v28 + 16));
    if (v30 == *(double *)(result + 8))
    {
      if (v27 >= v28) {
        return result;
      }
    }
    else
    {
      double v33 = *(double *)(md::LabelPoint::mercatorPoint(v29) + 8);
      uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v28 + 16));
      if (v33 >= *(double *)(result + 8)) {
        return result;
      }
    }
    goto LABEL_17;
  }
  double v15 = *(double *)(md::LabelPoint::mercatorPoint(v8) + 8);
  if (v15 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)) + 8)) {
    goto LABEL_7;
  }
LABEL_3:
  unint64_t v10 = *a3;
  unint64_t v11 = *v4;
  unint64_t v12 = (md::LabelPoint *)(*a3 + 16);
  double v13 = *(double *)(md::LabelPoint::mercatorPoint(v12) + 8);
  uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
  if (v13 == *(double *)(result + 8))
  {
    if (v10 < v11)
    {
LABEL_5:
      uint64_t v4 = a3;
      goto LABEL_17;
    }
  }
  else
  {
    double v20 = *(double *)(md::LabelPoint::mercatorPoint(v12) + 8);
    uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
    if (v20 < *(double *)(result + 8)) {
      goto LABEL_5;
    }
  }
  unint64_t v21 = *v5;
  unint64_t *v5 = *v4;
  unint64_t *v4 = v21;
  unint64_t v22 = *a3;
  long double v23 = (md::LabelPoint *)(*a3 + 16);
  double v24 = *(double *)(md::LabelPoint::mercatorPoint(v23) + 8);
  uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v21 + 16));
  if (v24 == *(double *)(result + 8))
  {
    unint64_t v5 = v4;
    uint64_t v4 = a3;
    if (v22 >= v21) {
      return result;
    }
    goto LABEL_17;
  }
  double v32 = *(double *)(md::LabelPoint::mercatorPoint(v23) + 8);
  uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v21 + 16));
  unint64_t v5 = v4;
  uint64_t v4 = a3;
  if (v32 < *(double *)(result + 8))
  {
LABEL_17:
    unint64_t v31 = *v5;
    unint64_t *v5 = *v4;
    unint64_t *v4 = v31;
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a2, a3);
  unint64_t v8 = *a4;
  unint64_t v9 = *a3;
  unint64_t v10 = (md::LabelPoint *)(*a4 + 16);
  double v11 = *(double *)(md::LabelPoint::mercatorPoint(v10) + 8);
  uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v9 + 16));
  if (v11 == *(double *)(result + 8))
  {
    if (v8 >= v9) {
      return result;
    }
  }
  else
  {
    double v13 = *(double *)(md::LabelPoint::mercatorPoint(v10) + 8);
    uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v9 + 16));
    if (v13 >= *(double *)(result + 8)) {
      return result;
    }
  }
  unint64_t v14 = *a3;
  *a3 = *a4;
  *a4 = v14;
  unint64_t v15 = *a3;
  unint64_t v16 = *a2;
  unint64_t v17 = (md::LabelPoint *)(*a3 + 16);
  double v18 = *(double *)(md::LabelPoint::mercatorPoint(v17) + 8);
  uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v16 + 16));
  if (v18 == *(double *)(result + 8))
  {
    if (v15 >= v16) {
      return result;
    }
  }
  else
  {
    double v19 = *(double *)(md::LabelPoint::mercatorPoint(v17) + 8);
    uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v16 + 16));
    if (v19 >= *(double *)(result + 8)) {
      return result;
    }
  }
  unint64_t v20 = *a2;
  *a2 = *a3;
  *a3 = v20;
  unint64_t v21 = *a2;
  unint64_t v22 = *a1;
  long double v23 = (md::LabelPoint *)(*a2 + 16);
  double v24 = *(double *)(md::LabelPoint::mercatorPoint(v23) + 8);
  uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16));
  if (v24 == *(double *)(result + 8))
  {
    if (v21 >= v22) {
      return result;
    }
  }
  else
  {
    double v26 = *(double *)(md::LabelPoint::mercatorPoint(v23) + 8);
    uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16));
    if (v26 >= *(double *)(result + 8)) {
      return result;
    }
  }
  unint64_t v25 = *a1;
  *a1 = *a2;
  *a2 = v25;
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a2, a3, a4);
  unint64_t v10 = *a5;
  unint64_t v11 = *a4;
  unint64_t v12 = (md::LabelPoint *)(*a5 + 16);
  double v13 = *(double *)(md::LabelPoint::mercatorPoint(v12) + 8);
  uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
  if (v13 == *(double *)(result + 8))
  {
    if (v10 >= v11) {
      return result;
    }
  }
  else
  {
    double v15 = *(double *)(md::LabelPoint::mercatorPoint(v12) + 8);
    uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
    if (v15 >= *(double *)(result + 8)) {
      return result;
    }
  }
  unint64_t v16 = *a4;
  *a4 = *a5;
  *a5 = v16;
  unint64_t v17 = *a4;
  unint64_t v18 = *a3;
  double v19 = (md::LabelPoint *)(*a4 + 16);
  double v20 = *(double *)(md::LabelPoint::mercatorPoint(v19) + 8);
  uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v18 + 16));
  if (v20 == *(double *)(result + 8))
  {
    if (v17 >= v18) {
      return result;
    }
  }
  else
  {
    double v21 = *(double *)(md::LabelPoint::mercatorPoint(v19) + 8);
    uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v18 + 16));
    if (v21 >= *(double *)(result + 8)) {
      return result;
    }
  }
  unint64_t v22 = *a3;
  *a3 = *a4;
  *a4 = v22;
  unint64_t v23 = *a3;
  unint64_t v24 = *a2;
  unint64_t v25 = (md::LabelPoint *)(*a3 + 16);
  double v26 = *(double *)(md::LabelPoint::mercatorPoint(v25) + 8);
  uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v24 + 16));
  if (v26 == *(double *)(result + 8))
  {
    if (v23 >= v24) {
      return result;
    }
  }
  else
  {
    double v27 = *(double *)(md::LabelPoint::mercatorPoint(v25) + 8);
    uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v24 + 16));
    if (v27 >= *(double *)(result + 8)) {
      return result;
    }
  }
  unint64_t v28 = *a2;
  *a2 = *a3;
  *a3 = v28;
  unint64_t v29 = *a2;
  unint64_t v30 = *a1;
  unint64_t v31 = (md::LabelPoint *)(*a2 + 16);
  double v32 = *(double *)(md::LabelPoint::mercatorPoint(v31) + 8);
  uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v30 + 16));
  if (v32 == *(double *)(result + 8))
  {
    if (v29 >= v30) {
      return result;
    }
  }
  else
  {
    double v34 = *(double *)(md::LabelPoint::mercatorPoint(v31) + 8);
    uint64_t result = md::LabelPoint::mercatorPoint((md::LabelPoint *)(v30 + 16));
    if (v34 >= *(double *)(result + 8)) {
      return result;
    }
  }
  unint64_t v33 = *a1;
  *a1 = *a2;
  *a2 = v33;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      double v8 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v6 + 16)) + 8);
      if (v8 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)) + 8))
      {
        if (v6 >= v7) {
          return 1;
        }
      }
      else
      {
        double v24 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v6 + 16)) + 8);
        if (v24 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)) + 8)) {
          return 1;
        }
      }
      unint64_t v25 = *a1;
      *a1 = *(v2 - 1);
      *(v2 - 1) = v25;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v9 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByY &,md::ClusterNode **>(a1, a1 + 1, a1 + 2);
      unint64_t v10 = a1 + 3;
      if (a1 + 3 == v2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      double v26 = v2;
      break;
  }
  while (2)
  {
    unint64_t v14 = *v10;
    unint64_t v15 = *v9;
    unint64_t v16 = (md::LabelPoint *)(*v10 + 16);
    double v17 = *(double *)(md::LabelPoint::mercatorPoint(v16) + 8);
    if (v17 == *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v15 + 16)) + 8))
    {
      if (v14 >= v15) {
        goto LABEL_10;
      }
    }
    else
    {
      double v18 = *(double *)(md::LabelPoint::mercatorPoint(v16) + 8);
      if (v18 >= *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v15 + 16)) + 8)) {
        goto LABEL_10;
      }
    }
    unint64_t v19 = *v10;
    *unint64_t v10 = *v9;
    double v13 = a1;
    if (v9 == a1) {
      goto LABEL_9;
    }
    int v27 = v12;
    uint64_t v20 = v11;
    while (1)
    {
      unint64_t v22 = *(unint64_t *)((char *)a1 + v20 + 8);
      double v23 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16)) + 8);
      if (v23 != *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16)) + 8)) {
        break;
      }
      if (v19 >= v22)
      {
        double v13 = v9;
        goto LABEL_8;
      }
LABEL_18:
      --v9;
      *(unint64_t *)((char *)a1 + v20 + 16) = *(unint64_t *)((char *)a1 + v20 + 8);
      v20 -= 8;
      if (v20 == -16)
      {
        double v13 = a1;
        goto LABEL_8;
      }
    }
    double v21 = *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16)) + 8);
    if (v21 < *(double *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16)) + 8)) {
      goto LABEL_18;
    }
    double v13 = (unint64_t *)((char *)a1 + v20 + 16);
LABEL_8:
    uint64_t v2 = v26;
    int v12 = v27;
LABEL_9:
    *double v13 = v19;
    if (++v12 == 8) {
      return v10 + 1 == v2;
    }
LABEL_10:
    unint64_t v9 = v10;
    v11 += 8;
    if (++v10 != v2) {
      continue;
    }
    return 1;
  }
}

double *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = a1;
  unint64_t v6 = *a2;
  unint64_t v7 = *a1;
  double v8 = (md::LabelPoint *)(*a2 + 16);
  double v9 = *(double *)md::LabelPoint::mercatorPoint(v8);
  if (v9 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)))
  {
    if (v6 < v7) {
      goto LABEL_3;
    }
LABEL_7:
    unint64_t v16 = *a3;
    unint64_t v17 = *v4;
    double v18 = (md::LabelPoint *)(*a3 + 16);
    double v19 = *(double *)md::LabelPoint::mercatorPoint(v18);
    BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v17 + 16));
    if (v19 == *result)
    {
      if (v16 >= v17) {
        return result;
      }
    }
    else
    {
      double v25 = *(double *)md::LabelPoint::mercatorPoint(v18);
      BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v17 + 16));
      if (v25 >= *result) {
        return result;
      }
    }
    unint64_t v26 = *v4;
    unint64_t *v4 = *a3;
    *a3 = v26;
    unint64_t v27 = *v4;
    unint64_t v28 = *v5;
    unint64_t v29 = (md::LabelPoint *)(*v4 + 16);
    double v30 = *(double *)md::LabelPoint::mercatorPoint(v29);
    BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v28 + 16));
    if (v30 == *result)
    {
      if (v27 >= v28) {
        return result;
      }
    }
    else
    {
      double v33 = *(double *)md::LabelPoint::mercatorPoint(v29);
      BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v28 + 16));
      if (v33 >= *result) {
        return result;
      }
    }
    goto LABEL_17;
  }
  double v15 = *(double *)md::LabelPoint::mercatorPoint(v8);
  if (v15 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16))) {
    goto LABEL_7;
  }
LABEL_3:
  unint64_t v10 = *a3;
  unint64_t v11 = *v4;
  int v12 = (md::LabelPoint *)(*a3 + 16);
  double v13 = *(double *)md::LabelPoint::mercatorPoint(v12);
  BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
  if (v13 == *result)
  {
    if (v10 < v11)
    {
LABEL_5:
      uint64_t v4 = a3;
      goto LABEL_17;
    }
  }
  else
  {
    double v20 = *(double *)md::LabelPoint::mercatorPoint(v12);
    BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
    if (v20 < *result) {
      goto LABEL_5;
    }
  }
  unint64_t v21 = *v5;
  unint64_t *v5 = *v4;
  unint64_t *v4 = v21;
  unint64_t v22 = *a3;
  double v23 = (md::LabelPoint *)(*a3 + 16);
  double v24 = *(double *)md::LabelPoint::mercatorPoint(v23);
  BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v21 + 16));
  if (v24 == *result)
  {
    unint64_t v5 = v4;
    uint64_t v4 = a3;
    if (v22 >= v21) {
      return result;
    }
    goto LABEL_17;
  }
  double v32 = *(double *)md::LabelPoint::mercatorPoint(v23);
  BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v21 + 16));
  unint64_t v5 = v4;
  uint64_t v4 = a3;
  if (v32 < *result)
  {
LABEL_17:
    unint64_t v31 = *v5;
    unint64_t *v5 = *v4;
    unint64_t *v4 = v31;
  }
  return result;
}

double *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a2, a3);
  unint64_t v8 = *a4;
  unint64_t v9 = *a3;
  unint64_t v10 = (md::LabelPoint *)(*a4 + 16);
  double v11 = *(double *)md::LabelPoint::mercatorPoint(v10);
  BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v9 + 16));
  if (v11 == *result)
  {
    if (v8 >= v9) {
      return result;
    }
  }
  else
  {
    double v13 = *(double *)md::LabelPoint::mercatorPoint(v10);
    BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v9 + 16));
    if (v13 >= *result) {
      return result;
    }
  }
  unint64_t v14 = *a3;
  *a3 = *a4;
  *a4 = v14;
  unint64_t v15 = *a3;
  unint64_t v16 = *a2;
  unint64_t v17 = (md::LabelPoint *)(*a3 + 16);
  double v18 = *(double *)md::LabelPoint::mercatorPoint(v17);
  BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v16 + 16));
  if (v18 == *result)
  {
    if (v15 >= v16) {
      return result;
    }
  }
  else
  {
    double v19 = *(double *)md::LabelPoint::mercatorPoint(v17);
    BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v16 + 16));
    if (v19 >= *result) {
      return result;
    }
  }
  unint64_t v20 = *a2;
  *a2 = *a3;
  *a3 = v20;
  unint64_t v21 = *a2;
  unint64_t v22 = *a1;
  double v23 = (md::LabelPoint *)(*a2 + 16);
  double v24 = *(double *)md::LabelPoint::mercatorPoint(v23);
  BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16));
  if (v24 == *result)
  {
    if (v21 >= v22) {
      return result;
    }
  }
  else
  {
    double v26 = *(double *)md::LabelPoint::mercatorPoint(v23);
    BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16));
    if (v26 >= *result) {
      return result;
    }
  }
  unint64_t v25 = *a1;
  *a1 = *a2;
  *a2 = v25;
  return result;
}

double *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a2, a3, a4);
  unint64_t v10 = *a5;
  unint64_t v11 = *a4;
  int v12 = (md::LabelPoint *)(*a5 + 16);
  double v13 = *(double *)md::LabelPoint::mercatorPoint(v12);
  BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
  if (v13 == *result)
  {
    if (v10 >= v11) {
      return result;
    }
  }
  else
  {
    double v15 = *(double *)md::LabelPoint::mercatorPoint(v12);
    BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v11 + 16));
    if (v15 >= *result) {
      return result;
    }
  }
  unint64_t v16 = *a4;
  *a4 = *a5;
  *a5 = v16;
  unint64_t v17 = *a4;
  unint64_t v18 = *a3;
  double v19 = (md::LabelPoint *)(*a4 + 16);
  double v20 = *(double *)md::LabelPoint::mercatorPoint(v19);
  BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v18 + 16));
  if (v20 == *result)
  {
    if (v17 >= v18) {
      return result;
    }
  }
  else
  {
    double v21 = *(double *)md::LabelPoint::mercatorPoint(v19);
    BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v18 + 16));
    if (v21 >= *result) {
      return result;
    }
  }
  unint64_t v22 = *a3;
  *a3 = *a4;
  *a4 = v22;
  unint64_t v23 = *a3;
  unint64_t v24 = *a2;
  unint64_t v25 = (md::LabelPoint *)(*a3 + 16);
  double v26 = *(double *)md::LabelPoint::mercatorPoint(v25);
  BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v24 + 16));
  if (v26 == *result)
  {
    if (v23 >= v24) {
      return result;
    }
  }
  else
  {
    double v27 = *(double *)md::LabelPoint::mercatorPoint(v25);
    BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v24 + 16));
    if (v27 >= *result) {
      return result;
    }
  }
  unint64_t v28 = *a2;
  *a2 = *a3;
  *a3 = v28;
  unint64_t v29 = *a2;
  unint64_t v30 = *a1;
  unint64_t v31 = (md::LabelPoint *)(*a2 + 16);
  double v32 = *(double *)md::LabelPoint::mercatorPoint(v31);
  BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v30 + 16));
  if (v32 == *result)
  {
    if (v29 >= v30) {
      return result;
    }
  }
  else
  {
    double v34 = *(double *)md::LabelPoint::mercatorPoint(v31);
    BOOL result = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v30 + 16));
    if (v34 >= *result) {
      return result;
    }
  }
  unint64_t v33 = *a1;
  *a1 = *a2;
  *a2 = v33;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      double v8 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v6 + 16));
      if (v8 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16)))
      {
        if (v6 >= v7) {
          return 1;
        }
      }
      else
      {
        double v24 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v6 + 16));
        if (v24 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 16))) {
          return 1;
        }
      }
      unint64_t v25 = *a1;
      *a1 = *(v2 - 1);
      *(v2 - 1) = v25;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v9 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelClusterBuilder::ClusterNodeSorterByX &,md::ClusterNode **>(a1, a1 + 1, a1 + 2);
      unint64_t v10 = a1 + 3;
      if (a1 + 3 == v2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      double v26 = v2;
      break;
  }
  while (2)
  {
    unint64_t v14 = *v10;
    unint64_t v15 = *v9;
    unint64_t v16 = (md::LabelPoint *)(*v10 + 16);
    double v17 = *(double *)md::LabelPoint::mercatorPoint(v16);
    if (v17 == *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v15 + 16)))
    {
      if (v14 >= v15) {
        goto LABEL_10;
      }
    }
    else
    {
      double v18 = *(double *)md::LabelPoint::mercatorPoint(v16);
      if (v18 >= *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v15 + 16))) {
        goto LABEL_10;
      }
    }
    unint64_t v19 = *v10;
    *unint64_t v10 = *v9;
    double v13 = a1;
    if (v9 == a1) {
      goto LABEL_9;
    }
    int v27 = v12;
    uint64_t v20 = v11;
    while (1)
    {
      unint64_t v22 = *(unint64_t *)((char *)a1 + v20 + 8);
      double v23 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16));
      if (v23 != *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16))) {
        break;
      }
      if (v19 >= v22)
      {
        double v13 = v9;
        goto LABEL_8;
      }
LABEL_18:
      --v9;
      *(unint64_t *)((char *)a1 + v20 + 16) = *(unint64_t *)((char *)a1 + v20 + 8);
      v20 -= 8;
      if (v20 == -16)
      {
        double v13 = a1;
        goto LABEL_8;
      }
    }
    double v21 = *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v19 + 16));
    if (v21 < *(double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v22 + 16))) {
      goto LABEL_18;
    }
    double v13 = (unint64_t *)((char *)a1 + v20 + 16);
LABEL_8:
    uint64_t v2 = v26;
    int v12 = v27;
LABEL_9:
    *double v13 = v19;
    if (++v12 == 8) {
      return v10 + 1 == v2;
    }
LABEL_10:
    unint64_t v9 = v10;
    v11 += 8;
    if (++v10 != v2) {
      continue;
    }
    return 1;
  }
}

uint64_t md::ARCameraImageRenderLayer::layoutWithoutStyles(md::ARCameraImageRenderLayer *this, const md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::ARCameraImageRenderLayer *, const md::LayoutContext *))(*(void *)this + 16))(this, a2);
}

unint64_t md::ARCameraImageRenderLayer::layout(unint64_t this, const md::LayoutContext *a2, double a3, double a4, double a5)
{
  uint64_t v6 = this;
  unint64_t v7 = *(uint64_t **)(this + 96);
  double v8 = (uint64_t *)v7[4];
  unint64_t v9 = (uint64_t *)v7[5];
  if (v8 != v9)
  {
    unint64_t v10 = (void *)v7[1];
    while (1)
    {
      uint64_t v11 = *v8;
      unint64_t v12 = v7[2];
      if ((unint64_t)v10 >= v12) {
        break;
      }
      if (v10) {
        *unint64_t v10 = v11;
      }
      ++v10;
LABEL_4:
      v7[1] = (uint64_t)v10;
      if (++v8 == v9)
      {
        uint64_t v31 = v7[4];
        if (v31 != v7[5]) {
          void v7[5] = v31;
        }
        goto LABEL_33;
      }
    }
    uint64_t v13 = ((uint64_t)v10 - *v7) >> 3;
    if ((unint64_t)(v13 + 1) >> 61) {
      abort();
    }
    uint64_t v14 = v12 - *v7;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v16 = v15;
    }
    if (v16)
    {
      uint64_t v17 = 8 * v16;
      this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[3] + 16))(v7[3], 8 * v16, 8);
      double v18 = (void *)(this + 8 * v13);
      uint64_t v16 = this + v17;
      if (this) {
        *double v18 = v11;
      }
    }
    else
    {
      double v18 = (void *)(8 * v13);
    }
    uint64_t v20 = *v7;
    uint64_t v19 = v7[1];
    uint64_t v21 = v19 - *v7;
    if (v19 == *v7)
    {
      double v23 = v18;
      goto LABEL_29;
    }
    unint64_t v22 = v21 - 8;
    if ((unint64_t)(v21 - 8) < 0x38)
    {
      double v23 = v18;
    }
    else
    {
      double v23 = v18;
      if ((unint64_t)(v19 - (void)v18) >= 0x20)
      {
        uint64_t v24 = (v22 >> 3) + 1;
        unint64_t v25 = v18 - 2;
        double v26 = (long long *)(v19 - 16);
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *v26;
          *(v25 - 1) = *(v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 2;
          v27 -= 4;
        }
        while (v27);
        double v23 = &v18[-(v24 & 0x3FFFFFFFFFFFFFFCLL)];
        v19 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
    }
    do
    {
      uint64_t v29 = *(void *)(v19 - 8);
      v19 -= 8;
      *--double v23 = v29;
    }
    while (v19 != v20);
LABEL_28:
    uint64_t v19 = *v7;
LABEL_29:
    unint64_t v10 = v18 + 1;
    *unint64_t v7 = (uint64_t)v23;
    v7[1] = (uint64_t)(v18 + 1);
    uint64_t v30 = v7[2];
    void v7[2] = v16;
    if (v19) {
      this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[3] + 40))(v7[3], v19, v30 - v19);
    }
    goto LABEL_4;
  }
LABEL_33:
  double v32 = *(void **)(v6 + 104);
  if (v32)
  {
    do
    {
      if (v32[1])
      {
        unint64_t v34 = 0;
        uint64_t v35 = v32 + 2;
        this = (unint64_t)(v32 + 2);
        long double v36 = (void (***)(unint64_t))(v32 + 2);
        do
        {
          uint64_t v37 = *v36;
          v36 += 15;
          (*v37)(this);
          ++v34;
          v35 += 15;
          this = (unint64_t)v36;
        }
        while (v34 < v32[1]);
      }
      v32[1] = 0;
      double v32 = (void *)*v32;
    }
    while (v32);
    uint64_t v33 = *(void *)(v6 + 104);
  }
  else
  {
    uint64_t v33 = 0;
  }
  *(void *)(v6 + 112) = v33;
  double v38 = *(void **)(*(void *)(*(void *)(v6 + 40) + 24) + 8);
  uint64_t v39 = v38[3];
  uint64_t v40 = v38[4];
  uint64_t v41 = v40 - v39;
  if (v40 == v39) {
    goto LABEL_48;
  }
  uint64_t v42 = 0;
  unint64_t v43 = v41 >> 3;
  while (1)
  {
    uint64_t v44 = *(void *)(v39 + 8 * v42);
    if (!*(unsigned char *)v44)
    {
      unint64_t v45 = *(void *)(v44 + 8);
      uint64_t v46 = v38[15];
      if (v45 < (v38[16] - v46) >> 3) {
        break;
      }
    }
    if (++v42 >= v43) {
      goto LABEL_48;
    }
  }
  uint64_t v47 = *(void *)(v46 + 8 * v45);
  if (!v47) {
LABEL_48:
  }
    uint64_t v48 = 0;
  else {
    uint64_t v48 = *(void *)(*(void *)(v47 + 24) + 32);
  }
  *(void *)(v48 + 32) = *(void *)(v6 + 48);
  uint64_t v49 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v50 = (int8x8_t)v49[1];
  if (!*(void *)&v50) {
    return this;
  }
  unint64_t v51 = (unint64_t)vcnt_s8(v50);
  LOWORD(v51) = vaddlv_u8((uint8x8_t)v51);
  if (v51 > 1uLL)
  {
    uint64_t v52 = 0x1AF456233693CD46;
    if (*(void *)&v50 <= 0x1AF456233693CD46uLL) {
      uint64_t v52 = 0x1AF456233693CD46uLL % *(void *)&v50;
    }
  }
  else
  {
    uint64_t v52 = (*(void *)&v50 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v53 = *v49;
  int v54 = *(void **)(v53 + 8 * v52);
  if (!v54) {
    goto LABEL_72;
  }
  unint64_t v55 = (void *)*v54;
  if (!v55) {
    goto LABEL_72;
  }
  if (v51 < 2uLL)
  {
    while (1)
    {
      uint64_t v57 = v55[1];
      if (v57 == 0x1AF456233693CD46)
      {
        if (v55[2] == 0x1AF456233693CD46) {
          goto LABEL_70;
        }
      }
      else if ((v57 & (*(void *)&v50 - 1)) != v52)
      {
        goto LABEL_72;
      }
      unint64_t v55 = (void *)*v55;
      if (!v55) {
        goto LABEL_72;
      }
    }
  }
  while (1)
  {
    unint64_t v56 = v55[1];
    if (v56 == 0x1AF456233693CD46) {
      break;
    }
    if (v56 >= *(void *)&v50) {
      v56 %= *(void *)&v50;
    }
    if (v56 != v52) {
      goto LABEL_72;
    }
LABEL_59:
    unint64_t v55 = (void *)*v55;
    if (!v55) {
      goto LABEL_72;
    }
  }
  if (v55[2] != 0x1AF456233693CD46) {
    goto LABEL_59;
  }
LABEL_70:
  uint64_t v58 = v55[5];
  if (*(void *)(v58 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v59 = *(void *)(v58 + 32);
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v59 = 0;
LABEL_73:
  if (v51 > 1uLL)
  {
    uint64_t v60 = 0x37F8C546A65FE3EELL;
    if (*(void *)&v50 <= 0x37F8C546A65FE3EEuLL) {
      uint64_t v60 = 0x37F8C546A65FE3EEuLL % *(void *)&v50;
    }
  }
  else
  {
    uint64_t v60 = (*(void *)&v50 - 1) & 0x37F8C546A65FE3EELL;
  }
  uint64_t v61 = *(void **)(v53 + 8 * v60);
  if (!v61) {
    goto LABEL_95;
  }
  unint64_t v62 = (void *)*v61;
  if (!v62) {
    goto LABEL_95;
  }
  if (v51 < 2uLL)
  {
    while (1)
    {
      uint64_t v64 = v62[1];
      if (v64 == 0x37F8C546A65FE3EELL)
      {
        if (v62[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_93;
        }
      }
      else if ((v64 & (*(void *)&v50 - 1)) != v60)
      {
        goto LABEL_95;
      }
      unint64_t v62 = (void *)*v62;
      if (!v62) {
        goto LABEL_95;
      }
    }
  }
  while (2)
  {
    unint64_t v63 = v62[1];
    if (v63 != 0x37F8C546A65FE3EELL)
    {
      if (v63 >= *(void *)&v50) {
        v63 %= *(void *)&v50;
      }
      if (v63 != v60) {
        goto LABEL_95;
      }
      goto LABEL_82;
    }
    if (v62[2] != 0x37F8C546A65FE3EELL)
    {
LABEL_82:
      unint64_t v62 = (void *)*v62;
      if (!v62) {
        goto LABEL_95;
      }
      continue;
    }
    break;
  }
LABEL_93:
  uint64_t v65 = v62[5];
  if (*(void *)(v65 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v66 = *(void *)(v65 + 32);
    goto LABEL_96;
  }
LABEL_95:
  uint64_t v66 = 0;
LABEL_96:
  if (v51 > 1uLL)
  {
    uint64_t v67 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v50 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v67 = 0x3070CB6B3C7F21D3uLL % *(void *)&v50;
    }
  }
  else
  {
    uint64_t v67 = (*(void *)&v50 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v68 = *(void **)(v53 + 8 * v67);
  if (v68)
  {
    uint64_t v69 = (void *)*v68;
    if (v69)
    {
      if (v51 < 2uLL)
      {
        uint64_t v70 = *(void *)&v50 - 1;
        while (1)
        {
          uint64_t v72 = v69[1];
          if (v72 == 0x3070CB6B3C7F21D3)
          {
            if (v69[2] == 0x3070CB6B3C7F21D3) {
              goto LABEL_116;
            }
          }
          else if ((v72 & v70) != v67)
          {
            return this;
          }
          uint64_t v69 = (void *)*v69;
          if (!v69) {
            return this;
          }
        }
      }
      do
      {
        unint64_t v71 = v69[1];
        if (v71 == 0x3070CB6B3C7F21D3)
        {
          if (v69[2] == 0x3070CB6B3C7F21D3)
          {
LABEL_116:
            uint64_t v73 = v69[5];
            if (*(void *)(v73 + 8) == 0x3070CB6B3C7F21D3)
            {
              if (v66)
              {
                if (v59)
                {
                  uint64_t v74 = *(void *)(v73 + 32);
                  if (v74)
                  {
                    uint64_t v75 = *(void *)(v66 + 72);
                    if (v75)
                    {
                      LODWORD(a5) = *(_DWORD *)(v75 + 80);
                      LODWORD(v51) = *(_DWORD *)(v75 + 84);
                      double v76 = (double)v51;
                      double v77 = (double)*(unint64_t *)&a5;
                      *(double *)(v6 + 128) = v76 / (double)*(unint64_t *)&a5;
                      float v78 = *(double *)(v59 + 944);
                      unint64_t v79 = *(void *)(v66 + 8);
                      double v80 = v78;
                      if (v79 <= 4 && ((1 << v79) & 0x19) != 0)
                      {
                        double v81 = v76 * v80;
                        BOOL v82 = v76 * v80 < v77;
                        double v83 = v77 / v80;
                        if (v82) {
                          double v84 = v81;
                        }
                        else {
                          double v84 = v77;
                        }
                        if (v82) {
                          double v85 = v76;
                        }
                        else {
                          double v85 = v83;
                        }
                      }
                      else
                      {
                        BOOL v86 = v76 * v80 <= v77;
                        double v87 = v77 * v80;
                        double v88 = v76 / v80;
                        if (v86) {
                          double v84 = v87;
                        }
                        else {
                          double v84 = v76;
                        }
                        if (v86) {
                          double v85 = v77;
                        }
                        else {
                          double v85 = v88;
                        }
                      }
                      double v89 = v77 * 0.5;
                      double v90 = v76 * 0.5;
                      memset(&v112, 0, sizeof(v112));
                      CGFloat v91 = 0.0;
                      if (v79 <= 3) {
                        CGFloat v91 = dbl_1A29620C0[v79];
                      }
                      memset(&v105, 0, sizeof(v105));
                      CGAffineTransformMakeScale(&v105, 1.0 / v77, 1.0 / v76);
                      CGAffineTransform v114 = v105;
                      CGAffineTransformTranslate(&v115, &v114, v89, v90);
                      CGAffineTransform v105 = v115;
                      CGAffineTransform v113 = v115;
                      CGAffineTransformRotate(&v115, &v113, v91);
                      CGAffineTransform v105 = v115;
                      CGAffineTransformScale(&v112, &v115, v84 * 0.5, v85 * -0.5);
                      float a = v112.a;
                      float c = v112.c;
                      float tx = v112.tx;
                      float b = v112.b;
                      float d = v112.d;
                      float ty = v112.ty;
                      CGFloat v98 = *(double *)(v6 + 80);
                      v115.float ty = 0.0;
                      v115.float a = 0.0;
                      v115.float b = 0.0;
                      CGFloat v99 = *(double *)(*(void *)&v98 + 8);
                      v105.float a = 0.0;
                      v105.float b = v98;
                      v105.float c = 0.0;
                      v105.float d = v99;
                      LOWORD(v105.tx) = 1;
                      if (v99 == 0.0) {
                        CGFloat v100 = 0.0;
                      }
                      else {
                        CGFloat v100 = *(double *)(*(void *)&v98 + 72);
                      }
                      v105.float ty = v100;
                      ggl::BufferMemory::operator=((uint64_t *)&v115, (uint64_t)&v105);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v105);
                      CGFloat v101 = v115.ty;
                      **(float **)&v115.float ty = a;
                      *(float *)(*(void *)&v101 + 4) = c;
                      *(float *)(*(void *)&v101 + 8) = tx;
                      *(float *)(*(void *)&v101 + 16) = b;
                      *(float *)(*(void *)&v101 + 20) = d;
                      *(float *)(*(void *)&v101 + 24) = ty;
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v115);
                      uint64_t v102 = ggl::FragmentedPool<ggl::ARCameraImagePipelineSetup>::pop(*(void *)(v6 + 96));
                      **(void **)(v102 + 96) = v75;
                      CGFloat v103 = *(double *)(v6 + 72);
                      *(void *)&v105.float a = &off_1EF55A458;
                      *(void *)&v105.float c = "ARCameraImage";
                      v105.float d = v103;
                      *(void *)&v105.float tx = v102;
                      LODWORD(v105.ty) = 0;
                      uint64_t v106 = 0;
                      int v107 = 1065353216;
                      long long v108 = 0u;
                      long long v109 = 0u;
                      int64x2_t v110 = vdupq_n_s64(1uLL);
                      uint64_t v111 = 0;
                      uint64_t v104 = md::RenderItemPool::construct(v6 + 104, (uint64_t)&v105, *(void *)(v74 + 64));
                      ggl::CommandBuffer::pushRenderItem(v48, (uint64_t)v104);
                      return ggl::CommandBuffer::sortRenderItems(*(ggl::CommandBuffer **)(v48 + 72), *(ggl::CommandBuffer **)(v48 + 80));
                    }
                  }
                }
              }
            }
            return this;
          }
        }
        else
        {
          if (v71 >= *(void *)&v50) {
            v71 %= *(void *)&v50;
          }
          if (v71 != v67) {
            return this;
          }
        }
        uint64_t v69 = (void *)*v69;
      }
      while (v69);
    }
  }
  return this;
}

uint64_t ggl::FragmentedPool<ggl::ARCameraImagePipelineSetup>::pop(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)a1)
  {
    uint64_t v13 = *(void *)(a1 + 88);
    if (!v13)
    {
LABEL_52:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
      abort();
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    uint64_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v14 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v14)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = ((uint64_t)v4 - v16) >> 3;
      unint64_t v8 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v18 = v14 - v16;
      if (v18 >> 2 > v8) {
        unint64_t v8 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v19 = 8 * v8;
        uint64_t v20 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        unint64_t v12 = (uint64_t *)(v20 + 8 * v17);
        unint64_t v8 = v20 + v19;
        if (v20) {
          *unint64_t v12 = v3;
        }
      }
      else
      {
        unint64_t v12 = (uint64_t *)(8 * v17);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v30) {
        goto LABEL_48;
      }
      unint64_t v31 = v21 - v30 - 8;
      if (v31 < 0x38)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v32 = (v31 >> 3) + 1;
        uint64_t v33 = v21 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v34 = v12 - 2;
        uint64_t v35 = (long long *)(v21 - 16);
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)unint64_t v34 = v37;
          v34 -= 4;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v12 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v39 = *(void *)(v33 - 8);
        v33 -= 8;
        *--unint64_t v12 = v39;
      }
      while (v33 != v30);
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v2 - 8);
    *(void *)(a1 + 8) = v2 - 8;
    uint64_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v9 = v5 - v6;
      if (v9 >> 2 > v8) {
        unint64_t v8 = v9 >> 2;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v10 = 8 * v8;
        uint64_t v11 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        unint64_t v12 = (uint64_t *)(v11 + 8 * v7);
        unint64_t v8 = v11 + v10;
        if (v11) {
          *unint64_t v12 = v3;
        }
      }
      else
      {
        unint64_t v12 = (uint64_t *)(8 * v7);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v22) {
        goto LABEL_48;
      }
      unint64_t v23 = v21 - v22 - 8;
      if (v23 < 0x38)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = v21 - 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        double v26 = v12 - 2;
        uint64_t v27 = (long long *)(v21 - 16);
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)double v26 = v29;
          v26 -= 4;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v38 = *(void *)(v25 - 8);
        v25 -= 8;
        *--unint64_t v12 = v38;
      }
      while (v25 != v22);
LABEL_47:
      uint64_t v21 = *(void *)(a1 + 32);
LABEL_48:
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v15;
      uint64_t v40 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v8;
      if (v21) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v21, v40 - v21);
      }
      goto LABEL_50;
    }
  }
  if (v4) {
    uint64_t *v4 = v3;
  }
  uint64_t v15 = v4 + 1;
LABEL_50:
  *(void *)(a1 + 40) = v15;
  uint64_t v43 = v3;
  uint64_t v41 = *(void *)(a1 + 120);
  if (!v41) {
    goto LABEL_52;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 48))(v41, &v43);
  return v3;
}

void md::ARCameraImageRenderLayer::~ARCameraImageRenderLayer(md::ARCameraImageRenderLayer *this)
{
  md::ARCameraImageRenderLayer::~ARCameraImageRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  unint64_t v3;
  void *v4;
  void *v5;
  void (***v6)(void);
  void (**v7)(void *);
  void **v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  void *v17;

  *(void *)this = &unk_1EF544848;
  uint64_t v2 = (void *)*((void *)this + 13);
  do
  {
    if (v2[1])
    {
      uint64_t v3 = 0;
      uint64_t v4 = v2 + 2;
      unint64_t v5 = v2 + 2;
      uint64_t v6 = (void (***)(void))(v2 + 2);
      do
      {
        uint64_t v7 = (void (**)(void *))*v6;
        v6 += 15;
        (*v7)(v5);
        ++v3;
        v4 += 15;
        unint64_t v5 = v6;
      }
      while (v3 < v2[1]);
    }
    v2[1] = 0;
    uint64_t v2 = (void *)*v2;
  }
  while (v2);
  unint64_t v8 = (void **)*((void *)this + 13);
  *((void *)this + 14) = v8;
  uint64_t v9 = *v8;
  *unint64_t v8 = 0;
  if (v9)
  {
    do
    {
      uint64_t v10 = (void *)*v9;
      free(v9);
      uint64_t v9 = v10;
    }
    while (v10);
    unint64_t v8 = (void **)*((void *)this + 13);
  }
  free(v8);
  uint64_t v11 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v11)
  {
    unint64_t v12 = ggl::FragmentedPool<ggl::ARCameraImagePipelineSetup>::~FragmentedPool(v11);
    MEMORY[0x1A6239270](v12, 0x10A0C40D234DDC7);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  unint64_t v14 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v16) {
    MEMORY[0x1A6239270](v16, 0x1000C4049ECCB0CLL);
  }
  *(void *)this = &unk_1EF530C60;
  uint64_t v17 = (void *)*((void *)this + 1);
  if (v17)
  {
    *((void *)this + 2) = v17;
    operator delete(v17);
  }
}

uint64_t ggl::FragmentedPool<ggl::ARCameraImagePipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26ARCameraImagePipelineSetupEEC1ENS_8functionIFPS4_vEEENS6_IFvS7_EEEmmEd1_UlS7_E_NS_9allocatorISC_EESA_E7__cloneEPNS0_6__baseISA_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF57BD30;
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26ARCameraImagePipelineSetupEEC1ENS_8functionIFPS4_vEEENS6_IFvS7_EEEmmEd1_UlS7_E_NS_9allocatorISC_EESA_E7__cloneEv()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1EF57BD30;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26ARCameraImagePipelineSetupEEC1ENS_8functionIFPS4_vEEENS6_IFvS7_EEEmmEd1_UlS7_E_NS_9allocatorISC_EESA_ED0Ev()
{
}

void std::__function::__func<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0,std::allocator<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0>,ggl::ARCameraImagePipelineSetup * ()(void)>::operator()()
{
}

uint64_t std::__function::__func<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0,std::allocator<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0>,ggl::ARCameraImagePipelineSetup * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF576908;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0,std::allocator<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0>,ggl::ARCameraImagePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF576908;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0,std::allocator<md::ARCameraImageRenderLayer::ARCameraImageRenderLayer(md::CartographicRenderer &,VKSharedResources *)::$_0>,ggl::ARCameraImagePipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::ARCameraImagePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ARCameraImagePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ARCameraImagePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::ARCameraImage::Constants>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::ARCameraImage::Constants>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARCameraImage::Constants>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARCameraImage::Constants>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARCameraImage::Constants>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::trafficColorForSpeed(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, char a5@<W8>, float a6@<S0>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v10 = 3;
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      int v10 = a3;
      goto LABEL_3;
    case 4:
      uint64_t v15 = *(void *)(*(void *)a2 + 24);
      if ((int)a6 >= 0x17) {
        unsigned int v16 = 23;
      }
      else {
        unsigned int v16 = (int)a6;
      }
      uint64_t v17 = *(float **)v15;
      if (!*(void *)v15
        || (float v18 = *v17, LODWORD(v17) = *v17 == 1.0, !*(unsigned char *)(v15 + 10))
        || (v18 != 0.0 ? (BOOL v19 = v18 == 1.0) : (BOOL v19 = 1), v19))
      {
        unsigned int v20 = *(unsigned __int8 *)(v15 + v17 + 11);
        if (v20 != 2) {
          goto LABEL_19;
        }
      }
      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v15, 0x5Cu, v16, 0) & 1) == 0)
      {
        unsigned int v20 = 1;
LABEL_19:
        if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v15, 0x5Cu, v16, v20))
        {
LABEL_21:
          float32x4_t v11 = 0uLL;
          float v23 = 0.0;
          if (!a4) {
            goto LABEL_30;
          }
          goto LABEL_29;
        }
      }
      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v26, v15, 0x5Cu, 2u, fminf(fmaxf(a6, 0.0), 23.0));
      LOWORD(v21) = v26.i16[3];
      float v22 = (float)v21;
      float32x4_t v11 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v26)), (float32x4_t)vdupq_n_s32(0x37800080u));
      float v23 = v22 * 0.000015259;
      *(_DWORD *)(a1 + 8) = v11.i32[2];
      *(void *)a1 = v11.i64[0];
LABEL_28:
      *(float *)(a1 + 12) = v23;
      if (a4)
      {
LABEL_29:
        float32x4_t v24 = vmulq_n_f32(v11, v23);
        *(_DWORD *)(a1 + 8) = v24.i32[2];
        *(void *)a1 = v24.i64[0];
      }
LABEL_30:
      if (fabsf(v23) < 0.00000011921)
      {
        if (GEOGetVectorKitRouteLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_33);
        }
        uint64_t v25 = (id)GEOGetVectorKitRouteLog_log;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          v26.i16[0] = 0;
          _os_log_impl(&dword_1A1780000, v25, OS_LOG_TYPE_INFO, "RouteLine trafficColor is 0", (uint8_t *)&v26, 2u);
        }
      }
      return;
    default:
LABEL_3:
      if (!md::trafficVisibleAtSpeed(a2, v10, a5)) {
        goto LABEL_21;
      }
      switch(v10)
      {
        case 0:
          uint64_t v12 = *(void *)(*(void *)a2 + 24);
          float v13 = fminf(fmaxf(a6, 0.0), 23.0);
          unsigned int v14 = 43;
          goto LABEL_26;
        case 1:
          uint64_t v12 = *(void *)(*(void *)a2 + 24);
          float v13 = fminf(fmaxf(a6, 0.0), 23.0);
          unsigned int v14 = 54;
          goto LABEL_26;
        case 2:
          uint64_t v12 = *(void *)(*(void *)a2 + 24);
          float v13 = fminf(fmaxf(a6, 0.0), 23.0);
          unsigned int v14 = 65;
          goto LABEL_26;
        case 3:
          uint64_t v12 = *(void *)(*(void *)a2 + 24);
          float v13 = fminf(fmaxf(a6, 0.0), 23.0);
          unsigned int v14 = 76;
LABEL_26:
          gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v26, v12, v14, 2u, v13);
          float32x4_t v11 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v26)), (float32x4_t)vdupq_n_s32(0x37800080u));
          break;
        default:
          break;
      }
      *(_DWORD *)(a1 + 8) = v11.i32[2];
      *(void *)a1 = v11.i64[0];
      float v23 = v11.f32[3];
      goto LABEL_28;
  }
}

uint64_t md::RouteStyleContext::RouteStyleContext(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  *(void *)(a1 + 192) = 0;
  int v10 = (void *)(a1 + 192);
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = gss::Allocator::instance((gss::Allocator *)a1);
  *((unsigned char *)v10 - 190) = 0;
  uint64_t v11 = *(void *)(a3 + 248);
  uint64_t v12 = *(std::__shared_weak_count **)(a3 + 256);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v192, v11, (uint64_t)v12);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v193) {
      goto LABEL_276;
    }
LABEL_6:
    float v13 = *(float *)(a2 + 8);
    uint64_t v14 = v192[0];
    uint64_t v15 = *(void *)(v192[0] + 24);
    if ((int)v13 >= 0x17) {
      unsigned int v16 = 23;
    }
    else {
      unsigned int v16 = (int)v13;
    }
    uint64_t v17 = *(float **)v15;
    if (*(void *)v15)
    {
      float v18 = *v17;
      BOOL v19 = *v17 == 1.0;
      if (*(unsigned char *)(v15 + 10))
      {
        if (v18 != 0.0 && v18 != 1.0) {
          goto LABEL_21;
        }
      }
    }
    else
    {
      BOOL v19 = 0;
    }
    hasValueForKeyAtZAtEnfloat d = *(unsigned __int8 *)(v15 + v19 + 11);
    if (hasValueForKeyAtZAtEnd != 2)
    {
LABEL_22:
      hasValueForKeyAtZAtEnfloat d = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v15, 0x5Cu, v16, hasValueForKeyAtZAtEnd);
LABEL_23:
      uint64_t v187 = (float32x4_t *)(v10 - 23);
      if (v17)
      {
        float v22 = *v17;
        BOOL v23 = *v17 == 1.0;
        if (*(unsigned char *)(v15 + 10))
        {
          if (v22 != 0.0 && v22 != 1.0) {
            goto LABEL_33;
          }
        }
      }
      else
      {
        BOOL v23 = 0;
      }
      unsigned int v25 = *(unsigned __int8 *)(v15 + v23 + 11);
      if (v25 != 2)
      {
LABEL_34:
        unsigned int v25 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v15, 0x5Du, v16, v25);
LABEL_35:
        if (hasValueForKeyAtZAtEnd)
        {
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, v15, 0x5Cu, v16, 2u, 0);
          *uint64_t v187 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)buf)), (float32x4_t)vdupq_n_s32(0x37800080u));
          uint64_t v14 = v192[0];
        }
        if (v25)
        {
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, *(void *)(v14 + 24), 0x5Du, v16, 2u, 0);
          *(float32x4_t *)(a1 + 56) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)buf)), (float32x4_t)vdupq_n_s32(0x37800080u));
          uint64_t v14 = v192[0];
        }
        uint64_t v26 = *(void *)(v14 + 24);
        uint64_t v27 = *(float **)v26;
        if (*(void *)v26)
        {
          float v28 = *v27;
          BOOL v29 = *v27 == 1.0;
          if (*(unsigned char *)(v26 + 10))
          {
            if (v28 != 0.0 && v28 != 1.0)
            {
LABEL_49:
              if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v26, 0x13Fu, v16, 0)) {
                goto LABEL_52;
              }
              unsigned int v31 = 1;
LABEL_51:
              if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v26, 0x13Fu, v16, v31)) {
                goto LABEL_64;
              }
LABEL_52:
              float v32 = fminf(fmaxf(v13, 0.0), 23.0);
              if (v27)
              {
                float v33 = *v27;
                BOOL v34 = *v27 == 1.0;
                if (*(unsigned char *)(v26 + 10) && v33 != 0.0 && v33 != 1.0) {
                  goto LABEL_59;
                }
              }
              else
              {
                BOOL v34 = 0;
              }
              unsigned int v35 = *(unsigned __int8 *)(v26 + v34 + 11);
              float v33 = 0.0;
              if (v35 != 2)
              {
                char v37 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v26, v35, 0, v32);
LABEL_63:
                *(unsigned char *)(a1 + 184) = v37;
                uint64_t v26 = *(void *)(v192[0] + 24);
                uint64_t v27 = *(float **)v26;
LABEL_64:
                if (v27)
                {
                  float v38 = *v27;
                  BOOL v39 = *v27 == 1.0;
                  if (*(unsigned char *)(v26 + 10) && v38 != 0.0 && v38 != 1.0) {
                    goto LABEL_71;
                  }
                }
                else
                {
                  BOOL v39 = 0;
                }
                unsigned int v40 = *(unsigned __int8 *)(v26 + v39 + 11);
                float v38 = 0.0;
                if (v40 != 2)
                {
                  *(_DWORD *)(a1 + 232) = *(_DWORD *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v26, 0x68u, v40, 0);
                  if (!a4) {
                    goto LABEL_85;
                  }
LABEL_77:
                  unint64_t v44 = *(void *)(v192[0] + 24);
                  float v45 = fminf(fmaxf(v13, 0.0), 23.0);
                  uint64_t v46 = *(float **)v44;
                  if (*(void *)v44
                    && (float v47 = *v46, LODWORD(v46) = *v46 == 1.0, *(unsigned char *)(v44 + 10))
                    && v47 != 0.0
                    && v47 != 1.0
                    || (v48 = *(unsigned __int8 *)(v44 + v46 + 11), float v47 = 0.0, v48 == 2))
                  {
                    buf[0] = 1;
                    v188[0].i8[0] = 1;
                    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v44, 0x139u, 0, buf, v45);
                    float v50 = v49;
                    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v44, 0x139u, 1u, (BOOL *)v188, v45);
                    float v52 = v50 + (float)((float)(v51 - v50) * v47);
                  }
                  else
                  {
                    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(void *)(v192[0] + 24), 0x139u, v48, 0, v45);
                  }
                  *(float *)(a1 + 256) = v52;
LABEL_85:
                  WeakRetainefloat d = objc_loadWeakRetained((id *)(a3 + 200));
                  *(unsigned char *)(a1 + 1) = 0;
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    *(unsigned char *)(a1 + 1) = 1;
                    if ((hasValueForKeyAtZAtEnd & 1) == 0)
                    {
                      if (WeakRetained)
                      {
                        [WeakRetained lineColor];
                        float32x4_t v54 = *(float32x4_t *)buf;
                      }
                      else
                      {
                        float32x4_t v54 = 0uLL;
                      }
                      *uint64_t v187 = v54;
                    }
                    if ((v25 & 1) == 0)
                    {
                      if (WeakRetained)
                      {
                        [WeakRetained lineColor];
                        long long v56 = *(_OWORD *)buf;
                      }
                      else
                      {
                        long long v56 = 0uLL;
                      }
                      *(_OWORD *)(a1 + 56) = v56;
                    }
                  }
                  else if ((hasValueForKeyAtZAtEnd & 1) == 0)
                  {
                    if ((hasLogErrorOnce & 1) == 0)
                    {
                      if (GEOGetVectorKitRouteLog_onceToken != -1) {
                        dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_33);
                      }
                      unint64_t v55 = (id)GEOGetVectorKitRouteLog_log;
                      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)__n128 buf = 0;
                        _os_log_impl(&dword_1A1780000, v55, OS_LOG_TYPE_ERROR, "Route FillColor not defined", buf, 2u);
                      }

                      md::RouteLineSection::dumpStyleAttributes((md::RouteLineSection *)a3);
                      hasLogErrorOnce = 1;
                    }
                    *uint64_t v187 = (float32x4_t)xmmword_1A28FE650;
                  }
                  int v57 = *(_DWORD *)(a1 + 8);
                  int v58 = *(_DWORD *)(a1 + 12);
                  *(_DWORD *)(a1 + 24) = v57;
                  *(_DWORD *)(a1 + 28) = v58;
                  int v59 = *(_DWORD *)(a1 + 16);
                  int v60 = *(_DWORD *)(a1 + 20);
                  *(_DWORD *)(a1 + 32) = v59;
                  *(_DWORD *)(a1 + 36) = v60;
                  *(_DWORD *)(a1 + 40) = v57;
                  *(_DWORD *)(a1 + 44) = v58;
                  *(_DWORD *)(a1 + 48) = v59;
                  *(_DWORD *)(a1 + 52) = v60;
                  uint64_t v61 = v192[0];
                  uint64_t v62 = *(void *)(v192[0] + 24);
                  unint64_t v63 = *(float **)v62;
                  if (*(void *)v62)
                  {
                    float v64 = *v63;
                    BOOL v65 = *v63 == 1.0;
                    if (*(unsigned char *)(v62 + 10) && v64 != 0.0 && v64 != 1.0)
                    {
LABEL_111:
                      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v192[0] + 24), 0xF0u, v16, 0))
                      {
LABEL_114:
                        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, v62, 0xF0u, v16, 2u, 0);
                        *(float32x4_t *)(a1 + 40) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)buf)), (float32x4_t)vdupq_n_s32(0x37800080u));
                        uint64_t v61 = v192[0];
                        uint64_t v62 = *(void *)(v192[0] + 24);
                        unint64_t v63 = *(float **)v62;
LABEL_115:
                        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 56);
                        if (v63)
                        {
                          float v67 = *v63;
                          BOOL v68 = *v63 == 1.0;
                          if (*(unsigned char *)(v62 + 10) && v67 != 0.0 && v67 != 1.0)
                          {
LABEL_122:
                            if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v62, 0x1A3u, v16, 0)) {
                              goto LABEL_125;
                            }
                            unsigned int v69 = 1;
LABEL_124:
                            if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v62, 0x1A3u, v16, v69))
                            {
LABEL_126:
                              *(unsigned char *)(a1 + 5) = 0;
                              uint64_t v70 = *(void *)(v61 + 24);
                              unsigned int v71 = *(unsigned __int8 *)(v70 + 11);
                              if (v71 != 2
                                || (unsigned int v71 = 1,
                                    (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v70, 0x12Cu, v16, 0) & 1) == 0))
                              {
                                unsigned int v71 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v70, 0x12Cu, v16, v71);
                              }
                              unsigned int v72 = *(unsigned __int8 *)(v70 + 12);
                              if (v72 != 2
                                || (char v73 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v70, 0x12Cu, v16, 0),
                                    unsigned int v72 = 1,
                                    (v73 & 1) == 0))
                              {
                                unsigned int v72 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v70, 0x12Cu, v16, v72);
                              }
                              if ((v71 & v72) == 1) {
                                gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)buf, v70, 0x12Cu, v16, 2);
                              }
                              else {
                                gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<gss::DashPattern>((uint64_t)buf, v70, 0x12Cu, v16, 1);
                              }
                              uint64_t v74 = *v10;
                              if (*v10)
                              {
                                *(void *)(a1 + 200) = v74;
                                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 216) + 40))(*(void *)(a1 + 216), v74, *(void *)(a1 + 208) - v74);
                                *int v10 = 0;
                                v10[1] = 0;
                                v10[2] = 0;
                              }
                              uint64_t v75 = *(void *)buf;
                              *(void *)(a1 + 192) = *(void *)buf;
                              uint64_t v76 = *(void *)&buf[8];
                              *(_OWORD *)(a1 + 200) = *(_OWORD *)&buf[8];
                              *(_DWORD *)(a1 + 224) = v191;
                              *(unsigned char *)(a1 + 5) = v76 != v75;
                              if (*(unsigned char *)(a2 + 145))
                              {
                                BOOL v77 = 0;
                                *(unsigned char *)(a1 + 6) = 0;
                              }
                              else
                              {
                                if (*(unsigned char *)(a1 + 1)) {
                                  BOOL v78 = 0;
                                }
                                else {
                                  BOOL v78 = v76 == v75;
                                }
                                char v79 = v78;
                                *(unsigned char *)(a1 + 6) = v79;
                                BOOL v77 = v78 && *(unsigned char *)(a2 + 192) != 0;
                              }
                              *(unsigned char *)a1 = v77;
                              md::RouteLineSection::halfWidthAtZoom(v192, v13);
                              *(float *)(a1 + 236) = v80 + v80;
                              float v81 = 0.0;
                              if (v193)
                              {
                                unint64_t v82 = *(void *)(v192[0] + 24);
                                float v83 = fminf(fmaxf(v13, 0.0), 23.0);
                                double v84 = *(float **)v82;
                                if (*(void *)v82
                                  && (float v85 = *v84, LODWORD(v84) = *v84 == 1.0, *(unsigned char *)(v82 + 10))
                                  && v85 != 0.0
                                  && v85 != 1.0
                                  || (v86 = *(unsigned __int8 *)(v82 + v84 + 11), float v85 = 0.0, v86 == 2))
                                {
                                  buf[0] = 1;
                                  v188[0].i8[0] = 1;
                                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v82, 0x61u, 0, buf, v83);
                                  float v88 = v87;
                                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v82, 0x61u, 1u, (BOOL *)v188, v83);
                                  float v81 = v88 + (float)((float)(v89 - v88) * v85);
                                }
                                else
                                {
                                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(void *)(v192[0] + 24), 0x61u, v86, 0, v83);
                                  float v81 = v90;
                                }
                              }
                              *(_DWORD *)(a1 + 248) = 0;
                              float v91 = *(float *)(a2 + 128);
                              *(float *)(a1 + 240) = (float)(a5 * 0.5) * (float)(*(float *)(a1 + 236) * v91);
                              float v185 = *(float *)(a2 + 180);
                              double v92 = *(double *)(a3 + 168) - *(double *)(a3 + 144);
                              long double v93 = exp((*(double *)(a3 + 152) + (*(double *)(a3 + 176) - *(double *)(a3 + 152)) * 0.5)* 6.28318531+ -3.14159265);
                              long double v94 = atan(v93) * 114.591559 + -90.0;
                              float v95 = a5;
                              long double v96 = cos(v94 * 0.034906585) * -559.82 + 111132.92;
                              long double v97 = v96 + cos(v94 * 0.0698131701) * 1.175;
                              long double v98 = v97 + cos(v94 * 0.104719755) * -0.0023;
                              long double v99 = v94 * 0.00872664626;
                              long double v100 = tan(v94 * 0.00872664626 + 0.78103484);
                              double v101 = log(v100);
                              long double v102 = tan(v99 + 0.789761487);
                              float v103 = fabs((log(v102) - v101) * 0.159154943) / (v92 * v185 * v98);
                              *(float *)(a1 + 252) = v103 * v95;
                              *(float *)(a1 + 244) = v91 * (float)(v95 * v81);
                              unint64_t v104 = *(void *)(v192[0] + 24);
                              float v105 = fminf(fmaxf(v13, 0.0), 23.0);
                              uint64_t v106 = *(float **)v104;
                              if (*(void *)v104
                                && (float v107 = *v106, LODWORD(v106) = *v106 == 1.0, *(unsigned char *)(v104 + 10))
                                && v107 != 0.0
                                && v107 != 1.0
                                || (v108 = *(unsigned __int8 *)(v104 + v106 + 11), float v107 = 0.0, v108 == 2))
                              {
                                buf[0] = 1;
                                v188[0].i8[0] = 1;
                                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v104, 0x1D0u, 0, buf, v105);
                                float v110 = v109;
                                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v104, 0x1D0u, 1u, (BOOL *)v188, v105);
                                float v112 = v110 + (float)((float)(v111 - v110) * v107);
                              }
                              else
                              {
                                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(void *)(v192[0] + 24), 0x1D0u, v108, 0, v105);
                              }
                              *(float *)(a1 + 264) = v112;
                              *(_DWORD *)(a1 + 260) = *(_DWORD *)(a1 + 240);
                              float v113 = *(float *)(a1 + 16);
                              float32x2_t v114 = (float32x2_t)vdup_n_s32(0x3F666666u);
                              float v115 = *(float *)(a1 + 20) * 0.9;
                              float32x2_t v116 = *(float32x2_t *)(a1 + 8);
                              float32x2_t v117 = vmul_f32(v116, (float32x2_t)0x3F170A3D3E99999ALL);
                              v117.f32[0] = vaddv_f32(v117) + (float)(v113 * 0.11);
                              float32x2_t v118 = (float32x2_t)vdup_n_s32(0x3E19999Au);
                              *(float32x2_t *)(a1 + 120) = vmul_f32(vmla_f32(v116, v118, vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v117, 0), v116)), v114);
                              *(float *)(a1 + 128) = (float)(v113 + (float)((float)(v117.f32[0] - v113) * 0.15)) * 0.9;
                              *(float *)(a1 + 132) = v115;
                              float v119 = *(float *)(a1 + 48);
                              float v120 = *(float *)(a1 + 52) * 0.9;
                              float32x2_t v121 = *(float32x2_t *)(a1 + 40);
                              float32x2_t v122 = vmul_f32(v121, (float32x2_t)0x3F170A3D3E99999ALL);
                              v122.f32[0] = vaddv_f32(v122) + (float)(v119 * 0.11);
                              *(float32x2_t *)(a1 + 136) = vmul_f32(vmla_f32(v121, v118, vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v122, 0), v121)), v114);
                              *(float *)(a1 + 144) = (float)(v119 + (float)((float)(v122.f32[0] - v119) * 0.15)) * 0.9;
                              *(float *)(a1 + 148) = v120;
                              if (*(unsigned char *)(a2 + 176))
                              {
                                long double v123 = +[VKDebugSettings sharedSettings];
                                int v124 = [v123 enableDynamicRouteWidth];

                                if (v124) {
                                  *(float *)(a1 + 248) = fminf(fmaxf((float)(*(float *)(a2 + 156) * 0.2) + -2.4, 0.0), 1.0);
                                }
                              }
                              uint64_t v125 = *(void *)(a3 + 264);
                              double v126 = *(std::__shared_weak_count **)(a3 + 272);
                              if (v126) {
                                atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
                              }
                              gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)buf, v125, (uint64_t)v126);
                              if (v126 && !atomic_fetch_add(&v126->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                                std::__shared_weak_count::__release_weak(v126);
                              }
                              int v128 = v191;
                              *(unsigned char *)(a1 + 3) = v191;
                              if (!v128) {
                                goto LABEL_201;
                              }
                              gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v188, *(void *)(*(void *)buf + 24), 0x5Cu, v16, 2u, 0);
                              float32x4_t v186 = (float32x4_t)vdupq_n_s32(0x37800080u);
                              *(float32x4_t *)(a1 + 88) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v188[0])), v186);
                              gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v188, *(void *)(*(void *)buf + 24), 0x5Du, v16, 2u, 0);
                              *(float32x4_t *)(a1 + 104) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v188[0])), v186);
                              uint64_t v129 = *(void *)(*(void *)buf + 24);
                              long double v130 = *(float **)v129;
                              if (*(void *)v129)
                              {
                                float v131 = *v130;
                                BOOL v132 = *v130 == 1.0;
                                if (*(unsigned char *)(v129 + 10) && v131 != 0.0 && v131 != 1.0)
                                {
LABEL_179:
                                  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(*(void *)buf + 24), 0x5Cu, v16, 0))
                                  {
                                    if (!*(unsigned char *)(a1 + 1)) {
                                      goto LABEL_201;
                                    }
LABEL_189:
                                    if (v130)
                                    {
                                      float v135 = *v130;
                                      BOOL v136 = *v130 == 1.0;
                                      if (*(unsigned char *)(v129 + 10) && v135 != 0.0 && v135 != 1.0) {
                                        goto LABEL_196;
                                      }
                                    }
                                    else
                                    {
                                      BOOL v136 = 0;
                                    }
                                    unsigned int v137 = *(unsigned __int8 *)(v129 + v136 + 11);
                                    if (v137 != 2)
                                    {
LABEL_198:
                                      if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v129, 0x5Du, v16, v137) & 1) == 0)
                                      {
                                        if (!WeakRetained)
                                        {
                                          *(_OWORD *)(a1 + 104) = 0u;
                                          if (!*(unsigned char *)(a1 + 5))
                                          {
LABEL_203:
                                            float v138 = *(float *)(a1 + 64);
                                            float32x2_t v139 = *(float32x2_t *)(a1 + 56);
                                            float32x2_t v140 = vmul_f32(v139, (float32x2_t)0x3F170A3D3E99999ALL);
                                            v140.f32[0] = vaddv_f32(v140) + (float)(v138 * 0.11);
                                            float32x2_t v141 = (float32x2_t)vdup_n_s32(0x3E19999Au);
                                            float32x2_t v142 = vmla_f32(v139, v141, vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v140, 0), v139));
                                            float v143 = v138 + (float)((float)(v140.f32[0] - v138) * 0.15);
                                            float32x2_t v144 = (float32x2_t)vdup_n_s32(0x3F666666u);
                                            float v145 = *(float *)(a1 + 68) * 0.9;
                                            *(float32x2_t *)(a1 + 152) = vmul_f32(v142, v144);
                                            *(float *)(a1 + 160) = v143 * 0.9;
                                            *(float *)(a1 + 164) = v145;
                                            float v146 = *(float *)(a1 + 80);
                                            float v147 = *(float *)(a1 + 84) * 0.9;
                                            float32x2_t v148 = *(float32x2_t *)(a1 + 72);
                                            *(float *)v127.i32 = vaddv_f32(vmul_f32(v148, (float32x2_t)0x3F170A3D3E99999ALL))
                                                               + (float)(v146 * 0.11);
                                            *(float32x2_t *)(a1 + 168) = vmul_f32(vmla_f32(v148, v141, vsub_f32((float32x2_t)vdup_lane_s32(v127, 0), v148)), v144);
                                            *(float *)(a1 + 176) = (float)(v146
                                                                         + (float)((float)(*(float *)v127.i32 - v146)
                                                                                 * 0.15))
                                                                 * 0.9;
                                            *(float *)(a1 + 180) = v147;
                                            *(unsigned char *)(a1 + 4) = 0;
                                            uint64_t v149 = *(void *)(a3 + 280);
                                            __double2 v150 = *(std::__shared_weak_count **)(a3 + 288);
                                            if (v150)
                                            {
                                              p_shared_owners = &v150->__shared_owners_;
                                              atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
                                              if (!v149)
                                              {
                                                if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                                                  std::__shared_weak_count::__release_weak(v150);
                                                }
                                                goto LABEL_275;
                                              }
                                              int v152 = *(unsigned __int8 *)(a2 + 144);
                                              if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
                                              {
                                                if (!v152) {
                                                  goto LABEL_275;
                                                }
                                              }
                                              else
                                              {
                                                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                                                std::__shared_weak_count::__release_weak(v150);
                                                if (!v152)
                                                {
LABEL_275:
                                                  *(unsigned char *)(a1 + 2) = 1;
                                                  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)buf);

                                                  goto LABEL_276;
                                                }
                                              }
                                            }
                                            else if (!v149 || !*(unsigned char *)(a2 + 144))
                                            {
                                              goto LABEL_275;
                                            }
                                            uint64_t v153 = *(void *)(a3 + 280);
                                            double v154 = *(std::__shared_weak_count **)(a3 + 288);
                                            if (v154) {
                                              atomic_fetch_add_explicit(&v154->__shared_owners_, 1uLL, memory_order_relaxed);
                                            }
                                            gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v188, v153, (uint64_t)v154);
                                            if (v154
                                              && !atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                            {
                                              ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                                              std::__shared_weak_count::__release_weak(v154);
                                            }
                                            int v155 = v189;
                                            *(unsigned char *)(a1 + 4) = v189;
                                            if (!v155) {
                                              goto LABEL_274;
                                            }
                                            if (!*(unsigned char *)(a2 + 176)) {
                                              *(float *)(a1 + 260) = (float)(*(float *)(a1 + 236) * 0.5)
                                            }
                                                                   * *(float *)(a2 + 128);
                                            uint64_t v156 = *(void *)(*(void *)v188 + 24);
                                            unint64_t v157 = *(float **)v156;
                                            if (*(void *)v156
                                              && (float v158 = *v157, LODWORD(v157) = *v157 == 1.0, *(unsigned char *)(v156 + 10))
                                              && v158 != 0.0
                                              && v158 != 1.0
                                              || (unsigned int v159 = *(unsigned __int8 *)(v156 + v157 + 11),
                                                  float v158 = 0.0,
                                                  v159 == 2))
                                            {
                                              v195.i8[0] = 1;
                                              char v194 = 1;
                                              float v160 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v156, 0x1C0u, v16, 0, &v195);
                                              float v161 = v160
                                                   + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v156, 0x1C0u, v16, 1u, &v194)- v160)* v158);
                                            }
                                            else
                                            {
                                              float v161 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(*(void *)v188 + 24), 0x1C0u, v16, v159, 0);
                                            }
                                            uint16x4_t v162 = v188[0];
                                            uint64_t v163 = *(void *)(*(void *)v188 + 24);
                                            unint64_t v164 = *(float **)v163;
                                            if (*(void *)v163)
                                            {
                                              float v165 = *v164;
                                              BOOL v166 = *v164 == 1.0;
                                              if (*(unsigned char *)(v163 + 10) && v165 != 0.0 && v165 != 1.0)
                                              {
LABEL_236:
                                                if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(*(void *)v188 + 24), 0x5Cu, v16, 0))goto LABEL_239; {
                                                unsigned int v167 = 1;
                                                }
LABEL_238:
                                                if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v163, 0x5Cu, v16, v167))
                                                {
                                                  *(float *)(a1 + 132) = *(float *)(a1 + 132) * v161;
                                                  if (v164) {
                                                    goto LABEL_240;
                                                  }
                                                  goto LABEL_245;
                                                }
LABEL_239:
                                                gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v195, v163, 0x5Cu, v16, 2u, 0);
                                                LOWORD(v168) = v195.i16[3];
                                                float32x4_t v169 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v195)), (float32x4_t)vdupq_n_s32(0x37800080u));
                                                *(_DWORD *)(a1 + 128) = v169.i32[2];
                                                *(void *)(a1 + 120) = v169.i64[0];
                                                uint16x4_t v162 = v188[0];
                                                uint64_t v163 = *(void *)(*(void *)v188 + 24);
                                                unint64_t v164 = *(float **)v163;
                                                *(float *)(a1 + 132) = (float)v168 * 0.000015259;
                                                if (v164)
                                                {
LABEL_240:
                                                  float v170 = *v164;
                                                  BOOL v171 = *v164 == 1.0;
                                                  if (*(unsigned char *)(v163 + 10) && v170 != 0.0 && v170 != 1.0)
                                                  {
LABEL_247:
                                                    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v163, 0xF0u, v16, 0))goto LABEL_250; {
                                                    unsigned int v172 = 1;
                                                    }
LABEL_249:
                                                    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v163, 0xF0u, v16, v172))
                                                    {
                                                      float v174 = *(float *)(a1 + 148) * v161;
LABEL_252:
                                                      *(float *)(a1 + 148) = v174;
                                                      uint64_t v176 = *(void *)(*(void *)&v162 + 24);
                                                      float64x2_t v177 = *(float **)v176;
                                                      if (*(void *)v176)
                                                      {
                                                        float v178 = *v177;
                                                        BOOL v179 = *v177 == 1.0;
                                                        if (*(unsigned char *)(v176 + 10) && v178 != 0.0 && v178 != 1.0)
                                                        {
LABEL_259:
                                                          if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v176, 0x5Du, v16, 0))
                                                          {
LABEL_262:
                                                            gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v195, v176, 0x5Du, 2u, v105);
                                                            *(float32x4_t *)(a1 + 152) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v195)), (float32x4_t)vdupq_n_s32(0x37800080u));
                                                            uint64_t v176 = *(void *)(*(void *)v188 + 24);
                                                            float64x2_t v177 = *(float **)v176;
LABEL_263:
                                                            if (v177)
                                                            {
                                                              float v181 = *v177;
                                                              BOOL v182 = *v177 == 1.0;
                                                              if (*(unsigned char *)(v176 + 10) && v181 != 0.0 && v181 != 1.0) {
                                                                goto LABEL_270;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              BOOL v182 = 0;
                                                            }
                                                            unsigned int v183 = *(unsigned __int8 *)(v176 + v182 + 11);
                                                            if (v183 != 2)
                                                            {
LABEL_272:
                                                              if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v176, 0x1A3u, v16, v183))goto LABEL_273; {
LABEL_274:
                                                              }
                                                              gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v188);
                                                              goto LABEL_275;
                                                            }
LABEL_270:
                                                            if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v176, 0x1A3u, v16, 0))
                                                            {
LABEL_273:
                                                              gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v195, v176, 0x1A3u, 2u, v105);
                                                              *(float32x4_t *)(a1 + 168) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v195)), (float32x4_t)vdupq_n_s32(0x37800080u));
                                                              goto LABEL_274;
                                                            }
                                                            unsigned int v183 = 1;
                                                            goto LABEL_272;
                                                          }
                                                          unsigned int v180 = 1;
LABEL_261:
                                                          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v176, 0x5Du, v16, v180))goto LABEL_263; {
                                                          goto LABEL_262;
                                                          }
                                                        }
                                                      }
                                                      else
                                                      {
                                                        BOOL v179 = 0;
                                                      }
                                                      unsigned int v180 = *(unsigned __int8 *)(v176 + v179 + 11);
                                                      if (v180 != 2) {
                                                        goto LABEL_261;
                                                      }
                                                      goto LABEL_259;
                                                    }
LABEL_250:
                                                    gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v195, v163, 0xF0u, v16, 2u, 0);
                                                    LOWORD(v173) = v195.i16[3];
                                                    float v174 = (float)v173 * 0.000015259;
                                                    float32x4_t v175 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v195)), (float32x4_t)vdupq_n_s32(0x37800080u));
                                                    *(_DWORD *)(a1 + 144) = v175.i32[2];
                                                    *(void *)(a1 + 136) = v175.i64[0];
                                                    uint16x4_t v162 = v188[0];
                                                    goto LABEL_252;
                                                  }
LABEL_246:
                                                  unsigned int v172 = *(unsigned __int8 *)(v163 + v171 + 11);
                                                  if (v172 != 2) {
                                                    goto LABEL_249;
                                                  }
                                                  goto LABEL_247;
                                                }
LABEL_245:
                                                BOOL v171 = 0;
                                                goto LABEL_246;
                                              }
                                            }
                                            else
                                            {
                                              BOOL v166 = 0;
                                            }
                                            unsigned int v167 = *(unsigned __int8 *)(v163 + v166 + 11);
                                            if (v167 != 2) {
                                              goto LABEL_238;
                                            }
                                            goto LABEL_236;
                                          }
LABEL_202:
                                          v187->i64[0] = 0;
                                          *(v10 - 22) = 0;
                                          goto LABEL_203;
                                        }
                                        [WeakRetained lineColor];
                                        *(_OWORD *)(a1 + 104) = *(_OWORD *)v188[0].i8;
                                      }
LABEL_201:
                                      if (!*(unsigned char *)(a1 + 5)) {
                                        goto LABEL_203;
                                      }
                                      goto LABEL_202;
                                    }
LABEL_196:
                                    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v129, 0x5Du, v16, 0)) {
                                      goto LABEL_201;
                                    }
                                    unsigned int v137 = 1;
                                    goto LABEL_198;
                                  }
                                  unsigned int v133 = 1;
LABEL_183:
                                  if (!*(unsigned char *)(a1 + 1)) {
                                    goto LABEL_201;
                                  }
                                  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v129, 0x5Cu, v16, v133) & 1) == 0)
                                  {
                                    if (WeakRetained)
                                    {
                                      [WeakRetained lineColor];
                                      long long v134 = *(_OWORD *)v188[0].i8;
                                      uint64_t v129 = *(void *)(*(void *)buf + 24);
                                    }
                                    else
                                    {
                                      long long v134 = 0uLL;
                                    }
                                    *(_OWORD *)(a1 + 88) = v134;
                                    long double v130 = *(float **)v129;
                                  }
                                  goto LABEL_189;
                                }
                              }
                              else
                              {
                                BOOL v132 = 0;
                              }
                              unsigned int v133 = *(unsigned __int8 *)(v129 + v132 + 11);
                              if (v133 != 2) {
                                goto LABEL_183;
                              }
                              goto LABEL_179;
                            }
LABEL_125:
                            gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)buf, v62, 0x1A3u, v16, 2u, 0);
                            *(float32x4_t *)(a1 + 72) = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)buf)), (float32x4_t)vdupq_n_s32(0x37800080u));
                            uint64_t v61 = v192[0];
                            goto LABEL_126;
                          }
                        }
                        else
                        {
                          BOOL v68 = 0;
                        }
                        unsigned int v69 = *(unsigned __int8 *)(v62 + v68 + 11);
                        if (v69 != 2) {
                          goto LABEL_124;
                        }
                        goto LABEL_122;
                      }
                      unsigned int v66 = 1;
LABEL_113:
                      if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v62, 0xF0u, v16, v66))goto LABEL_115; {
                      goto LABEL_114;
                      }
                    }
                  }
                  else
                  {
                    BOOL v65 = 0;
                  }
                  unsigned int v66 = *(unsigned __int8 *)(v62 + v65 + 11);
                  if (v66 != 2) {
                    goto LABEL_113;
                  }
                  goto LABEL_111;
                }
LABEL_71:
                buf[0] = 1;
                v188[0].i8[0] = 1;
                uint64_t v41 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v26, 0x68u, 0, buf);
                uint64_t v42 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<unsigned int>(v26, 0x68u, 1u, v188);
                if (v38 >= 1.0) {
                  uint64_t v43 = (_DWORD *)v42;
                }
                else {
                  uint64_t v43 = (_DWORD *)v41;
                }
                *(_DWORD *)(a1 + 232) = *v43;
                if (!a4) {
                  goto LABEL_85;
                }
                goto LABEL_77;
              }
LABEL_59:
              buf[0] = 1;
              v188[0].i8[0] = 1;
              char v36 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v26, 0, buf, v32);
              char v37 = gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v26, 1u, (BOOL *)v188, v32);
              if (v33 < 1.0) {
                char v37 = v36;
              }
              goto LABEL_63;
            }
          }
        }
        else
        {
          BOOL v29 = 0;
        }
        unsigned int v31 = *(unsigned __int8 *)(v26 + v29 + 11);
        if (v31 != 2) {
          goto LABEL_51;
        }
        goto LABEL_49;
      }
LABEL_33:
      unsigned int v25 = 1;
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v15, 0x5Du, v16, 0)) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
LABEL_21:
    hasValueForKeyAtZAtEnfloat d = 1;
    if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(void *)(v192[0] + 24), 0x5Cu, v16, 0)) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v193) {
    goto LABEL_6;
  }
LABEL_276:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v192);
  return a1;
}

void sub_1A2209568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  uint64_t v22 = va_arg(va1, void);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va1);
  uint64_t v15 = *v13;
  if (*v13)
  {
    *(void *)(v11 + 200) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v11 + 216) + 40))(*(void *)(v11 + 216), v15, *(void *)(v11 + 208) - v15);
  }
  _Unwind_Resume(a1);
}

void md::LabelExternalMeshRequest::~LabelExternalMeshRequest(md::LabelExternalMeshRequest *this)
{
  md::LabelExternalMeshRequest::~LabelExternalMeshRequest(this);
  JUMPOUT(0x1A6239270);
}

{
  std::mutex *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF5451F8;
  uint64_t v2 = (std::mutex *)((char *)this + 96);
  std::mutex::lock((std::mutex *)((char *)this + 96));
  uint64_t v3 = *((void *)this + 20);
  if (v3) {
    atomic_store(1u, (unsigned __int8 *)(v3 + 116));
  }
  std::mutex::unlock(v2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  std::mutex::~mutex(v2);
}

void sub_1A220980C(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2 + 160);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void altitude::FlyoverRoadTile::append(void **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = (uint64_t)a1[7];
  md::createFeatureAttributeSet((gss::Allocator *)v68, (uint64_t *)(*(void *)a2 + 24));
  *(void *)((char *)&v72 + 7) = 0;
  *(void *)&long long v72 = 0;
  HIBYTE(v72) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v71, v5, (gss::FeatureAttributeSet *)v68, (gss::QueryOverrides *)&v72);
  if (v68[0])
  {
    v68[1] = v68[0];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v69 + 40))(v69, v68[0], v68[2] - v68[0]);
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v4[5] - (unsigned char *)v4[4]) >> 3);
  v4[1] = (void *)v6;
  uint64_t v7 = *v4;
  long long v8 = v71;
  long long v72 = v71;
  if (*((void *)&v71 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v71 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v68, v8, *((uint64_t *)&v8 + 1));
  int v9 = v6 - v7;
  if (*((void *)&v8 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v8 + 1) + 16))(*((void *)&v8 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
  }
  if (v9 < 2 || v70 == 0)
  {
    unint64_t v11 = (unint64_t)v4[1] - v9;
    uint64_t v12 = v4[4];
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v4[5] - v12) >> 3);
    if (v11 <= v13)
    {
      if (v11 < v13) {
        v4[5] = &v12[24 * v11];
      }
    }
    else
    {
      std::vector<gm::Matrix<double,3,1>>::__append(v4 + 4, v11 - v13);
      unint64_t v11 = (unint64_t)v4[1] - v9;
    }
    v4[1] = (void *)v11;
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v68);
    BOOL v23 = (std::__shared_weak_count *)*((void *)&v71 + 1);
    if (*((void *)&v71 + 1)) {
      goto LABEL_98;
    }
    return;
  }
  uint64_t v14 = *(void *)(v68[0] + 24);
  uint64_t v15 = *(std::__shared_weak_count **)(v14 + 24);
  uint64_t v65 = *(void *)(v14 + 16);
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v68);
  {
    operator new();
  }
  uint64_t v16 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 80, 8);
  v16[3] = 0u;
  v16[4] = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  _OWORD *v16 = 0u;
  float v67 = v16;
  long long v17 = v71;
  long long v72 = v71;
  if (*((void *)&v71 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v71 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v68, v17, *((uint64_t *)&v17 + 1));
  if (!*((void *)&v17 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v70) {
      goto LABEL_24;
    }
LABEL_37:
    LOBYTE(v24) = 0;
    goto LABEL_52;
  }
  (*(void (**)(void))(**((void **)&v17 + 1) + 16))(*((void *)&v17 + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
  if (!v70) {
    goto LABEL_37;
  }
LABEL_24:
  uint64_t v18 = *(void *)(v68[0] + 24);
  uint64_t v19 = *(float **)v18;
  if (!*(void *)v18)
  {
    BOOL v21 = 0;
    goto LABEL_39;
  }
  float v20 = *v19;
  BOOL v21 = *v19 == 1.0;
  if (!*(unsigned char *)(v18 + 10) || (v20 != 0.0 ? (BOOL v22 = v20 == 1.0) : (BOOL v22 = 1), v22))
  {
LABEL_39:
    unsigned int v24 = *(unsigned __int8 *)(v18 + v21 + 11);
    if (v24 != 2) {
      goto LABEL_41;
    }
  }
  char hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(v68[0] + 24), 0x12Cu, 0);
  unsigned int v24 = 1;
  if (hasValueForKeyAtEnd) {
    goto LABEL_52;
  }
LABEL_41:
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v18, 0x12Cu, v24))
  {
    LOBYTE(v24) = 1;
    goto LABEL_52;
  }
  if (v19)
  {
    float v26 = *v19;
    BOOL v27 = *v19 == 1.0;
    if (*(unsigned char *)(v18 + 10) && v26 != 0.0 && v26 != 1.0)
    {
LABEL_50:
      char v28 = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v18, 0x12Du, 0);
      unsigned int v24 = 1;
      if (v28) {
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  else
  {
    BOOL v27 = 0;
  }
  unsigned int v24 = *(unsigned __int8 *)(v18 + v27 + 11);
  if (v24 == 2) {
    goto LABEL_50;
  }
LABEL_51:
  LOBYTE(v24) = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v18, 0x12Du, v24);
LABEL_52:
  BOOL v29 = v67;
  *((unsigned char *)v67 + 72) = v24;
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v68);
  uint64_t v30 = *v4;
  *((void *)v67 + 7) = *v4;
  *((void *)v67 + 6) = (unsigned char *)v4[1] - v30;
  uint64_t v31 = *a3;
  uint64_t v32 = a3[1];
  if (*a3 == v32) {
LABEL_55:
  }
    operator new();
  while (*(void *)(*(void *)v31 + 552) != v65)
  {
    v31 += 8;
    if (v31 == v32) {
      goto LABEL_55;
    }
  }
  uint64_t v33 = *(void *)(*(void *)(*(void *)v31 + 504) + 8 * (void)v4[2]);
  unsigned int v66 = v67;
  BOOL v34 = *(void **)(v33 + 424);
  unint64_t v35 = *(void *)(v33 + 432);
  if ((unint64_t)v34 >= v35)
  {
    uint64_t v37 = *(void *)(v33 + 416);
    uint64_t v38 = ((uint64_t)v34 - v37) >> 3;
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61) {
      abort();
    }
    uint64_t v40 = v35 - v37;
    if (v40 >> 2 > v39) {
      unint64_t v39 = v40 >> 2;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v41 = v39;
    }
    if (v41)
    {
      uint64_t v42 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v33 + 440) + 16))(*(void *)(v33 + 440), 8 * v41, 8);
      uint64_t v43 = (void *)(v42 + 8 * v38);
      uint64_t v44 = v42 + 8 * v41;
      if (v42)
      {
        unsigned int v66 = 0;
        *uint64_t v43 = v67;
      }
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v43 = (void *)(8 * v38);
    }
    char v36 = v43 + 1;
    float v45 = *(char **)(v33 + 416);
    uint64_t v46 = *(char **)(v33 + 424);
    if (v46 == v45)
    {
      *(void *)(v33 + 416) = v43;
      *(void *)(v33 + 424) = v36;
      uint64_t v61 = *(void *)(v33 + 432);
      *(void *)(v33 + 432) = v44;
      if (!v46) {
        goto LABEL_94;
      }
      goto LABEL_93;
    }
    unint64_t v47 = v46 - v45 - 8;
    if (v47 > 0x57
      && ((unint64_t v48 = (v45 - v46 + 7) & 0xFFFFFFFFFFFFFFF8,
           unint64_t v49 = (unint64_t)&v46[v48],
           float v50 = (char *)v43 + v48,
           v49 < (unint64_t)v43)
        ? (BOOL v51 = v50 >= v46)
        : (BOOL v51 = 1),
          v51))
    {
      uint64_t v52 = (v47 >> 3) + 1;
      uint64_t v53 = &v46[-8 * (v52 & 0x3FFFFFFFFFFFFFFCLL)];
      float32x4_t v54 = v43 - 2;
      unint64_t v55 = v46 - 32;
      uint64_t v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v58 = *(_OWORD *)v55;
        long long v57 = *((_OWORD *)v55 + 1);
        *(_OWORD *)unint64_t v55 = 0uLL;
        *((_OWORD *)v55 + 1) = 0uLL;
        v55 -= 32;
        *(v54 - 1) = v58;
        _OWORD *v54 = v57;
        v54 -= 2;
        v56 -= 4;
      }
      while (v56);
      v43 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
      if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_83:
        uint64_t v46 = *(char **)(v33 + 416);
        int v60 = *(char **)(v33 + 424);
        *(void *)(v33 + 416) = v43;
        *(void *)(v33 + 424) = v36;
        uint64_t v61 = *(void *)(v33 + 432);
        *(void *)(v33 + 432) = v44;
        if (v60 != v46)
        {
          uint64_t v62 = v4;
          do
          {
            uint64_t v64 = *((void *)v60 - 1);
            v60 -= 8;
            uint64_t v63 = v64;
            *(void *)int v60 = 0;
            if (v64)
            {
              {
                operator new();
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v63, 80);
            }
          }
          while (v60 != v46);
          uint64_t v4 = v62;
        }
        if (!v46) {
          goto LABEL_94;
        }
LABEL_93:
        (*(void (**)(void, char *, uint64_t))(**(void **)(v33 + 440) + 40))(*(void *)(v33 + 440), v46, v61 - (void)v46);
LABEL_94:
        BOOL v29 = v66;
        goto LABEL_95;
      }
    }
    else
    {
      uint64_t v53 = *(char **)(v33 + 424);
    }
    do
    {
      uint64_t v59 = *((void *)v53 - 1);
      v53 -= 8;
      *(void *)uint64_t v53 = 0;
      *--uint64_t v43 = v59;
    }
    while (v53 != v45);
    goto LABEL_83;
  }
  if (v34)
  {
    *BOOL v34 = v67;
    BOOL v29 = 0;
  }
  char v36 = v34 + 1;
LABEL_95:
  *(void *)(v33 + 424) = v36;
  if (!v29)
  {
    void *v4 = v4[1];
    BOOL v23 = (std::__shared_weak_count *)*((void *)&v71 + 1);
    if (!*((void *)&v71 + 1)) {
      return;
    }
    goto LABEL_98;
  }
  {
    operator new();
  }
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v29, 80);
  void *v4 = v4[1];
  BOOL v23 = (std::__shared_weak_count *)*((void *)&v71 + 1);
  if (*((void *)&v71 + 1))
  {
LABEL_98:
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1A220A920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v15 - 120);
  _Unwind_Resume(a1);
}

void std::vector<gm::Matrix<double,3,1>>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    a1[1] = &v5[24 * (24 * a2 / 0x18)];
  }
  else
  {
    unint64_t v6 = (char *)*a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v11[24 * v7];
    unint64_t v13 = &v12[24 * (24 * a2 / 0x18)];
    if (v5 != v6)
    {
      do
      {
        long long v14 = *(_OWORD *)(v5 - 24);
        *((void *)v12 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v14;
        v12 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[24 * v10];
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void altitude::RoadSuperTile::~RoadSuperTile(std::mutex *this)
{
  uint64_t v2 = *(void *)&this[2].__m_.__opaque[8];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)&this[2].__m_.__opaque[16];
  if (!v3) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)&this[2].__m_.__opaque[24];
  uint64_t v5 = *(void **)&this[2].__m_.__opaque[16];
  if (v4 == v3) {
    goto LABEL_14;
  }
  do
  {
    unint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
    if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      unint64_t v7 = *(void **)(v4 - 40);
      if (!v7) {
        goto LABEL_6;
      }
LABEL_10:
      *(void *)(v4 - 32) = v7;
      operator delete(v7);
      goto LABEL_6;
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unint64_t v7 = *(void **)(v4 - 40);
    if (v7) {
      goto LABEL_10;
    }
LABEL_6:
    v4 -= 72;
  }
  while (v4 != v3);
  uint64_t v5 = *(void **)&this[2].__m_.__opaque[16];
LABEL_14:
  *(void *)&this[2].__m_.__opaque[24] = v3;
  operator delete(v5);
LABEL_15:
  sig = (std::__shared_weak_count *)this[2].__m_.__sig;
  if (sig && !atomic_fetch_add(&sig->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))sig->__on_zero_shared)(sig);
    std::__shared_weak_count::__release_weak(sig);
  }
  std::mutex::~mutex(this);
}

void altitude::RoadSuperTile::initialize(altitude::RoadSuperTile *this, int a2, md::realistic::RoadRenderLayer *a3, double a4, double a5, double a6, double a7, double a8, float a9, float a10)
{
  uint64_t v242 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 19) = a2;
  unint64_t v10 = (1 << (2 * (a2 - *((unsigned char *)this + 72))));
  uint64_t v11 = *((void *)this + 19);
  uint64_t v12 = *((void *)this + 20);
  unint64_t v13 = 0x8E38E38E38E38E39 * ((v12 - v11) >> 3);
  unint64_t v14 = v10 - v13;
  unsigned int v225 = this;
  if (v10 > v13)
  {
    uint64_t v15 = *((void *)this + 21);
    if (0x8E38E38E38E38E39 * ((v15 - v12) >> 3) < v14)
    {
      unint64_t v16 = 0x8E38E38E38E38E39 * ((v15 - v11) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v10) {
        uint64_t v17 = (1 << (2 * (a2 - *((unsigned char *)this + 72))));
      }
      if (v16 >= 0x1C71C71C71C71C7) {
        unint64_t v18 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v18 = v17;
      }
      *(void *)&long long v241 = (char *)this + 168;
      if (v18 > 0x38E38E38E38E38ELL) {
LABEL_249:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v19 = 72 * v18;
      float v20 = (char *)operator new(72 * v18);
      BOOL v21 = &v20[72 * v13];
      v239[0] = v20;
      v239[1] = v21;
      BOOL v22 = &v20[v19];
      v240[1] = &v20[v19];
      BOOL v23 = &v20[72 * v10];
      unsigned int v24 = v21;
      do
      {
        *(void *)unsigned int v24 = 0;
        *((void *)v24 + 1) = 0;
        v24[24] = 0;
        *((void *)v24 + 2) = 0;
        *((_OWORD *)v24 + 2) = 0uLL;
        *((_OWORD *)v24 + 3) = 0uLL;
        *((void *)v24 + 8) = 0;
        v24 += 72;
      }
      while (v24 != v23);
      v240[0] = &v20[72 * v10];
      unsigned int v25 = (char *)*((void *)v225 + 19);
      float v26 = (char *)*((void *)v225 + 20);
      if (v26 == v25)
      {
        unint64_t v39 = (char *)*((void *)v225 + 20);
        uint64_t v38 = v225;
      }
      else
      {
        do
        {
          long long v27 = *(_OWORD *)(v26 - 72);
          *(_OWORD *)(v21 - 63) = *(_OWORD *)(v26 - 63);
          *(_OWORD *)(v21 - 72) = v27;
          *((void *)v21 - 4) = 0;
          *((void *)v21 - 3) = 0;
          *((void *)v21 - 5) = 0;
          BOOL v29 = (unsigned char *)*((void *)v26 - 5);
          char v28 = (unsigned char *)*((void *)v26 - 4);
          int64_t v30 = v28 - v29;
          if (v28 != v29)
          {
            if (0xAAAAAAAAAAAAAAABLL * (v30 >> 3) > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            uint64_t v31 = (char *)operator new(v30);
            *((void *)v21 - 5) = v31;
            *((void *)v21 - 4) = v31;
            *((void *)v21 - 3) = &v31[8 * (v30 >> 3)];
            size_t v32 = 24 * ((v30 - 24) / 0x18uLL) + 24;
            memcpy(v31, v29, v32);
            *((void *)v21 - 4) = &v31[v32];
          }
          *((void *)v21 - 2) = *((void *)v26 - 2);
          uint64_t v33 = *((void *)v26 - 1);
          *((void *)v21 - 1) = v33;
          if (v33) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
          }
          v21 -= 72;
          v26 -= 72;
        }
        while (v26 != v25);
        uint64_t v38 = v225;
        unint64_t v39 = (char *)*((void *)v225 + 19);
        float v26 = (char *)*((void *)v225 + 20);
        BOOL v23 = (char *)v240[0];
        BOOL v22 = (char *)v240[1];
      }
      *((void *)v38 + 19) = v21;
      *((void *)v38 + 20) = v23;
      uint64_t v40 = (void *)*((void *)v38 + 21);
      *((void *)v38 + 21) = v22;
      v240[1] = v40;
      v239[0] = v39;
      v239[1] = v39;
      if (v26 != v39)
      {
        while (1)
        {
          v240[0] = v26 - 72;
          uint64_t v42 = (std::__shared_weak_count *)*((void *)v26 - 1);
          if (v42)
          {
            if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              break;
            }
          }
          uint64_t v41 = (void *)*((void *)v26 - 5);
          if (v41) {
            goto LABEL_40;
          }
LABEL_41:
          float v26 = (char *)v240[0];
          if (v240[0] == v39)
          {
            float v26 = (char *)v239[0];
            goto LABEL_47;
          }
        }
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        uint64_t v41 = (void *)*((void *)v26 - 5);
        if (!v41) {
          goto LABEL_41;
        }
LABEL_40:
        *((void *)v26 - 4) = v41;
        operator delete(v41);
        goto LABEL_41;
      }
LABEL_47:
      if (v26) {
        operator delete(v26);
      }
      this = v225;
      uint64_t v34 = *((void *)v225 + 20);
      goto LABEL_50;
    }
    uint64_t v34 = v12 + 72 * v14;
    do
    {
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(unsigned char *)(v12 + 24) = 0;
      *(void *)(v12 + 16) = 0;
      *(_OWORD *)(v12 + 32) = 0uLL;
      *(_OWORD *)(v12 + 48) = 0uLL;
      *(void *)(v12 + 64) = 0;
      v12 += 72;
    }
    while (v12 != v34);
    goto LABEL_34;
  }
  if (v10 >= v13)
  {
    uint64_t v34 = *((void *)this + 20);
    goto LABEL_50;
  }
  uint64_t v34 = v11 + 72 * v10;
  if (v12 == v34)
  {
LABEL_33:
    this = v225;
LABEL_34:
    *((void *)this + 20) = v34;
LABEL_50:
    uint64_t v43 = *((void *)this + 19);
    uint64_t v44 = v34;
    if (v34 != v43)
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      unint64_t v47 = v225;
      do
      {
        uint64_t v49 = *((void *)v47 + 15);
        uint64_t v48 = *((void *)v47 + 16);
        if (v48) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v50 = v43 + v45;
        BOOL v51 = *(std::__shared_weak_count **)(v50 + 64);
        *(void *)(v50 + 56) = v49;
        *(void *)(v50 + 64) = v48;
        if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
        unint64_t v47 = v225;
        uint64_t v43 = *((void *)v225 + 19);
        *(void *)(v43 + v45 + 16) = v46++;
        v45 += 72;
      }
      while (v46 != 0x8E38E38E38E38E39 * ((*((void *)v225 + 20) - v43) >> 3));
      uint64_t v34 = *((void *)v225 + 20);
      uint64_t v44 = *((void *)v225 + 19);
    }
    uint64_t v235 = 0;
    float v236 = 0;
    uint64_t v237 = 0;
    uint64_t v217 = v34;
    if (v44 == v34) {
LABEL_247:
    }
      operator new();
    unsigned int v52 = 0;
    int v54 = *((_DWORD *)v225 + 18);
    int v53 = *((_DWORD *)v225 + 19);
    int v216 = v53 - v54;
    double v215 = 1.0 / (double)(1 << (v53 - v54));
    uint64_t v55 = *((void *)v225 + 17);
    int v213 = 2 * v53 - 2 * v54 - 2;
    int v214 = v54 - v53;
    uint64_t v224 = v55;
LABEL_62:
    unsigned int v218 = v52;
    if (v216)
    {
      int v56 = 0;
      LODWORD(v57) = 0;
      int v58 = v213;
      int v59 = v214;
      unsigned int v60 = v52;
      do
      {
        unsigned int v61 = v60 >> v58;
        v60 -= v60 >> v58 << v58;
        unsigned int v62 = v61 >> 1;
        uint64_t v63 = v61 & 1 | (2 * v56);
        uint64_t v57 = v62 + 2 * v57;
        v58 -= 2;
        int v56 = v63;
      }
      while (!__CFADD__(v59++, 1));
      uint64_t v65 = v63 | (v57 << 32);
    }
    else
    {
      uint64_t v65 = 0;
    }
    float v66 = v215 * (double)(int)v65;
    float v231 = v66;
    float v67 = v215 * (double)SHIDWORD(v65);
    float v234 = v67;
    float v68 = v215 * (double)((int)v65 + 1);
    float v230 = v68;
    float v69 = v215 * (double)(HIDWORD(v65) + 1);
    float v233 = v69;
    char v70 = *(char **)(v55 + 48);
    v239[0] = v70;
    v239[1] = *(void **)(v55 + 56);
    unsigned int v71 = v239[1];
    while (1)
    {
      if (v70 == *(char **)(v55 + 64) && v71 == *(_DWORD *)(v55 + 72))
      {
        unsigned int v52 = v218 + 1;
        v44 += 72;
        if (v44 == v217)
        {
          int v200 = v236;
          if (v235 != v236)
          {
            uint64_t v201 = *((void *)v225 + 19);
            int v202 = (char *)v235;
            do
            {
              uint64_t v203 = *(void *)(*(void *)v202 + 504);
              uint64_t v204 = *(void *)(*(void *)v202 + 512);
              uint64_t v205 = v204 - v203;
              if (v204 != v203)
              {
                uint64_t v206 = 0;
                uint64_t v207 = v205 >> 3;
                do
                {
                  uint64_t v208 = *(void *)(v203 + 8 * v206);
                  uint64_t v209 = *(uint64_t **)(v208 + 416);
                  float32x4_t v210 = *(uint64_t **)(v208 + 424);
                  if (v209 != v210)
                  {
                    uint64_t v211 = *(void *)(v201 + 72 * v206 + 32);
                    do
                    {
                      uint64_t v212 = *v209++;
                      *(void *)(v212 + 56) = v211 + 24 * *(void *)(v212 + 56);
                    }
                    while (v209 != v210);
                  }
                  ++v206;
                }
                while (v206 != v207);
              }
              v202 += 8;
            }
            while (v202 != v200);
          }
          goto LABEL_247;
        }
        goto LABEL_62;
      }
      *(void *)&long long v238 = 0;
      float v72 = a9;
      float v73 = a10;
      geo::codec::multiSectionFeaturePoints(v70, v71, &v238);
      uint64_t v232 = v238;
      if ((unint64_t)v238 < 2)
      {
        a10 = v73;
        a9 = v72;
        goto LABEL_235;
      }
      *(void *)&long long v238 = 0;
      uint64_t v74 = v239[0];
      unint64_t v75 = LODWORD(v239[1]);
      BOOL v79 = geo::codec::multiSectionFeaturePoints((void *)v239[0], LODWORD(v239[1]), &v238)
         && ((*(void *)&long long v238 = 0,
              uint64_t v76 = (float *)geo::codec::multiSectionFeaturePoints(v74, v75, &v238),
              float v77 = v76[1],
              v77 > v234)
           ? (BOOL v78 = v77 < v233)
           : (BOOL v78 = 0),
             v78)
         && *v76 < v230
         && *v76 > v231;
      *(void *)&long long v238 = 0;
      uint64_t v80 = geo::codec::multiSectionFeatureElevations((uint64_t)v74, v75, &v238);
      uint64_t v81 = 0;
      char v82 = 1;
      float v83 = v73;
      while (1)
      {
        *(void *)&long long v238 = 0;
        double v84 = geo::codec::multiSectionFeaturePoints(v74, v75, &v238);
        float v85 = v80 ? *(float *)(v80 + 4 * v81) : -3.4028e38;
        unsigned int v86 = (float *)&v84[v81];
        uint64_t v88 = *(unsigned int *)v86;
        uint64_t v87 = *((unsigned int *)v86 + 1);
        float v89 = *v86;
        float v90 = v86[1];
        if (v90 > v234 && v90 < v233)
        {
          BOOL v92 = v89 < v230 && v89 > v231;
          if (!v81)
          {
LABEL_100:
            a9 = v72;
            a10 = v83;
            goto LABEL_144;
          }
        }
        else
        {
          BOOL v92 = 0;
          if (!v81) {
            goto LABEL_100;
          }
        }
        float v93 = v85;
        *(void *)&long long v238 = 0;
        long double v94 = geo::codec::multiSectionFeaturePoints(v74, v75, &v238);
        if (v80) {
          float v95 = *(float *)(v80 - 4 + 4 * v81);
        }
        else {
          float v95 = -3.4028e38;
        }
        long double v96 = &v94[v81];
        uint64_t v97 = *((unsigned int *)v96 - 2);
        uint64_t v98 = *((unsigned int *)v96 - 1);
        if ((v88 | (v87 << 32)) == (v97 | (v98 << 32)))
        {
          a9 = v72;
          a10 = v83;
          goto LABEL_84;
        }
        float v99 = *(float *)&v97;
        float v100 = *(float *)&v98;
        float v101 = v89 - *(float *)&v97;
        float v102 = v90 - *(float *)&v98;
        float v103 = 1.0 / sqrtf((float)(v101 * v101) + (float)(v102 * v102));
        a9 = v103 * (float)(v89 - *(float *)&v97);
        a10 = v103 * (float)(v90 - *(float *)&v98);
        if (v79)
        {
          if (v82) {
            float v104 = v103 * (float)(v90 - *(float *)&v98);
          }
          else {
            float v104 = v83;
          }
          if (v82) {
            float v105 = a9;
          }
          else {
            float v105 = v72;
          }
          if ((float)((float)((float)(v105 + a9) * (float)(v105 + a9))
                     + (float)((float)(v104 + a10) * (float)(v104 + a10))) < 2.0)
          {
            float v106 = v95;
            float v107 = *(float *)&v97;
            float v226 = a10;
            float v228 = a9;
            altitude::FlyoverRoadTile::append((void **)v44, (uint64_t)v239, (uint64_t *)&v235);
            uint64_t v109 = *(void *)(v44 + 32);
            unint64_t v108 = *(void *)(v44 + 40);
            a9 = v228;
            a10 = v226;
            float v99 = v107;
            float v95 = v106;
            if (v109 != v108)
            {
              float v110 = (long long *)(v108 - 24);
              unint64_t v111 = *(void *)(v44 + 48);
              if (v108 >= v111)
              {
                unint64_t v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108 - v109) >> 3) + 1;
                if (v113 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_248;
                }
                unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - v109) >> 3);
                if (2 * v114 > v113) {
                  unint64_t v113 = 2 * v114;
                }
                if (v114 >= 0x555555555555555) {
                  unint64_t v115 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v115 = v113;
                }
                if (v115)
                {
                  if (v115 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_249;
                  }
                  float32x2_t v116 = (char *)operator new(24 * v115);
                  float v99 = v107;
                  float v95 = v106;
                }
                else
                {
                  float32x2_t v116 = 0;
                }
                long long v117 = *v110;
                float32x2_t v118 = &v116[8 * ((uint64_t)(v108 - v109) >> 3)];
                *((void *)v118 + 2) = *(void *)(v108 - 8);
                *(_OWORD *)float32x2_t v118 = v117;
                float v119 = v118;
                do
                {
                  long long v120 = *(_OWORD *)(v108 - 24);
                  *((void *)v119 - 1) = *(void *)(v108 - 8);
                  *(_OWORD *)(v119 - 24) = v120;
                  v119 -= 24;
                  v108 -= 24;
                }
                while (v108 != v109);
                float32x2_t v121 = &v116[24 * v115];
                float32x2_t v122 = *(void **)(v44 + 32);
                float v112 = v118 + 24;
                *(void *)(v44 + 32) = v119;
                *(void *)(v44 + 40) = v118 + 24;
                *(void *)(v44 + 48) = v121;
                if (v122)
                {
                  operator delete(v122);
                  float v95 = v106;
                  float v99 = v107;
                }
                a9 = v228;
                a10 = v226;
              }
              else
              {
                *(_OWORD *)unint64_t v108 = *v110;
                *(void *)(v108 + 16) = *(void *)(v108 - 8);
                float v112 = (char *)(v108 + 24);
              }
              *(void *)(v44 + 40) = v112;
            }
          }
          if (v92) {
            break;
          }
        }
        char v82 = 0;
        if (fabsf(v102) < 0.00000001)
        {
          if (v100 < v234 || v100 > v233) {
            goto LABEL_143;
          }
          float v123 = 0.0;
LABEL_139:
          float v127 = 1.0;
          goto LABEL_140;
        }
        float v124 = (float)(1.0 / v102) * (float)(v234 - v100);
        float v125 = (float)(1.0 / v102) * (float)(v233 - v100);
        float v126 = fminf(v124, v125);
        if (v126 > 1.0 || (float v127 = fmaxf(v124, v125), v127 < 0.0))
        {
LABEL_143:
          float v85 = v93;
          goto LABEL_144;
        }
        float v123 = fmaxf(v126, 0.0);
        if (v127 >= 1.0) {
          goto LABEL_139;
        }
LABEL_140:
        if (fabsf(v101) >= 0.00000001)
        {
          float v144 = (float)(1.0 / v101) * (float)(v231 - v99);
          float v145 = (float)(1.0 / v101) * (float)(v230 - v99);
          float v146 = fmaxf(v144, v145);
          float v147 = fminf(v144, v145);
          if (v147 > v127 || v146 < v123)
          {
            char v82 = 0;
            float v85 = v93;
            goto LABEL_144;
          }
          float v123 = fmaxf(v147, v123);
          if (v146 < v127) {
            float v127 = v146;
          }
        }
        else
        {
          char v82 = 0;
          if (v99 < v231 || v99 > v230) {
            goto LABEL_143;
          }
        }
        float v149 = v99 + (float)(v123 * v101);
        float v150 = v100 + (float)(v123 * v102);
        if (v92)
        {
          double v151 = v149;
          double v152 = v150;
          double v153 = (float)(v123 * v93) + (1.0 - v123) * v95;
          int v155 = *(double **)(v44 + 40);
          unint64_t v154 = *(void *)(v44 + 48);
          if ((unint64_t)v155 >= v154)
          {
            unint64_t v164 = *(double **)(v44 + 32);
            unint64_t v165 = 0xAAAAAAAAAAAAAAABLL * (v155 - v164) + 1;
            if (v165 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_248;
            }
            unint64_t v166 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (void)v164) >> 3);
            if (2 * v166 > v165) {
              unint64_t v165 = 2 * v166;
            }
            if (v166 >= 0x555555555555555) {
              unint64_t v167 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v167 = v165;
            }
            if (v167)
            {
              if (v167 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_249;
              }
              float v168 = a10;
              float v169 = a9;
              float v170 = (char *)operator new(24 * v167);
            }
            else
            {
              float v168 = a10;
              float v169 = a9;
              float v170 = 0;
            }
            float64x2_t v177 = (double *)&v170[8 * (v155 - v164)];
            *float64x2_t v177 = v151;
            v177[1] = v152;
            v177[2] = v153;
            float v178 = v177;
            if (v155 != v164)
            {
              do
              {
                long long v179 = *(_OWORD *)(v155 - 3);
                *(v178 - 1) = *(v155 - 1);
                *(_OWORD *)(v178 - 3) = v179;
                v178 -= 3;
                v155 -= 3;
              }
              while (v155 != v164);
              int v155 = *(double **)(v44 + 32);
            }
            uint64_t v156 = v177 + 3;
            *(void *)(v44 + 32) = v178;
            *(void *)(v44 + 40) = v177 + 3;
            *(void *)(v44 + 48) = &v170[24 * v167];
            if (v155) {
              operator delete(v155);
            }
            a9 = v169;
            a10 = v168;
            float v85 = v93;
          }
          else
          {
            float v85 = v93;
            *int v155 = v151;
            v155[1] = v152;
            uint64_t v156 = v155 + 3;
            v155[2] = v153;
          }
          char v82 = 0;
          *(void *)(v44 + 40) = v156;
        }
        else
        {
          float v158 = *(double **)(v44 + 40);
          unint64_t v157 = *(void *)(v44 + 48);
          double v159 = v95;
          if (!v79)
          {
            double v160 = v149;
            double v161 = v150;
            double v162 = (float)(v123 * v93) + (1.0 - v123) * v159;
            if ((unint64_t)v158 >= v157)
            {
              BOOL v171 = *(double **)(v44 + 32);
              unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * (v158 - v171) + 1;
              if (v172 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_248;
              }
              unint64_t v173 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v157 - (void)v171) >> 3);
              if (2 * v173 > v172) {
                unint64_t v172 = 2 * v173;
              }
              if (v173 >= 0x555555555555555) {
                unint64_t v174 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v174 = v172;
              }
              float v229 = a9;
              float v227 = a10;
              if (v174)
              {
                double v219 = v162;
                double v220 = v149;
                double v221 = v150;
                double v222 = v159;
                if (v174 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_249;
                }
                float v175 = v99;
                uint64_t v176 = (char *)operator new(24 * v174);
                float v99 = v175;
                double v161 = v221;
                double v159 = v222;
                double v162 = v219;
                double v160 = v220;
              }
              else
              {
                uint64_t v176 = 0;
              }
              unsigned int v180 = (double *)&v176[8 * (v158 - v171)];
              *unsigned int v180 = v160;
              v180[1] = v161;
              v180[2] = v162;
              float v181 = v180;
              if (v158 != v171)
              {
                do
                {
                  long long v182 = *(_OWORD *)(v158 - 3);
                  *(v181 - 1) = *(v158 - 1);
                  *(_OWORD *)(v181 - 3) = v182;
                  v181 -= 3;
                  v158 -= 3;
                }
                while (v158 != v171);
                float v158 = *(double **)(v44 + 32);
              }
              uint64_t v163 = v180 + 3;
              *(void *)(v44 + 32) = v181;
              *(void *)(v44 + 40) = v180 + 3;
              *(void *)(v44 + 48) = &v176[24 * v174];
              if (v158)
              {
                float v223 = v99;
                operator delete(v158);
                float v99 = v223;
              }
              a9 = v229;
              a10 = v227;
            }
            else
            {
              *float v158 = v160;
              v158[1] = v161;
              uint64_t v163 = v158 + 3;
              v158[2] = v162;
            }
            *(void *)(v44 + 40) = v163;
            unint64_t v157 = *(void *)(v44 + 48);
            float v158 = v163;
          }
          float v183 = v100 + (float)(v127 * v102);
          double v184 = (float)(v99 + (float)(v127 * v101));
          double v185 = v183;
          double v186 = (float)(v127 * v93) + (1.0 - v127) * v159;
          if ((unint64_t)v158 >= v157)
          {
            double v190 = *(double **)(v44 + 32);
            unint64_t v191 = 0xAAAAAAAAAAAAAAABLL * (v158 - v190) + 1;
            if (v191 > 0xAAAAAAAAAAAAAAALL) {
LABEL_248:
            }
              abort();
            unint64_t v192 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v157 - (void)v190) >> 3);
            if (2 * v192 > v191) {
              unint64_t v191 = 2 * v192;
            }
            if (v192 >= 0x555555555555555) {
              unint64_t v193 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v193 = v191;
            }
            if (v193)
            {
              if (v193 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_249;
              }
              float v187 = a10;
              float v188 = a9;
              char v194 = (char *)operator new(24 * v193);
            }
            else
            {
              float v187 = a10;
              float v188 = a9;
              char v194 = 0;
            }
            uint16x4_t v195 = (double *)&v194[8 * (v158 - v190)];
            *uint16x4_t v195 = v184;
            v195[1] = v185;
            v195[2] = v186;
            int v196 = v195;
            if (v158 != v190)
            {
              do
              {
                long long v197 = *(_OWORD *)(v158 - 3);
                *(v196 - 1) = *(v158 - 1);
                *(_OWORD *)(v196 - 3) = v197;
                v196 -= 3;
                v158 -= 3;
              }
              while (v158 != v190);
              float v158 = *(double **)(v44 + 32);
            }
            unsigned __int8 v189 = v195 + 3;
            *(void *)(v44 + 32) = v196;
            *(void *)(v44 + 40) = v195 + 3;
            *(void *)(v44 + 48) = &v194[24 * v193];
            if (v158) {
              operator delete(v158);
            }
          }
          else
          {
            float v187 = a10;
            float v188 = a9;
            *float v158 = v184;
            v158[1] = v185;
            unsigned __int8 v189 = v158 + 3;
            v158[2] = v186;
          }
          *(void *)(v44 + 40) = v189;
          altitude::FlyoverRoadTile::append((void **)v44, (uint64_t)v239, (uint64_t *)&v235);
          char v82 = 0;
          a9 = v188;
          a10 = v187;
          float v85 = v93;
        }
LABEL_144:
        if (v92) {
          goto LABEL_145;
        }
        if (++v81 == v232) {
          goto LABEL_234;
        }
        BOOL v79 = 0;
LABEL_85:
        uint64_t v74 = v239[0];
        unint64_t v75 = LODWORD(v239[1]);
        float v83 = a10;
        float v72 = a9;
      }
      char v82 = 0;
      float v85 = v93;
LABEL_145:
      double v128 = v89;
      double v129 = v90;
      double v130 = v85;
      BOOL v132 = *(double **)(v44 + 40);
      unint64_t v131 = *(void *)(v44 + 48);
      if ((unint64_t)v132 >= v131)
      {
        long long v134 = *(double **)(v44 + 32);
        unint64_t v135 = 0xAAAAAAAAAAAAAAABLL * (v132 - v134) + 1;
        if (v135 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_248;
        }
        unint64_t v136 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v131 - (void)v134) >> 3);
        if (2 * v136 > v135) {
          unint64_t v135 = 2 * v136;
        }
        if (v136 >= 0x555555555555555) {
          unint64_t v137 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v137 = v135;
        }
        if (v137)
        {
          if (v137 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_249;
          }
          float v138 = a10;
          float v139 = a9;
          float32x2_t v140 = (char *)operator new(24 * v137);
        }
        else
        {
          float v138 = a10;
          float v139 = a9;
          float32x2_t v140 = 0;
        }
        float32x2_t v141 = (double *)&v140[8 * (v132 - v134)];
        *float32x2_t v141 = v128;
        v141[1] = v129;
        v141[2] = v130;
        float32x2_t v142 = v141;
        if (v132 != v134)
        {
          do
          {
            long long v143 = *(_OWORD *)(v132 - 3);
            *(v142 - 1) = *(v132 - 1);
            *(_OWORD *)(v142 - 3) = v143;
            v142 -= 3;
            v132 -= 3;
          }
          while (v132 != v134);
          BOOL v132 = *(double **)(v44 + 32);
        }
        unsigned int v133 = v141 + 3;
        *(void *)(v44 + 32) = v142;
        *(void *)(v44 + 40) = v141 + 3;
        *(void *)(v44 + 48) = &v140[24 * v137];
        if (v132) {
          operator delete(v132);
        }
        a9 = v139;
        a10 = v138;
      }
      else
      {
        *BOOL v132 = v128;
        v132[1] = v129;
        unsigned int v133 = v132 + 3;
        v132[2] = v130;
      }
      *(void *)(v44 + 40) = v133;
      BOOL v79 = 1;
LABEL_84:
      if (++v81 != v232) {
        goto LABEL_85;
      }
      if (v92)
      {
        float v198 = a9;
        float v199 = a10;
        altitude::FlyoverRoadTile::append((void **)v44, (uint64_t)v239, (uint64_t *)&v235);
        a10 = v199;
        a9 = v198;
        uint64_t v55 = v224;
      }
      else
      {
LABEL_234:
        uint64_t v55 = v224;
      }
LABEL_235:
      unsigned int v71 = LODWORD(v239[1]) + 1;
      LODWORD(v239[1]) = v71;
      char v70 = (char *)v239[0];
      if (v71 >= *((_DWORD *)v239[0] + 25))
      {
        unsigned int v71 = 0;
        char v70 = (char *)v239[0] + 168;
        v239[0] = (char *)v239[0] + 168;
        ++HIDWORD(v239[1]);
        LODWORD(v239[1]) = 0;
      }
    }
  }
  while (1)
  {
    uint64_t v36 = v34;
    uint64_t v37 = *(std::__shared_weak_count **)(v12 - 8);
    if (v37)
    {
      if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        break;
      }
    }
    unint64_t v35 = *(void **)(v12 - 40);
    if (v35) {
      goto LABEL_23;
    }
LABEL_24:
    v12 -= 72;
    uint64_t v34 = v36;
    if (v12 == v36) {
      goto LABEL_33;
    }
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  unint64_t v35 = *(void **)(v12 - 40);
  if (!v35) {
    goto LABEL_24;
  }
LABEL_23:
  *(void *)(v12 - 32) = v35;
  operator delete(v35);
  goto LABEL_24;
}

void sub_1A220E6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t *a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  MEMORY[0x1A6239270](v35, 0x1020C4007FF0C4BLL);
  if (v36) {
    operator delete(v36);
  }
  uint64_t v38 = *a24;
  *a24 = 0;
  if (v38)
  {
    uint64_t v39 = *(void *)(v38 + 2584);
    if (v39) {
      MEMORY[0x1A6239250](v39, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v38, 0x1020C4007FF0C4BLL);
  }
  uint64_t v40 = *a25;
  if (*a25)
  {
    *(void *)(a28 + 40) = v40;
    operator delete(v40);
  }
  uint64_t v41 = *a22;
  if (*a22)
  {
    *(void *)(a28 + 16) = v41;
    operator delete(v41);
  }
  MEMORY[0x1A6239270](a28, 0x10A1C4045AE8C7DLL);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<altitude::FlyoverRoadTile>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    while (1)
    {
      *(void *)(a1 + 16) = v3 - 72;
      uint64_t v4 = *(std::__shared_weak_count **)(v3 - 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      uint64_t v5 = *(void **)(v3 - 40);
      if (v5) {
        goto LABEL_7;
      }
LABEL_3:
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3 == v2) {
        goto LABEL_10;
      }
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = *(void **)(v3 - 40);
    if (!v5) {
      goto LABEL_3;
    }
LABEL_7:
    *(void *)(v3 - 32) = v5;
    operator delete(v5);
    goto LABEL_3;
  }
LABEL_10:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__function::__func<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0,std::allocator<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::operator()(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(void *)(*(void *)(a1 + 8) + 8 * *a2), *a3);
}

uint64_t std::__function::__func<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0,std::allocator<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57D170;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0,std::allocator<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF57D170;
  result[1] = v3;
  return result;
}

void std::__function::__func<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0,std::allocator<altitude::RoadSuperTile::collectRenderItems(md::PassList &,unsigned long)::$_0>,void ()(md::FlyoverRoadPasses,ggl::RenderItem *)>::~__func()
{
}

void md::LabelTextureAtlasStore::~LabelTextureAtlasStore(md::LabelTextureAtlasStore *this)
{
  *(void *)this = &unk_1EF541688;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EF541688;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

void std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_1,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5759D8;
}

void *std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_1,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_1>,void ()(void)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1EF5759D8;
  return result;
}

void std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_1,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_1>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_0,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_0>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsTextureAtlasUpdate", "", v1, 2u);
  }
}

void std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_0,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF575990;
}

void *std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_0,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_0>,void ()(void)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1EF575990;
  return result;
}

void std::__function::__func<md::LabelTextureAtlasStore::startFrame(void)::$_0,std::allocator<md::LabelTextureAtlasStore::startFrame(void)::$_0>,void ()(void)>::~__func()
{
}

uint64_t md::LabelTextureAtlasStore::debugString(md::LabelTextureAtlasStore *this, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"TextureAtlases: ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)":", 1);
  (*(void (**)(void **__return_ptr))(**(void **)(a2 + 8) + 48))(&__p);
  if ((v20 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v6 = v20;
  }
  else {
    uint64_t v6 = v19;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
  if ((char)v20 < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  unint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)":", 1);
  (*(void (**)(void **__return_ptr))(**(void **)(a2 + 16) + 48))(&__p);
  if ((v20 & 0x80u) == 0) {
    unint64_t v8 = &__p;
  }
  else {
    unint64_t v8 = __p;
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v9 = v20;
  }
  else {
    uint64_t v9 = v19;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  if ((char)v20 < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  if ((v28 & 0x10) != 0)
  {
    unint64_t v11 = v27;
    if (v27 < v24)
    {
      unint64_t v27 = v24;
      unint64_t v11 = v24;
    }
    uint64_t v12 = (const void **)&v23;
  }
  else
  {
    if ((v28 & 8) == 0)
    {
      size_t v10 = 0;
      *((unsigned char *)this + 23) = 0;
      goto LABEL_32;
    }
    uint64_t v12 = (const void **)v22;
    unint64_t v11 = v22[2];
  }
  unint64_t v13 = *v12;
  size_t v10 = v11 - (void)*v12;
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v10 >= 0x17)
  {
    uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v14 = v10 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v16 = (md::LabelTextureAtlasStore *)operator new(v14 + 1);
    *((void *)this + 1) = v10;
    *((void *)this + 2) = v15 | 0x8000000000000000;
    *(void *)this = v16;
    this = v16;
    goto LABEL_31;
  }
  *((unsigned char *)this + 23) = v10;
  if (v10) {
LABEL_31:
  }
    memmove(this, v13, v10);
LABEL_32:
  *((unsigned char *)this + v10) = 0;
  v21[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v26 < 0) {
    operator delete(v25);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v29);
}

void sub_1A220F3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

os_log_t __GEOGetVectorKitVKMuninLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "VKMunin");
  GEOGetVectorKitVKMuninLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetVectorKitVKNavCameraLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "VKNavCamera");
  GEOGetVectorKitVKNavCameraLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetVectorKitARAnimationLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "ARAnimation");
  GEOGetVectorKitARAnimationLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetVectorKitDrapingFallbackLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "DrapingFallback");
  GEOGetVectorKitDrapingFallbackLog_log = (uint64_t)result;
  return result;
}

os_log_t __GEOGetVectorKitStreamingPOILog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit", "StreamingPOI");
  GEOGetVectorKitStreamingPOILog_log = (uint64_t)result;
  return result;
}

size_t geo::MallocZoneAllocator::allocationSize(malloc_zone_t **this)
{
  malloc_zone_statistics(this[6], &v2);
  return v2.size_allocated;
}

{
  malloc_statistics_t v2;

  malloc_zone_statistics(this[6], &v2);
  return v2.size_allocated;
}

unint64_t geo::MallocZoneAllocator::allocationCount(geo::MallocZoneAllocator *this)
{
  malloc_statistics_t v2 = (pthread_rwlock_t *)((char *)this + 56);
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 56));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"read lock", v4);
  }
  unint64_t v5 = atomic_load((unint64_t *)this + 5);
  uint64_t v6 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if (v6) {
    geo::read_write_lock::logFailure(v6, (uint64_t)"unlock", v7);
  }
  return v5;
}

{
  pthread_rwlock_t *v2;
  unint64_t v3;

  malloc_statistics_t v2 = (pthread_rwlock_t *)((char *)this + 56);
  geo::read_write_lock::read_lock((pthread_rwlock_t *)((char *)this + 56));
  uint64_t v3 = atomic_load((unint64_t *)this + 5);
  geo::read_write_lock::unlock(v2);
  return v3;
}

void geo::MallocZoneAllocator::reset(geo::MallocZoneAllocator *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  malloc_statistics_t v2 = (pthread_rwlock_t *)((char *)this + 56);
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 56));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  }
  if (atomic_load((unint64_t *)this + 5))
  {
    uint64_t v6 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
    if (v6) {
      geo::read_write_lock::logFailure(v6, (uint64_t)"unlock", v7);
    }
    unint64_t v8 = (geo::read_write_lock *)pthread_rwlock_rdlock(v2);
    if (v8) {
      geo::read_write_lock::logFailure(v8, (uint64_t)"read lock", v9);
    }
    size_t v10 = *((void *)this + 32);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      unint64_t v11 = *((void *)this + 3);
      int v20 = 136315138;
      unint64_t v21 = v11;
      _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_INFO, "BasicAllocationTracker(%s)", (uint8_t *)&v20, 0xCu);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      unint64_t v12 = atomic_load((unint64_t *)this + 5);
      int v20 = 134217984;
      unint64_t v21 = v12;
      _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_INFO, "\tCount: %zu", (uint8_t *)&v20, 0xCu);
    }
    unint64_t v13 = *((void *)this + 32);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      unint64_t v19 = atomic_load((unint64_t *)this + 5);
      int v20 = 134217984;
      unint64_t v21 = v19;
      _os_log_error_impl(&dword_1A1780000, v13, OS_LOG_TYPE_ERROR, "Resetting zone allocator with %lu allocations still alive", (uint8_t *)&v20, 0xCu);
    }
    uint64_t v14 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
    if (v14) {
      geo::read_write_lock::logFailure(v14, (uint64_t)"unlock", v15);
    }
  }
  else
  {
    malloc_destroy_zone(*((malloc_zone_t **)this + 6));
    zone = malloc_create_zone(0, 0);
    *((void *)this + 6) = zone;
    malloc_set_zone_name(zone, *((const char **)this + 1));
    atomic_store(0, (unint64_t *)this + 5);
    uint64_t v17 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
    if (v17)
    {
      geo::read_write_lock::logFailure(v17, (uint64_t)"unlock", v18);
    }
  }
}

{
  pthread_rwlock_t *v2;
  NSObject *v4;
  malloc_zone_t *zone;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  malloc_statistics_t v2 = (pthread_rwlock_t *)((char *)this + 56);
  geo::read_write_lock::write_lock((pthread_rwlock_t *)((char *)this + 56));
  if (atomic_load((unint64_t *)this + 5))
  {
    geo::read_write_lock::unlock(v2);
    geo::read_write_lock::read_lock(v2);
    geo::BasicAllocationTracker::debugInfo((geo::MallocZoneAllocator *)((char *)this + 24), *((os_log_t *)this + 32));
    uint64_t v4 = *((void *)this + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = atomic_load((unint64_t *)this + 5);
      unint64_t v7 = 134217984;
      unint64_t v8 = v6;
      _os_log_error_impl(&dword_1A1780000, v4, OS_LOG_TYPE_ERROR, "Resetting zone allocator with %lu allocations still alive", (uint8_t *)&v7, 0xCu);
    }
    geo::read_write_lock::unlock(v2);
  }
  else
  {
    malloc_destroy_zone(*((malloc_zone_t **)this + 6));
    zone = malloc_create_zone(0, 0);
    *((void *)this + 6) = zone;
    malloc_set_zone_name(zone, *((const char **)this + 1));
    atomic_store(0, (unint64_t *)this + 5);
    geo::read_write_lock::unlock(v2);
  }
}

void *geo::MallocZoneAllocator::reallocate(geo::MallocZoneAllocator *this, void *a2, size_t a3)
{
  uint64_t v6 = (pthread_rwlock_t *)((char *)this + 56);
  unint64_t v7 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 56));
  if (v7) {
    geo::read_write_lock::logFailure(v7, (uint64_t)"read lock", v8);
  }
  if (a2) {
    atomic_fetch_add((atomic_ullong *volatile)this + 5, 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v9 = malloc_type_zone_realloc(*((malloc_zone_t **)this + 6), a2, a3, 0x975057C8uLL);
  atomic_fetch_add((atomic_ullong *volatile)this + 5, 1uLL);
  size_t v10 = (geo::read_write_lock *)pthread_rwlock_unlock(v6);
  if (v10) {
    geo::read_write_lock::logFailure(v10, (uint64_t)"unlock", v11);
  }
  return v9;
}

{
  pthread_rwlock_t *v6;
  void *v7;

  uint64_t v6 = (pthread_rwlock_t *)((char *)this + 56);
  geo::read_write_lock::read_lock((pthread_rwlock_t *)((char *)this + 56));
  if (a2) {
    atomic_fetch_add((atomic_ullong *volatile)this + 5, 0xFFFFFFFFFFFFFFFFLL);
  }
  unint64_t v7 = malloc_type_zone_realloc(*((malloc_zone_t **)this + 6), a2, a3, 0x975057C8uLL);
  atomic_fetch_add((atomic_ullong *volatile)this + 5, 1uLL);
  geo::read_write_lock::unlock(v6);
  return v7;
}

void geo::MallocZoneAllocator::~MallocZoneAllocator(geo::MallocZoneAllocator *this)
{
  geo::MallocZoneAllocator::~MallocZoneAllocator(this);
  JUMPOUT(0x1A6239270);
}

{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  NSObject *v6;
  unint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  geo::read_write_lock *v10;
  const char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EF55A110;
  malloc_statistics_t v2 = (pthread_rwlock_t *)((char *)this + 56);
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 56));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  }
  if (atomic_load((unint64_t *)this + 5))
  {
    uint64_t v6 = *((void *)this + 32);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      unint64_t v7 = atomic_load((unint64_t *)this + 5);
      unint64_t v12 = 134217984;
      unint64_t v13 = v7;
      _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_INFO, "Destroying zone allocator with %lu allocations still alive", (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    malloc_destroy_zone(*((malloc_zone_t **)this + 6));
  }
  os_release(*((void **)this + 32));
  unint64_t v8 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if (v8) {
    geo::read_write_lock::logFailure(v8, (uint64_t)"unlock", v9);
  }
  size_t v10 = (geo::read_write_lock *)pthread_rwlock_destroy(v2);
  if (v10) {
    geo::read_write_lock::logFailure(v10, (uint64_t)"destruction", v11);
  }
}

{
  uint64_t vars8;

  geo::MallocZoneAllocator::~MallocZoneAllocator(this);
  JUMPOUT(0x1A6239270);
}

{
  pthread_rwlock_t *v2;
  NSObject *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;

  unint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EF55A168;
  malloc_statistics_t v2 = (pthread_rwlock_t *)((char *)this + 56);
  geo::read_write_lock::write_lock((pthread_rwlock_t *)((char *)this + 56));
  if (atomic_load((unint64_t *)this + 5))
  {
    uint64_t v4 = *((void *)this + 32);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      unint64_t v5 = atomic_load((unint64_t *)this + 5);
      uint64_t v6 = 134217984;
      unint64_t v7 = v5;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "Destroying zone allocator with %lu allocations still alive", (uint8_t *)&v6, 0xCu);
    }
  }
  else
  {
    malloc_destroy_zone(*((malloc_zone_t **)this + 6));
  }
  os_release(*((void **)this + 32));
  geo::read_write_lock::unlock(v2);
  geo::read_write_lock::~read_write_lock(v2);
}

uint64_t std::__shared_ptr_emplace<ggl::SolidRibbon::PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::SolidRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5835B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::SolidRibbon::PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5835B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::TransitLineRibbon::PatternedBasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TransitLineRibbon::PatternedBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TransitLineRibbon::PatternedBasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::TransitLineRibbon::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TransitLineRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TransitLineRibbon::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::LabelLayoutContext::coordinateEyePos(md::LabelLayoutContext *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    md::LabelLayoutContext::mercatorEyePos((md::LabelLayoutContext *)a2);
    double v4 = v3;
    long double v6 = v5 * 6.28318531;
    long double v8 = exp(v7 * 6.28318531 + -3.14159265);
    double v9 = atan(v8);
    long double v10 = fmod(v6, 6.28318531);
    double v11 = fmod(v10 + 6.28318531, 6.28318531) * 57.2957795 + -180.0;
    double v12 = v9 * 114.591559 + -90.0;
  }
  else
  {
    long double v13 = *(double *)(a2 + 136);
    long double v14 = *(double *)(a2 + 144);
    long double v15 = *(double *)(a2 + 152);
    double v16 = sqrt(v13 * v13 + v14 * v14);
    double v17 = atan2(v15, v16 * 0.996647189);
    double v18 = atan2(v14, v13);
    __double2 v19 = __sincos_stret(v17);
    double v20 = atan2(v15 + v19.__sinval * v19.__sinval * 42841.3115 * v19.__sinval, v16 + v19.__cosval * v19.__cosval * -42697.6727 * v19.__cosval);
    __double2 v21 = __sincos_stret(v20);
    double v4 = v16 / v21.__cosval + -6378137.0 / sqrt(v21.__sinval * v21.__sinval * -0.00669437999 + 1.0);
    double v12 = v20 * 57.2957795;
    double v11 = v18 * 57.2957795;
  }
  *(double *)this = v12;
  *((double *)this + 1) = v11;
  *((double *)this + 2) = v4;
}

void md::LabelLayoutContext::mercatorEyePos(md::LabelLayoutContext *this)
{
  if (!*((unsigned char *)this + 8))
  {
    long double v1 = *((double *)this + 17);
    long double v2 = *((double *)this + 18);
    long double v3 = *((double *)this + 19);
    double v4 = sqrt(v1 * v1 + v2 * v2);
    double v5 = atan2(v3, v4 * 0.996647189);
    atan2(v2, v1);
    __double2 v6 = __sincos_stret(v5);
    double v7 = atan2(v3 + v6.__sinval * v6.__sinval * 42841.3115 * v6.__sinval, v4 + v6.__cosval * v6.__cosval * -42697.6727 * v6.__cosval);
    __sincos_stret(v7);
    long double v8 = tan(v7 * 0.5 + 0.785398163);
    log(v8);
  }
}

BOOL md::LabelLayoutContext::isDistanceClipped(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 18))
  {
    double v2 = *(double *)a2;
    if (*(unsigned char *)(a1 + 15))
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      float64x2_t v4 = vmulq_f64(*(float64x2_t *)(a2 + 8), *(float64x2_t *)(a1 + 168));
      uint64_t v3 = 1;
      if (v4.f64[0] + v2 * *(double *)(a1 + 160) + v4.f64[1] > *(double *)(a1 + 288)) {
        return v3;
      }
    }
  }
  else
  {
    double v2 = *(double *)a2;
    LOBYTE(v3) = *(unsigned char *)(a1 + 15) == 0;
  }
  double v5 = v2 - *(double *)(a1 + 136);
  double v6 = *(double *)(a2 + 8) - *(double *)(a1 + 144);
  double v7 = *(double *)(a2 + 16) - *(double *)(a1 + 152);
  if (v3)
  {
    double v8 = *(double *)(a1 + 160) * v5 + *(double *)(a1 + 168) * v6 + *(double *)(a1 + 176) * v7;
    if (!*(unsigned char *)(a1 + 1273)) {
      goto LABEL_14;
    }
  }
  else
  {
    double v8 = sqrt(v5 * v5 + v6 * v6 + v7 * v7);
    if (!*(unsigned char *)(a1 + 1273))
    {
LABEL_14:
      if (v8 < *(double *)(a1 + 272)) {
        return 1;
      }
      return v8 > *(double *)(a1 + 280);
    }
  }
  float v9 = *(float *)(a1 + 1276);
  float v10 = *(float *)(a1 + 1280);
  if (v9 <= v10) {
    goto LABEL_14;
  }
  double v11 = *(double *)(a1 + 256);
  double v12 = v11 * v10 / v9;
  return v8 > v12 + v11 || v8 < v11 - v12;
}

void md::LabelNavLayoutContext::grabStateFromContext(md::LabelNavLayoutContext *this, md::LabelManager *a2, const md::LabelLayoutContext *a3, const md::LayoutContext *a4)
{
  double v8 = (void *)*((void *)a4 + 1);
  int8x8_t v9 = (int8x8_t)v8[1];
  if (!*(void *)&v9) {
    goto LABEL_24;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x1AF456233693CD46;
    if (*(void *)&v9 <= 0x1AF456233693CD46uLL) {
      uint64_t v11 = 0x1AF456233693CD46uLL % *(void *)&v9;
    }
  }
  else
  {
    uint64_t v11 = (*(void *)&v9 - 1) & 0x1AF456233693CD46;
  }
  double v12 = *(void **)(*v8 + 8 * v11);
  if (!v12) {
    goto LABEL_24;
  }
  long double v13 = (void *)*v12;
  if (!v13) {
    goto LABEL_24;
  }
  if (v10.u32[0] < 2uLL)
  {
    uint64_t v14 = *(void *)&v9 - 1;
    while (1)
    {
      uint64_t v16 = v13[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v13[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_24;
      }
      long double v13 = (void *)*v13;
      if (!v13) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v13[1];
    if (v15 == 0x1AF456233693CD46) {
      break;
    }
    if (v15 >= *(void *)&v9) {
      v15 %= *(void *)&v9;
    }
    if (v15 != v11) {
      goto LABEL_24;
    }
LABEL_11:
    long double v13 = (void *)*v13;
    if (!v13) {
      goto LABEL_24;
    }
  }
  if (v13[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v17 = v13[5];
  if (*(void *)(v17 + 8) == 0x1AF456233693CD46)
  {
    double v18 = *(double **)(v17 + 32);
    goto LABEL_25;
  }
LABEL_24:
  double v18 = 0;
LABEL_25:
  *((_DWORD *)this + 30) = *((_DWORD *)a3 + 310);
  double v19 = *((double *)a3 + 156);
  double v20 = *((double *)a3 + 157);
  double v21 = *((double *)a3 + 158);
  *((double *)this + 12) = v19;
  *((double *)this + 13) = v20;
  *((double *)this + 14) = v21;
  *(float *)&double v19 = (*((double *)a3 + 120)
                  + *((double *)a3 + 108) * v19
                  + *((double *)a3 + 112) * v20
                  + *((double *)a3 + 116) * v21)
                 / (*((double *)a3 + 123)
                  + *((double *)a3 + 111) * v19
                  + *((double *)a3 + 115) * v20
                  + *((double *)a3 + 119) * v21);
  *((_DWORD *)this + 31) = LODWORD(v19);
  *((float *)this + 32) = *((float *)a2 + 44) * *(float *)(md::LayoutContext::frameState(a4) + 40);
  float v22 = *((float *)a2 + 44) * *(float *)(md::LayoutContext::frameState(a4) + 32);
  float v23 = *((float *)a2 + 44) * *(float *)(md::LayoutContext::frameState(a4) + 36);
  float v24 = *((float *)a2 + 44) * *(float *)(md::LayoutContext::frameState(a4) + 40);
  float v25 = *((float *)a3 + 266) - (float)(*((float *)a2 + 44) * *(float *)(md::LayoutContext::frameState(a4) + 44));
  float v26 = *((float *)a3 + 267) - v22;
  *((float *)this + 8) = v23;
  *((float *)this + 9) = v24;
  *((float *)this + 10) = v25;
  *((float *)this + 11) = v26;
  int v27 = *((_DWORD *)a3 + 266);
  float v28 = *((float *)a3 + 267) - v22;
  *((_DWORD *)this + 12) = 0;
  *((float *)this + 13) = v24;
  *((_DWORD *)this + 14) = v27;
  *((float *)this + 15) = v28;
  float v29 = *((float *)a3 + 267);
  int v30 = *((_DWORD *)a3 + 266);
  *((_DWORD *)this + 20) = 0;
  *((float *)this + 21) = v29 - v24;
  *((_DWORD *)this + 22) = v30;
  *((float *)this + 23) = v29;
  if (*((unsigned char *)a3 + 8))
  {
    *(double *)this = v18[366];
    *((double *)this + 1) = v18[367];
    *((double *)this + 2) = v18[368];
    double v31 = v18[369];
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0x3FF0000000000000;
    double v31 = 1.0;
  }
  *((double *)this + 3) = v31;
  uint64_t v32 = *((void *)a4 + 4);
  uint64_t v33 = (std::__shared_weak_count *)*((void *)a4 + 5);
  if (v33)
  {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)this + 17) = *(void *)(v32 + 64);
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  else
  {
    *((void *)this + 17) = *(void *)(v32 + 64);
  }
  uint64_t v34 = (void *)*((void *)a4 + 1);
  int8x8_t v35 = (int8x8_t)v34[1];
  if (!*(void *)&v35) {
    goto LABEL_55;
  }
  uint8x8_t v36 = (uint8x8_t)vcnt_s8(v35);
  v36.i16[0] = vaddlv_u8(v36);
  if (v36.u32[0] > 1uLL)
  {
    uint64_t v37 = 0x63B6FE00C0848868;
    if (*(void *)&v35 <= 0x63B6FE00C0848868uLL) {
      uint64_t v37 = 0x63B6FE00C0848868uLL % *(void *)&v35;
    }
  }
  else
  {
    uint64_t v37 = (*(void *)&v35 - 1) & 0x63B6FE00C0848868;
  }
  uint64_t v38 = *(void **)(*v34 + 8 * v37);
  if (!v38) {
    goto LABEL_55;
  }
  uint64_t v39 = (void *)*v38;
  if (!v39) {
    goto LABEL_55;
  }
  if (v36.u32[0] < 2uLL)
  {
    uint64_t v40 = *(void *)&v35 - 1;
    while (1)
    {
      uint64_t v42 = v39[1];
      if (v42 == 0x63B6FE00C0848868)
      {
        if (v39[2] == 0x63B6FE00C0848868) {
          goto LABEL_53;
        }
      }
      else if ((v42 & v40) != v37)
      {
        goto LABEL_55;
      }
      uint64_t v39 = (void *)*v39;
      if (!v39) {
        goto LABEL_55;
      }
    }
  }
  while (2)
  {
    unint64_t v41 = v39[1];
    if (v41 != 0x63B6FE00C0848868)
    {
      if (v41 >= *(void *)&v35) {
        v41 %= *(void *)&v35;
      }
      if (v41 != v37) {
        goto LABEL_55;
      }
      goto LABEL_42;
    }
    if (v39[2] != 0x63B6FE00C0848868)
    {
LABEL_42:
      uint64_t v39 = (void *)*v39;
      if (!v39) {
        goto LABEL_55;
      }
      continue;
    }
    break;
  }
LABEL_53:
  uint64_t v43 = v39[5];
  if (*(void *)(v43 + 8) == 0x63B6FE00C0848868)
  {
    uint64_t v44 = *(void *)(v43 + 32);
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v44 = 0;
LABEL_56:
  *((void *)this + 18) = v44;
  *((unsigned char *)this + 216) = *((unsigned char *)a3 + 8) ^ 1;
  *((unsigned char *)this + 217) = *((unsigned char *)a3 + 24);
  *((unsigned char *)this + 218) = GEOConfigGetBOOL();
  uint64_t v45 = [MEMORY[0x1E4F64918] modernManager];
  uint64_t v46 = [v45 activeTileGroup];
  unint64_t v47 = [v46 activeTileSetForTileType:92 scale:1];
  *((unsigned char *)this + 219) = v47 != 0;

  uint64_t v48 = (uint64_t *)*((void *)a4 + 1);
  int8x8_t v49 = (int8x8_t)v48[1];
  if (!*(void *)&v49)
  {
    *((unsigned char *)this + 220) = 4;
    goto LABEL_105;
  }
  uint8x8_t v50 = (uint8x8_t)vcnt_s8(v49);
  v50.i16[0] = vaddlv_u8(v50);
  if (v50.u32[0] > 1uLL)
  {
    unint64_t v51 = 0xE42D19AFCA302E68;
    if (*(void *)&v49 <= 0xE42D19AFCA302E68) {
      unint64_t v51 = 0xE42D19AFCA302E68 % *(void *)&v49;
    }
  }
  else
  {
    unint64_t v51 = (*(void *)&v49 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v52 = *v48;
  int v53 = *(void **)(v52 + 8 * v51);
  if (!v53) {
    goto LABEL_81;
  }
  int v54 = (void *)*v53;
  if (!v54) {
    goto LABEL_81;
  }
  if (v50.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v56 = v54[1];
      if (v56 == 0xE42D19AFCA302E68)
      {
        if (v54[2] == 0xE42D19AFCA302E68) {
          goto LABEL_78;
        }
      }
      else if ((v56 & (*(void *)&v49 - 1)) != v51)
      {
        goto LABEL_81;
      }
      int v54 = (void *)*v54;
      if (!v54) {
        goto LABEL_81;
      }
    }
  }
  while (2)
  {
    unint64_t v55 = v54[1];
    if (v55 != 0xE42D19AFCA302E68)
    {
      if (v55 >= *(void *)&v49) {
        v55 %= *(void *)&v49;
      }
      if (v55 != v51) {
        goto LABEL_81;
      }
      goto LABEL_67;
    }
    if (v54[2] != 0xE42D19AFCA302E68)
    {
LABEL_67:
      int v54 = (void *)*v54;
      if (!v54) {
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
LABEL_78:
  uint64_t v57 = v54[5];
  if (*(void *)(v57 + 8) == 0xE42D19AFCA302E68)
  {
    uint64_t v58 = *(void *)(v57 + 32);
    if (v58)
    {
      char v59 = *(unsigned char *)(v58 + 112);
      goto LABEL_82;
    }
  }
LABEL_81:
  char v59 = 4;
LABEL_82:
  *((unsigned char *)this + 220) = v59;
  if (v50.u32[0] > 1uLL)
  {
    unint64_t v60 = 0x8E4587A431F9C696;
    if (*(void *)&v49 <= 0x8E4587A431F9C696) {
      unint64_t v60 = 0x8E4587A431F9C696 % *(void *)&v49;
    }
  }
  else
  {
    unint64_t v60 = (*(void *)&v49 - 1) & 0x8E4587A431F9C696;
  }
  unsigned int v61 = *(void **)(v52 + 8 * v60);
  if (!v61) {
    goto LABEL_105;
  }
  unsigned int v62 = (void *)*v61;
  if (!v62) {
    goto LABEL_105;
  }
  if (v50.u32[0] < 2uLL)
  {
    uint64_t v63 = *(void *)&v49 - 1;
    while (1)
    {
      uint64_t v65 = v62[1];
      if (v65 == 0x8E4587A431F9C696)
      {
        if (v62[2] == 0x8E4587A431F9C696) {
          goto LABEL_102;
        }
      }
      else if ((v65 & v63) != v60)
      {
        goto LABEL_105;
      }
      unsigned int v62 = (void *)*v62;
      if (!v62) {
        goto LABEL_105;
      }
    }
  }
  while (2)
  {
    unint64_t v64 = v62[1];
    if (v64 != 0x8E4587A431F9C696)
    {
      if (v64 >= *(void *)&v49) {
        v64 %= *(void *)&v49;
      }
      if (v64 != v60) {
        goto LABEL_105;
      }
      goto LABEL_91;
    }
    if (v62[2] != 0x8E4587A431F9C696)
    {
LABEL_91:
      unsigned int v62 = (void *)*v62;
      if (!v62) {
        goto LABEL_105;
      }
      continue;
    }
    break;
  }
LABEL_102:
  uint64_t v66 = v62[5];
  if (*(void *)(v66 + 8) == 0x8E4587A431F9C696)
  {
    uint64_t v67 = *(void *)(v66 + 32);
    if (v67)
    {
      md::RouteElevationSourceContext::RouteElevationSourceContext((md::RouteElevationSourceContext *)v86, (const md::RouteElevationSourceContext *)(v67 + 8));
      goto LABEL_106;
    }
  }
LABEL_105:
  *(_OWORD *)unsigned int v86 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v88 = 1065353216;
  float v90 = 0;
  uint64_t v91 = 0;
  float v89 = &v90;
LABEL_106:
  if (*((void *)this + 22))
  {
    float v68 = (void *)*((void *)this + 21);
    while (v68)
    {
      float v69 = v68;
      float v68 = (void *)*v68;
      char v70 = (std::__shared_weak_count *)v69[6];
      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
      operator delete(v69);
    }
    *((void *)this + 21) = 0;
    uint64_t v71 = *((void *)this + 20);
    if (v71)
    {
      for (uint64_t i = 0; i != v71; ++i)
        *(void *)(*((void *)this + 19) + 8 * i) = 0;
    }
    *((void *)this + 22) = 0;
  }
  float v73 = v86[0];
  v86[0] = 0;
  uint64_t v74 = (void *)*((void *)this + 19);
  *((void *)this + 19) = v73;
  if (v74) {
    operator delete(v74);
  }
  unint64_t v75 = (unint64_t)v86[1];
  uint64_t v76 = __p[0];
  *((void **)this + 21) = __p[0];
  *((void *)this + 20) = v75;
  v86[1] = 0;
  float v77 = __p[1];
  *((void **)this + 22) = __p[1];
  *((_DWORD *)this + 46) = v88;
  if (v77)
  {
    unint64_t v78 = v76[1];
    if ((v75 & (v75 - 1)) != 0)
    {
      if (v78 >= v75) {
        v78 %= v75;
      }
    }
    else
    {
      v78 &= v75 - 1;
    }
    *(void *)(*((void *)this + 19) + 8 * v78) = (char *)this + 168;
    __p[0] = 0;
    __p[1] = 0;
  }
  BOOL v79 = (char *)this + 200;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 25));
  uint64_t v80 = v90;
  *((void *)this + 24) = v89;
  *((void *)this + 25) = v80;
  uint64_t v81 = v91;
  *((void *)this + 26) = v91;
  if (v81)
  {
    v80[2] = v79;
    float v89 = &v90;
    float v90 = 0;
    uint64_t v91 = 0;
    uint64_t v80 = 0;
  }
  else
  {
    *((void *)this + 24) = v79;
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v80);
  char v82 = __p[0];
  if (__p[0])
  {
    do
    {
      float v83 = v82;
      char v82 = (void *)*v82;
      double v84 = (std::__shared_weak_count *)v83[6];
      if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
      operator delete(v83);
    }
    while (v82);
  }
  float v85 = v86[0];
  v86[0] = 0;
  if (v85) {
    operator delete(v85);
  }
}

void sub_1A2210848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float ___ZN2md15FadeEffectBlock3runEPNS_15AnimationRunnerE_block_invoke(uint64_t a1, float a2)
{
  float result = 1.0 - a2;
  **(float **)(a1 + 32) = result;
  return result;
}

void md::TransitTileData::~TransitTileData(md::TransitTileData *this)
{
  md::TransitTileData::~TransitTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  uint64_t vars8;

  *(void *)this = &unk_1EF5357A8;
  *((void *)this + 79) = &unk_1EF5357E8;
  double v2 = (char *)*((void *)this + 118);
  uint64_t v3 = (char *)*((void *)this + 119);
  if (v2 != v3)
  {
    float64x2_t v4 = v3 - v2 - 16;
    if (v4 <= 0xF) {
      goto LABEL_7;
    }
    double v5 = (v4 >> 4) + 1;
    double v6 = (uint64_t *)(v2 + 16);
    double v7 = v5 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      double v8 = *(v6 - 2);
      int8x8_t v9 = *v6;
      v6 += 4;
      *(unsigned char *)(v8 + 64) = 2;
      *(unsigned char *)(v9 + 64) = 2;
      v7 -= 2;
    }
    while (v7);
    if (v5 != (v5 & 0x1FFFFFFFFFFFFFFELL))
    {
      v2 += 16 * (v5 & 0x1FFFFFFFFFFFFFFELL);
      do
      {
LABEL_7:
        uint8x8_t v10 = *(void *)v2;
        v2 += 16;
        *(unsigned char *)(v10 + 64) = 2;
      }
      while (v2 != v3);
    }
  }
  uint64_t v11 = (void *)*((void *)this + 159);
  if (v11)
  {
    do
    {
      uint8x8_t v36 = (void *)*v11;
      uint64_t v37 = (void *)v11[5];
      if (v37)
      {
        do
        {
          uint64_t v38 = (void *)*v37;
          operator delete(v37);
          uint64_t v37 = v38;
        }
        while (v38);
      }
      uint64_t v39 = (void *)v11[3];
      v11[3] = 0;
      if (v39) {
        operator delete(v39);
      }
      operator delete(v11);
      uint64_t v11 = v36;
    }
    while (v36);
  }
  double v12 = (void *)*((void *)this + 157);
  *((void *)this + 157) = 0;
  if (v12) {
    operator delete(v12);
  }
  long double v13 = (std::__shared_weak_count *)*((void *)this + 155);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *((void *)this + 152);
  *((void *)this + 152) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::destroy(*((void **)this + 150));
  unint64_t v15 = (std::__shared_weak_count *)*((void *)this + 148);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 146);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 144);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  double v18 = (std::__shared_weak_count *)*((void *)this + 142);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  double v19 = *((void *)this + 140);
  *((void *)this + 140) = 0;
  if (v19)
  {
    double v20 = *(void *)(v19 + 40);
    *(void *)(v19 + 40) = 0;
    if (v20) {
      MEMORY[0x1A6239270](v20, 0x1000C40451B5BE8);
    }
    double v21 = *(void *)(v19 + 24);
    *(void *)(v19 + 24) = 0;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    float v22 = *(void **)v19;
    if (*(void *)v19)
    {
      *(void *)(v19 + 8) = v22;
      operator delete(v22);
    }
    MEMORY[0x1A6239270](v19, 0x1020C4024962473);
  }
  float v23 = *((void *)this + 139);
  *((void *)this + 139) = 0;
  if (v23)
  {
    float v24 = *(void *)(v23 + 40);
    *(void *)(v23 + 40) = 0;
    if (v24) {
      MEMORY[0x1A6239270](v24, 0x1000C40451B5BE8);
    }
    float v25 = *(void *)(v23 + 24);
    *(void *)(v23 + 24) = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    float v26 = *(void **)v23;
    if (*(void *)v23)
    {
      *(void *)(v23 + 8) = v26;
      operator delete(v26);
    }
    MEMORY[0x1A6239270](v23, 0x1020C4024962473);
  }
  int v27 = *((void *)this + 138);
  *((void *)this + 138) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  float v28 = *((void *)this + 137);
  *((void *)this + 137) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  float v29 = *((void *)this + 136);
  *((void *)this + 136) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  int v30 = *((void *)this + 135);
  *((void *)this + 135) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  double v31 = *((void *)this + 134);
  *((void *)this + 134) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *((void *)this + 133);
  *((void *)this + 133) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = *((void *)this + 130);
  if (v33)
  {
    uint64_t v34 = *((void *)this + 131);
    int8x8_t v35 = (void *)*((void *)this + 130);
    if (v34 != v33)
    {
      do
      {
        uint64_t v40 = *(std::__shared_weak_count **)(v34 - 8);
        if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
        v34 -= 16;
      }
      while (v34 != v33);
      int8x8_t v35 = (void *)*((void *)this + 130);
    }
    *((void *)this + 131) = v33;
    operator delete(v35);
  }
  unint64_t v41 = *((void *)this + 127);
  if (v41)
  {
    uint64_t v42 = *((void *)this + 128);
    uint64_t v43 = (void *)*((void *)this + 127);
    if (v42 != v41)
    {
      do
      {
        uint64_t v44 = *(std::__shared_weak_count **)(v42 - 8);
        if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
        v42 -= 16;
      }
      while (v42 != v41);
      uint64_t v43 = (void *)*((void *)this + 127);
    }
    *((void *)this + 128) = v41;
    operator delete(v43);
  }
  uint64_t v45 = *((void *)this + 124);
  if (v45)
  {
    uint64_t v46 = *((void *)this + 125);
    unint64_t v47 = (void *)*((void *)this + 124);
    if (v46 != v45)
    {
      do
      {
        uint64_t v48 = *(std::__shared_weak_count **)(v46 - 8);
        if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        v46 -= 16;
      }
      while (v46 != v45);
      unint64_t v47 = (void *)*((void *)this + 124);
    }
    *((void *)this + 125) = v45;
    operator delete(v47);
  }
  int8x8_t v49 = *((void *)this + 121);
  if (v49)
  {
    uint8x8_t v50 = *((void *)this + 122);
    unint64_t v51 = (void *)*((void *)this + 121);
    if (v50 != v49)
    {
      do
      {
        uint64_t v52 = *(std::__shared_weak_count **)(v50 - 8);
        if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
        v50 -= 16;
      }
      while (v50 != v49);
      unint64_t v51 = (void *)*((void *)this + 121);
    }
    *((void *)this + 122) = v49;
    operator delete(v51);
  }
  int v53 = *((void *)this + 118);
  if (v53)
  {
    int v54 = *((void *)this + 119);
    unint64_t v55 = (void *)*((void *)this + 118);
    if (v54 != v53)
    {
      do
      {
        uint64_t v56 = *(std::__shared_weak_count **)(v54 - 8);
        if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
        v54 -= 16;
      }
      while (v54 != v53);
      unint64_t v55 = (void *)*((void *)this + 118);
    }
    *((void *)this + 119) = v53;
    operator delete(v55);
  }
  uint64_t v57 = *((void *)this + 117);
  *((void *)this + 117) = 0;
  if (v57)
  {
    uint64_t v58 = *(void **)(v57 + 16);
    if (v58)
    {
      do
      {
        char v59 = (void *)*v58;
        md::TransitJunction::~TransitJunction((md::TransitJunction *)(v58 + 3));
        operator delete(v58);
        uint64_t v58 = v59;
      }
      while (v59);
    }
    unint64_t v60 = *(void **)v57;
    *(void *)uint64_t v57 = 0;
    if (v60) {
      operator delete(v60);
    }
    MEMORY[0x1A6239270](v57, 0x10A0C408EF24B1CLL);
  }
  std::__list_imp<md::TransitDisplayConnection>::clear((uint64_t *)this + 114);
  unsigned int v61 = *((void *)this + 111);
  if (v61)
  {
    unsigned int v62 = *((void *)this + 112);
    uint64_t v63 = (void *)*((void *)this + 111);
    if (v62 != v61)
    {
      do
        md::TransitLink::~TransitLink((md::TransitLink *)(v62 - 248));
      while (v62 != v61);
      uint64_t v63 = (void *)*((void *)this + 111);
    }
    *((void *)this + 112) = v61;
    operator delete(v63);
  }
  unint64_t v64 = *((void *)this + 108);
  if (v64)
  {
    uint64_t v65 = *((void *)this + 109);
    uint64_t v66 = (void *)*((void *)this + 108);
    if (v65 != v64)
    {
      do
        md::TransitLine::~TransitLine((md::TransitLine *)(v65 - 104));
      while (v65 != v64);
      uint64_t v66 = (void *)*((void *)this + 108);
    }
    *((void *)this + 109) = v64;
    operator delete(v66);
  }
  uint64_t v67 = (std::__shared_weak_count *)*((void *)this + 107);
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
  }
  float v68 = (std::__shared_weak_count *)*((void *)this + 105);
  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
  float v69 = (std::__shared_weak_count *)*((void *)this + 103);
  if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
  }
  char v70 = (std::__shared_weak_count *)*((void *)this + 101);
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
  uint64_t v71 = (std::__shared_weak_count *)*((void *)this + 99);
  if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
  }
  *((void *)this + 94) = &unk_1EF559798;

  float v72 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
  }
  float v73 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  md::MapTileData::~MapTileData(this);
}

void std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::destroy(*a1);
    std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::destroy(a1[1]);
    double v2 = (std::__shared_weak_count *)a1[11];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = (std::__shared_weak_count *)a1[9];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    float64x2_t v4 = (std::__shared_weak_count *)a1[7];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(a1);
  }
}

void md::TransitJunction::~TransitJunction(md::TransitJunction *this)
{
  double v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      double v2 = v3;
    }
    while (v3);
  }
  float64x2_t v4 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v4) {
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 18);
  if (v5)
  {
    do
    {
      double v6 = (void *)*v5;
      operator delete(v5);
      double v5 = v6;
    }
    while (v6);
  }
  double v7 = (void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v7) {
    operator delete(v7);
  }
  double v8 = (void *)*((void *)this + 13);
  if (v8)
  {
    do
    {
      int8x8_t v9 = (void *)*v8;
      operator delete(v8);
      double v8 = v9;
    }
    while (v9);
  }
  uint8x8_t v10 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v10) {
    operator delete(v10);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 7));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 4));
}

void std::__list_imp<md::TransitDisplayConnection>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        double v5 = (uint64_t *)v3[1];
        uint64_t v6 = v3[8];
        v3[8] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        uint64_t v7 = v3[7];
        v3[7] = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        double v8 = (std::__shared_weak_count *)v3[4];
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void md::TransitLine::~TransitLine(md::TransitLine *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 9);
    uint64_t v4 = (void *)*((void *)this + 8);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void *)(v3 - 72);
        if (v5)
        {
          *(void *)(v3 - 64) = v5;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 48) + 40))(*(void *)(v3 - 48), v5, *(void *)(v3 - 56) - v5);
        }
        uint64_t v6 = *(std::__shared_weak_count **)(v3 - 176);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v3 -= 184;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 8);
    }
    *((void *)this + 9) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void md::TransitTileData::createFeatures(geo::codec::VectorTile **this)
{
  long double v1 = this;
  v117[4] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = geo::codec::VectorTile::transitLineCount(this[90]);
  uint64_t v3 = geo::codec::VectorTile::transitLines(v1[90]);
  unint64_t v111 = v1 + 110;
  uint64_t v4 = v1[108];
  if (0x4EC4EC4EC4EC4EC5 * ((v1[110] - v4) >> 3) < v2)
  {
    if (v2 > 0x276276276276276) {
      goto LABEL_166;
    }
    uint64_t v5 = v1[109];
    float32x2_t v116 = v1 + 110;
    uint64_t v6 = (char *)operator new(104 * v2);
    uint64_t v7 = (uint64_t *)&v6[v5 - v4];
    unint64_t v113 = v6;
    unint64_t v114 = v7;
    double v8 = (geo::codec::VectorTile *)&v6[104 * v2];
    *(void *)&long long v115 = v7;
    *((void *)&v115 + 1) = v8;
    if (v5 == v4)
    {
      v1[108] = (geo::codec::VectorTile *)v7;
      v1[109] = (geo::codec::VectorTile *)v7;
      v1[110] = v8;
      if (v4) {
LABEL_8:
      }
        operator delete(v4);
    }
    else
    {
      do
      {
        uint64_t v5 = (const md::TransitLine *)((char *)v5 - 104);
        uint64_t v7 = (uint64_t *)md::TransitLine::TransitLine((md::TransitLine *)(v7 - 13), v5);
      }
      while (v5 != v4);
      uint64_t v4 = v1[108];
      int8x8_t v9 = v1[109];
      v1[108] = (geo::codec::VectorTile *)v7;
      *(_OWORD *)(v1 + 109) = v115;
      while (v9 != v4)
      {
        int8x8_t v9 = (md::TransitLine *)((char *)v9 - 104);
        md::TransitLine::~TransitLine(v9);
      }
      if (v4) {
        goto LABEL_8;
      }
    }
  }
  float v105 = (uint64_t *)v1;
  if (v2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v1 + 109;
    double v12 = (uint64_t *)v1[109];
    do
    {
      long double v13 = (uint64_t **)v1[100];
      uint64_t v14 = v1[110];
      if (v12 >= (uint64_t *)v14)
      {
        unint64_t v15 = v1[108];
        uint64_t v16 = 0x4EC4EC4EC4EC4EC5 * (((char *)v12 - (char *)v15) >> 3);
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) > 0x276276276276276) {
          goto LABEL_166;
        }
        unint64_t v18 = 0x4EC4EC4EC4EC4EC5 * ((v14 - v15) >> 3);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x13B13B13B13B13BLL) {
          unint64_t v19 = 0x276276276276276;
        }
        else {
          unint64_t v19 = v17;
        }
        float32x2_t v116 = v111;
        if (v19)
        {
          if (v19 > 0x276276276276276) {
LABEL_164:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          double v20 = (char *)operator new(104 * v19);
        }
        else
        {
          double v20 = 0;
        }
        unint64_t v113 = v20;
        unint64_t v114 = (uint64_t *)&v20[104 * v16];
        *(void *)&long long v115 = v114;
        *((void *)&v115 + 1) = &v20[104 * v19];
        long double v1 = (geo::codec::VectorTile **)v105;
        md::TransitLine::TransitLine((uint64_t)v114, v3 + 104 * v10, v13, v105[92], v105[93]);
        double v21 = (md::TransitLine *)v114;
        double v12 = v114 + 13;
        *(void *)&long long v115 = v114 + 13;
        float v22 = (const md::TransitLine *)v105[109];
        float v23 = (const md::TransitLine *)v105[108];
        if (v22 != v23)
        {
          do
          {
            float v22 = (const md::TransitLine *)((char *)v22 - 104);
            double v21 = md::TransitLine::TransitLine((md::TransitLine *)((char *)v21 - 104), v22);
          }
          while (v22 != v23);
          float v22 = (const md::TransitLine *)v105[108];
          float v24 = (md::TransitLine *)v105[109];
          v105[108] = (uint64_t)v21;
          float v25 = (uint64_t *)v115;
          *uint64_t v11 = v115;
          double v12 = v25;
          while (v24 != v22)
          {
            float v24 = (md::TransitLine *)((char *)v24 - 104);
            md::TransitLine::~TransitLine(v24);
          }
          if (!v22) {
            goto LABEL_11;
          }
LABEL_31:
          operator delete(v22);
          goto LABEL_11;
        }
        v105[108] = (uint64_t)v114;
        v105[109] = (uint64_t)v12;
        v105[110] = *((void *)&v115 + 1);
        if (v22) {
          goto LABEL_31;
        }
      }
      else
      {
        md::TransitLine::TransitLine((uint64_t)v12, v3 + 104 * v10, (uint64_t **)v1[100], (uint64_t)v1[92], (uint64_t)v1[93]);
        v12 += 13;
        *(void *)uint64_t v11 = v12;
      }
LABEL_11:
      *(void *)uint64_t v11 = v12;
      ++v10;
    }
    while (v10 != v2);
  }
  unint64_t v26 = geo::codec::VectorTile::transitLinkCount(v1[90]);
  int v27 = (uint64_t *)geo::codec::VectorTile::transitLinks(v1[90]);
  float v104 = v1 + 113;
  float v28 = v1[111];
  if (0xEF7BDEF7BDEF7BDFLL * ((v1[113] - v28) >> 3) >= v26) {
    goto LABEL_40;
  }
  if (v26 <= 0x108421084210842)
  {
    float v29 = v1[112];
    float32x2_t v116 = v1 + 113;
    int v30 = (char *)operator new(248 * v26);
    double v31 = (uint64_t *)&v30[v29 - v28];
    unint64_t v113 = v30;
    unint64_t v114 = v31;
    uint64_t v32 = (geo::codec::VectorTile *)&v30[248 * v26];
    *(void *)&long long v115 = v31;
    *((void *)&v115 + 1) = v32;
    if (v29 == v28)
    {
      v1[111] = (geo::codec::VectorTile *)v31;
      v1[112] = (geo::codec::VectorTile *)v31;
      v1[113] = v32;
      if (!v28) {
        goto LABEL_40;
      }
    }
    else
    {
      do
      {
        float v29 = (const md::TransitLink *)((char *)v29 - 248);
        double v31 = (uint64_t *)md::TransitLink::TransitLink((md::TransitLink *)(v31 - 31), v29);
      }
      while (v29 != v28);
      float v28 = v1[111];
      uint64_t v33 = v1[112];
      v1[111] = (geo::codec::VectorTile *)v31;
      *((_OWORD *)v1 + 56) = v115;
      while (v33 != v28)
      {
        uint64_t v33 = (md::TransitLink *)((char *)v33 - 248);
        md::TransitLink::~TransitLink(v33);
      }
      if (!v28) {
        goto LABEL_40;
      }
    }
    operator delete(v28);
LABEL_40:
    if (!v26) {
LABEL_159:
    }
      operator new();
    uint64_t v34 = 0;
    unint64_t v106 = v26;
    while (1)
    {
      int8x8_t v35 = (uint64_t *)v1[112];
      uint8x8_t v36 = v1[113];
      uint64_t v107 = v34;
      if (v35 < (uint64_t *)v36)
      {
        md::TransitLink::TransitLink(v35, v27);
        uint64_t v37 = (geo::codec::VectorTile *)(v35 + 31);
        v1[112] = (geo::codec::VectorTile *)(v35 + 31);
        goto LABEL_61;
      }
      uint64_t v38 = v1[111];
      unint64_t v39 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v35 - (char *)v38) >> 3);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0x108421084210842) {
        abort();
      }
      unint64_t v41 = 0xEF7BDEF7BDEF7BDFLL * ((v36 - v38) >> 3);
      if (2 * v41 > v40) {
        unint64_t v40 = 2 * v41;
      }
      if (v41 >= 0x84210842108421) {
        unint64_t v42 = 0x108421084210842;
      }
      else {
        unint64_t v42 = v40;
      }
      float32x2_t v116 = v104;
      if (v42)
      {
        if (v42 > 0x108421084210842) {
          goto LABEL_164;
        }
        uint64_t v43 = (char *)operator new(248 * v42);
        long double v1 = (geo::codec::VectorTile **)v105;
      }
      else
      {
        uint64_t v43 = 0;
      }
      unint64_t v113 = v43;
      unint64_t v114 = (uint64_t *)&v43[248 * v39];
      *(void *)&long long v115 = v114;
      *((void *)&v115 + 1) = &v43[248 * v42];
      md::TransitLink::TransitLink(v114, v27);
      uint64_t v44 = (md::TransitLink *)v114;
      uint64_t v37 = (geo::codec::VectorTile *)(v115 + 248);
      *(void *)&long long v115 = v115 + 248;
      uint64_t v45 = v1[112];
      uint64_t v46 = v1[111];
      if (v45 == v46)
      {
        v1[111] = (geo::codec::VectorTile *)v114;
        v1[112] = v37;
        v1[113] = (geo::codec::VectorTile *)*((void *)&v115 + 1);
        if (v45) {
          goto LABEL_60;
        }
      }
      else
      {
        do
        {
          uint64_t v45 = (const md::TransitLink *)((char *)v45 - 248);
          uint64_t v44 = md::TransitLink::TransitLink((md::TransitLink *)((char *)v44 - 248), v45);
        }
        while (v45 != v46);
        uint64_t v45 = v1[111];
        unint64_t v47 = v1[112];
        v1[111] = v44;
        uint64_t v48 = (geo::codec::VectorTile *)v115;
        *((_OWORD *)v1 + 56) = v115;
        uint64_t v37 = v48;
        while (v47 != v45)
        {
          unint64_t v47 = (md::TransitLink *)((char *)v47 - 248);
          md::TransitLink::~TransitLink(v47);
        }
        if (v45) {
LABEL_60:
        }
          operator delete(v45);
      }
LABEL_61:
      v1[112] = v37;
      std::string __p = (unsigned char *)geo::codec::VectorTile::transitLines(*((geo::codec::VectorTile **)v37 - 30));
      float v110 = (float *)geo::codec::VectorTile::transitLinkLineMinZoomOverrides(*((geo::codec::VectorTile **)v37 - 30));
      int8x8_t v49 = (char *)v37 - 248;
      uint8x8_t v50 = (void *)*((void *)v37 - 31);
      if (v50[4])
      {
        unint64_t v51 = 0;
        float v112 = (uint64_t *)((char *)v37 - 72);
        unint64_t v108 = (void *)((char *)v37 - 56);
        do
        {
          unint64_t v113 = 0;
          v117[0] = 0;
          geo::codec::transitLinkExtractLineInfo(v50, v51, (uint64_t *)&v113, v117);
          if (v110) {
            float v52 = v110[*(void *)(*(void *)v49 + 24) + v51];
          }
          else {
            float v52 = 0.0;
          }
          int v53 = v113;
          uint64_t v54 = v105[108];
          unint64_t v55 = operator new(0x48uLL);
          uint64_t v56 = v55;
          void *v55 = 1;
          v55[1] = v54 + v53 - __p;
          v55[2] = v49;
          *((float *)v55 + 6) = fmaxf(*(float *)(*(void *)(v54 + 8 * ((v53 - __p) >> 3) + 16) + 88), v52);
          *((_DWORD *)v55 + 7) = 0;
          v55[4] = 0;
          *((_DWORD *)v55 + 10) = -1;
          *((_DWORD *)v55 + 11) = v51;
          v55[6] = 0xFFFFFFFF00000000;
          *((_DWORD *)v55 + 14) = -1;
          *((_DWORD *)v55 + 15) = 0;
          *((unsigned char *)v55 + 64) = 0;
          *((unsigned char *)v55 + 65) = 1;
          unint64_t v58 = *((void *)v37 - 20);
          unint64_t v57 = *((void *)v37 - 19);
          if (v58 >= v57)
          {
            uint64_t v60 = *((void *)v37 - 21);
            uint64_t v61 = v58 - v60;
            uint64_t v62 = (uint64_t)(v58 - v60) >> 3;
            unint64_t v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 61) {
              abort();
            }
            uint64_t v64 = v57 - v60;
            if (v64 >> 2 > v63) {
              unint64_t v63 = v64 >> 2;
            }
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v63;
            }
            if (v65)
            {
              if (v65 >> 61) {
                goto LABEL_164;
              }
              uint64_t v66 = (char *)operator new(8 * v65);
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v67 = &v66[8 * v62];
            *(void *)uint64_t v67 = v56;
            char v59 = v67 + 8;
            if (v58 != v60)
            {
              unint64_t v68 = v58 - v60 - 8;
              if (v68 < 0x78
                || (unint64_t)&v66[v61 - (v68 & 0xFFFFFFFFFFFFFFF8) - 8] < v58
                && v58 - (v68 & 0xFFFFFFFFFFFFFFF8) - 8 < (unint64_t)v67)
              {
                goto LABEL_170;
              }
              uint64_t v69 = (v68 >> 3) + 1;
              char v70 = &v66[v61 - 16];
              uint64_t v71 = (_OWORD *)(v58 - 32);
              uint64_t v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v73 = v71[1];
                *((_OWORD *)v70 - 1) = *v71;
                *(_OWORD *)char v70 = v73;
                *uint64_t v71 = 0uLL;
                v71[1] = 0uLL;
                v71 -= 2;
                v70 -= 32;
                v72 -= 4;
              }
              while (v72);
              v67 -= 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
              v58 -= 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
              if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_170:
                do
                {
                  uint64_t v74 = *(void *)(v58 - 8);
                  v58 -= 8;
                  *((void *)v67 - 1) = v74;
                  v67 -= 8;
                  *(void *)unint64_t v58 = 0;
                }
                while (v58 != v60);
              }
            }
            unint64_t v75 = (char *)*((void *)v37 - 21);
            uint64_t v76 = (char *)*((void *)v37 - 20);
            *((void *)v37 - 21) = v67;
            *((void *)v37 - 20) = v59;
            *((void *)v37 - 19) = &v66[8 * v65];
            if (v76 != v75)
            {
              float v77 = v76;
              do
              {
                BOOL v79 = (void *)*((void *)v77 - 1);
                v77 -= 8;
                unint64_t v78 = v79;
                if (v79)
                {
                  if ((*v78)-- == 1)
                  {
                    operator delete(v78);
                    *((void *)v76 - 1) = 0;
                  }
                }
                uint64_t v76 = v77;
              }
              while (v77 != v75);
            }
            if (v75) {
              operator delete(v75);
            }
          }
          else
          {
            *(void *)unint64_t v58 = v55;
            v58 += 8;
            char v59 = (void *)v58;
          }
          *((void *)v37 - 20) = v59;
          uint64_t v81 = v113;
          uint64_t v82 = *(v59 - 1);
          if (v82) {
            uint64_t v83 = v82 + 8;
          }
          else {
            uint64_t v83 = 0;
          }
          unint64_t v84 = *((void *)v113 + 5);
          unint64_t v85 = *((void *)v37 - 8);
          if (v85)
          {
            uint8x8_t v86 = (uint8x8_t)vcnt_s8((int8x8_t)v85);
            v86.i16[0] = vaddlv_u8(v86);
            if (v86.u32[0] > 1uLL)
            {
              unint64_t v58 = *((void *)v113 + 5);
              if (v84 >= v85) {
                unint64_t v58 = v84 % v85;
              }
            }
            else
            {
              unint64_t v58 = (v85 - 1) & v84;
            }
            uint64_t v87 = *(void **)(*v112 + 8 * v58);
            if (v87)
            {
              int v88 = (void *)*v87;
              if (v88)
              {
                if (v86.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v90 = v88[1];
                    if (v90 == v84)
                    {
                      if (v88[2] == v84) {
                        goto LABEL_155;
                      }
                    }
                    else if ((v90 & (v85 - 1)) != v58)
                    {
                      goto LABEL_118;
                    }
                    int v88 = (void *)*v88;
                    if (!v88) {
                      goto LABEL_118;
                    }
                  }
                }
                do
                {
                  unint64_t v89 = v88[1];
                  if (v89 == v84)
                  {
                    if (v88[2] == v84) {
                      goto LABEL_155;
                    }
                  }
                  else
                  {
                    if (v89 >= v85) {
                      v89 %= v85;
                    }
                    if (v89 != v58) {
                      break;
                    }
                  }
                  int v88 = (void *)*v88;
                }
                while (v88);
              }
            }
          }
LABEL_118:
          uint64_t v91 = operator new(0x20uLL);
          *uint64_t v91 = 0;
          v91[1] = v84;
          v91[2] = v81[5];
          v91[3] = v83;
          float v92 = (float)(unint64_t)(*((void *)v37 - 6) + 1);
          float v93 = *((float *)v37 - 10);
          if ((((float)(v93 * (float)v85) >= v92) & ~(v85 == 0)) == 0)
          {
            BOOL v94 = (v85 & (v85 - 1)) != 0;
            if (v85 < 3) {
              BOOL v94 = 1;
            }
            unint64_t v95 = v94 | (2 * v85);
            unint64_t v96 = vcvtps_u32_f32(v92 / v93);
            if (v95 <= v96) {
              size_t prime = v96;
            }
            else {
              size_t prime = v95;
            }
            if (prime == 1)
            {
              size_t prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              size_t prime = std::__next_prime(prime);
              unint64_t v85 = *((void *)v37 - 8);
            }
            if (prime > v85) {
              goto LABEL_129;
            }
            if (prime < v85)
            {
              unint64_t v98 = vcvtps_u32_f32((float)*((unint64_t *)v37 - 6) / *((float *)v37 - 10));
              if (v85 < 3 || (uint8x8_t v99 = (uint8x8_t)vcnt_s8((int8x8_t)v85), v99.i16[0] = vaddlv_u8(v99), v99.u32[0] > 1uLL))
              {
                unint64_t v98 = std::__next_prime(v98);
              }
              else
              {
                uint64_t v100 = 1 << -(char)__clz(v98 - 1);
                if (v98 >= 2) {
                  unint64_t v98 = v100;
                }
              }
              if (prime <= v98) {
                size_t prime = v98;
              }
              if (prime < v85) {
LABEL_129:
              }
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v112, prime);
            }
            unint64_t v85 = *((void *)v37 - 8);
            if ((v85 & (v85 - 1)) != 0)
            {
              if (v84 >= v85) {
                unint64_t v58 = v84 % v85;
              }
              else {
                unint64_t v58 = v84;
              }
            }
            else
            {
              unint64_t v58 = (v85 - 1) & v84;
            }
          }
          uint64_t v101 = *v112;
          float v102 = *(void **)(*v112 + 8 * v58);
          if (v102)
          {
            *uint64_t v91 = *v102;
          }
          else
          {
            *uint64_t v91 = *v108;
            *unint64_t v108 = v91;
            *(void *)(v101 + 8 * v58) = v108;
            if (!*v91) {
              goto LABEL_154;
            }
            unint64_t v103 = *(void *)(*v91 + 8);
            if ((v85 & (v85 - 1)) != 0)
            {
              if (v103 >= v85) {
                v103 %= v85;
              }
            }
            else
            {
              v103 &= v85 - 1;
            }
            float v102 = (void *)(*v112 + 8 * v103);
          }
          *float v102 = v91;
LABEL_154:
          ++*((void *)v37 - 6);
LABEL_155:
          ++v51;
          uint8x8_t v50 = *(void **)v49;
        }
        while (v51 < *(void *)(*(void *)v49 + 32));
      }
      uint64_t v34 = v107 + 1;
      v27 += 23;
      long double v1 = (geo::codec::VectorTile **)v105;
      if (v107 + 1 == v106) {
        goto LABEL_159;
      }
    }
  }
LABEL_166:
  abort();
}

void sub_1A2216758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, uint64_t a14, void *a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,char a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34)
{
  MEMORY[0x1A6239270](v34, 0x1020C4007FF0C4BLL);
  if (v35) {
    operator delete(v35);
  }
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a16);
  uint64_t v37 = *a13;
  if (*a13)
  {
    *(void *)(a17 + 40) = v37;
    operator delete(v37);
  }
  uint64_t v38 = *a11;
  if (*a11)
  {
    *(void *)(a17 + 16) = v38;
    operator delete(v38);
  }
  MEMORY[0x1A6239270](a17, 0x10A1C40E0C5228ALL);
  if (a15) {
    operator delete(a15);
  }
  ggl::Loader::~Loader((ggl::Loader *)&a30);
  _Unwind_Resume(a1);
}

void md::TransitTileData::createNodes(geo::codec::VectorTile **this)
{
  uint64_t v465 = geo::codec::VectorTile::transitNodes(this[90]);
  unint64_t v2 = geo::codec::VectorTile::transitNodeCount(this[90]);
  uint64_t v3 = geo::codec::VectorTile::transitNodeCollapseIDCount(this[90]);
  v476 = (unint64_t *)geo::codec::VectorTile::transitNodeCollapseIDs(this[90]);
  uint64_t v4 = geo::codec::VectorTile::transitNodeCollapseIndices(this[90]);
  size_t __sz = geo::codec::VectorTile::transitLinkCount(this[90]);
  v471 = this;
  unint64_t v464 = v2;
  uint64_t v473 = geo::codec::VectorTile::transitLinks(this[90]);
  if (!v2)
  {
    uint64_t v33 = 0;
    long long v488 = 0u;
    long long v489 = 0u;
    int v490 = 1065353216;
    v486 = 0;
    uint64_t v487 = 0;
    v485 = &v486;
    unint64_t v34 = 0;
    if (!v3) {
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  if (v2 >> 61) {
    abort();
  }
  int8x16x2_t v459 = operator new(8 * v2);
  bzero(v459, 8 * v2);
  uint64_t v5 = 0;
  long long v488 = 0u;
  long long v489 = 0u;
  int v490 = 1065353216;
  v486 = 0;
  uint64_t v487 = 0;
  v485 = &v486;
  uint64_t v6 = v465;
  do
  {
    uint64_t v7 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v471[117], *(void *)(v6 + 240));
    if (v7) {
      double v8 = v7 + 3;
    }
    else {
      double v8 = 0;
    }
    if (v7 && !*(unsigned char *)(v6 + 321) && *(_WORD *)(v6 + 276))
    {
      int8x8_t v9 = operator new(0xA8uLL);
      v9[1] = 0;
      v9[2] = 0;
      *int8x8_t v9 = &unk_1EF581168;
      uint64_t v10 = v471;
      uint64_t v11 = md::TransitConnectedNode::TransitConnectedNode((uint64_t)(v9 + 3), (uint64_t *)v6, v471 + 108, v8, *((float *)v471 + 337));
      __p[0] = (void *)v11;
      __p[1] = v9;
      double v12 = v471[125];
      long double v13 = v471[126];
      if (v12 >= v13)
      {
        uint64_t v14 = v471[124];
        uint64_t v15 = (v12 - v14) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60) {
          abort();
        }
        uint64_t v17 = v13 - v14;
        if (v17 >> 3 > v16) {
          unint64_t v16 = v17 >> 3;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18 >> 60) {
          goto LABEL_793;
        }
        unint64_t v19 = (char *)operator new(16 * v18);
        double v20 = (geo::codec::VectorTile *)&v19[16 * v15];
        *(_OWORD *)double v20 = *(_OWORD *)__p;
        double v21 = (geo::codec::VectorTile *)((char *)v20 + 16);
        float v22 = (geo::codec::VectorTile *)&v19[16 * v18];
        if (v12 == v14)
        {
          v471[124] = v20;
          v471[125] = v21;
          v471[126] = v22;
        }
        else
        {
          do
          {
            long long v23 = *((_OWORD *)v12 - 1);
            double v12 = (geo::codec::VectorTile *)((char *)v12 - 16);
            *((_OWORD *)v20 - 1) = v23;
            double v20 = (geo::codec::VectorTile *)((char *)v20 - 16);
            *(void *)double v12 = 0;
            *((void *)v12 + 1) = 0;
          }
          while (v12 != v14);
          double v12 = v471[124];
          float v24 = v471[125];
          v471[124] = v20;
          v471[125] = v21;
          v471[126] = v22;
          while (v24 != v12)
          {
            float v25 = (std::__shared_weak_count *)*((void *)v24 - 1);
            if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
            float v24 = (geo::codec::VectorTile *)((char *)v24 - 16);
          }
        }
        if (v12) {
          operator delete(v12);
        }
        uint64_t v10 = v471;
        v471[125] = v21;
        unint64_t v2 = v464;
      }
      else
      {
        *(void *)double v12 = v11;
        *((void *)v12 + 1) = v9;
        v471[125] = (geo::codec::VectorTile *)((char *)v12 + 16);
      }
      *((void *)v459 + v5) = *((void *)v10[125] - 2);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v488, *(void *)(v6 + 40), (void *)(v6 + 40))[3] = v5;
    unint64_t v26 = *(unint64_t **)(v6 + 256);
    if (v26)
    {
      unint64_t v27 = *v26;
      float v28 = (uint64_t *)operator new(0x30uLL);
      float v29 = v28;
      v28[4] = v27;
      v28[5] = v5;
      int v30 = &v486;
      double v31 = &v486;
      uint64_t v32 = v486;
      if (v486)
      {
        do
        {
          while (1)
          {
            int v30 = (uint64_t **)v32;
            if (v27 >= v32[4]) {
              break;
            }
            uint64_t v32 = (uint64_t *)*v32;
            double v31 = v30;
            if (!*v30) {
              goto LABEL_42;
            }
          }
          uint64_t v32 = (uint64_t *)v32[1];
        }
        while (v32);
        double v31 = v30 + 1;
      }
LABEL_42:
      *float v28 = 0;
      v28[1] = 0;
      v28[2] = (uint64_t)v30;
      *double v31 = v28;
      if (*v485)
      {
        v485 = (uint64_t **)*v485;
        float v29 = *v31;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v486, v29);
      ++v487;
      unint64_t v2 = v464;
    }
    ++v5;
    v6 += 344;
  }
  while (v5 != v2);
  uint64_t v33 = v459;
  unint64_t v34 = v2;
  if (v3)
  {
LABEL_47:
    int8x8_t v35 = v476;
    unint64_t v34 = v2;
    do
    {
      unint64_t v36 = *v35++;
      v37.n128_u64[0] = v36;
      v37.n128_u64[1] = v34;
      v34 += std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long>>((uint64_t)&v488, v36, v37) & 1;
      --v3;
    }
    while (v3);
  }
LABEL_49:
  size_t v38 = __sz;
  if (__sz)
  {
    unint64_t v39 = (unint64_t *)(v473 + 64);
    do
    {
      unint64_t v40 = *(v39 - 1);
      v41.n128_u64[0] = *v39;
      v41.n128_u64[1] = v34;
      unint64_t v42 = (std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long>>((uint64_t)&v488, *v39, v41) & 1)+ v34;
      v43.n128_u64[0] = v40;
      v43.n128_u64[1] = v42;
      v39 += 23;
      unint64_t v34 = (std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long>>((uint64_t)&v488, v40, v43) & 1)+ v42;
      --v38;
    }
    while (v38);
  }
  if (v34)
  {
    if (v34 >> 61) {
      abort();
    }
    uint64_t v44 = operator new(8 * v34);
    bzero(v44, 8 * v34);
  }
  else
  {
    uint64_t v44 = 0;
  }
  v483 = 0;
  uint64_t v484 = 0;
  unint64_t v482 = v34;
  v491 = 0;
  v460 = v33;
  if (v34)
  {
    uint64_t v45 = (std::__shared_weak_count **)operator new(8 * v34);
    unint64_t v46 = (v34 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v47 = v45;
    if (v46 >= 0x13)
    {
      if (v45 >= &v492 || (unint64_t v47 = v45, &v45[v34] <= &v491))
      {
        uint64_t v48 = (v46 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        int8x8_t v49 = v45;
        uint64_t v50 = v48;
        do
        {
          *(_OWORD *)int8x8_t v49 = 0uLL;
          *((_OWORD *)v49 + 1) = 0uLL;
          v49 += 4;
          v50 -= 4;
        }
        while (v50);
        if (v46 + 1 == v48) {
LABEL_68:
        }
          operator new();
        unint64_t v47 = &v45[v48];
      }
    }
    unint64_t v51 = v491;
    do
      *v47++ = v51;
    while (v47 != &v45[v34]);
    goto LABEL_68;
  }
  uint64_t v52 = 0;
  uint64_t v53 = v473;
  v472 = v44;
  if (__sz)
  {
    uint64_t v54 = 0;
    unint64_t v55 = *((void *)&v488 + 1);
    uint8x8_t v56 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v488 + 8));
    v56.i16[0] = vaddlv_u8(v56);
    unint64_t v57 = v56.u32[0];
    uint64_t v58 = *((void *)&v488 + 1) - 1;
    uint64_t v466 = v4;
    do
    {
      uint64_t v462 = v54;
      char v59 = 0;
      uint64_t v60 = 0;
      uint64_t v61 = (void *)(v53 + 64);
      uint64_t v474 = v53;
      uint64_t v62 = (unint64_t *)(v53 + 56);
      unint64_t v63 = *((void *)&v488 + 1);
      uint8x8_t v64 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v488 + 8));
      v64.i16[0] = vaddlv_u8(v64);
      unint64_t v34 = v64.u32[0];
      uint64_t v65 = *((void *)&v488 + 1) - 1;
      char v66 = 1;
      v468 = v61;
      do
      {
        if (!v55) {
          goto LABEL_792;
        }
        char v67 = v59;
        unint64_t v68 = *v62;
        if (v57 > 1)
        {
          unint64_t v69 = *v62;
          if (v68 >= v55) {
            unint64_t v69 = v68 % v55;
          }
        }
        else
        {
          unint64_t v69 = v58 & v68;
        }
        char v70 = *(void **)(v488 + 8 * v69);
        if (!v70 || (uint64_t v71 = (void *)*v70) == 0) {
LABEL_792:
        }
          abort();
        if (v57 < 2)
        {
          while (1)
          {
            uint64_t v72 = v71[1];
            if (v72 == v68)
            {
              if (v71[2] == v68) {
                goto LABEL_87;
              }
            }
            else if ((v72 & v58) != v69)
            {
              goto LABEL_792;
            }
            uint64_t v71 = (void *)*v71;
            if (!v71) {
              goto LABEL_792;
            }
          }
        }
        while (1)
        {
          unint64_t v83 = v71[1];
          if (v83 == v68) {
            break;
          }
          if (v83 >= v55) {
            v83 %= v55;
          }
          if (v83 != v69) {
            goto LABEL_792;
          }
LABEL_96:
          uint64_t v71 = (void *)*v71;
          if (!v71) {
            goto LABEL_792;
          }
        }
        if (v71[2] != v68) {
          goto LABEL_96;
        }
LABEL_87:
        uint64_t v73 = v71[3];
        if (!v472[v73])
        {
          BOOL v74 = (v66 & 1) == 0;
          uint64_t v75 = 48;
          if (!v74) {
            uint64_t v75 = 40;
          }
          char v469 = v67;
          unint64_t v76 = v57;
          float v77 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v471[117], *(void *)(v474 + v75));
          char v67 = v469;
          unint64_t v57 = v76;
          unint64_t v78 = v77 + 3;
          BOOL v74 = v77 == 0;
          uint64_t v4 = v466;
          uint64_t v61 = v468;
          if (v74) {
            unint64_t v78 = 0;
          }
          v472[v73] = v78;
        }
        BOOL v79 = (void *)(v474 + 16 * v60);
        uint64_t v80 = v79[16];
        if (v80)
        {
          uint64_t v81 = 0;
          uint64_t v82 = v79[15];
          do
          {
            unint64_t v84 = *(void **)(8 * v73);
            do
            {
              unint64_t v85 = v84;
              unint64_t v84 = (void *)*v84;
            }
            while (v84);
            uint64_t v86 = v85[1];
            uint64_t v87 = *(void **)(8 * *(void *)(v4 + 8 * (v82 + v81)));
            do
            {
              int v88 = v87;
              uint64_t v87 = (void *)*v87;
            }
            while (v87);
            uint64_t v89 = v88[1];
            if (v86 != v89)
            {
              unint64_t v482 = --v52;
              uint64_t v90 = *(void **)(8 * v86);
              uint64_t v91 = *(void **)(8 * v89);
              unint64_t v92 = v90[2];
              unint64_t v93 = v91[2];
              if (v92 < v93)
              {
                void *v90 = v91;
              }
              else
              {
                *uint64_t v91 = v90;
                if (v92 <= v93) {
                  v90[2] = v92 + 1;
                }
              }
            }
            ++v81;
          }
          while (v81 != v80);
        }
        uint64_t v94 = v79[20];
        if (v94)
        {
          if (!v63) {
LABEL_303:
          }
            abort();
          uint64_t v95 = 0;
          uint64_t v96 = *(void *)(v474 + 16 * v60 + 152);
LABEL_117:
          unint64_t v97 = v476[v96 + v95];
          if (v34 > 1)
          {
            unint64_t v98 = v476[v96 + v95];
            if (v97 >= v63) {
              unint64_t v98 = v97 % v63;
            }
          }
          else
          {
            unint64_t v98 = v65 & v97;
          }
          uint8x8_t v99 = *(void **)(v488 + 8 * v98);
          if (!v99) {
            goto LABEL_303;
          }
          uint64_t v100 = (void *)*v99;
          if (!v100) {
            goto LABEL_303;
          }
          if (v34 < 2)
          {
            while (1)
            {
              uint64_t v101 = v100[1];
              if (v101 == v97)
              {
                if (v100[2] == v97) {
                  goto LABEL_129;
                }
              }
              else if ((v101 & v65) != v98)
              {
                goto LABEL_303;
              }
              uint64_t v100 = (void *)*v100;
              if (!v100) {
                goto LABEL_303;
              }
            }
          }
          while (1)
          {
            unint64_t v113 = v100[1];
            if (v113 == v97)
            {
              if (v100[2] == v97)
              {
LABEL_129:
                uint64_t v102 = v100[3];
                unint64_t v103 = *(void **)(8 * v73);
                do
                {
                  float v104 = v103;
                  unint64_t v103 = (void *)*v103;
                }
                while (v103);
                uint64_t v105 = v104[1];
                unint64_t v106 = *(void **)(8 * v102);
                do
                {
                  uint64_t v107 = v106;
                  unint64_t v106 = (void *)*v106;
                }
                while (v106);
                uint64_t v108 = v107[1];
                if (v105 != v108)
                {
                  unint64_t v482 = --v52;
                  uint64_t v109 = *(void **)(8 * v105);
                  float v110 = *(void **)(8 * v108);
                  unint64_t v111 = v109[2];
                  unint64_t v112 = v110[2];
                  if (v111 < v112)
                  {
                    void *v109 = v110;
                  }
                  else
                  {
                    *float v110 = v109;
                    if (v111 <= v112) {
                      v109[2] = v111 + 1;
                    }
                  }
                }
                if (++v95 == v94) {
                  break;
                }
                goto LABEL_117;
              }
            }
            else
            {
              if (v113 >= v63) {
                v113 %= v63;
              }
              if (v113 != v98) {
                goto LABEL_303;
              }
            }
            uint64_t v100 = (void *)*v100;
            if (!v100) {
              goto LABEL_303;
            }
          }
        }
        char v66 = 0;
        char v59 = 1;
        uint64_t v62 = v61;
        uint64_t v60 = 1;
      }
      while ((v67 & 1) == 0);
      uint64_t v54 = v462 + 1;
      uint64_t v53 = v474 + 184;
    }
    while (v462 + 1 != __sz);
  }
  unint64_t v114 = v460;
  uint64_t i = v471;
  if (v52)
  {
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v483);
    v483 = 0;
    uint64_t v484 = 0;
  }
  if (v464)
  {
    uint64_t v116 = 0;
    v470 = v471 + 108;
    uint64_t v117 = v465;
    while (1)
    {
      if (v114[v116]) {
        goto LABEL_148;
      }
      if (*(unsigned char *)(v117 + 321)) {
        goto LABEL_148;
      }
      float32x2_t v118 = v486;
      if (!v486) {
        goto LABEL_148;
      }
      unint64_t v119 = *(void *)(v117 + 40);
      long long v120 = &v486;
      while (1)
      {
        while (1)
        {
          unint64_t v121 = v118[4];
          if (v119 >= v121) {
            break;
          }
          long long v120 = (uint64_t **)v118;
          float32x2_t v118 = (uint64_t *)*v118;
          if (!v118) {
            goto LABEL_148;
          }
        }
        if (v121 >= v119) {
          break;
        }
        float32x2_t v118 = (uint64_t *)v118[1];
        if (!v118) {
          goto LABEL_148;
        }
      }
      float32x2_t v122 = (void *)*v118;
      float v123 = v118;
      if (*v118)
      {
        float v123 = v118;
        do
        {
          unint64_t v124 = v122[4];
          BOOL v125 = v124 >= v119;
          if (v124 >= v119) {
            float v126 = v122;
          }
          else {
            float v126 = v122 + 1;
          }
          if (v125) {
            float v123 = v122;
          }
          float32x2_t v122 = (void *)*v126;
        }
        while (*v126);
      }
      float v127 = (void *)v118[1];
      if (v127)
      {
        do
        {
          unint64_t v128 = v127[4];
          BOOL v129 = v119 >= v128;
          if (v119 >= v128) {
            double v130 = v127 + 1;
          }
          else {
            double v130 = v127;
          }
          if (!v129) {
            long long v120 = (uint64_t **)v127;
          }
          float v127 = (void *)*v130;
        }
        while (*v130);
      }
      if (v123 == (uint64_t *)v120) {
        goto LABEL_148;
      }
      unint64_t v131 = 0;
      v475 = 0;
      v477 = 0;
      BOOL v132 = 0;
      unsigned int v133 = 0;
      do
      {
        uint64_t v134 = v123[5];
        unint64_t v135 = *(void **)(v465 + 344 * v134 + 256);
        if (!v135 || v119 != *v135) {
          goto LABEL_209;
        }
        uint64_t v136 = v114[v134];
        if (v136)
        {
          if (v133 < v132)
          {
            *(void *)unsigned int v133 = v136;
            v133 += 8;
            v477 = v133;
            goto LABEL_209;
          }
          int64_t v143 = v133 - v131;
          uint64_t v144 = (v133 - v131) >> 3;
          unint64_t v145 = v144 + 1;
          if ((unint64_t)(v144 + 1) >> 61) {
            abort();
          }
          if ((v132 - v131) >> 2 > v145) {
            unint64_t v145 = (v132 - v131) >> 2;
          }
          if ((unint64_t)(v132 - v131) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v146 = v145;
          }
          if (v146)
          {
            v478 = v131;
            if (v146 >> 61) {
              goto LABEL_793;
            }
            float v147 = v133;
            unint64_t v148 = v146;
            float v149 = operator new(8 * v146);
            unsigned int v133 = v147;
            unint64_t v146 = v148;
            unint64_t v131 = v478;
          }
          else
          {
            float v149 = 0;
          }
          float v150 = &v149[8 * v144];
          *(void *)float v150 = v136;
          v477 = v150 + 8;
          if (v133 == v131)
          {
            unint64_t v114 = v460;
            BOOL v132 = &v149[8 * v146];
            if (!v131) {
              goto LABEL_208;
            }
            goto LABEL_207;
          }
          unint64_t v151 = v133 - 8 - v131;
          if (v151 < 0x168
            || &v149[v143 - 8 - (v151 & 0xFFFFFFFFFFFFFFF8)] > &v149[v143 - 8]
            || &v133[-(v151 & 0xFFFFFFFFFFFFFFF8) - 8] > v133 - 8
            || (unint64_t)(v133 - &v149[v143]) < 0x20)
          {
            double v152 = v133;
            unint64_t v114 = v460;
          }
          else
          {
            uint64_t v157 = (v151 >> 3) + 1;
            double v152 = &v133[-8 * (v157 & 0x3FFFFFFFFFFFFFFCLL)];
            float v158 = &v149[8 * v144 - 16];
            double v159 = (long long *)(v133 - 16);
            uint64_t v160 = v157 & 0x3FFFFFFFFFFFFFFCLL;
            unint64_t v114 = v460;
            do
            {
              long long v161 = *v159;
              *(v158 - 1) = *(v159 - 1);
              *float v158 = v161;
              v158 -= 2;
              v159 -= 2;
              v160 -= 4;
            }
            while (v160);
            v150 -= 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
            if (v157 == (v157 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_206:
              BOOL v132 = &v149[8 * v146];
              if (!v131)
              {
LABEL_208:
                unint64_t v131 = v150;
                unsigned int v133 = v477;
                goto LABEL_209;
              }
LABEL_207:
              unint64_t v154 = v132;
              operator delete(v131);
              BOOL v132 = v154;
              goto LABEL_208;
            }
          }
          do
          {
            uint64_t v153 = *((void *)v152 - 1);
            v152 -= 8;
            *((void *)v150 - 1) = v153;
            v150 -= 8;
          }
          while (v152 != v131);
          goto LABEL_206;
        }
        if (v482)
        {
          unint64_t v137 = *(void **)(8 * v134);
          do
          {
            float v138 = v137;
            unint64_t v137 = (void *)*v137;
          }
          while (v137);
          float v139 = v483;
          if (v483)
          {
            unint64_t v140 = v138[1];
            float32x2_t v141 = &v483;
            while (1)
            {
              while (1)
              {
                unint64_t v142 = v139[4];
                if (v140 >= v142) {
                  break;
                }
                float32x2_t v141 = (void **)v139;
                float v139 = (void *)*v139;
                if (!v139) {
                  goto LABEL_209;
                }
              }
              if (v142 >= v140) {
                break;
              }
              float v139 = (void *)v139[1];
              if (!v139) {
                goto LABEL_209;
              }
            }
            double v162 = (void *)*v139;
            uint64_t v163 = v139;
            if (*v139)
            {
              uint64_t v163 = v139;
              do
              {
                unint64_t v164 = v162[4];
                BOOL v165 = v164 >= v140;
                if (v164 >= v140) {
                  unint64_t v166 = v162;
                }
                else {
                  unint64_t v166 = v162 + 1;
                }
                if (v165) {
                  uint64_t v163 = v162;
                }
                double v162 = (void *)*v166;
              }
              while (*v166);
            }
            unint64_t v167 = (void *)v139[1];
            if (v167)
            {
              do
              {
                unint64_t v168 = v167[4];
                BOOL v169 = v140 >= v168;
                if (v140 >= v168) {
                  float v170 = v167 + 1;
                }
                else {
                  float v170 = v167;
                }
                if (!v169) {
                  float32x2_t v141 = (void **)v167;
                }
                unint64_t v167 = (void *)*v170;
              }
              while (*v170);
            }
            if (v163 != v141)
            {
              while (1)
              {
                unint64_t v171 = v163[5];
                if (v171 < v464)
                {
                  uint64_t v172 = v114[v171];
                  if (v172) {
                    break;
                  }
                }
                unint64_t v174 = (void *)v472[v171];
                float v175 = v475;
                if (v174) {
                  float v175 = v174;
                }
                v475 = v175;
                unint64_t v173 = (void *)v163[1];
                if (v173)
                {
                  do
                  {
LABEL_251:
                    uint64_t v176 = v173;
                    unint64_t v173 = (void *)*v173;
                  }
                  while (v173);
                  goto LABEL_242;
                }
                do
                {
LABEL_279:
                  uint64_t v176 = (void *)v163[2];
                  BOOL v74 = *v176 == (void)v163;
                  uint64_t v163 = v176;
                }
                while (!v74);
LABEL_242:
                uint64_t v163 = v176;
                if (v176 == v141) {
                  goto LABEL_209;
                }
              }
              if (v133 < v132)
              {
                *(void *)unsigned int v133 = v172;
                v133 += 8;
                v477 = v133;
                unint64_t v173 = (void *)v163[1];
                if (v173) {
                  goto LABEL_251;
                }
                goto LABEL_279;
              }
              int64_t v177 = v133 - v131;
              uint64_t v178 = (v133 - v131) >> 3;
              unint64_t v179 = v178 + 1;
              if ((unint64_t)(v178 + 1) >> 61) {
                abort();
              }
              if ((v132 - v131) >> 2 > v179) {
                unint64_t v179 = (v132 - v131) >> 2;
              }
              if ((unint64_t)(v132 - v131) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v179;
              }
              if (v180)
              {
                int64_t v463 = v133 - v131;
                uint64_t v467 = (v133 - v131) >> 3;
                v479 = v133;
                if (v180 >> 61) {
                  goto LABEL_793;
                }
                unint64_t v181 = v180;
                long long v182 = operator new(8 * v180);
                unsigned int v133 = v479;
                unint64_t v180 = v181;
                uint64_t v178 = v467;
                int64_t v177 = v463;
              }
              else
              {
                long long v182 = 0;
              }
              float v183 = &v182[8 * v178];
              *(void *)float v183 = v172;
              v477 = v183 + 8;
              if (v133 != v131)
              {
                unint64_t v184 = v133 - 8 - v131;
                if (v184 < 0x168)
                {
                  double v185 = v133;
                  goto LABEL_275;
                }
                if (&v182[v177 - 8 - (v184 & 0xFFFFFFFFFFFFFFF8)] > &v182[v177 - 8])
                {
                  double v185 = v133;
                  goto LABEL_275;
                }
                if (&v133[-(v184 & 0xFFFFFFFFFFFFFFF8) - 8] > v133 - 8)
                {
                  double v185 = v133;
                  goto LABEL_275;
                }
                if ((unint64_t)(v133 - &v182[v177]) < 0x20)
                {
                  double v185 = v133;
                  goto LABEL_275;
                }
                uint64_t v186 = (v184 >> 3) + 1;
                double v185 = &v133[-8 * (v186 & 0x3FFFFFFFFFFFFFFCLL)];
                float v187 = &v182[8 * v178 - 16];
                float v188 = (long long *)(v133 - 16);
                uint64_t v189 = v186 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v190 = *v188;
                  *(v187 - 1) = *(v188 - 1);
                  *float v187 = v190;
                  v187 -= 2;
                  v188 -= 2;
                  v189 -= 4;
                }
                while (v189);
                v183 -= 8 * (v186 & 0x3FFFFFFFFFFFFFFCLL);
                if (v186 != (v186 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_275:
                    uint64_t v191 = *((void *)v185 - 1);
                    v185 -= 8;
                    *((void *)v183 - 1) = v191;
                    v183 -= 8;
                  }
                  while (v185 != v131);
                }
              }
              BOOL v132 = &v182[8 * v180];
              if (v131)
              {
                unint64_t v192 = &v182[8 * v180];
                operator delete(v131);
                BOOL v132 = v192;
              }
              unint64_t v131 = v183;
              unsigned int v133 = v477;
              unint64_t v114 = v460;
              unint64_t v173 = (void *)v163[1];
              if (v173) {
                goto LABEL_251;
              }
              goto LABEL_279;
            }
          }
        }
LABEL_209:
        int v155 = (uint64_t *)v123[1];
        if (v155)
        {
          do
          {
            uint64_t v156 = (uint64_t **)v155;
            int v155 = (uint64_t *)*v155;
          }
          while (v155);
        }
        else
        {
          do
          {
            uint64_t v156 = (uint64_t **)v123[2];
            BOOL v74 = *v156 == v123;
            float v123 = (uint64_t *)v156;
          }
          while (!v74);
        }
        float v123 = (uint64_t *)v156;
      }
      while (v156 != v120);
      if (v131 == v133)
      {
        if (!v475) {
          goto LABEL_301;
        }
        char v194 = (std::__shared_weak_count *)operator new(0xA8uLL);
        v194->__shared_owners_ = 0;
        v194->__shared_weak_owners_ = 0;
        v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5805D0;
        uint64_t v202 = md::TransitConnectedNode::TransitConnectedNode((uint64_t)&v194[1], (uint64_t *)v117, v470, v475, *((float *)v471 + 337));
        v194[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF538218;
        v491 = (std::__shared_weak_count *)v202;
        v492 = v194;
        uint64_t v203 = v471[128];
        if (v203 >= v471[129])
        {
LABEL_297:
          uint64_t v204 = std::vector<std::shared_ptr<gdc::LayerDataRequest>>::__push_back_slow_path<std::shared_ptr<gdc::LayerDataRequest>>((char **)v471 + 127, (uint64_t)&v491);
          uint64_t v205 = v492;
          v471[128] = (geo::codec::VectorTile *)v204;
          if (v205 && !atomic_fetch_add(&v205->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
            std::__shared_weak_count::__release_weak(v205);
          }
          goto LABEL_300;
        }
      }
      else
      {
        unint64_t v193 = (std::__shared_weak_count *)operator new(0xA8uLL);
        char v194 = v193;
        v193->__shared_owners_ = 0;
        v193->__shared_weak_owners_ = 0;
        v193->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5805D0;
        if (v131 == v477)
        {
          uint64_t v201 = 0;
        }
        else
        {
          uint64_t v195 = 0;
          uint64_t v196 = 0;
          unint64_t v197 = (v477 - v131) >> 3;
          if (v197 <= 1) {
            unint64_t v197 = 1;
          }
          float v198 = 3.4028e38;
          do
          {
            float32x2_t v199 = vsub_f32(*(float32x2_t *)(v117 + 88), *(float32x2_t *)(*(void *)(*(void *)&v131[8 * v195] + 8) + 88));
            float v200 = vaddv_f32(vmul_f32(v199, v199));
            if (v200 < v198) {
              uint64_t v196 = v195;
            }
            float v198 = fminf(v200, v198);
            ++v195;
          }
          while (v197 != v195);
          uint64_t v201 = *(void **)(*(void *)&v131[8 * v196] + 96);
        }
        uint64_t v202 = md::TransitConnectedNode::TransitConnectedNode((uint64_t)&v193[1], (uint64_t *)v117, v470, v201, *((float *)v471 + 337));
        v194[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF538218;
        v491 = (std::__shared_weak_count *)v202;
        v492 = v194;
        uint64_t v203 = v471[128];
        if (v203 >= v471[129]) {
          goto LABEL_297;
        }
      }
      *(void *)uint64_t v203 = v202;
      *((void *)v203 + 1) = v194;
      v471[128] = (geo::codec::VectorTile *)((char *)v203 + 16);
LABEL_300:
      v114[v116] = *((void *)v471[128] - 2);
LABEL_301:
      if (v131) {
        operator delete(v131);
      }
LABEL_148:
      ++v116;
      v117 += 344;
      if (v116 == v464)
      {
        unint64_t v34 = 0;
        uint64_t i = v471;
        do
        {
          if (!v114[v34] && !*(unsigned char *)(v465 + 321))
          {
            uint64_t v206 = operator new(0x68uLL);
            v206[1] = 0;
            v206[2] = 0;
            *uint64_t v206 = &unk_1EF580598;
            md::TransitNode::TransitNode((uint64_t)(v206 + 3), (uint64_t *)v465, v470, *((float *)v471 + 337));
            v206[3] = &unk_1EF5381C8;
            v206[12] = 0;
            *((unsigned char *)v206 + 85) = 0;
            *((unsigned char *)v206 + 84) = *(unsigned char *)(v206[4] + 320);
            operator new();
          }
          ++v34;
          v465 += 344;
        }
        while (v34 != v464);
        break;
      }
    }
  }
  uint64_t v207 = (char *)i[124];
  uint64_t v208 = (char *)i[125];
  if (v208 - v207 < 1) {
    goto LABEL_365;
  }
  uint64_t v209 = i[119];
  uint64_t v210 = (v208 - v207) >> 4;
  uint64_t v211 = i[118];
  unint64_t v34 = (v209 - v211) >> 4;
  uint64_t v212 = (geo::codec::VectorTile *)((char *)v211 + ((v209 - v211) & 0xFFFFFFFFFFFFFFF0));
  int v213 = i[120];
  if (v210 <= (v213 - v209) >> 4)
  {
    uint64_t v218 = (v209 - v212) >> 4;
    if (v218 >= v210)
    {
      double v219 = &v207[16 * v210];
      double v221 = i[119];
    }
    else
    {
      double v219 = &v207[16 * v218];
      if (v219 == v208)
      {
        double v221 = i[119];
      }
      else
      {
        double v220 = &v207[16 * v218];
        double v221 = i[119];
        do
        {
          *(void *)double v221 = *(void *)v220;
          uint64_t v222 = *((void *)v220 + 1);
          *((void *)v221 + 1) = v222;
          if (v222) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v222 + 8), 1uLL, memory_order_relaxed);
          }
          double v221 = (geo::codec::VectorTile *)((char *)v221 + 16);
          v220 += 16;
        }
        while (v220 != v208);
      }
      i[119] = v221;
      if (v209 - v212 < 1) {
        goto LABEL_365;
      }
    }
    uint64_t v232 = (char *)v212 + 16 * v210;
    float v233 = (geo::codec::VectorTile *)((char *)v221 - 16 * v210);
    float v234 = v221;
    if (v233 < v209)
    {
      float v234 = v221;
      do
      {
        *(_OWORD *)float v234 = *(_OWORD *)v233;
        float v234 = (geo::codec::VectorTile *)((char *)v234 + 16);
        *(void *)float v233 = 0;
        *((void *)v233 + 1) = 0;
        float v233 = (geo::codec::VectorTile *)((char *)v233 + 16);
      }
      while (v233 < v209);
    }
    i[119] = v234;
    if (v221 != (geo::codec::VectorTile *)v232)
    {
      uint64_t v235 = (unint64_t *)((char *)v221 - 8);
      uint64_t v236 = 16 * ((v221 - (geo::codec::VectorTile *)v232) >> 4);
      uint64_t v237 = (uint64_t)v211 + 16 * v34 - 16;
      do
      {
        long long v238 = (void *)(v237 + v236);
        long long v239 = *(_OWORD *)(v237 + v236);
        *long long v238 = 0;
        v238[1] = 0;
        unint64_t v34 = *v235;
        *(_OWORD *)(v235 - 1) = v239;
        if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
        }
        v235 -= 2;
        v236 -= 16;
      }
      while (v236);
    }
    for (uint64_t i = v471; v207 != v219; v212 = (geo::codec::VectorTile *)((char *)v212 + 16))
    {
      uint64_t v241 = *(void *)v207;
      uint64_t v240 = *((void *)v207 + 1);
      if (v240) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v240 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v34 = *((void *)v212 + 1);
      *(void *)uint64_t v212 = v241;
      *((void *)v212 + 1) = v240;
      if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
      }
      v207 += 16;
    }
    goto LABEL_365;
  }
  unint64_t v214 = v34 + v210;
  if ((v34 + v210) >> 60) {
    abort();
  }
  uint64_t v215 = v213 - v211;
  if (v215 >> 3 > v214) {
    unint64_t v214 = v215 >> 3;
  }
  if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v216 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v216 = v214;
  }
  if (v216)
  {
    if (v216 >> 60) {
      goto LABEL_793;
    }
    uint64_t v217 = (char *)operator new(16 * v216);
  }
  else
  {
    uint64_t v217 = 0;
  }
  float v223 = &v217[16 * v34];
  uint64_t v224 = (geo::codec::VectorTile *)&v223[16 * v210];
  unsigned int v225 = (geo::codec::VectorTile *)v223;
  do
  {
    *(void *)unsigned int v225 = *(void *)v207;
    uint64_t v226 = *((void *)v207 + 1);
    *((void *)v225 + 1) = v226;
    if (v226) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v226 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v225 = (geo::codec::VectorTile *)((char *)v225 + 16);
    v207 += 16;
  }
  while (v225 != v224);
  float v227 = i[118];
  if (v227 != v212)
  {
    float v228 = v212;
    do
    {
      long long v229 = *((_OWORD *)v228 - 1);
      float v228 = (geo::codec::VectorTile *)((char *)v228 - 16);
      *((_OWORD *)v223 - 1) = v229;
      v223 -= 16;
      *(void *)float v228 = 0;
      *((void *)v228 + 1) = 0;
    }
    while (v228 != v227);
  }
  float v230 = i[119];
  if (v230 != v212)
  {
    do
    {
      *(_OWORD *)uint64_t v224 = *(_OWORD *)v212;
      uint64_t v224 = (geo::codec::VectorTile *)((char *)v224 + 16);
      *(void *)uint64_t v212 = 0;
      *((void *)v212 + 1) = 0;
      uint64_t v212 = (geo::codec::VectorTile *)((char *)v212 + 16);
    }
    while (v212 != v230);
    uint64_t v212 = i[119];
  }
  unint64_t v34 = (unint64_t)i[118];
  i[118] = (geo::codec::VectorTile *)v223;
  i[119] = v224;
  for (i[120] = (geo::codec::VectorTile *)&v217[16 * v216];
        v212 != (geo::codec::VectorTile *)v34;
        uint64_t v212 = (geo::codec::VectorTile *)((char *)v212 - 16))
  {
    float v231 = (std::__shared_weak_count *)*((void *)v212 - 1);
    if (v231 && !atomic_fetch_add(&v231->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  if (v34) {
    operator delete((void *)v34);
  }
LABEL_365:
  uint64_t v242 = (char *)i[127];
  unint64_t v243 = (char *)i[128];
  if (v243 - v242 < 1) {
    goto LABEL_421;
  }
  unint64_t v244 = i[119];
  uint64_t v245 = (v243 - v242) >> 4;
  uint64_t v246 = i[118];
  unint64_t v34 = (v244 - v246) >> 4;
  unsigned int v247 = (geo::codec::VectorTile *)((char *)v246 + ((v244 - v246) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v248 = i[120];
  if (v245 <= (v248 - v244) >> 4)
  {
    uint64_t v253 = (v244 - v247) >> 4;
    if (v253 >= v245)
    {
      unsigned int v254 = &v242[16 * v245];
      uint64_t v256 = i[119];
    }
    else
    {
      unsigned int v254 = &v242[16 * v253];
      if (v254 == v243)
      {
        uint64_t v256 = i[119];
      }
      else
      {
        double v255 = &v242[16 * v253];
        uint64_t v256 = i[119];
        do
        {
          *(void *)uint64_t v256 = *(void *)v255;
          uint64_t v257 = *((void *)v255 + 1);
          *((void *)v256 + 1) = v257;
          if (v257) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v257 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v256 = (geo::codec::VectorTile *)((char *)v256 + 16);
          v255 += 16;
        }
        while (v255 != v243);
      }
      i[119] = v256;
      if (v244 - v247 < 1) {
        goto LABEL_421;
      }
    }
    uint64_t v267 = (char *)v247 + 16 * v245;
    unsigned int v268 = (geo::codec::VectorTile *)((char *)v256 - 16 * v245);
    __n128 v269 = v256;
    if (v268 < v244)
    {
      __n128 v269 = v256;
      do
      {
        *(_OWORD *)__n128 v269 = *(_OWORD *)v268;
        __n128 v269 = (geo::codec::VectorTile *)((char *)v269 + 16);
        *(void *)unsigned int v268 = 0;
        *((void *)v268 + 1) = 0;
        unsigned int v268 = (geo::codec::VectorTile *)((char *)v268 + 16);
      }
      while (v268 < v244);
    }
    i[119] = v269;
    if (v256 != (geo::codec::VectorTile *)v267)
    {
      long long v270 = (unint64_t *)((char *)v256 - 8);
      uint64_t v271 = 16 * ((v256 - (geo::codec::VectorTile *)v267) >> 4);
      uint64_t v272 = (uint64_t)v246 + 16 * v34 - 16;
      do
      {
        __n128 v273 = (void *)(v272 + v271);
        long long v274 = *(_OWORD *)(v272 + v271);
        void *v273 = 0;
        v273[1] = 0;
        unint64_t v34 = *v270;
        *(_OWORD *)(v270 - 1) = v274;
        if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
        }
        v270 -= 2;
        v271 -= 16;
      }
      while (v271);
    }
    for (uint64_t i = v471; v242 != v254; v247 = (geo::codec::VectorTile *)((char *)v247 + 16))
    {
      uint64_t v276 = *(void *)v242;
      uint64_t v275 = *((void *)v242 + 1);
      if (v275) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v275 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v34 = *((void *)v247 + 1);
      *(void *)unsigned int v247 = v276;
      *((void *)v247 + 1) = v275;
      if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
      }
      v242 += 16;
    }
    goto LABEL_421;
  }
  unint64_t v249 = v34 + v245;
  if ((v34 + v245) >> 60) {
    abort();
  }
  uint64_t v250 = v248 - v246;
  if (v250 >> 3 > v249) {
    unint64_t v249 = v250 >> 3;
  }
  if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v251 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v251 = v249;
  }
  if (v251)
  {
    if (v251 >> 60) {
      goto LABEL_793;
    }
    uint64_t v252 = (char *)operator new(16 * v251);
  }
  else
  {
    uint64_t v252 = 0;
  }
  unsigned int v258 = &v252[16 * v34];
  long long v259 = (geo::codec::VectorTile *)&v258[16 * v245];
  uint64_t v260 = (geo::codec::VectorTile *)v258;
  do
  {
    *(void *)uint64_t v260 = *(void *)v242;
    uint64_t v261 = *((void *)v242 + 1);
    *((void *)v260 + 1) = v261;
    if (v261) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v261 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v260 = (geo::codec::VectorTile *)((char *)v260 + 16);
    v242 += 16;
  }
  while (v260 != v259);
  __n128 v262 = i[118];
  if (v262 != v247)
  {
    uint64_t v263 = v247;
    do
    {
      long long v264 = *((_OWORD *)v263 - 1);
      uint64_t v263 = (geo::codec::VectorTile *)((char *)v263 - 16);
      *((_OWORD *)v258 - 1) = v264;
      v258 -= 16;
      *(void *)uint64_t v263 = 0;
      *((void *)v263 + 1) = 0;
    }
    while (v263 != v262);
  }
  int v265 = i[119];
  if (v265 != v247)
  {
    do
    {
      *(_OWORD *)long long v259 = *(_OWORD *)v247;
      long long v259 = (geo::codec::VectorTile *)((char *)v259 + 16);
      *(void *)unsigned int v247 = 0;
      *((void *)v247 + 1) = 0;
      unsigned int v247 = (geo::codec::VectorTile *)((char *)v247 + 16);
    }
    while (v247 != v265);
    unsigned int v247 = i[119];
  }
  unint64_t v34 = (unint64_t)i[118];
  i[118] = (geo::codec::VectorTile *)v258;
  i[119] = v259;
  for (i[120] = (geo::codec::VectorTile *)&v252[16 * v251];
        v247 != (geo::codec::VectorTile *)v34;
        unsigned int v247 = (geo::codec::VectorTile *)((char *)v247 - 16))
  {
    int v266 = (std::__shared_weak_count *)*((void *)v247 - 1);
    if (v266 && !atomic_fetch_add(&v266->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  if (v34) {
    operator delete((void *)v34);
  }
LABEL_421:
  size_t v277 = (char *)i[130];
  __n128 v278 = (char *)i[131];
  if (v278 - v277 < 1) {
    goto LABEL_477;
  }
  uint32x2_t v279 = i[119];
  uint64_t v280 = (v278 - v277) >> 4;
  unint64_t v281 = i[118];
  unint64_t v34 = (v279 - v281) >> 4;
  long long v282 = (geo::codec::VectorTile *)((char *)v281 + ((v279 - v281) & 0xFFFFFFFFFFFFFFF0));
  __n128 v283 = i[120];
  if (v280 <= (v283 - v279) >> 4)
  {
    uint64_t v288 = (v279 - v282) >> 4;
    if (v288 >= v280)
    {
      long long v289 = &v277[16 * v280];
      uint64_t v291 = i[119];
    }
    else
    {
      long long v289 = &v277[16 * v288];
      if (v289 == v278)
      {
        uint64_t v291 = i[119];
      }
      else
      {
        uint32x2_t v290 = &v277[16 * v288];
        uint64_t v291 = i[119];
        do
        {
          *(void *)uint64_t v291 = *(void *)v290;
          uint64_t v292 = *((void *)v290 + 1);
          *((void *)v291 + 1) = v292;
          if (v292) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v292 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v291 = (geo::codec::VectorTile *)((char *)v291 + 16);
          v290 += 16;
        }
        while (v290 != v278);
      }
      i[119] = v291;
      if (v279 - v282 < 1) {
        goto LABEL_477;
      }
    }
    long long v302 = (char *)v282 + 16 * v280;
    uint64_t v303 = (geo::codec::VectorTile *)((char *)v291 - 16 * v280);
    uint64_t v304 = v291;
    if (v303 < v279)
    {
      uint64_t v304 = v291;
      do
      {
        *(_OWORD *)uint64_t v304 = *(_OWORD *)v303;
        uint64_t v304 = (geo::codec::VectorTile *)((char *)v304 + 16);
        *(void *)uint64_t v303 = 0;
        *((void *)v303 + 1) = 0;
        uint64_t v303 = (geo::codec::VectorTile *)((char *)v303 + 16);
      }
      while (v303 < v279);
    }
    i[119] = v304;
    if (v291 != (geo::codec::VectorTile *)v302)
    {
      uint64_t v305 = (unint64_t *)((char *)v291 - 8);
      uint64_t v306 = 16 * ((v291 - (geo::codec::VectorTile *)v302) >> 4);
      uint64_t v307 = (uint64_t)v281 + 16 * v34 - 16;
      do
      {
        BOOL v308 = (void *)(v307 + v306);
        long long v309 = *(_OWORD *)(v307 + v306);
        *BOOL v308 = 0;
        v308[1] = 0;
        unint64_t v34 = *v305;
        *(_OWORD *)(v305 - 1) = v309;
        if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
        }
        v305 -= 2;
        v306 -= 16;
      }
      while (v306);
    }
    for (i = v471; v277 != v289; long long v282 = (geo::codec::VectorTile *)((char *)v282 + 16))
    {
      uint64_t v311 = *(void *)v277;
      uint64_t v310 = *((void *)v277 + 1);
      if (v310) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v310 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v34 = *((void *)v282 + 1);
      *(void *)long long v282 = v311;
      *((void *)v282 + 1) = v310;
      if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
      }
      v277 += 16;
    }
    goto LABEL_477;
  }
  unint64_t v284 = v34 + v280;
  if ((v34 + v280) >> 60) {
    abort();
  }
  uint64_t v285 = v283 - v281;
  if (v285 >> 3 > v284) {
    unint64_t v284 = v285 >> 3;
  }
  if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v286 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v286 = v284;
  }
  if (v286)
  {
    if (v286 >> 60) {
      goto LABEL_793;
    }
    unint64_t v287 = (char *)operator new(16 * v286);
  }
  else
  {
    unint64_t v287 = 0;
  }
  long long v293 = &v287[16 * v34];
  long long v294 = (geo::codec::VectorTile *)&v293[16 * v280];
  float32x4_t v295 = (geo::codec::VectorTile *)v293;
  do
  {
    *(void *)float32x4_t v295 = *(void *)v277;
    uint64_t v296 = *((void *)v277 + 1);
    *((void *)v295 + 1) = v296;
    if (v296) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v296 + 8), 1uLL, memory_order_relaxed);
    }
    float32x4_t v295 = (geo::codec::VectorTile *)((char *)v295 + 16);
    v277 += 16;
  }
  while (v295 != v294);
  int8x16_t v297 = i[118];
  if (v297 != v282)
  {
    unint64_t v298 = v282;
    do
    {
      long long v299 = *((_OWORD *)v298 - 1);
      unint64_t v298 = (geo::codec::VectorTile *)((char *)v298 - 16);
      *((_OWORD *)v293 - 1) = v299;
      v293 -= 16;
      *(void *)unint64_t v298 = 0;
      *((void *)v298 + 1) = 0;
    }
    while (v298 != v297);
  }
  long long v300 = i[119];
  if (v300 != v282)
  {
    do
    {
      *(_OWORD *)long long v294 = *(_OWORD *)v282;
      long long v294 = (geo::codec::VectorTile *)((char *)v294 + 16);
      *(void *)long long v282 = 0;
      *((void *)v282 + 1) = 0;
      long long v282 = (geo::codec::VectorTile *)((char *)v282 + 16);
    }
    while (v282 != v300);
    long long v282 = i[119];
  }
  unint64_t v34 = (unint64_t)i[118];
  i[118] = (geo::codec::VectorTile *)v293;
  i[119] = v294;
  for (i[120] = (geo::codec::VectorTile *)&v287[16 * v286];
        v282 != (geo::codec::VectorTile *)v34;
        long long v282 = (geo::codec::VectorTile *)((char *)v282 - 16))
  {
    uint32x2_t v301 = (std::__shared_weak_count *)*((void *)v282 - 1);
    if (v301 && !atomic_fetch_add(&v301->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  if (v34) {
    operator delete((void *)v34);
  }
LABEL_477:
  unint64_t v312 = (void **)(i + 121);
  unint64_t v313 = (char *)i[124];
  long long v314 = (char *)i[125];
  unint64_t v315 = (v314 - v313) >> 4;
  uint64_t v316 = (uint64_t)i[123];
  unint64_t v317 = i[121];
  if (v315 <= (v316 - (uint64_t)v317) >> 4)
  {
    long long v321 = i[122];
    unint64_t v322 = (v321 - v317) >> 4;
    if (v322 >= v315)
    {
      if (v313 != v314)
      {
        do
        {
          uint64_t v327 = *(void *)v313;
          uint64_t v326 = *((void *)v313 + 1);
          if (v326) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v326 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v34 = *((void *)v317 + 1);
          *(void *)unint64_t v317 = v327;
          *((void *)v317 + 1) = v326;
          if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
          }
          unint64_t v317 = (geo::codec::VectorTile *)((char *)v317 + 16);
          v313 += 16;
        }
        while (v313 != v314);
        long long v321 = v471[122];
      }
      for (; v321 != v317; long long v321 = (geo::codec::VectorTile *)((char *)v321 - 16))
      {
        unint64_t v34 = *((void *)v321 - 1);
        if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
        }
      }
      uint64_t j = v471;
    }
    else
    {
      long long v323 = &v313[16 * v322];
      if (v321 == v317)
      {
        uint64_t j = v471;
      }
      else
      {
        do
        {
          uint64_t v325 = *(void *)v313;
          uint64_t v324 = *((void *)v313 + 1);
          if (v324) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v324 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v34 = *((void *)v317 + 1);
          *(void *)unint64_t v317 = v325;
          *((void *)v317 + 1) = v324;
          if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
          }
          v313 += 16;
          unint64_t v317 = (geo::codec::VectorTile *)((char *)v317 + 16);
        }
        while (v313 != v323);
        uint64_t j = v471;
        unint64_t v317 = v471[122];
      }
      uint64_t v331 = v317;
      if (v323 != v314)
      {
        uint64_t v331 = v317;
        do
        {
          *(void *)uint64_t v331 = *(void *)v323;
          uint64_t v332 = *((void *)v323 + 1);
          *((void *)v331 + 1) = v332;
          if (v332) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v332 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v331 = (geo::codec::VectorTile *)((char *)v331 + 16);
          v323 += 16;
        }
        while (v323 != v314);
      }
      unint64_t v317 = v331;
    }
  }
  else
  {
    if (v317)
    {
      int v318 = v471[122];
      unsigned int v319 = i[121];
      if (v318 != v317)
      {
        do
        {
          char v320 = (std::__shared_weak_count *)*((void *)v318 - 1);
          if (v320 && !atomic_fetch_add(&v320->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v320);
          }
          int v318 = (geo::codec::VectorTile *)((char *)v318 - 16);
        }
        while (v318 != v317);
        unsigned int v319 = (geo::codec::VectorTile *)*v312;
      }
      v471[122] = v317;
      operator delete(v319);
      uint64_t v316 = 0;
      *unint64_t v312 = 0;
      i[122] = 0;
      i[123] = 0;
    }
    if (v314 - v313 < 0) {
      goto LABEL_798;
    }
    uint64_t v328 = v316 >> 3;
    if (v316 >> 3 <= v315) {
      uint64_t v328 = (v314 - v313) >> 4;
    }
    unint64_t v34 = (unint64_t)v316 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v328;
    if (v34 >> 60) {
LABEL_798:
    }
      abort();
    unint64_t v317 = (geo::codec::VectorTile *)operator new(16 * v34);
    uint64_t j = v471;
    v471[121] = v317;
    v471[122] = v317;
    for (v471[123] = (geo::codec::VectorTile *)((char *)v317 + 16 * v34); v313 != v314; v313 += 16)
    {
      *(void *)unint64_t v317 = *(void *)v313;
      uint64_t v330 = *((void *)v313 + 1);
      *((void *)v317 + 1) = v330;
      if (v330) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v330 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v317 = (geo::codec::VectorTile *)((char *)v317 + 16);
    }
  }
  j[122] = v317;
  long long v333 = (char *)j[127];
  uint64_t v334 = (char *)j[128];
  if (v334 - v333 >= 1)
  {
    uint64_t v335 = (v334 - v333) >> 4;
    unint64_t v336 = j[121];
    unint64_t v34 = (v317 - v336) >> 4;
    long long v337 = (geo::codec::VectorTile *)((char *)v336 + ((v317 - v336) & 0xFFFFFFFFFFFFFFF0));
    long long v338 = j[123];
    if (v335 > (v338 - v317) >> 4)
    {
      if ((v34 + v335) >> 60) {
        abort();
      }
      uint64_t v339 = v338 - v336;
      uint64_t v340 = v339 >> 3;
      if (v339 >> 3 <= v34 + v335) {
        uint64_t v340 = v34 + v335;
      }
      if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v341 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v341 = v340;
      }
      if (!v341)
      {
        long long v342 = 0;
LABEL_551:
        int v348 = &v342[16 * v34];
        uint64_t v349 = (geo::codec::VectorTile *)&v348[16 * v335];
        uint64_t v350 = (geo::codec::VectorTile *)v348;
        do
        {
          *(void *)uint64_t v350 = *(void *)v333;
          uint64_t v351 = *((void *)v333 + 1);
          *((void *)v350 + 1) = v351;
          if (v351) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v351 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v350 = (geo::codec::VectorTile *)((char *)v350 + 16);
          v333 += 16;
        }
        while (v350 != v349);
        uint64_t v352 = (geo::codec::VectorTile *)*v312;
        if (*v312 != v337)
        {
          uint64_t v353 = v337;
          do
          {
            long long v354 = *((_OWORD *)v353 - 1);
            uint64_t v353 = (geo::codec::VectorTile *)((char *)v353 - 16);
            *((_OWORD *)v348 - 1) = v354;
            v348 -= 16;
            *(void *)uint64_t v353 = 0;
            *((void *)v353 + 1) = 0;
          }
          while (v353 != v352);
        }
        unint64_t v355 = j[122];
        if (v355 != v337)
        {
          do
          {
            *(_OWORD *)uint64_t v349 = *(_OWORD *)v337;
            uint64_t v349 = (geo::codec::VectorTile *)((char *)v349 + 16);
            *(void *)long long v337 = 0;
            *((void *)v337 + 1) = 0;
            long long v337 = (geo::codec::VectorTile *)((char *)v337 + 16);
          }
          while (v337 != v355);
          long long v337 = j[122];
        }
        unint64_t v34 = (unint64_t)j[121];
        j[121] = (geo::codec::VectorTile *)v348;
        j[122] = v349;
        for (j[123] = (geo::codec::VectorTile *)&v342[16 * v341];
              v337 != (geo::codec::VectorTile *)v34;
              long long v337 = (geo::codec::VectorTile *)((char *)v337 - 16))
        {
          unint64_t v356 = (std::__shared_weak_count *)*((void *)v337 - 1);
          if (v356 && !atomic_fetch_add(&v356->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
            std::__shared_weak_count::__release_weak(v356);
          }
        }
        if (v34) {
          operator delete((void *)v34);
        }
        goto LABEL_588;
      }
      if (!(v341 >> 60))
      {
        long long v342 = (char *)operator new(16 * v341);
        goto LABEL_551;
      }
LABEL_793:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v343 = (v317 - v337) >> 4;
    if (v343 >= v335)
    {
      uint64_t v344 = &v333[16 * v335];
      uint64_t v346 = v317;
LABEL_571:
      uint64_t v357 = (char *)v337 + 16 * v335;
      unint64_t v358 = (geo::codec::VectorTile *)((char *)v346 - 16 * v335);
      int v359 = v346;
      if (v358 < v317)
      {
        int v359 = v346;
        do
        {
          *(_OWORD *)int v359 = *(_OWORD *)v358;
          int v359 = (geo::codec::VectorTile *)((char *)v359 + 16);
          *(void *)unint64_t v358 = 0;
          *((void *)v358 + 1) = 0;
          unint64_t v358 = (geo::codec::VectorTile *)((char *)v358 + 16);
        }
        while (v358 < v317);
      }
      j[122] = v359;
      if (v346 != (geo::codec::VectorTile *)v357)
      {
        uint64_t v360 = (unint64_t *)((char *)v346 - 8);
        uint64_t v361 = 16 * ((v346 - (geo::codec::VectorTile *)v357) >> 4);
        uint64_t v362 = (uint64_t)v336 + 16 * v34 - 16;
        do
        {
          BOOL v363 = (void *)(v362 + v361);
          long long v364 = *(_OWORD *)(v362 + v361);
          *BOOL v363 = 0;
          v363[1] = 0;
          unint64_t v34 = *v360;
          *(_OWORD *)(v360 - 1) = v364;
          if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
          }
          v360 -= 2;
          v361 -= 16;
        }
        while (v361);
      }
      for (j = v471; v333 != v344; long long v337 = (geo::codec::VectorTile *)((char *)v337 + 16))
      {
        uint64_t v366 = *(void *)v333;
        uint64_t v365 = *((void *)v333 + 1);
        if (v365) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v365 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v34 = *((void *)v337 + 1);
        *(void *)long long v337 = v366;
        *((void *)v337 + 1) = v365;
        if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(unint64_t))(*(void *)v34 + 16))(v34);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v34);
        }
        v333 += 16;
      }
      goto LABEL_588;
    }
    uint64_t v344 = &v333[16 * v343];
    if (v344 == v334)
    {
      uint64_t v346 = v317;
    }
    else
    {
      uint64_t v345 = &v333[16 * v343];
      uint64_t v346 = v317;
      do
      {
        *(void *)uint64_t v346 = *(void *)v345;
        uint64_t v347 = *((void *)v345 + 1);
        *((void *)v346 + 1) = v347;
        if (v347) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v347 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v346 = (geo::codec::VectorTile *)((char *)v346 + 16);
        v345 += 16;
      }
      while (v345 != v334);
    }
    j[122] = v346;
    if (v317 - v337 >= 1) {
      goto LABEL_571;
    }
  }
LABEL_588:
  if (j[160])
  {
    unint64_t v34 = (unint64_t)j[159];
    if (v34)
    {
      do
      {
        unint64_t v452 = *(void *)v34;
        int v453 = *(void **)(v34 + 40);
        if (v453)
        {
          do
          {
            int v454 = (void *)*v453;
            operator delete(v453);
            int v453 = v454;
          }
          while (v454);
        }
        uint64_t v455 = *(void **)(v34 + 24);
        *(void *)(v34 + 24) = 0;
        if (v455) {
          operator delete(v455);
        }
        operator delete((void *)v34);
        unint64_t v34 = v452;
      }
      while (v452);
    }
    j[159] = 0;
    char v367 = j[158];
    if (v367)
    {
      for (unint64_t k = 0; k != v367; unint64_t k = (geo::codec::VectorTile *)((char *)k + 1))
        *((void *)j[157] + (void)k) = 0;
    }
    j[160] = 0;
  }
  uint64_t v369 = j[118];
  v480 = j[119];
  if (v369 != v480)
  {
    v370 = (std::__shared_weak_count *)(j + 159);
    while (1)
    {
      uint64_t v371 = *(void *)(*(void *)v369 + 8);
      unsigned __int16 v372 = *(_WORD *)(v371 + 276);
      if (v372) {
        break;
      }
LABEL_596:
      uint64_t v369 = (geo::codec::VectorTile *)((char *)v369 + 16);
      if (v369 == v480) {
        goto LABEL_783;
      }
    }
    int v373 = 0;
    while (1)
    {
      unint64_t v374 = *(void *)(*((void *)j[90] + 200) + 8 * (*(_DWORD *)(v371 + 288) + v373));
      unint64_t v375 = j[108];
      if (v374 < 0x4EC4EC4EC4EC4EC5 * ((j[109] - v375) >> 3)) {
        break;
      }
LABEL_603:
      if (++v373 >= v372) {
        goto LABEL_596;
      }
    }
    unint64_t v376 = *(void *)(*((void *)v375 + 13 * v374 + 2) + 40);
    unint64_t v377 = (unint64_t)j[158];
    if (v377)
    {
      uint8x8_t v378 = (uint8x8_t)vcnt_s8((int8x8_t)v377);
      v378.i16[0] = vaddlv_u8(v378);
      if (v378.u32[0] > 1uLL)
      {
        unint64_t v34 = *(void *)(*((void *)v375 + 13 * v374 + 2) + 40);
        if (v376 >= v377) {
          unint64_t v34 = v376 % v377;
        }
      }
      else
      {
        unint64_t v34 = (v377 - 1) & v376;
      }
      uint64_t v379 = (void **)*((void *)j[157] + v34);
      if (v379)
      {
        v380 = (char *)*v379;
        if (*v379)
        {
          if (v378.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v382 = *((void *)v380 + 1);
              if (v382 == v376)
              {
                if (*((void *)v380 + 2) == v376) {
                  goto LABEL_685;
                }
              }
              else if ((v382 & (v377 - 1)) != v34)
              {
                goto LABEL_625;
              }
              v380 = *(char **)v380;
              if (!v380) {
                goto LABEL_625;
              }
            }
          }
          do
          {
            unint64_t v381 = *((void *)v380 + 1);
            if (v381 == v376)
            {
              if (*((void *)v380 + 2) == v376) {
                goto LABEL_685;
              }
            }
            else
            {
              if (v381 >= v377) {
                v381 %= v377;
              }
              if (v381 != v34) {
                break;
              }
            }
            v380 = *(char **)v380;
          }
          while (v380);
        }
      }
    }
LABEL_625:
    v380 = (char *)operator new(0x40uLL);
    v491 = (std::__shared_weak_count *)v380;
    v492 = v370;
    *(void *)v380 = 0;
    *((void *)v380 + 1) = v376;
    *((void *)v380 + 2) = v376;
    *(_OWORD *)(v380 + 24) = 0u;
    *(_OWORD *)(v380 + 40) = 0u;
    *((_DWORD *)v380 + 14) = 1065353216;
    char v493 = 1;
    float v383 = (float)((unint64_t)j[160] + 1);
    float v384 = *((float *)j + 322);
    if (v377 && (float)(v384 * (float)v377) >= v383)
    {
LABEL_675:
      size_t v407 = j[157];
      unsigned int v408 = (void *)*((void *)v407 + v34);
      if (v408)
      {
        *(void *)v380 = *v408;
      }
      else
      {
        *(void *)v380 = v370->__vftable;
        v370->__vftable = (std::__shared_weak_count_vtbl *)v380;
        *((void *)v407 + v34) = v370;
        if (!*(void *)v380)
        {
LABEL_684:
          j[160] = (geo::codec::VectorTile *)((char *)j[160] + 1);
LABEL_685:
          uint64_t v410 = *(void *)v369;
          uint64_t v411 = HIDWORD(*(void *)v369);
          unint64_t v412 = 0x9DDFEA08EB382D69 * ((8 * *(void *)v369 + 8) ^ v411);
          unint64_t v413 = (0x9DDFEA08EB382D69 * (v411 ^ (v412 >> 47) ^ v412)) ^ ((0x9DDFEA08EB382D69
                                                                         * (v411 ^ (v412 >> 47) ^ v412)) >> 47);
          unint64_t v414 = 0x9DDFEA08EB382D69 * v413;
          unint64_t v415 = *((void *)v380 + 4);
          if (v415)
          {
            uint8x8_t v416 = (uint8x8_t)vcnt_s8((int8x8_t)v415);
            v416.i16[0] = vaddlv_u8(v416);
            if (v416.u32[0] > 1uLL)
            {
              unint64_t v34 = 0x9DDFEA08EB382D69 * v413;
              if (v414 >= v415) {
                unint64_t v34 = v414 % v415;
              }
            }
            else
            {
              unint64_t v34 = v414 & (v415 - 1);
            }
            v417 = *(void **)(*((void *)v380 + 3) + 8 * v34);
            if (v417)
            {
              v418 = (void *)*v417;
              if (v418)
              {
                if (v416.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v420 = v418[1];
                    if (v420 == v414)
                    {
                      if (v418[2] == v410) {
                        goto LABEL_602;
                      }
                    }
                    else if ((v420 & (v415 - 1)) != v34)
                    {
                      goto LABEL_705;
                    }
                    v418 = (void *)*v418;
                    if (!v418) {
                      goto LABEL_705;
                    }
                  }
                }
                do
                {
                  unint64_t v419 = v418[1];
                  if (v419 == v414)
                  {
                    if (v418[2] == v410) {
                      goto LABEL_602;
                    }
                  }
                  else
                  {
                    if (v419 >= v415) {
                      v419 %= v415;
                    }
                    if (v419 != v34) {
                      break;
                    }
                  }
                  v418 = (void *)*v418;
                }
                while (v418);
              }
            }
          }
LABEL_705:
          int v421 = operator new(0x18uLL);
          *int v421 = 0;
          v421[1] = v414;
          v421[2] = v410;
          float v422 = (float)(unint64_t)(*((void *)v380 + 6) + 1);
          float v423 = *((float *)v380 + 14);
          if (v415 && (float)(v423 * (float)v415) >= v422)
          {
LABEL_771:
            uint64_t v449 = *((void *)v380 + 3);
            uint64_t v450 = *(void **)(v449 + 8 * v34);
            if (v450)
            {
              *int v421 = *v450;
            }
            else
            {
              *int v421 = *((void *)v380 + 5);
              *((void *)v380 + 5) = v421;
              *(void *)(v449 + 8 * v34) = v380 + 40;
              if (!*v421)
              {
LABEL_601:
                ++*((void *)v380 + 6);
LABEL_602:
                unsigned __int16 v372 = *(_WORD *)(v371 + 276);
                uint64_t j = v471;
                goto LABEL_603;
              }
              unint64_t v451 = *(void *)(*v421 + 8);
              if ((v415 & (v415 - 1)) != 0)
              {
                if (v451 >= v415) {
                  v451 %= v415;
                }
              }
              else
              {
                v451 &= v415 - 1;
              }
              uint64_t v450 = (void *)(*((void *)v380 + 3) + 8 * v451);
            }
            *uint64_t v450 = v421;
            goto LABEL_601;
          }
          BOOL v424 = (v415 & (v415 - 1)) != 0;
          if (v415 < 3) {
            BOOL v424 = 1;
          }
          unint64_t v425 = v424 | (2 * v415);
          unint64_t v426 = vcvtps_u32_f32(v422 / v423);
          if (v425 <= v426) {
            size_t prime = v426;
          }
          else {
            size_t prime = v425;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
            unint64_t v415 = *((void *)v380 + 4);
          }
          if (prime <= v415)
          {
            if (prime >= v415) {
              goto LABEL_766;
            }
            unint64_t v440 = vcvtps_u32_f32((float)*((unint64_t *)v380 + 6) / *((float *)v380 + 14));
            if (v415 < 3
              || (uint8x8_t v441 = (uint8x8_t)vcnt_s8((int8x8_t)v415), v441.i16[0] = vaddlv_u8(v441), v441.u32[0] > 1uLL))
            {
              unint64_t v440 = std::__next_prime(v440);
            }
            else
            {
              uint64_t v442 = 1 << -(char)__clz(v440 - 1);
              if (v440 >= 2) {
                unint64_t v440 = v442;
              }
            }
            if (prime <= v440) {
              size_t prime = v440;
            }
            if (prime >= v415) {
              goto LABEL_766;
            }
            if (!prime)
            {
              uint64_t v448 = (void *)*((void *)v380 + 3);
              *((void *)v380 + 3) = 0;
              if (v448) {
                operator delete(v448);
              }
              *((void *)v380 + 4) = 0;
              goto LABEL_766;
            }
          }
          if (prime >> 61) {
            goto LABEL_793;
          }
          v428 = operator new(8 * prime);
          int v429 = (void *)*((void *)v380 + 3);
          *((void *)v380 + 3) = v428;
          if (v429) {
            operator delete(v429);
          }
          uint64_t v430 = 0;
          *((void *)v380 + 4) = prime;
          do
            *(void *)(*((void *)v380 + 3) + 8 * v430++) = 0;
          while (prime != v430);
          v432 = v380 + 40;
          v431 = (void *)*((void *)v380 + 5);
          if (!v431) {
            goto LABEL_766;
          }
          size_t v433 = v431[1];
          size_t v434 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            size_t v435 = v433 & v434;
            *(void *)(*((void *)v380 + 3) + 8 * v435) = v432;
            while (1)
            {
              v436 = (void *)*v431;
              if (!*v431) {
                break;
              }
              size_t v437 = v436[1] & v434;
              if (v437 == v435)
              {
                v431 = (void *)*v431;
              }
              else
              {
                uint64_t v438 = *((void *)v380 + 3);
                if (*(void *)(v438 + 8 * v437))
                {
                  void *v431 = *v436;
                  uint64_t v439 = 8 * v437;
                  void *v436 = **(void **)(*((void *)v380 + 3) + v439);
                  **(void **)(*((void *)v380 + 3) + v439) = v436;
                }
                else
                {
                  *(void *)(v438 + 8 * v437) = v431;
                  v431 = v436;
                  size_t v435 = v437;
                }
              }
            }
LABEL_766:
            unint64_t v415 = *((void *)v380 + 4);
            if ((v415 & (v415 - 1)) != 0)
            {
              if (v414 >= v415) {
                unint64_t v34 = v414 % v415;
              }
              else {
                unint64_t v34 = v414;
              }
            }
            else
            {
              unint64_t v34 = (v415 - 1) & v414;
            }
            goto LABEL_771;
          }
          if (v433 >= prime) {
            v433 %= prime;
          }
          *(void *)(*((void *)v380 + 3) + 8 * v433) = v432;
          v443 = (void *)*v431;
          if (!*v431) {
            goto LABEL_766;
          }
          while (1)
          {
            size_t v445 = v443[1];
            if (v445 >= prime) {
              v445 %= prime;
            }
            if (v445 != v433)
            {
              uint64_t v446 = *((void *)v380 + 3);
              if (!*(void *)(v446 + 8 * v445))
              {
                *(void *)(v446 + 8 * v445) = v431;
                goto LABEL_743;
              }
              void *v431 = *v443;
              uint64_t v444 = 8 * v445;
              void *v443 = **(void **)(*((void *)v380 + 3) + v444);
              **(void **)(*((void *)v380 + 3) + v444) = v443;
              v443 = v431;
            }
            size_t v445 = v433;
LABEL_743:
            v431 = v443;
            v443 = (void *)*v443;
            size_t v433 = v445;
            if (!v443) {
              goto LABEL_766;
            }
          }
        }
        unint64_t v409 = *(void *)(*(void *)v380 + 8);
        if ((v377 & (v377 - 1)) != 0)
        {
          if (v409 >= v377) {
            v409 %= v377;
          }
        }
        else
        {
          v409 &= v377 - 1;
        }
        unsigned int v408 = (void *)((char *)j[157] + 8 * v409);
      }
      *unsigned int v408 = v380;
      goto LABEL_684;
    }
    BOOL v385 = (v377 & (v377 - 1)) != 0;
    if (v377 < 3) {
      BOOL v385 = 1;
    }
    unint64_t v386 = v385 | (2 * v377);
    unint64_t v387 = vcvtps_u32_f32(v383 / v384);
    if (v386 <= v387) {
      size_t v388 = v387;
    }
    else {
      size_t v388 = v386;
    }
    if (v388 == 1)
    {
      size_t v388 = 2;
    }
    else if ((v388 & (v388 - 1)) != 0)
    {
      size_t v388 = std::__next_prime(v388);
      unint64_t v377 = (unint64_t)j[158];
    }
    if (v388 <= v377)
    {
      if (v388 >= v377) {
        goto LABEL_662;
      }
      unint64_t v400 = vcvtps_u32_f32((float)(unint64_t)j[160] / *((float *)j + 322));
      if (v377 < 3 || (uint8x8_t v401 = (uint8x8_t)vcnt_s8((int8x8_t)v377), v401.i16[0] = vaddlv_u8(v401), v401.u32[0] > 1uLL))
      {
        unint64_t v400 = std::__next_prime(v400);
      }
      else
      {
        uint64_t v402 = 1 << -(char)__clz(v400 - 1);
        if (v400 >= 2) {
          unint64_t v400 = v402;
        }
      }
      if (v388 <= v400) {
        size_t v388 = v400;
      }
      if (v388 >= v377)
      {
        unint64_t v377 = (unint64_t)j[158];
LABEL_662:
        if ((v377 & (v377 - 1)) != 0)
        {
          if (v376 >= v377) {
            unint64_t v34 = v376 % v377;
          }
          else {
            unint64_t v34 = v376;
          }
        }
        else
        {
          unint64_t v34 = (v377 - 1) & v376;
        }
        goto LABEL_675;
      }
      if (!v388)
      {
        uint64_t v447 = j[157];
        j[157] = 0;
        if (v447) {
          operator delete(v447);
        }
        unint64_t v377 = 0;
        j[158] = 0;
        goto LABEL_662;
      }
    }
    if (v388 >> 61) {
      goto LABEL_793;
    }
    int v389 = (geo::codec::VectorTile *)operator new(8 * v388);
    v390 = j[157];
    j[157] = v389;
    if (v390) {
      operator delete(v390);
    }
    uint64_t v391 = 0;
    j[158] = (geo::codec::VectorTile *)v388;
    do
      *((void *)j[157] + v391++) = 0;
    while (v388 != v391);
    v392 = v370->__vftable;
    if (!v370->__vftable)
    {
LABEL_661:
      unint64_t v377 = v388;
      goto LABEL_662;
    }
    size_t v393 = (size_t)v392->~__shared_weak_count_0;
    size_t v394 = v388 - 1;
    if ((v388 & (v388 - 1)) == 0)
    {
      size_t v395 = v393 & v394;
      *((void *)j[157] + v395) = v370;
      for (m = v392->~__shared_weak_count; v392->~__shared_weak_count; m = v392->~__shared_weak_count)
      {
        size_t v397 = *((void *)m + 1) & v394;
        if (v397 == v395)
        {
          v392 = (std::__shared_weak_count_vtbl *)m;
        }
        else
        {
          size_t v398 = j[157];
          if (*((void *)v398 + v397))
          {
            v392->~__shared_weak_count = *(void (__cdecl **)(std::__shared_weak_count *__hidden))m;
            uint64_t v399 = 8 * v397;
            *(void *)m = **(void **)((char *)j[157] + v399);
            **(void **)((char *)j[157] + v399) = m;
          }
          else
          {
            *((void *)v398 + v397) = v392;
            v392 = (std::__shared_weak_count_vtbl *)m;
            size_t v395 = v397;
          }
        }
      }
      goto LABEL_661;
    }
    if (v393 >= v388) {
      v393 %= v388;
    }
    *((void *)j[157] + v393) = v370;
    v403 = (std::__shared_weak_count_vtbl *)v392->~__shared_weak_count;
    if (!v392->~__shared_weak_count) {
      goto LABEL_661;
    }
    while (1)
    {
      size_t v405 = (size_t)v403->~__shared_weak_count_0;
      if (v405 >= v388) {
        v405 %= v388;
      }
      if (v405 != v393)
      {
        size_t v406 = j[157];
        if (!*((void *)v406 + v405))
        {
          *((void *)v406 + v405) = v392;
          goto LABEL_666;
        }
        v392->~__shared_weak_count = v403->~__shared_weak_count;
        uint64_t v404 = 8 * v405;
        v403->~__shared_weak_count = **(void (__cdecl ***)(std::__shared_weak_count *__hidden))((char *)j[157] + v404);
        **(void **)((char *)j[157] + v404) = v403;
        v403 = v392;
      }
      size_t v405 = v393;
LABEL_666:
      v392 = v403;
      v403 = (std::__shared_weak_count_vtbl *)v403->~__shared_weak_count;
      size_t v393 = v405;
      if (!v403) {
        goto LABEL_661;
      }
    }
  }
LABEL_783:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v483);
  if (v472) {
    operator delete(v472);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v486);
  int16x8x2_t v456 = (void *)v489;
  if ((void)v489)
  {
    do
    {
      int16x8x2_t v457 = (void *)*v456;
      operator delete(v456);
      int16x8x2_t v456 = v457;
    }
    while (v457);
  }
  int8x16x2_t v458 = (void *)v488;
  *(void *)&long long v488 = 0;
  if (v458) {
    operator delete(v458);
  }
  if (v460) {
    operator delete(v460);
  }
}

void sub_1A2219F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *__p,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v34 - 112);
  if (v33) {
    operator delete(v33);
  }
  for (uint64_t i = a23; i != a24; ++i)
  {
    if (*i) {
      MEMORY[0x1A6239270](*i, 0x1020C4024DAA5DELL);
    }
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a29);
  if (a23) {
    operator delete(a23);
  }
  if (a20) {
    operator delete(a20);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a33);
  __n128 v37 = *(void **)(v34 - 144);
  if (v37)
  {
    do
    {
      size_t v38 = (void *)*v37;
      operator delete(v37);
      __n128 v37 = v38;
    }
    while (v38);
  }
  unint64_t v39 = *(void **)(v34 - 160);
  *(void *)(v34 - 160) = 0;
  if (v39)
  {
    operator delete(v39);
    if (!a11) {
LABEL_16:
    }
      _Unwind_Resume(a1);
  }
  else if (!a11)
  {
    goto LABEL_16;
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void ___ZN2md15TransitTileData24createDisplayConnectionsERN3ggl6LoaderE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 1216);
  uint64_t v186 = *(void **)(v2 + 16);
  if (*(void **)(v2 + 8) != v186)
  {
    float v3 = 1.0;
    uint64_t v4 = *(void **)(v2 + 8);
    do
    {
      float v187 = v4;
      uint64_t v5 = *v4;
      uint64_t v7 = *(void *)(v5 + 376);
      uint64_t v6 = *(void *)(v5 + 384);
      uint64_t v188 = v6;
      while (v7 != v6)
      {
        uint64_t v189 = v7;
        double v8 = *(void **)v7;
        uint64_t v191 = **(void **)(*(void *)(*(void *)v7 + 88) + 64);
        uint64_t v9 = *(void *)(v191 + 8);
        uint64_t v193 = v9 * *(void *)(*(void *)v7 + 8);
        uint64_t v195 = v9 * **(void **)v7;
        if (v193 == v195)
        {
          uint64_t v197 = 0;
        }
        else if (a2 && *(unsigned char *)(v191 + 17) != 2)
        {
          uint64_t v197 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v191, v195, v193, 1, 1);
        }
        else
        {
          uint64_t v197 = *(void *)(v191 + 72) + v195;
        }
        uint64_t v10 = v8;
        unint64_t v11 = v8[2];
        unint64_t v13 = v10[4];
        unint64_t v12 = v10[5];
        if (v12 == v13)
        {
          unint64_t v12 = v10[3];
        }
        else
        {
          if (v13 < v11) {
            unint64_t v11 = v10[4];
          }
          if (v10[3] > v12) {
            unint64_t v12 = v10[3];
          }
        }
        float v198 = v10;
        uint64_t v190 = *(void *)(v10[11] + 96);
        uint64_t v14 = *(void *)(v190 + 8);
        uint64_t v192 = v14 * v12;
        uint64_t v194 = v14 * v11;
        if (v14 * v12 == v14 * v11)
        {
          uint64_t v196 = 0;
        }
        else if (a2 && *(unsigned char *)(v190 + 17) != 2)
        {
          uint64_t v196 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v190, v194, v192, 1, 1);
        }
        else
        {
          uint64_t v196 = *(void *)(v190 + 72) + v194;
        }
        uint64_t v15 = v198[2];
        uint64_t v16 = v198[4];
        memset(v215, 0, sizeof(v215));
        memset(&__p, 0, sizeof(__p));
        uint64_t v17 = (uint64_t *)v198[7];
        unint64_t v19 = (uint64_t *)v198[8];
        unint64_t v18 = v198 + 7;
        if (v17 != v19)
        {
          uint64_t v20 = 2 * v11;
          uint64_t v21 = v196 + 2 * v16 - 2 * v11;
          float v22 = (_WORD *)(v196 + 2 * v15 - v20);
          uint64_t v23 = v197;
          float v200 = (uint64_t *)v198[8];
          while (1)
          {
            uint64_t v25 = *v17;
            *(_OWORD *)unint64_t v216 = xmmword_1A28FC870;
            *(_OWORD *)&v216[16] = xmmword_1A28FC880;
            uint64_t v26 = *(void *)(v25 + 16);
            if (v26 != *(void *)(v25 + 8)) {
              break;
            }
            uint64_t v24 = *(void *)(v25 + 16);
LABEL_28:
            v23 += 16 * (v24 - v26);
            v22 += *(void *)(v25 + 32) - *(void *)(v25 + 24);
            v21 += 2 * (*(void *)(v25 + 48) - *(void *)(v25 + 40));
            if (++v17 == v19) {
              goto LABEL_134;
            }
          }
          uint64_t v206 = v23;
          unint64_t v222 = 1;
          md::Ribbons::RibbonWriter<md::Ribbons::SolidTrafficRibbonDescriptor>::eliminateDuplicates(v25, v215, &__p, (uint64_t *)&v222);
          unint64_t v28 = v222;
          if (v222 >= 2)
          {
            unint64_t v205 = v222 - 2;
            uint64_t v203 = v21;
            float v29 = (float *)v215[0];
            int32x2_t v30 = *(int32x2_t *)v215[0];
            unint64_t v31 = v222 - 1;
            if (v222 >= 9)
            {
              unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
              v27.i64[1] = *(void *)v215[0];
              int8x16_t v35 = (int8x16_t)vdupq_lane_s32(v30, 0);
              unint64_t v36 = (char *)v215[0] + 40;
              float32x4_t v37 = 0uLL;
              unint64_t v38 = v31 & 0xFFFFFFFFFFFFFFF8;
              float32x4_t v39 = 0uLL;
              do
              {
                unint64_t v40 = (const float *)(v36 - 2);
                float32x4x2_t v224 = vld2q_f32(v40);
                int32x4_t v42 = *(int32x4_t *)v36;
                int8x16_t v41 = *((int8x16_t *)v36 + 1);
                v36 += 4;
                float32x4_t v43 = (float32x4_t)vuzp1q_s32(v42, (int32x4_t)v41);
                float32x4_t v44 = (float32x4_t)vuzp2q_s32(v42, (int32x4_t)v41);
                float32x4_t v45 = vsubq_f32(v224.val[0], (float32x4_t)vextq_s8(v35, (int8x16_t)v224.val[0], 0xCuLL));
                float32x4_t v46 = vsubq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v224.val[0], (int8x16_t)v43, 0xCuLL));
                float32x4_t v47 = vsubq_f32(v224.val[1], (float32x4_t)vextq_s8(v27, (int8x16_t)v224.val[1], 0xCuLL));
                v224.val[0] = vsubq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)v224.val[1], (int8x16_t)v44, 0xCuLL));
                float32x4_t v37 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v45, v45), v47, v47)), v37);
                float32x4_t v39 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v46, v46), v224.val[0], v224.val[0])), v39);
                int8x16_t v27 = (int8x16_t)v44;
                int8x16_t v35 = (int8x16_t)v43;
                v38 -= 8;
              }
              while (v38);
              float32x4_t v48 = vaddq_f32(v39, v37);
              float v33 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48));
              if (v31 != v32)
              {
                float32x2_t v34 = (float32x2_t)vextq_s8(v41, v41, 8uLL).u64[0];
                goto LABEL_38;
              }
              int8x8_t v49 = (_WORD *)v206;
            }
            else
            {
              unint64_t v32 = 0;
              float v33 = 0.0;
              float32x2_t v34 = *(float32x2_t *)v215[0];
LABEL_38:
              int8x8_t v49 = (_WORD *)v206;
              unint64_t v50 = ~v32 + v222;
              unint64_t v51 = (float32x2_t *)((char *)v215[0] + 8 * v32 + 8);
              do
              {
                float32x2_t v52 = *v51++;
                float32x2_t v53 = vsub_f32(v52, v34);
                float v33 = sqrtf(vaddv_f32(vmul_f32(v53, v53))) + v33;
                float32x2_t v34 = v52;
                --v50;
              }
              while (v50);
            }
            double v54 = v33;
            float v55 = v3 / v33;
            if (v54 <= 1.0e-10) {
              float v55 = 0.0;
            }
            float v209 = v55;
            uint8x8_t v56 = (float *)((char *)v215[0] + 8);
            float v57 = sqrtf((float)((float)(*((float *)v215[0] + 2) - *(float *)v30.i32)* (float)(*((float *)v215[0] + 2) - *(float *)v30.i32))+ (float)((float)(*((float *)v215[0] + 3) - *(float *)&v30.i32[1])* (float)(*((float *)v215[0] + 3) - *(float *)&v30.i32[1])));
            uint64_t v58 = 1;
            while (vabds_f32(*v56, *(float *)v30.i32) < 1.0e-10)
            {
              float v59 = v56[1];
              if (vabds_f32(v59, *(float *)&v30.i32[1]) >= 1.0e-10) {
                goto LABEL_48;
              }
              ++v58;
              v56 += 2;
              if (v222 == v58)
              {
                float v60 = 1.0;
                float v61 = 0.0;
                goto LABEL_49;
              }
            }
            float v59 = v56[1];
LABEL_48:
            float v62 = v59 - *(float *)&v30.i32[1];
            float v63 = *v56 - *(float *)v30.i32;
            float v64 = v3 / sqrtf((float)(v63 * v63) + (float)(v62 * v62));
            float v60 = v64 * v63;
            float v61 = v64 * v62;
LABEL_49:
            uint64_t v218 = 0;
            *(float *)&unint64_t v221 = -v61;
            *((float *)&v221 + 1) = v60;
            uint64_t v65 = v49;
            int v201 = *(unsigned __int8 *)(v25 + 96);
            if (*(unsigned char *)(v25 + 96))
            {
              *(float *)&uint64_t v219 = (float)-v61 - v60;
              *((float *)&v219 + 1) = v60 - v61;
              *(float *)&uint64_t v220 = v61 - v60;
              *((float *)&v220 + 1) = -(float)(v61 + v60);
              float v66 = fmaxf(*(float *)v30.i32, 0.0);
              BOOL v67 = v66 < v3;
              float v68 = v66 * 65535.0;
              if (!v67) {
                float v68 = 65535.0;
              }
              int v69 = (int)v68;
              float v70 = fmaxf(*(float *)&v30.i32[1], 0.0);
              BOOL v67 = v70 < v3;
              float v71 = v70 * 65535.0;
              if (!v67) {
                float v71 = 65535.0;
              }
              int v72 = (int)v71;
              long long v217 = xmmword_1A28FC890;
              *int8x8_t v49 = v69;
              v73.i64[0] = v219;
              v73.i64[1] = 0xBF8000003F800000;
              *(_WORD *)(v206 + 2) = (int)v71;
              v74.i64[0] = 0xBF000000BF000000;
              v74.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v206 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v74, (float32x4_t)xmmword_1A28FC8B0, v73)));
              *(_WORD *)(v206 + 16) = v69;
              *(_WORD *)(v206 + 18) = v72;
              v73.i64[0] = v220;
              v73.i64[1] = *((void *)&v217 + 1);
              v74.i64[0] = 0xBF000000BF000000;
              v74.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v206 + 20) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v74, (float32x4_t)xmmword_1A28FC8B0, v73)));
              uint64_t v65 = (_WORD *)(v206 + 32);
            }
            uint64_t v202 = v22;
            uint64_t v204 = v17;
            *(float *)&uint64_t v219 = -v61;
            *((float *)&v219 + 1) = v60;
            *(float *)&uint64_t v220 = v61;
            *((float *)&v220 + 1) = -v60;
            float v75 = fmaxf(*(float *)v30.i32, 0.0);
            if (v75 >= v3) {
              *(float *)v30.i32 = 65535.0;
            }
            else {
              *(float *)v30.i32 = v75 * 65535.0;
            }
            int v76 = (int)*(float *)v30.i32;
            float v77 = fmaxf(*(float *)&v30.i32[1], 0.0);
            if (v77 >= v3) {
              float v78 = 65535.0;
            }
            else {
              float v78 = v77 * 65535.0;
            }
            int v79 = (int)v78;
            long long v217 = xmmword_1A28FC8C0;
            *uint64_t v65 = v76;
            v65[1] = (int)v78;
            v80.i64[0] = v219;
            v80.i64[1] = 0xBF80000000000000;
            v81.i64[0] = 0xBF000000BF000000;
            v81.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v65 + 2) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v81, (float32x4_t)xmmword_1A28FC8B0, v80)));
            v65[8] = v76;
            v65[9] = v79;
            v80.i64[0] = v220;
            v80.i64[1] = *((void *)&v217 + 1);
            v81.i64[0] = 0xBF000000BF000000;
            v81.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v65 + 10) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v81, (float32x4_t)xmmword_1A28FC8B0, v80)));
            uint64_t v82 = v65 + 16;
            if (v31 < 2)
            {
              float v86 = v61;
              float v87 = v60;
            }
            else
            {
              unint64_t v83 = v29 + 4;
              unint64_t v84 = v205;
              uint64_t v85 = 1;
              float v86 = v61;
              float v87 = v60;
              unint64_t v207 = v28 - 1;
              unint64_t v208 = v28;
              do
              {
                unint64_t v97 = &v29[2 * v85];
                float v99 = *v97;
                float v98 = v97[1];
                if (++v85 < v28)
                {
                  uint64_t v100 = v83;
                  unint64_t v101 = v84;
                  while (vabds_f32(*v100, v99) < 1.0e-10)
                  {
                    float v102 = v100[1];
                    if (vabds_f32(v102, v98) >= 1.0e-10) {
                      goto LABEL_78;
                    }
                    v100 += 2;
                    if (!--v101)
                    {
                      float v86 = v61;
                      float v87 = v60;
                      goto LABEL_79;
                    }
                  }
                  float v102 = v100[1];
LABEL_78:
                  float v103 = v102 - v98;
                  float v104 = *v100 - v99;
                  float v105 = v3 / sqrtf((float)(v104 * v104) + (float)(v103 * v103));
                  float v87 = v105 * v104;
                  float v86 = v105 * v103;
                }
LABEL_79:
                float v106 = v87 + v60;
                float v107 = v86 + v61;
                float v108 = (float)(v106 * v106) + (float)(v107 * v107);
                float v109 = v61;
                float v110 = v60;
                if (v108 > 0.0)
                {
                  float v111 = v3 / sqrtf(v108);
                  float v110 = -(float)(v107 * v111);
                  float v109 = v111 * v106;
                }
                unint64_t v112 = &v29[2 * v85];
                float v211 = *v112;
                float v210 = v112[1];
                *(float *)&uint64_t v218 = v57;
                *((float *)&v218 + 1) = v57 * v209;
                long long v217 = xmmword_1A28FC8C0;
                float v213 = v86;
                float v212 = v87;
                float v113 = atan2f(v86, v87);
                float v114 = v113 - atan2f(v61, v60);
                double v115 = v114;
                if (v114 <= 3.14159265)
                {
                  float v3 = 1.0;
                  if (v115 < -3.14159265) {
                    float v114 = v115 + 6.28318531;
                  }
                }
                else
                {
                  float v114 = v115 + -6.28318531;
                  float v3 = 1.0;
                }
                unint64_t v116 = (unint64_t)fmaxf(ceilf(fabsf(v114) * 1.2732), v3);
                if (v116 <= 1)
                {
                  float v87 = v212;
                  float v86 = v213;
                  float v88 = sqrtf(fmaxf(-(float)((float)((float)((float)(v110 * v212) + (float)(v109 * v213))* (float)((float)(v110 * v212) + (float)(v109 * v213)))+ -1.0), 0.1));
                  unint64_t v221 = __PAIR64__(LODWORD(v109), LODWORD(v110));
                  *(float *)&uint64_t v219 = v110 / v88;
                  *((float *)&v219 + 1) = v109 / v88;
                  *(float *)&uint64_t v220 = -(float)(v110 / v88);
                  *((float *)&v220 + 1) = -(float)(v109 / v88);
                  float v89 = fmaxf(v99, 0.0);
                  if (v89 >= v3) {
                    float v90 = 65535.0;
                  }
                  else {
                    float v90 = v89 * 65535.0;
                  }
                  int v91 = (int)v90;
                  float v92 = fmaxf(v98, 0.0);
                  if (v92 >= v3) {
                    float v93 = 65535.0;
                  }
                  else {
                    float v93 = v92 * 65535.0;
                  }
                  int v94 = (int)v93;
                  *uint64_t v82 = v91;
                  v82[1] = (int)v93;
                  v95.i64[0] = v219;
                  v95.i64[1] = v217;
                  v96.i64[0] = 0xBF000000BF000000;
                  v96.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v82 + 2) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v96, (float32x4_t)xmmword_1A28FC8B0, v95)));
                  v82[8] = v91;
                  v82[9] = v94;
                  v95.i64[0] = v220;
                  v95.i64[1] = *((void *)&v217 + 1);
                  v96.i64[0] = 0xBF000000BF000000;
                  v96.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v82 + 10) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v96, (float32x4_t)xmmword_1A28FC8B0, v95)));
                  v82 += 16;
                  unint64_t v28 = v208;
                }
                else
                {
                  uint64_t v117 = v29;
                  uint64_t v118 = v25;
                  uint64_t v119 = 0;
                  float v120 = fmaxf(v99, 0.0);
                  if (v120 >= v3) {
                    float v121 = 65535.0;
                  }
                  else {
                    float v121 = v120 * 65535.0;
                  }
                  int v122 = (int)v121;
                  float v123 = fmaxf(v98, 0.0);
                  if (v123 >= v3) {
                    float v124 = 65535.0;
                  }
                  else {
                    float v124 = v123 * 65535.0;
                  }
                  int v125 = (int)v124;
                  do
                  {
                    __float2 v126 = __sincosf_stret((float)((float)((float)(int)v119 * (float)(v3 / (float)((float)v116 + -1.0))) + -0.5)* v114);
                    *(float *)&unint64_t v221 = -(float)((float)(v126.__sinval * v109) - (float)(v126.__cosval * v110));
                    *((float *)&v221 + 1) = (float)(v126.__sinval * v110) + (float)(v126.__cosval * v109);
                    uint64_t v219 = v221;
                    *(float *)&uint64_t v220 = -(float)((float)(v126.__cosval * v110) - (float)(v126.__sinval * v109));
                    *((float *)&v220 + 1) = -*((float *)&v221 + 1);
                    *uint64_t v82 = v122;
                    v82[1] = v125;
                    v127.i64[0] = v219;
                    v127.i64[1] = v217;
                    v128.i64[0] = 0xBF000000BF000000;
                    v128.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v82 + 2) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v128, (float32x4_t)xmmword_1A28FC8B0, v127)));
                    v82[8] = v122;
                    v82[9] = v125;
                    v127.i64[0] = v220;
                    v127.i64[1] = *((void *)&v217 + 1);
                    v128.i64[0] = 0xBF000000BF000000;
                    v128.i64[1] = 0xBF000000BF000000;
                    *(int16x4_t *)(v82 + 10) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v128, (float32x4_t)xmmword_1A28FC8B0, v127)));
                    v82 += 16;
                    ++v119;
                  }
                  while (v116 != v119);
                  float v3 = 1.0;
                  uint64_t v25 = v118;
                  float v29 = v117;
                  unint64_t v31 = v207;
                  unint64_t v28 = v208;
                  float v86 = v213;
                  float v87 = v212;
                }
                --v84;
                float v57 = sqrtf((float)((float)(v211 - v99) * (float)(v211 - v99))+ (float)((float)(v210 - v98) * (float)(v210 - v98)))+ v57;
                v83 += 2;
                float v61 = v86;
                float v60 = v87;
              }
              while (v85 != v31);
            }
            BOOL v129 = &v29[2 * v31];
            double v130 = &v29[2 * v205];
            float v131 = *v129;
            if (vabds_f32(*v129, *v130) >= 1.0e-10)
            {
              float v133 = v129[1];
              float v136 = v133 - v130[1];
              float32x4_t v134 = (float32x4_t)xmmword_1A28FC8B0;
              v135.i64[0] = 0x1000100010001;
              v135.i64[1] = 0x1000100010001;
              unint64_t v18 = v198 + 7;
              uint64_t v21 = v203;
              uint64_t v17 = v204;
              float v22 = v202;
LABEL_100:
              float v137 = v131 - *v130;
              float v138 = v3 / sqrtf((float)(v137 * v137) + (float)(v136 * v136));
              float v87 = v138 * v137;
              float v86 = v138 * v136;
            }
            else
            {
              float v132 = v130[1];
              float v133 = v129[1];
              float32x4_t v134 = (float32x4_t)xmmword_1A28FC8B0;
              v135.i64[0] = 0x1000100010001;
              v135.i64[1] = 0x1000100010001;
              unint64_t v18 = v198 + 7;
              uint64_t v21 = v203;
              uint64_t v17 = v204;
              float v22 = v202;
              if (vabds_f32(v133, v132) >= 1.0e-10)
              {
                float v136 = v133 - v132;
                goto LABEL_100;
              }
            }
            *(float *)&uint64_t v219 = -v86;
            *((float *)&v219 + 1) = v87;
            *(float *)&uint64_t v220 = v86;
            *((float *)&v220 + 1) = -v87;
            *(float *)&unint64_t v221 = -v86;
            *((float *)&v221 + 1) = v87;
            *(float *)&uint64_t v218 = v57;
            *((float *)&v218 + 1) = v57 * v209;
            float v139 = fmaxf(v131, 0.0);
            if (v139 >= v3) {
              float v140 = 65535.0;
            }
            else {
              float v140 = v139 * 65535.0;
            }
            int v141 = (int)v140;
            float v142 = fmaxf(v133, 0.0);
            if (v142 >= v3) {
              float v143 = 65535.0;
            }
            else {
              float v143 = v142 * 65535.0;
            }
            int v144 = (int)v143;
            *uint64_t v82 = v141;
            v82[1] = (int)v143;
            v145.i64[0] = v219;
            v145.i64[1] = v217;
            v146.i64[0] = 0xBF000000BF000000;
            v146.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v82 + 2) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v146, v134, v145)));
            v82[8] = v141;
            v82[9] = v144;
            v145.i64[0] = v220;
            v145.i64[1] = *((void *)&v217 + 1);
            v146.i64[0] = 0xBF000000BF000000;
            v146.i64[1] = 0xBF000000BF000000;
            *(int16x4_t *)(v82 + 10) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v146, v134, v145)));
            uint64_t v147 = *(char *)(v25 + 97);
            if (*(unsigned char *)(v25 + 97))
            {
              *(float *)&uint64_t v219 = v87 - v86;
              *((float *)&v219 + 1) = v86 + v87;
              *(float *)&uint64_t v220 = v86 + v87;
              *((float *)&v220 + 1) = v86 - v87;
              uint64_t v148 = *(void *)&v216[8];
              long long v217 = *(_OWORD *)&v216[8];
              v82[16] = v141;
              v82[17] = v144;
              v149.i64[0] = v219;
              v149.i64[1] = v148;
              v150.i64[0] = 0xBF000000BF000000;
              v150.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v82 + 18) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v150, v134, v149)));
              v82[24] = v141;
              v150.i64[0] = v220;
              v150.i64[1] = *((void *)&v217 + 1);
              v82[25] = v144;
              v149.i64[0] = 0xBF000000BF000000;
              v149.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v82 + 26) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v149, v134, v150)));
            }
            unint64_t v151 = *(void *)(v25 + 8);
            unint64_t v152 = *(void *)(v25 + 16) - v151;
            unint64_t v153 = v152 >> 1;
            unint64_t v19 = v200;
            if (v152 >= 4)
            {
              uint64_t v154 = *(void *)(v25 + 8);
              unint64_t v155 = 2;
              if (v153 > 2) {
                unint64_t v155 = v153;
              }
              if (v155 >= 3)
              {
                uint64_t v158 = 0;
                unint64_t v159 = v155 - 1;
                unint64_t v160 = (v155 - 1) & 0xFFFFFFFFFFFFFFFELL;
                long long v161 = v22 + 6;
                do
                {
                  __int16 v162 = v151 + 2 * v158;
                  *(v161 - 6) = v162;
                  *long long v161 = v162 + 2;
                  *(v161 - 5) = v162 + 1;
                  v161[1] = v162 + 3;
                  *(v161 - 4) = v162 + 2;
                  v161[2] = v162 + 4;
                  *(v161 - 3) = v162 + 1;
                  v161[3] = v162 + 3;
                  *(v161 - 2) = v162 + 3;
                  v161[4] = v162 + 5;
                  v158 += 2;
                  *(v161 - 1) = v162 + 2;
                  v161[5] = v162 + 4;
                  v161 += 12;
                }
                while (v160 != v158);
                if (v159 != v160)
                {
                  uint64_t v156 = v159 | 1;
                  LODWORD(v154) = 2 * v160 + v151;
                  uint64_t v157 = &v22[6 * v160];
                  goto LABEL_118;
                }
              }
              else
              {
                uint64_t v156 = 1;
                uint64_t v157 = v22;
LABEL_118:
                unint64_t v163 = v155 - v156;
                do
                {
                  *uint64_t v157 = v154;
                  __int16 v164 = v154 + 1;
                  v157[1] = v154 + 1;
                  __int16 v165 = v154 + 3;
                  LODWORD(v154) = v154 + 2;
                  v157[2] = v154;
                  v157[3] = v164;
                  v157[4] = v165;
                  v157[5] = v154;
                  v157 += 6;
                  --v163;
                }
                while (v163);
              }
            }
            if (*(void *)(v25 + 48) != *(void *)(v25 + 40))
            {
              unint64_t v166 = v201 ? 2 : 1;
              if (v153 - v147 > v166)
              {
                unint64_t v167 = v153 - (v166 + v147);
                unint64_t v168 = (_WORD *)v21;
                if (v167 < 8)
                {
LABEL_130:
                  unint64_t v178 = v166 + v147 - v153;
                  unint64_t v179 = v151 + 2 * v166;
                  do
                  {
                    *unint64_t v168 = v179 - 2;
                    v168[1] = v179;
                    v179 += 2;
                    v168 += 2;
                  }
                  while (!__CFADD__(v178++, 1));
                }
                else
                {
                  unint64_t v169 = v167 & 0xFFFFFFFFFFFFFFF8;
                  int64x2_t v170 = vdupq_n_s64(v166);
                  int64x2_t v171 = vaddq_s64(v170, (int64x2_t)xmmword_1A28FC8F0);
                  int64x2_t v172 = vaddq_s64(v170, (int64x2_t)xmmword_1A28FC900);
                  int64x2_t v173 = vaddq_s64(v170, (int64x2_t)xmmword_1A28FC910);
                  int64x2_t v174 = vaddq_s64(v170, (int64x2_t)xmmword_1A28FC760);
                  int64x2_t v175 = vdupq_n_s64(v151);
                  uint64_t v176 = (__int16 *)v21;
                  unint64_t v177 = v167 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v223.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v175, vaddq_s64(v174, v174)), (int32x4_t)vaddq_s64(v175, vaddq_s64(v173, v173))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v175, vaddq_s64(v172, v172)), (int32x4_t)vaddq_s64(v175, vaddq_s64(v171, v171))));
                    v223.val[0] = vaddq_s16(v223.val[1], v135);
                    vst2q_s16(v176, v223);
                    v176 += 16;
                    v223.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                    int64x2_t v172 = vaddq_s64(v172, (int64x2_t)v223.val[0]);
                    int64x2_t v173 = vaddq_s64(v173, (int64x2_t)v223.val[0]);
                    int64x2_t v174 = vaddq_s64(v174, (int64x2_t)v223.val[0]);
                    int64x2_t v171 = vaddq_s64(v171, (int64x2_t)v223.val[0]);
                    v177 -= 8;
                  }
                  while (v177);
                  if (v167 != v169)
                  {
                    v166 |= v169;
                    unint64_t v168 = (_WORD *)(v21 + 4 * (v167 & 0xFFFFFFFFFFFFFFF8));
                    goto LABEL_130;
                  }
                }
              }
            }
          }
          uint64_t v25 = *v17;
          uint64_t v26 = *(void *)(*v17 + 8);
          uint64_t v24 = *(void *)(*v17 + 16);
          uint64_t v23 = v206;
          goto LABEL_28;
        }
LABEL_134:
        {
          operator new();
        }
        unint64_t v181 = (void *)*v18;
        if (*v18)
        {
          long long v182 = (void *)v198[8];
          float v183 = (void *)*v18;
          if (v182 != v181)
          {
            do
            {
              double v185 = (void (***)(void, void *))*--v182;
              unint64_t v184 = v185;
              *long long v182 = 0;
              if (v185)
              {
                (**v184)(v184, v183);
                {
                  operator new();
                }
                (*(void (**)(uint64_t, void (***)(void, void *), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                                  + 40))(mdm::Allocator::instance(void)::alloc, v184, 104);
              }
            }
            while (v182 != v181);
            float v183 = (void *)*v18;
          }
          v198[8] = v181;
          (*(void (**)(void, void *, void))(*(void *)v198[10] + 40))(v198[10], v183, v198[9] - (void)v183);
          *unint64_t v18 = 0;
          v18[1] = 0;
          v18[2] = 0;
        }
        *unint64_t v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
        if (__p.__begin_) {
          operator delete(__p.__begin_);
        }
        if (v215[0]) {
          operator delete(v215[0]);
        }
        if (v196 && v192 != v194 && a2 && *(unsigned char *)(v190 + 17) != 2) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v196, v190, v194, v192, 1, 1);
        }
        if (v197 && v193 != v195 && a2 && *(unsigned char *)(v191 + 17) != 2) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v197, v191, v195, v193, 1, 1);
        }
        uint64_t v6 = v188;
        uint64_t v7 = v189 + 8;
      }
      uint64_t v4 = v187 + 1;
    }
    while (v187 + 1 != v186);
  }
}

void sub_1A221B278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,void *a50)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v51 = a50;
    if (!a50)
    {
LABEL_3:
      if (!a19) {
        goto LABEL_11;
      }
LABEL_7:
      if (a15 != a17 && a22 && *(unsigned char *)(a13 + 17) != 2) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a22 + 64))(a22, a19, a13, a17, a15, 1, 1);
      }
LABEL_11:
      if (a20 && a16 != a18 && a22 && *(unsigned char *)(a14 + 17) != 2) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a22 + 64))(a22, a20, a14, a18, a16, 1, 1);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    unint64_t v51 = a50;
    if (!a50) {
      goto LABEL_3;
    }
  }
  operator delete(v51);
  if (!a19) {
    goto LABEL_11;
  }
  goto LABEL_7;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  float v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  float v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  float v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  float v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Ribbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553D30;
  uint64_t v2 = (void *)a1[1];
  float v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[10];
  a1[10] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  double v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v7) {
LABEL_35:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v5);
  if (v23)
  {
    *uint64_t v10 = *v23;
LABEL_58:
    *uint64_t v23 = v10;
    goto LABEL_59;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A221BBBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,unsigned long>>(uint64_t a1, unint64_t a2, __n128 a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v6 <= a2) {
        unint64_t v3 = a2 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & a2;
    }
    uint8x8_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      uint64_t v9 = (void *)*v8;
      if (v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = v9[1];
            if (v11 == a2)
            {
              if (v9[2] == a2) {
                return 0;
              }
            }
            else if ((v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v9 = (void *)*v9;
            if (!v9) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == a2)
          {
            if (v9[2] == a2) {
              return 0;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_23:
  float v13 = (__n128 *)operator new(0x20uLL);
  v13->n128_u64[0] = 0;
  v13->n128_u64[1] = v4;
  v13[1] = a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v6 && (float)(v15 * (float)v6) >= v14)
  {
    unint64_t v4 = v3;
  }
  else
  {
    BOOL v16 = 1;
    if (v6 >= 3) {
      BOOL v16 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v6);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime > v6) {
      goto LABEL_36;
    }
    if (prime < v6)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v6) {
LABEL_36:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v4) {
        v4 %= v6;
      }
    }
    else
    {
      v4 &= v6 - 1;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(__n128 ***)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    v13->n128_u64[0] = (unint64_t)*v24;
LABEL_59:
    *unint64_t v24 = v13;
    goto LABEL_60;
  }
  v13->n128_u64[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (v13->n128_u64[0])
  {
    unint64_t v25 = *(void *)(v13->n128_u64[0] + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v25 >= v6) {
        v25 %= v6;
      }
    }
    else
    {
      v25 &= v6 - 1;
    }
    unint64_t v24 = (__n128 **)(*(void *)a1 + 8 * v25);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return 1;
}

void sub_1A221BEAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::TransitOrphanNode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TransitOrphanNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitOrphanNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::TransitParentNode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TransitParentNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5805D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitParentNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5805D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::TransitConnectedNode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TransitConnectedNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581168;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitConnectedNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

md::TransitLink *md::TransitLink::TransitLink(md::TransitLink *this, const md::TransitLink *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  uint64_t v3 = *((void *)a2 + 2);
  *((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *((void *)a2 + 4);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = v4;
  unint64_t v5 = (char *)this + 24;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((void *)a2 + 6);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)this + 6) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  uint8x8_t v8 = (unsigned char *)*((void *)a2 + 7);
  uint8x8_t v7 = (unsigned char *)*((void *)a2 + 8);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 5) >= 0x2AAAAAAAAAAAAABLL) {
      abort();
    }
    unint64_t v10 = (char *)operator new(v9);
    *((void *)this + 7) = v10;
    *((void *)this + 8) = v10;
    *((void *)this + 9) = &v10[32 * (v9 >> 5)];
    size_t v11 = 96 * ((v9 - 96) / 0x60uLL) + 96;
    memcpy(v10, v8, v11);
    *((void *)this + 8) = &v10[v11];
  }
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  uint64_t v12 = (char *)*((void *)a2 + 10);
  float v13 = (char *)*((void *)a2 + 11);
  uint64_t v14 = v13 - v12;
  if (v13 != v12)
  {
    if (v14 < 0) {
      abort();
    }
    float v15 = operator new(v13 - v12);
    *((void *)this + 10) = v15;
    *((void *)this + 12) = &v15[v14 >> 3];
    do
    {
      BOOL v16 = *(void **)v12;
      *float v15 = *(void *)v12;
      if (v16) {
        ++*v16;
      }
      v12 += 8;
      ++v15;
    }
    while (v12 != v13);
    *((void *)this + 11) = v15;
  }
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  unint64_t v18 = (unsigned char *)*((void *)a2 + 13);
  unint64_t v17 = (unsigned char *)*((void *)a2 + 14);
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      abort();
    }
    unint64_t v20 = (char *)operator new(v17 - v18);
    *((void *)this + 13) = v20;
    *((void *)this + 14) = v20;
    uint8x8_t v21 = &v20[8 * (v19 >> 3)];
    *((void *)this + 15) = v21;
    memcpy(v20, v18, v19);
    *((void *)this + 14) = v21;
  }
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 16) = (char *)this + 136;
  uint64_t v22 = (const md::TransitLink *)*((void *)a2 + 16);
  if (v22 != (const md::TransitLink *)((char *)a2 + 136))
  {
    do
    {
      unint64_t v51 = (unint64_t *)((char *)v22 + 32);
      float32x2_t v52 = (void *)*((void *)this + 17);
      float32x2_t v53 = (void *)((char *)this + 136);
      if (*((md::TransitLink **)this + 16) == (md::TransitLink *)((char *)this + 136)) {
        goto LABEL_93;
      }
      double v54 = (void *)*((void *)this + 17);
      float v55 = (char *)this + 136;
      if (v52)
      {
        do
        {
          float32x2_t v53 = v54;
          double v54 = (void *)v54[1];
        }
        while (v54);
      }
      else
      {
        do
        {
          float32x2_t v53 = (void *)*((void *)v55 + 2);
          BOOL v56 = *v53 == (void)v55;
          float v55 = (char *)v53;
        }
        while (v56);
      }
      unint64_t v57 = *v51;
      if (v53[4] < *v51)
      {
LABEL_93:
        if (v52) {
          uint64_t v58 = v53;
        }
        else {
          uint64_t v58 = (void *)((char *)this + 136);
        }
        if (v52) {
          float v59 = v53 + 1;
        }
        else {
          float v59 = (void *)((char *)this + 136);
        }
      }
      else
      {
        uint64_t v58 = (void *)((char *)this + 136);
        float v59 = (void *)((char *)this + 136);
        if (v52)
        {
          float v59 = (void *)((char *)this + 136);
          while (1)
          {
            while (1)
            {
              uint64_t v58 = v52;
              unint64_t v61 = v52[4];
              if (v57 >= v61) {
                break;
              }
              float32x2_t v52 = (void *)*v58;
              float v59 = v58;
              if (!*v58) {
                goto LABEL_108;
              }
            }
            if (v61 >= v57) {
              break;
            }
            float v59 = v58 + 1;
            float32x2_t v52 = (void *)v58[1];
            if (!v52) {
              goto LABEL_108;
            }
          }
        }
      }
      if (*v59)
      {
        float v60 = (const md::TransitLink *)*((void *)v22 + 1);
        if (v60) {
          goto LABEL_111;
        }
      }
      else
      {
LABEL_108:
        float v62 = operator new(0x30uLL);
        v62[2] = *(_OWORD *)v51;
        *(void *)float v62 = 0;
        *((void *)v62 + 1) = 0;
        *((void *)v62 + 2) = v58;
        *float v59 = v62;
        uint64_t v63 = **((void **)this + 16);
        if (v63)
        {
          *((void *)this + 16) = v63;
          float v62 = (_OWORD *)*v59;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 17), (uint64_t *)v62);
        ++*((void *)this + 18);
        float v60 = (const md::TransitLink *)*((void *)v22 + 1);
        if (v60)
        {
          do
          {
LABEL_111:
            float v64 = v60;
            float v60 = *(const md::TransitLink **)v60;
          }
          while (v60);
          goto LABEL_86;
        }
      }
      do
      {
        float v64 = (const md::TransitLink *)*((void *)v22 + 2);
        BOOL v56 = *(void *)v64 == (void)v22;
        uint64_t v22 = v64;
      }
      while (!v56);
LABEL_86:
      uint64_t v22 = v64;
    }
    while (v64 != (const md::TransitLink *)((char *)a2 + 136));
  }
  long long v23 = *(_OWORD *)((char *)a2 + 152);
  char v24 = *((unsigned char *)a2 + 168);
  *((_OWORD *)this + 11) = 0u;
  unint64_t v25 = (uint64_t *)((char *)this + 176);
  *((unsigned char *)this + 168) = v24;
  *(_OWORD *)((char *)this + 152) = v23;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  size_t prime = *((void *)a2 + 23);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_23:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this + 176, prime);
    goto LABEL_24;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*((void *)a2 + 23));
    int8x8_t v65 = *(int8x8_t *)((char *)this + 184);
    BOOL v66 = prime >= *(void *)&v65;
    if (prime > *(void *)&v65) {
      goto LABEL_23;
    }
  }
  else
  {
    int8x8_t v65 = 0;
    BOOL v66 = 1;
    if (prime) {
      goto LABEL_23;
    }
  }
  if (!v66)
  {
    unint64_t v67 = vcvtps_u32_f32((float)*((unint64_t *)this + 25) / *((float *)this + 52));
    if (*(void *)&v65 < 3uLL || (uint8x8_t v68 = (uint8x8_t)vcnt_s8(v65), v68.i16[0] = vaddlv_u8(v68), v68.u32[0] > 1uLL))
    {
      unint64_t v67 = std::__next_prime(v67);
    }
    else
    {
      uint64_t v69 = 1 << -(char)__clz(v67 - 1);
      if (v67 >= 2) {
        unint64_t v67 = v69;
      }
    }
    if (prime <= v67) {
      size_t prime = v67;
    }
    if (prime < *(void *)&v65) {
      goto LABEL_23;
    }
  }
LABEL_24:
  int8x16_t v27 = (void *)*((void *)a2 + 24);
  if (v27)
  {
    unint64_t v28 = (void *)((char *)this + 192);
    unint64_t v29 = *((void *)this + 23);
    do
    {
      unint64_t v30 = v27[2];
      if (v29)
      {
        uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
        v31.i16[0] = vaddlv_u8(v31);
        if (v31.u32[0] > 1uLL)
        {
          unint64_t v5 = (char *)v27[2];
          if (v30 >= v29) {
            unint64_t v5 = (char *)(v30 % v29);
          }
        }
        else
        {
          unint64_t v5 = (char *)((v29 - 1) & v30);
        }
        unint64_t v32 = *(void **)(*v25 + 8 * (void)v5);
        if (v32)
        {
          float v33 = (void *)*v32;
          if (v33)
          {
            if (v31.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v35 = v33[1];
                if (v35 == v30)
                {
                  if (v33[2] == v30) {
                    goto LABEL_84;
                  }
                }
                else if ((char *)(v35 & (v29 - 1)) != v5)
                {
                  goto LABEL_46;
                }
                float v33 = (void *)*v33;
                if (!v33) {
                  goto LABEL_46;
                }
              }
            }
            do
            {
              unint64_t v34 = v33[1];
              if (v34 == v30)
              {
                if (v33[2] == v30) {
                  goto LABEL_84;
                }
              }
              else
              {
                if (v34 >= v29) {
                  v34 %= v29;
                }
                if ((char *)v34 != v5) {
                  break;
                }
              }
              float v33 = (void *)*v33;
            }
            while (v33);
          }
        }
      }
LABEL_46:
      unint64_t v36 = operator new(0x20uLL);
      *unint64_t v36 = 0;
      v36[1] = v30;
      *((_OWORD *)v36 + 1) = *((_OWORD *)v27 + 1);
      float v37 = (float)(unint64_t)(*((void *)this + 25) + 1);
      float v38 = *((float *)this + 52);
      if (!v29 || (float)(v38 * (float)v29) < v37)
      {
        BOOL v39 = (v29 & (v29 - 1)) != 0;
        if (v29 < 3) {
          BOOL v39 = 1;
        }
        unint64_t v40 = v39 | (2 * v29);
        unint64_t v41 = vcvtps_u32_f32(v37 / v38);
        if (v40 <= v41) {
          size_t v42 = v41;
        }
        else {
          size_t v42 = v40;
        }
        if (v42 == 1)
        {
          size_t v42 = 2;
        }
        else if ((v42 & (v42 - 1)) != 0)
        {
          size_t v42 = std::__next_prime(v42);
          unint64_t v29 = *((void *)this + 23);
        }
        if (v42 > v29) {
          goto LABEL_58;
        }
        if (v42 < v29)
        {
          unint64_t v43 = vcvtps_u32_f32((float)*((unint64_t *)this + 25) / *((float *)this + 52));
          if (v29 < 3 || (uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v29), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
          {
            unint64_t v43 = std::__next_prime(v43);
          }
          else
          {
            uint64_t v45 = 1 << -(char)__clz(v43 - 1);
            if (v43 >= 2) {
              unint64_t v43 = v45;
            }
          }
          if (v42 <= v43) {
            size_t v42 = v43;
          }
          if (v42 < v29) {
LABEL_58:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)this + 176, v42);
        }
        unint64_t v29 = *((void *)this + 23);
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v30 >= v29) {
            unint64_t v5 = (char *)(v30 % v29);
          }
          else {
            unint64_t v5 = (char *)v30;
          }
        }
        else
        {
          unint64_t v5 = (char *)((v29 - 1) & v30);
        }
      }
      uint64_t v46 = *v25;
      float32x4_t v47 = *(void **)(*v25 + 8 * (void)v5);
      if (v47)
      {
        *unint64_t v36 = *v47;
      }
      else
      {
        *unint64_t v36 = *v28;
        *unint64_t v28 = v36;
        *(void *)(v46 + 8 * (void)v5) = v28;
        if (!*v36) {
          goto LABEL_83;
        }
        unint64_t v48 = *(void *)(*v36 + 8);
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v48 >= v29) {
            v48 %= v29;
          }
        }
        else
        {
          v48 &= v29 - 1;
        }
        float32x4_t v47 = (void *)(*v25 + 8 * v48);
      }
      *float32x4_t v47 = v36;
LABEL_83:
      ++*((void *)this + 25);
LABEL_84:
      int8x16_t v27 = (void *)*v27;
    }
    while (v27);
  }
  long long v49 = *(_OWORD *)((char *)a2 + 216);
  *(_OWORD *)((char *)this + 229) = *(_OWORD *)((char *)a2 + 229);
  *(_OWORD *)((char *)this + 216) = v49;
  return this;
}

void sub_1A221C7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, uint64_t a12, uint64_t a13)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v15);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*v14);
  unint64_t v17 = *a9;
  if (*a9)
  {
    *((void *)v13 + 14) = v17;
    operator delete(v17);
  }
  std::vector<geo::fast_shared_ptr<md::TransitLineSegment,std::allocator>>::~vector[abi:nn180100](a10);
  unint64_t v18 = *a11;
  if (*a11)
  {
    *((void *)v13 + 8) = v18;
    operator delete(v18);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a13);
  md::components::Material::~Material(v13);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<md::TransitLink>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 248;
    md::TransitLink::~TransitLink((md::TransitLink *)(i - 248));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **std::vector<geo::fast_shared_ptr<md::TransitLineSegment,std::allocator>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      unint64_t v5 = (char *)a1[1];
      do
      {
        uint8x8_t v7 = (void *)*((void *)v5 - 1);
        v5 -= 8;
        uint64_t v6 = v7;
        if (v7)
        {
          if ((*v6)-- == 1)
          {
            operator delete(v6);
            *((void *)v3 - 1) = 0;
          }
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

md::TransitLine *md::TransitLine::TransitLine(md::TransitLine *this, const md::TransitLine *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = *((_OWORD *)a2 + 1);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_OWORD *)this + 1) = v5;
  *(_OWORD *)((char *)this + 36) = *(_OWORD *)((char *)a2 + 36);
  uint64_t v6 = *(void *)((char *)a2 + 52);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *(void *)((char *)this + 52) = v6;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = 0;
  uint64_t v7 = *((void *)a2 + 8);
  uint64_t v8 = *((void *)a2 + 9);
  int64_t v9 = v8 - v7;
  if (v8 != v7)
  {
    unint64_t v10 = 0xD37A6F4DE9BD37A7 * (v9 >> 3);
    if (v10 >= 0x1642C8590B21643) {
      abort();
    }
    size_t v11 = (char *)operator new(v9);
    *((void *)this + 8) = v11;
    *((void *)this + 9) = v11;
    *((void *)this + 10) = &v11[184 * v10];
    uint64_t v12 = v11;
    do
    {
      uint64_t v13 = *(void *)(v7 + 8);
      *(void *)uint64_t v12 = *(void *)v7;
      *((void *)v12 + 1) = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      *((_OWORD *)v12 + 1) = *(_OWORD *)(v7 + 16);
      *((_OWORD *)v12 + 2) = *(_OWORD *)(v7 + 32);
      *((_OWORD *)v12 + 3) = *(_OWORD *)(v7 + 48);
      long long v14 = *(_OWORD *)(v7 + 64);
      long long v15 = *(_OWORD *)(v7 + 80);
      *(_OWORD *)(v12 + 89) = *(_OWORD *)(v7 + 89);
      *((_OWORD *)v12 + 4) = v14;
      *((_OWORD *)v12 + 5) = v15;
      *((void *)v12 + 14) = 0;
      *((void *)v12 + 15) = 0;
      uint64_t v16 = *(void *)(v7 + 136);
      *((void *)v12 + 16) = 0;
      *((void *)v12 + 17) = v16;
      unint64_t v17 = *(char **)(v7 + 112);
      unint64_t v18 = *(char **)(v7 + 120);
      uint64_t v19 = v18 - v17;
      if (v18 != v17)
      {
        if (v19 < 0) {
          abort();
        }
        unint64_t v20 = (_DWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v16 + 16))(v16, v18 - v17, 4);
        *((void *)v12 + 14) = v20;
        *((void *)v12 + 16) = &v20[v19 >> 2];
        do
        {
          if (v20) {
            *unint64_t v20 = *(_DWORD *)v17;
          }
          v17 += 4;
          ++v20;
        }
        while (v17 != v18);
        *((void *)v12 + 15) = v20;
      }
      *((_DWORD *)v12 + 36) = *(_DWORD *)(v7 + 144);
      *(_OWORD *)(v12 + 152) = *(_OWORD *)(v7 + 152);
      *((_DWORD *)v12 + 42) = *(_DWORD *)(v7 + 168);
      *((_DWORD *)v12 + 44) = *(_DWORD *)(v7 + 176);
      v7 += 184;
      v12 += 184;
    }
    while (v7 != v8);
    *((void *)this + 9) = v12;
  }
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  return this;
}

void sub_1A221CB18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<md::TransitLine>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    md::TransitLine::~TransitLine((md::TransitLine *)(i - 104));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::TransitLineRibbon::Options>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TransitLineRibbon::Options>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Options>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::TransitLineRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TransitLineRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5867D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5867D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::TransitLineRibbon::ClipParams>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TransitLineRibbon::ClipParams>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::ClipParams>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::ClipParams>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::ClipParams>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t md::TransitTileData::TransitTileData(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, void *a5, uint64_t a6, void *a7, uint64_t a8, float a9)
{
  id v17 = a5;
  md::MapTileData::MapTileData(a1, a2, a8, a3, 1);
  *(void *)a1 = &unk_1EF5357A8;
  *(void *)(a1 + 632) = &unk_1EF5357E8;
  uint64_t v18 = a3[1];
  *(void *)(a1 + 720) = *a3;
  *(void *)(a1 + 728) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = a4[1];
  *(void *)(a1 + 736) = *a4;
  *(void *)(a1 + 744) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  id v20 = v17;
  uint8x8_t v21 = v20;
  *(void *)(a1 + 752) = &unk_1EF559798;
  *(void *)(a1 + 760) = v20;
  *(void *)(a1 + 776) = a6;
  uint64_t v22 = a7[1];
  *(void *)(a1 + 784) = *a7;
  *(void *)(a1 + 792) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  long long v23 = (void *)[v20 dataOverrideManager];
  uint64_t v24 = v23[1];
  *(void *)(a1 + 800) = *v23;
  *(void *)(a1 + 808) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v25 = operator new(0xE8uLL);
  v25[1] = 0;
  v25[2] = 0;
  *unint64_t v25 = &unk_1EF586DB8;
  uint64_t v26 = ggl::BufferData::BufferData((uint64_t)(v25 + 3), qword_1E9552208, 2, 1, 6, 1);
  v25[28] = ggl::Tile::View::reflection(void)::reflection;
  v25[3] = &unk_1EF55E258;
  *(void *)(a1 + 816) = v26;
  *(void *)(a1 + 824) = v25;
  int8x16_t v27 = operator new(0xE8uLL);
  v27[1] = 0;
  v27[2] = 0;
  void *v27 = &unk_1EF586E28;
  uint64_t v28 = ggl::BufferData::BufferData((uint64_t)(v27 + 3), qword_1E95523C8, 2, 1, 6, 1);
  v27[28] = ggl::Tile::Transform::reflection(void)::reflection;
  v27[3] = &unk_1EF55E298;
  *(void *)(a1 + 832) = v28;
  *(void *)(a1 + 840) = v27;
  unint64_t v29 = operator new(0xE8uLL);
  v29[1] = 0;
  v29[2] = 0;
  *unint64_t v29 = &unk_1EF586760;
  uint64_t v30 = ggl::BufferData::BufferData((uint64_t)(v29 + 3), qword_1E955A9D0, 2, 1, 6, 1);
  v29[28] = ggl::TransitLineRibbon::ClipParams::reflection(void)::reflection;
  void v29[3] = &unk_1EF55DE98;
  *(void *)(a1 + 848) = v30;
  *(void *)(a1 + 856) = v29;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = a1 + 912;
  *(void *)(a1 + 920) = a1 + 912;
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1200) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1192) = a1 + 1200;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_DWORD *)(a1 + 1288) = 1065353216;
  *(void *)(a1 + 1336) = 0;
  *(_DWORD *)(a1 + 1344) = 1065353216;
  *(float *)(a1 + 1348) = a9;
  *(_DWORD *)(a1 + 1352) = 0;
  *(_DWORD *)(a1 + 1364) = -1;
  *(void *)(a1 + 1356) = 0;
  *(_DWORD *)(a1 + 1368) = 65793;
  unint64_t v31 = *(unsigned __int8 *)(a1 + 169);
  double v32 = 1.0 / (double)(1 << v31);
  double v33 = v32 * (double)*(int *)(a1 + 176);
  double v34 = (double)((1 << v31) + ~*(_DWORD *)(a1 + 172));
  *(double *)(a1 + 1296) = v33;
  *(double *)(a1 + 1304) = v32 * v34;
  *(double *)(a1 + 1312) = v33 + v32;
  *(double *)(a1 + 1320) = v32 * v34 + v32;
  long double v35 = exp((v34 + 0.5) * v32 * 6.28318531 + -3.14159265);
  long double v36 = atan(v35) * 114.591559 + -90.0;
  long double v37 = cos(v36 * 0.034906585) * -559.82 + 111132.92;
  long double v38 = v37 + cos(v36 * 0.0698131701) * 1.175;
  long double v39 = v38 + cos(v36 * 0.104719755) * -0.0023;
  long double v40 = v36 * 0.00872664626;
  long double v41 = tan(v36 * 0.00872664626 + 0.78103484);
  double v42 = log(v41);
  long double v43 = tan(v40 + 0.789761487);
  *(long double *)(a1 + 1328) = fabs((log(v43) - v42) * 0.159154943) / v39;
  if (v31 <= 0xA) {
    *(_DWORD *)(a1 + 1252) = 16843009;
  }
  uint8x8_t v44 = operator new(0xE8uLL);
  v44[1] = 0;
  v44[2] = 0;
  *uint8x8_t v44 = &unk_1EF5867D0;
  uint64_t v45 = ggl::BufferData::BufferData((uint64_t)(v44 + 3), qword_1E955A930, 2, 1, 6, 1);
  v44[28] = ggl::TransitLineRibbon::Style::reflection(void)::reflection;
  v44[3] = &unk_1EF55DED8;
  *(void *)(a1 + 1128) = v45;
  uint64_t v46 = *(std::__shared_weak_count **)(a1 + 1136);
  *(void *)(a1 + 1136) = v44;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  float32x4_t v47 = operator new(0xE8uLL);
  v47[1] = 0;
  v47[2] = 0;
  *float32x4_t v47 = &unk_1EF5867D0;
  uint64_t v48 = ggl::BufferData::BufferData((uint64_t)(v47 + 3), qword_1E955A930, 2, 1, 6, 1);
  v47[28] = ggl::TransitLineRibbon::Style::reflection(void)::reflection;
  v47[3] = &unk_1EF55DED8;
  *(void *)(a1 + 1144) = v48;
  long long v49 = *(std::__shared_weak_count **)(a1 + 1152);
  *(void *)(a1 + 1152) = v47;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  unint64_t v50 = operator new(0xE8uLL);
  v50[1] = 0;
  v50[2] = 0;
  *unint64_t v50 = &unk_1EF586808;
  uint64_t v51 = ggl::BufferData::BufferData((uint64_t)(v50 + 3), qword_1E955A970, 2, 1, 6, 1);
  v50[28] = ggl::TransitLineRibbon::Options::reflection(void)::reflection;
  long long v50[3] = &unk_1EF55DEF8;
  *(void *)(a1 + 1160) = v51;
  float32x2_t v52 = *(std::__shared_weak_count **)(a1 + 1168);
  *(void *)(a1 + 1168) = v50;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  uint64_t v53 = *(void *)(a1 + 1160);
  unint64_t v54 = *(void *)(v53 + 8);
  unint64_t v55 = *(void *)(v53 + 64);
  **(_DWORD **)(v53 + 72) = 1065353216;
  if (v55 > v54) {
    unint64_t v54 = v55;
  }
  *(void *)(v53 + 56) = 0;
  *(void *)(v53 + 64) = v54;
  BOOL v56 = operator new(0xE8uLL);
  v56[1] = 0;
  __int16 v56[2] = 0;
  void *v56 = &unk_1EF586808;
  uint64_t v57 = ggl::BufferData::BufferData((uint64_t)(v56 + 3), qword_1E955A970, 2, 1, 6, 1);
  v56[28] = ggl::TransitLineRibbon::Options::reflection(void)::reflection;
  v56[3] = &unk_1EF55DEF8;
  *(void *)(a1 + 1176) = v57;
  uint64_t v58 = *(std::__shared_weak_count **)(a1 + 1184);
  *(void *)(a1 + 1184) = v56;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  uint64_t v59 = *(void *)(a1 + 1176);
  unint64_t v60 = *(void *)(v59 + 8);
  unint64_t v61 = *(void *)(v59 + 64);
  **(_DWORD **)(v59 + 72) = 1045220557;
  if (v61 > v60) {
    unint64_t v60 = v61;
  }
  *(void *)(v59 + 56) = 0;
  *(void *)(v59 + 64) = v60;
  if (*(void *)(a1 + 720)) {
    md::TransitTileData::createFeatures((geo::codec::VectorTile **)a1);
  }

  return a1;
}

void sub_1A221E6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  long long v15 = *(void **)(v10 + 1272);
  if (v15)
  {
    do
    {
      long double v43 = (void *)*v15;
      uint8x8_t v44 = (void *)v15[5];
      if (v44)
      {
        do
        {
          uint64_t v45 = (void *)*v44;
          operator delete(v44);
          uint8x8_t v44 = v45;
        }
        while (v45);
      }
      uint64_t v46 = (void *)v15[3];
      v15[3] = 0;
      if (v46) {
        operator delete(v46);
      }
      operator delete(v15);
      long long v15 = v43;
    }
    while (v43);
  }
  uint64_t v16 = *v12;
  *uint64_t v12 = 0;
  if (v16) {
    operator delete(v16);
  }
  id v17 = (uint64_t *)(v10 + 1216);
  uint64_t v18 = *(std::__shared_weak_count **)(v10 + 1240);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = *v17;
  *id v17 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::destroy(*(void **)(v10 + 1200));
  id v20 = *(std::__shared_weak_count **)(v10 + 1184);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint8x8_t v21 = *(std::__shared_weak_count **)(v10 + 1168);
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v10 + 1152);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  long long v23 = *(std::__shared_weak_count **)(v10 + 1136);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = *(void *)(v10 + 1120);
  *(void *)(v10 + 1120) = 0;
  if (v24)
  {
    uint64_t v25 = *(void *)(v24 + 40);
    *(void *)(v24 + 40) = 0;
    if (v25) {
      MEMORY[0x1A6239270](v25, 0x1000C40451B5BE8);
    }
    uint64_t v26 = *(void *)(v24 + 24);
    *(void *)(v24 + 24) = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    int8x16_t v27 = *(void **)v24;
    if (*(void *)v24)
    {
      *(void *)(v24 + 8) = v27;
      operator delete(v27);
    }
    MEMORY[0x1A6239270](v24, 0x1020C4024962473);
  }
  uint64_t v28 = *(void *)(v10 + 1112);
  *(void *)(v10 + 1112) = 0;
  if (v28)
  {
    uint64_t v29 = *(void *)(v28 + 40);
    *(void *)(v28 + 40) = 0;
    if (v29) {
      MEMORY[0x1A6239270](v29, 0x1000C40451B5BE8);
    }
    uint64_t v30 = *(void *)(v28 + 24);
    *(void *)(v28 + 24) = 0;
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
    unint64_t v31 = *(void **)v28;
    if (*(void *)v28)
    {
      *(void *)(v28 + 8) = v31;
      operator delete(v31);
    }
    MEMORY[0x1A6239270](v28, 0x1020C4024962473);
  }
  uint64_t v32 = *(void *)(v10 + 1104);
  *(void *)(v10 + 1104) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = *(void *)(v10 + 1096);
  *(void *)(v10 + 1096) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = *(void *)(v10 + 1088);
  *(void *)(v10 + 1088) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = *(void *)(v10 + 1080);
  *(void *)(v10 + 1080) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *(void *)(v10 + 1072);
  *(void *)(v10 + 1072) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = *(void *)(v10 + 1064);
  *(void *)(v10 + 1064) = 0;
  if (v37)
  {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    long double v38 = *(char **)(v10 + 1040);
    if (!v38)
    {
LABEL_49:
      long double v39 = *(char **)(v10 + 1016);
      if (!v39) {
        goto LABEL_50;
      }
      goto LABEL_68;
    }
  }
  else
  {
    long double v38 = *(char **)(v10 + 1040);
    if (!v38) {
      goto LABEL_49;
    }
  }
  float32x4_t v47 = *(char **)(v10 + 1048);
  uint64_t v48 = v38;
  if (v47 != v38)
  {
    do
    {
      long long v49 = (std::__shared_weak_count *)*((void *)v47 - 1);
      if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      v47 -= 16;
    }
    while (v47 != v38);
    uint64_t v48 = *(char **)(v10 + 1040);
  }
  *(void *)(v10 + 1048) = v38;
  operator delete(v48);
  long double v39 = *(char **)(v10 + 1016);
  if (!v39)
  {
LABEL_50:
    long double v40 = *(char **)(v10 + 992);
    if (!v40) {
      goto LABEL_51;
    }
    goto LABEL_76;
  }
LABEL_68:
  unint64_t v50 = *(char **)(v10 + 1024);
  uint64_t v51 = v39;
  if (v50 != v39)
  {
    do
    {
      float32x2_t v52 = (std::__shared_weak_count *)*((void *)v50 - 1);
      if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      v50 -= 16;
    }
    while (v50 != v39);
    uint64_t v51 = *(char **)(v10 + 1016);
  }
  *(void *)(v10 + 1024) = v39;
  operator delete(v51);
  long double v40 = *(char **)(v10 + 992);
  if (!v40)
  {
LABEL_51:
    long double v41 = *(char **)(v10 + 968);
    if (!v41) {
      goto LABEL_52;
    }
    goto LABEL_84;
  }
LABEL_76:
  uint64_t v53 = *(char **)(v10 + 1000);
  unint64_t v54 = v40;
  if (v53 != v40)
  {
    do
    {
      unint64_t v55 = (std::__shared_weak_count *)*((void *)v53 - 1);
      if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      v53 -= 16;
    }
    while (v53 != v40);
    unint64_t v54 = *(char **)(v10 + 992);
  }
  *(void *)(v10 + 1000) = v40;
  operator delete(v54);
  long double v41 = *(char **)(v10 + 968);
  if (!v41)
  {
LABEL_52:
    double v42 = *(char **)(v10 + 944);
    if (!v42) {
      goto LABEL_100;
    }
    goto LABEL_92;
  }
LABEL_84:
  BOOL v56 = *(char **)(v10 + 976);
  uint64_t v57 = v41;
  if (v56 != v41)
  {
    do
    {
      uint64_t v58 = (std::__shared_weak_count *)*((void *)v56 - 1);
      if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      v56 -= 16;
    }
    while (v56 != v41);
    uint64_t v57 = *(char **)(v10 + 968);
  }
  *(void *)(v10 + 976) = v41;
  operator delete(v57);
  double v42 = *(char **)(v10 + 944);
  if (!v42)
  {
LABEL_100:
    uint64_t v62 = *(void *)(v10 + 936);
    *(void *)(v10 + 936) = 0;
    if (v62)
    {
      uint64_t v63 = *(void **)(v62 + 16);
      if (v63)
      {
        do
        {
          float v64 = (void *)*v63;
          md::TransitJunction::~TransitJunction((md::TransitJunction *)(v63 + 3));
          operator delete(v63);
          uint64_t v63 = v64;
        }
        while (v64);
      }
      int8x8_t v65 = *(void **)v62;
      *(void *)uint64_t v62 = 0;
      if (v65) {
        operator delete(v65);
      }
      MEMORY[0x1A6239270](v62, 0x10A0C408EF24B1CLL);
    }
    BOOL v66 = (void **)(v10 + 864);
    std::__list_imp<md::TransitDisplayConnection>::clear(v11);
    uint64_t v67 = *(void *)(v10 + 888);
    if (v67)
    {
      uint64_t v70 = *(void *)(v10 + 896);
      float v71 = *(void **)(v10 + 888);
      if (v70 != v67)
      {
        do
          md::TransitLink::~TransitLink((md::TransitLink *)(v70 - 248));
        while (v70 != v67);
        float v71 = *(void **)(v10 + 888);
      }
      *(void *)(v10 + 896) = v67;
      operator delete(v71);
      uint8x8_t v68 = (char *)*v66;
      if (!*v66)
      {
LABEL_108:
        uint64_t v69 = *(std::__shared_weak_count **)(v10 + 856);
        if (!v69) {
          goto LABEL_120;
        }
        goto LABEL_118;
      }
    }
    else
    {
      uint8x8_t v68 = (char *)*v66;
      if (!*v66) {
        goto LABEL_108;
      }
    }
    int v72 = *(char **)(v10 + 872);
    float32x4_t v73 = v68;
    if (v72 != v68)
    {
      do
        md::TransitLine::~TransitLine((md::TransitLine *)(v72 - 104));
      while (v72 != v68);
      float32x4_t v73 = *v66;
    }
    *(void *)(v10 + 872) = v68;
    operator delete(v73);
    uint64_t v69 = *(std::__shared_weak_count **)(v10 + 856);
    if (!v69)
    {
LABEL_120:
      float32x4_t v74 = *(std::__shared_weak_count **)(v10 + 840);
      if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
      float v75 = *(std::__shared_weak_count **)(v10 + 824);
      if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
      int v76 = *(std::__shared_weak_count **)(v10 + 808);
      if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
      float v77 = *(std::__shared_weak_count **)(v10 + 792);
      if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
      *(void *)(v10 + 752) = a10;

      float v78 = *(std::__shared_weak_count **)(v10 + 744);
      if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
      int v79 = *(std::__shared_weak_count **)(v10 + 728);
      if (v79)
      {
        if (!atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      md::MapTileData::~MapTileData((md::MapTileData *)v10);

      _Unwind_Resume(a1);
    }
LABEL_118:
    if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
    goto LABEL_120;
  }
LABEL_92:
  uint64_t v59 = *(char **)(v10 + 952);
  unint64_t v60 = v42;
  if (v59 != v42)
  {
    do
    {
      unint64_t v61 = (std::__shared_weak_count *)*((void *)v59 - 1);
      if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
      v59 -= 16;
    }
    while (v59 != v42);
    unint64_t v60 = *(char **)(v10 + 944);
  }
  *(void *)(v10 + 952) = v42;
  operator delete(v60);
  goto LABEL_100;
}

uint64_t md::StyleTexture<md::TransitLineSegment::StylePixel>::StyleTexture(uint64_t a1, unint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (a2)
  {
    if (a2 >> 59) {
      abort();
    }
    uint64_t v4 = 32 * a2;
    long long v5 = (char *)operator new(32 * a2);
    *(void *)a1 = v5;
    uint64_t v6 = &v5[v4];
    *(void *)(a1 + 16) = &v5[v4];
    bzero(v5, 32 * a2);
    *(void *)(a1 + 8) = v6;
  }
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  uint64_t v7 = &unk_1E957D000;
  {
    uint64_t v7 = &unk_1E957D000;
    if (v16)
    {
      md::StyleTexture<md::TransitLineSegment::StylePixel>::StyleTexture(unsigned long,md::StyleTexture<md::TransitLineSegment::StylePixel>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel = 4;
      uint64_t v7 = (void *)&unk_1E957D000;
    }
  }
  unint64_t v8 = v7[163];
  unint64_t v9 = (v8 + 7) / v8;
  unint64_t v10 = vcvtpd_u64_f64(sqrt((double)(v9 * a2)));
  BOOL v11 = v10 > 1;
  unint64_t v12 = (1 << -(char)__clz(v10 - 1));
  if (!v11) {
    unint64_t v12 = 1;
  }
  unint64_t v13 = vcvtpd_u64_f64((double)a2 / (double)(v12 / v9));
  BOOL v11 = v13 > 1;
  uint64_t v14 = (1 << -(char)__clz(v13 - 1));
  if (!v11) {
    uint64_t v14 = 1;
  }
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 72) = v12 / v9;
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 64) = v9 * v8;
  *(float *)(a1 + 88) = 1.0 / (float)v12;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5538F0;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = a1 + 528;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = "";
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  long long v3 = 0uLL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  int64x2_t v4 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 112) = v4;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 16) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 136) = 1;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = "";
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(int64x2_t *)(a1 + 240) = v4;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 144) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 264) = 1;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(void *)(a1 + 288) = "";
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(int64x2_t *)(a1 + 368) = v4;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 272) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 392) = 1;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 416) = "";
  *(_DWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(int64x2_t *)(a1 + 496) = v4;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 400) = &unk_1EF553D50;
  *(unsigned char *)(a1 + 520) = 1;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  {
    long long v3 = 0uLL;
    if (v6) {
      operator new();
    }
  }
  *(void *)(a1 + 576) = ggl::Allocator::instance(void)::alloc;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(v2 + 56) = v3;
  *(_OWORD *)(v2 + 72) = v3;
  *(void *)(a1 + 624) = 32;
  long long v5 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  void *v5 = 0;
  v5[1] = 0;
  *(void *)(a1 + 608) = v5;
  *(void *)(a1 + 616) = v5;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(unsigned char *)(a1 + 656) = 1;
  operator new();
}

void sub_1A221F570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>::reset[abi:nn180100]((uint64_t *)va);
  std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>::~vector[abi:nn180100](v4);
  md::RenderItemPool::~RenderItemPool((md::RenderItemPool *)(v2 + 76));
  ggl::Batcher::~Batcher(v3);
  v2[50] = &off_1EF55A458;
  v2[52] = 3131955885;
  v2[34] = &off_1EF55A458;
  v2[36] = 3131955885;
  v2[18] = &off_1EF55A458;
  v2[20] = 3131955885;
  v2[2] = &off_1EF55A458;
  v2[4] = 3131955885;
  _Unwind_Resume(a1);
}

void md::TransitTileData::accumulateLineBatches(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v5 = a3 + 1;
  int v6 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = v6[5];
      *(void *)(v8 + 48) = a2[135];
      int v9 = *((_DWORD *)v6 + 8);
      uint64_t v10 = (4 * v9) | 1u;
      *(void *)(v8 + 64) = v10;
      uint64_t v11 = v6[5];
      *(void *)(v11 + 304) = a2[137];
      *(void *)(v11 + 320) = v10;
      uint64_t v12 = v6[5];
      *(void *)(v12 + 176) = a2[136];
      uint64_t v13 = (4 * v9) | 2u;
      *(void *)(v12 + 192) = v13;
      uint64_t v14 = v6[5];
      *(void *)(v14 + 432) = a2[138];
      *(void *)(v14 + 448) = v13;
      unint64_t v15 = a1[2];
      if ((unint64_t)v7 >= v15) {
        break;
      }
      *v7++ = v6[5];
LABEL_25:
      a1[1] = v7;
      uint64_t v28 = (void *)v6[1];
      if (v28)
      {
        do
        {
          uint64_t v29 = v28;
          uint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          uint64_t v29 = (void *)v6[2];
          BOOL v30 = *v29 == (void)v6;
          int v6 = v29;
        }
        while (!v30);
      }
      int v6 = v29;
      if (v29 == v5) {
        goto LABEL_42;
      }
    }
    int v16 = (unsigned char *)*a1;
    uint64_t v17 = (uint64_t)v7 - *a1;
    uint64_t v18 = v17 >> 3;
    unint64_t v19 = (v17 >> 3) + 1;
    if (v19 >> 61) {
      abort();
    }
    uint64_t v20 = v15 - (void)v16;
    if (v20 >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
LABEL_78:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v22 = operator new(8 * v21);
    }
    else
    {
      uint64_t v22 = 0;
    }
    long long v23 = &v22[8 * v18];
    *long long v23 = v6[5];
    uint64_t v24 = v23 + 1;
    if (v7 == (void *)v16)
    {
      int v16 = v7;
    }
    else
    {
      unint64_t v25 = (char *)(v7 - 1) - v16;
      if (v25 < 0x168)
      {
        uint64_t v26 = v7;
        goto LABEL_19;
      }
      if (&v22[v17 - 8 - (v25 & 0xFFFFFFFFFFFFFFF8)] > &v22[v17 - 8])
      {
        uint64_t v26 = v7;
        goto LABEL_19;
      }
      if ((void *)((char *)v7 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
      {
        uint64_t v26 = v7;
        goto LABEL_19;
      }
      if ((unint64_t)((char *)v7 - &v22[v17]) < 0x20)
      {
        uint64_t v26 = v7;
        goto LABEL_19;
      }
      uint64_t v31 = (v25 >> 3) + 1;
      uint64_t v26 = &v7[-(v31 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v32 = &v22[8 * v18 - 16];
      uint64_t v33 = (long long *)(v7 - 2);
      uint64_t v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v35 = *v33;
        *(v32 - 1) = *(v33 - 1);
        _OWORD *v32 = v35;
        v32 -= 2;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      v23 -= v31 & 0x3FFFFFFFFFFFFFFCLL;
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_19:
          uint64_t v27 = *--v26;
          *--long long v23 = v27;
        }
        while (v26 != (void *)v16);
        int v16 = (unsigned char *)*a1;
      }
    }
    *a1 = v23;
    a1[1] = v24;
    a1[2] = &v22[8 * v21];
    if (v16) {
      operator delete(v16);
    }
    uint64_t v7 = v24;
    goto LABEL_25;
  }
  uint64_t v7 = 0;
LABEL_42:
  uint64_t v36 = (int *)a3[3];
  if (v36 != (int *)(a3 + 4))
  {
    uint64_t v37 = (uint64_t **)(a2 + 149);
    while (1)
    {
      uint64_t v38 = *((void *)v36 + 6);
      *(unsigned char *)(v38 + 136) = 0;
      *(unsigned char *)(v38 + 392) = 0;
      *(unsigned char *)(v38 + 264) = 1;
      *(void *)(v38 + 176) = std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::__emplace_unique_key_args<md::PatternedLineKey,std::piecewise_construct_t const&,std::tuple<md::PatternedLineKey const&>,std::tuple<>>(v37, v36 + 8, (_OWORD *)v36 + 2)[6];
      *(void *)(v38 + 192) = (4 * v36[8]) | 3u;
      uint64_t v39 = *((void *)v36 + 6);
      *(unsigned char *)(v39 + 520) = 1;
      *(void *)(v39 + 432) = std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::__emplace_unique_key_args<md::PatternedLineKey,std::piecewise_construct_t const&,std::tuple<md::PatternedLineKey const&>,std::tuple<>>(v37, v36 + 8, (_OWORD *)v36 + 2)[8];
      *(void *)(v39 + 448) = (4 * v36[8]) | 3u;
      unint64_t v40 = a1[2];
      if ((unint64_t)v7 >= v40) {
        break;
      }
      *v7++ = *((void *)v36 + 6);
LABEL_71:
      a1[1] = v7;
      uint64_t v58 = (int *)*((void *)v36 + 1);
      if (v58)
      {
        do
        {
          uint64_t v59 = v58;
          uint64_t v58 = *(int **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          uint64_t v59 = (int *)*((void *)v36 + 2);
          BOOL v30 = *(void *)v59 == (void)v36;
          uint64_t v36 = v59;
        }
        while (!v30);
      }
      uint64_t v36 = v59;
      if (v59 == (int *)(a3 + 4)) {
        return;
      }
    }
    long double v41 = (unsigned char *)*a1;
    uint64_t v42 = (uint64_t)v7 - *a1;
    uint64_t v43 = v42 >> 3;
    unint64_t v44 = (v42 >> 3) + 1;
    if (v44 >> 61) {
      abort();
    }
    uint64_t v45 = v40 - (void)v41;
    if (v45 >> 2 > v44) {
      unint64_t v44 = v45 >> 2;
    }
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v44;
    }
    if (v46)
    {
      if (v46 >> 61) {
        goto LABEL_78;
      }
      float32x4_t v47 = operator new(8 * v46);
    }
    else
    {
      float32x4_t v47 = 0;
    }
    uint64_t v48 = &v47[8 * v43];
    *uint64_t v48 = *((void *)v36 + 6);
    long long v49 = v48 + 1;
    if (v7 == (void *)v41)
    {
      long double v41 = v7;
    }
    else
    {
      unint64_t v50 = (char *)(v7 - 1) - v41;
      if (v50 < 0x58)
      {
        uint64_t v51 = v7;
        goto LABEL_66;
      }
      if ((unint64_t)((char *)v7 - &v47[v42]) < 0x20)
      {
        uint64_t v51 = v7;
        goto LABEL_66;
      }
      uint64_t v52 = (v50 >> 3) + 1;
      uint64_t v51 = &v7[-(v52 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v53 = &v47[8 * v43 - 16];
      unint64_t v54 = (long long *)(v7 - 2);
      uint64_t v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v56 = *v54;
        *(v53 - 1) = *(v54 - 1);
        *uint64_t v53 = v56;
        v53 -= 2;
        v54 -= 2;
        v55 -= 4;
      }
      while (v55);
      v48 -= v52 & 0x3FFFFFFFFFFFFFFCLL;
      if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_66:
          uint64_t v57 = *--v51;
          *--uint64_t v48 = v57;
        }
        while (v51 != (void *)v41);
        long double v41 = (unsigned char *)*a1;
      }
    }
    *a1 = v48;
    a1[1] = v49;
    a1[2] = &v47[8 * v46];
    if (v41) {
      operator delete(v41);
    }
    uint64_t v7 = v49;
    goto LABEL_71;
  }
}

void sub_1A221FAF0(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>::RibbonLayer(void *a1, uint64_t a2, uint64_t a3)
{
  int64x2_t v4 = a1;
  v48[3] = *(void **)MEMORY[0x1E4F143B8];
  a1[1] = 0;
  *a1 = &unk_1EF553B30;
  a1[2] = 0;
  a1[3] = 0;
  int v6 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int64_t v7 = v5 - *(void *)a2;
  if (v5 == *(void *)a2)
  {
    unint64_t v44 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      abort();
    }
    uint64_t v8 = operator new(v5 - *(void *)a2);
    v4[1] = v8;
    v4[2] = v8;
    int v9 = &v8[v7 >> 3];
    v4[3] = v9;
    memcpy(v8, v6, v7);
    unint64_t v44 = v9;
    v4[2] = v9;
  }
  *((_OWORD *)v4 + 2) = 0u;
  v4[12] = 0;
  *((unsigned char *)v4 + 104) = 0;
  *((unsigned char *)v4 + 128) = 0;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *(_OWORD *)((char *)v4 + 73) = 0u;
  if (*(unsigned char *)(a3 + 24))
  {
    *((_WORD *)v4 + 52) = *(_WORD *)a3;
    *(void *)((char *)v4 + 108) = *(void *)(a3 + 4);
    *((unsigned char *)v4 + 128) = 1;
  }
  uint64_t v45 = v4;
  if (v8 == v44)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    goto LABEL_51;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  while (2)
  {
    unint64_t v46 = v8;
    uint64_t v13 = (void *)*v8;
    v13[1] = v4;
    uint64_t v14 = (void **)v13[79];
    unint64_t v15 = (void **)v13[80];
    while (v14 != v15)
    {
      uint64_t v17 = *v14;
      v17[1] = **v14;
      v17[3] = v17[2];
      v17[5] = v17[4];
      memset(v48, 0, 24);
      memset(&__p, 0, sizeof(__p));
      uint64_t v18 = (uint64_t *)v17[7];
      unint64_t v19 = (uint64_t *)v17[8];
      if (v18 != v19)
      {
        do
        {
          md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::computeMeshSize(*v18, (float **)v48, &__p);
          uint64_t v20 = (void *)*v18++;
          v17[1] = v20[2] + v17[1] - v20[1];
          v17[3] = v20[4] + v17[3] - v20[3];
          v17[5] = v20[6] + v17[5] - v20[5];
        }
        while (v18 != v19);
        if (__p.__begin_) {
          operator delete(__p.__begin_);
        }
      }
      if (v48[0]) {
        operator delete(v48[0]);
      }
      unint64_t v21 = *v14;
      if (v11 < v12)
      {
        *(void *)uint64_t v11 = v21;
        int v16 = v11 + 8;
        goto LABEL_12;
      }
      uint64_t v22 = (v11 - v10) >> 3;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        abort();
      }
      if ((v12 - v10) >> 2 > v23) {
        unint64_t v23 = (v12 - v10) >> 2;
      }
      if ((unint64_t)(v12 - v10) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24)
      {
        if (v24 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v25 = operator new(8 * v24);
      }
      else
      {
        unint64_t v25 = 0;
      }
      uint64_t v26 = &v25[8 * v22];
      *(void *)uint64_t v26 = v21;
      int v16 = v26 + 8;
      if (v11 != v10)
      {
        unint64_t v27 = v11 - 8 - v10;
        if (v27 < 0x168)
        {
          uint64_t v28 = v11;
          goto LABEL_34;
        }
        if (&v25[v11 - v10 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v25[v11 - v10 - 8])
        {
          uint64_t v28 = v11;
          do
          {
LABEL_34:
            uint64_t v29 = *((void *)v28 - 1);
            v28 -= 8;
            *((void *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v28 != v10);
          goto LABEL_35;
        }
        if (&v11[-(v27 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
        {
          uint64_t v28 = v11;
          goto LABEL_34;
        }
        if ((unint64_t)(v10 - v25) < 0x20)
        {
          uint64_t v28 = v11;
          goto LABEL_34;
        }
        uint64_t v30 = (v27 >> 3) + 1;
        uint64_t v28 = &v11[-8 * (v30 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v31 = &v25[8 * v22 - 16];
        uint64_t v32 = v11 - 16;
        uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *uint64_t v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v26 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_34;
        }
      }
LABEL_35:
      uint64_t v12 = &v25[8 * v24];
      if (v10) {
        operator delete(v10);
      }
      uint64_t v10 = v26;
LABEL_12:
      ++v14;
      uint64_t v11 = v16;
    }
    int64x2_t v4 = v45;
    uint64_t v8 = v46 + 1;
    if (v46 + 1 != v44) {
      continue;
    }
    break;
  }
  if (*((unsigned char *)v45 + 88)) {
    operator new();
  }
LABEL_51:
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unint64_t v38 = (v11 - v10) >> 3;
  do
  {
    if (v35 == v38
      || (unint64_t)(*(void *)(*(void *)&v10[8 * v35] + 8) + v37 - **(void **)&v10[8 * v35]) >= 0x10000)
    {
      uint64_t v39 = (unsigned int *)operator new(0xF8uLL);
      *((void *)v39 + 1) = 0;
      *((void *)v39 + 2) = 0;
      *(void *)uint64_t v39 = &unk_1EF584B60;
      unint64_t v40 = (unsigned int *)ggl::BufferData::BufferData((uint64_t)(v39 + 6), 40, 0, 0, 1, v37);
      *((void *)v39 + 29) = "BatchType/VData";
      *((void *)v39 + 30) = &ggl::TransitLineRibbon::defaultVboReflection;
      *((void *)v39 + 3) = &unk_1EF55C788;
      *((void *)v39 + 28) = &unk_1EF55C7A8;
      __p.__begin_ = v40;
      __p.__end_ = v39;
      long double v41 = operator new(0xF8uLL);
      v41[1] = 0;
      v41[2] = 0;
      *long double v41 = &unk_1EF583D28;
      ggl::BufferData::BufferData((uint64_t)(v41 + 3), 2, 1, 0, 1, v36);
      *((_DWORD *)v41 + 60) = 0;
      v41[3] = &unk_1EF55B630;
      v41[4] = 2;
      v41[28] = &unk_1EF55B650;
      v41[29] = "BatchType/IData";
      operator new();
    }
    if (v35 < v38)
    {
      uint64_t v42 = *(void **)&v10[8 * v35];
      uint64_t v37 = v42[1] + v37 - *v42;
      uint64_t v36 = v42[3] + v36 + v42[5] - (v42[2] + v42[4]);
    }
    ++v35;
  }
  while (v35 <= v38);
  if (v10) {
    operator delete(v10);
  }
  return v4;
}

void sub_1A22208AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  MEMORY[0x1A6239270](v17, 0x1020C4007FF0C4BLL);
  if (v18) {
    operator delete(v18);
  }
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a11);
  uint64_t v20 = *a12;
  if (*a12)
  {
    *(void *)(a17 + 40) = v20;
    operator delete(v20);
    unint64_t v21 = *a10;
    if (!*a10) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    unint64_t v21 = *a10;
    if (!*a10) {
      goto LABEL_5;
    }
  }
  *(void *)(a17 + 16) = v21;
  operator delete(v21);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_1,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_1>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 1064);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  if (v3 != v4)
  {
    uint64_t v5 = *a2;
    do
    {
      int v6 = *(uint64_t ***)(*(void *)v3 + 632);
      int64_t v7 = *(uint64_t ***)(*(void *)v3 + 640);
      while (v6 != v7)
      {
        uint64_t v8 = *v6++;
        md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>::computeMesh(v8, v2, v5);
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
}

void md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>::computeMesh(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = **(void **)(a1[11] + 64);
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  long long v197 = 0uLL;
  uint64_t v10 = *(void *)(v7 + 8);
  uint64_t v11 = v10 * v8;
  uint64_t v12 = v10 * v9;
  *(void *)&long long v13 = a3;
  *(void *)&long long v14 = a3;
  *((void *)&v14 + 1) = v7;
  if (v10 * v9 != v10 * v8)
  {
    if (a3 && *(unsigned char *)(v7 + 17) != 2)
    {
      long long v185 = v14;
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 56))(a3);
      long long v14 = v185;
      *(void *)&long long v13 = a3;
      uint64_t v6 = v15;
    }
    else
    {
      uint64_t v6 = *(void *)(v7 + 72) + v11;
    }
  }
  long long v197 = v14;
  unint64_t v198 = v11;
  unint64_t v199 = v12;
  uint64_t v201 = v6;
  __int16 v200 = 257;
  unint64_t v16 = a1[2];
  unint64_t v18 = a1[4];
  unint64_t v17 = a1[5];
  if (v17 == v18)
  {
    unint64_t v17 = a1[3];
  }
  else
  {
    if (v18 < v16) {
      unint64_t v16 = a1[4];
    }
    if (a1[3] > v17) {
      unint64_t v17 = a1[3];
    }
  }
  uint64_t v19 = 0;
  uint64_t v20 = *(void *)(a1[11] + 96);
  long long v192 = 0uLL;
  uint64_t v21 = *(void *)(v20 + 8);
  uint64_t v22 = v21 * v16;
  uint64_t v23 = v21 * v17;
  *((void *)&v13 + 1) = v20;
  if (v21 * v17 != v21 * v16)
  {
    if (a3 && *(unsigned char *)(v20 + 17) != 2)
    {
      long long v188 = v13;
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 56))(a3);
      long long v13 = v188;
    }
    else
    {
      uint64_t v19 = *(void *)(v20 + 72) + v22;
    }
  }
  long long v192 = v13;
  unint64_t v193 = v22;
  unint64_t v194 = v23;
  uint64_t v196 = v19;
  __int16 v195 = 257;
  uint64_t v24 = a1[2];
  uint64_t v25 = a1[4];
  memset(v191, 0, sizeof(v191));
  memset(&__p, 0, sizeof(__p));
  uint64_t v26 = (uint64_t *)a1[7];
  int64x2_t v173 = a1 + 7;
  unint64_t v27 = (uint64_t *)a1[8];
  if (v26 != v27)
  {
    uint64_t v28 = v19 + 2 * v25 - 2 * v16;
    uint64_t v29 = v19 + 2 * v24 - 2 * v16;
    float v30 = 1.0;
    int64x2_t v174 = (uint64_t *)a1[8];
    uint64_t v175 = a2;
    while (1)
    {
      uint64_t v32 = *v26;
      v202[0] = a2;
      v202[1] = v32;
      long long v203 = xmmword_1A28FC890;
      long long v204 = xmmword_1A28FCD70;
      long long v205 = xmmword_1A28FC8C0;
      *(_OWORD *)uint64_t v206 = xmmword_1A28FC870;
      *(_OWORD *)&v206[16] = xmmword_1A28FC880;
      long long v207 = xmmword_1A28FCD80;
      v223[0] = v6;
      uint64_t v33 = *(void *)(v32 + 16);
      if (v33 != *(void *)(v32 + 8)) {
        break;
      }
      uint64_t v31 = *(void *)(v32 + 16);
LABEL_20:
      v6 += 40 * (v31 - v33);
      v29 += 2 * (*(void *)(v32 + 32) - *(void *)(v32 + 24));
      v28 += 2 * (*(void *)(v32 + 48) - *(void *)(v32 + 40));
      if (++v26 == v27) {
        goto LABEL_105;
      }
    }
    unint64_t v222 = 1;
    md::Ribbons::RibbonWriter<md::Ribbons::DaVinciTrafficRibbonDescriptor>::eliminateDuplicates(v32, (uint64_t)v191, &__p, (uint64_t *)&v222);
    unint64_t v35 = v222;
    if (v222 < 2) {
      goto LABEL_104;
    }
    unint64_t v180 = v222 - 2;
    uint64_t v177 = v28;
    uint64_t v36 = (char *)v191[0];
    std::vector<unsigned int>::pointer begin = __p.__begin_;
    uint64_t v208 = v6;
    int32x2_t v37 = *(int32x2_t *)v191[0];
    if (v222 >= 0xA)
    {
      uint64_t v41 = (v222 - 1) & 7;
      if (!v41) {
        uint64_t v41 = 8;
      }
      unint64_t v38 = v222 - 1 - v41;
      v34.i64[1] = *(void *)v191[0];
      int8x16_t v42 = (int8x16_t)vdupq_lane_s32(v37, 0);
      uint64_t v43 = (int32x4_t *)((char *)v191[0] + 60);
      float32x4_t v44 = 0uLL;
      unint64_t v45 = v38;
      float32x4_t v46 = 0uLL;
      do
      {
        i32 = (const float *)v43[-3].i32;
        float32x4x3_t v225 = vld3q_f32(i32);
        int32x4_t v49 = v43[1];
        int32x4_t v48 = v43[2];
        int32x4_t v50 = *v43;
        v43 += 6;
        v51.i64[0] = __PAIR64__(v50.u32[3], v50.u32[0]);
        float32x4_t v52 = (float32x4_t)vrev64q_s32(v49);
        v52.i32[0] = v50.i32[1];
        v51.i64[1] = __PAIR64__(v48.u32[1], v49.u32[2]);
        v52.i32[3] = v48.i32[2];
        float32x4_t v53 = vsubq_f32(v225.val[0], (float32x4_t)vextq_s8(v42, (int8x16_t)v225.val[0], 0xCuLL));
        float32x4_t v54 = vsubq_f32((float32x4_t)v51, (float32x4_t)vextq_s8((int8x16_t)v225.val[0], v51, 0xCuLL));
        float32x4_t v55 = vsubq_f32(v225.val[1], (float32x4_t)vextq_s8(v34, (int8x16_t)v225.val[1], 0xCuLL));
        v225.val[0] = vsubq_f32(v52, (float32x4_t)vextq_s8((int8x16_t)v225.val[1], (int8x16_t)v52, 0xCuLL));
        float32x4_t v44 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v53, v53), v55, v55)), v44);
        float32x4_t v46 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v54, v54), v225.val[0], v225.val[0])), v46);
        int8x16_t v34 = (int8x16_t)v52;
        int8x16_t v42 = v51;
        v45 -= 8;
      }
      while (v45);
      float32x2_t v40 = *(float32x2_t *)((char *)v48.i64 + 4);
      float32x4_t v56 = vaddq_f32(v46, v44);
      float v39 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v56, v56));
    }
    else
    {
      unint64_t v38 = 0;
      float v39 = 0.0;
      float32x2_t v40 = *(float32x2_t *)v191[0];
    }
    unint64_t v57 = v38 + 1;
    uint64_t v58 = (char *)v191[0] + 12 * v38 + 12;
    do
    {
      float32x2_t v59 = *(float32x2_t *)v58;
      uint64_t v58 = (void *)((char *)v58 + 12);
      float32x2_t v60 = vsub_f32(v59, v40);
      float v39 = sqrtf(vaddv_f32(vmul_f32(v60, v60))) + v39;
      ++v57;
      float32x2_t v40 = v59;
    }
    while (v222 != v57);
    double v61 = v39;
    float v62 = v30 / v39;
    if (v61 <= 1.0e-10) {
      float v62 = 0.0;
    }
    float v181 = v62;
    uint64_t v63 = (float *)((char *)v191[0] + 16);
    float v64 = sqrtf((float)((float)(*((float *)v191[0] + 3) - *(float *)v37.i32)* (float)(*((float *)v191[0] + 3) - *(float *)v37.i32))+ (float)((float)(*((float *)v191[0] + 4) - *(float *)&v37.i32[1])* (float)(*((float *)v191[0] + 4) - *(float *)&v37.i32[1])));
    for (uint64_t i = 1; i != v222; ++i)
    {
      float v66 = *(v63 - 1);
      float v67 = vabds_f32(*v63, *(float *)&v37.i32[1]);
      if (vabds_f32(v66, *(float *)v37.i32) >= 1.0e-10 || v67 >= 1.0e-10)
      {
        float v73 = v66 - *(float *)v37.i32;
        float v74 = *v63 - *(float *)&v37.i32[1];
        float v75 = v30 / sqrtf((float)(v73 * v73) + (float)(v74 * v74));
        float v70 = v75 * v73;
        float v69 = v75 * v74;
        if (!*(unsigned char *)(v32 + 132)) {
          goto LABEL_42;
        }
        goto LABEL_44;
      }
      v63 += 3;
    }
    float v69 = 0.0;
    float v70 = 1.0;
    if (!*(unsigned char *)(v32 + 132))
    {
LABEL_42:
      float v71 = -v69;
      float v72 = v70;
      goto LABEL_45;
    }
LABEL_44:
    float v71 = *(float *)(v32 + 136);
    float v72 = *(float *)(v32 + 140);
LABEL_45:
    unint64_t v178 = v26;
    uint64_t v209 = *__p.__begin_;
    unint64_t v210 = (unint64_t)v37;
    int v76 = *((_DWORD *)v191[0] + 2);
    uint64_t v219 = 0;
    int v211 = v76;
    float v216 = v71;
    float v217 = v72;
    char v221 = 0;
    if (*(unsigned char *)(v32 + 96))
    {
      char v220 = 1;
      float v212 = v71 - v70;
      float v213 = v72 - v69;
      float v214 = -(float)(v70 + v71);
      float v215 = -(float)(v69 + v72);
      long long v218 = xmmword_1A28FC890;
      md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v202, v223, (uint64_t)&v209);
    }
    uint64_t v176 = v29;
    uint64_t v179 = v6;
    char v220 = 0;
    float v212 = v71;
    float v213 = v72;
    float v214 = -v71;
    float v215 = -v72;
    long long v218 = xmmword_1A28FC8C0;
    md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v202, v223, (uint64_t)&v209);
    unint64_t v77 = v35 - 1;
    if (v35 - 1 < 2)
    {
      float v82 = v70;
      float v81 = v69;
    }
    else
    {
      float v78 = (float *)(v36 + 28);
      unint64_t v79 = v180;
      uint64_t v80 = 1;
      float v81 = v69;
      float v82 = v70;
      do
      {
        uint64_t v209 = begin[v80];
        unint64_t v84 = (float *)&v36[12 * v80];
        float v86 = *v84;
        float v85 = v84[1];
        if (++v80 < v35)
        {
          float v87 = v78;
          unint64_t v88 = v79;
          do
          {
            float v89 = *(v87 - 1);
            float v90 = vabds_f32(*v87, v85);
            if (vabds_f32(v89, v86) >= 1.0e-10 || v90 >= 1.0e-10)
            {
              float v92 = v89 - v86;
              float v93 = *v87 - v85;
              float v94 = v30 / sqrtf((float)(v92 * v92) + (float)(v93 * v93));
              float v82 = v94 * v92;
              float v81 = v94 * v93;
              goto LABEL_60;
            }
            v87 += 3;
            --v88;
          }
          while (v88);
          float v81 = v69;
          float v82 = v70;
        }
LABEL_60:
        float v183 = v84[4];
        float v184 = v84[3];
        float v95 = v82 + v70;
        float v96 = v81 + v69;
        float v97 = (float)(v95 * v95) + (float)(v96 * v96);
        float v98 = v69;
        float v99 = v70;
        if (v97 > 0.0)
        {
          float v100 = v30 / sqrtf(v97);
          float v99 = -(float)(v96 * v100);
          float v98 = v100 * v95;
        }
        *(float *)&unint64_t v210 = *v84;
        *((float *)&v210 + 1) = v85;
        int v211 = *((_DWORD *)v84 + 2);
        *(float *)&uint64_t v219 = v64;
        *((float *)&v219 + 1) = v64 * v181;
        long long v218 = xmmword_1A28FC8C0;
        char v221 = 1;
        float v186 = v81;
        float v189 = v82;
        float v101 = atan2f(v81, v82);
        float v102 = v101 - atan2f(v69, v70);
        double v103 = v102;
        if (v102 <= 3.14159265)
        {
          float v104 = 1.0;
          if (v103 < -3.14159265) {
            float v102 = v103 + 6.28318531;
          }
        }
        else
        {
          float v102 = v103 + -6.28318531;
          float v104 = 1.0;
        }
        unint64_t v105 = (unint64_t)fmaxf(ceilf(fabsf(v102) * 0.64377), v104);
        if (v105 <= 1)
        {
          float v83 = sqrtf(fmaxf(-(float)((float)((float)((float)(v99 * v189) + (float)(v98 * v186))* (float)((float)(v99 * v189) + (float)(v98 * v186)))+ -1.0), 0.1));
          float v216 = v99;
          float v217 = v98;
          float v212 = v99 / v83;
          float v213 = v98 / v83;
          float v214 = -(float)(v99 / v83);
          float v215 = -(float)(v98 / v83);
          md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v202, v223, (uint64_t)&v209);
        }
        else
        {
          uint64_t v106 = 0;
          float v107 = v104 / (float)((float)v105 + -1.0);
          do
          {
            __float2 v108 = __sincosf_stret((float)((float)((float)(int)v106 * v107) + -0.5) * v102);
            float v216 = -(float)((float)(v108.__sinval * v98) - (float)(v108.__cosval * v99));
            float v217 = (float)(v108.__sinval * v99) + (float)(v108.__cosval * v98);
            float v212 = v216;
            float v213 = v217;
            float v214 = -(float)((float)(v108.__cosval * v99) - (float)(v108.__sinval * v98));
            float v215 = -v217;
            md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v202, v223, (uint64_t)&v209);
            char v221 = 0;
            ++v106;
          }
          while (v105 != v106);
        }
        --v79;
        float v64 = sqrtf((float)((float)(v184 - v86) * (float)(v184 - v86)) + (float)((float)(v183 - v85)
                                                                               * (float)(v183 - v85)))
            + v64;
        v78 += 3;
        float v82 = v189;
        float v70 = v189;
        float v81 = v186;
        float v69 = v186;
        float v30 = 1.0;
      }
      while (v80 != v77);
    }
    float v109 = (float *)&v36[12 * v77];
    uint64_t v6 = v179;
    float v110 = (float *)&v36[12 * v180];
    float v111 = *v109;
    if (vabds_f32(*v109, *v110) >= 1.0e-10)
    {
      float v113 = v109[1];
      float v114 = v113 - v110[1];
      unint64_t v27 = v174;
      a2 = v175;
      uint64_t v29 = v176;
      uint64_t v28 = v177;
    }
    else
    {
      float v112 = v110[1];
      float v113 = v109[1];
      unint64_t v27 = v174;
      a2 = v175;
      uint64_t v29 = v176;
      uint64_t v28 = v177;
      if (vabds_f32(v113, v112) < 1.0e-10) {
        goto LABEL_76;
      }
      float v114 = v113 - v112;
    }
    float v115 = v111 - *v110;
    float v116 = v30 / sqrtf((float)(v115 * v115) + (float)(v114 * v114));
    float v82 = v116 * v115;
    float v81 = v116 * v114;
LABEL_76:
    float v117 = v81;
    if (*(unsigned char *)(v32 + 133))
    {
      float v118 = v82;
      float v119 = *(float *)(v32 + 144);
      float v120 = *(float *)(v32 + 148);
    }
    else
    {
      float v119 = -v81;
      float v118 = v82;
      float v120 = v82;
    }
    float v212 = v119;
    float v213 = v120;
    float v214 = -v119;
    float v215 = -v120;
    char v221 = 0;
    uint64_t v209 = begin[v77];
    unint64_t v210 = __PAIR64__(LODWORD(v113), LODWORD(v111));
    int v211 = *((_DWORD *)v109 + 2);
    float v216 = v119;
    float v217 = v120;
    *(float *)&uint64_t v219 = v64;
    *((float *)&v219 + 1) = v64 * v181;
    md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v202, v223, (uint64_t)&v209);
    if (*(unsigned char *)(v32 + 97))
    {
      char v220 = 1;
      float v212 = v118 + v119;
      float v213 = v117 + v120;
      float v214 = v118 - v119;
      float v215 = v117 - v120;
      long long v218 = *(_OWORD *)&v206[8];
      md::Ribbons::RibbonWriter<md::Ribbons::TransitRibbonDescriptor>::writeVertex((uint64_t)v202, v223, (uint64_t)&v209);
    }
    unint64_t v121 = *(void *)(v32 + 8);
    unint64_t v122 = *(void *)(v32 + 16) - v121;
    unint64_t v123 = v122 >> 1;
    uint64_t v26 = v178;
    v124.i64[0] = 0x1000100010001;
    v124.i64[1] = 0x1000100010001;
    if (v122 < 4) {
      goto LABEL_92;
    }
    uint64_t v125 = *(void *)(v32 + 8);
    unint64_t v126 = 2;
    if (v123 > 2) {
      unint64_t v126 = v123;
    }
    if (v126 >= 3)
    {
      uint64_t v129 = 0;
      unint64_t v130 = v126 - 1;
      unint64_t v131 = (v126 - 1) & 0xFFFFFFFFFFFFFFFELL;
      float v132 = (_WORD *)(v29 + 12);
      do
      {
        __int16 v133 = v121 + 2 * v129;
        *(v132 - 6) = v133;
        *float v132 = v133 + 2;
        *(v132 - 5) = v133 + 1;
        v132[1] = v133 + 3;
        *(v132 - 4) = v133 + 2;
        v132[2] = v133 + 4;
        *(v132 - 3) = v133 + 1;
        v132[3] = v133 + 3;
        *(v132 - 2) = v133 + 3;
        v132[4] = v133 + 5;
        v129 += 2;
        *(v132 - 1) = v133 + 2;
        v132[5] = v133 + 4;
        v132 += 12;
      }
      while (v131 != v129);
      if (v130 == v131)
      {
LABEL_92:
        if (*(void *)(v32 + 48) == *(void *)(v32 + 40)) {
          goto LABEL_104;
        }
        unint64_t v137 = 1;
        if (*(unsigned char *)(v32 + 96)) {
          unint64_t v137 = 2;
        }
        if (v123 - *(char *)(v32 + 97) <= v137) {
          goto LABEL_104;
        }
        uint64_t v138 = *(unsigned __int8 *)(v32 + 97);
        unint64_t v139 = v123 - (v137 + v138);
        float v140 = (_WORD *)v28;
        if (v139 >= 8)
        {
          unint64_t v141 = v139 & 0xFFFFFFFFFFFFFFF8;
          int64x2_t v142 = vdupq_n_s64(v137);
          int64x2_t v143 = vaddq_s64(v142, (int64x2_t)xmmword_1A28FC8F0);
          int64x2_t v144 = vaddq_s64(v142, (int64x2_t)xmmword_1A28FC900);
          int64x2_t v145 = vaddq_s64(v142, (int64x2_t)xmmword_1A28FC910);
          int64x2_t v146 = vaddq_s64(v142, (int64x2_t)xmmword_1A28FC760);
          int64x2_t v147 = vdupq_n_s64(v121);
          uint64_t v148 = (__int16 *)v28;
          unint64_t v149 = v139 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v224.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v147, vaddq_s64(v146, v146)), (int32x4_t)vaddq_s64(v147, vaddq_s64(v145, v145))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v147, vaddq_s64(v144, v144)), (int32x4_t)vaddq_s64(v147, vaddq_s64(v143, v143))));
            v224.val[0] = vaddq_s16(v224.val[1], v124);
            vst2q_s16(v148, v224);
            v148 += 16;
            v224.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
            int64x2_t v144 = vaddq_s64(v144, (int64x2_t)v224.val[0]);
            int64x2_t v145 = vaddq_s64(v145, (int64x2_t)v224.val[0]);
            int64x2_t v146 = vaddq_s64(v146, (int64x2_t)v224.val[0]);
            int64x2_t v143 = vaddq_s64(v143, (int64x2_t)v224.val[0]);
            v149 -= 8;
          }
          while (v149);
          if (v139 == v141) {
            goto LABEL_104;
          }
          v137 |= v141;
          float v140 = (_WORD *)(v28 + 4 * (v139 & 0xFFFFFFFFFFFFFFF8));
        }
        unint64_t v150 = v137 + v138 - v123;
        unint64_t v151 = v121 + 2 * v137;
        do
        {
          *float v140 = v151 - 2;
          v140[1] = v151;
          v151 += 2;
          v140 += 2;
        }
        while (!__CFADD__(v150++, 1));
LABEL_104:
        uint64_t v32 = *v26;
        uint64_t v33 = *(void *)(*v26 + 8);
        uint64_t v31 = *(void *)(*v26 + 16);
        goto LABEL_20;
      }
      uint64_t v127 = v130 | 1;
      LODWORD(v125) = 2 * v131 + v121;
      float32x4_t v128 = (_WORD *)(v29 + 12 * v131);
    }
    else
    {
      uint64_t v127 = 1;
      float32x4_t v128 = (_WORD *)v29;
    }
    unint64_t v134 = v126 - v127;
    do
    {
      *float32x4_t v128 = v125;
      __int16 v135 = v125 + 1;
      v128[1] = v125 + 1;
      __int16 v136 = v125 + 3;
      LODWORD(v125) = v125 + 2;
      v128[2] = v125;
      v128[3] = v135;
      v128[4] = v136;
      v128[5] = v125;
      v128 += 6;
      --v134;
    }
    while (v134);
    goto LABEL_92;
  }
LABEL_105:
  {
    operator new();
  }
  unint64_t v153 = a1 + 7;
  uint64_t v154 = (void *)*v173;
  if (*v173)
  {
    unint64_t v155 = (void *)a1[8];
    uint64_t v156 = (void *)*v173;
    if (v155 != v154)
    {
      do
      {
        uint64_t v158 = (void (***)(void, void *))*--v155;
        uint64_t v157 = v158;
        *unint64_t v155 = 0;
        if (v158)
        {
          (**v157)(v157, v156);
          {
            operator new();
          }
          (*(void (**)(uint64_t, void (***)(void, void *), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v157, 152);
        }
      }
      while (v155 != v154);
      unint64_t v153 = a1 + 7;
      uint64_t v156 = (void *)*v173;
    }
    a1[8] = (uint64_t)v154;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[10] + 40))(a1[10], v156, a1[9] - (void)v156);
    *unint64_t v153 = 0;
    v153[1] = 0;
    v153[2] = 0;
  }
  *unint64_t v153 = 0;
  v153[1] = 0;
  v153[2] = 0;
  if (__p.__begin_) {
    operator delete(__p.__begin_);
  }
  if (v191[0]) {
    operator delete(v191[0]);
  }
  if (v196)
  {
    unint64_t v160 = v193;
    unint64_t v159 = v194;
    if (v194 != v193)
    {
      long long v161 = (void *)*((void *)&v192 + 1);
      int v162 = v195;
      int v163 = HIBYTE(v195);
      if ((void)v192 && *(unsigned char *)(*((void *)&v192 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v192 + 64))();
      }
      if (v162 && !v163)
      {
        unint64_t v165 = v161[7];
        unint64_t v164 = v161[8];
        if (v164 == v165) {
          unint64_t v165 = v161[10] - v161[9];
        }
        if (v160 < v165) {
          unint64_t v165 = v160;
        }
        if (v164 <= v159) {
          unint64_t v164 = v159;
        }
        if (v164 == v165) {
          unint64_t v164 = v165 + v161[10] - v161[9];
        }
        v161[7] = v165;
        v161[8] = v164;
      }
    }
  }
  if (v201)
  {
    unint64_t v167 = v198;
    unint64_t v166 = v199;
    if (v199 != v198)
    {
      unint64_t v168 = (void *)*((void *)&v197 + 1);
      int v169 = v200;
      int v170 = HIBYTE(v200);
      if ((void)v197 && *(unsigned char *)(*((void *)&v197 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v197 + 64))();
      }
      if (v169 && !v170)
      {
        unint64_t v172 = v168[7];
        unint64_t v171 = v168[8];
        if (v171 == v172) {
          unint64_t v172 = v168[10] - v168[9];
        }
        if (v167 < v172) {
          unint64_t v172 = v167;
        }
        if (v171 <= v166) {
          unint64_t v171 = v166;
        }
        if (v171 == v172) {
          unint64_t v171 = v172 + v168[10] - v168[9];
        }
        v168[7] = v172;
        v168[8] = v171;
      }
    }
  }
}

void sub_1A22218C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (__p) {
    operator delete(__p);
  }
  if (a42) {
    operator delete(a42);
  }
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a45);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a51);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_1,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571A48;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_1,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF571A48;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_1,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

void std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_0,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 1072);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  if (v3 != v4)
  {
    uint64_t v5 = *a2;
    do
    {
      uint64_t v6 = *(uint64_t ***)(*(void *)v3 + 632);
      uint64_t v7 = *(uint64_t ***)(*(void *)v3 + 640);
      while (v6 != v7)
      {
        uint64_t v8 = *v6++;
        md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>::computeMesh(v8, v2, v5);
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
}

uint64_t std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_0,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571A00;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_0,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1EF571A00;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::TransitTileData::createLines(ggl::Loader *)::$_0,std::allocator<md::TransitTileData::createLines(ggl::Loader *)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584B60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitLineRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553B30;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[12];
  a1[12] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::__map_value_compare<md::PatternedLineKey,std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>,std::less<md::PatternedLineKey>,true>,std::allocator<std::__value_type<md::PatternedLineKey,md::PatternedLineSetup>>>::__emplace_unique_key_args<md::PatternedLineKey,std::piecewise_construct_t const&,std::tuple<md::PatternedLineKey const&>,std::tuple<>>(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v10 = a1 + 1;
    goto LABEL_17;
  }
  unsigned int v7 = *a2;
  unsigned int v8 = *((unsigned __int8 *)a2 + 4);
  unint64_t v9 = *((void *)a2 + 1);
  do
  {
    while (1)
    {
      uint64_t v10 = (uint64_t **)v5;
      unsigned int v11 = *((_DWORD *)v5 + 8);
      if (v7 != v11) {
        break;
      }
      unsigned int v12 = *((unsigned __int8 *)v10 + 36);
      if (v8 != v12)
      {
        if (v8 < v12) {
          goto LABEL_3;
        }
        if (v12 >= v8) {
          return v10;
        }
        goto LABEL_14;
      }
      long long v13 = v10[5];
      if (v9 >= (unint64_t)v13)
      {
        if ((unint64_t)v13 >= v9) {
          return v10;
        }
        goto LABEL_14;
      }
LABEL_3:
      uint64_t v5 = *v10;
      uint64_t v6 = v10;
      if (!*v10) {
        goto LABEL_17;
      }
    }
    if (v7 < v11) {
      goto LABEL_3;
    }
    if (v11 >= v7) {
      return v10;
    }
LABEL_14:
    uint64_t v5 = v10[1];
  }
  while (v5);
  uint64_t v6 = v10 + 1;
LABEL_17:
  long long v14 = (uint64_t *)v10;
  uint64_t v10 = (uint64_t **)operator new(0x60uLL);
  *((_OWORD *)v10 + 2) = *a3;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *uint64_t v10 = 0;
  v10[1] = 0;
  v10[2] = v14;
  const void *v6 = (uint64_t *)v10;
  uint64_t v15 = (uint64_t *)**a1;
  unint64_t v16 = (uint64_t *)v10;
  if (v15)
  {
    *a1 = v15;
    unint64_t v16 = *v6;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

void ggl::ConstantDataTyped<ggl::TransitLineRibbon::PatternStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TransitLineRibbon::PatternStyle>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::PatternStyle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::PatternStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitLineRibbon::PatternStyle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<ggl::TransitLineRibbon::PatternedBasePipelineSetup *,std::shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineSetup>::__shared_ptr_default_delete<ggl::TransitLineRibbon::PatternedBasePipelineSetup,ggl::TransitLineRibbon::PatternedBasePipelineSetup>,std::allocator<ggl::TransitLineRibbon::PatternedBasePipelineSetup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::TransitLineRibbon::PatternedBasePipelineSetup *,std::shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineSetup>::__shared_ptr_default_delete<ggl::TransitLineRibbon::PatternedBasePipelineSetup,ggl::TransitLineRibbon::PatternedBasePipelineSetup>,std::allocator<ggl::TransitLineRibbon::PatternedBasePipelineSetup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t *std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>::__push_back_slow_path<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1[1] - (char *)*a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = (uint64_t *)&v9[8 * v3];
  unsigned int v11 = (uint64_t *)&v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *uint64_t v10 = v12;
  long long v13 = v10 + 1;
  long long v14 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_22;
  }
  unint64_t v16 = (char *)v15 - (char *)*a1 - 8;
  if (v16 <= 0x77
    || (uint64_t *)((char *)v15 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) < v10
    && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v15)
  {
    goto LABEL_30;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  unint64_t v18 = &v9[8 * v3 - 16];
  uint64_t v19 = v15 - 4;
  uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v22 = *(_OWORD *)v19;
    long long v21 = *((_OWORD *)v19 + 1);
    *(_OWORD *)uint64_t v19 = 0uLL;
    *((_OWORD *)v19 + 1) = 0uLL;
    v19 -= 4;
    *((_OWORD *)v18 - 1) = v22;
    *(_OWORD *)unint64_t v18 = v21;
    v18 -= 32;
    v20 -= 4;
  }
  while (v20);
  v10 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
  v15 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      uint64_t v23 = *--v15;
      *uint64_t v15 = 0;
      *--uint64_t v10 = v23;
    }
    while (v15 != v14);
  }
  uint64_t v15 = *a1;
  uint64_t v24 = a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  while (v24 != v15)
    std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>::reset[abi:nn180100](--v24);
  if (v15) {
LABEL_22:
  }
    operator delete(v15);
  return v13;
}

uint64_t *std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>::reset[abi:nn180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 56);
    if (v2)
    {
      uint64_t v3 = *(void **)(v1 + 64);
      uint64_t v4 = *(void *)(v1 + 56);
      if (v3 != v2)
      {
        do
        {
          uint64_t v6 = (void (***)(void, uint64_t))*--v3;
          uint64_t v5 = v6;
          void *v3 = 0;
          if (v6)
          {
            (**v5)(v5, v4);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v5, 152);
          }
        }
        while (v3 != v2);
        uint64_t v4 = *(void *)(v1 + 56);
      }
      *(void *)(v1 + 64) = v2;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 80) + 40))(*(void *)(v1 + 80), v4, *(void *)(v1 + 72) - v4);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

uint64_t **std::vector<std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>>::~vector[abi:nn180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
        std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>::reset[abi:nn180100](--v3);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5538F0;
  uint64_t v2 = *(uint64_t **)(a1 + 632);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 640);
    uint64_t v4 = *(void **)(a1 + 632);
    if (v3 != v2)
    {
      do
        std::unique_ptr<md::Ribbons::RibbonSection<md::Ribbons::TransitRibbonDescriptor>>::reset[abi:nn180100](--v3);
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 632);
    }
    *(void *)(a1 + 640) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 608);
  do
  {
    if (v5[1])
    {
      unint64_t v6 = 0;
      uint64_t v7 = v5 + 2;
      unint64_t v8 = v5 + 2;
      unint64_t v9 = (void (***)(void))(v5 + 2);
      do
      {
        uint64_t v10 = (void (**)(void *))*v9;
        v9 += 15;
        (*v10)(v8);
        ++v6;
        v7 += 15;
        unint64_t v8 = v9;
      }
      while (v6 < v5[1]);
    }
    v5[1] = 0;
    uint64_t v5 = (void *)*v5;
  }
  while (v5);
  unsigned int v11 = *(void ***)(a1 + 608);
  *(void *)(a1 + 616) = v11;
  uint64_t v12 = *v11;
  *unsigned int v11 = 0;
  if (v12)
  {
    do
    {
      long long v13 = (void *)*v12;
      free(v12);
      uint64_t v12 = v13;
    }
    while (v13);
    unsigned int v11 = *(void ***)(a1 + 608);
  }
  free(v11);
  long long v14 = *(void **)(a1 + 584);
  if (v14)
  {
    *(void *)(a1 + 592) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 552);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 560);
    uint64_t v17 = *(void *)(a1 + 552);
    if (v16 != v15)
    {
      uint64_t v18 = *(void *)(a1 + 560);
      do
      {
        uint64_t v20 = *(void **)(v18 - 24);
        v18 -= 24;
        uint64_t v19 = v20;
        if (v20)
        {
          *(void *)(v16 - 16) = v19;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = *(void *)(a1 + 552);
    }
    *(void *)(a1 + 560) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 576) + 40))(*(void *)(a1 + 576), v17, *(void *)(a1 + 568) - v17);
  }
  long long v21 = *(void **)(a1 + 528);
  if (v21)
  {
    *(void *)(a1 + 536) = v21;
    operator delete(v21);
  }
  *(void *)(a1 + 400) = &off_1EF55A458;
  *(void *)(a1 + 416) = 3131955885;
  *(void *)(a1 + 272) = &off_1EF55A458;
  *(void *)(a1 + 288) = 3131955885;
  *(void *)(a1 + 144) = &off_1EF55A458;
  *(void *)(a1 + 160) = 3131955885;
  *(void *)(a1 + 16) = &off_1EF55A458;
  *(void *)(a1 + 32) = 3131955885;
  return a1;
}

void md::TransitTileData::updateLineStyles(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint8x8_t a6)
{
  v866[8] = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 936)) {
    return;
  }
  uint64_t v6 = *(void *)(a1 + 864);
  uint64_t v7 = *(void *)(a1 + 872);
  if (v6 != v7)
  {
    char v8 = 0;
    while (1)
    {
      int v11 = *(_DWORD *)(a1 + 1364);
      if (*(_DWORD *)(v6 + 60) == v11)
      {
        uint64_t v12 = *(void *)(v6 + 64);
      }
      else
      {
        *(_DWORD *)(v6 + 60) = v11;
        uint64_t v12 = *(void *)(v6 + 64);
        uint64_t v13 = *(void *)(v6 + 72);
        if (v12 != v13)
        {
          unint64_t v14 = v13 - v12 - 184;
          uint64_t v15 = *(void *)(v6 + 64);
          if (v14 >= 0xB8)
          {
            unint64_t v16 = v14 / 0xB8 + 1;
            uint64_t v17 = (unsigned char *)(v12 + 361);
            uint64_t v18 = v16 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              *(v17 - 184) = 1;
              *uint64_t v17 = 1;
              v17 += 368;
              v18 -= 2;
            }
            while (v18);
            if (v16 == (v16 & 0x3FFFFFFFFFFFFFELL)) {
              goto LABEL_14;
            }
            uint64_t v15 = v12 + 184 * (v16 & 0x3FFFFFFFFFFFFFELL);
          }
          do
          {
            *(unsigned char *)(v15 + 177) = 1;
            v15 += 184;
          }
          while (v15 != v13);
        }
      }
LABEL_14:
      md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v6, 0);
      if (*(unsigned char *)(v12 + 177))
      {
        md::TransitLine::_resolveStyle(v6, *(_DWORD *)(v6 + 60), *(void *)v12, *(std::__shared_weak_count **)(v12 + 8), v12 + 16);
        *(unsigned char *)(v12 + 177) = 0;
      }
      int v9 = *(_DWORD *)(v12 + 100);
      BOOL v10 = *(_DWORD *)(v6 + 56) != v9;
      *(_DWORD *)(v6 + 56) = v9;
      v8 |= v10;
      v6 += 104;
      if (v6 == v7) {
        goto LABEL_17;
      }
    }
  }
  char v8 = 0;
LABEL_17:
  char v806 = v8;
  uint64_t v19 = a1;
  uint64_t v20 = *(void *)(a1 + 888);
  uint64_t v810 = *(void *)(a1 + 896);
  if (v20 != v810)
  {
    BOOL v21 = 0;
    float32x4_t __len = (float32x4_t)vdupq_n_s32(0x437F0000u);
    while (1)
    {
      uint64_t v23 = *(char **)(v20 + 80);
      long long v22 = *(char **)(v20 + 88);
      uint64_t v24 = v22 - v23;
      BOOL v812 = v21;
      if (v22 == v23)
      {
        std::vector<unsigned int> __p = 0;
        float v73 = 0;
        v862 = 0;
        uint64_t v863 = 0;
        v861 = &v862;
        v859 = 0;
        uint64_t v860 = 0;
        v858 = &v859;
        v856 = 0;
        uint64_t v857 = 0;
        v855 = &v856;
        float v116 = 0.0;
        char v117 = 1;
        float v118 = 0.0;
        *(void *)(v20 + 160) = 0;
        goto LABEL_252;
      }
      if ((unint64_t)v24 >= 0x1C71C71C71C71C71) {
        abort();
      }
      uint64_t v25 = v24 >> 3;
      uint64_t v26 = (char *)operator new(72 * (v24 >> 3));
      unint64_t v27 = v26;
      do
      {
        *(void *)unint64_t v27 = 0;
        v27[8] = 0;
        *((void *)v27 + 2) = 0;
        *((_DWORD *)v27 + 6) = 0;
        *((_DWORD *)v27 + 10) = -1;
        *((void *)v27 + 4) = 0xFFFFFFFF00000000;
        *((void *)v27 + 8) = 0;
        *(void *)(v27 + 44) = 0;
        *(void *)(v27 + 49) = 0;
        v27 += 72;
      }
      while (v27 != &v26[72 * v25]);
      v835 = &v26[72 * v25];
      uint64_t v28 = 0;
      v862 = 0;
      uint64_t v863 = 0;
      v861 = &v862;
      std::vector<unsigned int> __p = v26;
      v814 = v22;
      do
      {
        uint64_t v29 = &v26[72 * v28];
        if (*(void *)v23) {
          float v30 = (unsigned char *)(*(void *)v23 + 8);
        }
        else {
          float v30 = 0;
        }
        *(void *)uint64_t v29 = v30;
        if (!v30[56] || (uint64_t v31 = *(void *)v30, v32 = *(void *)(*(void *)v30 + 64), *(float *)(v32 + 72) <= 0.0))
        {
          v26[72 * v28 + 52] = 0;
          v30[57] = 0;
          goto LABEL_26;
        }
        float v33 = *(float *)(v32 + 80);
        v26[72 * v28 + 52] = v33 > 0.0;
        v30[57] = v33 > 0.0;
        if (v33 > 0.0)
        {
          unint64_t v34 = *(void *)(v31 + 24);
          unint64_t v35 = &v26[72 * v28];
          int16x8_t v36 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)(v31 + 36), __len));
          *(int16x4_t *)v36.i8 = vmovn_s32((int32x4_t)v36);
          int16x8_t v822 = v36;
          *((_DWORD *)v35 + 6) = vmovn_s16(v36).u32[0];
          int32x2_t v37 = v35 + 24;
          *((void *)v37 - 1) = v34;
          v37[32] = *(unsigned char *)(v31 + 88);
          int v38 = *(unsigned __int8 *)(v32 + 84);
          v37[30] = v38;
          if (v38)
          {
            float v39 = &v862;
            float32x2_t v40 = &v862;
            if (v862)
            {
              uint64_t v41 = v862;
              while (1)
              {
                while (1)
                {
                  float v39 = (uint64_t **)v41;
                  unint64_t v42 = v41[4];
                  if (v34 == v42) {
                    break;
                  }
                  if (v34 >= v42)
                  {
                    if (v42 >= v34) {
                      goto LABEL_54;
                    }
                    goto LABEL_49;
                  }
LABEL_36:
                  uint64_t v41 = *v39;
                  float32x2_t v40 = v39;
                  if (!*v39) {
                    goto LABEL_51;
                  }
                }
                unsigned int v43 = bswap32(*(_DWORD *)v37);
                unsigned int v44 = bswap32(*((_DWORD *)v39 + 10));
                _CF = v43 >= v44;
                BOOL v45 = v43 > v44;
                int v46 = !_CF;
                if (v45 - v46 < 0) {
                  goto LABEL_36;
                }
                unsigned int v47 = bswap32(*((_DWORD *)v39 + 10));
                unsigned int v48 = bswap32(*(_DWORD *)v37);
                _CF = v47 >= v48;
                BOOL v49 = v47 > v48;
                int v50 = !_CF;
                if (v49 - v50 >= 0)
                {
LABEL_54:
                  int8x16_t v51 = (char *)v39;
                  goto LABEL_55;
                }
LABEL_49:
                uint64_t v41 = v39[1];
                if (!v41)
                {
                  float32x2_t v40 = v39 + 1;
                  break;
                }
              }
            }
LABEL_51:
            int8x16_t v51 = (char *)operator new(0x90uLL);
            *((void *)v51 + 4) = v34;
            *((_DWORD *)v51 + 10) = vmovn_s16(v822).u32[0];
            *((_OWORD *)v51 + 3) = 0u;
            *((_OWORD *)v51 + 4) = 0u;
            *((_OWORD *)v51 + 7) = 0u;
            *((_OWORD *)v51 + 8) = 0u;
            *((_OWORD *)v51 + 5) = 0u;
            *((_OWORD *)v51 + 6) = 0u;
            *((void *)v51 + 7) = v51 + 88;
            *((void *)v51 + 8) = v51 + 88;
            *((void *)v51 + 9) = v51 + 88;
            *((void *)v51 + 10) = 4;
            *((void *)v51 + 15) = 0;
            v51[128] = 0;
            *(void *)int8x16_t v51 = 0;
            *((void *)v51 + 1) = 0;
            *((void *)v51 + 2) = v39;
            *float32x2_t v40 = (uint64_t *)v51;
            float32x4_t v52 = (uint64_t *)v51;
            if (*v861)
            {
              v861 = (uint64_t **)*v861;
              float32x4_t v52 = *v40;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v862, v52);
            ++v863;
LABEL_55:
            float32x4_t v53 = (char *)*((void *)v51 + 8);
            uint64_t v54 = (uint64_t)&v53[-*((void *)v51 + 7)] >> 3;
            unint64_t v55 = *((void *)v51 + 10);
            if (v55 < v54 + 1)
            {
              uint64_t v819 = *((void *)v51 + 9);
              uint64_t v823 = *((void *)v51 + 7);
              unint64_t v56 = (1 << -(char)__clz(v55 + 1));
              if (v55 >= 0xFFFFFFFFFFFFFFFELL) {
                unint64_t v56 = 1;
              }
              if (v56 <= v54 + 1) {
                unint64_t v57 = v54 + 1;
              }
              else {
                unint64_t v57 = v56;
              }
              uint64_t v58 = (char *)malloc_type_malloc(8 * v57, 0x2004093837F09uLL);
              float32x2_t v59 = v58;
              float32x2_t v60 = (uint64_t *)*((void *)v51 + 7);
              double v61 = (char *)*((void *)v51 + 8);
              if (v60 != (uint64_t *)v61)
              {
                unint64_t v62 = v61 - (char *)v60 - 8;
                if (v62 < 0x18)
                {
                  uint64_t v63 = v58;
                  goto LABEL_69;
                }
                uint64_t v63 = v58;
                if ((unint64_t)(v58 - (char *)v60) < 0x20)
                {
                  do
                  {
LABEL_69:
                    uint64_t v70 = *v60++;
                    *(void *)uint64_t v63 = v70;
                    v63 += 8;
                  }
                  while (v60 != (uint64_t *)v61);
                }
                else
                {
                  uint64_t v64 = (v62 >> 3) + 1;
                  uint64_t v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v63 = &v58[v65];
                  float v66 = (long long *)(v60 + 2);
                  float v67 = v58 + 16;
                  uint64_t v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v69 = *v66;
                    *(v67 - 1) = *(v66 - 1);
                    *float v67 = v69;
                    v66 += 2;
                    v67 += 2;
                    v68 -= 4;
                  }
                  while (v68);
                  if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    float32x2_t v60 = (uint64_t *)((char *)v60 + v65);
                    goto LABEL_69;
                  }
                }
              }
              if (v823 != v819) {
                free(*((void **)v51 + 7));
              }
              float32x4_t v53 = &v59[8 * v54];
              *((void *)v51 + 7) = v59;
              *((void *)v51 + 8) = v53;
              *((void *)v51 + 10) = v57;
            }
            *(void *)float32x4_t v53 = v29;
            *((void *)v51 + 8) += 8;
            long long v22 = v814;
          }
          uint64_t v26 = __p;
          *(_DWORD *)&__p[72 * v28 + 36] = *(_DWORD *)(v32 + 88);
          if (*(unsigned char *)(v32 + 92))
          {
            int v71 = *(_DWORD *)(v31 + 32);
            if (v71 != -1)
            {
              float v72 = &__p[72 * v28];
              v72[55] = 1;
              *((_DWORD *)v72 + 10) = *(_DWORD *)(v32 + 96);
              *((_DWORD *)v72 + 8) = v71;
            }
          }
        }
LABEL_26:
        ++v28;
        v23 += 8;
      }
      while (v23 != v22);
      float v73 = v835;
      if ((a3 & 1) == 0)
      {
        float v74 = v861;
        if (v861 != &v862)
        {
          do
          {
            int v76 = v74[7];
            unint64_t v77 = v74[8];
            if ((unint64_t)((char *)v77 - (char *)v76) >= 9)
            {
              unint64_t v78 = v77 - v76;
              *((_DWORD *)v74 + 33) = 0;
              if (v77 == v76)
              {
LABEL_88:
                unsigned int v80 = 0;
              }
              else
              {
                uint64_t v79 = 0;
                unsigned int v80 = 0;
                while (!*(unsigned char *)(v76[v79] + 56))
                {
                  uint64_t v79 = ++v80;
                  if (v78 <= v80) {
                    goto LABEL_88;
                  }
                }
                *((_DWORD *)v74 + 33) = v80;
              }
              uint64_t v81 = 0;
              float v82 = v74 + 6;
              *((unsigned char *)v74 + 136) = 1;
              if (v78 <= 1) {
                unint64_t v78 = 1;
              }
              do
              {
                uint64_t v83 = v76[v81];
                *(unsigned char *)(v83 + 53) = v81 != v80;
                *(unsigned char *)(v83 + 8) = 1;
                unint64_t v84 = *(uint64_t ***)(v83 + 64);
                if (v84)
                {
                  do
                  {
                    float v85 = (uint64_t ***)v84;
                    unint64_t v84 = (uint64_t **)*v84;
                  }
                  while (v84);
                  *float v85 = v82;
                }
                *(void *)(v83 + 64) = v82;
                ++v81;
              }
              while (v81 != v78);
            }
            float v86 = v74[1];
            if (v86)
            {
              do
              {
                float v87 = (uint64_t **)v86;
                float v86 = (uint64_t *)*v86;
              }
              while (v86);
            }
            else
            {
              do
              {
                float v87 = (uint64_t **)v74[2];
                _ZF = *v87 == (uint64_t *)v74;
                float v74 = v87;
              }
              while (!_ZF);
            }
            float v74 = v87;
          }
          while (v87 != &v862);
        }
      }
      v859 = 0;
      uint64_t v860 = 0;
      v858 = &v859;
      BOOL v820 = v26 == v835;
      if ((a3 & 2) != 0) {
        goto LABEL_141;
      }
      float v75 = __p;
      if (v26 == v835) {
        goto LABEL_141;
      }
      while (2)
      {
        if (v75[52]) {
          _ZF = v75[53] == 0;
        }
        else {
          _ZF = 0;
        }
        if (_ZF)
        {
          unint64_t v90 = *((void *)v75 + 2);
          int v91 = v859;
          float v92 = &v859;
LABEL_113:
          float v93 = v92;
          if (v91)
          {
            while (1)
            {
              float v92 = (uint64_t **)v91;
              unint64_t v94 = v91[4];
              if (v90 < v94)
              {
                int v91 = *v92;
                goto LABEL_113;
              }
              if (v94 >= v90) {
                break;
              }
              int v91 = v92[1];
              if (!v91)
              {
                float v93 = v92 + 1;
                goto LABEL_118;
              }
            }
            float v95 = (char *)v92;
          }
          else
          {
LABEL_118:
            float v95 = (char *)operator new(0x88uLL);
            *((void *)v95 + 4) = v90;
            *(_OWORD *)(v95 + 40) = 0u;
            *(_OWORD *)(v95 + 56) = 0u;
            *(_OWORD *)(v95 + 72) = 0u;
            *(_OWORD *)(v95 + 104) = 0u;
            *(_OWORD *)(v95 + 120) = 0u;
            *(_OWORD *)(v95 + 88) = 0u;
            *((void *)v95 + 6) = v95 + 80;
            *((void *)v95 + 7) = v95 + 80;
            *((void *)v95 + 8) = v95 + 80;
            *((void *)v95 + 9) = 4;
            *((void *)v95 + 14) = 0;
            v95[120] = 0;
            *(void *)float v95 = 0;
            *((void *)v95 + 1) = 0;
            *((void *)v95 + 2) = v92;
            *float v93 = (uint64_t *)v95;
            float v96 = (uint64_t *)v95;
            if (*(void *)v858)
            {
              v858 = *(void **)v858;
              float v96 = *v93;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v859, v96);
            ++v860;
          }
          uint64_t v97 = *((void *)v95 + 6);
          unint64_t v88 = (char *)*((void *)v95 + 7);
          uint64_t v98 = (uint64_t)&v88[-v97] >> 3;
          unint64_t v99 = *((void *)v95 + 9);
          if (v99 < v98 + 1)
          {
            uint64_t v100 = *((void *)v95 + 8);
            unint64_t v101 = (1 << -(char)__clz(v99 + 1));
            if (v99 >= 0xFFFFFFFFFFFFFFFELL) {
              unint64_t v101 = 1;
            }
            if (v101 <= v98 + 1) {
              unint64_t v102 = v98 + 1;
            }
            else {
              unint64_t v102 = v101;
            }
            double v103 = (char *)malloc_type_malloc(8 * v102, 0x2004093837F09uLL);
            float v104 = v103;
            unint64_t v105 = (uint64_t *)*((void *)v95 + 6);
            uint64_t v106 = (char *)*((void *)v95 + 7);
            if (v105 != (uint64_t *)v106)
            {
              unint64_t v107 = v106 - (char *)v105 - 8;
              if (v107 < 0x18)
              {
                __float2 v108 = v103;
                goto LABEL_136;
              }
              __float2 v108 = v103;
              if ((unint64_t)(v103 - (char *)v105) < 0x20)
              {
                do
                {
LABEL_136:
                  uint64_t v115 = *v105++;
                  *(void *)__float2 v108 = v115;
                  v108 += 8;
                }
                while (v105 != (uint64_t *)v106);
              }
              else
              {
                uint64_t v109 = (v107 >> 3) + 1;
                uint64_t v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
                __float2 v108 = &v103[v110];
                float v111 = (long long *)(v105 + 2);
                float v112 = v103 + 16;
                uint64_t v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v114 = *v111;
                  *(v112 - 1) = *(v111 - 1);
                  *float v112 = v114;
                  v111 += 2;
                  v112 += 2;
                  v113 -= 4;
                }
                while (v113);
                if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  unint64_t v105 = (uint64_t *)((char *)v105 + v110);
                  goto LABEL_136;
                }
              }
            }
            if (v97 != v100) {
              free(*((void **)v95 + 6));
            }
            unint64_t v88 = &v104[8 * v98];
            *((void *)v95 + 6) = v104;
            *((void *)v95 + 7) = v88;
            *((void *)v95 + 9) = v102;
            float v73 = v835;
          }
          *(void *)unint64_t v88 = v75;
          *((void *)v95 + 7) += 8;
        }
        v75 += 72;
        if (v75 != v73) {
          continue;
        }
        break;
      }
      float v119 = (uint64_t *)v858;
      if (v858 != &v859)
      {
        do
        {
          *((_DWORD *)v119 + 31) = 0;
          uint64_t v121 = v119[6];
          unint64_t v122 = (v119[7] - v121) >> 3;
          if (v119[7] == v121)
          {
            unsigned int v124 = 0;
          }
          else
          {
            uint64_t v123 = 0;
            unsigned int v124 = 0;
            while (!*(unsigned char *)(*(void *)(v121 + 8 * v123) + 56))
            {
              uint64_t v123 = ++v124;
              if (v122 <= v124)
              {
                unsigned int v124 = 0;
                goto LABEL_152;
              }
            }
            *((_DWORD *)v119 + 31) = v124;
          }
LABEL_152:
          *((unsigned char *)v119 + 128) = 1;
          if (v122 > *(unsigned int *)(*(void *)(v121 + 8 * v124) + 36))
          {
            uint64_t v125 = 0;
            unint64_t v126 = (char *)(v119 + 5);
            do
            {
              uint64_t v127 = *(void *)(v121 + 8 * v125);
              *(unsigned char *)(v127 + 53) = v125 != v124;
              *(unsigned char *)(v127 + 8) = 2;
              float32x4_t v128 = *(void **)(v127 + 64);
              if (v128)
              {
                do
                {
                  uint64_t v129 = v128;
                  float32x4_t v128 = (void *)*v128;
                }
                while (v128);
                *uint64_t v129 = v126;
              }
              *(void *)(v127 + 64) = v126;
              ++v125;
            }
            while (v125 != v122);
          }
          unint64_t v130 = (uint64_t *)v119[1];
          if (v130)
          {
            do
            {
              unint64_t v131 = (uint64_t **)v130;
              unint64_t v130 = (uint64_t *)*v130;
            }
            while (v130);
          }
          else
          {
            do
            {
              unint64_t v131 = (uint64_t **)v119[2];
              _ZF = *v131 == v119;
              float v119 = (uint64_t *)v131;
            }
            while (!_ZF);
          }
          float v119 = (uint64_t *)v131;
        }
        while (v131 != &v859);
      }
LABEL_141:
      v856 = 0;
      uint64_t v857 = 0;
      v855 = &v856;
      if ((a3 & 4) != 0) {
        goto LABEL_203;
      }
      float v120 = __p;
      if (__p == v73) {
        goto LABEL_203;
      }
      while (2)
      {
        if (v120[52]) {
          BOOL v133 = v120[53] == 0;
        }
        else {
          BOOL v133 = 0;
        }
        if (v133 && v120[55] != 0)
        {
          __int16 v135 = v856;
          unsigned int v136 = *((_DWORD *)v120 + 8);
          unint64_t v137 = &v856;
LABEL_176:
          uint64_t v138 = v137;
          if (v135)
          {
            while (1)
            {
              unint64_t v137 = (uint64_t **)v135;
              unsigned int v139 = *((_DWORD *)v135 + 8);
              if (v136 < v139)
              {
                __int16 v135 = *v137;
                goto LABEL_176;
              }
              if (v139 >= v136) {
                break;
              }
              __int16 v135 = v137[1];
              if (!v135)
              {
                uint64_t v138 = v137 + 1;
                goto LABEL_181;
              }
            }
            float v140 = (char *)v137;
          }
          else
          {
LABEL_181:
            float v140 = (char *)operator new(0x88uLL);
            *((_DWORD *)v140 + 8) = v136;
            *(_OWORD *)(v140 + 40) = 0u;
            *(_OWORD *)(v140 + 56) = 0u;
            *(_OWORD *)(v140 + 72) = 0u;
            *(_OWORD *)(v140 + 104) = 0u;
            *(_OWORD *)(v140 + 120) = 0u;
            *(_OWORD *)(v140 + 88) = 0u;
            *((void *)v140 + 6) = v140 + 80;
            *((void *)v140 + 7) = v140 + 80;
            *((void *)v140 + 8) = v140 + 80;
            *((void *)v140 + 9) = 4;
            *((void *)v140 + 14) = 0;
            v140[120] = 0;
            *(void *)float v140 = 0;
            *((void *)v140 + 1) = 0;
            *((void *)v140 + 2) = v137;
            *uint64_t v138 = (uint64_t *)v140;
            unint64_t v141 = (uint64_t *)v140;
            if (*(void *)v855)
            {
              v855 = *(void **)v855;
              unint64_t v141 = *v138;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v856, v141);
            ++v857;
          }
          uint64_t v142 = *((void *)v140 + 6);
          float v132 = (char *)*((void *)v140 + 7);
          uint64_t v143 = (uint64_t)&v132[-v142] >> 3;
          unint64_t v144 = *((void *)v140 + 9);
          if (v144 < v143 + 1)
          {
            uint64_t v145 = *((void *)v140 + 8);
            unint64_t v146 = (1 << -(char)__clz(v144 + 1));
            if (v144 >= 0xFFFFFFFFFFFFFFFELL) {
              unint64_t v146 = 1;
            }
            if (v146 <= v143 + 1) {
              unint64_t v147 = v143 + 1;
            }
            else {
              unint64_t v147 = v146;
            }
            uint64_t v148 = (char *)malloc_type_malloc(8 * v147, 0x2004093837F09uLL);
            unint64_t v149 = v148;
            unint64_t v150 = (uint64_t *)*((void *)v140 + 6);
            unint64_t v151 = (char *)*((void *)v140 + 7);
            if (v150 != (uint64_t *)v151)
            {
              unint64_t v152 = v151 - (char *)v150 - 8;
              if (v152 < 0x18)
              {
                unint64_t v153 = v148;
                goto LABEL_199;
              }
              unint64_t v153 = v148;
              if ((unint64_t)(v148 - (char *)v150) < 0x20)
              {
                do
                {
LABEL_199:
                  uint64_t v160 = *v150++;
                  *(void *)unint64_t v153 = v160;
                  v153 += 8;
                }
                while (v150 != (uint64_t *)v151);
              }
              else
              {
                uint64_t v154 = (v152 >> 3) + 1;
                uint64_t v155 = 8 * (v154 & 0x3FFFFFFFFFFFFFFCLL);
                unint64_t v153 = &v148[v155];
                uint64_t v156 = (long long *)(v150 + 2);
                uint64_t v157 = v148 + 16;
                uint64_t v158 = v154 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v159 = *v156;
                  *(v157 - 1) = *(v156 - 1);
                  *uint64_t v157 = v159;
                  v156 += 2;
                  v157 += 2;
                  v158 -= 4;
                }
                while (v158);
                if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  unint64_t v150 = (uint64_t *)((char *)v150 + v155);
                  goto LABEL_199;
                }
              }
            }
            if (v142 != v145) {
              free(*((void **)v140 + 6));
            }
            float v132 = &v149[8 * v143];
            *((void *)v140 + 6) = v149;
            *((void *)v140 + 7) = v132;
            *((void *)v140 + 9) = v147;
            float v73 = v835;
          }
          *(void *)float v132 = v120;
          *((void *)v140 + 7) += 8;
        }
        v120 += 72;
        if (v120 != v73) {
          continue;
        }
        break;
      }
      long long v161 = (uint64_t *)v855;
      if (v855 != &v856)
      {
        do
        {
          *((_DWORD *)v161 + 31) = 0;
          uint64_t v170 = v161[6];
          unint64_t v171 = (v161[7] - v170) >> 3;
          if (v161[7] == v170)
          {
            unsigned int v173 = 0;
          }
          else
          {
            uint64_t v172 = 0;
            unsigned int v173 = 0;
            while (!*(unsigned char *)(*(void *)(v170 + 8 * v172) + 56))
            {
              uint64_t v172 = ++v173;
              if (v171 <= v173)
              {
                unsigned int v173 = 0;
                goto LABEL_213;
              }
            }
            *((_DWORD *)v161 + 31) = v173;
          }
LABEL_213:
          *((unsigned char *)v161 + 128) = 1;
          if (v171 > *(unsigned int *)(*(void *)(v170 + 8 * v173) + 40))
          {
            uint64_t v174 = 0;
            uint64_t v175 = (char *)(v161 + 5);
            do
            {
              uint64_t v176 = *(void *)(v170 + 8 * v174);
              *(unsigned char *)(v176 + 53) = v174 != v173;
              *(unsigned char *)(v176 + 8) = 3;
              uint64_t v177 = *(void **)(v176 + 64);
              if (v177)
              {
                do
                {
                  unint64_t v178 = v177;
                  uint64_t v177 = (void *)*v177;
                }
                while (v177);
                *unint64_t v178 = v175;
              }
              *(void *)(v176 + 64) = v175;
              ++v174;
            }
            while (v174 != v171);
          }
          uint64_t v179 = (uint64_t *)v161[1];
          if (v179)
          {
            do
            {
              unint64_t v180 = (uint64_t **)v179;
              uint64_t v179 = (uint64_t *)*v179;
            }
            while (v179);
          }
          else
          {
            do
            {
              unint64_t v180 = (uint64_t **)v161[2];
              _ZF = *v180 == v161;
              long long v161 = (uint64_t *)v180;
            }
            while (!_ZF);
          }
          long long v161 = (uint64_t *)v180;
        }
        while (v180 != &v856);
      }
LABEL_203:
      *(void *)(v20 + 160) = 0;
      int v162 = __p;
      if (__p != v73)
      {
        uint64_t v163 = 0;
        int v164 = 0;
        int v165 = 0;
        float v166 = 0.0;
        float v167 = 0.0;
        float v116 = 0.0;
        float v168 = 0.0;
        float v169 = 0.0;
        while (1)
        {
          float v181 = *(unsigned __int8 **)v162;
          if (v162[52]) {
            break;
          }
          v181[55] = 1;
          *((_DWORD *)v181 + 8) = -1;
          v181[52] = 0;
LABEL_226:
          v162 += 72;
          if (v162 == v73)
          {
            float v118 = (float)(v166 + v169) * 0.5;
            goto LABEL_251;
          }
        }
        int v182 = v162[53];
        v181[55] = v182;
        if (v182) {
          *((_DWORD *)v181 + 8) = -1;
        }
        unsigned int v183 = v162[8];
        v181[52] = v183;
        uint64_t v184 = *((void *)v162 + 8);
        if (v184)
        {
          long long v185 = (void *)*((void *)v162 + 8);
          do
          {
            float v186 = v185;
            long long v185 = (void *)*v185;
          }
          while (v185);
          if (*((unsigned char *)v186 + 80))
          {
            *((_DWORD *)v162 + 11) = *((_DWORD *)v186 + 18);
            *((_DWORD *)v162 + 12) = *((_DWORD *)v186 + 19);
LABEL_248:
            v163 |= *(void *)(*(void *)v181 + 96);
            *(void *)(v20 + 160) = v163;
            float v73 = v835;
            goto LABEL_226;
          }
          int v824 = v165;
          float v187 = **(unsigned __int8 ***)(v186[1] + 8 * *((unsigned int *)v186 + 21));
          unsigned int v183 = v187[52];
        }
        else
        {
          int v824 = v165;
          float v186 = 0;
          float v187 = v181;
        }
        uint64_t v188 = *(void *)v187;
        uint64_t v189 = *(void *)(*(void *)v187 + 64);
        md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary(*(uint64_t **)v187, v183);
        uint64_t v190 = v189 + 184 * v183;
        int v192 = *(unsigned __int8 *)(v190 + 177);
        uint64_t v191 = (unsigned char *)(v190 + 177);
        if (v192)
        {
          md::TransitLine::_resolveStyle(v188, *(_DWORD *)(v188 + 60), *(void *)(v189 + 184 * v183), *(std::__shared_weak_count **)(v189 + 184 * v183 + 8), v189 + 184 * v183 + 16);
          *uint64_t v191 = 0;
        }
        uint64_t v193 = v189 + 184 * v183;
        if (v164)
        {
          float v194 = *(float *)(v193 + 76);
          if (*(_DWORD *)(v193 + 100) == v824)
          {
            float v166 = *(float *)(v189 + 184 * v183 + 72);
          }
          else
          {
            float v168 = fmaxf(v168, (float)(v167 - v166) * 0.5);
            uint64_t v196 = v189 + 184 * v183;
            float v166 = *(float *)(v196 + 72);
            float v194 = fmaxf(v194, (float)(*(float *)(v196 + 80) - v166) * 0.5);
          }
          float v116 = fmaxf(v168, v194) + v116;
          float v195 = v116 + (float)(v166 * 0.5);
          if (v184)
          {
LABEL_246:
            *((float *)v186 + 18) = v195;
            *((unsigned char *)v186 + 80) = 1;
            *((_DWORD *)v186 + 19) = v164;
          }
        }
        else
        {
          float v166 = *(float *)(v193 + 72);
          float v169 = v166;
          float v195 = v116 + (float)(v166 * 0.5);
          if (v184) {
            goto LABEL_246;
          }
        }
        *((float *)v162 + 11) = v195;
        *((_DWORD *)v162 + 12) = v164++;
        uint64_t v197 = v189 + 184 * v183;
        float v168 = *(float *)(v197 + 76);
        float v167 = *(float *)(v197 + 80);
        int v165 = *(_DWORD *)(v197 + 100);
        float v116 = v166 + v116;
        uint64_t v163 = *(void *)(v20 + 160);
        goto LABEL_248;
      }
      float v116 = 0.0;
      float v118 = 0.0;
LABEL_251:
      char v117 = v820;
LABEL_252:
      unint64_t v198 = (uint64_t *)v854;
      v850 = v854;
      v851 = v854;
      v852 = v854;
      unint64_t v853 = 8;
      *(float *)(v20 + 152) = v116 - v118;
      unint64_t v199 = (uint64_t *)v854;
      if (v117) {
        goto LABEL_287;
      }
      float v200 = v116 * 0.5;
      uint64_t v201 = (uint64_t **)(v20 + 136);
      uint64_t v202 = (float *)__p;
      while (2)
      {
        float v205 = v202[11];
        uint64_t v204 = *(void *)v202;
        unint64_t v206 = *(void *)(*(void *)(**(void **)v202 + 16) + 40);
        long long v207 = *v201;
        uint64_t v208 = (uint64_t **)(v20 + 136);
        uint64_t v209 = (uint64_t **)(v20 + 136);
        if (*v201)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v209 = (uint64_t **)v207;
              unint64_t v210 = v207[4];
              if (v206 >= v210) {
                break;
              }
              long long v207 = *v209;
              uint64_t v208 = v209;
              if (!*v209) {
                goto LABEL_264;
              }
            }
            if (v210 >= v206) {
              break;
            }
            long long v207 = v209[1];
            if (!v207)
            {
              uint64_t v208 = v209 + 1;
              goto LABEL_264;
            }
          }
          int v211 = v209;
        }
        else
        {
LABEL_264:
          int v211 = operator new(0x30uLL);
          v211[4] = v206;
          *((_DWORD *)v211 + 10) = 0;
          *int v211 = 0;
          v211[1] = 0;
          v211[2] = v209;
          *uint64_t v208 = v211;
          uint64_t v212 = **(void **)(v20 + 128);
          float v213 = v211;
          if (v212)
          {
            *(void *)(v20 + 128) = v212;
            float v213 = *v208;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v20 + 136), v213);
          ++*(void *)(v20 + 144);
          uint64_t v204 = *(void *)v202;
        }
        *((float *)v211 + 10) = v205 - v200;
        *(float *)(v204 + 40) = v202[12];
        if (!*(unsigned char *)(v204 + 55))
        {
          float v214 = (char *)v850;
          long long v203 = (uint64_t *)v851;
          int64_t v215 = (v851 - (unsigned char *)v850) >> 3;
          if (v853 < v215 + 1)
          {
            float v216 = v73;
            float v217 = v852;
            unint64_t v218 = (1 << -(char)__clz(v853 + 1));
            if (v853 >= 0xFFFFFFFFFFFFFFFELL) {
              unint64_t v218 = 1;
            }
            if (v218 <= v215 + 1) {
              int64_t v219 = v215 + 1;
            }
            else {
              int64_t v219 = v218;
            }
            char v220 = malloc_type_malloc(8 * v219, 0x2004093837F09uLL);
            char v221 = (char *)v220;
            unint64_t v222 = (uint64_t *)v850;
            int16x8x2_t v223 = (uint64_t *)v851;
            if (v850 != v851)
            {
              unint64_t v224 = v851 - (unsigned char *)v850 - 8;
              if (v224 < 0x18)
              {
                float32x4x3_t v225 = v220;
                goto LABEL_283;
              }
              float32x4x3_t v225 = v220;
              if ((unint64_t)((char *)v220 - (unsigned char *)v850) < 0x20)
              {
                do
                {
LABEL_283:
                  uint64_t v232 = *v222++;
                  *v225++ = v232;
                }
                while (v222 != v223);
              }
              else
              {
                uint64_t v226 = (v224 >> 3) + 1;
                uint64_t v227 = 8 * (v226 & 0x3FFFFFFFFFFFFFFCLL);
                float32x4x3_t v225 = (void *)((char *)v220 + v227);
                float v228 = (long long *)((char *)v850 + 16);
                long long v229 = v220 + 1;
                uint64_t v230 = v226 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v231 = *v228;
                  *(v229 - 1) = *(v228 - 1);
                  *long long v229 = v231;
                  v228 += 2;
                  v229 += 2;
                  v230 -= 4;
                }
                while (v230);
                if (v226 != (v226 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  unint64_t v222 = (uint64_t *)((char *)v222 + v227);
                  goto LABEL_283;
                }
              }
            }
            if (v214 != v217) {
              free(v850);
            }
            long long v203 = (uint64_t *)&v221[8 * v215];
            v850 = v221;
            v851 = (char *)v203;
            unint64_t v853 = v219;
            uint64_t v204 = *(void *)v202;
            float v73 = v216;
          }
          *long long v203 = v204;
          v851 += 8;
        }
        v202 += 18;
        if (v202 != (float *)v73) {
          continue;
        }
        break;
      }
      unint64_t v198 = (uint64_t *)v850;
      unint64_t v199 = (uint64_t *)v851;
LABEL_287:
      unint64_t v233 = 126 - 2 * __clz(v199 - v198);
      if (v199 == v198) {
        uint64_t v234 = 0;
      }
      else {
        uint64_t v234 = v233;
      }
      BOOL v836 = 1;
      std::__introsort<std::_ClassicAlgPolicy,md::TransitLink::updateLineStyles(int,md::TransitLineMergeDisable,BOOL &)::$_0 &,md::TransitLineSegment **,false>((uint64_t)v198, v199, v234, 1);
      uint64_t v236 = (uint64_t *)v850;
      uint64_t v235 = (uint64_t *)v851;
      size_t v237 = v851 - (unsigned char *)v850;
      unint64_t v238 = (v851 - (unsigned char *)v850) >> 3;
      uint64_t v240 = *(unsigned char **)(v20 + 104);
      long long v239 = *(unsigned char **)(v20 + 112);
      unint64_t v241 = (v239 - v240) >> 3;
      if (v238 != v241
        || (int v242 = memcmp(v850, *(const void **)(v20 + 104), v851 - (unsigned char *)v850), v836 = v242 != 0, v242))
      {
        uint64_t v243 = *(void *)(v20 + 120);
        if (v238 <= (v243 - (uint64_t)v240) >> 3)
        {
          if (v241 >= v238)
          {
            if (v851 != v850) {
              memmove(v240, v850, v237);
            }
            long long v239 = v240;
          }
          else
          {
            if (v239 != v240)
            {
              memmove(v240, v850, v239 - v240);
              long long v239 = *(unsigned char **)(v20 + 112);
            }
            unsigned int v247 = (char *)v850 + 8 * v241;
            size_t v237 = v851 - v247;
            if (v851 != v247) {
              memmove(v239, v247, v851 - v247);
            }
          }
        }
        else
        {
          if (v240)
          {
            *(void *)(v20 + 112) = v240;
            operator delete(v240);
            uint64_t v243 = 0;
            *(void *)(v20 + 104) = 0;
            *(void *)(v20 + 112) = 0;
            *(void *)(v20 + 120) = 0;
          }
          if ((v237 & 0x8000000000000000) != 0) {
            goto LABEL_1172;
          }
          uint64_t v244 = v243 >> 2;
          if (v243 >> 2 <= v238) {
            uint64_t v244 = v238;
          }
          unint64_t v245 = (unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v244;
          if (v245 >> 61) {
LABEL_1172:
          }
            abort();
          uint64_t v246 = (char *)operator new(8 * v245);
          long long v239 = v246;
          *(void *)(v20 + 104) = v246;
          *(void *)(v20 + 112) = v246;
          *(void *)(v20 + 120) = &v246[8 * v245];
          if (v235 != v236) {
            memcpy(v246, v236, v237);
          }
        }
        v239 += v237;
        *(void *)(v20 + 112) = v239;
        uint64_t v240 = *(unsigned char **)(v20 + 104);
      }
      *(unsigned char *)(v20 + 168) = 0;
      *(void *)&long long v864 = v866;
      *((void *)&v864 + 1) = v866;
      *(void *)&long long v865 = v866;
      *((void *)&v865 + 1) = 8;
      if (v239 != v240)
      {
        uint64_t v248 = 0;
        char v249 = 0;
        unint64_t v250 = 0;
        unint64_t v251 = v866;
        do
        {
          uint64_t v254 = *(void *)&v240[8 * v250];
          *((void *)&v864 + 1) = v251;
          md::TransitLink::populateMergedLinesAtIndex((void *)v20, v250, (uint64_t)&v864);
          uint64_t v255 = *((void *)&v864 + 1);
          unint64_t v251 = (void *)v864;
          if ((void)v864 == *((void *)&v864 + 1))
          {
            unsigned int v252 = 0;
            char v253 = 1;
          }
          else
          {
            uint64_t v256 = 0;
            unsigned int v252 = 0;
            char v253 = 1;
            uint64_t v257 = v864;
            do
            {
              if (*(unsigned char *)(*(void *)v257 + 57))
              {
                uint64_t v258 = *(void *)(**(void **)v257 + 24);
                if (v252) {
                  v253 &= v256 == v258;
                }
                else {
                  uint64_t v256 = *(void *)(**(void **)v257 + 24);
                }
                if (v249)
                {
                  if (v248 != v258) {
                    *(unsigned char *)(v20 + 168) = 1;
                  }
                  uint64_t v258 = v248;
                }
                ++v252;
                char v249 = 1;
                uint64_t v248 = v258;
              }
              v257 += 8;
            }
            while (v257 != v255);
          }
          *(unsigned char *)(v254 + 54) = v252 > 1;
          *(unsigned char *)(v254 + 53) = (v253 & 1) == 0;
          ++v250;
          uint64_t v240 = *(unsigned char **)(v20 + 104);
        }
        while (v250 < (uint64_t)(*(void *)(v20 + 112) - (void)v240) >> 3);
        if (v251 != (void *)v865) {
          free(v251);
        }
      }
      if (v850 != v852) {
        free(v850);
      }
      std::__tree<std::__value_type<unsigned int,MergeGroup>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,MergeGroup>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,MergeGroup>>>::destroy(v856);
      std::__tree<std::__value_type<unsigned int,MergeGroup>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,MergeGroup>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,MergeGroup>>>::destroy(v859);
      std::__tree<std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::__map_value_compare<md::TransitSystemAndColor,std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::less<md::TransitSystemAndColor>,true>,std::allocator<std::__value_type<md::TransitSystemAndColor,MergeGroup>>>::destroy(v862);
      uint64_t v19 = a1;
      if (__p) {
        operator delete(__p);
      }
      BOOL v21 = v836 || v812;
      v20 += 248;
      if (v20 == v810) {
        goto LABEL_337;
      }
    }
  }
  BOOL v21 = 0;
LABEL_337:
  *(unsigned char *)(v19 + 1370) |= v21;
  char v259 = v21 | a4 | v806;
  if (!*(unsigned char *)(v19 + 1369)) {
    goto LABEL_437;
  }
  *(unsigned char *)(v19 + 1369) = 0;
  uint64_t v260 = v19;
  uint64_t v261 = *(void *)(v19 + 1232);
  if (!*(unsigned char *)(v260 + 1248) || (char v262 = 0, !*(unsigned char *)(v260 + 1251)))
  {
    uint64_t v263 = (unsigned char *)geo::codec::VectorTile::transitVertices(*(geo::codec::VectorTile **)(v260 + 720));
    if (v263)
    {
      char v842 = 0;
      char v264 = 0;
      uint64_t v265 = 0;
      int v267 = *(_DWORD *)(a1 + 172);
      int v266 = *(_DWORD *)(a1 + 176);
      unsigned int v268 = *(unsigned __int8 *)(a1 + 169);
      if (v266 >= 1 << v268) {
        int v269 = 1 << v268;
      }
      else {
        int v269 = 0;
      }
      if (v266 >= 0) {
        int v270 = -v269;
      }
      else {
        int v270 = 1 << v268;
      }
      int v271 = v270 + v266;
      uint64_t v272 = (void *)(v261 + 8);
      uint64_t v273 = COERCE_UNSIGNED_INT(1.0 / (float)(1 << *v263));
      LOWORD(v858) = 768;
      size_t __sz = v273 << 32;
      int v837 = v271;
      while (1)
      {
        char v274 = v264;
        uint64_t v275 = *((unsigned __int8 *)&v858 + v265);
        if (!*(unsigned char *)(a1 + v275 + 1248))
        {
          uint64_t v276 = (_DWORD *)((char *)&neighborTileOffsets + 8 * v275);
          int v277 = v271 + *v276;
          int v278 = v277 >= 1 << v268 ? 1 << v268 : 0;
          int v279 = v277 >= 0 ? -v278 : 1 << v268;
          uint64_t v280 = (_DWORD *)*v272;
          if (*v272)
          {
            int v281 = v276[1] + v267;
            int v282 = v279 + v277;
            __n128 v283 = v272;
            do
            {
              int v287 = v280[8];
              BOOL v288 = v287 < v282;
              if (v287 == v282 && (v289 = v280[9], BOOL v288 = v289 < v281, v289 == v281)) {
                BOOL v284 = v280[10] < v268;
              }
              else {
                BOOL v284 = v288;
              }
              BOOL v285 = !v284;
              if (v284) {
                unint64_t v286 = v280 + 2;
              }
              else {
                unint64_t v286 = v280;
              }
              if (v285) {
                __n128 v283 = v280;
              }
              uint64_t v280 = (_DWORD *)*v286;
            }
            while (*v286);
            if (v283 != v272)
            {
              int v290 = *((_DWORD *)v283 + 8);
              BOOL v291 = v282 < v290;
              if (v282 == v290 && (v292 = *((_DWORD *)v283 + 9), BOOL v291 = v281 < v292, v281 == v292))
              {
                if (*((_DWORD *)v283 + 10) <= v268) {
                  goto LABEL_378;
                }
              }
              else if (!v291)
              {
LABEL_378:
                *(unsigned char *)(a1 + v275 + 1248) = 1;
                long long v864 = 0uLL;
                *(void *)&long long v865 = 0;
                md::TransitInterTileMediator::populateSectionTerminusPaths(v275, (uint64_t)&v864, *(void **)(a1 + 888), *(void **)(a1 + 896));
                uint64_t v293 = *(void *)v283[7];
                v850 = 0;
                v851 = 0;
                v852 = 0;
                md::TransitInterTileMediator::populateSectionTerminusPaths(oppositeTileEdges[v275], (uint64_t)&v850, *(void **)(v293 + 888), *(void **)(v293 + 896));
                long long v294 = v864;
                float32x4_t v295 = (uint64_t *)v850;
                if ((void)v864 != *((void *)&v864 + 1))
                {
                  uint64_t v296 = (uint64_t *)v851;
                  size_t v297 = __sz | v275;
                  unint64_t v298 = (void *)v864;
                  do
                  {
                    long long v299 = v295;
                    if (v295 != v296)
                    {
                      uint64_t v300 = v298[1];
                      uint64_t v301 = v298[2];
                      long long v299 = v295;
                      if ((v297 | 2) == 2)
                      {
                        while (1)
                        {
                          BOOL v302 = v300 == v299[1] && v301 == v299[2];
                          if (v302
                            && vabds_f32(*(float *)(v298[4] + 16), *(float *)(v299[4] + 16)) <= *((float *)&v297 + 1))
                          {
                            break;
                          }
                          v299 += 5;
                          if (v299 == v296) {
                            goto LABEL_380;
                          }
                        }
                      }
                      else
                      {
                        while (1)
                        {
                          BOOL v303 = v300 == v299[1] && v301 == v299[2];
                          if (v303
                            && vabds_f32(*(float *)(v298[4] + 20), *(float *)(v299[4] + 20)) <= *((float *)&v297 + 1))
                          {
                            break;
                          }
                          v299 += 5;
                          if (v299 == v296) {
                            goto LABEL_380;
                          }
                        }
                      }
                    }
                    if (v299 == v296)
                    {
LABEL_380:
                      *(unsigned char *)(v298[4] + 34) = 3;
                    }
                    else
                    {
                      uint64_t v305 = v299[3];
                      uint64_t v304 = v299[4];
                      v861 = *(uint64_t ***)(v304 + 8);
                      uint64_t v306 = v298[4];
                      float v308 = *((float *)&v861 + 1);
                      float v307 = *(float *)&v861;
                      if ((v298[3] == v306) == (v305 == v304))
                      {
                        float v307 = -*(float *)&v861;
                        float v308 = -*((float *)&v861 + 1);
                        *(float *)&v861 = -*(float *)&v861;
                        *((float *)&v861 + 1) = -*((float *)&v861 + 1);
                      }
                      if (*(uint64_t ***)(v306 + 8) == v861)
                      {
                        char v309 = 2;
                      }
                      else if ((float)((float)(*(float *)(v306 + 8) * v307) + (float)(*(float *)(v306 + 12) * v308)) >= 0.866)
                      {
                        *(float *)(v306 + 8) = v307;
                        *(float *)(v306 + 12) = v308;
                        char v309 = 1;
                        char v842 = 1;
                      }
                      else
                      {
                        char v309 = 4;
                      }
                      *(unsigned char *)(v306 + 34) = v309;
                    }
                    v298 += 5;
                  }
                  while (v298 != *((void **)&v294 + 1));
                }
                if (v295) {
                  operator delete(v295);
                }
                if ((void)v294) {
                  operator delete((void *)v294);
                }
                int v271 = v837;
              }
            }
          }
        }
        char v264 = 1;
        uint64_t v265 = 1;
        if (v274)
        {
          uint64_t v260 = a1;
          char v262 = v842;
          goto LABEL_415;
        }
      }
    }
    char v262 = 0;
    uint64_t v260 = a1;
  }
LABEL_415:
  v259 |= v262;
  unsigned int v310 = *(unsigned __int8 *)(v260 + 169);
  uint64_t v19 = v260;
  if (v310 < 0xB)
  {
LABEL_437:
    if (v259) {
      goto LABEL_448;
    }
    goto LABEL_958;
  }
  uint64_t v311 = *(void *)(v260 + 1232);
  int v312 = *(_DWORD *)(v260 + 176);
  if (v312 >= 1 << v310) {
    int v313 = 1 << v310;
  }
  else {
    int v313 = 0;
  }
  if (v312 >= 0) {
    int v314 = -v313;
  }
  else {
    int v314 = 1 << v310;
  }
  unint64_t v317 = *(_DWORD **)(v311 + 8);
  unint64_t v315 = (_DWORD *)(v311 + 8);
  uint64_t v316 = v317;
  if (!v317) {
    goto LABEL_447;
  }
  int v318 = *(_DWORD *)(v19 + 172);
  int v319 = v314 + v312;
  char v320 = v315;
  do
  {
    int v324 = v316[8];
    BOOL v325 = v324 < v319;
    if (v324 == v319 && (v326 = v316[9], BOOL v325 = v326 < v318, v326 == v318)) {
      BOOL v321 = v316[10] < v310;
    }
    else {
      BOOL v321 = v325;
    }
    BOOL v322 = !v321;
    if (v321) {
      long long v323 = v316 + 2;
    }
    else {
      long long v323 = v316;
    }
    if (v322) {
      char v320 = v316;
    }
    uint64_t v316 = (_DWORD *)*v323;
  }
  while (*v323);
  if (v320 == v315) {
    goto LABEL_447;
  }
  int v327 = v320[8];
  BOOL v328 = v319 < v327;
  if (v319 != v327 || (v329 = v320[9], BOOL v328 = v318 < v329, v318 != v329))
  {
    if (!v328) {
      goto LABEL_443;
    }
LABEL_447:
    a6.i32[0] = *(_DWORD *)(v19 + 1252);
    *(_DWORD *)(v19 + 1252) = 16843009;
    if (v259 & 1 | vmaxv_u16((uint16x4_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a6))) & 1) {
      goto LABEL_448;
    }
    goto LABEL_958;
  }
  if (v320[10] > v310) {
    goto LABEL_447;
  }
LABEL_443:
  if (*(_DWORD *)(v19 + 1252) != v320[12])
  {
    *(_DWORD *)(v19 + 1252) = v320[12];
LABEL_448:
    uint64_t v330 = *(uint64_t **)(*(void *)(v19 + 936) + 16);
    char v331 = 1;
    if (!v330) {
      goto LABEL_959;
    }
    while (1)
    {
      v330[12] = 0;
      *((unsigned char *)v330 + 105) = 0;
      uint64_t v332 = v330 + 7;
      long long v333 = v330 + 10;
      uint64_t v334 = (uint64_t *)v330[6];
      __szfloat a = (size_t)v334;
      uint64_t v335 = 0;
      if (v334 == v330 + 7)
      {
        int v838 = 0;
      }
      else
      {
        int v838 = 0;
        do
        {
          unint64_t v336 = (md::TransitLink *)v334[4];
          long long v337 = (void *)__sza;
          while (1)
          {
            long long v338 = (const md::TransitLink **)v337[4];
            if (v338 != (const md::TransitLink **)v336
              && !md::TransitLink::isSuperset(v336, v338[13], v338[14]))
            {
              break;
            }
            uint64_t v339 = (uint64_t *)v337[1];
            if (v339)
            {
              do
              {
                uint64_t v340 = v339;
                uint64_t v339 = (uint64_t *)*v339;
              }
              while (v339);
            }
            else
            {
              do
              {
                uint64_t v340 = (uint64_t *)v337[2];
                _ZF = *v340 == (void)v337;
                long long v337 = v340;
              }
              while (!_ZF);
            }
            long long v337 = v340;
            if (v340 == v332)
            {
              unint64_t v341 = (void *)v330[9];
              if (v341 == v333)
              {
LABEL_465:
                v330[12] = (uint64_t)v336;
                *((_WORD *)v330 + 52) = 257;
                int v838 = 1;
                uint64_t v335 = v336;
              }
              else
              {
                while (1)
                {
                  uint64_t v344 = (const md::TransitLink **)v341[4];
                  if (v344 != (const md::TransitLink **)v336
                    && !md::TransitLink::isSuperset(v336, v344[13], v344[14]))
                  {
                    break;
                  }
                  uint64_t v345 = (void *)v341[1];
                  if (v345)
                  {
                    do
                    {
                      uint64_t v346 = v345;
                      uint64_t v345 = (void *)*v345;
                    }
                    while (v345);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v346 = (void *)v341[2];
                      _ZF = *v346 == (void)v341;
                      unint64_t v341 = v346;
                    }
                    while (!_ZF);
                  }
                  unint64_t v341 = v346;
                  if (v346 == v333) {
                    goto LABEL_465;
                  }
                }
              }
              break;
            }
          }
          long long v342 = (uint64_t *)v334[1];
          if (v342)
          {
            do
            {
              uint64_t v343 = v342;
              long long v342 = (uint64_t *)*v342;
            }
            while (v342);
          }
          else
          {
            do
            {
              uint64_t v343 = (uint64_t *)v334[2];
              _ZF = *v343 == (void)v334;
              uint64_t v334 = v343;
            }
            while (!_ZF);
          }
          uint64_t v334 = v343;
        }
        while (v343 != v332);
      }
      uint64_t v347 = (void *)v330[9];
      if (v347 == v333)
      {
        uint64_t v349 = (uint64_t *)__sza;
      }
      else
      {
        int v348 = (void *)v330[9];
        uint64_t v349 = (uint64_t *)__sza;
        do
        {
          uint64_t v350 = (md::TransitLink *)v348[4];
          if ((uint64_t *)__sza == v332)
          {
LABEL_496:
            unint64_t v355 = v347;
            while (1)
            {
              unint64_t v356 = (const md::TransitLink **)v355[4];
              if (v356 != (const md::TransitLink **)v350
                && !md::TransitLink::isSuperset(v350, v356[13], v356[14]))
              {
                break;
              }
              uint64_t v357 = (void *)v355[1];
              if (v357)
              {
                do
                {
                  unint64_t v358 = v357;
                  uint64_t v357 = (void *)*v357;
                }
                while (v357);
              }
              else
              {
                do
                {
                  unint64_t v358 = (void *)v355[2];
                  _ZF = *v358 == (void)v355;
                  unint64_t v355 = v358;
                }
                while (!_ZF);
              }
              unint64_t v355 = v358;
              if (v358 == v333)
              {
                v330[12] = (uint64_t)v350;
                *((_WORD *)v330 + 52) = 256;
                int v838 = 1;
                uint64_t v335 = v350;
                break;
              }
            }
          }
          else
          {
            uint64_t v351 = (void *)__sza;
            while (1)
            {
              uint64_t v352 = (const md::TransitLink **)v351[4];
              if (v352 != (const md::TransitLink **)v350
                && !md::TransitLink::isSuperset(v350, v352[13], v352[14]))
              {
                break;
              }
              uint64_t v353 = (uint64_t *)v351[1];
              if (v353)
              {
                do
                {
                  long long v354 = v353;
                  uint64_t v353 = (uint64_t *)*v353;
                }
                while (v353);
              }
              else
              {
                do
                {
                  long long v354 = (uint64_t *)v351[2];
                  _ZF = *v354 == (void)v351;
                  uint64_t v351 = v354;
                }
                while (!_ZF);
              }
              uint64_t v351 = v354;
              if (v354 == v332) {
                goto LABEL_496;
              }
            }
          }
          int v359 = (void *)v348[1];
          if (v359)
          {
            do
            {
              uint64_t v360 = v359;
              int v359 = (void *)*v359;
            }
            while (v359);
          }
          else
          {
            do
            {
              uint64_t v360 = (void *)v348[2];
              _ZF = *v360 == (void)v348;
              int v348 = v360;
            }
            while (!_ZF);
          }
          int v348 = v360;
        }
        while (v360 != v333);
      }
      if (!v838)
      {
        if (v349 == v332)
        {
          unint64_t v361 = 0;
          uint64_t v335 = 0;
        }
        else
        {
          uint64_t v335 = 0;
          unint64_t v361 = 0;
          uint64_t v362 = v349;
          do
          {
            uint64_t v363 = v362[4];
            unint64_t v364 = (uint64_t)(*(void *)(v363 + 112) - *(void *)(v363 + 104)) >> 3;
            _CF = v361 >= v364;
            if (v361 <= v364) {
              unint64_t v361 = (uint64_t)(*(void *)(v363 + 112) - *(void *)(v363 + 104)) >> 3;
            }
            if (!_CF) {
              uint64_t v335 = (md::TransitLink *)v362[4];
            }
            uint64_t v366 = (uint64_t *)v362[1];
            if (v366)
            {
              do
              {
                char v367 = v366;
                uint64_t v366 = (uint64_t *)*v366;
              }
              while (v366);
            }
            else
            {
              do
              {
                char v367 = (uint64_t *)v362[2];
                _ZF = *v367 == (void)v362;
                uint64_t v362 = v367;
              }
              while (!_ZF);
            }
            uint64_t v362 = v367;
          }
          while (v367 != v332);
        }
        if (v347 != v333)
        {
          v368 = v347;
          do
          {
            uint64_t v369 = v368[4];
            unint64_t v370 = (uint64_t)(*(void *)(v369 + 112) - *(void *)(v369 + 104)) >> 3;
            BOOL v371 = v361 >= v370;
            if (v361 <= v370) {
              unint64_t v361 = (uint64_t)(*(void *)(v369 + 112) - *(void *)(v369 + 104)) >> 3;
            }
            if (!v371) {
              uint64_t v335 = (md::TransitLink *)v368[4];
            }
            unsigned __int16 v372 = (void *)v368[1];
            if (v372)
            {
              do
              {
                int v373 = v372;
                unsigned __int16 v372 = (void *)*v372;
              }
              while (v372);
            }
            else
            {
              do
              {
                int v373 = (void *)v368[2];
                _ZF = *v373 == (void)v368;
                v368 = v373;
              }
              while (!_ZF);
            }
            v368 = v373;
          }
          while (v373 != v333);
        }
        v330[12] = (uint64_t)v335;
        if (!v335) {
          goto LABEL_450;
        }
        *((unsigned char *)v330 + 104) = *(void *)(*(void *)v335 + 48) == v330[4];
        uint64_t v349 = (uint64_t *)__sza;
      }
      _D0 = 0;
      if (v349 != v332)
      {
        unint64_t v375 = v349;
        do
        {
          unint64_t v376 = (uint64_t *)v375[1];
          unint64_t v377 = v375;
          if (v376)
          {
            do
            {
              uint8x8_t v378 = v376;
              unint64_t v376 = (uint64_t *)*v376;
            }
            while (v376);
          }
          else
          {
            do
            {
              uint8x8_t v378 = (uint64_t *)v377[2];
              _ZF = *v378 == (void)v377;
              unint64_t v377 = v378;
            }
            while (!_ZF);
          }
          _D0 = vsub_f32(_D0, *(float32x2_t *)(*(void *)(v375[4] + 64) - 56));
          unint64_t v375 = v378;
        }
        while (v378 != v332);
      }
      uint64_t v379 = v347;
      if (v347 != v333)
      {
        do
        {
          uint64_t v391 = (void *)v379[1];
          v392 = v379;
          if (v391)
          {
            do
            {
              size_t v393 = v391;
              uint64_t v391 = (void *)*v391;
            }
            while (v391);
          }
          else
          {
            do
            {
              size_t v393 = (void *)v392[2];
              _ZF = *v393 == (void)v392;
              v392 = v393;
            }
            while (!_ZF);
          }
          _D0 = vadd_f32(**(float32x2_t **)(v379[4] + 56), _D0);
          uint64_t v379 = v393;
        }
        while (v393 != v333);
      }
      _S2 = _D0.i32[1];
      __asm { FMLA            S1, S2, V0.S[1] }
      float v384 = 1.0 / sqrtf(_S1);
      float v385 = v384 * _D0.f32[0];
      float v386 = vmuls_lane_f32(v384, _D0, 1);
      *(float *)&long long v864 = v384 * _D0.f32[0];
      *((float *)&v864 + 1) = v386;
      v850 = 0;
      if (!(void)v864) {
        goto LABEL_600;
      }
      unint64_t v387 = (void *)__sza;
      if ((uint64_t *)__sza != v332)
      {
        size_t v388 = 0;
        char v389 = 0;
        float v390 = 1.0;
        while (1)
        {
          size_t v394 = (md::TransitLink *)v387[4];
          uint64_t v395 = *((void *)v394 + 8);
          if (*(unsigned char *)(v395 - 3))
          {
            if (v394 == v335) {
              goto LABEL_571;
            }
            if (v838)
            {
              uint64_t v396 = (const md::TransitLink *)*((void *)v335 + 13);
              size_t v397 = (const md::TransitLink *)*((void *)v335 + 14);
            }
            else
            {
              uint64_t v396 = (const md::TransitLink *)*((void *)v335 + 13);
              size_t v397 = (const md::TransitLink *)*((void *)v335 + 14);
              if (*((void *)v394 + 14) - *((void *)v394 + 13) >= (unint64_t)(v397 - v396)) {
                goto LABEL_571;
              }
            }
            if (md::TransitLink::isSuperset((md::TransitLink *)v387[4], v396, v397))
            {
LABEL_571:
              float v398 = -(float)((float)(*(float *)(v395 - 56) * v385) + (float)(*(float *)(v395 - 52) * v386));
              v389 |= v390 > v398;
              if (v390 > v398) {
                size_t v388 = v394;
              }
              float v390 = fminf(v390, v398);
            }
          }
          uint64_t v399 = (uint64_t *)v387[1];
          if (v399)
          {
            do
            {
              unint64_t v400 = v399;
              uint64_t v399 = (uint64_t *)*v399;
            }
            while (v399);
          }
          else
          {
            do
            {
              unint64_t v400 = (uint64_t *)v387[2];
              _ZF = *v400 == (void)v387;
              unint64_t v387 = v400;
            }
            while (!_ZF);
          }
          unint64_t v387 = v400;
          if (v400 == v332) {
            goto LABEL_581;
          }
        }
      }
      char v389 = 0;
      size_t v388 = 0;
      float v390 = 1.0;
LABEL_581:
      if (v347 != v333) {
        break;
      }
LABEL_582:
      if (v388)
      {
        v330[12] = (uint64_t)v388;
        *((unsigned char *)v330 + 104) = v389 & 1;
        uint64_t v335 = v388;
        goto LABEL_601;
      }
LABEL_600:
      if (!v335) {
        goto LABEL_450;
      }
LABEL_601:
      uint64_t v409 = *((void *)v335 + 13);
      uint64_t v408 = *((void *)v335 + 14);
      uint64_t v410 = v408 - v409;
      if (v408 == v409) {
        goto LABEL_450;
      }
      long long v864 = 0uLL;
      *(void *)&long long v865 = 0;
      unint64_t v411 = v330[11] + v330[8];
      if (v411)
      {
        if (v411 >> 61) {
          abort();
        }
        unint64_t v412 = (char *)operator new(8 * v411);
        *(void *)&long long v864 = v412;
        *((void *)&v864 + 1) = v412;
        *(void *)&long long v865 = &v412[8 * v411];
        unint64_t v413 = (uint64_t *)v330[6];
        if (v413 == v332)
        {
LABEL_614:
          uint64_t v414 = 0;
          goto LABEL_615;
        }
      }
      else
      {
        unint64_t v412 = 0;
        unint64_t v413 = (uint64_t *)__sza;
        if ((uint64_t *)__sza == v332) {
          goto LABEL_614;
        }
      }
      uint64_t v414 = 0;
      unint64_t v415 = v413;
      do
      {
        uint8x8_t v416 = (uint64_t *)v415[1];
        if (v416)
        {
          do
          {
            v417 = v416;
            uint8x8_t v416 = (uint64_t *)*v416;
          }
          while (v416);
        }
        else
        {
          do
          {
            v417 = (uint64_t *)v415[2];
            _ZF = *v417 == (void)v415;
            unint64_t v415 = v417;
          }
          while (!_ZF);
        }
        ++v414;
        unint64_t v415 = v417;
      }
      while (v417 != v332);
LABEL_615:
      std::vector<md::TransitLink *>::__insert_with_size[abi:nn180100]<std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>,std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>>((unint64_t *)&v864, (uint64_t)v412, v413, v330 + 7, v414);
      v418 = (void *)v330[9];
      if (v418 == v333)
      {
        uint64_t v419 = 0;
      }
      else
      {
        uint64_t v419 = 0;
        uint64_t v420 = (void *)v330[9];
        do
        {
          int v421 = (void *)v420[1];
          if (v421)
          {
            do
            {
              float v422 = v421;
              int v421 = (void *)*v421;
            }
            while (v421);
          }
          else
          {
            do
            {
              float v422 = (void *)v420[2];
              _ZF = *v422 == (void)v420;
              uint64_t v420 = v422;
            }
            while (!_ZF);
          }
          ++v419;
          uint64_t v420 = v422;
        }
        while (v422 != v333);
      }
      std::vector<md::TransitLink *>::__insert_with_size[abi:nn180100]<std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>,std::__tree_const_iterator<md::TransitLink *,std::__tree_node<md::TransitLink *,void *> *,long>>((unint64_t *)&v864, *((uint64_t *)&v864 + 1), v418, v330 + 10, v419);
      float v423 = (char *)*((void *)&v864 + 1);
      BOOL v424 = (__n128 *)v864;
      if ((void)v864 == *((void *)&v864 + 1))
      {
        unint64_t v425 = (char *)v864;
      }
      else
      {
        unint64_t v425 = (char *)v864;
        while (*(void *)v425 != v330[12])
        {
          v425 += 8;
          if (v425 == *((char **)&v864 + 1))
          {
            unint64_t v425 = (char *)*((void *)&v864 + 1);
            break;
          }
        }
        if (v425 != *((char **)&v864 + 1))
        {
          unint64_t v426 = v425 + 8;
          if (v425 + 8 != *((char **)&v864 + 1))
          {
            do
            {
              if (*(void *)v426 != v330[12])
              {
                *(void *)unint64_t v425 = *(void *)v426;
                v425 += 8;
              }
              v426 += 8;
            }
            while (v426 != v423);
            float v423 = (char *)*((void *)&v864 + 1);
            BOOL v424 = (__n128 *)v864;
          }
        }
      }
      if (v425 != v423)
      {
        unsigned int v427 = v425;
        int64_t v428 = v423 - v425;
        int64_t v429 = v423 - &v427[v428];
        if (v423 != &v427[v428]) {
          memmove(v427, &v427[v428], v423 - &v427[v428]);
        }
        float v423 = &v427[v429];
        *((void *)&v864 + 1) = &v427[v429];
      }
      if (v423 - (char *)v424 < 1025)
      {
LABEL_647:
        std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(v424, v423, (v423 - (char *)v424) >> 3, 0, 0);
        unint64_t v432 = v423 - (char *)v424;
        if (v423 == (char *)v424) {
          goto LABEL_657;
        }
      }
      else
      {
        unint64_t v430 = (v423 - (char *)v424) >> 3;
        while (1)
        {
          v431 = (uint64_t *)operator new(8 * v430, MEMORY[0x1E4FBA2D0]);
          if (v431) {
            break;
          }
          BOOL v288 = v430 > 1;
          v430 >>= 1;
          if (!v288) {
            goto LABEL_647;
          }
        }
        uint64_t v446 = v431;
        std::__stable_sort<std::_ClassicAlgPolicy,md::TransitJunction::updateLineJunctionSlots(void)::$_0 &,std::__wrap_iter<md::TransitLink **>>(v424, v423, (v423 - (char *)v424) >> 3, v431, v430);
        operator delete(v446);
        unint64_t v432 = v423 - (char *)v424;
        if (v423 == (char *)v424)
        {
LABEL_657:
          uint64_t v447 = (void *)v864;
          if ((void)v864) {
            goto LABEL_950;
          }
          goto LABEL_450;
        }
      }
      __szfloat b = v410;
      if (v432 >= 0x3FFFFFFFFFFFFFF9) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      size_t v433 = 4 * v432;
      size_t v434 = (BOOL *)operator new(4 * v432);
      unint64_t v821 = v410 >> 3;
      bzero(v434, v433);
      unint64_t v435 = 0;
      uint64_t v436 = v330[4];
      int v437 = *((unsigned __int8 *)v330 + 104);
      v839 = v434;
      uint64_t v438 = v434 + 25;
      do
      {
        uint64_t v439 = (void *)v424->n128_u64[0];
        BOOL v424 = (__n128 *)((char *)v424 + 8);
        uint64_t v440 = v439[14] - v439[13];
        *(void *)(v438 - 25) = v439;
        int v441 = *(void *)(*v439 + 48) == v436;
        *(v438 - 1) = v441;
        *uint64_t v438 = v437 == v441;
        *(void *)(v438 - 17) = v435;
        v435 += v440 >> 3;
        *(void *)(v438 - 9) = v435;
        v438 += 32;
      }
      while (v424 != (__n128 *)v423);
      v829 = v330;
      if (v435)
      {
        if (v435 >= 0x24924924924924ALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v442 = (char *)operator new(112 * v435);
        v443 = &v442[112 * v435];
        uint64_t v444 = v442;
        size_t v445 = v442;
        do
        {
          *(_OWORD *)size_t v445 = 0uLL;
          *((_OWORD *)v445 + 1) = 0uLL;
          *((_OWORD *)v445 + 5) = 0uLL;
          *((_OWORD *)v445 + 6) = 0uLL;
          *((_OWORD *)v445 + 3) = 0uLL;
          *((_OWORD *)v445 + 4) = 0uLL;
          *((_OWORD *)v445 + 2) = 0uLL;
          *((void *)v445 + 1) = v445 + 40;
          *((void *)v445 + 2) = v445 + 40;
          *((void *)v445 + 3) = v445 + 40;
          *((void *)v445 + 4) = 8;
          *((_DWORD *)v445 + 26) = -1;
          v445 += 112;
        }
        while (v445 != v443);
      }
      else
      {
        v443 = 0;
        uint64_t v444 = 0;
      }
      uint64_t v448 = 0;
      uint64_t v449 = &v434[v433];
      do
      {
        uint64_t v450 = *(uint64_t **)(*(void *)v434 + 104);
        unint64_t v451 = *(uint64_t **)(*(void *)v434 + 112);
        if (v450 != v451)
        {
          unint64_t v452 = &v444[112 * v448];
          do
          {
            uint64_t v453 = *v450;
            *(void *)unint64_t v452 = *v450;
            md::TransitLink::populateMergedLinesAtIndex(*(void **)v434, *(unsigned int *)(v453 + 40), (uint64_t)(v452 + 8));
            ++v448;
            v452[108] = v434[24];
            ++v450;
            v452 += 112;
          }
          while (v450 != v451);
        }
        v434 += 32;
      }
      while (v434 != v449);
      int v454 = v444;
      if (v444 == v443) {
        goto LABEL_947;
      }
      char v455 = 0;
      int16x8x2_t v456 = v444;
      do
      {
        uint64_t v457 = *((void *)v456 + 1);
        uint64_t v458 = *((void *)v456 + 2);
        if (v457 == v458) {
          goto LABEL_695;
        }
        int8x16x2_t v459 = (int8x8_t *)v829[12];
        int8x8_t v460 = v459[23];
        if (!*(void *)&v460) {
          goto LABEL_695;
        }
        uint8x8_t v461 = (uint8x8_t)vcnt_s8(v460);
        v461.i16[0] = vaddlv_u8(v461);
        uint64_t v462 = *(void *)&v460 - 1;
        int8x8_t v463 = v459[22];
        while (2)
        {
          unint64_t v464 = *(void *)(*(void *)(**(void **)v457 + 16) + 40);
          if (v461.u32[0] > 1uLL)
          {
            unint64_t v465 = *(void *)(*(void *)(**(void **)v457 + 16) + 40);
            if (*(void *)&v460 <= v464) {
              unint64_t v465 = v464 % *(void *)&v460;
            }
          }
          else
          {
            unint64_t v465 = v462 & v464;
          }
          uint64_t v466 = *(void **)(*(void *)&v463 + 8 * v465);
          if (!v466) {
            goto LABEL_671;
          }
          uint64_t v467 = (void *)*v466;
          if (!v467) {
            goto LABEL_671;
          }
          if (v461.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v468 = v467[1];
              if (v468 == v464)
              {
                if (v467[2] == v464) {
                  goto LABEL_692;
                }
              }
              else if ((v468 & v462) != v465)
              {
                goto LABEL_671;
              }
              uint64_t v467 = (void *)*v467;
              if (!v467) {
                goto LABEL_671;
              }
            }
          }
          while (1)
          {
            unint64_t v469 = v467[1];
            if (v469 == v464) {
              break;
            }
            if (v469 >= *(void *)&v460) {
              v469 %= *(void *)&v460;
            }
            if (v469 != v465) {
              goto LABEL_671;
            }
LABEL_686:
            uint64_t v467 = (void *)*v467;
            if (!v467) {
              goto LABEL_671;
            }
          }
          if (v467[2] != v464) {
            goto LABEL_686;
          }
LABEL_692:
          uint64_t v470 = v467[3];
          if (v470 && *(unsigned char *)(v470 + 57))
          {
            *((_DWORD *)v456 + 26) = *(_DWORD *)(v470 + 40);
            goto LABEL_696;
          }
LABEL_671:
          v457 += 8;
          if (v457 != v458) {
            continue;
          }
          break;
        }
LABEL_695:
        char v455 = 1;
LABEL_696:
        v456 += 112;
      }
      while (v456 != v443);
      if ((v455 & 1) == 0) {
        goto LABEL_939;
      }
      v825 = v449;
      uint64_t v471 = 0;
      v851 = 0;
      v852 = 0;
      v472 = v444;
      v850 = &v851;
      do
      {
        if (*((_DWORD *)v472 + 26) != -1)
        {
          uint64_t v473 = *((void *)v472 + 1);
          uint64_t v474 = *((void *)v472 + 2);
          while (v473 != v474)
          {
            unint64_t v475 = *(void *)(*(void *)(**(void **)v473 + 16) + 40);
            v476 = &v851;
            v477 = &v851;
            if (v851)
            {
              v478 = (uint64_t *)v851;
              while (1)
              {
                while (1)
                {
                  v476 = (char **)v478;
                  unint64_t v479 = v478[4];
                  if (v475 >= v479) {
                    break;
                  }
                  v478 = (uint64_t *)*v476;
                  v477 = v476;
                  if (!*v476) {
                    goto LABEL_714;
                  }
                }
                if (v479 >= v475) {
                  break;
                }
                v478 = (uint64_t *)v476[1];
                if (!v478)
                {
                  v477 = v476 + 1;
                  goto LABEL_714;
                }
              }
            }
            else
            {
LABEL_714:
              v480 = (uint64_t *)operator new(0x30uLL);
              v480[4] = v475;
              *((_DWORD *)v480 + 10) = *((_DWORD *)v472 + 26);
              uint64_t *v480 = 0;
              v480[1] = 0;
              v480[2] = (uint64_t)v476;
              char *v477 = (char *)v480;
              if (*(void *)v850)
              {
                v850 = *(void **)v850;
                v480 = (uint64_t *)*v477;
              }
              v481 = (uint64_t *)v851;
              _ZF = v480 == (uint64_t *)v851;
              *((unsigned char *)v480 + 24) = v480 == (uint64_t *)v851;
              if (!_ZF)
              {
                do
                {
                  uint64_t v482 = v480[2];
                  if (*(unsigned char *)(v482 + 24)) {
                    break;
                  }
                  v483 = *(uint64_t **)(v482 + 16);
                  uint64_t v484 = *v483;
                  if (*v483 == v482)
                  {
                    uint64_t v487 = v483[1];
                    if (!v487 || (int v488 = *(unsigned __int8 *)(v487 + 24), v485 = (unsigned char *)(v487 + 24), v488))
                    {
                      if (*(uint64_t **)v482 == v480)
                      {
                        uint64_t v489 = v480[2];
                      }
                      else
                      {
                        uint64_t v489 = *(void *)(v482 + 8);
                        uint64_t v490 = *(void *)v489;
                        *(void *)(v482 + 8) = *(void *)v489;
                        if (v490)
                        {
                          *(void *)(v490 + 16) = v482;
                          v483 = *(uint64_t **)(v482 + 16);
                        }
                        *(void *)(v489 + 16) = v483;
                        *(void *)(*(void *)(v482 + 16) + 8 * (**(void **)(v482 + 16) != v482)) = v489;
                        *(void *)uint64_t v489 = v482;
                        *(void *)(v482 + 16) = v489;
                        v483 = *(uint64_t **)(v489 + 16);
                        uint64_t v482 = *v483;
                      }
                      *(unsigned char *)(v489 + 24) = 1;
                      *((unsigned char *)v483 + 24) = 0;
                      uint64_t v493 = *(void *)(v482 + 8);
                      uint64_t *v483 = v493;
                      if (v493) {
                        *(void *)(v493 + 16) = v483;
                      }
                      *(void *)(v482 + 16) = v483[2];
                      *(void *)(v483[2] + 8 * (*(void *)v483[2] != (void)v483)) = v482;
                      *(void *)(v482 + 8) = v483;
                      goto LABEL_703;
                    }
                  }
                  else if (!v484 || (int v486 = *(unsigned __int8 *)(v484 + 24), v485 = (unsigned char *)(v484 + 24), v486))
                  {
                    if (*(uint64_t **)v482 == v480)
                    {
                      uint64_t v491 = v480[1];
                      *(void *)uint64_t v482 = v491;
                      if (v491)
                      {
                        *(void *)(v491 + 16) = v482;
                        v483 = *(uint64_t **)(v482 + 16);
                      }
                      v480[2] = (uint64_t)v483;
                      *(void *)(*(void *)(v482 + 16) + 8 * (**(void **)(v482 + 16) != v482)) = v480;
                      v480[1] = v482;
                      *(void *)(v482 + 16) = v480;
                      v483 = (uint64_t *)v480[2];
                    }
                    else
                    {
                      v480 = (uint64_t *)v480[2];
                    }
                    *((unsigned char *)v480 + 24) = 1;
                    *((unsigned char *)v483 + 24) = 0;
                    uint64_t v482 = v483[1];
                    v492 = *(uint64_t **)v482;
                    v483[1] = *(void *)v482;
                    if (v492) {
                      v492[2] = (uint64_t)v483;
                    }
                    *(void *)(v482 + 16) = v483[2];
                    *(void *)(v483[2] + 8 * (*(void *)v483[2] != (void)v483)) = v482;
                    *(void *)uint64_t v482 = v483;
LABEL_703:
                    v483[2] = v482;
                    break;
                  }
                  *(unsigned char *)(v482 + 24) = 1;
                  v480 = v483;
                  *((unsigned char *)v483 + 24) = v483 == v481;
                  unsigned char *v485 = 1;
                }
                while (v483 != v481);
              }
              v852 = (char *)++v471;
            }
            v473 += 8;
          }
        }
        v472 += 112;
      }
      while (v472 != v443);
      v494 = (uint64_t *)v851;
      int v454 = v444;
      if (v444 == v443)
      {
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v851);
LABEL_947:
        if (!v454) {
          goto LABEL_949;
        }
LABEL_948:
        operator delete(v444);
        goto LABEL_949;
      }
      char v495 = 0;
      v496 = v444;
      do
      {
        if (*((_DWORD *)v496 + 26) == -1)
        {
          uint64_t v497 = *((void *)v496 + 1);
          uint64_t v498 = *((void *)v496 + 2);
          if (v497 == v498 || v494 == 0) {
            goto LABEL_744;
          }
          while (1)
          {
            unint64_t v500 = *(void *)(*(void *)(**(void **)v497 + 16) + 40);
            v501 = (uint64_t **)&v851;
            v502 = v494;
            do
            {
              v503 = v502;
              v504 = v501;
              unint64_t v505 = v502[4];
              if (v505 >= v500) {
                v501 = (uint64_t **)v502;
              }
              else {
                ++v502;
              }
              v502 = (uint64_t *)*v502;
            }
            while (v502);
            if (v501 != (uint64_t **)&v851)
            {
              v506 = v505 >= v500 ? v503 : (uint64_t *)v504;
              if (v500 >= v506[4]) {
                break;
              }
            }
            v497 += 8;
            if (v497 == v498) {
              goto LABEL_744;
            }
          }
          v507 = v505 >= v500 ? v503 : (uint64_t *)v504;
          int v508 = *((_DWORD *)v507 + 10);
          if (v508 == -1) {
LABEL_744:
          }
            char v495 = 1;
          else {
            *((_DWORD *)v496 + 26) = v508;
          }
        }
        v496 += 112;
      }
      while (v496 != v443);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v494);
      if ((v495 & 1) == 0) {
        goto LABEL_939;
      }
      __lenfloat a = 0;
      v509 = v444;
      while (2)
      {
        if (*((_DWORD *)v509 + 26) != -1) {
          goto LABEL_773;
        }
        v851 = 0;
        v852 = 0;
        v850 = &v851;
        uint64_t v510 = v829[12];
        v512 = *(uint64_t ***)(v510 + 104);
        v511 = *(uint64_t ***)(v510 + 112);
        v513 = v444;
        if (v512 != v511)
        {
          v514 = v511;
          __pfloat a = v509;
          while (1)
          {
            v515 = *v512;
            uint64_t v516 = **v512;
            v517 = *(uint64_t ***)(v516 + 24);
            v861 = v517;
            int v518 = ((int)(float)(*(float *)(v516 + 44) * 255.0) << 16) | ((int)(float)(*(float *)(v516 + 48) * 255.0) << 24) | ((int)(float)(*(float *)(v516 + 40) * 255.0) << 8) | (int)(float)(*(float *)(v516 + 36) * 255.0);
            LODWORD(v862) = v518;
            int v519 = *((_DWORD *)v515 + 10);
            v520 = &v851;
            v521 = &v851;
            if (v851) {
              break;
            }
LABEL_796:
            v532 = operator new(0x38uLL);
            v532[4] = v517;
            *((_DWORD *)v532 + 10) = v518;
            *((_DWORD *)v532 + 12) = v519;
            void *v532 = 0;
            v532[1] = 0;
            v532[2] = v520;
            *v521 = (char *)v532;
            if (*(void *)v850)
            {
              v850 = *(void **)v850;
              v532 = *v521;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v851, v532);
            ++v852;
LABEL_778:
            if (++v512 == v514)
            {
              v513 = v444;
              v509 = __pa;
              goto LABEL_801;
            }
          }
          v522 = (uint64_t *)v851;
          while (1)
          {
            v520 = (char **)v522;
            unint64_t v523 = v522[4];
            if (v517 == (uint64_t **)v523)
            {
              unsigned int v524 = bswap32(v862);
              unsigned int v525 = bswap32(*((_DWORD *)v520 + 10));
              _CF = v524 >= v525;
              BOOL v526 = v524 > v525;
              int v527 = !_CF;
              if (v526 - v527 < 0)
              {
LABEL_781:
                v522 = (uint64_t *)*v520;
                v521 = v520;
                if (!*v520) {
                  goto LABEL_796;
                }
                continue;
              }
              unsigned int v528 = bswap32(*((_DWORD *)v520 + 10));
              unsigned int v529 = bswap32(v862);
              _CF = v528 >= v529;
              BOOL v530 = v528 > v529;
              int v531 = !_CF;
              if (v530 - v531 >= 0) {
                goto LABEL_778;
              }
            }
            else
            {
              if ((unint64_t)v517 < v523) {
                goto LABEL_781;
              }
              if (v523 >= (unint64_t)v517) {
                goto LABEL_778;
              }
            }
            v522 = (uint64_t *)v520[1];
            if (!v522)
            {
              v521 = v520 + 1;
              goto LABEL_796;
            }
          }
        }
LABEL_801:
        while (2)
        {
          if (v513 == v509 || *((_DWORD *)v513 + 26) == -1) {
            goto LABEL_800;
          }
          uint64_t v533 = ***((void ***)v513 + 1);
          v534 = *(uint64_t ***)(v533 + 24);
          v861 = v534;
          int v535 = ((int)(float)(*(float *)(v533 + 44) * 255.0) << 16) | ((int)(float)(*(float *)(v533 + 48) * 255.0) << 24) | ((int)(float)(*(float *)(v533 + 40) * 255.0) << 8) | (int)(float)(*(float *)(v533 + 36) * 255.0);
          LODWORD(v862) = v535;
          v536 = &v851;
          v537 = &v851;
          if (!v851) {
            goto LABEL_820;
          }
          v538 = (uint64_t *)v851;
          while (2)
          {
            while (2)
            {
              v536 = (char **)v538;
              unint64_t v539 = v538[4];
              if (v534 != (uint64_t **)v539)
              {
                if ((unint64_t)v534 >= v539)
                {
                  if (v539 >= (unint64_t)v534) {
                    goto LABEL_800;
                  }
                  goto LABEL_818;
                }
LABEL_805:
                v538 = (uint64_t *)*v536;
                v537 = v536;
                if (!*v536) {
                  goto LABEL_820;
                }
                continue;
              }
              break;
            }
            unsigned int v540 = bswap32(v862);
            unsigned int v541 = bswap32(*((_DWORD *)v536 + 10));
            _CF = v540 >= v541;
            BOOL v542 = v540 > v541;
            int v543 = !_CF;
            if (v542 - v543 < 0) {
              goto LABEL_805;
            }
            unsigned int v544 = bswap32(*((_DWORD *)v536 + 10));
            unsigned int v545 = bswap32(v862);
            _CF = v544 >= v545;
            BOOL v546 = v544 > v545;
            int v547 = !_CF;
            if (v546 - v547 >= 0) {
              goto LABEL_800;
            }
LABEL_818:
            v538 = (uint64_t *)v536[1];
            if (v538) {
              continue;
            }
            break;
          }
          v537 = v536 + 1;
LABEL_820:
          v548 = operator new(0x38uLL);
          v548[4] = v534;
          *((_DWORD *)v548 + 10) = v535;
          *((_DWORD *)v548 + 12) = *((_DWORD *)v513 + 26);
          void *v548 = 0;
          v548[1] = 0;
          v548[2] = v536;
          *v537 = (char *)v548;
          if (*(void *)v850)
          {
            v850 = *(void **)v850;
            v548 = *v537;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v851, v548);
          ++v852;
LABEL_800:
          v513 += 112;
          if (v513 != v443) {
            continue;
          }
          break;
        }
        uint64_t v549 = ***((void ***)v509 + 1);
        v550 = *(uint64_t ***)(v549 + 24);
        v861 = v550;
        LODWORD(v862) = ((int)(float)(*(float *)(v549 + 44) * 255.0) << 16) | ((int)(float)(*(float *)(v549 + 48) * 255.0) << 24) | ((int)(float)(*(float *)(v549 + 40) * 255.0) << 8) | (int)(float)(*(float *)(v549 + 36) * 255.0);
        v551 = (uint64_t *)v851;
        if (!v851) {
          goto LABEL_771;
        }
        v552 = (uint64_t **)&v851;
        v553 = (uint64_t *)v851;
        do
        {
          v559 = v553;
          v560 = v552;
          unint64_t v561 = v553[4];
          if ((uint64_t **)v561 == v550)
          {
            unsigned int v554 = bswap32(*((_DWORD *)v553 + 10));
            unsigned int v555 = bswap32(v862);
            _CF = v554 >= v555;
            BOOL v556 = v554 > v555;
            int v557 = !_CF;
            unsigned int v558 = (v556 - v557) >> 31;
          }
          else
          {
            unsigned int v558 = v561 < (unint64_t)v550;
          }
          if (v558)
          {
            ++v553;
            v552 = v560;
          }
          else
          {
            v552 = (uint64_t **)v553;
          }
          v553 = (uint64_t *)*v553;
        }
        while (v553);
        if (v552 == (uint64_t **)&v851)
        {
LABEL_771:
          __lenfloat a = 1;
        }
        else
        {
          if (v558) {
            v562 = v560;
          }
          else {
            v562 = v559;
          }
          v563 = (uint64_t **)*((void *)v562 + 4);
          if (v550 == v563)
          {
            if (v558) {
              v564 = v560;
            }
            else {
              v564 = v559;
            }
            unsigned int v565 = bswap32(v862);
            unsigned int v566 = bswap32(v564[10]);
            _CF = v565 >= v566;
            BOOL v567 = v565 > v566;
            int v568 = !_CF;
            if (v567 - v568 < 0) {
              goto LABEL_771;
            }
          }
          else if (v550 < v563)
          {
            goto LABEL_771;
          }
          if (v558) {
            v569 = v560;
          }
          else {
            v569 = v559;
          }
          *((_DWORD *)v509 + 26) = v569[12];
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v551);
LABEL_773:
        v509 += 112;
        if (v509 != v443) {
          continue;
        }
        break;
      }
      if (__lena)
      {
        if ((__szb & 0x8000000000000000) != 0) {
          abort();
        }
        v570 = operator new(__szb);
        bzero(v570, __szb);
        __pfloat b = 0;
        v851 = 0;
        v852 = 0;
        v850 = &v851;
        unint64_t v571 = v821 >> 1;
        __lenfloat b = ((__szb - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
        v572 = v839;
        memset(v570, 255, __lenb);
        while (1)
        {
          unint64_t v574 = *((void *)v572 + 1);
          unint64_t v573 = *((void *)v572 + 2);
          unint64_t v575 = v573 - v574;
          if (v573 > v574)
          {
            char v576 = 0;
            v577 = (uint64_t *)v851;
            uint64_t v578 = *((void *)v572 + 1);
            do
            {
              v579 = &v444[112 * v578];
              unsigned int v582 = *((_DWORD *)v579 + 26);
              v580 = v579 + 104;
              uint64_t v581 = v582;
              if (v582 != -1) {
                goto LABEL_860;
              }
              if (!v577) {
                goto LABEL_878;
              }
              unint64_t v583 = *(void *)(*(void *)(**(void **)&v444[112 * v578] + 16) + 40);
              v584 = (uint64_t **)&v851;
              v585 = v577;
              do
              {
                v586 = v585;
                v587 = v584;
                unint64_t v588 = v585[4];
                if (v588 >= v583) {
                  v584 = (uint64_t **)v585;
                }
                else {
                  ++v585;
                }
                v585 = (uint64_t *)*v585;
              }
              while (v585);
              if (v584 == (uint64_t **)&v851
                || (v588 >= v583 ? (v589 = v586) : (v589 = v587),
                    v583 < v589[4]
                 || (v588 >= v583 ? (v590 = (unsigned int *)v586) : (v590 = (unsigned int *)v587),
                     uint64_t v581 = v590[10],
                     _DWORD *v580 = v581,
                     v581 == -1)))
              {
LABEL_878:
                char v576 = 1;
              }
              else
              {
LABEL_860:
                *((void *)v570 + v581) = v578;
              }
              ++v578;
            }
            while (v578 != v573);
            if (v576)
            {
              if (v821 >= v575)
              {
                unint64_t v592 = (v821 - v575) >> 1;
                if (v575 <= 1) {
                  uint64_t v593 = 1;
                }
                else {
                  uint64_t v593 = v573 - v574;
                }
                uint64_t v813 = v593;
                v815 = v572;
                do
                {
                  v594 = &v444[112 * v574];
                  int v596 = *((_DWORD *)v594 + 26);
                  v595 = v594 + 104;
                  if (v596 == -1)
                  {
                    uint64_t v597 = *((void *)v572 + 1);
                    uint64_t v598 = v593;
                    unint64_t v599 = v574;
                    if (v572[25])
                    {
                      while (1)
                      {
                        unint64_t v600 = v597 + ~v599 + v575 + v592;
                        unint64_t v599 = *((void *)v570 + v600);
                        if (v599 == -1) {
                          break;
                        }
                        if (!--v598) {
                          goto LABEL_901;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v601 = v593;
                      unint64_t v602 = v574;
                      while (1)
                      {
                        unint64_t v600 = v602 - v597 + v592;
                        unint64_t v602 = *((void *)v570 + v600);
                        if (v602 == -1) {
                          break;
                        }
                        if (!--v601)
                        {
LABEL_901:
                          _DWORD *v595 = v571;
                          goto LABEL_892;
                        }
                      }
                    }
                    *((void *)v570 + v600) = v574;
                    _DWORD *v595 = v600;
                    unint64_t v603 = *(void *)(*(void *)(**(void **)&v444[112 * v574] + 16) + 40);
                    v604 = &v851;
                    v605 = &v851;
                    if (v851)
                    {
                      v606 = (uint64_t *)v851;
                      while (1)
                      {
                        while (1)
                        {
                          v604 = (char **)v606;
                          unint64_t v607 = v606[4];
                          if (v603 >= v607) {
                            break;
                          }
                          v606 = (uint64_t *)*v604;
                          v605 = v604;
                          if (!*v604) {
                            goto LABEL_909;
                          }
                        }
                        if (v607 >= v603) {
                          break;
                        }
                        v606 = (uint64_t *)v604[1];
                        if (!v606)
                        {
                          v605 = v604 + 1;
                          goto LABEL_909;
                        }
                      }
                      LODWORD(v571) = v821 >> 1;
                      uint64_t v593 = v813;
                      v572 = v815;
                    }
                    else
                    {
LABEL_909:
                      v608 = (uint64_t *)operator new(0x30uLL);
                      v608[4] = v603;
                      *((_DWORD *)v608 + 10) = *v595;
                      uint64_t *v608 = 0;
                      v608[1] = 0;
                      v608[2] = (uint64_t)v604;
                      *v605 = (char *)v608;
                      if (*(void *)v850)
                      {
                        v850 = *(void **)v850;
                        v608 = (uint64_t *)*v605;
                      }
                      v609 = (uint64_t *)v851;
                      _ZF = v608 == (uint64_t *)v851;
                      *((unsigned char *)v608 + 24) = v608 == (uint64_t *)v851;
                      LODWORD(v571) = v821 >> 1;
                      uint64_t v593 = v813;
                      v572 = v815;
                      if (!_ZF)
                      {
                        do
                        {
                          uint64_t v610 = v608[2];
                          if (*(unsigned char *)(v610 + 24)) {
                            break;
                          }
                          v611 = *(uint64_t **)(v610 + 16);
                          uint64_t v612 = *v611;
                          if (*v611 == v610)
                          {
                            uint64_t v615 = v611[1];
                            if (!v615 || (int v616 = *(unsigned __int8 *)(v615 + 24), v613 = (unsigned char *)(v615 + 24), v616))
                            {
                              if (*(uint64_t **)v610 == v608)
                              {
                                uint64_t v617 = v608[2];
                              }
                              else
                              {
                                uint64_t v617 = *(void *)(v610 + 8);
                                uint64_t v618 = *(void *)v617;
                                *(void *)(v610 + 8) = *(void *)v617;
                                if (v618)
                                {
                                  *(void *)(v618 + 16) = v610;
                                  v611 = *(uint64_t **)(v610 + 16);
                                }
                                *(void *)(v617 + 16) = v611;
                                *(void *)(*(void *)(v610 + 16) + 8 * (**(void **)(v610 + 16) != v610)) = v617;
                                *(void *)uint64_t v617 = v610;
                                *(void *)(v610 + 16) = v617;
                                v611 = *(uint64_t **)(v617 + 16);
                                uint64_t v610 = *v611;
                              }
                              *(unsigned char *)(v617 + 24) = 1;
                              *((unsigned char *)v611 + 24) = 0;
                              uint64_t v621 = *(void *)(v610 + 8);
                              uint64_t *v611 = v621;
                              if (v621) {
                                *(void *)(v621 + 16) = v611;
                              }
                              *(void *)(v610 + 16) = v611[2];
                              *(void *)(v611[2] + 8 * (*(void *)v611[2] != (void)v611)) = v610;
                              *(void *)(v610 + 8) = v611;
                              goto LABEL_890;
                            }
                          }
                          else if (!v612 || (int v614 = *(unsigned __int8 *)(v612 + 24), v613 = (unsigned char *)(v612 + 24), v614))
                          {
                            if (*(uint64_t **)v610 == v608)
                            {
                              uint64_t v619 = v608[1];
                              *(void *)uint64_t v610 = v619;
                              if (v619)
                              {
                                *(void *)(v619 + 16) = v610;
                                v611 = *(uint64_t **)(v610 + 16);
                              }
                              v608[2] = (uint64_t)v611;
                              *(void *)(*(void *)(v610 + 16) + 8 * (**(void **)(v610 + 16) != v610)) = v608;
                              v608[1] = v610;
                              *(void *)(v610 + 16) = v608;
                              v611 = (uint64_t *)v608[2];
                            }
                            else
                            {
                              v608 = (uint64_t *)v608[2];
                            }
                            *((unsigned char *)v608 + 24) = 1;
                            *((unsigned char *)v611 + 24) = 0;
                            uint64_t v610 = v611[1];
                            v620 = *(uint64_t **)v610;
                            v611[1] = *(void *)v610;
                            if (v620) {
                              v620[2] = (uint64_t)v611;
                            }
                            *(void *)(v610 + 16) = v611[2];
                            *(void *)(v611[2] + 8 * (*(void *)v611[2] != (void)v611)) = v610;
                            *(void *)uint64_t v610 = v611;
LABEL_890:
                            v611[2] = v610;
                            break;
                          }
                          *(unsigned char *)(v610 + 24) = 1;
                          v608 = v611;
                          *((unsigned char *)v611 + 24) = v611 == v609;
                          unsigned char *v613 = 1;
                        }
                        while (v611 != v609);
                      }
                      v852 = ++__pb;
                      unint64_t v573 = *((void *)v815 + 2);
                    }
                  }
LABEL_892:
                  ++v574;
                }
                while (v574 < v573);
              }
              else
              {
                v591 = &v444[112 * v574 + 104];
                do
                {
                  if (*(_DWORD *)v591 == -1) {
                    *(_DWORD *)v591 = v571;
                  }
                  v591 += 112;
                  --v575;
                }
                while (v575);
              }
            }
          }
          v572 += 32;
          if (v572 == v825) {
            break;
          }
          memset(v570, 255, __lenb);
        }
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v851);
        operator delete(v570);
      }
LABEL_939:
      int v454 = v444;
      if (v444 == v443) {
        goto LABEL_947;
      }
      v622 = v444;
      do
      {
        unint64_t v624 = *((unsigned int *)v622 + 26);
        if (v821 <= v624)
        {
          *((_DWORD *)v622 + 26) = v821 >> 1;
          LODWORD(v624) = v821 >> 1;
        }
        uint64_t v623 = *(void *)v622;
        if (v622[108]) {
          *(_DWORD *)(v623 + 48) = v624;
        }
        else {
          *(_DWORD *)(v623 + 44) = v624;
        }
        v622 += 112;
      }
      while (v622 != v443);
      if (v444)
      {
        do
        {
          v625 = (void *)*((void *)v443 - 13);
          if (v625 != *((void **)v443 - 11)) {
            free(v625);
          }
          v443 -= 112;
        }
        while (v443 != v444);
        goto LABEL_948;
      }
LABEL_949:
      operator delete(v839);
      uint64_t v330 = v829;
      uint64_t v447 = (void *)v864;
      if ((void)v864) {
LABEL_950:
      }
        operator delete(v447);
LABEL_450:
      uint64_t v330 = (uint64_t *)*v330;
      if (!v330)
      {
        char v331 = 1;
        uint64_t v19 = a1;
        goto LABEL_959;
      }
    }
    while (1)
    {
      uint8x8_t v401 = (md::TransitLink *)v347[4];
      uint64_t v402 = *((void *)v401 + 7);
      if (*(unsigned char *)(v402 + 93))
      {
        if (v401 == v335) {
          goto LABEL_591;
        }
        if (v838)
        {
          v403 = (const md::TransitLink *)*((void *)v335 + 13);
          uint64_t v404 = (const md::TransitLink *)*((void *)v335 + 14);
        }
        else
        {
          v403 = (const md::TransitLink *)*((void *)v335 + 13);
          uint64_t v404 = (const md::TransitLink *)*((void *)v335 + 14);
          if (*((void *)v401 + 14) - *((void *)v401 + 13) >= (unint64_t)(v404 - v403)) {
            goto LABEL_591;
          }
        }
        if (md::TransitLink::isSuperset((md::TransitLink *)v347[4], v403, v404))
        {
LABEL_591:
          float v405 = (float)(*(float *)v402 * v385) + (float)(*(float *)(v402 + 4) * v386);
          v389 &= v390 <= v405;
          if (v390 > v405) {
            size_t v388 = v401;
          }
          float v390 = fminf(v390, v405);
        }
      }
      size_t v406 = (void *)v347[1];
      if (v406)
      {
        do
        {
          size_t v407 = v406;
          size_t v406 = (void *)*v406;
        }
        while (v406);
      }
      else
      {
        do
        {
          size_t v407 = (void *)v347[2];
          _ZF = *v407 == (void)v347;
          uint64_t v347 = v407;
        }
        while (!_ZF);
      }
      uint64_t v347 = v407;
      if (v407 == v333) {
        goto LABEL_582;
      }
    }
  }
  if (v259) {
    goto LABEL_448;
  }
LABEL_958:
  char v331 = 0;
LABEL_959:
  v626 = *(void **)(a2 + 8);
  unint64_t v627 = v626[1];
  __szfloat c = v331;
  if ((v627 & (v627 - 1)) != 0)
  {
    unint64_t v629 = 0x1AF456233693CD46;
    if (v627 <= 0x1AF456233693CD46) {
      unint64_t v629 = 0x1AF456233693CD46 % v627;
    }
    v628 = *(void **)(*v626 + 8 * v629);
    do
    {
      do
        v628 = (void *)*v628;
      while (v628[1] != 0x1AF456233693CD46);
    }
    while (v628[2] != 0x1AF456233693CD46);
  }
  else
  {
    v628 = *(void **)(*v626 + 8 * ((v627 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        v628 = (void *)*v628;
      while (v628[1] != 0x1AF456233693CD46);
    }
    while (v628[2] != 0x1AF456233693CD46);
  }
  float v630 = *(double *)(*(void *)(v628[5] + 32) + 3768)
       / (*(double *)(*(void *)(v628[5] + 32) + 1368)
        * (*(double *)(v19 + 1312) - *(double *)(v19 + 1296)));
  uint64_t v631 = *(void *)(v19 + 888);
  v840 = *(void **)(v19 + 896);
  if ((void *)v631 != v840)
  {
    float32x4_t v843 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    do
    {
      v632 = *(unint64_t **)(v631 + 104);
      v633 = *(unint64_t **)(v631 + 112);
      if (v632 != v633)
      {
        v634 = (float *)(v631 + 136);
        do
        {
          unint64_t v639 = *v632;
          v640 = *(void **)v634;
          float v641 = 0.0;
          if (*(void *)v634)
          {
            unint64_t v642 = *(void *)(*(void *)(*(void *)v639 + 16) + 40);
            v643 = (float *)(v631 + 136);
            do
            {
              unint64_t v644 = v640[4];
              BOOL v645 = v644 >= v642;
              if (v644 >= v642) {
                v646 = v640;
              }
              else {
                v646 = v640 + 1;
              }
              if (v645) {
                v643 = (float *)v640;
              }
              v640 = (void *)*v646;
            }
            while (*v646);
            if (v643 != v634 && *((void *)v643 + 4) <= v642) {
              float v641 = v643[10];
            }
          }
          v647 = *(md::TransitJunction **)(*(void *)(v631 + 56) + 24);
          float v648 = v641;
          if (v647) {
            float v648 = md::TransitJunction::calculateOffsetForLineSegment(v647, *v632);
          }
          v649 = *(md::TransitJunction **)(*(void *)(v631 + 64) - 32);
          float v637 = v641;
          if (v649) {
            float v637 = md::TransitJunction::calculateOffsetForLineSegment(v649, v639);
          }
          float v635 = vabds_f32(v648, v637) * v630;
          if (fabsf(v648) <= fabsf(v637)) {
            float v636 = v648;
          }
          else {
            float v636 = v637;
          }
          if (v635 < *(float *)(v631 + 232))
          {
            float v638 = v648;
          }
          else
          {
            float v637 = v636;
            float v638 = v636;
          }
          *(float *)(v639 + 20) = v638;
          *(float *)(v639 + 24) = v637;
          *(float *)(v639 + 28) = v641;
          ++v632;
        }
        while (v632 != v633);
      }
      uint64_t v19 = a1;
      if (*(void *)(a1 + 784))
      {
        v650 = *(uint64_t **)(v631 + 40);
        if (!v650)
        {
          unint64_t v651 = *(void *)(**(void **)(v631 + 24) + 32);
          v652 = operator new(0x40uLL);
          v652[1] = 0;
          v652[2] = 0;
          void *v652 = &unk_1EF582390;
          v652[3] = 0;
          v652[4] = 0;
          v652[5] = 0;
          {
            operator new();
          }
          uint64_t v653 = mdm::Allocator::instance(void)::alloc;
          v652[6] = mdm::Allocator::instance(void)::alloc;
          if (v651)
          {
            if (v651 >> 60) {
              abort();
            }
            uint64_t v654 = 16 * v651;
            uint64_t v655 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v653 + 16))(v653, v654, 4);
            v652[3] = v655;
            uint64_t v656 = v655 + v654;
            v652[5] = v655 + v654;
            do
            {
              if (v655)
              {
                *(void *)uint64_t v655 = 0;
                *(void *)(v655 + 8) = 0;
                *(unsigned char *)(v655 + 7) = -1;
                *(_DWORD *)(v655 + 8) = 0;
                *(unsigned char *)(v655 + 12) = 0;
              }
              v655 += 16;
              v654 -= 16;
            }
            while (v654);
            v652[4] = v656;
          }
          *((_WORD *)v652 + 28) = 0;
          *(void *)&long long v657 = v652 + 3;
          *((void *)&v657 + 1) = v652;
          v658 = *(std::__shared_weak_count **)(v631 + 48);
          *(_OWORD *)(v631 + 40) = v657;
          if (v658 && !atomic_fetch_add(&v658->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v658->__on_zero_shared)(v658);
            std::__shared_weak_count::__release_weak(v658);
          }
          v650 = *(uint64_t **)(v631 + 40);
        }
        v659 = *(void **)(v631 + 80);
        v660 = *(void **)(v631 + 88);
        if (v659 != v660)
        {
          uint64_t v661 = 0;
          do
          {
            uint64_t v663 = *v650;
            if (*v659) {
              v664 = (unsigned __int8 *)(*v659 + 8);
            }
            else {
              v664 = 0;
            }
            uint64_t v665 = *(void *)v664;
            *(unsigned char *)(v663 + v661 + 11) = *(unsigned char *)(*(void *)v664 + 88);
            unsigned int v666 = v664[52];
            uint64_t v667 = *(void *)(v665 + 64);
            md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v665, v666);
            uint64_t v668 = v667 + 184 * v666;
            int v670 = *(unsigned __int8 *)(v668 + 177);
            v669 = (unsigned char *)(v668 + 177);
            if (v670)
            {
              md::TransitLine::_resolveStyle(v665, *(_DWORD *)(v665 + 60), *(void *)(v667 + 184 * v666), *(std::__shared_weak_count **)(v667 + 184 * v666 + 8), v667 + 184 * v666 + 16);
              unsigned char *v669 = 0;
            }
            uint64_t v671 = v663 + v661;
            int16x8_t v672 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)(v667 + 184 * v666 + 32), v843));
            *(int16x4_t *)v672.i8 = vmovn_s32((int32x4_t)v672);
            *(_DWORD *)(v663 + v661 + 4) = vmovn_s16(v672).u32[0];
            if (*v659) {
              uint64_t v673 = *v659 + 8;
            }
            else {
              uint64_t v673 = 0;
            }
            *(unsigned char *)(v671 + 8) = *(unsigned char *)(v673 + 52);
            int v674 = *(unsigned __int8 *)(v673 + 57);
            *(unsigned char *)(v671 + 12) = v674;
            if (v674
              && (unint64_t v675 = *(unsigned int *)(v673 + 40),
                  uint64_t v676 = *(void *)(v631 + 104),
                  v675 < (*(void *)(v631 + 112) - v676) >> 3))
            {
              uint64_t v677 = *(void *)(v676 + 8 * v675);
              uint64_t v678 = v663 + v661;
              *(_DWORD *)uint64_t v678 = *(_DWORD *)(v677 + 28);
              *(unsigned char *)(v678 + 9) = *(unsigned char *)(v677 + 53);
              char v662 = *(unsigned char *)(v677 + 54);
            }
            else
            {
              char v662 = 0;
              *(_DWORD *)uint64_t v671 = 0;
              *(unsigned char *)(v671 + 9) = 0;
            }
            *(unsigned char *)(v663 + v661 + 10) = v662;
            ++v659;
            v661 += 16;
          }
          while (v659 != v660);
          v650 = *(uint64_t **)(v631 + 40);
        }
        unint64_t v679 = *(void *)(v631 + 112) - *(void *)(v631 + 104);
        if (v679 >= 0x18) {
          char v680 = 3;
        }
        else {
          char v680 = v679 >> 3;
        }
        *((unsigned char *)v650 + 33) = v680;
        *((unsigned char *)v650 + 32) = *(unsigned char *)(v631 + 168);
        uint64_t v681 = *(void *)(v631 + 24);
        std::mutex::lock((std::mutex *)(v681 + 40));
        uint64_t v683 = *(void *)(v631 + 40);
        uint64_t v682 = *(void *)(v631 + 48);
        if (v682) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v682 + 8), 1uLL, memory_order_relaxed);
        }
        v684 = *(std::__shared_weak_count **)(v681 + 32);
        *(void *)(v681 + 24) = v683;
        *(void *)(v681 + 32) = v682;
        if (v684 && !atomic_fetch_add(&v684->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v684->__on_zero_shared)(v684);
          std::__shared_weak_count::__release_weak(v684);
        }
        atomic_store(1u, (unsigned __int8 *)(v681 + 105));
        std::mutex::unlock((std::mutex *)(v681 + 40));
        uint64_t v19 = a1;
      }
      v631 += 248;
    }
    while ((void *)v631 != v840);
  }
  if (__szc)
  {
    uint64_t v685 = *(void *)(v19 + 1064);
    *(void *)(v19 + 1064) = 0;
    if (v685) {
      (*(void (**)(uint64_t))(*(void *)v685 + 8))(v685);
    }
    uint64_t v686 = *(void *)(v19 + 1072);
    *(void *)(v19 + 1072) = 0;
    if (v686) {
      (*(void (**)(uint64_t))(*(void *)v686 + 8))(v686);
    }
    uint64_t v687 = *(void *)(v19 + 1112);
    *(void *)(v19 + 1112) = 0;
    if (v687)
    {
      uint64_t v688 = *(void *)(v687 + 40);
      *(void *)(v687 + 40) = 0;
      if (v688) {
        MEMORY[0x1A6239270](v688, 0x1000C40451B5BE8);
      }
      uint64_t v689 = *(void *)(v687 + 24);
      *(void *)(v687 + 24) = 0;
      if (v689) {
        (*(void (**)(uint64_t))(*(void *)v689 + 8))(v689);
      }
      v690 = *(void **)v687;
      if (*(void *)v687)
      {
        *(void *)(v687 + 8) = v690;
        operator delete(v690);
      }
      MEMORY[0x1A6239270](v687, 0x1020C4024962473);
    }
    uint64_t v691 = *(void *)(v19 + 1120);
    *(void *)(v19 + 1120) = 0;
    if (v691)
    {
      uint64_t v692 = *(void *)(v691 + 40);
      *(void *)(v691 + 40) = 0;
      if (v692) {
        MEMORY[0x1A6239270](v692, 0x1000C40451B5BE8);
      }
      uint64_t v693 = *(void *)(v691 + 24);
      *(void *)(v691 + 24) = 0;
      if (v693) {
        (*(void (**)(uint64_t))(*(void *)v693 + 8))(v693);
      }
      v694 = *(void **)v691;
      if (*(void *)v691)
      {
        *(void *)(v691 + 8) = v694;
        operator delete(v694);
      }
      MEMORY[0x1A6239270](v691, 0x1020C4024962473);
    }
    *(_DWORD *)(v19 + 1356) = 0;
    v695 = *(char **)(v19 + 888);
    v696 = *(char **)(v19 + 896);
    if (v695 != v696)
    {
      unint64_t v697 = v696 - v695 - 248;
      if (v697 > 0xF7)
      {
        uint64_t v699 = 0;
        uint64_t v700 = 0;
        unint64_t v701 = v697 / 0xF8 + 1;
        v702 = v695 + 360;
        uint64_t v703 = v701 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v699 += (uint64_t)(*(v702 - 31) - *(v702 - 32)) >> 3;
          v700 += (uint64_t)(*v702 - *(v702 - 1)) >> 3;
          v702 += 62;
          v703 -= 2;
        }
        while (v703);
        uint64_t v698 = v700 + v699;
        if (v701 == (v701 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_1067:
          if (v698)
          {
            __powidf2();
            operator new();
          }
          goto LABEL_1069;
        }
        v695 += 248 * (v701 & 0x3FFFFFFFFFFFFFELL);
      }
      else
      {
        uint64_t v698 = 0;
      }
      do
      {
        v698 += (uint64_t)(*((void *)v695 + 14) - *((void *)v695 + 13)) >> 3;
        v695 += 248;
      }
      while (v695 != v696);
      goto LABEL_1067;
    }
  }
LABEL_1069:
  uint64_t v704 = *(void *)(v19 + 1112);
  if (v704 && *(void *)(a1 + 1120))
  {
    v705 = *(void **)(a1 + 888);
    v841 = *(void **)(a1 + 896);
    if (v705 != v841)
    {
      uint64_t v706 = a1;
      do
      {
        v707 = (unsigned __int8 **)v705[13];
        v708 = (unsigned __int8 **)v705[14];
        v844 = v705;
        while (v707 != v708)
        {
          v709 = *v707;
          if (*((_DWORD *)*v707 + 8) != -1)
          {
            v710 = *(uint64_t **)(v706 + 1112);
            v711 = *(uint64_t **)(v706 + 1120);
            uint64_t v712 = *(void *)v709;
            unsigned int v713 = v709[52];
            uint64_t v714 = *(void *)(*(void *)v709 + 64);
            md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary(*(uint64_t **)v709, v713);
            uint64_t v715 = v714 + 184 * v713;
            int v717 = *(unsigned __int8 *)(v715 + 177);
            v716 = (unsigned char *)(v715 + 177);
            if (v717)
            {
              md::TransitLine::_resolveStyle(v712, *(_DWORD *)(v712 + 60), *(void *)(v714 + 184 * v713), *(std::__shared_weak_count **)(v714 + 184 * v713 + 8), v714 + 184 * v713 + 16);
              unsigned char *v716 = 0;
            }
            uint64_t v718 = v714 + 184 * v713;
            uint64_t v719 = *((unsigned int *)v709 + 8);
            int v720 = v709[55];
            if (v709[55]) {
              float v721 = 0.0;
            }
            else {
              float v721 = *(float *)(v718 + 72) * 0.5;
            }
            float v723 = *((float *)v709 + 5);
            float v722 = *((float *)v709 + 6);
            float v724 = *((float *)v709 + 7);
            long long v864 = *(_OWORD *)(v718 + 16);
            *(void *)&long long v865 = __PAIR64__(LODWORD(v723), LODWORD(v721));
            *((void *)&v865 + 1) = __PAIR64__(LODWORD(v724), LODWORD(v722));
            uint64_t v725 = *v710;
            uint64_t v726 = *v710 + 32 * v719;
            BOOL v727 = (void)v864 == *(void *)v726 && *((void *)&v864 + 1) == *(void *)(v726 + 8);
            if (!v727
              || v721 != *(float *)(v726 + 16)
              || (uint64_t v734 = v725 + 32 * v719, v723 != *(float *)(v734 + 20))
              || v722 != *(float *)(v734 + 24)
              || v724 != *(float *)(v725 + 32 * v719 + 28))
            {
              *((unsigned char *)v710 + 32) = 1;
              *(_OWORD *)uint64_t v726 = v864;
              *(_OWORD *)(v726 + 16) = v865;
              uint64_t v719 = *((unsigned int *)v709 + 8);
              int v720 = v709[55];
              float v723 = *((float *)v709 + 5);
              float v722 = *((float *)v709 + 6);
              float v724 = *((float *)v709 + 7);
            }
            uint64_t v706 = a1;
            uint64_t v728 = v714 + 184 * v713;
            float v729 = *(float *)(v728 + 80) * 0.5;
            if (v720) {
              float v729 = 0.0;
            }
            long long v864 = *(_OWORD *)(v728 + 48);
            *(void *)&long long v865 = __PAIR64__(LODWORD(v723), LODWORD(v729));
            *((void *)&v865 + 1) = __PAIR64__(LODWORD(v724), LODWORD(v722));
            uint64_t v730 = *v711;
            uint64_t v731 = *v711 + 32 * v719;
            BOOL v732 = (void)v864 == *(void *)v731 && *((void *)&v864 + 1) == *(void *)(v731 + 8);
            if (!v732
              || v729 != *(float *)(v731 + 16)
              || (uint64_t v733 = v730 + 32 * v719, v723 != *(float *)(v733 + 20))
              || v722 != *(float *)(v733 + 24)
              || v724 != *(float *)(v730 + 32 * v719 + 28))
            {
              *((unsigned char *)v711 + 32) = 1;
              *(_OWORD *)uint64_t v731 = v864;
              *(_OWORD *)(v731 + 16) = v865;
            }
          }
          ++v707;
        }
        v705 = v844 + 31;
      }
      while (v844 + 31 != v841);
      uint64_t v704 = *(void *)(v706 + 1112);
    }
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v704);
    v735 = *(float **)(v704 + 40);
    uint64_t v736 = *(void *)(a1 + 1088);
    uint64_t v737 = *(void *)(a1 + 1112);
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v737);
    *(void *)(*(void *)(v736 + 96) + 8) = *(void *)(v737 + 24);
    uint64_t v738 = *(void *)(a1 + 1104);
    uint64_t v739 = *(void *)(a1 + 1112);
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v739);
    *(void *)(*(void *)(v738 + 96) + 8) = *(void *)(v739 + 24);
    v740 = *(void **)(a1 + 1128);
    unint64_t v741 = v740[1];
    uint64_t v742 = v740[9];
    float v743 = *(float *)(a1 + 1336);
    float v744 = (float)(v735[1] + *v735) * v743;
    *(float *)uint64_t v742 = v743 * *v735;
    *(float *)(v742 + 4) = v744;
    float v745 = v735[2];
    float v746 = v735[3] + v745;
    *(float *)(v742 + 8) = v745;
    *(float *)(v742 + 12) = v746;
    *(_DWORD *)(v742 + 20) = *(_DWORD *)(*(void *)(a1 + 1112) + 88);
    if (v740[8] > v741) {
      unint64_t v741 = v740[8];
    }
    v740[7] = 0;
    v740[8] = v741;
    uint64_t v747 = *(void *)(a1 + 1120);
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v747);
    v748 = *(float **)(v747 + 40);
    uint64_t v749 = *(void *)(a1 + 1080);
    uint64_t v750 = *(void *)(a1 + 1120);
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v750);
    *(void *)(*(void *)(v749 + 96) + 8) = *(void *)(v750 + 24);
    uint64_t v751 = *(void *)(a1 + 1096);
    uint64_t v752 = *(void *)(a1 + 1120);
    md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v752);
    *(void *)(*(void *)(v751 + 96) + 8) = *(void *)(v752 + 24);
    v753 = *(void **)(a1 + 1144);
    unint64_t v754 = v753[1];
    uint64_t v755 = v753[9];
    float v756 = (float)(v748[1] + *v748) * *(float *)(a1 + 1336);
    *(float *)uint64_t v755 = *(float *)(a1 + 1336) * *v748;
    *(float *)(v755 + 4) = v756;
    float v757 = v748[2];
    float v758 = v748[3] + v757;
    *(float *)(v755 + 8) = v757;
    *(float *)(v755 + 12) = v758;
    *(_DWORD *)(v755 + 20) = *(_DWORD *)(*(void *)(a1 + 1120) + 88);
    unint64_t v759 = v753[8];
    if (v759 <= v754) {
      unint64_t v759 = v754;
    }
    v753[7] = 0;
    v753[8] = v759;
    v760 = *(void **)(a1 + 1192);
    if (v760 != (void *)(a1 + 1200))
    {
      do
      {
        unsigned int v761 = *((unsigned __int8 *)v760 + 36);
        uint64_t v762 = v760[6];
        uint64_t v763 = *(void *)(v760[5] + 64);
        uint64_t v764 = *(void *)(a1 + 1112);
        md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v764);
        *(void *)(*(void *)(v762 + 96) + 8) = *(void *)(v764 + 24);
        uint64_t v765 = v760[8];
        uint64_t v766 = *(void *)(a1 + 1112);
        md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(v766);
        *(void *)(*(void *)(v765 + 96) + 8) = *(void *)(v766 + 24);
        float v767 = fmaxf(*(float *)(v763 + 184 * v761 + 72) - *(float *)(v763 + 184 * v761 + 168), 0.0);
        uint64_t v768 = v760[10];
        if (!v768)
        {
LABEL_1136:
          v786 = (void *)(v763 + 184 * v761);
          v845 = 0;
          v846 = 0;
          uint64_t v787 = v786[17];
          v847 = 0;
          uint64_t v848 = v787;
          v788 = (char *)v786[14];
          v789 = (char *)v786[15];
          uint64_t v790 = v789 - v788;
          if (v789 != v788)
          {
            if (v790 < 0) {
              abort();
            }
            v791 = (_DWORD *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v787 + 16))(v787, v789 - v788, 4);
            v845 = v791;
            v847 = (char *)&v791[v790 >> 2];
            do
            {
              if (v791) {
                _DWORD *v791 = *(_DWORD *)v788;
              }
              v788 += 4;
              ++v791;
            }
            while (v788 != v789);
            v846 = v791;
          }
          int v849 = *(_DWORD *)(v763 + 184 * v761 + 144);
          md::DashTextureCache::textureForPattern(&v864, a5, (float *)&v845, 1u, 1.0);
          long long v792 = v864;
          long long v864 = 0uLL;
          v793 = (std::__shared_weak_count *)v760[11];
          *((_OWORD *)v760 + 5) = v792;
          if (v793 && !atomic_fetch_add(&v793->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v793->__on_zero_shared)(v793);
            std::__shared_weak_count::__release_weak(v793);
            v794 = (std::__shared_weak_count *)*((void *)&v864 + 1);
            if (*((void *)&v864 + 1)) {
              goto LABEL_1146;
            }
          }
          else
          {
            v794 = (std::__shared_weak_count *)*((void *)&v864 + 1);
            if (*((void *)&v864 + 1))
            {
LABEL_1146:
              if (!atomic_fetch_add(&v794->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v794->__on_zero_shared)(v794);
                std::__shared_weak_count::__release_weak(v794);
              }
            }
          }
          if (v845)
          {
            v846 = v845;
            (*(void (**)(uint64_t, _DWORD *, int64_t))(*(void *)v848 + 40))(v848, v845, v847 - (char *)v845);
          }
          *(void *)(*(void *)(v760[6] + 96) + 16) = *(void *)(v760[10] + 64);
          *(void *)(*(void *)(v760[8] + 96) + 16) = *(void *)(v760[10] + 64);
          goto LABEL_1152;
        }
        float v769 = *(float *)(a1 + 1348);
        v770 = (void *)(v763 + 184 * v761);
        uint64_t v771 = v770[17];
        uint64_t v773 = v770[14];
        uint64_t v772 = v770[15];
        uint64_t v774 = v772 - v773;
        if (v772 == v773)
        {
          uint64_t v776 = 0;
          uint64_t v779 = 0;
          uint64_t v778 = 0;
        }
        else
        {
          if (v774 < 0) {
            abort();
          }
          uint64_t v775 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v771 + 16))(v771, v772 - v773, 4);
          uint64_t v776 = v775;
          uint64_t v777 = 0;
          do
          {
            if (v775 + v777) {
              *(_DWORD *)(v775 + v777) = *(_DWORD *)(v773 + v777);
            }
            v777 += 4;
          }
          while (v773 + v777 != v772);
          uint64_t v778 = v775 + v777;
          uint64_t v779 = v775 + 4 * (v774 >> 2);
        }
        if (*(unsigned __int16 *)(v768 + 46) == (int)(float)((float)(v769 * v767) + 0.5)
          && *(float *)(v763 + 184 * v761 + 144) == *(float *)(v768 + 32)
          && (unint64_t v780 = (v778 - v776) >> 2, v780 == (uint64_t)(*(void *)(v768 + 8) - *(void *)v768) >> 2))
        {
          if (v778 == v776)
          {
            if (!v776) {
              goto LABEL_1152;
            }
            BOOL v784 = 1;
          }
          else
          {
            unint64_t v781 = 0;
            unsigned int v782 = 1;
            do
            {
              float v783 = vabds_f32(*(float *)(v776 + 4 * v781), *(float *)(*(void *)v768 + 4 * v781));
              BOOL v784 = v783 <= 0.00000011921;
              unint64_t v781 = v782++;
            }
            while (v783 <= 0.00000011921 && v780 > v781);
          }
        }
        else
        {
          if (!v776) {
            goto LABEL_1136;
          }
          BOOL v784 = 0;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v771 + 40))(v771, v776, v779 - v776);
        if (!v784) {
          goto LABEL_1136;
        }
LABEL_1152:
        v795 = *(void **)(*(void *)(v760[6] + 64) + 64);
        unint64_t v796 = v795[1];
        if (v796) {
          uint64_t v797 = v795[9];
        }
        else {
          uint64_t v797 = 0;
        }
        float v798 = 0.0;
        float v799 = 0.0;
        if (*(void *)(v763 + 184 * v761 + 112) != *(void *)(v763 + 184 * v761 + 120)) {
          float v799 = (float)(v767 * 0.5) * *(float *)(a1 + 1336);
        }
        *(float *)(v797 + 16) = v799;
        float v800 = *(float *)(v760[10] + 48);
        if (v800 != 0.0)
        {
          float v801 = logf(v800 * v630);
          float v798 = expf(floorf(v801 * 4.0) * -0.25);
        }
        *(float *)(v797 + 20) = v798;
        v802 = (_DWORD *)(v763 + 184 * v761);
        *(_DWORD *)uint64_t v797 = v802[38];
        *(_DWORD *)(v797 + 4) = v802[39];
        *(_DWORD *)(v797 + 8) = v802[40];
        *(_DWORD *)(v797 + 12) = v802[41];
        if (v796)
        {
          unint64_t v803 = v795[8];
          if (v803 <= v796) {
            unint64_t v803 = v796;
          }
          v795[7] = 0;
          v795[8] = v803;
        }
        v804 = (void *)v760[1];
        if (v804)
        {
          do
          {
            v805 = v804;
            v804 = (void *)*v804;
          }
          while (v804);
        }
        else
        {
          do
          {
            v805 = (void *)v760[2];
            _ZF = *v805 == (void)v760;
            v760 = v805;
          }
          while (!_ZF);
        }
        v760 = v805;
      }
      while (v805 != (void *)(a1 + 1200));
    }
  }
}

void sub_1A2228070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  MEMORY[0x1A6239270](v60, 0x10A1C40D1C9D77BLL);
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v61 - 176));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v61 - 200));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v61 - 224));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v61 - 248));
  _Unwind_Resume(a1);
}

void sub_1A2228284()
{
}

void sub_1A2228294()
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v0);
  JUMPOUT(0x1A22282A0);
}

void sub_1A22282A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  unint64_t v62 = *(void **)(v60 - 256);
  if (v62 != *(void **)(v60 - 240)) {
    free(v62);
  }
  if (a38 != a40) {
    free(a38);
  }
  std::__tree<std::__value_type<unsigned int,MergeGroup>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,MergeGroup>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,MergeGroup>>>::destroy(a53);
  std::__tree<std::__value_type<unsigned int,MergeGroup>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,MergeGroup>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,MergeGroup>>>::destroy(a56);
  std::__tree<std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::__map_value_compare<md::TransitSystemAndColor,std::__value_type<md::TransitSystemAndColor,MergeGroup>,std::less<md::TransitSystemAndColor>,true>,std::allocator<std::__value_type<md::TransitSystemAndColor,MergeGroup>>>::destroy(a60);
  if (a26)
  {
    operator delete(a26);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1A2228350);
}

void sub_1A2228300(_Unwind_Exception *exception_object)
{
}

void sub_1A222830C()
{
}

uint64_t md::StyleTexture<md::TransitLineSegment::StylePixel>::_processStylePixelsIfNecessary(uint64_t result)
{
  if (*(unsigned char *)(result + 32))
  {
    uint64_t v1 = result;
    uint64_t v2 = operator new(0x58uLL);
    v2[1] = 0;
    v2[2] = 0;
    void *v2 = &unk_1EF583858;
    int v3 = *(_DWORD *)(v1 + 92);
    v2[5] = 0;
    v2[6] = 0;
    *((_DWORD *)v2 + 14) = 0;
    v2[3] = &unk_1EF55AE58;
    v2[4] = 0;
    *(void *)((char *)v2 + 60) = 0x100000001;
    *((_DWORD *)v2 + 17) = 1;
    *((_DWORD *)v2 + 18) = v3;
    v2[10] = 0;
    *((_DWORD *)v2 + 19) = v3;
    operator new();
  }
  return result;
}

void sub_1A22288FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  MEMORY[0x1A6239270](v11, 0x10F1C40BE47B5E1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t md::TransitTileData::appendNodesAttachedToLines(unint64_t result, void *a2, unint64_t a3)
{
  if (a2)
  {
    int v3 = a2;
    uint64_t v4 = (int8x8_t *)result;
    int8x8_t v5 = *(int8x8_t *)(result + 1264);
    if (v5)
    {
LABEL_3:
      unint64_t v7 = v3[2];
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v9 = v3[2];
        if (v7 >= *(void *)&v5) {
          unint64_t v9 = v7 % *(void *)&v5;
        }
      }
      else
      {
        unint64_t v9 = (*(void *)&v5 - 1) & v7;
      }
      BOOL v10 = *(void **)(*(void *)&v4[157] + 8 * v9);
      if (v10)
      {
        uint64_t v11 = (void *)*v10;
        if (v11)
        {
          if (v8.u32[0] < 2uLL)
          {
            uint64_t v12 = *(void *)&v5 - 1;
            while (1)
            {
              uint64_t v14 = v11[1];
              if (v7 == v14)
              {
                if (v11[2] == v7) {
                  goto LABEL_23;
                }
              }
              else if ((v14 & v12) != v9)
              {
                goto LABEL_25;
              }
              uint64_t v11 = (void *)*v11;
              if (!v11) {
                goto LABEL_25;
              }
            }
          }
          do
          {
            unint64_t v13 = v11[1];
            if (v7 == v13)
            {
              if (v11[2] == v7)
              {
LABEL_23:
                for (uint64_t i = (void *)v11[5]; i; uint64_t i = (void *)*i)
                {
                  unint64_t v16 = *(void *)(*(void *)(i[2] + 8) + 40);
                  uint64_t result = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,geo::StdAllocator<unsigned long long,mdm::Allocator>>::__emplace_unique_key_args<unsigned long long,unsigned long long>(a3, v16, &v16);
                }
                break;
              }
            }
            else
            {
              if (v13 >= *(void *)&v5) {
                v13 %= *(void *)&v5;
              }
              if (v13 != v9) {
                break;
              }
            }
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
      }
LABEL_25:
      while (1)
      {
        int v3 = (void *)*v3;
        if (!v3) {
          break;
        }
        int8x8_t v5 = v4[158];
        if (v5) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      do
        int v3 = (void *)*v3;
      while (v3);
    }
  }
  return result;
}

void md::TransitTileData::setSelectedLines(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 888);
  uint64_t v3 = *(void *)(a1 + 896);
  if (v2 == v3) {
    return;
  }
  while (2)
  {
    uint64_t v6 = *(void *)(v2 + 80);
    uint64_t v7 = *(void *)(v2 + 88);
LABEL_7:
    if (v6 != v7)
    {
      uint64_t v9 = *(void *)(*(void *)v6 + 8);
      int8x8_t v10 = (int8x8_t)a2[1];
      if (!*(void *)&v10) {
        goto LABEL_28;
      }
      unint64_t v11 = *(void *)(*(void *)(v9 + 16) + 40);
      uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        unint64_t v13 = *(void *)(*(void *)(v9 + 16) + 40);
        if (v11 >= *(void *)&v10) {
          unint64_t v13 = v11 % *(void *)&v10;
        }
      }
      else
      {
        unint64_t v13 = (*(void *)&v10 - 1) & v11;
      }
      uint64_t v14 = *(void **)(*a2 + 8 * v13);
      if (!v14 || (uint64_t v15 = (void *)*v14) == 0)
      {
LABEL_28:
        int v8 = *(unsigned __int8 *)(v9 + 88);
        if (*(unsigned char *)(v9 + 88))
        {
          int v19 = 0;
          goto LABEL_30;
        }
        goto LABEL_6;
      }
      if (v12.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v10 - 1;
        while (1)
        {
          uint64_t v18 = v15[1];
          if (v11 == v18)
          {
            if (v15[2] == v11) {
              goto LABEL_5;
            }
          }
          else if ((v18 & v16) != v13)
          {
            goto LABEL_28;
          }
          uint64_t v15 = (void *)*v15;
          if (!v15) {
            goto LABEL_28;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v15[1];
        if (v11 == v17)
        {
          if (v15[2] == v11)
          {
LABEL_5:
            int v8 = *(unsigned __int8 *)(v9 + 88);
            if (*(unsigned char *)(v9 + 88)) {
              goto LABEL_6;
            }
            int v19 = 1;
LABEL_30:
            *(unsigned char *)(a1 + 1368) = 1;
            if (v8 != v19)
            {
              *(unsigned char *)(v9 + 88) = v19;
              uint64_t v20 = *(void *)(v9 + 64);
              uint64_t v21 = *(void *)(v9 + 72);
              if (v20 != v21)
              {
                unint64_t v22 = v21 - v20 - 184;
                if (v22 <= 0xB7)
                {
                  do
                  {
LABEL_37:
                    *(unsigned char *)(v20 + 176) = 1;
                    v20 += 184;
                  }
                  while (v20 != v21);
                }
                else
                {
                  unint64_t v23 = v22 / 0xB8 + 1;
                  uint64_t v24 = (unsigned char *)(v20 + 360);
                  uint64_t v25 = v23 & 0x3FFFFFFFFFFFFFELL;
                  do
                  {
                    *(v24 - 184) = 1;
                    *uint64_t v24 = 1;
                    v24 += 368;
                    v25 -= 2;
                  }
                  while (v25);
                  if (v23 != (v23 & 0x3FFFFFFFFFFFFFELL))
                  {
                    v20 += 184 * (v23 & 0x3FFFFFFFFFFFFFELL);
                    goto LABEL_37;
                  }
                }
              }
              md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v9, 0);
              md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v9, 1u);
              md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v9, 2u);
              md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v9, 3u);
              uint64_t v26 = *(void *)(v9 + 64);
              md::TransitLine::updateFeatureQueryForMergeTypeIfNecessary((uint64_t *)v9, 0);
              if (*(unsigned char *)(v26 + 177))
              {
                md::TransitLine::_resolveStyle(v9, *(_DWORD *)(v9 + 60), *(void *)v26, *(std::__shared_weak_count **)(v26 + 8), v26 + 16);
                *(unsigned char *)(v26 + 177) = 0;
              }
            }
LABEL_6:
            v6 += 8;
            goto LABEL_7;
          }
        }
        else
        {
          if (v17 >= *(void *)&v10) {
            v17 %= *(void *)&v10;
          }
          if (v17 != v13) {
            goto LABEL_28;
          }
        }
        uint64_t v15 = (void *)*v15;
        if (!v15) {
          goto LABEL_28;
        }
      }
    }
    v2 += 248;
    if (v2 != v3) {
      continue;
    }
    break;
  }
}

uint64_t *md::TransitTileData::setSelectedNodes(uint64_t *result, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  if (result != a2)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
    v4.i16[0] = vaddlv_u8(v4);
    unint64_t v5 = a4 - 1;
    do
    {
      uint64_t v7 = *result;
      if (a4)
      {
        unint64_t v8 = *(void *)(*(void *)(v7 + 8) + 40);
        if (v4.u32[0] > 1uLL)
        {
          unint64_t v9 = *(void *)(*(void *)(v7 + 8) + 40);
          if (v8 >= a4) {
            unint64_t v9 = v8 % a4;
          }
        }
        else
        {
          unint64_t v9 = v5 & v8;
        }
        uint64_t v6 = *(void **)(a3 + 8 * v9);
        if (v6)
        {
          uint64_t v6 = (void *)*v6;
          if (v6)
          {
            if (v4.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v10 = v6[1];
                if (v8 == v10)
                {
                  if (v6[2] == v8) {
                    goto LABEL_4;
                  }
                }
                else if ((v10 & v5) != v9)
                {
                  goto LABEL_3;
                }
                uint64_t v6 = (void *)*v6;
                if (!v6) {
                  goto LABEL_4;
                }
              }
            }
            do
            {
              unint64_t v11 = v6[1];
              if (v8 == v11)
              {
                if (v6[2] == v8) {
                  break;
                }
              }
              else
              {
                if (v11 >= a4) {
                  v11 %= a4;
                }
                if (v11 != v9) {
                  goto LABEL_3;
                }
              }
              uint64_t v6 = (void *)*v6;
            }
            while (v6);
          }
        }
      }
      else
      {
LABEL_3:
        uint64_t v6 = 0;
      }
LABEL_4:
      *(unsigned char *)(v7 + 63) = v6 != 0;
      result += 2;
    }
    while (result != a2);
  }
  return result;
}

void *md::TransitItemMarkerImpl<md::TransitDisplayConnection>::debugDraw(uint64_t a1, float32x2_t *a2, uint64_t a3, char a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = **(void **)(a1 + 8);
  v15[0] = v5;
  v15[1] = a3;
  char v16 = a4;
  uint64_t result = *(void **)v4;
  if (*(void *)(*(void *)v4 + 88))
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v20 = 0;
      uint64_t Points = geo::codec::pBTransitStationTransferGetPoints(result, v8, &v20);
      if (Points && v20)
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        memset(__p, 0, sizeof(__p));
        md::HighlightHelper::tileToMercatorPoints(v5, Points, v20, (uint64_t)__p);
        md::HighlightHelper::mercatorToScreenPoints((uint64_t)v15, (double **)__p, (uint64_t)&v17);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        uint64_t v10 = v17;
        unint64_t v11 = v18;
        if (v17)
        {
          if (v18 != v17)
          {
            uint64_t v12 = v18 - v17;
            a2[1].i32[0] = *(_DWORD *)v17;
            a2[1].i32[1] = *((_DWORD *)v10 + 1);
            if ((unint64_t)(v11 - v10) >= 9)
            {
              uint64_t v13 = (v12 >> 3) - 1;
              uint64_t v14 = (float *)(v10 + 8);
              do
              {
                ggl::DebugConsole::drawLine((uint64_t)a2, v14);
                v14 += 2;
                --v13;
              }
              while (v13);
            }
          }
        }
        a2[1].i32[0] = *(_DWORD *)v10;
        a2[1].i32[1] = *((_DWORD *)v10 + 1);
        ggl::DebugConsole::drawSymbol(a2, 4);
        a2[1].i32[0] = *((_DWORD *)v11 - 2);
        a2[1].i32[1] = *((_DWORD *)v11 - 1);
        ggl::DebugConsole::drawSymbol(a2, 2);
        operator delete(v10);
      }
      ++v8;
      uint64_t result = *(void **)v4;
    }
    while (v8 < *(void *)(*(void *)v4 + 88));
  }
  return result;
}

void sub_1A2228F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v17 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v17 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

id md::TransitItemMarkerImpl<md::TransitDisplayConnection>::debugString(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = [MEMORY[0x1E4F28E78] stringWithFormat:@"<Display connection>\n"];
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v13, v3, (uint64_t)v4);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v14) {
        goto LABEL_7;
      }
    }
    else if (v14)
    {
LABEL_7:
      uint64_t v6 = *(void *)(v13[0] + 24);
      uint64_t v7 = *(void *)(v6 + 16);
      unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v9 = "";
      if (v7)
      {
        uint64_t v10 = *(const char **)(v7 + 104);
        if (v10) {
          unint64_t v9 = v10;
        }
      }
      objc_msgSend(v2, "appendFormat:", @"  Style:%s\n", v9);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    unint64_t v11 = md::HighlightHelper::debugAttributesToString((md::HighlightHelper *)(*(void *)(v1 + 8) + 240), v5);
    [v2 appendFormat:@"  Attrs:{%@}\n", v11];

    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v13);
  }
  [v2 appendFormat:@"  FeatureZoom: Min=%.2f Max=%.2f\n", *(float *)(v1 + 24), *(float *)(v1 + 28)];
  return v2;
}

void sub_1A2229164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v6 = v5;
  if (v6)
  {
    unint64_t v8 = (std::__shared_weak_count *)v6;
    if (!atomic_fetch_add(v6 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v6 + 16))(v6);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t md::TransitItemMarkerImpl<md::TransitDisplayConnection>::isHighlighted(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 33);
}

uint64_t md::TransitItemMarkerImpl<md::TransitDisplayConnection>::setHighlighted(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 33) = a2;
  return result;
}

void md::TransitItemMarkerImpl<md::TransitDisplayConnection>::~TransitItemMarkerImpl()
{
}

uint64_t std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitDisplayConnection>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitDisplayConnection>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitDisplayConnection>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::TransitItemMarkerImpl<md::TransitLink>::debugDraw(uint64_t a1, float32x2_t *a2, uint64_t a3, char a4)
{
  uint64_t v5 = *(float **)(a1 + 16);
  uint64_t v6 = **(void **)(a1 + 8);
  v72[0] = v6;
  v72[1] = a3;
  char v73 = a4;
  uint64_t v7 = *(void *)v5;
  if (!*(_DWORD *)(*(void *)v5 + 20))
  {
    if (v5[59] != 0.0)
    {
      uint64_t v29 = 0;
      uint64_t v28 = 0;
      std::vector<unsigned int> __p = 0;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      goto LABEL_39;
    }
    goto LABEL_31;
  }
  unint64_t v8 = 0;
  do
  {
    unint64_t v77 = 0;
    uint64_t v11 = geo::codec::transitLinkPoints(v7, v8, &v77);
    if (v77 >= 2)
    {
      unint64_t v74 = 0;
      float v75 = 0;
      uint64_t v76 = 0;
      std::vector<unsigned int> __p = 0;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      md::HighlightHelper::tileToMercatorPoints(v6, v11, v77, (uint64_t)&__p);
      md::HighlightHelper::mercatorToScreenPoints((uint64_t)v72, (double **)&__p, (uint64_t)&v74);
      if (__p) {
        operator delete(__p);
      }
      uint64_t v12 = (char *)v74;
      uint64_t v13 = v75;
      if (v74)
      {
        if (v75 != (__int32 *)v74)
        {
          a2[1].i32[0] = *(_DWORD *)v74;
          a2[1].i32[1] = *((_DWORD *)v12 + 1);
          if ((unint64_t)((char *)v13 - v12) >= 9)
          {
            uint64_t v14 = (((char *)v13 - v12) >> 3) - 1;
            uint64_t v15 = (float *)(v12 + 8);
            do
            {
              ggl::DebugConsole::drawLine((uint64_t)a2, v15);
              v15 += 2;
              --v14;
            }
            while (v14);
          }
        }
      }
      float32x2_t v9 = *(float32x2_t *)v12;
      std::vector<unsigned int> __p = (void *)*((void *)v13 - 1);
      a2[1] = v9;
      ggl::DebugConsole::drawLine((uint64_t)a2, (float *)&__p);
      a2[1].i32[0] = *(_DWORD *)v12;
      a2[1].i32[1] = *((_DWORD *)v12 + 1);
      ggl::DebugConsole::drawSymbol(a2, 3);
      a2[1].i32[0] = *(v13 - 2);
      a2[1].i32[1] = *(v13 - 1);
      ggl::DebugConsole::drawSymbol(a2, 4);
      operator delete(v12);
    }
    ++v8;
    uint64_t v7 = *(void *)v5;
    unint64_t v10 = *(unsigned int *)(*(void *)v5 + 20);
  }
  while (v8 < v10);
  if (v5[59] == 0.0 || (__p = 0, uint64_t v79 = 0, v80 = 0, !v10))
  {
LABEL_31:
    uint64_t v29 = 0;
    uint64_t v28 = 0;
    goto LABEL_39;
  }
  unint64_t v74 = 0;
  unint64_t v16 = geo::codec::transitLinkPoints(v7, 0, &v74);
  if (v74 >= 5) {
    size_t v17 = 5;
  }
  else {
    size_t v17 = v74;
  }
  std::vector<gm::Matrix<float,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<float,2,1> const*,gm::Matrix<float,2,1> const*>((uint64_t)&__p, v16, (char *)(v16 + 8 * v17), v17);
  uint64_t v18 = __p;
  if (__p != v79)
  {
    float v19 = v5[59];
    float v20 = 0.0;
    if ((unint64_t)((char *)v79 - (unsigned char *)__p) >= 9)
    {
      unint64_t v21 = ((char *)v79 - (unsigned char *)__p) >> 3;
      if (v21 <= 2) {
        unint64_t v21 = 2;
      }
      float32x2_t v22 = *(float32x2_t *)__p;
      float v23 = 0.0;
      uint64_t v24 = 1;
      while (1)
      {
        float32x2_t v25 = *(float32x2_t *)((char *)__p + 8 * v24);
        float32x2_t v26 = vsub_f32(v22, v25);
        float v27 = sqrtf(vaddv_f32(vmul_f32(v26, v26)));
        float v20 = v27 + v23;
        if ((float)(v27 + v23) >= v19) {
          break;
        }
        ++v24;
        float v23 = v27 + v23;
        float32x2_t v22 = v25;
        if (v21 == v24) {
          goto LABEL_26;
        }
      }
      if (v27 == 0.0) {
        float v30 = 0.0;
      }
      else {
        float v30 = (float)(v19 - v23) / v27;
      }
      v22.i32[1] = *((_DWORD *)__p + 2 * v24 - 1);
      float32x2_t v70 = vmla_n_f32(v22, vsub_f32(v25, v22), v30);
LABEL_37:
      uint64_t v31 = (char *)operator new(8uLL);
      *(float32x2_t *)uint64_t v31 = v70;
      uint64_t v28 = v31 + 8;
      uint64_t v29 = v31;
      if (!v18) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
LABEL_26:
    if (vabds_f32(v19, v20) <= 0.00000011921)
    {
      float32x2_t v70 = v79[-1];
      goto LABEL_37;
    }
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (__p) {
LABEL_38:
  }
    operator delete(v18);
LABEL_39:
  if (v5[60] == 0.0) {
    goto LABEL_82;
  }
  std::vector<unsigned int> __p = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  uint64_t v32 = *(void *)v5;
  int v33 = *(_DWORD *)(*(void *)v5 + 20);
  if (!v33)
  {
    int8x16_t v51 = (float32x2_t *)v29;
    goto LABEL_81;
  }
  unint64_t v74 = 0;
  uint64_t v34 = geo::codec::transitLinkPoints(v32, v33 - 1, &v74);
  if (v74 >= 5) {
    size_t v35 = 5;
  }
  else {
    size_t v35 = v74;
  }
  std::vector<gm::Matrix<float,2,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<float,2,1> const*,gm::Matrix<float,2,1> const*>((uint64_t)&__p, v34 + 8 * v74 - 8 * v35, (char *)(v34 + 8 * v74), v35);
  int32x2_t v37 = (float32x2_t *)__p;
  int16x8_t v36 = v79;
  if (__p != v79)
  {
    int v38 = v79 - 1;
    if (&v79[-1] > __p)
    {
      float v39 = (float32x2_t *)__p;
      do
      {
        int v40 = v39->i32[0];
        int v41 = v39->i32[1];
        v39->i32[0] = v38->i32[0];
        v39->i32[1] = v38->i32[1];
        v38->i32[0] = v40;
        v38->i32[1] = v41;
        --v38;
        ++v39;
      }
      while (v39 < v38);
    }
  }
  if (v37 == v36)
  {
    int8x16_t v51 = (float32x2_t *)v29;
    if (!v36) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  float v42 = v5[60];
  float v43 = 0.0;
  if ((unint64_t)((char *)v36 - (char *)v37) < 9)
  {
LABEL_55:
    if (vabds_f32(v42, v43) > 0.00000011921)
    {
      int16x8_t v36 = v37;
      int8x16_t v51 = (float32x2_t *)v29;
      if (!v37) {
        goto LABEL_81;
      }
      goto LABEL_80;
    }
    float32x2_t v52 = v36[-1];
  }
  else
  {
    unint64_t v44 = v36 - v37;
    if (v44 <= 2) {
      unint64_t v44 = 2;
    }
    float32x2_t v45 = *v37;
    float v46 = 0.0;
    uint64_t v47 = 1;
    while (1)
    {
      float32x2_t v48 = v37[v47];
      float32x2_t v49 = vsub_f32(v45, v48);
      float v50 = sqrtf(vaddv_f32(vmul_f32(v49, v49)));
      float v43 = v50 + v46;
      if ((float)(v50 + v46) >= v42) {
        break;
      }
      ++v47;
      float v46 = v50 + v46;
      float32x2_t v45 = v48;
      if (v44 == v47) {
        goto LABEL_55;
      }
    }
    if (v50 == 0.0) {
      float v53 = 0.0;
    }
    else {
      float v53 = (float)(v42 - v46) / v50;
    }
    v45.i32[1] = v37[v47 - 1].i32[1];
    float32x2_t v52 = vmla_n_f32(v45, vsub_f32(v48, v45), v53);
  }
  uint64_t v54 = v28 - v29;
  uint64_t v55 = (v28 - v29) >> 3;
  unint64_t v56 = v55 + 1;
  if ((unint64_t)(v55 + 1) >> 61) {
    abort();
  }
  float32x2_t v71 = v52;
  if (v54 >> 2 > v56) {
    unint64_t v56 = v54 >> 2;
  }
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v56 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v57 = operator new(8 * v56);
  uint64_t v58 = (float32x2_t *)&v57[8 * v55];
  *uint64_t v58 = v71;
  if (v28 != v29)
  {
    unint64_t v59 = v28 - v29 - 8;
    if (v59 >= 0x58 && (unint64_t)(v29 - v57) >= 0x20)
    {
      uint64_t v65 = (v59 >> 3) + 1;
      uint64_t v60 = &v28[-8 * (v65 & 0x3FFFFFFFFFFFFFFCLL)];
      float v66 = &v57[8 * v55 - 16];
      float v67 = v28 - 16;
      uint64_t v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v69 = *(_OWORD *)v67;
        *(v66 - 1) = *((_OWORD *)v67 - 1);
        _OWORD *v66 = v69;
        v66 -= 2;
        v67 -= 32;
        v68 -= 4;
      }
      while (v68);
      int8x16_t v51 = &v58[-(v65 & 0x3FFFFFFFFFFFFFFCLL)];
      if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_77:
        if (!v29) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v60 = v28;
      int8x16_t v51 = (float32x2_t *)&v57[8 * v55];
    }
    do
    {
      float32x2_t v61 = *(float32x2_t *)(v60 - 8);
      v60 -= 8;
      v51[-1] = v61;
      --v51;
    }
    while (v60 != v29);
    goto LABEL_77;
  }
  int8x16_t v51 = (float32x2_t *)&v57[8 * v55];
  if (v29) {
LABEL_78:
  }
    operator delete(v29);
LABEL_79:
  uint64_t v28 = (char *)&v58[1];
  int16x8_t v36 = (float32x2_t *)__p;
  if (__p)
  {
LABEL_80:
    uint64_t v79 = v36;
    operator delete(v36);
  }
LABEL_81:
  uint64_t v29 = (char *)v51;
LABEL_82:
  if (v29 != v28)
  {
    unint64_t v74 = 0;
    float v75 = 0;
    uint64_t v76 = 0;
    std::vector<unsigned int> __p = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    md::HighlightHelper::tileToMercatorPoints(v72[0], (uint64_t)v29, (v28 - v29) >> 3, (uint64_t)&__p);
    md::HighlightHelper::mercatorToScreenPoints((uint64_t)v72, (double **)&__p, (uint64_t)&v74);
    if (__p) {
      operator delete(__p);
    }
    unint64_t v62 = (void *)v74;
    uint64_t v63 = v75;
    if ((__int32 *)v74 != v75)
    {
      uint64_t v64 = (__int32 *)v74;
      do
      {
        a2[1].i32[0] = *v64;
        a2[1].i32[1] = v64[1];
        ggl::DebugConsole::drawSymbol(a2, 1);
        v64 += 2;
      }
      while (v64 != v63);
    }
    if (v62) {
      operator delete(v62);
    }
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1A2229914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v20) {
    operator delete(v20);
  }
  if (v19) {
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

NSString *md::TransitItemMarkerImpl<md::TransitLink>::debugString(uint64_t a1, int a2)
{
  uint64_t v3 = *(float **)(a1 + 16);
  objc_msgSend(MEMORY[0x1E4F28E78], "stringWithFormat:", @"<Link:%p>\n", v3);
  uint64_t v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = v4;
  if (a2) {
    int v6 = 200;
  }
  else {
    int v6 = 5;
  }
  unsigned int v44 = v6;
  [(NSString *)v4 appendString:@"EaseRegions: "];
  float v7 = v3[54];
  float v8 = v3[55];
  if (v7 == v8) {
    [(NSString *)v5 appendString:@"start=(none)"];
  }
  else {
    [(NSString *)v5 appendFormat:@"start=(%.2f:%.2f)[cl:%.2f]", v7, v8, v3[59]];
  }
  float v9 = v3[56];
  float v10 = v3[57];
  if (v9 == v10) {
    [(NSString *)v5 appendString:@" end=(none)\n"];
  }
  else {
    [(NSString *)v5 appendFormat:@" end=(%.2f:%.2f)[cl:%.2f]\n", v9, v10, v3[60]];
  }
  [(NSString *)v5 appendFormat:@"NodeID From=%llu To=%llu\n", *(void *)(*(void *)v3 + 56), *(void *)(*(void *)v3 + 64)];
  uint64_t v11 = geo::codec::VectorTile::transitLinkSections(*((geo::codec::VectorTile **)v3 + 1));
  [(NSString *)v5 appendFormat:@"Sections:\n"];
  uint64_t v12 = (md::TransitLink::Section *)*((void *)v3 + 7);
  uint64_t v13 = (md::TransitLink::Section *)*((void *)v3 + 8);
  if (v12 != v13)
  {
    if (v11)
    {
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = md::TransitLink::Section::debugString(v12);
        [(NSString *)v5 appendFormat:@"  %i:%@", v14, v15];

        unint64_t v16 = (float *)(v11 + 8 * *(unsigned int *)(*(void *)v3 + 16));
        float v17 = *v16;
        float v18 = v16[1];
        if (*v16 == 0.0) {
          float v17 = -1.0;
        }
        double v19 = v17;
        if (v18 == 1.0) {
          float v18 = -1.0;
        }
        [(NSString *)v5 appendFormat:@"    geoSection: start=%.2f end=%.2f\n", *(void *)&v19, v18];
        uint64_t v12 = (md::TransitLink::Section *)((char *)v12 + 96);
        v11 += 8;
        uint64_t v14 = (v14 + 1);
      }
      while (v12 != v13);
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        unint64_t v21 = md::TransitLink::Section::debugString(v12);
        [(NSString *)v5 appendFormat:@"  %i:%@", v20, v21];

        uint64_t v20 = (v20 + 1);
        uint64_t v12 = (md::TransitLink::Section *)((char *)v12 + 96);
      }
      while (v12 != v13);
    }
  }
  [(NSString *)v5 appendFormat:@"MergedLines:\n"];
  float v23 = (md::TransitLine ***)*((void *)v3 + 13);
  float32x2_t v22 = (md::TransitLine ***)*((void *)v3 + 14);
  if (v23 == v22)
  {
    LODWORD(v24) = 0;
  }
  else
  {
    uint64_t v24 = 0;
    while (v44 != v24)
    {
      float32x2_t v25 = *v23;
      float32x2_t v26 = [NSString stringWithFormat:@"uid:%llu, %s, %s", *(void *)(*((void *)**v23 + 2) + 40), md::TransitLine::debugSystemName(**v23), *(void *)(*((void *)**v23 + 2) + 16)];
      [(NSString *)v5 appendFormat:@"  %i:%@\n", v24, v26];

      md::TransitLine::debugString((uint64_t)*v25, *((unsigned __int8 *)v25 + 52));
      float v27 = (NSString *)objc_claimAutoreleasedReturnValue();
      md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)@"    ", v27, v5, v28);

      md::TransitLineSegment::debugString((md::TransitLineSegment *)v25);
      uint64_t v29 = (NSString *)objc_claimAutoreleasedReturnValue();
      md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)@"    ", v29, v5, v30);

      uint64_t v24 = (v24 + 1);
      if (++v23 == v22) {
        goto LABEL_28;
      }
    }
    [(NSString *)v5 appendString:@"  Lines Truncated...\n"];
    LODWORD(v24) = v44;
  }
LABEL_28:
  if (*((void *)v3 + 11) - *((void *)v3 + 10) > *((void *)v3 + 14) - *((void *)v3 + 13))
  {
    [(NSString *)v5 appendFormat:@"CollapsedLines:\n"];
    uint64_t v31 = (void *)*((void *)v3 + 10);
    uint64_t v32 = (void *)*((void *)v3 + 11);
    if (v31 != v32)
    {
      uint64_t v33 = 0;
      do
      {
        if (*v31) {
          uint64_t v34 = (unsigned int *)(*v31 + 8);
        }
        else {
          uint64_t v34 = 0;
        }
        if (*((unsigned char *)v34 + 55))
        {
          if (v24 >= v44)
          {
            [(NSString *)v5 appendString:@"  Lines Truncated...\n"];
            break;
          }
          uint64_t v35 = v34[10];
          int16x8_t v36 = [NSString stringWithFormat:@"uid:%llu, %s, %s", *(void *)(*(void *)(*(void *)v34 + 16) + 40), md::TransitLine::debugSystemName(*(md::TransitLine **)v34), *(void *)(*(void *)(*(void *)v34 + 16) + 16)];
          [(NSString *)v5 appendFormat:@"  %i:MergedLine:%i %@\n", v33, v35, v36];

          if (*v31) {
            uint64_t v37 = *v31 + 8;
          }
          else {
            uint64_t v37 = 0;
          }
          md::TransitLine::debugString(*(void *)v37, *(unsigned __int8 *)(v37 + 52));
          int v38 = (NSString *)objc_claimAutoreleasedReturnValue();
          md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)@"    ", v38, v5, v39);

          if (*v31) {
            int v40 = (md::TransitLineSegment *)(*v31 + 8);
          }
          else {
            int v40 = 0;
          }
          md::TransitLineSegment::debugString(v40);
          int v41 = (NSString *)objc_claimAutoreleasedReturnValue();
          md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)@"    ", v41, v5, v42);

          uint64_t v33 = (v33 + 1);
          LODWORD(v24) = v24 + 1;
        }
        ++v31;
      }
      while (v31 != v32);
    }
  }
  return v5;
}

void sub_1A2229E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::TransitItemMarkerImpl<md::TransitLink>::isHighlighted(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 244);
}

uint64_t md::TransitItemMarkerImpl<md::TransitLink>::setHighlighted(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 244) = a2;
  return result;
}

void md::TransitItemMarkerImpl<md::TransitLink>::~TransitItemMarkerImpl()
{
}

uint64_t std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitLink>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitLink>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitLink>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::TransitItemMarkerImpl<md::TransitJunction>::debugDraw(uint64_t a1, float32x2_t *a2, uint64_t a3, char a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = **(void **)(a1 + 8);
  v15[0] = v6;
  v15[1] = a3;
  char v16 = a4;
  if (*(unsigned char *)(v5 + 82))
  {
    memset(v17, 0, sizeof(v17));
    memset(__p, 0, sizeof(__p));
    md::HighlightHelper::tileToMercatorPoints(v6, v5 + 16, 1, (uint64_t)__p);
    md::HighlightHelper::mercatorToScreenPoints((uint64_t)v15, (double **)__p, (uint64_t)v17);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    float v7 = (_DWORD *)v17[0];
    a2[1].i32[0] = *(_DWORD *)v17[0];
    a2[1].i32[1] = v7[1];
    ggl::DebugConsole::drawSymbol(a2, 1);
    operator delete(v7);
  }
  float v8 = *(void **)(v5 + 24);
  if (v8 != (void *)(v5 + 32))
  {
    do
    {
      md::TransitLink::debugDrawWithSelectedJunction((md::TransitLink *)v8[4], (const md::TransitJunction *)v5, v8[4] == *(void *)(v5 + 72), a2, (const md::HighlightHelper *)v15);
      float v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          float v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v8[2];
          BOOL v12 = *v11 == (void)v8;
          float v8 = v11;
        }
        while (!v12);
      }
      float v8 = v11;
    }
    while (v11 != (void *)(v5 + 32));
  }
  float v9 = *(void **)(v5 + 48);
  if (v9 != (void *)(v5 + 56))
  {
    do
    {
      md::TransitLink::debugDrawWithSelectedJunction((md::TransitLink *)v9[4], (const md::TransitJunction *)v5, v9[4] == *(void *)(v5 + 72), a2, (const md::HighlightHelper *)v15);
      uint64_t v13 = (void *)v9[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v9[2];
          BOOL v12 = *v14 == (void)v9;
          float v9 = v14;
        }
        while (!v12);
      }
      float v9 = v14;
    }
    while (v14 != (void *)(v5 + 56));
  }
}

void sub_1A222A0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p)
  {
    operator delete(__p);
    float v17 = a13;
    if (!a13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    float v17 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

NSString *md::TransitItemMarkerImpl<md::TransitJunction>::debugString(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  objc_msgSend(MEMORY[0x1E4F28E78], "stringWithFormat:", @"<Junction:%p>\n", v3);
  uint64_t v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  [(NSString *)v4 appendFormat:@"point=(%f,%f)\n", *(float *)(v3 + 16), *(float *)(v3 + 20)];
  uint64_t v5 = *(void **)(v3 + 24);
  uint64_t v6 = (void *)(v3 + 32);
  _D0 = 0;
  if (v5 != (void *)(v3 + 32))
  {
    do
    {
      uint64_t v20 = (void *)v5[1];
      unint64_t v21 = v5;
      if (v20)
      {
        do
        {
          float32x2_t v22 = v20;
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          float32x2_t v22 = (void *)v21[2];
          _ZF = *v22 == (void)v21;
          unint64_t v21 = v22;
        }
        while (!_ZF);
      }
      _D0 = vsub_f32(_D0, *(float32x2_t *)(*(void *)(v5[4] + 64) - 56));
      uint64_t v5 = v22;
    }
    while (v22 != v6);
  }
  float v8 = *(void **)(v3 + 48);
  float v9 = (void *)(v3 + 56);
  if (v8 != (void *)(v3 + 56))
  {
    do
    {
      float v23 = (void *)v8[1];
      uint64_t v24 = v8;
      if (v23)
      {
        do
        {
          float32x2_t v25 = v23;
          float v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          float32x2_t v25 = (void *)v24[2];
          _ZF = *v25 == (void)v24;
          uint64_t v24 = v25;
        }
        while (!_ZF);
      }
      _D0 = vadd_f32(**(float32x2_t **)(v8[4] + 56), _D0);
      float v8 = v25;
    }
    while (v25 != v9);
  }
  _S2 = _D0.i32[1];
  __asm { FMLA            S1, S2, V0.S[1] }
  float v16 = 1.0 / sqrtf(_S1);
  float v17 = atan2f(vmuls_lane_f32(v16, _D0, 1), v16 * _D0.f32[0]) * 57.2957795;
  [(NSString *)v4 appendFormat:@"RefLink:%p, isSuperSet:%i, domDir:%.1f\n", *(void *)(v3 + 72), *(unsigned __int8 *)(v3 + 81), v17];
  [(NSString *)v4 appendFormat:@"Links:\n"];
  float v18 = *(void **)(v3 + 24);
  if (v18 == v6)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      float32x2_t v26 = (md::TransitLink *)v18[4];
      if (*(void *)(*(void *)v26 + 40) == *(void *)(v3 + 8))
      {
        float v30 = (float *)*((void *)v26 + 7);
        float v28 = *v30;
        float v29 = v30[1];
      }
      else
      {
        uint64_t v27 = *((void *)v26 + 8);
        float v28 = -*(float *)(v27 - 56);
        float v29 = -*(float *)(v27 - 52);
      }
      float v31 = atan2f(v29, v28) * 57.2957795;
      float v32 = vabds_f32(v31, v17);
      [(NSString *)v4 appendFormat:@"  %i:%p, dir:%.02f, domDelta:%.1f\n", v19, v26, v31, fminf(360.0 - v32, v32)];
      md::TransitLink::debugStringForJunction(v26, (int8x8_t *)v3, 1, a2);
      uint64_t v33 = (NSString *)objc_claimAutoreleasedReturnValue();
      md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)@"   ", v33, v4, v34);

      uint64_t v35 = (void *)v18[1];
      if (v35)
      {
        do
        {
          int16x8_t v36 = v35;
          uint64_t v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          int16x8_t v36 = (void *)v18[2];
          _ZF = *v36 == (void)v18;
          float v18 = v36;
        }
        while (!_ZF);
      }
      uint64_t v19 = (v19 + 1);
      float v18 = v36;
    }
    while (v36 != v6);
  }
  uint64_t v37 = *(void **)(v3 + 48);
  if (v37 != v9)
  {
    do
    {
      int v38 = (md::TransitLink *)v37[4];
      if (*(void *)(*(void *)v38 + 40) == *(void *)(v3 + 8))
      {
        float v42 = (float *)*((void *)v38 + 7);
        float v40 = *v42;
        float v41 = v42[1];
      }
      else
      {
        uint64_t v39 = *((void *)v38 + 8);
        float v40 = -*(float *)(v39 - 56);
        float v41 = -*(float *)(v39 - 52);
      }
      float v43 = atan2f(v41, v40) * 57.2957795;
      float v44 = vabds_f32(v43, v17);
      [(NSString *)v4 appendFormat:@"  %i:%p, dir:%.02f, domDelta:%.1f\n", v19, v38, v43, fminf(360.0 - v44, v44)];
      md::TransitLink::debugStringForJunction(v38, (int8x8_t *)v3, 0, a2);
      float32x2_t v45 = (NSString *)objc_claimAutoreleasedReturnValue();
      md::HighlightHelper::appendLinesUsingPrefix((md::HighlightHelper *)@"   ", v45, v4, v46);

      uint64_t v47 = (void *)v37[1];
      if (v47)
      {
        do
        {
          float32x2_t v48 = v47;
          uint64_t v47 = (void *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          float32x2_t v48 = (void *)v37[2];
          _ZF = *v48 == (void)v37;
          uint64_t v37 = v48;
        }
        while (!_ZF);
      }
      uint64_t v19 = (v19 + 1);
      uint64_t v37 = v48;
    }
    while (v48 != v9);
  }
  return v4;
}

void sub_1A222A510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::TransitItemMarkerImpl<md::TransitJunction>::isHighlighted(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 16) + 208);
}

uint64_t md::TransitItemMarkerImpl<md::TransitJunction>::setHighlighted(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(result + 16) + 208) = a2;
  return result;
}

void md::TransitItemMarkerImpl<md::TransitJunction>::~TransitItemMarkerImpl()
{
}

uint64_t std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitJunction>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitJunction>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5813D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitItemMarkerImpl<md::TransitJunction>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5813D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

id md::TransitTileData::debugString(md::TransitTileData *this)
{
  uint64_t v2 = [MEMORY[0x1E4F28E78] string];
  [v2 appendString:@"Tile\n"];
  objc_msgSend(v2, "appendFormat:", @" Counts: links=%i easingPoints=%i \n", 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((void *)this + 112) - *((void *)this + 111)) >> 3), *((unsigned int *)this + 339));
  objc_msgSend(v2, "appendFormat:", @" Edges Synched:T=%i L=%i,", *((unsigned __int8 *)this + 1248), *((unsigned __int8 *)this + 1251));
  objc_msgSend(v2, "appendFormat:", @" Neighbors:T=%i B=%i L=%i R=%i \n", *((unsigned __int8 *)this + 1252), *((unsigned __int8 *)this + 1254), *((unsigned __int8 *)this + 1255), *((unsigned __int8 *)this + 1253));
  return v2;
}

void sub_1A222A6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A222A86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A222A8A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A222A9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A222AA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A222AE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A222B2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A222B3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A222B518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A222B870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A222BBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::LabelRoute::~LabelRoute(md::LabelRoute *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v2)
  {
    uint64_t v3 = v2[6];
    if (v3)
    {
      v2[7] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[9] + 40))(v2[9], v3, v2[8] - v3);
    }
    if (*v2)
    {
      std::vector<geo::fast_shared_ptr<md::LabelRouteZoomCollisionInfo,std::allocator>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelRouteZoomCollisionInfo,std::allocator>,mdm::Allocator>>::__clear[abi:nn180100](v2);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], *v2, v2[2] - *v2);
    }
    MEMORY[0x1A6239270](v2, 0x60C40FC37DD7DLL);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v4, *((void *)this + 10) - v4);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v5, *((void *)this + 6) - v5);
  }
  *(void *)this = &unk_1EF559678;
}

void ggl::FlyoverNight::FlyoverPipelineState::~FlyoverPipelineState(ggl::FlyoverNight::FlyoverPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::FlyoverNight::FlyoverPipelineSetup::textureIsEnabled(ggl::FlyoverNight::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::FlyoverNight::FlyoverPipelineSetup::constantDataIsEnabled(ggl::FlyoverNight::FlyoverPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

void ggl::FlyoverNight::FlyoverPipelineSetup::~FlyoverPipelineSetup(ggl::FlyoverNight::FlyoverPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::FlyoverNight::FlyoverPipelineSetup::FlyoverPipelineSetup(ggl::FlyoverNight::FlyoverPipelineSetup *this)
{
  {
    {
      {
        ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
      }
      ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
      unk_1E958CB20 = 1;
    }
    ggl::FlyoverNight::FlyoverPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
    *(void *)algn_1E958CA38 = &ggl::FlyoverNight::pipelineDataFlyoverPipelineDeviceStructs(void)::ref;
    qword_1E958CA40 = 0;
    {
      ggl::FlyoverNight::pipelineDataFlyoverPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
      unk_1E958CA70 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
      qword_1E958CA78 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
      unk_1E958CA80 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
      qword_1E958CA88 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
    }
    qword_1E958CA48 = (uint64_t)&ggl::FlyoverNight::pipelineDataFlyoverPipelineConstantStructs(void)::ref;
    unk_1E958CA50 = xmmword_1A28FD1E0;
  }
  uint64_t result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::FlyoverNight::FlyoverPipelineSetup::typedReflection(void)::ref);
  *(void *)this = &unk_1EF55AC18;
  return result;
}

void ggl::FlyoverNight::FlyoverPolarPipelineState::~FlyoverPolarPipelineState(ggl::FlyoverNight::FlyoverPolarPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::FlyoverNight::FlyoverPolarPipelineSetup::textureIsEnabled(ggl::FlyoverNight::FlyoverPolarPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::FlyoverNight::FlyoverPolarPipelineSetup::constantDataIsEnabled(ggl::FlyoverNight::FlyoverPolarPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::FlyoverNight::FlyoverPolarPipelineSetup::~FlyoverPolarPipelineSetup(ggl::FlyoverNight::FlyoverPolarPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Hillshade::Pos2DUVPipelineState::~Pos2DUVPipelineState(ggl::Hillshade::Pos2DUVPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::Hillshade::Pos2DUVPipelineSetup::textureIsEnabled(ggl::Hillshade::Pos2DUVPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::Hillshade::Pos2DUVPipelineSetup::constantDataIsEnabled(ggl::Hillshade::Pos2DUVPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::Hillshade::Pos2DUVPipelineSetup::~Pos2DUVPipelineSetup(ggl::Hillshade::Pos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::CartographicMapEngineConfiguration::didBecomeInactive(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v3 = v2[2];
  if (!*(void *)&v3) {
    return;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x20A1ED17D78F322BLL;
    if (*(void *)&v3 <= 0x20A1ED17D78F322BuLL) {
      uint64_t v5 = 0x20A1ED17D78F322BuLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x20A1ED17D78F322BLL;
  }
  int8x8_t v6 = v2[1];
  float v7 = *(void **)(*(void *)&v6 + 8 * v5);
  if (!v7 || (float v8 = (void *)*v7) == 0)
  {
LABEL_21:
    uint64_t v11 = 0;
    goto LABEL_22;
  }
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0x20A1ED17D78F322BLL)
      {
        if (v8[2] == 0x20A1ED17D78F322BLL) {
          goto LABEL_48;
        }
      }
      else if ((v10 & (*(void *)&v3 - 1)) != v5)
      {
        goto LABEL_21;
      }
      float v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == 0x20A1ED17D78F322BLL) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    float v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_21;
    }
  }
  if (v8[2] != 0x20A1ED17D78F322BLL) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v11 = v8[5];
LABEL_22:
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v12 = 0xBEC1A12372CEEC00;
    if (*(void *)&v3 <= 0xBEC1A12372CEEC00) {
      unint64_t v12 = 0xBEC1A12372CEEC00 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v12 = (*(void *)&v3 - 1) & 0xBEC1A12372CEEC00;
  }
  uint64_t v13 = *(void **)(*(void *)&v6 + 8 * v12);
  if (!v13 || (uint64_t v14 = (void *)*v13) == 0)
  {
LABEL_41:
    uint64_t v18 = 0;
    if (v11) {
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v15 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v17 = v14[1];
      if (v17 == 0xBEC1A12372CEEC00)
      {
        if (v14[2] == 0xBEC1A12372CEEC00) {
          goto LABEL_49;
        }
      }
      else if ((v17 & v15) != v12)
      {
        goto LABEL_41;
      }
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_41;
      }
    }
  }
  while (2)
  {
    unint64_t v16 = v14[1];
    if (v16 != 0xBEC1A12372CEEC00)
    {
      if (v16 >= *(void *)&v3) {
        v16 %= *(void *)&v3;
      }
      if (v16 != v12) {
        goto LABEL_41;
      }
      goto LABEL_31;
    }
    if (v14[2] != 0xBEC1A12372CEEC00)
    {
LABEL_31:
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_41;
      }
      continue;
    }
    break;
  }
LABEL_49:
  uint64_t v18 = v14[5];
  if (!v11) {
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v19 = *(void *)(*(void *)(*(void *)(v11 + 160) + 168) + 32);
  (*(void (**)(uint64_t, void))(*(void *)v19 + 120))(v19, 0);
LABEL_43:
  if (v18)
  {
    uint64_t v20 = *(void **)(v18 + 296);
    [v20 setRouteOverlayCache:0];
  }
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::featureMarker(uint64_t a1@<X1>, double *a2@<X2>, void *a3@<X8>)
{
  int8x8_t v3 = *(geo::codec::VectorTile **)(a1 + 640);
  *a3 = 0;
  a3[1] = 0;
  if (v3)
  {
    unint64_t v7 = geo::codec::VectorTile::polygonsCount(v3);
    if (v7)
    {
      for (unint64_t i = 0; i < v7 && !v13; ++i)
      {
        atomic_ullong v9 = geo::codec::VectorTile::polygons(*(geo::codec::VectorTile **)(a1 + 640)) + (i << 7);
        uint64_t v10 = *(unsigned int *)(v9 + 100);
        if (!v10)
        {
LABEL_8:
          uint64_t v13 = 0;
          continue;
        }
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v18 = 0;
          unint64_t v12 = (float *)geo::codec::multiSectionFeaturePoints((void *)v9, v11, &v18);
          if (VKPointInPolygon(v12, v18, *a2, a2[1])) {
            break;
          }
          if (v10 == ++v11) {
            goto LABEL_8;
          }
        }
        std::allocate_shared[abi:nn180100]<md::VectorFeatureMarker,std::allocator<md::VectorFeatureMarker>,GeoCodecsFeature *,void>(&v17, v9);
        long long v14 = v17;
        long long v17 = 0uLL;
        uint64_t v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          unint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
          if (*((void *)&v17 + 1))
          {
LABEL_12:
            if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        else
        {
          unint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
          if (*((void *)&v17 + 1)) {
            goto LABEL_12;
          }
        }
        uint64_t v13 = *a3;
      }
    }
  }
}

void sub_1A222CB90(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::renderablesWillEnterView(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  int8x8_t v3 = *a3;
  uint8x8_t v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      uint64_t v5 = *v3++;
      md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v5 + 384), 1);
    }
    while (v3 != v4);
  }
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(void *a1, uint64_t a2)
{
  for (unint64_t i = (uint64_t **)a1[102]; i; unint64_t i = (uint64_t **)*i)
  {
    uint64_t v5 = i[4];
    [v5 updateCachedStyles];
  }
  int8x8_t v6 = (uint64_t *)(*(uint64_t (**)(void *))(*a1 + 48))(a1);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (v7 != *v6)
  {
    if (a2 == 1)
    {
      do
      {
        id v10 = *(id *)(v8 + 8);
        id v9 = v10;
        [v9 setNeedsTextureUpdate];

        v8 += 24;
      }
      while (v8 != v7);
    }
    else
    {
      do
      {

        v8 += 24;
      }
      while (v8 != v7);
    }
  }
}

void sub_1A222CD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  unint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1A222CD28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::prepare(unsigned char *a1)
{
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 104))(a1);
  char v3 = a1[49];
  a1[481] = v3 - a1[48] + 2;
  a1[480] = v3 + 1;
  return result;
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::reserveStencilRange(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  int v3 = *a3;
  if ((*(unsigned __int16 *)(result + 422) | (*(unsigned __int8 *)(result + 424) << 16)) >= 0x10000u
    && v3 == *(_WORD *)(result + 422)
    && a3[1] == HIBYTE(*(_WORD *)(result + 422)))
  {
    int v5 = *(unsigned __int8 *)(result + 481);
    int8x8_t v6 = *(unsigned __int8 **)(a2 + 24);
    int v7 = *v6;
    unsigned int v8 = v6[1];
    if (v7 + v5 <= v8) {
      id v9 = 0;
    }
    else {
      id v9 = v6 + 4;
    }
    *(void *)(*(void *)(result + 368) + 904) = v9;
    if (v7 + v5 > v8)
    {
      v6[1] = v6[2];
      LOBYTE(v7) = 1;
    }
    unsigned __int8 *v6 = v7 + v5;
    *(unsigned char *)(*(void *)(result + 368) + 912) = v7 - *(unsigned char *)(result + 48);
    return result;
  }
  if (((*(unsigned __int16 *)(result + 425) | (*(unsigned __int8 *)(result + 427) << 16)) & 0xFF0000) != 0)
  {
    int v4 = a3[1];
    if (v3 == *(_WORD *)(result + 425) && v4 == HIBYTE(*(_WORD *)(result + 425)))
    {
      int v10 = *(unsigned __int8 *)(result + 481);
      unint64_t v11 = *(unsigned __int8 **)(a2 + 24);
      int v12 = *v11;
      unsigned int v13 = v11[1];
      if (v12 + v10 <= v13) {
        long long v14 = 0;
      }
      else {
        long long v14 = v11 + 4;
      }
      *(void *)(*(void *)(result + 368) + 928) = v14;
      if (v12 + v10 > v13)
      {
        v11[1] = v11[2];
        LOBYTE(v12) = 1;
      }
      *unint64_t v11 = v12 + v10;
      *(unsigned char *)(*(void *)(result + 368) + 936) = v12 - *(unsigned char *)(result + 48);
      return result;
    }
  }
  else
  {
    int v4 = a3[1];
  }
  if (v3 == *(unsigned __int8 *)(result + 416) && v4 == *(unsigned __int8 *)(result + 417))
  {
    uint64_t v15 = 0;
  }
  else if (v3 == *(unsigned __int8 *)(result + 418) && v4 == *(unsigned __int8 *)(result + 419))
  {
    uint64_t v15 = 1;
  }
  else
  {
    if (v3 != *(unsigned __int8 *)(result + 420) || v4 != *(unsigned __int8 *)(result + 421)) {
      return result;
    }
    uint64_t v15 = 2;
  }
  int v16 = *(unsigned __int8 *)(result + 481);
  long long v17 = *(unsigned __int8 **)(a2 + 24);
  int v18 = *v17;
  unsigned int v19 = v17[1];
  if (v18 + v16 <= v19) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v17 + 4;
  }
  *(void *)(*(void *)(result + 368) + 8 * v15 + 872) = v20;
  if (v18 + v16 > v19)
  {
    v17[1] = v17[2];
    LOWORD(v18) = 1;
  }
  *long long v17 = v18 + v16;
  *(_WORD *)(*(void *)(result + 368) + 2 * v15 + 896) = v18 - *(unsigned __int8 *)(result + 48);
  return result;
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(uint64_t a1, uint64_t **a2)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  uint64_t v143 = (void (**)(void **))&unk_1EF573E48;
  unint64_t v144 = a2;
  v141[0] = &unk_1EF573E00;
  v141[1] = a2;
  uint64_t v142 = v141;
  unint64_t v147 = v146;
  uint64_t v145 = (void **)&v143;
  v146[0] = &unk_1EF573E00;
  v146[1] = a2;
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>((uint64_t)&v144);
  if (v142 == v141)
  {
    (*(void (**)(void *))(v141[0] + 32))(v141);
  }
  else if (v142)
  {
    (*(void (**)(void *))(*v142 + 40))(v142);
  }
  if (v145 == (void **)&v143)
  {
    v143[4]((void **)&v143);
  }
  else if (v145)
  {
    (*((void (**)(void **))*v145 + 5))(v145);
  }
  uint64_t v4 = mach_absolute_time();
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v6 = *(void *)(a1 + 280);
  v133[0] = v5;
  v133[1] = v6;
  int v7 = a2[1];
  int8x8_t v8 = (int8x8_t)v7[1];
  if (!*(void *)&v8)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    goto LABEL_95;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = 0xE42D19AFCA302E68;
    if (*(void *)&v8 <= 0xE42D19AFCA302E68) {
      unint64_t v10 = 0xE42D19AFCA302E68 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v8 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v13 = *v7;
  long long v14 = *(void **)(v13 + 8 * v10);
  if (!v14) {
    goto LABEL_33;
  }
  uint64_t v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_33;
  }
  if (v9.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0xE42D19AFCA302E68)
      {
        if (v15[2] == 0xE42D19AFCA302E68) {
          goto LABEL_31;
        }
      }
      else if ((v17 & (*(void *)&v8 - 1)) != v10)
      {
        goto LABEL_33;
      }
      uint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_33;
      }
    }
  }
  while (1)
  {
    unint64_t v16 = v15[1];
    if (v16 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v16 >= *(void *)&v8) {
      v16 %= *(void *)&v8;
    }
    if (v16 != v10) {
      goto LABEL_33;
    }
LABEL_20:
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      goto LABEL_33;
    }
  }
  if (v15[2] != 0xE42D19AFCA302E68) {
    goto LABEL_20;
  }
LABEL_31:
  uint64_t v18 = v15[5];
  if (*(void *)(v18 + 8) == 0xE42D19AFCA302E68)
  {
    int v12 = *(uint64_t **)(v18 + 32);
    goto LABEL_34;
  }
LABEL_33:
  int v12 = 0;
LABEL_34:
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v19 = 0xFD5D5EC7C4E1E43ELL;
    if (*(void *)&v8 <= 0xFD5D5EC7C4E1E43ELL) {
      unint64_t v19 = 0xFD5D5EC7C4E1E43ELL % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v19 = (*(void *)&v8 - 1) & 0xFD5D5EC7C4E1E43ELL;
  }
  uint64_t v20 = *(void **)(v13 + 8 * v19);
  if (!v20) {
    goto LABEL_56;
  }
  unint64_t v21 = (void *)*v20;
  if (!v21) {
    goto LABEL_56;
  }
  if (v9.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 0xFD5D5EC7C4E1E43ELL)
      {
        if (v21[2] == 0xFD5D5EC7C4E1E43ELL) {
          goto LABEL_54;
        }
      }
      else if ((v23 & (*(void *)&v8 - 1)) != v19)
      {
        goto LABEL_56;
      }
      unint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_56;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 0xFD5D5EC7C4E1E43ELL)
    {
      if (v22 >= *(void *)&v8) {
        v22 %= *(void *)&v8;
      }
      if (v22 != v19) {
        goto LABEL_56;
      }
      goto LABEL_43;
    }
    if (v21[2] != 0xFD5D5EC7C4E1E43ELL)
    {
LABEL_43:
      unint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_56;
      }
      continue;
    }
    break;
  }
LABEL_54:
  uint64_t v24 = v21[5];
  if (*(void *)(v24 + 8) == 0xFD5D5EC7C4E1E43ELL)
  {
    uint64_t v25 = *(void *)(v24 + 32);
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v25 = 0;
LABEL_57:
  if (v9.u32[0] > 1uLL)
  {
    uint64_t v26 = 0x401D4CCE847AB1D1;
    if (*(void *)&v8 <= 0x401D4CCE847AB1D1uLL) {
      uint64_t v26 = 0x401D4CCE847AB1D1uLL % *(void *)&v8;
    }
  }
  else
  {
    uint64_t v26 = (*(void *)&v8 - 1) & 0x401D4CCE847AB1D1;
  }
  uint64_t v27 = *(void **)(v13 + 8 * v26);
  if (!v27) {
    goto LABEL_80;
  }
  float v28 = (void *)*v27;
  if (!v28) {
    goto LABEL_80;
  }
  if (v9.u32[0] < 2uLL)
  {
    uint64_t v29 = *(void *)&v8 - 1;
    while (1)
    {
      uint64_t v31 = v28[1];
      if (v31 == 0x401D4CCE847AB1D1)
      {
        if (v28[2] == 0x401D4CCE847AB1D1) {
          goto LABEL_77;
        }
      }
      else if ((v31 & v29) != v26)
      {
        goto LABEL_80;
      }
      float v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_80;
      }
    }
  }
  while (2)
  {
    unint64_t v30 = v28[1];
    if (v30 != 0x401D4CCE847AB1D1)
    {
      if (v30 >= *(void *)&v8) {
        v30 %= *(void *)&v8;
      }
      if (v30 != v26) {
        goto LABEL_80;
      }
      goto LABEL_66;
    }
    if (v28[2] != 0x401D4CCE847AB1D1)
    {
LABEL_66:
      float v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_80;
      }
      continue;
    }
    break;
  }
LABEL_77:
  uint64_t v32 = v28[5];
  if (*(void *)(v32 + 8) == 0x401D4CCE847AB1D1)
  {
    uint64_t v11 = *(void *)(v32 + 32);
    if (!v25) {
      goto LABEL_95;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v11 = 0;
  if (!v25) {
    goto LABEL_95;
  }
LABEL_81:
  if (*(unsigned char *)(v25 + 312))
  {
    for (; v5 != v6; v5 += 8)
      md::updatePolyonGroupsTransitNodeRouteAttributes(*(int8x8_t **)(*(void *)v5 + 384), *(void **)(v25 + 288), v25 + 232);
    uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 40) + 96) + 1120);
    unint64_t v34 = *(void *)(v33 + 16);
    if ((v34 & (v34 - 1)) != 0)
    {
      unint64_t v36 = 0x1BCA10CB9934FB1BLL;
      if (v34 <= 0x1BCA10CB9934FB1BLL) {
        unint64_t v36 = 0x1BCA10CB9934FB1BLL % v34;
      }
      uint64_t v35 = *(void **)(*(void *)(v33 + 8) + 8 * v36);
      do
      {
        do
          uint64_t v35 = (void *)*v35;
        while (v35[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v35[2] != 0x1BCA10CB9934FB1BLL);
    }
    else
    {
      uint64_t v35 = *(void **)(*(void *)(v33 + 8) + 8 * ((v34 - 1) & 0x1BCA10CB9934FB1BLL));
      do
      {
        do
          uint64_t v35 = (void *)*v35;
        while (v35[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v35[2] != 0x1BCA10CB9934FB1BLL);
    }
    *(unsigned char *)(v35[5] + 544) = 0;
  }
LABEL_95:
  char v132 = 0;
  uint64_t v37 = (gss::Allocator *)operator new(0x20uLL);
  *(void *)uint64_t v37 = &unk_1EF573DB8;
  *((void *)v37 + 1) = &v132;
  *((void *)v37 + 2) = v133;
  *((void *)v37 + 3) = a1;
  float v140 = v37;
  int v38 = (unsigned char *)v12[6];
  uint64_t v39 = (unsigned char *)v12[7];
  if (v38 == v39)
  {
LABEL_100:
    uint64_t v37 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *))(*(void *)v37 + 40))(v37);
    goto LABEL_101;
  }
  do
  {
    LOBYTE(v126) = *v38;
    if (!v140) {
      goto LABEL_214;
    }
    (*(void (**)(gss::Allocator *, uint64_t *))(*(void *)v140 + 48))(v140, &v126);
    ++v38;
  }
  while (v38 != v39);
  uint64_t v37 = v140;
  if (v140 == (gss::Allocator *)v139)
  {
    uint64_t v37 = (gss::Allocator *)(*(uint64_t (**)(void *))(v139[0] + 32))(v139);
    if (v132) {
      goto LABEL_102;
    }
    goto LABEL_116;
  }
  if (v140) {
    goto LABEL_100;
  }
LABEL_101:
  if (!v132)
  {
LABEL_116:
    if (!*(void *)(a1 + 464)) {
      goto LABEL_102;
    }
    goto LABEL_119;
  }
LABEL_102:
  float v40 = *(std::__shared_weak_count **)(a1 + 472);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if (*v12)
    {
LABEL_105:
      uint64_t v41 = gss::Allocator::instance(v37);
      uint64_t v137 = v41;
      float v42 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v41 + 16))(v41, 16, 4);
      float v43 = v42;
      *(void *)&long long v135 = v42;
      unsigned int v136 = v42 + 2;
      if (v42) {
        *float v42 = 0x200000005;
      }
      v42[1] = 0x1B00000003;
      *((void *)&v135 + 1) = v42 + 2;
      gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)&v126, (uint64_t)&v135);
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v41 + 40))(v41, v43, 16);
      uint64_t v44 = *v12;
      *(void *)((char *)&v135 + 7) = 0;
      *(void *)&long long v135 = 0;
      HIBYTE(v135) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v134, v44, (gss::FeatureAttributeSet *)&v126, (gss::QueryOverrides *)&v135);
      long long v45 = v134;
      float v46 = *(std::__shared_weak_count **)(a1 + 472);
      long long v134 = 0uLL;
      *(_OWORD *)(a1 + 464) = v45;
      if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      uint64_t v47 = (std::__shared_weak_count *)*((void *)&v134 + 1);
      if (*((void *)&v134 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v134 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      if (v126)
      {
        uint64_t v127 = v126;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v129 + 40))(v129, v126, v128 - v126);
      }
    }
  }
  else if (*v12)
  {
    goto LABEL_105;
  }
LABEL_119:
  uint64_t v48 = *(void *)(a1 + 352);
  *(void *)(v48 + 112) = 0;
  *(void *)(v48 + 120) = 0;
  md::PolygonRenderResources::resetPools(*(md::PolygonRenderResources **)(a1 + 368));
  *(unsigned char *)(a1 + 384) = *(unsigned __int8 *)(md::LayoutContext::frameState((md::LayoutContext *)a2) + 128)
                       - 1 < 3;
  if (v11)
  {
    *(_DWORD *)(a1 + 444) = *(_DWORD *)v11;
    *(_WORD *)(a1 + 428) = *(_WORD *)(v11 + 4);
    if (*(unsigned char *)(v11 + 16))
    {
      uint64_t v49 = *(void *)(v11 + 8);
      float v50 = (char *)operator new(8uLL);
      *(void *)float v50 = v49;
      int8x16_t v51 = *(unsigned char **)(a1 + 392);
      *(void *)(a1 + 400) = v51;
      std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>((char **)(a1 + 392), v51, v50, v50 + 8, 1);
      operator delete(v50);
    }
    else
    {
      *(void *)(a1 + 400) = *(void *)(a1 + 392);
    }
  }
  uint64_t v52 = *(void *)(a1 + 368);
  uint64_t v53 = *(void *)(v52 + 872);
  long long v135 = 0uLL;
  unsigned int v136 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v135, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
  uint64_t v54 = v135;
  int v55 = *(__int16 *)(v52 + 896);
  LOBYTE(v126) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v135, v55, 0, &v126);
  if (v53) {
    *(void *)(v54 + 32) = v53;
  }
  uint64_t v56 = *(void *)(a1 + 368);
  uint64_t v57 = *(void *)(v56 + 880);
  long long v135 = 0uLL;
  unsigned int v136 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v135, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
  uint64_t v58 = *((void *)&v135 + 1);
  int v59 = *(__int16 *)(v56 + 898);
  LOBYTE(v126) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, *((uint64_t *)&v135 + 1), v59, 0, &v126);
  if (v57) {
    *(void *)(v58 + 32) = v57;
  }
  uint64_t v60 = *(void *)(a1 + 368);
  uint64_t v61 = *(void *)(v60 + 888);
  long long v135 = 0uLL;
  unsigned int v136 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v135, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
  uint64_t v62 = (uint64_t)v136;
  int v63 = *(__int16 *)(v60 + 900);
  LOBYTE(v126) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, (uint64_t)v136, v63, 0, &v126);
  if (v61) {
    *(void *)(v62 + 32) = v61;
  }
  if (*(unsigned char *)(a1 + 424))
  {
    uint64_t v64 = *(void **)(*(void *)(*(void *)(a1 + 40) + 24) + 8);
    uint64_t v65 = v64[3];
    uint64_t v66 = v64[4];
    uint64_t v67 = v66 - v65;
    if (v66 == v65) {
      goto LABEL_139;
    }
    uint64_t v68 = 0;
    unint64_t v69 = v67 >> 3;
    while (1)
    {
      float32x2_t v70 = *(unsigned __int8 **)(v65 + 8 * v68);
      if (*v70 == *(unsigned __int8 *)(a1 + 422))
      {
        unint64_t v71 = *((void *)v70 + 1);
        uint64_t v72 = v64[15];
        if (v71 < (v64[16] - v72) >> 3) {
          break;
        }
      }
      if (++v68 >= v69) {
        goto LABEL_139;
      }
    }
    uint64_t v73 = *(void *)(v72 + 8 * v71);
    if (!v73
      || (uint64_t v74 = *(void *)(*(void *)(v73 + 24) + 8 * *(unsigned __int8 *)(a1 + 423))) == 0
      || !*(unsigned char *)(a1 + 428)
      || (int v75 = *(char *)(*(void *)(a1 + 368) + 912),
          LOBYTE(v126) = 0,
          md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v74, v75, 0, &v126), *(void *)(v74 + 32) = *(void *)(*(void *)(a1 + 368) + 920), *(unsigned char *)(a1 + 424)))
    {
LABEL_139:
      uint64_t v76 = *(void **)(*(void *)(*(void *)(a1 + 40) + 24) + 8);
      uint64_t v77 = v76[3];
      uint64_t v78 = v76[4] - v77;
      if (v78)
      {
        uint64_t v79 = 0;
        unint64_t v80 = v78 >> 3;
        while (1)
        {
          uint64_t v81 = *(unsigned __int8 **)(v77 + 8 * v79);
          if (*v81 == *(unsigned __int8 *)(a1 + 422))
          {
            unint64_t v82 = *((void *)v81 + 1);
            uint64_t v83 = v76[15];
            unint64_t v84 = (v76[16] - v83) >> 3;
            if (v82 < v84) {
              break;
            }
          }
          if (++v79 >= v80) {
            goto LABEL_154;
          }
        }
        uint64_t v85 = *(void *)(v83 + 8 * v82);
        if (v85)
        {
          uint64_t v86 = *(void *)(*(void *)(v85 + 24) + 8 * *(unsigned __int8 *)(a1 + 423));
          if (v86)
          {
            if (*(unsigned char *)(a1 + 427))
            {
              uint64_t v87 = 0;
              while (1)
              {
                unint64_t v88 = *(unsigned __int8 **)(v77 + 8 * v87);
                if (*v88 == *(unsigned __int8 *)(a1 + 425))
                {
                  unint64_t v89 = *((void *)v88 + 1);
                  if (v89 < v84) {
                    break;
                  }
                }
                if (++v87 >= v80) {
                  goto LABEL_154;
                }
              }
              uint64_t v90 = *(void *)(v83 + 8 * v89);
              if (v90 && *(void *)(*(void *)(v90 + 24) + 8 * *(unsigned __int8 *)(a1 + 426)))
              {
                int v91 = *(char *)(*(void *)(a1 + 368) + 936);
                LOBYTE(v126) = 0;
                md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v86, v91, 0, &v126);
                *(void *)(v86 + 32) = *(void *)(*(void *)(a1 + 368) + 944);
              }
            }
          }
        }
      }
    }
  }
LABEL_154:
  *(void *)(*(void *)(a1 + 368) + 264) = 0;
  *(unsigned char *)(a1 + 440) = *(unsigned char *)(a1 + 360);
  *(unsigned char *)(a1 + 386) = *(unsigned char *)(a1 + 480);
  if (*(unsigned char *)(a1 + 361))
  {
    float v92 = a2[1];
    int8x8_t v93 = (int8x8_t)v92[1];
    if (v93)
    {
      uint8x8_t v94 = (uint8x8_t)vcnt_s8(v93);
      v94.i16[0] = vaddlv_u8(v94);
      if (v94.u32[0] > 1uLL)
      {
        uint64_t v95 = 0x1AF456233693CD46;
        if (*(void *)&v93 <= 0x1AF456233693CD46uLL) {
          uint64_t v95 = 0x1AF456233693CD46uLL % *(void *)&v93;
        }
      }
      else
      {
        uint64_t v95 = (*(void *)&v93 - 1) & 0x1AF456233693CD46;
      }
      float v96 = *(void **)(*v92 + 8 * v95);
      if (v96)
      {
        uint64_t v97 = (void *)*v96;
        if (v97)
        {
          if (v94.u32[0] < 2uLL)
          {
            uint64_t v98 = *(void *)&v93 - 1;
            while (1)
            {
              uint64_t v100 = v97[1];
              if (v100 == 0x1AF456233693CD46)
              {
                if (v97[2] == 0x1AF456233693CD46) {
                  goto LABEL_176;
                }
              }
              else if ((v100 & v98) != v95)
              {
                goto LABEL_192;
              }
              uint64_t v97 = (void *)*v97;
              if (!v97) {
                goto LABEL_192;
              }
            }
          }
          do
          {
            unint64_t v99 = v97[1];
            if (v99 == 0x1AF456233693CD46)
            {
              if (v97[2] == 0x1AF456233693CD46)
              {
LABEL_176:
                uint64_t v101 = v97[5];
                if (*(void *)(v101 + 8) == 0x1AF456233693CD46)
                {
                  uint64_t v102 = *(void *)(v101 + 32);
                  if (v102)
                  {
                    uint64_t v103 = *(void *)(a1 + 464);
                    float v104 = *(std::__shared_weak_count **)(a1 + 472);
                    *(void *)&long long v135 = v103;
                    *((void *)&v135 + 1) = v104;
                    if (v104) {
                      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    gss::QueryableLocker<gss::PropertyID>::QueryableLocker(&v126, v103, (uint64_t)v104);
                    if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                    if ((_BYTE)v130)
                    {
                      if ((int)*(float *)(v102 + 3072) >= 0x17) {
                        unsigned int v105 = 23;
                      }
                      else {
                        unsigned int v105 = (int)*(float *)(v102 + 3072);
                      }
                      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v135, *(void *)(v126 + 24), 0x5Cu, v105, 2u, 0);
                      float32x4_t v125 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v135)), (float32x4_t)vdupq_n_s32(0x37800080u));
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v126);
                      uint64_t v106 = *(void *)(*(void *)(a1 + 368) + 968);
                      uint64_t v138 = 0;
                      long long v135 = 0uLL;
                      uint64_t v107 = *(void *)(v106 + 8);
                      uint64_t v126 = 0;
                      uint64_t v127 = v106;
                      uint64_t v128 = 0;
                      uint64_t v129 = v107;
                      __int16 v130 = 1;
                      if (v107) {
                        uint64_t v108 = *(void *)(v106 + 72);
                      }
                      else {
                        uint64_t v108 = 0;
                      }
                      uint64_t v131 = v108;
                      ggl::BufferMemory::operator=((uint64_t *)&v135, (uint64_t)&v126);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v126);
                      uint64_t v109 = v138;
                      v138[4] = v125;
                      *(float32x4_t *)((char *)&v109[5] + 8) = (float32x4_t)xmmword_1A28FCDA0;
                      v109[5].i32[0] = 1065353216;
                      v109->i32[0] = 1065353216;
                      *(uint64_t *)((char *)&v109->i64[1] + 4) = 0;
                      *(uint64_t *)((char *)v109->i64 + 4) = 0;
                      v109[1].i32[1] = 1065353216;
                      v109[1].i64[1] = 0;
                      v109[2].i64[0] = 0;
                      v109[2].i32[2] = 1065353216;
                      *(uint64_t *)((char *)v109[3].i64 + 4) = 0;
                      *(uint64_t *)((char *)&v109[2].i64[1] + 4) = 0;
                      v109[3].i32[3] = 1065353216;
                      uint64_t v126 = 0;
                      uint64_t v127 = 0;
                      uint64_t v128 = 0;
                      md::PolygonLayoutCharacteristics::commandBufferInfo(&v126, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
                      md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(a1, a2[1], v126);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v135);
                    }
                    else
                    {
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v126);
                    }
                  }
                }
                break;
              }
            }
            else
            {
              if (v99 >= *(void *)&v93) {
                v99 %= *(void *)&v93;
              }
              if (v99 != v95) {
                break;
              }
            }
            uint64_t v97 = (void *)*v97;
          }
          while (v97);
        }
      }
    }
  }
LABEL_192:
  md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>((uint64_t **)(a1 + 272), a2[1], a1 + 376);
  md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(a1 + 272, (uint64_t)a2, *(void *)(a1 + 40), *(void *)(a1 + 368), (unsigned __int8 *)(a1 + 376), *(unsigned char *)(a1 + 448));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t **))(*(void *)a1 + 32))(&v126, a1, a2);
  uint64_t v110 = (unsigned __int8 *)v126;
  float v111 = (unsigned __int8 *)v127;
  if (v126 == v127)
  {
    if (v126) {
      goto LABEL_194;
    }
  }
  else
  {
    do
    {
      long long v114 = *(void **)(*(void *)(*(void *)(a1 + 40) + 24) + 8);
      uint64_t v115 = v114[3];
      uint64_t v116 = v114[4];
      uint64_t v117 = v116 - v115;
      if (v116 != v115)
      {
        uint64_t v118 = 0;
        unint64_t v119 = v117 >> 3;
        while (1)
        {
          float v120 = *(unsigned __int8 **)(v115 + 8 * v118);
          if (*v120 == *v110)
          {
            unint64_t v121 = *((void *)v120 + 1);
            uint64_t v122 = v114[15];
            if (v121 < (v114[16] - v122) >> 3) {
              break;
            }
          }
          if (++v118 >= v119) {
            goto LABEL_201;
          }
        }
        uint64_t v123 = *(void *)(v122 + 8 * v121);
        if (v123)
        {
          uint64_t v124 = *(void *)(*(void *)(v123 + 24) + 8 * v110[1]);
          if (v124) {
            ggl::CommandBuffer::stableSortRenderItems(*(__n128 **)(v124 + 72), *(char **)(v124 + 80));
          }
        }
      }
LABEL_201:
      v110 += 2;
    }
    while (v110 != v111);
    uint64_t v110 = (unsigned __int8 *)v126;
    if (v126)
    {
LABEL_194:
      uint64_t v127 = (uint64_t)v110;
      operator delete(v110);
    }
  }
  unint64_t v112 = mach_absolute_time() - v4;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
  }
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120), v112);
  if (!v147)
  {
LABEL_214:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v147 + 48))(v147);
  uint64_t result = (uint64_t)v147;
  if (v147 == v146) {
    return (*(uint64_t (**)(void *))(v146[0] + 32))(v146);
  }
  if (v147) {
    return (*(uint64_t (**)(void))(*v147 + 40))();
  }
  return result;
}

void sub_1A222DFEC(_Unwind_Exception *a1)
{
  unint64_t v4 = mach_absolute_time() - v1;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
  }
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120), v4);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 120));
  _Unwind_Resume(a1);
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)a1 + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "PolygonLayout", "", v5, 2u);
  }
}

void md::updatePolyonGroupsTransitNodeRouteAttributes(int8x8_t *a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = a2;
    int8x8_t v6 = a1[101];
    if (v6)
    {
LABEL_3:
      unint64_t v7 = v5[2];
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v9 = v5[2];
        if (v7 >= *(void *)&v6) {
          unint64_t v9 = v7 % *(void *)&v6;
        }
      }
      else
      {
        unint64_t v9 = (*(void *)&v6 - 1) & v7;
      }
      unint64_t v10 = *(uint64_t ****)(*(void *)&a1[100] + 8 * v9);
      if (v10)
      {
        uint64_t v11 = *v10;
        if (v11)
        {
          if (v8.u32[0] < 2uLL)
          {
            uint64_t v12 = *(void *)&v6 - 1;
            while (1)
            {
              long long v14 = v11[1];
              if ((uint64_t *)v7 == v14)
              {
                if (v11[2] == (uint64_t *)v7) {
                  goto LABEL_23;
                }
              }
              else if (((unint64_t)v14 & v12) != v9)
              {
                goto LABEL_24;
              }
              uint64_t v11 = (uint64_t **)*v11;
              if (!v11) {
                goto LABEL_24;
              }
            }
          }
          do
          {
            unint64_t v13 = (unint64_t)v11[1];
            if (v7 == v13)
            {
              if (v11[2] == (uint64_t *)v7)
              {
LABEL_23:
                uint64_t v15 = v11[4];
                [v15 clearRouteAttributes];

                break;
              }
            }
            else
            {
              if (v13 >= *(void *)&v6) {
                v13 %= *(void *)&v6;
              }
              if (v13 != v9) {
                break;
              }
            }
            uint64_t v11 = (uint64_t **)*v11;
          }
          while (v11);
        }
      }
LABEL_24:
      while (1)
      {
        uint64_t v5 = (void *)*v5;
        if (!v5) {
          break;
        }
        int8x8_t v6 = a1[101];
        if (v6) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      do
        uint64_t v5 = (void *)*v5;
      while (v5);
    }
  }
  unint64_t v16 = *(void **)(a3 + 16);
  if (v16)
  {
    int8x8_t v17 = a1[101];
    if (v17)
    {
LABEL_30:
      unint64_t v18 = v16[2];
      uint8x8_t v19 = (uint8x8_t)vcnt_s8(v17);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] > 1uLL)
      {
        unint64_t v20 = v16[2];
        if (v18 >= *(void *)&v17) {
          unint64_t v20 = v18 % *(void *)&v17;
        }
      }
      else
      {
        unint64_t v20 = (*(void *)&v17 - 1) & v18;
      }
      unint64_t v21 = *(uint64_t ****)(*(void *)&a1[100] + 8 * v20);
      if (v21)
      {
        unint64_t v22 = *v21;
        if (v22)
        {
          if (v19.u32[0] < 2uLL)
          {
            uint64_t v23 = *(void *)&v17 - 1;
            while (1)
            {
              uint64_t v25 = v22[1];
              if ((uint64_t *)v18 == v25)
              {
                if (v22[2] == (uint64_t *)v18) {
                  goto LABEL_50;
                }
              }
              else if (((unint64_t)v25 & v23) != v20)
              {
                goto LABEL_51;
              }
              unint64_t v22 = (uint64_t **)*v22;
              if (!v22) {
                goto LABEL_51;
              }
            }
          }
          do
          {
            unint64_t v24 = (unint64_t)v22[1];
            if (v18 == v24)
            {
              if (v22[2] == (uint64_t *)v18)
              {
LABEL_50:
                uint64_t v26 = v22[4];
                [v26 setRouteAttributes:v16 + 3];

                break;
              }
            }
            else
            {
              if (v24 >= *(void *)&v17) {
                v24 %= *(void *)&v17;
              }
              if (v24 != v20) {
                break;
              }
            }
            unint64_t v22 = (uint64_t **)*v22;
          }
          while (v22);
        }
      }
LABEL_51:
      while (1)
      {
        unint64_t v16 = (void *)*v16;
        if (!v16) {
          break;
        }
        int8x8_t v17 = a1[101];
        if (v17) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      do
        unint64_t v16 = (void *)*v16;
      while (v16);
    }
  }
}

void sub_1A222E538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(uint64_t a1, void *a2, uint64_t a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  if (!*(void *)&v3) {
    return;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v3 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v7 = 0x3070CB6B3C7F21D3uLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v3 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint8x8_t v8 = *(void **)(*a2 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  unint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x3070CB6B3C7F21D3)
      {
        if (v9[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_22;
        }
      }
      else if ((v11 & (*(void *)&v3 - 1)) != v7)
      {
        goto LABEL_24;
      }
      unint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v10 >= *(void *)&v3) {
      v10 %= *(void *)&v3;
    }
    if (v10 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    unint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v14 = 0xA60DDA5A69582425;
    if (*(void *)&v3 <= 0xA60DDA5A69582425) {
      unint64_t v14 = 0xA60DDA5A69582425 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v14 = (*(void *)&v3 - 1) & 0xA60DDA5A69582425;
  }
  uint64_t v15 = *(void **)(*a2 + 8 * v14);
  if (v15)
  {
    unint64_t v16 = (void *)*v15;
    if (v16)
    {
      if (v6.u32[0] < 2uLL)
      {
        uint64_t v17 = *(void *)&v3 - 1;
        while (1)
        {
          uint64_t v19 = v16[1];
          if (v19 == 0xA60DDA5A69582425)
          {
            if (v16[2] == 0xA60DDA5A69582425) {
              goto LABEL_45;
            }
          }
          else if ((v19 & v17) != v14)
          {
            return;
          }
          unint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
      }
      do
      {
        unint64_t v18 = v16[1];
        if (v18 == 0xA60DDA5A69582425)
        {
          if (v16[2] == 0xA60DDA5A69582425)
          {
LABEL_45:
            uint64_t v20 = v16[5];
            if (*(void *)(v20 + 8) == 0xA60DDA5A69582425)
            {
              if (v13)
              {
                unint64_t v21 = *(id **)(v20 + 32);
                if (v21)
                {
                  int v54 = *(__int16 *)(*(void *)(a1 + 368) + 896);
                  id v22 = *v21;
                  uint64_t v23 = v22;
                  if (v22)
                  {
                    [v22 textureManager];
                    uint64_t v53 = v59;
                    if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)())v60->__on_zero_shared)();
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                  else
                  {
                    uint64_t v53 = 0;
                  }

                  uint64_t v24 = *(void *)(a1 + 272);
                  uint64_t v52 = *(void *)(a1 + 280);
                  if (v24 != v52)
                  {
                    uint64_t v51 = a3;
                    int64x2_t v50 = vdupq_n_s64(1uLL);
                    do
                    {
                      uint64_t v27 = v13;
                      float v28 = *(void **)v24;
                      int v29 = *(unsigned __int8 *)(*(void *)(*(void *)v24 + 384) + 169);
                      uint64_t v30 = *(void *)(a1 + 368);
                      uint64_t v31 = *(void *)(v30 + 16 * *(unsigned __int8 *)(a1 + 360) + 280);
                      uint64_t v32 = ggl::FragmentedPool<ggl::PolygonFill::MeshPipelineSetup>::pop(*(void *)(v30 + 232));
                      uint64_t v33 = *(void **)(v32 + 64);
                      v33[1] = 0;
                      uint64_t v34 = v28[27];
                      *uint64_t v33 = v34;
                      uint64_t v35 = *(void **)(v32 + 160);
                      uint64_t v36 = v28[28];
                      if (v36) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
                      }
                      uint64_t v37 = (std::__shared_weak_count *)v35[1];
                      *uint64_t v35 = v34;
                      v35[1] = v36;
                      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                        std::__shared_weak_count::__release_weak(v37);
                      }
                      uint64_t v38 = *(void *)(v32 + 64);
                      *(void *)(v38 + 24) = 0;
                      uint64_t v39 = v28[29];
                      *(void *)(v38 + 16) = v39;
                      uint64_t v40 = *(void *)(v32 + 160);
                      uint64_t v41 = v28[30];
                      if (v41) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
                      }
                      float v42 = *(std::__shared_weak_count **)(v40 + 24);
                      *(void *)(v40 + 16) = v39;
                      *(void *)(v40 + 24) = v41;
                      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                        std::__shared_weak_count::__release_weak(v42);
                      }
                      **(void **)(v32 + 96) = *v53;
                      *((void *)&v55 + 1) = "";
                      *(void *)&long long v56 = v31;
                      memset(&v58[8], 0, 32);
                      *(int64x2_t *)&v58[40] = v50;
                      *(void *)&v58[56] = 0;
                      *(_DWORD *)uint64_t v58 = 1065353216;
                      LODWORD(v57) = v29 + v54;
                      *((void *)&v56 + 1) = v32;
                      uint64_t v43 = v28[48];
                      if (v43) {
                        uint64_t v44 = v43 + 168;
                      }
                      else {
                        uint64_t v44 = 0;
                      }
                      *((void *)&v57 + 1) = (16 * (int)v44) & 0xFF00 | ((unint64_t)*(unsigned __int8 *)(v44 + 1) << 19) | (*(void *)(a1 + 464) >> 4) | 0x10000;
                      uint64_t v13 = v27;
                      uint64_t v45 = 128;
                      if (*(unsigned __int8 *)(v27 + 320) - 1 < 3) {
                        uint64_t v45 = 144;
                      }
                      uint64_t v46 = *(void *)(a1 + 368);
                      uint64_t v47 = *(void *)(v27 + v45);
                      uint64_t v48 = *(void **)(v46 + 1072);
                      uint64_t v49 = v48[1];
                      if (v49 == *(void *)(v46 + 1080))
                      {
                        uint64_t v48 = (void *)*v48;
                        uint64_t v25 = v51;
                        if (!v48)
                        {
                          uint64_t v48 = malloc_type_malloc(120 * v49 + 16, 0xB644C221uLL);
                          *uint64_t v48 = 0;
                          v48[1] = 0;
                          **(void **)(v46 + 1072) = v48;
                        }
                        *(void *)(v46 + 1072) = v48;
                        uint64_t v49 = v48[1];
                      }
                      else
                      {
                        uint64_t v25 = v51;
                      }
                      uint64_t v26 = &v48[15 * v49];
                      v48[1] = v49 + 1;
                      v26[2] = &off_1EF55A458;
                      *(_OWORD *)(v26 + 9) = *(_OWORD *)v58;
                      *(_OWORD *)(v26 + 3) = v55;
                      *(_OWORD *)(v26 + 11) = *(_OWORD *)&v58[16];
                      *(_OWORD *)(v26 + 13) = *(_OWORD *)&v58[32];
                      *(_OWORD *)(v26 + 7) = v57;
                      *(_OWORD *)(v26 + 5) = v56;
                      *(_OWORD *)(v26 + 15) = *(_OWORD *)&v58[48];
                      v26[10] = v47;
                      *(_OWORD *)(v26 + 11) = 0uLL;
                      v26[13] = 0;
                      v26[14] = 1;
                      ggl::CommandBuffer::pushRenderItem(v25, (uint64_t)(v26 + 2));
                      v24 += 8;
                    }
                    while (v24 != v52);
                  }
                }
              }
            }
            return;
          }
        }
        else
        {
          if (v18 >= *(void *)&v3) {
            v18 %= *(void *)&v3;
          }
          if (v18 != v14) {
            return;
          }
        }
        unint64_t v16 = (void *)*v16;
      }
      while (v16);
    }
  }
}

void sub_1A222EB3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ggl::FragmentedPool<ggl::PolygonFill::MeshPipelineSetup>::pop(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)a1)
  {
    uint64_t v13 = *(void *)(a1 + 88);
    if (!v13)
    {
LABEL_52:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_53:
      abort();
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    os_signpost_id_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v14 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v14)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = ((uint64_t)v4 - v16) >> 3;
      unint64_t v8 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v18 = v14 - v16;
      if (v18 >> 2 > v8) {
        unint64_t v8 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v19 = 8 * v8;
        uint64_t v20 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        uint64_t v12 = (uint64_t *)(v20 + 8 * v17);
        unint64_t v8 = v20 + v19;
        if (v20) {
          *uint64_t v12 = v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(8 * v17);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v30) {
        goto LABEL_48;
      }
      unint64_t v31 = v21 - v30 - 8;
      if (v31 < 0x38)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v33 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v32 = (v31 >> 3) + 1;
        uint64_t v33 = v21 - 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v34 = v12 - 2;
        uint64_t v35 = (long long *)(v21 - 16);
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)uint64_t v34 = v37;
          v34 -= 4;
          v35 -= 2;
          v36 -= 4;
        }
        while (v36);
        v12 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v39 = *(void *)(v33 - 8);
        v33 -= 8;
        *--uint64_t v12 = v39;
      }
      while (v33 != v30);
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v2 - 8);
    *(void *)(a1 + 8) = v2 - 8;
    os_signpost_id_t v4 = *(uint64_t **)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 48);
    if ((unint64_t)v4 >= v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = ((uint64_t)v4 - v6) >> 3;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61) {
        goto LABEL_53;
      }
      uint64_t v9 = v5 - v6;
      if (v9 >> 2 > v8) {
        unint64_t v8 = v9 >> 2;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v8)
      {
        uint64_t v10 = 8 * v8;
        uint64_t v11 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), 8 * v8, 8);
        uint64_t v12 = (uint64_t *)(v11 + 8 * v7);
        unint64_t v8 = v11 + v10;
        if (v11) {
          *uint64_t v12 = v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t *)(8 * v7);
      }
      uint64_t v15 = v12 + 1;
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      if (v21 == v22) {
        goto LABEL_48;
      }
      unint64_t v23 = v21 - v22 - 8;
      if (v23 < 0x38)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else if ((unint64_t)(v21 - (void)v12) < 0x20)
      {
        uint64_t v25 = *(void *)(a1 + 40);
      }
      else
      {
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = v21 - 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v26 = v12 - 2;
        uint64_t v27 = (long long *)(v21 - 16);
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)uint64_t v26 = v29;
          v26 -= 4;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v38 = *(void *)(v25 - 8);
        v25 -= 8;
        *--uint64_t v12 = v38;
      }
      while (v25 != v22);
LABEL_47:
      uint64_t v21 = *(void *)(a1 + 32);
LABEL_48:
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v15;
      uint64_t v40 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v8;
      if (v21) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v21, v40 - v21);
      }
      goto LABEL_50;
    }
  }
  if (v4) {
    uint64_t *v4 = v3;
  }
  uint64_t v15 = v4 + 1;
LABEL_50:
  *(void *)(a1 + 40) = v15;
  uint64_t v43 = v3;
  uint64_t v41 = *(void *)(a1 + 120);
  if (!v41) {
    goto LABEL_52;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v41 + 48))(v41, &v43);
  return v3;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::operator()(uint64_t a1, unsigned char *a2)
{
  switch(*a2)
  {
    case 0:
      uint64_t v2 = *(uint64_t ***)(a1 + 16);
      **(unsigned char **)(a1 + 8) = 1;
      uint64_t v3 = *v2;
      os_signpost_id_t v4 = v2[1];
      if (*v2 != v4)
      {
        do
        {
          uint64_t v5 = *v3++;
          md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v5 + 384), 1);
        }
        while (v3 != v4);
      }
      break;
    case 1:
      uint64_t v6 = *(uint64_t ***)(a1 + 16);
      **(unsigned char **)(a1 + 8) = 1;
      uint64_t v7 = *v6;
      unint64_t v8 = v6[1];
      if (*v6 != v8)
      {
        do
        {
          uint64_t v9 = *v7++;
          md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v9 + 384), 1);
        }
        while (v7 != v8);
      }
      break;
    case 2:
      uint64_t v10 = *(uint64_t ***)(a1 + 16);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      if (*v10 != v12)
      {
        do
        {
          uint64_t v13 = *v11++;
          md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v13 + 384), 0);
        }
        while (v11 != v12);
      }
      break;
    case 3:
      unint64_t v14 = *(uint64_t ***)(a1 + 16);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      if (*v14 != v16)
      {
        do
        {
          uint64_t v17 = *v15++;
          md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v17 + 384), 1);
        }
        while (v15 != v16);
      }
      break;
    case 4:
      uint64_t v18 = *(uint64_t ***)(a1 + 16);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      if (*v18 != v20)
      {
        do
        {
          uint64_t v21 = *v19++;
          md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v21 + 384), 1);
        }
        while (v19 != v20);
      }
      break;
    default:
      return;
  }
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF573DB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF573DB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::~__func()
{
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PolygonLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573E00;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573E00;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>(a1 + 8);
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573E48;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573E48;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(void *a1)
{
  md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(void *a1)
{
  *a1 = &unk_1EF53A478;
  uint64_t v2 = (std::__shared_weak_count *)a1[59];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  a1[47] = &unk_1EF54A500;
  uint64_t v3 = (void *)a1[49];
  if (v3)
  {
    a1[50] = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = (md::PolygonRenderResources *)a1[46];
  a1[46] = 0;
  if (v4)
  {
    md::PolygonRenderResources::~PolygonRenderResources(v4);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::featureMarker(uint64_t a1@<X1>, double *a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = *(geo::codec::VectorTile **)(a1 + 640);
  *a3 = 0;
  a3[1] = 0;
  if (v3)
  {
    unint64_t v7 = geo::codec::VectorTile::polygonsCount(v3);
    if (v7)
    {
      for (unint64_t i = 0; i < v7 && !v13; ++i)
      {
        atomic_ullong v9 = geo::codec::VectorTile::polygons(*(geo::codec::VectorTile **)(a1 + 640)) + (i << 7);
        uint64_t v10 = *(unsigned int *)(v9 + 100);
        if (!v10)
        {
LABEL_8:
          uint64_t v13 = 0;
          continue;
        }
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v18 = 0;
          uint64_t v12 = (float *)geo::codec::multiSectionFeaturePoints((void *)v9, v11, &v18);
          if (VKPointInPolygon(v12, v18, *a2, a2[1])) {
            break;
          }
          if (v10 == ++v11) {
            goto LABEL_8;
          }
        }
        std::allocate_shared[abi:nn180100]<md::VectorFeatureMarker,std::allocator<md::VectorFeatureMarker>,GeoCodecsFeature *,void>(&v17, v9);
        long long v14 = v17;
        long long v17 = 0uLL;
        uint64_t v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
          if (*((void *)&v17 + 1))
          {
LABEL_12:
            if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        else
        {
          uint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
          if (*((void *)&v17 + 1)) {
            goto LABEL_12;
          }
        }
        uint64_t v13 = *a3;
      }
    }
  }
}

void sub_1A222F508(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::renderablesWillEnterView(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *a3;
  os_signpost_id_t v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      uint64_t v5 = *v3++;
      md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v5 + 384), 1);
    }
    while (v3 != v4);
  }
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(void *a1, uint64_t a2)
{
  for (unint64_t i = (uint64_t **)a1[102]; i; unint64_t i = (uint64_t **)*i)
  {
    uint64_t v5 = i[4];
    [v5 updateCachedStyles];
  }
  uint64_t v6 = (uint64_t *)(*(uint64_t (**)(void *))(*a1 + 48))(a1);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (v7 != *v6)
  {
    if (a2 == 1)
    {
      do
      {
        id v10 = *(id *)(v8 + 8);
        id v9 = v10;
        [v9 setNeedsTextureUpdate];

        v8 += 24;
      }
      while (v8 != v7);
    }
    else
    {
      do
      {

        v8 += 24;
      }
      while (v8 != v7);
    }
  }
}

void sub_1A222F680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1A222F6A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::prepare(unsigned char *a1)
{
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 104))(a1);
  char v3 = a1[49];
  a1[481] = v3 - a1[48] + 2;
  a1[480] = v3 + 1;
  return result;
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::reserveStencilRange(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  int v3 = *a3;
  if ((*(unsigned __int16 *)(result + 422) | (*(unsigned __int8 *)(result + 424) << 16)) >= 0x10000u
    && v3 == *(_WORD *)(result + 422)
    && a3[1] == HIBYTE(*(_WORD *)(result + 422)))
  {
    int v5 = *(unsigned __int8 *)(result + 481);
    uint64_t v6 = *(unsigned __int8 **)(a2 + 24);
    int v7 = *v6;
    unsigned int v8 = v6[1];
    if (v7 + v5 <= v8) {
      id v9 = 0;
    }
    else {
      id v9 = v6 + 4;
    }
    *(void *)(*(void *)(result + 368) + 904) = v9;
    if (v7 + v5 > v8)
    {
      v6[1] = v6[2];
      LOBYTE(v7) = 1;
    }
    unsigned __int8 *v6 = v7 + v5;
    *(unsigned char *)(*(void *)(result + 368) + 912) = v7 - *(unsigned char *)(result + 48);
    return result;
  }
  if (((*(unsigned __int16 *)(result + 425) | (*(unsigned __int8 *)(result + 427) << 16)) & 0xFF0000) != 0)
  {
    int v4 = a3[1];
    if (v3 == *(_WORD *)(result + 425) && v4 == HIBYTE(*(_WORD *)(result + 425)))
    {
      int v10 = *(unsigned __int8 *)(result + 481);
      unint64_t v11 = *(unsigned __int8 **)(a2 + 24);
      int v12 = *v11;
      unsigned int v13 = v11[1];
      if (v12 + v10 <= v13) {
        long long v14 = 0;
      }
      else {
        long long v14 = v11 + 4;
      }
      *(void *)(*(void *)(result + 368) + 928) = v14;
      if (v12 + v10 > v13)
      {
        v11[1] = v11[2];
        LOBYTE(v12) = 1;
      }
      *unint64_t v11 = v12 + v10;
      *(unsigned char *)(*(void *)(result + 368) + 936) = v12 - *(unsigned char *)(result + 48);
      return result;
    }
  }
  else
  {
    int v4 = a3[1];
  }
  if (v3 == *(unsigned __int8 *)(result + 416) && v4 == *(unsigned __int8 *)(result + 417))
  {
    uint64_t v15 = 0;
  }
  else if (v3 == *(unsigned __int8 *)(result + 418) && v4 == *(unsigned __int8 *)(result + 419))
  {
    uint64_t v15 = 1;
  }
  else
  {
    if (v3 != *(unsigned __int8 *)(result + 420) || v4 != *(unsigned __int8 *)(result + 421)) {
      return result;
    }
    uint64_t v15 = 2;
  }
  int v16 = *(unsigned __int8 *)(result + 481);
  long long v17 = *(unsigned __int8 **)(a2 + 24);
  int v18 = *v17;
  unsigned int v19 = v17[1];
  if (v18 + v16 <= v19) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v17 + 4;
  }
  *(void *)(*(void *)(result + 368) + 8 * v15 + 872) = v20;
  if (v18 + v16 > v19)
  {
    v17[1] = v17[2];
    LOWORD(v18) = 1;
  }
  *long long v17 = v18 + v16;
  *(_WORD *)(*(void *)(result + 368) + 2 * v15 + 896) = v18 - *(unsigned __int8 *)(result + 48);
  return result;
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(uint64_t a1, uint64_t **a2)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  uint64_t v143 = (void (**)(void **))&unk_1EF573D70;
  unint64_t v144 = a2;
  v141[0] = &unk_1EF573D28;
  v141[1] = a2;
  uint64_t v142 = v141;
  unint64_t v147 = v146;
  uint64_t v145 = (void **)&v143;
  v146[0] = &unk_1EF573D28;
  v146[1] = a2;
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>((uint64_t)&v144);
  if (v142 == v141)
  {
    (*(void (**)(void *))(v141[0] + 32))(v141);
  }
  else if (v142)
  {
    (*(void (**)(void *))(*v142 + 40))(v142);
  }
  if (v145 == (void **)&v143)
  {
    v143[4]((void **)&v143);
  }
  else if (v145)
  {
    (*((void (**)(void **))*v145 + 5))(v145);
  }
  uint64_t v4 = mach_absolute_time();
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v6 = *(void *)(a1 + 280);
  v133[0] = v5;
  v133[1] = v6;
  int v7 = a2[1];
  int8x8_t v8 = (int8x8_t)v7[1];
  if (!*(void *)&v8)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    goto LABEL_95;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = 0xE42D19AFCA302E68;
    if (*(void *)&v8 <= 0xE42D19AFCA302E68) {
      unint64_t v10 = 0xE42D19AFCA302E68 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v8 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v13 = *v7;
  long long v14 = *(void **)(v13 + 8 * v10);
  if (!v14) {
    goto LABEL_33;
  }
  uint64_t v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_33;
  }
  if (v9.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0xE42D19AFCA302E68)
      {
        if (v15[2] == 0xE42D19AFCA302E68) {
          goto LABEL_31;
        }
      }
      else if ((v17 & (*(void *)&v8 - 1)) != v10)
      {
        goto LABEL_33;
      }
      uint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_33;
      }
    }
  }
  while (1)
  {
    unint64_t v16 = v15[1];
    if (v16 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v16 >= *(void *)&v8) {
      v16 %= *(void *)&v8;
    }
    if (v16 != v10) {
      goto LABEL_33;
    }
LABEL_20:
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      goto LABEL_33;
    }
  }
  if (v15[2] != 0xE42D19AFCA302E68) {
    goto LABEL_20;
  }
LABEL_31:
  uint64_t v18 = v15[5];
  if (*(void *)(v18 + 8) == 0xE42D19AFCA302E68)
  {
    int v12 = *(uint64_t **)(v18 + 32);
    goto LABEL_34;
  }
LABEL_33:
  int v12 = 0;
LABEL_34:
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v19 = 0xFD5D5EC7C4E1E43ELL;
    if (*(void *)&v8 <= 0xFD5D5EC7C4E1E43ELL) {
      unint64_t v19 = 0xFD5D5EC7C4E1E43ELL % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v19 = (*(void *)&v8 - 1) & 0xFD5D5EC7C4E1E43ELL;
  }
  uint64_t v20 = *(void **)(v13 + 8 * v19);
  if (!v20) {
    goto LABEL_56;
  }
  uint64_t v21 = (void *)*v20;
  if (!v21) {
    goto LABEL_56;
  }
  if (v9.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 0xFD5D5EC7C4E1E43ELL)
      {
        if (v21[2] == 0xFD5D5EC7C4E1E43ELL) {
          goto LABEL_54;
        }
      }
      else if ((v23 & (*(void *)&v8 - 1)) != v19)
      {
        goto LABEL_56;
      }
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_56;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 0xFD5D5EC7C4E1E43ELL)
    {
      if (v22 >= *(void *)&v8) {
        v22 %= *(void *)&v8;
      }
      if (v22 != v19) {
        goto LABEL_56;
      }
      goto LABEL_43;
    }
    if (v21[2] != 0xFD5D5EC7C4E1E43ELL)
    {
LABEL_43:
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_56;
      }
      continue;
    }
    break;
  }
LABEL_54:
  uint64_t v24 = v21[5];
  if (*(void *)(v24 + 8) == 0xFD5D5EC7C4E1E43ELL)
  {
    uint64_t v25 = *(void *)(v24 + 32);
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v25 = 0;
LABEL_57:
  if (v9.u32[0] > 1uLL)
  {
    uint64_t v26 = 0x401D4CCE847AB1D1;
    if (*(void *)&v8 <= 0x401D4CCE847AB1D1uLL) {
      uint64_t v26 = 0x401D4CCE847AB1D1uLL % *(void *)&v8;
    }
  }
  else
  {
    uint64_t v26 = (*(void *)&v8 - 1) & 0x401D4CCE847AB1D1;
  }
  uint64_t v27 = *(void **)(v13 + 8 * v26);
  if (!v27) {
    goto LABEL_80;
  }
  uint64_t v28 = (void *)*v27;
  if (!v28) {
    goto LABEL_80;
  }
  if (v9.u32[0] < 2uLL)
  {
    uint64_t v29 = *(void *)&v8 - 1;
    while (1)
    {
      uint64_t v31 = v28[1];
      if (v31 == 0x401D4CCE847AB1D1)
      {
        if (v28[2] == 0x401D4CCE847AB1D1) {
          goto LABEL_77;
        }
      }
      else if ((v31 & v29) != v26)
      {
        goto LABEL_80;
      }
      uint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_80;
      }
    }
  }
  while (2)
  {
    unint64_t v30 = v28[1];
    if (v30 != 0x401D4CCE847AB1D1)
    {
      if (v30 >= *(void *)&v8) {
        v30 %= *(void *)&v8;
      }
      if (v30 != v26) {
        goto LABEL_80;
      }
      goto LABEL_66;
    }
    if (v28[2] != 0x401D4CCE847AB1D1)
    {
LABEL_66:
      uint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_80;
      }
      continue;
    }
    break;
  }
LABEL_77:
  uint64_t v32 = v28[5];
  if (*(void *)(v32 + 8) == 0x401D4CCE847AB1D1)
  {
    uint64_t v11 = *(void *)(v32 + 32);
    if (!v25) {
      goto LABEL_95;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v11 = 0;
  if (!v25) {
    goto LABEL_95;
  }
LABEL_81:
  if (*(unsigned char *)(v25 + 312))
  {
    for (; v5 != v6; v5 += 8)
      md::updatePolyonGroupsTransitNodeRouteAttributes(*(int8x8_t **)(*(void *)v5 + 384), *(void **)(v25 + 288), v25 + 232);
    uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 40) + 96) + 1120);
    unint64_t v34 = *(void *)(v33 + 16);
    if ((v34 & (v34 - 1)) != 0)
    {
      unint64_t v36 = 0x1BCA10CB9934FB1BLL;
      if (v34 <= 0x1BCA10CB9934FB1BLL) {
        unint64_t v36 = 0x1BCA10CB9934FB1BLL % v34;
      }
      uint64_t v35 = *(void **)(*(void *)(v33 + 8) + 8 * v36);
      do
      {
        do
          uint64_t v35 = (void *)*v35;
        while (v35[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v35[2] != 0x1BCA10CB9934FB1BLL);
    }
    else
    {
      uint64_t v35 = *(void **)(*(void *)(v33 + 8) + 8 * ((v34 - 1) & 0x1BCA10CB9934FB1BLL));
      do
      {
        do
          uint64_t v35 = (void *)*v35;
        while (v35[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v35[2] != 0x1BCA10CB9934FB1BLL);
    }
    *(unsigned char *)(v35[5] + 544) = 0;
  }
LABEL_95:
  char v132 = 0;
  long long v37 = (gss::Allocator *)operator new(0x20uLL);
  *(void *)long long v37 = &unk_1EF573CE0;
  *((void *)v37 + 1) = &v132;
  *((void *)v37 + 2) = v133;
  *((void *)v37 + 3) = a1;
  float v140 = v37;
  uint64_t v38 = (unsigned char *)v12[6];
  uint64_t v39 = (unsigned char *)v12[7];
  if (v38 == v39)
  {
LABEL_100:
    long long v37 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *))(*(void *)v37 + 40))(v37);
    goto LABEL_101;
  }
  do
  {
    LOBYTE(v126) = *v38;
    if (!v140) {
      goto LABEL_214;
    }
    (*(void (**)(gss::Allocator *, uint64_t *))(*(void *)v140 + 48))(v140, &v126);
    ++v38;
  }
  while (v38 != v39);
  long long v37 = v140;
  if (v140 == (gss::Allocator *)v139)
  {
    long long v37 = (gss::Allocator *)(*(uint64_t (**)(void *))(v139[0] + 32))(v139);
    if (v132) {
      goto LABEL_102;
    }
    goto LABEL_116;
  }
  if (v140) {
    goto LABEL_100;
  }
LABEL_101:
  if (!v132)
  {
LABEL_116:
    if (!*(void *)(a1 + 464)) {
      goto LABEL_102;
    }
    goto LABEL_119;
  }
LABEL_102:
  uint64_t v40 = *(std::__shared_weak_count **)(a1 + 472);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if (*v12)
    {
LABEL_105:
      uint64_t v41 = gss::Allocator::instance(v37);
      uint64_t v137 = v41;
      float v42 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v41 + 16))(v41, 16, 4);
      uint64_t v43 = v42;
      *(void *)&long long v135 = v42;
      unsigned int v136 = v42 + 2;
      if (v42) {
        *float v42 = 0x200000005;
      }
      v42[1] = 0x1B00000003;
      *((void *)&v135 + 1) = v42 + 2;
      gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)&v126, (uint64_t)&v135);
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v41 + 40))(v41, v43, 16);
      uint64_t v44 = *v12;
      *(void *)((char *)&v135 + 7) = 0;
      *(void *)&long long v135 = 0;
      HIBYTE(v135) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v134, v44, (gss::FeatureAttributeSet *)&v126, (gss::QueryOverrides *)&v135);
      long long v45 = v134;
      uint64_t v46 = *(std::__shared_weak_count **)(a1 + 472);
      long long v134 = 0uLL;
      *(_OWORD *)(a1 + 464) = v45;
      if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      uint64_t v47 = (std::__shared_weak_count *)*((void *)&v134 + 1);
      if (*((void *)&v134 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v134 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      if (v126)
      {
        uint64_t v127 = v126;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v129 + 40))(v129, v126, v128 - v126);
      }
    }
  }
  else if (*v12)
  {
    goto LABEL_105;
  }
LABEL_119:
  uint64_t v48 = *(void *)(a1 + 352);
  *(void *)(v48 + 112) = 0;
  *(void *)(v48 + 120) = 0;
  md::PolygonRenderResources::resetPools(*(md::PolygonRenderResources **)(a1 + 368));
  *(unsigned char *)(a1 + 384) = *(unsigned __int8 *)(md::LayoutContext::frameState((md::LayoutContext *)a2) + 128)
                       - 1 < 3;
  if (v11)
  {
    *(_DWORD *)(a1 + 444) = *(_DWORD *)v11;
    *(_WORD *)(a1 + 428) = *(_WORD *)(v11 + 4);
    if (*(unsigned char *)(v11 + 16))
    {
      uint64_t v49 = *(void *)(v11 + 8);
      int64x2_t v50 = (char *)operator new(8uLL);
      *(void *)int64x2_t v50 = v49;
      uint64_t v51 = *(unsigned char **)(a1 + 392);
      *(void *)(a1 + 400) = v51;
      std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>((char **)(a1 + 392), v51, v50, v50 + 8, 1);
      operator delete(v50);
    }
    else
    {
      *(void *)(a1 + 400) = *(void *)(a1 + 392);
    }
  }
  uint64_t v52 = *(void *)(a1 + 368);
  uint64_t v53 = *(void *)(v52 + 872);
  long long v135 = 0uLL;
  unsigned int v136 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v135, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
  uint64_t v54 = v135;
  int v55 = *(__int16 *)(v52 + 896);
  LOBYTE(v126) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v135, v55, 0, &v126);
  if (v53) {
    *(void *)(v54 + 32) = v53;
  }
  uint64_t v56 = *(void *)(a1 + 368);
  uint64_t v57 = *(void *)(v56 + 880);
  long long v135 = 0uLL;
  unsigned int v136 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v135, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
  uint64_t v58 = *((void *)&v135 + 1);
  int v59 = *(__int16 *)(v56 + 898);
  LOBYTE(v126) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, *((uint64_t *)&v135 + 1), v59, 0, &v126);
  if (v57) {
    *(void *)(v58 + 32) = v57;
  }
  uint64_t v60 = *(void *)(a1 + 368);
  uint64_t v61 = *(void *)(v60 + 888);
  long long v135 = 0uLL;
  unsigned int v136 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v135, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
  uint64_t v62 = (uint64_t)v136;
  int v63 = *(__int16 *)(v60 + 900);
  LOBYTE(v126) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, (uint64_t)v136, v63, 0, &v126);
  if (v61) {
    *(void *)(v62 + 32) = v61;
  }
  if (*(unsigned char *)(a1 + 424))
  {
    uint64_t v64 = *(void **)(*(void *)(*(void *)(a1 + 40) + 24) + 8);
    uint64_t v65 = v64[3];
    uint64_t v66 = v64[4];
    uint64_t v67 = v66 - v65;
    if (v66 == v65) {
      goto LABEL_139;
    }
    uint64_t v68 = 0;
    unint64_t v69 = v67 >> 3;
    while (1)
    {
      float32x2_t v70 = *(unsigned __int8 **)(v65 + 8 * v68);
      if (*v70 == *(unsigned __int8 *)(a1 + 422))
      {
        unint64_t v71 = *((void *)v70 + 1);
        uint64_t v72 = v64[15];
        if (v71 < (v64[16] - v72) >> 3) {
          break;
        }
      }
      if (++v68 >= v69) {
        goto LABEL_139;
      }
    }
    uint64_t v73 = *(void *)(v72 + 8 * v71);
    if (!v73
      || (uint64_t v74 = *(void *)(*(void *)(v73 + 24) + 8 * *(unsigned __int8 *)(a1 + 423))) == 0
      || !*(unsigned char *)(a1 + 428)
      || (int v75 = *(char *)(*(void *)(a1 + 368) + 912),
          LOBYTE(v126) = 0,
          md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v74, v75, 0, &v126), *(void *)(v74 + 32) = *(void *)(*(void *)(a1 + 368) + 920), *(unsigned char *)(a1 + 424)))
    {
LABEL_139:
      uint64_t v76 = *(void **)(*(void *)(*(void *)(a1 + 40) + 24) + 8);
      uint64_t v77 = v76[3];
      uint64_t v78 = v76[4] - v77;
      if (v78)
      {
        uint64_t v79 = 0;
        unint64_t v80 = v78 >> 3;
        while (1)
        {
          uint64_t v81 = *(unsigned __int8 **)(v77 + 8 * v79);
          if (*v81 == *(unsigned __int8 *)(a1 + 422))
          {
            unint64_t v82 = *((void *)v81 + 1);
            uint64_t v83 = v76[15];
            unint64_t v84 = (v76[16] - v83) >> 3;
            if (v82 < v84) {
              break;
            }
          }
          if (++v79 >= v80) {
            goto LABEL_154;
          }
        }
        uint64_t v85 = *(void *)(v83 + 8 * v82);
        if (v85)
        {
          uint64_t v86 = *(void *)(*(void *)(v85 + 24) + 8 * *(unsigned __int8 *)(a1 + 423));
          if (v86)
          {
            if (*(unsigned char *)(a1 + 427))
            {
              uint64_t v87 = 0;
              while (1)
              {
                unint64_t v88 = *(unsigned __int8 **)(v77 + 8 * v87);
                if (*v88 == *(unsigned __int8 *)(a1 + 425))
                {
                  unint64_t v89 = *((void *)v88 + 1);
                  if (v89 < v84) {
                    break;
                  }
                }
                if (++v87 >= v80) {
                  goto LABEL_154;
                }
              }
              uint64_t v90 = *(void *)(v83 + 8 * v89);
              if (v90 && *(void *)(*(void *)(v90 + 24) + 8 * *(unsigned __int8 *)(a1 + 426)))
              {
                int v91 = *(char *)(*(void *)(a1 + 368) + 936);
                LOBYTE(v126) = 0;
                md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v86, v91, 0, &v126);
                *(void *)(v86 + 32) = *(void *)(*(void *)(a1 + 368) + 944);
              }
            }
          }
        }
      }
    }
  }
LABEL_154:
  *(void *)(*(void *)(a1 + 368) + 264) = 0;
  *(unsigned char *)(a1 + 440) = *(unsigned char *)(a1 + 360);
  *(unsigned char *)(a1 + 386) = *(unsigned char *)(a1 + 480);
  if (*(unsigned char *)(a1 + 361))
  {
    float v92 = a2[1];
    int8x8_t v93 = (int8x8_t)v92[1];
    if (v93)
    {
      uint8x8_t v94 = (uint8x8_t)vcnt_s8(v93);
      v94.i16[0] = vaddlv_u8(v94);
      if (v94.u32[0] > 1uLL)
      {
        uint64_t v95 = 0x1AF456233693CD46;
        if (*(void *)&v93 <= 0x1AF456233693CD46uLL) {
          uint64_t v95 = 0x1AF456233693CD46uLL % *(void *)&v93;
        }
      }
      else
      {
        uint64_t v95 = (*(void *)&v93 - 1) & 0x1AF456233693CD46;
      }
      float v96 = *(void **)(*v92 + 8 * v95);
      if (v96)
      {
        uint64_t v97 = (void *)*v96;
        if (v97)
        {
          if (v94.u32[0] < 2uLL)
          {
            uint64_t v98 = *(void *)&v93 - 1;
            while (1)
            {
              uint64_t v100 = v97[1];
              if (v100 == 0x1AF456233693CD46)
              {
                if (v97[2] == 0x1AF456233693CD46) {
                  goto LABEL_176;
                }
              }
              else if ((v100 & v98) != v95)
              {
                goto LABEL_192;
              }
              uint64_t v97 = (void *)*v97;
              if (!v97) {
                goto LABEL_192;
              }
            }
          }
          do
          {
            unint64_t v99 = v97[1];
            if (v99 == 0x1AF456233693CD46)
            {
              if (v97[2] == 0x1AF456233693CD46)
              {
LABEL_176:
                uint64_t v101 = v97[5];
                if (*(void *)(v101 + 8) == 0x1AF456233693CD46)
                {
                  uint64_t v102 = *(void *)(v101 + 32);
                  if (v102)
                  {
                    uint64_t v103 = *(void *)(a1 + 464);
                    float v104 = *(std::__shared_weak_count **)(a1 + 472);
                    *(void *)&long long v135 = v103;
                    *((void *)&v135 + 1) = v104;
                    if (v104) {
                      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    gss::QueryableLocker<gss::PropertyID>::QueryableLocker(&v126, v103, (uint64_t)v104);
                    if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                    if ((_BYTE)v130)
                    {
                      if ((int)*(float *)(v102 + 3072) >= 0x17) {
                        unsigned int v105 = 23;
                      }
                      else {
                        unsigned int v105 = (int)*(float *)(v102 + 3072);
                      }
                      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v135, *(void *)(v126 + 24), 0x5Cu, v105, 2u, 0);
                      float32x4_t v125 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v135)), (float32x4_t)vdupq_n_s32(0x37800080u));
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v126);
                      uint64_t v106 = *(void *)(*(void *)(a1 + 368) + 968);
                      uint64_t v138 = 0;
                      long long v135 = 0uLL;
                      uint64_t v107 = *(void *)(v106 + 8);
                      uint64_t v126 = 0;
                      uint64_t v127 = v106;
                      uint64_t v128 = 0;
                      uint64_t v129 = v107;
                      __int16 v130 = 1;
                      if (v107) {
                        uint64_t v108 = *(void *)(v106 + 72);
                      }
                      else {
                        uint64_t v108 = 0;
                      }
                      uint64_t v131 = v108;
                      ggl::BufferMemory::operator=((uint64_t *)&v135, (uint64_t)&v126);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v126);
                      uint64_t v109 = v138;
                      v138[4] = v125;
                      *(float32x4_t *)((char *)&v109[5] + 8) = (float32x4_t)xmmword_1A28FCDA0;
                      v109[5].i32[0] = 1065353216;
                      v109->i32[0] = 1065353216;
                      *(uint64_t *)((char *)&v109->i64[1] + 4) = 0;
                      *(uint64_t *)((char *)v109->i64 + 4) = 0;
                      v109[1].i32[1] = 1065353216;
                      v109[1].i64[1] = 0;
                      v109[2].i64[0] = 0;
                      v109[2].i32[2] = 1065353216;
                      *(uint64_t *)((char *)v109[3].i64 + 4) = 0;
                      *(uint64_t *)((char *)&v109[2].i64[1] + 4) = 0;
                      v109[3].i32[3] = 1065353216;
                      uint64_t v126 = 0;
                      uint64_t v127 = 0;
                      uint64_t v128 = 0;
                      md::PolygonLayoutCharacteristics::commandBufferInfo(&v126, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
                      md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(a1, a2[1], v126);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v135);
                    }
                    else
                    {
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v126);
                    }
                  }
                }
                break;
              }
            }
            else
            {
              if (v99 >= *(void *)&v93) {
                v99 %= *(void *)&v93;
              }
              if (v99 != v95) {
                break;
              }
            }
            uint64_t v97 = (void *)*v97;
          }
          while (v97);
        }
      }
    }
  }
LABEL_192:
  md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>((uint64_t **)(a1 + 272), a2[1], a1 + 376);
  md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(a1 + 272, (uint64_t)a2, *(void *)(a1 + 40), *(void *)(a1 + 368), (unsigned __int8 *)(a1 + 376), *(unsigned char *)(a1 + 448));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t **))(*(void *)a1 + 32))(&v126, a1, a2);
  uint64_t v110 = (unsigned __int8 *)v126;
  float v111 = (unsigned __int8 *)v127;
  if (v126 == v127)
  {
    if (v126) {
      goto LABEL_194;
    }
  }
  else
  {
    do
    {
      long long v114 = *(void **)(*(void *)(*(void *)(a1 + 40) + 24) + 8);
      uint64_t v115 = v114[3];
      uint64_t v116 = v114[4];
      uint64_t v117 = v116 - v115;
      if (v116 != v115)
      {
        uint64_t v118 = 0;
        unint64_t v119 = v117 >> 3;
        while (1)
        {
          float v120 = *(unsigned __int8 **)(v115 + 8 * v118);
          if (*v120 == *v110)
          {
            unint64_t v121 = *((void *)v120 + 1);
            uint64_t v122 = v114[15];
            if (v121 < (v114[16] - v122) >> 3) {
              break;
            }
          }
          if (++v118 >= v119) {
            goto LABEL_201;
          }
        }
        uint64_t v123 = *(void *)(v122 + 8 * v121);
        if (v123)
        {
          uint64_t v124 = *(void *)(*(void *)(v123 + 24) + 8 * v110[1]);
          if (v124) {
            ggl::CommandBuffer::stableSortRenderItems(*(__n128 **)(v124 + 72), *(char **)(v124 + 80));
          }
        }
      }
LABEL_201:
      v110 += 2;
    }
    while (v110 != v111);
    uint64_t v110 = (unsigned __int8 *)v126;
    if (v126)
    {
LABEL_194:
      uint64_t v127 = (uint64_t)v110;
      operator delete(v110);
    }
  }
  unint64_t v112 = mach_absolute_time() - v4;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
  }
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120), v112);
  if (!v147)
  {
LABEL_214:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v147 + 48))(v147);
  uint64_t result = (uint64_t)v147;
  if (v147 == v146) {
    return (*(uint64_t (**)(void *))(v146[0] + 32))(v146);
  }
  if (v147) {
    return (*(uint64_t (**)(void))(*v147 + 40))();
  }
  return result;
}

void sub_1A2230964(_Unwind_Exception *a1)
{
  unint64_t v4 = mach_absolute_time() - v1;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
  }
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120), v4);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 120));
  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(uint64_t a1, void *a2, uint64_t a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  if (!*(void *)&v3) {
    return;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v3 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v7 = 0x3070CB6B3C7F21D3uLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v3 - 1) & 0x3070CB6B3C7F21D3;
  }
  int8x8_t v8 = *(void **)(*a2 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint8x8_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x3070CB6B3C7F21D3)
      {
        if (v9[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_22;
        }
      }
      else if ((v11 & (*(void *)&v3 - 1)) != v7)
      {
        goto LABEL_24;
      }
      uint8x8_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v10 >= *(void *)&v3) {
      v10 %= *(void *)&v3;
    }
    if (v10 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint8x8_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v14 = 0xA60DDA5A69582425;
    if (*(void *)&v3 <= 0xA60DDA5A69582425) {
      unint64_t v14 = 0xA60DDA5A69582425 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v14 = (*(void *)&v3 - 1) & 0xA60DDA5A69582425;
  }
  uint64_t v15 = *(void **)(*a2 + 8 * v14);
  if (v15)
  {
    unint64_t v16 = (void *)*v15;
    if (v16)
    {
      if (v6.u32[0] < 2uLL)
      {
        uint64_t v17 = *(void *)&v3 - 1;
        while (1)
        {
          uint64_t v19 = v16[1];
          if (v19 == 0xA60DDA5A69582425)
          {
            if (v16[2] == 0xA60DDA5A69582425) {
              goto LABEL_45;
            }
          }
          else if ((v19 & v17) != v14)
          {
            return;
          }
          unint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
      }
      do
      {
        unint64_t v18 = v16[1];
        if (v18 == 0xA60DDA5A69582425)
        {
          if (v16[2] == 0xA60DDA5A69582425)
          {
LABEL_45:
            uint64_t v20 = v16[5];
            if (*(void *)(v20 + 8) == 0xA60DDA5A69582425)
            {
              if (v13)
              {
                uint64_t v21 = *(id **)(v20 + 32);
                if (v21)
                {
                  int v54 = *(__int16 *)(*(void *)(a1 + 368) + 896);
                  id v22 = *v21;
                  uint64_t v23 = v22;
                  if (v22)
                  {
                    [v22 textureManager];
                    uint64_t v53 = v59;
                    if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)())v60->__on_zero_shared)();
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                  else
                  {
                    uint64_t v53 = 0;
                  }

                  uint64_t v24 = *(void *)(a1 + 272);
                  uint64_t v52 = *(void *)(a1 + 280);
                  if (v24 != v52)
                  {
                    uint64_t v51 = a3;
                    int64x2_t v50 = vdupq_n_s64(1uLL);
                    do
                    {
                      uint64_t v27 = v13;
                      uint64_t v28 = *(void **)v24;
                      int v29 = *(unsigned __int8 *)(*(void *)(*(void *)v24 + 384) + 169);
                      uint64_t v30 = *(void *)(a1 + 368);
                      uint64_t v31 = *(void *)(v30 + 16 * *(unsigned __int8 *)(a1 + 360) + 280);
                      uint64_t v32 = ggl::FragmentedPool<ggl::PolygonFill::MeshPipelineSetup>::pop(*(void *)(v30 + 232));
                      uint64_t v33 = *(void **)(v32 + 64);
                      v33[1] = 0;
                      uint64_t v34 = v28[27];
                      *uint64_t v33 = v34;
                      uint64_t v35 = *(void **)(v32 + 160);
                      uint64_t v36 = v28[28];
                      if (v36) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
                      }
                      long long v37 = (std::__shared_weak_count *)v35[1];
                      *uint64_t v35 = v34;
                      v35[1] = v36;
                      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                        std::__shared_weak_count::__release_weak(v37);
                      }
                      uint64_t v38 = *(void *)(v32 + 64);
                      *(void *)(v38 + 24) = 0;
                      uint64_t v39 = v28[29];
                      *(void *)(v38 + 16) = v39;
                      uint64_t v40 = *(void *)(v32 + 160);
                      uint64_t v41 = v28[30];
                      if (v41) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
                      }
                      float v42 = *(std::__shared_weak_count **)(v40 + 24);
                      *(void *)(v40 + 16) = v39;
                      *(void *)(v40 + 24) = v41;
                      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                        std::__shared_weak_count::__release_weak(v42);
                      }
                      **(void **)(v32 + 96) = *v53;
                      *((void *)&v55 + 1) = "";
                      *(void *)&long long v56 = v31;
                      memset(&v58[8], 0, 32);
                      *(int64x2_t *)&v58[40] = v50;
                      *(void *)&v58[56] = 0;
                      *(_DWORD *)uint64_t v58 = 1065353216;
                      LODWORD(v57) = v29 + v54;
                      *((void *)&v56 + 1) = v32;
                      uint64_t v43 = v28[48];
                      if (v43) {
                        uint64_t v44 = v43 + 168;
                      }
                      else {
                        uint64_t v44 = 0;
                      }
                      *((void *)&v57 + 1) = (16 * (int)v44) & 0xFF00 | ((unint64_t)*(unsigned __int8 *)(v44 + 1) << 19) | (*(void *)(a1 + 464) >> 4) | 0x10000;
                      uint64_t v13 = v27;
                      uint64_t v45 = 128;
                      if (*(unsigned __int8 *)(v27 + 320) - 1 < 3) {
                        uint64_t v45 = 144;
                      }
                      uint64_t v46 = *(void *)(a1 + 368);
                      uint64_t v47 = *(void *)(v27 + v45);
                      uint64_t v48 = *(void **)(v46 + 1072);
                      uint64_t v49 = v48[1];
                      if (v49 == *(void *)(v46 + 1080))
                      {
                        uint64_t v48 = (void *)*v48;
                        uint64_t v25 = v51;
                        if (!v48)
                        {
                          uint64_t v48 = malloc_type_malloc(120 * v49 + 16, 0xB644C221uLL);
                          *uint64_t v48 = 0;
                          v48[1] = 0;
                          **(void **)(v46 + 1072) = v48;
                        }
                        *(void *)(v46 + 1072) = v48;
                        uint64_t v49 = v48[1];
                      }
                      else
                      {
                        uint64_t v25 = v51;
                      }
                      uint64_t v26 = &v48[15 * v49];
                      v48[1] = v49 + 1;
                      v26[2] = &off_1EF55A458;
                      *(_OWORD *)(v26 + 9) = *(_OWORD *)v58;
                      *(_OWORD *)(v26 + 3) = v55;
                      *(_OWORD *)(v26 + 11) = *(_OWORD *)&v58[16];
                      *(_OWORD *)(v26 + 13) = *(_OWORD *)&v58[32];
                      *(_OWORD *)(v26 + 7) = v57;
                      *(_OWORD *)(v26 + 5) = v56;
                      *(_OWORD *)(v26 + 15) = *(_OWORD *)&v58[48];
                      v26[10] = v47;
                      *(_OWORD *)(v26 + 11) = 0uLL;
                      v26[13] = 0;
                      v26[14] = 1;
                      ggl::CommandBuffer::pushRenderItem(v25, (uint64_t)(v26 + 2));
                      v24 += 8;
                    }
                    while (v24 != v52);
                  }
                }
              }
            }
            return;
          }
        }
        else
        {
          if (v18 >= *(void *)&v3) {
            v18 %= *(void *)&v3;
          }
          if (v18 != v14) {
            return;
          }
        }
        unint64_t v16 = (void *)*v16;
      }
      while (v16);
    }
  }
}

void sub_1A2231198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::operator()(uint64_t a1, unsigned char *a2)
{
  switch(*a2)
  {
    case 0:
      uint64_t v2 = *(uint64_t ***)(a1 + 16);
      **(unsigned char **)(a1 + 8) = 1;
      int8x8_t v3 = *v2;
      unint64_t v4 = v2[1];
      if (*v2 != v4)
      {
        do
        {
          uint64_t v5 = *v3++;
          md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v5 + 384), 1);
        }
        while (v3 != v4);
      }
      break;
    case 1:
      uint8x8_t v6 = *(uint64_t ***)(a1 + 16);
      **(unsigned char **)(a1 + 8) = 1;
      uint64_t v7 = *v6;
      int8x8_t v8 = v6[1];
      if (*v6 != v8)
      {
        do
        {
          uint64_t v9 = *v7++;
          md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v9 + 384), 1);
        }
        while (v7 != v8);
      }
      break;
    case 2:
      unint64_t v10 = *(uint64_t ***)(a1 + 16);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      if (*v10 != v12)
      {
        do
        {
          uint64_t v13 = *v11++;
          md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v13 + 384), 0);
        }
        while (v11 != v12);
      }
      break;
    case 3:
      unint64_t v14 = *(uint64_t ***)(a1 + 16);
      uint64_t v15 = *v14;
      unint64_t v16 = v14[1];
      if (*v14 != v16)
      {
        do
        {
          uint64_t v17 = *v15++;
          md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v17 + 384), 1);
        }
        while (v15 != v16);
      }
      break;
    case 4:
      unint64_t v18 = *(uint64_t ***)(a1 + 16);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      if (*v18 != v20)
      {
        do
        {
          uint64_t v21 = *v19++;
          md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v21 + 384), 1);
        }
        while (v19 != v20);
      }
      break;
    default:
      return;
  }
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF573CE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF573CE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::~__func()
{
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  int8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PolygonLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573D28;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573D28;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>(a1 + 8);
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573D70;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573D70;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(void *a1)
{
  md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(void *a1)
{
  *a1 = &unk_1EF53A390;
  uint64_t v2 = (std::__shared_weak_count *)a1[59];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  a1[47] = &unk_1EF54A500;
  uint64_t v3 = (void *)a1[49];
  if (v3)
  {
    a1[50] = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = (md::PolygonRenderResources *)a1[46];
  a1[46] = 0;
  if (v4)
  {
    md::PolygonRenderResources::~PolygonRenderResources(v4);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::featureMarker(uint64_t a1@<X1>, double *a2@<X2>, void *a3@<X8>)
{
  uint64_t v3 = *(geo::codec::VectorTile **)(a1 + 640);
  *a3 = 0;
  a3[1] = 0;
  if (v3)
  {
    unint64_t v7 = geo::codec::VectorTile::polygonsCount(v3);
    if (v7)
    {
      for (unint64_t i = 0; i < v7 && !v13; ++i)
      {
        atomic_ullong v9 = geo::codec::VectorTile::polygons(*(geo::codec::VectorTile **)(a1 + 640)) + (i << 7);
        uint64_t v10 = *(unsigned int *)(v9 + 100);
        if (!v10)
        {
LABEL_8:
          uint64_t v13 = 0;
          continue;
        }
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v18 = 0;
          uint64_t v12 = (float *)geo::codec::multiSectionFeaturePoints((void *)v9, v11, &v18);
          if (VKPointInPolygon(v12, v18, *a2, a2[1])) {
            break;
          }
          if (v10 == ++v11) {
            goto LABEL_8;
          }
        }
        std::allocate_shared[abi:nn180100]<md::VectorFeatureMarker,std::allocator<md::VectorFeatureMarker>,GeoCodecsFeature *,void>(&v17, v9);
        long long v14 = v17;
        long long v17 = 0uLL;
        uint64_t v15 = (std::__shared_weak_count *)a3[1];
        *(_OWORD *)a3 = v14;
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          unint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
          if (*((void *)&v17 + 1))
          {
LABEL_12:
            if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        else
        {
          unint64_t v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
          if (*((void *)&v17 + 1)) {
            goto LABEL_12;
          }
        }
        uint64_t v13 = *a3;
      }
    }
  }
}

void sub_1A2231810(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::renderablesWillEnterView(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *a3;
  os_signpost_id_t v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      uint64_t v5 = *v3++;
      md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v5 + 384), 1);
    }
    while (v3 != v4);
  }
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(void *a1, uint64_t a2)
{
  for (unint64_t i = (uint64_t **)a1[102]; i; unint64_t i = (uint64_t **)*i)
  {
    uint64_t v5 = i[4];
    [v5 updateCachedStyles];
  }
  uint8x8_t v6 = (uint64_t *)(*(uint64_t (**)(void *))(*a1 + 48))(a1);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (v7 != *v6)
  {
    if (a2 == 1)
    {
      do
      {
        id v10 = *(id *)(v8 + 8);
        id v9 = v10;
        [v9 setNeedsTextureUpdate];

        v8 += 24;
      }
      while (v8 != v7);
    }
    else
    {
      do
      {

        v8 += 24;
      }
      while (v8 != v7);
    }
  }
}

void sub_1A2231988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1A22319A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::prepare(unsigned char *a1)
{
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 104))(a1);
  char v3 = a1[49];
  a1[481] = v3 - a1[48] + 2;
  a1[480] = v3 + 1;
  return result;
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::reserveStencilRange(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  int v3 = *a3;
  if ((*(unsigned __int16 *)(result + 422) | (*(unsigned __int8 *)(result + 424) << 16)) >= 0x10000u
    && v3 == *(_WORD *)(result + 422)
    && a3[1] == HIBYTE(*(_WORD *)(result + 422)))
  {
    int v5 = *(unsigned __int8 *)(result + 481);
    uint8x8_t v6 = *(unsigned __int8 **)(a2 + 24);
    int v7 = *v6;
    unsigned int v8 = v6[1];
    if (v7 + v5 <= v8) {
      id v9 = 0;
    }
    else {
      id v9 = v6 + 4;
    }
    *(void *)(*(void *)(result + 368) + 904) = v9;
    if (v7 + v5 > v8)
    {
      v6[1] = v6[2];
      LOBYTE(v7) = 1;
    }
    unsigned __int8 *v6 = v7 + v5;
    *(unsigned char *)(*(void *)(result + 368) + 912) = v7 - *(unsigned char *)(result + 48);
    return result;
  }
  if (((*(unsigned __int16 *)(result + 425) | (*(unsigned __int8 *)(result + 427) << 16)) & 0xFF0000) != 0)
  {
    int v4 = a3[1];
    if (v3 == *(_WORD *)(result + 425) && v4 == HIBYTE(*(_WORD *)(result + 425)))
    {
      int v10 = *(unsigned __int8 *)(result + 481);
      unint64_t v11 = *(unsigned __int8 **)(a2 + 24);
      int v12 = *v11;
      unsigned int v13 = v11[1];
      if (v12 + v10 <= v13) {
        long long v14 = 0;
      }
      else {
        long long v14 = v11 + 4;
      }
      *(void *)(*(void *)(result + 368) + 928) = v14;
      if (v12 + v10 > v13)
      {
        v11[1] = v11[2];
        LOBYTE(v12) = 1;
      }
      *unint64_t v11 = v12 + v10;
      *(unsigned char *)(*(void *)(result + 368) + 936) = v12 - *(unsigned char *)(result + 48);
      return result;
    }
  }
  else
  {
    int v4 = a3[1];
  }
  if (v3 == *(unsigned __int8 *)(result + 416) && v4 == *(unsigned __int8 *)(result + 417))
  {
    uint64_t v15 = 0;
  }
  else if (v3 == *(unsigned __int8 *)(result + 418) && v4 == *(unsigned __int8 *)(result + 419))
  {
    uint64_t v15 = 1;
  }
  else
  {
    if (v3 != *(unsigned __int8 *)(result + 420) || v4 != *(unsigned __int8 *)(result + 421)) {
      return result;
    }
    uint64_t v15 = 2;
  }
  int v16 = *(unsigned __int8 *)(result + 481);
  long long v17 = *(unsigned __int8 **)(a2 + 24);
  int v18 = *v17;
  unsigned int v19 = v17[1];
  if (v18 + v16 <= v19) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v17 + 4;
  }
  *(void *)(*(void *)(result + 368) + 8 * v15 + 872) = v20;
  if (v18 + v16 > v19)
  {
    v17[1] = v17[2];
    LOWORD(v18) = 1;
  }
  *long long v17 = v18 + v16;
  *(_WORD *)(*(void *)(result + 368) + 2 * v15 + 896) = v18 - *(unsigned __int8 *)(result + 48);
  return result;
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(uint64_t a1, uint64_t **a2)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  uint64_t v143 = (void (**)(void **))&unk_1EF573C98;
  unint64_t v144 = a2;
  v141[0] = &unk_1EF573C50;
  v141[1] = a2;
  uint64_t v142 = v141;
  unint64_t v147 = v146;
  uint64_t v145 = (void **)&v143;
  v146[0] = &unk_1EF573C50;
  v146[1] = a2;
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>((uint64_t)&v144);
  if (v142 == v141)
  {
    (*(void (**)(void *))(v141[0] + 32))(v141);
  }
  else if (v142)
  {
    (*(void (**)(void *))(*v142 + 40))(v142);
  }
  if (v145 == (void **)&v143)
  {
    v143[4]((void **)&v143);
  }
  else if (v145)
  {
    (*((void (**)(void **))*v145 + 5))(v145);
  }
  uint64_t v4 = mach_absolute_time();
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v6 = *(void *)(a1 + 280);
  v133[0] = v5;
  v133[1] = v6;
  int v7 = a2[1];
  int8x8_t v8 = (int8x8_t)v7[1];
  if (!*(void *)&v8)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    goto LABEL_95;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = 0xE42D19AFCA302E68;
    if (*(void *)&v8 <= 0xE42D19AFCA302E68) {
      unint64_t v10 = 0xE42D19AFCA302E68 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v8 - 1) & 0xE42D19AFCA302E68;
  }
  uint64_t v13 = *v7;
  long long v14 = *(void **)(v13 + 8 * v10);
  if (!v14) {
    goto LABEL_33;
  }
  uint64_t v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_33;
  }
  if (v9.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0xE42D19AFCA302E68)
      {
        if (v15[2] == 0xE42D19AFCA302E68) {
          goto LABEL_31;
        }
      }
      else if ((v17 & (*(void *)&v8 - 1)) != v10)
      {
        goto LABEL_33;
      }
      uint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_33;
      }
    }
  }
  while (1)
  {
    unint64_t v16 = v15[1];
    if (v16 == 0xE42D19AFCA302E68) {
      break;
    }
    if (v16 >= *(void *)&v8) {
      v16 %= *(void *)&v8;
    }
    if (v16 != v10) {
      goto LABEL_33;
    }
LABEL_20:
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      goto LABEL_33;
    }
  }
  if (v15[2] != 0xE42D19AFCA302E68) {
    goto LABEL_20;
  }
LABEL_31:
  uint64_t v18 = v15[5];
  if (*(void *)(v18 + 8) == 0xE42D19AFCA302E68)
  {
    int v12 = *(uint64_t **)(v18 + 32);
    goto LABEL_34;
  }
LABEL_33:
  int v12 = 0;
LABEL_34:
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v19 = 0xFD5D5EC7C4E1E43ELL;
    if (*(void *)&v8 <= 0xFD5D5EC7C4E1E43ELL) {
      unint64_t v19 = 0xFD5D5EC7C4E1E43ELL % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v19 = (*(void *)&v8 - 1) & 0xFD5D5EC7C4E1E43ELL;
  }
  uint64_t v20 = *(void **)(v13 + 8 * v19);
  if (!v20) {
    goto LABEL_56;
  }
  uint64_t v21 = (void *)*v20;
  if (!v21) {
    goto LABEL_56;
  }
  if (v9.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 0xFD5D5EC7C4E1E43ELL)
      {
        if (v21[2] == 0xFD5D5EC7C4E1E43ELL) {
          goto LABEL_54;
        }
      }
      else if ((v23 & (*(void *)&v8 - 1)) != v19)
      {
        goto LABEL_56;
      }
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_56;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 0xFD5D5EC7C4E1E43ELL)
    {
      if (v22 >= *(void *)&v8) {
        v22 %= *(void *)&v8;
      }
      if (v22 != v19) {
        goto LABEL_56;
      }
      goto LABEL_43;
    }
    if (v21[2] != 0xFD5D5EC7C4E1E43ELL)
    {
LABEL_43:
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_56;
      }
      continue;
    }
    break;
  }
LABEL_54:
  uint64_t v24 = v21[5];
  if (*(void *)(v24 + 8) == 0xFD5D5EC7C4E1E43ELL)
  {
    uint64_t v25 = *(void *)(v24 + 32);
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v25 = 0;
LABEL_57:
  if (v9.u32[0] > 1uLL)
  {
    uint64_t v26 = 0x401D4CCE847AB1D1;
    if (*(void *)&v8 <= 0x401D4CCE847AB1D1uLL) {
      uint64_t v26 = 0x401D4CCE847AB1D1uLL % *(void *)&v8;
    }
  }
  else
  {
    uint64_t v26 = (*(void *)&v8 - 1) & 0x401D4CCE847AB1D1;
  }
  uint64_t v27 = *(void **)(v13 + 8 * v26);
  if (!v27) {
    goto LABEL_80;
  }
  uint64_t v28 = (void *)*v27;
  if (!v28) {
    goto LABEL_80;
  }
  if (v9.u32[0] < 2uLL)
  {
    uint64_t v29 = *(void *)&v8 - 1;
    while (1)
    {
      uint64_t v31 = v28[1];
      if (v31 == 0x401D4CCE847AB1D1)
      {
        if (v28[2] == 0x401D4CCE847AB1D1) {
          goto LABEL_77;
        }
      }
      else if ((v31 & v29) != v26)
      {
        goto LABEL_80;
      }
      uint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_80;
      }
    }
  }
  while (2)
  {
    unint64_t v30 = v28[1];
    if (v30 != 0x401D4CCE847AB1D1)
    {
      if (v30 >= *(void *)&v8) {
        v30 %= *(void *)&v8;
      }
      if (v30 != v26) {
        goto LABEL_80;
      }
      goto LABEL_66;
    }
    if (v28[2] != 0x401D4CCE847AB1D1)
    {
LABEL_66:
      uint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_80;
      }
      continue;
    }
    break;
  }
LABEL_77:
  uint64_t v32 = v28[5];
  if (*(void *)(v32 + 8) == 0x401D4CCE847AB1D1)
  {
    uint64_t v11 = *(void *)(v32 + 32);
    if (!v25) {
      goto LABEL_95;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v11 = 0;
  if (!v25) {
    goto LABEL_95;
  }
LABEL_81:
  if (*(unsigned char *)(v25 + 312))
  {
    for (; v5 != v6; v5 += 8)
      md::updatePolyonGroupsTransitNodeRouteAttributes(*(int8x8_t **)(*(void *)v5 + 384), *(void **)(v25 + 288), v25 + 232);
    uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 40) + 96) + 1120);
    unint64_t v34 = *(void *)(v33 + 16);
    if ((v34 & (v34 - 1)) != 0)
    {
      unint64_t v36 = 0x1BCA10CB9934FB1BLL;
      if (v34 <= 0x1BCA10CB9934FB1BLL) {
        unint64_t v36 = 0x1BCA10CB9934FB1BLL % v34;
      }
      uint64_t v35 = *(void **)(*(void *)(v33 + 8) + 8 * v36);
      do
      {
        do
          uint64_t v35 = (void *)*v35;
        while (v35[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v35[2] != 0x1BCA10CB9934FB1BLL);
    }
    else
    {
      uint64_t v35 = *(void **)(*(void *)(v33 + 8) + 8 * ((v34 - 1) & 0x1BCA10CB9934FB1BLL));
      do
      {
        do
          uint64_t v35 = (void *)*v35;
        while (v35[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v35[2] != 0x1BCA10CB9934FB1BLL);
    }
    *(unsigned char *)(v35[5] + 544) = 0;
  }
LABEL_95:
  char v132 = 0;
  long long v37 = (gss::Allocator *)operator new(0x20uLL);
  *(void *)long long v37 = &unk_1EF573C08;
  *((void *)v37 + 1) = &v132;
  *((void *)v37 + 2) = v133;
  *((void *)v37 + 3) = a1;
  float v140 = v37;
  uint64_t v38 = (unsigned char *)v12[6];
  uint64_t v39 = (unsigned char *)v12[7];
  if (v38 == v39)
  {
LABEL_100:
    long long v37 = (gss::Allocator *)(*(uint64_t (**)(gss::Allocator *))(*(void *)v37 + 40))(v37);
    goto LABEL_101;
  }
  do
  {
    LOBYTE(v126) = *v38;
    if (!v140) {
      goto LABEL_214;
    }
    (*(void (**)(gss::Allocator *, uint64_t *))(*(void *)v140 + 48))(v140, &v126);
    ++v38;
  }
  while (v38 != v39);
  long long v37 = v140;
  if (v140 == (gss::Allocator *)v139)
  {
    long long v37 = (gss::Allocator *)(*(uint64_t (**)(void *))(v139[0] + 32))(v139);
    if (v132) {
      goto LABEL_102;
    }
    goto LABEL_116;
  }
  if (v140) {
    goto LABEL_100;
  }
LABEL_101:
  if (!v132)
  {
LABEL_116:
    if (!*(void *)(a1 + 464)) {
      goto LABEL_102;
    }
    goto LABEL_119;
  }
LABEL_102:
  uint64_t v40 = *(std::__shared_weak_count **)(a1 + 472);
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if (*v12)
    {
LABEL_105:
      uint64_t v41 = gss::Allocator::instance(v37);
      uint64_t v137 = v41;
      float v42 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v41 + 16))(v41, 16, 4);
      uint64_t v43 = v42;
      *(void *)&long long v135 = v42;
      unsigned int v136 = v42 + 2;
      if (v42) {
        *float v42 = 0x200000005;
      }
      v42[1] = 0x1B00000003;
      *((void *)&v135 + 1) = v42 + 2;
      gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)&v126, (uint64_t)&v135);
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v41 + 40))(v41, v43, 16);
      uint64_t v44 = *v12;
      *(void *)((char *)&v135 + 7) = 0;
      *(void *)&long long v135 = 0;
      HIBYTE(v135) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v134, v44, (gss::FeatureAttributeSet *)&v126, (gss::QueryOverrides *)&v135);
      long long v45 = v134;
      uint64_t v46 = *(std::__shared_weak_count **)(a1 + 472);
      long long v134 = 0uLL;
      *(_OWORD *)(a1 + 464) = v45;
      if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      uint64_t v47 = (std::__shared_weak_count *)*((void *)&v134 + 1);
      if (*((void *)&v134 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v134 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      if (v126)
      {
        uint64_t v127 = v126;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v129 + 40))(v129, v126, v128 - v126);
      }
    }
  }
  else if (*v12)
  {
    goto LABEL_105;
  }
LABEL_119:
  uint64_t v48 = *(void *)(a1 + 352);
  *(void *)(v48 + 112) = 0;
  *(void *)(v48 + 120) = 0;
  md::PolygonRenderResources::resetPools(*(md::PolygonRenderResources **)(a1 + 368));
  *(unsigned char *)(a1 + 384) = *(unsigned __int8 *)(md::LayoutContext::frameState((md::LayoutContext *)a2) + 128)
                       - 1 < 3;
  if (v11)
  {
    *(_DWORD *)(a1 + 444) = *(_DWORD *)v11;
    *(_WORD *)(a1 + 428) = *(_WORD *)(v11 + 4);
    if (*(unsigned char *)(v11 + 16))
    {
      uint64_t v49 = *(void *)(v11 + 8);
      int64x2_t v50 = (char *)operator new(8uLL);
      *(void *)int64x2_t v50 = v49;
      uint64_t v51 = *(unsigned char **)(a1 + 392);
      *(void *)(a1 + 400) = v51;
      std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>((char **)(a1 + 392), v51, v50, v50 + 8, 1);
      operator delete(v50);
    }
    else
    {
      *(void *)(a1 + 400) = *(void *)(a1 + 392);
    }
  }
  uint64_t v52 = *(void *)(a1 + 368);
  uint64_t v53 = *(void *)(v52 + 872);
  long long v135 = 0uLL;
  unsigned int v136 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v135, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
  uint64_t v54 = v135;
  int v55 = *(__int16 *)(v52 + 896);
  LOBYTE(v126) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v135, v55, 0, &v126);
  if (v53) {
    *(void *)(v54 + 32) = v53;
  }
  uint64_t v56 = *(void *)(a1 + 368);
  uint64_t v57 = *(void *)(v56 + 880);
  long long v135 = 0uLL;
  unsigned int v136 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v135, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
  uint64_t v58 = *((void *)&v135 + 1);
  int v59 = *(__int16 *)(v56 + 898);
  LOBYTE(v126) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, *((uint64_t *)&v135 + 1), v59, 0, &v126);
  if (v57) {
    *(void *)(v58 + 32) = v57;
  }
  uint64_t v60 = *(void *)(a1 + 368);
  uint64_t v61 = *(void *)(v60 + 888);
  long long v135 = 0uLL;
  unsigned int v136 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v135, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
  uint64_t v62 = (uint64_t)v136;
  int v63 = *(__int16 *)(v60 + 900);
  LOBYTE(v126) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, (uint64_t)v136, v63, 0, &v126);
  if (v61) {
    *(void *)(v62 + 32) = v61;
  }
  if (*(unsigned char *)(a1 + 424))
  {
    uint64_t v64 = *(void **)(*(void *)(*(void *)(a1 + 40) + 24) + 8);
    uint64_t v65 = v64[3];
    uint64_t v66 = v64[4];
    uint64_t v67 = v66 - v65;
    if (v66 == v65) {
      goto LABEL_139;
    }
    uint64_t v68 = 0;
    unint64_t v69 = v67 >> 3;
    while (1)
    {
      float32x2_t v70 = *(unsigned __int8 **)(v65 + 8 * v68);
      if (*v70 == *(unsigned __int8 *)(a1 + 422))
      {
        unint64_t v71 = *((void *)v70 + 1);
        uint64_t v72 = v64[15];
        if (v71 < (v64[16] - v72) >> 3) {
          break;
        }
      }
      if (++v68 >= v69) {
        goto LABEL_139;
      }
    }
    uint64_t v73 = *(void *)(v72 + 8 * v71);
    if (!v73
      || (uint64_t v74 = *(void *)(*(void *)(v73 + 24) + 8 * *(unsigned __int8 *)(a1 + 423))) == 0
      || !*(unsigned char *)(a1 + 428)
      || (int v75 = *(char *)(*(void *)(a1 + 368) + 912),
          LOBYTE(v126) = 0,
          md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v74, v75, 0, &v126), *(void *)(v74 + 32) = *(void *)(*(void *)(a1 + 368) + 920), *(unsigned char *)(a1 + 424)))
    {
LABEL_139:
      uint64_t v76 = *(void **)(*(void *)(*(void *)(a1 + 40) + 24) + 8);
      uint64_t v77 = v76[3];
      uint64_t v78 = v76[4] - v77;
      if (v78)
      {
        uint64_t v79 = 0;
        unint64_t v80 = v78 >> 3;
        while (1)
        {
          uint64_t v81 = *(unsigned __int8 **)(v77 + 8 * v79);
          if (*v81 == *(unsigned __int8 *)(a1 + 422))
          {
            unint64_t v82 = *((void *)v81 + 1);
            uint64_t v83 = v76[15];
            unint64_t v84 = (v76[16] - v83) >> 3;
            if (v82 < v84) {
              break;
            }
          }
          if (++v79 >= v80) {
            goto LABEL_154;
          }
        }
        uint64_t v85 = *(void *)(v83 + 8 * v82);
        if (v85)
        {
          uint64_t v86 = *(void *)(*(void *)(v85 + 24) + 8 * *(unsigned __int8 *)(a1 + 423));
          if (v86)
          {
            if (*(unsigned char *)(a1 + 427))
            {
              uint64_t v87 = 0;
              while (1)
              {
                unint64_t v88 = *(unsigned __int8 **)(v77 + 8 * v87);
                if (*v88 == *(unsigned __int8 *)(a1 + 425))
                {
                  unint64_t v89 = *((void *)v88 + 1);
                  if (v89 < v84) {
                    break;
                  }
                }
                if (++v87 >= v80) {
                  goto LABEL_154;
                }
              }
              uint64_t v90 = *(void *)(v83 + 8 * v89);
              if (v90 && *(void *)(*(void *)(v90 + 24) + 8 * *(unsigned __int8 *)(a1 + 426)))
              {
                int v91 = *(char *)(*(void *)(a1 + 368) + 936);
                LOBYTE(v126) = 0;
                md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v86, v91, 0, &v126);
                *(void *)(v86 + 32) = *(void *)(*(void *)(a1 + 368) + 944);
              }
            }
          }
        }
      }
    }
  }
LABEL_154:
  *(void *)(*(void *)(a1 + 368) + 264) = 0;
  *(unsigned char *)(a1 + 440) = *(unsigned char *)(a1 + 360);
  *(unsigned char *)(a1 + 386) = *(unsigned char *)(a1 + 480);
  if (*(unsigned char *)(a1 + 361))
  {
    float v92 = a2[1];
    int8x8_t v93 = (int8x8_t)v92[1];
    if (v93)
    {
      uint8x8_t v94 = (uint8x8_t)vcnt_s8(v93);
      v94.i16[0] = vaddlv_u8(v94);
      if (v94.u32[0] > 1uLL)
      {
        uint64_t v95 = 0x1AF456233693CD46;
        if (*(void *)&v93 <= 0x1AF456233693CD46uLL) {
          uint64_t v95 = 0x1AF456233693CD46uLL % *(void *)&v93;
        }
      }
      else
      {
        uint64_t v95 = (*(void *)&v93 - 1) & 0x1AF456233693CD46;
      }
      float v96 = *(void **)(*v92 + 8 * v95);
      if (v96)
      {
        uint64_t v97 = (void *)*v96;
        if (v97)
        {
          if (v94.u32[0] < 2uLL)
          {
            uint64_t v98 = *(void *)&v93 - 1;
            while (1)
            {
              uint64_t v100 = v97[1];
              if (v100 == 0x1AF456233693CD46)
              {
                if (v97[2] == 0x1AF456233693CD46) {
                  goto LABEL_176;
                }
              }
              else if ((v100 & v98) != v95)
              {
                goto LABEL_192;
              }
              uint64_t v97 = (void *)*v97;
              if (!v97) {
                goto LABEL_192;
              }
            }
          }
          do
          {
            unint64_t v99 = v97[1];
            if (v99 == 0x1AF456233693CD46)
            {
              if (v97[2] == 0x1AF456233693CD46)
              {
LABEL_176:
                uint64_t v101 = v97[5];
                if (*(void *)(v101 + 8) == 0x1AF456233693CD46)
                {
                  uint64_t v102 = *(void *)(v101 + 32);
                  if (v102)
                  {
                    uint64_t v103 = *(void *)(a1 + 464);
                    float v104 = *(std::__shared_weak_count **)(a1 + 472);
                    *(void *)&long long v135 = v103;
                    *((void *)&v135 + 1) = v104;
                    if (v104) {
                      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    gss::QueryableLocker<gss::PropertyID>::QueryableLocker(&v126, v103, (uint64_t)v104);
                    if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                    if ((_BYTE)v130)
                    {
                      if ((int)*(float *)(v102 + 3072) >= 0x17) {
                        unsigned int v105 = 23;
                      }
                      else {
                        unsigned int v105 = (int)*(float *)(v102 + 3072);
                      }
                      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v135, *(void *)(v126 + 24), 0x5Cu, v105, 2u, 0);
                      float32x4_t v125 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v135)), (float32x4_t)vdupq_n_s32(0x37800080u));
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v126);
                      uint64_t v106 = *(void *)(*(void *)(a1 + 368) + 968);
                      uint64_t v138 = 0;
                      long long v135 = 0uLL;
                      uint64_t v107 = *(void *)(v106 + 8);
                      uint64_t v126 = 0;
                      uint64_t v127 = v106;
                      uint64_t v128 = 0;
                      uint64_t v129 = v107;
                      __int16 v130 = 1;
                      if (v107) {
                        uint64_t v108 = *(void *)(v106 + 72);
                      }
                      else {
                        uint64_t v108 = 0;
                      }
                      uint64_t v131 = v108;
                      ggl::BufferMemory::operator=((uint64_t *)&v135, (uint64_t)&v126);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v126);
                      uint64_t v109 = v138;
                      v138[4] = v125;
                      *(float32x4_t *)((char *)&v109[5] + 8) = (float32x4_t)xmmword_1A28FCDA0;
                      v109[5].i32[0] = 1065353216;
                      v109->i32[0] = 1065353216;
                      *(uint64_t *)((char *)&v109->i64[1] + 4) = 0;
                      *(uint64_t *)((char *)v109->i64 + 4) = 0;
                      v109[1].i32[1] = 1065353216;
                      v109[1].i64[1] = 0;
                      v109[2].i64[0] = 0;
                      v109[2].i32[2] = 1065353216;
                      *(uint64_t *)((char *)v109[3].i64 + 4) = 0;
                      *(uint64_t *)((char *)&v109[2].i64[1] + 4) = 0;
                      v109[3].i32[3] = 1065353216;
                      uint64_t v126 = 0;
                      uint64_t v127 = 0;
                      uint64_t v128 = 0;
                      md::PolygonLayoutCharacteristics::commandBufferInfo(&v126, (const md::LayoutContext *)(a1 + 376), *(const md::PassList **)(*(void *)(*(void *)(a1 + 40) + 24) + 8));
                      md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(a1, a2[1], v126);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v135);
                    }
                    else
                    {
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v126);
                    }
                  }
                }
                break;
              }
            }
            else
            {
              if (v99 >= *(void *)&v93) {
                v99 %= *(void *)&v93;
              }
              if (v99 != v95) {
                break;
              }
            }
            uint64_t v97 = (void *)*v97;
          }
          while (v97);
        }
      }
    }
  }
LABEL_192:
  md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>((uint64_t **)(a1 + 272), a2[1], a1 + 376);
  md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(a1 + 272, (uint64_t)a2, *(void *)(a1 + 40), *(void *)(a1 + 368), (unsigned __int8 *)(a1 + 376), *(unsigned char *)(a1 + 448));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t **))(*(void *)a1 + 32))(&v126, a1, a2);
  uint64_t v110 = (unsigned __int8 *)v126;
  float v111 = (unsigned __int8 *)v127;
  if (v126 == v127)
  {
    if (v126) {
      goto LABEL_194;
    }
  }
  else
  {
    do
    {
      long long v114 = *(void **)(*(void *)(*(void *)(a1 + 40) + 24) + 8);
      uint64_t v115 = v114[3];
      uint64_t v116 = v114[4];
      uint64_t v117 = v116 - v115;
      if (v116 != v115)
      {
        uint64_t v118 = 0;
        unint64_t v119 = v117 >> 3;
        while (1)
        {
          float v120 = *(unsigned __int8 **)(v115 + 8 * v118);
          if (*v120 == *v110)
          {
            unint64_t v121 = *((void *)v120 + 1);
            uint64_t v122 = v114[15];
            if (v121 < (v114[16] - v122) >> 3) {
              break;
            }
          }
          if (++v118 >= v119) {
            goto LABEL_201;
          }
        }
        uint64_t v123 = *(void *)(v122 + 8 * v121);
        if (v123)
        {
          uint64_t v124 = *(void *)(*(void *)(v123 + 24) + 8 * v110[1]);
          if (v124) {
            ggl::CommandBuffer::stableSortRenderItems(*(__n128 **)(v124 + 72), *(char **)(v124 + 80));
          }
        }
      }
LABEL_201:
      v110 += 2;
    }
    while (v110 != v111);
    uint64_t v110 = (unsigned __int8 *)v126;
    if (v126)
    {
LABEL_194:
      uint64_t v127 = (uint64_t)v110;
      operator delete(v110);
    }
  }
  unint64_t v112 = mach_absolute_time() - v4;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
  }
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120), v112);
  if (!v147)
  {
LABEL_214:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v147 + 48))(v147);
  uint64_t result = (uint64_t)v147;
  if (v147 == v146) {
    return (*(uint64_t (**)(void *))(v146[0] + 32))(v146);
  }
  if (v147) {
    return (*(uint64_t (**)(void))(*v147 + 40))();
  }
  return result;
}

void sub_1A2232C6C(_Unwind_Exception *a1)
{
  unint64_t v4 = mach_absolute_time() - v1;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1) {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
  }
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120), v4);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 120));
  _Unwind_Resume(a1);
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(uint64_t a1, void *a2, uint64_t a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  if (!*(void *)&v3) {
    return;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v3 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v7 = 0x3070CB6B3C7F21D3uLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v3 - 1) & 0x3070CB6B3C7F21D3;
  }
  int8x8_t v8 = *(void **)(*a2 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint8x8_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x3070CB6B3C7F21D3)
      {
        if (v9[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_22;
        }
      }
      else if ((v11 & (*(void *)&v3 - 1)) != v7)
      {
        goto LABEL_24;
      }
      uint8x8_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v10 >= *(void *)&v3) {
      v10 %= *(void *)&v3;
    }
    if (v10 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint8x8_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v14 = 0xA60DDA5A69582425;
    if (*(void *)&v3 <= 0xA60DDA5A69582425) {
      unint64_t v14 = 0xA60DDA5A69582425 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v14 = (*(void *)&v3 - 1) & 0xA60DDA5A69582425;
  }
  uint64_t v15 = *(void **)(*a2 + 8 * v14);
  if (v15)
  {
    unint64_t v16 = (void *)*v15;
    if (v16)
    {
      if (v6.u32[0] < 2uLL)
      {
        uint64_t v17 = *(void *)&v3 - 1;
        while (1)
        {
          uint64_t v19 = v16[1];
          if (v19 == 0xA60DDA5A69582425)
          {
            if (v16[2] == 0xA60DDA5A69582425) {
              goto LABEL_45;
            }
          }
          else if ((v19 & v17) != v14)
          {
            return;
          }
          unint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
      }
      do
      {
        unint64_t v18 = v16[1];
        if (v18 == 0xA60DDA5A69582425)
        {
          if (v16[2] == 0xA60DDA5A69582425)
          {
LABEL_45:
            uint64_t v20 = v16[5];
            if (*(void *)(v20 + 8) == 0xA60DDA5A69582425)
            {
              if (v13)
              {
                uint64_t v21 = *(id **)(v20 + 32);
                if (v21)
                {
                  int v54 = *(__int16 *)(*(void *)(a1 + 368) + 896);
                  id v22 = *v21;
                  uint64_t v23 = v22;
                  if (v22)
                  {
                    [v22 textureManager];
                    uint64_t v53 = v59;
                    if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)())v60->__on_zero_shared)();
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                  else
                  {
                    uint64_t v53 = 0;
                  }

                  uint64_t v24 = *(void *)(a1 + 272);
                  uint64_t v52 = *(void *)(a1 + 280);
                  if (v24 != v52)
                  {
                    uint64_t v51 = a3;
                    int64x2_t v50 = vdupq_n_s64(1uLL);
                    do
                    {
                      uint64_t v27 = v13;
                      uint64_t v28 = *(void **)v24;
                      int v29 = *(unsigned __int8 *)(*(void *)(*(void *)v24 + 384) + 169);
                      uint64_t v30 = *(void *)(a1 + 368);
                      uint64_t v31 = *(void *)(v30 + 16 * *(unsigned __int8 *)(a1 + 360) + 280);
                      uint64_t v32 = ggl::FragmentedPool<ggl::PolygonFill::MeshPipelineSetup>::pop(*(void *)(v30 + 232));
                      uint64_t v33 = *(void **)(v32 + 64);
                      v33[1] = 0;
                      uint64_t v34 = v28[27];
                      *uint64_t v33 = v34;
                      uint64_t v35 = *(void **)(v32 + 160);
                      uint64_t v36 = v28[28];
                      if (v36) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
                      }
                      long long v37 = (std::__shared_weak_count *)v35[1];
                      *uint64_t v35 = v34;
                      v35[1] = v36;
                      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                        std::__shared_weak_count::__release_weak(v37);
                      }
                      uint64_t v38 = *(void *)(v32 + 64);
                      *(void *)(v38 + 24) = 0;
                      uint64_t v39 = v28[29];
                      *(void *)(v38 + 16) = v39;
                      uint64_t v40 = *(void *)(v32 + 160);
                      uint64_t v41 = v28[30];
                      if (v41) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
                      }
                      float v42 = *(std::__shared_weak_count **)(v40 + 24);
                      *(void *)(v40 + 16) = v39;
                      *(void *)(v40 + 24) = v41;
                      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                        std::__shared_weak_count::__release_weak(v42);
                      }
                      **(void **)(v32 + 96) = *v53;
                      *((void *)&v55 + 1) = "";
                      *(void *)&long long v56 = v31;
                      memset(&v58[8], 0, 32);
                      *(int64x2_t *)&v58[40] = v50;
                      *(void *)&v58[56] = 0;
                      *(_DWORD *)uint64_t v58 = 1065353216;
                      LODWORD(v57) = v29 + v54;
                      *((void *)&v56 + 1) = v32;
                      uint64_t v43 = v28[48];
                      if (v43) {
                        uint64_t v44 = v43 + 168;
                      }
                      else {
                        uint64_t v44 = 0;
                      }
                      *((void *)&v57 + 1) = (16 * (int)v44) & 0xFF00 | ((unint64_t)*(unsigned __int8 *)(v44 + 1) << 19) | (*(void *)(a1 + 464) >> 4) | 0x10000;
                      uint64_t v13 = v27;
                      uint64_t v45 = 128;
                      if (*(unsigned __int8 *)(v27 + 320) - 1 < 3) {
                        uint64_t v45 = 144;
                      }
                      uint64_t v46 = *(void *)(a1 + 368);
                      uint64_t v47 = *(void *)(v27 + v45);
                      uint64_t v48 = *(void **)(v46 + 1072);
                      uint64_t v49 = v48[1];
                      if (v49 == *(void *)(v46 + 1080))
                      {
                        uint64_t v48 = (void *)*v48;
                        uint64_t v25 = v51;
                        if (!v48)
                        {
                          uint64_t v48 = malloc_type_malloc(120 * v49 + 16, 0xB644C221uLL);
                          *uint64_t v48 = 0;
                          v48[1] = 0;
                          **(void **)(v46 + 1072) = v48;
                        }
                        *(void *)(v46 + 1072) = v48;
                        uint64_t v49 = v48[1];
                      }
                      else
                      {
                        uint64_t v25 = v51;
                      }
                      uint64_t v26 = &v48[15 * v49];
                      v48[1] = v49 + 1;
                      v26[2] = &off_1EF55A458;
                      *(_OWORD *)(v26 + 9) = *(_OWORD *)v58;
                      *(_OWORD *)(v26 + 3) = v55;
                      *(_OWORD *)(v26 + 11) = *(_OWORD *)&v58[16];
                      *(_OWORD *)(v26 + 13) = *(_OWORD *)&v58[32];
                      *(_OWORD *)(v26 + 7) = v57;
                      *(_OWORD *)(v26 + 5) = v56;
                      *(_OWORD *)(v26 + 15) = *(_OWORD *)&v58[48];
                      v26[10] = v47;
                      *(_OWORD *)(v26 + 11) = 0uLL;
                      v26[13] = 0;
                      v26[14] = 1;
                      ggl::CommandBuffer::pushRenderItem(v25, (uint64_t)(v26 + 2));
                      v24 += 8;
                    }
                    while (v24 != v52);
                  }
                }
              }
            }
            return;
          }
        }
        else
        {
          if (v18 >= *(void *)&v3) {
            v18 %= *(void *)&v3;
          }
          if (v18 != v14) {
            return;
          }
        }
        unint64_t v16 = (void *)*v16;
      }
      while (v16);
    }
  }
}

void sub_1A22334A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::operator()(uint64_t a1, unsigned char *a2)
{
  switch(*a2)
  {
    case 0:
      uint64_t v2 = *(uint64_t ***)(a1 + 16);
      **(unsigned char **)(a1 + 8) = 1;
      int8x8_t v3 = *v2;
      unint64_t v4 = v2[1];
      if (*v2 != v4)
      {
        do
        {
          uint64_t v5 = *v3++;
          md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v5 + 384), 1);
        }
        while (v3 != v4);
      }
      break;
    case 1:
      uint8x8_t v6 = *(uint64_t ***)(a1 + 16);
      **(unsigned char **)(a1 + 8) = 1;
      uint64_t v7 = *v6;
      int8x8_t v8 = v6[1];
      if (*v6 != v8)
      {
        do
        {
          uint64_t v9 = *v7++;
          md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v9 + 384), 1);
        }
        while (v7 != v8);
      }
      break;
    case 2:
      unint64_t v10 = *(uint64_t ***)(a1 + 16);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      if (*v10 != v12)
      {
        do
        {
          uint64_t v13 = *v11++;
          md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v13 + 384), 0);
        }
        while (v11 != v12);
      }
      break;
    case 3:
      unint64_t v14 = *(uint64_t ***)(a1 + 16);
      uint64_t v15 = *v14;
      unint64_t v16 = v14[1];
      if (*v14 != v16)
      {
        do
        {
          uint64_t v17 = *v15++;
          md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v17 + 384), 1);
        }
        while (v15 != v16);
      }
      break;
    case 4:
      unint64_t v18 = *(uint64_t ***)(a1 + 16);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      if (*v18 != v20)
      {
        do
        {
          uint64_t v21 = *v19++;
          md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(void **)(v21 + 384), 1);
        }
        while (v19 != v20);
      }
      break;
    default:
      return;
  }
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF573C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF573C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(md::StyleManagerEvent)#1}>,void ()(md::StyleManagerEvent)>::~__func()
{
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  int8x8_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "PolygonLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573C50;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573C50;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#2}>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>(a1 + 8);
}

uint64_t std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573C98;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573C98;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1},std::allocator<md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(void *a1)
{
  md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(void *a1)
{
  *a1 = &unk_1EF53A2A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[59];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  a1[47] = &unk_1EF54A500;
  uint64_t v3 = (void *)a1[49];
  if (v3)
  {
    a1[50] = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = (md::PolygonRenderResources *)a1[46];
  a1[46] = 0;
  if (v4)
  {
    md::PolygonRenderResources::~PolygonRenderResources(v4);
    MEMORY[0x1A6239270]();
  }
  return md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(a1);
}

uint64_t std::__shared_ptr_pointer<md::RasterSharedRenderResources *,std::shared_ptr<md::RasterSharedRenderResources>::__shared_ptr_default_delete<md::RasterSharedRenderResources,md::RasterSharedRenderResources>,std::allocator<md::RasterSharedRenderResources>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<md::RasterSharedRenderResources *,std::shared_ptr<md::RasterSharedRenderResources>::__shared_ptr_default_delete<md::RasterSharedRenderResources,md::RasterSharedRenderResources>,std::allocator<md::RasterSharedRenderResources>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::BuildingSharedRenderResources>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<md::BuildingSharedRenderResources>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5824A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::BuildingSharedRenderResources>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5824A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::CartographicMapEngineConfiguration::~CartographicMapEngineConfiguration(md::CartographicMapEngineConfiguration *this)
{
  *(void *)this = &unk_1EF54E0A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF5416A8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF54E0A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF5416A8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void non-virtual thunk to'md::ShadowPipelineProxy::update(uint64_t a1, int8x8_t *a2, uint64_t *a3)
{
}

void md::ShadowPipelineProxy::update(uint64_t a1, int8x8_t *a2, uint64_t *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(v6 + 8);
  if (v7 == *(void *)v6)
  {
    uint64_t v18 = *(void *)(v6 + 88);
    if (!v18)
    {
LABEL_88:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_89:
      abort();
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18);
    uint64_t v9 = *(uint64_t **)(v6 + 40);
    unint64_t v19 = *(void *)(v6 + 48);
    if ((unint64_t)v9 >= v19)
    {
      uint64_t v21 = *(void *)(v6 + 32);
      uint64_t v22 = ((uint64_t)v9 - v21) >> 3;
      unint64_t v13 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        goto LABEL_89;
      }
      uint64_t v23 = v19 - v21;
      if (v23 >> 2 > v13) {
        unint64_t v13 = v23 >> 2;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        uint64_t v24 = 8 * v13;
        uint64_t v25 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v6 + 56) + 16))(*(void *)(v6 + 56), 8 * v13, 8);
        uint64_t v17 = (uint64_t *)(v25 + 8 * v22);
        unint64_t v13 = v25 + v24;
        if (v25) {
          *uint64_t v17 = v8;
        }
      }
      else
      {
        uint64_t v17 = (uint64_t *)(8 * v22);
      }
      uint64_t v20 = v17 + 1;
      uint64_t v35 = *(void *)(v6 + 32);
      uint64_t v26 = *(void *)(v6 + 40);
      if (v26 == v35) {
        goto LABEL_48;
      }
      unint64_t v36 = v26 - v35 - 8;
      if (v36 < 0x38)
      {
        uint64_t v38 = *(void *)(v6 + 40);
      }
      else if ((unint64_t)(v26 - (void)v17) < 0x20)
      {
        uint64_t v38 = *(void *)(v6 + 40);
      }
      else
      {
        uint64_t v37 = (v36 >> 3) + 1;
        uint64_t v38 = v26 - 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v39 = v17 - 2;
        uint64_t v40 = (long long *)(v26 - 16);
        uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v42 = *v40;
          *((_OWORD *)v39 - 1) = *(v40 - 1);
          *(_OWORD *)uint64_t v39 = v42;
          v39 -= 4;
          v40 -= 2;
          v41 -= 4;
        }
        while (v41);
        v17 -= v37 & 0x3FFFFFFFFFFFFFFCLL;
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v44 = *(void *)(v38 - 8);
        v38 -= 8;
        *--uint64_t v17 = v44;
      }
      while (v38 != v35);
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v7 - 8);
    *(void *)(v6 + 8) = v7 - 8;
    uint64_t v9 = *(uint64_t **)(v6 + 40);
    unint64_t v10 = *(void *)(v6 + 48);
    if ((unint64_t)v9 >= v10)
    {
      uint64_t v11 = *(void *)(v6 + 32);
      uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        goto LABEL_89;
      }
      uint64_t v14 = v10 - v11;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        uint64_t v15 = 8 * v13;
        uint64_t v16 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v6 + 56) + 16))(*(void *)(v6 + 56), 8 * v13, 8);
        uint64_t v17 = (uint64_t *)(v16 + 8 * v12);
        unint64_t v13 = v16 + v15;
        if (v16) {
          *uint64_t v17 = v8;
        }
      }
      else
      {
        uint64_t v17 = (uint64_t *)(8 * v12);
      }
      uint64_t v20 = v17 + 1;
      uint64_t v27 = *(void *)(v6 + 32);
      uint64_t v26 = *(void *)(v6 + 40);
      if (v26 == v27) {
        goto LABEL_48;
      }
      unint64_t v28 = v26 - v27 - 8;
      if (v28 < 0x38)
      {
        uint64_t v30 = *(void *)(v6 + 40);
      }
      else if ((unint64_t)(v26 - (void)v17) < 0x20)
      {
        uint64_t v30 = *(void *)(v6 + 40);
      }
      else
      {
        uint64_t v29 = (v28 >> 3) + 1;
        uint64_t v30 = v26 - 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v31 = v17 - 2;
        uint64_t v32 = (long long *)(v26 - 16);
        uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v34 = *v32;
          *((_OWORD *)v31 - 1) = *(v32 - 1);
          *(_OWORD *)uint64_t v31 = v34;
          v31 -= 4;
          v32 -= 2;
          v33 -= 4;
        }
        while (v33);
        v17 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
        if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v43 = *(void *)(v30 - 8);
        v30 -= 8;
        *--uint64_t v17 = v43;
      }
      while (v30 != v27);
LABEL_47:
      uint64_t v26 = *(void *)(v6 + 32);
LABEL_48:
      *(void *)(v6 + 32) = v17;
      *(void *)(v6 + 40) = v20;
      uint64_t v45 = *(void *)(v6 + 48);
      *(void *)(v6 + 48) = v13;
      if (v26) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 56) + 40))(*(void *)(v6 + 56), v26, v45 - v26);
      }
      goto LABEL_50;
    }
  }
  if (v9) {
    *uint64_t v9 = v8;
  }
  uint64_t v20 = v9 + 1;
LABEL_50:
  *(void *)(v6 + 40) = v20;
  *(void *)unint64_t v99 = v8;
  uint64_t v46 = *(void *)(v6 + 120);
  if (!v46) {
    goto LABEL_88;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v46 + 48))(v46, v99);
  uint64_t v47 = *a3;
  *(void *)unint64_t v99 = v8;
  uint64_t v48 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v48, v47, v99);
  uint64_t v49 = *a3;
  *(void *)&v99[12] = 0;
  *(void *)&v99[4] = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v105 = 0;
  uint64_t v104 = 0;
  *(_DWORD *)unint64_t v99 = 1065353216;
  int v100 = 1065353216;
  int v103 = 1065353216;
  int v106 = 1065353216;
  int64x2_t v50 = (void *)gdc::Registry::storage<arComponents::ViewConstantDataComponent>(a2);
  gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::emplace(v50, v49, (long long *)v99);
  uint64_t v51 = *a3;
  *(void *)unint64_t v99 = 0;
  *(void *)&v99[8] = 0;
  uint64_t v52 = (void *)gdc::Registry::storage<arComponents::TransformConstantDataComponent>(a2);
  gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v52, v51, v99);
  uint64_t v53 = *(std::__shared_weak_count **)&v99[8];
  if (*(void *)&v99[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v99[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  uint64_t v54 = *a3;
  long long v55 = (void *)gdc::Registry::storage<arComponents::NeedsTransformConstantDataUpdate>(a2);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v55, v54);
  uint64_t v56 = *a3;
  __int16 v57 = *(_WORD *)(v5 + 32);
  uint64_t v58 = (void *)gdc::Registry::storage<arComponents::CommandBufferLocation>(a2);
  uint64_t v107 = v56;
  int v59 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v58 + 4, (uint64_t)&v107);
  if (v60)
  {
    uint64_t v66 = (char *)v58[11];
    unint64_t v65 = v58[12];
    if ((unint64_t)v66 >= v65)
    {
      uint64_t v98 = v5;
      uint64_t v68 = (char *)v58[10];
      uint64_t v69 = v66 - v68;
      if (v66 - v68 <= -3) {
        goto LABEL_89;
      }
      uint64_t v70 = v69 >> 1;
      unint64_t v71 = v65 - (void)v68;
      if (v71 <= (v69 >> 1) + 1) {
        unint64_t v72 = v70 + 1;
      }
      else {
        unint64_t v72 = v71;
      }
      if (v71 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v73 = v72;
      }
      if (v73)
      {
        if (v73 < 0) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v74 = operator new(2 * v73);
      }
      else
      {
        uint64_t v74 = 0;
      }
      int v75 = &v74[2 * v70];
      uint64_t v76 = &v74[2 * v73];
      *int v75 = v57;
      uint64_t v67 = v75 + 1;
      if (v66 != v68)
      {
        unint64_t v77 = v66 - v68 - 2;
        if (v77 < 0x1E) {
          goto LABEL_93;
        }
        if (v66 - v74 - (v69 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
          goto LABEL_93;
        }
        uint64_t v78 = (v77 >> 1) + 1;
        uint64_t v79 = &v74[2 * v70 - 16];
        unint64_t v80 = v66 - 16;
        unint64_t v81 = v78 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v82 = *(_OWORD *)v80;
          *(v79 - 1) = *((_OWORD *)v80 - 1);
          *uint64_t v79 = v82;
          v79 -= 2;
          v80 -= 32;
          v81 -= 16;
        }
        while (v81);
        v75 -= v78 & 0xFFFFFFFFFFFFFFF0;
        v66 -= 2 * (v78 & 0xFFFFFFFFFFFFFFF0);
        if (v78 != (v78 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_93:
          do
          {
            __int16 v83 = *((_WORD *)v66 - 1);
            v66 -= 2;
            *--int v75 = v83;
          }
          while (v66 != v68);
        }
        uint64_t v66 = (char *)v58[10];
      }
      v58[10] = v75;
      v58[11] = v67;
      v58[12] = v76;
      uint64_t v5 = v98;
      if (v66) {
        operator delete(v66);
      }
    }
    else
    {
      *(_WORD *)uint64_t v66 = v57;
      uint64_t v67 = v66 + 2;
    }
    v58[11] = v67;
    uint64_t v62 = v58[31];
LABEL_84:
    unint64_t v84 = (void *)v58[22];
    if (v84)
    {
      while (1)
      {
        *(void *)unint64_t v99 = &v107;
        *(void *)&v99[8] = 1;
        uint64_t v108 = v62;
        uint64_t v85 = v84[6];
        if (!v85) {
          goto LABEL_88;
        }
        (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v85 + 48))(v85, &v108, v99);
        unint64_t v84 = (void *)*v84;
        if (!v84) {
          goto LABEL_87;
        }
      }
    }
    goto LABEL_87;
  }
  uint64_t v61 = (_WORD *)(v58[10] + (((uint64_t)v59 - v58[7]) >> 2));
  _WORD *v61 = v57;
  uint64_t v62 = v58[31];
  if (v61 == (_WORD *)v58[11]) {
    goto LABEL_84;
  }
  for (unint64_t i = (void *)v58[16]; i; unint64_t i = (void *)*i)
  {
    *(void *)unint64_t v99 = &v107;
    *(void *)&v99[8] = 1;
    uint64_t v108 = v62;
    uint64_t v64 = i[6];
    if (!v64) {
      goto LABEL_88;
    }
    (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v64 + 48))(v64, &v108, v99);
  }
LABEL_87:
  uint64_t v86 = *a3;
  *(void *)unint64_t v99 = *(void *)(*(void *)(v8 + 64) + 48);
  uint64_t v87 = (void *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v87, v86, v99);
  uint64_t v88 = *a3;
  *(void *)unint64_t v99 = **(void **)(v8 + 64);
  unint64_t v89 = (void *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v89, v88, v99);
  uint64_t v90 = *a3;
  *(void *)unint64_t v99 = *(void *)(*(void *)(v8 + 64) + 16);
  int v91 = (void *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v91, v90, v99);
  uint64_t v92 = *a3;
  *(void *)unint64_t v99 = **(void **)(v8 + 32);
  int8x8_t v93 = (void *)gdc::Registry::storage<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v93, v92, v99);
  uint64_t v94 = *a3;
  *(void *)unint64_t v99 = v5;
  HasTransformConstant = (void *)gdc::Registry::storage<md::pipelineECS::HasTransformConstantData>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(HasTransformConstant, v94, v99);
  uint64_t v96 = *a3;
  *(void *)unint64_t v99 = v5 + 8;
  HasTransformInstanceDeviceDatfloat a = (void *)gdc::Registry::storage<md::pipelineECS::HasTransformInstanceDeviceDataFeature>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(HasTransformInstanceDeviceData, v96, v99);
}

void sub_1A223447C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::emplace(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v31 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v31);
  if (v6)
  {
    uint64_t v12 = (char *)a1[11];
    unint64_t v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v17 = (char *)a1[10];
      uint64_t v18 = (v12 - v17) >> 6;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 58) {
        goto LABEL_30;
      }
      uint64_t v20 = v11 - (void)v17;
      if (v20 >> 5 > v19) {
        unint64_t v19 = v20 >> 5;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 58) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v22 = (char *)operator new(v21 << 6);
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v23 = &v22[64 * v18];
      long long v24 = a3[1];
      *(_OWORD *)uint64_t v23 = *a3;
      *((_OWORD *)v23 + 1) = v24;
      long long v25 = a3[3];
      *((_OWORD *)v23 + 2) = a3[2];
      *((_OWORD *)v23 + 3) = v25;
      uint64_t v16 = v23 + 64;
      if (v12 != v17)
      {
        do
        {
          long long v26 = *((_OWORD *)v12 - 4);
          long long v27 = *((_OWORD *)v12 - 3);
          long long v28 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v23 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v23 - 1) = v28;
          *((_OWORD *)v23 - 4) = v26;
          *((_OWORD *)v23 - 3) = v27;
          v23 -= 64;
          v12 -= 64;
        }
        while (v12 != v17);
        uint64_t v12 = (char *)a1[10];
      }
      a1[10] = v23;
      a1[11] = v16;
      a1[12] = &v22[64 * v21];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      long long v13 = *a3;
      long long v14 = a3[1];
      long long v15 = a3[3];
      *((_OWORD *)v12 + 2) = a3[2];
      *((_OWORD *)v12 + 3) = v15;
      *(_OWORD *)uint64_t v12 = v13;
      *((_OWORD *)v12 + 1) = v14;
      uint64_t v16 = v12 + 64;
    }
    a1[11] = v16;
    uint64_t v8 = a1[31];
  }
  else
  {
    uint64_t v7 = (_DWORD *)(a1[10] + 8 * ((void)v5 - a1[7]));
    *uint64_t v7 = *(_DWORD *)a3;
    v7[1] = *((_DWORD *)a3 + 1);
    void v7[2] = *((_DWORD *)a3 + 2);
    v7[3] = *((_DWORD *)a3 + 3);
    void v7[4] = *((_DWORD *)a3 + 4);
    void v7[5] = *((_DWORD *)a3 + 5);
    void v7[6] = *((_DWORD *)a3 + 6);
    void v7[7] = *((_DWORD *)a3 + 7);
    v7[8] = *((_DWORD *)a3 + 8);
    v7[9] = *((_DWORD *)a3 + 9);
    v7[10] = *((_DWORD *)a3 + 10);
    v7[11] = *((_DWORD *)a3 + 11);
    v7[12] = *((_DWORD *)a3 + 12);
    v7[13] = *((_DWORD *)a3 + 13);
    v7[14] = *((_DWORD *)a3 + 14);
    v7[15] = *((_DWORD *)a3 + 15);
    uint64_t v8 = a1[31];
    if (v7 != (_DWORD *)a1[11])
    {
      uint64_t v9 = (void *)a1[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v33 = &v31;
          uint64_t v34 = 1;
          uint64_t v32 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v32, &v33);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v29 = (void *)a1[22];
  if (v29)
  {
    while (1)
    {
      uint64_t v33 = &v31;
      uint64_t v34 = 1;
      uint64_t v32 = v8;
      uint64_t v30 = v29[6];
      if (!v30) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v30 + 48))(v30, &v32, &v33);
      uint64_t v29 = (void *)*v29;
      if (!v29) {
        return;
      }
    }
    goto LABEL_29;
  }
}

void gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(void *a1, uint64_t a2, void *a3)
{
  uint64_t v31 = a2;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v31);
  if (v6)
  {
    long long v14 = (char *)a1[11];
    unint64_t v13 = a1[12];
    if ((unint64_t)v14 >= v13)
    {
      uint64_t v17 = (char *)a1[10];
      uint64_t v18 = (v14 - v17) >> 4;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60) {
        goto LABEL_43;
      }
      uint64_t v20 = v13 - (void)v17;
      if (v20 >> 3 > v19) {
        unint64_t v19 = v20 >> 3;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v22 = (char *)operator new(16 * v21);
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v23 = a3[1];
      long long v24 = &v22[16 * v18];
      *(void *)long long v24 = *a3;
      *((void *)v24 + 1) = v23;
      if (v23)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        uint64_t v17 = (char *)a1[10];
        long long v14 = (char *)a1[11];
      }
      long long v25 = &v22[16 * v21];
      uint64_t v16 = v24 + 16;
      if (v14 == v17)
      {
        a1[10] = v24;
        a1[11] = v16;
        a1[12] = v25;
      }
      else
      {
        do
        {
          long long v26 = *((_OWORD *)v14 - 1);
          v14 -= 16;
          *((_OWORD *)v24 - 1) = v26;
          v24 -= 16;
          *(void *)long long v14 = 0;
          *((void *)v14 + 1) = 0;
        }
        while (v14 != v17);
        uint64_t v17 = (char *)a1[10];
        long long v27 = (char *)a1[11];
        a1[10] = v24;
        a1[11] = v16;
        for (a1[12] = v25; v27 != v17; v27 -= 16)
        {
          long long v28 = (std::__shared_weak_count *)*((void *)v27 - 1);
          if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(void *)long long v14 = *a3;
      uint64_t v15 = a3[1];
      *((void *)v14 + 1) = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = v14 + 16;
    }
    a1[11] = v16;
    uint64_t v10 = a1[31];
  }
  else
  {
    uint64_t v7 = a1[10] + 2 * ((void)v5 - a1[7]);
    long long v8 = *(_OWORD *)a3;
    *a3 = 0;
    a3[1] = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
    *(_OWORD *)uint64_t v7 = v8;
    if (v9)
    {
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    uint64_t v10 = a1[31];
    if (v7 != a1[11])
    {
      unint64_t v11 = (void *)a1[16];
      if (v11)
      {
        while (1)
        {
          uint64_t v33 = &v31;
          uint64_t v34 = 1;
          uint64_t v32 = v10;
          uint64_t v12 = v11[6];
          if (!v12) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v12 + 48))(v12, &v32, &v33);
          unint64_t v11 = (void *)*v11;
          if (!v11) {
            return;
          }
        }
LABEL_42:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
        abort();
      }
      return;
    }
  }
  uint64_t v29 = (void *)a1[22];
  if (v29)
  {
    while (1)
    {
      uint64_t v33 = &v31;
      uint64_t v34 = 1;
      uint64_t v32 = v10;
      uint64_t v30 = v29[6];
      if (!v30) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v30 + 48))(v30, &v32, &v33);
      uint64_t v29 = (void *)*v29;
      if (!v29) {
        return;
      }
    }
    goto LABEL_42;
  }
}

uint64_t gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xBCDEDBDC62731A11;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBCDEDBDC62731A11;
    if (*(void *)&v1 <= 0xBCDEDBDC62731A11) {
      unint64_t v3 = 0xBCDEDBDC62731A11 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBCDEDBDC62731A11;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBCDEDBDC62731A11)
      {
        if (v5[2] == 0xBCDEDBDC62731A11) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBCDEDBDC62731A11) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBCDEDBDC62731A11) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A2234C2C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(int8x8_t *a1)
{
  unint64_t v10 = 0xFEA9AEC0E5ADE148;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xFEA9AEC0E5ADE148;
    if (*(void *)&v1 <= 0xFEA9AEC0E5ADE148) {
      unint64_t v3 = 0xFEA9AEC0E5ADE148 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xFEA9AEC0E5ADE148;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xFEA9AEC0E5ADE148)
      {
        if (v5[2] == 0xFEA9AEC0E5ADE148) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xFEA9AEC0E5ADE148) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xFEA9AEC0E5ADE148) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A2234E9C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'md::ShadowPipelineProxy::setTransformInstanceDeviceData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(uint64_t **)(a3 + 32);
  uint64_t v5 = *(void **)(*a2 + 32);
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  void *v5 = v6;
  v5[1] = 0;
  uint64_t v8 = *(void **)(v3 + 128);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)v8[1];
  *uint64_t v8 = v6;
  v8[1] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void md::ShadowPipelineProxy::setTransformInstanceDeviceData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(uint64_t **)(a3 + 32);
  uint64_t v5 = *(void **)(*a2 + 32);
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  void *v5 = v6;
  v5[1] = 0;
  uint64_t v8 = *(void **)(v3 + 128);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)v8[1];
  *uint64_t v8 = v6;
  v8[1] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void md::ShadowPipelineProxy::~ShadowPipelineProxy(md::ShadowPipelineProxy *this)
{
}

void md::ShadowPipelineProxy::setTransformConstant(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 64);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  *(void *)(v4 + 16) = *a3;
  *(void *)(v4 + 24) = 0;
  uint64_t v7 = *(void *)(v3 + 160);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 24);
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t *a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    char v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = a1 + 2;
  unint64_t v10 = operator new(0x30uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = a1[1];
    }
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_59;
      }
      unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime >= v7)
      {
        unint64_t v7 = a1[1];
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v3 = v6 % v7;
          }
          else {
            unint64_t v3 = v6;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        uint64_t v40 = (void *)*a1;
        *a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v20 = operator new(8 * prime);
    unint64_t v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    uint64_t v23 = (void *)*v13;
    if (!*v13)
    {
LABEL_58:
      unint64_t v7 = prime;
      goto LABEL_59;
    }
    size_t v24 = v23[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*a1 + 8 * v26) = v13;
      for (unint64_t i = (void *)*v23; *v23; unint64_t i = (void *)*v23)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          uint64_t v23 = i;
        }
        else if (*(void *)(*a1 + 8 * v28))
        {
          *uint64_t v23 = *i;
          uint64_t v29 = 8 * v28;
          *unint64_t i = **(void **)(*a1 + v29);
          **(void **)(*a1 + v29) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v28) = v23;
          uint64_t v23 = i;
          size_t v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*a1 + 8 * v24) = v13;
    uint64_t v33 = (void *)*v23;
    if (!*v23) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v24)
      {
        if (!*(void *)(*a1 + 8 * v35))
        {
          *(void *)(*a1 + 8 * v35) = v23;
          goto LABEL_63;
        }
        *uint64_t v23 = *v33;
        uint64_t v34 = 8 * v35;
        *uint64_t v33 = **(void **)(*a1 + v34);
        **(void **)(*a1 + v34) = v33;
        uint64_t v33 = v23;
      }
      size_t v35 = v24;
LABEL_63:
      uint64_t v23 = v33;
      uint64_t v33 = (void *)*v33;
      size_t v24 = v35;
      if (!v33) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v36 = *a1;
  uint64_t v37 = *(void **)(*a1 + 8 * v3);
  if (v37)
  {
    *unint64_t v10 = *v37;
LABEL_80:
    *uint64_t v37 = v10;
    goto LABEL_81;
  }
  *unint64_t v10 = *v13;
  *uint64_t v13 = v10;
  *(void *)(v36 + 8 * v3) = v13;
  if (*v10)
  {
    unint64_t v38 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v7 - 1;
    }
    uint64_t v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_1A2235970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<md::InjectedAsset>,std::hash<std::shared_ptr<md::InjectedAsset>>,std::equal_to<std::shared_ptr<md::InjectedAsset>>,std::allocator<std::shared_ptr<md::InjectedAsset>>>::__emplace_unique_key_args<std::shared_ptr<md::InjectedAsset>,std::shared_ptr<md::InjectedAsset> const&>(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = v9 ^ (v9 >> 47);
  unint64_t v11 = 0x9DDFEA08EB382D69 * v10;
  unint64_t v12 = a1[1];
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * v10;
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    float v14 = *(void **)(*a1 + 8 * v4);
    if (v14)
    {
      float v15 = (void *)*v14;
      if (v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == a2) {
                return;
              }
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_22;
            }
            float v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == a2) {
              return;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          float v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_22:
  unint64_t v18 = a1 + 2;
  uint64_t v19 = operator new(0x20uLL);
  *uint64_t v19 = 0;
  v19[1] = v11;
  v19[2] = a3;
  v19[3] = a4;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  float v20 = (float)(unint64_t)(a1[3] + 1);
  float v21 = *((float *)a1 + 8);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v22 = 1;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v12 = a1[1];
    if (prime <= v12)
    {
      if (prime >= v12) {
        goto LABEL_61;
      }
      unint64_t v36 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v12 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime >= v12)
      {
        unint64_t v12 = a1[1];
LABEL_61:
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12) {
            unint64_t v4 = v11 % v12;
          }
          else {
            unint64_t v4 = v11;
          }
        }
        else
        {
          unint64_t v4 = (v12 - 1) & v11;
        }
        goto LABEL_74;
      }
      if (!prime)
      {
        uint64_t v45 = (void *)*a1;
        *a1 = 0;
        if (v45) {
          operator delete(v45);
        }
        unint64_t v12 = 0;
        a1[1] = 0;
        goto LABEL_61;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    size_t v26 = operator new(8 * prime);
    long long v27 = (void *)*a1;
    *a1 = (uint64_t)v26;
    if (v27) {
      operator delete(v27);
    }
    uint64_t v28 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v28++) = 0;
    while (prime != v28);
    uint64_t v29 = (void *)*v18;
    if (!*v18)
    {
LABEL_60:
      unint64_t v12 = prime;
      goto LABEL_61;
    }
    size_t v30 = v29[1];
    size_t v31 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v32 = v30 & v31;
      *(void *)(*a1 + 8 * v32) = v18;
      for (unint64_t i = (void *)*v29; *v29; unint64_t i = (void *)*v29)
      {
        size_t v34 = i[1] & v31;
        if (v34 == v32)
        {
          uint64_t v29 = i;
        }
        else if (*(void *)(*a1 + 8 * v34))
        {
          *uint64_t v29 = *i;
          uint64_t v35 = 8 * v34;
          *unint64_t i = **(void **)(*a1 + v35);
          **(void **)(*a1 + v35) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v34) = v29;
          uint64_t v29 = i;
          size_t v32 = v34;
        }
      }
      goto LABEL_60;
    }
    if (v30 >= prime) {
      v30 %= prime;
    }
    *(void *)(*a1 + 8 * v30) = v18;
    uint64_t v39 = (void *)*v29;
    if (!*v29) {
      goto LABEL_60;
    }
    while (1)
    {
      size_t v41 = v39[1];
      if (v41 >= prime) {
        v41 %= prime;
      }
      if (v41 != v30)
      {
        if (!*(void *)(*a1 + 8 * v41))
        {
          *(void *)(*a1 + 8 * v41) = v29;
          goto LABEL_65;
        }
        *uint64_t v29 = *v39;
        uint64_t v40 = 8 * v41;
        *uint64_t v39 = **(void **)(*a1 + v40);
        **(void **)(*a1 + v40) = v39;
        uint64_t v39 = v29;
      }
      size_t v41 = v30;
LABEL_65:
      uint64_t v29 = v39;
      uint64_t v39 = (void *)*v39;
      size_t v30 = v41;
      if (!v39) {
        goto LABEL_60;
      }
    }
  }
LABEL_74:
  uint64_t v42 = *a1;
  uint64_t v43 = *(void **)(*a1 + 8 * v4);
  if (v43)
  {
    *uint64_t v19 = *v43;
LABEL_82:
    *uint64_t v43 = v19;
    goto LABEL_83;
  }
  *uint64_t v19 = *v18;
  *unint64_t v18 = v19;
  *(void *)(v42 + 8 * v4) = v18;
  if (*v19)
  {
    unint64_t v44 = *(void *)(*v19 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v44 >= v12) {
        v44 %= v12;
      }
    }
    else
    {
      v44 &= v12 - 1;
    }
    uint64_t v43 = (void *)(*a1 + 8 * v44);
    goto LABEL_82;
  }
LABEL_83:
  ++a1[3];
}

void sub_1A2235E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<std::shared_ptr<md::InjectedAsset>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[3];
      if (v3)
      {
        uint64_t v4 = v2[4];
        uint64_t v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            unint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
            if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            v4 -= 16;
          }
          while (v4 != v3);
          uint64_t v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::AssetInjectionLogic,md::AssetInjectionContext,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0xD77FB76AFC10A710 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  unint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      unint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    unint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

void md::AssetInjectionContext::~AssetInjectionContext(md::AssetInjectionContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    operator delete(v4);
  }
  int8x8_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    do
    {
      uint8x8_t v6 = (void *)*v5;
      operator delete(v5);
      int8x8_t v5 = v6;
    }
    while (v6);
  }
  unint64_t v7 = *(void **)this;
  *(void *)this = 0;
  if (v7) {
    operator delete(v7);
  }
}

uint64_t gdc::ObjectHolder<md::AssetInjectionContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::AssetInjectionContext>::~ManagedObjectHolder(void *a1)
{
  gdc::ManagedObjectHolder<md::AssetInjectionContext>::~ManagedObjectHolder(a1);
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::AssetInjectionContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5558C0;
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 56);
    if (v3)
    {
      do
      {
        uint64_t v4 = (void *)*v3;
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
    int8x8_t v5 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    if (v5) {
      operator delete(v5);
    }
    uint8x8_t v6 = *(void **)(v2 + 16);
    if (v6)
    {
      do
      {
        unint64_t v7 = (void *)*v6;
        operator delete(v6);
        uint8x8_t v6 = v7;
      }
      while (v7);
    }
    unint64_t v8 = *(void **)v2;
    *(void *)uint64_t v2 = 0;
    if (v8) {
      operator delete(v8);
    }
    MEMORY[0x1A6239270](v2, 0x10A0C40864A76ABLL);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::InjectedAsset>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<md::InjectedAsset>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FB18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::InjectedAsset>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FB18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::AssetInjectionLogic::~AssetInjectionLogic(md::AssetInjectionLogic *this)
{
  md::AssetInjectionLogic::~AssetInjectionLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  void *v13;

  *(void *)this = &unk_1EF53AFF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)*((void *)this + 22);
    if (!v3) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v3 = (void *)*((void *)this + 22);
    if (!v3) {
      goto LABEL_16;
    }
  }
  do
  {
    int8x8_t v5 = (void *)*v3;
    uint8x8_t v6 = v3[3];
    if (v6)
    {
      unint64_t v7 = v3[4];
      uint64_t v4 = (void *)v3[3];
      if (v7 != v6)
      {
        do
        {
          unint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
          if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
          v7 -= 16;
        }
        while (v7 != v6);
        uint64_t v4 = (void *)v3[3];
      }
      v3[4] = v6;
      operator delete(v4);
    }
    operator delete(v3);
    uint64_t v3 = v5;
  }
  while (v5);
LABEL_16:
  unint64_t v9 = (void *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 17);
  while (v10)
  {
    unint64_t v11 = v10;
    uint64_t v10 = (void *)*v10;
    uint64_t v12 = (std::__shared_weak_count *)v11[3];
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    operator delete(v11);
  }
  uint64_t v13 = (void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v13) {
    operator delete(v13);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

uint64_t std::__shared_ptr_pointer<ggl::VSLibrary *,std::shared_ptr<ggl::VSLibrary>::__shared_ptr_default_delete<ggl::VSLibrary,ggl::VSLibrary>,std::allocator<ggl::VSLibrary>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::VSLibrary *,std::shared_ptr<ggl::VSLibrary>::__shared_ptr_default_delete<ggl::VSLibrary,ggl::VSLibrary>,std::allocator<ggl::VSLibrary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<ggl::FlyoverLibrary *,std::shared_ptr<ggl::FlyoverLibrary>::__shared_ptr_default_delete<ggl::FlyoverLibrary,ggl::FlyoverLibrary>,std::allocator<ggl::FlyoverLibrary>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::FlyoverLibrary *,std::shared_ptr<ggl::FlyoverLibrary>::__shared_ptr_default_delete<ggl::FlyoverLibrary,ggl::FlyoverLibrary>,std::allocator<ggl::FlyoverLibrary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<ggl::StandardLibrary *,std::shared_ptr<ggl::StandardLibrary>::__shared_ptr_default_delete<ggl::StandardLibrary,ggl::StandardLibrary>,std::allocator<ggl::StandardLibrary>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::StandardLibrary *,std::shared_ptr<ggl::StandardLibrary>::__shared_ptr_default_delete<ggl::StandardLibrary,ggl::StandardLibrary>,std::allocator<ggl::StandardLibrary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_pointer<ggl::CommonLibrary *,std::shared_ptr<ggl::CommonLibrary>::__shared_ptr_default_delete<ggl::CommonLibrary,ggl::CommonLibrary>,std::allocator<ggl::CommonLibrary>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::CommonLibrary *,std::shared_ptr<ggl::CommonLibrary>::__shared_ptr_default_delete<ggl::CommonLibrary,ggl::CommonLibrary>,std::allocator<ggl::CommonLibrary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::IconListLabelPart::debugString(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "IconListLabelPart");
}

uint64_t md::IconListLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, __n128 a5, __n128 a6, double a7)
{
  if (!*(unsigned char *)(a1 + 694)) {
    return md::StackLabelPart::layoutForStaging(a1, a2, a3, a4, a5, a6, a7);
  }
  unint64_t v11 = *(void **)(a1 + 576);
  uint64_t v12 = *(void **)(a1 + 584);
  if (v11 == v12)
  {
LABEL_5:
    uint64_t v55 = a2;
    uint64_t v56 = a3;
    uint64_t v14 = (uint64_t *)(a1 + 576);
    int v59 = 0;
    {
      operator new();
    }
    uint64_t v60 = mdm::Allocator::instance(void)::alloc;
    uint64_t v61 = 0;
    uint64_t v15 = *(void **)(a1 + 576);
    unint64_t v16 = *(void **)(a1 + 584);
    uint64_t v53 = *(void *)(a1 + 592);
    uint64_t v54 = *(void *)(a1 + 600);
    *(void *)(a1 + 584) = 0;
    *(void *)(a1 + 592) = 0;
    *uint64_t v14 = 0;
    __int16 v57 = v15;
    uint64_t v58 = &v59;
    if (v15 != v16)
    {
      uint64_t v17 = v15;
      while (1)
      {
        uint64_t v19 = (void *)*v17;
        if ((*(unsigned int (**)(void))(*(void *)*v17 + 224))(*v17) == 6)
        {
          float v20 = v59;
          float v21 = &v59;
          BOOL v22 = &v59;
          if (v59)
          {
            float v21 = &v59;
            while (1)
            {
              while (1)
              {
                BOOL v22 = (uint64_t **)v20;
                uint64_t v23 = v19[80];
                uint64_t v24 = *(void *)(v20[4] + 640);
                if (md::LabelIcon::operator==(v23, v24)) {
                  break;
                }
                uint64_t v25 = *(void *)(v24 + 16);
                id v26 = *(id *)(v23 + 16);
                LODWORD(v25) = [v26 compareTo:v25];

                if ((v25 & 0x80000000) == 0) {
                  break;
                }
                float v20 = *v22;
                float v21 = v22;
                if (!*v22) {
                  goto LABEL_23;
                }
              }
              uint64_t v27 = v22[4][80];
              uint64_t v28 = v19[80];
              if (md::LabelIcon::operator==(v27, v28)) {
                break;
              }
              uint64_t v29 = *(void *)(v28 + 16);
              id v30 = *(id *)(v27 + 16);
              LODWORD(v29) = [v30 compareTo:v29];

              if ((v29 & 0x80000000) == 0) {
                break;
              }
              float v21 = v22 + 1;
              float v20 = v22[1];
              if (!v20) {
                goto LABEL_23;
              }
            }
            if (*v21)
            {
              (*(void (**)(void *))(*v19 + 8))(v19);
              goto LABEL_10;
            }
          }
LABEL_23:
          size_t v31 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v60 + 16))(v60, 40, 8);
          v31[4] = (uint64_t)v19;
          *size_t v31 = 0;
          v31[1] = 0;
          void v31[2] = (uint64_t)v22;
          void *v21 = v31;
          if (*v58)
          {
            uint64_t v58 = (uint64_t **)*v58;
            size_t v31 = *v21;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v59, v31);
          ++v61;
        }
        size_t v32 = *(void **)(a1 + 584);
        unint64_t v33 = *(void *)(a1 + 592);
        if ((unint64_t)v32 >= v33) {
          break;
        }
        if (v32) {
          void *v32 = v19;
        }
        unint64_t v18 = v32 + 1;
LABEL_9:
        *(void *)(a1 + 584) = v18;
LABEL_10:
        if (++v17 == v16) {
          goto LABEL_52;
        }
      }
      uint64_t v34 = ((uint64_t)v32 - *v14) >> 3;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61) {
        abort();
      }
      uint64_t v36 = v33 - *v14;
      if (v36 >> 2 > v35) {
        unint64_t v35 = v36 >> 2;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v37 = v35;
      }
      if (v37)
      {
        uint64_t v38 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 600) + 16))(*(void *)(a1 + 600), 8 * v37, 8);
        uint64_t v39 = (void *)(v38 + 8 * v34);
        uint64_t v40 = v38 + 8 * v37;
        if (v38) {
          *uint64_t v39 = v19;
        }
      }
      else
      {
        uint64_t v40 = 0;
        uint64_t v39 = (void *)(8 * v34);
      }
      uint64_t v41 = *(void *)(a1 + 584);
      uint64_t v42 = *(void *)(a1 + 576);
      uint64_t v43 = v41 - v42;
      if (v41 == v42)
      {
        uint64_t v45 = v39;
        goto LABEL_50;
      }
      unint64_t v44 = v43 - 8;
      if ((unint64_t)(v43 - 8) < 0x38)
      {
        uint64_t v45 = v39;
      }
      else
      {
        uint64_t v45 = v39;
        if ((unint64_t)(v41 - (void)v39) >= 0x20)
        {
          uint64_t v46 = (v44 >> 3) + 1;
          uint64_t v47 = v39 - 2;
          uint64_t v48 = (long long *)(v41 - 16);
          uint64_t v49 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *uint64_t v47 = v50;
            v47 -= 2;
            v48 -= 2;
            v49 -= 4;
          }
          while (v49);
          uint64_t v45 = &v39[-(v46 & 0x3FFFFFFFFFFFFFFCLL)];
          v41 -= 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
          if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_49;
          }
        }
      }
      do
      {
        uint64_t v51 = *(void *)(v41 - 8);
        v41 -= 8;
        *--uint64_t v45 = v51;
      }
      while (v41 != v42);
LABEL_49:
      uint64_t v41 = *v14;
LABEL_50:
      unint64_t v18 = v39 + 1;
      *(void *)(a1 + 576) = v45;
      *(void *)(a1 + 584) = v39 + 1;
      uint64_t v52 = *(void *)(a1 + 592);
      *(void *)(a1 + 592) = v40;
      if (v41) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 600) + 40))(*(void *)(a1 + 600), v41, v52 - v41);
      }
      goto LABEL_9;
    }
LABEL_52:
    *(unsigned char *)(a1 + 694) = 0;
    if (v57) {
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v54 + 40))(v54, v57, v53 - (void)v57);
    }
    std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v58, v59);
    a3 = v56;
    a2 = v55;
    return md::StackLabelPart::layoutForStaging(a1, a2, a3, a4, a5, a6, a7);
  }
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*v11 + 344))(*v11, a2);
    if (result != 37) {
      return result;
    }
    if (++v11 == v12) {
      goto LABEL_5;
    }
  }
}

void sub_1A2236C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
  if (a14) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a10 + 40))(a10, a14, a9 - a14);
  }
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void md::IconListLabelPart::~IconListLabelPart(md::IconListLabelPart *this)
{
  md::CompositeLabelPart::~CompositeLabelPart(this);
  uint64_t v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  uint64_t v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

void md::FogInfo::updateFogUniformsWithLayoutContext(uint64_t *a1, uint64_t a2, double *a3)
{
  if (!*a1)
  {
    uint64_t v10 = operator new(0xE8uLL);
    v10[1] = 0;
    v10[2] = 0;
    *uint64_t v10 = &unk_1EF586C30;
    uint64_t v11 = ggl::BufferData::BufferData((uint64_t)(v10 + 3), qword_1E9565F98, 2, 1, 6, 1);
    v10[28] = ggl::Fog::Skyfog::reflection(void)::reflection;
    v10[3] = &unk_1EF55E158;
    uint64_t v12 = (std::__shared_weak_count *)a1[1];
    *a1 = v11;
    a1[1] = (uint64_t)v10;
    if (v12)
    {
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  uint8x8_t v6 = *(void **)(a2 + 8);
  int8x8_t v7 = (int8x8_t)v6[1];
  if (!*(void *)&v7) {
    goto LABEL_28;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v9 = 0x1AF456233693CD46;
    if (*(void *)&v7 <= 0x1AF456233693CD46uLL) {
      uint64_t v9 = 0x1AF456233693CD46uLL % *(void *)&v7;
    }
  }
  else
  {
    uint64_t v9 = (*(void *)&v7 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v13 = *(void **)(*v6 + 8 * v9);
  if (!v13) {
    goto LABEL_28;
  }
  uint64_t v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_28;
  }
  if (v8.u32[0] < 2uLL)
  {
    uint64_t v15 = *(void *)&v7 - 1;
    while (1)
    {
      uint64_t v17 = v14[1];
      if (v17 == 0x1AF456233693CD46)
      {
        if (v14[2] == 0x1AF456233693CD46) {
          goto LABEL_26;
        }
      }
      else if ((v17 & v15) != v9)
      {
        goto LABEL_28;
      }
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_28;
      }
    }
  }
  while (1)
  {
    unint64_t v16 = v14[1];
    if (v16 == 0x1AF456233693CD46) {
      break;
    }
    if (v16 >= *(void *)&v7) {
      v16 %= *(void *)&v7;
    }
    if (v16 != v9) {
      goto LABEL_28;
    }
LABEL_15:
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_28;
    }
  }
  if (v14[2] != 0x1AF456233693CD46) {
    goto LABEL_15;
  }
LABEL_26:
  uint64_t v18 = v14[5];
  if (*(void *)(v18 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v19 = *(double **)(v18 + 32);
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v19 = 0;
LABEL_29:
  float v20 = v19[380];
  v21.f64[0] = 0.0;
  BOOL v22 = v20 >= 0.0 && v20 <= 1.0;
  float32x4_t v23 = 0uLL;
  if (v22)
  {
    float v24 = v19[381];
    float v52 = -10.0 / v24;
    gm::operator*<double,4,4,4>(v54.f64, v19 + 395, a3);
    v25.f64[0] = v55;
    uint64_t v26 = v60;
    v25.f64[1] = v59;
    v21.f64[1] = v61;
    float32x4_t v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v25), v21);
    v21.f64[0] = 0.0;
    float32x4_t v23 = vmulq_n_f32(v27, v52);
  }
  float64_t v28 = *(double *)a1;
  float64x2_t v54 = 0uLL;
  unint64_t v29 = *(void *)(*(void *)&v28 + 8);
  v21.f64[1] = v28;
  float32x4_t v53 = v23;
  if (v29) {
    id v30 = *(float32x4_t **)(*(void *)&v28 + 72);
  }
  else {
    id v30 = 0;
  }
  float64x2_t v54 = v21;
  float64_t v55 = 0.0;
  unint64_t v56 = v29;
  uint64_t v58 = v30;
  __int16 v57 = 1;
  v30[1].f32[2] = v20;
  id v31 = *(id *)a2;
  [v31 sizeInPixels];
  float32_t v33 = v32;
  v30[1].f32[1] = v33;

  v30[1].i32[0] = -1055916032;
  *id v30 = v53;
  uint64_t v34 = *(void **)(a2 + 8);
  int8x8_t v35 = (int8x8_t)v34[1];
  if (!*(void *)&v35) {
    goto LABEL_62;
  }
  uint8x8_t v36 = (uint8x8_t)vcnt_s8(v35);
  v36.i16[0] = vaddlv_u8(v36);
  if (v36.u32[0] > 1uLL)
  {
    uint64_t v37 = 0x7C7EC6C7C111B0D0;
    if (*(void *)&v35 <= 0x7C7EC6C7C111B0D0uLL) {
      uint64_t v37 = 0x7C7EC6C7C111B0D0uLL % *(void *)&v35;
    }
  }
  else
  {
    uint64_t v37 = (*(void *)&v35 - 1) & 0x7C7EC6C7C111B0D0;
  }
  uint64_t v38 = *(void **)(*v34 + 8 * v37);
  if (!v38) {
    goto LABEL_62;
  }
  uint64_t v39 = (void *)*v38;
  if (!v39) {
    goto LABEL_62;
  }
  if (v36.u32[0] < 2uLL)
  {
    uint64_t v40 = *(void *)&v35 - 1;
    while (1)
    {
      uint64_t v42 = v39[1];
      if (v42 == 0x7C7EC6C7C111B0D0)
      {
        if (v39[2] == 0x7C7EC6C7C111B0D0) {
          goto LABEL_59;
        }
      }
      else if ((v42 & v40) != v37)
      {
        goto LABEL_62;
      }
      uint64_t v39 = (void *)*v39;
      if (!v39) {
        goto LABEL_62;
      }
    }
  }
  while (2)
  {
    unint64_t v41 = v39[1];
    if (v41 != 0x7C7EC6C7C111B0D0)
    {
      if (v41 >= *(void *)&v35) {
        v41 %= *(void *)&v35;
      }
      if (v41 != v37) {
        goto LABEL_62;
      }
      goto LABEL_48;
    }
    if (v39[2] != 0x7C7EC6C7C111B0D0)
    {
LABEL_48:
      uint64_t v39 = (void *)*v39;
      if (!v39) {
        goto LABEL_62;
      }
      continue;
    }
    break;
  }
LABEL_59:
  uint64_t v43 = v39[5];
  if (*(void *)(v43 + 8) == 0x7C7EC6C7C111B0D0)
  {
    unint64_t v44 = *(__int32 **)(v43 + 32);
    if (v44)
    {
      v30[3].i32[0] = *v44;
      v30[3].i32[1] = v44[1];
      v30[3].i32[2] = v44[2];
      v30[3].i32[3] = v44[3];
      v30[2].i32[0] = v44[4];
      v30[2].i32[1] = v44[5];
      v30[2].i32[2] = v44[6];
      v30[2].i32[3] = v44[7];
      goto LABEL_65;
    }
  }
LABEL_62:
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::SkyLogic::defaultDayFillColor(void)::skyDayDefaultFillColor, (uint64_t)&md::kSkyDayDefaultFillColor);
  }
  v58[3] = (float32x4_t)md::SkyLogic::defaultDayFillColor(void)::skyDayDefaultFillColor;
  {
    geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::SkyLogic::defaultDayHorizonColor(void)::skyDayDefaultHorizonColor, (uint64_t)&md::kSkyDayDefaultHorizonColor);
  }
  v58[2] = (float32x4_t)md::SkyLogic::defaultDayHorizonColor(void)::skyDayDefaultHorizonColor;
LABEL_65:
  float64_t v46 = v55;
  unint64_t v45 = v56;
  if (v56 != *(void *)&v55)
  {
    float64_t v47 = v54.f64[1];
    int v48 = v57;
    int v49 = HIBYTE(v57);
    if (*(void *)&v54.f64[0] && *(unsigned char *)(*(void *)&v54.f64[1] + 17) != 2) {
      (*(void (**)(void))(**(void **)&v54.f64[0] + 64))();
    }
    if (v48 && !v49)
    {
      float64_t v51 = *(double *)(*(void *)&v47 + 56);
      unint64_t v50 = *(void *)(*(void *)&v47 + 64);
      if (v50 == *(void *)&v51) {
        *(void *)&float64_t v51 = *(void *)(*(void *)&v47 + 80) - *(void *)(*(void *)&v47 + 72);
      }
      if (*(void *)&v46 < *(void *)&v51) {
        float64_t v51 = v46;
      }
      if (v50 <= v45) {
        unint64_t v50 = v45;
      }
      if (v50 == *(void *)&v51) {
        unint64_t v50 = *(void *)&v51 + *(void *)(*(void *)&v47 + 80) - *(void *)(*(void *)&v47 + 72);
      }
      *(float64_t *)(*(void *)&v47 + 56) = v51;
      *(void *)(*(void *)&v47 + 64) = v50;
    }
  }
}

void sub_1A223732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  _Unwind_Resume(a1);
}

uint64_t md::GlobeRasterRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 24);
  unsigned int v3 = *v2;
  unsigned int v4 = v2[1];
  BOOL v5 = v3 >= v4;
  if (v3 >= v4) {
    uint8x8_t v6 = v2 + 4;
  }
  else {
    uint8x8_t v6 = 0;
  }
  *(void *)(result + 360) = v6;
  if (v5)
  {
    v2[1] = v2[2];
    LOBYTE(v3) = 1;
  }
  unsigned __int8 *v2 = v3 + 1;
  *(unsigned char *)(result + 368) = v3;
  return result;
}

void *md::GlobeRasterRenderLayer::layout(md::GlobeRasterRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v238 = *MEMORY[0x1E4F143B8];
  v234[0] = &unk_1EF575870;
  v234[1] = a2;
  v232[0] = &unk_1EF5758B8;
  v232[1] = a2;
  unint64_t v233 = v232;
  size_t v237 = v236;
  uint64_t v235 = v234;
  v236[0] = &unk_1EF5758B8;
  v236[1] = a2;
  std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v234);
  if (v233 == v232)
  {
    (*(void (**)(void *))(v232[0] + 32))(v232);
  }
  else if (v233)
  {
    (*(void (**)(void *))(*v233 + 40))(v233);
  }
  if (v235 == v234)
  {
    (*(void (**)(void *))(v234[0] + 32))(v234);
  }
  else if (v235)
  {
    (*(void (**)(void *))(*v235 + 40))(v235);
  }
  unsigned int v4 = (void *)*((void *)a2 + 1);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_32;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x1AF456233693CD46;
    if (*(void *)&v5 <= 0x1AF456233693CD46uLL) {
      uint64_t v7 = 0x1AF456233693CD46uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v5 - 1) & 0x1AF456233693CD46;
  }
  uint8x8_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_32;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_32;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46) {
          goto LABEL_30;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_32;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_32;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x1AF456233693CD46) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_32;
    }
LABEL_19:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_32;
    }
  }
  if (v9[2] != 0x1AF456233693CD46) {
    goto LABEL_19;
  }
LABEL_30:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x1AF456233693CD46)
  {
LABEL_32:
    uint64_t v14 = 0;
    goto LABEL_33;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_33:
  (*(void (**)(unsigned char *__return_ptr, md::GlobeRasterRenderLayer *, const md::LayoutContext *))(*(void *)this + 32))(__p, this, a2);
  unsigned int v15 = (unsigned __int16)**(_WORD **)__p;
  *(void *)&__p[8] = *(void *)__p;
  operator delete(*(void **)__p);
  unint64_t v16 = *(void **)(*(void *)(*((void *)this + 5) + 24) + 8);
  uint64_t v18 = v16[3];
  uint64_t v17 = v16[4];
  if (v17 == v18) {
    goto LABEL_40;
  }
  uint64_t v19 = 0;
  while (1)
  {
    float v20 = *(unsigned __int8 **)(v18 + 8 * v19);
    if (*v20 == v15)
    {
      unint64_t v21 = *((void *)v20 + 1);
      uint64_t v22 = v16[15];
      if (v21 < (v16[16] - v22) >> 3) {
        break;
      }
    }
    if (++v19 >= (unint64_t)((v17 - v18) >> 3)) {
      goto LABEL_40;
    }
  }
  uint64_t v23 = *(void *)(v22 + 8 * v21);
  if (!v23) {
LABEL_40:
  }
    float v24 = 0;
  else {
    float v24 = *(void **)(*(void *)(v23 + 24) + 8 * (v15 >> 8));
  }
  uint64_t v25 = v24[9];
  if (v24[10] != v25) {
    v24[10] = v25;
  }
  v24[4] = 0;
  uint64_t v26 = (uint64_t **)*((void *)this + 44);
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(v26[1]);
  int8x8_t v35 = *v26;
  uint8x8_t v36 = (uint64_t *)(*v26)[4];
  uint64_t v37 = (uint64_t *)(*v26)[5];
  uint64_t v210 = (uint64_t)v24;
  if (v36 != v37)
  {
    uint64_t v208 = v14;
    uint64_t v38 = (void *)v35[1];
    while (1)
    {
      uint64_t v39 = *v36;
      unint64_t v40 = v35[2];
      if ((unint64_t)v38 >= v40) {
        break;
      }
      if (v38) {
        *uint64_t v38 = v39;
      }
      ++v38;
LABEL_46:
      v35[1] = (uint64_t)v38;
      if (++v36 == v37)
      {
        uint64_t v59 = v35[4];
        float v24 = (void *)v210;
        uint64_t v14 = v208;
        if (v59 != v35[5]) {
          v35[5] = v59;
        }
        goto LABEL_75;
      }
    }
    uint64_t v41 = ((uint64_t)v38 - *v35) >> 3;
    if ((unint64_t)(v41 + 1) >> 61) {
      abort();
    }
    uint64_t v42 = v40 - *v35;
    uint64_t v43 = v42 >> 2;
    if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
      uint64_t v43 = v41 + 1;
    }
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v44 = v43;
    }
    if (v44)
    {
      uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35[3] + 16))(v35[3], 8 * v44, 8);
      float64_t v46 = (void *)(v45 + 8 * v41);
      uint64_t v47 = v45 + 8 * v44;
      if (v45) {
        *float64_t v46 = v39;
      }
    }
    else
    {
      uint64_t v47 = 0;
      float64_t v46 = (void *)(8 * v41);
    }
    uint64_t v49 = *v35;
    uint64_t v48 = v35[1];
    uint64_t v50 = v48 - *v35;
    if (v48 == *v35)
    {
      float v52 = v46;
      goto LABEL_71;
    }
    unint64_t v51 = v50 - 8;
    if ((unint64_t)(v50 - 8) < 0x38)
    {
      float v52 = v46;
    }
    else
    {
      float v52 = v46;
      if ((unint64_t)(v48 - (void)v46) >= 0x20)
      {
        uint64_t v53 = (v51 >> 3) + 1;
        float64x2_t v54 = (__n128 *)(v46 - 2);
        float64_t v55 = (__n128 *)(v48 - 16);
        uint64_t v56 = v53 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          __n128 v28 = v55[-1];
          _Q0 = *v55;
          v54[-1] = v28;
          __n128 *v54 = _Q0;
          v54 -= 2;
          v55 -= 2;
          v56 -= 4;
        }
        while (v56);
        float v52 = &v46[-(v53 & 0x3FFFFFFFFFFFFFFCLL)];
        v48 -= 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
        if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_70;
        }
      }
    }
    do
    {
      uint64_t v57 = *(void *)(v48 - 8);
      v48 -= 8;
      *--float v52 = v57;
    }
    while (v48 != v49);
LABEL_70:
    uint64_t v48 = *v35;
LABEL_71:
    uint64_t v38 = v46 + 1;
    *int8x8_t v35 = (uint64_t)v52;
    v35[1] = (uint64_t)(v46 + 1);
    uint64_t v58 = v35[2];
    v35[2] = v47;
    if (v48) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35[3] + 40))(v35[3], v48, v58 - v48);
    }
    goto LABEL_46;
  }
LABEL_75:
  if (*((void *)this + 34) != *((void *)this + 35))
  {
    uint64_t v60 = (uint64_t *)*((void *)a2 + 1);
    int8x8_t v61 = (int8x8_t)v60[1];
    uint8x8_t v62 = (uint8x8_t)vcnt_s8(v61);
    v62.i16[0] = vaddlv_u8(v62);
    unint64_t v63 = v62.u32[0];
    if (v62.u32[0] >= 2uLL)
    {
      unint64_t v66 = 0xE42D19AFCA302E68;
      if (*(void *)&v61 <= 0xE42D19AFCA302E68) {
        unint64_t v66 = 0xE42D19AFCA302E68 % *(void *)&v61;
      }
      uint64_t v64 = *v60;
      unint64_t v65 = *(void **)(v64 + 8 * v66);
      do
      {
        do
          unint64_t v65 = (void *)*v65;
        while (v65[1] != 0xE42D19AFCA302E68);
      }
      while (v65[2] != 0xE42D19AFCA302E68);
    }
    else
    {
      uint64_t v64 = *v60;
      unint64_t v65 = *(void **)(v64 + 8 * ((*(void *)&v61 - 1) & 0xE42D19AFCA302E68));
      do
      {
        do
          unint64_t v65 = (void *)*v65;
        while (v65[1] != 0xE42D19AFCA302E68);
      }
      while (v65[2] != 0xE42D19AFCA302E68);
    }
    uint64_t v67 = *(unsigned __int8 *)(*(void *)(v65[5] + 32) + 72);
    uint64_t v68 = *(void *)(*((void *)this + 44) + 40);
    *(void *)std::vector<unsigned int> __p = 0;
    *(void *)&__p[8] = 0;
    unint64_t v69 = *(void *)(v68 + 8);
    *(void *)&long long v70 = 0;
    *((void *)&v70 + 1) = v68;
    if (v69) {
      uint64_t v71 = *(void *)(v68 + 72);
    }
    else {
      uint64_t v71 = 0;
    }
    *(_OWORD *)std::vector<unsigned int> __p = v70;
    *(void *)&__p[16] = 0;
    *(void *)&long long v222 = v69;
    *(void *)&long long v223 = v71;
    WORD4(v222) = 1;
    if (v63 > 1)
    {
      uint64_t v72 = 0x1AF456233693CD46;
      if (*(void *)&v61 <= 0x1AF456233693CD46uLL) {
        uint64_t v72 = 0x1AF456233693CD46uLL % *(void *)&v61;
      }
    }
    else
    {
      uint64_t v72 = (*(void *)&v61 - 1) & 0x1AF456233693CD46;
    }
    uint64_t v73 = *(void **)(v64 + 8 * v72);
    long long v211 = v70;
    if (!v73) {
      goto LABEL_111;
    }
    uint64_t v74 = (void *)*v73;
    if (!v74) {
      goto LABEL_111;
    }
    if (v63 < 2)
    {
      while (1)
      {
        uint64_t v76 = v74[1];
        if (v76 == 0x1AF456233693CD46)
        {
          if (v74[2] == 0x1AF456233693CD46) {
            goto LABEL_109;
          }
        }
        else if ((v76 & (*(void *)&v61 - 1)) != v72)
        {
          goto LABEL_111;
        }
        uint64_t v74 = (void *)*v74;
        if (!v74) {
          goto LABEL_111;
        }
      }
    }
    while (1)
    {
      unint64_t v75 = v74[1];
      if (v75 == 0x1AF456233693CD46) {
        break;
      }
      if (v75 >= *(void *)&v61) {
        v75 %= *(void *)&v61;
      }
      if (v75 != v72) {
        goto LABEL_111;
      }
LABEL_98:
      uint64_t v74 = (void *)*v74;
      if (!v74) {
        goto LABEL_111;
      }
    }
    if (v74[2] != 0x1AF456233693CD46) {
      goto LABEL_98;
    }
LABEL_109:
    uint64_t v77 = v74[5];
    if (*(void *)(v77 + 8) == 0x1AF456233693CD46)
    {
      uint64_t v78 = *(void *)(v77 + 32);
      goto LABEL_112;
    }
LABEL_111:
    uint64_t v78 = 0;
LABEL_112:
    *(float32x4_t *)uint64_t v71 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v78 + 552)), *(float64x2_t *)(v78 + 568));
    *(float32x4_t *)(v71 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v78 + 584)), *(float64x2_t *)(v78 + 600));
    *(float32x4_t *)(v71 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v78 + 616)), *(float64x2_t *)(v78 + 632));
    *(float32x4_t *)(v71 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v78 + 648)), *(float64x2_t *)(v78 + 664));
    if (v63 > 1)
    {
      uint64_t v79 = 0x41E8D6E445F4145;
      if (*(void *)&v61 <= 0x41E8D6E445F4145uLL) {
        uint64_t v79 = 0x41E8D6E445F4145uLL % *(void *)&v61;
      }
    }
    else
    {
      uint64_t v79 = (*(void *)&v61 - 1) & 0x41E8D6E445F4145;
    }
    unint64_t v80 = *(void **)(v64 + 8 * v79);
    if (!v80) {
      goto LABEL_135;
    }
    unint64_t v81 = (void *)*v80;
    if (!v81) {
      goto LABEL_135;
    }
    if (v63 < 2)
    {
      uint64_t v82 = *(void *)&v61 - 1;
      while (1)
      {
        uint64_t v84 = v81[1];
        if (v84 == 0x41E8D6E445F4145)
        {
          if (v81[2] == 0x41E8D6E445F4145) {
            goto LABEL_132;
          }
        }
        else if ((v84 & v82) != v79)
        {
          goto LABEL_135;
        }
        unint64_t v81 = (void *)*v81;
        if (!v81) {
          goto LABEL_135;
        }
      }
    }
    while (2)
    {
      unint64_t v83 = v81[1];
      if (v83 != 0x41E8D6E445F4145)
      {
        if (v83 >= *(void *)&v61) {
          v83 %= *(void *)&v61;
        }
        if (v83 != v79) {
          goto LABEL_135;
        }
        goto LABEL_121;
      }
      if (v81[2] != 0x41E8D6E445F4145)
      {
LABEL_121:
        unint64_t v81 = (void *)*v81;
        if (!v81) {
          goto LABEL_135;
        }
        continue;
      }
      break;
    }
LABEL_132:
    uint64_t v85 = v81[5];
    if (*(void *)(v85 + 8) == 0x41E8D6E445F4145)
    {
      uint64_t v86 = *(void *)(v85 + 32);
      if (v86)
      {
        float v87 = *(double *)(v86 + 176);
        *(float32x2_t *)(v71 + 96) = vcvt_f32_f64(*(float64x2_t *)(v86 + 160));
        *(float *)(v71 + 104) = v87;
        int v88 = *(_DWORD *)(v86 + 424);
        goto LABEL_136;
      }
    }
LABEL_135:
    id v89 = objc_alloc_init(MEMORY[0x1E4F643C8]);
    v213.n128_u64[0] = 0;
    double v231 = 0.0;
    double v230 = 0.0;
    [v89 calculateGeocentricDirectionForSunX:&v213 Y:&v231 Z:&v230];
    float v90 = v213.n128_f64[0];
    float v91 = v231;
    float v92 = v230;
    *(float *)(v71 + 96) = v90;
    *(float *)(v71 + 100) = v91;
    *(float *)(v71 + 104) = v92;

    int v88 = 0;
LABEL_136:
    _ZF = *(double *)(v78 + 32) < 6378137.0 && v67 == 1;
    *(_DWORD *)(v71 + 112) = v88;
    float v94 = -1.0;
    if (!_ZF) {
      float v94 = 1.0;
    }
    if (**((unsigned char **)a2 + 9)) {
      float v94 = 0.0;
    }
    *(float32x2_t *)(v71 + 64) = vmul_n_f32((float32x2_t)0x3F4CCCCD3F333333, v94);
    *(float *)(v71 + 72) = v94;
    long double v95 = *(double *)(v78 + 512);
    double v96 = *(double *)(v78 + 496) * *(double *)(v78 + 496) + *(double *)(v78 + 504) * *(double *)(v78 + 504);
    float v97 = sqrt(v96 + v95 * v95) + -6371008.77;
    float v98 = fmaxf(v97, 0.0);
    double v99 = sqrt(v96);
    double v100 = atan2(v95, v99 * 0.996647189);
    __double2 v101 = __sincos_stret(v100);
    double v102 = atan2(v95 + v101.__sinval * v101.__sinval * 42841.3115 * v101.__sinval, v99 + v101.__cosval * v101.__cosval * -42697.6727 * v101.__cosval);
    __double2 v103 = __sincos_stret(v102);
    float v104 = v99 / v103.__cosval - 6378137.0 / sqrt(v103.__sinval * v103.__sinval * -0.00669437999 + 1.0);
    float v105 = fmaxf(v104, 1.0);
    double v106 = v105;
    float v107 = sqrt((float)(v105 * v105) + v105 * 12742017.5);
    float v108 = v107 - v98;
    double v109 = fmax(v106, 0.0);
    if (v109 <= 8000.0) {
      double v110 = v109 * 0.000125;
    }
    else {
      double v110 = 1.0;
    }
    float v111 = v108 + (v110 * v110 * (v110 * 2.0 + -3.0) + 1.0) * (float)(v108 * -0.5);
    *(float *)(v71 + 80) = v98;
    *(float *)(v71 + 84) = v111;
    if (v69)
    {
      if ((void)v211 && *(unsigned char *)(*((void *)&v211 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v211 + 64))();
      }
      unint64_t v112 = *(void *)(*((void *)&v211 + 1) + 64);
      if (v112 <= v69) {
        unint64_t v112 = v69;
      }
      *(void *)(*((void *)&v211 + 1) + 56) = 0;
      *(void *)(*((void *)&v211 + 1) + 64) = v112;
    }
    uint64_t v113 = (void *)*((void *)this + 44);
    long long v114 = (void *)v113[7];
    unint64_t v115 = v114[1];
    *(_OWORD *)v114[9] = xmmword_1A28FE6E0;
    if (v114[8] > v115) {
      unint64_t v115 = v114[8];
    }
    v114[7] = 0;
    v114[8] = v115;
    uint64_t v116 = (void *)v113[9];
    unint64_t v117 = v116[1];
    *(_OWORD *)v116[9] = xmmword_1A28FE6F0;
    if (v116[8] > v117) {
      unint64_t v117 = v116[8];
    }
    v116[7] = 0;
    v116[8] = v117;
    uint64_t v118 = (void *)v113[11];
    unint64_t v119 = v118[1];
    *(_OWORD *)v118[9] = xmmword_1A28FCDA0;
    if (v118[8] > v119) {
      unint64_t v119 = v118[8];
    }
    v118[7] = 0;
    v118[8] = v119;
    long long v223 = 0u;
    uint64_t v225 = 0;
    long long v228 = 0u;
    long long v227 = 0u;
    long long v224 = 0u;
    long long v222 = 0u;
    *(_OWORD *)&__p[8] = 0u;
    *(void *)std::vector<unsigned int> __p = 0x415854A640000000;
    *(void *)&long long v223 = 0x415854A640000000;
    uint64_t v229 = 0x3FF0000000000000;
    uint64_t v226 = 0x41583FC4141C97D0;
    gm::operator*<double,4,4,4>(v213.n128_f64, (double *)(v14 + 3160), (double *)__p);
    __n128 v34 = v213;
    __n128 v31 = v214;
    __n128 v33 = v215;
    __n128 v29 = v216;
    __n128 v32 = v217;
    __n128 v28 = v218;
    __n128 v30 = v219;
    _Q0 = v220;
    uint64_t v120 = v113[3];
    v24[4] = *((void *)this + 45);
    uint64_t v209 = v120;
    *(unsigned char *)(v120 + 55) = *((unsigned char *)this + 368);
    unint64_t v121 = (uint64_t *)*((void *)this + 34);
    uint64_t v212 = (uint64_t *)*((void *)this + 35);
    if (v121 != v212)
    {
      __n128 v34 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v34), (float64x2_t)v31);
      __n128 v31 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v33), (float64x2_t)v29);
      __n128 v206 = v31;
      __n128 v207 = v34;
      __n128 v29 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v32), (float64x2_t)v28);
      __n128 v28 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v30), (float64x2_t)_Q0);
      __n128 v204 = v28;
      __n128 v205 = v29;
      __asm { FMOV            V0.2D, #1.0 }
      float64x2_t v203 = (float64x2_t)_Q0;
      while (1)
      {
        uint64_t v125 = *v121;
        uint64_t v126 = *(void *)(*(void *)(*v121 + 384) + 720);
        if (v126) {
          break;
        }
LABEL_162:
        if (++v121 == v212) {
          goto LABEL_263;
        }
      }
      uint64_t v127 = (void *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(void *)(*((void *)this + 44) + 8));
      v127[3] = v209;
      v127[8] = *(void *)(*((void *)this + 44) + 16);
      uint64_t v128 = **((void **)this + 44);
      uint64_t v129 = *(void *)(v128 + 8);
      if (v129 == *(void *)v128)
      {
        uint64_t v141 = *(void *)(v128 + 88);
        if (!v141) {
          goto LABEL_272;
        }
        __int16 v130 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v141 + 48))(v141);
        uint64_t v131 = *(void **)(v128 + 40);
        unint64_t v142 = *(void *)(v128 + 48);
        if ((unint64_t)v131 >= v142)
        {
          uint64_t v144 = *(void *)(v128 + 32);
          uint64_t v145 = ((uint64_t)v131 - v144) >> 3;
          unint64_t v146 = v145 + 1;
          if ((unint64_t)(v145 + 1) >> 61) {
LABEL_271:
          }
            abort();
          uint64_t v147 = v142 - v144;
          if (v147 >> 2 > v146) {
            unint64_t v146 = v147 >> 2;
          }
          if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8) {
            uint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v148 = v146;
          }
          if (v148)
          {
            uint64_t v149 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v128 + 56) + 16))(*(void *)(v128 + 56), 8 * v148, 8);
            unsigned int v139 = (void *)(v149 + 8 * v145);
            uint64_t v140 = v149 + 8 * v148;
            if (v149) {
              *unsigned int v139 = v130;
            }
          }
          else
          {
            uint64_t v140 = 0;
            unsigned int v139 = (void *)(8 * v145);
          }
          uint64_t v160 = *(void *)(v128 + 32);
          uint64_t v150 = *(void *)(v128 + 40);
          uint64_t v161 = v150 - v160;
          if (v150 != v160)
          {
            unint64_t v162 = v161 - 8;
            if ((unint64_t)(v161 - 8) < 0x38)
            {
              uint64_t v154 = v139;
            }
            else
            {
              uint64_t v154 = v139;
              if ((unint64_t)(v150 - (void)v139) >= 0x20)
              {
                uint64_t v163 = (v162 >> 3) + 1;
                int v164 = v139 - 2;
                int v165 = (long long *)(v150 - 16);
                uint64_t v166 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v167 = *v165;
                  *(v164 - 1) = *(v165 - 1);
                  *int v164 = v167;
                  v164 -= 2;
                  v165 -= 2;
                  v166 -= 4;
                }
                while (v166);
                uint64_t v154 = &v139[-(v163 & 0x3FFFFFFFFFFFFFFCLL)];
                v150 -= 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_211;
                }
              }
            }
            do
            {
              uint64_t v169 = *(void *)(v150 - 8);
              v150 -= 8;
              *--uint64_t v154 = v169;
            }
            while (v150 != v160);
            goto LABEL_211;
          }
LABEL_205:
          uint64_t v154 = v139;
          goto LABEL_212;
        }
      }
      else
      {
        __int16 v130 = *(void **)(v129 - 8);
        *(void *)(v128 + 8) = v129 - 8;
        uint64_t v131 = *(void **)(v128 + 40);
        unint64_t v132 = *(void *)(v128 + 48);
        if ((unint64_t)v131 >= v132)
        {
          uint64_t v133 = *(void *)(v128 + 32);
          uint64_t v134 = ((uint64_t)v131 - v133) >> 3;
          unint64_t v135 = v134 + 1;
          if ((unint64_t)(v134 + 1) >> 61) {
            goto LABEL_271;
          }
          uint64_t v136 = v132 - v133;
          if (v136 >> 2 > v135) {
            unint64_t v135 = v136 >> 2;
          }
          if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8) {
            uint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v137 = v135;
          }
          if (v137)
          {
            uint64_t v138 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v128 + 56) + 16))(*(void *)(v128 + 56), 8 * v137, 8);
            unsigned int v139 = (void *)(v138 + 8 * v134);
            uint64_t v140 = v138 + 8 * v137;
            if (v138) {
              *unsigned int v139 = v130;
            }
          }
          else
          {
            uint64_t v140 = 0;
            unsigned int v139 = (void *)(8 * v134);
          }
          uint64_t v151 = *(void *)(v128 + 32);
          uint64_t v150 = *(void *)(v128 + 40);
          uint64_t v152 = v150 - v151;
          if (v150 != v151)
          {
            unint64_t v153 = v152 - 8;
            if ((unint64_t)(v152 - 8) < 0x38)
            {
              uint64_t v154 = v139;
            }
            else
            {
              uint64_t v154 = v139;
              if ((unint64_t)(v150 - (void)v139) >= 0x20)
              {
                uint64_t v155 = (v153 >> 3) + 1;
                uint64_t v156 = v139 - 2;
                uint64_t v157 = (long long *)(v150 - 16);
                uint64_t v158 = v155 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v159 = *v157;
                  *(v156 - 1) = *(v157 - 1);
                  *uint64_t v156 = v159;
                  v156 -= 2;
                  v157 -= 2;
                  v158 -= 4;
                }
                while (v158);
                uint64_t v154 = &v139[-(v155 & 0x3FFFFFFFFFFFFFFCLL)];
                v150 -= 8 * (v155 & 0x3FFFFFFFFFFFFFFCLL);
                if (v155 == (v155 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_211;
                }
              }
            }
            do
            {
              uint64_t v168 = *(void *)(v150 - 8);
              v150 -= 8;
              *--uint64_t v154 = v168;
            }
            while (v150 != v151);
LABEL_211:
            uint64_t v150 = *(void *)(v128 + 32);
LABEL_212:
            uint64_t v143 = v139 + 1;
            *(void *)(v128 + 32) = v154;
            *(void *)(v128 + 40) = v139 + 1;
            uint64_t v170 = *(void *)(v128 + 48);
            *(void *)(v128 + 48) = v140;
            if (v150) {
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v128 + 56) + 40))(*(void *)(v128 + 56), v150, v170 - v150);
            }
            goto LABEL_214;
          }
          goto LABEL_205;
        }
      }
      if (v131) {
        *uint64_t v131 = v130;
      }
      uint64_t v143 = v131 + 1;
LABEL_214:
      *(void *)(v128 + 40) = v143;
      v213.n128_u64[0] = (unint64_t)v130;
      uint64_t v171 = *(void *)(v128 + 120);
      if (!v171) {
        goto LABEL_272;
      }
      (*(void (**)(uint64_t, __n128 *))(*(void *)v171 + 48))(v171, &v213);
      uint64_t v172 = (void *)v130[8];
      unint64_t v173 = v172[2];
      __n128 v213 = 0uLL;
      unint64_t v174 = *(void *)(v173 + 8);
      v175.n128_u64[0] = 0;
      v175.n128_u64[1] = v173;
      unint64_t v176 = *(void *)(v173 + 72);
      __n128 v213 = v175;
      v214.n128_u64[0] = 0;
      v214.n128_u64[1] = v174;
      v215.n128_u64[1] = v176;
      v215.n128_u16[0] = 1;
      LOBYTE(v174) = *(unsigned char *)(v125 + 25);
      int v177 = *(unsigned __int8 *)(v125 + 24);
      *(_DWORD *)(v176 + 80) = v177;
      *(__n128 *)unint64_t v176 = v207;
      *(__n128 *)(v176 + 16) = v206;
      *(__n128 *)(v176 + 32) = v205;
      *(__n128 *)(v176 + 48) = v204;
      int32x2_t v178 = vrev64_s32(*(int32x2_t *)(v125 + 28));
      v179.i64[0] = v178.u32[0];
      v179.i64[1] = v178.u32[1];
      float64x2_t v180 = vdivq_f64(v203, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(1 << v174)), 0));
      float64x2_t v181 = vmulq_f64(vcvtq_f64_u64(v179), v180);
      int32x2_t v182 = vadd_s32(v178, (int32x2_t)0x100000001);
      v179.i64[0] = v182.u32[0];
      v179.i64[1] = v182.u32[1];
      float32x2_t v183 = vcvt_f32_f64(v181);
      *(float32x2_t *)(v176 + 64) = vsub_f32(vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v179), v180)), v183);
      *(float32x2_t *)(v176 + 72) = v183;
      if (v177 == 5)
      {
        uint64_t v184 = (uint64_t *)(*((void *)this + 44) + 72);
      }
      else if (v177 == 2)
      {
        uint64_t v184 = (uint64_t *)(*((void *)this + 44) + 56);
      }
      else
      {
        uint64_t v184 = (uint64_t *)(*((void *)this + 44) + 88);
      }
      v172[5] = 0;
      uint64_t v185 = *v184;
      v172[4] = *v184;
      uint64_t v186 = v130[20];
      uint64_t v187 = v184[1];
      if (v187) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v187 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v188 = *(std::__shared_weak_count **)(v186 + 40);
      *(void *)(v186 + 32) = v185;
      *(void *)(v186 + 40) = v187;
      if (v188 && !atomic_fetch_add(&v188->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
        std::__shared_weak_count::__release_weak(v188);
      }
      *(void *)(v130[12] + 8) = v126;
      uint64_t v189 = *((void *)this + 44);
      uint64_t v191 = *(void *)(v189 + 104);
      uint64_t v190 = *(std::__shared_weak_count **)(v189 + 112);
      if (v190) {
        atomic_fetch_add_explicit(&v190->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v191 && **(void **)(v191 + 40) == v130[1])
      {
        uint64_t v193 = v130[2];
        if (v193 && v193 != v191) {
          ggl::PipelineSetup::resetData((uint64_t)v130);
        }
        if (v190) {
          atomic_fetch_add_explicit(&v190->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v192 = (std::__shared_weak_count *)v130[3];
        v130[2] = v191;
        v130[3] = v190;
        if (!v192) {
          goto LABEL_238;
        }
      }
      else
      {
        int v192 = (std::__shared_weak_count *)v130[3];
        v130[2] = 0;
        v130[3] = 0;
        if (!v192) {
          goto LABEL_238;
        }
      }
      if (!atomic_fetch_add(&v192->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
        std::__shared_weak_count::__release_weak(v192);
        if (v190)
        {
LABEL_239:
          if (!atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
          }
        }
LABEL_242:
        v127[4] = v130;
        if (v130[9] != v130[8])
        {
          unint64_t v194 = 0;
          do
          {
            (*(void (**)(void *, unint64_t))(*v130 + 16))(v130, v194++);
            __int16 v130 = (void *)v127[4];
          }
          while (v194 < (uint64_t)(v130[9] - v130[8]) >> 4);
        }
        if (v130[13] != v130[12])
        {
          unint64_t v195 = 0;
          do
          {
            (*(void (**)(void *, unint64_t))(*v130 + 24))(v130, v195++);
            __int16 v130 = (void *)v127[4];
          }
          while (v195 < (uint64_t)(v130[13] - v130[12]) >> 3);
        }
        ggl::CommandBuffer::pushRenderItem(v210, (uint64_t)v127);
        if (v215.n128_u64[1])
        {
          __n128 v196 = v214;
          if (v214.n128_u64[1] != v214.n128_u64[0])
          {
            uint64_t v197 = (void *)v213.n128_u64[1];
            int v198 = v215.n128_u8[0];
            int v199 = v215.n128_u8[1];
            if (v213.n128_u64[0] && *(unsigned char *)(v213.n128_u64[1] + 17) != 2) {
              (*(void (**)(void))(*(void *)v213.n128_u64[0] + 64))();
            }
            if (v198 && !v199)
            {
              unint64_t v200 = v197[7];
              unint64_t v201 = v197[8];
              if (v201 == v200) {
                unint64_t v200 = v197[10] - v197[9];
              }
              if (v196.n128_u64[0] < v200) {
                unint64_t v200 = v196.n128_u64[0];
              }
              if (v201 <= v196.n128_u64[1]) {
                unint64_t v201 = v196.n128_u64[1];
              }
              if (v201 == v200) {
                unint64_t v201 = v200 + v197[10] - v197[9];
              }
              v197[7] = v200;
              v197[8] = v201;
            }
          }
        }
        goto LABEL_162;
      }
LABEL_238:
      if (v190) {
        goto LABEL_239;
      }
      goto LABEL_242;
    }
  }
LABEL_263:
  if (!v237)
  {
LABEL_272:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))(*v237 + 48))(v237, _Q0, v28, v29, v30, v31, v32, v33, v34);
  uint64_t result = v237;
  if (v237 == v236) {
    return (void *)(*(uint64_t (**)(void *))(v236[0] + 32))(v236);
  }
  if (v237) {
    return (void *)(*(uint64_t (**)(void))(*v237 + 40))();
  }
  return result;
}

void sub_1A2238754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a39);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v40 - 184));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  unsigned int v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "GlobeRasterLayout", "", v5, 2u);
  }
}

void std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  unsigned int v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GlobeRasterLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5758B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5758B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575870;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF575870;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GlobeRasterRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::GlobeRasterRenderLayer::~GlobeRasterRenderLayer(md::GlobeRasterRenderLayer *this)
{
  *(void *)this = &unk_1EF541520;
  uint64_t v2 = (md::GlobeRasterRenderResources *)*((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v2)
  {
    md::GlobeRasterRenderResources::~GlobeRasterRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::~CartographicTiledRenderLayer((uint64_t)this);
  JUMPOUT(0x1A6239270);
}

{
  md::GlobeRasterRenderResources *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF541520;
  uint64_t v2 = (md::GlobeRasterRenderResources *)*((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v2)
  {
    md::GlobeRasterRenderResources::~GlobeRasterRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::~CartographicTiledRenderLayer((uint64_t)this);
}

void md::GlobeRasterRenderResources::~GlobeRasterRenderResources(md::GlobeRasterRenderResources *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  os_signpost_id_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int8x8_t v5 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    int8x8_t v5 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v10)
  {
    uint64_t v11 = ggl::FragmentedPool<ggl::RenderItem>::~FragmentedPool(v10);
    MEMORY[0x1A6239270](v11, 0x10A0C40D234DDC7);
  }
  uint64_t v12 = *(void *)this;
  *(void *)this = 0;
  if (v12)
  {
    uint64_t v13 = ggl::FragmentedPool<ggl::DaVinci::GlobeTexturedPipelineSetup>::~FragmentedPool(v12);
    MEMORY[0x1A6239270](v13, 0x10A0C40D234DDC7);
  }
}

uint64_t ggl::FragmentedPool<ggl::DaVinci::GlobeTexturedPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  os_signpost_id_t v4 = *(void **)a1;
  int8x8_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::GlobeTexturedPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::DaVinci::GlobeTexturedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5896A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::DaVinci::GlobeTexturedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5896A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci26GlobeTexturedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C360;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7DaVinci26GlobeTexturedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::GlobeTexturedPipelineSetup * ()(void)>::operator()()
{
}

void ggl::ConstantDataTyped<ggl::DaVinci::S2Transform>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::S2Transform>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::S2Transform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::S2Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::S2Transform>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::GlobeTexturedPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5779E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::DaVinci::GlobeTexturedPipelineSetup * ()(void)>::~__func()
{
}

void ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::RenderItem * ()(void)>::operator()()
{
}

void *std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::RenderItem * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF5779A0;
  return result;
}

void std::__function::__func<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::GlobeRasterRenderResources::GlobeRasterRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::RenderItem * ()(void)>::~__func()
{
}

void LabelPlacementToShortString(std::string *this, unsigned char *a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  switch(*a2)
  {
    case 0:
      std::string::size_type v4 = 2;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
      __int16 v5 = 26180;
      goto LABEL_7;
    case 1:
      std::string::size_type v4 = 2;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
      __int16 v5 = 25427;
      goto LABEL_7;
    case 2:
      std::string::size_type v4 = 2;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
      __int16 v5 = 24899;
LABEL_7:
      LOWORD(__s.__r_.__value_.__l.__data_) = v5;
      __s.__r_.__value_.__s.__data_[2] = 0;
      break;
    case 3:
      std::string::size_type v4 = 4;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 4;
      int v6 = 2017812803;
LABEL_15:
      LODWORD(__s.__r_.__value_.__l.__data_) = v6;
      __s.__r_.__value_.__s.__data_[4] = 0;
      break;
    case 4:
      std::string::size_type v4 = 7;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__s, "AutoOff");
      break;
    case 5:
      std::string::size_type v4 = 8;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&__s, "FeatNrml");
      break;
    default:
      switch(*a2)
      {
        case 'd':
          std::string::size_type v4 = 4;
          *((unsigned char *)&__s.__r_.__value_.__s + 23) = 4;
          int v6 = 2017813331;
          goto LABEL_15;
        case 'e':
          std::string::size_type v4 = 6;
          *((unsigned char *)&__s.__r_.__value_.__s + 23) = 6;
          strcpy((char *)&__s, "TLnOff");
          break;
        case 'f':
          std::string::size_type v4 = 5;
          *((unsigned char *)&__s.__r_.__value_.__s + 23) = 5;
          strcpy((char *)&__s, "RtOff");
          break;
        case 'g':
          std::string::size_type v4 = 4;
          *((unsigned char *)&__s.__r_.__value_.__s + 23) = 4;
          int v6 = 2037149520;
          goto LABEL_15;
        default:
          std::string::size_type v4 = 0;
          *((unsigned char *)&__s.__r_.__value_.__s + 23) = 0;
          __s.__r_.__value_.__s.__data_[0] = 0;
          break;
      }
      break;
  }
  std::string::append(this, (const std::string::value_type *)&__s, v4);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  std::string::append(this, ":", 1uLL);
  switch(a2[3])
  {
    case 0:
      unsigned int v8 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "R");
      break;
    case 1:
      unsigned int v8 = 2;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
      __int16 v9 = 21076;
      goto LABEL_27;
    case 2:
      unsigned int v8 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "T");
      break;
    case 3:
      unsigned int v8 = 2;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
      __int16 v9 = 19540;
      goto LABEL_27;
    case 4:
      unsigned int v8 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "L");
      break;
    case 5:
      unsigned int v8 = 2;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
      __int16 v9 = 19522;
      goto LABEL_27;
    case 6:
      unsigned int v8 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "B");
      break;
    case 7:
      unsigned int v8 = 2;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
      __int16 v9 = 21058;
LABEL_27:
      LOWORD(__s.__r_.__value_.__l.__data_) = v9;
      __s.__r_.__value_.__s.__data_[2] = 0;
      break;
    case 8:
      unsigned int v8 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "C");
      break;
    case 9:
      unsigned int v8 = 4;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__s, "None");
      break;
    case 0xA:
      LOBYTE(v7) = a2[4];
      std::to_string(&__s, (int)(float)((float)v7 * 1.4118));
      unsigned int v8 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      break;
    default:
      unsigned int v8 = 0;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 0;
      __s.__r_.__value_.__s.__data_[0] = 0;
      break;
  }
  if ((v8 & 0x80u) == 0) {
    p_s = &__s;
  }
  else {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type size = v8;
  }
  else {
    std::string::size_type size = __s.__r_.__value_.__l.__size_;
  }
  std::string::append(this, (const std::string::value_type *)p_s, size);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  std::string::append(this, ":", 1uLL);
  switch(a2[1])
  {
    case 0:
      std::string::size_type v12 = 2;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
      __int16 v13 = 28494;
      goto LABEL_53;
    case 1:
      std::string::size_type v12 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "H");
      goto LABEL_55;
    case 2:
      std::string::size_type v12 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      strcpy((char *)&__s, "V");
      goto LABEL_55;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 0xA:
    case 0xB:
    case 0xE:
    case 0xF:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
      goto LABEL_44;
    case 4:
      std::string::size_type v12 = 4;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 4;
      int v14 = 1432841793;
      goto LABEL_49;
    case 8:
      std::string::size_type v12 = 4;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 4;
      int v14 = 1147629121;
LABEL_49:
      LODWORD(__s.__r_.__value_.__l.__data_) = v14;
      __s.__r_.__value_.__s.__data_[4] = 0;
      goto LABEL_55;
    case 0xC:
      std::string::size_type v12 = 3;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 3;
      strcpy((char *)&__s, "Ang");
      goto LABEL_55;
    case 0xD:
      std::string::size_type v12 = 6;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__s, "HOrAng");
      goto LABEL_55;
    case 0x10:
      std::string::size_type v12 = 2;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
      __int16 v13 = 25936;
      goto LABEL_53;
    case 0x20:
      std::string::size_type v12 = 5;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__s, "AutoV");
      goto LABEL_55;
    default:
      if (a2[1] == 128)
      {
        std::string::size_type v12 = 2;
        *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
        __int16 v13 = 26180;
LABEL_53:
        LOWORD(__s.__r_.__value_.__l.__data_) = v13;
        __s.__r_.__value_.__s.__data_[2] = 0;
      }
      else
      {
LABEL_44:
        std::string::size_type v12 = 0;
        *((unsigned char *)&__s.__r_.__value_.__s + 23) = 0;
        __s.__r_.__value_.__s.__data_[0] = 0;
      }
LABEL_55:
      std::string::append(this, (const std::string::value_type *)&__s, v12);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      return;
  }
}

void sub_1A2239F7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::to_string(uint64_t result, int a2)
{
  switch(a2)
  {
    case 0:
      {
        uint64_t v41 = result;
        uint64_t result = v41;
        if (v11) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 4;
      int v2 = 1701736270;
      goto LABEL_10;
    case 1:
      {
        uint64_t v43 = result;
        uint64_t result = v43;
        if (v13) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 5;
      strcpy((char *)result, "Point");
      return result;
    case 2:
      {
        uint64_t v44 = result;
        uint64_t result = v44;
        if (v14) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 4;
      int v2 = 1701734732;
LABEL_10:
      *(_DWORD *)uint64_t result = v2;
      *(unsigned char *)(result + 4) = 0;
      return result;
    case 3:
      {
        uint64_t v45 = result;
        uint64_t result = v45;
        if (v15) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      uint64_t v3 = "PhysicalFeature";
      goto LABEL_57;
    case 4:
      {
        uint64_t v46 = result;
        uint64_t result = v46;
        if (v16) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1701734732;
      std::string::size_type v4 = "ContourLine";
      goto LABEL_27;
    case 5:
      {
        uint64_t v47 = result;
        uint64_t result = v47;
        if (v17) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1701734732;
      std::string::size_type v4 = "OverlayLine";
      goto LABEL_27;
    case 6:
      {
        uint64_t v48 = result;
        uint64_t result = v48;
        if (v18) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      __int16 v5 = "ScreenFeature";
      goto LABEL_50;
    case 7:
      {
        uint64_t v49 = result;
        uint64_t result = v49;
        if (v19) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      uint64_t v3 = "TrafficIncident";
      goto LABEL_57;
    case 8:
      {
        uint64_t v50 = result;
        uint64_t result = v50;
        if (v20) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1701080910;
      std::string::size_type v4 = "TransitNode";
      goto LABEL_27;
    case 9:
      {
        uint64_t v51 = result;
        uint64_t result = v51;
        if (v21) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1701734732;
      std::string::size_type v4 = "TransitLine";
      goto LABEL_27;
    case 10:
      {
        uint64_t v52 = result;
        uint64_t result = v52;
        if (v22) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 11;
      *(_DWORD *)(result + 7) = 1802398028;
      std::string::size_type v4 = "TransitLink";
LABEL_27:
      *(void *)uint64_t result = *(void *)v4;
      *(unsigned char *)(result + 11) = 0;
      return result;
    case 11:
      {
        uint64_t v53 = result;
        uint64_t result = v53;
        if (v23) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 18;
      strcpy((char *)result, "TransitAccessPoint");
      return result;
    case 12:
      {
        uint64_t v54 = result;
        uint64_t result = v54;
        if (v24) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 16;
      int v6 = "RouteTransitNode";
      goto LABEL_62;
    case 13:
      {
        uint64_t v55 = result;
        uint64_t result = v55;
        if (v25) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 16;
      int v6 = "RouteTransitLine";
      goto LABEL_62;
    case 14:
      {
        uint64_t v56 = result;
        uint64_t result = v56;
        if (v26) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 101;
      unsigned int v7 = "RouteLine";
      goto LABEL_47;
    case 15:
      {
        uint64_t v57 = result;
        uint64_t result = v57;
        if (v27) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      __int16 v5 = "TrafficCamera";
      goto LABEL_50;
    case 16:
      {
        uint64_t v58 = result;
        uint64_t result = v58;
        if (v28) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 8;
      uint64_t v8 = 0x6174456574756F52;
      goto LABEL_44;
    case 17:
      {
        uint64_t v59 = result;
        uint64_t result = v59;
        if (v29) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 10;
      strcpy((char *)result, "MuninPoint");
      return result;
    case 18:
      {
        uint64_t v60 = result;
        uint64_t result = v60;
        if (v30) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 8;
      uint64_t v8 = 0x696F506E696E754DLL;
LABEL_44:
      *(void *)uint64_t result = v8;
      *(unsigned char *)(result + 8) = 0;
      return result;
    case 19:
      {
        uint64_t v61 = result;
        uint64_t result = v61;
        if (v31) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 9;
      *(_WORD *)(result + 8) = 100;
      unsigned int v7 = "MuninRoad";
LABEL_47:
      *(void *)uint64_t result = *(void *)v7;
      return result;
    case 20:
      {
        uint64_t v62 = result;
        uint64_t result = v62;
        if (v32) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      __int16 v5 = "RouteWaypoint";
LABEL_50:
      *(unsigned char *)(result + 23) = 13;
      *(void *)uint64_t result = *(void *)v5;
      *(void *)(result + 5) = *(void *)(v5 + 5);
      *(unsigned char *)(result + 13) = 0;
      return result;
    case 21:
      {
        uint64_t v63 = result;
        uint64_t result = v63;
        if (v33) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 17;
      *(_WORD *)(result + 16) = 110;
      __int16 v9 = "RouteWaypointIcon";
      goto LABEL_65;
    case 22:
      {
        uint64_t v64 = result;
        uint64_t result = v64;
        if (v34) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 16;
      int v6 = "RouteAnchorpoint";
      goto LABEL_62;
    case 23:
      {
        uint64_t v65 = result;
        uint64_t result = v65;
        if (v35) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      uint64_t v3 = "RouteAnnotation";
LABEL_57:
      *(unsigned char *)(result + 23) = 15;
      *(void *)uint64_t result = *(void *)v3;
      *(void *)(result + 7) = *(void *)(v3 + 7);
      *(unsigned char *)(result + 15) = 0;
      return result;
    case 24:
      {
        uint64_t v66 = result;
        uint64_t result = v66;
        if (v36) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 17;
      *(_WORD *)(result + 16) = 114;
      __int16 v9 = "ARWalkingManeuver";
      goto LABEL_65;
    case 25:
      {
        uint64_t v67 = result;
        uint64_t result = v67;
        if (v37) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 16;
      int v6 = "ARWalkingArrival";
LABEL_62:
      *(_OWORD *)uint64_t result = *(_OWORD *)v6;
      *(unsigned char *)(result + 16) = 0;
      break;
    case 26:
      {
        uint64_t v68 = result;
        uint64_t result = v68;
        if (v38) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 17;
      *(_WORD *)(result + 16) = 101;
      __int16 v9 = "ARWalkingContinue";
LABEL_65:
      *(_OWORD *)uint64_t result = *(_OWORD *)v9;
      break;
    case 27:
      uint64_t v10 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      {
        uint64_t v69 = result;
        uint64_t v10 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
        int v40 = v39;
        uint64_t result = v69;
        if (v40) {
          operator new();
        }
      }
      *(void *)(result + 24) = *((void *)v10 + 91);
      *(unsigned char *)(result + 23) = 19;
      strcpy((char *)result, "ARWalkingStorefront");
      break;
    default:
      {
        uint64_t v42 = result;
        uint64_t result = v42;
        if (v12) {
          operator new();
        }
      }
      *(void *)(result + 24) = mdm::Allocator::instance(void)::alloc;
      *(unsigned char *)(result + 23) = 0;
      *(unsigned char *)uint64_t result = 0;
      break;
  }
  return result;
}

void md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~PolylineOverlayLayer(void *a1)
{
  *a1 = &unk_1EF531118;
  int v2 = (std::__shared_weak_count *)a1[26];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553C50;
  int v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  std::string::size_type v4 = (void *)a1[4];
  __int16 v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[18];
  a1[18] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  __int16 v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531118;
  int v2 = (std::__shared_weak_count *)a1[26];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531118;
  int v2 = (std::__shared_weak_count *)a1[26];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
}

void *md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~PolylineOverlayLayer(void *a1)
{
  *a1 = &unk_1EF531118;
  int v2 = (std::__shared_weak_count *)a1[26];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
}

void md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlayLayer(void *a1)
{
  *a1 = &unk_1EF531158;
  int v2 = (std::__shared_weak_count *)a1[26];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553C90;
  int v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  std::string::size_type v4 = (void *)a1[4];
  __int16 v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[18];
  a1[18] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  __int16 v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531158;
  int v2 = (std::__shared_weak_count *)a1[26];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void *md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF531158;
  int v2 = (std::__shared_weak_count *)a1[26];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
}

void *md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlayLayer(void *a1)
{
  *a1 = &unk_1EF531158;
  int v2 = (std::__shared_weak_count *)a1[26];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[24];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  return md::Ribbons::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::RibbonLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    int v43 = a6[24];
    if (a6[24])
    {
      char v6 = a6[1];
      char v44 = *a6;
      uint64_t v7 = *(void *)(a6 + 4);
    }
    else
    {
      char v44 = 0;
    }
    *(void *)a1 = &unk_1EF553C50;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(void *)(a1 + 144) = 0;
    *(unsigned char *)(a1 + 152) = 0;
    *(unsigned char *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 121) = 0u;
    if (v43)
    {
      *(unsigned char *)(a1 + 152) = v44;
      *(unsigned char *)(a1 + 153) = v6;
      *(void *)(a1 + 156) = v7;
      *(unsigned char *)(a1 + 176) = 1;
    }
    uint64_t v45 = (char *)operator new(0xF8uLL);
    *((void *)v45 + 1) = 0;
    *((void *)v45 + 2) = 0;
    *(void *)uint64_t v45 = &unk_1EF584CB0;
    ggl::BufferData::BufferData((uint64_t)(v45 + 24), 20, 0, 0, 1, 0);
    *((void *)v45 + 29) = "BatchType/VData";
    *((void *)v45 + 30) = &ggl::PolylineOverlayRibbon::defaultVboReflection;
    *((void *)v45 + 3) = &unk_1EF55C908;
    *((void *)v45 + 28) = &unk_1EF55C928;
    v49[7] = v45 + 24;
    v49[8] = v45;
    uint64_t v46 = (char *)operator new(0xF8uLL);
    *((void *)v46 + 1) = 0;
    *((void *)v46 + 2) = 0;
    *(void *)uint64_t v46 = &unk_1EF583D28;
    ggl::BufferData::BufferData((uint64_t)(v46 + 24), 2, 1, 0, 1, 0);
    *((_DWORD *)v46 + 60) = 0;
    *((void *)v46 + 3) = &unk_1EF55B630;
    *((void *)v46 + 4) = 2;
    *((void *)v46 + 28) = &unk_1EF55B650;
    *((void *)v46 + 29) = "BatchType/IData";
    v49[0] = v46 + 24;
    v49[1] = v46;
    operator new();
  }
  v50[1] = 0;
  v50[0] = 0;
  {
    operator new();
  }
  long long v51 = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    operator new();
  }
  long long v52 = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v53) = 1065353216;
  uint64_t v8 = *(uint64_t **)(a3 + 48);
  __int16 v9 = *(uint64_t **)(a3 + 56);
  while (1)
  {
    if (v8 == v9) {
      operator new();
    }
    LODWORD(v48) = 0;
    LODWORD(v48) = ggl::CullingGrid::intersectedCellsForRibbon(*(void *)(*v8 + 88), *(float **)(*v8 + 72), 0);
    v49[0] = &v48;
    uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)v50, v48, v49);
    uint64_t v12 = v11;
    int v13 = *(void **)(v11 + 32);
    unint64_t v14 = *(void *)(v11 + 40);
    if ((unint64_t)v13 < v14)
    {
      if (v13)
      {
        uint64_t v15 = *v8;
        *uint64_t v8 = 0;
        *int v13 = v15;
      }
      uint64_t v10 = v13 + 1;
      goto LABEL_6;
    }
    uint64_t v16 = *(void *)(v11 + 24);
    uint64_t v17 = ((uint64_t)v13 - v16) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      abort();
    }
    uint64_t v19 = v14 - v16;
    if (v19 >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v20 = v18;
    }
    if (v20)
    {
      uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v11 + 48) + 16))(*(void *)(v11 + 48), 8 * v20, 8);
      int v22 = (void *)(v21 + 8 * v17);
      uint64_t v23 = v21 + 8 * v20;
      if (v21)
      {
        uint64_t v24 = *v8;
        *uint64_t v8 = 0;
        void *v22 = v24;
      }
    }
    else
    {
      uint64_t v23 = 0;
      int v22 = (void *)(8 * v17);
    }
    uint64_t v10 = v22 + 1;
    int v25 = *(void **)(v12 + 24);
    unint64_t v26 = *(void *)(v12 + 32);
    if ((void *)v26 == v25)
    {
      *(void *)(v12 + 24) = v22;
      *(void *)(v12 + 32) = v10;
      uint64_t v40 = *(void *)(v12 + 40);
      *(void *)(v12 + 40) = v23;
      goto LABEL_42;
    }
    unint64_t v27 = v26 - (void)v25 - 8;
    if (v27 <= 0x47) {
      break;
    }
    unint64_t v28 = v27 >> 3;
    if (v26 - 8 * v28 - 8 < (unint64_t)v22 && (unint64_t)&v22[-v28 - 1] < v26) {
      break;
    }
    unint64_t v30 = v28 + 1;
    uint64_t v31 = (v28 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    int v32 = (void *)(v26 - 8 * v31);
    int v33 = v22 - 2;
    int v34 = (long long *)(v26 - 32);
    uint64_t v35 = v31;
    do
    {
      long long v37 = *v34;
      long long v36 = v34[1];
      *int v34 = 0uLL;
      v34[1] = 0uLL;
      v34 -= 2;
      *(v33 - 1) = v37;
      *int v33 = v36;
      v33 -= 2;
      v35 -= 4;
    }
    while (v35);
    v22 -= v31;
    if (v30 != v31) {
      goto LABEL_33;
    }
LABEL_34:
    unint64_t v26 = *(void *)(v12 + 24);
    int v39 = *(void **)(v12 + 32);
    *(void *)(v12 + 24) = v22;
    *(void *)(v12 + 32) = v10;
    uint64_t v40 = *(void *)(v12 + 40);
    *(void *)(v12 + 40) = v23;
    while (v39 != (void *)v26)
    {
      uint64_t v42 = (void (***)(void))*--v39;
      uint64_t v41 = v42;
      *int v39 = 0;
      if (v42)
      {
        (**v41)(v41);
        {
          operator new();
        }
        (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 40))(mdm::Allocator::instance(void)::alloc, v41, 136);
      }
    }
LABEL_42:
    if (v26) {
      (*(void (**)(void, unint64_t, unint64_t))(**(void **)(v12 + 48) + 40))(*(void *)(v12 + 48), v26, v40 - v26);
    }
LABEL_6:
    *(void *)(v12 + 32) = v10;
    ++v8;
  }
  int v32 = *(void **)(v12 + 32);
  do
  {
LABEL_33:
    uint64_t v38 = *--v32;
    void *v32 = 0;
    *--int v22 = v38;
  }
  while (v32 != v25);
  goto LABEL_34;
}

void sub_1A2240414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36,uint64_t a37,uint64_t *a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  MEMORY[0x1A6239270](v47, 0x1020C4007FF0C4BLL);
  if (v48) {
    operator delete(v48);
  }
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a38);
  uint64_t v50 = *a39;
  if (*a39)
  {
    *(void *)(a33 + 40) = v50;
    operator delete(v50);
    long long v51 = *a36;
    if (!*a36)
    {
LABEL_5:
      if (!a47) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    long long v51 = *a36;
    if (!*a36) {
      goto LABEL_5;
    }
  }
  *(void *)(a33 + 16) = v51;
  operator delete(v51);
  if (!a47) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(a47);
  _Unwind_Resume(a1);
}

uint64_t md::Ribbons::RibbonWriter<md::Ribbons::PolylineOverlayRibbonDescriptor>::writeVertex(uint64_t result, uint64_t *a2, float *a3)
{
  double v3 = a3[15];
  uint64_t v4 = *(void *)a3;
  int v5 = 0;
  float v6 = fmaxf(a3[2], 0.0);
  BOOL v7 = v6 < 1.0;
  float v8 = v6 * 65535.0;
  if (!v7) {
    float v8 = 65535.0;
  }
  int v9 = (int)v8;
  float v10 = fmaxf(a3[3], 0.0);
  if (v10 >= 1.0) {
    float v11 = 65535.0;
  }
  else {
    float v11 = v10 * 65535.0;
  }
  uint64_t v12 = *a2;
  *(_WORD *)uint64_t v12 = v9;
  *(_WORD *)(v12 + 2) = (int)v11;
  v13.i64[0] = *((void *)a3 + 2);
  float32x2_t v14 = vabs_f32(*(float32x2_t *)v13.f32);
  float v15 = fmaxf(v14.f32[0], v14.f32[1]);
  if (v15 > 4.0) {
    *(float32x2_t *)v13.f32 = vmul_n_f32(*(float32x2_t *)v13.f32, 4.0 / v15);
  }
  v13.i64[1] = *((void *)a3 + 5);
  v16.i64[0] = 0xBF000000BF000000;
  v16.i64[1] = 0xBF000000BF000000;
  *(int16x4_t *)(v12 + 4) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v16, (float32x4_t)xmmword_1A28FC8B0, v13)));
  uint64_t v17 = *(void *)(result + 8);
  float v18 = *(double *)(v17 + 104) + *(double *)(v17 + 112) * v3;
  *(float *)(v12 + 12) = v18;
  uint64_t v19 = *(void *)(v17 + 80);
  if (v19) {
    int v5 = *(_DWORD *)(v19 + 4 * v4);
  }
  *(_DWORD *)(v12 + 16) = v5;
  *a2 = v12 + 20;
  int v20 = 0;
  float v21 = fmaxf(a3[2], 0.0);
  BOOL v7 = v21 < 1.0;
  float v22 = v21 * 65535.0;
  if (!v7) {
    float v22 = 65535.0;
  }
  int v23 = (int)v22;
  float v24 = fmaxf(a3[3], 0.0);
  if (v24 >= 1.0) {
    float v25 = 65535.0;
  }
  else {
    float v25 = v24 * 65535.0;
  }
  *(_WORD *)(v12 + 20) = v23;
  *(_WORD *)(v12 + 22) = (int)v25;
  v26.i64[0] = *((void *)a3 + 3);
  float32x2_t v27 = vabs_f32(*(float32x2_t *)v26.f32);
  float v28 = fmaxf(v27.f32[0], v27.f32[1]);
  if (v28 > 4.0) {
    *(float32x2_t *)v26.f32 = vmul_n_f32(*(float32x2_t *)v26.f32, 4.0 / v28);
  }
  v26.i64[1] = *((void *)a3 + 6);
  v29.i64[0] = 0xBF000000BF000000;
  v29.i64[1] = 0xBF000000BF000000;
  *(int16x4_t *)(v12 + 24) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v29, (float32x4_t)xmmword_1A28FC8B0, v26)));
  uint64_t v30 = *(void *)(result + 8);
  float v31 = *(double *)(v30 + 104) + *(double *)(v30 + 112) * v3;
  *(float *)(v12 + 32) = v31;
  uint64_t v32 = *(void *)(v30 + 80);
  if (v32) {
    int v20 = *(_DWORD *)(v32 + 4 * v4);
  }
  *(_DWORD *)(v12 + 36) = v20;
  *a2 = v12 + 40;
  return result;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584CB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolylineOverlayRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584CB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD **a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(uint64_t **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = *(void *)(v10 + 8);
            if (v12 == a2)
            {
              if (*(_DWORD *)(v10 + 16) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = *(void *)v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = *(void *)(v10 + 8);
          if (v11 == a2)
          {
            if (*(_DWORD *)(v10 + 16) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(void *)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 4) + 16))(*((void *)a1 + 4), 56, 8);
  *(void *)uint64_t v10 = 0;
  *(void *)(v10 + 8) = v6;
  *(_DWORD *)(v10 + 16) = **a3;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 40) = 0;
  *(void *)(v10 + 24) = 0;
  {
    operator new();
  }
  *(void *)(v10 + 48) = mdm::Allocator::instance(void)::alloc;
  float v13 = (float)(unint64_t)(*((void *)a1 + 5) + 1);
  float v14 = a1[12];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v7 = *((void *)a1 + 1);
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_59;
      }
      unint64_t v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 5) / a1[12]);
      if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v3 = v6 % v7;
          }
          else {
            unint64_t v3 = v6;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        uint64_t v39 = *(void *)a1;
        *(void *)a1 = 0;
        if (v39) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 2) + 40))(*((void *)a1 + 2), v39, 8 * *((void *)a1 + 1));
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(**((void **)a1 + 2) + 16))(*((void *)a1 + 2), 8 * prime, 8);
    uint64_t v20 = *(void *)a1;
    *(void *)a1 = v19;
    if (v20) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(**((void **)a1 + 2) + 40))(*((void *)a1 + 2), v20, 8 * *((void *)a1 + 1));
    }
    uint64_t v21 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    int v23 = (uint64_t *)(a1 + 6);
    float v22 = (void *)*((void *)a1 + 3);
    if (!v22)
    {
LABEL_58:
      unint64_t v7 = prime;
      goto LABEL_59;
    }
    size_t v24 = v22[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*(void *)a1 + 8 * v26) = v23;
      for (unint64_t i = (void *)*v22; *v22; unint64_t i = (void *)*v22)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          float v22 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v28))
        {
          void *v22 = *i;
          uint64_t v29 = 8 * v28;
          *unint64_t i = **(void **)(*(void *)a1 + v29);
          **(void **)(*(void *)a1 + v29) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v28) = v22;
          float v22 = i;
          size_t v26 = v28;
        }
      }
      goto LABEL_58;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v23;
    int v33 = (void *)*v22;
    if (!*v22) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v24)
      {
        if (!*(void *)(*(void *)a1 + 8 * v35))
        {
          *(void *)(*(void *)a1 + 8 * v35) = v22;
          goto LABEL_63;
        }
        void *v22 = *v33;
        uint64_t v34 = 8 * v35;
        *int v33 = **(void **)(*(void *)a1 + v34);
        **(void **)(*(void *)a1 + v34) = v33;
        int v33 = v22;
      }
      size_t v35 = v24;
LABEL_63:
      float v22 = v33;
      int v33 = (void *)*v33;
      size_t v24 = v35;
      if (!v33) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  long long v36 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  if (v36)
  {
    *(void *)uint64_t v10 = *v36;
LABEL_80:
    *long long v36 = v10;
    goto LABEL_81;
  }
  *(void *)uint64_t v10 = *((void *)a1 + 3);
  *((void *)a1 + 3) = v10;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 6;
  if (*(void *)v10)
  {
    unint64_t v37 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v37 >= v7) {
        v37 %= v7;
      }
    }
    else
    {
      v37 &= v7 - 1;
    }
    long long v36 = (uint64_t *)(*(void *)a1 + 8 * v37);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 5);
  return v10;
}

void sub_1A2241070(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,void *>,mdm::Allocator>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  unint64_t v6 = (int8x16_t *)result;
LABEL_2:
  uint64_t v160 = &a2[-1].i64[1];
  unint64_t v7 = v6;
  while (1)
  {
    unint64_t v6 = v7;
    uint64_t v8 = (char *)a2 - (char *)v7;
    uint64_t v9 = ((char *)a2 - (char *)v7) >> 3;
    if (!(!v5 & v4))
    {
      switch(v9)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v65 = *v160;
          uint64_t v66 = v7->i64[0];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v7->i64[0]);
          if (result)
          {
            v7->i64[0] = v65;
            *uint64_t v160 = v66;
          }
          break;
        case 3:
          uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v160);
          break;
        case 4:
          uint64_t v67 = v7 + 1;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64);
          uint64_t v68 = *v160;
          uint64_t v69 = v7[1].i64[0];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v69);
          if (result)
          {
            v67->i64[0] = v68;
            *uint64_t v160 = v69;
            uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v67->i64[0] + 96), v7->i64[1]);
            if (result)
            {
              int8x16_t v70 = *(int8x16_t *)((char *)v7 + 8);
              *(int8x16_t *)((char *)v7 + 8) = vextq_s8(v70, v70, 8uLL);
              uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v70.i64[1] + 96), v7->i64[0]);
              if (result) {
                *unint64_t v7 = vextq_s8(*v7, *v7, 8uLL);
              }
            }
          }
          break;
        case 5:
          uint64_t result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64, &v7[1].i64[1], v160);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v8 <= 191)
    {
      uint64_t v71 = (int8x16_t *)&v7->u64[1];
      BOOL v73 = v7 == a2 || v71 == a2;
      if (a4)
      {
        if (!v73)
        {
          uint64_t v74 = (uint64_t *)v7;
          do
          {
            uint64_t v76 = v71;
            uint64_t v77 = v74[1];
            uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v77 + 96), *v74);
            if (result)
            {
              uint64_t v78 = (uint64_t *)v76;
              uint64_t v79 = 0;
              *uint64_t v78 = 0;
              uint64_t v167 = v77;
              uint64_t v80 = *v74;
              uint64_t v163 = v78;
              for (i = v78; ; uint64_t v79 = *i)
              {
                *unint64_t i = v80;
                unint64_t i = v74;
                *uint64_t v74 = 0;
                if (v79)
                {
                  unint64_t v81 = *(void **)(v79 + 56);
                  if (v81)
                  {
                    uint64_t v82 = *(void **)(v79 + 64);
                    uint64_t v83 = *(void *)(v79 + 56);
                    if (v82 != v81)
                    {
                      do
                      {
                        uint64_t v85 = (void (***)(void, uint64_t))*--v82;
                        uint64_t v84 = v85;
                        *uint64_t v82 = 0;
                        if (v85)
                        {
                          (**v84)(v84, v83);
                          {
                            operator new();
                          }
                          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v84, 136);
                        }
                      }
                      while (v82 != v81);
                      uint64_t v83 = *(void *)(v79 + 56);
                    }
                    *(void *)(v79 + 64) = v81;
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v79 + 80) + 40))(*(void *)(v79 + 80), v83, *(void *)(v79 + 72) - v83);
                  }
                  MEMORY[0x1A6239270](v79, 0x1020C40379845F6);
                }
                uint64_t v86 = v167;
                if (i == (uint64_t *)v6) {
                  break;
                }
                unint64_t v87 = *(unsigned int *)(v167 + 96);
                if ((v87 & 0xF000) != 0) {
                  uint64_t v88 = 3;
                }
                else {
                  uint64_t v88 = 0;
                }
                if ((v87 & 0xF00) != 0) {
                  uint64_t v88 = 2;
                }
                if ((v87 & 0xF0) != 0) {
                  uint64_t v88 = 1;
                }
                if ((v87 & 0xF) != 0) {
                  uint64_t v88 = 0;
                }
                int v89 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v88];
                int v90 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v87 >> 12];
                int v91 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v87 >> 8) & 0xF];
                int v92 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 >> 4];
                unsigned int v93 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 & 0xF];
                uint64_t v74 = i - 1;
                uint64_t v80 = *(i - 1);
                unint64_t v94 = *(unsigned int *)(v80 + 96);
                if ((v94 & 0xF000) != 0) {
                  uint64_t v95 = 3;
                }
                else {
                  uint64_t v95 = 0;
                }
                if ((v94 & 0xF00) != 0) {
                  uint64_t v95 = 2;
                }
                if ((v94 & 0xF0) != 0) {
                  uint64_t v95 = 1;
                }
                if ((v94 & 0xF) != 0) {
                  uint64_t v95 = 0;
                }
                if (((v90 << 12) | (v89 << 16) | (v91 << 8) | (16 * v92) | v93) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v94 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v95] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v94 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 & 0xF])) {
                  goto LABEL_128;
                }
              }
              unint64_t i = (uint64_t *)v6;
LABEL_128:
              uint64_t v167 = 0;
              std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](i, v86);
              uint64_t result = (uint64_t)std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
              uint64_t v76 = (int8x16_t *)v163;
            }
            uint64_t v71 = (int8x16_t *)&v76->u64[1];
            uint64_t v74 = (uint64_t *)v76;
          }
          while (&v76->u64[1] != (unint64_t *)a2);
        }
      }
      else if (!v73)
      {
        do
        {
          uint64_t v138 = v71;
          uint64_t v139 = v6->i64[1];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v139 + 96), v6->i64[0]);
          if (result)
          {
            uint64_t v140 = (uint64_t *)v138;
            uint64_t v141 = 0;
            *uint64_t v140 = 0;
            uint64_t v167 = v139;
            uint64_t v142 = v6->i64[0];
            int v164 = v140;
            for (j = v140; ; uint64_t v141 = *j)
            {
              uint64_t *j = v142;
              uint64_t j = (uint64_t *)v6;
              v6->i64[0] = 0;
              if (v141)
              {
                uint64_t v144 = *(void **)(v141 + 56);
                if (v144)
                {
                  uint64_t v145 = *(void **)(v141 + 64);
                  uint64_t v146 = *(void *)(v141 + 56);
                  if (v145 != v144)
                  {
                    do
                    {
                      uint64_t v148 = (void (***)(void, uint64_t))*--v145;
                      uint64_t v147 = v148;
                      *uint64_t v145 = 0;
                      if (v148)
                      {
                        (**v147)(v147, v146);
                        {
                          operator new();
                        }
                        (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v147, 136);
                      }
                    }
                    while (v145 != v144);
                    uint64_t v146 = *(void *)(v141 + 56);
                  }
                  *(void *)(v141 + 64) = v144;
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v141 + 80) + 40))(*(void *)(v141 + 80), v146, *(void *)(v141 + 72) - v146);
                }
                MEMORY[0x1A6239270](v141, 0x1020C40379845F6);
              }
              uint64_t v149 = v167;
              unint64_t v150 = *(unsigned int *)(v167 + 96);
              if ((v150 & 0xF000) != 0) {
                uint64_t v151 = 3;
              }
              else {
                uint64_t v151 = 0;
              }
              if ((v150 & 0xF00) != 0) {
                uint64_t v151 = 2;
              }
              if ((v150 & 0xF0) != 0) {
                uint64_t v151 = 1;
              }
              if ((v150 & 0xF) != 0) {
                uint64_t v151 = 0;
              }
              int v152 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v151];
              int v153 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v150 >> 12];
              int v154 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v150 >> 8) & 0xF];
              int v155 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 >> 4];
              unsigned int v156 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 & 0xF];
              unint64_t v6 = (int8x16_t *)(j - 1);
              uint64_t v142 = *(j - 1);
              unint64_t v157 = *(unsigned int *)(v142 + 96);
              if ((v157 & 0xF000) != 0) {
                uint64_t v158 = 3;
              }
              else {
                uint64_t v158 = 0;
              }
              if ((v157 & 0xF00) != 0) {
                uint64_t v158 = 2;
              }
              if ((v157 & 0xF0) != 0) {
                uint64_t v158 = 1;
              }
              if ((v157 & 0xF) != 0) {
                uint64_t v158 = 0;
              }
              if (((v153 << 12) | (v152 << 16) | (v154 << 8) | (16 * v155) | v156) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v157 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v158] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v157 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 & 0xF])) {
                break;
              }
            }
            uint64_t v167 = 0;
            std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](j, v149);
            uint64_t result = (uint64_t)std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
            uint64_t v138 = (int8x16_t *)v164;
          }
          uint64_t v71 = (int8x16_t *)&v138->u64[1];
          unint64_t v6 = v138;
        }
        while (&v138->u64[1] != (unint64_t *)a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v10 = (unint64_t)v9 >> 1;
    unint64_t v11 = &v7->i64[(unint64_t)v9 >> 1];
    if ((unint64_t)v8 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11, v7->i64, v160);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, v11, v160);
      uint64_t v12 = v10;
      float v13 = &v7->i64[v10];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v7->i64[1], v13 - 1, a2[-1].i64);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7[1].i64, &v7->i64[v12 + 1], &a2[-2].i64[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v13 - 1, v11, &v7->i64[v12 + 1]);
      uint64_t v14 = v7->i64[0];
      v7->i64[0] = *v13;
      *float v13 = v14;
    }
    --a3;
    uint64_t v15 = v7->i64[0];
    if ((a4 & 1) != 0
      || md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v7[-1].i64[1] + 96), v7->i64[0]))
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      unint64_t v16 = v7;
      do
      {
        unint64_t v17 = v16;
        uint64_t v19 = v16->i64[1];
        unint64_t v16 = (int8x16_t *)((char *)v16 + 8);
        uint64_t v18 = v19;
      }
      while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v15));
      uint64_t v20 = (uint64_t *)a2;
      if (v17 == v6)
      {
        uint64_t v20 = (uint64_t *)a2;
        do
        {
          if (v16 >= (int8x16_t *)v20) {
            break;
          }
          uint64_t v22 = *--v20;
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v22 + 96), v15));
      }
      else
      {
        do
          uint64_t v21 = *--v20;
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v15));
      }
      if (v16 < (int8x16_t *)v20)
      {
        uint64_t v23 = *v20;
        size_t v24 = (uint64_t *)v16;
        size_t v25 = v20;
        do
        {
          *size_t v24 = v23;
          *size_t v25 = v18;
          uint64_t v15 = v167;
          unint64_t v26 = *(unsigned int *)(v167 + 96);
          int v27 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v26 >> 8) & 0xF];
          int v28 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v26 >> 12] << 12;
          int v29 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 >> 4];
          int v30 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 & 0xF];
          if ((v26 & 0xF000) != 0) {
            uint64_t v31 = 3;
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v26 & 0xF00) != 0) {
            uint64_t v31 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v32 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v32 = v31;
          }
          unsigned int v33 = v28 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v32] << 16) | (v27 << 8) | (16 * v29) | v30;
          do
          {
            uint64_t v34 = v24[1];
            ++v24;
            uint64_t v18 = v34;
            unint64_t v35 = *(unsigned int *)(v34 + 96);
            if ((v35 & 0xF000) != 0) {
              uint64_t v36 = 3;
            }
            else {
              uint64_t v36 = 0;
            }
            if ((v35 & 0xF00) != 0) {
              uint64_t v36 = 2;
            }
            if ((v35 & 0xF0) != 0) {
              uint64_t v36 = 1;
            }
            if ((v35 & 0xF) != 0) {
              uint64_t v36 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v35 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v35 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 & 0xF]) < v33);
          unint64_t v17 = (int8x16_t *)(v24 - 1);
          do
          {
            uint64_t v37 = *--v25;
            uint64_t v23 = v37;
            unint64_t v38 = *(unsigned int *)(v37 + 96);
            if ((v38 & 0xF000) != 0) {
              uint64_t v39 = 3;
            }
            else {
              uint64_t v39 = 0;
            }
            if ((v38 & 0xF00) != 0) {
              uint64_t v39 = 2;
            }
            if ((v38 & 0xF0) != 0) {
              uint64_t v39 = 1;
            }
            if ((v38 & 0xF) != 0) {
              uint64_t v39 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v38 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v39] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v38 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 & 0xF]) >= v33);
        }
        while (v24 < v25);
      }
      if (v17 != v6)
      {
        uint64_t v40 = v17->i64[0];
        v17->i64[0] = 0;
        std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v40);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v17->i64, v15);
      std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      if (v16 < (int8x16_t *)v20) {
        goto LABEL_58;
      }
      char v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>(v6, v17);
      unint64_t v7 = (int8x16_t *)&v17->u64[1];
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>((int8x16_t *)&v17->u64[1], a2);
      if (result)
      {
        a2 = v17;
        if (v41) {
          return result;
        }
        goto LABEL_2;
      }
      if ((v41 & 1) == 0)
      {
LABEL_58:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*,false>(v6, v17, a3, a4 & 1);
        a4 = 0;
        unint64_t v7 = (int8x16_t *)&v17->u64[1];
      }
    }
    else
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      unint64_t v42 = *(unsigned int *)(v15 + 96);
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, *v160))
      {
        do
        {
          uint64_t v43 = v7->i64[1];
          unint64_t v7 = (int8x16_t *)((char *)v7 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v43));
      }
      else
      {
        char v44 = (int8x16_t *)&v7->u64[1];
        do
        {
          unint64_t v7 = v44;
          if (v44 >= a2) {
            break;
          }
          char v44 = (int8x16_t *)((char *)v44 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v7->i64[0]));
      }
      uint64_t v45 = a2;
      if (v7 < a2)
      {
        uint64_t v45 = a2;
        do
        {
          uint64_t v46 = v45[-1].i64[1];
          uint64_t v45 = (int8x16_t *)((char *)v45 - 8);
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v46));
      }
      if (v7 < v45)
      {
        uint64_t v47 = v7->i64[0];
        uint64_t v48 = v45->i64[0];
        do
        {
          v7->i64[0] = v48;
          v45->i64[0] = v47;
          uint64_t v15 = v167;
          unint64_t v49 = *(unsigned int *)(v167 + 96);
          int v50 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v49 >> 8) & 0xF];
          int v51 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 >> 4];
          int v52 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 & 0xF];
          int v53 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v49 >> 12] << 12;
          if ((v49 & 0xF000) != 0) {
            uint64_t v54 = 3;
          }
          else {
            uint64_t v54 = 0;
          }
          if ((v49 & 0xF00) != 0) {
            uint64_t v54 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v55 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v55 = v54;
          }
          unsigned int v56 = v53 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v55] << 16) | (v50 << 8) | (16 * v51) | v52;
          do
          {
            uint64_t v57 = v7->i64[1];
            unint64_t v7 = (int8x16_t *)((char *)v7 + 8);
            uint64_t v47 = v57;
            unint64_t v58 = *(unsigned int *)(v57 + 96);
            if ((v58 & 0xF000) != 0) {
              uint64_t v59 = 3;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((v58 & 0xF00) != 0) {
              uint64_t v59 = 2;
            }
            if ((v58 & 0xF0) != 0) {
              uint64_t v59 = 1;
            }
            if ((v58 & 0xF) != 0) {
              uint64_t v59 = 0;
            }
          }
          while (v56 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v58 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v59] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v58 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 & 0xF]));
          do
          {
            uint64_t v60 = v45[-1].i64[1];
            uint64_t v45 = (int8x16_t *)((char *)v45 - 8);
            uint64_t v48 = v60;
            unint64_t v61 = *(unsigned int *)(v60 + 96);
            if ((v61 & 0xF000) != 0) {
              uint64_t v62 = 3;
            }
            else {
              uint64_t v62 = 0;
            }
            if ((v61 & 0xF00) != 0) {
              uint64_t v62 = 2;
            }
            if ((v61 & 0xF0) != 0) {
              uint64_t v62 = 1;
            }
            if ((v61 & 0xF) != 0) {
              uint64_t v62 = 0;
            }
          }
          while (v56 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v61 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v62] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v61 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 & 0xF]));
        }
        while (v7 < v45);
      }
      uint64_t v63 = &v7[-1].i64[1];
      if (&v7[-1].u64[1] != (unint64_t *)v6)
      {
        uint64_t v64 = *v63;
        *uint64_t v63 = 0;
        std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v64);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v7[-1].i64[1], v15);
      uint64_t result = (uint64_t)std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      a4 = 0;
    }
  }
  if (v7 != a2)
  {
    unint64_t v161 = (char *)a2 - (char *)v7;
    int64_t v96 = (unint64_t)(v9 - 2) >> 1;
    int64_t v97 = v96;
    do
    {
      int64_t v98 = v97;
      if (v96 >= v97)
      {
        uint64_t v99 = (2 * v97) | 1;
        double v100 = &v6->i64[v99];
        if (2 * v97 + 2 < v9)
        {
          uint64_t v101 = *v100;
          uint64_t v102 = v100[1];
          BOOL v103 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v102);
          if (v103) {
            uint64_t v104 = v102;
          }
          else {
            uint64_t v104 = v101;
          }
          if (v103)
          {
            ++v100;
            uint64_t v99 = 2 * v98 + 2;
          }
        }
        else
        {
          uint64_t v104 = *v100;
        }
        float v105 = &v6->i64[v98];
        uint64_t v106 = *v105;
        uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v104 + 96), *v105);
        if ((result & 1) == 0)
        {
          uint64_t *v105 = 0;
          uint64_t v167 = v106;
          uint64_t v107 = *v100;
          while (1)
          {
            float v111 = v100;
            *double v100 = 0;
            std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v105, v107);
            if (v96 < v99) {
              break;
            }
            uint64_t v112 = (2 * v99) | 1;
            double v100 = &v6->i64[v112];
            uint64_t v113 = 2 * v99 + 2;
            if (v113 < v9)
            {
              uint64_t v108 = *v100;
              uint64_t v107 = v100[1];
              BOOL v109 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v107);
              if (v109) {
                ++v100;
              }
              else {
                uint64_t v107 = v108;
              }
              if (v109) {
                uint64_t v99 = v113;
              }
              else {
                uint64_t v99 = v112;
              }
            }
            else
            {
              uint64_t v107 = *v100;
              uint64_t v99 = (2 * v99) | 1;
            }
            uint64_t v110 = v167;
            float v105 = v111;
            if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v107 + 96), v167))
            {
              goto LABEL_168;
            }
          }
          uint64_t v110 = v167;
LABEL_168:
          uint64_t v167 = 0;
          std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v111, v110);
          uint64_t result = (uint64_t)std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
        }
      }
      int64_t v97 = v98 - 1;
    }
    while (v98);
    uint64_t v114 = v161 >> 3;
    while (2)
    {
      if (v114 >= 2)
      {
        uint64_t v118 = 0;
        uint64_t v119 = v6->i64[0];
        v6->i64[0] = 0;
        uint64_t v166 = v119;
        uint64_t v120 = (uint64_t *)v6;
        do
        {
          uint64_t v125 = &v120[v118 + 1];
          uint64_t v126 = (2 * v118) | 1;
          uint64_t v127 = 2 * v118 + 2;
          if (v127 < v114)
          {
            uint64_t v121 = *v125;
            uint64_t v122 = v120[v118 + 2];
            BOOL v123 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v125 + 96), v125[1]);
            if (v123) {
              uint64_t v124 = v122;
            }
            else {
              uint64_t v124 = v121;
            }
            if (v123)
            {
              ++v125;
              uint64_t v118 = v127;
            }
            else
            {
              uint64_t v118 = v126;
            }
          }
          else
          {
            uint64_t v124 = *v125;
            uint64_t v118 = (2 * v118) | 1;
          }
          *uint64_t v125 = 0;
          std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v120, v124);
          uint64_t v120 = v125;
        }
        while (v118 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
        uint64_t v128 = &a2[-1].i64[1];
        if (v125 == (uint64_t *)&a2[-1].u64[1])
        {
          uint64_t v115 = v166;
          uint64_t v166 = 0;
          uint64_t v116 = v125;
          goto LABEL_193;
        }
        uint64_t v129 = *v128;
        *uint64_t v128 = 0;
        std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v125, v129);
        uint64_t v130 = v166;
        uint64_t v166 = 0;
        std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v128, v130);
        uint64_t v131 = (char *)v125 - (char *)v6 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (unint64_t)((v131 >> 3) - 2) >> 1;
          uint64_t v133 = &v6->i64[v132];
          uint64_t v134 = *v125;
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), *v125))
          {
            *uint64_t v125 = 0;
            uint64_t v167 = v134;
            uint64_t v135 = *v133;
            do
            {
              uint64_t v136 = v133;
              *uint64_t v133 = 0;
              std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v125, v135);
              uint64_t v137 = v167;
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              uint64_t v133 = &v6->i64[v132];
              uint64_t v135 = *v133;
              uint64_t v125 = v136;
            }
            while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), v167));
            uint64_t v167 = 0;
            std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v136, v137);
            uint64_t v116 = &v167;
            uint64_t v115 = 0;
LABEL_193:
            std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v116, v115);
          }
        }
        uint64_t result = (uint64_t)std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v166, 0);
      }
      a2 = (int8x16_t *)((char *)a2 - 8);
      if ((unint64_t)v114-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t *std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 56);
    if (v3)
    {
      char v4 = *(void **)(v2 + 64);
      uint64_t v5 = *(void *)(v2 + 56);
      if (v4 != v3)
      {
        do
        {
          unint64_t v7 = (void (***)(void, uint64_t))*--v4;
          unint64_t v6 = v7;
          void *v4 = 0;
          if (v7)
          {
            (**v6)(v6, v5);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v6, 136);
          }
        }
        while (v4 != v3);
        uint64_t v5 = *(void *)(v2 + 56);
      }
      *(void *)(v2 + 64) = v3;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 80) + 40))(*(void *)(v2 + 80), v5, *(void *)(v2 + 72) - v5);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__deallocate_node(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v5 = (uint64_t *)*v2;
      unint64_t v6 = (void *)v2[3];
      if (v6)
      {
        unint64_t v7 = (void *)v2[4];
        uint64_t v4 = v2[3];
        if (v7 != v6)
        {
          do
          {
            uint64_t v9 = (void (***)(void, uint64_t))*--v7;
            uint64_t v8 = v9;
            *unint64_t v7 = 0;
            if (v9)
            {
              (**v8)(v8, v4);
              {
                  operator new();
              }
              (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v8, 136);
            }
          }
          while (v7 != v6);
          uint64_t v4 = v2[3];
        }
        v2[4] = (uint64_t)v6;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[6] + 40))(v2[6], v4, v2[5] - v4);
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)(v3 + 32) + 40))(*(void *)(v3 + 32), v2, 56);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  BOOL v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2[-1].i64[1];
      uint64_t v6 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v5 + 96), a1->i64[0]))
      {
        a1->i64[0] = v5;
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return v4;
    case 4:
      unint64_t v16 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v17 = a2[-1].i64[1];
      uint64_t v18 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v18))
      {
        v16->i64[0] = v17;
        a2[-1].i64[1] = v18;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v16->i64[0] + 96), a1->i64[1]))
        {
          int8x16_t v19 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v19, v19, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return v4;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v8 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v8;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v8 + 96), *i64))
    {
      break;
    }
LABEL_6:
    i64 = v8;
    v9 += 8;
    if (++v8 == (uint64_t *)a2) {
      return 1;
    }
  }
  *uint64_t v8 = 0;
  uint64_t v21 = v11;
  uint64_t v12 = *i64;
  uint64_t v13 = v9;
  while (1)
  {
    *(uint64_t *)((char *)a1[1].i64 + v13) = 0;
    std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100]((uint64_t *)((char *)&a1[1].i64[1] + v13), v12);
    uint64_t v14 = v21;
    if (v13 == -16) {
      break;
    }
    uint64_t v12 = *(uint64_t *)((char *)&a1->i64[1] + v13);
    v13 -= 8;
    if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v12))
    {
      uint64_t v15 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
      goto LABEL_13;
    }
  }
  uint64_t v15 = (uint64_t *)a1;
LABEL_13:
  uint64_t v21 = 0;
  std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v15, v14);
  if (++v10 != 8)
  {
    std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
    goto LABEL_6;
  }
  BOOL v4 = v8 + 1 == (uint64_t *)a2;
  std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
  return v4;
}

uint64_t md::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch(void *a1)
{
  *a1 = &unk_1EF530F98;
  uint64_t v2 = (std::__shared_weak_count *)a1[181];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *a1 = &unk_1EF530F98;
  uint64_t v2 = (std::__shared_weak_count *)a1[181];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553A10;
  uint64_t v2 = *(uint64_t **)(a1 + 1400);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 1408);
    BOOL v4 = *(void **)(a1 + 1400);
    if (v3 != v2)
    {
      do
        std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](--v3, 0);
      while (v3 != v2);
      BOOL v4 = *(void **)(a1 + 1400);
    }
    *(void *)(a1 + 1408) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 1376);
  do
  {
    if (v5[1])
    {
      unint64_t v6 = 0;
      unint64_t v7 = v5 + 2;
      uint64_t v8 = v5 + 2;
      uint64_t v9 = (void (***)(void))(v5 + 2);
      do
      {
        int v10 = (void (**)(void *))*v9;
        v9 += 15;
        (*v10)(v8);
        ++v6;
        v7 += 15;
        uint64_t v8 = v9;
      }
      while (v6 < v5[1]);
    }
    v5[1] = 0;
    uint64_t v5 = (void *)*v5;
  }
  while (v5);
  uint64_t v11 = *(void ***)(a1 + 1376);
  *(void *)(a1 + 1384) = v11;
  uint64_t v12 = *v11;
  *uint64_t v11 = 0;
  if (v12)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      free(v12);
      uint64_t v12 = v13;
    }
    while (v13);
    uint64_t v11 = *(void ***)(a1 + 1376);
  }
  free(v11);
  uint64_t v14 = *(void **)(a1 + 1352);
  if (v14)
  {
    *(void *)(a1 + 1360) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 1320);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 1328);
    uint64_t v17 = *(void *)(a1 + 1320);
    if (v16 != v15)
    {
      uint64_t v18 = *(void *)(a1 + 1328);
      do
      {
        uint64_t v20 = *(void **)(v18 - 24);
        v18 -= 24;
        int8x16_t v19 = v20;
        if (v20)
        {
          *(void *)(v16 - 16) = v19;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = *(void *)(a1 + 1320);
    }
    *(void *)(a1 + 1328) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 1344) + 40))(*(void *)(a1 + 1344), v17, *(void *)(a1 + 1336) - v17);
  }
  uint64_t v21 = *(void **)(a1 + 1296);
  if (v21)
  {
    *(void *)(a1 + 1304) = v21;
    operator delete(v21);
  }
  *(void *)(a1 + 1168) = &off_1EF55A458;
  *(void *)(a1 + 1184) = 3131955885;
  *(void *)(a1 + 1040) = &off_1EF55A458;
  *(void *)(a1 + 1056) = 3131955885;
  *(void *)(a1 + 912) = &off_1EF55A458;
  *(void *)(a1 + 928) = 3131955885;
  *(void *)(a1 + 784) = &off_1EF55A458;
  *(void *)(a1 + 800) = 3131955885;
  *(void *)(a1 + 656) = &off_1EF55A458;
  *(void *)(a1 + 672) = 3131955885;
  *(void *)(a1 + 528) = &off_1EF55A458;
  *(void *)(a1 + 544) = 3131955885;
  *(void *)(a1 + 400) = &off_1EF55A458;
  *(void *)(a1 + 416) = 3131955885;
  *(void *)(a1 + 272) = &off_1EF55A458;
  *(void *)(a1 + 288) = 3131955885;
  *(void *)(a1 + 144) = &off_1EF55A458;
  *(void *)(a1 + 160) = 3131955885;
  *(void *)(a1 + 16) = &off_1EF55A458;
  *(void *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A6239270);
}

void md::PolylineOverlayBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(void *a1)
{
  md::PolylineOverlayBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::PolylineOverlayBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(void *a1)
{
  *a1 = &unk_1EF53EBA0;
  uint64_t v2 = (std::__shared_weak_count *)a1[189];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[187];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[187];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  BOOL v4 = (std::__shared_weak_count *)a1[185];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *a1 = &unk_1EF530F98;
  uint64_t v5 = (std::__shared_weak_count *)a1[181];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

void md::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch(void *a1)
{
  *a1 = &unk_1EF530F98;
  uint64_t v2 = (std::__shared_weak_count *)a1[181];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::Ribbons::RibbonBatch<md::Ribbons::PolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,void *>,mdm::Allocator>>::operator()[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 8))
  {
    BOOL v4 = *(void **)(a2 + 24);
    if (v4)
    {
      uint64_t v5 = *(void **)(a2 + 32);
      uint64_t v6 = *(void *)(a2 + 24);
      if (v5 != v4)
      {
        do
        {
          uint64_t v8 = (void (***)(void, uint64_t))*--v5;
          unint64_t v7 = v8;
          void *v5 = 0;
          if (v8)
          {
            (**v7)(v7, v6);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v7, 136);
          }
        }
        while (v5 != v4);
        uint64_t v6 = *(void *)(a2 + 24);
      }
      *(void *)(a2 + 32) = v4;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 48) + 40))(*(void *)(a2 + 48), v6, *(void *)(a2 + 40) - v6);
    }
  }
  else if (!a2)
  {
    return result;
  }
  uint64_t v9 = *(uint64_t (**)(void))(***(void ***)v3 + 40);
  return v9();
}

void md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::layout(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 224);
  if (*(unsigned char *)(v4 + 304))
  {
    *(void *)(a1 + 56) = *(void *)(v4 + 176);
    if (*(unsigned char *)(a2 + 136)) {
      *(void *)(a1 + 88) = *(void *)(v4 + 176);
    }
  }
  if (*(unsigned char *)(a2 + 132))
  {
    *(void *)(a1 + 64) = *(void *)(v4 + 200);
    *(void *)(a1 + 72) = *(void *)(v4 + 208);
    *(void *)(a1 + 80) = *(void *)(v4 + 240);
    if (*(unsigned char *)(a2 + 136))
    {
      *(void *)(a1 + 96) = *(void *)(v4 + 200);
      *(void *)(a1 + 104) = *(void *)(v4 + 208);
      *(void *)(a1 + 112) = *(void *)(v4 + 240);
    }
    *(void *)(a1 + 120) = *(void *)(v4 + 248);
    *(void *)(a1 + 128) = *(void *)(v4 + 248);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(v4 + 184);
    *(void *)(a1 + 72) = *(void *)(v4 + 208);
    if (v5)
    {
      *(void *)(a1 + 80) = *(void *)(v4 + 232);
      if (!*(unsigned char *)(a2 + 136)) {
        goto LABEL_14;
      }
      *(void *)(a1 + 96) = *(void *)(v4 + 184);
      *(void *)(a1 + 104) = *(void *)(v4 + 208);
      uint64_t v6 = *(void *)(v4 + 232);
    }
    else
    {
      *(void *)(a1 + 80) = *(void *)(v4 + 224);
      if (!*(unsigned char *)(a2 + 136)) {
        goto LABEL_14;
      }
      *(void *)(a1 + 96) = *(void *)(v4 + 184);
      *(void *)(a1 + 104) = *(void *)(v4 + 208);
      uint64_t v6 = *(void *)(v4 + 224);
    }
    *(void *)(a1 + 112) = v6;
  }
LABEL_14:
  unint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *(uint64_t **)(a1 + 16);
  if (v8 == v7) {
    return;
  }
  if (!*(unsigned char *)(*v7 + 1456))
  {
    uint64_t v9 = *(void **)(*(void *)a2 + 8);
    int8x8_t v10 = (int8x8_t)v9[1];
    if (!*(void *)&v10) {
      goto LABEL_41;
    }
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v12 = 0x1AF456233693CD46;
      if (*(void *)&v10 <= 0x1AF456233693CD46uLL) {
        uint64_t v12 = 0x1AF456233693CD46uLL % *(void *)&v10;
      }
    }
    else
    {
      uint64_t v12 = (*(void *)&v10 - 1) & 0x1AF456233693CD46;
    }
    uint64_t v13 = *(void **)(*v9 + 8 * v12);
    if (!v13) {
      goto LABEL_41;
    }
    uint64_t v14 = (void *)*v13;
    if (!v14) {
      goto LABEL_41;
    }
    if (v11.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v16 = v14[1];
        if (v16 == 0x1AF456233693CD46)
        {
          if (v14[2] == 0x1AF456233693CD46) {
            goto LABEL_39;
          }
        }
        else if ((v16 & (*(void *)&v10 - 1)) != v12)
        {
          goto LABEL_41;
        }
        uint64_t v14 = (void *)*v14;
        if (!v14) {
          goto LABEL_41;
        }
      }
    }
    while (1)
    {
      unint64_t v15 = v14[1];
      if (v15 == 0x1AF456233693CD46)
      {
        if (v14[2] == 0x1AF456233693CD46)
        {
LABEL_39:
          uint64_t v17 = v14[5];
          if (*(void *)(v17 + 8) == 0x1AF456233693CD46)
          {
            uint64_t v18 = *(void *)(v17 + 32);
            goto LABEL_42;
          }
LABEL_41:
          uint64_t v18 = 0;
LABEL_42:
          if (*(unsigned char *)(v18 + 3776))
          {
            uint64_t v19 = *(void *)(a1 + 144);
            if (v19)
            {
              int v20 = gdc::GlobeTileGrid::intersectWithFrustum(v19, (const double *)(v18 + 984), *(double *)(v18 + 24));
LABEL_67:
              uint64_t v28 = *(void *)(a1 + 8);
              uint64_t v29 = *(void *)(a1 + 16);
              if (v28 == v29) {
                return;
              }
              do
              {
                uint64_t v31 = *(unsigned char **)v28;
                BOOL v32 = *(uint64_t **)(*(void *)v28 + 1400);
                unsigned int v33 = *(uint64_t **)(*(void *)v28 + 1408);
                if (v32 == v33)
                {
                  char v30 = 0;
                }
                else
                {
                  char v30 = 0;
                  do
                  {
                    uint64_t v34 = *v32++;
                    BOOL v35 = (*(_DWORD *)(v34 + 96) & v20) != 0;
                    v30 |= v35;
                    *(unsigned char *)(v34 + 48) = v35;
                  }
                  while (v32 != v33);
                }
                v31[136] = v30 & 1;
                v31[264] = v30 & 1;
                v31[392] = v30 & 1;
                v31[520] = v30 & 1;
                v31[648] = v30 & 1;
                v31[776] = v30 & 1;
                v31[904] = v30 & 1;
                v31[1032] = v30 & 1;
                v31[1160] = v30 & 1;
                v31[1288] = v30 & 1;
                v28 += 8;
                v31[1424] = v30 & 1;
              }
              while (v28 != v29);
              unint64_t v7 = *(uint64_t **)(a1 + 8);
              uint64_t v8 = *(uint64_t **)(a1 + 16);
              if (v7 == v8) {
                return;
              }
LABEL_76:
              uint64_t v202 = v8;
              while (2)
              {
                uint64_t v36 = *v7;
                if (!*(unsigned char *)(*v7 + 1424)) {
                  goto LABEL_78;
                }
                uint64_t v37 = *(unsigned char **)(v36 + 1472);
                v208[0] = xmmword_1A28FD2A0;
                v208[1] = xmmword_1A28FD460;
                __int16 v209 = 256;
                uint64_t v210 = 0x3F800000BF800000;
                int v211 = 0;
                if (*(void *)(a2 + 144) && *(unsigned char *)(a2 + 136))
                {
                  md::PolylineOverlayStyle::updateFromStyleQuery<md::Stroke1StyleProperties>((uint64_t)v37, a2, (uint64_t)v208);
                  if (!*v37) {
                    goto LABEL_86;
                  }
LABEL_85:
                  md::PolylineOverlayStyle::writePasses((uint64_t)v37, a2, (uint64_t)v208);
                }
                else
                {
                  md::PolylineOverlayStyle::updateFromOverlay((uint64_t)v37, a2, (uint64_t)v208);
                  if (*v37) {
                    goto LABEL_85;
                  }
                }
LABEL_86:
                uint64_t v38 = *(void *)(v36 + 1472);
                os_unfair_lock_lock((os_unfair_lock_t)(v38 + 196));
                float v39 = *(float *)(v38 + 152);
                float v40 = *(float *)(v38 + 156);
                os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 196));
                char v41 = *(uint64_t **)(v36 + 1400);
                unint64_t v42 = *(uint64_t **)(v36 + 1408);
                while (v41 != v42)
                {
                  uint64_t v44 = *v41;
                  if (*(unsigned char *)(*v41 + 48))
                  {
                    BOOL v43 = *(float *)(v44 + 104) >= v39 && *(float *)(v44 + 100) <= v40;
                    *(unsigned char *)(v44 + 48) = v43;
                  }
                  ++v41;
                }
                int v45 = **(unsigned __int8 **)(v36 + 1472);
                *(unsigned char *)(v36 + 136) = v45;
                *(unsigned char *)(v36 + 264) = v45;
                *(unsigned char *)(v36 + 392) = v45;
                *(unsigned char *)(v36 + 520) = v45;
                *(unsigned char *)(v36 + 648) = v45;
                *(unsigned char *)(v36 + 776) = v45;
                *(unsigned char *)(v36 + 904) = v45;
                *(unsigned char *)(v36 + 1032) = v45;
                *(unsigned char *)(v36 + 1160) = v45;
                *(unsigned char *)(v36 + 1288) = v45;
                *(unsigned char *)(v36 + 1424) = v45;
                if (!v45)
                {
LABEL_78:
                  if (++v7 == v8) {
                    return;
                  }
                  continue;
                }
                break;
              }
              float64x2_t v203 = v7;
              uint64_t v46 = 0;
              LOBYTE(v207) = *(unsigned char *)(v36 + 1464);
              BYTE1(v207) = *(unsigned char *)(a2 + 88);
              BYTE2(v207) = *(unsigned char *)(a2 + 135);
              BYTE3(v207) = *(unsigned char *)(a2 + 134);
              uint64_t v47 = *(void **)(*(void *)(v36 + 8) + 224);
              while (2)
              {
                if (!*(unsigned char *)(*(void *)(v36 + 1472) + v46 + 120))
                {
                  *(unsigned char *)(v36 + (v46 << 7) + 136) = 0;
                  goto LABEL_97;
                }
                uint64_t v48 = v36 + (v46 << 7);
                *(unsigned char *)(v48 + 136) = 1;
                *(_DWORD *)(v48 + 56) = *(unsigned __int8 *)(a2 + 57);
                if (v46 > 9u)
                {
                  uint64_t v51 = 0;
                  goto LABEL_254;
                }
                if (((1 << v46) & 0x255) != 0)
                {
                  uint64_t v49 = v47[17];
                  uint64_t v50 = *(void *)(v49 + 8);
                  if (v50 != *(void *)v49)
                  {
                    uint64_t v51 = *(void *)(v50 - 8);
                    *(void *)(v49 + 8) = v50 - 8;
                    int v52 = *(uint64_t **)(v49 + 40);
                    unint64_t v53 = *(void *)(v49 + 48);
                    if ((unint64_t)v52 >= v53)
                    {
                      uint64_t v54 = *(void *)(v49 + 32);
                      uint64_t v55 = ((uint64_t)v52 - v54) >> 3;
                      unint64_t v56 = v55 + 1;
                      if ((unint64_t)(v55 + 1) >> 61) {
                        goto LABEL_311;
                      }
                      uint64_t v57 = v53 - v54;
                      if (v57 >> 2 > v56) {
                        unint64_t v56 = v57 >> 2;
                      }
                      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      if (v56)
                      {
                        uint64_t v58 = 8 * v56;
                        uint64_t v59 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v49 + 56)
                                                                                           + 16))(*(void *)(v49 + 56), 8 * v56, 8);
                        uint64_t v60 = (uint64_t *)(v59 + 8 * v55);
                        unint64_t v56 = v59 + v58;
                        if (v59) {
                          *uint64_t v60 = v51;
                        }
                      }
                      else
                      {
                        uint64_t v60 = (uint64_t *)(8 * v55);
                      }
                      uint64_t v98 = *(void *)(v49 + 32);
                      uint64_t v97 = *(void *)(v49 + 40);
                      uint64_t v99 = v97 - v98;
                      if (v97 != v98)
                      {
                        unint64_t v100 = v99 - 8;
                        if ((unint64_t)(v99 - 8) < 0x38)
                        {
                          uint64_t v101 = v60;
                        }
                        else
                        {
                          uint64_t v101 = v60;
                          if ((unint64_t)(v97 - (void)v60) >= 0x20)
                          {
                            uint64_t v102 = (v100 >> 3) + 1;
                            BOOL v103 = v60 - 2;
                            uint64_t v104 = (long long *)(v97 - 16);
                            uint64_t v105 = v102 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v106 = *v104;
                              *((_OWORD *)v103 - 1) = *(v104 - 1);
                              *(_OWORD *)BOOL v103 = v106;
                              v103 -= 4;
                              v104 -= 2;
                              v105 -= 4;
                            }
                            while (v105);
                            uint64_t v101 = &v60[-(v102 & 0x3FFFFFFFFFFFFFFCLL)];
                            v97 -= 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL)) {
                              goto LABEL_223;
                            }
                          }
                        }
                        do
                        {
                          uint64_t v135 = *(void *)(v97 - 8);
                          v97 -= 8;
                          *--uint64_t v101 = v135;
                        }
                        while (v97 != v98);
                        goto LABEL_223;
                      }
LABEL_197:
                      uint64_t v101 = v60;
LABEL_224:
                      uint64_t v85 = v60 + 1;
                      *(void *)(v49 + 32) = v101;
                      *(void *)(v49 + 40) = v60 + 1;
                      uint64_t v156 = *(void *)(v49 + 48);
                      *(void *)(v49 + 48) = v56;
                      if (v97) {
                        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v49 + 56) + 40))(*(void *)(v49 + 56), v97, v156 - v97);
                      }
LABEL_226:
                      *(void *)(v49 + 40) = v85;
                      *(void *)&v208[0] = v51;
                      uint64_t v157 = *(void *)(v49 + 120);
                      if (!v157) {
                        goto LABEL_310;
                      }
LABEL_253:
                      (*(void (**)(uint64_t, _OWORD *))(*(void *)v157 + 48))(v157, v208);
LABEL_254:
                      uint64_t v171 = v48 + 16;
                      uint64_t v172 = *(uint64_t **)(*(void *)(v36 + 8) + 224);
                      __n128 v173 = 0uLL;
                      switch(v46)
                      {
                        case 1:
                        case 8:
                          uint64_t v174 = v172[1];
                          goto LABEL_261;
                        case 2:
                        case 9:
                          uint64_t v175 = v172[2];
                          goto LABEL_263;
                        case 3:
                        case 7:
                          md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::PolylineOverlayFillShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v208, v172[3], (char *)&v207);
                          goto LABEL_264;
                        case 4:
                          uint64_t v175 = v172[4];
                          goto LABEL_263;
                        case 5:
                          uint64_t v174 = v172[5];
LABEL_261:
                          md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::AlphaPipelineState,std::shared_ptr<ggl::PolylineOverlayAlphaShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v208, v174, (char *)&v207);
                          goto LABEL_264;
                        case 6:
                          uint64_t v175 = v172[6];
                          goto LABEL_263;
                        case 10:
                          goto LABEL_266;
                        default:
                          uint64_t v175 = *v172;
LABEL_263:
                          md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::AlphaFillPipelineState,std::shared_ptr<ggl::PolylineOverlayAlphaFillShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v208, v175, (char *)&v207);
LABEL_264:
                          __n128 v173 = (__n128)v208[0];
                          unint64_t v176 = *(void *)&v208[0];
                          if (*(void *)&v208[0] && **(void **)(*(void *)&v208[0] + 40) == *(void *)(v51 + 8))
                          {
                            uint64_t v178 = *(void *)(v51 + 16);
                            if (v178 && v178 != *(void *)&v208[0])
                            {
                              __n128 v204 = (__n128)v208[0];
                              ggl::PipelineSetup::resetData(v51);
                              __n128 v173 = v204;
                              unint64_t v176 = v204.n128_u64[0];
                            }
                            if (v173.n128_u64[1]) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v173.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
                            }
                            int v177 = *(std::__shared_weak_count **)(v51 + 24);
                            *(void *)(v51 + 16) = v176;
                            *(void *)(v51 + 24) = v173.n128_u64[1];
                            if (!v177)
                            {
LABEL_275:
                              uint64x2_t v179 = (std::__shared_weak_count *)v173.n128_u64[1];
                              if (!v173.n128_u64[1]) {
                                goto LABEL_279;
                              }
                              goto LABEL_276;
                            }
                          }
                          else
                          {
LABEL_266:
                            int v177 = *(std::__shared_weak_count **)(v51 + 24);
                            *(void *)(v51 + 16) = 0;
                            *(void *)(v51 + 24) = 0;
                            if (!v177) {
                              goto LABEL_275;
                            }
                          }
                          if (atomic_fetch_add(&v177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                            goto LABEL_275;
                          }
                          __n128 v205 = v173;
                          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                          std::__shared_weak_count::__release_weak(v177);
                          __n128 v173 = v205;
                          uint64x2_t v179 = (std::__shared_weak_count *)v205.n128_u64[1];
                          if (!v205.n128_u64[1]) {
                            goto LABEL_279;
                          }
LABEL_276:
                          if (!atomic_fetch_add(&v179->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *, __n128))v179->__on_zero_shared)(v179, v173);
                            std::__shared_weak_count::__release_weak(v179);
                          }
LABEL_279:
                          **(void **)(v51 + 96) = *(void *)(v47[32] + 16);
                          if (v51)
                          {
                            float64x2_t v180 = *(void **)(v36 + 1472);
                            if (v180)
                            {
                              switch((char)v46)
                              {
                                case 0:
                                  uint64_t v197 = *(void *)(v51 + 64);
                                  *(void *)(v197 + 40) = 0;
                                  uint64_t v182 = v180[1];
                                  *(void *)(v197 + 32) = v182;
                                  uint64_t v183 = *(void *)(v51 + 160);
                                  uint64_t v184 = v180[2];
                                  if (v184) {
                                    goto LABEL_283;
                                  }
                                  goto LABEL_284;
                                case 1:
                                  uint64_t v198 = *(void *)(v51 + 64);
                                  *(void *)(v198 + 40) = 0;
                                  uint64_t v182 = v180[3];
                                  *(void *)(v198 + 32) = v182;
                                  uint64_t v183 = *(void *)(v51 + 160);
                                  uint64_t v184 = v180[4];
                                  if (!v184) {
                                    goto LABEL_284;
                                  }
                                  goto LABEL_283;
                                case 2:
                                case 3:
                                case 9:
                                  uint64_t v181 = *(void *)(v51 + 64);
                                  *(void *)(v181 + 40) = 0;
                                  uint64_t v182 = v180[5];
                                  *(void *)(v181 + 32) = v182;
                                  uint64_t v183 = *(void *)(v51 + 160);
                                  uint64_t v184 = v180[6];
                                  if (v184) {
                                    goto LABEL_283;
                                  }
                                  goto LABEL_284;
                                case 4:
                                  uint64_t v199 = *(void *)(v51 + 64);
                                  *(void *)(v199 + 40) = 0;
                                  uint64_t v182 = v180[7];
                                  *(void *)(v199 + 32) = v182;
                                  uint64_t v183 = *(void *)(v51 + 160);
                                  uint64_t v184 = v180[8];
                                  if (!v184) {
                                    goto LABEL_284;
                                  }
                                  goto LABEL_283;
                                case 5:
                                  uint64_t v200 = *(void *)(v51 + 64);
                                  *(void *)(v200 + 40) = 0;
                                  uint64_t v182 = v180[9];
                                  *(void *)(v200 + 32) = v182;
                                  uint64_t v183 = *(void *)(v51 + 160);
                                  uint64_t v184 = v180[10];
                                  if (!v184) {
                                    goto LABEL_284;
                                  }
                                  goto LABEL_283;
                                case 6:
                                case 7:
                                  uint64_t v196 = *(void *)(v51 + 64);
                                  *(void *)(v196 + 40) = 0;
                                  uint64_t v182 = v180[11];
                                  *(void *)(v196 + 32) = v182;
                                  uint64_t v183 = *(void *)(v51 + 160);
                                  uint64_t v184 = v180[12];
                                  if (!v184) {
                                    goto LABEL_284;
                                  }
                                  goto LABEL_283;
                                case 8:
                                  uint64_t v201 = *(void *)(v51 + 64);
                                  *(void *)(v201 + 40) = 0;
                                  uint64_t v182 = v180[13];
                                  *(void *)(v201 + 32) = v182;
                                  uint64_t v183 = *(void *)(v51 + 160);
                                  uint64_t v184 = v180[14];
                                  if (!v184) {
                                    goto LABEL_284;
                                  }
LABEL_283:
                                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v184 + 8), 1uLL, memory_order_relaxed);
LABEL_284:
                                  uint64_t v185 = *(std::__shared_weak_count **)(v183 + 40);
                                  *(void *)(v183 + 32) = v182;
                                  *(void *)(v183 + 40) = v184;
                                  if (v185 && !atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *, __n128))v185->__on_zero_shared)(v185, v173);
                                    std::__shared_weak_count::__release_weak(v185);
                                  }
                                  uint64_t v186 = *(void **)(v51 + 64);
                                  v186[1] = 0;
                                  uint64_t v187 = *(void *)(v36 + 1488);
                                  *uint64_t v186 = v187;
                                  uint64_t v188 = *(void **)(v51 + 160);
                                  uint64_t v189 = *(void *)(v36 + 1496);
                                  if (v189) {
                                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v189 + 8), 1uLL, memory_order_relaxed);
                                  }
                                  uint64_t v190 = (std::__shared_weak_count *)v188[1];
                                  *uint64_t v188 = v187;
                                  v188[1] = v189;
                                  if (v190 && !atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *, __n128))v190->__on_zero_shared)(v190, v173);
                                    std::__shared_weak_count::__release_weak(v190);
                                  }
                                  uint64_t v191 = *(void *)(v51 + 64);
                                  *(void *)(v191 + 24) = 0;
                                  uint64_t v192 = *(void *)(v36 + 1504);
                                  *(void *)(v191 + 16) = v192;
                                  uint64_t v193 = *(void *)(v51 + 160);
                                  uint64_t v194 = *(void *)(v36 + 1512);
                                  if (v194) {
                                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v194 + 8), 1uLL, memory_order_relaxed);
                                  }
                                  unint64_t v195 = *(std::__shared_weak_count **)(v193 + 24);
                                  *(void *)(v193 + 16) = v192;
                                  *(void *)(v193 + 24) = v194;
                                  if (v195 && !atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *, __n128))v195->__on_zero_shared)(v195, v173);
                                    std::__shared_weak_count::__release_weak(v195);
                                  }
                                  break;
                                default:
                                  break;
                              }
                            }
                          }
                          *(void *)(v171 + 32) = v51;
                          break;
                      }
LABEL_97:
                      if (++v46 == 10)
                      {
                        unint64_t v7 = v203;
                        uint64_t v8 = v202;
                        goto LABEL_78;
                      }
                      continue;
                    }
LABEL_135:
                    if (v52) {
                      *int v52 = v51;
                    }
                    uint64_t v85 = v52 + 1;
                    goto LABEL_226;
                  }
                  uint64_t v83 = *(void *)(v49 + 88);
                  if (!v83) {
                    goto LABEL_310;
                  }
                  uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v83 + 48))(v83);
                  int v52 = *(uint64_t **)(v49 + 40);
                  unint64_t v84 = *(void *)(v49 + 48);
                  if ((unint64_t)v52 < v84) {
                    goto LABEL_135;
                  }
                  uint64_t v89 = *(void *)(v49 + 32);
                  uint64_t v90 = ((uint64_t)v52 - v89) >> 3;
                  unint64_t v56 = v90 + 1;
                  if ((unint64_t)(v90 + 1) >> 61) {
                    goto LABEL_311;
                  }
                  uint64_t v91 = v84 - v89;
                  if (v91 >> 2 > v56) {
                    unint64_t v56 = v91 >> 2;
                  }
                  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  if (v56)
                  {
                    uint64_t v92 = 8 * v56;
                    uint64_t v93 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v49 + 56) + 16))(*(void *)(v49 + 56), 8 * v56, 8);
                    uint64_t v60 = (uint64_t *)(v93 + 8 * v90);
                    unint64_t v56 = v93 + v92;
                    if (v93) {
                      *uint64_t v60 = v51;
                    }
                  }
                  else
                  {
                    uint64_t v60 = (uint64_t *)(8 * v90);
                  }
                  uint64_t v127 = *(void *)(v49 + 32);
                  uint64_t v97 = *(void *)(v49 + 40);
                  uint64_t v128 = v97 - v127;
                  if (v97 == v127) {
                    goto LABEL_197;
                  }
                  unint64_t v129 = v128 - 8;
                  if ((unint64_t)(v128 - 8) < 0x38)
                  {
                    uint64_t v101 = v60;
                  }
                  else
                  {
                    uint64_t v101 = v60;
                    if ((unint64_t)(v97 - (void)v60) >= 0x20)
                    {
                      uint64_t v130 = (v129 >> 3) + 1;
                      uint64_t v131 = v60 - 2;
                      unint64_t v132 = (long long *)(v97 - 16);
                      uint64_t v133 = v130 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v134 = *v132;
                        *((_OWORD *)v131 - 1) = *(v132 - 1);
                        *(_OWORD *)uint64_t v131 = v134;
                        v131 -= 4;
                        v132 -= 2;
                        v133 -= 4;
                      }
                      while (v133);
                      uint64_t v101 = &v60[-(v130 & 0x3FFFFFFFFFFFFFFCLL)];
                      v97 -= 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v130 == (v130 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_223;
                      }
                    }
                  }
                  do
                  {
                    uint64_t v155 = *(void *)(v97 - 8);
                    v97 -= 8;
                    *--uint64_t v101 = v155;
                  }
                  while (v97 != v127);
LABEL_223:
                  uint64_t v97 = *(void *)(v49 + 32);
                  goto LABEL_224;
                }
                break;
              }
              if (((1 << v46) & 0x122) != 0)
              {
                uint64_t v61 = v47[16];
                uint64_t v62 = *(void *)(v61 + 8);
                if (v62 != *(void *)v61)
                {
                  uint64_t v51 = *(void *)(v62 - 8);
                  *(void *)(v61 + 8) = v62 - 8;
                  uint64_t v63 = *(uint64_t **)(v61 + 40);
                  unint64_t v64 = *(void *)(v61 + 48);
                  if ((unint64_t)v63 >= v64)
                  {
                    uint64_t v65 = *(void *)(v61 + 32);
                    uint64_t v66 = ((uint64_t)v63 - v65) >> 3;
                    unint64_t v67 = v66 + 1;
                    if ((unint64_t)(v66 + 1) >> 61) {
                      goto LABEL_311;
                    }
                    uint64_t v68 = v64 - v65;
                    if (v68 >> 2 > v67) {
                      unint64_t v67 = v68 >> 2;
                    }
                    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    if (v67)
                    {
                      uint64_t v69 = 8 * v67;
                      uint64_t v70 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v61 + 56) + 16))(*(void *)(v61 + 56), 8 * v67, 8);
                      uint64_t v71 = (uint64_t *)(v70 + 8 * v66);
                      unint64_t v67 = v70 + v69;
                      if (v70) {
                        *uint64_t v71 = v51;
                      }
                    }
                    else
                    {
                      uint64_t v71 = (uint64_t *)(8 * v66);
                    }
                    uint64_t v118 = *(void *)(v61 + 32);
                    uint64_t v117 = *(void *)(v61 + 40);
                    uint64_t v119 = v117 - v118;
                    if (v117 != v118)
                    {
                      unint64_t v120 = v119 - 8;
                      if ((unint64_t)(v119 - 8) < 0x38)
                      {
                        uint64_t v121 = v71;
                      }
                      else
                      {
                        uint64_t v121 = v71;
                        if ((unint64_t)(v117 - (void)v71) >= 0x20)
                        {
                          uint64_t v122 = (v120 >> 3) + 1;
                          BOOL v123 = v71 - 2;
                          uint64_t v124 = (long long *)(v117 - 16);
                          uint64_t v125 = v122 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            long long v126 = *v124;
                            *((_OWORD *)v123 - 1) = *(v124 - 1);
                            *(_OWORD *)BOOL v123 = v126;
                            v123 -= 4;
                            v124 -= 2;
                            v125 -= 4;
                          }
                          while (v125);
                          uint64_t v121 = &v71[-(v122 & 0x3FFFFFFFFFFFFFFCLL)];
                          v117 -= 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
                          if (v122 == (v122 & 0x3FFFFFFFFFFFFFFCLL)) {
                            goto LABEL_242;
                          }
                        }
                      }
                      do
                      {
                        uint64_t v154 = *(void *)(v117 - 8);
                        v117 -= 8;
                        *--uint64_t v121 = v154;
                      }
                      while (v117 != v118);
                      goto LABEL_242;
                    }
LABEL_217:
                    uint64_t v121 = v71;
LABEL_243:
                    uint64_t v88 = v71 + 1;
                    *(void *)(v61 + 32) = v121;
                    *(void *)(v61 + 40) = v71 + 1;
                    uint64_t v168 = *(void *)(v61 + 48);
                    *(void *)(v61 + 48) = v67;
                    if (v117) {
                      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v61 + 56) + 40))(*(void *)(v61 + 56), v117, v168 - v117);
                    }
LABEL_245:
                    *(void *)(v61 + 40) = v88;
                    *(void *)&v208[0] = v51;
                    uint64_t v157 = *(void *)(v61 + 120);
                    if (!v157) {
                      goto LABEL_310;
                    }
                    goto LABEL_253;
                  }
LABEL_140:
                  if (v63) {
                    *uint64_t v63 = v51;
                  }
                  uint64_t v88 = v63 + 1;
                  goto LABEL_245;
                }
                uint64_t v86 = *(void *)(v61 + 88);
                if (!v86) {
                  goto LABEL_310;
                }
                uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 48))(v86);
                uint64_t v63 = *(uint64_t **)(v61 + 40);
                unint64_t v87 = *(void *)(v61 + 48);
                if ((unint64_t)v63 < v87) {
                  goto LABEL_140;
                }
                uint64_t v107 = *(void *)(v61 + 32);
                uint64_t v108 = ((uint64_t)v63 - v107) >> 3;
                unint64_t v67 = v108 + 1;
                if ((unint64_t)(v108 + 1) >> 61) {
                  goto LABEL_311;
                }
                uint64_t v109 = v87 - v107;
                if (v109 >> 2 > v67) {
                  unint64_t v67 = v109 >> 2;
                }
                if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v67)
                {
                  uint64_t v110 = 8 * v67;
                  uint64_t v111 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v61 + 56) + 16))(*(void *)(v61 + 56), 8 * v67, 8);
                  uint64_t v71 = (uint64_t *)(v111 + 8 * v108);
                  unint64_t v67 = v111 + v110;
                  if (v111) {
                    *uint64_t v71 = v51;
                  }
                }
                else
                {
                  uint64_t v71 = (uint64_t *)(8 * v108);
                }
                uint64_t v146 = *(void *)(v61 + 32);
                uint64_t v117 = *(void *)(v61 + 40);
                uint64_t v147 = v117 - v146;
                if (v117 == v146) {
                  goto LABEL_217;
                }
                unint64_t v148 = v147 - 8;
                if ((unint64_t)(v147 - 8) < 0x38)
                {
                  uint64_t v121 = v71;
                }
                else
                {
                  uint64_t v121 = v71;
                  if ((unint64_t)(v117 - (void)v71) >= 0x20)
                  {
                    uint64_t v149 = (v148 >> 3) + 1;
                    unint64_t v150 = v71 - 2;
                    uint64_t v151 = (long long *)(v117 - 16);
                    uint64_t v152 = v149 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v153 = *v151;
                      *((_OWORD *)v150 - 1) = *(v151 - 1);
                      *(_OWORD *)unint64_t v150 = v153;
                      v150 -= 4;
                      v151 -= 2;
                      v152 -= 4;
                    }
                    while (v152);
                    uint64_t v121 = &v71[-(v149 & 0x3FFFFFFFFFFFFFFCLL)];
                    v117 -= 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v149 == (v149 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_242;
                    }
                  }
                }
                do
                {
                  uint64_t v167 = *(void *)(v117 - 8);
                  v117 -= 8;
                  *--uint64_t v121 = v167;
                }
                while (v117 != v146);
LABEL_242:
                uint64_t v117 = *(void *)(v61 + 32);
                goto LABEL_243;
              }
              uint64_t v72 = v47[18];
              uint64_t v73 = *(void *)(v72 + 8);
              if (v73 != *(void *)v72)
              {
                uint64_t v51 = *(void *)(v73 - 8);
                *(void *)(v72 + 8) = v73 - 8;
                uint64_t v74 = *(uint64_t **)(v72 + 40);
                unint64_t v75 = *(void *)(v72 + 48);
                if ((unint64_t)v74 >= v75)
                {
                  uint64_t v76 = *(void *)(v72 + 32);
                  uint64_t v77 = ((uint64_t)v74 - v76) >> 3;
                  unint64_t v78 = v77 + 1;
                  if ((unint64_t)(v77 + 1) >> 61) {
                    goto LABEL_311;
                  }
                  uint64_t v79 = v75 - v76;
                  if (v79 >> 2 > v78) {
                    unint64_t v78 = v79 >> 2;
                  }
                  if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  if (v78)
                  {
                    uint64_t v80 = 8 * v78;
                    uint64_t v81 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v72 + 56) + 16))(*(void *)(v72 + 56), 8 * v78, 8);
                    uint64_t v82 = (uint64_t *)(v81 + 8 * v77);
                    unint64_t v78 = v81 + v80;
                    if (v81) {
                      *uint64_t v82 = v51;
                    }
                  }
                  else
                  {
                    uint64_t v82 = (uint64_t *)(8 * v77);
                  }
                  uint64_t v137 = *(void *)(v72 + 32);
                  uint64_t v136 = *(void *)(v72 + 40);
                  uint64_t v138 = v136 - v137;
                  if (v136 != v137)
                  {
                    unint64_t v139 = v138 - 8;
                    if ((unint64_t)(v138 - 8) < 0x38)
                    {
                      uint64_t v140 = v82;
                    }
                    else
                    {
                      uint64_t v140 = v82;
                      if ((unint64_t)(v136 - (void)v82) >= 0x20)
                      {
                        uint64_t v141 = (v139 >> 3) + 1;
                        uint64_t v142 = v82 - 2;
                        uint64_t v143 = (long long *)(v136 - 16);
                        uint64_t v144 = v141 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v145 = *v143;
                          *((_OWORD *)v142 - 1) = *(v143 - 1);
                          *(_OWORD *)uint64_t v142 = v145;
                          v142 -= 4;
                          v143 -= 2;
                          v144 -= 4;
                        }
                        while (v144);
                        uint64_t v140 = &v82[-(v141 & 0x3FFFFFFFFFFFFFFCLL)];
                        v136 -= 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v141 == (v141 & 0x3FFFFFFFFFFFFFFCLL)) {
                          goto LABEL_249;
                        }
                      }
                    }
                    do
                    {
                      uint64_t v166 = *(void *)(v136 - 8);
                      v136 -= 8;
                      *--uint64_t v140 = v166;
                    }
                    while (v136 != v137);
                    goto LABEL_249;
                  }
LABEL_236:
                  uint64_t v140 = v82;
LABEL_250:
                  int64_t v96 = v82 + 1;
                  *(void *)(v72 + 32) = v140;
                  *(void *)(v72 + 40) = v82 + 1;
                  uint64_t v170 = *(void *)(v72 + 48);
                  *(void *)(v72 + 48) = v78;
                  if (v136) {
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v72 + 56) + 40))(*(void *)(v72 + 56), v136, v170 - v136);
                  }
LABEL_252:
                  *(void *)(v72 + 40) = v96;
                  *(void *)&v208[0] = v51;
                  uint64_t v157 = *(void *)(v72 + 120);
                  if (!v157)
                  {
LABEL_310:
                    std::__throw_bad_function_call[abi:nn180100]();
LABEL_311:
                    abort();
                  }
                  goto LABEL_253;
                }
LABEL_154:
                if (v74) {
                  *uint64_t v74 = v51;
                }
                int64_t v96 = v74 + 1;
                goto LABEL_252;
              }
              uint64_t v94 = *(void *)(v72 + 88);
              if (!v94) {
                goto LABEL_310;
              }
              uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v94 + 48))(v94);
              uint64_t v74 = *(uint64_t **)(v72 + 40);
              unint64_t v95 = *(void *)(v72 + 48);
              if ((unint64_t)v74 < v95) {
                goto LABEL_154;
              }
              uint64_t v112 = *(void *)(v72 + 32);
              uint64_t v113 = ((uint64_t)v74 - v112) >> 3;
              unint64_t v78 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 61) {
                goto LABEL_311;
              }
              uint64_t v114 = v95 - v112;
              if (v114 >> 2 > v78) {
                unint64_t v78 = v114 >> 2;
              }
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
              }
              if (v78)
              {
                uint64_t v115 = 8 * v78;
                uint64_t v116 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v72 + 56) + 16))(*(void *)(v72 + 56), 8 * v78, 8);
                uint64_t v82 = (uint64_t *)(v116 + 8 * v113);
                unint64_t v78 = v116 + v115;
                if (v116) {
                  *uint64_t v82 = v51;
                }
              }
              else
              {
                uint64_t v82 = (uint64_t *)(8 * v113);
              }
              uint64_t v158 = *(void *)(v72 + 32);
              uint64_t v136 = *(void *)(v72 + 40);
              uint64_t v159 = v136 - v158;
              if (v136 == v158) {
                goto LABEL_236;
              }
              unint64_t v160 = v159 - 8;
              if ((unint64_t)(v159 - 8) < 0x38)
              {
                uint64_t v140 = v82;
              }
              else
              {
                uint64_t v140 = v82;
                if ((unint64_t)(v136 - (void)v82) >= 0x20)
                {
                  uint64_t v161 = (v160 >> 3) + 1;
                  unint64_t v162 = v82 - 2;
                  uint64_t v163 = (long long *)(v136 - 16);
                  uint64_t v164 = v161 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v165 = *v163;
                    *((_OWORD *)v162 - 1) = *(v163 - 1);
                    *(_OWORD *)unint64_t v162 = v165;
                    v162 -= 4;
                    v163 -= 2;
                    v164 -= 4;
                  }
                  while (v164);
                  uint64_t v140 = &v82[-(v161 & 0x3FFFFFFFFFFFFFFCLL)];
                  v136 -= 8 * (v161 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v161 == (v161 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_249;
                  }
                }
              }
              do
              {
                uint64_t v169 = *(void *)(v136 - 8);
                v136 -= 8;
                *--uint64_t v140 = v169;
              }
              while (v136 != v158);
LABEL_249:
              uint64_t v136 = *(void *)(v72 + 32);
              goto LABEL_250;
            }
            uint64_t v22 = *(void *)(a1 + 184);
            if ((*(unsigned char *)(v22 + 16) & 2) == 0
              && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
            {
              *(void *)&v208[0] = &v206;
              __n128 v207 = v208;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v207, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
            uint64_t v23 = *(float **)(v22 + 72);
            double v24 = 0.0;
          }
          else
          {
            if ((*(void *)&v10 & (*(void *)&v10 - 1)) != 0)
            {
              unint64_t v25 = 0x8BD499FBD96FBB9ELL;
              if (*(void *)&v10 <= 0x8BD499FBD96FBB9ELL) {
                unint64_t v25 = 0x8BD499FBD96FBB9ELL % *(void *)&v10;
              }
              uint64_t v21 = *(void **)(*v9 + 8 * v25);
              do
              {
                do
                  uint64_t v21 = (void *)*v21;
                while (v21[1] != 0x8BD499FBD96FBB9ELL);
              }
              while (v21[2] != 0x8BD499FBD96FBB9ELL);
            }
            else
            {
              uint64_t v21 = *(void **)(*v9 + 8 * ((*(void *)&v10 - 1) & 0x8BD499FBD96FBB9ELL));
              do
              {
                do
                  uint64_t v21 = (void *)*v21;
                while (v21[1] != 0x8BD499FBD96FBB9ELL);
              }
              while (v21[2] != 0x8BD499FBD96FBB9ELL);
            }
            double v26 = 0.0;
            if (**(unsigned char **)(v21[5] + 32) && *(unsigned char *)(a1 + 176)) {
              double v26 = *(double *)(v18 + 24) * 0.0000000249532021 * (double)(1 << *(unsigned char *)(a1 + 153));
            }
            uint64_t v27 = *(void *)(a1 + 184);
            if ((*(unsigned char *)(v27 + 16) & 2) == 0
              && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
            {
              *(void *)&v208[0] = &v206;
              __n128 v207 = v208;
              std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v207, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
            }
            uint64_t v23 = *(float **)(v27 + 72);
            double v24 = v26;
          }
          int v20 = ggl::CullingGrid::intersectedCellsForView(v23, v24);
          goto LABEL_67;
        }
      }
      else
      {
        if (v15 >= *(void *)&v10) {
          v15 %= *(void *)&v10;
        }
        if (v15 != v12) {
          goto LABEL_41;
        }
      }
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_41;
      }
    }
  }
  if (v7 != v8) {
    goto LABEL_76;
  }
}

uint64_t md::PolylineOverlayStyle::updateFromStyleQuery<md::Stroke1StyleProperties>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a3 + 28) = 1065353216;
  *(_DWORD *)(a3 + 52) = 0;
  uint64_t v8 = *(void *)(a2 + 144);
  uint64_t v9 = *(std::__shared_weak_count **)(a2 + 152);
  v96[0] = v8;
  v96[1] = (unint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v97, v8, (uint64_t)v9);
  if (!v9 || atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v98) {
      goto LABEL_6;
    }
LABEL_26:
    float v26 = 0.0;
    LOBYTE(v27) = 2;
    float v28 = 0.0;
    float v29 = 0.0;
    float v30 = 0.0;
LABEL_83:
    float v78 = v30 * 12.92;
    goto LABEL_85;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!v98) {
    goto LABEL_26;
  }
LABEL_6:
  int8x8_t v10 = *(void **)(*(void *)a2 + 8);
  unint64_t v11 = v10[1];
  if ((v11 & (v11 - 1)) != 0)
  {
    unint64_t v13 = 0x1AF456233693CD46;
    if (v11 <= 0x1AF456233693CD46) {
      unint64_t v13 = 0x1AF456233693CD46 % v11;
    }
    uint64_t v12 = *(void **)(*v10 + 8 * v13);
    do
    {
      do
        uint64_t v12 = (void *)*v12;
      while (v12[1] != 0x1AF456233693CD46);
    }
    while (v12[2] != 0x1AF456233693CD46);
  }
  else
  {
    uint64_t v12 = *(void **)(*v10 + 8 * ((v11 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        uint64_t v12 = (void *)*v12;
      while (v12[1] != 0x1AF456233693CD46);
    }
    while (v12[2] != 0x1AF456233693CD46);
  }
  uint64_t v14 = *(void *)(v12[5] + 32);
  float v15 = fmaxf(*(float *)(v14 + 3080) + *(float *)(v14 + 3076), 1.0);
  unint64_t v16 = *(void *)(v97[0] + 24);
  float v17 = fminf(fmaxf(v15, 0.0), 23.0);
  uint64_t v18 = *(float **)v16;
  if (*(void *)v16
    && (float v19 = *v18, LODWORD(v18) = *v18 == 1.0, *(unsigned char *)(v16 + 10))
    && (v19 != 0.0 ? (BOOL v20 = v19 == 1.0) : (BOOL v20 = 1), !v20)
    || (v21 = *(unsigned __int8 *)(v16 + v18 + 11), float v19 = 0.0, v21 == 2))
  {
    LOBYTE(v96[0]) = 1;
    char v99 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v16, 0x61u, 0, (BOOL *)v96, v17);
    float v23 = v22;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v16, 0x61u, 1u, (BOOL *)&v99, v17);
    float v25 = v23 + (float)((float)(v24 - v23) * v19);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(void *)(v97[0] + 24), 0x61u, v21, 0, v17);
  }
  *(float *)a3 = v25;
  uint64_t v31 = *(void *)(v97[0] + 24);
  if ((int)v15 >= 0x17) {
    unsigned int v32 = 23;
  }
  else {
    unsigned int v32 = (int)v15;
  }
  unsigned int v33 = *(float **)v31;
  if (*(void *)v31
    && (float v34 = *v33, LODWORD(v33) = *v33 == 1.0, *(unsigned char *)(v31 + 10))
    && (v34 != 0.0 ? (BOOL v35 = v34 == 1.0) : (BOOL v35 = 1), !v35)
    || (v36 = *(unsigned __int8 *)(v31 + v33 + 11), float v34 = 0.0, v36 == 2))
  {
    LOBYTE(v96[0]) = 1;
    char v99 = 1;
    char v37 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v31, 0x5Bu, v32, 0, v96);
    char v38 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v31, 0x5Bu, v32, 1, &v99);
    if (v34 < 1.0) {
      char v38 = v37;
    }
  }
  else
  {
    char v38 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v97[0] + 24), 0x5Bu, v32, v36, 0);
  }
  *(unsigned char *)(a3 + 33) = v38 != 0;
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(v96, *(void *)(v97[0] + 24), 0x5Du, 2u, v17);
  LOWORD(v4) = WORD1(v96[0]);
  LOWORD(v34) = v96[0];
  LOWORD(v15) = HIWORD(v96[0]);
  LOWORD(v3) = WORD2(v96[0]);
  uint64_t v39 = *(void *)(v97[0] + 24);
  float v40 = *(float **)v39;
  if (*(void *)v39
    && (float v41 = *v40, LODWORD(v40) = *v40 == 1.0, *(unsigned char *)(v39 + 10))
    && (v41 != 0.0 ? (BOOL v42 = v41 == 1.0) : (BOOL v42 = 1), !v42)
    || (v43 = *(unsigned __int8 *)(v39 + v40 + 11), float v41 = 0.0, v43 == 2))
  {
    LOBYTE(v96[0]) = 1;
    char v99 = 1;
    int v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v39, 0x13Fu, v32, 0, v96);
    int v44 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v39, 0x13Fu, v32, 1u, &v99);
    if (v41 >= 1.0) {
      LOBYTE(v27) = v44;
    }
  }
  else
  {
    int v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v97[0] + 24), 0x13Fu, v32, v43, 0);
  }
  double v93 = *(double *)(a2 + 184);
  double v94 = *(double *)(a2 + 192);
  double v89 = *(double *)(a2 + 200);
  double v91 = *(double *)(a2 + 208);
  uint64_t v45 = *(void *)(v14 + 5584);
  if (!v45) {
    uint64_t v45 = v14;
  }
  char v46 = *(unsigned char *)(a2 + 161);
  double v95 = *(double *)(v45 + 3768);
  double v47 = *(double *)(v45 + 1368);
  int v48 = *(_DWORD *)(a2 + 168);
  int v49 = *(_DWORD *)(a2 + 164);
  [**(id **)a2 sizeInPixels];
  double v92 = v50;
  double v90 = v51;
  uint64_t v52 = *(void *)(v97[0] + 24);
  unsigned int v53 = *(unsigned __int8 *)(v52 + 12);
  unsigned int v54 = v53;
  if (v53 != 2)
  {
LABEL_59:
    double v55 = 0.0;
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v52, 0x1D7u, v54)) {
      goto LABEL_68;
    }
    goto LABEL_60;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(v97[0] + 24), 0x1D7u, 0) & 1) == 0)
  {
    unsigned int v54 = 1;
    goto LABEL_59;
  }
LABEL_60:
  unint64_t v56 = *(float **)v52;
  if (*(void *)v52 && (float v57 = *v56, LODWORD(v56) = *v56 == 1.0, *(unsigned char *)(v52 + 10)) && v57 != 0.0 && v57 != 1.0
    || (v58 = *(unsigned __int8 *)(v52 + v56 + 11), float v57 = 0.0, v58 == 2))
  {
    LOBYTE(v96[0]) = 1;
    char v99 = 1;
    uint64_t v59 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v52, 0x1D7u, 0, v96);
    float v60 = *v59
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v52, 0x1D7u, 1u, &v99)
                        - *v59)
                * v57);
  }
  else
  {
    float v60 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v52, 0x1D7u, v58, 0);
  }
  double v55 = v60;
  uint64_t v52 = *(void *)(v97[0] + 24);
  unsigned int v53 = *(unsigned __int8 *)(v52 + 12);
LABEL_68:
  if (v53 != 2) {
    goto LABEL_71;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v52, 0x1D8u, 0) & 1) == 0)
  {
    unsigned int v53 = 1;
LABEL_71:
    int hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v52, 0x1D8u, v53);
    double v62 = 0.0;
    if (!hasValueForKeyAtEnd) {
      goto LABEL_80;
    }
  }
  uint64_t v63 = *(float **)v52;
  if (*(void *)v52 && (float v64 = *v63, LODWORD(v63) = *v63 == 1.0, *(unsigned char *)(v52 + 10)) && v64 != 0.0 && v64 != 1.0
    || (unsigned int v65 = *(unsigned __int8 *)(v52 + v63 + 11), v64 = 0.0, v65 == 2))
  {
    LOBYTE(v96[0]) = 1;
    char v99 = 1;
    uint64_t v66 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v52, 0x1D8u, 0, v96);
    float v67 = *v66
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v52, 0x1D8u, 1u, &v99)
                        - *v66)
                * v64);
  }
  else
  {
    float v67 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v52, 0x1D8u, v65, 0);
  }
  double v62 = v67;
LABEL_80:
  float v68 = (float)v3;
  float v69 = (float)LODWORD(v15);
  float v30 = (float)LODWORD(v34) * 0.000015259;
  double v70 = v47;
  float v71 = v69 * 0.000015259;
  double v72 = (double)(1 << v46);
  double v73 = 1.0 / v72 * (double)v48;
  double v74 = 1.0 / v72 * (double)((1 << v46) + ~v49);
  float v75 = (v89 - v73) * v72;
  float v76 = (v91 - v74) * v72;
  *(float *)&double v73 = (v73 - v93) * v72;
  *(float *)&double v74 = (v74 - v94) * v72;
  float v77 = fmin(fmax(log2(v70* fmax(v75 + *(float *)&v73, v76 + *(float *)&v74)/ (v95* v72* fmin(v90, v92)* fmax(v55, 0.000000001)))/ fmax(v62, 0.000000001), 0.0), 1.0);
  float v26 = v71 * v77;
  if ((float)(v71 * v77) == 0.0) {
    *(unsigned char *)(a3 + 33) = 0;
  }
  float v29 = (float)v4 * 0.000015259;
  float v28 = v68 * 0.000015259;
  if (v30 < 0.0031308) {
    goto LABEL_83;
  }
  float v78 = (float)(powf(v30, 0.41667) * 1.055) + -0.055;
LABEL_85:
  if (v29 >= 0.0031308) {
    float v79 = (float)(powf(v29, 0.41667) * 1.055) + -0.055;
  }
  else {
    float v79 = v29 * 12.92;
  }
  if (v28 >= 0.0031308) {
    float v80 = (float)(powf(v28, 0.41667) * 1.055) + -0.055;
  }
  else {
    float v80 = v28 * 12.92;
  }
  *(float *)(a3 + 8) = v78;
  *(float *)(a3 + 12) = v79;
  *(float *)(a3 + 16) = v80;
  *(float *)(a3 + 20) = v26;
  float v81 = *(float *)a3;
  float v82 = *(float *)(a2 + 72) * *(float *)a3;
  *(float *)(a3 + 4) = v82;
  *(void *)(a3 + 36) = *(void *)(a1 + 152);
  if (v27 == 2)
  {
    float v84 = 0.5;
    float v83 = 0.5;
  }
  else if (v27 == 1)
  {
    float v83 = 1.0;
    float v84 = 0.0;
  }
  else
  {
    float v83 = 0.0;
    float v84 = 1.0;
  }
  *(float *)(a3 + 44) = -(float)(v82 * v83);
  *(float *)(a3 + 48) = v84 * v82;
  float v85 = *(float *)(a3 + 28);
  BOOL v86 = 1;
  if (v85 >= 1.0 && !*(_DWORD *)(a3 + 52))
  {
    if (*(void *)(a1 + 176) == *(void *)(a1 + 168)) {
      BOOL v86 = *(float *)(a1 + 148) < 1.0;
    }
    else {
      BOOL v86 = *(unsigned char *)(a1 + 192) != 0;
    }
  }
  BOOL v87 = 0;
  *(unsigned char *)(a3 + 32) = v86;
  *(void *)(a3 + 36) = *(void *)(a1 + 152);
  *(float *)(a3 + 4) = *(float *)(a2 + 72) * v81;
  if (*(unsigned char *)(a3 + 33) && v85 > 0.0) {
    BOOL v87 = v26 > 0.0 || *(void *)(a1 + 176) != *(void *)(a1 + 168);
  }
  *(unsigned char *)a1 = v87;
  return gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v97);
}

void sub_1A2244C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::PolylineOverlayStyle::updateFromOverlay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 1;
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 196);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 196));
  float v7 = *(float *)(a1 + 132);
  float v8 = fabsf(v7);
  if (v7 <= 0.0 || v8 <= (float)(v8 * 0.000011921) || v8 < 1.1755e-38)
  {
    float v11 = -1.0;
    if (*(float *)(a2 + 20) > 1.9) {
      float v11 = 0.0;
    }
    float v12 = v11 + *(float *)(a2 + 8);
    float v7 = 21.0;
    if (v12 <= 18.0)
    {
      float v13 = VKVectorOverlayAutomaticLineWidthForZoomLevel(double)::kLineWidthForZoomLevel[vcvtmd_u64_f64(v12)];
      float v7 = v13
         + (v12 - floor(v12))
         * (float)(VKVectorOverlayAutomaticLineWidthForZoomLevel(double)::kLineWidthForZoomLevel[vcvtpd_u64_f64(v12)]
                 - v13);
    }
  }
  *(float *)a3 = v7;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 144);
  float v14 = *(float *)(a1 + 148);
  *(float *)(a3 + 20) = v14;
  float v15 = *(float *)(a2 + 120) * *(float *)(a1 + 160);
  *(float *)(a3 + 28) = v15;
  if (*(unsigned char *)(a2 + 124)) {
    unint64_t v16 = (int *)(a2 + 128);
  }
  else {
    unint64_t v16 = (int *)(a1 + 164);
  }
  int v17 = *v16;
  *(_DWORD *)(a3 + 52) = v17;
  if (v15 >= 1.0 && v17 == 0)
  {
    if (*(void *)(a1 + 176) == *(void *)(a1 + 168)) {
      BOOL v19 = *(float *)(a1 + 148) < 1.0;
    }
    else {
      BOOL v19 = *(unsigned char *)(a1 + 192) != 0;
    }
  }
  else
  {
    BOOL v19 = 1;
  }
  BOOL v20 = 0;
  *(unsigned char *)(a3 + 32) = v19;
  *(void *)(a3 + 36) = *(void *)(a1 + 152);
  *(float *)(a3 + 4) = *(float *)(a2 + 72) * v7;
  if (*(unsigned char *)(a3 + 33) && v15 > 0.0) {
    BOOL v20 = v14 > 0.0 || *(void *)(a1 + 176) != *(void *)(a1 + 168);
  }
  *(unsigned char *)a1 = v20;
  os_unfair_lock_unlock(v6);
}

void md::PolylineOverlayStyle::writePasses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = 0;
  float v8 = *(float *)(a2 + 68) * (float)**(unsigned int **)(*(void *)(a2 + 112) + 256);
  int v9 = *(unsigned __int8 *)(a2 + 136);
  if (*(unsigned char *)(a3 + 32))
  {
    if (*(unsigned char *)(a1 + 193))
    {
      int8x8_t v10 = *(void **)(a1 + 8);
      float v11 = *(std::__shared_weak_count **)(a1 + 16);
      uint64_t v128 = v10;
      unint64_t v129 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v112 = xmmword_1A28FCDD0;
      md::PolylineOverlayStyle::setStyleConstants(v10, a3, (__int32 *)&v112, 1.0, v8);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    float v12 = *(void **)(a1 + 24);
    float v13 = *(std::__shared_weak_count **)(a1 + 32);
    long long v126 = v12;
    uint64_t v127 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v14 = *(_DWORD *)(a3 + 20);
    DWORD2(v112) = 0;
    *(void *)&long long v112 = 0;
    HIDWORD(v112) = v14;
    md::PolylineOverlayStyle::setStyleConstants(v12, a3, (__int32 *)&v112, 1.0, v8);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a1 + 193);
    *(_WORD *)(a1 + 121) = 257;
    *(unsigned char *)(a1 + 123) = 0;
    if (*(unsigned char *)(a2 + 132) && *(unsigned char *)(a2 + 133))
    {
      *(_WORD *)(a1 + 128) = 257;
      float v15 = *(void **)(a1 + 104);
      unint64_t v16 = *(std::__shared_weak_count **)(a1 + 112);
      uint64_t v124 = v15;
      uint64_t v125 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::PolylineOverlayStyle::setStyleConstants(v15, a3, (__int32 *)(a3 + 8), 0.2, v8);
LABEL_29:
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 123) = 1;
    if (*(unsigned char *)(a2 + 132) && *(unsigned char *)(a2 + 133))
    {
      *(_WORD *)(a1 + 128) = 257;
      int v17 = *(void **)(a1 + 104);
      uint64_t v18 = *(std::__shared_weak_count **)(a1 + 112);
      uint64_t v122 = *(void *)(a1 + 104);
      BOOL v123 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      md::PolylineOverlayStyle::setStyleConstants(v17, a3, (__int32 *)(a3 + 8), 0.2, v8);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (*(unsigned char *)(a1 + 193))
      {
        *(unsigned char *)(a1 + 120) = 1;
        BOOL v19 = *(void **)(a1 + 8);
        unint64_t v16 = *(std::__shared_weak_count **)(a1 + 16);
        unint64_t v120 = v19;
        uint64_t v121 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v112 = xmmword_1A28FCDD0;
        md::PolylineOverlayStyle::setStyleConstants(v19, a3, (__int32 *)&v112, 1.0, v8);
        goto LABEL_29;
      }
    }
  }
  BOOL v20 = *(void **)(a1 + 40);
  unsigned int v21 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v118 = v20;
  uint64_t v119 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::PolylineOverlayStyle::setStyleConstants(v20, a3, (__int32 *)(a3 + 8), 1.0, v8);
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (!v9) {
      return;
    }
  }
  else if (!v9)
  {
    return;
  }
  long long v112 = xmmword_1A28FD2A0;
  long long v113 = xmmword_1A28FD460;
  __int16 v114 = 256;
  uint64_t v116 = 0x3F800000BF800000;
  *(unsigned char *)a1 = 1;
  HIDWORD(v113) = 1065353216;
  int v117 = 0;
  uint64_t v22 = *(void *)(a2 + 144);
  float v23 = *(std::__shared_weak_count **)(a2 + 152);
  v130[0] = v22;
  v130[1] = (unint64_t)v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)v131, v22, (uint64_t)v23);
  if (!v23 || atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v132) {
      goto LABEL_42;
    }
LABEL_64:
    float v40 = 0.0;
    LOBYTE(v41) = 1;
    float v42 = 0.0;
    float v43 = 0.0;
    float v44 = 0.0;
    goto LABEL_121;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (!v132) {
    goto LABEL_64;
  }
LABEL_42:
  float v24 = *(void **)(*(void *)a2 + 8);
  unint64_t v25 = v24[1];
  if ((v25 & (v25 - 1)) != 0)
  {
    unint64_t v27 = 0x1AF456233693CD46;
    if (v25 <= 0x1AF456233693CD46) {
      unint64_t v27 = 0x1AF456233693CD46 % v25;
    }
    float v26 = *(void **)(*v24 + 8 * v27);
    do
    {
      do
        float v26 = (void *)*v26;
      while (v26[1] != 0x1AF456233693CD46);
    }
    while (v26[2] != 0x1AF456233693CD46);
  }
  else
  {
    float v26 = *(void **)(*v24 + 8 * ((v25 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        float v26 = (void *)*v26;
      while (v26[1] != 0x1AF456233693CD46);
    }
    while (v26[2] != 0x1AF456233693CD46);
  }
  uint64_t v28 = *(void *)(v26[5] + 32);
  float v29 = fmaxf(*(float *)(v28 + 3080) + *(float *)(v28 + 3076), 1.0);
  unint64_t v30 = *(void *)(*(void *)&v131[0] + 24);
  float v31 = fminf(fmaxf(v29, 0.0), 23.0);
  unsigned int v32 = *(float **)v30;
  if (*(void *)v30
    && (float v33 = *v32, LODWORD(v32) = *v32 == 1.0, *(unsigned char *)(v30 + 10))
    && (v33 != 0.0 ? (BOOL v34 = v33 == 1.0) : (BOOL v34 = 1), !v34)
    || (v35 = *(unsigned __int8 *)(v30 + v32 + 11), float v33 = 0.0, v35 == 2))
  {
    LOBYTE(v130[0]) = 1;
    char v133 = 1;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v30, 0x194u, 0, (BOOL *)v130, v31);
    float v37 = v36;
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v30, 0x194u, 1u, (BOOL *)&v133, v31);
    float v39 = v37 + (float)((float)(v38 - v37) * v33);
  }
  else
  {
    gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(void *)(*(void *)&v131[0] + 24), 0x194u, v35, 0, v31);
  }
  *(float *)&long long v112 = v39;
  uint64_t v45 = *(void *)(*(void *)&v131[0] + 24);
  if ((int)v29 >= 0x17) {
    unsigned int v46 = 23;
  }
  else {
    unsigned int v46 = (int)v29;
  }
  double v47 = *(float **)v45;
  if (*(void *)v45
    && (float v48 = *v47, LODWORD(v47) = *v47 == 1.0, *(unsigned char *)(v45 + 10))
    && (v48 != 0.0 ? (BOOL v49 = v48 == 1.0) : (BOOL v49 = 1), !v49)
    || (v50 = *(unsigned __int8 *)(v45 + v47 + 11), float v48 = 0.0, v50 == 2))
  {
    LOBYTE(v130[0]) = 1;
    char v133 = 1;
    char v51 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v45, 0x5Bu, v46, 0, v130);
    char v52 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v45, 0x5Bu, v46, 1, &v133);
    if (v48 < 1.0) {
      char v52 = v51;
    }
  }
  else
  {
    char v52 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(*(void *)&v131[0] + 24), 0x5Bu, v46, v50, 0);
  }
  HIBYTE(v114) = v52 != 0;
  gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(v130, *(void *)(*(void *)&v131[0] + 24), 0x193u, 2u, v31);
  LOWORD(v4) = WORD1(v130[0]);
  LOWORD(v29) = v130[0];
  LOWORD(v48) = HIWORD(v130[0]);
  LOWORD(v3) = WORD2(v130[0]);
  uint64_t v53 = *(void *)(*(void *)&v131[0] + 24);
  unsigned int v54 = *(float **)v53;
  if (*(void *)v53
    && (float v55 = *v54, LODWORD(v54) = *v54 == 1.0, *(unsigned char *)(v53 + 10))
    && (v55 != 0.0 ? (BOOL v56 = v55 == 1.0) : (BOOL v56 = 1), !v56)
    || (unsigned int v57 = *(unsigned __int8 *)(v53 + v54 + 11), v55 = 0.0, v57 == 2))
  {
    LOBYTE(v130[0]) = 1;
    char v133 = 1;
    int v41 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v53, 0x198u, v46, 0, v130);
    int v58 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v53, 0x198u, v46, 1u, &v133);
    if (v55 >= 1.0) {
      LOBYTE(v41) = v58;
    }
  }
  else
  {
    int v41 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(*(void *)&v131[0] + 24), 0x198u, v46, v57, 0);
  }
  double v108 = *(double *)(a2 + 184);
  double v109 = *(double *)(a2 + 192);
  double v106 = *(double *)(a2 + 208);
  uint64_t v59 = *(void *)(v28 + 5584);
  if (!v59) {
    uint64_t v59 = v28;
  }
  char v60 = *(unsigned char *)(a2 + 161);
  double v110 = *(double *)(v59 + 3768);
  double v111 = *(double *)(v59 + 1368);
  int v61 = *(_DWORD *)(a2 + 168);
  int v62 = *(_DWORD *)(a2 + 164);
  objc_msgSend(**(id **)a2, "sizeInPixels", *(void *)(a2 + 200));
  double v107 = v63;
  double v105 = v64;
  uint64_t v65 = *(void *)(*(void *)&v131[0] + 24);
  unsigned int v66 = *(unsigned __int8 *)(v65 + 12);
  unsigned int v67 = v66;
  if (v66 != 2)
  {
LABEL_97:
    double v68 = 0.0;
    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v65, 0x1D7u, v67)) {
      goto LABEL_106;
    }
    goto LABEL_98;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(void *)(*(void *)&v131[0] + 24), 0x1D7u, 0) & 1) == 0)
  {
    unsigned int v67 = 1;
    goto LABEL_97;
  }
LABEL_98:
  float v69 = *(float **)v65;
  if (*(void *)v65 && (float v70 = *v69, LODWORD(v69) = *v69 == 1.0, *(unsigned char *)(v65 + 10)) && v70 != 0.0 && v70 != 1.0
    || (unsigned int v71 = *(unsigned __int8 *)(v65 + v69 + 11), v70 = 0.0, v71 == 2))
  {
    LOBYTE(v130[0]) = 1;
    char v133 = 1;
    double v72 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v65, 0x1D7u, 0, v130);
    float v73 = *v72
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v65, 0x1D7u, 1u, &v133)
                        - *v72)
                * v70);
  }
  else
  {
    float v73 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v65, 0x1D7u, v71, 0);
  }
  double v68 = v73;
  uint64_t v65 = *(void *)(*(void *)&v131[0] + 24);
  unsigned int v66 = *(unsigned __int8 *)(v65 + 12);
LABEL_106:
  if (v66 != 2) {
    goto LABEL_109;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v65, 0x1D8u, 0) & 1) == 0)
  {
    unsigned int v66 = 1;
LABEL_109:
    int hasValueForKeyAtEnd = gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v65, 0x1D8u, v66);
    double v75 = 0.0;
    if (!hasValueForKeyAtEnd) {
      goto LABEL_118;
    }
  }
  float v76 = *(float **)v65;
  if (*(void *)v65 && (float v77 = *v76, LODWORD(v76) = *v76 == 1.0, *(unsigned char *)(v65 + 10)) && v77 != 0.0 && v77 != 1.0
    || (v78 = *(unsigned __int8 *)(v65 + v76 + 11), float v77 = 0.0, v78 == 2))
  {
    LOBYTE(v130[0]) = 1;
    char v133 = 1;
    float v79 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v65, 0x1D8u, 0, v130);
    float v80 = *v79
        + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v65, 0x1D8u, 1u, &v133)
                        - *v79)
                * v77);
  }
  else
  {
    float v80 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v65, 0x1D8u, v78, 0);
  }
  double v75 = v80;
LABEL_118:
  float v81 = (float)v4;
  float v44 = (float)LODWORD(v29) * 0.000015259;
  double v82 = (double)(1 << v60);
  double v83 = 1.0 / v82 * (double)v61;
  double v84 = 1.0 / v82 * (double)((1 << v60) + ~v62);
  float v85 = (v104 - v83) * v82;
  float v86 = (v106 - v84) * v82;
  *(float *)&double v83 = (v83 - v108) * v82;
  *(float *)&double v84 = (v84 - v109) * v82;
  float v87 = fmin(fmax(log2(v111* fmax(v85 + *(float *)&v83, v86 + *(float *)&v84)/ (v110* v82* fmin(v105, v107)* fmax(v68, 0.000000001)))/ fmax(v75, 0.000000001), 0.0), 1.0);
  float v40 = (float)((float)LODWORD(v48) * 0.000015259) * v87;
  if (v40 == 0.0) {
    HIBYTE(v114) = 0;
  }
  float v43 = v81 * 0.000015259;
  float v42 = (float)v3 * 0.000015259;
  if (v44 >= 0.0031308)
  {
    float v88 = (float)(powf(v44, 0.41667) * 1.055) + -0.055;
    goto LABEL_123;
  }
LABEL_121:
  float v88 = v44 * 12.92;
LABEL_123:
  if (v43 >= 0.0031308) {
    float v89 = (float)(powf(v43, 0.41667) * 1.055) + -0.055;
  }
  else {
    float v89 = v43 * 12.92;
  }
  if (v42 >= 0.0031308) {
    float v90 = (float)(powf(v42, 0.41667) * 1.055) + -0.055;
  }
  else {
    float v90 = v42 * 12.92;
  }
  *((void *)&v112 + 1) = __PAIR64__(LODWORD(v89), LODWORD(v88));
  *(void *)&long long v113 = __PAIR64__(LODWORD(v40), LODWORD(v90));
  float v91 = *(float *)(a2 + 72) * *(float *)&v112;
  if (v41 == 2)
  {
    float v93 = 0.5;
    float v92 = 0.5;
  }
  else if (v41 == 1)
  {
    float v92 = 1.0;
    float v93 = 0.0;
  }
  else
  {
    float v92 = 0.0;
    float v93 = 1.0;
  }
  uint64_t v94 = *(void *)(a1 + 152);
  *(float *)&uint64_t v116 = -(float)(v91 * v92);
  *((float *)&v116 + 1) = v93 * v91;
  BOOL v95 = 1;
  if (*((float *)&v113 + 3) >= 1.0 && !v117)
  {
    if (*(void *)(a1 + 176) == *(void *)(a1 + 168)) {
      BOOL v95 = *(float *)(a1 + 148) < 1.0;
    }
    else {
      BOOL v95 = *(unsigned char *)(a1 + 192) != 0;
    }
  }
  BOOL v96 = 0;
  LOBYTE(v114) = v95;
  uint64_t v115 = v94;
  *((float *)&v112 + 1) = v91;
  if (HIBYTE(v114) && *((float *)&v113 + 3) > 0.0) {
    BOOL v96 = v40 > 0.0 || *(void *)(a1 + 176) != *(void *)(a1 + 168);
  }
  *(unsigned char *)a1 = v96;
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v131);
  if (v95)
  {
    if (*(unsigned char *)(a1 + 193))
    {
      uint64_t v97 = *(void **)(a1 + 56);
      char v98 = *(std::__shared_weak_count **)(a1 + 64);
      if (v98) {
        atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v131[0] = xmmword_1A28FCDD0;
      md::PolylineOverlayStyle::setStyleConstants(v97, (uint64_t)&v112, (__int32 *)v131, 1.0, v8);
      if (v98 && !atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    char v99 = *(void **)(a1 + 72);
    unint64_t v100 = *(std::__shared_weak_count **)(a1 + 80);
    if (v100) {
      atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)((char *)v131 + 4) = 0;
    LODWORD(v131[0]) = 0;
    HIDWORD(v131[0]) = DWORD1(v113);
    md::PolylineOverlayStyle::setStyleConstants(v99, (uint64_t)&v112, (__int32 *)v131, 1.0, v8);
    if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
    char v101 = 0;
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a1 + 193);
    *(_WORD *)(a1 + 125) = 257;
  }
  else
  {
    char v101 = 1;
  }
  *(unsigned char *)(a1 + 127) = v101;
  uint64_t v102 = *(void **)(a1 + 88);
  BOOL v103 = *(std::__shared_weak_count **)(a1 + 96);
  if (v103) {
    atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::PolylineOverlayStyle::setStyleConstants(v102, (uint64_t)&v112, (__int32 *)&v112 + 2, 1.0, v8);
  if (v103)
  {
    if (!atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
}

void sub_1A2245CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::AlphaFillPipelineState,std::shared_ptr<ggl::PolylineOverlayAlphaFillShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v4 = a3[1];
  unsigned __int8 v5 = a3[2];
  int8x16_t v6 = (int8x16_t)*a3;
  *(__int32 *)((char *)v6.i32 + 1) = v4;
  v6.i16[1] = v5;
  unsigned __int8 v7 = a3[3];
  *(__int32 *)((char *)&v6.i32[2] + 1) = v7;
  int8x16_t v8 = vceqzq_s8(v6);
  int16x8_t v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  int32x4_t v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  int8x16_t v12 = v11;
  int16x8_t v13 = vmovl_high_s8(v8);
  int32x4_t v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  int8x16_t v15 = v11;
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  int8x16_t v17 = v11;
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  int8x16_t v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  int8x16_t v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  int8x16_t v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  int8x16_t v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  unint64_t v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v22), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v20), vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v17), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC980, v12), vbicq_s8((int8x16_t)xmmword_1A28FC990, v15)))));
  unint64_t v24 = v23;
  float v26 = (uint64_t **)(a2 + 104);
  unint64_t v25 = *(void **)(a2 + 104);
  if (!v25) {
    goto LABEL_12;
  }
  unint64_t v27 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v28 = v25[4];
    BOOL v29 = v28 >= v23;
    if (v28 >= v23) {
      unint64_t v30 = v25;
    }
    else {
      unint64_t v30 = v25 + 1;
    }
    if (v29) {
      unint64_t v27 = (uint64_t **)v25;
    }
    unint64_t v25 = (void *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    __int16 v114 = v27[6];
    a1[1] = (std::__shared_weak_count *)v114;
    if (v114) {
      atomic_fetch_add_explicit(v114 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    char v116 = *a3;
    float v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588638;
    unsigned int v32 = v31 + 1;
    long long v118 = *(_OWORD *)(a2 + 16);
    long long v119 = *(_OWORD *)(a2 + 32);
    {
      {
        {
          {
            ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1EB319E78 = 1;
        }
        ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
        unk_1EB3193B0 = &ggl::PolylineOverlayRibbon::pipelineDataAlphaFillPipelineDeviceStructs(void)::ref;
        qword_1EB3193B8 = 0;
        {
          ggl::PolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          *(void *)algn_1EB319428 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1EB319430 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
        }
        qword_1EB3193C0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref;
        *(_OWORD *)algn_1EB3193C8 = xmmword_1A28FCEF0;
      }
      ggl::PolylineOverlayRibbon::AlphaFillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref;
      {
        ggl::PolylineOverlayAlphaFillShader::typedReflection(void)::ref = (uint64_t)"PolylineOverlayAlphaFillShader";
        {
          int v115 = ggl::crc32::compute<37ul>("PolylineOverlayAlphaFillShaderVertex");
          qword_1EB32A058 = (uint64_t)"PolylineOverlayAlphaFillShader";
          unk_1EB32A060 = ggl::polylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32A068 = 1;
          unk_1EB32A070 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A078 = 3;
          unk_1EB32A080 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32A088 = 0;
          unk_1EB32A090 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = v115;
          *(_DWORD *)algn_1EB32A054 = 0;
          qword_1EB32A098 = 0;
          unk_1EB32A0A0 = &ggl::polylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A0B0 = 0;
          unk_1EB32A0B8 = 0;
          qword_1EB32A0A8 = 0;
        }
        qword_1EB3233C8 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB3233D0 = ggl::crc32::compute<37ul>("PolylineOverlayAlphaFillShaderVertex");
        {
          qword_1EB32A7C0 = 0;
          unk_1EB32A7C8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32A7D0 = 1;
          unk_1EB32A7D8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
          ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x17E32C928;
          qword_1EB32A7E0 = 0;
          unk_1EB32A7E8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32A7B0 = (uint64_t)"PolylineOverlayAlphaFillShader";
          unk_1EB32A7B8 = 0;
          qword_1EB32A7F0 = 1;
          unk_1EB32A7F8 = &ggl::polylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32A808 = 0;
          unk_1EB32A810 = 0;
          qword_1EB32A800 = 1;
        }
        qword_1EB3233D8 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB3233E0 = 2117257512;
        qword_1EB3233E8 = (uint64_t)ggl::polylineOverlayAlphaFillShaderShaderConstants(void)::ref;
        unk_1EB3233F0 = 3;
        qword_1EB3233F8 = (uint64_t)ggl::polylineOverlayAlphaFillShaderShaderTextures(void)::ref;
        unk_1EB323400 = 1;
        qword_1EB323408 = (uint64_t)&ggl::polylineOverlayAlphaFillShaderShaderSamplers(void)::ref;
        unk_1EB323410 = 1;
      }
      qword_1E958D8F8 = (uint64_t)&ggl::PolylineOverlayAlphaFillShader::typedReflection(void)::ref;
      {
        ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9590EA8 = 0;
        qword_1E9590EB0 = (uint64_t)"";
        dword_1E9590EB8 = 0;
        qword_1E9590EC0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeBinding_0(void)::attr;
        unk_1E9590EC8 = 5;
      }
      qword_1E958D900 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeStructBinding(void)::attr;
      *(void *)algn_1E958D908 = 1;
      qword_1E958D910 = 0;
      unk_1E958D918 = 1;
      qword_1E958D920 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineDeviceStructBinding(void)::ref;
      unk_1E958D928 = 0;
      {
        ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9590EE8 = 0;
        qword_1E9590EF0 = (uint64_t)"view";
        dword_1E9590EF8 = 3;
        qword_1E9590F00 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantViewBinding(void)::reflection;
        unk_1E9590F08 = xmmword_1A28FCEB0;
        qword_1E9590F18 = 1;
        unk_1E9590F20 = "transform";
        dword_1E9590F28 = 3;
        qword_1E9590F30 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantTransformBinding(void)::reflection;
        unk_1E9590F38 = xmmword_1A28FCF70;
        qword_1E9590F48 = 2;
        unk_1E9590F50 = "style";
        dword_1E9590F58 = 3;
        qword_1E9590F60 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStyleBinding(void)::reflection;
        unk_1E9590F68 = 8;
      }
      qword_1E958D930 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStructBinding(void)::ref;
      unk_1E958D938 = 3;
    }
    float v33 = *(std::__shared_weak_count_vtbl **)a2;
    BOOL v34 = *(std::__shared_weak_count **)(a2 + 8);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)unint64_t v120 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v120[12] = *(_OWORD *)(a2 + 60);
    long long v35 = *(_OWORD *)(a2 + 76);
    char v36 = *(unsigned char *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::PolylineOverlayRibbon::AlphaFillPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v33;
    v31[3].__shared_owners_ = (uint64_t)v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v118;
    *(_OWORD *)&v31[12].__shared_owners_ = v119;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v120[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v120;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v35;
    BYTE4(v31[5].__shared_owners_) = v36;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v116;
    BYTE1(v31[13].__shared_weak_owners_) = v4;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    int8x16_t v37 = *(int8x16_t *)&v31[14].__shared_owners_;
    int8x16_t v38 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    int16x8_t v39 = vmovl_high_s8(v38);
    int32x4_t v40 = vmovl_s16(*(int16x4_t *)v39.i8);
    v41.i64[0] = v40.u32[0];
    v41.i64[1] = v40.u32[1];
    int8x16_t v42 = v41;
    int16x8_t v43 = vmovl_s8(*(int8x8_t *)v38.i8);
    int32x4_t v44 = vmovl_s16(*(int16x4_t *)v43.i8);
    v41.i64[0] = v44.u32[0];
    v41.i64[1] = v44.u32[1];
    int8x16_t v45 = v41;
    int32x4_t v46 = vmovl_high_s16(v39);
    v41.i64[0] = v46.u32[0];
    v41.i64[1] = v46.u32[1];
    int8x16_t v47 = v41;
    int32x4_t v48 = vmovl_high_s16(v43);
    v41.i64[0] = v48.u32[0];
    v41.i64[1] = v48.u32[1];
    int8x16_t v49 = v41;
    v41.i64[0] = v40.u32[2];
    v41.i64[1] = v40.u32[3];
    int8x16_t v50 = v41;
    v41.i64[0] = v44.u32[2];
    v41.i64[1] = v44.u32[3];
    int8x16_t v51 = v41;
    v41.i64[0] = v46.u32[2];
    v41.i64[1] = v46.u32[3];
    int8x16_t v52 = v41;
    v41.i64[0] = v48.u32[2];
    v41.i64[1] = v48.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55F9D8;
    int8x16_t v53 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v41);
    int8x16_t v54 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v52);
    int8x16_t v55 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v51);
    int8x16_t v56 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v47);
    int8x16_t v57 = vceqzq_s8(v37);
    int16x8_t v58 = vmovl_high_s8(v57);
    int32x4_t v59 = vmovl_s16(*(int16x4_t *)v58.i8);
    v41.i64[0] = v59.u32[0];
    v41.i64[1] = v59.u32[1];
    int8x16_t v60 = v41;
    int16x8_t v61 = vmovl_s8(*(int8x8_t *)v57.i8);
    int32x4_t v62 = vmovl_s16(*(int16x4_t *)v61.i8);
    v41.i64[0] = v62.u32[0];
    v41.i64[1] = v62.u32[1];
    int8x16_t v63 = v41;
    int32x4_t v64 = vmovl_high_s16(v58);
    v41.i64[0] = v64.u32[0];
    v41.i64[1] = v64.u32[1];
    int8x16_t v65 = v41;
    int32x4_t v66 = vmovl_high_s16(v61);
    v41.i64[0] = v66.u32[0];
    v41.i64[1] = v66.u32[1];
    int8x16_t v67 = v41;
    v41.i64[0] = v59.u32[2];
    v41.i64[1] = v59.u32[3];
    int8x16_t v68 = v41;
    v41.i64[0] = v62.u32[2];
    v41.i64[1] = v62.u32[3];
    int8x16_t v69 = v41;
    v41.i64[0] = v64.u32[2];
    v41.i64[1] = v64.u32[3];
    int8x16_t v70 = v41;
    v41.i64[0] = v66.u32[2];
    v41.i64[1] = v66.u32[3];
    int8x16_t v71 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v70);
    int8x16_t v72 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v60), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v42));
    int8x16_t v73 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v63), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v45));
    int8x16_t v74 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v65), v56);
    int8x16_t v75 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v67), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v49));
    int8x16_t v76 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v68), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v50));
    int8x16_t v77 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v69), v55);
    int8x16_t v78 = vorrq_s8(v71, v54);
    int8x16_t v79 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v41), v53);
    int8x16_t v80 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    int16x8_t v81 = vmovl_s8(*(int8x8_t *)v80.i8);
    int32x4_t v82 = vmovl_high_s16(v81);
    v41.i64[0] = v82.i32[2];
    v41.i64[1] = v82.i32[3];
    int8x16_t v83 = v41;
    int16x8_t v84 = vmovl_high_s8(v80);
    int32x4_t v85 = vmovl_high_s16(v84);
    v41.i64[0] = v85.i32[2];
    v41.i64[1] = v85.i32[3];
    int8x16_t v86 = v41;
    int32x4_t v87 = vmovl_s16(*(int16x4_t *)v81.i8);
    v41.i64[0] = v87.i32[2];
    v41.i64[1] = v87.i32[3];
    int8x16_t v88 = v41;
    int32x4_t v89 = vmovl_s16(*(int16x4_t *)v84.i8);
    v41.i64[0] = v89.i32[2];
    v41.i64[1] = v89.i32[3];
    int8x16_t v90 = v41;
    v41.i64[0] = v82.i32[0];
    v41.i64[1] = v82.i32[1];
    int8x16_t v91 = v41;
    v41.i64[0] = v85.i32[0];
    v41.i64[1] = v85.i32[1];
    int8x16_t v92 = v41;
    v41.i64[0] = v87.i32[0];
    v41.i64[1] = v87.i32[1];
    int8x16_t v93 = v41;
    v41.i64[0] = v89.i32[0];
    v41.i64[1] = v89.i32[1];
    int8x16_t v94 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v41);
    int8x16_t v95 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    int16x8_t v96 = vmovl_high_s8(v95);
    int32x4_t v97 = vmovl_s16(*(int16x4_t *)v96.i8);
    v41.i64[0] = v97.i32[0];
    v41.i64[1] = v97.i32[1];
    int8x16_t v98 = v41;
    int16x8_t v99 = vmovl_s8(*(int8x8_t *)v95.i8);
    int32x4_t v100 = vmovl_s16(*(int16x4_t *)v99.i8);
    v41.i64[0] = v100.i32[0];
    v41.i64[1] = v100.i32[1];
    int8x16_t v101 = v41;
    int32x4_t v102 = vmovl_high_s16(v96);
    v41.i64[0] = v102.i32[0];
    v41.i64[1] = v102.i32[1];
    int8x16_t v103 = v41;
    int32x4_t v104 = vmovl_high_s16(v99);
    v41.i64[0] = v104.i32[0];
    v41.i64[1] = v104.i32[1];
    int8x16_t v105 = v41;
    v41.i64[0] = v97.i32[2];
    v41.i64[1] = v97.i32[3];
    int8x16_t v106 = v41;
    v41.i64[0] = v100.i32[2];
    v41.i64[1] = v100.i32[3];
    int8x16_t v107 = v41;
    v41.i64[0] = v102.i32[2];
    v41.i64[1] = v102.i32[3];
    int8x16_t v108 = v41;
    v41.i64[0] = v104.i32[2];
    v41.i64[1] = v104.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v101), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v93)), v73), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v98), v94), v72)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v105), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v91)), v75), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v103),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v92)),
                                                    v74))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v107), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v88)), v77), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v106), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v90)), v76)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v41), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v83)), v79), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v108),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v86)),
                                                    v78)))));
    LOBYTE(v31[13].__vftable) = 1;
    *a1 = v32;
    a1[1] = v31;
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    double v109 = *v26;
    double v110 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          double v110 = (uint64_t **)v109;
          unint64_t v111 = v109[4];
          if (v24 >= v111) {
            break;
          }
          double v109 = *v110;
          float v26 = v110;
          if (!*v110) {
            goto LABEL_27;
          }
        }
        if (v111 >= v24) {
          break;
        }
        double v109 = v110[1];
        if (!v109)
        {
          float v26 = v110 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_27:
      long long v112 = (uint64_t *)operator new(0x38uLL);
      v112[4] = v24;
      v112[5] = (uint64_t)v32;
      v112[6] = (uint64_t)v31;
      *long long v112 = 0;
      v112[1] = 0;
      v112[2] = (uint64_t)v110;
      *float v26 = v112;
      uint64_t v113 = **(void **)(a2 + 96);
      if (v113)
      {
        *(void *)(a2 + 96) = v113;
        long long v112 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v112);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A2246974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v29);
  _Unwind_Resume(a1);
}

void md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::AlphaPipelineState,std::shared_ptr<ggl::PolylineOverlayAlphaShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v4 = a3[1];
  unsigned __int8 v5 = a3[2];
  int8x16_t v6 = (int8x16_t)*a3;
  *(__int32 *)((char *)v6.i32 + 1) = v4;
  v6.i16[1] = v5;
  unsigned __int8 v7 = a3[3];
  *(__int32 *)((char *)&v6.i32[2] + 1) = v7;
  int8x16_t v8 = vceqzq_s8(v6);
  int16x8_t v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  int32x4_t v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  int8x16_t v12 = v11;
  int16x8_t v13 = vmovl_high_s8(v8);
  int32x4_t v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  int8x16_t v15 = v11;
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  int8x16_t v17 = v11;
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  int8x16_t v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  int8x16_t v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  int8x16_t v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  int8x16_t v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  unint64_t v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v22), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v20), vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v17), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC980, v12), vbicq_s8((int8x16_t)xmmword_1A28FC990, v15)))));
  unint64_t v24 = v23;
  float v26 = (uint64_t **)(a2 + 104);
  unint64_t v25 = *(void **)(a2 + 104);
  if (!v25) {
    goto LABEL_12;
  }
  unint64_t v27 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v28 = v25[4];
    BOOL v29 = v28 >= v23;
    if (v28 >= v23) {
      unint64_t v30 = v25;
    }
    else {
      unint64_t v30 = v25 + 1;
    }
    if (v29) {
      unint64_t v27 = (uint64_t **)v25;
    }
    unint64_t v25 = (void *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    __int16 v114 = v27[6];
    a1[1] = (std::__shared_weak_count *)v114;
    if (v114) {
      atomic_fetch_add_explicit(v114 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    char v116 = *a3;
    float v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588600;
    unsigned int v32 = v31 + 1;
    long long v118 = *(_OWORD *)(a2 + 16);
    long long v119 = *(_OWORD *)(a2 + 32);
    {
      if (v115)
      {
        {
          if (v115)
          {
            {
              {
                ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::defaultVboReflection;
              }
              ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
              unk_1EB319E78 = 1;
            }
            ggl::PolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
            unk_1EB319380 = &ggl::PolylineOverlayRibbon::pipelineDataAlphaPipelineDeviceStructs(void)::ref;
            qword_1EB319388 = 0;
            {
              ggl::PolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              *(void *)algn_1EB319408 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EB319410 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
            }
            qword_1EB319390 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref;
            unk_1EB319398 = xmmword_1A28FCEF0;
          }
        }
        ggl::PolylineOverlayRibbon::AlphaPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref;
        ggl::PolylineOverlayAlphaShader::typedReflection(v115);
        qword_1E958DF88 = (uint64_t)&ggl::PolylineOverlayAlphaShader::typedReflection(void)::ref;
        {
          ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeStructBinding(void)::attr = 0;
          *(void *)algn_1E9590DC8 = 0;
          qword_1E9590DD0 = (uint64_t)"";
          dword_1E9590DD8 = 0;
          qword_1E9590DE0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeBinding_0(void)::attr;
          unk_1E9590DE8 = 5;
        }
        qword_1E958DF90 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeStructBinding(void)::attr;
        *(void *)algn_1E958DF98 = 1;
        qword_1E958DFA0 = 0;
        unk_1E958DFA8 = 1;
        qword_1E958DFB0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineDeviceStructBinding(void)::ref;
        unk_1E958DFB8 = 0;
        {
          ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStructBinding(void)::ref = 0;
          *(void *)algn_1E9590E08 = 0;
          qword_1E9590E10 = (uint64_t)"view";
          dword_1E9590E18 = 3;
          qword_1E9590E20 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineConstantViewBinding(void)::reflection;
          unk_1E9590E28 = xmmword_1A28FCEB0;
          qword_1E9590E38 = 1;
          unk_1E9590E40 = "transform";
          dword_1E9590E48 = 3;
          qword_1E9590E50 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineConstantTransformBinding(void)::reflection;
          unk_1E9590E58 = xmmword_1A28FCF70;
          qword_1E9590E68 = 2;
          unk_1E9590E70 = "style";
          dword_1E9590E78 = 3;
          qword_1E9590E80 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStyleBinding(void)::reflection;
          unk_1E9590E88 = 8;
        }
        qword_1E958DFC0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStructBinding(void)::ref;
        *(void *)algn_1E958DFC8 = 3;
      }
    }
    float v33 = *(std::__shared_weak_count_vtbl **)a2;
    BOOL v34 = *(std::__shared_weak_count **)(a2 + 8);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)unint64_t v120 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v120[12] = *(_OWORD *)(a2 + 60);
    long long v35 = *(_OWORD *)(a2 + 76);
    char v36 = *(unsigned char *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::PolylineOverlayRibbon::AlphaPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v33;
    v31[3].__shared_owners_ = (uint64_t)v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v118;
    *(_OWORD *)&v31[12].__shared_owners_ = v119;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v120[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v120;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v35;
    BYTE4(v31[5].__shared_owners_) = v36;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v116;
    BYTE1(v31[13].__shared_weak_owners_) = v4;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    int8x16_t v37 = *(int8x16_t *)&v31[14].__shared_owners_;
    int8x16_t v38 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    int16x8_t v39 = vmovl_high_s8(v38);
    int32x4_t v40 = vmovl_s16(*(int16x4_t *)v39.i8);
    v41.i64[0] = v40.u32[0];
    v41.i64[1] = v40.u32[1];
    int8x16_t v42 = v41;
    int16x8_t v43 = vmovl_s8(*(int8x8_t *)v38.i8);
    int32x4_t v44 = vmovl_s16(*(int16x4_t *)v43.i8);
    v41.i64[0] = v44.u32[0];
    v41.i64[1] = v44.u32[1];
    int8x16_t v45 = v41;
    int32x4_t v46 = vmovl_high_s16(v39);
    v41.i64[0] = v46.u32[0];
    v41.i64[1] = v46.u32[1];
    int8x16_t v47 = v41;
    int32x4_t v48 = vmovl_high_s16(v43);
    v41.i64[0] = v48.u32[0];
    v41.i64[1] = v48.u32[1];
    int8x16_t v49 = v41;
    v41.i64[0] = v40.u32[2];
    v41.i64[1] = v40.u32[3];
    int8x16_t v50 = v41;
    v41.i64[0] = v44.u32[2];
    v41.i64[1] = v44.u32[3];
    int8x16_t v51 = v41;
    v41.i64[0] = v46.u32[2];
    v41.i64[1] = v46.u32[3];
    int8x16_t v52 = v41;
    v41.i64[0] = v48.u32[2];
    v41.i64[1] = v48.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55F988;
    int8x16_t v53 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v41);
    int8x16_t v54 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v52);
    int8x16_t v55 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v51);
    int8x16_t v56 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v47);
    int8x16_t v57 = vceqzq_s8(v37);
    int16x8_t v58 = vmovl_high_s8(v57);
    int32x4_t v59 = vmovl_s16(*(int16x4_t *)v58.i8);
    v41.i64[0] = v59.u32[0];
    v41.i64[1] = v59.u32[1];
    int8x16_t v60 = v41;
    int16x8_t v61 = vmovl_s8(*(int8x8_t *)v57.i8);
    int32x4_t v62 = vmovl_s16(*(int16x4_t *)v61.i8);
    v41.i64[0] = v62.u32[0];
    v41.i64[1] = v62.u32[1];
    int8x16_t v63 = v41;
    int32x4_t v64 = vmovl_high_s16(v58);
    v41.i64[0] = v64.u32[0];
    v41.i64[1] = v64.u32[1];
    int8x16_t v65 = v41;
    int32x4_t v66 = vmovl_high_s16(v61);
    v41.i64[0] = v66.u32[0];
    v41.i64[1] = v66.u32[1];
    int8x16_t v67 = v41;
    v41.i64[0] = v59.u32[2];
    v41.i64[1] = v59.u32[3];
    int8x16_t v68 = v41;
    v41.i64[0] = v62.u32[2];
    v41.i64[1] = v62.u32[3];
    int8x16_t v69 = v41;
    v41.i64[0] = v64.u32[2];
    v41.i64[1] = v64.u32[3];
    int8x16_t v70 = v41;
    v41.i64[0] = v66.u32[2];
    v41.i64[1] = v66.u32[3];
    int8x16_t v71 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v70);
    int8x16_t v72 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v60), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v42));
    int8x16_t v73 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v63), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v45));
    int8x16_t v74 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v65), v56);
    int8x16_t v75 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v67), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v49));
    int8x16_t v76 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v68), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v50));
    int8x16_t v77 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v69), v55);
    int8x16_t v78 = vorrq_s8(v71, v54);
    int8x16_t v79 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v41), v53);
    int8x16_t v80 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    int16x8_t v81 = vmovl_s8(*(int8x8_t *)v80.i8);
    int32x4_t v82 = vmovl_high_s16(v81);
    v41.i64[0] = v82.i32[2];
    v41.i64[1] = v82.i32[3];
    int8x16_t v83 = v41;
    int16x8_t v84 = vmovl_high_s8(v80);
    int32x4_t v85 = vmovl_high_s16(v84);
    v41.i64[0] = v85.i32[2];
    v41.i64[1] = v85.i32[3];
    int8x16_t v86 = v41;
    int32x4_t v87 = vmovl_s16(*(int16x4_t *)v81.i8);
    v41.i64[0] = v87.i32[2];
    v41.i64[1] = v87.i32[3];
    int8x16_t v88 = v41;
    int32x4_t v89 = vmovl_s16(*(int16x4_t *)v84.i8);
    v41.i64[0] = v89.i32[2];
    v41.i64[1] = v89.i32[3];
    int8x16_t v90 = v41;
    v41.i64[0] = v82.i32[0];
    v41.i64[1] = v82.i32[1];
    int8x16_t v91 = v41;
    v41.i64[0] = v85.i32[0];
    v41.i64[1] = v85.i32[1];
    int8x16_t v92 = v41;
    v41.i64[0] = v87.i32[0];
    v41.i64[1] = v87.i32[1];
    int8x16_t v93 = v41;
    v41.i64[0] = v89.i32[0];
    v41.i64[1] = v89.i32[1];
    int8x16_t v94 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v41);
    int8x16_t v95 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    int16x8_t v96 = vmovl_high_s8(v95);
    int32x4_t v97 = vmovl_s16(*(int16x4_t *)v96.i8);
    v41.i64[0] = v97.i32[0];
    v41.i64[1] = v97.i32[1];
    int8x16_t v98 = v41;
    int16x8_t v99 = vmovl_s8(*(int8x8_t *)v95.i8);
    int32x4_t v100 = vmovl_s16(*(int16x4_t *)v99.i8);
    v41.i64[0] = v100.i32[0];
    v41.i64[1] = v100.i32[1];
    int8x16_t v101 = v41;
    int32x4_t v102 = vmovl_high_s16(v96);
    v41.i64[0] = v102.i32[0];
    v41.i64[1] = v102.i32[1];
    int8x16_t v103 = v41;
    int32x4_t v104 = vmovl_high_s16(v99);
    v41.i64[0] = v104.i32[0];
    v41.i64[1] = v104.i32[1];
    int8x16_t v105 = v41;
    v41.i64[0] = v97.i32[2];
    v41.i64[1] = v97.i32[3];
    int8x16_t v106 = v41;
    v41.i64[0] = v100.i32[2];
    v41.i64[1] = v100.i32[3];
    int8x16_t v107 = v41;
    v41.i64[0] = v102.i32[2];
    v41.i64[1] = v102.i32[3];
    int8x16_t v108 = v41;
    v41.i64[0] = v104.i32[2];
    v41.i64[1] = v104.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v101), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v93)), v73), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v98), v94), v72)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v105), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v91)), v75), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v103),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v92)),
                                                    v74))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v107), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v88)), v77), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v106), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v90)), v76)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v41), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v83)), v79), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v108),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v86)),
                                                    v78)))));
    LOBYTE(v31[13].__vftable) = 1;
    *a1 = v32;
    a1[1] = v31;
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    double v109 = *v26;
    double v110 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          double v110 = (uint64_t **)v109;
          unint64_t v111 = v109[4];
          if (v24 >= v111) {
            break;
          }
          double v109 = *v110;
          float v26 = v110;
          if (!*v110) {
            goto LABEL_27;
          }
        }
        if (v111 >= v24) {
          break;
        }
        double v109 = v110[1];
        if (!v109)
        {
          float v26 = v110 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_27:
      long long v112 = (uint64_t *)operator new(0x38uLL);
      v112[4] = v24;
      v112[5] = (uint64_t)v32;
      v112[6] = (uint64_t)v31;
      *long long v112 = 0;
      v112[1] = 0;
      v112[2] = (uint64_t)v110;
      *float v26 = v112;
      uint64_t v113 = **(void **)(a2 + 96);
      if (v113)
      {
        *(void *)(a2 + 96) = v113;
        long long v112 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v112);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A22473A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v29);
  _Unwind_Resume(a1);
}

void md::PolylinePipelineStateManager<md::Ribbons::PolylineOverlayRibbonDescriptor,ggl::PolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::PolylineOverlayFillShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v4 = a3[1];
  unsigned __int8 v5 = a3[2];
  int8x16_t v6 = (int8x16_t)*a3;
  *(__int32 *)((char *)v6.i32 + 1) = v4;
  v6.i16[1] = v5;
  unsigned __int8 v7 = a3[3];
  *(__int32 *)((char *)&v6.i32[2] + 1) = v7;
  int8x16_t v8 = vceqzq_s8(v6);
  int16x8_t v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  int32x4_t v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  int8x16_t v12 = v11;
  int16x8_t v13 = vmovl_high_s8(v8);
  int32x4_t v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  int8x16_t v15 = v11;
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  int8x16_t v17 = v11;
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  int8x16_t v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  int8x16_t v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  int8x16_t v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  int8x16_t v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  unint64_t v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v22), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v20), vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v17), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC980, v12), vbicq_s8((int8x16_t)xmmword_1A28FC990, v15)))));
  unint64_t v24 = v23;
  float v26 = (uint64_t **)(a2 + 104);
  unint64_t v25 = *(void **)(a2 + 104);
  if (!v25) {
    goto LABEL_12;
  }
  unint64_t v27 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v28 = v25[4];
    BOOL v29 = v28 >= v23;
    if (v28 >= v23) {
      unint64_t v30 = v25;
    }
    else {
      unint64_t v30 = v25 + 1;
    }
    if (v29) {
      unint64_t v27 = (uint64_t **)v25;
    }
    unint64_t v25 = (void *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    __int16 v114 = v27[6];
    a1[1] = (std::__shared_weak_count *)v114;
    if (v114) {
      atomic_fetch_add_explicit(v114 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    char v116 = *a3;
    float v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5885C8;
    unsigned int v32 = v31 + 1;
    long long v118 = *(_OWORD *)(a2 + 16);
    long long v119 = *(_OWORD *)(a2 + 32);
    {
      if (v115)
      {
        {
          if (v115)
          {
            {
              {
                ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolylineOverlayRibbon::defaultVboReflection;
              }
              ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
              unk_1EB319E78 = 1;
            }
            ggl::PolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
            unk_1EB319350 = &ggl::PolylineOverlayRibbon::pipelineDataFillPipelineDeviceStructs(void)::ref;
            qword_1EB319358 = 0;
            {
              ggl::PolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              *(void *)algn_1EB3193E8 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EB3193F0 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
            }
            qword_1EB319360 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref;
            unk_1EB319368 = xmmword_1A28FCEF0;
          }
        }
        ggl::PolylineOverlayRibbon::FillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref;
        ggl::PolylineOverlayFillShader::typedReflection(v115);
        qword_1E958DF38 = (uint64_t)&ggl::PolylineOverlayFillShader::typedReflection(void)::ref;
        {
          ggl::PolylineOverlayRibbon::pipelineStateFillPipelineAttributeStructBinding(void)::attr = 0;
          *(void *)algn_1E9590CE8 = 0;
          qword_1E9590CF0 = (uint64_t)"";
          dword_1E9590CF8 = 0;
          qword_1E9590D00 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineAttributeBinding_0(void)::attr;
          unk_1E9590D08 = 5;
        }
        qword_1E958DF40 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineAttributeStructBinding(void)::attr;
        *(void *)algn_1E958DF48 = 1;
        qword_1E958DF50 = 0;
        unk_1E958DF58 = 1;
        qword_1E958DF60 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineDeviceStructBinding(void)::ref;
        unk_1E958DF68 = 0;
        {
          ggl::PolylineOverlayRibbon::pipelineStateFillPipelineConstantStructBinding(void)::ref = 0;
          *(void *)algn_1E9590D28 = 0;
          qword_1E9590D30 = (uint64_t)"view";
          dword_1E9590D38 = 3;
          qword_1E9590D40 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineConstantViewBinding(void)::reflection;
          unk_1E9590D48 = xmmword_1A28FCEB0;
          qword_1E9590D58 = 1;
          unk_1E9590D60 = "transform";
          dword_1E9590D68 = 3;
          qword_1E9590D70 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineConstantTransformBinding(void)::reflection;
          unk_1E9590D78 = xmmword_1A28FCF70;
          qword_1E9590D88 = 2;
          unk_1E9590D90 = "style";
          dword_1E9590D98 = 3;
          qword_1E9590DA0 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineConstantStyleBinding(void)::reflection;
          unk_1E9590DA8 = 8;
        }
        qword_1E958DF70 = (uint64_t)&ggl::PolylineOverlayRibbon::pipelineStateFillPipelineConstantStructBinding(void)::ref;
        *(void *)algn_1E958DF78 = 3;
      }
    }
    float v33 = *(std::__shared_weak_count_vtbl **)a2;
    BOOL v34 = *(std::__shared_weak_count **)(a2 + 8);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)unint64_t v120 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v120[12] = *(_OWORD *)(a2 + 60);
    long long v35 = *(_OWORD *)(a2 + 76);
    char v36 = *(unsigned char *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::PolylineOverlayRibbon::FillPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v33;
    v31[3].__shared_owners_ = (uint64_t)v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v118;
    *(_OWORD *)&v31[12].__shared_owners_ = v119;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v120[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v120;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v35;
    BYTE4(v31[5].__shared_owners_) = v36;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v116;
    BYTE1(v31[13].__shared_weak_owners_) = v4;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    int8x16_t v37 = *(int8x16_t *)&v31[14].__shared_owners_;
    int8x16_t v38 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    int16x8_t v39 = vmovl_high_s8(v38);
    int32x4_t v40 = vmovl_s16(*(int16x4_t *)v39.i8);
    v41.i64[0] = v40.u32[0];
    v41.i64[1] = v40.u32[1];
    int8x16_t v42 = v41;
    int16x8_t v43 = vmovl_s8(*(int8x8_t *)v38.i8);
    int32x4_t v44 = vmovl_s16(*(int16x4_t *)v43.i8);
    v41.i64[0] = v44.u32[0];
    v41.i64[1] = v44.u32[1];
    int8x16_t v45 = v41;
    int32x4_t v46 = vmovl_high_s16(v39);
    v41.i64[0] = v46.u32[0];
    v41.i64[1] = v46.u32[1];
    int8x16_t v47 = v41;
    int32x4_t v48 = vmovl_high_s16(v43);
    v41.i64[0] = v48.u32[0];
    v41.i64[1] = v48.u32[1];
    int8x16_t v49 = v41;
    v41.i64[0] = v40.u32[2];
    v41.i64[1] = v40.u32[3];
    int8x16_t v50 = v41;
    v41.i64[0] = v44.u32[2];
    v41.i64[1] = v44.u32[3];
    int8x16_t v51 = v41;
    v41.i64[0] = v46.u32[2];
    v41.i64[1] = v46.u32[3];
    int8x16_t v52 = v41;
    v41.i64[0] = v48.u32[2];
    v41.i64[1] = v48.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55F938;
    int8x16_t v53 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v41);
    int8x16_t v54 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v52);
    int8x16_t v55 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v51);
    int8x16_t v56 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v47);
    int8x16_t v57 = vceqzq_s8(v37);
    int16x8_t v58 = vmovl_high_s8(v57);
    int32x4_t v59 = vmovl_s16(*(int16x4_t *)v58.i8);
    v41.i64[0] = v59.u32[0];
    v41.i64[1] = v59.u32[1];
    int8x16_t v60 = v41;
    int16x8_t v61 = vmovl_s8(*(int8x8_t *)v57.i8);
    int32x4_t v62 = vmovl_s16(*(int16x4_t *)v61.i8);
    v41.i64[0] = v62.u32[0];
    v41.i64[1] = v62.u32[1];
    int8x16_t v63 = v41;
    int32x4_t v64 = vmovl_high_s16(v58);
    v41.i64[0] = v64.u32[0];
    v41.i64[1] = v64.u32[1];
    int8x16_t v65 = v41;
    int32x4_t v66 = vmovl_high_s16(v61);
    v41.i64[0] = v66.u32[0];
    v41.i64[1] = v66.u32[1];
    int8x16_t v67 = v41;
    v41.i64[0] = v59.u32[2];
    v41.i64[1] = v59.u32[3];
    int8x16_t v68 = v41;
    v41.i64[0] = v62.u32[2];
    v41.i64[1] = v62.u32[3];
    int8x16_t v69 = v41;
    v41.i64[0] = v64.u32[2];
    v41.i64[1] = v64.u32[3];
    int8x16_t v70 = v41;
    v41.i64[0] = v66.u32[2];
    v41.i64[1] = v66.u32[3];
    int8x16_t v71 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v70);
    int8x16_t v72 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v60), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v42));
    int8x16_t v73 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v63), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v45));
    int8x16_t v74 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v65), v56);
    int8x16_t v75 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v67), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v49));
    int8x16_t v76 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v68), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v50));
    int8x16_t v77 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v69), v55);
    int8x16_t v78 = vorrq_s8(v71, v54);
    int8x16_t v79 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v41), v53);
    int8x16_t v80 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    int16x8_t v81 = vmovl_s8(*(int8x8_t *)v80.i8);
    int32x4_t v82 = vmovl_high_s16(v81);
    v41.i64[0] = v82.i32[2];
    v41.i64[1] = v82.i32[3];
    int8x16_t v83 = v41;
    int16x8_t v84 = vmovl_high_s8(v80);
    int32x4_t v85 = vmovl_high_s16(v84);
    v41.i64[0] = v85.i32[2];
    v41.i64[1] = v85.i32[3];
    int8x16_t v86 = v41;
    int32x4_t v87 = vmovl_s16(*(int16x4_t *)v81.i8);
    v41.i64[0] = v87.i32[2];
    v41.i64[1] = v87.i32[3];
    int8x16_t v88 = v41;
    int32x4_t v89 = vmovl_s16(*(int16x4_t *)v84.i8);
    v41.i64[0] = v89.i32[2];
    v41.i64[1] = v89.i32[3];
    int8x16_t v90 = v41;
    v41.i64[0] = v82.i32[0];
    v41.i64[1] = v82.i32[1];
    int8x16_t v91 = v41;
    v41.i64[0] = v85.i32[0];
    v41.i64[1] = v85.i32[1];
    int8x16_t v92 = v41;
    v41.i64[0] = v87.i32[0];
    v41.i64[1] = v87.i32[1];
    int8x16_t v93 = v41;
    v41.i64[0] = v89.i32[0];
    v41.i64[1] = v89.i32[1];
    int8x16_t v94 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v41);
    int8x16_t v95 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    int16x8_t v96 = vmovl_high_s8(v95);
    int32x4_t v97 = vmovl_s16(*(int16x4_t *)v96.i8);
    v41.i64[0] = v97.i32[0];
    v41.i64[1] = v97.i32[1];
    int8x16_t v98 = v41;
    int16x8_t v99 = vmovl_s8(*(int8x8_t *)v95.i8);
    int32x4_t v100 = vmovl_s16(*(int16x4_t *)v99.i8);
    v41.i64[0] = v100.i32[0];
    v41.i64[1] = v100.i32[1];
    int8x16_t v101 = v41;
    int32x4_t v102 = vmovl_high_s16(v96);
    v41.i64[0] = v102.i32[0];
    v41.i64[1] = v102.i32[1];
    int8x16_t v103 = v41;
    int32x4_t v104 = vmovl_high_s16(v99);
    v41.i64[0] = v104.i32[0];
    v41.i64[1] = v104.i32[1];
    int8x16_t v105 = v41;
    v41.i64[0] = v97.i32[2];
    v41.i64[1] = v97.i32[3];
    int8x16_t v106 = v41;
    v41.i64[0] = v100.i32[2];
    v41.i64[1] = v100.i32[3];
    int8x16_t v107 = v41;
    v41.i64[0] = v102.i32[2];
    v41.i64[1] = v102.i32[3];
    int8x16_t v108 = v41;
    v41.i64[0] = v104.i32[2];
    v41.i64[1] = v104.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v101), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v93)), v73), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v98), v94), v72)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v105), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v91)), v75), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v103),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v92)),
                                                    v74))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v107), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v88)), v77), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v106), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v90)), v76)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v41), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v83)), v79), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v108),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v86)),
                                                    v78)))));
    LOBYTE(v31[13].__vftable) = 1;
    *a1 = v32;
    a1[1] = v31;
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    double v109 = *v26;
    double v110 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          double v110 = (uint64_t **)v109;
          unint64_t v111 = v109[4];
          if (v24 >= v111) {
            break;
          }
          double v109 = *v110;
          float v26 = v110;
          if (!*v110) {
            goto LABEL_27;
          }
        }
        if (v111 >= v24) {
          break;
        }
        double v109 = v110[1];
        if (!v109)
        {
          float v26 = v110 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_27:
      long long v112 = (uint64_t *)operator new(0x38uLL);
      v112[4] = v24;
      v112[5] = (uint64_t)v32;
      v112[6] = (uint64_t)v31;
      *long long v112 = 0;
      v112[1] = 0;
      v112[2] = (uint64_t)v110;
      *float v26 = v112;
      uint64_t v113 = **(void **)(a2 + 96);
      if (v113)
      {
        *(void *)(a2 + 96) = v113;
        long long v112 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v112);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A2247DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v29);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::FillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5885C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5885C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaFillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaFillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PolylineOverlayRibbon::AlphaFillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *md::PolylineOverlayStyle::setStyleConstants(void *result, uint64_t a2, __int32 *a3, float a4, float32_t a5)
{
  unint64_t v5 = result[1];
  int8x16_t v6 = (float32x2_t *)result[9];
  v6[2] = 0;
  v6->i32[0] = *a3;
  v6->i32[1] = a3[1];
  v6[1].i32[0] = a3[2];
  v6[1].i32[1] = a3[3];
  v6[3].f32[0] = *(float *)(a2 + 4) * 0.5;
  v6[3].f32[1] = a5;
  v6[4].f32[0] = *(float *)(a2 + 28) * a4;
  v6[5].i32[0] = *(_DWORD *)(a2 + 36);
  v6[5].i32[1] = *(_DWORD *)(a2 + 40);
  v6[7].i32[0] = *(_DWORD *)(a2 + 52);
  v6[6] = vneg_f32((float32x2_t)vrev64_s32(*(int32x2_t *)(a2 + 44)));
  if (result[8] > v5) {
    unint64_t v5 = result[8];
  }
  result[7] = 0;
  result[8] = v5;
  return result;
}

void md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::RibbonLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    int v43 = a6[24];
    if (a6[24])
    {
      char v6 = a6[1];
      char v44 = *a6;
      uint64_t v7 = *(void *)(a6 + 4);
    }
    else
    {
      char v44 = 0;
    }
    *(void *)a1 = &unk_1EF553C90;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(void *)(a1 + 144) = 0;
    *(unsigned char *)(a1 + 152) = 0;
    *(unsigned char *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 121) = 0u;
    if (v43)
    {
      *(unsigned char *)(a1 + 152) = v44;
      *(unsigned char *)(a1 + 153) = v6;
      *(void *)(a1 + 156) = v7;
      *(unsigned char *)(a1 + 176) = 1;
    }
    int8x16_t v45 = (char *)operator new(0xF8uLL);
    *((void *)v45 + 1) = 0;
    *((void *)v45 + 2) = 0;
    *(void *)int8x16_t v45 = &unk_1EF584D58;
    ggl::BufferData::BufferData((uint64_t)(v45 + 24), 20, 0, 0, 1, 0);
    *((void *)v45 + 29) = "BatchType/VData";
    *((void *)v45 + 30) = &ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
    *((void *)v45 + 3) = &unk_1EF55CA08;
    *((void *)v45 + 28) = &unk_1EF55CA28;
    v49[7] = v45 + 24;
    v49[8] = v45;
    int32x4_t v46 = (char *)operator new(0xF8uLL);
    *((void *)v46 + 1) = 0;
    *((void *)v46 + 2) = 0;
    *(void *)int32x4_t v46 = &unk_1EF583D28;
    ggl::BufferData::BufferData((uint64_t)(v46 + 24), 2, 1, 0, 1, 0);
    *((_DWORD *)v46 + 60) = 0;
    *((void *)v46 + 3) = &unk_1EF55B630;
    *((void *)v46 + 4) = 2;
    *((void *)v46 + 28) = &unk_1EF55B650;
    *((void *)v46 + 29) = "BatchType/IData";
    v49[0] = v46 + 24;
    v49[1] = v46;
    operator new();
  }
  v50[1] = 0;
  v50[0] = 0;
  {
    operator new();
  }
  long long v51 = (unint64_t)mdm::Allocator::instance(void)::alloc;
  {
    operator new();
  }
  long long v52 = (unint64_t)mdm::Allocator::instance(void)::alloc;
  LODWORD(v53) = 1065353216;
  int8x16_t v8 = *(uint64_t **)(a3 + 48);
  int16x8_t v9 = *(uint64_t **)(a3 + 56);
  while (1)
  {
    if (v8 == v9) {
      operator new();
    }
    LODWORD(v48) = 0;
    LODWORD(v48) = ggl::CullingGrid::intersectedCellsForRibbon(*(void *)(*v8 + 88), *(float **)(*v8 + 72), 0);
    v49[0] = &v48;
    uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)v50, v48, v49);
    uint64_t v12 = v11;
    int16x8_t v13 = *(void **)(v11 + 32);
    unint64_t v14 = *(void *)(v11 + 40);
    if ((unint64_t)v13 < v14)
    {
      if (v13)
      {
        uint64_t v15 = *v8;
        *int8x16_t v8 = 0;
        *int16x8_t v13 = v15;
      }
      int32x4_t v10 = v13 + 1;
      goto LABEL_6;
    }
    uint64_t v16 = *(void *)(v11 + 24);
    uint64_t v17 = ((uint64_t)v13 - v16) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      abort();
    }
    uint64_t v19 = v14 - v16;
    if (v19 >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v20 = v18;
    }
    if (v20)
    {
      uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v11 + 48) + 16))(*(void *)(v11 + 48), 8 * v20, 8);
      int8x16_t v22 = (void *)(v21 + 8 * v17);
      uint64_t v23 = v21 + 8 * v20;
      if (v21)
      {
        uint64_t v24 = *v8;
        *int8x16_t v8 = 0;
        void *v22 = v24;
      }
    }
    else
    {
      uint64_t v23 = 0;
      int8x16_t v22 = (void *)(8 * v17);
    }
    int32x4_t v10 = v22 + 1;
    unint64_t v25 = *(void **)(v12 + 24);
    unint64_t v26 = *(void *)(v12 + 32);
    if ((void *)v26 == v25)
    {
      *(void *)(v12 + 24) = v22;
      *(void *)(v12 + 32) = v10;
      uint64_t v40 = *(void *)(v12 + 40);
      *(void *)(v12 + 40) = v23;
      goto LABEL_42;
    }
    unint64_t v27 = v26 - (void)v25 - 8;
    if (v27 <= 0x47) {
      break;
    }
    unint64_t v28 = v27 >> 3;
    if (v26 - 8 * v28 - 8 < (unint64_t)v22 && (unint64_t)&v22[-v28 - 1] < v26) {
      break;
    }
    unint64_t v30 = v28 + 1;
    uint64_t v31 = (v28 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    unsigned int v32 = (void *)(v26 - 8 * v31);
    float v33 = v22 - 2;
    BOOL v34 = (long long *)(v26 - 32);
    uint64_t v35 = v31;
    do
    {
      long long v37 = *v34;
      long long v36 = v34[1];
      *BOOL v34 = 0uLL;
      v34[1] = 0uLL;
      v34 -= 2;
      *(v33 - 1) = v37;
      *float v33 = v36;
      v33 -= 2;
      v35 -= 4;
    }
    while (v35);
    v22 -= v31;
    if (v30 != v31) {
      goto LABEL_33;
    }
LABEL_34:
    unint64_t v26 = *(void *)(v12 + 24);
    int16x8_t v39 = *(void **)(v12 + 32);
    *(void *)(v12 + 24) = v22;
    *(void *)(v12 + 32) = v10;
    uint64_t v40 = *(void *)(v12 + 40);
    *(void *)(v12 + 40) = v23;
    while (v39 != (void *)v26)
    {
      int8x16_t v42 = (void (***)(void))*--v39;
      int8x16_t v41 = v42;
      *int16x8_t v39 = 0;
      if (v42)
      {
        (**v41)(v41);
        {
          operator new();
        }
        (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 40))(mdm::Allocator::instance(void)::alloc, v41, 136);
      }
    }
LABEL_42:
    if (v26) {
      (*(void (**)(void, unint64_t, unint64_t))(**(void **)(v12 + 48) + 40))(*(void *)(v12 + 48), v26, v40 - v26);
    }
LABEL_6:
    *(void *)(v12 + 32) = v10;
    ++v8;
  }
  unsigned int v32 = *(void **)(v12 + 32);
  do
  {
LABEL_33:
    uint64_t v38 = *--v32;
    void *v32 = 0;
    *--int8x16_t v22 = v38;
  }
  while (v32 != v25);
  goto LABEL_34;
}

void sub_1A224C5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36,uint64_t a37,uint64_t *a38,void **a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  MEMORY[0x1A6239270](v47, 0x1020C4007FF0C4BLL);
  if (v48) {
    operator delete(v48);
  }
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a38);
  int8x16_t v50 = *a39;
  if (*a39)
  {
    *(void *)(a33 + 40) = v50;
    operator delete(v50);
    long long v51 = *a36;
    if (!*a36)
    {
LABEL_5:
      if (!a47) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    long long v51 = *a36;
    if (!*a36) {
      goto LABEL_5;
    }
  }
  *(void *)(a33 + 16) = v51;
  operator delete(v51);
  if (!a47) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(a47);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584D58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  char v6 = (int8x16_t *)result;
LABEL_2:
  unint64_t v160 = &a2[-1].i64[1];
  uint64_t v7 = v6;
  while (1)
  {
    char v6 = v7;
    uint64_t v8 = (char *)a2 - (char *)v7;
    uint64_t v9 = ((char *)a2 - (char *)v7) >> 3;
    if (!(!v5 & v4))
    {
      switch(v9)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v65 = *v160;
          uint64_t v66 = v7->i64[0];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v7->i64[0]);
          if (result)
          {
            v7->i64[0] = v65;
            *unint64_t v160 = v66;
          }
          break;
        case 3:
          uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v160);
          break;
        case 4:
          int8x16_t v67 = v7 + 1;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64);
          uint64_t v68 = *v160;
          uint64_t v69 = v7[1].i64[0];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v160 + 96), v69);
          if (result)
          {
            v67->i64[0] = v68;
            *unint64_t v160 = v69;
            uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v67->i64[0] + 96), v7->i64[1]);
            if (result)
            {
              int8x16_t v70 = *(int8x16_t *)((char *)v7 + 8);
              *(int8x16_t *)((char *)v7 + 8) = vextq_s8(v70, v70, 8uLL);
              uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v70.i64[1] + 96), v7->i64[0]);
              if (result) {
                *uint64_t v7 = vextq_s8(*v7, *v7, 8uLL);
              }
            }
          }
          break;
        case 5:
          uint64_t result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, &v7->i64[1], v7[1].i64, &v7[1].i64[1], v160);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v8 <= 191)
    {
      int8x16_t v71 = (int8x16_t *)&v7->u64[1];
      BOOL v73 = v7 == a2 || v71 == a2;
      if (a4)
      {
        if (!v73)
        {
          int8x16_t v74 = (uint64_t *)v7;
          do
          {
            int8x16_t v76 = v71;
            uint64_t v77 = v74[1];
            uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v77 + 96), *v74);
            if (result)
            {
              int8x16_t v78 = (uint64_t *)v76;
              uint64_t v79 = 0;
              *int8x16_t v78 = 0;
              uint64_t v167 = v77;
              uint64_t v80 = *v74;
              uint64_t v163 = v78;
              for (i = v78; ; uint64_t v79 = *i)
              {
                *unint64_t i = v80;
                unint64_t i = v74;
                *int8x16_t v74 = 0;
                if (v79)
                {
                  int16x8_t v81 = *(void **)(v79 + 56);
                  if (v81)
                  {
                    int32x4_t v82 = *(void **)(v79 + 64);
                    uint64_t v83 = *(void *)(v79 + 56);
                    if (v82 != v81)
                    {
                      do
                      {
                        int32x4_t v85 = (void (***)(void, uint64_t))*--v82;
                        int16x8_t v84 = v85;
                        *int32x4_t v82 = 0;
                        if (v85)
                        {
                          (**v84)(v84, v83);
                          {
                            operator new();
                          }
                          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v84, 136);
                        }
                      }
                      while (v82 != v81);
                      uint64_t v83 = *(void *)(v79 + 56);
                    }
                    *(void *)(v79 + 64) = v81;
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v79 + 80) + 40))(*(void *)(v79 + 80), v83, *(void *)(v79 + 72) - v83);
                  }
                  MEMORY[0x1A6239270](v79, 0x1020C40379845F6);
                }
                uint64_t v86 = v167;
                if (i == (uint64_t *)v6) {
                  break;
                }
                unint64_t v87 = *(unsigned int *)(v167 + 96);
                if ((v87 & 0xF000) != 0) {
                  uint64_t v88 = 3;
                }
                else {
                  uint64_t v88 = 0;
                }
                if ((v87 & 0xF00) != 0) {
                  uint64_t v88 = 2;
                }
                if ((v87 & 0xF0) != 0) {
                  uint64_t v88 = 1;
                }
                if ((v87 & 0xF) != 0) {
                  uint64_t v88 = 0;
                }
                int v89 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v88];
                int v90 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v87 >> 12];
                int v91 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v87 >> 8) & 0xF];
                int v92 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 >> 4];
                unsigned int v93 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v87 & 0xF];
                int8x16_t v74 = i - 1;
                uint64_t v80 = *(i - 1);
                unint64_t v94 = *(unsigned int *)(v80 + 96);
                if ((v94 & 0xF000) != 0) {
                  uint64_t v95 = 3;
                }
                else {
                  uint64_t v95 = 0;
                }
                if ((v94 & 0xF00) != 0) {
                  uint64_t v95 = 2;
                }
                if ((v94 & 0xF0) != 0) {
                  uint64_t v95 = 1;
                }
                if ((v94 & 0xF) != 0) {
                  uint64_t v95 = 0;
                }
                if (((v90 << 12) | (v89 << 16) | (v91 << 8) | (16 * v92) | v93) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v94 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v95] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v94 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v94 & 0xF])) {
                  goto LABEL_128;
                }
              }
              unint64_t i = (uint64_t *)v6;
LABEL_128:
              uint64_t v167 = 0;
              std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](i, v86);
              uint64_t result = (uint64_t)std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
              int8x16_t v76 = (int8x16_t *)v163;
            }
            int8x16_t v71 = (int8x16_t *)&v76->u64[1];
            int8x16_t v74 = (uint64_t *)v76;
          }
          while (&v76->u64[1] != (unint64_t *)a2);
        }
      }
      else if (!v73)
      {
        do
        {
          uint64_t v138 = v71;
          uint64_t v139 = v6->i64[1];
          uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v139 + 96), v6->i64[0]);
          if (result)
          {
            uint64_t v140 = (uint64_t *)v138;
            uint64_t v141 = 0;
            *uint64_t v140 = 0;
            uint64_t v167 = v139;
            uint64_t v142 = v6->i64[0];
            uint64_t v164 = v140;
            for (j = v140; ; uint64_t v141 = *j)
            {
              uint64_t *j = v142;
              uint64_t j = (uint64_t *)v6;
              v6->i64[0] = 0;
              if (v141)
              {
                uint64_t v144 = *(void **)(v141 + 56);
                if (v144)
                {
                  long long v145 = *(void **)(v141 + 64);
                  uint64_t v146 = *(void *)(v141 + 56);
                  if (v145 != v144)
                  {
                    do
                    {
                      unint64_t v148 = (void (***)(void, uint64_t))*--v145;
                      uint64_t v147 = v148;
                      *long long v145 = 0;
                      if (v148)
                      {
                        (**v147)(v147, v146);
                        {
                          operator new();
                        }
                        (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v147, 136);
                      }
                    }
                    while (v145 != v144);
                    uint64_t v146 = *(void *)(v141 + 56);
                  }
                  *(void *)(v141 + 64) = v144;
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v141 + 80) + 40))(*(void *)(v141 + 80), v146, *(void *)(v141 + 72) - v146);
                }
                MEMORY[0x1A6239270](v141, 0x1020C40379845F6);
              }
              uint64_t v149 = v167;
              unint64_t v150 = *(unsigned int *)(v167 + 96);
              if ((v150 & 0xF000) != 0) {
                uint64_t v151 = 3;
              }
              else {
                uint64_t v151 = 0;
              }
              if ((v150 & 0xF00) != 0) {
                uint64_t v151 = 2;
              }
              if ((v150 & 0xF0) != 0) {
                uint64_t v151 = 1;
              }
              if ((v150 & 0xF) != 0) {
                uint64_t v151 = 0;
              }
              int v152 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v151];
              int v153 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v150 >> 12];
              int v154 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v150 >> 8) & 0xF];
              int v155 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 >> 4];
              unsigned int v156 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v150 & 0xF];
              char v6 = (int8x16_t *)(j - 1);
              uint64_t v142 = *(j - 1);
              unint64_t v157 = *(unsigned int *)(v142 + 96);
              if ((v157 & 0xF000) != 0) {
                uint64_t v158 = 3;
              }
              else {
                uint64_t v158 = 0;
              }
              if ((v157 & 0xF00) != 0) {
                uint64_t v158 = 2;
              }
              if ((v157 & 0xF0) != 0) {
                uint64_t v158 = 1;
              }
              if ((v157 & 0xF) != 0) {
                uint64_t v158 = 0;
              }
              if (((v153 << 12) | (v152 << 16) | (v154 << 8) | (16 * v155) | v156) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v157 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v158] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v157 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v157 & 0xF])) {
                break;
              }
            }
            uint64_t v167 = 0;
            std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](j, v149);
            uint64_t result = (uint64_t)std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
            uint64_t v138 = (int8x16_t *)v164;
          }
          int8x16_t v71 = (int8x16_t *)&v138->u64[1];
          char v6 = v138;
        }
        while (&v138->u64[1] != (unint64_t *)a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v10 = (unint64_t)v9 >> 1;
    uint64_t v11 = &v7->i64[(unint64_t)v9 >> 1];
    if ((unint64_t)v8 < 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11, v7->i64, v160);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7->i64, v11, v160);
      uint64_t v12 = v10;
      int16x8_t v13 = &v7->i64[v10];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v7->i64[1], v13 - 1, a2[-1].i64);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v7[1].i64, &v7->i64[v12 + 1], &a2[-2].i64[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v13 - 1, v11, &v7->i64[v12 + 1]);
      uint64_t v14 = v7->i64[0];
      v7->i64[0] = *v13;
      *int16x8_t v13 = v14;
    }
    --a3;
    uint64_t v15 = v7->i64[0];
    if ((a4 & 1) != 0
      || md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v7[-1].i64[1] + 96), v7->i64[0]))
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      uint64_t v16 = v7;
      do
      {
        uint64_t v17 = v16;
        uint64_t v19 = v16->i64[1];
        uint64_t v16 = (int8x16_t *)((char *)v16 + 8);
        uint64_t v18 = v19;
      }
      while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v15));
      uint64_t v20 = (uint64_t *)a2;
      if (v17 == v6)
      {
        uint64_t v20 = (uint64_t *)a2;
        do
        {
          if (v16 >= (int8x16_t *)v20) {
            break;
          }
          uint64_t v22 = *--v20;
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v22 + 96), v15));
      }
      else
      {
        do
          uint64_t v21 = *--v20;
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v15));
      }
      if (v16 < (int8x16_t *)v20)
      {
        uint64_t v23 = *v20;
        uint64_t v24 = (uint64_t *)v16;
        unint64_t v25 = v20;
        do
        {
          *uint64_t v24 = v23;
          *unint64_t v25 = v18;
          uint64_t v15 = v167;
          unint64_t v26 = *(unsigned int *)(v167 + 96);
          int v27 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v26 >> 8) & 0xF];
          int v28 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v26 >> 12] << 12;
          int v29 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 >> 4];
          int v30 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v26 & 0xF];
          if ((v26 & 0xF000) != 0) {
            uint64_t v31 = 3;
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v26 & 0xF00) != 0) {
            uint64_t v31 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v32 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v32 = v31;
          }
          unsigned int v33 = v28 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v32] << 16) | (v27 << 8) | (16 * v29) | v30;
          do
          {
            uint64_t v34 = v24[1];
            ++v24;
            uint64_t v18 = v34;
            unint64_t v35 = *(unsigned int *)(v34 + 96);
            if ((v35 & 0xF000) != 0) {
              uint64_t v36 = 3;
            }
            else {
              uint64_t v36 = 0;
            }
            if ((v35 & 0xF00) != 0) {
              uint64_t v36 = 2;
            }
            if ((v35 & 0xF0) != 0) {
              uint64_t v36 = 1;
            }
            if ((v35 & 0xF) != 0) {
              uint64_t v36 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v35 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v35 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v35 & 0xF]) < v33);
          uint64_t v17 = (int8x16_t *)(v24 - 1);
          do
          {
            uint64_t v37 = *--v25;
            uint64_t v23 = v37;
            unint64_t v38 = *(unsigned int *)(v37 + 96);
            if ((v38 & 0xF000) != 0) {
              uint64_t v39 = 3;
            }
            else {
              uint64_t v39 = 0;
            }
            if ((v38 & 0xF00) != 0) {
              uint64_t v39 = 2;
            }
            if ((v38 & 0xF0) != 0) {
              uint64_t v39 = 1;
            }
            if ((v38 & 0xF) != 0) {
              uint64_t v39 = 0;
            }
          }
          while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v38 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v39] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v38 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v38 & 0xF]) >= v33);
        }
        while (v24 < v25);
      }
      if (v17 != v6)
      {
        uint64_t v40 = v17->i64[0];
        v17->i64[0] = 0;
        std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v40);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v17->i64, v15);
      std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      if (v16 < (int8x16_t *)v20) {
        goto LABEL_58;
      }
      char v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>(v6, v17);
      uint64_t v7 = (int8x16_t *)&v17->u64[1];
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>((int8x16_t *)&v17->u64[1], a2);
      if (result)
      {
        a2 = v17;
        if (v41) {
          return result;
        }
        goto LABEL_2;
      }
      if ((v41 & 1) == 0)
      {
LABEL_58:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*,false>(v6, v17, a3, a4 & 1);
        a4 = 0;
        uint64_t v7 = (int8x16_t *)&v17->u64[1];
      }
    }
    else
    {
      v7->i64[0] = 0;
      uint64_t v167 = v15;
      unint64_t v42 = *(unsigned int *)(v15 + 96);
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, *v160))
      {
        do
        {
          uint64_t v43 = v7->i64[1];
          uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v43));
      }
      else
      {
        char v44 = (int8x16_t *)&v7->u64[1];
        do
        {
          uint64_t v7 = v44;
          if (v44 >= a2) {
            break;
          }
          char v44 = (int8x16_t *)((char *)v44 + 8);
        }
        while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v7->i64[0]));
      }
      int8x16_t v45 = a2;
      if (v7 < a2)
      {
        int8x16_t v45 = a2;
        do
        {
          uint64_t v46 = v45[-1].i64[1];
          int8x16_t v45 = (int8x16_t *)((char *)v45 - 8);
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v42, v46));
      }
      if (v7 < v45)
      {
        uint64_t v47 = v7->i64[0];
        uint64_t v48 = v45->i64[0];
        do
        {
          v7->i64[0] = v48;
          v45->i64[0] = v47;
          uint64_t v15 = v167;
          unint64_t v49 = *(unsigned int *)(v167 + 96);
          int v50 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v49 >> 8) & 0xF];
          int v51 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 >> 4];
          int v52 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v49 & 0xF];
          int v53 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v49 >> 12] << 12;
          if ((v49 & 0xF000) != 0) {
            uint64_t v54 = 3;
          }
          else {
            uint64_t v54 = 0;
          }
          if ((v49 & 0xF00) != 0) {
            uint64_t v54 = 2;
          }
          if (*(_DWORD *)(v167 + 96)) {
            BOOL v55 = (*(_DWORD *)(v167 + 96) & 0xF) == 0;
          }
          else {
            BOOL v55 = v54;
          }
          unsigned int v56 = v53 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v55] << 16) | (v50 << 8) | (16 * v51) | v52;
          do
          {
            uint64_t v57 = v7->i64[1];
            uint64_t v7 = (int8x16_t *)((char *)v7 + 8);
            uint64_t v47 = v57;
            unint64_t v58 = *(unsigned int *)(v57 + 96);
            if ((v58 & 0xF000) != 0) {
              uint64_t v59 = 3;
            }
            else {
              uint64_t v59 = 0;
            }
            if ((v58 & 0xF00) != 0) {
              uint64_t v59 = 2;
            }
            if ((v58 & 0xF0) != 0) {
              uint64_t v59 = 1;
            }
            if ((v58 & 0xF) != 0) {
              uint64_t v59 = 0;
            }
          }
          while (v56 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v58 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v59] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v58 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v58 & 0xF]));
          do
          {
            uint64_t v60 = v45[-1].i64[1];
            int8x16_t v45 = (int8x16_t *)((char *)v45 - 8);
            uint64_t v48 = v60;
            unint64_t v61 = *(unsigned int *)(v60 + 96);
            if ((v61 & 0xF000) != 0) {
              uint64_t v62 = 3;
            }
            else {
              uint64_t v62 = 0;
            }
            if ((v61 & 0xF00) != 0) {
              uint64_t v62 = 2;
            }
            if ((v61 & 0xF0) != 0) {
              uint64_t v62 = 1;
            }
            if ((v61 & 0xF) != 0) {
              uint64_t v62 = 0;
            }
          }
          while (v56 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v61 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v62] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v61 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v61 & 0xF]));
        }
        while (v7 < v45);
      }
      int8x16_t v63 = &v7[-1].i64[1];
      if (&v7[-1].u64[1] != (unint64_t *)v6)
      {
        uint64_t v64 = *v63;
        *int8x16_t v63 = 0;
        std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v6->i64, v64);
        uint64_t v15 = v167;
      }
      uint64_t v167 = 0;
      std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v7[-1].i64[1], v15);
      uint64_t result = (uint64_t)std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
      a4 = 0;
    }
  }
  if (v7 != a2)
  {
    unint64_t v161 = (char *)a2 - (char *)v7;
    int64_t v96 = (unint64_t)(v9 - 2) >> 1;
    int64_t v97 = v96;
    do
    {
      int64_t v98 = v97;
      if (v96 >= v97)
      {
        uint64_t v99 = (2 * v97) | 1;
        int32x4_t v100 = &v6->i64[v99];
        if (2 * v97 + 2 < v9)
        {
          uint64_t v101 = *v100;
          uint64_t v102 = v100[1];
          BOOL v103 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v102);
          if (v103) {
            uint64_t v104 = v102;
          }
          else {
            uint64_t v104 = v101;
          }
          if (v103)
          {
            ++v100;
            uint64_t v99 = 2 * v98 + 2;
          }
        }
        else
        {
          uint64_t v104 = *v100;
        }
        int8x16_t v105 = &v6->i64[v98];
        uint64_t v106 = *v105;
        uint64_t result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v104 + 96), *v105);
        if ((result & 1) == 0)
        {
          uint64_t *v105 = 0;
          uint64_t v167 = v106;
          uint64_t v107 = *v100;
          while (1)
          {
            unint64_t v111 = v100;
            *int32x4_t v100 = 0;
            std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v105, v107);
            if (v96 < v99) {
              break;
            }
            uint64_t v112 = (2 * v99) | 1;
            int32x4_t v100 = &v6->i64[v112];
            uint64_t v113 = 2 * v99 + 2;
            if (v113 < v9)
            {
              uint64_t v108 = *v100;
              uint64_t v107 = v100[1];
              BOOL v109 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v100 + 96), v107);
              if (v109) {
                ++v100;
              }
              else {
                uint64_t v107 = v108;
              }
              if (v109) {
                uint64_t v99 = v113;
              }
              else {
                uint64_t v99 = v112;
              }
            }
            else
            {
              uint64_t v107 = *v100;
              uint64_t v99 = (2 * v99) | 1;
            }
            uint64_t v110 = v167;
            int8x16_t v105 = v111;
            if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v107 + 96), v167))
            {
              goto LABEL_168;
            }
          }
          uint64_t v110 = v167;
LABEL_168:
          uint64_t v167 = 0;
          std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v111, v110);
          uint64_t result = (uint64_t)std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v167, 0);
        }
      }
      int64_t v97 = v98 - 1;
    }
    while (v98);
    uint64_t v114 = v161 >> 3;
    while (2)
    {
      if (v114 >= 2)
      {
        uint64_t v118 = 0;
        uint64_t v119 = v6->i64[0];
        v6->i64[0] = 0;
        uint64_t v166 = v119;
        unint64_t v120 = (uint64_t *)v6;
        do
        {
          uint64_t v125 = &v120[v118 + 1];
          uint64_t v126 = (2 * v118) | 1;
          uint64_t v127 = 2 * v118 + 2;
          if (v127 < v114)
          {
            uint64_t v121 = *v125;
            uint64_t v122 = v120[v118 + 2];
            BOOL v123 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v125 + 96), v125[1]);
            if (v123) {
              uint64_t v124 = v122;
            }
            else {
              uint64_t v124 = v121;
            }
            if (v123)
            {
              ++v125;
              uint64_t v118 = v127;
            }
            else
            {
              uint64_t v118 = v126;
            }
          }
          else
          {
            uint64_t v124 = *v125;
            uint64_t v118 = (2 * v118) | 1;
          }
          *uint64_t v125 = 0;
          std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v120, v124);
          unint64_t v120 = v125;
        }
        while (v118 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
        uint64_t v128 = &a2[-1].i64[1];
        if (v125 == (uint64_t *)&a2[-1].u64[1])
        {
          uint64_t v115 = v166;
          uint64_t v166 = 0;
          char v116 = v125;
          goto LABEL_193;
        }
        uint64_t v129 = *v128;
        *uint64_t v128 = 0;
        std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v125, v129);
        uint64_t v130 = v166;
        uint64_t v166 = 0;
        std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v128, v130);
        uint64_t v131 = (char *)v125 - (char *)v6 + 8;
        if (v131 >= 9)
        {
          unint64_t v132 = (unint64_t)((v131 >> 3) - 2) >> 1;
          char v133 = &v6->i64[v132];
          uint64_t v134 = *v125;
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), *v125))
          {
            *uint64_t v125 = 0;
            uint64_t v167 = v134;
            uint64_t v135 = *v133;
            do
            {
              uint64_t v136 = v133;
              *char v133 = 0;
              std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v125, v135);
              uint64_t v137 = v167;
              if (!v132) {
                break;
              }
              unint64_t v132 = (v132 - 1) >> 1;
              char v133 = &v6->i64[v132];
              uint64_t v135 = *v133;
              uint64_t v125 = v136;
            }
            while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v133 + 96), v167));
            uint64_t v167 = 0;
            std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v136, v137);
            char v116 = &v167;
            uint64_t v115 = 0;
LABEL_193:
            std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v116, v115);
          }
        }
        uint64_t result = (uint64_t)std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v166, 0);
      }
      a2 = (int8x16_t *)((char *)a2 - 8);
      if ((unint64_t)v114-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::batch(std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PolylineOverlayBatchKey,std::vector<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::PolylineOverlayRibbon,mdm::TypeDeleter<md::PolylineOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const&,std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::PolylineOverlayRibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  BOOL v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v5 = a2[-1].i64[1];
      uint64_t v6 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v5 + 96), a1->i64[0]))
      {
        a1->i64[0] = v5;
        a2[-1].i64[1] = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return v4;
    case 4:
      uint64_t v16 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v17 = a2[-1].i64[1];
      uint64_t v18 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v18))
      {
        v16->i64[0] = v17;
        a2[-1].i64[1] = v18;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v16->i64[0] + 96), a1->i64[1]))
        {
          int8x16_t v19 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v19, v19, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return v4;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      uint64_t v8 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v8;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v8 + 96), *i64))
    {
      break;
    }
LABEL_6:
    i64 = v8;
    v9 += 8;
    if (++v8 == (uint64_t *)a2) {
      return 1;
    }
  }
  *uint64_t v8 = 0;
  uint64_t v21 = v11;
  uint64_t v12 = *i64;
  uint64_t v13 = v9;
  while (1)
  {
    *(uint64_t *)((char *)a1[1].i64 + v13) = 0;
    std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100]((uint64_t *)((char *)&a1[1].i64[1] + v13), v12);
    uint64_t v14 = v21;
    if (v13 == -16) {
      break;
    }
    uint64_t v12 = *(uint64_t *)((char *)&a1->i64[1] + v13);
    v13 -= 8;
    if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v21 + 96), v12))
    {
      uint64_t v15 = (uint64_t *)((char *)&a1[1].i64[1] + v13);
      goto LABEL_13;
    }
  }
  uint64_t v15 = (uint64_t *)a1;
LABEL_13:
  uint64_t v21 = 0;
  std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](v15, v14);
  if (++v10 != 8)
  {
    std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
    goto LABEL_6;
  }
  BOOL v4 = v8 + 1 == (uint64_t *)a2;
  std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](&v21, 0);
  return v4;
}

uint64_t md::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch(void *a1)
{
  *a1 = &unk_1EF530FD8;
  uint64_t v2 = (std::__shared_weak_count *)a1[181];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *a1 = &unk_1EF530FD8;
  uint64_t v2 = (std::__shared_weak_count *)a1[181];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

uint64_t md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553A50;
  uint64_t v2 = *(uint64_t **)(a1 + 1400);
  if (v2)
  {
    unsigned int v3 = *(uint64_t **)(a1 + 1408);
    BOOL v4 = *(void **)(a1 + 1400);
    if (v3 != v2)
    {
      do
        std::unique_ptr<md::PolylineOverlayRibbonSection<md::Ribbons::PolylineOverlayRibbonDescriptor>>::reset[abi:nn180100](--v3, 0);
      while (v3 != v2);
      BOOL v4 = *(void **)(a1 + 1400);
    }
    *(void *)(a1 + 1408) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 1376);
  do
  {
    if (v5[1])
    {
      unint64_t v6 = 0;
      uint64_t v7 = v5 + 2;
      uint64_t v8 = v5 + 2;
      uint64_t v9 = (void (***)(void))(v5 + 2);
      do
      {
        int v10 = (void (**)(void *))*v9;
        v9 += 15;
        (*v10)(v8);
        ++v6;
        v7 += 15;
        uint64_t v8 = v9;
      }
      while (v6 < v5[1]);
    }
    v5[1] = 0;
    uint64_t v5 = (void *)*v5;
  }
  while (v5);
  uint64_t v11 = *(void ***)(a1 + 1376);
  *(void *)(a1 + 1384) = v11;
  uint64_t v12 = *v11;
  *uint64_t v11 = 0;
  if (v12)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      free(v12);
      uint64_t v12 = v13;
    }
    while (v13);
    uint64_t v11 = *(void ***)(a1 + 1376);
  }
  free(v11);
  uint64_t v14 = *(void **)(a1 + 1352);
  if (v14)
  {
    *(void *)(a1 + 1360) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 1320);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 1328);
    uint64_t v17 = *(void *)(a1 + 1320);
    if (v16 != v15)
    {
      uint64_t v18 = *(void *)(a1 + 1328);
      do
      {
        uint64_t v20 = *(void **)(v18 - 24);
        v18 -= 24;
        int8x16_t v19 = v20;
        if (v20)
        {
          *(void *)(v16 - 16) = v19;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = *(void *)(a1 + 1320);
    }
    *(void *)(a1 + 1328) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 1344) + 40))(*(void *)(a1 + 1344), v17, *(void *)(a1 + 1336) - v17);
  }
  uint64_t v21 = *(void **)(a1 + 1296);
  if (v21)
  {
    *(void *)(a1 + 1304) = v21;
    operator delete(v21);
  }
  *(void *)(a1 + 1168) = &off_1EF55A458;
  *(void *)(a1 + 1184) = 3131955885;
  *(void *)(a1 + 1040) = &off_1EF55A458;
  *(void *)(a1 + 1056) = 3131955885;
  *(void *)(a1 + 912) = &off_1EF55A458;
  *(void *)(a1 + 928) = 3131955885;
  *(void *)(a1 + 784) = &off_1EF55A458;
  *(void *)(a1 + 800) = 3131955885;
  *(void *)(a1 + 656) = &off_1EF55A458;
  *(void *)(a1 + 672) = 3131955885;
  *(void *)(a1 + 528) = &off_1EF55A458;
  *(void *)(a1 + 544) = 3131955885;
  *(void *)(a1 + 400) = &off_1EF55A458;
  *(void *)(a1 + 416) = 3131955885;
  *(void *)(a1 + 272) = &off_1EF55A458;
  *(void *)(a1 + 288) = 3131955885;
  *(void *)(a1 + 144) = &off_1EF55A458;
  *(void *)(a1 + 160) = 3131955885;
  *(void *)(a1 + 16) = &off_1EF55A458;
  *(void *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch(a1);
  JUMPOUT(0x1A6239270);
}

void md::PolylineOverlayBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(void *a1)
{
  md::PolylineOverlayBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::PolylineOverlayBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlayBatch(void *a1)
{
  *a1 = &unk_1EF53EBC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[189];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unsigned int v3 = (std::__shared_weak_count *)a1[187];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v3 = (std::__shared_weak_count *)a1[187];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  BOOL v4 = (std::__shared_weak_count *)a1[185];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *a1 = &unk_1EF530FD8;
  uint64_t v5 = (std::__shared_weak_count *)a1[181];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
}

void md::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch(void *a1)
{
  *a1 = &unk_1EF530FD8;
  uint64_t v2 = (std::__shared_weak_count *)a1[181];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~RibbonBatch((uint64_t)a1);
  JUMPOUT(0x1A6239270);
}

void md::PolylineOverlayLayer<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::layout(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t v4 = *(void *)(a1 + 224);
  if (*(unsigned char *)(v4 + 304))
  {
    *(void *)(a1 + 56) = *(void *)(v4 + 176);
    if (a2[136]) {
      *(void *)(a1 + 88) = *(void *)(v4 + 176);
    }
  }
  if (a2[132])
  {
    *(void *)(a1 + 64) = *(void *)(v4 + 200);
    *(void *)(a1 + 72) = *(void *)(v4 + 208);
    *(void *)(a1 + 80) = *(void *)(v4 + 240);
    if (a2[136])
    {
      *(void *)(a1 + 96) = *(void *)(v4 + 200);
      *(void *)(a1 + 104) = *(void *)(v4 + 208);
      *(void *)(a1 + 112) = *(void *)(v4 + 240);
    }
    *(void *)(a1 + 120) = *(void *)(v4 + 248);
    *(void *)(a1 + 128) = *(void *)(v4 + 248);
  }
  else
  {
    int v5 = a2[56];
    *(void *)(a1 + 64) = *(void *)(v4 + 184);
    *(void *)(a1 + 72) = *(void *)(v4 + 208);
    if (v5)
    {
      *(void *)(a1 + 80) = *(void *)(v4 + 232);
      if (!a2[136]) {
        goto LABEL_14;
      }
      *(void *)(a1 + 96) = *(void *)(v4 + 184);
      *(void *)(a1 + 104) = *(void *)(v4 + 208);
      uint64_t v6 = *(void *)(v4 + 232);
    }
    else
    {
      *(void *)(a1 + 80) = *(void *)(v4 + 224);
      if (!a2[136]) {
        goto LABEL_14;
      }
      *(void *)(a1 + 96) = *(void *)(v4 + 184);
      *(void *)(a1 + 104) = *(void *)(v4 + 208);
      uint64_t v6 = *(void *)(v4 + 224);
    }
    *(void *)(a1 + 112) = v6;
  }
LABEL_14:
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  unint64_t v250 = *(uint64_t **)(a1 + 16);
  if (v250 == v7) {
    return;
  }
  if (*(unsigned char *)(*v7 + 1456)) {
    goto LABEL_74;
  }
  uint64_t v8 = *(void **)(*(void *)a2 + 8);
  int8x8_t v9 = (int8x8_t)v8[1];
  if (!*(void *)&v9) {
    goto LABEL_39;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    uint64_t v11 = 0x1AF456233693CD46;
    if (*(void *)&v9 <= 0x1AF456233693CD46uLL) {
      uint64_t v11 = 0x1AF456233693CD46uLL % *(void *)&v9;
    }
  }
  else
  {
    uint64_t v11 = (*(void *)&v9 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v12 = *(void **)(*v8 + 8 * v11);
  if (!v12) {
    goto LABEL_39;
  }
  uint64_t v13 = (void *)*v12;
  if (!v13) {
    goto LABEL_39;
  }
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v13[1];
      if (v15 == 0x1AF456233693CD46)
      {
        if (v13[2] == 0x1AF456233693CD46) {
          goto LABEL_37;
        }
      }
      else if ((v15 & (*(void *)&v9 - 1)) != v11)
      {
        goto LABEL_39;
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        goto LABEL_39;
      }
    }
  }
  while (1)
  {
    unint64_t v14 = v13[1];
    if (v14 == 0x1AF456233693CD46) {
      break;
    }
    if (v14 >= *(void *)&v9) {
      v14 %= *(void *)&v9;
    }
    if (v14 != v11) {
      goto LABEL_39;
    }
LABEL_26:
    uint64_t v13 = (void *)*v13;
    if (!v13) {
      goto LABEL_39;
    }
  }
  if (v13[2] != 0x1AF456233693CD46) {
    goto LABEL_26;
  }
LABEL_37:
  uint64_t v16 = v13[5];
  if (*(void *)(v16 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v17 = *(void *)(v16 + 32);
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v17 = 0;
LABEL_40:
  if (*(unsigned char *)(v17 + 3776))
  {
    uint64_t v18 = *(void *)(a1 + 144);
    if (v18)
    {
      int v19 = gdc::GlobeTileGrid::intersectWithFrustum(v18, (const double *)(v17 + 984), *(double *)(v17 + 24));
      goto LABEL_65;
    }
    uint64_t v21 = *(void *)(a1 + 184);
    if ((*(unsigned char *)(v21 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      *(void *)&v264[0] = &v262;
      uint64_t v263 = v264;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v263, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    uint64_t v22 = *(float **)(v21 + 72);
    double v23 = 0.0;
  }
  else
  {
    if ((*(void *)&v9 & (*(void *)&v9 - 1)) != 0)
    {
      unint64_t v24 = 0x8BD499FBD96FBB9ELL;
      if (*(void *)&v9 <= 0x8BD499FBD96FBB9ELL) {
        unint64_t v24 = 0x8BD499FBD96FBB9ELL % *(void *)&v9;
      }
      uint64_t v20 = *(void **)(*v8 + 8 * v24);
      do
      {
        do
          uint64_t v20 = (void *)*v20;
        while (v20[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v20[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      uint64_t v20 = *(void **)(*v8 + 8 * ((*(void *)&v9 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          uint64_t v20 = (void *)*v20;
        while (v20[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v20[2] != 0x8BD499FBD96FBB9ELL);
    }
    double v25 = 0.0;
    if (**(unsigned char **)(v20[5] + 32) && *(unsigned char *)(a1 + 176)) {
      double v25 = *(double *)(v17 + 24) * 0.0000000249532021 * (double)(1 << *(unsigned char *)(a1 + 153));
    }
    uint64_t v26 = *(void *)(a1 + 184);
    if ((*(unsigned char *)(v26 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      *(void *)&v264[0] = &v262;
      uint64_t v263 = v264;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v263, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    uint64_t v22 = *(float **)(v26 + 72);
    double v23 = v25;
  }
  int v19 = ggl::CullingGrid::intersectedCellsForView(v22, v23);
LABEL_65:
  uint64_t v27 = *(void *)(a1 + 8);
  uint64_t v28 = *(void *)(a1 + 16);
  if (v27 != v28)
  {
    do
    {
      int v30 = *(unsigned char **)v27;
      uint64_t v31 = *(uint64_t **)(*(void *)v27 + 1400);
      BOOL v32 = *(uint64_t **)(*(void *)v27 + 1408);
      if (v31 == v32)
      {
        char v29 = 0;
      }
      else
      {
        char v29 = 0;
        do
        {
          uint64_t v33 = *v31++;
          BOOL v34 = (*(_DWORD *)(v33 + 96) & v19) != 0;
          v29 |= v34;
          *(unsigned char *)(v33 + 48) = v34;
        }
        while (v31 != v32);
      }
      v30[136] = v29 & 1;
      v30[264] = v29 & 1;
      v30[392] = v29 & 1;
      v30[520] = v29 & 1;
      v30[648] = v29 & 1;
      v30[776] = v29 & 1;
      v30[904] = v29 & 1;
      v30[1032] = v29 & 1;
      v30[1160] = v29 & 1;
      v30[1288] = v29 & 1;
      v27 += 8;
      v30[1424] = v29 & 1;
    }
    while (v27 != v28);
    uint64_t v7 = *(uint64_t **)(a1 + 8);
    unint64_t v250 = *(uint64_t **)(a1 + 16);
LABEL_74:
    if (v7 == v250) {
      return;
    }
    uint64_t v252 = v2;
    while (1)
    {
      unint64_t v251 = v7;
      uint64_t v35 = *v7;
      if (!*(unsigned char *)(v35 + 1424)) {
        goto LABEL_76;
      }
      uint64_t v261 = v35;
      uint64_t v36 = *(unsigned char **)(v35 + 1472);
      v264[0] = xmmword_1A28FD2A0;
      v264[1] = xmmword_1A28FD460;
      __int16 v265 = 256;
      uint64_t v266 = 0x3F800000BF800000;
      int v267 = 0;
      if (*(void *)(v2 + 144))
      {
        if (*(unsigned char *)(v2 + 136)) {
          break;
        }
      }
      md::PolylineOverlayStyle::updateFromOverlay((uint64_t)v36, v2, (uint64_t)v264);
      if (*v36) {
        goto LABEL_83;
      }
LABEL_84:
      uint64_t v37 = *(void *)(v261 + 1472);
      os_unfair_lock_lock((os_unfair_lock_t)(v37 + 196));
      float v38 = *(float *)(v37 + 152);
      float v39 = *(float *)(v37 + 156);
      uint64_t v40 = v261;
      os_unfair_lock_unlock((os_unfair_lock_t)(v37 + 196));
      char v41 = *(uint64_t **)(v261 + 1400);
      unint64_t v42 = *(uint64_t **)(v261 + 1408);
      while (v41 != v42)
      {
        uint64_t v44 = *v41;
        if (*(unsigned char *)(*v41 + 48))
        {
          BOOL v43 = *(float *)(v44 + 104) >= v38 && *(float *)(v44 + 100) <= v39;
          *(unsigned char *)(v44 + 48) = v43;
        }
        ++v41;
      }
      int v45 = **(unsigned __int8 **)(v261 + 1472);
      *(unsigned char *)(v261 + 136) = v45;
      *(unsigned char *)(v261 + 264) = v45;
      *(unsigned char *)(v261 + 392) = v45;
      *(unsigned char *)(v261 + 520) = v45;
      *(unsigned char *)(v261 + 648) = v45;
      *(unsigned char *)(v261 + 776) = v45;
      *(unsigned char *)(v261 + 904) = v45;
      *(unsigned char *)(v261 + 1032) = v45;
      *(unsigned char *)(v261 + 1160) = v45;
      *(unsigned char *)(v261 + 1288) = v45;
      *(unsigned char *)(v261 + 1424) = v45;
      if (v45)
      {
        uint64_t v46 = 0;
        LOBYTE(v263) = *(unsigned char *)(v261 + 1464);
        BYTE1(v263) = *(unsigned char *)(v2 + 88);
        BYTE2(v263) = *(unsigned char *)(v2 + 135);
        BYTE3(v263) = *(unsigned char *)(v2 + 134);
        char v259 = *(void **)(*(void *)(v261 + 8) + 224);
        do
        {
          if (!*(unsigned char *)(*(void *)(v40 + 1472) + v46 + 120))
          {
            *(unsigned char *)(v40 + (v46 << 7) + 136) = 0;
            goto LABEL_97;
          }
          uint64_t v47 = v40 + (v46 << 7);
          *(unsigned char *)(v47 + 136) = 1;
          *(_DWORD *)(v47 + 56) = *(unsigned __int8 *)(v2 + 57);
          if (v46 > 9u)
          {
            int v50 = 0;
            goto LABEL_260;
          }
          if (((1 << v46) & 0x255) == 0)
          {
            if (((1 << v46) & 0x122) == 0)
            {
              uint64_t v75 = v259[21];
              uint64_t v76 = *(void *)(v75 + 8);
              if (v76 != *(void *)v75)
              {
                int v50 = *(void **)(v76 - 8);
                *(void *)(v75 + 8) = v76 - 8;
                uint64_t v77 = *(void **)(v75 + 40);
                unint64_t v78 = *(void *)(v75 + 48);
                if ((unint64_t)v77 >= v78)
                {
                  uint64_t v79 = *(void *)(v75 + 32);
                  uint64_t v80 = ((uint64_t)v77 - v79) >> 3;
                  unint64_t v81 = v80 + 1;
                  if ((unint64_t)(v80 + 1) >> 61) {
                    goto LABEL_339;
                  }
                  uint64_t v82 = v78 - v79;
                  if (v82 >> 2 > v81) {
                    unint64_t v81 = v82 >> 2;
                  }
                  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  if (v81)
                  {
                    uint64_t v83 = v2;
                    int16x8_t v84 = v50;
                    uint64_t v85 = 8 * v81;
                    uint64_t v86 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v75 + 56) + 16))(*(void *)(v75 + 56), 8 * v81, 8);
                    unint64_t v87 = (void *)(v86 + 8 * v80);
                    unint64_t v81 = v86 + v85;
                    int v50 = v84;
                    if (v86) {
                      *unint64_t v87 = v84;
                    }
                    uint64_t v2 = v83;
                  }
                  else
                  {
                    unint64_t v87 = (void *)(8 * v80);
                  }
                  uint64_t v152 = *(void *)(v75 + 32);
                  uint64_t v151 = *(void *)(v75 + 40);
                  uint64_t v153 = v151 - v152;
                  if (v151 != v152)
                  {
                    unint64_t v154 = v153 - 8;
                    if ((unint64_t)(v153 - 8) < 0x38)
                    {
                      int v155 = v87;
                    }
                    else
                    {
                      int v155 = v87;
                      if ((unint64_t)(v151 - (void)v87) >= 0x20)
                      {
                        uint64_t v156 = (v154 >> 3) + 1;
                        unint64_t v157 = v87 - 2;
                        uint64_t v158 = (long long *)(v151 - 16);
                        uint64_t v159 = v156 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v160 = *v158;
                          *(v157 - 1) = *(v158 - 1);
                          *unint64_t v157 = v160;
                          v157 -= 2;
                          v158 -= 2;
                          v159 -= 4;
                        }
                        while (v159);
                        int v155 = &v87[-(v156 & 0x3FFFFFFFFFFFFFFCLL)];
                        v151 -= 8 * (v156 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v156 == (v156 & 0x3FFFFFFFFFFFFFFCLL)) {
                          goto LABEL_255;
                        }
                      }
                    }
                    do
                    {
                      uint64_t v172 = *(void *)(v151 - 8);
                      v151 -= 8;
                      *--int v155 = v172;
                    }
                    while (v151 != v152);
                    goto LABEL_255;
                  }
LABEL_252:
                  int v155 = v87;
LABEL_256:
                  uint64_t v106 = v87 + 1;
                  *(void *)(v75 + 32) = v155;
                  *(void *)(v75 + 40) = v87 + 1;
                  uint64_t v184 = *(void *)(v75 + 48);
                  *(void *)(v75 + 48) = v81;
                  if (v151) {
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v75 + 56) + 40))(*(void *)(v75 + 56), v151, v184 - v151);
                  }
LABEL_258:
                  *(void *)(v75 + 40) = v106;
                  *(void *)&v264[0] = v50;
                  uint64_t v163 = *(void *)(v75 + 120);
                  if (!v163)
                  {
LABEL_338:
                    std::__throw_bad_function_call[abi:nn180100]();
LABEL_339:
                    abort();
                  }
                  goto LABEL_259;
                }
LABEL_154:
                if (v77) {
                  *uint64_t v77 = v50;
                }
                uint64_t v106 = v77 + 1;
                goto LABEL_258;
              }
              uint64_t v103 = *(void *)(v75 + 88);
              if (!v103) {
                goto LABEL_338;
              }
              uint64_t v104 = (*(uint64_t (**)(uint64_t))(*(void *)v103 + 48))(v103);
              int v50 = (void *)v104;
              uint64_t v77 = *(void **)(v75 + 40);
              unint64_t v105 = *(void *)(v75 + 48);
              if ((unint64_t)v77 < v105) {
                goto LABEL_154;
              }
              uint64_t v114 = *(void *)(v75 + 32);
              uint64_t v115 = ((uint64_t)v77 - v114) >> 3;
              unint64_t v81 = v115 + 1;
              if ((unint64_t)(v115 + 1) >> 61) {
                goto LABEL_339;
              }
              uint64_t v116 = v105 - v114;
              if (v116 >> 2 > v81) {
                unint64_t v81 = v116 >> 2;
              }
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
              }
              if (v81)
              {
                uint64_t v117 = v2;
                uint64_t v118 = (void *)v104;
                uint64_t v119 = 8 * v81;
                uint64_t v120 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v75 + 56) + 16))(*(void *)(v75 + 56), 8 * v81, 8);
                unint64_t v87 = (void *)(v120 + 8 * v115);
                unint64_t v81 = v120 + v119;
                int v50 = v118;
                if (v120) {
                  *unint64_t v87 = v118;
                }
                uint64_t v2 = v117;
              }
              else
              {
                unint64_t v87 = (void *)(8 * v115);
              }
              uint64_t v175 = *(void *)(v75 + 32);
              uint64_t v151 = *(void *)(v75 + 40);
              uint64_t v176 = v151 - v175;
              if (v151 == v175) {
                goto LABEL_252;
              }
              unint64_t v177 = v176 - 8;
              if ((unint64_t)(v176 - 8) < 0x38)
              {
                int v155 = v87;
              }
              else
              {
                int v155 = v87;
                if ((unint64_t)(v151 - (void)v87) >= 0x20)
                {
                  uint64_t v178 = (v177 >> 3) + 1;
                  uint64x2_t v179 = v87 - 2;
                  float64x2_t v180 = (long long *)(v151 - 16);
                  uint64_t v181 = v178 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v182 = *v180;
                    *(v179 - 1) = *(v180 - 1);
                    *uint64x2_t v179 = v182;
                    v179 -= 2;
                    v180 -= 2;
                    v181 -= 4;
                  }
                  while (v181);
                  int v155 = &v87[-(v178 & 0x3FFFFFFFFFFFFFFCLL)];
                  v151 -= 8 * (v178 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v178 == (v178 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_255;
                  }
                }
              }
              do
              {
                uint64_t v183 = *(void *)(v151 - 8);
                v151 -= 8;
                *--int v155 = v183;
              }
              while (v151 != v175);
LABEL_255:
              uint64_t v151 = *(void *)(v75 + 32);
              goto LABEL_256;
            }
            uint64_t v62 = v259[19];
            uint64_t v63 = *(void *)(v62 + 8);
            if (v63 != *(void *)v62)
            {
              int v50 = *(void **)(v63 - 8);
              *(void *)(v62 + 8) = v63 - 8;
              uint64_t v64 = *(void **)(v62 + 40);
              unint64_t v65 = *(void *)(v62 + 48);
              if ((unint64_t)v64 >= v65)
              {
                uint64_t v66 = *(void *)(v62 + 32);
                uint64_t v67 = ((uint64_t)v64 - v66) >> 3;
                unint64_t v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 61) {
                  goto LABEL_339;
                }
                uint64_t v69 = v65 - v66;
                if (v69 >> 2 > v68) {
                  unint64_t v68 = v69 >> 2;
                }
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v68)
                {
                  uint64_t v70 = v2;
                  int8x16_t v71 = v50;
                  uint64_t v72 = 8 * v68;
                  uint64_t v73 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v62 + 56) + 16))(*(void *)(v62 + 56), 8 * v68, 8);
                  int8x16_t v74 = (void *)(v73 + 8 * v67);
                  unint64_t v68 = v73 + v72;
                  int v50 = v71;
                  if (v73) {
                    *int8x16_t v74 = v71;
                  }
                  uint64_t v2 = v70;
                }
                else
                {
                  int8x16_t v74 = (void *)(8 * v67);
                }
                uint64_t v133 = *(void *)(v62 + 32);
                uint64_t v132 = *(void *)(v62 + 40);
                uint64_t v134 = v132 - v133;
                if (v132 != v133)
                {
                  unint64_t v135 = v134 - 8;
                  if ((unint64_t)(v134 - 8) < 0x38)
                  {
                    uint64_t v136 = v74;
                  }
                  else
                  {
                    uint64_t v136 = v74;
                    if ((unint64_t)(v132 - (void)v74) >= 0x20)
                    {
                      uint64_t v137 = (v135 >> 3) + 1;
                      uint64_t v138 = v74 - 2;
                      uint64_t v139 = (long long *)(v132 - 16);
                      uint64_t v140 = v137 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v141 = *v139;
                        *(v138 - 1) = *(v139 - 1);
                        *uint64_t v138 = v141;
                        v138 -= 2;
                        v139 -= 2;
                        v140 -= 4;
                      }
                      while (v140);
                      uint64_t v136 = &v74[-(v137 & 0x3FFFFFFFFFFFFFFCLL)];
                      v132 -= 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v137 == (v137 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_239;
                      }
                    }
                  }
                  do
                  {
                    uint64_t v150 = *(void *)(v132 - 8);
                    v132 -= 8;
                    *--uint64_t v136 = v150;
                  }
                  while (v132 != v133);
                  goto LABEL_239;
                }
LABEL_233:
                uint64_t v136 = v74;
LABEL_240:
                uint64_t v95 = v74 + 1;
                *(void *)(v62 + 32) = v136;
                *(void *)(v62 + 40) = v74 + 1;
                uint64_t v174 = *(void *)(v62 + 48);
                *(void *)(v62 + 48) = v68;
                if (v132) {
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v62 + 56) + 40))(*(void *)(v62 + 56), v132, v174 - v132);
                }
LABEL_242:
                *(void *)(v62 + 40) = v95;
                *(void *)&v264[0] = v50;
                uint64_t v163 = *(void *)(v62 + 120);
                if (!v163) {
                  goto LABEL_338;
                }
                goto LABEL_259;
              }
LABEL_140:
              if (v64) {
                void *v64 = v50;
              }
              uint64_t v95 = v64 + 1;
              goto LABEL_242;
            }
            uint64_t v92 = *(void *)(v62 + 88);
            if (!v92) {
              goto LABEL_338;
            }
            uint64_t v93 = (*(uint64_t (**)(uint64_t))(*(void *)v92 + 48))(v92);
            int v50 = (void *)v93;
            uint64_t v64 = *(void **)(v62 + 40);
            unint64_t v94 = *(void *)(v62 + 48);
            if ((unint64_t)v64 < v94) {
              goto LABEL_140;
            }
            uint64_t v107 = *(void *)(v62 + 32);
            uint64_t v108 = ((uint64_t)v64 - v107) >> 3;
            unint64_t v68 = v108 + 1;
            if ((unint64_t)(v108 + 1) >> 61) {
              goto LABEL_339;
            }
            uint64_t v109 = v94 - v107;
            if (v109 >> 2 > v68) {
              unint64_t v68 = v109 >> 2;
            }
            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
            }
            if (v68)
            {
              uint64_t v110 = v2;
              unint64_t v111 = (void *)v93;
              uint64_t v112 = 8 * v68;
              uint64_t v113 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v62 + 56) + 16))(*(void *)(v62 + 56), 8 * v68, 8);
              int8x16_t v74 = (void *)(v113 + 8 * v108);
              unint64_t v68 = v113 + v112;
              int v50 = v111;
              if (v113) {
                *int8x16_t v74 = v111;
              }
              uint64_t v2 = v110;
            }
            else
            {
              int8x16_t v74 = (void *)(8 * v108);
            }
            uint64_t v164 = *(void *)(v62 + 32);
            uint64_t v132 = *(void *)(v62 + 40);
            uint64_t v165 = v132 - v164;
            if (v132 == v164) {
              goto LABEL_233;
            }
            unint64_t v166 = v165 - 8;
            if ((unint64_t)(v165 - 8) < 0x38)
            {
              uint64_t v136 = v74;
            }
            else
            {
              uint64_t v136 = v74;
              if ((unint64_t)(v132 - (void)v74) >= 0x20)
              {
                uint64_t v167 = (v166 >> 3) + 1;
                uint64_t v168 = v74 - 2;
                uint64_t v169 = (long long *)(v132 - 16);
                uint64_t v170 = v167 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v171 = *v169;
                  *(v168 - 1) = *(v169 - 1);
                  *uint64_t v168 = v171;
                  v168 -= 2;
                  v169 -= 2;
                  v170 -= 4;
                }
                while (v170);
                uint64_t v136 = &v74[-(v167 & 0x3FFFFFFFFFFFFFFCLL)];
                v132 -= 8 * (v167 & 0x3FFFFFFFFFFFFFFCLL);
                if (v167 == (v167 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_239;
                }
              }
            }
            do
            {
              uint64_t v173 = *(void *)(v132 - 8);
              v132 -= 8;
              *--uint64_t v136 = v173;
            }
            while (v132 != v164);
LABEL_239:
            uint64_t v132 = *(void *)(v62 + 32);
            goto LABEL_240;
          }
          uint64_t v48 = v259[20];
          uint64_t v49 = *(void *)(v48 + 8);
          if (v49 == *(void *)v48)
          {
            uint64_t v88 = *(void *)(v48 + 88);
            if (!v88) {
              goto LABEL_338;
            }
            uint64_t v89 = (*(uint64_t (**)(uint64_t))(*(void *)v88 + 48))(v88);
            int v50 = (void *)v89;
            int v51 = *(void **)(v48 + 40);
            unint64_t v90 = *(void *)(v48 + 48);
            if ((unint64_t)v51 >= v90)
            {
              uint64_t v96 = *(void *)(v48 + 32);
              uint64_t v97 = ((uint64_t)v51 - v96) >> 3;
              unint64_t v55 = v97 + 1;
              if ((unint64_t)(v97 + 1) >> 61) {
                goto LABEL_339;
              }
              uint64_t v98 = v90 - v96;
              if (v98 >> 2 > v55) {
                unint64_t v55 = v98 >> 2;
              }
              if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
              }
              if (v55)
              {
                uint64_t v99 = v2;
                int32x4_t v100 = (void *)v89;
                uint64_t v101 = 8 * v55;
                uint64_t v102 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v48 + 56) + 16))(*(void *)(v48 + 56), 8 * v55, 8);
                unint64_t v61 = (void *)(v102 + 8 * v97);
                unint64_t v55 = v102 + v101;
                int v50 = v100;
                if (v102) {
                  void *v61 = v100;
                }
                uint64_t v2 = v99;
              }
              else
              {
                unint64_t v61 = (void *)(8 * v97);
              }
              uint64_t v142 = *(void *)(v48 + 32);
              uint64_t v121 = *(void *)(v48 + 40);
              uint64_t v143 = v121 - v142;
              if (v121 == v142)
              {
                uint64_t v125 = v61;
                goto LABEL_220;
              }
              unint64_t v144 = v143 - 8;
              if ((unint64_t)(v143 - 8) < 0x38)
              {
                uint64_t v125 = v61;
              }
              else
              {
                uint64_t v125 = v61;
                if ((unint64_t)(v121 - (void)v61) >= 0x20)
                {
                  uint64_t v145 = (v144 >> 3) + 1;
                  uint64_t v146 = v61 - 2;
                  uint64_t v147 = (long long *)(v121 - 16);
                  uint64_t v148 = v145 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v149 = *v147;
                    *(v146 - 1) = *(v147 - 1);
                    *uint64_t v146 = v149;
                    v146 -= 2;
                    v147 -= 2;
                    v148 -= 4;
                  }
                  while (v148);
                  uint64_t v125 = &v61[-(v145 & 0x3FFFFFFFFFFFFFFCLL)];
                  v121 -= 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v145 == (v145 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_219:
                    uint64_t v121 = *(void *)(v48 + 32);
                    goto LABEL_220;
                  }
                }
              }
              do
              {
                uint64_t v161 = *(void *)(v121 - 8);
                v121 -= 8;
                *--uint64_t v125 = v161;
              }
              while (v121 != v142);
              goto LABEL_219;
            }
          }
          else
          {
            int v50 = *(void **)(v49 - 8);
            *(void *)(v48 + 8) = v49 - 8;
            int v51 = *(void **)(v48 + 40);
            unint64_t v52 = *(void *)(v48 + 48);
            if ((unint64_t)v51 >= v52)
            {
              uint64_t v53 = *(void *)(v48 + 32);
              uint64_t v54 = ((uint64_t)v51 - v53) >> 3;
              unint64_t v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 61) {
                goto LABEL_339;
              }
              uint64_t v56 = v2;
              uint64_t v57 = v52 - v53;
              if (v57 >> 2 > v55) {
                unint64_t v55 = v57 >> 2;
              }
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
              }
              if (v55)
              {
                unint64_t v58 = v50;
                uint64_t v59 = 8 * v55;
                uint64_t v60 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v48 + 56) + 16))(*(void *)(v48 + 56), 8 * v55, 8);
                unint64_t v61 = (void *)(v60 + 8 * v54);
                unint64_t v55 = v60 + v59;
                int v50 = v58;
                if (v60) {
                  void *v61 = v58;
                }
              }
              else
              {
                unint64_t v61 = (void *)(8 * v54);
              }
              uint64_t v122 = *(void *)(v48 + 32);
              uint64_t v121 = *(void *)(v48 + 40);
              uint64_t v123 = v121 - v122;
              if (v121 != v122)
              {
                unint64_t v124 = v123 - 8;
                if ((unint64_t)(v123 - 8) < 0x38)
                {
                  uint64_t v125 = v61;
                  uint64_t v2 = v56;
                }
                else
                {
                  uint64_t v125 = v61;
                  uint64_t v2 = v56;
                  if ((unint64_t)(v121 - (void)v61) >= 0x20)
                  {
                    uint64_t v126 = (v124 >> 3) + 1;
                    uint64_t v127 = v61 - 2;
                    uint64_t v128 = (long long *)(v121 - 16);
                    uint64_t v129 = v126 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v130 = *v128;
                      *(v127 - 1) = *(v128 - 1);
                      *uint64_t v127 = v130;
                      v127 -= 2;
                      v128 -= 2;
                      v129 -= 4;
                    }
                    while (v129);
                    uint64_t v125 = &v61[-(v126 & 0x3FFFFFFFFFFFFFFCLL)];
                    v121 -= 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v126 == (v126 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_219;
                    }
                  }
                }
                do
                {
                  uint64_t v131 = *(void *)(v121 - 8);
                  v121 -= 8;
                  *--uint64_t v125 = v131;
                }
                while (v121 != v122);
                goto LABEL_219;
              }
              uint64_t v125 = v61;
              uint64_t v2 = v56;
LABEL_220:
              int v91 = v61 + 1;
              *(void *)(v48 + 32) = v125;
              *(void *)(v48 + 40) = v61 + 1;
              uint64_t v162 = *(void *)(v48 + 48);
              *(void *)(v48 + 48) = v55;
              if (v121) {
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v48 + 56) + 40))(*(void *)(v48 + 56), v121, v162 - v121);
              }
              goto LABEL_222;
            }
          }
          if (v51) {
            *int v51 = v50;
          }
          int v91 = v51 + 1;
LABEL_222:
          *(void *)(v48 + 40) = v91;
          *(void *)&v264[0] = v50;
          uint64_t v163 = *(void *)(v48 + 120);
          if (!v163) {
            goto LABEL_338;
          }
LABEL_259:
          (*(void (**)(uint64_t, _OWORD *))(*(void *)v163 + 48))(v163, v264);
LABEL_260:
          uint64_t v185 = v47 + 16;
          uint64_t v186 = *(void **)(*(void *)(v40 + 8) + 224);
          __n128 v187 = 0uLL;
          uint64_t v260 = v50;
          switch(v46)
          {
            case 1:
            case 8:
              uint64_t v188 = v186[9];
              goto LABEL_265;
            case 2:
            case 9:
              uint64_t v189 = v186[10];
              goto LABEL_269;
            case 3:
            case 7:
              md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayFillShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v264, v186[11], (char *)&v263);
              goto LABEL_270;
            case 4:
              uint64_t v189 = v186[12];
              goto LABEL_269;
            case 5:
              uint64_t v188 = v186[13];
LABEL_265:
              md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::AlphaPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayAlphaShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v264, v188, (char *)&v263);
              goto LABEL_270;
            case 6:
              uint64_t v189 = v186[14];
              goto LABEL_269;
            case 10:
              goto LABEL_272;
            default:
              uint64_t v189 = v186[8];
LABEL_269:
              md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayAlphaFillShader>>::pipelineStateForFunctionConstants((std::__shared_weak_count **)v264, v189, (char *)&v263);
LABEL_270:
              __n128 v187 = (__n128)v264[0];
              unint64_t v190 = *(void *)&v264[0];
              if (*(void *)&v264[0] && **(void **)(*(void *)&v264[0] + 40) == v50[1])
              {
                uint64_t v193 = v50[2];
                if (v193 && v193 != *(void *)&v264[0])
                {
                  __n128 v256 = (__n128)v264[0];
                  ggl::PipelineSetup::resetData((uint64_t)v50);
                  __n128 v187 = v256;
                  unint64_t v190 = v256.n128_u64[0];
                }
                if (v187.n128_u64[1]) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v187.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v194 = v50;
                uint64_t v192 = (std::__shared_weak_count *)v50[3];
                v194[2] = v190;
                v194[3] = v187.n128_u64[1];
                if (!v192)
                {
LABEL_281:
                  unint64_t v195 = (std::__shared_weak_count *)v187.n128_u64[1];
                  if (!v187.n128_u64[1]) {
                    goto LABEL_285;
                  }
                  goto LABEL_282;
                }
              }
              else
              {
LABEL_272:
                uint64_t v191 = v50;
                uint64_t v192 = (std::__shared_weak_count *)v50[3];
                v191[2] = 0;
                v191[3] = 0;
                if (!v192) {
                  goto LABEL_281;
                }
              }
              if (atomic_fetch_add(&v192->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                goto LABEL_281;
              }
              __n128 v257 = v187;
              ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
              std::__shared_weak_count::__release_weak(v192);
              __n128 v187 = v257;
              unint64_t v195 = (std::__shared_weak_count *)v257.n128_u64[1];
              if (!v257.n128_u64[1]) {
                goto LABEL_285;
              }
LABEL_282:
              if (!atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, __n128))v195->__on_zero_shared)(v195, v187);
                std::__shared_weak_count::__release_weak(v195);
              }
LABEL_285:
              uint64_t v196 = v260;
              *(void *)v260[12] = *(void *)(v259[32] + 16);
              if (v260)
              {
                uint64_t v197 = *(void *)(v40 + 1472);
                if (v197)
                {
                  os_unfair_lock_lock((os_unfair_lock_t)(v197 + 196));
                  os_unfair_lock_unlock((os_unfair_lock_t)(v197 + 196));
                  uint64_t v199 = *(void *)(v197 + 168);
                  uint64_t v198 = *(void *)(v197 + 176);
                  uint64_t v200 = *(void *)(v40 + 1472);
                  os_unfair_lock_lock((os_unfair_lock_t)(v200 + 196));
                  os_unfair_lock_unlock((os_unfair_lock_t)(v200 + 196));
                  uint64_t v201 = *(void *)(v200 + 168);
                  uint64_t v202 = *(void *)(v200 + 176);
                  if (v201 == v202)
                  {
LABEL_290:
                    int v203 = 0;
                  }
                  else
                  {
                    while (*(float *)(v201 + 12) >= 1.0)
                    {
                      v201 += 20;
                      if (v201 == v202) {
                        goto LABEL_290;
                      }
                    }
                    int v203 = 1;
                  }
                  __n128 v204 = (std::__shared_weak_count *)operator new(0xE8uLL);
                  v204->__shared_owners_ = 0;
                  p_unint64_t shared_owners = &v204->__shared_owners_;
                  v204->__shared_weak_owners_ = 0;
                  v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586BF8;
                  uint64_t v205 = ggl::BufferData::BufferData((uint64_t)&v204[1], qword_1E954E180, 2, 1, 6, 1);
                  v204[9].__shared_owners_ = (uint64_t)ggl::GradientPolylineOverlayRibbon::GradientInfo::reflection(void)::reflection;
                  uint64_t v253 = v205;
                  v204[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E138;
                  unint64_t shared_owners = v204[1].__shared_owners_;
                  uint64_t v258 = v204;
                  uint64_t v255 = v185;
                  if (shared_owners) {
                    __n128 v207 = (int *)v204[4].__vftable;
                  }
                  else {
                    __n128 v207 = 0;
                  }
                  uint64_t v208 = 0;
                  *__n128 v207 = v203;
                  v207[1] = -858993459 * ((v198 - v199) >> 2);
                  uint64_t v209 = 4;
                  for (uint64_t i = 68; ; ++i)
                  {
                    uint64_t v211 = *(void *)(v261 + 1472);
                    os_unfair_lock_lock((os_unfair_lock_t)(v211 + 196));
                    os_unfair_lock_unlock((os_unfair_lock_t)(v211 + 196));
                    unint64_t v212 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v211 + 176) - *(void *)(v211 + 168)) >> 2);
                    uint64_t v213 = *(void *)(v261 + 1472);
                    os_unfair_lock_lock((os_unfair_lock_t)(v213 + 196));
                    os_unfair_lock_unlock((os_unfair_lock_t)(v213 + 196));
                    uint64_t v214 = *(void *)(v213 + 168);
                    unint64_t v215 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v213 + 176) - v214) >> 2);
                    if (i - 68 >= v212) {
                      break;
                    }
                    if (v215 <= i - 68) {
                      abort();
                    }
                    __n128 v216 = (int *)(v214 + v208);
                    __n128 v217 = &v207[v209];
                    int *v217 = *v216;
                    v217[1] = v216[1];
                    v217[2] = v216[2];
                    v217[3] = v216[3];
                    v207[i] = v216[4];
                    v208 += 20;
                    v209 += 4;
                  }
                  uint64_t v2 = v252;
                  if (v215 <= 0xF) {
                    memset_pattern16(&v207[v215 + 68], &unk_1A28FFC70, 64 - 4 * v215);
                  }
                  uint64_t v196 = v260;
                  uint64_t v40 = v261;
                  uint64_t v185 = v255;
                  if (shared_owners)
                  {
                    unint64_t shared_weak_owners = v258[3].__shared_weak_owners_;
                    if (shared_weak_owners <= shared_owners) {
                      unint64_t shared_weak_owners = shared_owners;
                    }
                    v258[3].__shared_owners_ = 0;
                    v258[3].__shared_weak_owners_ = shared_weak_owners;
                  }
                  switch((char)v46)
                  {
                    case 0:
                      uint64_t v244 = *(void *)(v261 + 1472);
                      uint64_t v245 = v260[8];
                      *(void *)(v245 + 40) = 0;
                      uint64_t v221 = *(void *)(v244 + 8);
                      *(void *)(v245 + 32) = v221;
                      uint64_t v222 = v260[20];
                      uint64_t v223 = *(void *)(v244 + 16);
                      if (v223) {
                        goto LABEL_307;
                      }
                      goto LABEL_308;
                    case 1:
                      uint64_t v246 = *(void *)(v261 + 1472);
                      uint64_t v247 = v260[8];
                      *(void *)(v247 + 40) = 0;
                      uint64_t v221 = *(void *)(v246 + 24);
                      *(void *)(v247 + 32) = v221;
                      uint64_t v222 = v260[20];
                      uint64_t v223 = *(void *)(v246 + 32);
                      if (!v223) {
                        goto LABEL_308;
                      }
                      goto LABEL_307;
                    case 2:
                    case 3:
                    case 9:
                      uint64_t v219 = *(void *)(v261 + 1472);
                      uint64_t v220 = v260[8];
                      *(void *)(v220 + 40) = 0;
                      uint64_t v221 = *(void *)(v219 + 40);
                      *(void *)(v220 + 32) = v221;
                      uint64_t v222 = v260[20];
                      uint64_t v223 = *(void *)(v219 + 48);
                      if (v223) {
                        goto LABEL_307;
                      }
                      goto LABEL_308;
                    case 4:
                      uint64_t v240 = *(void *)(v261 + 1472);
                      uint64_t v241 = v260[8];
                      *(void *)(v241 + 40) = 0;
                      uint64_t v221 = *(void *)(v240 + 56);
                      *(void *)(v241 + 32) = v221;
                      uint64_t v222 = v260[20];
                      uint64_t v223 = *(void *)(v240 + 64);
                      if (!v223) {
                        goto LABEL_308;
                      }
                      goto LABEL_307;
                    case 5:
                      uint64_t v242 = *(void *)(v261 + 1472);
                      uint64_t v243 = v260[8];
                      *(void *)(v243 + 40) = 0;
                      uint64_t v221 = *(void *)(v242 + 72);
                      *(void *)(v243 + 32) = v221;
                      uint64_t v222 = v260[20];
                      uint64_t v223 = *(void *)(v242 + 80);
                      if (!v223) {
                        goto LABEL_308;
                      }
                      goto LABEL_307;
                    case 6:
                    case 7:
                      uint64_t v238 = *(void *)(v261 + 1472);
                      uint64_t v239 = v260[8];
                      *(void *)(v239 + 40) = 0;
                      uint64_t v221 = *(void *)(v238 + 88);
                      *(void *)(v239 + 32) = v221;
                      uint64_t v222 = v260[20];
                      uint64_t v223 = *(void *)(v238 + 96);
                      if (!v223) {
                        goto LABEL_308;
                      }
                      goto LABEL_307;
                    case 8:
                      uint64_t v248 = *(void *)(v261 + 1472);
                      uint64_t v249 = v260[8];
                      *(void *)(v249 + 40) = 0;
                      uint64_t v221 = *(void *)(v248 + 104);
                      *(void *)(v249 + 32) = v221;
                      uint64_t v222 = v260[20];
                      uint64_t v223 = *(void *)(v248 + 112);
                      if (!v223) {
                        goto LABEL_308;
                      }
LABEL_307:
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v223 + 8), 1uLL, memory_order_relaxed);
LABEL_308:
                      long long v224 = *(std::__shared_weak_count **)(v222 + 40);
                      *(void *)(v222 + 32) = v221;
                      *(void *)(v222 + 40) = v223;
                      if (v224 && !atomic_fetch_add(&v224->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                        std::__shared_weak_count::__release_weak(v224);
                      }
                      uint64_t v225 = (void *)v260[8];
                      v225[1] = 0;
                      uint64_t v226 = *(void *)(v261 + 1488);
                      *uint64_t v225 = v226;
                      long long v227 = (void *)v260[20];
                      uint64_t v228 = *(void *)(v261 + 1496);
                      if (v228) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v228 + 8), 1uLL, memory_order_relaxed);
                      }
                      uint64_t v229 = (std::__shared_weak_count *)v227[1];
                      *long long v227 = v226;
                      v227[1] = v228;
                      if (v229 && !atomic_fetch_add(&v229->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                        std::__shared_weak_count::__release_weak(v229);
                      }
                      uint64_t v230 = v260[8];
                      *(void *)(v230 + 24) = 0;
                      uint64_t v231 = *(void *)(v261 + 1504);
                      *(void *)(v230 + 16) = v231;
                      uint64_t v232 = v260[20];
                      uint64_t v233 = *(void *)(v261 + 1512);
                      if (v233) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v233 + 8), 1uLL, memory_order_relaxed);
                      }
                      uint64_t v234 = *(std::__shared_weak_count **)(v232 + 24);
                      *(void *)(v232 + 16) = v231;
                      *(void *)(v232 + 24) = v233;
                      if (v234 && !atomic_fetch_add(&v234->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                        std::__shared_weak_count::__release_weak(v234);
                      }
                      uint64_t v235 = v260[8];
                      *(void *)(v235 + 48) = v253;
                      *(void *)(v235 + 56) = 0;
                      uint64_t v236 = v260[20];
                      atomic_fetch_add_explicit(&v258->__shared_owners_, 1uLL, memory_order_relaxed);
                      size_t v237 = *(std::__shared_weak_count **)(v236 + 56);
                      *(void *)(v236 + 48) = v253;
                      *(void *)(v236 + 56) = v258;
                      if (v237 && !atomic_fetch_add(&v237->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                        std::__shared_weak_count::__release_weak(v237);
                      }
                      break;
                    default:
                      break;
                  }
                  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                    std::__shared_weak_count::__release_weak(v258);
                  }
                }
              }
              *(void *)(v185 + 32) = v196;
              break;
          }
LABEL_97:
          ++v46;
        }
        while (v46 != 10);
      }
LABEL_76:
      uint64_t v7 = v251 + 1;
      if (v251 + 1 == v250) {
        return;
      }
    }
    md::PolylineOverlayStyle::updateFromStyleQuery<md::Stroke1StyleProperties>((uint64_t)v36, v2, (uint64_t)v264);
    if (!*v36) {
      goto LABEL_84;
    }
LABEL_83:
    md::PolylineOverlayStyle::writePasses((uint64_t)v36, v2, (uint64_t)v264);
    goto LABEL_84;
  }
}

void sub_1A224FF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (v21)
  {
    unint64_t shared_weak_owners = a21[3].__shared_weak_owners_;
    if (shared_weak_owners <= v21) {
      unint64_t shared_weak_owners = v21;
    }
    a21[3].__shared_owners_ = 0;
    a21[3].__shared_weak_owners_ = shared_weak_owners;
  }
  if (!atomic_fetch_add(&a21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
    std::__shared_weak_count::__release_weak(a21);
  }
  _Unwind_Resume(exception_object);
}

void ggl::ConstantDataTyped<ggl::GradientPolylineOverlayRibbon::GradientInfo>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::GradientPolylineOverlayRibbon::GradientInfo>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GradientPolylineOverlayRibbon::GradientInfo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GradientPolylineOverlayRibbon::GradientInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586BF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GradientPolylineOverlayRibbon::GradientInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586BF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayAlphaFillShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v4 = a3[1];
  unsigned __int8 v5 = a3[2];
  int8x16_t v6 = (int8x16_t)*a3;
  *(__int32 *)((char *)v6.i32 + 1) = v4;
  v6.i16[1] = v5;
  unsigned __int8 v7 = a3[3];
  *(__int32 *)((char *)&v6.i32[2] + 1) = v7;
  int8x16_t v8 = vceqzq_s8(v6);
  int16x8_t v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  int32x4_t v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  int8x16_t v12 = v11;
  int16x8_t v13 = vmovl_high_s8(v8);
  int32x4_t v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  int8x16_t v15 = v11;
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  int8x16_t v17 = v11;
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  int8x16_t v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  int8x16_t v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  int8x16_t v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  int8x16_t v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  unint64_t v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v22), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v20), vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v17), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC980, v12), vbicq_s8((int8x16_t)xmmword_1A28FC990, v15)))));
  unint64_t v24 = v23;
  uint64_t v26 = (uint64_t **)(a2 + 104);
  double v25 = *(void **)(a2 + 104);
  if (!v25) {
    goto LABEL_12;
  }
  uint64_t v27 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v28 = v25[4];
    BOOL v29 = v28 >= v23;
    if (v28 >= v23) {
      int v30 = v25;
    }
    else {
      int v30 = v25 + 1;
    }
    if (v29) {
      uint64_t v27 = (uint64_t **)v25;
    }
    double v25 = (void *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    uint64_t v114 = v27[6];
    a1[1] = (std::__shared_weak_count *)v114;
    if (v114) {
      atomic_fetch_add_explicit(v114 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    char v115 = *a3;
    uint64_t v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588C20;
    BOOL v32 = v31 + 1;
    long long v117 = *(_OWORD *)(a2 + 16);
    long long v118 = *(_OWORD *)(a2 + 32);
    {
      {
        {
          {
            ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1EB319E98 = 1;
        }
        ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
        *(void *)algn_1EB319808 = &ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaFillPipelineDeviceStructs(void)::ref;
        qword_1EB319810 = 0;
        {
          ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1EB319890 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1EB319898 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
          unk_1EB3198A0 = ggl::GradientPolylineOverlayRibbon::GradientInfo::reflection(void)::reflection;
        }
        qword_1EB319818 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaFillPipelineConstantStructs(void)::ref;
        unk_1EB319820 = xmmword_1A28FE1F0;
      }
      ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup::typedReflection(void)::ref;
      {
        ggl::GradientPolylineOverlayAlphaFillShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
        {
          qword_1EB32B040 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
          unk_1EB32B048 = ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32B050 = 1;
          unk_1EB32B058 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32B060 = 3;
          unk_1EB32B068 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32B070 = 0;
          unk_1EB32B078 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref = 503820842;
          qword_1EB32B080 = 0;
          unk_1EB32B088 = &ggl::gradientPolylineOverlayAlphaFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32B098 = 0;
          unk_1EB32B0A0 = 0;
          qword_1EB32B090 = 0;
        }
        qword_1EB323870 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB323878 = 503820842;
        {
          ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref = 0x10A41F7BCLL;
          qword_1EB32B0B8 = (uint64_t)"GradientPolylineOverlayAlphaFillShader";
          unk_1EB32B0C0 = 0;
          qword_1EB32B0C8 = 0;
          unk_1EB32B0D0 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32B0D8 = 2;
          unk_1EB32B0E0 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32B0E8 = 0;
          unk_1EB32B0F0 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32B0F8 = 1;
          unk_1EB32B100 = &ggl::gradientPolylineOverlayAlphaFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32B110 = 0;
          unk_1EB32B118 = 0;
          qword_1EB32B108 = 1;
        }
        qword_1EB323880 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB323888 = 172095420;
        qword_1EB323890 = (uint64_t)ggl::gradientPolylineOverlayAlphaFillShaderShaderConstants(void)::ref;
        unk_1EB323898 = 4;
        qword_1EB3238A0 = (uint64_t)ggl::gradientPolylineOverlayAlphaFillShaderShaderTextures(void)::ref;
        unk_1EB3238A8 = 1;
        qword_1EB3238B0 = (uint64_t)&ggl::gradientPolylineOverlayAlphaFillShaderShaderSamplers(void)::ref;
        unk_1EB3238B8 = 1;
      }
      qword_1E958E0D0 = (uint64_t)&ggl::GradientPolylineOverlayAlphaFillShader::typedReflection(void)::ref;
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9592D90 = 0;
        qword_1E9592D98 = (uint64_t)"";
        dword_1E9592DA0 = 0;
        qword_1E9592DA8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeBinding_0(void)::attr;
        unk_1E9592DB0 = 5;
      }
      qword_1E958E0D8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineAttributeStructBinding(void)::attr;
      unk_1E958E0E0 = 1;
      qword_1E958E0E8 = 0;
      unk_1E958E0F0 = 1;
      qword_1E958E0F8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineDeviceStructBinding(void)::ref;
      unk_1E958E100 = 0;
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9592DD0 = 0;
        qword_1E9592DD8 = (uint64_t)"view";
        dword_1E9592DE0 = 3;
        qword_1E9592DE8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1E9592DF0 = xmmword_1A28FCEB0;
        qword_1E9592E00 = 1;
        unk_1E9592E08 = "transform";
        dword_1E9592E10 = 3;
        qword_1E9592E18 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantTransformBinding(void)::reflection;
        unk_1E9592E20 = xmmword_1A28FCF70;
        qword_1E9592E30 = 2;
        unk_1E9592E38 = "style";
        dword_1E9592E40 = 3;
        qword_1E9592E48 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1E9592E50 = xmmword_1A28FE700;
        qword_1E9592E60 = 3;
        unk_1E9592E68 = "gradientInfo";
        dword_1E9592E70 = 3;
        qword_1E9592E78 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantGradientInfoBinding(void)::reflection;
        unk_1E9592E80 = 4;
      }
      qword_1E958E108 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaFillPipelineConstantStructBinding(void)::ref;
      unk_1E958E110 = 4;
    }
    uint64_t v33 = *(std::__shared_weak_count_vtbl **)a2;
    BOOL v34 = *(std::__shared_weak_count **)(a2 + 8);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)uint64_t v119 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v119[12] = *(_OWORD *)(a2 + 60);
    long long v35 = *(_OWORD *)(a2 + 76);
    char v36 = *(unsigned char *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v33;
    v31[3].__shared_owners_ = (uint64_t)v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v117;
    *(_OWORD *)&v31[12].__shared_owners_ = v118;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v119[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v119;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v35;
    BYTE4(v31[5].__shared_owners_) = v36;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v115;
    BYTE1(v31[13].__shared_weak_owners_) = v4;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    int8x16_t v37 = *(int8x16_t *)&v31[14].__shared_owners_;
    int8x16_t v38 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    int16x8_t v39 = vmovl_high_s8(v38);
    int32x4_t v40 = vmovl_s16(*(int16x4_t *)v39.i8);
    v41.i64[0] = v40.u32[0];
    v41.i64[1] = v40.u32[1];
    int8x16_t v42 = v41;
    int16x8_t v43 = vmovl_s8(*(int8x8_t *)v38.i8);
    int32x4_t v44 = vmovl_s16(*(int16x4_t *)v43.i8);
    v41.i64[0] = v44.u32[0];
    v41.i64[1] = v44.u32[1];
    int8x16_t v45 = v41;
    int32x4_t v46 = vmovl_high_s16(v39);
    v41.i64[0] = v46.u32[0];
    v41.i64[1] = v46.u32[1];
    int8x16_t v47 = v41;
    int32x4_t v48 = vmovl_high_s16(v43);
    v41.i64[0] = v48.u32[0];
    v41.i64[1] = v48.u32[1];
    int8x16_t v49 = v41;
    v41.i64[0] = v40.u32[2];
    v41.i64[1] = v40.u32[3];
    int8x16_t v50 = v41;
    v41.i64[0] = v44.u32[2];
    v41.i64[1] = v44.u32[3];
    int8x16_t v51 = v41;
    v41.i64[0] = v46.u32[2];
    v41.i64[1] = v46.u32[3];
    int8x16_t v52 = v41;
    v41.i64[0] = v48.u32[2];
    v41.i64[1] = v48.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5601A8;
    int8x16_t v53 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v41);
    int8x16_t v54 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v52);
    int8x16_t v55 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v51);
    int8x16_t v56 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v47);
    int8x16_t v57 = vceqzq_s8(v37);
    int16x8_t v58 = vmovl_high_s8(v57);
    int32x4_t v59 = vmovl_s16(*(int16x4_t *)v58.i8);
    v41.i64[0] = v59.u32[0];
    v41.i64[1] = v59.u32[1];
    int8x16_t v60 = v41;
    int16x8_t v61 = vmovl_s8(*(int8x8_t *)v57.i8);
    int32x4_t v62 = vmovl_s16(*(int16x4_t *)v61.i8);
    v41.i64[0] = v62.u32[0];
    v41.i64[1] = v62.u32[1];
    int8x16_t v63 = v41;
    int32x4_t v64 = vmovl_high_s16(v58);
    v41.i64[0] = v64.u32[0];
    v41.i64[1] = v64.u32[1];
    int8x16_t v65 = v41;
    int32x4_t v66 = vmovl_high_s16(v61);
    v41.i64[0] = v66.u32[0];
    v41.i64[1] = v66.u32[1];
    int8x16_t v67 = v41;
    v41.i64[0] = v59.u32[2];
    v41.i64[1] = v59.u32[3];
    int8x16_t v68 = v41;
    v41.i64[0] = v62.u32[2];
    v41.i64[1] = v62.u32[3];
    int8x16_t v69 = v41;
    v41.i64[0] = v64.u32[2];
    v41.i64[1] = v64.u32[3];
    int8x16_t v70 = v41;
    v41.i64[0] = v66.u32[2];
    v41.i64[1] = v66.u32[3];
    int8x16_t v71 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v70);
    int8x16_t v72 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v60), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v42));
    int8x16_t v73 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v63), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v45));
    int8x16_t v74 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v65), v56);
    int8x16_t v75 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v67), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v49));
    int8x16_t v76 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v68), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v50));
    int8x16_t v77 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v69), v55);
    int8x16_t v78 = vorrq_s8(v71, v54);
    int8x16_t v79 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v41), v53);
    int8x16_t v80 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    int16x8_t v81 = vmovl_s8(*(int8x8_t *)v80.i8);
    int32x4_t v82 = vmovl_high_s16(v81);
    v41.i64[0] = v82.i32[2];
    v41.i64[1] = v82.i32[3];
    int8x16_t v83 = v41;
    int16x8_t v84 = vmovl_high_s8(v80);
    int32x4_t v85 = vmovl_high_s16(v84);
    v41.i64[0] = v85.i32[2];
    v41.i64[1] = v85.i32[3];
    int8x16_t v86 = v41;
    int32x4_t v87 = vmovl_s16(*(int16x4_t *)v81.i8);
    v41.i64[0] = v87.i32[2];
    v41.i64[1] = v87.i32[3];
    int8x16_t v88 = v41;
    int32x4_t v89 = vmovl_s16(*(int16x4_t *)v84.i8);
    v41.i64[0] = v89.i32[2];
    v41.i64[1] = v89.i32[3];
    int8x16_t v90 = v41;
    v41.i64[0] = v82.i32[0];
    v41.i64[1] = v82.i32[1];
    int8x16_t v91 = v41;
    v41.i64[0] = v85.i32[0];
    v41.i64[1] = v85.i32[1];
    int8x16_t v92 = v41;
    v41.i64[0] = v87.i32[0];
    v41.i64[1] = v87.i32[1];
    int8x16_t v93 = v41;
    v41.i64[0] = v89.i32[0];
    v41.i64[1] = v89.i32[1];
    int8x16_t v94 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v41);
    int8x16_t v95 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    int16x8_t v96 = vmovl_high_s8(v95);
    int32x4_t v97 = vmovl_s16(*(int16x4_t *)v96.i8);
    v41.i64[0] = v97.i32[0];
    v41.i64[1] = v97.i32[1];
    int8x16_t v98 = v41;
    int16x8_t v99 = vmovl_s8(*(int8x8_t *)v95.i8);
    int32x4_t v100 = vmovl_s16(*(int16x4_t *)v99.i8);
    v41.i64[0] = v100.i32[0];
    v41.i64[1] = v100.i32[1];
    int8x16_t v101 = v41;
    int32x4_t v102 = vmovl_high_s16(v96);
    v41.i64[0] = v102.i32[0];
    v41.i64[1] = v102.i32[1];
    int8x16_t v103 = v41;
    int32x4_t v104 = vmovl_high_s16(v99);
    v41.i64[0] = v104.i32[0];
    v41.i64[1] = v104.i32[1];
    int8x16_t v105 = v41;
    v41.i64[0] = v97.i32[2];
    v41.i64[1] = v97.i32[3];
    int8x16_t v106 = v41;
    v41.i64[0] = v100.i32[2];
    v41.i64[1] = v100.i32[3];
    int8x16_t v107 = v41;
    v41.i64[0] = v102.i32[2];
    v41.i64[1] = v102.i32[3];
    int8x16_t v108 = v41;
    v41.i64[0] = v104.i32[2];
    v41.i64[1] = v104.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v101), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v93)), v73), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v98), v94), v72)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v105), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v91)), v75), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v103),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v92)),
                                                    v74))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v107), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v88)), v77), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v106), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v90)), v76)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v41), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v83)), v79), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v108),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v86)),
                                                    v78)))));
    LOBYTE(v31[13].__vftable) = 1;
    *a1 = v32;
    a1[1] = v31;
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v109 = *v26;
    uint64_t v110 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v110 = (uint64_t **)v109;
          unint64_t v111 = v109[4];
          if (v24 >= v111) {
            break;
          }
          uint64_t v109 = *v110;
          uint64_t v26 = v110;
          if (!*v110) {
            goto LABEL_27;
          }
        }
        if (v111 >= v24) {
          break;
        }
        uint64_t v109 = v110[1];
        if (!v109)
        {
          uint64_t v26 = v110 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_27:
      uint64_t v112 = (uint64_t *)operator new(0x38uLL);
      v112[4] = v24;
      v112[5] = (uint64_t)v32;
      v112[6] = (uint64_t)v31;
      *uint64_t v112 = 0;
      v112[1] = 0;
      v112[2] = (uint64_t)v110;
      *uint64_t v26 = v112;
      uint64_t v113 = **(void **)(a2 + 96);
      if (v113)
      {
        *(void *)(a2 + 96) = v113;
        uint64_t v112 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v112);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A2250E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v29);
  _Unwind_Resume(a1);
}

void md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::AlphaPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayAlphaShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v4 = a3[1];
  unsigned __int8 v5 = a3[2];
  int8x16_t v6 = (int8x16_t)*a3;
  *(__int32 *)((char *)v6.i32 + 1) = v4;
  v6.i16[1] = v5;
  unsigned __int8 v7 = a3[3];
  *(__int32 *)((char *)&v6.i32[2] + 1) = v7;
  int8x16_t v8 = vceqzq_s8(v6);
  int16x8_t v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  int32x4_t v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  int8x16_t v12 = v11;
  int16x8_t v13 = vmovl_high_s8(v8);
  int32x4_t v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  int8x16_t v15 = v11;
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  int8x16_t v17 = v11;
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  int8x16_t v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  int8x16_t v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  int8x16_t v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  int8x16_t v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  unint64_t v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v22), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v20), vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v17), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC980, v12), vbicq_s8((int8x16_t)xmmword_1A28FC990, v15)))));
  unint64_t v24 = v23;
  uint64_t v26 = (uint64_t **)(a2 + 104);
  double v25 = *(void **)(a2 + 104);
  if (!v25) {
    goto LABEL_12;
  }
  uint64_t v27 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v28 = v25[4];
    BOOL v29 = v28 >= v23;
    if (v28 >= v23) {
      int v30 = v25;
    }
    else {
      int v30 = v25 + 1;
    }
    if (v29) {
      uint64_t v27 = (uint64_t **)v25;
    }
    double v25 = (void *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    uint64_t v114 = v27[6];
    a1[1] = (std::__shared_weak_count *)v114;
    if (v114) {
      atomic_fetch_add_explicit(v114 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    char v115 = *a3;
    uint64_t v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588BE8;
    BOOL v32 = v31 + 1;
    long long v117 = *(_OWORD *)(a2 + 16);
    long long v118 = *(_OWORD *)(a2 + 32);
    {
      {
        {
          {
            ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1EB319E98 = 1;
        }
        ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
        *(void *)algn_1EB3197D8 = &ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaPipelineDeviceStructs(void)::ref;
        qword_1EB3197E0 = 0;
        {
          ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          *(void *)algn_1EB319868 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1EB319870 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
          unk_1EB319878 = ggl::GradientPolylineOverlayRibbon::GradientInfo::reflection(void)::reflection;
        }
        qword_1EB3197E8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineDataAlphaPipelineConstantStructs(void)::ref;
        *(_OWORD *)algn_1EB3197F0 = xmmword_1A28FE1F0;
      }
      ggl::GradientPolylineOverlayRibbon::AlphaPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup::typedReflection(void)::ref;
      {
        ggl::GradientPolylineOverlayAlphaShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayAlphaShader";
        {
          qword_1EB32ACA0 = (uint64_t)"GradientPolylineOverlayAlphaShader";
          unk_1EB32ACA8 = ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32ACB0 = 1;
          unk_1EB32ACB8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32ACC0 = 3;
          unk_1EB32ACC8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32ACD0 = 0;
          unk_1EB32ACD8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref = 1527713323;
          qword_1EB32ACE0 = 0;
          unk_1EB32ACE8 = &ggl::gradientPolylineOverlayAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32ACF8 = 0;
          unk_1EB32AD00 = 0;
          qword_1EB32ACF0 = 0;
        }
        qword_1EB323810 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB323818 = 1527713323;
        {
          ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref = 0x1D18D7C52;
          qword_1EB32AFC8 = (uint64_t)"GradientPolylineOverlayAlphaShader";
          unk_1EB32AFD0 = 0;
          qword_1EB32AFD8 = 0;
          unk_1EB32AFE0 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AFE8 = 2;
          unk_1EB32AFF0 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32AFF8 = 0;
          unk_1EB32B000 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32B008 = 1;
          unk_1EB32B010 = &ggl::gradientPolylineOverlayAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32B020 = 0;
          unk_1EB32B028 = 0;
          qword_1EB32B018 = 1;
        }
        qword_1EB323820 = (uint64_t)&ggl::gradientPolylineOverlayAlphaShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB323828 = -779256750;
        qword_1EB323830 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderConstants(void)::ref;
        unk_1EB323838 = 4;
        qword_1EB323840 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderTextures(void)::ref;
        unk_1EB323848 = 1;
        qword_1EB323850 = (uint64_t)ggl::gradientPolylineOverlayAlphaShaderShaderSamplers(void)::ref;
        unk_1EB323858 = 1;
      }
      qword_1E958E080 = (uint64_t)&ggl::GradientPolylineOverlayAlphaShader::typedReflection(void)::ref;
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeStructBinding(void)::attr = 0;
        *(void *)algn_1E9592C78 = 0;
        qword_1E9592C80 = (uint64_t)"";
        dword_1E9592C88 = 0;
        qword_1E9592C90 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeBinding_0(void)::attr;
        unk_1E9592C98 = 5;
      }
      qword_1E958E088 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineAttributeStructBinding(void)::attr;
      unk_1E958E090 = 1;
      qword_1E958E098 = 0;
      unk_1E958E0A0 = 1;
      qword_1E958E0A8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineDeviceStructBinding(void)::ref;
      unk_1E958E0B0 = 0;
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStructBinding(void)::ref = 0;
        *(void *)algn_1E9592CB8 = 0;
        qword_1E9592CC0 = (uint64_t)"view";
        dword_1E9592CC8 = 3;
        qword_1E9592CD0 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantViewBinding(void)::reflection;
        unk_1E9592CD8 = xmmword_1A28FCEB0;
        qword_1E9592CE8 = 1;
        unk_1E9592CF0 = "transform";
        dword_1E9592CF8 = 3;
        qword_1E9592D00 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantTransformBinding(void)::reflection;
        unk_1E9592D08 = xmmword_1A28FCF70;
        qword_1E9592D18 = 2;
        unk_1E9592D20 = "style";
        dword_1E9592D28 = 3;
        qword_1E9592D30 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStyleBinding(void)::reflection;
        unk_1E9592D38 = xmmword_1A28FE700;
        qword_1E9592D48 = 3;
        unk_1E9592D50 = "gradientInfo";
        dword_1E9592D58 = 3;
        qword_1E9592D60 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantGradientInfoBinding(void)::reflection;
        unk_1E9592D68 = 4;
      }
      qword_1E958E0B8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateAlphaPipelineConstantStructBinding(void)::ref;
      unk_1E958E0C0 = 4;
    }
    uint64_t v33 = *(std::__shared_weak_count_vtbl **)a2;
    BOOL v34 = *(std::__shared_weak_count **)(a2 + 8);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)uint64_t v119 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v119[12] = *(_OWORD *)(a2 + 60);
    long long v35 = *(_OWORD *)(a2 + 76);
    char v36 = *(unsigned char *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::GradientPolylineOverlayRibbon::AlphaPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v33;
    v31[3].__shared_owners_ = (uint64_t)v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v117;
    *(_OWORD *)&v31[12].__shared_owners_ = v118;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v119[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v119;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v35;
    BYTE4(v31[5].__shared_owners_) = v36;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v115;
    BYTE1(v31[13].__shared_weak_owners_) = v4;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    int8x16_t v37 = *(int8x16_t *)&v31[14].__shared_owners_;
    int8x16_t v38 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    int16x8_t v39 = vmovl_high_s8(v38);
    int32x4_t v40 = vmovl_s16(*(int16x4_t *)v39.i8);
    v41.i64[0] = v40.u32[0];
    v41.i64[1] = v40.u32[1];
    int8x16_t v42 = v41;
    int16x8_t v43 = vmovl_s8(*(int8x8_t *)v38.i8);
    int32x4_t v44 = vmovl_s16(*(int16x4_t *)v43.i8);
    v41.i64[0] = v44.u32[0];
    v41.i64[1] = v44.u32[1];
    int8x16_t v45 = v41;
    int32x4_t v46 = vmovl_high_s16(v39);
    v41.i64[0] = v46.u32[0];
    v41.i64[1] = v46.u32[1];
    int8x16_t v47 = v41;
    int32x4_t v48 = vmovl_high_s16(v43);
    v41.i64[0] = v48.u32[0];
    v41.i64[1] = v48.u32[1];
    int8x16_t v49 = v41;
    v41.i64[0] = v40.u32[2];
    v41.i64[1] = v40.u32[3];
    int8x16_t v50 = v41;
    v41.i64[0] = v44.u32[2];
    v41.i64[1] = v44.u32[3];
    int8x16_t v51 = v41;
    v41.i64[0] = v46.u32[2];
    v41.i64[1] = v46.u32[3];
    int8x16_t v52 = v41;
    v41.i64[0] = v48.u32[2];
    v41.i64[1] = v48.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF560158;
    int8x16_t v53 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v41);
    int8x16_t v54 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v52);
    int8x16_t v55 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v51);
    int8x16_t v56 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v47);
    int8x16_t v57 = vceqzq_s8(v37);
    int16x8_t v58 = vmovl_high_s8(v57);
    int32x4_t v59 = vmovl_s16(*(int16x4_t *)v58.i8);
    v41.i64[0] = v59.u32[0];
    v41.i64[1] = v59.u32[1];
    int8x16_t v60 = v41;
    int16x8_t v61 = vmovl_s8(*(int8x8_t *)v57.i8);
    int32x4_t v62 = vmovl_s16(*(int16x4_t *)v61.i8);
    v41.i64[0] = v62.u32[0];
    v41.i64[1] = v62.u32[1];
    int8x16_t v63 = v41;
    int32x4_t v64 = vmovl_high_s16(v58);
    v41.i64[0] = v64.u32[0];
    v41.i64[1] = v64.u32[1];
    int8x16_t v65 = v41;
    int32x4_t v66 = vmovl_high_s16(v61);
    v41.i64[0] = v66.u32[0];
    v41.i64[1] = v66.u32[1];
    int8x16_t v67 = v41;
    v41.i64[0] = v59.u32[2];
    v41.i64[1] = v59.u32[3];
    int8x16_t v68 = v41;
    v41.i64[0] = v62.u32[2];
    v41.i64[1] = v62.u32[3];
    int8x16_t v69 = v41;
    v41.i64[0] = v64.u32[2];
    v41.i64[1] = v64.u32[3];
    int8x16_t v70 = v41;
    v41.i64[0] = v66.u32[2];
    v41.i64[1] = v66.u32[3];
    int8x16_t v71 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v70);
    int8x16_t v72 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v60), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v42));
    int8x16_t v73 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v63), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v45));
    int8x16_t v74 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v65), v56);
    int8x16_t v75 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v67), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v49));
    int8x16_t v76 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v68), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v50));
    int8x16_t v77 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v69), v55);
    int8x16_t v78 = vorrq_s8(v71, v54);
    int8x16_t v79 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v41), v53);
    int8x16_t v80 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    int16x8_t v81 = vmovl_s8(*(int8x8_t *)v80.i8);
    int32x4_t v82 = vmovl_high_s16(v81);
    v41.i64[0] = v82.i32[2];
    v41.i64[1] = v82.i32[3];
    int8x16_t v83 = v41;
    int16x8_t v84 = vmovl_high_s8(v80);
    int32x4_t v85 = vmovl_high_s16(v84);
    v41.i64[0] = v85.i32[2];
    v41.i64[1] = v85.i32[3];
    int8x16_t v86 = v41;
    int32x4_t v87 = vmovl_s16(*(int16x4_t *)v81.i8);
    v41.i64[0] = v87.i32[2];
    v41.i64[1] = v87.i32[3];
    int8x16_t v88 = v41;
    int32x4_t v89 = vmovl_s16(*(int16x4_t *)v84.i8);
    v41.i64[0] = v89.i32[2];
    v41.i64[1] = v89.i32[3];
    int8x16_t v90 = v41;
    v41.i64[0] = v82.i32[0];
    v41.i64[1] = v82.i32[1];
    int8x16_t v91 = v41;
    v41.i64[0] = v85.i32[0];
    v41.i64[1] = v85.i32[1];
    int8x16_t v92 = v41;
    v41.i64[0] = v87.i32[0];
    v41.i64[1] = v87.i32[1];
    int8x16_t v93 = v41;
    v41.i64[0] = v89.i32[0];
    v41.i64[1] = v89.i32[1];
    int8x16_t v94 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v41);
    int8x16_t v95 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    int16x8_t v96 = vmovl_high_s8(v95);
    int32x4_t v97 = vmovl_s16(*(int16x4_t *)v96.i8);
    v41.i64[0] = v97.i32[0];
    v41.i64[1] = v97.i32[1];
    int8x16_t v98 = v41;
    int16x8_t v99 = vmovl_s8(*(int8x8_t *)v95.i8);
    int32x4_t v100 = vmovl_s16(*(int16x4_t *)v99.i8);
    v41.i64[0] = v100.i32[0];
    v41.i64[1] = v100.i32[1];
    int8x16_t v101 = v41;
    int32x4_t v102 = vmovl_high_s16(v96);
    v41.i64[0] = v102.i32[0];
    v41.i64[1] = v102.i32[1];
    int8x16_t v103 = v41;
    int32x4_t v104 = vmovl_high_s16(v99);
    v41.i64[0] = v104.i32[0];
    v41.i64[1] = v104.i32[1];
    int8x16_t v105 = v41;
    v41.i64[0] = v97.i32[2];
    v41.i64[1] = v97.i32[3];
    int8x16_t v106 = v41;
    v41.i64[0] = v100.i32[2];
    v41.i64[1] = v100.i32[3];
    int8x16_t v107 = v41;
    v41.i64[0] = v102.i32[2];
    v41.i64[1] = v102.i32[3];
    int8x16_t v108 = v41;
    v41.i64[0] = v104.i32[2];
    v41.i64[1] = v104.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v101), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v93)), v73), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v98), v94), v72)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v105), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v91)), v75), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v103),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v92)),
                                                    v74))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v107), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v88)), v77), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v106), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v90)), v76)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v41), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v83)), v79), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v108),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v86)),
                                                    v78)))));
    LOBYTE(v31[13].__vftable) = 1;
    *a1 = v32;
    a1[1] = v31;
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v109 = *v26;
    uint64_t v110 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v110 = (uint64_t **)v109;
          unint64_t v111 = v109[4];
          if (v24 >= v111) {
            break;
          }
          uint64_t v109 = *v110;
          uint64_t v26 = v110;
          if (!*v110) {
            goto LABEL_27;
          }
        }
        if (v111 >= v24) {
          break;
        }
        uint64_t v109 = v110[1];
        if (!v109)
        {
          uint64_t v26 = v110 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_27:
      uint64_t v112 = (uint64_t *)operator new(0x38uLL);
      v112[4] = v24;
      v112[5] = (uint64_t)v32;
      v112[6] = (uint64_t)v31;
      *uint64_t v112 = 0;
      v112[1] = 0;
      v112[2] = (uint64_t)v110;
      *uint64_t v26 = v112;
      uint64_t v113 = **(void **)(a2 + 96);
      if (v113)
      {
        *(void *)(a2 + 96) = v113;
        uint64_t v112 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v112);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A2251A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v29);
  _Unwind_Resume(a1);
}

void md::PolylinePipelineStateManager<md::Ribbons::GradientPolylineOverlayRibbonDescriptor,ggl::GradientPolylineOverlayRibbon::FillPipelineState,std::shared_ptr<ggl::GradientPolylineOverlayFillShader>>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, char *a3)
{
  unsigned __int8 v4 = a3[1];
  unsigned __int8 v5 = a3[2];
  int8x16_t v6 = (int8x16_t)*a3;
  *(__int32 *)((char *)v6.i32 + 1) = v4;
  v6.i16[1] = v5;
  unsigned __int8 v7 = a3[3];
  *(__int32 *)((char *)&v6.i32[2] + 1) = v7;
  int8x16_t v8 = vceqzq_s8(v6);
  int16x8_t v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  int32x4_t v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  int8x16_t v12 = v11;
  int16x8_t v13 = vmovl_high_s8(v8);
  int32x4_t v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  int8x16_t v15 = v11;
  int32x4_t v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  int8x16_t v17 = v11;
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  int8x16_t v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  int8x16_t v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  int8x16_t v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  int8x16_t v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  unint64_t v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v22), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v20), vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v17), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC980, v12), vbicq_s8((int8x16_t)xmmword_1A28FC990, v15)))));
  unint64_t v24 = v23;
  uint64_t v26 = (uint64_t **)(a2 + 104);
  double v25 = *(void **)(a2 + 104);
  if (!v25) {
    goto LABEL_12;
  }
  uint64_t v27 = (uint64_t **)(a2 + 104);
  do
  {
    unint64_t v28 = v25[4];
    BOOL v29 = v28 >= v23;
    if (v28 >= v23) {
      int v30 = v25;
    }
    else {
      int v30 = v25 + 1;
    }
    if (v29) {
      uint64_t v27 = (uint64_t **)v25;
    }
    double v25 = (void *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    uint64_t v114 = v27[6];
    a1[1] = (std::__shared_weak_count *)v114;
    if (v114) {
      atomic_fetch_add_explicit(v114 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    char v115 = *a3;
    uint64_t v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588BB0;
    BOOL v32 = v31 + 1;
    long long v117 = *(_OWORD *)(a2 + 16);
    long long v118 = *(_OWORD *)(a2 + 32);
    {
      {
        {
          {
            ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::GradientPolylineOverlayRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1EB319E98 = 1;
        }
        ggl::GradientPolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::GradientPolylineOverlayRibbon::DefaultVbo>::typedReflection(void)::r;
        *(void *)algn_1EB3197A8 = &ggl::GradientPolylineOverlayRibbon::pipelineDataFillPipelineDeviceStructs(void)::ref;
        qword_1EB3197B0 = 0;
        {
          ggl::GradientPolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
          unk_1EB319840 = ggl::Tile::Transform::reflection(void)::reflection;
          qword_1EB319848 = (uint64_t)ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
          unk_1EB319850 = ggl::GradientPolylineOverlayRibbon::GradientInfo::reflection(void)::reflection;
        }
        qword_1EB3197B8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineDataFillPipelineConstantStructs(void)::ref;
        unk_1EB3197C0 = xmmword_1A28FE1F0;
      }
      ggl::GradientPolylineOverlayRibbon::FillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GradientPolylineOverlayRibbon::FillPipelineSetup::typedReflection(void)::ref;
      {
        ggl::GradientPolylineOverlayFillShader::typedReflection(void)::ref = (uint64_t)"GradientPolylineOverlayFillShader";
        {
          qword_1EB32AAE0 = (uint64_t)"GradientPolylineOverlayFillShader";
          unk_1EB32AAE8 = ggl::gradientPolylineOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
          qword_1EB32AAF0 = 1;
          unk_1EB32AAF8 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AB00 = 3;
          unk_1EB32AB08 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1EB32AB10 = 0;
          unk_1EB32AB18 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref = 878884475;
          qword_1EB32AB20 = 0;
          unk_1EB32AB28 = &ggl::gradientPolylineOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AB38 = 0;
          unk_1EB32AB40 = 0;
          qword_1EB32AB30 = 0;
        }
        qword_1EB3236F0 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderVertexFunctionDescriptor(void)::ref;
        dword_1EB3236F8 = 878884475;
        {
          ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref = 0x1AE8C75D5;
          qword_1EB32AE78 = (uint64_t)"GradientPolylineOverlayFillShader";
          unk_1EB32AE80 = 0;
          qword_1EB32AE88 = 0;
          unk_1EB32AE90 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1EB32AE98 = 2;
          unk_1EB32AEA0 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1EB32AEA8 = 0;
          unk_1EB32AEB0 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1EB32AEB8 = 1;
          unk_1EB32AEC0 = &ggl::gradientPolylineOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1EB32AED0 = 0;
          unk_1EB32AED8 = 0;
          qword_1EB32AEC8 = 1;
        }
        qword_1EB323700 = (uint64_t)&ggl::gradientPolylineOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
        dword_1EB323708 = -1366526507;
        qword_1EB323710 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderConstants(void)::ref;
        unk_1EB323718 = 4;
        qword_1EB323720 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderTextures(void)::ref;
        unk_1EB323728 = 1;
        qword_1EB323730 = (uint64_t)ggl::gradientPolylineOverlayFillShaderShaderSamplers(void)::ref;
        unk_1EB323738 = 1;
      }
      qword_1E958E030 = (uint64_t)&ggl::GradientPolylineOverlayFillShader::typedReflection(void)::ref;
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9592B60 = 0;
        qword_1E9592B68 = (uint64_t)"";
        dword_1E9592B70 = 0;
        qword_1E9592B78 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineAttributeBinding_0(void)::attr;
        unk_1E9592B80 = 5;
      }
      qword_1E958E038 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineAttributeStructBinding(void)::attr;
      unk_1E958E040 = 1;
      qword_1E958E048 = 0;
      unk_1E958E050 = 1;
      qword_1E958E058 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineDeviceStructBinding(void)::ref;
      unk_1E958E060 = 0;
      {
        ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9592BA0 = 0;
        qword_1E9592BA8 = (uint64_t)"view";
        dword_1E9592BB0 = 3;
        qword_1E9592BB8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantViewBinding(void)::reflection;
        unk_1E9592BC0 = xmmword_1A28FCEB0;
        qword_1E9592BD0 = 1;
        unk_1E9592BD8 = "transform";
        dword_1E9592BE0 = 3;
        qword_1E9592BE8 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1E9592BF0 = xmmword_1A28FCF70;
        qword_1E9592C00 = 2;
        unk_1E9592C08 = "style";
        dword_1E9592C10 = 3;
        qword_1E9592C18 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantStyleBinding(void)::reflection;
        unk_1E9592C20 = xmmword_1A28FE700;
        qword_1E9592C30 = 3;
        unk_1E9592C38 = "gradientInfo";
        dword_1E9592C40 = 3;
        qword_1E9592C48 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantGradientInfoBinding(void)::reflection;
        unk_1E9592C50 = 4;
      }
      qword_1E958E068 = (uint64_t)&ggl::GradientPolylineOverlayRibbon::pipelineStateFillPipelineConstantStructBinding(void)::ref;
      unk_1E958E070 = 4;
    }
    uint64_t v33 = *(std::__shared_weak_count_vtbl **)a2;
    BOOL v34 = *(std::__shared_weak_count **)(a2 + 8);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)uint64_t v119 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v119[12] = *(_OWORD *)(a2 + 60);
    long long v35 = *(_OWORD *)(a2 + 76);
    char v36 = *(unsigned char *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::GradientPolylineOverlayRibbon::FillPipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v33;
    v31[3].__shared_owners_ = (uint64_t)v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v117;
    *(_OWORD *)&v31[12].__shared_owners_ = v118;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v119[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v119;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v35;
    BYTE4(v31[5].__shared_owners_) = v36;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v115;
    BYTE1(v31[13].__shared_weak_owners_) = v4;
    BYTE2(v31[13].__shared_weak_owners_) = v5;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 3) = 0;
    *(_WORD *)((char *)&v31[13].__shared_weak_owners_ + 7) = 0;
    BYTE1(v31[14].__vftable) = v7;
    WORD1(v31[14].__vftable) = 0;
    int8x16_t v37 = *(int8x16_t *)&v31[14].__shared_owners_;
    int8x16_t v38 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    int16x8_t v39 = vmovl_high_s8(v38);
    int32x4_t v40 = vmovl_s16(*(int16x4_t *)v39.i8);
    v41.i64[0] = v40.u32[0];
    v41.i64[1] = v40.u32[1];
    int8x16_t v42 = v41;
    int16x8_t v43 = vmovl_s8(*(int8x8_t *)v38.i8);
    int32x4_t v44 = vmovl_s16(*(int16x4_t *)v43.i8);
    v41.i64[0] = v44.u32[0];
    v41.i64[1] = v44.u32[1];
    int8x16_t v45 = v41;
    int32x4_t v46 = vmovl_high_s16(v39);
    v41.i64[0] = v46.u32[0];
    v41.i64[1] = v46.u32[1];
    int8x16_t v47 = v41;
    int32x4_t v48 = vmovl_high_s16(v43);
    v41.i64[0] = v48.u32[0];
    v41.i64[1] = v48.u32[1];
    int8x16_t v49 = v41;
    v41.i64[0] = v40.u32[2];
    v41.i64[1] = v40.u32[3];
    int8x16_t v50 = v41;
    v41.i64[0] = v44.u32[2];
    v41.i64[1] = v44.u32[3];
    int8x16_t v51 = v41;
    v41.i64[0] = v46.u32[2];
    v41.i64[1] = v46.u32[3];
    int8x16_t v52 = v41;
    v41.i64[0] = v48.u32[2];
    v41.i64[1] = v48.u32[3];
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF560108;
    int8x16_t v53 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v41);
    int8x16_t v54 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v52);
    int8x16_t v55 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v51);
    int8x16_t v56 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v47);
    int8x16_t v57 = vceqzq_s8(v37);
    int16x8_t v58 = vmovl_high_s8(v57);
    int32x4_t v59 = vmovl_s16(*(int16x4_t *)v58.i8);
    v41.i64[0] = v59.u32[0];
    v41.i64[1] = v59.u32[1];
    int8x16_t v60 = v41;
    int16x8_t v61 = vmovl_s8(*(int8x8_t *)v57.i8);
    int32x4_t v62 = vmovl_s16(*(int16x4_t *)v61.i8);
    v41.i64[0] = v62.u32[0];
    v41.i64[1] = v62.u32[1];
    int8x16_t v63 = v41;
    int32x4_t v64 = vmovl_high_s16(v58);
    v41.i64[0] = v64.u32[0];
    v41.i64[1] = v64.u32[1];
    int8x16_t v65 = v41;
    int32x4_t v66 = vmovl_high_s16(v61);
    v41.i64[0] = v66.u32[0];
    v41.i64[1] = v66.u32[1];
    int8x16_t v67 = v41;
    v41.i64[0] = v59.u32[2];
    v41.i64[1] = v59.u32[3];
    int8x16_t v68 = v41;
    v41.i64[0] = v62.u32[2];
    v41.i64[1] = v62.u32[3];
    int8x16_t v69 = v41;
    v41.i64[0] = v64.u32[2];
    v41.i64[1] = v64.u32[3];
    int8x16_t v70 = v41;
    v41.i64[0] = v66.u32[2];
    v41.i64[1] = v66.u32[3];
    int8x16_t v71 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v70);
    int8x16_t v72 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v60), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v42));
    int8x16_t v73 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v63), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v45));
    int8x16_t v74 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v65), v56);
    int8x16_t v75 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v67), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v49));
    int8x16_t v76 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v68), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v50));
    int8x16_t v77 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v69), v55);
    int8x16_t v78 = vorrq_s8(v71, v54);
    int8x16_t v79 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v41), v53);
    int8x16_t v80 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    int16x8_t v81 = vmovl_s8(*(int8x8_t *)v80.i8);
    int32x4_t v82 = vmovl_high_s16(v81);
    v41.i64[0] = v82.i32[2];
    v41.i64[1] = v82.i32[3];
    int8x16_t v83 = v41;
    int16x8_t v84 = vmovl_high_s8(v80);
    int32x4_t v85 = vmovl_high_s16(v84);
    v41.i64[0] = v85.i32[2];
    v41.i64[1] = v85.i32[3];
    int8x16_t v86 = v41;
    int32x4_t v87 = vmovl_s16(*(int16x4_t *)v81.i8);
    v41.i64[0] = v87.i32[2];
    v41.i64[1] = v87.i32[3];
    int8x16_t v88 = v41;
    int32x4_t v89 = vmovl_s16(*(int16x4_t *)v84.i8);
    v41.i64[0] = v89.i32[2];
    v41.i64[1] = v89.i32[3];
    int8x16_t v90 = v41;
    v41.i64[0] = v82.i32[0];
    v41.i64[1] = v82.i32[1];
    int8x16_t v91 = v41;
    v41.i64[0] = v85.i32[0];
    v41.i64[1] = v85.i32[1];
    int8x16_t v92 = v41;
    v41.i64[0] = v87.i32[0];
    v41.i64[1] = v87.i32[1];
    int8x16_t v93 = v41;
    v41.i64[0] = v89.i32[0];
    v41.i64[1] = v89.i32[1];
    int8x16_t v94 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v41);
    int8x16_t v95 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    int16x8_t v96 = vmovl_high_s8(v95);
    int32x4_t v97 = vmovl_s16(*(int16x4_t *)v96.i8);
    v41.i64[0] = v97.i32[0];
    v41.i64[1] = v97.i32[1];
    int8x16_t v98 = v41;
    int16x8_t v99 = vmovl_s8(*(int8x8_t *)v95.i8);
    int32x4_t v100 = vmovl_s16(*(int16x4_t *)v99.i8);
    v41.i64[0] = v100.i32[0];
    v41.i64[1] = v100.i32[1];
    int8x16_t v101 = v41;
    int32x4_t v102 = vmovl_high_s16(v96);
    v41.i64[0] = v102.i32[0];
    v41.i64[1] = v102.i32[1];
    int8x16_t v103 = v41;
    int32x4_t v104 = vmovl_high_s16(v99);
    v41.i64[0] = v104.i32[0];
    v41.i64[1] = v104.i32[1];
    int8x16_t v105 = v41;
    v41.i64[0] = v97.i32[2];
    v41.i64[1] = v97.i32[3];
    int8x16_t v106 = v41;
    v41.i64[0] = v100.i32[2];
    v41.i64[1] = v100.i32[3];
    int8x16_t v107 = v41;
    v41.i64[0] = v102.i32[2];
    v41.i64[1] = v102.i32[3];
    int8x16_t v108 = v41;
    v41.i64[0] = v104.i32[2];
    v41.i64[1] = v104.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v101), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v93)), v73), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v98), v94), v72)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v105), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v91)), v75), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v103),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v92)),
                                                    v74))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v107), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v88)), v77), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v106), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v90)), v76)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v41), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v83)), v79), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v108),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v86)),
                                                    v78)))));
    LOBYTE(v31[13].__vftable) = 1;
    *a1 = v32;
    a1[1] = v31;
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v109 = *v26;
    uint64_t v110 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v110 = (uint64_t **)v109;
          unint64_t v111 = v109[4];
          if (v24 >= v111) {
            break;
          }
          uint64_t v109 = *v110;
          uint64_t v26 = v110;
          if (!*v110) {
            goto LABEL_27;
          }
        }
        if (v111 >= v24) {
          break;
        }
        uint64_t v109 = v110[1];
        if (!v109)
        {
          uint64_t v26 = v110 + 1;
          goto LABEL_27;
        }
      }
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_27:
      uint64_t v112 = (uint64_t *)operator new(0x38uLL);
      v112[4] = v24;
      v112[5] = (uint64_t)v32;
      v112[6] = (uint64_t)v31;
      *uint64_t v112 = 0;
      v112[1] = 0;
      v112[2] = (uint64_t)v110;
      *uint64_t v26 = v112;
      uint64_t v113 = **(void **)(a2 + 96);
      if (v113)
      {
        *(void *)(a2 + 96) = v113;
        uint64_t v112 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v112);
      ++*(void *)(a2 + 112);
    }
  }
}

void sub_1A22526AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v29);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::FillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::PolylineOverlayStyleConstants::~PolylineOverlayStyleConstants(md::PolylineOverlayStyleConstants *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unsigned int v3 = (std::__shared_weak_count *)*((void *)this + 11);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v3 = (std::__shared_weak_count *)*((void *)this + 11);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  unsigned __int8 v4 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unsigned __int8 v5 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned __int8 v5 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  int8x16_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unsigned __int8 v7 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v7) {
      goto LABEL_19;
    }
  }
  else
  {
    unsigned __int8 v7 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v7) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_19:
  int8x16_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void ggl::ConstantDataTyped<ggl::PolylineOverlayRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::PolylineOverlayRibbon::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolylineOverlayRibbon::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolylineOverlayRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolylineOverlayRibbon::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

md::PolylineOverlayStyle *md::PolylineOverlayStyle::PolylineOverlayStyle(md::PolylineOverlayStyle *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 114) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *((void *)this + 19) = 0x3F80000000000000;
  *(void *)((char *)this + 164) = 0;
  *(void *)((char *)this + 180) = 0;
  *(void *)((char *)this + 172) = 0;
  *((_DWORD *)this + 47) = 0;
  uint64_t v2 = +[VKSharedResourcesManager sharedResources];
  int v3 = *(unsigned __int8 *)([v2 gglDevice] + 20);

  *((unsigned char *)this + 193) = v3;
  *((_DWORD *)this + 49) = 0;
  *(void *)((char *)this + 140) = 0;
  *(void *)((char *)this + 132) = 0;
  *((_DWORD *)this + 37) = 0;
  *((void *)this + 22) = *((void *)this + 21);
  *((unsigned char *)this + 192) = 0;
  if (v3)
  {
    unsigned __int8 v4 = operator new(0xE8uLL);
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = &unk_1EF586AA8;
    uint64_t v5 = ggl::BufferData::BufferData((uint64_t)(v4 + 3), qword_1E95520E8, 2, 1, 6, 1);
    v4[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
    v4[3] = &unk_1EF55E078;
    int8x16_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
    *((void *)this + 1) = v5;
    *((void *)this + 2) = v4;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    unsigned __int8 v7 = operator new(0xE8uLL);
    v7[1] = 0;
    void v7[2] = 0;
    *unsigned __int8 v7 = &unk_1EF586AA8;
    uint64_t v8 = ggl::BufferData::BufferData((uint64_t)(v7 + 3), qword_1E95520E8, 2, 1, 6, 1);
    v7[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
    v7[3] = &unk_1EF55E078;
    int16x8_t v9 = (std::__shared_weak_count *)*((void *)this + 8);
    *((void *)this + 7) = v8;
    *((void *)this + 8) = v7;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  int32x4_t v10 = operator new(0xE8uLL);
  v10[1] = 0;
  v10[2] = 0;
  *int32x4_t v10 = &unk_1EF586AA8;
  uint64_t v11 = ggl::BufferData::BufferData((uint64_t)(v10 + 3), qword_1E95520E8, 2, 1, 6, 1);
  v10[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
  v10[3] = &unk_1EF55E078;
  int8x16_t v12 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + 3) = v11;
  *((void *)this + 4) = v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  int16x8_t v13 = operator new(0xE8uLL);
  v13[1] = 0;
  void v13[2] = 0;
  *int16x8_t v13 = &unk_1EF586AA8;
  uint64_t v14 = ggl::BufferData::BufferData((uint64_t)(v13 + 3), qword_1E95520E8, 2, 1, 6, 1);
  v13[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
  void v13[3] = &unk_1EF55E078;
  int8x16_t v15 = (std::__shared_weak_count *)*((void *)this + 6);
  *((void *)this + 5) = v14;
  *((void *)this + 6) = v13;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  int32x4_t v16 = operator new(0xE8uLL);
  v16[1] = 0;
  v16[2] = 0;
  void *v16 = &unk_1EF586AA8;
  uint64_t v17 = ggl::BufferData::BufferData((uint64_t)(v16 + 3), qword_1E95520E8, 2, 1, 6, 1);
  v16[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
  v16[3] = &unk_1EF55E078;
  int32x4_t v18 = (std::__shared_weak_count *)*((void *)this + 10);
  *((void *)this + 9) = v17;
  *((void *)this + 10) = v16;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  int8x16_t v19 = operator new(0xE8uLL);
  v19[1] = 0;
  v19[2] = 0;
  *int8x16_t v19 = &unk_1EF586AA8;
  uint64_t v20 = ggl::BufferData::BufferData((uint64_t)(v19 + 3), qword_1E95520E8, 2, 1, 6, 1);
  v19[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
  v19[3] = &unk_1EF55E078;
  int8x16_t v21 = (std::__shared_weak_count *)*((void *)this + 12);
  *((void *)this + 11) = v20;
  *((void *)this + 12) = v19;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  int8x16_t v22 = operator new(0xE8uLL);
  v22[1] = 0;
  void v22[2] = 0;
  void *v22 = &unk_1EF586AA8;
  uint64_t v23 = ggl::BufferData::BufferData((uint64_t)(v22 + 3), qword_1E95520E8, 2, 1, 6, 1);
  v22[28] = ggl::PolylineOverlayRibbon::Style::reflection(void)::reflection;
  void v22[3] = &unk_1EF55E078;
  unint64_t v24 = (std::__shared_weak_count *)*((void *)this + 14);
  *((void *)this + 13) = v23;
  *((void *)this + 14) = v22;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  return this;
}